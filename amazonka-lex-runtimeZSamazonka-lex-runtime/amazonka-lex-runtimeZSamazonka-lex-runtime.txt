-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package amazonka-lex-runtimeZSamazonka-lex-runtime
@version 1.6.1


module Network.AWS.LexRuntime.Types.ActiveContextTimeToLive

-- | The length of time or number of turns that a context remains active.
--   
--   <i>See:</i> <a>newActiveContextTimeToLive</a> smart constructor.
data ActiveContextTimeToLive
ActiveContextTimeToLive' :: Maybe Natural -> Maybe Natural -> ActiveContextTimeToLive

-- | The number of seconds that the context should be active after it is
--   first sent in a <tt>PostContent</tt> or <tt>PostText</tt> response.
--   You can set the value between 5 and 86,400 seconds (24 hours).
[$sel:timeToLiveInSeconds:ActiveContextTimeToLive'] :: ActiveContextTimeToLive -> Maybe Natural

-- | The number of conversation turns that the context should be active. A
--   conversation turn is one <tt>PostContent</tt> or <tt>PostText</tt>
--   request and the corresponding response from Amazon Lex.
[$sel:turnsToLive:ActiveContextTimeToLive'] :: ActiveContextTimeToLive -> Maybe Natural

-- | Create a value of <a>ActiveContextTimeToLive</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeToLiveInSeconds:ActiveContextTimeToLive'</a>,
--   <a>activeContextTimeToLive_timeToLiveInSeconds</a> - The number of
--   seconds that the context should be active after it is first sent in a
--   <tt>PostContent</tt> or <tt>PostText</tt> response. You can set the
--   value between 5 and 86,400 seconds (24 hours).
--   
--   <a>$sel:turnsToLive:ActiveContextTimeToLive'</a>,
--   <a>activeContextTimeToLive_turnsToLive</a> - The number of
--   conversation turns that the context should be active. A conversation
--   turn is one <tt>PostContent</tt> or <tt>PostText</tt> request and the
--   corresponding response from Amazon Lex.
newActiveContextTimeToLive :: ActiveContextTimeToLive

-- | The number of seconds that the context should be active after it is
--   first sent in a <tt>PostContent</tt> or <tt>PostText</tt> response.
--   You can set the value between 5 and 86,400 seconds (24 hours).
activeContextTimeToLive_timeToLiveInSeconds :: Lens' ActiveContextTimeToLive (Maybe Natural)

-- | The number of conversation turns that the context should be active. A
--   conversation turn is one <tt>PostContent</tt> or <tt>PostText</tt>
--   request and the corresponding response from Amazon Lex.
activeContextTimeToLive_turnsToLive :: Lens' ActiveContextTimeToLive (Maybe Natural)
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.ActiveContextTimeToLive.ActiveContextTimeToLive
instance GHC.Show.Show Network.AWS.LexRuntime.Types.ActiveContextTimeToLive.ActiveContextTimeToLive
instance GHC.Read.Read Network.AWS.LexRuntime.Types.ActiveContextTimeToLive.ActiveContextTimeToLive
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.ActiveContextTimeToLive.ActiveContextTimeToLive
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.ActiveContextTimeToLive.ActiveContextTimeToLive
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.ActiveContextTimeToLive.ActiveContextTimeToLive
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.ActiveContextTimeToLive.ActiveContextTimeToLive
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.LexRuntime.Types.ActiveContextTimeToLive.ActiveContextTimeToLive


module Network.AWS.LexRuntime.Types.ActiveContext

-- | A context is a variable that contains information about the current
--   state of the conversation between a user and Amazon Lex. Context can
--   be set automatically by Amazon Lex when an intent is fulfilled, or it
--   can be set at runtime using the <tt>PutContent</tt>, <tt>PutText</tt>,
--   or <tt>PutSession</tt> operation.
--   
--   <i>See:</i> <a>newActiveContext</a> smart constructor.
data ActiveContext
ActiveContext' :: Text -> ActiveContextTimeToLive -> HashMap Text (Sensitive Text) -> ActiveContext

-- | The name of the context.
[$sel:name:ActiveContext'] :: ActiveContext -> Text

-- | The length of time or number of turns that a context remains active.
[$sel:timeToLive:ActiveContext'] :: ActiveContext -> ActiveContextTimeToLive

-- | State variables for the current context. You can use these values as
--   default values for slots in subsequent events.
[$sel:parameters:ActiveContext'] :: ActiveContext -> HashMap Text (Sensitive Text)

-- | Create a value of <a>ActiveContext</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:ActiveContext'</a>, <a>activeContext_name</a> - The name
--   of the context.
--   
--   <a>$sel:timeToLive:ActiveContext'</a>, <a>activeContext_timeToLive</a>
--   - The length of time or number of turns that a context remains active.
--   
--   <a>$sel:parameters:ActiveContext'</a>, <a>activeContext_parameters</a>
--   - State variables for the current context. You can use these values as
--   default values for slots in subsequent events.
newActiveContext :: Text -> ActiveContextTimeToLive -> ActiveContext

-- | The name of the context.
activeContext_name :: Lens' ActiveContext Text

-- | The length of time or number of turns that a context remains active.
activeContext_timeToLive :: Lens' ActiveContext ActiveContextTimeToLive

-- | State variables for the current context. You can use these values as
--   default values for slots in subsequent events.
activeContext_parameters :: Lens' ActiveContext (HashMap Text Text)
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.ActiveContext.ActiveContext
instance GHC.Show.Show Network.AWS.LexRuntime.Types.ActiveContext.ActiveContext
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.ActiveContext.ActiveContext
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.ActiveContext.ActiveContext
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.ActiveContext.ActiveContext
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.ActiveContext.ActiveContext
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.LexRuntime.Types.ActiveContext.ActiveContext


module Network.AWS.LexRuntime.Types.Button

-- | Represents an option to be shown on the client platform (Facebook,
--   Slack, etc.)
--   
--   <i>See:</i> <a>newButton</a> smart constructor.
data Button
Button' :: Text -> Text -> Button

-- | Text that is visible to the user on the button.
[$sel:text:Button'] :: Button -> Text

-- | The value sent to Amazon Lex when a user chooses the button. For
--   example, consider button text "NYC." When the user chooses the button,
--   the value sent can be "New York City."
[$sel:value:Button'] :: Button -> Text

-- | Create a value of <a>Button</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:text:Button'</a>, <a>button_text</a> - Text that is visible to
--   the user on the button.
--   
--   <a>$sel:value:Button'</a>, <a>button_value</a> - The value sent to
--   Amazon Lex when a user chooses the button. For example, consider
--   button text "NYC." When the user chooses the button, the value sent
--   can be "New York City."
newButton :: Text -> Text -> Button

-- | Text that is visible to the user on the button.
button_text :: Lens' Button Text

-- | The value sent to Amazon Lex when a user chooses the button. For
--   example, consider button text "NYC." When the user chooses the button,
--   the value sent can be "New York City."
button_value :: Lens' Button Text
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.Button.Button
instance GHC.Show.Show Network.AWS.LexRuntime.Types.Button.Button
instance GHC.Read.Read Network.AWS.LexRuntime.Types.Button.Button
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.Button.Button
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.Button.Button
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.Button.Button
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.Button.Button


module Network.AWS.LexRuntime.Types.ConfirmationStatus
newtype ConfirmationStatus
ConfirmationStatus' :: Text -> ConfirmationStatus
[fromConfirmationStatus] :: ConfirmationStatus -> Text
pattern ConfirmationStatus_Confirmed :: ConfirmationStatus
pattern ConfirmationStatus_Denied :: ConfirmationStatus
pattern ConfirmationStatus_None :: ConfirmationStatus
instance Network.AWS.Data.XML.ToXML Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Network.AWS.Data.XML.FromXML Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Network.AWS.Data.Query.ToQuery Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Network.AWS.Data.Headers.ToHeader Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Network.AWS.Data.Log.ToLog Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Network.AWS.Data.Text.ToText Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Network.AWS.Data.Text.FromText Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance GHC.Classes.Ord Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance GHC.Read.Read Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus
instance GHC.Show.Show Network.AWS.LexRuntime.Types.ConfirmationStatus.ConfirmationStatus


module Network.AWS.LexRuntime.Types.ContentType
newtype ContentType
ContentType' :: Text -> ContentType
[fromContentType] :: ContentType -> Text
pattern ContentType_Application_vnd_amazonaws_card_generic :: ContentType
instance Network.AWS.Data.XML.ToXML Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Network.AWS.Data.XML.FromXML Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Network.AWS.Data.Query.ToQuery Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Network.AWS.Data.Log.ToLog Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Network.AWS.Data.Text.ToText Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Network.AWS.Data.Text.FromText Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.ContentType.ContentType
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.ContentType.ContentType
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.ContentType.ContentType
instance GHC.Classes.Ord Network.AWS.LexRuntime.Types.ContentType.ContentType
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.ContentType.ContentType
instance GHC.Read.Read Network.AWS.LexRuntime.Types.ContentType.ContentType
instance GHC.Show.Show Network.AWS.LexRuntime.Types.ContentType.ContentType


module Network.AWS.LexRuntime.Types.DialogActionType
newtype DialogActionType
DialogActionType' :: Text -> DialogActionType
[fromDialogActionType] :: DialogActionType -> Text
pattern DialogActionType_Close :: DialogActionType
pattern DialogActionType_ConfirmIntent :: DialogActionType
pattern DialogActionType_Delegate :: DialogActionType
pattern DialogActionType_ElicitIntent :: DialogActionType
pattern DialogActionType_ElicitSlot :: DialogActionType
instance Network.AWS.Data.XML.ToXML Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Network.AWS.Data.XML.FromXML Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Network.AWS.Data.Query.ToQuery Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Network.AWS.Data.Log.ToLog Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Network.AWS.Data.Text.ToText Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Network.AWS.Data.Text.FromText Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance GHC.Classes.Ord Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance GHC.Read.Read Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType
instance GHC.Show.Show Network.AWS.LexRuntime.Types.DialogActionType.DialogActionType


module Network.AWS.LexRuntime.Types.DialogState
newtype DialogState
DialogState' :: Text -> DialogState
[fromDialogState] :: DialogState -> Text
pattern DialogState_ConfirmIntent :: DialogState
pattern DialogState_ElicitIntent :: DialogState
pattern DialogState_ElicitSlot :: DialogState
pattern DialogState_Failed :: DialogState
pattern DialogState_Fulfilled :: DialogState
pattern DialogState_ReadyForFulfillment :: DialogState
instance Network.AWS.Data.XML.ToXML Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Network.AWS.Data.XML.FromXML Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Network.AWS.Data.Query.ToQuery Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Network.AWS.Data.Headers.ToHeader Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Network.AWS.Data.Log.ToLog Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Network.AWS.Data.Text.ToText Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Network.AWS.Data.Text.FromText Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.DialogState.DialogState
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.DialogState.DialogState
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.DialogState.DialogState
instance GHC.Classes.Ord Network.AWS.LexRuntime.Types.DialogState.DialogState
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.DialogState.DialogState
instance GHC.Read.Read Network.AWS.LexRuntime.Types.DialogState.DialogState
instance GHC.Show.Show Network.AWS.LexRuntime.Types.DialogState.DialogState


module Network.AWS.LexRuntime.Types.FulfillmentState
newtype FulfillmentState
FulfillmentState' :: Text -> FulfillmentState
[fromFulfillmentState] :: FulfillmentState -> Text
pattern FulfillmentState_Failed :: FulfillmentState
pattern FulfillmentState_Fulfilled :: FulfillmentState
pattern FulfillmentState_ReadyForFulfillment :: FulfillmentState
instance Network.AWS.Data.XML.ToXML Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Network.AWS.Data.XML.FromXML Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Network.AWS.Data.Query.ToQuery Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Network.AWS.Data.Headers.ToHeader Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Network.AWS.Data.Log.ToLog Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Network.AWS.Data.Text.ToText Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Network.AWS.Data.Text.FromText Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance GHC.Classes.Ord Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance GHC.Read.Read Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState
instance GHC.Show.Show Network.AWS.LexRuntime.Types.FulfillmentState.FulfillmentState


module Network.AWS.LexRuntime.Types.GenericAttachment

-- | Represents an option rendered to the user when a prompt is shown. It
--   could be an image, a button, a link, or text.
--   
--   <i>See:</i> <a>newGenericAttachment</a> smart constructor.
data GenericAttachment
GenericAttachment' :: Maybe Text -> Maybe [Button] -> Maybe Text -> Maybe Text -> Maybe Text -> GenericAttachment

-- | The title of the option.
[$sel:title:GenericAttachment'] :: GenericAttachment -> Maybe Text

-- | The list of options to show to the user.
[$sel:buttons:GenericAttachment'] :: GenericAttachment -> Maybe [Button]

-- | The URL of an attachment to the response card.
[$sel:attachmentLinkUrl:GenericAttachment'] :: GenericAttachment -> Maybe Text

-- | The URL of an image that is displayed to the user.
[$sel:imageUrl:GenericAttachment'] :: GenericAttachment -> Maybe Text

-- | The subtitle shown below the title.
[$sel:subTitle:GenericAttachment'] :: GenericAttachment -> Maybe Text

-- | Create a value of <a>GenericAttachment</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:title:GenericAttachment'</a>, <a>genericAttachment_title</a> -
--   The title of the option.
--   
--   <a>$sel:buttons:GenericAttachment'</a>,
--   <a>genericAttachment_buttons</a> - The list of options to show to the
--   user.
--   
--   <a>$sel:attachmentLinkUrl:GenericAttachment'</a>,
--   <a>genericAttachment_attachmentLinkUrl</a> - The URL of an attachment
--   to the response card.
--   
--   <a>$sel:imageUrl:GenericAttachment'</a>,
--   <a>genericAttachment_imageUrl</a> - The URL of an image that is
--   displayed to the user.
--   
--   <a>$sel:subTitle:GenericAttachment'</a>,
--   <a>genericAttachment_subTitle</a> - The subtitle shown below the
--   title.
newGenericAttachment :: GenericAttachment

-- | The title of the option.
genericAttachment_title :: Lens' GenericAttachment (Maybe Text)

-- | The list of options to show to the user.
genericAttachment_buttons :: Lens' GenericAttachment (Maybe [Button])

-- | The URL of an attachment to the response card.
genericAttachment_attachmentLinkUrl :: Lens' GenericAttachment (Maybe Text)

-- | The URL of an image that is displayed to the user.
genericAttachment_imageUrl :: Lens' GenericAttachment (Maybe Text)

-- | The subtitle shown below the title.
genericAttachment_subTitle :: Lens' GenericAttachment (Maybe Text)
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.GenericAttachment.GenericAttachment
instance GHC.Show.Show Network.AWS.LexRuntime.Types.GenericAttachment.GenericAttachment
instance GHC.Read.Read Network.AWS.LexRuntime.Types.GenericAttachment.GenericAttachment
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.GenericAttachment.GenericAttachment
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.GenericAttachment.GenericAttachment
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.GenericAttachment.GenericAttachment
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.GenericAttachment.GenericAttachment


module Network.AWS.LexRuntime.Types.IntentConfidence

-- | Provides a score that indicates the confidence that Amazon Lex has
--   that an intent is the one that satisfies the user's intent.
--   
--   <i>See:</i> <a>newIntentConfidence</a> smart constructor.
data IntentConfidence
IntentConfidence' :: Maybe Double -> IntentConfidence

-- | A score that indicates how confident Amazon Lex is that an intent
--   satisfies the user's intent. Ranges between 0.00 and 1.00. Higher
--   scores indicate higher confidence.
[$sel:score:IntentConfidence'] :: IntentConfidence -> Maybe Double

-- | Create a value of <a>IntentConfidence</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:score:IntentConfidence'</a>, <a>intentConfidence_score</a> - A
--   score that indicates how confident Amazon Lex is that an intent
--   satisfies the user's intent. Ranges between 0.00 and 1.00. Higher
--   scores indicate higher confidence.
newIntentConfidence :: IntentConfidence

-- | A score that indicates how confident Amazon Lex is that an intent
--   satisfies the user's intent. Ranges between 0.00 and 1.00. Higher
--   scores indicate higher confidence.
intentConfidence_score :: Lens' IntentConfidence (Maybe Double)
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.IntentConfidence.IntentConfidence
instance GHC.Show.Show Network.AWS.LexRuntime.Types.IntentConfidence.IntentConfidence
instance GHC.Read.Read Network.AWS.LexRuntime.Types.IntentConfidence.IntentConfidence
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.IntentConfidence.IntentConfidence
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.IntentConfidence.IntentConfidence
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.IntentConfidence.IntentConfidence
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.IntentConfidence.IntentConfidence


module Network.AWS.LexRuntime.Types.IntentSummary

-- | Provides information about the state of an intent. You can use this
--   information to get the current state of an intent so that you can
--   process the intent, or so that you can return the intent to its
--   previous state.
--   
--   <i>See:</i> <a>newIntentSummary</a> smart constructor.
data IntentSummary
IntentSummary' :: Maybe Text -> Maybe FulfillmentState -> Maybe (Sensitive (HashMap Text Text)) -> Maybe Text -> Maybe Text -> Maybe ConfirmationStatus -> DialogActionType -> IntentSummary

-- | The name of the intent.
[$sel:intentName:IntentSummary'] :: IntentSummary -> Maybe Text

-- | The fulfillment state of the intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
[$sel:fulfillmentState:IntentSummary'] :: IntentSummary -> Maybe FulfillmentState

-- | Map of the slots that have been gathered and their values.
[$sel:slots:IntentSummary'] :: IntentSummary -> Maybe (Sensitive (HashMap Text Text))

-- | A user-defined label that identifies a particular intent. You can use
--   this label to return to a previous intent.
--   
--   Use the <tt>checkpointLabelFilter</tt> parameter of the
--   <tt>GetSessionRequest</tt> operation to filter the intents returned by
--   the operation to those with only the specified label.
[$sel:checkpointLabel:IntentSummary'] :: IntentSummary -> Maybe Text

-- | The next slot to elicit from the user. If there is not slot to elicit,
--   the field is blank.
[$sel:slotToElicit:IntentSummary'] :: IntentSummary -> Maybe Text

-- | The status of the intent after the user responds to the confirmation
--   prompt. If the user confirms the intent, Amazon Lex sets this field to
--   <tt>Confirmed</tt>. If the user denies the intent, Amazon Lex sets
--   this value to <tt>Denied</tt>. The possible values are:
--   
--   <ul>
--   <li><tt>Confirmed</tt> - The user has responded "Yes" to the
--   confirmation prompt, confirming that the intent is complete and that
--   it is ready to be fulfilled.</li>
--   <li><tt>Denied</tt> - The user has responded "No" to the confirmation
--   prompt.</li>
--   <li><tt>None</tt> - The user has never been prompted for confirmation;
--   or, the user was prompted but did not confirm or deny the prompt.</li>
--   </ul>
[$sel:confirmationStatus:IntentSummary'] :: IntentSummary -> Maybe ConfirmationStatus

-- | The next action that the bot should take in its interaction with the
--   user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
[$sel:dialogActionType:IntentSummary'] :: IntentSummary -> DialogActionType

-- | Create a value of <a>IntentSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:intentName:IntentSummary'</a>, <a>intentSummary_intentName</a>
--   - The name of the intent.
--   
--   <a>$sel:fulfillmentState:IntentSummary'</a>,
--   <a>intentSummary_fulfillmentState</a> - The fulfillment state of the
--   intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
--   
--   <a>$sel:slots:IntentSummary'</a>, <a>intentSummary_slots</a> - Map of
--   the slots that have been gathered and their values.
--   
--   <a>$sel:checkpointLabel:IntentSummary'</a>,
--   <a>intentSummary_checkpointLabel</a> - A user-defined label that
--   identifies a particular intent. You can use this label to return to a
--   previous intent.
--   
--   Use the <tt>checkpointLabelFilter</tt> parameter of the
--   <tt>GetSessionRequest</tt> operation to filter the intents returned by
--   the operation to those with only the specified label.
--   
--   <a>$sel:slotToElicit:IntentSummary'</a>,
--   <a>intentSummary_slotToElicit</a> - The next slot to elicit from the
--   user. If there is not slot to elicit, the field is blank.
--   
--   <a>$sel:confirmationStatus:IntentSummary'</a>,
--   <a>intentSummary_confirmationStatus</a> - The status of the intent
--   after the user responds to the confirmation prompt. If the user
--   confirms the intent, Amazon Lex sets this field to <tt>Confirmed</tt>.
--   If the user denies the intent, Amazon Lex sets this value to
--   <tt>Denied</tt>. The possible values are:
--   
--   <ul>
--   <li><tt>Confirmed</tt> - The user has responded "Yes" to the
--   confirmation prompt, confirming that the intent is complete and that
--   it is ready to be fulfilled.</li>
--   <li><tt>Denied</tt> - The user has responded "No" to the confirmation
--   prompt.</li>
--   <li><tt>None</tt> - The user has never been prompted for confirmation;
--   or, the user was prompted but did not confirm or deny the prompt.</li>
--   </ul>
--   
--   <a>$sel:dialogActionType:IntentSummary'</a>,
--   <a>intentSummary_dialogActionType</a> - The next action that the bot
--   should take in its interaction with the user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
newIntentSummary :: DialogActionType -> IntentSummary

-- | The name of the intent.
intentSummary_intentName :: Lens' IntentSummary (Maybe Text)

-- | The fulfillment state of the intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
intentSummary_fulfillmentState :: Lens' IntentSummary (Maybe FulfillmentState)

-- | Map of the slots that have been gathered and their values.
intentSummary_slots :: Lens' IntentSummary (Maybe (HashMap Text Text))

-- | A user-defined label that identifies a particular intent. You can use
--   this label to return to a previous intent.
--   
--   Use the <tt>checkpointLabelFilter</tt> parameter of the
--   <tt>GetSessionRequest</tt> operation to filter the intents returned by
--   the operation to those with only the specified label.
intentSummary_checkpointLabel :: Lens' IntentSummary (Maybe Text)

-- | The next slot to elicit from the user. If there is not slot to elicit,
--   the field is blank.
intentSummary_slotToElicit :: Lens' IntentSummary (Maybe Text)

-- | The status of the intent after the user responds to the confirmation
--   prompt. If the user confirms the intent, Amazon Lex sets this field to
--   <tt>Confirmed</tt>. If the user denies the intent, Amazon Lex sets
--   this value to <tt>Denied</tt>. The possible values are:
--   
--   <ul>
--   <li><tt>Confirmed</tt> - The user has responded "Yes" to the
--   confirmation prompt, confirming that the intent is complete and that
--   it is ready to be fulfilled.</li>
--   <li><tt>Denied</tt> - The user has responded "No" to the confirmation
--   prompt.</li>
--   <li><tt>None</tt> - The user has never been prompted for confirmation;
--   or, the user was prompted but did not confirm or deny the prompt.</li>
--   </ul>
intentSummary_confirmationStatus :: Lens' IntentSummary (Maybe ConfirmationStatus)

-- | The next action that the bot should take in its interaction with the
--   user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
intentSummary_dialogActionType :: Lens' IntentSummary DialogActionType
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.IntentSummary.IntentSummary
instance GHC.Show.Show Network.AWS.LexRuntime.Types.IntentSummary.IntentSummary
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.IntentSummary.IntentSummary
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.IntentSummary.IntentSummary
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.IntentSummary.IntentSummary
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.IntentSummary.IntentSummary
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.LexRuntime.Types.IntentSummary.IntentSummary


module Network.AWS.LexRuntime.Types.MessageFormatType
newtype MessageFormatType
MessageFormatType' :: Text -> MessageFormatType
[fromMessageFormatType] :: MessageFormatType -> Text
pattern MessageFormatType_Composite :: MessageFormatType
pattern MessageFormatType_CustomPayload :: MessageFormatType
pattern MessageFormatType_PlainText :: MessageFormatType
pattern MessageFormatType_SSML :: MessageFormatType
instance Network.AWS.Data.XML.ToXML Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Network.AWS.Data.XML.FromXML Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Network.AWS.Data.Query.ToQuery Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Network.AWS.Data.Log.ToLog Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Network.AWS.Data.Text.ToText Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Network.AWS.Data.Text.FromText Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance GHC.Classes.Ord Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance GHC.Read.Read Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType
instance GHC.Show.Show Network.AWS.LexRuntime.Types.MessageFormatType.MessageFormatType


module Network.AWS.LexRuntime.Types.DialogAction

-- | Describes the next action that the bot should take in its interaction
--   with the user and provides information about the context in which the
--   action takes place. Use the <tt>DialogAction</tt> data type to set the
--   interaction to a specific state, or to return the interaction to a
--   previous state.
--   
--   <i>See:</i> <a>newDialogAction</a> smart constructor.
data DialogAction
DialogAction' :: Maybe Text -> Maybe (Sensitive Text) -> Maybe MessageFormatType -> Maybe FulfillmentState -> Maybe (Sensitive (HashMap Text Text)) -> Maybe Text -> DialogActionType -> DialogAction

-- | The name of the intent.
[$sel:intentName:DialogAction'] :: DialogAction -> Maybe Text

-- | The message that should be shown to the user. If you don't specify a
--   message, Amazon Lex will use the message configured for the intent.
[$sel:message:DialogAction'] :: DialogAction -> Maybe (Sensitive Text)

-- | <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages. For more information, see <a>Message
--   Groups</a>.</li>
--   </ul>
[$sel:messageFormat:DialogAction'] :: DialogAction -> Maybe MessageFormatType

-- | The fulfillment state of the intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
[$sel:fulfillmentState:DialogAction'] :: DialogAction -> Maybe FulfillmentState

-- | Map of the slots that have been gathered and their values.
[$sel:slots:DialogAction'] :: DialogAction -> Maybe (Sensitive (HashMap Text Text))

-- | The name of the slot that should be elicited from the user.
[$sel:slotToElicit:DialogAction'] :: DialogAction -> Maybe Text

-- | The next action that the bot should take in its interaction with the
--   user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>Delegate</tt> - The next action is determined by Amazon
--   Lex.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
[$sel:type':DialogAction'] :: DialogAction -> DialogActionType

-- | Create a value of <a>DialogAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:intentName:DialogAction'</a>, <a>dialogAction_intentName</a> -
--   The name of the intent.
--   
--   <a>$sel:message:DialogAction'</a>, <a>dialogAction_message</a> - The
--   message that should be shown to the user. If you don't specify a
--   message, Amazon Lex will use the message configured for the intent.
--   
--   <a>$sel:messageFormat:DialogAction'</a>,
--   <a>dialogAction_messageFormat</a> - - <tt>PlainText</tt> - The message
--   contains plain UTF-8 text.
--   
--   <ul>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages. For more information, see <a>Message
--   Groups</a>.</li>
--   </ul>
--   
--   <a>$sel:fulfillmentState:DialogAction'</a>,
--   <a>dialogAction_fulfillmentState</a> - The fulfillment state of the
--   intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
--   
--   <a>$sel:slots:DialogAction'</a>, <a>dialogAction_slots</a> - Map of
--   the slots that have been gathered and their values.
--   
--   <a>$sel:slotToElicit:DialogAction'</a>,
--   <a>dialogAction_slotToElicit</a> - The name of the slot that should be
--   elicited from the user.
--   
--   <a>$sel:type':DialogAction'</a>, <a>dialogAction_type</a> - The next
--   action that the bot should take in its interaction with the user. The
--   possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>Delegate</tt> - The next action is determined by Amazon
--   Lex.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
newDialogAction :: DialogActionType -> DialogAction

-- | The name of the intent.
dialogAction_intentName :: Lens' DialogAction (Maybe Text)

-- | The message that should be shown to the user. If you don't specify a
--   message, Amazon Lex will use the message configured for the intent.
dialogAction_message :: Lens' DialogAction (Maybe Text)

-- | <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages. For more information, see <a>Message
--   Groups</a>.</li>
--   </ul>
dialogAction_messageFormat :: Lens' DialogAction (Maybe MessageFormatType)

-- | The fulfillment state of the intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
dialogAction_fulfillmentState :: Lens' DialogAction (Maybe FulfillmentState)

-- | Map of the slots that have been gathered and their values.
dialogAction_slots :: Lens' DialogAction (Maybe (HashMap Text Text))

-- | The name of the slot that should be elicited from the user.
dialogAction_slotToElicit :: Lens' DialogAction (Maybe Text)

-- | The next action that the bot should take in its interaction with the
--   user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>Delegate</tt> - The next action is determined by Amazon
--   Lex.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
dialogAction_type :: Lens' DialogAction DialogActionType
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.DialogAction.DialogAction
instance GHC.Show.Show Network.AWS.LexRuntime.Types.DialogAction.DialogAction
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.DialogAction.DialogAction
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.DialogAction.DialogAction
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.DialogAction.DialogAction
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.DialogAction.DialogAction
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.LexRuntime.Types.DialogAction.DialogAction


module Network.AWS.LexRuntime.Types.PredictedIntent

-- | An intent that Amazon Lex suggests satisfies the user's intent.
--   Includes the name of the intent, the confidence that Amazon Lex has
--   that the user's intent is satisfied, and the slots defined for the
--   intent.
--   
--   <i>See:</i> <a>newPredictedIntent</a> smart constructor.
data PredictedIntent
PredictedIntent' :: Maybe Text -> Maybe (Sensitive (HashMap Text Text)) -> Maybe IntentConfidence -> PredictedIntent

-- | The name of the intent that Amazon Lex suggests satisfies the user's
--   intent.
[$sel:intentName:PredictedIntent'] :: PredictedIntent -> Maybe Text

-- | The slot and slot values associated with the predicted intent.
[$sel:slots:PredictedIntent'] :: PredictedIntent -> Maybe (Sensitive (HashMap Text Text))

-- | Indicates how confident Amazon Lex is that an intent satisfies the
--   user's intent.
[$sel:nluIntentConfidence:PredictedIntent'] :: PredictedIntent -> Maybe IntentConfidence

-- | Create a value of <a>PredictedIntent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:intentName:PredictedIntent'</a>,
--   <a>predictedIntent_intentName</a> - The name of the intent that Amazon
--   Lex suggests satisfies the user's intent.
--   
--   <a>$sel:slots:PredictedIntent'</a>, <a>predictedIntent_slots</a> - The
--   slot and slot values associated with the predicted intent.
--   
--   <a>$sel:nluIntentConfidence:PredictedIntent'</a>,
--   <a>predictedIntent_nluIntentConfidence</a> - Indicates how confident
--   Amazon Lex is that an intent satisfies the user's intent.
newPredictedIntent :: PredictedIntent

-- | The name of the intent that Amazon Lex suggests satisfies the user's
--   intent.
predictedIntent_intentName :: Lens' PredictedIntent (Maybe Text)

-- | The slot and slot values associated with the predicted intent.
predictedIntent_slots :: Lens' PredictedIntent (Maybe (HashMap Text Text))

-- | Indicates how confident Amazon Lex is that an intent satisfies the
--   user's intent.
predictedIntent_nluIntentConfidence :: Lens' PredictedIntent (Maybe IntentConfidence)
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.PredictedIntent.PredictedIntent
instance GHC.Show.Show Network.AWS.LexRuntime.Types.PredictedIntent.PredictedIntent
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.PredictedIntent.PredictedIntent
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.PredictedIntent.PredictedIntent
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.PredictedIntent.PredictedIntent
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.PredictedIntent.PredictedIntent


module Network.AWS.LexRuntime.Types.ResponseCard

-- | If you configure a response card when creating your bots, Amazon Lex
--   substitutes the session attributes and slot values that are available,
--   and then returns it. The response card can also come from a Lambda
--   function ( <tt>dialogCodeHook</tt> and <tt>fulfillmentActivity</tt> on
--   an intent).
--   
--   <i>See:</i> <a>newResponseCard</a> smart constructor.
data ResponseCard
ResponseCard' :: Maybe ContentType -> Maybe [GenericAttachment] -> Maybe Text -> ResponseCard

-- | The content type of the response.
[$sel:contentType:ResponseCard'] :: ResponseCard -> Maybe ContentType

-- | An array of attachment objects representing options.
[$sel:genericAttachments:ResponseCard'] :: ResponseCard -> Maybe [GenericAttachment]

-- | The version of the response card format.
[$sel:version:ResponseCard'] :: ResponseCard -> Maybe Text

-- | Create a value of <a>ResponseCard</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:contentType:ResponseCard'</a>, <a>responseCard_contentType</a>
--   - The content type of the response.
--   
--   <a>$sel:genericAttachments:ResponseCard'</a>,
--   <a>responseCard_genericAttachments</a> - An array of attachment
--   objects representing options.
--   
--   <a>$sel:version:ResponseCard'</a>, <a>responseCard_version</a> - The
--   version of the response card format.
newResponseCard :: ResponseCard

-- | The content type of the response.
responseCard_contentType :: Lens' ResponseCard (Maybe ContentType)

-- | An array of attachment objects representing options.
responseCard_genericAttachments :: Lens' ResponseCard (Maybe [GenericAttachment])

-- | The version of the response card format.
responseCard_version :: Lens' ResponseCard (Maybe Text)
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.ResponseCard.ResponseCard
instance GHC.Show.Show Network.AWS.LexRuntime.Types.ResponseCard.ResponseCard
instance GHC.Read.Read Network.AWS.LexRuntime.Types.ResponseCard.ResponseCard
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.ResponseCard.ResponseCard
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.ResponseCard.ResponseCard
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.ResponseCard.ResponseCard
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.ResponseCard.ResponseCard


module Network.AWS.LexRuntime.Types.SentimentResponse

-- | The sentiment expressed in an utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field structure contains the result of the
--   analysis.
--   
--   <i>See:</i> <a>newSentimentResponse</a> smart constructor.
data SentimentResponse
SentimentResponse' :: Maybe Text -> Maybe Text -> SentimentResponse

-- | The likelihood that the sentiment was correctly inferred.
[$sel:sentimentScore:SentimentResponse'] :: SentimentResponse -> Maybe Text

-- | The inferred sentiment that Amazon Comprehend has the highest
--   confidence in.
[$sel:sentimentLabel:SentimentResponse'] :: SentimentResponse -> Maybe Text

-- | Create a value of <a>SentimentResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sentimentScore:SentimentResponse'</a>,
--   <a>sentimentResponse_sentimentScore</a> - The likelihood that the
--   sentiment was correctly inferred.
--   
--   <a>$sel:sentimentLabel:SentimentResponse'</a>,
--   <a>sentimentResponse_sentimentLabel</a> - The inferred sentiment that
--   Amazon Comprehend has the highest confidence in.
newSentimentResponse :: SentimentResponse

-- | The likelihood that the sentiment was correctly inferred.
sentimentResponse_sentimentScore :: Lens' SentimentResponse (Maybe Text)

-- | The inferred sentiment that Amazon Comprehend has the highest
--   confidence in.
sentimentResponse_sentimentLabel :: Lens' SentimentResponse (Maybe Text)
instance GHC.Generics.Generic Network.AWS.LexRuntime.Types.SentimentResponse.SentimentResponse
instance GHC.Show.Show Network.AWS.LexRuntime.Types.SentimentResponse.SentimentResponse
instance GHC.Read.Read Network.AWS.LexRuntime.Types.SentimentResponse.SentimentResponse
instance GHC.Classes.Eq Network.AWS.LexRuntime.Types.SentimentResponse.SentimentResponse
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.LexRuntime.Types.SentimentResponse.SentimentResponse
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.Types.SentimentResponse.SentimentResponse
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.Types.SentimentResponse.SentimentResponse


module Network.AWS.LexRuntime.Types

-- | API version <tt>2016-11-28</tt> of the Amazon Lex Runtime Service SDK
--   configuration.
defaultService :: Service

-- | The resource (such as the Amazon Lex bot or an alias) that is referred
--   to is not found.
_NotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Request validation failed, there is no usable message in the context,
--   or the bot build failed, is still in progress, or contains unbuilt
--   changes.
_BadRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The Content-Type header (<tt>PostContent</tt> API) has an invalid
--   value.
_UnsupportedMediaTypeException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The accept header in the request does not have a valid value.
_NotAcceptableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Either the Amazon Lex bot is still building, or one of the dependent
--   services (Amazon Polly, AWS Lambda) failed with an internal service
--   error.
_BadGatewayException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Two clients are using the same AWS account, Amazon Lex bot, and user
--   ID.
_ConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Exceeded a limit.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | One of the dependencies, such as AWS Lambda or Amazon Polly, threw an
--   exception. For example,
--   
--   <ul>
--   <li>If Amazon Lex does not have sufficient permissions to call a
--   Lambda function.</li>
--   <li>If a Lambda function takes longer than 30 seconds to execute.</li>
--   <li>If a fulfillment Lambda function returns a <tt>Delegate</tt>
--   dialog action without removing any slot values.</li>
--   </ul>
_DependencyFailedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Internal service error. Retry the call.
_InternalFailureException :: AsError a => Getting (First ServiceError) a ServiceError

-- | This exception is not used.
_LoopDetectedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The input speech is too long.
_RequestTimeoutException :: AsError a => Getting (First ServiceError) a ServiceError
newtype ConfirmationStatus
ConfirmationStatus' :: Text -> ConfirmationStatus
[fromConfirmationStatus] :: ConfirmationStatus -> Text
pattern ConfirmationStatus_Confirmed :: ConfirmationStatus
pattern ConfirmationStatus_Denied :: ConfirmationStatus
pattern ConfirmationStatus_None :: ConfirmationStatus
newtype ContentType
ContentType' :: Text -> ContentType
[fromContentType] :: ContentType -> Text
pattern ContentType_Application_vnd_amazonaws_card_generic :: ContentType
newtype DialogActionType
DialogActionType' :: Text -> DialogActionType
[fromDialogActionType] :: DialogActionType -> Text
pattern DialogActionType_Close :: DialogActionType
pattern DialogActionType_ConfirmIntent :: DialogActionType
pattern DialogActionType_Delegate :: DialogActionType
pattern DialogActionType_ElicitIntent :: DialogActionType
pattern DialogActionType_ElicitSlot :: DialogActionType
newtype DialogState
DialogState' :: Text -> DialogState
[fromDialogState] :: DialogState -> Text
pattern DialogState_ConfirmIntent :: DialogState
pattern DialogState_ElicitIntent :: DialogState
pattern DialogState_ElicitSlot :: DialogState
pattern DialogState_Failed :: DialogState
pattern DialogState_Fulfilled :: DialogState
pattern DialogState_ReadyForFulfillment :: DialogState
newtype FulfillmentState
FulfillmentState' :: Text -> FulfillmentState
[fromFulfillmentState] :: FulfillmentState -> Text
pattern FulfillmentState_Failed :: FulfillmentState
pattern FulfillmentState_Fulfilled :: FulfillmentState
pattern FulfillmentState_ReadyForFulfillment :: FulfillmentState
newtype MessageFormatType
MessageFormatType' :: Text -> MessageFormatType
[fromMessageFormatType] :: MessageFormatType -> Text
pattern MessageFormatType_Composite :: MessageFormatType
pattern MessageFormatType_CustomPayload :: MessageFormatType
pattern MessageFormatType_PlainText :: MessageFormatType
pattern MessageFormatType_SSML :: MessageFormatType

-- | A context is a variable that contains information about the current
--   state of the conversation between a user and Amazon Lex. Context can
--   be set automatically by Amazon Lex when an intent is fulfilled, or it
--   can be set at runtime using the <tt>PutContent</tt>, <tt>PutText</tt>,
--   or <tt>PutSession</tt> operation.
--   
--   <i>See:</i> <a>newActiveContext</a> smart constructor.
data ActiveContext
ActiveContext' :: Text -> ActiveContextTimeToLive -> HashMap Text (Sensitive Text) -> ActiveContext

-- | The name of the context.
[$sel:name:ActiveContext'] :: ActiveContext -> Text

-- | The length of time or number of turns that a context remains active.
[$sel:timeToLive:ActiveContext'] :: ActiveContext -> ActiveContextTimeToLive

-- | State variables for the current context. You can use these values as
--   default values for slots in subsequent events.
[$sel:parameters:ActiveContext'] :: ActiveContext -> HashMap Text (Sensitive Text)

-- | Create a value of <a>ActiveContext</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:ActiveContext'</a>, <a>activeContext_name</a> - The name
--   of the context.
--   
--   <a>$sel:timeToLive:ActiveContext'</a>, <a>activeContext_timeToLive</a>
--   - The length of time or number of turns that a context remains active.
--   
--   <a>$sel:parameters:ActiveContext'</a>, <a>activeContext_parameters</a>
--   - State variables for the current context. You can use these values as
--   default values for slots in subsequent events.
newActiveContext :: Text -> ActiveContextTimeToLive -> ActiveContext

-- | The name of the context.
activeContext_name :: Lens' ActiveContext Text

-- | The length of time or number of turns that a context remains active.
activeContext_timeToLive :: Lens' ActiveContext ActiveContextTimeToLive

-- | State variables for the current context. You can use these values as
--   default values for slots in subsequent events.
activeContext_parameters :: Lens' ActiveContext (HashMap Text Text)

-- | The length of time or number of turns that a context remains active.
--   
--   <i>See:</i> <a>newActiveContextTimeToLive</a> smart constructor.
data ActiveContextTimeToLive
ActiveContextTimeToLive' :: Maybe Natural -> Maybe Natural -> ActiveContextTimeToLive

-- | The number of seconds that the context should be active after it is
--   first sent in a <tt>PostContent</tt> or <tt>PostText</tt> response.
--   You can set the value between 5 and 86,400 seconds (24 hours).
[$sel:timeToLiveInSeconds:ActiveContextTimeToLive'] :: ActiveContextTimeToLive -> Maybe Natural

-- | The number of conversation turns that the context should be active. A
--   conversation turn is one <tt>PostContent</tt> or <tt>PostText</tt>
--   request and the corresponding response from Amazon Lex.
[$sel:turnsToLive:ActiveContextTimeToLive'] :: ActiveContextTimeToLive -> Maybe Natural

-- | Create a value of <a>ActiveContextTimeToLive</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeToLiveInSeconds:ActiveContextTimeToLive'</a>,
--   <a>activeContextTimeToLive_timeToLiveInSeconds</a> - The number of
--   seconds that the context should be active after it is first sent in a
--   <tt>PostContent</tt> or <tt>PostText</tt> response. You can set the
--   value between 5 and 86,400 seconds (24 hours).
--   
--   <a>$sel:turnsToLive:ActiveContextTimeToLive'</a>,
--   <a>activeContextTimeToLive_turnsToLive</a> - The number of
--   conversation turns that the context should be active. A conversation
--   turn is one <tt>PostContent</tt> or <tt>PostText</tt> request and the
--   corresponding response from Amazon Lex.
newActiveContextTimeToLive :: ActiveContextTimeToLive

-- | The number of seconds that the context should be active after it is
--   first sent in a <tt>PostContent</tt> or <tt>PostText</tt> response.
--   You can set the value between 5 and 86,400 seconds (24 hours).
activeContextTimeToLive_timeToLiveInSeconds :: Lens' ActiveContextTimeToLive (Maybe Natural)

-- | The number of conversation turns that the context should be active. A
--   conversation turn is one <tt>PostContent</tt> or <tt>PostText</tt>
--   request and the corresponding response from Amazon Lex.
activeContextTimeToLive_turnsToLive :: Lens' ActiveContextTimeToLive (Maybe Natural)

-- | Represents an option to be shown on the client platform (Facebook,
--   Slack, etc.)
--   
--   <i>See:</i> <a>newButton</a> smart constructor.
data Button
Button' :: Text -> Text -> Button

-- | Text that is visible to the user on the button.
[$sel:text:Button'] :: Button -> Text

-- | The value sent to Amazon Lex when a user chooses the button. For
--   example, consider button text "NYC." When the user chooses the button,
--   the value sent can be "New York City."
[$sel:value:Button'] :: Button -> Text

-- | Create a value of <a>Button</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:text:Button'</a>, <a>button_text</a> - Text that is visible to
--   the user on the button.
--   
--   <a>$sel:value:Button'</a>, <a>button_value</a> - The value sent to
--   Amazon Lex when a user chooses the button. For example, consider
--   button text "NYC." When the user chooses the button, the value sent
--   can be "New York City."
newButton :: Text -> Text -> Button

-- | Text that is visible to the user on the button.
button_text :: Lens' Button Text

-- | The value sent to Amazon Lex when a user chooses the button. For
--   example, consider button text "NYC." When the user chooses the button,
--   the value sent can be "New York City."
button_value :: Lens' Button Text

-- | Describes the next action that the bot should take in its interaction
--   with the user and provides information about the context in which the
--   action takes place. Use the <tt>DialogAction</tt> data type to set the
--   interaction to a specific state, or to return the interaction to a
--   previous state.
--   
--   <i>See:</i> <a>newDialogAction</a> smart constructor.
data DialogAction
DialogAction' :: Maybe Text -> Maybe (Sensitive Text) -> Maybe MessageFormatType -> Maybe FulfillmentState -> Maybe (Sensitive (HashMap Text Text)) -> Maybe Text -> DialogActionType -> DialogAction

-- | The name of the intent.
[$sel:intentName:DialogAction'] :: DialogAction -> Maybe Text

-- | The message that should be shown to the user. If you don't specify a
--   message, Amazon Lex will use the message configured for the intent.
[$sel:message:DialogAction'] :: DialogAction -> Maybe (Sensitive Text)

-- | <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages. For more information, see <a>Message
--   Groups</a>.</li>
--   </ul>
[$sel:messageFormat:DialogAction'] :: DialogAction -> Maybe MessageFormatType

-- | The fulfillment state of the intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
[$sel:fulfillmentState:DialogAction'] :: DialogAction -> Maybe FulfillmentState

-- | Map of the slots that have been gathered and their values.
[$sel:slots:DialogAction'] :: DialogAction -> Maybe (Sensitive (HashMap Text Text))

-- | The name of the slot that should be elicited from the user.
[$sel:slotToElicit:DialogAction'] :: DialogAction -> Maybe Text

-- | The next action that the bot should take in its interaction with the
--   user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>Delegate</tt> - The next action is determined by Amazon
--   Lex.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
[$sel:type':DialogAction'] :: DialogAction -> DialogActionType

-- | Create a value of <a>DialogAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:intentName:DialogAction'</a>, <a>dialogAction_intentName</a> -
--   The name of the intent.
--   
--   <a>$sel:message:DialogAction'</a>, <a>dialogAction_message</a> - The
--   message that should be shown to the user. If you don't specify a
--   message, Amazon Lex will use the message configured for the intent.
--   
--   <a>$sel:messageFormat:DialogAction'</a>,
--   <a>dialogAction_messageFormat</a> - - <tt>PlainText</tt> - The message
--   contains plain UTF-8 text.
--   
--   <ul>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages. For more information, see <a>Message
--   Groups</a>.</li>
--   </ul>
--   
--   <a>$sel:fulfillmentState:DialogAction'</a>,
--   <a>dialogAction_fulfillmentState</a> - The fulfillment state of the
--   intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
--   
--   <a>$sel:slots:DialogAction'</a>, <a>dialogAction_slots</a> - Map of
--   the slots that have been gathered and their values.
--   
--   <a>$sel:slotToElicit:DialogAction'</a>,
--   <a>dialogAction_slotToElicit</a> - The name of the slot that should be
--   elicited from the user.
--   
--   <a>$sel:type':DialogAction'</a>, <a>dialogAction_type</a> - The next
--   action that the bot should take in its interaction with the user. The
--   possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>Delegate</tt> - The next action is determined by Amazon
--   Lex.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
newDialogAction :: DialogActionType -> DialogAction

-- | The name of the intent.
dialogAction_intentName :: Lens' DialogAction (Maybe Text)

-- | The message that should be shown to the user. If you don't specify a
--   message, Amazon Lex will use the message configured for the intent.
dialogAction_message :: Lens' DialogAction (Maybe Text)

-- | <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages. For more information, see <a>Message
--   Groups</a>.</li>
--   </ul>
dialogAction_messageFormat :: Lens' DialogAction (Maybe MessageFormatType)

-- | The fulfillment state of the intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
dialogAction_fulfillmentState :: Lens' DialogAction (Maybe FulfillmentState)

-- | Map of the slots that have been gathered and their values.
dialogAction_slots :: Lens' DialogAction (Maybe (HashMap Text Text))

-- | The name of the slot that should be elicited from the user.
dialogAction_slotToElicit :: Lens' DialogAction (Maybe Text)

-- | The next action that the bot should take in its interaction with the
--   user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>Delegate</tt> - The next action is determined by Amazon
--   Lex.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
dialogAction_type :: Lens' DialogAction DialogActionType

-- | Represents an option rendered to the user when a prompt is shown. It
--   could be an image, a button, a link, or text.
--   
--   <i>See:</i> <a>newGenericAttachment</a> smart constructor.
data GenericAttachment
GenericAttachment' :: Maybe Text -> Maybe [Button] -> Maybe Text -> Maybe Text -> Maybe Text -> GenericAttachment

-- | The title of the option.
[$sel:title:GenericAttachment'] :: GenericAttachment -> Maybe Text

-- | The list of options to show to the user.
[$sel:buttons:GenericAttachment'] :: GenericAttachment -> Maybe [Button]

-- | The URL of an attachment to the response card.
[$sel:attachmentLinkUrl:GenericAttachment'] :: GenericAttachment -> Maybe Text

-- | The URL of an image that is displayed to the user.
[$sel:imageUrl:GenericAttachment'] :: GenericAttachment -> Maybe Text

-- | The subtitle shown below the title.
[$sel:subTitle:GenericAttachment'] :: GenericAttachment -> Maybe Text

-- | Create a value of <a>GenericAttachment</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:title:GenericAttachment'</a>, <a>genericAttachment_title</a> -
--   The title of the option.
--   
--   <a>$sel:buttons:GenericAttachment'</a>,
--   <a>genericAttachment_buttons</a> - The list of options to show to the
--   user.
--   
--   <a>$sel:attachmentLinkUrl:GenericAttachment'</a>,
--   <a>genericAttachment_attachmentLinkUrl</a> - The URL of an attachment
--   to the response card.
--   
--   <a>$sel:imageUrl:GenericAttachment'</a>,
--   <a>genericAttachment_imageUrl</a> - The URL of an image that is
--   displayed to the user.
--   
--   <a>$sel:subTitle:GenericAttachment'</a>,
--   <a>genericAttachment_subTitle</a> - The subtitle shown below the
--   title.
newGenericAttachment :: GenericAttachment

-- | The title of the option.
genericAttachment_title :: Lens' GenericAttachment (Maybe Text)

-- | The list of options to show to the user.
genericAttachment_buttons :: Lens' GenericAttachment (Maybe [Button])

-- | The URL of an attachment to the response card.
genericAttachment_attachmentLinkUrl :: Lens' GenericAttachment (Maybe Text)

-- | The URL of an image that is displayed to the user.
genericAttachment_imageUrl :: Lens' GenericAttachment (Maybe Text)

-- | The subtitle shown below the title.
genericAttachment_subTitle :: Lens' GenericAttachment (Maybe Text)

-- | Provides a score that indicates the confidence that Amazon Lex has
--   that an intent is the one that satisfies the user's intent.
--   
--   <i>See:</i> <a>newIntentConfidence</a> smart constructor.
data IntentConfidence
IntentConfidence' :: Maybe Double -> IntentConfidence

-- | A score that indicates how confident Amazon Lex is that an intent
--   satisfies the user's intent. Ranges between 0.00 and 1.00. Higher
--   scores indicate higher confidence.
[$sel:score:IntentConfidence'] :: IntentConfidence -> Maybe Double

-- | Create a value of <a>IntentConfidence</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:score:IntentConfidence'</a>, <a>intentConfidence_score</a> - A
--   score that indicates how confident Amazon Lex is that an intent
--   satisfies the user's intent. Ranges between 0.00 and 1.00. Higher
--   scores indicate higher confidence.
newIntentConfidence :: IntentConfidence

-- | A score that indicates how confident Amazon Lex is that an intent
--   satisfies the user's intent. Ranges between 0.00 and 1.00. Higher
--   scores indicate higher confidence.
intentConfidence_score :: Lens' IntentConfidence (Maybe Double)

-- | Provides information about the state of an intent. You can use this
--   information to get the current state of an intent so that you can
--   process the intent, or so that you can return the intent to its
--   previous state.
--   
--   <i>See:</i> <a>newIntentSummary</a> smart constructor.
data IntentSummary
IntentSummary' :: Maybe Text -> Maybe FulfillmentState -> Maybe (Sensitive (HashMap Text Text)) -> Maybe Text -> Maybe Text -> Maybe ConfirmationStatus -> DialogActionType -> IntentSummary

-- | The name of the intent.
[$sel:intentName:IntentSummary'] :: IntentSummary -> Maybe Text

-- | The fulfillment state of the intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
[$sel:fulfillmentState:IntentSummary'] :: IntentSummary -> Maybe FulfillmentState

-- | Map of the slots that have been gathered and their values.
[$sel:slots:IntentSummary'] :: IntentSummary -> Maybe (Sensitive (HashMap Text Text))

-- | A user-defined label that identifies a particular intent. You can use
--   this label to return to a previous intent.
--   
--   Use the <tt>checkpointLabelFilter</tt> parameter of the
--   <tt>GetSessionRequest</tt> operation to filter the intents returned by
--   the operation to those with only the specified label.
[$sel:checkpointLabel:IntentSummary'] :: IntentSummary -> Maybe Text

-- | The next slot to elicit from the user. If there is not slot to elicit,
--   the field is blank.
[$sel:slotToElicit:IntentSummary'] :: IntentSummary -> Maybe Text

-- | The status of the intent after the user responds to the confirmation
--   prompt. If the user confirms the intent, Amazon Lex sets this field to
--   <tt>Confirmed</tt>. If the user denies the intent, Amazon Lex sets
--   this value to <tt>Denied</tt>. The possible values are:
--   
--   <ul>
--   <li><tt>Confirmed</tt> - The user has responded "Yes" to the
--   confirmation prompt, confirming that the intent is complete and that
--   it is ready to be fulfilled.</li>
--   <li><tt>Denied</tt> - The user has responded "No" to the confirmation
--   prompt.</li>
--   <li><tt>None</tt> - The user has never been prompted for confirmation;
--   or, the user was prompted but did not confirm or deny the prompt.</li>
--   </ul>
[$sel:confirmationStatus:IntentSummary'] :: IntentSummary -> Maybe ConfirmationStatus

-- | The next action that the bot should take in its interaction with the
--   user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
[$sel:dialogActionType:IntentSummary'] :: IntentSummary -> DialogActionType

-- | Create a value of <a>IntentSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:intentName:IntentSummary'</a>, <a>intentSummary_intentName</a>
--   - The name of the intent.
--   
--   <a>$sel:fulfillmentState:IntentSummary'</a>,
--   <a>intentSummary_fulfillmentState</a> - The fulfillment state of the
--   intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
--   
--   <a>$sel:slots:IntentSummary'</a>, <a>intentSummary_slots</a> - Map of
--   the slots that have been gathered and their values.
--   
--   <a>$sel:checkpointLabel:IntentSummary'</a>,
--   <a>intentSummary_checkpointLabel</a> - A user-defined label that
--   identifies a particular intent. You can use this label to return to a
--   previous intent.
--   
--   Use the <tt>checkpointLabelFilter</tt> parameter of the
--   <tt>GetSessionRequest</tt> operation to filter the intents returned by
--   the operation to those with only the specified label.
--   
--   <a>$sel:slotToElicit:IntentSummary'</a>,
--   <a>intentSummary_slotToElicit</a> - The next slot to elicit from the
--   user. If there is not slot to elicit, the field is blank.
--   
--   <a>$sel:confirmationStatus:IntentSummary'</a>,
--   <a>intentSummary_confirmationStatus</a> - The status of the intent
--   after the user responds to the confirmation prompt. If the user
--   confirms the intent, Amazon Lex sets this field to <tt>Confirmed</tt>.
--   If the user denies the intent, Amazon Lex sets this value to
--   <tt>Denied</tt>. The possible values are:
--   
--   <ul>
--   <li><tt>Confirmed</tt> - The user has responded "Yes" to the
--   confirmation prompt, confirming that the intent is complete and that
--   it is ready to be fulfilled.</li>
--   <li><tt>Denied</tt> - The user has responded "No" to the confirmation
--   prompt.</li>
--   <li><tt>None</tt> - The user has never been prompted for confirmation;
--   or, the user was prompted but did not confirm or deny the prompt.</li>
--   </ul>
--   
--   <a>$sel:dialogActionType:IntentSummary'</a>,
--   <a>intentSummary_dialogActionType</a> - The next action that the bot
--   should take in its interaction with the user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
newIntentSummary :: DialogActionType -> IntentSummary

-- | The name of the intent.
intentSummary_intentName :: Lens' IntentSummary (Maybe Text)

-- | The fulfillment state of the intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
intentSummary_fulfillmentState :: Lens' IntentSummary (Maybe FulfillmentState)

-- | Map of the slots that have been gathered and their values.
intentSummary_slots :: Lens' IntentSummary (Maybe (HashMap Text Text))

-- | A user-defined label that identifies a particular intent. You can use
--   this label to return to a previous intent.
--   
--   Use the <tt>checkpointLabelFilter</tt> parameter of the
--   <tt>GetSessionRequest</tt> operation to filter the intents returned by
--   the operation to those with only the specified label.
intentSummary_checkpointLabel :: Lens' IntentSummary (Maybe Text)

-- | The next slot to elicit from the user. If there is not slot to elicit,
--   the field is blank.
intentSummary_slotToElicit :: Lens' IntentSummary (Maybe Text)

-- | The status of the intent after the user responds to the confirmation
--   prompt. If the user confirms the intent, Amazon Lex sets this field to
--   <tt>Confirmed</tt>. If the user denies the intent, Amazon Lex sets
--   this value to <tt>Denied</tt>. The possible values are:
--   
--   <ul>
--   <li><tt>Confirmed</tt> - The user has responded "Yes" to the
--   confirmation prompt, confirming that the intent is complete and that
--   it is ready to be fulfilled.</li>
--   <li><tt>Denied</tt> - The user has responded "No" to the confirmation
--   prompt.</li>
--   <li><tt>None</tt> - The user has never been prompted for confirmation;
--   or, the user was prompted but did not confirm or deny the prompt.</li>
--   </ul>
intentSummary_confirmationStatus :: Lens' IntentSummary (Maybe ConfirmationStatus)

-- | The next action that the bot should take in its interaction with the
--   user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
intentSummary_dialogActionType :: Lens' IntentSummary DialogActionType

-- | An intent that Amazon Lex suggests satisfies the user's intent.
--   Includes the name of the intent, the confidence that Amazon Lex has
--   that the user's intent is satisfied, and the slots defined for the
--   intent.
--   
--   <i>See:</i> <a>newPredictedIntent</a> smart constructor.
data PredictedIntent
PredictedIntent' :: Maybe Text -> Maybe (Sensitive (HashMap Text Text)) -> Maybe IntentConfidence -> PredictedIntent

-- | The name of the intent that Amazon Lex suggests satisfies the user's
--   intent.
[$sel:intentName:PredictedIntent'] :: PredictedIntent -> Maybe Text

-- | The slot and slot values associated with the predicted intent.
[$sel:slots:PredictedIntent'] :: PredictedIntent -> Maybe (Sensitive (HashMap Text Text))

-- | Indicates how confident Amazon Lex is that an intent satisfies the
--   user's intent.
[$sel:nluIntentConfidence:PredictedIntent'] :: PredictedIntent -> Maybe IntentConfidence

-- | Create a value of <a>PredictedIntent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:intentName:PredictedIntent'</a>,
--   <a>predictedIntent_intentName</a> - The name of the intent that Amazon
--   Lex suggests satisfies the user's intent.
--   
--   <a>$sel:slots:PredictedIntent'</a>, <a>predictedIntent_slots</a> - The
--   slot and slot values associated with the predicted intent.
--   
--   <a>$sel:nluIntentConfidence:PredictedIntent'</a>,
--   <a>predictedIntent_nluIntentConfidence</a> - Indicates how confident
--   Amazon Lex is that an intent satisfies the user's intent.
newPredictedIntent :: PredictedIntent

-- | The name of the intent that Amazon Lex suggests satisfies the user's
--   intent.
predictedIntent_intentName :: Lens' PredictedIntent (Maybe Text)

-- | The slot and slot values associated with the predicted intent.
predictedIntent_slots :: Lens' PredictedIntent (Maybe (HashMap Text Text))

-- | Indicates how confident Amazon Lex is that an intent satisfies the
--   user's intent.
predictedIntent_nluIntentConfidence :: Lens' PredictedIntent (Maybe IntentConfidence)

-- | If you configure a response card when creating your bots, Amazon Lex
--   substitutes the session attributes and slot values that are available,
--   and then returns it. The response card can also come from a Lambda
--   function ( <tt>dialogCodeHook</tt> and <tt>fulfillmentActivity</tt> on
--   an intent).
--   
--   <i>See:</i> <a>newResponseCard</a> smart constructor.
data ResponseCard
ResponseCard' :: Maybe ContentType -> Maybe [GenericAttachment] -> Maybe Text -> ResponseCard

-- | The content type of the response.
[$sel:contentType:ResponseCard'] :: ResponseCard -> Maybe ContentType

-- | An array of attachment objects representing options.
[$sel:genericAttachments:ResponseCard'] :: ResponseCard -> Maybe [GenericAttachment]

-- | The version of the response card format.
[$sel:version:ResponseCard'] :: ResponseCard -> Maybe Text

-- | Create a value of <a>ResponseCard</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:contentType:ResponseCard'</a>, <a>responseCard_contentType</a>
--   - The content type of the response.
--   
--   <a>$sel:genericAttachments:ResponseCard'</a>,
--   <a>responseCard_genericAttachments</a> - An array of attachment
--   objects representing options.
--   
--   <a>$sel:version:ResponseCard'</a>, <a>responseCard_version</a> - The
--   version of the response card format.
newResponseCard :: ResponseCard

-- | The content type of the response.
responseCard_contentType :: Lens' ResponseCard (Maybe ContentType)

-- | An array of attachment objects representing options.
responseCard_genericAttachments :: Lens' ResponseCard (Maybe [GenericAttachment])

-- | The version of the response card format.
responseCard_version :: Lens' ResponseCard (Maybe Text)

-- | The sentiment expressed in an utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field structure contains the result of the
--   analysis.
--   
--   <i>See:</i> <a>newSentimentResponse</a> smart constructor.
data SentimentResponse
SentimentResponse' :: Maybe Text -> Maybe Text -> SentimentResponse

-- | The likelihood that the sentiment was correctly inferred.
[$sel:sentimentScore:SentimentResponse'] :: SentimentResponse -> Maybe Text

-- | The inferred sentiment that Amazon Comprehend has the highest
--   confidence in.
[$sel:sentimentLabel:SentimentResponse'] :: SentimentResponse -> Maybe Text

-- | Create a value of <a>SentimentResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sentimentScore:SentimentResponse'</a>,
--   <a>sentimentResponse_sentimentScore</a> - The likelihood that the
--   sentiment was correctly inferred.
--   
--   <a>$sel:sentimentLabel:SentimentResponse'</a>,
--   <a>sentimentResponse_sentimentLabel</a> - The inferred sentiment that
--   Amazon Comprehend has the highest confidence in.
newSentimentResponse :: SentimentResponse

-- | The likelihood that the sentiment was correctly inferred.
sentimentResponse_sentimentScore :: Lens' SentimentResponse (Maybe Text)

-- | The inferred sentiment that Amazon Comprehend has the highest
--   confidence in.
sentimentResponse_sentimentLabel :: Lens' SentimentResponse (Maybe Text)


-- | Creates a new session or modifies an existing session with an Amazon
--   Lex bot. Use this operation to enable your application to set the
--   state of the bot.
--   
--   For more information, see <a>Managing Sessions</a>.
module Network.AWS.LexRuntime.PutSession

-- | <i>See:</i> <a>newPutSession</a> smart constructor.
data PutSession
PutSession' :: Maybe (Sensitive (HashMap Text Text)) -> Maybe DialogAction -> Maybe Text -> Maybe [IntentSummary] -> Maybe (Sensitive [ActiveContext]) -> Text -> Text -> Text -> PutSession

-- | Map of key/value pairs representing the session-specific context
--   information. It contains application information passed between Amazon
--   Lex and a client application.
[$sel:sessionAttributes:PutSession'] :: PutSession -> Maybe (Sensitive (HashMap Text Text))

-- | Sets the next action that the bot should take to fulfill the
--   conversation.
[$sel:dialogAction:PutSession'] :: PutSession -> Maybe DialogAction

-- | The message that Amazon Lex returns in the response can be either text
--   or speech based depending on the value of this field.
--   
--   <ul>
--   <li>If the value is <tt>text/plain; charset=utf-8</tt>, Amazon Lex
--   returns text in the response.</li>
--   <li>If the value begins with <tt>audio/</tt>, Amazon Lex returns
--   speech in the response. Amazon Lex uses Amazon Polly to generate the
--   speech in the configuration that you specify. For example, if you
--   specify <tt>audio/mpeg</tt> as the value, Amazon Lex returns speech in
--   the MPEG format.</li>
--   <li>If the value is <tt>audio/pcm</tt>, the speech is returned as
--   <tt>audio/pcm</tt> in 16-bit, little endian format.</li>
--   <li>The following are the accepted
--   values:<ul><li><pre>audio/mpeg</pre></li><li><pre>audio/ogg</pre></li><li><pre>audio/pcm</pre></li><li><tt>audio/*</tt>
--   (defaults to mpeg)</li><li><pre>text/plain;
--   charset=utf-8</pre></li></ul></li>
--   </ul>
[$sel:accept:PutSession'] :: PutSession -> Maybe Text

-- | A summary of the recent intents for the bot. You can use the intent
--   summary view to set a checkpoint label on an intent and modify
--   attributes of intents. You can also use it to remove or add intent
--   summary objects to the list.
--   
--   An intent that you modify or add to the list must make sense for the
--   bot. For example, the intent name must be valid for the bot. You must
--   provide valid values for:
--   
--   <ul>
--   <li><pre>intentName</pre></li>
--   <li>slot names</li>
--   <li><pre>slotToElict</pre></li>
--   </ul>
--   
--   If you send the <tt>recentIntentSummaryView</tt> parameter in a
--   <tt>PutSession</tt> request, the contents of the new summary view
--   replaces the old summary view. For example, if a <tt>GetSession</tt>
--   request returns three intents in the summary view and you call
--   <tt>PutSession</tt> with one intent in the summary view, the next call
--   to <tt>GetSession</tt> will only return one intent.
[$sel:recentIntentSummaryView:PutSession'] :: PutSession -> Maybe [IntentSummary]

-- | A list of contexts active for the request. A context can be activated
--   when a previous intent is fulfilled, or by including the context in
--   the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
[$sel:activeContexts:PutSession'] :: PutSession -> Maybe (Sensitive [ActiveContext])

-- | The name of the bot that contains the session data.
[$sel:botName:PutSession'] :: PutSession -> Text

-- | The alias in use for the bot that contains the session data.
[$sel:botAlias:PutSession'] :: PutSession -> Text

-- | The ID of the client application user. Amazon Lex uses this to
--   identify a user's conversation with your bot.
[$sel:userId:PutSession'] :: PutSession -> Text

-- | Create a value of <a>PutSession</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sessionAttributes:PutSession'</a>,
--   <a>putSession_sessionAttributes</a> - Map of key/value pairs
--   representing the session-specific context information. It contains
--   application information passed between Amazon Lex and a client
--   application.
--   
--   <a>$sel:dialogAction:PutSession'</a>, <a>putSession_dialogAction</a> -
--   Sets the next action that the bot should take to fulfill the
--   conversation.
--   
--   <a>$sel:accept:PutSession'</a>, <a>putSession_accept</a> - The message
--   that Amazon Lex returns in the response can be either text or speech
--   based depending on the value of this field.
--   
--   <ul>
--   <li>If the value is <tt>text/plain; charset=utf-8</tt>, Amazon Lex
--   returns text in the response.</li>
--   <li>If the value begins with <tt>audio/</tt>, Amazon Lex returns
--   speech in the response. Amazon Lex uses Amazon Polly to generate the
--   speech in the configuration that you specify. For example, if you
--   specify <tt>audio/mpeg</tt> as the value, Amazon Lex returns speech in
--   the MPEG format.</li>
--   <li>If the value is <tt>audio/pcm</tt>, the speech is returned as
--   <tt>audio/pcm</tt> in 16-bit, little endian format.</li>
--   <li>The following are the accepted
--   values:<ul><li><pre>audio/mpeg</pre></li><li><pre>audio/ogg</pre></li><li><pre>audio/pcm</pre></li><li><tt>audio/*</tt>
--   (defaults to mpeg)</li><li><pre>text/plain;
--   charset=utf-8</pre></li></ul></li>
--   </ul>
--   
--   <a>$sel:recentIntentSummaryView:PutSession'</a>,
--   <a>putSession_recentIntentSummaryView</a> - A summary of the recent
--   intents for the bot. You can use the intent summary view to set a
--   checkpoint label on an intent and modify attributes of intents. You
--   can also use it to remove or add intent summary objects to the list.
--   
--   An intent that you modify or add to the list must make sense for the
--   bot. For example, the intent name must be valid for the bot. You must
--   provide valid values for:
--   
--   <ul>
--   <li><pre>intentName</pre></li>
--   <li>slot names</li>
--   <li><pre>slotToElict</pre></li>
--   </ul>
--   
--   If you send the <tt>recentIntentSummaryView</tt> parameter in a
--   <tt>PutSession</tt> request, the contents of the new summary view
--   replaces the old summary view. For example, if a <tt>GetSession</tt>
--   request returns three intents in the summary view and you call
--   <tt>PutSession</tt> with one intent in the summary view, the next call
--   to <tt>GetSession</tt> will only return one intent.
--   
--   <a>$sel:activeContexts:PutSession'</a>,
--   <a>putSession_activeContexts</a> - A list of contexts active for the
--   request. A context can be activated when a previous intent is
--   fulfilled, or by including the context in the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
--   
--   <a>$sel:botName:PutSession'</a>, <a>putSession_botName</a> - The name
--   of the bot that contains the session data.
--   
--   <a>$sel:botAlias:PutSession'</a>, <a>putSession_botAlias</a> - The
--   alias in use for the bot that contains the session data.
--   
--   <a>$sel:userId:PutSession'</a>, <a>putSession_userId</a> - The ID of
--   the client application user. Amazon Lex uses this to identify a user's
--   conversation with your bot.
newPutSession :: Text -> Text -> Text -> PutSession

-- | Map of key/value pairs representing the session-specific context
--   information. It contains application information passed between Amazon
--   Lex and a client application.
putSession_sessionAttributes :: Lens' PutSession (Maybe (HashMap Text Text))

-- | Sets the next action that the bot should take to fulfill the
--   conversation.
putSession_dialogAction :: Lens' PutSession (Maybe DialogAction)

-- | The message that Amazon Lex returns in the response can be either text
--   or speech based depending on the value of this field.
--   
--   <ul>
--   <li>If the value is <tt>text/plain; charset=utf-8</tt>, Amazon Lex
--   returns text in the response.</li>
--   <li>If the value begins with <tt>audio/</tt>, Amazon Lex returns
--   speech in the response. Amazon Lex uses Amazon Polly to generate the
--   speech in the configuration that you specify. For example, if you
--   specify <tt>audio/mpeg</tt> as the value, Amazon Lex returns speech in
--   the MPEG format.</li>
--   <li>If the value is <tt>audio/pcm</tt>, the speech is returned as
--   <tt>audio/pcm</tt> in 16-bit, little endian format.</li>
--   <li>The following are the accepted
--   values:<ul><li><pre>audio/mpeg</pre></li><li><pre>audio/ogg</pre></li><li><pre>audio/pcm</pre></li><li><tt>audio/*</tt>
--   (defaults to mpeg)</li><li><pre>text/plain;
--   charset=utf-8</pre></li></ul></li>
--   </ul>
putSession_accept :: Lens' PutSession (Maybe Text)

-- | A summary of the recent intents for the bot. You can use the intent
--   summary view to set a checkpoint label on an intent and modify
--   attributes of intents. You can also use it to remove or add intent
--   summary objects to the list.
--   
--   An intent that you modify or add to the list must make sense for the
--   bot. For example, the intent name must be valid for the bot. You must
--   provide valid values for:
--   
--   <ul>
--   <li><pre>intentName</pre></li>
--   <li>slot names</li>
--   <li><pre>slotToElict</pre></li>
--   </ul>
--   
--   If you send the <tt>recentIntentSummaryView</tt> parameter in a
--   <tt>PutSession</tt> request, the contents of the new summary view
--   replaces the old summary view. For example, if a <tt>GetSession</tt>
--   request returns three intents in the summary view and you call
--   <tt>PutSession</tt> with one intent in the summary view, the next call
--   to <tt>GetSession</tt> will only return one intent.
putSession_recentIntentSummaryView :: Lens' PutSession (Maybe [IntentSummary])

-- | A list of contexts active for the request. A context can be activated
--   when a previous intent is fulfilled, or by including the context in
--   the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
putSession_activeContexts :: Lens' PutSession (Maybe [ActiveContext])

-- | The name of the bot that contains the session data.
putSession_botName :: Lens' PutSession Text

-- | The alias in use for the bot that contains the session data.
putSession_botAlias :: Lens' PutSession Text

-- | The ID of the client application user. Amazon Lex uses this to
--   identify a user's conversation with your bot.
putSession_userId :: Lens' PutSession Text

-- | <i>See:</i> <a>newPutSessionResponse</a> smart constructor.
data PutSessionResponse
PutSessionResponse' :: Maybe DialogState -> Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Maybe MessageFormatType -> Maybe Text -> Maybe Text -> Maybe (Sensitive Text) -> Int -> ResponseBody -> PutSessionResponse

-- | <ul>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response to confirm the intent before fulfilling an intent.</li>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit the user's
--   intent.</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting the value of a slot
--   for the current intent.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user has
--   failed. This can happen for various reasons, including the user does
--   not provide an appropriate response to prompts from the service, or if
--   the Lambda function fails to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function has
--   sucessfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the intent.</li>
--   </ul>
[$sel:dialogState:PutSessionResponse'] :: PutSessionResponse -> Maybe DialogState

-- | Map of key/value pairs representing session-specific context
--   information.
[$sel:sessionAttributes:PutSessionResponse'] :: PutSessionResponse -> Maybe Text

-- | The next message that should be presented to the user.
--   
--   The <tt>encodedMessage</tt> field is base-64 encoded. You must decode
--   the field before you can use the value.
[$sel:encodedMessage:PutSessionResponse'] :: PutSessionResponse -> Maybe (Sensitive Text)

-- | Content type as specified in the <tt>Accept</tt> HTTP header in the
--   request.
[$sel:contentType:PutSessionResponse'] :: PutSessionResponse -> Maybe Text

-- | The name of the current intent.
[$sel:intentName:PutSessionResponse'] :: PutSessionResponse -> Maybe Text

-- | The next message that should be presented to the user.
--   
--   You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>message</tt> field is null. You should use the
--   <tt>encodedMessage</tt> field instead.
[$sel:message:PutSessionResponse'] :: PutSessionResponse -> Maybe (Sensitive Text)

-- | A unique identifier for the session.
[$sel:sessionId:PutSessionResponse'] :: PutSessionResponse -> Maybe Text

-- | The format of the response message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
[$sel:messageFormat:PutSessionResponse'] :: PutSessionResponse -> Maybe MessageFormatType

-- | Map of zero or more intent slots Amazon Lex detected from the user
--   input during the conversation.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt> the default is
--   <tt>ORIGINAL_VALUE</tt>.
[$sel:slots:PutSessionResponse'] :: PutSessionResponse -> Maybe Text

-- | If the <tt>dialogState</tt> is <tt>ElicitSlot</tt>, returns the name
--   of the slot for which Amazon Lex is eliciting a value.
[$sel:slotToElicit:PutSessionResponse'] :: PutSessionResponse -> Maybe Text

-- | A list of active contexts for the session.
[$sel:activeContexts:PutSessionResponse'] :: PutSessionResponse -> Maybe (Sensitive Text)

-- | The response's http status code.
[$sel:httpStatus:PutSessionResponse'] :: PutSessionResponse -> Int

-- | The audio version of the message to convey to the user.
[$sel:audioStream:PutSessionResponse'] :: PutSessionResponse -> ResponseBody

-- | Create a value of <a>PutSessionResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dialogState:PutSessionResponse'</a>,
--   <a>putSessionResponse_dialogState</a> - - <tt>ConfirmIntent</tt> -
--   Amazon Lex is expecting a "yes" or "no" response to confirm the intent
--   before fulfilling an intent.
--   
--   <ul>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit the user's
--   intent.</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting the value of a slot
--   for the current intent.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user has
--   failed. This can happen for various reasons, including the user does
--   not provide an appropriate response to prompts from the service, or if
--   the Lambda function fails to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function has
--   sucessfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the intent.</li>
--   </ul>
--   
--   <a>$sel:sessionAttributes:PutSession'</a>,
--   <a>putSessionResponse_sessionAttributes</a> - Map of key/value pairs
--   representing session-specific context information.
--   
--   <a>$sel:encodedMessage:PutSessionResponse'</a>,
--   <a>putSessionResponse_encodedMessage</a> - The next message that
--   should be presented to the user.
--   
--   The <tt>encodedMessage</tt> field is base-64 encoded. You must decode
--   the field before you can use the value.
--   
--   <a>$sel:contentType:PutSessionResponse'</a>,
--   <a>putSessionResponse_contentType</a> - Content type as specified in
--   the <tt>Accept</tt> HTTP header in the request.
--   
--   <a>$sel:intentName:PutSessionResponse'</a>,
--   <a>putSessionResponse_intentName</a> - The name of the current intent.
--   
--   <a>$sel:message:PutSessionResponse'</a>,
--   <a>putSessionResponse_message</a> - The next message that should be
--   presented to the user.
--   
--   You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>message</tt> field is null. You should use the
--   <tt>encodedMessage</tt> field instead.
--   
--   <a>$sel:sessionId:PutSessionResponse'</a>,
--   <a>putSessionResponse_sessionId</a> - A unique identifier for the
--   session.
--   
--   <a>$sel:messageFormat:PutSessionResponse'</a>,
--   <a>putSessionResponse_messageFormat</a> - The format of the response
--   message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
--   
--   <a>$sel:slots:PutSessionResponse'</a>, <a>putSessionResponse_slots</a>
--   - Map of zero or more intent slots Amazon Lex detected from the user
--   input during the conversation.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt> the default is
--   <tt>ORIGINAL_VALUE</tt>.
--   
--   <a>$sel:slotToElicit:PutSessionResponse'</a>,
--   <a>putSessionResponse_slotToElicit</a> - If the <tt>dialogState</tt>
--   is <tt>ElicitSlot</tt>, returns the name of the slot for which Amazon
--   Lex is eliciting a value.
--   
--   <a>$sel:activeContexts:PutSession'</a>,
--   <a>putSessionResponse_activeContexts</a> - A list of active contexts
--   for the session.
--   
--   <a>$sel:httpStatus:PutSessionResponse'</a>,
--   <a>putSessionResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:audioStream:PutSessionResponse'</a>,
--   <a>putSessionResponse_audioStream</a> - The audio version of the
--   message to convey to the user.
newPutSessionResponse :: Int -> ResponseBody -> PutSessionResponse

-- | <ul>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response to confirm the intent before fulfilling an intent.</li>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit the user's
--   intent.</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting the value of a slot
--   for the current intent.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user has
--   failed. This can happen for various reasons, including the user does
--   not provide an appropriate response to prompts from the service, or if
--   the Lambda function fails to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function has
--   sucessfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the intent.</li>
--   </ul>
putSessionResponse_dialogState :: Lens' PutSessionResponse (Maybe DialogState)

-- | Map of key/value pairs representing session-specific context
--   information.
putSessionResponse_sessionAttributes :: Lens' PutSessionResponse (Maybe Text)

-- | The next message that should be presented to the user.
--   
--   The <tt>encodedMessage</tt> field is base-64 encoded. You must decode
--   the field before you can use the value.
putSessionResponse_encodedMessage :: Lens' PutSessionResponse (Maybe Text)

-- | Content type as specified in the <tt>Accept</tt> HTTP header in the
--   request.
putSessionResponse_contentType :: Lens' PutSessionResponse (Maybe Text)

-- | The name of the current intent.
putSessionResponse_intentName :: Lens' PutSessionResponse (Maybe Text)

-- | The next message that should be presented to the user.
--   
--   You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>message</tt> field is null. You should use the
--   <tt>encodedMessage</tt> field instead.
putSessionResponse_message :: Lens' PutSessionResponse (Maybe Text)

-- | A unique identifier for the session.
putSessionResponse_sessionId :: Lens' PutSessionResponse (Maybe Text)

-- | The format of the response message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
putSessionResponse_messageFormat :: Lens' PutSessionResponse (Maybe MessageFormatType)

-- | Map of zero or more intent slots Amazon Lex detected from the user
--   input during the conversation.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt> the default is
--   <tt>ORIGINAL_VALUE</tt>.
putSessionResponse_slots :: Lens' PutSessionResponse (Maybe Text)

-- | If the <tt>dialogState</tt> is <tt>ElicitSlot</tt>, returns the name
--   of the slot for which Amazon Lex is eliciting a value.
putSessionResponse_slotToElicit :: Lens' PutSessionResponse (Maybe Text)

-- | A list of active contexts for the session.
putSessionResponse_activeContexts :: Lens' PutSessionResponse (Maybe Text)

-- | The response's http status code.
putSessionResponse_httpStatus :: Lens' PutSessionResponse Int

-- | The audio version of the message to convey to the user.
putSessionResponse_audioStream :: Lens' PutSessionResponse ResponseBody
instance GHC.Generics.Generic Network.AWS.LexRuntime.PutSession.PutSession
instance GHC.Show.Show Network.AWS.LexRuntime.PutSession.PutSession
instance GHC.Classes.Eq Network.AWS.LexRuntime.PutSession.PutSession
instance GHC.Generics.Generic Network.AWS.LexRuntime.PutSession.PutSessionResponse
instance GHC.Show.Show Network.AWS.LexRuntime.PutSession.PutSessionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.LexRuntime.PutSession.PutSession
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.PutSession.PutSession
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.PutSession.PutSession
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.LexRuntime.PutSession.PutSession
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.LexRuntime.PutSession.PutSession
instance Network.AWS.Data.Path.ToPath Network.AWS.LexRuntime.PutSession.PutSession
instance Network.AWS.Data.Query.ToQuery Network.AWS.LexRuntime.PutSession.PutSession


-- | Sends user input to Amazon Lex. Client applications can use this API
--   to send requests to Amazon Lex at runtime. Amazon Lex then interprets
--   the user input using the machine learning model it built for the bot.
--   
--   In response, Amazon Lex returns the next <tt>message</tt> to convey to
--   the user an optional <tt>responseCard</tt> to display. Consider the
--   following example messages:
--   
--   <ul>
--   <li>For a user input "I would like a pizza", Amazon Lex might return a
--   response with a message eliciting slot data (for example, PizzaSize):
--   "What size pizza would you like?"</li>
--   <li>After the user provides all of the pizza order information, Amazon
--   Lex might return a response with a message to obtain user confirmation
--   "Proceed with the pizza order?".</li>
--   <li>After the user replies to a confirmation prompt with a "yes",
--   Amazon Lex might return a conclusion statement: "Thank you, your
--   cheese pizza has been ordered.".</li>
--   </ul>
--   
--   Not all Amazon Lex messages require a user response. For example, a
--   conclusion statement does not require a response. Some messages
--   require only a "yes" or "no" user response. In addition to the
--   <tt>message</tt>, Amazon Lex provides additional context about the
--   message in the response that you might use to enhance client behavior,
--   for example, to display the appropriate client user interface. These
--   are the <tt>slotToElicit</tt>, <tt>dialogState</tt>,
--   <tt>intentName</tt>, and <tt>slots</tt> fields in the response.
--   Consider the following examples:
--   
--   <ul>
--   <li>If the message is to elicit slot data, Amazon Lex returns the
--   following context information:<ul><li><tt>dialogState</tt> set to
--   ElicitSlot</li><li><tt>intentName</tt> set to the intent name in the
--   current context</li><li><tt>slotToElicit</tt> set to the slot name for
--   which the <tt>message</tt> is eliciting
--   information</li><li><tt>slots</tt> set to a map of slots, configured
--   for the intent, with currently known values</li></ul></li>
--   <li>If the message is a confirmation prompt, the <tt>dialogState</tt>
--   is set to ConfirmIntent and <tt>SlotToElicit</tt> is set to null.</li>
--   <li>If the message is a clarification prompt (configured for the
--   intent) that indicates that user intent is not understood, the
--   <tt>dialogState</tt> is set to ElicitIntent and <tt>slotToElicit</tt>
--   is set to null.</li>
--   </ul>
--   
--   In addition, Amazon Lex also returns your application-specific
--   <tt>sessionAttributes</tt>. For more information, see <a>Managing
--   Conversation Context</a>.
module Network.AWS.LexRuntime.PostText

-- | <i>See:</i> <a>newPostText</a> smart constructor.
data PostText
PostText' :: Maybe (Sensitive (HashMap Text Text)) -> Maybe (Sensitive (HashMap Text Text)) -> Maybe (Sensitive [ActiveContext]) -> Text -> Text -> Text -> Sensitive Text -> PostText

-- | Application-specific information passed between Amazon Lex and a
--   client application.
--   
--   For more information, see <a>Setting Session Attributes</a>.
[$sel:sessionAttributes:PostText'] :: PostText -> Maybe (Sensitive (HashMap Text Text))

-- | Request-specific information passed between Amazon Lex and a client
--   application.
--   
--   The namespace <tt>x-amz-lex:</tt> is reserved for special attributes.
--   Don't create any request attributes with the prefix
--   <tt>x-amz-lex:</tt>.
--   
--   For more information, see <a>Setting Request Attributes</a>.
[$sel:requestAttributes:PostText'] :: PostText -> Maybe (Sensitive (HashMap Text Text))

-- | A list of contexts active for the request. A context can be activated
--   when a previous intent is fulfilled, or by including the context in
--   the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
[$sel:activeContexts:PostText'] :: PostText -> Maybe (Sensitive [ActiveContext])

-- | The name of the Amazon Lex bot.
[$sel:botName:PostText'] :: PostText -> Text

-- | The alias of the Amazon Lex bot.
[$sel:botAlias:PostText'] :: PostText -> Text

-- | The ID of the client application user. Amazon Lex uses this to
--   identify a user's conversation with your bot. At runtime, each request
--   must contain the <tt>userID</tt> field.
--   
--   To decide the user ID to use for your application, consider the
--   following factors.
--   
--   <ul>
--   <li>The <tt>userID</tt> field must not contain any personally
--   identifiable information of the user, for example, name, personal
--   identification numbers, or other end user personal information.</li>
--   <li>If you want a user to start a conversation on one device and
--   continue on another device, use a user-specific identifier.</li>
--   <li>If you want the same user to be able to have two independent
--   conversations on two different devices, choose a device-specific
--   identifier.</li>
--   <li>A user can't have two independent conversations with two different
--   versions of the same bot. For example, a user can't have a
--   conversation with the PROD and BETA versions of the same bot. If you
--   anticipate that a user will need to have conversation with two
--   different versions, for example, while testing, include the bot alias
--   in the user ID to separate the two conversations.</li>
--   </ul>
[$sel:userId:PostText'] :: PostText -> Text

-- | The text that the user entered (Amazon Lex interprets this text).
[$sel:inputText:PostText'] :: PostText -> Sensitive Text

-- | Create a value of <a>PostText</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sessionAttributes:PostText'</a>,
--   <a>postText_sessionAttributes</a> - Application-specific information
--   passed between Amazon Lex and a client application.
--   
--   For more information, see <a>Setting Session Attributes</a>.
--   
--   <a>$sel:requestAttributes:PostText'</a>,
--   <a>postText_requestAttributes</a> - Request-specific information
--   passed between Amazon Lex and a client application.
--   
--   The namespace <tt>x-amz-lex:</tt> is reserved for special attributes.
--   Don't create any request attributes with the prefix
--   <tt>x-amz-lex:</tt>.
--   
--   For more information, see <a>Setting Request Attributes</a>.
--   
--   <a>$sel:activeContexts:PostText'</a>, <a>postText_activeContexts</a> -
--   A list of contexts active for the request. A context can be activated
--   when a previous intent is fulfilled, or by including the context in
--   the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
--   
--   <a>$sel:botName:PostText'</a>, <a>postText_botName</a> - The name of
--   the Amazon Lex bot.
--   
--   <a>$sel:botAlias:PostText'</a>, <a>postText_botAlias</a> - The alias
--   of the Amazon Lex bot.
--   
--   <a>$sel:userId:PostText'</a>, <a>postText_userId</a> - The ID of the
--   client application user. Amazon Lex uses this to identify a user's
--   conversation with your bot. At runtime, each request must contain the
--   <tt>userID</tt> field.
--   
--   To decide the user ID to use for your application, consider the
--   following factors.
--   
--   <ul>
--   <li>The <tt>userID</tt> field must not contain any personally
--   identifiable information of the user, for example, name, personal
--   identification numbers, or other end user personal information.</li>
--   <li>If you want a user to start a conversation on one device and
--   continue on another device, use a user-specific identifier.</li>
--   <li>If you want the same user to be able to have two independent
--   conversations on two different devices, choose a device-specific
--   identifier.</li>
--   <li>A user can't have two independent conversations with two different
--   versions of the same bot. For example, a user can't have a
--   conversation with the PROD and BETA versions of the same bot. If you
--   anticipate that a user will need to have conversation with two
--   different versions, for example, while testing, include the bot alias
--   in the user ID to separate the two conversations.</li>
--   </ul>
--   
--   <a>$sel:inputText:PostText'</a>, <a>postText_inputText</a> - The text
--   that the user entered (Amazon Lex interprets this text).
newPostText :: Text -> Text -> Text -> Text -> PostText

-- | Application-specific information passed between Amazon Lex and a
--   client application.
--   
--   For more information, see <a>Setting Session Attributes</a>.
postText_sessionAttributes :: Lens' PostText (Maybe (HashMap Text Text))

-- | Request-specific information passed between Amazon Lex and a client
--   application.
--   
--   The namespace <tt>x-amz-lex:</tt> is reserved for special attributes.
--   Don't create any request attributes with the prefix
--   <tt>x-amz-lex:</tt>.
--   
--   For more information, see <a>Setting Request Attributes</a>.
postText_requestAttributes :: Lens' PostText (Maybe (HashMap Text Text))

-- | A list of contexts active for the request. A context can be activated
--   when a previous intent is fulfilled, or by including the context in
--   the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
postText_activeContexts :: Lens' PostText (Maybe [ActiveContext])

-- | The name of the Amazon Lex bot.
postText_botName :: Lens' PostText Text

-- | The alias of the Amazon Lex bot.
postText_botAlias :: Lens' PostText Text

-- | The ID of the client application user. Amazon Lex uses this to
--   identify a user's conversation with your bot. At runtime, each request
--   must contain the <tt>userID</tt> field.
--   
--   To decide the user ID to use for your application, consider the
--   following factors.
--   
--   <ul>
--   <li>The <tt>userID</tt> field must not contain any personally
--   identifiable information of the user, for example, name, personal
--   identification numbers, or other end user personal information.</li>
--   <li>If you want a user to start a conversation on one device and
--   continue on another device, use a user-specific identifier.</li>
--   <li>If you want the same user to be able to have two independent
--   conversations on two different devices, choose a device-specific
--   identifier.</li>
--   <li>A user can't have two independent conversations with two different
--   versions of the same bot. For example, a user can't have a
--   conversation with the PROD and BETA versions of the same bot. If you
--   anticipate that a user will need to have conversation with two
--   different versions, for example, while testing, include the bot alias
--   in the user ID to separate the two conversations.</li>
--   </ul>
postText_userId :: Lens' PostText Text

-- | The text that the user entered (Amazon Lex interprets this text).
postText_inputText :: Lens' PostText Text

-- | <i>See:</i> <a>newPostTextResponse</a> smart constructor.
data PostTextResponse
PostTextResponse' :: Maybe ResponseCard -> Maybe DialogState -> Maybe (Sensitive (HashMap Text Text)) -> Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Maybe MessageFormatType -> Maybe (Sensitive (HashMap Text Text)) -> Maybe IntentConfidence -> Maybe SentimentResponse -> Maybe Text -> Maybe [PredictedIntent] -> Maybe (Sensitive [ActiveContext]) -> Int -> PostTextResponse

-- | Represents the options that the user has to respond to the current
--   prompt. Response Card can come from the bot configuration (in the
--   Amazon Lex console, choose the settings button next to a slot) or from
--   a code hook (Lambda function).
[$sel:responseCard:PostTextResponse'] :: PostTextResponse -> Maybe ResponseCard

-- | Identifies the current state of the user interaction. Amazon Lex
--   returns one of the following values as <tt>dialogState</tt>. The
--   client can optionally use this information to customize the user
--   interface.
--   
--   <ul>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit user intent.For
--   example, a user might utter an intent ("I want to order a pizza"). If
--   Amazon Lex cannot infer the user intent from this utterance, it will
--   return this dialogState.</li>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response.For example, Amazon Lex wants user confirmation before
--   fulfilling an intent.Instead of a simple "yes" or "no," a user might
--   respond with additional information. For example, "yes, but make it
--   thick crust pizza" or "no, I want to order a drink". Amazon Lex can
--   process such additional information (in these examples, update the
--   crust type slot value, or change intent from OrderPizza to
--   OrderDrink).</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting a slot value for the
--   current intent.For example, suppose that in the response Amazon Lex
--   sends this message: "What size pizza would you like?". A user might
--   reply with the slot value (e.g., "medium"). The user might also
--   provide additional information in the response (e.g., "medium thick
--   crust pizza"). Amazon Lex can process such additional information
--   appropriately.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function configured
--   for the intent has successfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the intent.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user
--   failed.This can happen for various reasons including that the user did
--   not provide an appropriate response to prompts from the service (you
--   can configure how many times Amazon Lex can prompt a user for specific
--   information), or the Lambda function failed to fulfill the
--   intent.</li>
--   </ul>
[$sel:dialogState:PostTextResponse'] :: PostTextResponse -> Maybe DialogState

-- | A map of key-value pairs representing the session-specific context
--   information.
[$sel:sessionAttributes:PostTextResponse'] :: PostTextResponse -> Maybe (Sensitive (HashMap Text Text))

-- | The current user intent that Amazon Lex is aware of.
[$sel:intentName:PostTextResponse'] :: PostTextResponse -> Maybe Text

-- | The message to convey to the user. The message can come from the bot's
--   configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
[$sel:message:PostTextResponse'] :: PostTextResponse -> Maybe (Sensitive Text)

-- | The version of the bot that responded to the conversation. You can use
--   this information to help determine if one version of a bot is
--   performing better than another version.
[$sel:botVersion:PostTextResponse'] :: PostTextResponse -> Maybe Text

-- | A unique identifier for the session.
[$sel:sessionId:PostTextResponse'] :: PostTextResponse -> Maybe Text

-- | The format of the response message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format defined by
--   the Lambda function.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
[$sel:messageFormat:PostTextResponse'] :: PostTextResponse -> Maybe MessageFormatType

-- | The intent slots that Amazon Lex detected from the user input in the
--   conversation.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt>, the default is
--   <tt>ORIGINAL_VALUE</tt>.
[$sel:slots:PostTextResponse'] :: PostTextResponse -> Maybe (Sensitive (HashMap Text Text))

-- | Provides a score that indicates how confident Amazon Lex is that the
--   returned intent is the one that matches the user's intent. The score
--   is between 0.0 and 1.0. For more information, see <a>Confidence
--   Scores</a>.
--   
--   The score is a relative score, not an absolute score. The score may
--   change based on improvements to Amazon Lex.
[$sel:nluIntentConfidence:PostTextResponse'] :: PostTextResponse -> Maybe IntentConfidence

-- | The sentiment expressed in and utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field contains the result of the analysis.
[$sel:sentimentResponse:PostTextResponse'] :: PostTextResponse -> Maybe SentimentResponse

-- | If the <tt>dialogState</tt> value is <tt>ElicitSlot</tt>, returns the
--   name of the slot for which Amazon Lex is eliciting a value.
[$sel:slotToElicit:PostTextResponse'] :: PostTextResponse -> Maybe Text

-- | One to four alternative intents that may be applicable to the user's
--   intent.
--   
--   Each alternative includes a score that indicates how confident Amazon
--   Lex is that the intent matches the user's intent. The intents are
--   sorted by the confidence score.
[$sel:alternativeIntents:PostTextResponse'] :: PostTextResponse -> Maybe [PredictedIntent]

-- | A list of active contexts for the session. A context can be set when
--   an intent is fulfilled or by calling the <tt>PostContent</tt>,
--   <tt>PostText</tt>, or <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
[$sel:activeContexts:PostTextResponse'] :: PostTextResponse -> Maybe (Sensitive [ActiveContext])

-- | The response's http status code.
[$sel:httpStatus:PostTextResponse'] :: PostTextResponse -> Int

-- | Create a value of <a>PostTextResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseCard:PostTextResponse'</a>,
--   <a>postTextResponse_responseCard</a> - Represents the options that the
--   user has to respond to the current prompt. Response Card can come from
--   the bot configuration (in the Amazon Lex console, choose the settings
--   button next to a slot) or from a code hook (Lambda function).
--   
--   <a>$sel:dialogState:PostTextResponse'</a>,
--   <a>postTextResponse_dialogState</a> - Identifies the current state of
--   the user interaction. Amazon Lex returns one of the following values
--   as <tt>dialogState</tt>. The client can optionally use this
--   information to customize the user interface.
--   
--   <ul>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit user intent.For
--   example, a user might utter an intent ("I want to order a pizza"). If
--   Amazon Lex cannot infer the user intent from this utterance, it will
--   return this dialogState.</li>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response.For example, Amazon Lex wants user confirmation before
--   fulfilling an intent.Instead of a simple "yes" or "no," a user might
--   respond with additional information. For example, "yes, but make it
--   thick crust pizza" or "no, I want to order a drink". Amazon Lex can
--   process such additional information (in these examples, update the
--   crust type slot value, or change intent from OrderPizza to
--   OrderDrink).</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting a slot value for the
--   current intent.For example, suppose that in the response Amazon Lex
--   sends this message: "What size pizza would you like?". A user might
--   reply with the slot value (e.g., "medium"). The user might also
--   provide additional information in the response (e.g., "medium thick
--   crust pizza"). Amazon Lex can process such additional information
--   appropriately.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function configured
--   for the intent has successfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the intent.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user
--   failed.This can happen for various reasons including that the user did
--   not provide an appropriate response to prompts from the service (you
--   can configure how many times Amazon Lex can prompt a user for specific
--   information), or the Lambda function failed to fulfill the
--   intent.</li>
--   </ul>
--   
--   <a>$sel:sessionAttributes:PostText'</a>,
--   <a>postTextResponse_sessionAttributes</a> - A map of key-value pairs
--   representing the session-specific context information.
--   
--   <a>$sel:intentName:PostTextResponse'</a>,
--   <a>postTextResponse_intentName</a> - The current user intent that
--   Amazon Lex is aware of.
--   
--   <a>$sel:message:PostTextResponse'</a>, <a>postTextResponse_message</a>
--   - The message to convey to the user. The message can come from the
--   bot's configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
--   
--   <a>$sel:botVersion:PostTextResponse'</a>,
--   <a>postTextResponse_botVersion</a> - The version of the bot that
--   responded to the conversation. You can use this information to help
--   determine if one version of a bot is performing better than another
--   version.
--   
--   <a>$sel:sessionId:PostTextResponse'</a>,
--   <a>postTextResponse_sessionId</a> - A unique identifier for the
--   session.
--   
--   <a>$sel:messageFormat:PostTextResponse'</a>,
--   <a>postTextResponse_messageFormat</a> - The format of the response
--   message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format defined by
--   the Lambda function.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
--   
--   <a>$sel:slots:PostTextResponse'</a>, <a>postTextResponse_slots</a> -
--   The intent slots that Amazon Lex detected from the user input in the
--   conversation.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt>, the default is
--   <tt>ORIGINAL_VALUE</tt>.
--   
--   <a>$sel:nluIntentConfidence:PostTextResponse'</a>,
--   <a>postTextResponse_nluIntentConfidence</a> - Provides a score that
--   indicates how confident Amazon Lex is that the returned intent is the
--   one that matches the user's intent. The score is between 0.0 and 1.0.
--   For more information, see <a>Confidence Scores</a>.
--   
--   The score is a relative score, not an absolute score. The score may
--   change based on improvements to Amazon Lex.
--   
--   <a>$sel:sentimentResponse:PostTextResponse'</a>,
--   <a>postTextResponse_sentimentResponse</a> - The sentiment expressed in
--   and utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field contains the result of the analysis.
--   
--   <a>$sel:slotToElicit:PostTextResponse'</a>,
--   <a>postTextResponse_slotToElicit</a> - If the <tt>dialogState</tt>
--   value is <tt>ElicitSlot</tt>, returns the name of the slot for which
--   Amazon Lex is eliciting a value.
--   
--   <a>$sel:alternativeIntents:PostTextResponse'</a>,
--   <a>postTextResponse_alternativeIntents</a> - One to four alternative
--   intents that may be applicable to the user's intent.
--   
--   Each alternative includes a score that indicates how confident Amazon
--   Lex is that the intent matches the user's intent. The intents are
--   sorted by the confidence score.
--   
--   <a>$sel:activeContexts:PostText'</a>,
--   <a>postTextResponse_activeContexts</a> - A list of active contexts for
--   the session. A context can be set when an intent is fulfilled or by
--   calling the <tt>PostContent</tt>, <tt>PostText</tt>, or
--   <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
--   
--   <a>$sel:httpStatus:PostTextResponse'</a>,
--   <a>postTextResponse_httpStatus</a> - The response's http status code.
newPostTextResponse :: Int -> PostTextResponse

-- | Represents the options that the user has to respond to the current
--   prompt. Response Card can come from the bot configuration (in the
--   Amazon Lex console, choose the settings button next to a slot) or from
--   a code hook (Lambda function).
postTextResponse_responseCard :: Lens' PostTextResponse (Maybe ResponseCard)

-- | Identifies the current state of the user interaction. Amazon Lex
--   returns one of the following values as <tt>dialogState</tt>. The
--   client can optionally use this information to customize the user
--   interface.
--   
--   <ul>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit user intent.For
--   example, a user might utter an intent ("I want to order a pizza"). If
--   Amazon Lex cannot infer the user intent from this utterance, it will
--   return this dialogState.</li>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response.For example, Amazon Lex wants user confirmation before
--   fulfilling an intent.Instead of a simple "yes" or "no," a user might
--   respond with additional information. For example, "yes, but make it
--   thick crust pizza" or "no, I want to order a drink". Amazon Lex can
--   process such additional information (in these examples, update the
--   crust type slot value, or change intent from OrderPizza to
--   OrderDrink).</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting a slot value for the
--   current intent.For example, suppose that in the response Amazon Lex
--   sends this message: "What size pizza would you like?". A user might
--   reply with the slot value (e.g., "medium"). The user might also
--   provide additional information in the response (e.g., "medium thick
--   crust pizza"). Amazon Lex can process such additional information
--   appropriately.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function configured
--   for the intent has successfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the intent.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user
--   failed.This can happen for various reasons including that the user did
--   not provide an appropriate response to prompts from the service (you
--   can configure how many times Amazon Lex can prompt a user for specific
--   information), or the Lambda function failed to fulfill the
--   intent.</li>
--   </ul>
postTextResponse_dialogState :: Lens' PostTextResponse (Maybe DialogState)

-- | A map of key-value pairs representing the session-specific context
--   information.
postTextResponse_sessionAttributes :: Lens' PostTextResponse (Maybe (HashMap Text Text))

-- | The current user intent that Amazon Lex is aware of.
postTextResponse_intentName :: Lens' PostTextResponse (Maybe Text)

-- | The message to convey to the user. The message can come from the bot's
--   configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
postTextResponse_message :: Lens' PostTextResponse (Maybe Text)

-- | The version of the bot that responded to the conversation. You can use
--   this information to help determine if one version of a bot is
--   performing better than another version.
postTextResponse_botVersion :: Lens' PostTextResponse (Maybe Text)

-- | A unique identifier for the session.
postTextResponse_sessionId :: Lens' PostTextResponse (Maybe Text)

-- | The format of the response message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format defined by
--   the Lambda function.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
postTextResponse_messageFormat :: Lens' PostTextResponse (Maybe MessageFormatType)

-- | The intent slots that Amazon Lex detected from the user input in the
--   conversation.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt>, the default is
--   <tt>ORIGINAL_VALUE</tt>.
postTextResponse_slots :: Lens' PostTextResponse (Maybe (HashMap Text Text))

-- | Provides a score that indicates how confident Amazon Lex is that the
--   returned intent is the one that matches the user's intent. The score
--   is between 0.0 and 1.0. For more information, see <a>Confidence
--   Scores</a>.
--   
--   The score is a relative score, not an absolute score. The score may
--   change based on improvements to Amazon Lex.
postTextResponse_nluIntentConfidence :: Lens' PostTextResponse (Maybe IntentConfidence)

-- | The sentiment expressed in and utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field contains the result of the analysis.
postTextResponse_sentimentResponse :: Lens' PostTextResponse (Maybe SentimentResponse)

-- | If the <tt>dialogState</tt> value is <tt>ElicitSlot</tt>, returns the
--   name of the slot for which Amazon Lex is eliciting a value.
postTextResponse_slotToElicit :: Lens' PostTextResponse (Maybe Text)

-- | One to four alternative intents that may be applicable to the user's
--   intent.
--   
--   Each alternative includes a score that indicates how confident Amazon
--   Lex is that the intent matches the user's intent. The intents are
--   sorted by the confidence score.
postTextResponse_alternativeIntents :: Lens' PostTextResponse (Maybe [PredictedIntent])

-- | A list of active contexts for the session. A context can be set when
--   an intent is fulfilled or by calling the <tt>PostContent</tt>,
--   <tt>PostText</tt>, or <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
postTextResponse_activeContexts :: Lens' PostTextResponse (Maybe [ActiveContext])

-- | The response's http status code.
postTextResponse_httpStatus :: Lens' PostTextResponse Int
instance GHC.Generics.Generic Network.AWS.LexRuntime.PostText.PostText
instance GHC.Show.Show Network.AWS.LexRuntime.PostText.PostText
instance GHC.Classes.Eq Network.AWS.LexRuntime.PostText.PostText
instance GHC.Generics.Generic Network.AWS.LexRuntime.PostText.PostTextResponse
instance GHC.Show.Show Network.AWS.LexRuntime.PostText.PostTextResponse
instance GHC.Classes.Eq Network.AWS.LexRuntime.PostText.PostTextResponse
instance Network.AWS.Types.AWSRequest Network.AWS.LexRuntime.PostText.PostText
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.PostText.PostTextResponse
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.PostText.PostText
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.PostText.PostText
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.LexRuntime.PostText.PostText
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.LexRuntime.PostText.PostText
instance Network.AWS.Data.Path.ToPath Network.AWS.LexRuntime.PostText.PostText
instance Network.AWS.Data.Query.ToQuery Network.AWS.LexRuntime.PostText.PostText


-- | Sends user input (text or speech) to Amazon Lex. Clients use this API
--   to send text and audio requests to Amazon Lex at runtime. Amazon Lex
--   interprets the user input using the machine learning model that it
--   built for the bot.
--   
--   The <tt>PostContent</tt> operation supports audio input at 8kHz and
--   16kHz. You can use 8kHz audio to achieve higher speech recognition
--   accuracy in telephone audio applications.
--   
--   In response, Amazon Lex returns the next message to convey to the
--   user. Consider the following example messages:
--   
--   <ul>
--   <li>For a user input "I would like a pizza," Amazon Lex might return a
--   response with a message eliciting slot data (for example,
--   <tt>PizzaSize</tt>): "What size pizza would you like?".</li>
--   <li>After the user provides all of the pizza order information, Amazon
--   Lex might return a response with a message to get user confirmation:
--   "Order the pizza?".</li>
--   <li>After the user replies "Yes" to the confirmation prompt, Amazon
--   Lex might return a conclusion statement: "Thank you, your cheese pizza
--   has been ordered.".</li>
--   </ul>
--   
--   Not all Amazon Lex messages require a response from the user. For
--   example, conclusion statements do not require a response. Some
--   messages require only a yes or no response. In addition to the
--   <tt>message</tt>, Amazon Lex provides additional context about the
--   message in the response that you can use to enhance client behavior,
--   such as displaying the appropriate client user interface. Consider the
--   following examples:
--   
--   <ul>
--   <li>If the message is to elicit slot data, Amazon Lex returns the
--   following context information:<ul><li><tt>x-amz-lex-dialog-state</tt>
--   header set to
--   <tt>ElicitSlot</tt></li><li><tt>x-amz-lex-intent-name</tt> header set
--   to the intent name in the current
--   context</li><li><tt>x-amz-lex-slot-to-elicit</tt> header set to the
--   slot name for which the <tt>message</tt> is eliciting
--   information</li><li><tt>x-amz-lex-slots</tt> header set to a map of
--   slots configured for the intent with their current
--   values</li></ul></li>
--   <li>If the message is a confirmation prompt, the
--   <tt>x-amz-lex-dialog-state</tt> header is set to <tt>Confirmation</tt>
--   and the <tt>x-amz-lex-slot-to-elicit</tt> header is omitted.</li>
--   <li>If the message is a clarification prompt configured for the
--   intent, indicating that the user intent is not understood, the
--   <tt>x-amz-dialog-state</tt> header is set to <tt>ElicitIntent</tt> and
--   the <tt>x-amz-slot-to-elicit</tt> header is omitted.</li>
--   </ul>
--   
--   In addition, Amazon Lex also returns your application-specific
--   <tt>sessionAttributes</tt>. For more information, see <a>Managing
--   Conversation Context</a>.
module Network.AWS.LexRuntime.PostContent

-- | <i>See:</i> <a>newPostContent</a> smart constructor.
data PostContent
PostContent' :: Maybe (Sensitive Text) -> Maybe Text -> Maybe (Sensitive Text) -> Maybe (Sensitive Text) -> Text -> Text -> Text -> Text -> HashedBody -> PostContent

-- | You pass this value as the <tt>x-amz-lex-session-attributes</tt> HTTP
--   header.
--   
--   Application-specific information passed between Amazon Lex and a
--   client application. The value must be a JSON serialized and base64
--   encoded map with string keys and values. The total size of the
--   <tt>sessionAttributes</tt> and <tt>requestAttributes</tt> headers is
--   limited to 12 KB.
--   
--   For more information, see <a>Setting Session Attributes</a>.
[$sel:sessionAttributes:PostContent'] :: PostContent -> Maybe (Sensitive Text)

-- | You pass this value as the <tt>Accept</tt> HTTP header.
--   
--   The message Amazon Lex returns in the response can be either text or
--   speech based on the <tt>Accept</tt> HTTP header value in the request.
--   
--   <ul>
--   <li>If the value is <tt>text/plain; charset=utf-8</tt>, Amazon Lex
--   returns text in the response.</li>
--   <li>If the value begins with <tt>audio/</tt>, Amazon Lex returns
--   speech in the response. Amazon Lex uses Amazon Polly to generate the
--   speech (using the configuration you specified in the <tt>Accept</tt>
--   header). For example, if you specify <tt>audio/mpeg</tt> as the value,
--   Amazon Lex returns speech in the MPEG format.</li>
--   <li>If the value is <tt>audio/pcm</tt>, the speech returned is
--   <tt>audio/pcm</tt> in 16-bit, little endian format.</li>
--   <li>The following are the accepted
--   values:<ul><li>audio/mpeg</li><li>audio/ogg</li><li>audio/pcm</li><li>text/plain;
--   charset=utf-8</li><li>audio/* (defaults to mpeg)</li></ul></li>
--   </ul>
[$sel:accept:PostContent'] :: PostContent -> Maybe Text

-- | You pass this value as the <tt>x-amz-lex-request-attributes</tt> HTTP
--   header.
--   
--   Request-specific information passed between Amazon Lex and a client
--   application. The value must be a JSON serialized and base64 encoded
--   map with string keys and values. The total size of the
--   <tt>requestAttributes</tt> and <tt>sessionAttributes</tt> headers is
--   limited to 12 KB.
--   
--   The namespace <tt>x-amz-lex:</tt> is reserved for special attributes.
--   Don't create any request attributes with the prefix
--   <tt>x-amz-lex:</tt>.
--   
--   For more information, see <a>Setting Request Attributes</a>.
[$sel:requestAttributes:PostContent'] :: PostContent -> Maybe (Sensitive Text)

-- | A list of contexts active for the request. A context can be activated
--   when a previous intent is fulfilled, or by including the context in
--   the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
[$sel:activeContexts:PostContent'] :: PostContent -> Maybe (Sensitive Text)

-- | Name of the Amazon Lex bot.
[$sel:botName:PostContent'] :: PostContent -> Text

-- | Alias of the Amazon Lex bot.
[$sel:botAlias:PostContent'] :: PostContent -> Text

-- | The ID of the client application user. Amazon Lex uses this to
--   identify a user's conversation with your bot. At runtime, each request
--   must contain the <tt>userID</tt> field.
--   
--   To decide the user ID to use for your application, consider the
--   following factors.
--   
--   <ul>
--   <li>The <tt>userID</tt> field must not contain any personally
--   identifiable information of the user, for example, name, personal
--   identification numbers, or other end user personal information.</li>
--   <li>If you want a user to start a conversation on one device and
--   continue on another device, use a user-specific identifier.</li>
--   <li>If you want the same user to be able to have two independent
--   conversations on two different devices, choose a device-specific
--   identifier.</li>
--   <li>A user can't have two independent conversations with two different
--   versions of the same bot. For example, a user can't have a
--   conversation with the PROD and BETA versions of the same bot. If you
--   anticipate that a user will need to have conversation with two
--   different versions, for example, while testing, include the bot alias
--   in the user ID to separate the two conversations.</li>
--   </ul>
[$sel:userId:PostContent'] :: PostContent -> Text

-- | You pass this value as the <tt>Content-Type</tt> HTTP header.
--   
--   Indicates the audio format or text. The header value must start with
--   one of the following prefixes:
--   
--   <ul>
--   <li>PCM format, audio data must be in little-endian byte
--   order.<ul><li>audio/l16; rate=16000; channels=1</li><li>audio/x-l16;
--   sample-rate=16000; channel-count=1</li><li>audio/lpcm;
--   sample-rate=8000; sample-size-bits=16; channel-count=1;
--   is-big-endian=false</li></ul></li>
--   <li>Opus format<ul><li>audio/x-cbr-opus-with-preamble;
--   preamble-size=0; bit-rate=256000;
--   frame-size-milliseconds=4</li></ul></li>
--   <li>Text format<ul><li>text/plain; charset=utf-8</li></ul></li>
--   </ul>
[$sel:contentType:PostContent'] :: PostContent -> Text

-- | User input in PCM or Opus audio format or text format as described in
--   the <tt>Content-Type</tt> HTTP header.
--   
--   You can stream audio data to Amazon Lex or you can create a local
--   buffer that captures all of the audio data before sending. In general,
--   you get better performance if you stream audio data rather than
--   buffering the data locally.
[$sel:inputStream:PostContent'] :: PostContent -> HashedBody

-- | Create a value of <a>PostContent</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sessionAttributes:PostContent'</a>,
--   <a>postContent_sessionAttributes</a> - You pass this value as the
--   <tt>x-amz-lex-session-attributes</tt> HTTP header.
--   
--   Application-specific information passed between Amazon Lex and a
--   client application. The value must be a JSON serialized and base64
--   encoded map with string keys and values. The total size of the
--   <tt>sessionAttributes</tt> and <tt>requestAttributes</tt> headers is
--   limited to 12 KB.
--   
--   For more information, see <a>Setting Session Attributes</a>.
--   
--   <a>$sel:accept:PostContent'</a>, <a>postContent_accept</a> - You pass
--   this value as the <tt>Accept</tt> HTTP header.
--   
--   The message Amazon Lex returns in the response can be either text or
--   speech based on the <tt>Accept</tt> HTTP header value in the request.
--   
--   <ul>
--   <li>If the value is <tt>text/plain; charset=utf-8</tt>, Amazon Lex
--   returns text in the response.</li>
--   <li>If the value begins with <tt>audio/</tt>, Amazon Lex returns
--   speech in the response. Amazon Lex uses Amazon Polly to generate the
--   speech (using the configuration you specified in the <tt>Accept</tt>
--   header). For example, if you specify <tt>audio/mpeg</tt> as the value,
--   Amazon Lex returns speech in the MPEG format.</li>
--   <li>If the value is <tt>audio/pcm</tt>, the speech returned is
--   <tt>audio/pcm</tt> in 16-bit, little endian format.</li>
--   <li>The following are the accepted
--   values:<ul><li>audio/mpeg</li><li>audio/ogg</li><li>audio/pcm</li><li>text/plain;
--   charset=utf-8</li><li>audio/* (defaults to mpeg)</li></ul></li>
--   </ul>
--   
--   <a>$sel:requestAttributes:PostContent'</a>,
--   <a>postContent_requestAttributes</a> - You pass this value as the
--   <tt>x-amz-lex-request-attributes</tt> HTTP header.
--   
--   Request-specific information passed between Amazon Lex and a client
--   application. The value must be a JSON serialized and base64 encoded
--   map with string keys and values. The total size of the
--   <tt>requestAttributes</tt> and <tt>sessionAttributes</tt> headers is
--   limited to 12 KB.
--   
--   The namespace <tt>x-amz-lex:</tt> is reserved for special attributes.
--   Don't create any request attributes with the prefix
--   <tt>x-amz-lex:</tt>.
--   
--   For more information, see <a>Setting Request Attributes</a>.
--   
--   <a>$sel:activeContexts:PostContent'</a>,
--   <a>postContent_activeContexts</a> - A list of contexts active for the
--   request. A context can be activated when a previous intent is
--   fulfilled, or by including the context in the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
--   
--   <a>$sel:botName:PostContent'</a>, <a>postContent_botName</a> - Name of
--   the Amazon Lex bot.
--   
--   <a>$sel:botAlias:PostContent'</a>, <a>postContent_botAlias</a> - Alias
--   of the Amazon Lex bot.
--   
--   <a>$sel:userId:PostContent'</a>, <a>postContent_userId</a> - The ID of
--   the client application user. Amazon Lex uses this to identify a user's
--   conversation with your bot. At runtime, each request must contain the
--   <tt>userID</tt> field.
--   
--   To decide the user ID to use for your application, consider the
--   following factors.
--   
--   <ul>
--   <li>The <tt>userID</tt> field must not contain any personally
--   identifiable information of the user, for example, name, personal
--   identification numbers, or other end user personal information.</li>
--   <li>If you want a user to start a conversation on one device and
--   continue on another device, use a user-specific identifier.</li>
--   <li>If you want the same user to be able to have two independent
--   conversations on two different devices, choose a device-specific
--   identifier.</li>
--   <li>A user can't have two independent conversations with two different
--   versions of the same bot. For example, a user can't have a
--   conversation with the PROD and BETA versions of the same bot. If you
--   anticipate that a user will need to have conversation with two
--   different versions, for example, while testing, include the bot alias
--   in the user ID to separate the two conversations.</li>
--   </ul>
--   
--   <a>$sel:contentType:PostContent'</a>, <a>postContent_contentType</a> -
--   You pass this value as the <tt>Content-Type</tt> HTTP header.
--   
--   Indicates the audio format or text. The header value must start with
--   one of the following prefixes:
--   
--   <ul>
--   <li>PCM format, audio data must be in little-endian byte
--   order.<ul><li>audio/l16; rate=16000; channels=1</li><li>audio/x-l16;
--   sample-rate=16000; channel-count=1</li><li>audio/lpcm;
--   sample-rate=8000; sample-size-bits=16; channel-count=1;
--   is-big-endian=false</li></ul></li>
--   <li>Opus format<ul><li>audio/x-cbr-opus-with-preamble;
--   preamble-size=0; bit-rate=256000;
--   frame-size-milliseconds=4</li></ul></li>
--   <li>Text format<ul><li>text/plain; charset=utf-8</li></ul></li>
--   </ul>
--   
--   <a>$sel:inputStream:PostContent'</a>, <a>postContent_inputStream</a> -
--   User input in PCM or Opus audio format or text format as described in
--   the <tt>Content-Type</tt> HTTP header.
--   
--   You can stream audio data to Amazon Lex or you can create a local
--   buffer that captures all of the audio data before sending. In general,
--   you get better performance if you stream audio data rather than
--   buffering the data locally.
newPostContent :: Text -> Text -> Text -> Text -> HashedBody -> PostContent

-- | You pass this value as the <tt>x-amz-lex-session-attributes</tt> HTTP
--   header.
--   
--   Application-specific information passed between Amazon Lex and a
--   client application. The value must be a JSON serialized and base64
--   encoded map with string keys and values. The total size of the
--   <tt>sessionAttributes</tt> and <tt>requestAttributes</tt> headers is
--   limited to 12 KB.
--   
--   For more information, see <a>Setting Session Attributes</a>.
postContent_sessionAttributes :: Lens' PostContent (Maybe Text)

-- | You pass this value as the <tt>Accept</tt> HTTP header.
--   
--   The message Amazon Lex returns in the response can be either text or
--   speech based on the <tt>Accept</tt> HTTP header value in the request.
--   
--   <ul>
--   <li>If the value is <tt>text/plain; charset=utf-8</tt>, Amazon Lex
--   returns text in the response.</li>
--   <li>If the value begins with <tt>audio/</tt>, Amazon Lex returns
--   speech in the response. Amazon Lex uses Amazon Polly to generate the
--   speech (using the configuration you specified in the <tt>Accept</tt>
--   header). For example, if you specify <tt>audio/mpeg</tt> as the value,
--   Amazon Lex returns speech in the MPEG format.</li>
--   <li>If the value is <tt>audio/pcm</tt>, the speech returned is
--   <tt>audio/pcm</tt> in 16-bit, little endian format.</li>
--   <li>The following are the accepted
--   values:<ul><li>audio/mpeg</li><li>audio/ogg</li><li>audio/pcm</li><li>text/plain;
--   charset=utf-8</li><li>audio/* (defaults to mpeg)</li></ul></li>
--   </ul>
postContent_accept :: Lens' PostContent (Maybe Text)

-- | You pass this value as the <tt>x-amz-lex-request-attributes</tt> HTTP
--   header.
--   
--   Request-specific information passed between Amazon Lex and a client
--   application. The value must be a JSON serialized and base64 encoded
--   map with string keys and values. The total size of the
--   <tt>requestAttributes</tt> and <tt>sessionAttributes</tt> headers is
--   limited to 12 KB.
--   
--   The namespace <tt>x-amz-lex:</tt> is reserved for special attributes.
--   Don't create any request attributes with the prefix
--   <tt>x-amz-lex:</tt>.
--   
--   For more information, see <a>Setting Request Attributes</a>.
postContent_requestAttributes :: Lens' PostContent (Maybe Text)

-- | A list of contexts active for the request. A context can be activated
--   when a previous intent is fulfilled, or by including the context in
--   the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
postContent_activeContexts :: Lens' PostContent (Maybe Text)

-- | Name of the Amazon Lex bot.
postContent_botName :: Lens' PostContent Text

-- | Alias of the Amazon Lex bot.
postContent_botAlias :: Lens' PostContent Text

-- | The ID of the client application user. Amazon Lex uses this to
--   identify a user's conversation with your bot. At runtime, each request
--   must contain the <tt>userID</tt> field.
--   
--   To decide the user ID to use for your application, consider the
--   following factors.
--   
--   <ul>
--   <li>The <tt>userID</tt> field must not contain any personally
--   identifiable information of the user, for example, name, personal
--   identification numbers, or other end user personal information.</li>
--   <li>If you want a user to start a conversation on one device and
--   continue on another device, use a user-specific identifier.</li>
--   <li>If you want the same user to be able to have two independent
--   conversations on two different devices, choose a device-specific
--   identifier.</li>
--   <li>A user can't have two independent conversations with two different
--   versions of the same bot. For example, a user can't have a
--   conversation with the PROD and BETA versions of the same bot. If you
--   anticipate that a user will need to have conversation with two
--   different versions, for example, while testing, include the bot alias
--   in the user ID to separate the two conversations.</li>
--   </ul>
postContent_userId :: Lens' PostContent Text

-- | You pass this value as the <tt>Content-Type</tt> HTTP header.
--   
--   Indicates the audio format or text. The header value must start with
--   one of the following prefixes:
--   
--   <ul>
--   <li>PCM format, audio data must be in little-endian byte
--   order.<ul><li>audio/l16; rate=16000; channels=1</li><li>audio/x-l16;
--   sample-rate=16000; channel-count=1</li><li>audio/lpcm;
--   sample-rate=8000; sample-size-bits=16; channel-count=1;
--   is-big-endian=false</li></ul></li>
--   <li>Opus format<ul><li>audio/x-cbr-opus-with-preamble;
--   preamble-size=0; bit-rate=256000;
--   frame-size-milliseconds=4</li></ul></li>
--   <li>Text format<ul><li>text/plain; charset=utf-8</li></ul></li>
--   </ul>
postContent_contentType :: Lens' PostContent Text

-- | User input in PCM or Opus audio format or text format as described in
--   the <tt>Content-Type</tt> HTTP header.
--   
--   You can stream audio data to Amazon Lex or you can create a local
--   buffer that captures all of the audio data before sending. In general,
--   you get better performance if you stream audio data rather than
--   buffering the data locally.
postContent_inputStream :: Lens' PostContent HashedBody

-- | <i>See:</i> <a>newPostContentResponse</a> smart constructor.
data PostContentResponse
PostContentResponse' :: Maybe DialogState -> Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Maybe MessageFormatType -> Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe (Sensitive Text) -> Int -> ResponseBody -> PostContentResponse

-- | Identifies the current state of the user interaction. Amazon Lex
--   returns one of the following values as <tt>dialogState</tt>. The
--   client can optionally use this information to customize the user
--   interface.
--   
--   <ul>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit the user's
--   intent. Consider the following examples:For example, a user might
--   utter an intent ("I want to order a pizza"). If Amazon Lex cannot
--   infer the user intent from this utterance, it will return this dialog
--   state.</li>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response.For example, Amazon Lex wants user confirmation before
--   fulfilling an intent. Instead of a simple "yes" or "no" response, a
--   user might respond with additional information. For example, "yes, but
--   make it a thick crust pizza" or "no, I want to order a drink." Amazon
--   Lex can process such additional information (in these examples, update
--   the crust type slot or change the intent from OrderPizza to
--   OrderDrink).</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting the value of a slot
--   for the current intent.For example, suppose that in the response
--   Amazon Lex sends this message: "What size pizza would you like?". A
--   user might reply with the slot value (e.g., "medium"). The user might
--   also provide additional information in the response (e.g., "medium
--   thick crust pizza"). Amazon Lex can process such additional
--   information appropriately.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function has
--   successfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the request.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user
--   failed.This can happen for various reasons, including that the user
--   does not provide an appropriate response to prompts from the service
--   (you can configure how many times Amazon Lex can prompt a user for
--   specific information), or if the Lambda function fails to fulfill the
--   intent.</li>
--   </ul>
[$sel:dialogState:PostContentResponse'] :: PostContentResponse -> Maybe DialogState

-- | Map of key/value pairs representing the session-specific context
--   information.
[$sel:sessionAttributes:PostContentResponse'] :: PostContentResponse -> Maybe Text

-- | The message to convey to the user. The message can come from the bot's
--   configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> in its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
--   
--   The <tt>encodedMessage</tt> field is base-64 encoded. You must decode
--   the field before you can use the value.
[$sel:encodedMessage:PostContentResponse'] :: PostContentResponse -> Maybe (Sensitive Text)

-- | Content type as specified in the <tt>Accept</tt> HTTP header in the
--   request.
[$sel:contentType:PostContentResponse'] :: PostContentResponse -> Maybe Text

-- | Current user intent that Amazon Lex is aware of.
[$sel:intentName:PostContentResponse'] :: PostContentResponse -> Maybe Text

-- | You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>message</tt> field is null. You should use the
--   <tt>encodedMessage</tt> field instead.
--   
--   The message to convey to the user. The message can come from the bot's
--   configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> in its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
[$sel:message:PostContentResponse'] :: PostContentResponse -> Maybe (Sensitive Text)

-- | The version of the bot that responded to the conversation. You can use
--   this information to help determine if one version of a bot is
--   performing better than another version.
[$sel:botVersion:PostContentResponse'] :: PostContentResponse -> Maybe Text

-- | The unique identifier for the session.
[$sel:sessionId:PostContentResponse'] :: PostContentResponse -> Maybe Text

-- | The format of the response message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
[$sel:messageFormat:PostContentResponse'] :: PostContentResponse -> Maybe MessageFormatType

-- | The text used to process the request.
--   
--   You can use this field only in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>inputTranscript</tt> field is null. You should use the
--   <tt>encodedInputTranscript</tt> field instead.
--   
--   If the input was an audio stream, the <tt>inputTranscript</tt> field
--   contains the text extracted from the audio stream. This is the text
--   that is actually processed to recognize intents and slot values. You
--   can use this information to determine if Amazon Lex is correctly
--   processing the audio that you send.
[$sel:inputTranscript:PostContentResponse'] :: PostContentResponse -> Maybe Text

-- | The text used to process the request.
--   
--   If the input was an audio stream, the <tt>encodedInputTranscript</tt>
--   field contains the text extracted from the audio stream. This is the
--   text that is actually processed to recognize intents and slot values.
--   You can use this information to determine if Amazon Lex is correctly
--   processing the audio that you send.
--   
--   The <tt>encodedInputTranscript</tt> field is base-64 encoded. You must
--   decode the field before you can use the value.
[$sel:encodedInputTranscript:PostContentResponse'] :: PostContentResponse -> Maybe (Sensitive Text)

-- | Map of zero or more intent slots (name/value pairs) Amazon Lex
--   detected from the user input during the conversation. The field is
--   base-64 encoded.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt>, the default is
--   <tt>ORIGINAL_VALUE</tt>.
[$sel:slots:PostContentResponse'] :: PostContentResponse -> Maybe Text

-- | Provides a score that indicates how confident Amazon Lex is that the
--   returned intent is the one that matches the user's intent. The score
--   is between 0.0 and 1.0.
--   
--   The score is a relative score, not an absolute score. The score may
--   change based on improvements to Amazon Lex.
[$sel:nluIntentConfidence:PostContentResponse'] :: PostContentResponse -> Maybe Text

-- | The sentiment expressed in an utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field contains the result of the analysis.
[$sel:sentimentResponse:PostContentResponse'] :: PostContentResponse -> Maybe Text

-- | If the <tt>dialogState</tt> value is <tt>ElicitSlot</tt>, returns the
--   name of the slot for which Amazon Lex is eliciting a value.
[$sel:slotToElicit:PostContentResponse'] :: PostContentResponse -> Maybe Text

-- | One to four alternative intents that may be applicable to the user's
--   intent.
--   
--   Each alternative includes a score that indicates how confident Amazon
--   Lex is that the intent matches the user's intent. The intents are
--   sorted by the confidence score.
[$sel:alternativeIntents:PostContentResponse'] :: PostContentResponse -> Maybe Text

-- | A list of active contexts for the session. A context can be set when
--   an intent is fulfilled or by calling the <tt>PostContent</tt>,
--   <tt>PostText</tt>, or <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
[$sel:activeContexts:PostContentResponse'] :: PostContentResponse -> Maybe (Sensitive Text)

-- | The response's http status code.
[$sel:httpStatus:PostContentResponse'] :: PostContentResponse -> Int

-- | The prompt (or statement) to convey to the user. This is based on the
--   bot configuration and context. For example, if Amazon Lex did not
--   understand the user intent, it sends the <tt>clarificationPrompt</tt>
--   configured for the bot. If the intent requires confirmation before
--   taking the fulfillment action, it sends the
--   <tt>confirmationPrompt</tt>. Another example: Suppose that the Lambda
--   function successfully fulfilled the intent, and sent a message to
--   convey to the user. Then Amazon Lex sends that message in the
--   response.
[$sel:audioStream:PostContentResponse'] :: PostContentResponse -> ResponseBody

-- | Create a value of <a>PostContentResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dialogState:PostContentResponse'</a>,
--   <a>postContentResponse_dialogState</a> - Identifies the current state
--   of the user interaction. Amazon Lex returns one of the following
--   values as <tt>dialogState</tt>. The client can optionally use this
--   information to customize the user interface.
--   
--   <ul>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit the user's
--   intent. Consider the following examples:For example, a user might
--   utter an intent ("I want to order a pizza"). If Amazon Lex cannot
--   infer the user intent from this utterance, it will return this dialog
--   state.</li>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response.For example, Amazon Lex wants user confirmation before
--   fulfilling an intent. Instead of a simple "yes" or "no" response, a
--   user might respond with additional information. For example, "yes, but
--   make it a thick crust pizza" or "no, I want to order a drink." Amazon
--   Lex can process such additional information (in these examples, update
--   the crust type slot or change the intent from OrderPizza to
--   OrderDrink).</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting the value of a slot
--   for the current intent.For example, suppose that in the response
--   Amazon Lex sends this message: "What size pizza would you like?". A
--   user might reply with the slot value (e.g., "medium"). The user might
--   also provide additional information in the response (e.g., "medium
--   thick crust pizza"). Amazon Lex can process such additional
--   information appropriately.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function has
--   successfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the request.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user
--   failed.This can happen for various reasons, including that the user
--   does not provide an appropriate response to prompts from the service
--   (you can configure how many times Amazon Lex can prompt a user for
--   specific information), or if the Lambda function fails to fulfill the
--   intent.</li>
--   </ul>
--   
--   <a>$sel:sessionAttributes:PostContent'</a>,
--   <a>postContentResponse_sessionAttributes</a> - Map of key/value pairs
--   representing the session-specific context information.
--   
--   <a>$sel:encodedMessage:PostContentResponse'</a>,
--   <a>postContentResponse_encodedMessage</a> - The message to convey to
--   the user. The message can come from the bot's configuration or from a
--   Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> in its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
--   
--   The <tt>encodedMessage</tt> field is base-64 encoded. You must decode
--   the field before you can use the value.
--   
--   <a>$sel:contentType:PostContent'</a>,
--   <a>postContentResponse_contentType</a> - Content type as specified in
--   the <tt>Accept</tt> HTTP header in the request.
--   
--   <a>$sel:intentName:PostContentResponse'</a>,
--   <a>postContentResponse_intentName</a> - Current user intent that
--   Amazon Lex is aware of.
--   
--   <a>$sel:message:PostContentResponse'</a>,
--   <a>postContentResponse_message</a> - You can only use this field in
--   the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR,
--   and it-IT locales. In all other locales, the <tt>message</tt> field is
--   null. You should use the <tt>encodedMessage</tt> field instead.
--   
--   The message to convey to the user. The message can come from the bot's
--   configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> in its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
--   
--   <a>$sel:botVersion:PostContentResponse'</a>,
--   <a>postContentResponse_botVersion</a> - The version of the bot that
--   responded to the conversation. You can use this information to help
--   determine if one version of a bot is performing better than another
--   version.
--   
--   <a>$sel:sessionId:PostContentResponse'</a>,
--   <a>postContentResponse_sessionId</a> - The unique identifier for the
--   session.
--   
--   <a>$sel:messageFormat:PostContentResponse'</a>,
--   <a>postContentResponse_messageFormat</a> - The format of the response
--   message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
--   
--   <a>$sel:inputTranscript:PostContentResponse'</a>,
--   <a>postContentResponse_inputTranscript</a> - The text used to process
--   the request.
--   
--   You can use this field only in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>inputTranscript</tt> field is null. You should use the
--   <tt>encodedInputTranscript</tt> field instead.
--   
--   If the input was an audio stream, the <tt>inputTranscript</tt> field
--   contains the text extracted from the audio stream. This is the text
--   that is actually processed to recognize intents and slot values. You
--   can use this information to determine if Amazon Lex is correctly
--   processing the audio that you send.
--   
--   <a>$sel:encodedInputTranscript:PostContentResponse'</a>,
--   <a>postContentResponse_encodedInputTranscript</a> - The text used to
--   process the request.
--   
--   If the input was an audio stream, the <tt>encodedInputTranscript</tt>
--   field contains the text extracted from the audio stream. This is the
--   text that is actually processed to recognize intents and slot values.
--   You can use this information to determine if Amazon Lex is correctly
--   processing the audio that you send.
--   
--   The <tt>encodedInputTranscript</tt> field is base-64 encoded. You must
--   decode the field before you can use the value.
--   
--   <a>$sel:slots:PostContentResponse'</a>,
--   <a>postContentResponse_slots</a> - Map of zero or more intent slots
--   (name/value pairs) Amazon Lex detected from the user input during the
--   conversation. The field is base-64 encoded.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt>, the default is
--   <tt>ORIGINAL_VALUE</tt>.
--   
--   <a>$sel:nluIntentConfidence:PostContentResponse'</a>,
--   <a>postContentResponse_nluIntentConfidence</a> - Provides a score that
--   indicates how confident Amazon Lex is that the returned intent is the
--   one that matches the user's intent. The score is between 0.0 and 1.0.
--   
--   The score is a relative score, not an absolute score. The score may
--   change based on improvements to Amazon Lex.
--   
--   <a>$sel:sentimentResponse:PostContentResponse'</a>,
--   <a>postContentResponse_sentimentResponse</a> - The sentiment expressed
--   in an utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field contains the result of the analysis.
--   
--   <a>$sel:slotToElicit:PostContentResponse'</a>,
--   <a>postContentResponse_slotToElicit</a> - If the <tt>dialogState</tt>
--   value is <tt>ElicitSlot</tt>, returns the name of the slot for which
--   Amazon Lex is eliciting a value.
--   
--   <a>$sel:alternativeIntents:PostContentResponse'</a>,
--   <a>postContentResponse_alternativeIntents</a> - One to four
--   alternative intents that may be applicable to the user's intent.
--   
--   Each alternative includes a score that indicates how confident Amazon
--   Lex is that the intent matches the user's intent. The intents are
--   sorted by the confidence score.
--   
--   <a>$sel:activeContexts:PostContent'</a>,
--   <a>postContentResponse_activeContexts</a> - A list of active contexts
--   for the session. A context can be set when an intent is fulfilled or
--   by calling the <tt>PostContent</tt>, <tt>PostText</tt>, or
--   <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
--   
--   <a>$sel:httpStatus:PostContentResponse'</a>,
--   <a>postContentResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:audioStream:PostContentResponse'</a>,
--   <a>postContentResponse_audioStream</a> - The prompt (or statement) to
--   convey to the user. This is based on the bot configuration and
--   context. For example, if Amazon Lex did not understand the user
--   intent, it sends the <tt>clarificationPrompt</tt> configured for the
--   bot. If the intent requires confirmation before taking the fulfillment
--   action, it sends the <tt>confirmationPrompt</tt>. Another example:
--   Suppose that the Lambda function successfully fulfilled the intent,
--   and sent a message to convey to the user. Then Amazon Lex sends that
--   message in the response.
newPostContentResponse :: Int -> ResponseBody -> PostContentResponse

-- | Identifies the current state of the user interaction. Amazon Lex
--   returns one of the following values as <tt>dialogState</tt>. The
--   client can optionally use this information to customize the user
--   interface.
--   
--   <ul>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit the user's
--   intent. Consider the following examples:For example, a user might
--   utter an intent ("I want to order a pizza"). If Amazon Lex cannot
--   infer the user intent from this utterance, it will return this dialog
--   state.</li>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response.For example, Amazon Lex wants user confirmation before
--   fulfilling an intent. Instead of a simple "yes" or "no" response, a
--   user might respond with additional information. For example, "yes, but
--   make it a thick crust pizza" or "no, I want to order a drink." Amazon
--   Lex can process such additional information (in these examples, update
--   the crust type slot or change the intent from OrderPizza to
--   OrderDrink).</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting the value of a slot
--   for the current intent.For example, suppose that in the response
--   Amazon Lex sends this message: "What size pizza would you like?". A
--   user might reply with the slot value (e.g., "medium"). The user might
--   also provide additional information in the response (e.g., "medium
--   thick crust pizza"). Amazon Lex can process such additional
--   information appropriately.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function has
--   successfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the request.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user
--   failed.This can happen for various reasons, including that the user
--   does not provide an appropriate response to prompts from the service
--   (you can configure how many times Amazon Lex can prompt a user for
--   specific information), or if the Lambda function fails to fulfill the
--   intent.</li>
--   </ul>
postContentResponse_dialogState :: Lens' PostContentResponse (Maybe DialogState)

-- | Map of key/value pairs representing the session-specific context
--   information.
postContentResponse_sessionAttributes :: Lens' PostContentResponse (Maybe Text)

-- | The message to convey to the user. The message can come from the bot's
--   configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> in its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
--   
--   The <tt>encodedMessage</tt> field is base-64 encoded. You must decode
--   the field before you can use the value.
postContentResponse_encodedMessage :: Lens' PostContentResponse (Maybe Text)

-- | Content type as specified in the <tt>Accept</tt> HTTP header in the
--   request.
postContentResponse_contentType :: Lens' PostContentResponse (Maybe Text)

-- | Current user intent that Amazon Lex is aware of.
postContentResponse_intentName :: Lens' PostContentResponse (Maybe Text)

-- | You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>message</tt> field is null. You should use the
--   <tt>encodedMessage</tt> field instead.
--   
--   The message to convey to the user. The message can come from the bot's
--   configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> in its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
postContentResponse_message :: Lens' PostContentResponse (Maybe Text)

-- | The version of the bot that responded to the conversation. You can use
--   this information to help determine if one version of a bot is
--   performing better than another version.
postContentResponse_botVersion :: Lens' PostContentResponse (Maybe Text)

-- | The unique identifier for the session.
postContentResponse_sessionId :: Lens' PostContentResponse (Maybe Text)

-- | The format of the response message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
postContentResponse_messageFormat :: Lens' PostContentResponse (Maybe MessageFormatType)

-- | The text used to process the request.
--   
--   You can use this field only in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>inputTranscript</tt> field is null. You should use the
--   <tt>encodedInputTranscript</tt> field instead.
--   
--   If the input was an audio stream, the <tt>inputTranscript</tt> field
--   contains the text extracted from the audio stream. This is the text
--   that is actually processed to recognize intents and slot values. You
--   can use this information to determine if Amazon Lex is correctly
--   processing the audio that you send.
postContentResponse_inputTranscript :: Lens' PostContentResponse (Maybe Text)

-- | The text used to process the request.
--   
--   If the input was an audio stream, the <tt>encodedInputTranscript</tt>
--   field contains the text extracted from the audio stream. This is the
--   text that is actually processed to recognize intents and slot values.
--   You can use this information to determine if Amazon Lex is correctly
--   processing the audio that you send.
--   
--   The <tt>encodedInputTranscript</tt> field is base-64 encoded. You must
--   decode the field before you can use the value.
postContentResponse_encodedInputTranscript :: Lens' PostContentResponse (Maybe Text)

-- | Map of zero or more intent slots (name/value pairs) Amazon Lex
--   detected from the user input during the conversation. The field is
--   base-64 encoded.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt>, the default is
--   <tt>ORIGINAL_VALUE</tt>.
postContentResponse_slots :: Lens' PostContentResponse (Maybe Text)

-- | Provides a score that indicates how confident Amazon Lex is that the
--   returned intent is the one that matches the user's intent. The score
--   is between 0.0 and 1.0.
--   
--   The score is a relative score, not an absolute score. The score may
--   change based on improvements to Amazon Lex.
postContentResponse_nluIntentConfidence :: Lens' PostContentResponse (Maybe Text)

-- | The sentiment expressed in an utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field contains the result of the analysis.
postContentResponse_sentimentResponse :: Lens' PostContentResponse (Maybe Text)

-- | If the <tt>dialogState</tt> value is <tt>ElicitSlot</tt>, returns the
--   name of the slot for which Amazon Lex is eliciting a value.
postContentResponse_slotToElicit :: Lens' PostContentResponse (Maybe Text)

-- | One to four alternative intents that may be applicable to the user's
--   intent.
--   
--   Each alternative includes a score that indicates how confident Amazon
--   Lex is that the intent matches the user's intent. The intents are
--   sorted by the confidence score.
postContentResponse_alternativeIntents :: Lens' PostContentResponse (Maybe Text)

-- | A list of active contexts for the session. A context can be set when
--   an intent is fulfilled or by calling the <tt>PostContent</tt>,
--   <tt>PostText</tt>, or <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
postContentResponse_activeContexts :: Lens' PostContentResponse (Maybe Text)

-- | The response's http status code.
postContentResponse_httpStatus :: Lens' PostContentResponse Int

-- | The prompt (or statement) to convey to the user. This is based on the
--   bot configuration and context. For example, if Amazon Lex did not
--   understand the user intent, it sends the <tt>clarificationPrompt</tt>
--   configured for the bot. If the intent requires confirmation before
--   taking the fulfillment action, it sends the
--   <tt>confirmationPrompt</tt>. Another example: Suppose that the Lambda
--   function successfully fulfilled the intent, and sent a message to
--   convey to the user. Then Amazon Lex sends that message in the
--   response.
postContentResponse_audioStream :: Lens' PostContentResponse ResponseBody
instance GHC.Generics.Generic Network.AWS.LexRuntime.PostContent.PostContent
instance GHC.Show.Show Network.AWS.LexRuntime.PostContent.PostContent
instance GHC.Generics.Generic Network.AWS.LexRuntime.PostContent.PostContentResponse
instance GHC.Show.Show Network.AWS.LexRuntime.PostContent.PostContentResponse
instance Network.AWS.Types.AWSRequest Network.AWS.LexRuntime.PostContent.PostContent
instance Network.AWS.Data.Body.ToBody Network.AWS.LexRuntime.PostContent.PostContent
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.LexRuntime.PostContent.PostContent
instance Network.AWS.Data.Path.ToPath Network.AWS.LexRuntime.PostContent.PostContent
instance Network.AWS.Data.Query.ToQuery Network.AWS.LexRuntime.PostContent.PostContent


-- | Returns session information for a specified bot, alias, and user ID.
module Network.AWS.LexRuntime.GetSession

-- | <i>See:</i> <a>newGetSession</a> smart constructor.
data GetSession
GetSession' :: Maybe Text -> Text -> Text -> Text -> GetSession

-- | A string used to filter the intents returned in the
--   <tt>recentIntentSummaryView</tt> structure.
--   
--   When you specify a filter, only intents with their
--   <tt>checkpointLabel</tt> field set to that string are returned.
[$sel:checkpointLabelFilter:GetSession'] :: GetSession -> Maybe Text

-- | The name of the bot that contains the session data.
[$sel:botName:GetSession'] :: GetSession -> Text

-- | The alias in use for the bot that contains the session data.
[$sel:botAlias:GetSession'] :: GetSession -> Text

-- | The ID of the client application user. Amazon Lex uses this to
--   identify a user's conversation with your bot.
[$sel:userId:GetSession'] :: GetSession -> Text

-- | Create a value of <a>GetSession</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:checkpointLabelFilter:GetSession'</a>,
--   <a>getSession_checkpointLabelFilter</a> - A string used to filter the
--   intents returned in the <tt>recentIntentSummaryView</tt> structure.
--   
--   When you specify a filter, only intents with their
--   <tt>checkpointLabel</tt> field set to that string are returned.
--   
--   <a>$sel:botName:GetSession'</a>, <a>getSession_botName</a> - The name
--   of the bot that contains the session data.
--   
--   <a>$sel:botAlias:GetSession'</a>, <a>getSession_botAlias</a> - The
--   alias in use for the bot that contains the session data.
--   
--   <a>$sel:userId:GetSession'</a>, <a>getSession_userId</a> - The ID of
--   the client application user. Amazon Lex uses this to identify a user's
--   conversation with your bot.
newGetSession :: Text -> Text -> Text -> GetSession

-- | A string used to filter the intents returned in the
--   <tt>recentIntentSummaryView</tt> structure.
--   
--   When you specify a filter, only intents with their
--   <tt>checkpointLabel</tt> field set to that string are returned.
getSession_checkpointLabelFilter :: Lens' GetSession (Maybe Text)

-- | The name of the bot that contains the session data.
getSession_botName :: Lens' GetSession Text

-- | The alias in use for the bot that contains the session data.
getSession_botAlias :: Lens' GetSession Text

-- | The ID of the client application user. Amazon Lex uses this to
--   identify a user's conversation with your bot.
getSession_userId :: Lens' GetSession Text

-- | <i>See:</i> <a>newGetSessionResponse</a> smart constructor.
data GetSessionResponse
GetSessionResponse' :: Maybe (Sensitive (HashMap Text Text)) -> Maybe DialogAction -> Maybe Text -> Maybe [IntentSummary] -> Maybe (Sensitive [ActiveContext]) -> Int -> GetSessionResponse

-- | Map of key/value pairs representing the session-specific context
--   information. It contains application information passed between Amazon
--   Lex and a client application.
[$sel:sessionAttributes:GetSessionResponse'] :: GetSessionResponse -> Maybe (Sensitive (HashMap Text Text))

-- | Describes the current state of the bot.
[$sel:dialogAction:GetSessionResponse'] :: GetSessionResponse -> Maybe DialogAction

-- | A unique identifier for the session.
[$sel:sessionId:GetSessionResponse'] :: GetSessionResponse -> Maybe Text

-- | An array of information about the intents used in the session. The
--   array can contain a maximum of three summaries. If more than three
--   intents are used in the session, the <tt>recentIntentSummaryView</tt>
--   operation contains information about the last three intents used.
--   
--   If you set the <tt>checkpointLabelFilter</tt> parameter in the
--   request, the array contains only the intents with the specified label.
[$sel:recentIntentSummaryView:GetSessionResponse'] :: GetSessionResponse -> Maybe [IntentSummary]

-- | A list of active contexts for the session. A context can be set when
--   an intent is fulfilled or by calling the <tt>PostContent</tt>,
--   <tt>PostText</tt>, or <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
[$sel:activeContexts:GetSessionResponse'] :: GetSessionResponse -> Maybe (Sensitive [ActiveContext])

-- | The response's http status code.
[$sel:httpStatus:GetSessionResponse'] :: GetSessionResponse -> Int

-- | Create a value of <a>GetSessionResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sessionAttributes:GetSessionResponse'</a>,
--   <a>getSessionResponse_sessionAttributes</a> - Map of key/value pairs
--   representing the session-specific context information. It contains
--   application information passed between Amazon Lex and a client
--   application.
--   
--   <a>$sel:dialogAction:GetSessionResponse'</a>,
--   <a>getSessionResponse_dialogAction</a> - Describes the current state
--   of the bot.
--   
--   <a>$sel:sessionId:GetSessionResponse'</a>,
--   <a>getSessionResponse_sessionId</a> - A unique identifier for the
--   session.
--   
--   <a>$sel:recentIntentSummaryView:GetSessionResponse'</a>,
--   <a>getSessionResponse_recentIntentSummaryView</a> - An array of
--   information about the intents used in the session. The array can
--   contain a maximum of three summaries. If more than three intents are
--   used in the session, the <tt>recentIntentSummaryView</tt> operation
--   contains information about the last three intents used.
--   
--   If you set the <tt>checkpointLabelFilter</tt> parameter in the
--   request, the array contains only the intents with the specified label.
--   
--   <a>$sel:activeContexts:GetSessionResponse'</a>,
--   <a>getSessionResponse_activeContexts</a> - A list of active contexts
--   for the session. A context can be set when an intent is fulfilled or
--   by calling the <tt>PostContent</tt>, <tt>PostText</tt>, or
--   <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
--   
--   <a>$sel:httpStatus:GetSessionResponse'</a>,
--   <a>getSessionResponse_httpStatus</a> - The response's http status
--   code.
newGetSessionResponse :: Int -> GetSessionResponse

-- | Map of key/value pairs representing the session-specific context
--   information. It contains application information passed between Amazon
--   Lex and a client application.
getSessionResponse_sessionAttributes :: Lens' GetSessionResponse (Maybe (HashMap Text Text))

-- | Describes the current state of the bot.
getSessionResponse_dialogAction :: Lens' GetSessionResponse (Maybe DialogAction)

-- | A unique identifier for the session.
getSessionResponse_sessionId :: Lens' GetSessionResponse (Maybe Text)

-- | An array of information about the intents used in the session. The
--   array can contain a maximum of three summaries. If more than three
--   intents are used in the session, the <tt>recentIntentSummaryView</tt>
--   operation contains information about the last three intents used.
--   
--   If you set the <tt>checkpointLabelFilter</tt> parameter in the
--   request, the array contains only the intents with the specified label.
getSessionResponse_recentIntentSummaryView :: Lens' GetSessionResponse (Maybe [IntentSummary])

-- | A list of active contexts for the session. A context can be set when
--   an intent is fulfilled or by calling the <tt>PostContent</tt>,
--   <tt>PostText</tt>, or <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
getSessionResponse_activeContexts :: Lens' GetSessionResponse (Maybe [ActiveContext])

-- | The response's http status code.
getSessionResponse_httpStatus :: Lens' GetSessionResponse Int
instance GHC.Generics.Generic Network.AWS.LexRuntime.GetSession.GetSession
instance GHC.Show.Show Network.AWS.LexRuntime.GetSession.GetSession
instance GHC.Read.Read Network.AWS.LexRuntime.GetSession.GetSession
instance GHC.Classes.Eq Network.AWS.LexRuntime.GetSession.GetSession
instance GHC.Generics.Generic Network.AWS.LexRuntime.GetSession.GetSessionResponse
instance GHC.Show.Show Network.AWS.LexRuntime.GetSession.GetSessionResponse
instance GHC.Classes.Eq Network.AWS.LexRuntime.GetSession.GetSessionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.LexRuntime.GetSession.GetSession
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.GetSession.GetSessionResponse
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.GetSession.GetSession
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.GetSession.GetSession
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.LexRuntime.GetSession.GetSession
instance Network.AWS.Data.Path.ToPath Network.AWS.LexRuntime.GetSession.GetSession
instance Network.AWS.Data.Query.ToQuery Network.AWS.LexRuntime.GetSession.GetSession


-- | Removes session information for a specified bot, alias, and user ID.
module Network.AWS.LexRuntime.DeleteSession

-- | <i>See:</i> <a>newDeleteSession</a> smart constructor.
data DeleteSession
DeleteSession' :: Text -> Text -> Text -> DeleteSession

-- | The name of the bot that contains the session data.
[$sel:botName:DeleteSession'] :: DeleteSession -> Text

-- | The alias in use for the bot that contains the session data.
[$sel:botAlias:DeleteSession'] :: DeleteSession -> Text

-- | The identifier of the user associated with the session data.
[$sel:userId:DeleteSession'] :: DeleteSession -> Text

-- | Create a value of <a>DeleteSession</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:botName:DeleteSession'</a>, <a>deleteSession_botName</a> - The
--   name of the bot that contains the session data.
--   
--   <a>$sel:botAlias:DeleteSession'</a>, <a>deleteSession_botAlias</a> -
--   The alias in use for the bot that contains the session data.
--   
--   <a>$sel:userId:DeleteSession'</a>, <a>deleteSession_userId</a> - The
--   identifier of the user associated with the session data.
newDeleteSession :: Text -> Text -> Text -> DeleteSession

-- | The name of the bot that contains the session data.
deleteSession_botName :: Lens' DeleteSession Text

-- | The alias in use for the bot that contains the session data.
deleteSession_botAlias :: Lens' DeleteSession Text

-- | The identifier of the user associated with the session data.
deleteSession_userId :: Lens' DeleteSession Text

-- | <i>See:</i> <a>newDeleteSessionResponse</a> smart constructor.
data DeleteSessionResponse
DeleteSessionResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> DeleteSessionResponse

-- | The alias in use for the bot associated with the session data.
[$sel:botAlias:DeleteSessionResponse'] :: DeleteSessionResponse -> Maybe Text

-- | The name of the bot associated with the session data.
[$sel:botName:DeleteSessionResponse'] :: DeleteSessionResponse -> Maybe Text

-- | The unique identifier for the session.
[$sel:sessionId:DeleteSessionResponse'] :: DeleteSessionResponse -> Maybe Text

-- | The ID of the client application user.
[$sel:userId:DeleteSessionResponse'] :: DeleteSessionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DeleteSessionResponse'] :: DeleteSessionResponse -> Int

-- | Create a value of <a>DeleteSessionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:botAlias:DeleteSession'</a>,
--   <a>deleteSessionResponse_botAlias</a> - The alias in use for the bot
--   associated with the session data.
--   
--   <a>$sel:botName:DeleteSession'</a>,
--   <a>deleteSessionResponse_botName</a> - The name of the bot associated
--   with the session data.
--   
--   <a>$sel:sessionId:DeleteSessionResponse'</a>,
--   <a>deleteSessionResponse_sessionId</a> - The unique identifier for the
--   session.
--   
--   <a>$sel:userId:DeleteSession'</a>, <a>deleteSessionResponse_userId</a>
--   - The ID of the client application user.
--   
--   <a>$sel:httpStatus:DeleteSessionResponse'</a>,
--   <a>deleteSessionResponse_httpStatus</a> - The response's http status
--   code.
newDeleteSessionResponse :: Int -> DeleteSessionResponse

-- | The alias in use for the bot associated with the session data.
deleteSessionResponse_botAlias :: Lens' DeleteSessionResponse (Maybe Text)

-- | The name of the bot associated with the session data.
deleteSessionResponse_botName :: Lens' DeleteSessionResponse (Maybe Text)

-- | The unique identifier for the session.
deleteSessionResponse_sessionId :: Lens' DeleteSessionResponse (Maybe Text)

-- | The ID of the client application user.
deleteSessionResponse_userId :: Lens' DeleteSessionResponse (Maybe Text)

-- | The response's http status code.
deleteSessionResponse_httpStatus :: Lens' DeleteSessionResponse Int
instance GHC.Generics.Generic Network.AWS.LexRuntime.DeleteSession.DeleteSession
instance GHC.Show.Show Network.AWS.LexRuntime.DeleteSession.DeleteSession
instance GHC.Read.Read Network.AWS.LexRuntime.DeleteSession.DeleteSession
instance GHC.Classes.Eq Network.AWS.LexRuntime.DeleteSession.DeleteSession
instance GHC.Generics.Generic Network.AWS.LexRuntime.DeleteSession.DeleteSessionResponse
instance GHC.Show.Show Network.AWS.LexRuntime.DeleteSession.DeleteSessionResponse
instance GHC.Read.Read Network.AWS.LexRuntime.DeleteSession.DeleteSessionResponse
instance GHC.Classes.Eq Network.AWS.LexRuntime.DeleteSession.DeleteSessionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.LexRuntime.DeleteSession.DeleteSession
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.DeleteSession.DeleteSessionResponse
instance Data.Hashable.Class.Hashable Network.AWS.LexRuntime.DeleteSession.DeleteSession
instance Control.DeepSeq.NFData Network.AWS.LexRuntime.DeleteSession.DeleteSession
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.LexRuntime.DeleteSession.DeleteSession
instance Network.AWS.Data.Path.ToPath Network.AWS.LexRuntime.DeleteSession.DeleteSession
instance Network.AWS.Data.Query.ToQuery Network.AWS.LexRuntime.DeleteSession.DeleteSession


module Network.AWS.LexRuntime.Lens

-- | Map of key/value pairs representing the session-specific context
--   information. It contains application information passed between Amazon
--   Lex and a client application.
putSession_sessionAttributes :: Lens' PutSession (Maybe (HashMap Text Text))

-- | Sets the next action that the bot should take to fulfill the
--   conversation.
putSession_dialogAction :: Lens' PutSession (Maybe DialogAction)

-- | The message that Amazon Lex returns in the response can be either text
--   or speech based depending on the value of this field.
--   
--   <ul>
--   <li>If the value is <tt>text/plain; charset=utf-8</tt>, Amazon Lex
--   returns text in the response.</li>
--   <li>If the value begins with <tt>audio/</tt>, Amazon Lex returns
--   speech in the response. Amazon Lex uses Amazon Polly to generate the
--   speech in the configuration that you specify. For example, if you
--   specify <tt>audio/mpeg</tt> as the value, Amazon Lex returns speech in
--   the MPEG format.</li>
--   <li>If the value is <tt>audio/pcm</tt>, the speech is returned as
--   <tt>audio/pcm</tt> in 16-bit, little endian format.</li>
--   <li>The following are the accepted
--   values:<ul><li><pre>audio/mpeg</pre></li><li><pre>audio/ogg</pre></li><li><pre>audio/pcm</pre></li><li><tt>audio/*</tt>
--   (defaults to mpeg)</li><li><pre>text/plain;
--   charset=utf-8</pre></li></ul></li>
--   </ul>
putSession_accept :: Lens' PutSession (Maybe Text)

-- | A summary of the recent intents for the bot. You can use the intent
--   summary view to set a checkpoint label on an intent and modify
--   attributes of intents. You can also use it to remove or add intent
--   summary objects to the list.
--   
--   An intent that you modify or add to the list must make sense for the
--   bot. For example, the intent name must be valid for the bot. You must
--   provide valid values for:
--   
--   <ul>
--   <li><pre>intentName</pre></li>
--   <li>slot names</li>
--   <li><pre>slotToElict</pre></li>
--   </ul>
--   
--   If you send the <tt>recentIntentSummaryView</tt> parameter in a
--   <tt>PutSession</tt> request, the contents of the new summary view
--   replaces the old summary view. For example, if a <tt>GetSession</tt>
--   request returns three intents in the summary view and you call
--   <tt>PutSession</tt> with one intent in the summary view, the next call
--   to <tt>GetSession</tt> will only return one intent.
putSession_recentIntentSummaryView :: Lens' PutSession (Maybe [IntentSummary])

-- | A list of contexts active for the request. A context can be activated
--   when a previous intent is fulfilled, or by including the context in
--   the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
putSession_activeContexts :: Lens' PutSession (Maybe [ActiveContext])

-- | The name of the bot that contains the session data.
putSession_botName :: Lens' PutSession Text

-- | The alias in use for the bot that contains the session data.
putSession_botAlias :: Lens' PutSession Text

-- | The ID of the client application user. Amazon Lex uses this to
--   identify a user's conversation with your bot.
putSession_userId :: Lens' PutSession Text

-- | <ul>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response to confirm the intent before fulfilling an intent.</li>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit the user's
--   intent.</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting the value of a slot
--   for the current intent.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user has
--   failed. This can happen for various reasons, including the user does
--   not provide an appropriate response to prompts from the service, or if
--   the Lambda function fails to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function has
--   sucessfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the intent.</li>
--   </ul>
putSessionResponse_dialogState :: Lens' PutSessionResponse (Maybe DialogState)

-- | Map of key/value pairs representing session-specific context
--   information.
putSessionResponse_sessionAttributes :: Lens' PutSessionResponse (Maybe Text)

-- | The next message that should be presented to the user.
--   
--   The <tt>encodedMessage</tt> field is base-64 encoded. You must decode
--   the field before you can use the value.
putSessionResponse_encodedMessage :: Lens' PutSessionResponse (Maybe Text)

-- | Content type as specified in the <tt>Accept</tt> HTTP header in the
--   request.
putSessionResponse_contentType :: Lens' PutSessionResponse (Maybe Text)

-- | The name of the current intent.
putSessionResponse_intentName :: Lens' PutSessionResponse (Maybe Text)

-- | The next message that should be presented to the user.
--   
--   You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>message</tt> field is null. You should use the
--   <tt>encodedMessage</tt> field instead.
putSessionResponse_message :: Lens' PutSessionResponse (Maybe Text)

-- | A unique identifier for the session.
putSessionResponse_sessionId :: Lens' PutSessionResponse (Maybe Text)

-- | The format of the response message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
putSessionResponse_messageFormat :: Lens' PutSessionResponse (Maybe MessageFormatType)

-- | Map of zero or more intent slots Amazon Lex detected from the user
--   input during the conversation.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt> the default is
--   <tt>ORIGINAL_VALUE</tt>.
putSessionResponse_slots :: Lens' PutSessionResponse (Maybe Text)

-- | If the <tt>dialogState</tt> is <tt>ElicitSlot</tt>, returns the name
--   of the slot for which Amazon Lex is eliciting a value.
putSessionResponse_slotToElicit :: Lens' PutSessionResponse (Maybe Text)

-- | A list of active contexts for the session.
putSessionResponse_activeContexts :: Lens' PutSessionResponse (Maybe Text)

-- | The response's http status code.
putSessionResponse_httpStatus :: Lens' PutSessionResponse Int

-- | The audio version of the message to convey to the user.
putSessionResponse_audioStream :: Lens' PutSessionResponse ResponseBody

-- | The name of the bot that contains the session data.
deleteSession_botName :: Lens' DeleteSession Text

-- | The alias in use for the bot that contains the session data.
deleteSession_botAlias :: Lens' DeleteSession Text

-- | The identifier of the user associated with the session data.
deleteSession_userId :: Lens' DeleteSession Text

-- | The alias in use for the bot associated with the session data.
deleteSessionResponse_botAlias :: Lens' DeleteSessionResponse (Maybe Text)

-- | The name of the bot associated with the session data.
deleteSessionResponse_botName :: Lens' DeleteSessionResponse (Maybe Text)

-- | The unique identifier for the session.
deleteSessionResponse_sessionId :: Lens' DeleteSessionResponse (Maybe Text)

-- | The ID of the client application user.
deleteSessionResponse_userId :: Lens' DeleteSessionResponse (Maybe Text)

-- | The response's http status code.
deleteSessionResponse_httpStatus :: Lens' DeleteSessionResponse Int

-- | You pass this value as the <tt>x-amz-lex-session-attributes</tt> HTTP
--   header.
--   
--   Application-specific information passed between Amazon Lex and a
--   client application. The value must be a JSON serialized and base64
--   encoded map with string keys and values. The total size of the
--   <tt>sessionAttributes</tt> and <tt>requestAttributes</tt> headers is
--   limited to 12 KB.
--   
--   For more information, see <a>Setting Session Attributes</a>.
postContent_sessionAttributes :: Lens' PostContent (Maybe Text)

-- | You pass this value as the <tt>Accept</tt> HTTP header.
--   
--   The message Amazon Lex returns in the response can be either text or
--   speech based on the <tt>Accept</tt> HTTP header value in the request.
--   
--   <ul>
--   <li>If the value is <tt>text/plain; charset=utf-8</tt>, Amazon Lex
--   returns text in the response.</li>
--   <li>If the value begins with <tt>audio/</tt>, Amazon Lex returns
--   speech in the response. Amazon Lex uses Amazon Polly to generate the
--   speech (using the configuration you specified in the <tt>Accept</tt>
--   header). For example, if you specify <tt>audio/mpeg</tt> as the value,
--   Amazon Lex returns speech in the MPEG format.</li>
--   <li>If the value is <tt>audio/pcm</tt>, the speech returned is
--   <tt>audio/pcm</tt> in 16-bit, little endian format.</li>
--   <li>The following are the accepted
--   values:<ul><li>audio/mpeg</li><li>audio/ogg</li><li>audio/pcm</li><li>text/plain;
--   charset=utf-8</li><li>audio/* (defaults to mpeg)</li></ul></li>
--   </ul>
postContent_accept :: Lens' PostContent (Maybe Text)

-- | You pass this value as the <tt>x-amz-lex-request-attributes</tt> HTTP
--   header.
--   
--   Request-specific information passed between Amazon Lex and a client
--   application. The value must be a JSON serialized and base64 encoded
--   map with string keys and values. The total size of the
--   <tt>requestAttributes</tt> and <tt>sessionAttributes</tt> headers is
--   limited to 12 KB.
--   
--   The namespace <tt>x-amz-lex:</tt> is reserved for special attributes.
--   Don't create any request attributes with the prefix
--   <tt>x-amz-lex:</tt>.
--   
--   For more information, see <a>Setting Request Attributes</a>.
postContent_requestAttributes :: Lens' PostContent (Maybe Text)

-- | A list of contexts active for the request. A context can be activated
--   when a previous intent is fulfilled, or by including the context in
--   the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
postContent_activeContexts :: Lens' PostContent (Maybe Text)

-- | Name of the Amazon Lex bot.
postContent_botName :: Lens' PostContent Text

-- | Alias of the Amazon Lex bot.
postContent_botAlias :: Lens' PostContent Text

-- | The ID of the client application user. Amazon Lex uses this to
--   identify a user's conversation with your bot. At runtime, each request
--   must contain the <tt>userID</tt> field.
--   
--   To decide the user ID to use for your application, consider the
--   following factors.
--   
--   <ul>
--   <li>The <tt>userID</tt> field must not contain any personally
--   identifiable information of the user, for example, name, personal
--   identification numbers, or other end user personal information.</li>
--   <li>If you want a user to start a conversation on one device and
--   continue on another device, use a user-specific identifier.</li>
--   <li>If you want the same user to be able to have two independent
--   conversations on two different devices, choose a device-specific
--   identifier.</li>
--   <li>A user can't have two independent conversations with two different
--   versions of the same bot. For example, a user can't have a
--   conversation with the PROD and BETA versions of the same bot. If you
--   anticipate that a user will need to have conversation with two
--   different versions, for example, while testing, include the bot alias
--   in the user ID to separate the two conversations.</li>
--   </ul>
postContent_userId :: Lens' PostContent Text

-- | You pass this value as the <tt>Content-Type</tt> HTTP header.
--   
--   Indicates the audio format or text. The header value must start with
--   one of the following prefixes:
--   
--   <ul>
--   <li>PCM format, audio data must be in little-endian byte
--   order.<ul><li>audio/l16; rate=16000; channels=1</li><li>audio/x-l16;
--   sample-rate=16000; channel-count=1</li><li>audio/lpcm;
--   sample-rate=8000; sample-size-bits=16; channel-count=1;
--   is-big-endian=false</li></ul></li>
--   <li>Opus format<ul><li>audio/x-cbr-opus-with-preamble;
--   preamble-size=0; bit-rate=256000;
--   frame-size-milliseconds=4</li></ul></li>
--   <li>Text format<ul><li>text/plain; charset=utf-8</li></ul></li>
--   </ul>
postContent_contentType :: Lens' PostContent Text

-- | User input in PCM or Opus audio format or text format as described in
--   the <tt>Content-Type</tt> HTTP header.
--   
--   You can stream audio data to Amazon Lex or you can create a local
--   buffer that captures all of the audio data before sending. In general,
--   you get better performance if you stream audio data rather than
--   buffering the data locally.
postContent_inputStream :: Lens' PostContent HashedBody

-- | Identifies the current state of the user interaction. Amazon Lex
--   returns one of the following values as <tt>dialogState</tt>. The
--   client can optionally use this information to customize the user
--   interface.
--   
--   <ul>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit the user's
--   intent. Consider the following examples:For example, a user might
--   utter an intent ("I want to order a pizza"). If Amazon Lex cannot
--   infer the user intent from this utterance, it will return this dialog
--   state.</li>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response.For example, Amazon Lex wants user confirmation before
--   fulfilling an intent. Instead of a simple "yes" or "no" response, a
--   user might respond with additional information. For example, "yes, but
--   make it a thick crust pizza" or "no, I want to order a drink." Amazon
--   Lex can process such additional information (in these examples, update
--   the crust type slot or change the intent from OrderPizza to
--   OrderDrink).</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting the value of a slot
--   for the current intent.For example, suppose that in the response
--   Amazon Lex sends this message: "What size pizza would you like?". A
--   user might reply with the slot value (e.g., "medium"). The user might
--   also provide additional information in the response (e.g., "medium
--   thick crust pizza"). Amazon Lex can process such additional
--   information appropriately.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function has
--   successfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the request.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user
--   failed.This can happen for various reasons, including that the user
--   does not provide an appropriate response to prompts from the service
--   (you can configure how many times Amazon Lex can prompt a user for
--   specific information), or if the Lambda function fails to fulfill the
--   intent.</li>
--   </ul>
postContentResponse_dialogState :: Lens' PostContentResponse (Maybe DialogState)

-- | Map of key/value pairs representing the session-specific context
--   information.
postContentResponse_sessionAttributes :: Lens' PostContentResponse (Maybe Text)

-- | The message to convey to the user. The message can come from the bot's
--   configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> in its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
--   
--   The <tt>encodedMessage</tt> field is base-64 encoded. You must decode
--   the field before you can use the value.
postContentResponse_encodedMessage :: Lens' PostContentResponse (Maybe Text)

-- | Content type as specified in the <tt>Accept</tt> HTTP header in the
--   request.
postContentResponse_contentType :: Lens' PostContentResponse (Maybe Text)

-- | Current user intent that Amazon Lex is aware of.
postContentResponse_intentName :: Lens' PostContentResponse (Maybe Text)

-- | You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>message</tt> field is null. You should use the
--   <tt>encodedMessage</tt> field instead.
--   
--   The message to convey to the user. The message can come from the bot's
--   configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> in its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
postContentResponse_message :: Lens' PostContentResponse (Maybe Text)

-- | The version of the bot that responded to the conversation. You can use
--   this information to help determine if one version of a bot is
--   performing better than another version.
postContentResponse_botVersion :: Lens' PostContentResponse (Maybe Text)

-- | The unique identifier for the session.
postContentResponse_sessionId :: Lens' PostContentResponse (Maybe Text)

-- | The format of the response message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
postContentResponse_messageFormat :: Lens' PostContentResponse (Maybe MessageFormatType)

-- | The text used to process the request.
--   
--   You can use this field only in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>inputTranscript</tt> field is null. You should use the
--   <tt>encodedInputTranscript</tt> field instead.
--   
--   If the input was an audio stream, the <tt>inputTranscript</tt> field
--   contains the text extracted from the audio stream. This is the text
--   that is actually processed to recognize intents and slot values. You
--   can use this information to determine if Amazon Lex is correctly
--   processing the audio that you send.
postContentResponse_inputTranscript :: Lens' PostContentResponse (Maybe Text)

-- | The text used to process the request.
--   
--   If the input was an audio stream, the <tt>encodedInputTranscript</tt>
--   field contains the text extracted from the audio stream. This is the
--   text that is actually processed to recognize intents and slot values.
--   You can use this information to determine if Amazon Lex is correctly
--   processing the audio that you send.
--   
--   The <tt>encodedInputTranscript</tt> field is base-64 encoded. You must
--   decode the field before you can use the value.
postContentResponse_encodedInputTranscript :: Lens' PostContentResponse (Maybe Text)

-- | Map of zero or more intent slots (name/value pairs) Amazon Lex
--   detected from the user input during the conversation. The field is
--   base-64 encoded.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt>, the default is
--   <tt>ORIGINAL_VALUE</tt>.
postContentResponse_slots :: Lens' PostContentResponse (Maybe Text)

-- | Provides a score that indicates how confident Amazon Lex is that the
--   returned intent is the one that matches the user's intent. The score
--   is between 0.0 and 1.0.
--   
--   The score is a relative score, not an absolute score. The score may
--   change based on improvements to Amazon Lex.
postContentResponse_nluIntentConfidence :: Lens' PostContentResponse (Maybe Text)

-- | The sentiment expressed in an utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field contains the result of the analysis.
postContentResponse_sentimentResponse :: Lens' PostContentResponse (Maybe Text)

-- | If the <tt>dialogState</tt> value is <tt>ElicitSlot</tt>, returns the
--   name of the slot for which Amazon Lex is eliciting a value.
postContentResponse_slotToElicit :: Lens' PostContentResponse (Maybe Text)

-- | One to four alternative intents that may be applicable to the user's
--   intent.
--   
--   Each alternative includes a score that indicates how confident Amazon
--   Lex is that the intent matches the user's intent. The intents are
--   sorted by the confidence score.
postContentResponse_alternativeIntents :: Lens' PostContentResponse (Maybe Text)

-- | A list of active contexts for the session. A context can be set when
--   an intent is fulfilled or by calling the <tt>PostContent</tt>,
--   <tt>PostText</tt>, or <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
postContentResponse_activeContexts :: Lens' PostContentResponse (Maybe Text)

-- | The response's http status code.
postContentResponse_httpStatus :: Lens' PostContentResponse Int

-- | The prompt (or statement) to convey to the user. This is based on the
--   bot configuration and context. For example, if Amazon Lex did not
--   understand the user intent, it sends the <tt>clarificationPrompt</tt>
--   configured for the bot. If the intent requires confirmation before
--   taking the fulfillment action, it sends the
--   <tt>confirmationPrompt</tt>. Another example: Suppose that the Lambda
--   function successfully fulfilled the intent, and sent a message to
--   convey to the user. Then Amazon Lex sends that message in the
--   response.
postContentResponse_audioStream :: Lens' PostContentResponse ResponseBody

-- | A string used to filter the intents returned in the
--   <tt>recentIntentSummaryView</tt> structure.
--   
--   When you specify a filter, only intents with their
--   <tt>checkpointLabel</tt> field set to that string are returned.
getSession_checkpointLabelFilter :: Lens' GetSession (Maybe Text)

-- | The name of the bot that contains the session data.
getSession_botName :: Lens' GetSession Text

-- | The alias in use for the bot that contains the session data.
getSession_botAlias :: Lens' GetSession Text

-- | The ID of the client application user. Amazon Lex uses this to
--   identify a user's conversation with your bot.
getSession_userId :: Lens' GetSession Text

-- | Map of key/value pairs representing the session-specific context
--   information. It contains application information passed between Amazon
--   Lex and a client application.
getSessionResponse_sessionAttributes :: Lens' GetSessionResponse (Maybe (HashMap Text Text))

-- | Describes the current state of the bot.
getSessionResponse_dialogAction :: Lens' GetSessionResponse (Maybe DialogAction)

-- | A unique identifier for the session.
getSessionResponse_sessionId :: Lens' GetSessionResponse (Maybe Text)

-- | An array of information about the intents used in the session. The
--   array can contain a maximum of three summaries. If more than three
--   intents are used in the session, the <tt>recentIntentSummaryView</tt>
--   operation contains information about the last three intents used.
--   
--   If you set the <tt>checkpointLabelFilter</tt> parameter in the
--   request, the array contains only the intents with the specified label.
getSessionResponse_recentIntentSummaryView :: Lens' GetSessionResponse (Maybe [IntentSummary])

-- | A list of active contexts for the session. A context can be set when
--   an intent is fulfilled or by calling the <tt>PostContent</tt>,
--   <tt>PostText</tt>, or <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
getSessionResponse_activeContexts :: Lens' GetSessionResponse (Maybe [ActiveContext])

-- | The response's http status code.
getSessionResponse_httpStatus :: Lens' GetSessionResponse Int

-- | Application-specific information passed between Amazon Lex and a
--   client application.
--   
--   For more information, see <a>Setting Session Attributes</a>.
postText_sessionAttributes :: Lens' PostText (Maybe (HashMap Text Text))

-- | Request-specific information passed between Amazon Lex and a client
--   application.
--   
--   The namespace <tt>x-amz-lex:</tt> is reserved for special attributes.
--   Don't create any request attributes with the prefix
--   <tt>x-amz-lex:</tt>.
--   
--   For more information, see <a>Setting Request Attributes</a>.
postText_requestAttributes :: Lens' PostText (Maybe (HashMap Text Text))

-- | A list of contexts active for the request. A context can be activated
--   when a previous intent is fulfilled, or by including the context in
--   the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
postText_activeContexts :: Lens' PostText (Maybe [ActiveContext])

-- | The name of the Amazon Lex bot.
postText_botName :: Lens' PostText Text

-- | The alias of the Amazon Lex bot.
postText_botAlias :: Lens' PostText Text

-- | The ID of the client application user. Amazon Lex uses this to
--   identify a user's conversation with your bot. At runtime, each request
--   must contain the <tt>userID</tt> field.
--   
--   To decide the user ID to use for your application, consider the
--   following factors.
--   
--   <ul>
--   <li>The <tt>userID</tt> field must not contain any personally
--   identifiable information of the user, for example, name, personal
--   identification numbers, or other end user personal information.</li>
--   <li>If you want a user to start a conversation on one device and
--   continue on another device, use a user-specific identifier.</li>
--   <li>If you want the same user to be able to have two independent
--   conversations on two different devices, choose a device-specific
--   identifier.</li>
--   <li>A user can't have two independent conversations with two different
--   versions of the same bot. For example, a user can't have a
--   conversation with the PROD and BETA versions of the same bot. If you
--   anticipate that a user will need to have conversation with two
--   different versions, for example, while testing, include the bot alias
--   in the user ID to separate the two conversations.</li>
--   </ul>
postText_userId :: Lens' PostText Text

-- | The text that the user entered (Amazon Lex interprets this text).
postText_inputText :: Lens' PostText Text

-- | Represents the options that the user has to respond to the current
--   prompt. Response Card can come from the bot configuration (in the
--   Amazon Lex console, choose the settings button next to a slot) or from
--   a code hook (Lambda function).
postTextResponse_responseCard :: Lens' PostTextResponse (Maybe ResponseCard)

-- | Identifies the current state of the user interaction. Amazon Lex
--   returns one of the following values as <tt>dialogState</tt>. The
--   client can optionally use this information to customize the user
--   interface.
--   
--   <ul>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit user intent.For
--   example, a user might utter an intent ("I want to order a pizza"). If
--   Amazon Lex cannot infer the user intent from this utterance, it will
--   return this dialogState.</li>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response.For example, Amazon Lex wants user confirmation before
--   fulfilling an intent.Instead of a simple "yes" or "no," a user might
--   respond with additional information. For example, "yes, but make it
--   thick crust pizza" or "no, I want to order a drink". Amazon Lex can
--   process such additional information (in these examples, update the
--   crust type slot value, or change intent from OrderPizza to
--   OrderDrink).</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting a slot value for the
--   current intent.For example, suppose that in the response Amazon Lex
--   sends this message: "What size pizza would you like?". A user might
--   reply with the slot value (e.g., "medium"). The user might also
--   provide additional information in the response (e.g., "medium thick
--   crust pizza"). Amazon Lex can process such additional information
--   appropriately.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function configured
--   for the intent has successfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the intent.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user
--   failed.This can happen for various reasons including that the user did
--   not provide an appropriate response to prompts from the service (you
--   can configure how many times Amazon Lex can prompt a user for specific
--   information), or the Lambda function failed to fulfill the
--   intent.</li>
--   </ul>
postTextResponse_dialogState :: Lens' PostTextResponse (Maybe DialogState)

-- | A map of key-value pairs representing the session-specific context
--   information.
postTextResponse_sessionAttributes :: Lens' PostTextResponse (Maybe (HashMap Text Text))

-- | The current user intent that Amazon Lex is aware of.
postTextResponse_intentName :: Lens' PostTextResponse (Maybe Text)

-- | The message to convey to the user. The message can come from the bot's
--   configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
postTextResponse_message :: Lens' PostTextResponse (Maybe Text)

-- | The version of the bot that responded to the conversation. You can use
--   this information to help determine if one version of a bot is
--   performing better than another version.
postTextResponse_botVersion :: Lens' PostTextResponse (Maybe Text)

-- | A unique identifier for the session.
postTextResponse_sessionId :: Lens' PostTextResponse (Maybe Text)

-- | The format of the response message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format defined by
--   the Lambda function.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
postTextResponse_messageFormat :: Lens' PostTextResponse (Maybe MessageFormatType)

-- | The intent slots that Amazon Lex detected from the user input in the
--   conversation.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt>, the default is
--   <tt>ORIGINAL_VALUE</tt>.
postTextResponse_slots :: Lens' PostTextResponse (Maybe (HashMap Text Text))

-- | Provides a score that indicates how confident Amazon Lex is that the
--   returned intent is the one that matches the user's intent. The score
--   is between 0.0 and 1.0. For more information, see <a>Confidence
--   Scores</a>.
--   
--   The score is a relative score, not an absolute score. The score may
--   change based on improvements to Amazon Lex.
postTextResponse_nluIntentConfidence :: Lens' PostTextResponse (Maybe IntentConfidence)

-- | The sentiment expressed in and utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field contains the result of the analysis.
postTextResponse_sentimentResponse :: Lens' PostTextResponse (Maybe SentimentResponse)

-- | If the <tt>dialogState</tt> value is <tt>ElicitSlot</tt>, returns the
--   name of the slot for which Amazon Lex is eliciting a value.
postTextResponse_slotToElicit :: Lens' PostTextResponse (Maybe Text)

-- | One to four alternative intents that may be applicable to the user's
--   intent.
--   
--   Each alternative includes a score that indicates how confident Amazon
--   Lex is that the intent matches the user's intent. The intents are
--   sorted by the confidence score.
postTextResponse_alternativeIntents :: Lens' PostTextResponse (Maybe [PredictedIntent])

-- | A list of active contexts for the session. A context can be set when
--   an intent is fulfilled or by calling the <tt>PostContent</tt>,
--   <tt>PostText</tt>, or <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
postTextResponse_activeContexts :: Lens' PostTextResponse (Maybe [ActiveContext])

-- | The response's http status code.
postTextResponse_httpStatus :: Lens' PostTextResponse Int

-- | The name of the context.
activeContext_name :: Lens' ActiveContext Text

-- | The length of time or number of turns that a context remains active.
activeContext_timeToLive :: Lens' ActiveContext ActiveContextTimeToLive

-- | State variables for the current context. You can use these values as
--   default values for slots in subsequent events.
activeContext_parameters :: Lens' ActiveContext (HashMap Text Text)

-- | The number of seconds that the context should be active after it is
--   first sent in a <tt>PostContent</tt> or <tt>PostText</tt> response.
--   You can set the value between 5 and 86,400 seconds (24 hours).
activeContextTimeToLive_timeToLiveInSeconds :: Lens' ActiveContextTimeToLive (Maybe Natural)

-- | The number of conversation turns that the context should be active. A
--   conversation turn is one <tt>PostContent</tt> or <tt>PostText</tt>
--   request and the corresponding response from Amazon Lex.
activeContextTimeToLive_turnsToLive :: Lens' ActiveContextTimeToLive (Maybe Natural)

-- | Text that is visible to the user on the button.
button_text :: Lens' Button Text

-- | The value sent to Amazon Lex when a user chooses the button. For
--   example, consider button text "NYC." When the user chooses the button,
--   the value sent can be "New York City."
button_value :: Lens' Button Text

-- | The name of the intent.
dialogAction_intentName :: Lens' DialogAction (Maybe Text)

-- | The message that should be shown to the user. If you don't specify a
--   message, Amazon Lex will use the message configured for the intent.
dialogAction_message :: Lens' DialogAction (Maybe Text)

-- | <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages. For more information, see <a>Message
--   Groups</a>.</li>
--   </ul>
dialogAction_messageFormat :: Lens' DialogAction (Maybe MessageFormatType)

-- | The fulfillment state of the intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
dialogAction_fulfillmentState :: Lens' DialogAction (Maybe FulfillmentState)

-- | Map of the slots that have been gathered and their values.
dialogAction_slots :: Lens' DialogAction (Maybe (HashMap Text Text))

-- | The name of the slot that should be elicited from the user.
dialogAction_slotToElicit :: Lens' DialogAction (Maybe Text)

-- | The next action that the bot should take in its interaction with the
--   user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>Delegate</tt> - The next action is determined by Amazon
--   Lex.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
dialogAction_type :: Lens' DialogAction DialogActionType

-- | The title of the option.
genericAttachment_title :: Lens' GenericAttachment (Maybe Text)

-- | The list of options to show to the user.
genericAttachment_buttons :: Lens' GenericAttachment (Maybe [Button])

-- | The URL of an attachment to the response card.
genericAttachment_attachmentLinkUrl :: Lens' GenericAttachment (Maybe Text)

-- | The URL of an image that is displayed to the user.
genericAttachment_imageUrl :: Lens' GenericAttachment (Maybe Text)

-- | The subtitle shown below the title.
genericAttachment_subTitle :: Lens' GenericAttachment (Maybe Text)

-- | A score that indicates how confident Amazon Lex is that an intent
--   satisfies the user's intent. Ranges between 0.00 and 1.00. Higher
--   scores indicate higher confidence.
intentConfidence_score :: Lens' IntentConfidence (Maybe Double)

-- | The name of the intent.
intentSummary_intentName :: Lens' IntentSummary (Maybe Text)

-- | The fulfillment state of the intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
intentSummary_fulfillmentState :: Lens' IntentSummary (Maybe FulfillmentState)

-- | Map of the slots that have been gathered and their values.
intentSummary_slots :: Lens' IntentSummary (Maybe (HashMap Text Text))

-- | A user-defined label that identifies a particular intent. You can use
--   this label to return to a previous intent.
--   
--   Use the <tt>checkpointLabelFilter</tt> parameter of the
--   <tt>GetSessionRequest</tt> operation to filter the intents returned by
--   the operation to those with only the specified label.
intentSummary_checkpointLabel :: Lens' IntentSummary (Maybe Text)

-- | The next slot to elicit from the user. If there is not slot to elicit,
--   the field is blank.
intentSummary_slotToElicit :: Lens' IntentSummary (Maybe Text)

-- | The status of the intent after the user responds to the confirmation
--   prompt. If the user confirms the intent, Amazon Lex sets this field to
--   <tt>Confirmed</tt>. If the user denies the intent, Amazon Lex sets
--   this value to <tt>Denied</tt>. The possible values are:
--   
--   <ul>
--   <li><tt>Confirmed</tt> - The user has responded "Yes" to the
--   confirmation prompt, confirming that the intent is complete and that
--   it is ready to be fulfilled.</li>
--   <li><tt>Denied</tt> - The user has responded "No" to the confirmation
--   prompt.</li>
--   <li><tt>None</tt> - The user has never been prompted for confirmation;
--   or, the user was prompted but did not confirm or deny the prompt.</li>
--   </ul>
intentSummary_confirmationStatus :: Lens' IntentSummary (Maybe ConfirmationStatus)

-- | The next action that the bot should take in its interaction with the
--   user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
intentSummary_dialogActionType :: Lens' IntentSummary DialogActionType

-- | The name of the intent that Amazon Lex suggests satisfies the user's
--   intent.
predictedIntent_intentName :: Lens' PredictedIntent (Maybe Text)

-- | The slot and slot values associated with the predicted intent.
predictedIntent_slots :: Lens' PredictedIntent (Maybe (HashMap Text Text))

-- | Indicates how confident Amazon Lex is that an intent satisfies the
--   user's intent.
predictedIntent_nluIntentConfidence :: Lens' PredictedIntent (Maybe IntentConfidence)

-- | The content type of the response.
responseCard_contentType :: Lens' ResponseCard (Maybe ContentType)

-- | An array of attachment objects representing options.
responseCard_genericAttachments :: Lens' ResponseCard (Maybe [GenericAttachment])

-- | The version of the response card format.
responseCard_version :: Lens' ResponseCard (Maybe Text)

-- | The likelihood that the sentiment was correctly inferred.
sentimentResponse_sentimentScore :: Lens' SentimentResponse (Maybe Text)

-- | The inferred sentiment that Amazon Comprehend has the highest
--   confidence in.
sentimentResponse_sentimentLabel :: Lens' SentimentResponse (Maybe Text)


module Network.AWS.LexRuntime.Waiters


-- | Derived from API version <tt>2016-11-28</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon Lex provides both build and runtime endpoints. Each endpoint
--   provides a set of operations (API). Your conversational bot uses the
--   runtime API to understand user utterances (user input text or voice).
--   For example, suppose a user says "I want pizza", your bot sends this
--   input to Amazon Lex using the runtime API. Amazon Lex recognizes that
--   the user request is for the OrderPizza intent (one of the intents
--   defined in the bot). Then Amazon Lex engages in user conversation on
--   behalf of the bot to elicit required information (slot values, such as
--   pizza size and crust type), and then performs fulfillment activity
--   (that you configured when you created the bot). You use the build-time
--   API to create and manage your Amazon Lex bot. For a list of build-time
--   operations, see the build-time API, .
module Network.AWS.LexRuntime

-- | API version <tt>2016-11-28</tt> of the Amazon Lex Runtime Service SDK
--   configuration.
defaultService :: Service

-- | The resource (such as the Amazon Lex bot or an alias) that is referred
--   to is not found.
_NotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Request validation failed, there is no usable message in the context,
--   or the bot build failed, is still in progress, or contains unbuilt
--   changes.
_BadRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The Content-Type header (<tt>PostContent</tt> API) has an invalid
--   value.
_UnsupportedMediaTypeException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The accept header in the request does not have a valid value.
_NotAcceptableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Either the Amazon Lex bot is still building, or one of the dependent
--   services (Amazon Polly, AWS Lambda) failed with an internal service
--   error.
_BadGatewayException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Two clients are using the same AWS account, Amazon Lex bot, and user
--   ID.
_ConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Exceeded a limit.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | One of the dependencies, such as AWS Lambda or Amazon Polly, threw an
--   exception. For example,
--   
--   <ul>
--   <li>If Amazon Lex does not have sufficient permissions to call a
--   Lambda function.</li>
--   <li>If a Lambda function takes longer than 30 seconds to execute.</li>
--   <li>If a fulfillment Lambda function returns a <tt>Delegate</tt>
--   dialog action without removing any slot values.</li>
--   </ul>
_DependencyFailedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Internal service error. Retry the call.
_InternalFailureException :: AsError a => Getting (First ServiceError) a ServiceError

-- | This exception is not used.
_LoopDetectedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The input speech is too long.
_RequestTimeoutException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newPutSession</a> smart constructor.
data PutSession
PutSession' :: Maybe (Sensitive (HashMap Text Text)) -> Maybe DialogAction -> Maybe Text -> Maybe [IntentSummary] -> Maybe (Sensitive [ActiveContext]) -> Text -> Text -> Text -> PutSession

-- | Create a value of <a>PutSession</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sessionAttributes:PutSession'</a>,
--   <a>putSession_sessionAttributes</a> - Map of key/value pairs
--   representing the session-specific context information. It contains
--   application information passed between Amazon Lex and a client
--   application.
--   
--   <a>$sel:dialogAction:PutSession'</a>, <a>putSession_dialogAction</a> -
--   Sets the next action that the bot should take to fulfill the
--   conversation.
--   
--   <a>$sel:accept:PutSession'</a>, <a>putSession_accept</a> - The message
--   that Amazon Lex returns in the response can be either text or speech
--   based depending on the value of this field.
--   
--   <ul>
--   <li>If the value is <tt>text/plain; charset=utf-8</tt>, Amazon Lex
--   returns text in the response.</li>
--   <li>If the value begins with <tt>audio/</tt>, Amazon Lex returns
--   speech in the response. Amazon Lex uses Amazon Polly to generate the
--   speech in the configuration that you specify. For example, if you
--   specify <tt>audio/mpeg</tt> as the value, Amazon Lex returns speech in
--   the MPEG format.</li>
--   <li>If the value is <tt>audio/pcm</tt>, the speech is returned as
--   <tt>audio/pcm</tt> in 16-bit, little endian format.</li>
--   <li>The following are the accepted
--   values:<ul><li><pre>audio/mpeg</pre></li><li><pre>audio/ogg</pre></li><li><pre>audio/pcm</pre></li><li><tt>audio/*</tt>
--   (defaults to mpeg)</li><li><pre>text/plain;
--   charset=utf-8</pre></li></ul></li>
--   </ul>
--   
--   <a>$sel:recentIntentSummaryView:PutSession'</a>,
--   <a>putSession_recentIntentSummaryView</a> - A summary of the recent
--   intents for the bot. You can use the intent summary view to set a
--   checkpoint label on an intent and modify attributes of intents. You
--   can also use it to remove or add intent summary objects to the list.
--   
--   An intent that you modify or add to the list must make sense for the
--   bot. For example, the intent name must be valid for the bot. You must
--   provide valid values for:
--   
--   <ul>
--   <li><pre>intentName</pre></li>
--   <li>slot names</li>
--   <li><pre>slotToElict</pre></li>
--   </ul>
--   
--   If you send the <tt>recentIntentSummaryView</tt> parameter in a
--   <tt>PutSession</tt> request, the contents of the new summary view
--   replaces the old summary view. For example, if a <tt>GetSession</tt>
--   request returns three intents in the summary view and you call
--   <tt>PutSession</tt> with one intent in the summary view, the next call
--   to <tt>GetSession</tt> will only return one intent.
--   
--   <a>$sel:activeContexts:PutSession'</a>,
--   <a>putSession_activeContexts</a> - A list of contexts active for the
--   request. A context can be activated when a previous intent is
--   fulfilled, or by including the context in the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
--   
--   <a>$sel:botName:PutSession'</a>, <a>putSession_botName</a> - The name
--   of the bot that contains the session data.
--   
--   <a>$sel:botAlias:PutSession'</a>, <a>putSession_botAlias</a> - The
--   alias in use for the bot that contains the session data.
--   
--   <a>$sel:userId:PutSession'</a>, <a>putSession_userId</a> - The ID of
--   the client application user. Amazon Lex uses this to identify a user's
--   conversation with your bot.
newPutSession :: Text -> Text -> Text -> PutSession

-- | <i>See:</i> <a>newPutSessionResponse</a> smart constructor.
data PutSessionResponse
PutSessionResponse' :: Maybe DialogState -> Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Maybe MessageFormatType -> Maybe Text -> Maybe Text -> Maybe (Sensitive Text) -> Int -> ResponseBody -> PutSessionResponse

-- | Create a value of <a>PutSessionResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dialogState:PutSessionResponse'</a>,
--   <a>putSessionResponse_dialogState</a> - - <tt>ConfirmIntent</tt> -
--   Amazon Lex is expecting a "yes" or "no" response to confirm the intent
--   before fulfilling an intent.
--   
--   <ul>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit the user's
--   intent.</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting the value of a slot
--   for the current intent.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user has
--   failed. This can happen for various reasons, including the user does
--   not provide an appropriate response to prompts from the service, or if
--   the Lambda function fails to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function has
--   sucessfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the intent.</li>
--   </ul>
--   
--   <a>$sel:sessionAttributes:PutSession'</a>,
--   <a>putSessionResponse_sessionAttributes</a> - Map of key/value pairs
--   representing session-specific context information.
--   
--   <a>$sel:encodedMessage:PutSessionResponse'</a>,
--   <a>putSessionResponse_encodedMessage</a> - The next message that
--   should be presented to the user.
--   
--   The <tt>encodedMessage</tt> field is base-64 encoded. You must decode
--   the field before you can use the value.
--   
--   <a>$sel:contentType:PutSessionResponse'</a>,
--   <a>putSessionResponse_contentType</a> - Content type as specified in
--   the <tt>Accept</tt> HTTP header in the request.
--   
--   <a>$sel:intentName:PutSessionResponse'</a>,
--   <a>putSessionResponse_intentName</a> - The name of the current intent.
--   
--   <a>$sel:message:PutSessionResponse'</a>,
--   <a>putSessionResponse_message</a> - The next message that should be
--   presented to the user.
--   
--   You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>message</tt> field is null. You should use the
--   <tt>encodedMessage</tt> field instead.
--   
--   <a>$sel:sessionId:PutSessionResponse'</a>,
--   <a>putSessionResponse_sessionId</a> - A unique identifier for the
--   session.
--   
--   <a>$sel:messageFormat:PutSessionResponse'</a>,
--   <a>putSessionResponse_messageFormat</a> - The format of the response
--   message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
--   
--   <a>$sel:slots:PutSessionResponse'</a>, <a>putSessionResponse_slots</a>
--   - Map of zero or more intent slots Amazon Lex detected from the user
--   input during the conversation.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt> the default is
--   <tt>ORIGINAL_VALUE</tt>.
--   
--   <a>$sel:slotToElicit:PutSessionResponse'</a>,
--   <a>putSessionResponse_slotToElicit</a> - If the <tt>dialogState</tt>
--   is <tt>ElicitSlot</tt>, returns the name of the slot for which Amazon
--   Lex is eliciting a value.
--   
--   <a>$sel:activeContexts:PutSession'</a>,
--   <a>putSessionResponse_activeContexts</a> - A list of active contexts
--   for the session.
--   
--   <a>$sel:httpStatus:PutSessionResponse'</a>,
--   <a>putSessionResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:audioStream:PutSessionResponse'</a>,
--   <a>putSessionResponse_audioStream</a> - The audio version of the
--   message to convey to the user.
newPutSessionResponse :: Int -> ResponseBody -> PutSessionResponse

-- | <i>See:</i> <a>newDeleteSession</a> smart constructor.
data DeleteSession
DeleteSession' :: Text -> Text -> Text -> DeleteSession

-- | Create a value of <a>DeleteSession</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:botName:DeleteSession'</a>, <a>deleteSession_botName</a> - The
--   name of the bot that contains the session data.
--   
--   <a>$sel:botAlias:DeleteSession'</a>, <a>deleteSession_botAlias</a> -
--   The alias in use for the bot that contains the session data.
--   
--   <a>$sel:userId:DeleteSession'</a>, <a>deleteSession_userId</a> - The
--   identifier of the user associated with the session data.
newDeleteSession :: Text -> Text -> Text -> DeleteSession

-- | <i>See:</i> <a>newDeleteSessionResponse</a> smart constructor.
data DeleteSessionResponse
DeleteSessionResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> DeleteSessionResponse

-- | Create a value of <a>DeleteSessionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:botAlias:DeleteSession'</a>,
--   <a>deleteSessionResponse_botAlias</a> - The alias in use for the bot
--   associated with the session data.
--   
--   <a>$sel:botName:DeleteSession'</a>,
--   <a>deleteSessionResponse_botName</a> - The name of the bot associated
--   with the session data.
--   
--   <a>$sel:sessionId:DeleteSessionResponse'</a>,
--   <a>deleteSessionResponse_sessionId</a> - The unique identifier for the
--   session.
--   
--   <a>$sel:userId:DeleteSession'</a>, <a>deleteSessionResponse_userId</a>
--   - The ID of the client application user.
--   
--   <a>$sel:httpStatus:DeleteSessionResponse'</a>,
--   <a>deleteSessionResponse_httpStatus</a> - The response's http status
--   code.
newDeleteSessionResponse :: Int -> DeleteSessionResponse

-- | <i>See:</i> <a>newPostContent</a> smart constructor.
data PostContent
PostContent' :: Maybe (Sensitive Text) -> Maybe Text -> Maybe (Sensitive Text) -> Maybe (Sensitive Text) -> Text -> Text -> Text -> Text -> HashedBody -> PostContent

-- | Create a value of <a>PostContent</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sessionAttributes:PostContent'</a>,
--   <a>postContent_sessionAttributes</a> - You pass this value as the
--   <tt>x-amz-lex-session-attributes</tt> HTTP header.
--   
--   Application-specific information passed between Amazon Lex and a
--   client application. The value must be a JSON serialized and base64
--   encoded map with string keys and values. The total size of the
--   <tt>sessionAttributes</tt> and <tt>requestAttributes</tt> headers is
--   limited to 12 KB.
--   
--   For more information, see <a>Setting Session Attributes</a>.
--   
--   <a>$sel:accept:PostContent'</a>, <a>postContent_accept</a> - You pass
--   this value as the <tt>Accept</tt> HTTP header.
--   
--   The message Amazon Lex returns in the response can be either text or
--   speech based on the <tt>Accept</tt> HTTP header value in the request.
--   
--   <ul>
--   <li>If the value is <tt>text/plain; charset=utf-8</tt>, Amazon Lex
--   returns text in the response.</li>
--   <li>If the value begins with <tt>audio/</tt>, Amazon Lex returns
--   speech in the response. Amazon Lex uses Amazon Polly to generate the
--   speech (using the configuration you specified in the <tt>Accept</tt>
--   header). For example, if you specify <tt>audio/mpeg</tt> as the value,
--   Amazon Lex returns speech in the MPEG format.</li>
--   <li>If the value is <tt>audio/pcm</tt>, the speech returned is
--   <tt>audio/pcm</tt> in 16-bit, little endian format.</li>
--   <li>The following are the accepted
--   values:<ul><li>audio/mpeg</li><li>audio/ogg</li><li>audio/pcm</li><li>text/plain;
--   charset=utf-8</li><li>audio/* (defaults to mpeg)</li></ul></li>
--   </ul>
--   
--   <a>$sel:requestAttributes:PostContent'</a>,
--   <a>postContent_requestAttributes</a> - You pass this value as the
--   <tt>x-amz-lex-request-attributes</tt> HTTP header.
--   
--   Request-specific information passed between Amazon Lex and a client
--   application. The value must be a JSON serialized and base64 encoded
--   map with string keys and values. The total size of the
--   <tt>requestAttributes</tt> and <tt>sessionAttributes</tt> headers is
--   limited to 12 KB.
--   
--   The namespace <tt>x-amz-lex:</tt> is reserved for special attributes.
--   Don't create any request attributes with the prefix
--   <tt>x-amz-lex:</tt>.
--   
--   For more information, see <a>Setting Request Attributes</a>.
--   
--   <a>$sel:activeContexts:PostContent'</a>,
--   <a>postContent_activeContexts</a> - A list of contexts active for the
--   request. A context can be activated when a previous intent is
--   fulfilled, or by including the context in the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
--   
--   <a>$sel:botName:PostContent'</a>, <a>postContent_botName</a> - Name of
--   the Amazon Lex bot.
--   
--   <a>$sel:botAlias:PostContent'</a>, <a>postContent_botAlias</a> - Alias
--   of the Amazon Lex bot.
--   
--   <a>$sel:userId:PostContent'</a>, <a>postContent_userId</a> - The ID of
--   the client application user. Amazon Lex uses this to identify a user's
--   conversation with your bot. At runtime, each request must contain the
--   <tt>userID</tt> field.
--   
--   To decide the user ID to use for your application, consider the
--   following factors.
--   
--   <ul>
--   <li>The <tt>userID</tt> field must not contain any personally
--   identifiable information of the user, for example, name, personal
--   identification numbers, or other end user personal information.</li>
--   <li>If you want a user to start a conversation on one device and
--   continue on another device, use a user-specific identifier.</li>
--   <li>If you want the same user to be able to have two independent
--   conversations on two different devices, choose a device-specific
--   identifier.</li>
--   <li>A user can't have two independent conversations with two different
--   versions of the same bot. For example, a user can't have a
--   conversation with the PROD and BETA versions of the same bot. If you
--   anticipate that a user will need to have conversation with two
--   different versions, for example, while testing, include the bot alias
--   in the user ID to separate the two conversations.</li>
--   </ul>
--   
--   <a>$sel:contentType:PostContent'</a>, <a>postContent_contentType</a> -
--   You pass this value as the <tt>Content-Type</tt> HTTP header.
--   
--   Indicates the audio format or text. The header value must start with
--   one of the following prefixes:
--   
--   <ul>
--   <li>PCM format, audio data must be in little-endian byte
--   order.<ul><li>audio/l16; rate=16000; channels=1</li><li>audio/x-l16;
--   sample-rate=16000; channel-count=1</li><li>audio/lpcm;
--   sample-rate=8000; sample-size-bits=16; channel-count=1;
--   is-big-endian=false</li></ul></li>
--   <li>Opus format<ul><li>audio/x-cbr-opus-with-preamble;
--   preamble-size=0; bit-rate=256000;
--   frame-size-milliseconds=4</li></ul></li>
--   <li>Text format<ul><li>text/plain; charset=utf-8</li></ul></li>
--   </ul>
--   
--   <a>$sel:inputStream:PostContent'</a>, <a>postContent_inputStream</a> -
--   User input in PCM or Opus audio format or text format as described in
--   the <tt>Content-Type</tt> HTTP header.
--   
--   You can stream audio data to Amazon Lex or you can create a local
--   buffer that captures all of the audio data before sending. In general,
--   you get better performance if you stream audio data rather than
--   buffering the data locally.
newPostContent :: Text -> Text -> Text -> Text -> HashedBody -> PostContent

-- | <i>See:</i> <a>newPostContentResponse</a> smart constructor.
data PostContentResponse
PostContentResponse' :: Maybe DialogState -> Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Maybe MessageFormatType -> Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe (Sensitive Text) -> Int -> ResponseBody -> PostContentResponse

-- | Create a value of <a>PostContentResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dialogState:PostContentResponse'</a>,
--   <a>postContentResponse_dialogState</a> - Identifies the current state
--   of the user interaction. Amazon Lex returns one of the following
--   values as <tt>dialogState</tt>. The client can optionally use this
--   information to customize the user interface.
--   
--   <ul>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit the user's
--   intent. Consider the following examples:For example, a user might
--   utter an intent ("I want to order a pizza"). If Amazon Lex cannot
--   infer the user intent from this utterance, it will return this dialog
--   state.</li>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response.For example, Amazon Lex wants user confirmation before
--   fulfilling an intent. Instead of a simple "yes" or "no" response, a
--   user might respond with additional information. For example, "yes, but
--   make it a thick crust pizza" or "no, I want to order a drink." Amazon
--   Lex can process such additional information (in these examples, update
--   the crust type slot or change the intent from OrderPizza to
--   OrderDrink).</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting the value of a slot
--   for the current intent.For example, suppose that in the response
--   Amazon Lex sends this message: "What size pizza would you like?". A
--   user might reply with the slot value (e.g., "medium"). The user might
--   also provide additional information in the response (e.g., "medium
--   thick crust pizza"). Amazon Lex can process such additional
--   information appropriately.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function has
--   successfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the request.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user
--   failed.This can happen for various reasons, including that the user
--   does not provide an appropriate response to prompts from the service
--   (you can configure how many times Amazon Lex can prompt a user for
--   specific information), or if the Lambda function fails to fulfill the
--   intent.</li>
--   </ul>
--   
--   <a>$sel:sessionAttributes:PostContent'</a>,
--   <a>postContentResponse_sessionAttributes</a> - Map of key/value pairs
--   representing the session-specific context information.
--   
--   <a>$sel:encodedMessage:PostContentResponse'</a>,
--   <a>postContentResponse_encodedMessage</a> - The message to convey to
--   the user. The message can come from the bot's configuration or from a
--   Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> in its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
--   
--   The <tt>encodedMessage</tt> field is base-64 encoded. You must decode
--   the field before you can use the value.
--   
--   <a>$sel:contentType:PostContent'</a>,
--   <a>postContentResponse_contentType</a> - Content type as specified in
--   the <tt>Accept</tt> HTTP header in the request.
--   
--   <a>$sel:intentName:PostContentResponse'</a>,
--   <a>postContentResponse_intentName</a> - Current user intent that
--   Amazon Lex is aware of.
--   
--   <a>$sel:message:PostContentResponse'</a>,
--   <a>postContentResponse_message</a> - You can only use this field in
--   the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR,
--   and it-IT locales. In all other locales, the <tt>message</tt> field is
--   null. You should use the <tt>encodedMessage</tt> field instead.
--   
--   The message to convey to the user. The message can come from the bot's
--   configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> in its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
--   
--   <a>$sel:botVersion:PostContentResponse'</a>,
--   <a>postContentResponse_botVersion</a> - The version of the bot that
--   responded to the conversation. You can use this information to help
--   determine if one version of a bot is performing better than another
--   version.
--   
--   <a>$sel:sessionId:PostContentResponse'</a>,
--   <a>postContentResponse_sessionId</a> - The unique identifier for the
--   session.
--   
--   <a>$sel:messageFormat:PostContentResponse'</a>,
--   <a>postContentResponse_messageFormat</a> - The format of the response
--   message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
--   
--   <a>$sel:inputTranscript:PostContentResponse'</a>,
--   <a>postContentResponse_inputTranscript</a> - The text used to process
--   the request.
--   
--   You can use this field only in the de-DE, en-AU, en-GB, en-US, es-419,
--   es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales,
--   the <tt>inputTranscript</tt> field is null. You should use the
--   <tt>encodedInputTranscript</tt> field instead.
--   
--   If the input was an audio stream, the <tt>inputTranscript</tt> field
--   contains the text extracted from the audio stream. This is the text
--   that is actually processed to recognize intents and slot values. You
--   can use this information to determine if Amazon Lex is correctly
--   processing the audio that you send.
--   
--   <a>$sel:encodedInputTranscript:PostContentResponse'</a>,
--   <a>postContentResponse_encodedInputTranscript</a> - The text used to
--   process the request.
--   
--   If the input was an audio stream, the <tt>encodedInputTranscript</tt>
--   field contains the text extracted from the audio stream. This is the
--   text that is actually processed to recognize intents and slot values.
--   You can use this information to determine if Amazon Lex is correctly
--   processing the audio that you send.
--   
--   The <tt>encodedInputTranscript</tt> field is base-64 encoded. You must
--   decode the field before you can use the value.
--   
--   <a>$sel:slots:PostContentResponse'</a>,
--   <a>postContentResponse_slots</a> - Map of zero or more intent slots
--   (name/value pairs) Amazon Lex detected from the user input during the
--   conversation. The field is base-64 encoded.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt>, the default is
--   <tt>ORIGINAL_VALUE</tt>.
--   
--   <a>$sel:nluIntentConfidence:PostContentResponse'</a>,
--   <a>postContentResponse_nluIntentConfidence</a> - Provides a score that
--   indicates how confident Amazon Lex is that the returned intent is the
--   one that matches the user's intent. The score is between 0.0 and 1.0.
--   
--   The score is a relative score, not an absolute score. The score may
--   change based on improvements to Amazon Lex.
--   
--   <a>$sel:sentimentResponse:PostContentResponse'</a>,
--   <a>postContentResponse_sentimentResponse</a> - The sentiment expressed
--   in an utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field contains the result of the analysis.
--   
--   <a>$sel:slotToElicit:PostContentResponse'</a>,
--   <a>postContentResponse_slotToElicit</a> - If the <tt>dialogState</tt>
--   value is <tt>ElicitSlot</tt>, returns the name of the slot for which
--   Amazon Lex is eliciting a value.
--   
--   <a>$sel:alternativeIntents:PostContentResponse'</a>,
--   <a>postContentResponse_alternativeIntents</a> - One to four
--   alternative intents that may be applicable to the user's intent.
--   
--   Each alternative includes a score that indicates how confident Amazon
--   Lex is that the intent matches the user's intent. The intents are
--   sorted by the confidence score.
--   
--   <a>$sel:activeContexts:PostContent'</a>,
--   <a>postContentResponse_activeContexts</a> - A list of active contexts
--   for the session. A context can be set when an intent is fulfilled or
--   by calling the <tt>PostContent</tt>, <tt>PostText</tt>, or
--   <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
--   
--   <a>$sel:httpStatus:PostContentResponse'</a>,
--   <a>postContentResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:audioStream:PostContentResponse'</a>,
--   <a>postContentResponse_audioStream</a> - The prompt (or statement) to
--   convey to the user. This is based on the bot configuration and
--   context. For example, if Amazon Lex did not understand the user
--   intent, it sends the <tt>clarificationPrompt</tt> configured for the
--   bot. If the intent requires confirmation before taking the fulfillment
--   action, it sends the <tt>confirmationPrompt</tt>. Another example:
--   Suppose that the Lambda function successfully fulfilled the intent,
--   and sent a message to convey to the user. Then Amazon Lex sends that
--   message in the response.
newPostContentResponse :: Int -> ResponseBody -> PostContentResponse

-- | <i>See:</i> <a>newGetSession</a> smart constructor.
data GetSession
GetSession' :: Maybe Text -> Text -> Text -> Text -> GetSession

-- | Create a value of <a>GetSession</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:checkpointLabelFilter:GetSession'</a>,
--   <a>getSession_checkpointLabelFilter</a> - A string used to filter the
--   intents returned in the <tt>recentIntentSummaryView</tt> structure.
--   
--   When you specify a filter, only intents with their
--   <tt>checkpointLabel</tt> field set to that string are returned.
--   
--   <a>$sel:botName:GetSession'</a>, <a>getSession_botName</a> - The name
--   of the bot that contains the session data.
--   
--   <a>$sel:botAlias:GetSession'</a>, <a>getSession_botAlias</a> - The
--   alias in use for the bot that contains the session data.
--   
--   <a>$sel:userId:GetSession'</a>, <a>getSession_userId</a> - The ID of
--   the client application user. Amazon Lex uses this to identify a user's
--   conversation with your bot.
newGetSession :: Text -> Text -> Text -> GetSession

-- | <i>See:</i> <a>newGetSessionResponse</a> smart constructor.
data GetSessionResponse
GetSessionResponse' :: Maybe (Sensitive (HashMap Text Text)) -> Maybe DialogAction -> Maybe Text -> Maybe [IntentSummary] -> Maybe (Sensitive [ActiveContext]) -> Int -> GetSessionResponse

-- | Create a value of <a>GetSessionResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sessionAttributes:GetSessionResponse'</a>,
--   <a>getSessionResponse_sessionAttributes</a> - Map of key/value pairs
--   representing the session-specific context information. It contains
--   application information passed between Amazon Lex and a client
--   application.
--   
--   <a>$sel:dialogAction:GetSessionResponse'</a>,
--   <a>getSessionResponse_dialogAction</a> - Describes the current state
--   of the bot.
--   
--   <a>$sel:sessionId:GetSessionResponse'</a>,
--   <a>getSessionResponse_sessionId</a> - A unique identifier for the
--   session.
--   
--   <a>$sel:recentIntentSummaryView:GetSessionResponse'</a>,
--   <a>getSessionResponse_recentIntentSummaryView</a> - An array of
--   information about the intents used in the session. The array can
--   contain a maximum of three summaries. If more than three intents are
--   used in the session, the <tt>recentIntentSummaryView</tt> operation
--   contains information about the last three intents used.
--   
--   If you set the <tt>checkpointLabelFilter</tt> parameter in the
--   request, the array contains only the intents with the specified label.
--   
--   <a>$sel:activeContexts:GetSessionResponse'</a>,
--   <a>getSessionResponse_activeContexts</a> - A list of active contexts
--   for the session. A context can be set when an intent is fulfilled or
--   by calling the <tt>PostContent</tt>, <tt>PostText</tt>, or
--   <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
--   
--   <a>$sel:httpStatus:GetSessionResponse'</a>,
--   <a>getSessionResponse_httpStatus</a> - The response's http status
--   code.
newGetSessionResponse :: Int -> GetSessionResponse

-- | <i>See:</i> <a>newPostText</a> smart constructor.
data PostText
PostText' :: Maybe (Sensitive (HashMap Text Text)) -> Maybe (Sensitive (HashMap Text Text)) -> Maybe (Sensitive [ActiveContext]) -> Text -> Text -> Text -> Sensitive Text -> PostText

-- | Create a value of <a>PostText</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sessionAttributes:PostText'</a>,
--   <a>postText_sessionAttributes</a> - Application-specific information
--   passed between Amazon Lex and a client application.
--   
--   For more information, see <a>Setting Session Attributes</a>.
--   
--   <a>$sel:requestAttributes:PostText'</a>,
--   <a>postText_requestAttributes</a> - Request-specific information
--   passed between Amazon Lex and a client application.
--   
--   The namespace <tt>x-amz-lex:</tt> is reserved for special attributes.
--   Don't create any request attributes with the prefix
--   <tt>x-amz-lex:</tt>.
--   
--   For more information, see <a>Setting Request Attributes</a>.
--   
--   <a>$sel:activeContexts:PostText'</a>, <a>postText_activeContexts</a> -
--   A list of contexts active for the request. A context can be activated
--   when a previous intent is fulfilled, or by including the context in
--   the request,
--   
--   If you don't specify a list of contexts, Amazon Lex will use the
--   current list of contexts for the session. If you specify an empty
--   list, all contexts for the session are cleared.
--   
--   <a>$sel:botName:PostText'</a>, <a>postText_botName</a> - The name of
--   the Amazon Lex bot.
--   
--   <a>$sel:botAlias:PostText'</a>, <a>postText_botAlias</a> - The alias
--   of the Amazon Lex bot.
--   
--   <a>$sel:userId:PostText'</a>, <a>postText_userId</a> - The ID of the
--   client application user. Amazon Lex uses this to identify a user's
--   conversation with your bot. At runtime, each request must contain the
--   <tt>userID</tt> field.
--   
--   To decide the user ID to use for your application, consider the
--   following factors.
--   
--   <ul>
--   <li>The <tt>userID</tt> field must not contain any personally
--   identifiable information of the user, for example, name, personal
--   identification numbers, or other end user personal information.</li>
--   <li>If you want a user to start a conversation on one device and
--   continue on another device, use a user-specific identifier.</li>
--   <li>If you want the same user to be able to have two independent
--   conversations on two different devices, choose a device-specific
--   identifier.</li>
--   <li>A user can't have two independent conversations with two different
--   versions of the same bot. For example, a user can't have a
--   conversation with the PROD and BETA versions of the same bot. If you
--   anticipate that a user will need to have conversation with two
--   different versions, for example, while testing, include the bot alias
--   in the user ID to separate the two conversations.</li>
--   </ul>
--   
--   <a>$sel:inputText:PostText'</a>, <a>postText_inputText</a> - The text
--   that the user entered (Amazon Lex interprets this text).
newPostText :: Text -> Text -> Text -> Text -> PostText

-- | <i>See:</i> <a>newPostTextResponse</a> smart constructor.
data PostTextResponse
PostTextResponse' :: Maybe ResponseCard -> Maybe DialogState -> Maybe (Sensitive (HashMap Text Text)) -> Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Maybe MessageFormatType -> Maybe (Sensitive (HashMap Text Text)) -> Maybe IntentConfidence -> Maybe SentimentResponse -> Maybe Text -> Maybe [PredictedIntent] -> Maybe (Sensitive [ActiveContext]) -> Int -> PostTextResponse

-- | Create a value of <a>PostTextResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responseCard:PostTextResponse'</a>,
--   <a>postTextResponse_responseCard</a> - Represents the options that the
--   user has to respond to the current prompt. Response Card can come from
--   the bot configuration (in the Amazon Lex console, choose the settings
--   button next to a slot) or from a code hook (Lambda function).
--   
--   <a>$sel:dialogState:PostTextResponse'</a>,
--   <a>postTextResponse_dialogState</a> - Identifies the current state of
--   the user interaction. Amazon Lex returns one of the following values
--   as <tt>dialogState</tt>. The client can optionally use this
--   information to customize the user interface.
--   
--   <ul>
--   <li><tt>ElicitIntent</tt> - Amazon Lex wants to elicit user intent.For
--   example, a user might utter an intent ("I want to order a pizza"). If
--   Amazon Lex cannot infer the user intent from this utterance, it will
--   return this dialogState.</li>
--   <li><tt>ConfirmIntent</tt> - Amazon Lex is expecting a "yes" or "no"
--   response.For example, Amazon Lex wants user confirmation before
--   fulfilling an intent.Instead of a simple "yes" or "no," a user might
--   respond with additional information. For example, "yes, but make it
--   thick crust pizza" or "no, I want to order a drink". Amazon Lex can
--   process such additional information (in these examples, update the
--   crust type slot value, or change intent from OrderPizza to
--   OrderDrink).</li>
--   <li><tt>ElicitSlot</tt> - Amazon Lex is expecting a slot value for the
--   current intent.For example, suppose that in the response Amazon Lex
--   sends this message: "What size pizza would you like?". A user might
--   reply with the slot value (e.g., "medium"). The user might also
--   provide additional information in the response (e.g., "medium thick
--   crust pizza"). Amazon Lex can process such additional information
--   appropriately.</li>
--   <li><tt>Fulfilled</tt> - Conveys that the Lambda function configured
--   for the intent has successfully fulfilled the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - Conveys that the client has to
--   fulfill the intent.</li>
--   <li><tt>Failed</tt> - Conveys that the conversation with the user
--   failed.This can happen for various reasons including that the user did
--   not provide an appropriate response to prompts from the service (you
--   can configure how many times Amazon Lex can prompt a user for specific
--   information), or the Lambda function failed to fulfill the
--   intent.</li>
--   </ul>
--   
--   <a>$sel:sessionAttributes:PostText'</a>,
--   <a>postTextResponse_sessionAttributes</a> - A map of key-value pairs
--   representing the session-specific context information.
--   
--   <a>$sel:intentName:PostTextResponse'</a>,
--   <a>postTextResponse_intentName</a> - The current user intent that
--   Amazon Lex is aware of.
--   
--   <a>$sel:message:PostTextResponse'</a>, <a>postTextResponse_message</a>
--   - The message to convey to the user. The message can come from the
--   bot's configuration or from a Lambda function.
--   
--   If the intent is not configured with a Lambda function, or if the
--   Lambda function returned <tt>Delegate</tt> as the
--   <tt>dialogAction.type</tt> its response, Amazon Lex decides on the
--   next course of action and selects an appropriate message from the
--   bot's configuration based on the current interaction context. For
--   example, if Amazon Lex isn't able to understand user input, it uses a
--   clarification prompt message.
--   
--   When you create an intent you can assign messages to groups. When
--   messages are assigned to groups Amazon Lex returns one message from
--   each group in the response. The message field is an escaped JSON
--   string containing the messages. For more information about the
--   structure of the JSON string returned, see msg-prompts-formats.
--   
--   If the Lambda function returns a message, Amazon Lex passes it to the
--   client in its response.
--   
--   <a>$sel:botVersion:PostTextResponse'</a>,
--   <a>postTextResponse_botVersion</a> - The version of the bot that
--   responded to the conversation. You can use this information to help
--   determine if one version of a bot is performing better than another
--   version.
--   
--   <a>$sel:sessionId:PostTextResponse'</a>,
--   <a>postTextResponse_sessionId</a> - A unique identifier for the
--   session.
--   
--   <a>$sel:messageFormat:PostTextResponse'</a>,
--   <a>postTextResponse_messageFormat</a> - The format of the response
--   message. One of the following values:
--   
--   <ul>
--   <li><tt>PlainText</tt> - The message contains plain UTF-8 text.</li>
--   <li><tt>CustomPayload</tt> - The message is a custom format defined by
--   the Lambda function.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages from the groups that messages were
--   assigned to when the intent was created.</li>
--   </ul>
--   
--   <a>$sel:slots:PostTextResponse'</a>, <a>postTextResponse_slots</a> -
--   The intent slots that Amazon Lex detected from the user input in the
--   conversation.
--   
--   Amazon Lex creates a resolution list containing likely values for a
--   slot. The value that it returns is determined by the
--   <tt>valueSelectionStrategy</tt> selected when the slot type was
--   created or updated. If <tt>valueSelectionStrategy</tt> is set to
--   <tt>ORIGINAL_VALUE</tt>, the value provided by the user is returned,
--   if the user value is similar to the slot values. If
--   <tt>valueSelectionStrategy</tt> is set to <tt>TOP_RESOLUTION</tt>
--   Amazon Lex returns the first value in the resolution list or, if there
--   is no resolution list, null. If you don't specify a
--   <tt>valueSelectionStrategy</tt>, the default is
--   <tt>ORIGINAL_VALUE</tt>.
--   
--   <a>$sel:nluIntentConfidence:PostTextResponse'</a>,
--   <a>postTextResponse_nluIntentConfidence</a> - Provides a score that
--   indicates how confident Amazon Lex is that the returned intent is the
--   one that matches the user's intent. The score is between 0.0 and 1.0.
--   For more information, see <a>Confidence Scores</a>.
--   
--   The score is a relative score, not an absolute score. The score may
--   change based on improvements to Amazon Lex.
--   
--   <a>$sel:sentimentResponse:PostTextResponse'</a>,
--   <a>postTextResponse_sentimentResponse</a> - The sentiment expressed in
--   and utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field contains the result of the analysis.
--   
--   <a>$sel:slotToElicit:PostTextResponse'</a>,
--   <a>postTextResponse_slotToElicit</a> - If the <tt>dialogState</tt>
--   value is <tt>ElicitSlot</tt>, returns the name of the slot for which
--   Amazon Lex is eliciting a value.
--   
--   <a>$sel:alternativeIntents:PostTextResponse'</a>,
--   <a>postTextResponse_alternativeIntents</a> - One to four alternative
--   intents that may be applicable to the user's intent.
--   
--   Each alternative includes a score that indicates how confident Amazon
--   Lex is that the intent matches the user's intent. The intents are
--   sorted by the confidence score.
--   
--   <a>$sel:activeContexts:PostText'</a>,
--   <a>postTextResponse_activeContexts</a> - A list of active contexts for
--   the session. A context can be set when an intent is fulfilled or by
--   calling the <tt>PostContent</tt>, <tt>PostText</tt>, or
--   <tt>PutSession</tt> operation.
--   
--   You can use a context to control the intents that can follow up an
--   intent, or to modify the operation of your application.
--   
--   <a>$sel:httpStatus:PostTextResponse'</a>,
--   <a>postTextResponse_httpStatus</a> - The response's http status code.
newPostTextResponse :: Int -> PostTextResponse
newtype ConfirmationStatus
ConfirmationStatus' :: Text -> ConfirmationStatus
[fromConfirmationStatus] :: ConfirmationStatus -> Text
pattern ConfirmationStatus_Confirmed :: ConfirmationStatus
pattern ConfirmationStatus_Denied :: ConfirmationStatus
pattern ConfirmationStatus_None :: ConfirmationStatus
newtype ContentType
ContentType' :: Text -> ContentType
[fromContentType] :: ContentType -> Text
pattern ContentType_Application_vnd_amazonaws_card_generic :: ContentType
newtype DialogActionType
DialogActionType' :: Text -> DialogActionType
[fromDialogActionType] :: DialogActionType -> Text
pattern DialogActionType_Close :: DialogActionType
pattern DialogActionType_ConfirmIntent :: DialogActionType
pattern DialogActionType_Delegate :: DialogActionType
pattern DialogActionType_ElicitIntent :: DialogActionType
pattern DialogActionType_ElicitSlot :: DialogActionType
newtype DialogState
DialogState' :: Text -> DialogState
[fromDialogState] :: DialogState -> Text
pattern DialogState_ConfirmIntent :: DialogState
pattern DialogState_ElicitIntent :: DialogState
pattern DialogState_ElicitSlot :: DialogState
pattern DialogState_Failed :: DialogState
pattern DialogState_Fulfilled :: DialogState
pattern DialogState_ReadyForFulfillment :: DialogState
newtype FulfillmentState
FulfillmentState' :: Text -> FulfillmentState
[fromFulfillmentState] :: FulfillmentState -> Text
pattern FulfillmentState_Failed :: FulfillmentState
pattern FulfillmentState_Fulfilled :: FulfillmentState
pattern FulfillmentState_ReadyForFulfillment :: FulfillmentState
newtype MessageFormatType
MessageFormatType' :: Text -> MessageFormatType
[fromMessageFormatType] :: MessageFormatType -> Text
pattern MessageFormatType_Composite :: MessageFormatType
pattern MessageFormatType_CustomPayload :: MessageFormatType
pattern MessageFormatType_PlainText :: MessageFormatType
pattern MessageFormatType_SSML :: MessageFormatType

-- | A context is a variable that contains information about the current
--   state of the conversation between a user and Amazon Lex. Context can
--   be set automatically by Amazon Lex when an intent is fulfilled, or it
--   can be set at runtime using the <tt>PutContent</tt>, <tt>PutText</tt>,
--   or <tt>PutSession</tt> operation.
--   
--   <i>See:</i> <a>newActiveContext</a> smart constructor.
data ActiveContext
ActiveContext' :: Text -> ActiveContextTimeToLive -> HashMap Text (Sensitive Text) -> ActiveContext

-- | Create a value of <a>ActiveContext</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:ActiveContext'</a>, <a>activeContext_name</a> - The name
--   of the context.
--   
--   <a>$sel:timeToLive:ActiveContext'</a>, <a>activeContext_timeToLive</a>
--   - The length of time or number of turns that a context remains active.
--   
--   <a>$sel:parameters:ActiveContext'</a>, <a>activeContext_parameters</a>
--   - State variables for the current context. You can use these values as
--   default values for slots in subsequent events.
newActiveContext :: Text -> ActiveContextTimeToLive -> ActiveContext

-- | The length of time or number of turns that a context remains active.
--   
--   <i>See:</i> <a>newActiveContextTimeToLive</a> smart constructor.
data ActiveContextTimeToLive
ActiveContextTimeToLive' :: Maybe Natural -> Maybe Natural -> ActiveContextTimeToLive

-- | Create a value of <a>ActiveContextTimeToLive</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeToLiveInSeconds:ActiveContextTimeToLive'</a>,
--   <a>activeContextTimeToLive_timeToLiveInSeconds</a> - The number of
--   seconds that the context should be active after it is first sent in a
--   <tt>PostContent</tt> or <tt>PostText</tt> response. You can set the
--   value between 5 and 86,400 seconds (24 hours).
--   
--   <a>$sel:turnsToLive:ActiveContextTimeToLive'</a>,
--   <a>activeContextTimeToLive_turnsToLive</a> - The number of
--   conversation turns that the context should be active. A conversation
--   turn is one <tt>PostContent</tt> or <tt>PostText</tt> request and the
--   corresponding response from Amazon Lex.
newActiveContextTimeToLive :: ActiveContextTimeToLive

-- | Represents an option to be shown on the client platform (Facebook,
--   Slack, etc.)
--   
--   <i>See:</i> <a>newButton</a> smart constructor.
data Button
Button' :: Text -> Text -> Button

-- | Create a value of <a>Button</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:text:Button'</a>, <a>button_text</a> - Text that is visible to
--   the user on the button.
--   
--   <a>$sel:value:Button'</a>, <a>button_value</a> - The value sent to
--   Amazon Lex when a user chooses the button. For example, consider
--   button text "NYC." When the user chooses the button, the value sent
--   can be "New York City."
newButton :: Text -> Text -> Button

-- | Describes the next action that the bot should take in its interaction
--   with the user and provides information about the context in which the
--   action takes place. Use the <tt>DialogAction</tt> data type to set the
--   interaction to a specific state, or to return the interaction to a
--   previous state.
--   
--   <i>See:</i> <a>newDialogAction</a> smart constructor.
data DialogAction
DialogAction' :: Maybe Text -> Maybe (Sensitive Text) -> Maybe MessageFormatType -> Maybe FulfillmentState -> Maybe (Sensitive (HashMap Text Text)) -> Maybe Text -> DialogActionType -> DialogAction

-- | Create a value of <a>DialogAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:intentName:DialogAction'</a>, <a>dialogAction_intentName</a> -
--   The name of the intent.
--   
--   <a>$sel:message:DialogAction'</a>, <a>dialogAction_message</a> - The
--   message that should be shown to the user. If you don't specify a
--   message, Amazon Lex will use the message configured for the intent.
--   
--   <a>$sel:messageFormat:DialogAction'</a>,
--   <a>dialogAction_messageFormat</a> - - <tt>PlainText</tt> - The message
--   contains plain UTF-8 text.
--   
--   <ul>
--   <li><tt>CustomPayload</tt> - The message is a custom format for the
--   client.</li>
--   <li><tt>SSML</tt> - The message contains text formatted for voice
--   output.</li>
--   <li><tt>Composite</tt> - The message contains an escaped JSON object
--   containing one or more messages. For more information, see <a>Message
--   Groups</a>.</li>
--   </ul>
--   
--   <a>$sel:fulfillmentState:DialogAction'</a>,
--   <a>dialogAction_fulfillmentState</a> - The fulfillment state of the
--   intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
--   
--   <a>$sel:slots:DialogAction'</a>, <a>dialogAction_slots</a> - Map of
--   the slots that have been gathered and their values.
--   
--   <a>$sel:slotToElicit:DialogAction'</a>,
--   <a>dialogAction_slotToElicit</a> - The name of the slot that should be
--   elicited from the user.
--   
--   <a>$sel:type':DialogAction'</a>, <a>dialogAction_type</a> - The next
--   action that the bot should take in its interaction with the user. The
--   possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>Delegate</tt> - The next action is determined by Amazon
--   Lex.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
newDialogAction :: DialogActionType -> DialogAction

-- | Represents an option rendered to the user when a prompt is shown. It
--   could be an image, a button, a link, or text.
--   
--   <i>See:</i> <a>newGenericAttachment</a> smart constructor.
data GenericAttachment
GenericAttachment' :: Maybe Text -> Maybe [Button] -> Maybe Text -> Maybe Text -> Maybe Text -> GenericAttachment

-- | Create a value of <a>GenericAttachment</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:title:GenericAttachment'</a>, <a>genericAttachment_title</a> -
--   The title of the option.
--   
--   <a>$sel:buttons:GenericAttachment'</a>,
--   <a>genericAttachment_buttons</a> - The list of options to show to the
--   user.
--   
--   <a>$sel:attachmentLinkUrl:GenericAttachment'</a>,
--   <a>genericAttachment_attachmentLinkUrl</a> - The URL of an attachment
--   to the response card.
--   
--   <a>$sel:imageUrl:GenericAttachment'</a>,
--   <a>genericAttachment_imageUrl</a> - The URL of an image that is
--   displayed to the user.
--   
--   <a>$sel:subTitle:GenericAttachment'</a>,
--   <a>genericAttachment_subTitle</a> - The subtitle shown below the
--   title.
newGenericAttachment :: GenericAttachment

-- | Provides a score that indicates the confidence that Amazon Lex has
--   that an intent is the one that satisfies the user's intent.
--   
--   <i>See:</i> <a>newIntentConfidence</a> smart constructor.
data IntentConfidence
IntentConfidence' :: Maybe Double -> IntentConfidence

-- | Create a value of <a>IntentConfidence</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:score:IntentConfidence'</a>, <a>intentConfidence_score</a> - A
--   score that indicates how confident Amazon Lex is that an intent
--   satisfies the user's intent. Ranges between 0.00 and 1.00. Higher
--   scores indicate higher confidence.
newIntentConfidence :: IntentConfidence

-- | Provides information about the state of an intent. You can use this
--   information to get the current state of an intent so that you can
--   process the intent, or so that you can return the intent to its
--   previous state.
--   
--   <i>See:</i> <a>newIntentSummary</a> smart constructor.
data IntentSummary
IntentSummary' :: Maybe Text -> Maybe FulfillmentState -> Maybe (Sensitive (HashMap Text Text)) -> Maybe Text -> Maybe Text -> Maybe ConfirmationStatus -> DialogActionType -> IntentSummary

-- | Create a value of <a>IntentSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:intentName:IntentSummary'</a>, <a>intentSummary_intentName</a>
--   - The name of the intent.
--   
--   <a>$sel:fulfillmentState:IntentSummary'</a>,
--   <a>intentSummary_fulfillmentState</a> - The fulfillment state of the
--   intent. The possible values are:
--   
--   <ul>
--   <li><tt>Failed</tt> - The Lambda function associated with the intent
--   failed to fulfill the intent.</li>
--   <li><tt>Fulfilled</tt> - The intent has fulfilled by the Lambda
--   function associated with the intent.</li>
--   <li><tt>ReadyForFulfillment</tt> - All of the information necessary
--   for the intent is present and the intent ready to be fulfilled by the
--   client application.</li>
--   </ul>
--   
--   <a>$sel:slots:IntentSummary'</a>, <a>intentSummary_slots</a> - Map of
--   the slots that have been gathered and their values.
--   
--   <a>$sel:checkpointLabel:IntentSummary'</a>,
--   <a>intentSummary_checkpointLabel</a> - A user-defined label that
--   identifies a particular intent. You can use this label to return to a
--   previous intent.
--   
--   Use the <tt>checkpointLabelFilter</tt> parameter of the
--   <tt>GetSessionRequest</tt> operation to filter the intents returned by
--   the operation to those with only the specified label.
--   
--   <a>$sel:slotToElicit:IntentSummary'</a>,
--   <a>intentSummary_slotToElicit</a> - The next slot to elicit from the
--   user. If there is not slot to elicit, the field is blank.
--   
--   <a>$sel:confirmationStatus:IntentSummary'</a>,
--   <a>intentSummary_confirmationStatus</a> - The status of the intent
--   after the user responds to the confirmation prompt. If the user
--   confirms the intent, Amazon Lex sets this field to <tt>Confirmed</tt>.
--   If the user denies the intent, Amazon Lex sets this value to
--   <tt>Denied</tt>. The possible values are:
--   
--   <ul>
--   <li><tt>Confirmed</tt> - The user has responded "Yes" to the
--   confirmation prompt, confirming that the intent is complete and that
--   it is ready to be fulfilled.</li>
--   <li><tt>Denied</tt> - The user has responded "No" to the confirmation
--   prompt.</li>
--   <li><tt>None</tt> - The user has never been prompted for confirmation;
--   or, the user was prompted but did not confirm or deny the prompt.</li>
--   </ul>
--   
--   <a>$sel:dialogActionType:IntentSummary'</a>,
--   <a>intentSummary_dialogActionType</a> - The next action that the bot
--   should take in its interaction with the user. The possible values are:
--   
--   <ul>
--   <li><tt>ConfirmIntent</tt> - The next action is asking the user if the
--   intent is complete and ready to be fulfilled. This is a yes/no
--   question such as "Place the order?"</li>
--   <li><tt>Close</tt> - Indicates that the there will not be a response
--   from the user. For example, the statement "Your order has been placed"
--   does not require a response.</li>
--   <li><tt>ElicitIntent</tt> - The next action is to determine the intent
--   that the user wants to fulfill.</li>
--   <li><tt>ElicitSlot</tt> - The next action is to elicit a slot value
--   from the user.</li>
--   </ul>
newIntentSummary :: DialogActionType -> IntentSummary

-- | An intent that Amazon Lex suggests satisfies the user's intent.
--   Includes the name of the intent, the confidence that Amazon Lex has
--   that the user's intent is satisfied, and the slots defined for the
--   intent.
--   
--   <i>See:</i> <a>newPredictedIntent</a> smart constructor.
data PredictedIntent
PredictedIntent' :: Maybe Text -> Maybe (Sensitive (HashMap Text Text)) -> Maybe IntentConfidence -> PredictedIntent

-- | Create a value of <a>PredictedIntent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:intentName:PredictedIntent'</a>,
--   <a>predictedIntent_intentName</a> - The name of the intent that Amazon
--   Lex suggests satisfies the user's intent.
--   
--   <a>$sel:slots:PredictedIntent'</a>, <a>predictedIntent_slots</a> - The
--   slot and slot values associated with the predicted intent.
--   
--   <a>$sel:nluIntentConfidence:PredictedIntent'</a>,
--   <a>predictedIntent_nluIntentConfidence</a> - Indicates how confident
--   Amazon Lex is that an intent satisfies the user's intent.
newPredictedIntent :: PredictedIntent

-- | If you configure a response card when creating your bots, Amazon Lex
--   substitutes the session attributes and slot values that are available,
--   and then returns it. The response card can also come from a Lambda
--   function ( <tt>dialogCodeHook</tt> and <tt>fulfillmentActivity</tt> on
--   an intent).
--   
--   <i>See:</i> <a>newResponseCard</a> smart constructor.
data ResponseCard
ResponseCard' :: Maybe ContentType -> Maybe [GenericAttachment] -> Maybe Text -> ResponseCard

-- | Create a value of <a>ResponseCard</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:contentType:ResponseCard'</a>, <a>responseCard_contentType</a>
--   - The content type of the response.
--   
--   <a>$sel:genericAttachments:ResponseCard'</a>,
--   <a>responseCard_genericAttachments</a> - An array of attachment
--   objects representing options.
--   
--   <a>$sel:version:ResponseCard'</a>, <a>responseCard_version</a> - The
--   version of the response card format.
newResponseCard :: ResponseCard

-- | The sentiment expressed in an utterance.
--   
--   When the bot is configured to send utterances to Amazon Comprehend for
--   sentiment analysis, this field structure contains the result of the
--   analysis.
--   
--   <i>See:</i> <a>newSentimentResponse</a> smart constructor.
data SentimentResponse
SentimentResponse' :: Maybe Text -> Maybe Text -> SentimentResponse

-- | Create a value of <a>SentimentResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sentimentScore:SentimentResponse'</a>,
--   <a>sentimentResponse_sentimentScore</a> - The likelihood that the
--   sentiment was correctly inferred.
--   
--   <a>$sel:sentimentLabel:SentimentResponse'</a>,
--   <a>sentimentResponse_sentimentLabel</a> - The inferred sentiment that
--   Amazon Comprehend has the highest confidence in.
newSentimentResponse :: SentimentResponse
