-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package amazonka-athenaZSamazonka-athena
@version 1.6.1


module Network.AWS.Athena.Types.Column

-- | Contains metadata for a column in a table.
--   
--   <i>See:</i> <a>newColumn</a> smart constructor.
data Column
Column' :: Maybe Text -> Maybe Text -> Text -> Column

-- | Optional information about the column.
[$sel:comment:Column'] :: Column -> Maybe Text

-- | The data type of the column.
[$sel:type':Column'] :: Column -> Maybe Text

-- | The name of the column.
[$sel:name:Column'] :: Column -> Text

-- | Create a value of <a>Column</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:comment:Column'</a>, <a>column_comment</a> - Optional
--   information about the column.
--   
--   <a>$sel:type':Column'</a>, <a>column_type</a> - The data type of the
--   column.
--   
--   <a>$sel:name:Column'</a>, <a>column_name</a> - The name of the column.
newColumn :: Text -> Column

-- | Optional information about the column.
column_comment :: Lens' Column (Maybe Text)

-- | The data type of the column.
column_type :: Lens' Column (Maybe Text)

-- | The name of the column.
column_name :: Lens' Column Text
instance GHC.Generics.Generic Network.AWS.Athena.Types.Column.Column
instance GHC.Show.Show Network.AWS.Athena.Types.Column.Column
instance GHC.Read.Read Network.AWS.Athena.Types.Column.Column
instance GHC.Classes.Eq Network.AWS.Athena.Types.Column.Column
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.Column.Column
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.Column.Column
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.Column.Column


module Network.AWS.Athena.Types.ColumnNullable
newtype ColumnNullable
ColumnNullable' :: Text -> ColumnNullable
[fromColumnNullable] :: ColumnNullable -> Text
pattern ColumnNullable_NOT_NULL :: ColumnNullable
pattern ColumnNullable_NULLABLE :: ColumnNullable
pattern ColumnNullable_UNKNOWN :: ColumnNullable
instance Network.AWS.Data.XML.ToXML Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Network.AWS.Data.XML.FromXML Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Network.AWS.Data.Headers.ToHeader Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Network.AWS.Data.Log.ToLog Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Network.AWS.Data.Text.ToText Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Network.AWS.Data.Text.FromText Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance GHC.Generics.Generic Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance GHC.Classes.Ord Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance GHC.Classes.Eq Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance GHC.Read.Read Network.AWS.Athena.Types.ColumnNullable.ColumnNullable
instance GHC.Show.Show Network.AWS.Athena.Types.ColumnNullable.ColumnNullable


module Network.AWS.Athena.Types.ColumnInfo

-- | Information about the columns in a query execution result.
--   
--   <i>See:</i> <a>newColumnInfo</a> smart constructor.
data ColumnInfo
ColumnInfo' :: Maybe Text -> Maybe Text -> Maybe Int -> Maybe Bool -> Maybe ColumnNullable -> Maybe Text -> Maybe Text -> Maybe Int -> Text -> Text -> ColumnInfo

-- | The catalog to which the query results belong.
[$sel:catalogName:ColumnInfo'] :: ColumnInfo -> Maybe Text

-- | The table name for the query results.
[$sel:tableName:ColumnInfo'] :: ColumnInfo -> Maybe Text

-- | For <tt>DECIMAL</tt> data types, specifies the total number of digits,
--   up to 38. For performance reasons, we recommend up to 18 digits.
[$sel:precision:ColumnInfo'] :: ColumnInfo -> Maybe Int

-- | Indicates whether values in the column are case-sensitive.
[$sel:caseSensitive:ColumnInfo'] :: ColumnInfo -> Maybe Bool

-- | Indicates the column's nullable status.
[$sel:nullable:ColumnInfo'] :: ColumnInfo -> Maybe ColumnNullable

-- | A column label.
[$sel:label:ColumnInfo'] :: ColumnInfo -> Maybe Text

-- | The schema name (database name) to which the query results belong.
[$sel:schemaName:ColumnInfo'] :: ColumnInfo -> Maybe Text

-- | For <tt>DECIMAL</tt> data types, specifies the total number of digits
--   in the fractional part of the value. Defaults to 0.
[$sel:scale:ColumnInfo'] :: ColumnInfo -> Maybe Int

-- | The name of the column.
[$sel:name:ColumnInfo'] :: ColumnInfo -> Text

-- | The data type of the column.
[$sel:type':ColumnInfo'] :: ColumnInfo -> Text

-- | Create a value of <a>ColumnInfo</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogName:ColumnInfo'</a>, <a>columnInfo_catalogName</a> -
--   The catalog to which the query results belong.
--   
--   <a>$sel:tableName:ColumnInfo'</a>, <a>columnInfo_tableName</a> - The
--   table name for the query results.
--   
--   <a>$sel:precision:ColumnInfo'</a>, <a>columnInfo_precision</a> - For
--   <tt>DECIMAL</tt> data types, specifies the total number of digits, up
--   to 38. For performance reasons, we recommend up to 18 digits.
--   
--   <a>$sel:caseSensitive:ColumnInfo'</a>, <a>columnInfo_caseSensitive</a>
--   - Indicates whether values in the column are case-sensitive.
--   
--   <a>$sel:nullable:ColumnInfo'</a>, <a>columnInfo_nullable</a> -
--   Indicates the column's nullable status.
--   
--   <a>$sel:label:ColumnInfo'</a>, <a>columnInfo_label</a> - A column
--   label.
--   
--   <a>$sel:schemaName:ColumnInfo'</a>, <a>columnInfo_schemaName</a> - The
--   schema name (database name) to which the query results belong.
--   
--   <a>$sel:scale:ColumnInfo'</a>, <a>columnInfo_scale</a> - For
--   <tt>DECIMAL</tt> data types, specifies the total number of digits in
--   the fractional part of the value. Defaults to 0.
--   
--   <a>$sel:name:ColumnInfo'</a>, <a>columnInfo_name</a> - The name of the
--   column.
--   
--   <a>$sel:type':ColumnInfo'</a>, <a>columnInfo_type</a> - The data type
--   of the column.
newColumnInfo :: Text -> Text -> ColumnInfo

-- | The catalog to which the query results belong.
columnInfo_catalogName :: Lens' ColumnInfo (Maybe Text)

-- | The table name for the query results.
columnInfo_tableName :: Lens' ColumnInfo (Maybe Text)

-- | For <tt>DECIMAL</tt> data types, specifies the total number of digits,
--   up to 38. For performance reasons, we recommend up to 18 digits.
columnInfo_precision :: Lens' ColumnInfo (Maybe Int)

-- | Indicates whether values in the column are case-sensitive.
columnInfo_caseSensitive :: Lens' ColumnInfo (Maybe Bool)

-- | Indicates the column's nullable status.
columnInfo_nullable :: Lens' ColumnInfo (Maybe ColumnNullable)

-- | A column label.
columnInfo_label :: Lens' ColumnInfo (Maybe Text)

-- | The schema name (database name) to which the query results belong.
columnInfo_schemaName :: Lens' ColumnInfo (Maybe Text)

-- | For <tt>DECIMAL</tt> data types, specifies the total number of digits
--   in the fractional part of the value. Defaults to 0.
columnInfo_scale :: Lens' ColumnInfo (Maybe Int)

-- | The name of the column.
columnInfo_name :: Lens' ColumnInfo Text

-- | The data type of the column.
columnInfo_type :: Lens' ColumnInfo Text
instance GHC.Generics.Generic Network.AWS.Athena.Types.ColumnInfo.ColumnInfo
instance GHC.Show.Show Network.AWS.Athena.Types.ColumnInfo.ColumnInfo
instance GHC.Read.Read Network.AWS.Athena.Types.ColumnInfo.ColumnInfo
instance GHC.Classes.Eq Network.AWS.Athena.Types.ColumnInfo.ColumnInfo
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.ColumnInfo.ColumnInfo
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.ColumnInfo.ColumnInfo
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.ColumnInfo.ColumnInfo


module Network.AWS.Athena.Types.DataCatalogType
newtype DataCatalogType
DataCatalogType' :: Text -> DataCatalogType
[fromDataCatalogType] :: DataCatalogType -> Text
pattern DataCatalogType_GLUE :: DataCatalogType
pattern DataCatalogType_HIVE :: DataCatalogType
pattern DataCatalogType_LAMBDA :: DataCatalogType
instance Network.AWS.Data.XML.ToXML Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Network.AWS.Data.XML.FromXML Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Network.AWS.Data.Log.ToLog Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Network.AWS.Data.Text.ToText Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Network.AWS.Data.Text.FromText Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance GHC.Generics.Generic Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance GHC.Classes.Ord Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance GHC.Classes.Eq Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance GHC.Read.Read Network.AWS.Athena.Types.DataCatalogType.DataCatalogType
instance GHC.Show.Show Network.AWS.Athena.Types.DataCatalogType.DataCatalogType


module Network.AWS.Athena.Types.DataCatalogSummary

-- | The summary information for the data catalog, which includes its name
--   and type.
--   
--   <i>See:</i> <a>newDataCatalogSummary</a> smart constructor.
data DataCatalogSummary
DataCatalogSummary' :: Maybe Text -> Maybe DataCatalogType -> DataCatalogSummary

-- | The name of the data catalog.
[$sel:catalogName:DataCatalogSummary'] :: DataCatalogSummary -> Maybe Text

-- | The data catalog type.
[$sel:type':DataCatalogSummary'] :: DataCatalogSummary -> Maybe DataCatalogType

-- | Create a value of <a>DataCatalogSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogName:DataCatalogSummary'</a>,
--   <a>dataCatalogSummary_catalogName</a> - The name of the data catalog.
--   
--   <a>$sel:type':DataCatalogSummary'</a>, <a>dataCatalogSummary_type</a>
--   - The data catalog type.
newDataCatalogSummary :: DataCatalogSummary

-- | The name of the data catalog.
dataCatalogSummary_catalogName :: Lens' DataCatalogSummary (Maybe Text)

-- | The data catalog type.
dataCatalogSummary_type :: Lens' DataCatalogSummary (Maybe DataCatalogType)
instance GHC.Generics.Generic Network.AWS.Athena.Types.DataCatalogSummary.DataCatalogSummary
instance GHC.Show.Show Network.AWS.Athena.Types.DataCatalogSummary.DataCatalogSummary
instance GHC.Read.Read Network.AWS.Athena.Types.DataCatalogSummary.DataCatalogSummary
instance GHC.Classes.Eq Network.AWS.Athena.Types.DataCatalogSummary.DataCatalogSummary
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.DataCatalogSummary.DataCatalogSummary
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.DataCatalogSummary.DataCatalogSummary
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.DataCatalogSummary.DataCatalogSummary


module Network.AWS.Athena.Types.DataCatalog

-- | Contains information about a data catalog in an Amazon Web Services
--   account.
--   
--   <i>See:</i> <a>newDataCatalog</a> smart constructor.
data DataCatalog
DataCatalog' :: Maybe Text -> Maybe (HashMap Text Text) -> Text -> DataCatalogType -> DataCatalog

-- | An optional description of the data catalog.
[$sel:description:DataCatalog'] :: DataCatalog -> Maybe Text

-- | Specifies the Lambda function or functions to use for the data
--   catalog. This is a mapping whose values depend on the catalog type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li></ul></li>
--   </ul>
[$sel:parameters:DataCatalog'] :: DataCatalog -> Maybe (HashMap Text Text)

-- | The name of the data catalog. The catalog name must be unique for the
--   Amazon Web Services account and can use a maximum of 128 alphanumeric,
--   underscore, at sign, or hyphen characters.
[$sel:name:DataCatalog'] :: DataCatalog -> Text

-- | The type of data catalog to create: <tt>LAMBDA</tt> for a federated
--   catalog, <tt>HIVE</tt> for an external hive metastore, or
--   <tt>GLUE</tt> for an Glue Data Catalog.
[$sel:type':DataCatalog'] :: DataCatalog -> DataCatalogType

-- | Create a value of <a>DataCatalog</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:DataCatalog'</a>, <a>dataCatalog_description</a> -
--   An optional description of the data catalog.
--   
--   <a>$sel:parameters:DataCatalog'</a>, <a>dataCatalog_parameters</a> -
--   Specifies the Lambda function or functions to use for the data
--   catalog. This is a mapping whose values depend on the catalog type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li></ul></li>
--   </ul>
--   
--   <a>$sel:name:DataCatalog'</a>, <a>dataCatalog_name</a> - The name of
--   the data catalog. The catalog name must be unique for the Amazon Web
--   Services account and can use a maximum of 128 alphanumeric,
--   underscore, at sign, or hyphen characters.
--   
--   <a>$sel:type':DataCatalog'</a>, <a>dataCatalog_type</a> - The type of
--   data catalog to create: <tt>LAMBDA</tt> for a federated catalog,
--   <tt>HIVE</tt> for an external hive metastore, or <tt>GLUE</tt> for an
--   Glue Data Catalog.
newDataCatalog :: Text -> DataCatalogType -> DataCatalog

-- | An optional description of the data catalog.
dataCatalog_description :: Lens' DataCatalog (Maybe Text)

-- | Specifies the Lambda function or functions to use for the data
--   catalog. This is a mapping whose values depend on the catalog type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li></ul></li>
--   </ul>
dataCatalog_parameters :: Lens' DataCatalog (Maybe (HashMap Text Text))

-- | The name of the data catalog. The catalog name must be unique for the
--   Amazon Web Services account and can use a maximum of 128 alphanumeric,
--   underscore, at sign, or hyphen characters.
dataCatalog_name :: Lens' DataCatalog Text

-- | The type of data catalog to create: <tt>LAMBDA</tt> for a federated
--   catalog, <tt>HIVE</tt> for an external hive metastore, or
--   <tt>GLUE</tt> for an Glue Data Catalog.
dataCatalog_type :: Lens' DataCatalog DataCatalogType
instance GHC.Generics.Generic Network.AWS.Athena.Types.DataCatalog.DataCatalog
instance GHC.Show.Show Network.AWS.Athena.Types.DataCatalog.DataCatalog
instance GHC.Read.Read Network.AWS.Athena.Types.DataCatalog.DataCatalog
instance GHC.Classes.Eq Network.AWS.Athena.Types.DataCatalog.DataCatalog
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.DataCatalog.DataCatalog
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.DataCatalog.DataCatalog
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.DataCatalog.DataCatalog


module Network.AWS.Athena.Types.Database

-- | Contains metadata information for a database in a data catalog.
--   
--   <i>See:</i> <a>newDatabase</a> smart constructor.
data Database
Database' :: Maybe Text -> Maybe (HashMap Text Text) -> Text -> Database

-- | An optional description of the database.
[$sel:description:Database'] :: Database -> Maybe Text

-- | A set of custom key/value pairs.
[$sel:parameters:Database'] :: Database -> Maybe (HashMap Text Text)

-- | The name of the database.
[$sel:name:Database'] :: Database -> Text

-- | Create a value of <a>Database</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:Database'</a>, <a>database_description</a> - An
--   optional description of the database.
--   
--   <a>$sel:parameters:Database'</a>, <a>database_parameters</a> - A set
--   of custom key/value pairs.
--   
--   <a>$sel:name:Database'</a>, <a>database_name</a> - The name of the
--   database.
newDatabase :: Text -> Database

-- | An optional description of the database.
database_description :: Lens' Database (Maybe Text)

-- | A set of custom key/value pairs.
database_parameters :: Lens' Database (Maybe (HashMap Text Text))

-- | The name of the database.
database_name :: Lens' Database Text
instance GHC.Generics.Generic Network.AWS.Athena.Types.Database.Database
instance GHC.Show.Show Network.AWS.Athena.Types.Database.Database
instance GHC.Read.Read Network.AWS.Athena.Types.Database.Database
instance GHC.Classes.Eq Network.AWS.Athena.Types.Database.Database
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.Database.Database
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.Database.Database
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.Database.Database


module Network.AWS.Athena.Types.Datum

-- | A piece of data (a field in the table).
--   
--   <i>See:</i> <a>newDatum</a> smart constructor.
data Datum
Datum' :: Maybe Text -> Datum

-- | The value of the datum.
[$sel:varCharValue:Datum'] :: Datum -> Maybe Text

-- | Create a value of <a>Datum</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:varCharValue:Datum'</a>, <a>datum_varCharValue</a> - The value
--   of the datum.
newDatum :: Datum

-- | The value of the datum.
datum_varCharValue :: Lens' Datum (Maybe Text)
instance GHC.Generics.Generic Network.AWS.Athena.Types.Datum.Datum
instance GHC.Show.Show Network.AWS.Athena.Types.Datum.Datum
instance GHC.Read.Read Network.AWS.Athena.Types.Datum.Datum
instance GHC.Classes.Eq Network.AWS.Athena.Types.Datum.Datum
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.Datum.Datum
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.Datum.Datum
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.Datum.Datum


module Network.AWS.Athena.Types.EncryptionOption
newtype EncryptionOption
EncryptionOption' :: Text -> EncryptionOption
[fromEncryptionOption] :: EncryptionOption -> Text
pattern EncryptionOption_CSE_KMS :: EncryptionOption
pattern EncryptionOption_SSE_KMS :: EncryptionOption
pattern EncryptionOption_SSE_S3 :: EncryptionOption
instance Network.AWS.Data.XML.ToXML Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Network.AWS.Data.XML.FromXML Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Network.AWS.Data.Headers.ToHeader Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Network.AWS.Data.Log.ToLog Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Network.AWS.Data.Text.ToText Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Network.AWS.Data.Text.FromText Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance GHC.Generics.Generic Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance GHC.Classes.Ord Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance GHC.Classes.Eq Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance GHC.Read.Read Network.AWS.Athena.Types.EncryptionOption.EncryptionOption
instance GHC.Show.Show Network.AWS.Athena.Types.EncryptionOption.EncryptionOption


module Network.AWS.Athena.Types.EncryptionConfiguration

-- | If query results are encrypted in Amazon S3, indicates the encryption
--   option used (for example, <tt>SSE-KMS</tt> or <tt>CSE-KMS</tt>) and
--   key information.
--   
--   <i>See:</i> <a>newEncryptionConfiguration</a> smart constructor.
data EncryptionConfiguration
EncryptionConfiguration' :: Maybe Text -> EncryptionOption -> EncryptionConfiguration

-- | For <tt>SSE-KMS</tt> and <tt>CSE-KMS</tt>, this is the KMS key ARN or
--   ID.
[$sel:kmsKey:EncryptionConfiguration'] :: EncryptionConfiguration -> Maybe Text

-- | Indicates whether Amazon S3 server-side encryption with Amazon
--   S3-managed keys (<tt>SSE-S3</tt>), server-side encryption with
--   KMS-managed keys (<tt>SSE-KMS</tt>), or client-side encryption with
--   KMS-managed keys (CSE-KMS) is used.
--   
--   If a query runs in a workgroup and the workgroup overrides client-side
--   settings, then the workgroup's setting for encryption is used. It
--   specifies whether query results must be encrypted, for all queries
--   that run in this workgroup.
[$sel:encryptionOption:EncryptionConfiguration'] :: EncryptionConfiguration -> EncryptionOption

-- | Create a value of <a>EncryptionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsKey:EncryptionConfiguration'</a>,
--   <a>encryptionConfiguration_kmsKey</a> - For <tt>SSE-KMS</tt> and
--   <tt>CSE-KMS</tt>, this is the KMS key ARN or ID.
--   
--   <a>$sel:encryptionOption:EncryptionConfiguration'</a>,
--   <a>encryptionConfiguration_encryptionOption</a> - Indicates whether
--   Amazon S3 server-side encryption with Amazon S3-managed keys
--   (<tt>SSE-S3</tt>), server-side encryption with KMS-managed keys
--   (<tt>SSE-KMS</tt>), or client-side encryption with KMS-managed keys
--   (CSE-KMS) is used.
--   
--   If a query runs in a workgroup and the workgroup overrides client-side
--   settings, then the workgroup's setting for encryption is used. It
--   specifies whether query results must be encrypted, for all queries
--   that run in this workgroup.
newEncryptionConfiguration :: EncryptionOption -> EncryptionConfiguration

-- | For <tt>SSE-KMS</tt> and <tt>CSE-KMS</tt>, this is the KMS key ARN or
--   ID.
encryptionConfiguration_kmsKey :: Lens' EncryptionConfiguration (Maybe Text)

-- | Indicates whether Amazon S3 server-side encryption with Amazon
--   S3-managed keys (<tt>SSE-S3</tt>), server-side encryption with
--   KMS-managed keys (<tt>SSE-KMS</tt>), or client-side encryption with
--   KMS-managed keys (CSE-KMS) is used.
--   
--   If a query runs in a workgroup and the workgroup overrides client-side
--   settings, then the workgroup's setting for encryption is used. It
--   specifies whether query results must be encrypted, for all queries
--   that run in this workgroup.
encryptionConfiguration_encryptionOption :: Lens' EncryptionConfiguration EncryptionOption
instance GHC.Generics.Generic Network.AWS.Athena.Types.EncryptionConfiguration.EncryptionConfiguration
instance GHC.Show.Show Network.AWS.Athena.Types.EncryptionConfiguration.EncryptionConfiguration
instance GHC.Read.Read Network.AWS.Athena.Types.EncryptionConfiguration.EncryptionConfiguration
instance GHC.Classes.Eq Network.AWS.Athena.Types.EncryptionConfiguration.EncryptionConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.EncryptionConfiguration.EncryptionConfiguration
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.EncryptionConfiguration.EncryptionConfiguration
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.EncryptionConfiguration.EncryptionConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.EncryptionConfiguration.EncryptionConfiguration


module Network.AWS.Athena.Types.EngineVersion

-- | The Athena engine version for running queries.
--   
--   <i>See:</i> <a>newEngineVersion</a> smart constructor.
data EngineVersion
EngineVersion' :: Maybe Text -> Maybe Text -> EngineVersion

-- | Read only. The engine version on which the query runs. If the user
--   requests a valid engine version other than Auto, the effective engine
--   version is the same as the engine version that the user requested. If
--   the user requests Auto, the effective engine version is chosen by
--   Athena. When a request to update the engine version is made by a
--   <tt>CreateWorkGroup</tt> or <tt>UpdateWorkGroup</tt> operation, the
--   <tt>EffectiveEngineVersion</tt> field is ignored.
[$sel:effectiveEngineVersion:EngineVersion'] :: EngineVersion -> Maybe Text

-- | The engine version requested by the user. Possible values are
--   determined by the output of <tt>ListEngineVersions</tt>, including
--   Auto. The default is Auto.
[$sel:selectedEngineVersion:EngineVersion'] :: EngineVersion -> Maybe Text

-- | Create a value of <a>EngineVersion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:effectiveEngineVersion:EngineVersion'</a>,
--   <a>engineVersion_effectiveEngineVersion</a> - Read only. The engine
--   version on which the query runs. If the user requests a valid engine
--   version other than Auto, the effective engine version is the same as
--   the engine version that the user requested. If the user requests Auto,
--   the effective engine version is chosen by Athena. When a request to
--   update the engine version is made by a <tt>CreateWorkGroup</tt> or
--   <tt>UpdateWorkGroup</tt> operation, the
--   <tt>EffectiveEngineVersion</tt> field is ignored.
--   
--   <a>$sel:selectedEngineVersion:EngineVersion'</a>,
--   <a>engineVersion_selectedEngineVersion</a> - The engine version
--   requested by the user. Possible values are determined by the output of
--   <tt>ListEngineVersions</tt>, including Auto. The default is Auto.
newEngineVersion :: EngineVersion

-- | Read only. The engine version on which the query runs. If the user
--   requests a valid engine version other than Auto, the effective engine
--   version is the same as the engine version that the user requested. If
--   the user requests Auto, the effective engine version is chosen by
--   Athena. When a request to update the engine version is made by a
--   <tt>CreateWorkGroup</tt> or <tt>UpdateWorkGroup</tt> operation, the
--   <tt>EffectiveEngineVersion</tt> field is ignored.
engineVersion_effectiveEngineVersion :: Lens' EngineVersion (Maybe Text)

-- | The engine version requested by the user. Possible values are
--   determined by the output of <tt>ListEngineVersions</tt>, including
--   Auto. The default is Auto.
engineVersion_selectedEngineVersion :: Lens' EngineVersion (Maybe Text)
instance GHC.Generics.Generic Network.AWS.Athena.Types.EngineVersion.EngineVersion
instance GHC.Show.Show Network.AWS.Athena.Types.EngineVersion.EngineVersion
instance GHC.Read.Read Network.AWS.Athena.Types.EngineVersion.EngineVersion
instance GHC.Classes.Eq Network.AWS.Athena.Types.EngineVersion.EngineVersion
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.EngineVersion.EngineVersion
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.EngineVersion.EngineVersion
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.EngineVersion.EngineVersion
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.EngineVersion.EngineVersion


module Network.AWS.Athena.Types.NamedQuery

-- | A query, where <tt>QueryString</tt> is the list of SQL query
--   statements that comprise the query.
--   
--   <i>See:</i> <a>newNamedQuery</a> smart constructor.
data NamedQuery
NamedQuery' :: Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> NamedQuery

-- | The unique identifier of the query.
[$sel:namedQueryId:NamedQuery'] :: NamedQuery -> Maybe Text

-- | The query description.
[$sel:description:NamedQuery'] :: NamedQuery -> Maybe Text

-- | The name of the workgroup that contains the named query.
[$sel:workGroup:NamedQuery'] :: NamedQuery -> Maybe Text

-- | The query name.
[$sel:name:NamedQuery'] :: NamedQuery -> Text

-- | The database to which the query belongs.
[$sel:database:NamedQuery'] :: NamedQuery -> Text

-- | The SQL query statements that comprise the query.
[$sel:queryString:NamedQuery'] :: NamedQuery -> Text

-- | Create a value of <a>NamedQuery</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryId:NamedQuery'</a>, <a>namedQuery_namedQueryId</a> -
--   The unique identifier of the query.
--   
--   <a>$sel:description:NamedQuery'</a>, <a>namedQuery_description</a> -
--   The query description.
--   
--   <a>$sel:workGroup:NamedQuery'</a>, <a>namedQuery_workGroup</a> - The
--   name of the workgroup that contains the named query.
--   
--   <a>$sel:name:NamedQuery'</a>, <a>namedQuery_name</a> - The query name.
--   
--   <a>$sel:database:NamedQuery'</a>, <a>namedQuery_database</a> - The
--   database to which the query belongs.
--   
--   <a>$sel:queryString:NamedQuery'</a>, <a>namedQuery_queryString</a> -
--   The SQL query statements that comprise the query.
newNamedQuery :: Text -> Text -> Text -> NamedQuery

-- | The unique identifier of the query.
namedQuery_namedQueryId :: Lens' NamedQuery (Maybe Text)

-- | The query description.
namedQuery_description :: Lens' NamedQuery (Maybe Text)

-- | The name of the workgroup that contains the named query.
namedQuery_workGroup :: Lens' NamedQuery (Maybe Text)

-- | The query name.
namedQuery_name :: Lens' NamedQuery Text

-- | The database to which the query belongs.
namedQuery_database :: Lens' NamedQuery Text

-- | The SQL query statements that comprise the query.
namedQuery_queryString :: Lens' NamedQuery Text
instance GHC.Generics.Generic Network.AWS.Athena.Types.NamedQuery.NamedQuery
instance GHC.Show.Show Network.AWS.Athena.Types.NamedQuery.NamedQuery
instance GHC.Read.Read Network.AWS.Athena.Types.NamedQuery.NamedQuery
instance GHC.Classes.Eq Network.AWS.Athena.Types.NamedQuery.NamedQuery
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.NamedQuery.NamedQuery
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.NamedQuery.NamedQuery
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.NamedQuery.NamedQuery


module Network.AWS.Athena.Types.PreparedStatement

-- | A prepared SQL statement for use with Athena.
--   
--   <i>See:</i> <a>newPreparedStatement</a> smart constructor.
data PreparedStatement
PreparedStatement' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> PreparedStatement

-- | The name of the workgroup to which the prepared statement belongs.
[$sel:workGroupName:PreparedStatement'] :: PreparedStatement -> Maybe Text

-- | The name of the prepared statement.
[$sel:statementName:PreparedStatement'] :: PreparedStatement -> Maybe Text

-- | The query string for the prepared statement.
[$sel:queryStatement:PreparedStatement'] :: PreparedStatement -> Maybe Text

-- | The last modified time of the prepared statement.
[$sel:lastModifiedTime:PreparedStatement'] :: PreparedStatement -> Maybe POSIX

-- | The description of the prepared statement.
[$sel:description:PreparedStatement'] :: PreparedStatement -> Maybe Text

-- | Create a value of <a>PreparedStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:workGroupName:PreparedStatement'</a>,
--   <a>preparedStatement_workGroupName</a> - The name of the workgroup to
--   which the prepared statement belongs.
--   
--   <a>$sel:statementName:PreparedStatement'</a>,
--   <a>preparedStatement_statementName</a> - The name of the prepared
--   statement.
--   
--   <a>$sel:queryStatement:PreparedStatement'</a>,
--   <a>preparedStatement_queryStatement</a> - The query string for the
--   prepared statement.
--   
--   <a>$sel:lastModifiedTime:PreparedStatement'</a>,
--   <a>preparedStatement_lastModifiedTime</a> - The last modified time of
--   the prepared statement.
--   
--   <a>$sel:description:PreparedStatement'</a>,
--   <a>preparedStatement_description</a> - The description of the prepared
--   statement.
newPreparedStatement :: PreparedStatement

-- | The name of the workgroup to which the prepared statement belongs.
preparedStatement_workGroupName :: Lens' PreparedStatement (Maybe Text)

-- | The name of the prepared statement.
preparedStatement_statementName :: Lens' PreparedStatement (Maybe Text)

-- | The query string for the prepared statement.
preparedStatement_queryStatement :: Lens' PreparedStatement (Maybe Text)

-- | The last modified time of the prepared statement.
preparedStatement_lastModifiedTime :: Lens' PreparedStatement (Maybe UTCTime)

-- | The description of the prepared statement.
preparedStatement_description :: Lens' PreparedStatement (Maybe Text)
instance GHC.Generics.Generic Network.AWS.Athena.Types.PreparedStatement.PreparedStatement
instance GHC.Show.Show Network.AWS.Athena.Types.PreparedStatement.PreparedStatement
instance GHC.Read.Read Network.AWS.Athena.Types.PreparedStatement.PreparedStatement
instance GHC.Classes.Eq Network.AWS.Athena.Types.PreparedStatement.PreparedStatement
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.PreparedStatement.PreparedStatement
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.PreparedStatement.PreparedStatement
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.PreparedStatement.PreparedStatement


module Network.AWS.Athena.Types.PreparedStatementSummary

-- | The name and last modified time of the prepared statement.
--   
--   <i>See:</i> <a>newPreparedStatementSummary</a> smart constructor.
data PreparedStatementSummary
PreparedStatementSummary' :: Maybe Text -> Maybe POSIX -> PreparedStatementSummary

-- | The name of the prepared statement.
[$sel:statementName:PreparedStatementSummary'] :: PreparedStatementSummary -> Maybe Text

-- | The last modified time of the prepared statement.
[$sel:lastModifiedTime:PreparedStatementSummary'] :: PreparedStatementSummary -> Maybe POSIX

-- | Create a value of <a>PreparedStatementSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statementName:PreparedStatementSummary'</a>,
--   <a>preparedStatementSummary_statementName</a> - The name of the
--   prepared statement.
--   
--   <a>$sel:lastModifiedTime:PreparedStatementSummary'</a>,
--   <a>preparedStatementSummary_lastModifiedTime</a> - The last modified
--   time of the prepared statement.
newPreparedStatementSummary :: PreparedStatementSummary

-- | The name of the prepared statement.
preparedStatementSummary_statementName :: Lens' PreparedStatementSummary (Maybe Text)

-- | The last modified time of the prepared statement.
preparedStatementSummary_lastModifiedTime :: Lens' PreparedStatementSummary (Maybe UTCTime)
instance GHC.Generics.Generic Network.AWS.Athena.Types.PreparedStatementSummary.PreparedStatementSummary
instance GHC.Show.Show Network.AWS.Athena.Types.PreparedStatementSummary.PreparedStatementSummary
instance GHC.Read.Read Network.AWS.Athena.Types.PreparedStatementSummary.PreparedStatementSummary
instance GHC.Classes.Eq Network.AWS.Athena.Types.PreparedStatementSummary.PreparedStatementSummary
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.PreparedStatementSummary.PreparedStatementSummary
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.PreparedStatementSummary.PreparedStatementSummary
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.PreparedStatementSummary.PreparedStatementSummary


module Network.AWS.Athena.Types.QueryExecutionContext

-- | The database and data catalog context in which the query execution
--   occurs.
--   
--   <i>See:</i> <a>newQueryExecutionContext</a> smart constructor.
data QueryExecutionContext
QueryExecutionContext' :: Maybe Text -> Maybe Text -> QueryExecutionContext

-- | The name of the data catalog used in the query execution.
[$sel:catalog:QueryExecutionContext'] :: QueryExecutionContext -> Maybe Text

-- | The name of the database used in the query execution. The database
--   must exist in the catalog.
[$sel:database:QueryExecutionContext'] :: QueryExecutionContext -> Maybe Text

-- | Create a value of <a>QueryExecutionContext</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalog:QueryExecutionContext'</a>,
--   <a>queryExecutionContext_catalog</a> - The name of the data catalog
--   used in the query execution.
--   
--   <a>$sel:database:QueryExecutionContext'</a>,
--   <a>queryExecutionContext_database</a> - The name of the database used
--   in the query execution. The database must exist in the catalog.
newQueryExecutionContext :: QueryExecutionContext

-- | The name of the data catalog used in the query execution.
queryExecutionContext_catalog :: Lens' QueryExecutionContext (Maybe Text)

-- | The name of the database used in the query execution. The database
--   must exist in the catalog.
queryExecutionContext_database :: Lens' QueryExecutionContext (Maybe Text)
instance GHC.Generics.Generic Network.AWS.Athena.Types.QueryExecutionContext.QueryExecutionContext
instance GHC.Show.Show Network.AWS.Athena.Types.QueryExecutionContext.QueryExecutionContext
instance GHC.Read.Read Network.AWS.Athena.Types.QueryExecutionContext.QueryExecutionContext
instance GHC.Classes.Eq Network.AWS.Athena.Types.QueryExecutionContext.QueryExecutionContext
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.QueryExecutionContext.QueryExecutionContext
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.QueryExecutionContext.QueryExecutionContext
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.QueryExecutionContext.QueryExecutionContext
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.QueryExecutionContext.QueryExecutionContext


module Network.AWS.Athena.Types.QueryExecutionState
newtype QueryExecutionState
QueryExecutionState' :: Text -> QueryExecutionState
[fromQueryExecutionState] :: QueryExecutionState -> Text
pattern QueryExecutionState_CANCELLED :: QueryExecutionState
pattern QueryExecutionState_FAILED :: QueryExecutionState
pattern QueryExecutionState_QUEUED :: QueryExecutionState
pattern QueryExecutionState_RUNNING :: QueryExecutionState
pattern QueryExecutionState_SUCCEEDED :: QueryExecutionState
instance Network.AWS.Data.XML.ToXML Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Network.AWS.Data.XML.FromXML Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Network.AWS.Data.Headers.ToHeader Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Network.AWS.Data.Log.ToLog Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Network.AWS.Data.Text.ToText Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Network.AWS.Data.Text.FromText Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance GHC.Generics.Generic Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance GHC.Classes.Ord Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance GHC.Classes.Eq Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance GHC.Read.Read Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState
instance GHC.Show.Show Network.AWS.Athena.Types.QueryExecutionState.QueryExecutionState


module Network.AWS.Athena.Types.QueryExecutionStatistics

-- | The amount of data scanned during the query execution and the amount
--   of time that it took to execute, and the type of statement that was
--   run.
--   
--   <i>See:</i> <a>newQueryExecutionStatistics</a> smart constructor.
data QueryExecutionStatistics
QueryExecutionStatistics' :: Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Text -> QueryExecutionStatistics

-- | The number of milliseconds that Athena took to run the query.
[$sel:totalExecutionTimeInMillis:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Integer

-- | The number of milliseconds that Athena took to finalize and publish
--   the query results after the query engine finished running the query.
[$sel:serviceProcessingTimeInMillis:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Integer

-- | The number of milliseconds that the query was in your query queue
--   waiting for resources. Note that if transient errors occur, Athena
--   might automatically add the query back to the queue.
[$sel:queryQueueTimeInMillis:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Integer

-- | The number of bytes in the data that was queried.
[$sel:dataScannedInBytes:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Integer

-- | The number of milliseconds that Athena took to plan the query
--   processing flow. This includes the time spent retrieving table
--   partitions from the data source. Note that because the query engine
--   performs the query planning, query planning time is a subset of engine
--   processing time.
[$sel:queryPlanningTimeInMillis:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Integer

-- | The number of milliseconds that the query took to execute.
[$sel:engineExecutionTimeInMillis:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Integer

-- | The location and file name of a data manifest file. The manifest file
--   is saved to the Athena query results location in Amazon S3. The
--   manifest file tracks files that the query wrote to Amazon S3. If the
--   query fails, the manifest file also tracks files that the query
--   intended to write. The manifest is useful for identifying orphaned
--   files resulting from a failed query. For more information, see
--   <a>Working with Query Results, Output Files, and Query History</a> in
--   the <i>Amazon Athena User Guide</i>.
[$sel:dataManifestLocation:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Text

-- | Create a value of <a>QueryExecutionStatistics</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:totalExecutionTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_totalExecutionTimeInMillis</a> - The
--   number of milliseconds that Athena took to run the query.
--   
--   <a>$sel:serviceProcessingTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_serviceProcessingTimeInMillis</a> - The
--   number of milliseconds that Athena took to finalize and publish the
--   query results after the query engine finished running the query.
--   
--   <a>$sel:queryQueueTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_queryQueueTimeInMillis</a> - The number of
--   milliseconds that the query was in your query queue waiting for
--   resources. Note that if transient errors occur, Athena might
--   automatically add the query back to the queue.
--   
--   <a>$sel:dataScannedInBytes:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_dataScannedInBytes</a> - The number of
--   bytes in the data that was queried.
--   
--   <a>$sel:queryPlanningTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_queryPlanningTimeInMillis</a> - The number
--   of milliseconds that Athena took to plan the query processing flow.
--   This includes the time spent retrieving table partitions from the data
--   source. Note that because the query engine performs the query
--   planning, query planning time is a subset of engine processing time.
--   
--   <a>$sel:engineExecutionTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_engineExecutionTimeInMillis</a> - The
--   number of milliseconds that the query took to execute.
--   
--   <a>$sel:dataManifestLocation:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_dataManifestLocation</a> - The location
--   and file name of a data manifest file. The manifest file is saved to
--   the Athena query results location in Amazon S3. The manifest file
--   tracks files that the query wrote to Amazon S3. If the query fails,
--   the manifest file also tracks files that the query intended to write.
--   The manifest is useful for identifying orphaned files resulting from a
--   failed query. For more information, see <a>Working with Query Results,
--   Output Files, and Query History</a> in the <i>Amazon Athena User
--   Guide</i>.
newQueryExecutionStatistics :: QueryExecutionStatistics

-- | The number of milliseconds that Athena took to run the query.
queryExecutionStatistics_totalExecutionTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of milliseconds that Athena took to finalize and publish
--   the query results after the query engine finished running the query.
queryExecutionStatistics_serviceProcessingTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of milliseconds that the query was in your query queue
--   waiting for resources. Note that if transient errors occur, Athena
--   might automatically add the query back to the queue.
queryExecutionStatistics_queryQueueTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of bytes in the data that was queried.
queryExecutionStatistics_dataScannedInBytes :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of milliseconds that Athena took to plan the query
--   processing flow. This includes the time spent retrieving table
--   partitions from the data source. Note that because the query engine
--   performs the query planning, query planning time is a subset of engine
--   processing time.
queryExecutionStatistics_queryPlanningTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of milliseconds that the query took to execute.
queryExecutionStatistics_engineExecutionTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The location and file name of a data manifest file. The manifest file
--   is saved to the Athena query results location in Amazon S3. The
--   manifest file tracks files that the query wrote to Amazon S3. If the
--   query fails, the manifest file also tracks files that the query
--   intended to write. The manifest is useful for identifying orphaned
--   files resulting from a failed query. For more information, see
--   <a>Working with Query Results, Output Files, and Query History</a> in
--   the <i>Amazon Athena User Guide</i>.
queryExecutionStatistics_dataManifestLocation :: Lens' QueryExecutionStatistics (Maybe Text)
instance GHC.Generics.Generic Network.AWS.Athena.Types.QueryExecutionStatistics.QueryExecutionStatistics
instance GHC.Show.Show Network.AWS.Athena.Types.QueryExecutionStatistics.QueryExecutionStatistics
instance GHC.Read.Read Network.AWS.Athena.Types.QueryExecutionStatistics.QueryExecutionStatistics
instance GHC.Classes.Eq Network.AWS.Athena.Types.QueryExecutionStatistics.QueryExecutionStatistics
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.QueryExecutionStatistics.QueryExecutionStatistics
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.QueryExecutionStatistics.QueryExecutionStatistics
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.QueryExecutionStatistics.QueryExecutionStatistics


module Network.AWS.Athena.Types.QueryExecutionStatus

-- | The completion date, current state, submission time, and state change
--   reason (if applicable) for the query execution.
--   
--   <i>See:</i> <a>newQueryExecutionStatus</a> smart constructor.
data QueryExecutionStatus
QueryExecutionStatus' :: Maybe POSIX -> Maybe POSIX -> Maybe Text -> Maybe QueryExecutionState -> QueryExecutionStatus

-- | The date and time that the query was submitted.
[$sel:submissionDateTime:QueryExecutionStatus'] :: QueryExecutionStatus -> Maybe POSIX

-- | The date and time that the query completed.
[$sel:completionDateTime:QueryExecutionStatus'] :: QueryExecutionStatus -> Maybe POSIX

-- | Further detail about the status of the query.
[$sel:stateChangeReason:QueryExecutionStatus'] :: QueryExecutionStatus -> Maybe Text

-- | The state of query execution. <tt>QUEUED</tt> indicates that the query
--   has been submitted to the service, and Athena will execute the query
--   as soon as resources are available. <tt>RUNNING</tt> indicates that
--   the query is in execution phase. <tt>SUCCEEDED</tt> indicates that the
--   query completed without errors. <tt>FAILED</tt> indicates that the
--   query experienced an error and did not complete processing.
--   <tt>CANCELLED</tt> indicates that a user input interrupted query
--   execution.
--   
--   Athena automatically retries your queries in cases of certain
--   transient errors. As a result, you may see the query state transition
--   from <tt>RUNNING</tt> or <tt>FAILED</tt> to <tt>QUEUED</tt>.
[$sel:state:QueryExecutionStatus'] :: QueryExecutionStatus -> Maybe QueryExecutionState

-- | Create a value of <a>QueryExecutionStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:submissionDateTime:QueryExecutionStatus'</a>,
--   <a>queryExecutionStatus_submissionDateTime</a> - The date and time
--   that the query was submitted.
--   
--   <a>$sel:completionDateTime:QueryExecutionStatus'</a>,
--   <a>queryExecutionStatus_completionDateTime</a> - The date and time
--   that the query completed.
--   
--   <a>$sel:stateChangeReason:QueryExecutionStatus'</a>,
--   <a>queryExecutionStatus_stateChangeReason</a> - Further detail about
--   the status of the query.
--   
--   <a>$sel:state:QueryExecutionStatus'</a>,
--   <a>queryExecutionStatus_state</a> - The state of query execution.
--   <tt>QUEUED</tt> indicates that the query has been submitted to the
--   service, and Athena will execute the query as soon as resources are
--   available. <tt>RUNNING</tt> indicates that the query is in execution
--   phase. <tt>SUCCEEDED</tt> indicates that the query completed without
--   errors. <tt>FAILED</tt> indicates that the query experienced an error
--   and did not complete processing. <tt>CANCELLED</tt> indicates that a
--   user input interrupted query execution.
--   
--   Athena automatically retries your queries in cases of certain
--   transient errors. As a result, you may see the query state transition
--   from <tt>RUNNING</tt> or <tt>FAILED</tt> to <tt>QUEUED</tt>.
newQueryExecutionStatus :: QueryExecutionStatus

-- | The date and time that the query was submitted.
queryExecutionStatus_submissionDateTime :: Lens' QueryExecutionStatus (Maybe UTCTime)

-- | The date and time that the query completed.
queryExecutionStatus_completionDateTime :: Lens' QueryExecutionStatus (Maybe UTCTime)

-- | Further detail about the status of the query.
queryExecutionStatus_stateChangeReason :: Lens' QueryExecutionStatus (Maybe Text)

-- | The state of query execution. <tt>QUEUED</tt> indicates that the query
--   has been submitted to the service, and Athena will execute the query
--   as soon as resources are available. <tt>RUNNING</tt> indicates that
--   the query is in execution phase. <tt>SUCCEEDED</tt> indicates that the
--   query completed without errors. <tt>FAILED</tt> indicates that the
--   query experienced an error and did not complete processing.
--   <tt>CANCELLED</tt> indicates that a user input interrupted query
--   execution.
--   
--   Athena automatically retries your queries in cases of certain
--   transient errors. As a result, you may see the query state transition
--   from <tt>RUNNING</tt> or <tt>FAILED</tt> to <tt>QUEUED</tt>.
queryExecutionStatus_state :: Lens' QueryExecutionStatus (Maybe QueryExecutionState)
instance GHC.Generics.Generic Network.AWS.Athena.Types.QueryExecutionStatus.QueryExecutionStatus
instance GHC.Show.Show Network.AWS.Athena.Types.QueryExecutionStatus.QueryExecutionStatus
instance GHC.Read.Read Network.AWS.Athena.Types.QueryExecutionStatus.QueryExecutionStatus
instance GHC.Classes.Eq Network.AWS.Athena.Types.QueryExecutionStatus.QueryExecutionStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.QueryExecutionStatus.QueryExecutionStatus
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.QueryExecutionStatus.QueryExecutionStatus
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.QueryExecutionStatus.QueryExecutionStatus


module Network.AWS.Athena.Types.ResultConfiguration

-- | The location in Amazon S3 where query results are stored and the
--   encryption option, if any, used for query results. These are known as
--   "client-side settings". If workgroup settings override client-side
--   settings, then the query uses the workgroup settings.
--   
--   <i>See:</i> <a>newResultConfiguration</a> smart constructor.
data ResultConfiguration
ResultConfiguration' :: Maybe EncryptionConfiguration -> Maybe Text -> ResultConfiguration

-- | If query results are encrypted in Amazon S3, indicates the encryption
--   option used (for example, <tt>SSE-KMS</tt> or <tt>CSE-KMS</tt>) and
--   key information. This is a client-side setting. If workgroup settings
--   override client-side settings, then the query uses the encryption
--   configuration that is specified for the workgroup, and also uses the
--   location for storing query results specified in the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration and <a>Workgroup
--   Settings Override Client-Side Settings</a>.
[$sel:encryptionConfiguration:ResultConfiguration'] :: ResultConfiguration -> Maybe EncryptionConfiguration

-- | The location in Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. To run the query, you must
--   specify the query results location using one of the ways: either for
--   individual queries using either this setting (client-side), or in the
--   workgroup, using WorkGroupConfiguration. If none of them is set,
--   Athena issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>. If workgroup settings override
--   client-side settings, then the query uses the settings specified for
--   the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
[$sel:outputLocation:ResultConfiguration'] :: ResultConfiguration -> Maybe Text

-- | Create a value of <a>ResultConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionConfiguration:ResultConfiguration'</a>,
--   <a>resultConfiguration_encryptionConfiguration</a> - If query results
--   are encrypted in Amazon S3, indicates the encryption option used (for
--   example, <tt>SSE-KMS</tt> or <tt>CSE-KMS</tt>) and key information.
--   This is a client-side setting. If workgroup settings override
--   client-side settings, then the query uses the encryption configuration
--   that is specified for the workgroup, and also uses the location for
--   storing query results specified in the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration and <a>Workgroup
--   Settings Override Client-Side Settings</a>.
--   
--   <a>$sel:outputLocation:ResultConfiguration'</a>,
--   <a>resultConfiguration_outputLocation</a> - The location in Amazon S3
--   where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. To run the query, you must
--   specify the query results location using one of the ways: either for
--   individual queries using either this setting (client-side), or in the
--   workgroup, using WorkGroupConfiguration. If none of them is set,
--   Athena issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>. If workgroup settings override
--   client-side settings, then the query uses the settings specified for
--   the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
newResultConfiguration :: ResultConfiguration

-- | If query results are encrypted in Amazon S3, indicates the encryption
--   option used (for example, <tt>SSE-KMS</tt> or <tt>CSE-KMS</tt>) and
--   key information. This is a client-side setting. If workgroup settings
--   override client-side settings, then the query uses the encryption
--   configuration that is specified for the workgroup, and also uses the
--   location for storing query results specified in the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration and <a>Workgroup
--   Settings Override Client-Side Settings</a>.
resultConfiguration_encryptionConfiguration :: Lens' ResultConfiguration (Maybe EncryptionConfiguration)

-- | The location in Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. To run the query, you must
--   specify the query results location using one of the ways: either for
--   individual queries using either this setting (client-side), or in the
--   workgroup, using WorkGroupConfiguration. If none of them is set,
--   Athena issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>. If workgroup settings override
--   client-side settings, then the query uses the settings specified for
--   the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
resultConfiguration_outputLocation :: Lens' ResultConfiguration (Maybe Text)
instance GHC.Generics.Generic Network.AWS.Athena.Types.ResultConfiguration.ResultConfiguration
instance GHC.Show.Show Network.AWS.Athena.Types.ResultConfiguration.ResultConfiguration
instance GHC.Read.Read Network.AWS.Athena.Types.ResultConfiguration.ResultConfiguration
instance GHC.Classes.Eq Network.AWS.Athena.Types.ResultConfiguration.ResultConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.ResultConfiguration.ResultConfiguration
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.ResultConfiguration.ResultConfiguration
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.ResultConfiguration.ResultConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.ResultConfiguration.ResultConfiguration


module Network.AWS.Athena.Types.ResultConfigurationUpdates

-- | The information about the updates in the query results, such as output
--   location and encryption configuration for the query results.
--   
--   <i>See:</i> <a>newResultConfigurationUpdates</a> smart constructor.
data ResultConfigurationUpdates
ResultConfigurationUpdates' :: Maybe EncryptionConfiguration -> Maybe Bool -> Maybe Bool -> Maybe Text -> ResultConfigurationUpdates

-- | The encryption configuration for the query results.
[$sel:encryptionConfiguration:ResultConfigurationUpdates'] :: ResultConfigurationUpdates -> Maybe EncryptionConfiguration

-- | If set to "true", indicates that the previously-specified query
--   results location (also known as a client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the <tt>OutputLocation</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>OutputLocation</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
[$sel:removeOutputLocation:ResultConfigurationUpdates'] :: ResultConfigurationUpdates -> Maybe Bool

-- | If set to "true", indicates that the previously-specified encryption
--   configuration (also known as the client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the
--   <tt>EncryptionConfiguration</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>EncryptionConfiguration</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
[$sel:removeEncryptionConfiguration:ResultConfigurationUpdates'] :: ResultConfigurationUpdates -> Maybe Bool

-- | The location in Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. For more information, see
--   <a>Query Results</a> If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup. The
--   "workgroup settings override" is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
[$sel:outputLocation:ResultConfigurationUpdates'] :: ResultConfigurationUpdates -> Maybe Text

-- | Create a value of <a>ResultConfigurationUpdates</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionConfiguration:ResultConfigurationUpdates'</a>,
--   <a>resultConfigurationUpdates_encryptionConfiguration</a> - The
--   encryption configuration for the query results.
--   
--   <a>$sel:removeOutputLocation:ResultConfigurationUpdates'</a>,
--   <a>resultConfigurationUpdates_removeOutputLocation</a> - If set to
--   "true", indicates that the previously-specified query results location
--   (also known as a client-side setting) for queries in this workgroup
--   should be ignored and set to null. If set to "false" or not set, and a
--   value is present in the <tt>OutputLocation</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>OutputLocation</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
--   
--   <a>$sel:removeEncryptionConfiguration:ResultConfigurationUpdates'</a>,
--   <a>resultConfigurationUpdates_removeEncryptionConfiguration</a> - If
--   set to "true", indicates that the previously-specified encryption
--   configuration (also known as the client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the
--   <tt>EncryptionConfiguration</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>EncryptionConfiguration</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
--   
--   <a>$sel:outputLocation:ResultConfigurationUpdates'</a>,
--   <a>resultConfigurationUpdates_outputLocation</a> - The location in
--   Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. For more information, see
--   <a>Query Results</a> If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup. The
--   "workgroup settings override" is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
newResultConfigurationUpdates :: ResultConfigurationUpdates

-- | The encryption configuration for the query results.
resultConfigurationUpdates_encryptionConfiguration :: Lens' ResultConfigurationUpdates (Maybe EncryptionConfiguration)

-- | If set to "true", indicates that the previously-specified query
--   results location (also known as a client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the <tt>OutputLocation</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>OutputLocation</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
resultConfigurationUpdates_removeOutputLocation :: Lens' ResultConfigurationUpdates (Maybe Bool)

-- | If set to "true", indicates that the previously-specified encryption
--   configuration (also known as the client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the
--   <tt>EncryptionConfiguration</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>EncryptionConfiguration</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
resultConfigurationUpdates_removeEncryptionConfiguration :: Lens' ResultConfigurationUpdates (Maybe Bool)

-- | The location in Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. For more information, see
--   <a>Query Results</a> If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup. The
--   "workgroup settings override" is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
resultConfigurationUpdates_outputLocation :: Lens' ResultConfigurationUpdates (Maybe Text)
instance GHC.Generics.Generic Network.AWS.Athena.Types.ResultConfigurationUpdates.ResultConfigurationUpdates
instance GHC.Show.Show Network.AWS.Athena.Types.ResultConfigurationUpdates.ResultConfigurationUpdates
instance GHC.Read.Read Network.AWS.Athena.Types.ResultConfigurationUpdates.ResultConfigurationUpdates
instance GHC.Classes.Eq Network.AWS.Athena.Types.ResultConfigurationUpdates.ResultConfigurationUpdates
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.ResultConfigurationUpdates.ResultConfigurationUpdates
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.ResultConfigurationUpdates.ResultConfigurationUpdates
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.ResultConfigurationUpdates.ResultConfigurationUpdates


module Network.AWS.Athena.Types.ResultSetMetadata

-- | The metadata that describes the column structure and data types of a
--   table of query results. To return a <tt>ResultSetMetadata</tt> object,
--   use GetQueryResults.
--   
--   <i>See:</i> <a>newResultSetMetadata</a> smart constructor.
data ResultSetMetadata
ResultSetMetadata' :: Maybe [ColumnInfo] -> ResultSetMetadata

-- | Information about the columns returned in a query result metadata.
[$sel:columnInfo:ResultSetMetadata'] :: ResultSetMetadata -> Maybe [ColumnInfo]

-- | Create a value of <a>ResultSetMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:columnInfo:ResultSetMetadata'</a>,
--   <a>resultSetMetadata_columnInfo</a> - Information about the columns
--   returned in a query result metadata.
newResultSetMetadata :: ResultSetMetadata

-- | Information about the columns returned in a query result metadata.
resultSetMetadata_columnInfo :: Lens' ResultSetMetadata (Maybe [ColumnInfo])
instance GHC.Generics.Generic Network.AWS.Athena.Types.ResultSetMetadata.ResultSetMetadata
instance GHC.Show.Show Network.AWS.Athena.Types.ResultSetMetadata.ResultSetMetadata
instance GHC.Read.Read Network.AWS.Athena.Types.ResultSetMetadata.ResultSetMetadata
instance GHC.Classes.Eq Network.AWS.Athena.Types.ResultSetMetadata.ResultSetMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.ResultSetMetadata.ResultSetMetadata
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.ResultSetMetadata.ResultSetMetadata
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.ResultSetMetadata.ResultSetMetadata


module Network.AWS.Athena.Types.Row

-- | The rows that comprise a query result table.
--   
--   <i>See:</i> <a>newRow</a> smart constructor.
data Row
Row' :: Maybe [Datum] -> Row

-- | The data that populates a row in a query result table.
[$sel:data':Row'] :: Row -> Maybe [Datum]

-- | Create a value of <a>Row</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:data':Row'</a>, <a>row_data</a> - The data that populates a
--   row in a query result table.
newRow :: Row

-- | The data that populates a row in a query result table.
row_data :: Lens' Row (Maybe [Datum])
instance GHC.Generics.Generic Network.AWS.Athena.Types.Row.Row
instance GHC.Show.Show Network.AWS.Athena.Types.Row.Row
instance GHC.Read.Read Network.AWS.Athena.Types.Row.Row
instance GHC.Classes.Eq Network.AWS.Athena.Types.Row.Row
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.Row.Row
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.Row.Row
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.Row.Row


module Network.AWS.Athena.Types.ResultSet

-- | The metadata and rows that comprise a query result set. The metadata
--   describes the column structure and data types. To return a
--   <tt>ResultSet</tt> object, use GetQueryResults.
--   
--   <i>See:</i> <a>newResultSet</a> smart constructor.
data ResultSet
ResultSet' :: Maybe [Row] -> Maybe ResultSetMetadata -> ResultSet

-- | The rows in the table.
[$sel:rows:ResultSet'] :: ResultSet -> Maybe [Row]

-- | The metadata that describes the column structure and data types of a
--   table of query results.
[$sel:resultSetMetadata:ResultSet'] :: ResultSet -> Maybe ResultSetMetadata

-- | Create a value of <a>ResultSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rows:ResultSet'</a>, <a>resultSet_rows</a> - The rows in the
--   table.
--   
--   <a>$sel:resultSetMetadata:ResultSet'</a>,
--   <a>resultSet_resultSetMetadata</a> - The metadata that describes the
--   column structure and data types of a table of query results.
newResultSet :: ResultSet

-- | The rows in the table.
resultSet_rows :: Lens' ResultSet (Maybe [Row])

-- | The metadata that describes the column structure and data types of a
--   table of query results.
resultSet_resultSetMetadata :: Lens' ResultSet (Maybe ResultSetMetadata)
instance GHC.Generics.Generic Network.AWS.Athena.Types.ResultSet.ResultSet
instance GHC.Show.Show Network.AWS.Athena.Types.ResultSet.ResultSet
instance GHC.Read.Read Network.AWS.Athena.Types.ResultSet.ResultSet
instance GHC.Classes.Eq Network.AWS.Athena.Types.ResultSet.ResultSet
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.ResultSet.ResultSet
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.ResultSet.ResultSet
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.ResultSet.ResultSet


module Network.AWS.Athena.Types.StatementType
newtype StatementType
StatementType' :: Text -> StatementType
[fromStatementType] :: StatementType -> Text
pattern StatementType_DDL :: StatementType
pattern StatementType_DML :: StatementType
pattern StatementType_UTILITY :: StatementType
instance Network.AWS.Data.XML.ToXML Network.AWS.Athena.Types.StatementType.StatementType
instance Network.AWS.Data.XML.FromXML Network.AWS.Athena.Types.StatementType.StatementType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.Athena.Types.StatementType.StatementType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.StatementType.StatementType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.Athena.Types.StatementType.StatementType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.StatementType.StatementType
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.Types.StatementType.StatementType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.Athena.Types.StatementType.StatementType
instance Network.AWS.Data.Log.ToLog Network.AWS.Athena.Types.StatementType.StatementType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.Athena.Types.StatementType.StatementType
instance Network.AWS.Data.Text.ToText Network.AWS.Athena.Types.StatementType.StatementType
instance Network.AWS.Data.Text.FromText Network.AWS.Athena.Types.StatementType.StatementType
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.StatementType.StatementType
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.StatementType.StatementType
instance GHC.Generics.Generic Network.AWS.Athena.Types.StatementType.StatementType
instance GHC.Classes.Ord Network.AWS.Athena.Types.StatementType.StatementType
instance GHC.Classes.Eq Network.AWS.Athena.Types.StatementType.StatementType
instance GHC.Read.Read Network.AWS.Athena.Types.StatementType.StatementType
instance GHC.Show.Show Network.AWS.Athena.Types.StatementType.StatementType


module Network.AWS.Athena.Types.QueryExecution

-- | Information about a single instance of a query execution.
--   
--   <i>See:</i> <a>newQueryExecution</a> smart constructor.
data QueryExecution
QueryExecution' :: Maybe QueryExecutionStatus -> Maybe Text -> Maybe QueryExecutionStatistics -> Maybe Text -> Maybe QueryExecutionContext -> Maybe EngineVersion -> Maybe ResultConfiguration -> Maybe Text -> Maybe StatementType -> QueryExecution

-- | The completion date, current state, submission time, and state change
--   reason (if applicable) for the query execution.
[$sel:status:QueryExecution'] :: QueryExecution -> Maybe QueryExecutionStatus

-- | The unique identifier for each query execution.
[$sel:queryExecutionId:QueryExecution'] :: QueryExecution -> Maybe Text

-- | Query execution statistics, such as the amount of data scanned, the
--   amount of time that the query took to process, and the type of
--   statement that was run.
[$sel:statistics:QueryExecution'] :: QueryExecution -> Maybe QueryExecutionStatistics

-- | The SQL query statements which the query execution ran.
[$sel:query:QueryExecution'] :: QueryExecution -> Maybe Text

-- | The database in which the query execution occurred.
[$sel:queryExecutionContext:QueryExecution'] :: QueryExecution -> Maybe QueryExecutionContext

-- | The engine version that executed the query.
[$sel:engineVersion:QueryExecution'] :: QueryExecution -> Maybe EngineVersion

-- | The location in Amazon S3 where query results were stored and the
--   encryption option, if any, used for query results. These are known as
--   "client-side settings". If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup.
[$sel:resultConfiguration:QueryExecution'] :: QueryExecution -> Maybe ResultConfiguration

-- | The name of the workgroup in which the query ran.
[$sel:workGroup:QueryExecution'] :: QueryExecution -> Maybe Text

-- | The type of query statement that was run. <tt>DDL</tt> indicates DDL
--   query statements. <tt>DML</tt> indicates DML (Data Manipulation
--   Language) query statements, such as <tt>CREATE TABLE AS SELECT</tt>.
--   <tt>UTILITY</tt> indicates query statements other than DDL and DML,
--   such as <tt>SHOW CREATE TABLE</tt>, or <tt>DESCRIBE TABLE</tt>.
[$sel:statementType:QueryExecution'] :: QueryExecution -> Maybe StatementType

-- | Create a value of <a>QueryExecution</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:QueryExecution'</a>, <a>queryExecution_status</a> - The
--   completion date, current state, submission time, and state change
--   reason (if applicable) for the query execution.
--   
--   <a>$sel:queryExecutionId:QueryExecution'</a>,
--   <a>queryExecution_queryExecutionId</a> - The unique identifier for
--   each query execution.
--   
--   <a>$sel:statistics:QueryExecution'</a>,
--   <a>queryExecution_statistics</a> - Query execution statistics, such as
--   the amount of data scanned, the amount of time that the query took to
--   process, and the type of statement that was run.
--   
--   <a>$sel:query:QueryExecution'</a>, <a>queryExecution_query</a> - The
--   SQL query statements which the query execution ran.
--   
--   <a>$sel:queryExecutionContext:QueryExecution'</a>,
--   <a>queryExecution_queryExecutionContext</a> - The database in which
--   the query execution occurred.
--   
--   <a>$sel:engineVersion:QueryExecution'</a>,
--   <a>queryExecution_engineVersion</a> - The engine version that executed
--   the query.
--   
--   <a>$sel:resultConfiguration:QueryExecution'</a>,
--   <a>queryExecution_resultConfiguration</a> - The location in Amazon S3
--   where query results were stored and the encryption option, if any,
--   used for query results. These are known as "client-side settings". If
--   workgroup settings override client-side settings, then the query uses
--   the location for the query results and the encryption configuration
--   that are specified for the workgroup.
--   
--   <a>$sel:workGroup:QueryExecution'</a>, <a>queryExecution_workGroup</a>
--   - The name of the workgroup in which the query ran.
--   
--   <a>$sel:statementType:QueryExecution'</a>,
--   <a>queryExecution_statementType</a> - The type of query statement that
--   was run. <tt>DDL</tt> indicates DDL query statements. <tt>DML</tt>
--   indicates DML (Data Manipulation Language) query statements, such as
--   <tt>CREATE TABLE AS SELECT</tt>. <tt>UTILITY</tt> indicates query
--   statements other than DDL and DML, such as <tt>SHOW CREATE TABLE</tt>,
--   or <tt>DESCRIBE TABLE</tt>.
newQueryExecution :: QueryExecution

-- | The completion date, current state, submission time, and state change
--   reason (if applicable) for the query execution.
queryExecution_status :: Lens' QueryExecution (Maybe QueryExecutionStatus)

-- | The unique identifier for each query execution.
queryExecution_queryExecutionId :: Lens' QueryExecution (Maybe Text)

-- | Query execution statistics, such as the amount of data scanned, the
--   amount of time that the query took to process, and the type of
--   statement that was run.
queryExecution_statistics :: Lens' QueryExecution (Maybe QueryExecutionStatistics)

-- | The SQL query statements which the query execution ran.
queryExecution_query :: Lens' QueryExecution (Maybe Text)

-- | The database in which the query execution occurred.
queryExecution_queryExecutionContext :: Lens' QueryExecution (Maybe QueryExecutionContext)

-- | The engine version that executed the query.
queryExecution_engineVersion :: Lens' QueryExecution (Maybe EngineVersion)

-- | The location in Amazon S3 where query results were stored and the
--   encryption option, if any, used for query results. These are known as
--   "client-side settings". If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup.
queryExecution_resultConfiguration :: Lens' QueryExecution (Maybe ResultConfiguration)

-- | The name of the workgroup in which the query ran.
queryExecution_workGroup :: Lens' QueryExecution (Maybe Text)

-- | The type of query statement that was run. <tt>DDL</tt> indicates DDL
--   query statements. <tt>DML</tt> indicates DML (Data Manipulation
--   Language) query statements, such as <tt>CREATE TABLE AS SELECT</tt>.
--   <tt>UTILITY</tt> indicates query statements other than DDL and DML,
--   such as <tt>SHOW CREATE TABLE</tt>, or <tt>DESCRIBE TABLE</tt>.
queryExecution_statementType :: Lens' QueryExecution (Maybe StatementType)
instance GHC.Generics.Generic Network.AWS.Athena.Types.QueryExecution.QueryExecution
instance GHC.Show.Show Network.AWS.Athena.Types.QueryExecution.QueryExecution
instance GHC.Read.Read Network.AWS.Athena.Types.QueryExecution.QueryExecution
instance GHC.Classes.Eq Network.AWS.Athena.Types.QueryExecution.QueryExecution
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.QueryExecution.QueryExecution
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.QueryExecution.QueryExecution
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.QueryExecution.QueryExecution


module Network.AWS.Athena.Types.TableMetadata

-- | Contains metadata for a table.
--   
--   <i>See:</i> <a>newTableMetadata</a> smart constructor.
data TableMetadata
TableMetadata' :: Maybe Text -> Maybe POSIX -> Maybe [Column] -> Maybe POSIX -> Maybe [Column] -> Maybe (HashMap Text Text) -> Text -> TableMetadata

-- | The type of table. In Athena, only <tt>EXTERNAL_TABLE</tt> is
--   supported.
[$sel:tableType:TableMetadata'] :: TableMetadata -> Maybe Text

-- | The time that the table was created.
[$sel:createTime:TableMetadata'] :: TableMetadata -> Maybe POSIX

-- | A list of the partition keys in the table.
[$sel:partitionKeys:TableMetadata'] :: TableMetadata -> Maybe [Column]

-- | The last time the table was accessed.
[$sel:lastAccessTime:TableMetadata'] :: TableMetadata -> Maybe POSIX

-- | A list of the columns in the table.
[$sel:columns:TableMetadata'] :: TableMetadata -> Maybe [Column]

-- | A set of custom key/value pairs for table properties.
[$sel:parameters:TableMetadata'] :: TableMetadata -> Maybe (HashMap Text Text)

-- | The name of the table.
[$sel:name:TableMetadata'] :: TableMetadata -> Text

-- | Create a value of <a>TableMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableType:TableMetadata'</a>, <a>tableMetadata_tableType</a> -
--   The type of table. In Athena, only <tt>EXTERNAL_TABLE</tt> is
--   supported.
--   
--   <a>$sel:createTime:TableMetadata'</a>, <a>tableMetadata_createTime</a>
--   - The time that the table was created.
--   
--   <a>$sel:partitionKeys:TableMetadata'</a>,
--   <a>tableMetadata_partitionKeys</a> - A list of the partition keys in
--   the table.
--   
--   <a>$sel:lastAccessTime:TableMetadata'</a>,
--   <a>tableMetadata_lastAccessTime</a> - The last time the table was
--   accessed.
--   
--   <a>$sel:columns:TableMetadata'</a>, <a>tableMetadata_columns</a> - A
--   list of the columns in the table.
--   
--   <a>$sel:parameters:TableMetadata'</a>, <a>tableMetadata_parameters</a>
--   - A set of custom key/value pairs for table properties.
--   
--   <a>$sel:name:TableMetadata'</a>, <a>tableMetadata_name</a> - The name
--   of the table.
newTableMetadata :: Text -> TableMetadata

-- | The type of table. In Athena, only <tt>EXTERNAL_TABLE</tt> is
--   supported.
tableMetadata_tableType :: Lens' TableMetadata (Maybe Text)

-- | The time that the table was created.
tableMetadata_createTime :: Lens' TableMetadata (Maybe UTCTime)

-- | A list of the partition keys in the table.
tableMetadata_partitionKeys :: Lens' TableMetadata (Maybe [Column])

-- | The last time the table was accessed.
tableMetadata_lastAccessTime :: Lens' TableMetadata (Maybe UTCTime)

-- | A list of the columns in the table.
tableMetadata_columns :: Lens' TableMetadata (Maybe [Column])

-- | A set of custom key/value pairs for table properties.
tableMetadata_parameters :: Lens' TableMetadata (Maybe (HashMap Text Text))

-- | The name of the table.
tableMetadata_name :: Lens' TableMetadata Text
instance GHC.Generics.Generic Network.AWS.Athena.Types.TableMetadata.TableMetadata
instance GHC.Show.Show Network.AWS.Athena.Types.TableMetadata.TableMetadata
instance GHC.Read.Read Network.AWS.Athena.Types.TableMetadata.TableMetadata
instance GHC.Classes.Eq Network.AWS.Athena.Types.TableMetadata.TableMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.TableMetadata.TableMetadata
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.TableMetadata.TableMetadata
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.TableMetadata.TableMetadata


module Network.AWS.Athena.Types.Tag

-- | A label that you assign to a resource. In Athena, a resource can be a
--   workgroup or data catalog. Each tag consists of a key and an optional
--   value, both of which you define. For example, you can use tags to
--   categorize Athena workgroups or data catalogs by purpose, owner, or
--   environment. Use a consistent set of tag keys to make it easier to
--   search and filter workgroups or data catalogs in your account. For
--   best practices, see <a>Tagging Best Practices</a>. Tag keys can be
--   from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0
--   to 256 UTF-8 Unicode characters. Tags can use letters and numbers
--   representable in UTF-8, and the following characters: + - = . _ : / @.
--   Tag keys and values are case-sensitive. Tag keys must be unique per
--   resource. If you specify more than one tag, separate them by commas.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | A tag key. The tag key length is from 1 to 128 Unicode characters in
--   UTF-8. You can use letters and numbers representable in UTF-8, and the
--   following characters: + - = . _ : / @. Tag keys are case-sensitive and
--   must be unique per resource.
[$sel:key:Tag'] :: Tag -> Maybe Text

-- | A tag value. The tag value length is from 0 to 256 Unicode characters
--   in UTF-8. You can use letters and numbers representable in UTF-8, and
--   the following characters: + - = . _ : / @. Tag values are
--   case-sensitive.
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - A tag key. The tag key length
--   is from 1 to 128 Unicode characters in UTF-8. You can use letters and
--   numbers representable in UTF-8, and the following characters: + - = .
--   _ : / @. Tag keys are case-sensitive and must be unique per resource.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - A tag value. The tag value
--   length is from 0 to 256 Unicode characters in UTF-8. You can use
--   letters and numbers representable in UTF-8, and the following
--   characters: + - = . _ : / @. Tag values are case-sensitive.
newTag :: Tag

-- | A tag key. The tag key length is from 1 to 128 Unicode characters in
--   UTF-8. You can use letters and numbers representable in UTF-8, and the
--   following characters: + - = . _ : / @. Tag keys are case-sensitive and
--   must be unique per resource.
tag_key :: Lens' Tag (Maybe Text)

-- | A tag value. The tag value length is from 0 to 256 Unicode characters
--   in UTF-8. You can use letters and numbers representable in UTF-8, and
--   the following characters: + - = . _ : / @. Tag values are
--   case-sensitive.
tag_value :: Lens' Tag (Maybe Text)
instance GHC.Generics.Generic Network.AWS.Athena.Types.Tag.Tag
instance GHC.Show.Show Network.AWS.Athena.Types.Tag.Tag
instance GHC.Read.Read Network.AWS.Athena.Types.Tag.Tag
instance GHC.Classes.Eq Network.AWS.Athena.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.Tag.Tag
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.Tag.Tag


module Network.AWS.Athena.Types.UnprocessedNamedQueryId

-- | Information about a named query ID that could not be processed.
--   
--   <i>See:</i> <a>newUnprocessedNamedQueryId</a> smart constructor.
data UnprocessedNamedQueryId
UnprocessedNamedQueryId' :: Maybe Text -> Maybe Text -> Maybe Text -> UnprocessedNamedQueryId

-- | The unique identifier of the named query.
[$sel:namedQueryId:UnprocessedNamedQueryId'] :: UnprocessedNamedQueryId -> Maybe Text

-- | The error message returned when the processing request for the named
--   query failed, if applicable.
[$sel:errorMessage:UnprocessedNamedQueryId'] :: UnprocessedNamedQueryId -> Maybe Text

-- | The error code returned when the processing request for the named
--   query failed, if applicable.
[$sel:errorCode:UnprocessedNamedQueryId'] :: UnprocessedNamedQueryId -> Maybe Text

-- | Create a value of <a>UnprocessedNamedQueryId</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryId:UnprocessedNamedQueryId'</a>,
--   <a>unprocessedNamedQueryId_namedQueryId</a> - The unique identifier of
--   the named query.
--   
--   <a>$sel:errorMessage:UnprocessedNamedQueryId'</a>,
--   <a>unprocessedNamedQueryId_errorMessage</a> - The error message
--   returned when the processing request for the named query failed, if
--   applicable.
--   
--   <a>$sel:errorCode:UnprocessedNamedQueryId'</a>,
--   <a>unprocessedNamedQueryId_errorCode</a> - The error code returned
--   when the processing request for the named query failed, if applicable.
newUnprocessedNamedQueryId :: UnprocessedNamedQueryId

-- | The unique identifier of the named query.
unprocessedNamedQueryId_namedQueryId :: Lens' UnprocessedNamedQueryId (Maybe Text)

-- | The error message returned when the processing request for the named
--   query failed, if applicable.
unprocessedNamedQueryId_errorMessage :: Lens' UnprocessedNamedQueryId (Maybe Text)

-- | The error code returned when the processing request for the named
--   query failed, if applicable.
unprocessedNamedQueryId_errorCode :: Lens' UnprocessedNamedQueryId (Maybe Text)
instance GHC.Generics.Generic Network.AWS.Athena.Types.UnprocessedNamedQueryId.UnprocessedNamedQueryId
instance GHC.Show.Show Network.AWS.Athena.Types.UnprocessedNamedQueryId.UnprocessedNamedQueryId
instance GHC.Read.Read Network.AWS.Athena.Types.UnprocessedNamedQueryId.UnprocessedNamedQueryId
instance GHC.Classes.Eq Network.AWS.Athena.Types.UnprocessedNamedQueryId.UnprocessedNamedQueryId
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.UnprocessedNamedQueryId.UnprocessedNamedQueryId
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.UnprocessedNamedQueryId.UnprocessedNamedQueryId
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.UnprocessedNamedQueryId.UnprocessedNamedQueryId


module Network.AWS.Athena.Types.UnprocessedQueryExecutionId

-- | Describes a query execution that failed to process.
--   
--   <i>See:</i> <a>newUnprocessedQueryExecutionId</a> smart constructor.
data UnprocessedQueryExecutionId
UnprocessedQueryExecutionId' :: Maybe Text -> Maybe Text -> Maybe Text -> UnprocessedQueryExecutionId

-- | The unique identifier of the query execution.
[$sel:queryExecutionId:UnprocessedQueryExecutionId'] :: UnprocessedQueryExecutionId -> Maybe Text

-- | The error message returned when the query execution failed to process,
--   if applicable.
[$sel:errorMessage:UnprocessedQueryExecutionId'] :: UnprocessedQueryExecutionId -> Maybe Text

-- | The error code returned when the query execution failed to process, if
--   applicable.
[$sel:errorCode:UnprocessedQueryExecutionId'] :: UnprocessedQueryExecutionId -> Maybe Text

-- | Create a value of <a>UnprocessedQueryExecutionId</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionId:UnprocessedQueryExecutionId'</a>,
--   <a>unprocessedQueryExecutionId_queryExecutionId</a> - The unique
--   identifier of the query execution.
--   
--   <a>$sel:errorMessage:UnprocessedQueryExecutionId'</a>,
--   <a>unprocessedQueryExecutionId_errorMessage</a> - The error message
--   returned when the query execution failed to process, if applicable.
--   
--   <a>$sel:errorCode:UnprocessedQueryExecutionId'</a>,
--   <a>unprocessedQueryExecutionId_errorCode</a> - The error code returned
--   when the query execution failed to process, if applicable.
newUnprocessedQueryExecutionId :: UnprocessedQueryExecutionId

-- | The unique identifier of the query execution.
unprocessedQueryExecutionId_queryExecutionId :: Lens' UnprocessedQueryExecutionId (Maybe Text)

-- | The error message returned when the query execution failed to process,
--   if applicable.
unprocessedQueryExecutionId_errorMessage :: Lens' UnprocessedQueryExecutionId (Maybe Text)

-- | The error code returned when the query execution failed to process, if
--   applicable.
unprocessedQueryExecutionId_errorCode :: Lens' UnprocessedQueryExecutionId (Maybe Text)
instance GHC.Generics.Generic Network.AWS.Athena.Types.UnprocessedQueryExecutionId.UnprocessedQueryExecutionId
instance GHC.Show.Show Network.AWS.Athena.Types.UnprocessedQueryExecutionId.UnprocessedQueryExecutionId
instance GHC.Read.Read Network.AWS.Athena.Types.UnprocessedQueryExecutionId.UnprocessedQueryExecutionId
instance GHC.Classes.Eq Network.AWS.Athena.Types.UnprocessedQueryExecutionId.UnprocessedQueryExecutionId
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.UnprocessedQueryExecutionId.UnprocessedQueryExecutionId
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.UnprocessedQueryExecutionId.UnprocessedQueryExecutionId
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.UnprocessedQueryExecutionId.UnprocessedQueryExecutionId


module Network.AWS.Athena.Types.WorkGroupConfiguration

-- | The configuration of the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption option, if
--   any, used for query results, whether the Amazon CloudWatch Metrics are
--   enabled for the workgroup and whether workgroup settings override
--   query settings, and the data usage limits for the amount of data
--   scanned per query or per workgroup. The workgroup settings override is
--   specified in <tt>EnforceWorkGroupConfiguration</tt> (true/false) in
--   the <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <i>See:</i> <a>newWorkGroupConfiguration</a> smart constructor.
data WorkGroupConfiguration
WorkGroupConfiguration' :: Maybe Natural -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe EngineVersion -> Maybe ResultConfiguration -> WorkGroupConfiguration

-- | The upper data usage limit (cutoff) for the amount of bytes a single
--   query in a workgroup is allowed to scan.
[$sel:bytesScannedCutoffPerQuery:WorkGroupConfiguration'] :: WorkGroupConfiguration -> Maybe Natural

-- | Indicates that the Amazon CloudWatch metrics are enabled for the
--   workgroup.
[$sel:publishCloudWatchMetricsEnabled:WorkGroupConfiguration'] :: WorkGroupConfiguration -> Maybe Bool

-- | If set to <tt>true</tt>, allows members assigned to a workgroup to
--   reference Amazon S3 Requester Pays buckets in queries. If set to
--   <tt>false</tt>, workgroup members cannot query data from Requester
--   Pays buckets, and queries that retrieve data from Requester Pays
--   buckets cause an error. The default is <tt>false</tt>. For more
--   information about Requester Pays buckets, see <a>Requester Pays
--   Buckets</a> in the <i>Amazon Simple Storage Service Developer
--   Guide</i>.
[$sel:requesterPaysEnabled:WorkGroupConfiguration'] :: WorkGroupConfiguration -> Maybe Bool

-- | If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false", client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
[$sel:enforceWorkGroupConfiguration:WorkGroupConfiguration'] :: WorkGroupConfiguration -> Maybe Bool

-- | The engine version that all queries running on the workgroup use.
--   Queries on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run
--   on the preview engine regardless of this setting.
[$sel:engineVersion:WorkGroupConfiguration'] :: WorkGroupConfiguration -> Maybe EngineVersion

-- | The configuration for the workgroup, which includes the location in
--   Amazon S3 where query results are stored and the encryption option, if
--   any, used for query results. To run the query, you must specify the
--   query results location using one of the ways: either in the workgroup
--   using this setting, or for individual queries (client-side), using
--   ResultConfiguration$OutputLocation. If none of them is set, Athena
--   issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>.
[$sel:resultConfiguration:WorkGroupConfiguration'] :: WorkGroupConfiguration -> Maybe ResultConfiguration

-- | Create a value of <a>WorkGroupConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bytesScannedCutoffPerQuery:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_bytesScannedCutoffPerQuery</a> - The upper
--   data usage limit (cutoff) for the amount of bytes a single query in a
--   workgroup is allowed to scan.
--   
--   <a>$sel:publishCloudWatchMetricsEnabled:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_publishCloudWatchMetricsEnabled</a> -
--   Indicates that the Amazon CloudWatch metrics are enabled for the
--   workgroup.
--   
--   <a>$sel:requesterPaysEnabled:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_requesterPaysEnabled</a> - If set to
--   <tt>true</tt>, allows members assigned to a workgroup to reference
--   Amazon S3 Requester Pays buckets in queries. If set to <tt>false</tt>,
--   workgroup members cannot query data from Requester Pays buckets, and
--   queries that retrieve data from Requester Pays buckets cause an error.
--   The default is <tt>false</tt>. For more information about Requester
--   Pays buckets, see <a>Requester Pays Buckets</a> in the <i>Amazon
--   Simple Storage Service Developer Guide</i>.
--   
--   <a>$sel:enforceWorkGroupConfiguration:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_enforceWorkGroupConfiguration</a> - If set
--   to "true", the settings for the workgroup override client-side
--   settings. If set to "false", client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
--   
--   <a>$sel:engineVersion:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_engineVersion</a> - The engine version that
--   all queries running on the workgroup use. Queries on the
--   <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the preview
--   engine regardless of this setting.
--   
--   <a>$sel:resultConfiguration:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_resultConfiguration</a> - The configuration
--   for the workgroup, which includes the location in Amazon S3 where
--   query results are stored and the encryption option, if any, used for
--   query results. To run the query, you must specify the query results
--   location using one of the ways: either in the workgroup using this
--   setting, or for individual queries (client-side), using
--   ResultConfiguration$OutputLocation. If none of them is set, Athena
--   issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>.
newWorkGroupConfiguration :: WorkGroupConfiguration

-- | The upper data usage limit (cutoff) for the amount of bytes a single
--   query in a workgroup is allowed to scan.
workGroupConfiguration_bytesScannedCutoffPerQuery :: Lens' WorkGroupConfiguration (Maybe Natural)

-- | Indicates that the Amazon CloudWatch metrics are enabled for the
--   workgroup.
workGroupConfiguration_publishCloudWatchMetricsEnabled :: Lens' WorkGroupConfiguration (Maybe Bool)

-- | If set to <tt>true</tt>, allows members assigned to a workgroup to
--   reference Amazon S3 Requester Pays buckets in queries. If set to
--   <tt>false</tt>, workgroup members cannot query data from Requester
--   Pays buckets, and queries that retrieve data from Requester Pays
--   buckets cause an error. The default is <tt>false</tt>. For more
--   information about Requester Pays buckets, see <a>Requester Pays
--   Buckets</a> in the <i>Amazon Simple Storage Service Developer
--   Guide</i>.
workGroupConfiguration_requesterPaysEnabled :: Lens' WorkGroupConfiguration (Maybe Bool)

-- | If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false", client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
workGroupConfiguration_enforceWorkGroupConfiguration :: Lens' WorkGroupConfiguration (Maybe Bool)

-- | The engine version that all queries running on the workgroup use.
--   Queries on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run
--   on the preview engine regardless of this setting.
workGroupConfiguration_engineVersion :: Lens' WorkGroupConfiguration (Maybe EngineVersion)

-- | The configuration for the workgroup, which includes the location in
--   Amazon S3 where query results are stored and the encryption option, if
--   any, used for query results. To run the query, you must specify the
--   query results location using one of the ways: either in the workgroup
--   using this setting, or for individual queries (client-side), using
--   ResultConfiguration$OutputLocation. If none of them is set, Athena
--   issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>.
workGroupConfiguration_resultConfiguration :: Lens' WorkGroupConfiguration (Maybe ResultConfiguration)
instance GHC.Generics.Generic Network.AWS.Athena.Types.WorkGroupConfiguration.WorkGroupConfiguration
instance GHC.Show.Show Network.AWS.Athena.Types.WorkGroupConfiguration.WorkGroupConfiguration
instance GHC.Read.Read Network.AWS.Athena.Types.WorkGroupConfiguration.WorkGroupConfiguration
instance GHC.Classes.Eq Network.AWS.Athena.Types.WorkGroupConfiguration.WorkGroupConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.WorkGroupConfiguration.WorkGroupConfiguration
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.WorkGroupConfiguration.WorkGroupConfiguration
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.WorkGroupConfiguration.WorkGroupConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.WorkGroupConfiguration.WorkGroupConfiguration


module Network.AWS.Athena.Types.WorkGroupConfigurationUpdates

-- | The configuration information that will be updated for this workgroup,
--   which includes the location in Amazon S3 where query results are
--   stored, the encryption option, if any, used for query results, whether
--   the Amazon CloudWatch Metrics are enabled for the workgroup, whether
--   the workgroup settings override the client-side settings, and the data
--   usage limit for the amount of bytes scanned per query, if it is
--   specified.
--   
--   <i>See:</i> <a>newWorkGroupConfigurationUpdates</a> smart constructor.
data WorkGroupConfigurationUpdates
WorkGroupConfigurationUpdates' :: Maybe Natural -> Maybe Bool -> Maybe ResultConfigurationUpdates -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe EngineVersion -> WorkGroupConfigurationUpdates

-- | The upper limit (cutoff) for the amount of bytes a single query in a
--   workgroup is allowed to scan.
[$sel:bytesScannedCutoffPerQuery:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe Natural

-- | Indicates whether this workgroup enables publishing metrics to Amazon
--   CloudWatch.
[$sel:publishCloudWatchMetricsEnabled:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe Bool

-- | The result configuration information about the queries in this
--   workgroup that will be updated. Includes the updated results location
--   and an updated option for encrypting query results.
[$sel:resultConfigurationUpdates:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe ResultConfigurationUpdates

-- | If set to <tt>true</tt>, allows members assigned to a workgroup to
--   specify Amazon S3 Requester Pays buckets in queries. If set to
--   <tt>false</tt>, workgroup members cannot query data from Requester
--   Pays buckets, and queries that retrieve data from Requester Pays
--   buckets cause an error. The default is <tt>false</tt>. For more
--   information about Requester Pays buckets, see <a>Requester Pays
--   Buckets</a> in the <i>Amazon Simple Storage Service Developer
--   Guide</i>.
[$sel:requesterPaysEnabled:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe Bool

-- | If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false" client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
[$sel:enforceWorkGroupConfiguration:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe Bool

-- | Indicates that the data usage control limit per query is removed.
--   WorkGroupConfiguration$BytesScannedCutoffPerQuery
[$sel:removeBytesScannedCutoffPerQuery:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe Bool

-- | The engine version requested when a workgroup is updated. After the
--   update, all queries on the workgroup run on the requested engine
--   version. If no value was previously set, the default is Auto. Queries
--   on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the
--   preview engine regardless of this setting.
[$sel:engineVersion:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe EngineVersion

-- | Create a value of <a>WorkGroupConfigurationUpdates</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bytesScannedCutoffPerQuery:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_bytesScannedCutoffPerQuery</a> - The
--   upper limit (cutoff) for the amount of bytes a single query in a
--   workgroup is allowed to scan.
--   
--   
--   <a>$sel:publishCloudWatchMetricsEnabled:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_publishCloudWatchMetricsEnabled</a> -
--   Indicates whether this workgroup enables publishing metrics to Amazon
--   CloudWatch.
--   
--   <a>$sel:resultConfigurationUpdates:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_resultConfigurationUpdates</a> - The
--   result configuration information about the queries in this workgroup
--   that will be updated. Includes the updated results location and an
--   updated option for encrypting query results.
--   
--   <a>$sel:requesterPaysEnabled:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_requesterPaysEnabled</a> - If set to
--   <tt>true</tt>, allows members assigned to a workgroup to specify
--   Amazon S3 Requester Pays buckets in queries. If set to <tt>false</tt>,
--   workgroup members cannot query data from Requester Pays buckets, and
--   queries that retrieve data from Requester Pays buckets cause an error.
--   The default is <tt>false</tt>. For more information about Requester
--   Pays buckets, see <a>Requester Pays Buckets</a> in the <i>Amazon
--   Simple Storage Service Developer Guide</i>.
--   
--   
--   <a>$sel:enforceWorkGroupConfiguration:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_enforceWorkGroupConfiguration</a> -
--   If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false" client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
--   
--   
--   <a>$sel:removeBytesScannedCutoffPerQuery:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_removeBytesScannedCutoffPerQuery</a>
--   - Indicates that the data usage control limit per query is removed.
--   WorkGroupConfiguration$BytesScannedCutoffPerQuery
--   
--   <a>$sel:engineVersion:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_engineVersion</a> - The engine
--   version requested when a workgroup is updated. After the update, all
--   queries on the workgroup run on the requested engine version. If no
--   value was previously set, the default is Auto. Queries on the
--   <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the preview
--   engine regardless of this setting.
newWorkGroupConfigurationUpdates :: WorkGroupConfigurationUpdates

-- | The upper limit (cutoff) for the amount of bytes a single query in a
--   workgroup is allowed to scan.
workGroupConfigurationUpdates_bytesScannedCutoffPerQuery :: Lens' WorkGroupConfigurationUpdates (Maybe Natural)

-- | Indicates whether this workgroup enables publishing metrics to Amazon
--   CloudWatch.
workGroupConfigurationUpdates_publishCloudWatchMetricsEnabled :: Lens' WorkGroupConfigurationUpdates (Maybe Bool)

-- | The result configuration information about the queries in this
--   workgroup that will be updated. Includes the updated results location
--   and an updated option for encrypting query results.
workGroupConfigurationUpdates_resultConfigurationUpdates :: Lens' WorkGroupConfigurationUpdates (Maybe ResultConfigurationUpdates)

-- | If set to <tt>true</tt>, allows members assigned to a workgroup to
--   specify Amazon S3 Requester Pays buckets in queries. If set to
--   <tt>false</tt>, workgroup members cannot query data from Requester
--   Pays buckets, and queries that retrieve data from Requester Pays
--   buckets cause an error. The default is <tt>false</tt>. For more
--   information about Requester Pays buckets, see <a>Requester Pays
--   Buckets</a> in the <i>Amazon Simple Storage Service Developer
--   Guide</i>.
workGroupConfigurationUpdates_requesterPaysEnabled :: Lens' WorkGroupConfigurationUpdates (Maybe Bool)

-- | If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false" client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
workGroupConfigurationUpdates_enforceWorkGroupConfiguration :: Lens' WorkGroupConfigurationUpdates (Maybe Bool)

-- | Indicates that the data usage control limit per query is removed.
--   WorkGroupConfiguration$BytesScannedCutoffPerQuery
workGroupConfigurationUpdates_removeBytesScannedCutoffPerQuery :: Lens' WorkGroupConfigurationUpdates (Maybe Bool)

-- | The engine version requested when a workgroup is updated. After the
--   update, all queries on the workgroup run on the requested engine
--   version. If no value was previously set, the default is Auto. Queries
--   on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the
--   preview engine regardless of this setting.
workGroupConfigurationUpdates_engineVersion :: Lens' WorkGroupConfigurationUpdates (Maybe EngineVersion)
instance GHC.Generics.Generic Network.AWS.Athena.Types.WorkGroupConfigurationUpdates.WorkGroupConfigurationUpdates
instance GHC.Show.Show Network.AWS.Athena.Types.WorkGroupConfigurationUpdates.WorkGroupConfigurationUpdates
instance GHC.Read.Read Network.AWS.Athena.Types.WorkGroupConfigurationUpdates.WorkGroupConfigurationUpdates
instance GHC.Classes.Eq Network.AWS.Athena.Types.WorkGroupConfigurationUpdates.WorkGroupConfigurationUpdates
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.WorkGroupConfigurationUpdates.WorkGroupConfigurationUpdates
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.WorkGroupConfigurationUpdates.WorkGroupConfigurationUpdates
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.WorkGroupConfigurationUpdates.WorkGroupConfigurationUpdates


module Network.AWS.Athena.Types.WorkGroupState
newtype WorkGroupState
WorkGroupState' :: Text -> WorkGroupState
[fromWorkGroupState] :: WorkGroupState -> Text
pattern WorkGroupState_DISABLED :: WorkGroupState
pattern WorkGroupState_ENABLED :: WorkGroupState
instance Network.AWS.Data.XML.ToXML Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Network.AWS.Data.XML.FromXML Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Network.AWS.Data.Headers.ToHeader Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Network.AWS.Data.Log.ToLog Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Network.AWS.Data.Text.ToText Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Network.AWS.Data.Text.FromText Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance GHC.Generics.Generic Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance GHC.Classes.Ord Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance GHC.Classes.Eq Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance GHC.Read.Read Network.AWS.Athena.Types.WorkGroupState.WorkGroupState
instance GHC.Show.Show Network.AWS.Athena.Types.WorkGroupState.WorkGroupState


module Network.AWS.Athena.Types.WorkGroup

-- | A workgroup, which contains a name, description, creation time, state,
--   and other configuration, listed under WorkGroup$Configuration. Each
--   workgroup enables you to isolate queries for you or your group of
--   users from other queries in the same account, to configure the query
--   results location and the encryption configuration (known as workgroup
--   settings), to enable sending query metrics to Amazon CloudWatch, and
--   to establish per-query data usage control limits for all queries in a
--   workgroup. The workgroup settings override is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <i>See:</i> <a>newWorkGroup</a> smart constructor.
data WorkGroup
WorkGroup' :: Maybe POSIX -> Maybe WorkGroupConfiguration -> Maybe WorkGroupState -> Maybe Text -> Text -> WorkGroup

-- | The date and time the workgroup was created.
[$sel:creationTime:WorkGroup'] :: WorkGroup -> Maybe POSIX

-- | The configuration of the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption
--   configuration, if any, used for query results; whether the Amazon
--   CloudWatch Metrics are enabled for the workgroup; whether workgroup
--   settings override client-side settings; and the data usage limits for
--   the amount of data scanned per query or per workgroup. The workgroup
--   settings override is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
[$sel:configuration:WorkGroup'] :: WorkGroup -> Maybe WorkGroupConfiguration

-- | The state of the workgroup: ENABLED or DISABLED.
[$sel:state:WorkGroup'] :: WorkGroup -> Maybe WorkGroupState

-- | The workgroup description.
[$sel:description:WorkGroup'] :: WorkGroup -> Maybe Text

-- | The workgroup name.
[$sel:name:WorkGroup'] :: WorkGroup -> Text

-- | Create a value of <a>WorkGroup</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:WorkGroup'</a>, <a>workGroup_creationTime</a> -
--   The date and time the workgroup was created.
--   
--   <a>$sel:configuration:WorkGroup'</a>, <a>workGroup_configuration</a> -
--   The configuration of the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption
--   configuration, if any, used for query results; whether the Amazon
--   CloudWatch Metrics are enabled for the workgroup; whether workgroup
--   settings override client-side settings; and the data usage limits for
--   the amount of data scanned per query or per workgroup. The workgroup
--   settings override is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <a>$sel:state:WorkGroup'</a>, <a>workGroup_state</a> - The state of
--   the workgroup: ENABLED or DISABLED.
--   
--   <a>$sel:description:WorkGroup'</a>, <a>workGroup_description</a> - The
--   workgroup description.
--   
--   <a>$sel:name:WorkGroup'</a>, <a>workGroup_name</a> - The workgroup
--   name.
newWorkGroup :: Text -> WorkGroup

-- | The date and time the workgroup was created.
workGroup_creationTime :: Lens' WorkGroup (Maybe UTCTime)

-- | The configuration of the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption
--   configuration, if any, used for query results; whether the Amazon
--   CloudWatch Metrics are enabled for the workgroup; whether workgroup
--   settings override client-side settings; and the data usage limits for
--   the amount of data scanned per query or per workgroup. The workgroup
--   settings override is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
workGroup_configuration :: Lens' WorkGroup (Maybe WorkGroupConfiguration)

-- | The state of the workgroup: ENABLED or DISABLED.
workGroup_state :: Lens' WorkGroup (Maybe WorkGroupState)

-- | The workgroup description.
workGroup_description :: Lens' WorkGroup (Maybe Text)

-- | The workgroup name.
workGroup_name :: Lens' WorkGroup Text
instance GHC.Generics.Generic Network.AWS.Athena.Types.WorkGroup.WorkGroup
instance GHC.Show.Show Network.AWS.Athena.Types.WorkGroup.WorkGroup
instance GHC.Read.Read Network.AWS.Athena.Types.WorkGroup.WorkGroup
instance GHC.Classes.Eq Network.AWS.Athena.Types.WorkGroup.WorkGroup
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.WorkGroup.WorkGroup
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.WorkGroup.WorkGroup
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.WorkGroup.WorkGroup


module Network.AWS.Athena.Types.WorkGroupSummary

-- | The summary information for the workgroup, which includes its name,
--   state, description, and the date and time it was created.
--   
--   <i>See:</i> <a>newWorkGroupSummary</a> smart constructor.
data WorkGroupSummary
WorkGroupSummary' :: Maybe POSIX -> Maybe Text -> Maybe WorkGroupState -> Maybe EngineVersion -> Maybe Text -> WorkGroupSummary

-- | The workgroup creation date and time.
[$sel:creationTime:WorkGroupSummary'] :: WorkGroupSummary -> Maybe POSIX

-- | The name of the workgroup.
[$sel:name:WorkGroupSummary'] :: WorkGroupSummary -> Maybe Text

-- | The state of the workgroup.
[$sel:state:WorkGroupSummary'] :: WorkGroupSummary -> Maybe WorkGroupState

-- | The engine version setting for all queries on the workgroup. Queries
--   on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the
--   preview engine regardless of this setting.
[$sel:engineVersion:WorkGroupSummary'] :: WorkGroupSummary -> Maybe EngineVersion

-- | The workgroup description.
[$sel:description:WorkGroupSummary'] :: WorkGroupSummary -> Maybe Text

-- | Create a value of <a>WorkGroupSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:WorkGroupSummary'</a>,
--   <a>workGroupSummary_creationTime</a> - The workgroup creation date and
--   time.
--   
--   <a>$sel:name:WorkGroupSummary'</a>, <a>workGroupSummary_name</a> - The
--   name of the workgroup.
--   
--   <a>$sel:state:WorkGroupSummary'</a>, <a>workGroupSummary_state</a> -
--   The state of the workgroup.
--   
--   <a>$sel:engineVersion:WorkGroupSummary'</a>,
--   <a>workGroupSummary_engineVersion</a> - The engine version setting for
--   all queries on the workgroup. Queries on the
--   <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the preview
--   engine regardless of this setting.
--   
--   <a>$sel:description:WorkGroupSummary'</a>,
--   <a>workGroupSummary_description</a> - The workgroup description.
newWorkGroupSummary :: WorkGroupSummary

-- | The workgroup creation date and time.
workGroupSummary_creationTime :: Lens' WorkGroupSummary (Maybe UTCTime)

-- | The name of the workgroup.
workGroupSummary_name :: Lens' WorkGroupSummary (Maybe Text)

-- | The state of the workgroup.
workGroupSummary_state :: Lens' WorkGroupSummary (Maybe WorkGroupState)

-- | The engine version setting for all queries on the workgroup. Queries
--   on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the
--   preview engine regardless of this setting.
workGroupSummary_engineVersion :: Lens' WorkGroupSummary (Maybe EngineVersion)

-- | The workgroup description.
workGroupSummary_description :: Lens' WorkGroupSummary (Maybe Text)
instance GHC.Generics.Generic Network.AWS.Athena.Types.WorkGroupSummary.WorkGroupSummary
instance GHC.Show.Show Network.AWS.Athena.Types.WorkGroupSummary.WorkGroupSummary
instance GHC.Read.Read Network.AWS.Athena.Types.WorkGroupSummary.WorkGroupSummary
instance GHC.Classes.Eq Network.AWS.Athena.Types.WorkGroupSummary.WorkGroupSummary
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.Athena.Types.WorkGroupSummary.WorkGroupSummary
instance Data.Hashable.Class.Hashable Network.AWS.Athena.Types.WorkGroupSummary.WorkGroupSummary
instance Control.DeepSeq.NFData Network.AWS.Athena.Types.WorkGroupSummary.WorkGroupSummary


module Network.AWS.Athena.Types

-- | API version <tt>2017-05-18</tt> of the Amazon Athena SDK
--   configuration.
defaultService :: Service

-- | Indicates that something is wrong with the input to the request. For
--   example, a required parameter may be missing or out of range.
_InvalidRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A resource, such as a workgroup, was not found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Indicates a platform issue, which may be due to a transient condition
--   or outage.
_InternalServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An exception that Athena received when it called a custom metastore.
--   Occurs if the error is not caused by user input
--   (<tt>InvalidRequestException</tt>) or from the Athena platform
--   (<tt>InternalServerException</tt>). For example, if a user-created
--   Lambda function is missing permissions, the Lambda <tt>4XX</tt>
--   exception is returned in a <tt>MetadataException</tt>.
_MetadataException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Indicates that the request was throttled.
_TooManyRequestsException :: AsError a => Getting (First ServiceError) a ServiceError
newtype ColumnNullable
ColumnNullable' :: Text -> ColumnNullable
[fromColumnNullable] :: ColumnNullable -> Text
pattern ColumnNullable_NOT_NULL :: ColumnNullable
pattern ColumnNullable_NULLABLE :: ColumnNullable
pattern ColumnNullable_UNKNOWN :: ColumnNullable
newtype DataCatalogType
DataCatalogType' :: Text -> DataCatalogType
[fromDataCatalogType] :: DataCatalogType -> Text
pattern DataCatalogType_GLUE :: DataCatalogType
pattern DataCatalogType_HIVE :: DataCatalogType
pattern DataCatalogType_LAMBDA :: DataCatalogType
newtype EncryptionOption
EncryptionOption' :: Text -> EncryptionOption
[fromEncryptionOption] :: EncryptionOption -> Text
pattern EncryptionOption_CSE_KMS :: EncryptionOption
pattern EncryptionOption_SSE_KMS :: EncryptionOption
pattern EncryptionOption_SSE_S3 :: EncryptionOption
newtype QueryExecutionState
QueryExecutionState' :: Text -> QueryExecutionState
[fromQueryExecutionState] :: QueryExecutionState -> Text
pattern QueryExecutionState_CANCELLED :: QueryExecutionState
pattern QueryExecutionState_FAILED :: QueryExecutionState
pattern QueryExecutionState_QUEUED :: QueryExecutionState
pattern QueryExecutionState_RUNNING :: QueryExecutionState
pattern QueryExecutionState_SUCCEEDED :: QueryExecutionState
newtype StatementType
StatementType' :: Text -> StatementType
[fromStatementType] :: StatementType -> Text
pattern StatementType_DDL :: StatementType
pattern StatementType_DML :: StatementType
pattern StatementType_UTILITY :: StatementType
newtype WorkGroupState
WorkGroupState' :: Text -> WorkGroupState
[fromWorkGroupState] :: WorkGroupState -> Text
pattern WorkGroupState_DISABLED :: WorkGroupState
pattern WorkGroupState_ENABLED :: WorkGroupState

-- | Contains metadata for a column in a table.
--   
--   <i>See:</i> <a>newColumn</a> smart constructor.
data Column
Column' :: Maybe Text -> Maybe Text -> Text -> Column

-- | Optional information about the column.
[$sel:comment:Column'] :: Column -> Maybe Text

-- | The data type of the column.
[$sel:type':Column'] :: Column -> Maybe Text

-- | The name of the column.
[$sel:name:Column'] :: Column -> Text

-- | Create a value of <a>Column</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:comment:Column'</a>, <a>column_comment</a> - Optional
--   information about the column.
--   
--   <a>$sel:type':Column'</a>, <a>column_type</a> - The data type of the
--   column.
--   
--   <a>$sel:name:Column'</a>, <a>column_name</a> - The name of the column.
newColumn :: Text -> Column

-- | Optional information about the column.
column_comment :: Lens' Column (Maybe Text)

-- | The data type of the column.
column_type :: Lens' Column (Maybe Text)

-- | The name of the column.
column_name :: Lens' Column Text

-- | Information about the columns in a query execution result.
--   
--   <i>See:</i> <a>newColumnInfo</a> smart constructor.
data ColumnInfo
ColumnInfo' :: Maybe Text -> Maybe Text -> Maybe Int -> Maybe Bool -> Maybe ColumnNullable -> Maybe Text -> Maybe Text -> Maybe Int -> Text -> Text -> ColumnInfo

-- | The catalog to which the query results belong.
[$sel:catalogName:ColumnInfo'] :: ColumnInfo -> Maybe Text

-- | The table name for the query results.
[$sel:tableName:ColumnInfo'] :: ColumnInfo -> Maybe Text

-- | For <tt>DECIMAL</tt> data types, specifies the total number of digits,
--   up to 38. For performance reasons, we recommend up to 18 digits.
[$sel:precision:ColumnInfo'] :: ColumnInfo -> Maybe Int

-- | Indicates whether values in the column are case-sensitive.
[$sel:caseSensitive:ColumnInfo'] :: ColumnInfo -> Maybe Bool

-- | Indicates the column's nullable status.
[$sel:nullable:ColumnInfo'] :: ColumnInfo -> Maybe ColumnNullable

-- | A column label.
[$sel:label:ColumnInfo'] :: ColumnInfo -> Maybe Text

-- | The schema name (database name) to which the query results belong.
[$sel:schemaName:ColumnInfo'] :: ColumnInfo -> Maybe Text

-- | For <tt>DECIMAL</tt> data types, specifies the total number of digits
--   in the fractional part of the value. Defaults to 0.
[$sel:scale:ColumnInfo'] :: ColumnInfo -> Maybe Int

-- | The name of the column.
[$sel:name:ColumnInfo'] :: ColumnInfo -> Text

-- | The data type of the column.
[$sel:type':ColumnInfo'] :: ColumnInfo -> Text

-- | Create a value of <a>ColumnInfo</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogName:ColumnInfo'</a>, <a>columnInfo_catalogName</a> -
--   The catalog to which the query results belong.
--   
--   <a>$sel:tableName:ColumnInfo'</a>, <a>columnInfo_tableName</a> - The
--   table name for the query results.
--   
--   <a>$sel:precision:ColumnInfo'</a>, <a>columnInfo_precision</a> - For
--   <tt>DECIMAL</tt> data types, specifies the total number of digits, up
--   to 38. For performance reasons, we recommend up to 18 digits.
--   
--   <a>$sel:caseSensitive:ColumnInfo'</a>, <a>columnInfo_caseSensitive</a>
--   - Indicates whether values in the column are case-sensitive.
--   
--   <a>$sel:nullable:ColumnInfo'</a>, <a>columnInfo_nullable</a> -
--   Indicates the column's nullable status.
--   
--   <a>$sel:label:ColumnInfo'</a>, <a>columnInfo_label</a> - A column
--   label.
--   
--   <a>$sel:schemaName:ColumnInfo'</a>, <a>columnInfo_schemaName</a> - The
--   schema name (database name) to which the query results belong.
--   
--   <a>$sel:scale:ColumnInfo'</a>, <a>columnInfo_scale</a> - For
--   <tt>DECIMAL</tt> data types, specifies the total number of digits in
--   the fractional part of the value. Defaults to 0.
--   
--   <a>$sel:name:ColumnInfo'</a>, <a>columnInfo_name</a> - The name of the
--   column.
--   
--   <a>$sel:type':ColumnInfo'</a>, <a>columnInfo_type</a> - The data type
--   of the column.
newColumnInfo :: Text -> Text -> ColumnInfo

-- | The catalog to which the query results belong.
columnInfo_catalogName :: Lens' ColumnInfo (Maybe Text)

-- | The table name for the query results.
columnInfo_tableName :: Lens' ColumnInfo (Maybe Text)

-- | For <tt>DECIMAL</tt> data types, specifies the total number of digits,
--   up to 38. For performance reasons, we recommend up to 18 digits.
columnInfo_precision :: Lens' ColumnInfo (Maybe Int)

-- | Indicates whether values in the column are case-sensitive.
columnInfo_caseSensitive :: Lens' ColumnInfo (Maybe Bool)

-- | Indicates the column's nullable status.
columnInfo_nullable :: Lens' ColumnInfo (Maybe ColumnNullable)

-- | A column label.
columnInfo_label :: Lens' ColumnInfo (Maybe Text)

-- | The schema name (database name) to which the query results belong.
columnInfo_schemaName :: Lens' ColumnInfo (Maybe Text)

-- | For <tt>DECIMAL</tt> data types, specifies the total number of digits
--   in the fractional part of the value. Defaults to 0.
columnInfo_scale :: Lens' ColumnInfo (Maybe Int)

-- | The name of the column.
columnInfo_name :: Lens' ColumnInfo Text

-- | The data type of the column.
columnInfo_type :: Lens' ColumnInfo Text

-- | Contains information about a data catalog in an Amazon Web Services
--   account.
--   
--   <i>See:</i> <a>newDataCatalog</a> smart constructor.
data DataCatalog
DataCatalog' :: Maybe Text -> Maybe (HashMap Text Text) -> Text -> DataCatalogType -> DataCatalog

-- | An optional description of the data catalog.
[$sel:description:DataCatalog'] :: DataCatalog -> Maybe Text

-- | Specifies the Lambda function or functions to use for the data
--   catalog. This is a mapping whose values depend on the catalog type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li></ul></li>
--   </ul>
[$sel:parameters:DataCatalog'] :: DataCatalog -> Maybe (HashMap Text Text)

-- | The name of the data catalog. The catalog name must be unique for the
--   Amazon Web Services account and can use a maximum of 128 alphanumeric,
--   underscore, at sign, or hyphen characters.
[$sel:name:DataCatalog'] :: DataCatalog -> Text

-- | The type of data catalog to create: <tt>LAMBDA</tt> for a federated
--   catalog, <tt>HIVE</tt> for an external hive metastore, or
--   <tt>GLUE</tt> for an Glue Data Catalog.
[$sel:type':DataCatalog'] :: DataCatalog -> DataCatalogType

-- | Create a value of <a>DataCatalog</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:DataCatalog'</a>, <a>dataCatalog_description</a> -
--   An optional description of the data catalog.
--   
--   <a>$sel:parameters:DataCatalog'</a>, <a>dataCatalog_parameters</a> -
--   Specifies the Lambda function or functions to use for the data
--   catalog. This is a mapping whose values depend on the catalog type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li></ul></li>
--   </ul>
--   
--   <a>$sel:name:DataCatalog'</a>, <a>dataCatalog_name</a> - The name of
--   the data catalog. The catalog name must be unique for the Amazon Web
--   Services account and can use a maximum of 128 alphanumeric,
--   underscore, at sign, or hyphen characters.
--   
--   <a>$sel:type':DataCatalog'</a>, <a>dataCatalog_type</a> - The type of
--   data catalog to create: <tt>LAMBDA</tt> for a federated catalog,
--   <tt>HIVE</tt> for an external hive metastore, or <tt>GLUE</tt> for an
--   Glue Data Catalog.
newDataCatalog :: Text -> DataCatalogType -> DataCatalog

-- | An optional description of the data catalog.
dataCatalog_description :: Lens' DataCatalog (Maybe Text)

-- | Specifies the Lambda function or functions to use for the data
--   catalog. This is a mapping whose values depend on the catalog type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li></ul></li>
--   </ul>
dataCatalog_parameters :: Lens' DataCatalog (Maybe (HashMap Text Text))

-- | The name of the data catalog. The catalog name must be unique for the
--   Amazon Web Services account and can use a maximum of 128 alphanumeric,
--   underscore, at sign, or hyphen characters.
dataCatalog_name :: Lens' DataCatalog Text

-- | The type of data catalog to create: <tt>LAMBDA</tt> for a federated
--   catalog, <tt>HIVE</tt> for an external hive metastore, or
--   <tt>GLUE</tt> for an Glue Data Catalog.
dataCatalog_type :: Lens' DataCatalog DataCatalogType

-- | The summary information for the data catalog, which includes its name
--   and type.
--   
--   <i>See:</i> <a>newDataCatalogSummary</a> smart constructor.
data DataCatalogSummary
DataCatalogSummary' :: Maybe Text -> Maybe DataCatalogType -> DataCatalogSummary

-- | The name of the data catalog.
[$sel:catalogName:DataCatalogSummary'] :: DataCatalogSummary -> Maybe Text

-- | The data catalog type.
[$sel:type':DataCatalogSummary'] :: DataCatalogSummary -> Maybe DataCatalogType

-- | Create a value of <a>DataCatalogSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogName:DataCatalogSummary'</a>,
--   <a>dataCatalogSummary_catalogName</a> - The name of the data catalog.
--   
--   <a>$sel:type':DataCatalogSummary'</a>, <a>dataCatalogSummary_type</a>
--   - The data catalog type.
newDataCatalogSummary :: DataCatalogSummary

-- | The name of the data catalog.
dataCatalogSummary_catalogName :: Lens' DataCatalogSummary (Maybe Text)

-- | The data catalog type.
dataCatalogSummary_type :: Lens' DataCatalogSummary (Maybe DataCatalogType)

-- | Contains metadata information for a database in a data catalog.
--   
--   <i>See:</i> <a>newDatabase</a> smart constructor.
data Database
Database' :: Maybe Text -> Maybe (HashMap Text Text) -> Text -> Database

-- | An optional description of the database.
[$sel:description:Database'] :: Database -> Maybe Text

-- | A set of custom key/value pairs.
[$sel:parameters:Database'] :: Database -> Maybe (HashMap Text Text)

-- | The name of the database.
[$sel:name:Database'] :: Database -> Text

-- | Create a value of <a>Database</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:Database'</a>, <a>database_description</a> - An
--   optional description of the database.
--   
--   <a>$sel:parameters:Database'</a>, <a>database_parameters</a> - A set
--   of custom key/value pairs.
--   
--   <a>$sel:name:Database'</a>, <a>database_name</a> - The name of the
--   database.
newDatabase :: Text -> Database

-- | An optional description of the database.
database_description :: Lens' Database (Maybe Text)

-- | A set of custom key/value pairs.
database_parameters :: Lens' Database (Maybe (HashMap Text Text))

-- | The name of the database.
database_name :: Lens' Database Text

-- | A piece of data (a field in the table).
--   
--   <i>See:</i> <a>newDatum</a> smart constructor.
data Datum
Datum' :: Maybe Text -> Datum

-- | The value of the datum.
[$sel:varCharValue:Datum'] :: Datum -> Maybe Text

-- | Create a value of <a>Datum</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:varCharValue:Datum'</a>, <a>datum_varCharValue</a> - The value
--   of the datum.
newDatum :: Datum

-- | The value of the datum.
datum_varCharValue :: Lens' Datum (Maybe Text)

-- | If query results are encrypted in Amazon S3, indicates the encryption
--   option used (for example, <tt>SSE-KMS</tt> or <tt>CSE-KMS</tt>) and
--   key information.
--   
--   <i>See:</i> <a>newEncryptionConfiguration</a> smart constructor.
data EncryptionConfiguration
EncryptionConfiguration' :: Maybe Text -> EncryptionOption -> EncryptionConfiguration

-- | For <tt>SSE-KMS</tt> and <tt>CSE-KMS</tt>, this is the KMS key ARN or
--   ID.
[$sel:kmsKey:EncryptionConfiguration'] :: EncryptionConfiguration -> Maybe Text

-- | Indicates whether Amazon S3 server-side encryption with Amazon
--   S3-managed keys (<tt>SSE-S3</tt>), server-side encryption with
--   KMS-managed keys (<tt>SSE-KMS</tt>), or client-side encryption with
--   KMS-managed keys (CSE-KMS) is used.
--   
--   If a query runs in a workgroup and the workgroup overrides client-side
--   settings, then the workgroup's setting for encryption is used. It
--   specifies whether query results must be encrypted, for all queries
--   that run in this workgroup.
[$sel:encryptionOption:EncryptionConfiguration'] :: EncryptionConfiguration -> EncryptionOption

-- | Create a value of <a>EncryptionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsKey:EncryptionConfiguration'</a>,
--   <a>encryptionConfiguration_kmsKey</a> - For <tt>SSE-KMS</tt> and
--   <tt>CSE-KMS</tt>, this is the KMS key ARN or ID.
--   
--   <a>$sel:encryptionOption:EncryptionConfiguration'</a>,
--   <a>encryptionConfiguration_encryptionOption</a> - Indicates whether
--   Amazon S3 server-side encryption with Amazon S3-managed keys
--   (<tt>SSE-S3</tt>), server-side encryption with KMS-managed keys
--   (<tt>SSE-KMS</tt>), or client-side encryption with KMS-managed keys
--   (CSE-KMS) is used.
--   
--   If a query runs in a workgroup and the workgroup overrides client-side
--   settings, then the workgroup's setting for encryption is used. It
--   specifies whether query results must be encrypted, for all queries
--   that run in this workgroup.
newEncryptionConfiguration :: EncryptionOption -> EncryptionConfiguration

-- | For <tt>SSE-KMS</tt> and <tt>CSE-KMS</tt>, this is the KMS key ARN or
--   ID.
encryptionConfiguration_kmsKey :: Lens' EncryptionConfiguration (Maybe Text)

-- | Indicates whether Amazon S3 server-side encryption with Amazon
--   S3-managed keys (<tt>SSE-S3</tt>), server-side encryption with
--   KMS-managed keys (<tt>SSE-KMS</tt>), or client-side encryption with
--   KMS-managed keys (CSE-KMS) is used.
--   
--   If a query runs in a workgroup and the workgroup overrides client-side
--   settings, then the workgroup's setting for encryption is used. It
--   specifies whether query results must be encrypted, for all queries
--   that run in this workgroup.
encryptionConfiguration_encryptionOption :: Lens' EncryptionConfiguration EncryptionOption

-- | The Athena engine version for running queries.
--   
--   <i>See:</i> <a>newEngineVersion</a> smart constructor.
data EngineVersion
EngineVersion' :: Maybe Text -> Maybe Text -> EngineVersion

-- | Read only. The engine version on which the query runs. If the user
--   requests a valid engine version other than Auto, the effective engine
--   version is the same as the engine version that the user requested. If
--   the user requests Auto, the effective engine version is chosen by
--   Athena. When a request to update the engine version is made by a
--   <tt>CreateWorkGroup</tt> or <tt>UpdateWorkGroup</tt> operation, the
--   <tt>EffectiveEngineVersion</tt> field is ignored.
[$sel:effectiveEngineVersion:EngineVersion'] :: EngineVersion -> Maybe Text

-- | The engine version requested by the user. Possible values are
--   determined by the output of <tt>ListEngineVersions</tt>, including
--   Auto. The default is Auto.
[$sel:selectedEngineVersion:EngineVersion'] :: EngineVersion -> Maybe Text

-- | Create a value of <a>EngineVersion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:effectiveEngineVersion:EngineVersion'</a>,
--   <a>engineVersion_effectiveEngineVersion</a> - Read only. The engine
--   version on which the query runs. If the user requests a valid engine
--   version other than Auto, the effective engine version is the same as
--   the engine version that the user requested. If the user requests Auto,
--   the effective engine version is chosen by Athena. When a request to
--   update the engine version is made by a <tt>CreateWorkGroup</tt> or
--   <tt>UpdateWorkGroup</tt> operation, the
--   <tt>EffectiveEngineVersion</tt> field is ignored.
--   
--   <a>$sel:selectedEngineVersion:EngineVersion'</a>,
--   <a>engineVersion_selectedEngineVersion</a> - The engine version
--   requested by the user. Possible values are determined by the output of
--   <tt>ListEngineVersions</tt>, including Auto. The default is Auto.
newEngineVersion :: EngineVersion

-- | Read only. The engine version on which the query runs. If the user
--   requests a valid engine version other than Auto, the effective engine
--   version is the same as the engine version that the user requested. If
--   the user requests Auto, the effective engine version is chosen by
--   Athena. When a request to update the engine version is made by a
--   <tt>CreateWorkGroup</tt> or <tt>UpdateWorkGroup</tt> operation, the
--   <tt>EffectiveEngineVersion</tt> field is ignored.
engineVersion_effectiveEngineVersion :: Lens' EngineVersion (Maybe Text)

-- | The engine version requested by the user. Possible values are
--   determined by the output of <tt>ListEngineVersions</tt>, including
--   Auto. The default is Auto.
engineVersion_selectedEngineVersion :: Lens' EngineVersion (Maybe Text)

-- | A query, where <tt>QueryString</tt> is the list of SQL query
--   statements that comprise the query.
--   
--   <i>See:</i> <a>newNamedQuery</a> smart constructor.
data NamedQuery
NamedQuery' :: Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> NamedQuery

-- | The unique identifier of the query.
[$sel:namedQueryId:NamedQuery'] :: NamedQuery -> Maybe Text

-- | The query description.
[$sel:description:NamedQuery'] :: NamedQuery -> Maybe Text

-- | The name of the workgroup that contains the named query.
[$sel:workGroup:NamedQuery'] :: NamedQuery -> Maybe Text

-- | The query name.
[$sel:name:NamedQuery'] :: NamedQuery -> Text

-- | The database to which the query belongs.
[$sel:database:NamedQuery'] :: NamedQuery -> Text

-- | The SQL query statements that comprise the query.
[$sel:queryString:NamedQuery'] :: NamedQuery -> Text

-- | Create a value of <a>NamedQuery</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryId:NamedQuery'</a>, <a>namedQuery_namedQueryId</a> -
--   The unique identifier of the query.
--   
--   <a>$sel:description:NamedQuery'</a>, <a>namedQuery_description</a> -
--   The query description.
--   
--   <a>$sel:workGroup:NamedQuery'</a>, <a>namedQuery_workGroup</a> - The
--   name of the workgroup that contains the named query.
--   
--   <a>$sel:name:NamedQuery'</a>, <a>namedQuery_name</a> - The query name.
--   
--   <a>$sel:database:NamedQuery'</a>, <a>namedQuery_database</a> - The
--   database to which the query belongs.
--   
--   <a>$sel:queryString:NamedQuery'</a>, <a>namedQuery_queryString</a> -
--   The SQL query statements that comprise the query.
newNamedQuery :: Text -> Text -> Text -> NamedQuery

-- | The unique identifier of the query.
namedQuery_namedQueryId :: Lens' NamedQuery (Maybe Text)

-- | The query description.
namedQuery_description :: Lens' NamedQuery (Maybe Text)

-- | The name of the workgroup that contains the named query.
namedQuery_workGroup :: Lens' NamedQuery (Maybe Text)

-- | The query name.
namedQuery_name :: Lens' NamedQuery Text

-- | The database to which the query belongs.
namedQuery_database :: Lens' NamedQuery Text

-- | The SQL query statements that comprise the query.
namedQuery_queryString :: Lens' NamedQuery Text

-- | A prepared SQL statement for use with Athena.
--   
--   <i>See:</i> <a>newPreparedStatement</a> smart constructor.
data PreparedStatement
PreparedStatement' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> PreparedStatement

-- | The name of the workgroup to which the prepared statement belongs.
[$sel:workGroupName:PreparedStatement'] :: PreparedStatement -> Maybe Text

-- | The name of the prepared statement.
[$sel:statementName:PreparedStatement'] :: PreparedStatement -> Maybe Text

-- | The query string for the prepared statement.
[$sel:queryStatement:PreparedStatement'] :: PreparedStatement -> Maybe Text

-- | The last modified time of the prepared statement.
[$sel:lastModifiedTime:PreparedStatement'] :: PreparedStatement -> Maybe POSIX

-- | The description of the prepared statement.
[$sel:description:PreparedStatement'] :: PreparedStatement -> Maybe Text

-- | Create a value of <a>PreparedStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:workGroupName:PreparedStatement'</a>,
--   <a>preparedStatement_workGroupName</a> - The name of the workgroup to
--   which the prepared statement belongs.
--   
--   <a>$sel:statementName:PreparedStatement'</a>,
--   <a>preparedStatement_statementName</a> - The name of the prepared
--   statement.
--   
--   <a>$sel:queryStatement:PreparedStatement'</a>,
--   <a>preparedStatement_queryStatement</a> - The query string for the
--   prepared statement.
--   
--   <a>$sel:lastModifiedTime:PreparedStatement'</a>,
--   <a>preparedStatement_lastModifiedTime</a> - The last modified time of
--   the prepared statement.
--   
--   <a>$sel:description:PreparedStatement'</a>,
--   <a>preparedStatement_description</a> - The description of the prepared
--   statement.
newPreparedStatement :: PreparedStatement

-- | The name of the workgroup to which the prepared statement belongs.
preparedStatement_workGroupName :: Lens' PreparedStatement (Maybe Text)

-- | The name of the prepared statement.
preparedStatement_statementName :: Lens' PreparedStatement (Maybe Text)

-- | The query string for the prepared statement.
preparedStatement_queryStatement :: Lens' PreparedStatement (Maybe Text)

-- | The last modified time of the prepared statement.
preparedStatement_lastModifiedTime :: Lens' PreparedStatement (Maybe UTCTime)

-- | The description of the prepared statement.
preparedStatement_description :: Lens' PreparedStatement (Maybe Text)

-- | The name and last modified time of the prepared statement.
--   
--   <i>See:</i> <a>newPreparedStatementSummary</a> smart constructor.
data PreparedStatementSummary
PreparedStatementSummary' :: Maybe Text -> Maybe POSIX -> PreparedStatementSummary

-- | The name of the prepared statement.
[$sel:statementName:PreparedStatementSummary'] :: PreparedStatementSummary -> Maybe Text

-- | The last modified time of the prepared statement.
[$sel:lastModifiedTime:PreparedStatementSummary'] :: PreparedStatementSummary -> Maybe POSIX

-- | Create a value of <a>PreparedStatementSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statementName:PreparedStatementSummary'</a>,
--   <a>preparedStatementSummary_statementName</a> - The name of the
--   prepared statement.
--   
--   <a>$sel:lastModifiedTime:PreparedStatementSummary'</a>,
--   <a>preparedStatementSummary_lastModifiedTime</a> - The last modified
--   time of the prepared statement.
newPreparedStatementSummary :: PreparedStatementSummary

-- | The name of the prepared statement.
preparedStatementSummary_statementName :: Lens' PreparedStatementSummary (Maybe Text)

-- | The last modified time of the prepared statement.
preparedStatementSummary_lastModifiedTime :: Lens' PreparedStatementSummary (Maybe UTCTime)

-- | Information about a single instance of a query execution.
--   
--   <i>See:</i> <a>newQueryExecution</a> smart constructor.
data QueryExecution
QueryExecution' :: Maybe QueryExecutionStatus -> Maybe Text -> Maybe QueryExecutionStatistics -> Maybe Text -> Maybe QueryExecutionContext -> Maybe EngineVersion -> Maybe ResultConfiguration -> Maybe Text -> Maybe StatementType -> QueryExecution

-- | The completion date, current state, submission time, and state change
--   reason (if applicable) for the query execution.
[$sel:status:QueryExecution'] :: QueryExecution -> Maybe QueryExecutionStatus

-- | The unique identifier for each query execution.
[$sel:queryExecutionId:QueryExecution'] :: QueryExecution -> Maybe Text

-- | Query execution statistics, such as the amount of data scanned, the
--   amount of time that the query took to process, and the type of
--   statement that was run.
[$sel:statistics:QueryExecution'] :: QueryExecution -> Maybe QueryExecutionStatistics

-- | The SQL query statements which the query execution ran.
[$sel:query:QueryExecution'] :: QueryExecution -> Maybe Text

-- | The database in which the query execution occurred.
[$sel:queryExecutionContext:QueryExecution'] :: QueryExecution -> Maybe QueryExecutionContext

-- | The engine version that executed the query.
[$sel:engineVersion:QueryExecution'] :: QueryExecution -> Maybe EngineVersion

-- | The location in Amazon S3 where query results were stored and the
--   encryption option, if any, used for query results. These are known as
--   "client-side settings". If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup.
[$sel:resultConfiguration:QueryExecution'] :: QueryExecution -> Maybe ResultConfiguration

-- | The name of the workgroup in which the query ran.
[$sel:workGroup:QueryExecution'] :: QueryExecution -> Maybe Text

-- | The type of query statement that was run. <tt>DDL</tt> indicates DDL
--   query statements. <tt>DML</tt> indicates DML (Data Manipulation
--   Language) query statements, such as <tt>CREATE TABLE AS SELECT</tt>.
--   <tt>UTILITY</tt> indicates query statements other than DDL and DML,
--   such as <tt>SHOW CREATE TABLE</tt>, or <tt>DESCRIBE TABLE</tt>.
[$sel:statementType:QueryExecution'] :: QueryExecution -> Maybe StatementType

-- | Create a value of <a>QueryExecution</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:QueryExecution'</a>, <a>queryExecution_status</a> - The
--   completion date, current state, submission time, and state change
--   reason (if applicable) for the query execution.
--   
--   <a>$sel:queryExecutionId:QueryExecution'</a>,
--   <a>queryExecution_queryExecutionId</a> - The unique identifier for
--   each query execution.
--   
--   <a>$sel:statistics:QueryExecution'</a>,
--   <a>queryExecution_statistics</a> - Query execution statistics, such as
--   the amount of data scanned, the amount of time that the query took to
--   process, and the type of statement that was run.
--   
--   <a>$sel:query:QueryExecution'</a>, <a>queryExecution_query</a> - The
--   SQL query statements which the query execution ran.
--   
--   <a>$sel:queryExecutionContext:QueryExecution'</a>,
--   <a>queryExecution_queryExecutionContext</a> - The database in which
--   the query execution occurred.
--   
--   <a>$sel:engineVersion:QueryExecution'</a>,
--   <a>queryExecution_engineVersion</a> - The engine version that executed
--   the query.
--   
--   <a>$sel:resultConfiguration:QueryExecution'</a>,
--   <a>queryExecution_resultConfiguration</a> - The location in Amazon S3
--   where query results were stored and the encryption option, if any,
--   used for query results. These are known as "client-side settings". If
--   workgroup settings override client-side settings, then the query uses
--   the location for the query results and the encryption configuration
--   that are specified for the workgroup.
--   
--   <a>$sel:workGroup:QueryExecution'</a>, <a>queryExecution_workGroup</a>
--   - The name of the workgroup in which the query ran.
--   
--   <a>$sel:statementType:QueryExecution'</a>,
--   <a>queryExecution_statementType</a> - The type of query statement that
--   was run. <tt>DDL</tt> indicates DDL query statements. <tt>DML</tt>
--   indicates DML (Data Manipulation Language) query statements, such as
--   <tt>CREATE TABLE AS SELECT</tt>. <tt>UTILITY</tt> indicates query
--   statements other than DDL and DML, such as <tt>SHOW CREATE TABLE</tt>,
--   or <tt>DESCRIBE TABLE</tt>.
newQueryExecution :: QueryExecution

-- | The completion date, current state, submission time, and state change
--   reason (if applicable) for the query execution.
queryExecution_status :: Lens' QueryExecution (Maybe QueryExecutionStatus)

-- | The unique identifier for each query execution.
queryExecution_queryExecutionId :: Lens' QueryExecution (Maybe Text)

-- | Query execution statistics, such as the amount of data scanned, the
--   amount of time that the query took to process, and the type of
--   statement that was run.
queryExecution_statistics :: Lens' QueryExecution (Maybe QueryExecutionStatistics)

-- | The SQL query statements which the query execution ran.
queryExecution_query :: Lens' QueryExecution (Maybe Text)

-- | The database in which the query execution occurred.
queryExecution_queryExecutionContext :: Lens' QueryExecution (Maybe QueryExecutionContext)

-- | The engine version that executed the query.
queryExecution_engineVersion :: Lens' QueryExecution (Maybe EngineVersion)

-- | The location in Amazon S3 where query results were stored and the
--   encryption option, if any, used for query results. These are known as
--   "client-side settings". If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup.
queryExecution_resultConfiguration :: Lens' QueryExecution (Maybe ResultConfiguration)

-- | The name of the workgroup in which the query ran.
queryExecution_workGroup :: Lens' QueryExecution (Maybe Text)

-- | The type of query statement that was run. <tt>DDL</tt> indicates DDL
--   query statements. <tt>DML</tt> indicates DML (Data Manipulation
--   Language) query statements, such as <tt>CREATE TABLE AS SELECT</tt>.
--   <tt>UTILITY</tt> indicates query statements other than DDL and DML,
--   such as <tt>SHOW CREATE TABLE</tt>, or <tt>DESCRIBE TABLE</tt>.
queryExecution_statementType :: Lens' QueryExecution (Maybe StatementType)

-- | The database and data catalog context in which the query execution
--   occurs.
--   
--   <i>See:</i> <a>newQueryExecutionContext</a> smart constructor.
data QueryExecutionContext
QueryExecutionContext' :: Maybe Text -> Maybe Text -> QueryExecutionContext

-- | The name of the data catalog used in the query execution.
[$sel:catalog:QueryExecutionContext'] :: QueryExecutionContext -> Maybe Text

-- | The name of the database used in the query execution. The database
--   must exist in the catalog.
[$sel:database:QueryExecutionContext'] :: QueryExecutionContext -> Maybe Text

-- | Create a value of <a>QueryExecutionContext</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalog:QueryExecutionContext'</a>,
--   <a>queryExecutionContext_catalog</a> - The name of the data catalog
--   used in the query execution.
--   
--   <a>$sel:database:QueryExecutionContext'</a>,
--   <a>queryExecutionContext_database</a> - The name of the database used
--   in the query execution. The database must exist in the catalog.
newQueryExecutionContext :: QueryExecutionContext

-- | The name of the data catalog used in the query execution.
queryExecutionContext_catalog :: Lens' QueryExecutionContext (Maybe Text)

-- | The name of the database used in the query execution. The database
--   must exist in the catalog.
queryExecutionContext_database :: Lens' QueryExecutionContext (Maybe Text)

-- | The amount of data scanned during the query execution and the amount
--   of time that it took to execute, and the type of statement that was
--   run.
--   
--   <i>See:</i> <a>newQueryExecutionStatistics</a> smart constructor.
data QueryExecutionStatistics
QueryExecutionStatistics' :: Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Text -> QueryExecutionStatistics

-- | The number of milliseconds that Athena took to run the query.
[$sel:totalExecutionTimeInMillis:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Integer

-- | The number of milliseconds that Athena took to finalize and publish
--   the query results after the query engine finished running the query.
[$sel:serviceProcessingTimeInMillis:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Integer

-- | The number of milliseconds that the query was in your query queue
--   waiting for resources. Note that if transient errors occur, Athena
--   might automatically add the query back to the queue.
[$sel:queryQueueTimeInMillis:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Integer

-- | The number of bytes in the data that was queried.
[$sel:dataScannedInBytes:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Integer

-- | The number of milliseconds that Athena took to plan the query
--   processing flow. This includes the time spent retrieving table
--   partitions from the data source. Note that because the query engine
--   performs the query planning, query planning time is a subset of engine
--   processing time.
[$sel:queryPlanningTimeInMillis:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Integer

-- | The number of milliseconds that the query took to execute.
[$sel:engineExecutionTimeInMillis:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Integer

-- | The location and file name of a data manifest file. The manifest file
--   is saved to the Athena query results location in Amazon S3. The
--   manifest file tracks files that the query wrote to Amazon S3. If the
--   query fails, the manifest file also tracks files that the query
--   intended to write. The manifest is useful for identifying orphaned
--   files resulting from a failed query. For more information, see
--   <a>Working with Query Results, Output Files, and Query History</a> in
--   the <i>Amazon Athena User Guide</i>.
[$sel:dataManifestLocation:QueryExecutionStatistics'] :: QueryExecutionStatistics -> Maybe Text

-- | Create a value of <a>QueryExecutionStatistics</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:totalExecutionTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_totalExecutionTimeInMillis</a> - The
--   number of milliseconds that Athena took to run the query.
--   
--   <a>$sel:serviceProcessingTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_serviceProcessingTimeInMillis</a> - The
--   number of milliseconds that Athena took to finalize and publish the
--   query results after the query engine finished running the query.
--   
--   <a>$sel:queryQueueTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_queryQueueTimeInMillis</a> - The number of
--   milliseconds that the query was in your query queue waiting for
--   resources. Note that if transient errors occur, Athena might
--   automatically add the query back to the queue.
--   
--   <a>$sel:dataScannedInBytes:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_dataScannedInBytes</a> - The number of
--   bytes in the data that was queried.
--   
--   <a>$sel:queryPlanningTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_queryPlanningTimeInMillis</a> - The number
--   of milliseconds that Athena took to plan the query processing flow.
--   This includes the time spent retrieving table partitions from the data
--   source. Note that because the query engine performs the query
--   planning, query planning time is a subset of engine processing time.
--   
--   <a>$sel:engineExecutionTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_engineExecutionTimeInMillis</a> - The
--   number of milliseconds that the query took to execute.
--   
--   <a>$sel:dataManifestLocation:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_dataManifestLocation</a> - The location
--   and file name of a data manifest file. The manifest file is saved to
--   the Athena query results location in Amazon S3. The manifest file
--   tracks files that the query wrote to Amazon S3. If the query fails,
--   the manifest file also tracks files that the query intended to write.
--   The manifest is useful for identifying orphaned files resulting from a
--   failed query. For more information, see <a>Working with Query Results,
--   Output Files, and Query History</a> in the <i>Amazon Athena User
--   Guide</i>.
newQueryExecutionStatistics :: QueryExecutionStatistics

-- | The number of milliseconds that Athena took to run the query.
queryExecutionStatistics_totalExecutionTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of milliseconds that Athena took to finalize and publish
--   the query results after the query engine finished running the query.
queryExecutionStatistics_serviceProcessingTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of milliseconds that the query was in your query queue
--   waiting for resources. Note that if transient errors occur, Athena
--   might automatically add the query back to the queue.
queryExecutionStatistics_queryQueueTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of bytes in the data that was queried.
queryExecutionStatistics_dataScannedInBytes :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of milliseconds that Athena took to plan the query
--   processing flow. This includes the time spent retrieving table
--   partitions from the data source. Note that because the query engine
--   performs the query planning, query planning time is a subset of engine
--   processing time.
queryExecutionStatistics_queryPlanningTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of milliseconds that the query took to execute.
queryExecutionStatistics_engineExecutionTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The location and file name of a data manifest file. The manifest file
--   is saved to the Athena query results location in Amazon S3. The
--   manifest file tracks files that the query wrote to Amazon S3. If the
--   query fails, the manifest file also tracks files that the query
--   intended to write. The manifest is useful for identifying orphaned
--   files resulting from a failed query. For more information, see
--   <a>Working with Query Results, Output Files, and Query History</a> in
--   the <i>Amazon Athena User Guide</i>.
queryExecutionStatistics_dataManifestLocation :: Lens' QueryExecutionStatistics (Maybe Text)

-- | The completion date, current state, submission time, and state change
--   reason (if applicable) for the query execution.
--   
--   <i>See:</i> <a>newQueryExecutionStatus</a> smart constructor.
data QueryExecutionStatus
QueryExecutionStatus' :: Maybe POSIX -> Maybe POSIX -> Maybe Text -> Maybe QueryExecutionState -> QueryExecutionStatus

-- | The date and time that the query was submitted.
[$sel:submissionDateTime:QueryExecutionStatus'] :: QueryExecutionStatus -> Maybe POSIX

-- | The date and time that the query completed.
[$sel:completionDateTime:QueryExecutionStatus'] :: QueryExecutionStatus -> Maybe POSIX

-- | Further detail about the status of the query.
[$sel:stateChangeReason:QueryExecutionStatus'] :: QueryExecutionStatus -> Maybe Text

-- | The state of query execution. <tt>QUEUED</tt> indicates that the query
--   has been submitted to the service, and Athena will execute the query
--   as soon as resources are available. <tt>RUNNING</tt> indicates that
--   the query is in execution phase. <tt>SUCCEEDED</tt> indicates that the
--   query completed without errors. <tt>FAILED</tt> indicates that the
--   query experienced an error and did not complete processing.
--   <tt>CANCELLED</tt> indicates that a user input interrupted query
--   execution.
--   
--   Athena automatically retries your queries in cases of certain
--   transient errors. As a result, you may see the query state transition
--   from <tt>RUNNING</tt> or <tt>FAILED</tt> to <tt>QUEUED</tt>.
[$sel:state:QueryExecutionStatus'] :: QueryExecutionStatus -> Maybe QueryExecutionState

-- | Create a value of <a>QueryExecutionStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:submissionDateTime:QueryExecutionStatus'</a>,
--   <a>queryExecutionStatus_submissionDateTime</a> - The date and time
--   that the query was submitted.
--   
--   <a>$sel:completionDateTime:QueryExecutionStatus'</a>,
--   <a>queryExecutionStatus_completionDateTime</a> - The date and time
--   that the query completed.
--   
--   <a>$sel:stateChangeReason:QueryExecutionStatus'</a>,
--   <a>queryExecutionStatus_stateChangeReason</a> - Further detail about
--   the status of the query.
--   
--   <a>$sel:state:QueryExecutionStatus'</a>,
--   <a>queryExecutionStatus_state</a> - The state of query execution.
--   <tt>QUEUED</tt> indicates that the query has been submitted to the
--   service, and Athena will execute the query as soon as resources are
--   available. <tt>RUNNING</tt> indicates that the query is in execution
--   phase. <tt>SUCCEEDED</tt> indicates that the query completed without
--   errors. <tt>FAILED</tt> indicates that the query experienced an error
--   and did not complete processing. <tt>CANCELLED</tt> indicates that a
--   user input interrupted query execution.
--   
--   Athena automatically retries your queries in cases of certain
--   transient errors. As a result, you may see the query state transition
--   from <tt>RUNNING</tt> or <tt>FAILED</tt> to <tt>QUEUED</tt>.
newQueryExecutionStatus :: QueryExecutionStatus

-- | The date and time that the query was submitted.
queryExecutionStatus_submissionDateTime :: Lens' QueryExecutionStatus (Maybe UTCTime)

-- | The date and time that the query completed.
queryExecutionStatus_completionDateTime :: Lens' QueryExecutionStatus (Maybe UTCTime)

-- | Further detail about the status of the query.
queryExecutionStatus_stateChangeReason :: Lens' QueryExecutionStatus (Maybe Text)

-- | The state of query execution. <tt>QUEUED</tt> indicates that the query
--   has been submitted to the service, and Athena will execute the query
--   as soon as resources are available. <tt>RUNNING</tt> indicates that
--   the query is in execution phase. <tt>SUCCEEDED</tt> indicates that the
--   query completed without errors. <tt>FAILED</tt> indicates that the
--   query experienced an error and did not complete processing.
--   <tt>CANCELLED</tt> indicates that a user input interrupted query
--   execution.
--   
--   Athena automatically retries your queries in cases of certain
--   transient errors. As a result, you may see the query state transition
--   from <tt>RUNNING</tt> or <tt>FAILED</tt> to <tt>QUEUED</tt>.
queryExecutionStatus_state :: Lens' QueryExecutionStatus (Maybe QueryExecutionState)

-- | The location in Amazon S3 where query results are stored and the
--   encryption option, if any, used for query results. These are known as
--   "client-side settings". If workgroup settings override client-side
--   settings, then the query uses the workgroup settings.
--   
--   <i>See:</i> <a>newResultConfiguration</a> smart constructor.
data ResultConfiguration
ResultConfiguration' :: Maybe EncryptionConfiguration -> Maybe Text -> ResultConfiguration

-- | If query results are encrypted in Amazon S3, indicates the encryption
--   option used (for example, <tt>SSE-KMS</tt> or <tt>CSE-KMS</tt>) and
--   key information. This is a client-side setting. If workgroup settings
--   override client-side settings, then the query uses the encryption
--   configuration that is specified for the workgroup, and also uses the
--   location for storing query results specified in the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration and <a>Workgroup
--   Settings Override Client-Side Settings</a>.
[$sel:encryptionConfiguration:ResultConfiguration'] :: ResultConfiguration -> Maybe EncryptionConfiguration

-- | The location in Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. To run the query, you must
--   specify the query results location using one of the ways: either for
--   individual queries using either this setting (client-side), or in the
--   workgroup, using WorkGroupConfiguration. If none of them is set,
--   Athena issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>. If workgroup settings override
--   client-side settings, then the query uses the settings specified for
--   the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
[$sel:outputLocation:ResultConfiguration'] :: ResultConfiguration -> Maybe Text

-- | Create a value of <a>ResultConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionConfiguration:ResultConfiguration'</a>,
--   <a>resultConfiguration_encryptionConfiguration</a> - If query results
--   are encrypted in Amazon S3, indicates the encryption option used (for
--   example, <tt>SSE-KMS</tt> or <tt>CSE-KMS</tt>) and key information.
--   This is a client-side setting. If workgroup settings override
--   client-side settings, then the query uses the encryption configuration
--   that is specified for the workgroup, and also uses the location for
--   storing query results specified in the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration and <a>Workgroup
--   Settings Override Client-Side Settings</a>.
--   
--   <a>$sel:outputLocation:ResultConfiguration'</a>,
--   <a>resultConfiguration_outputLocation</a> - The location in Amazon S3
--   where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. To run the query, you must
--   specify the query results location using one of the ways: either for
--   individual queries using either this setting (client-side), or in the
--   workgroup, using WorkGroupConfiguration. If none of them is set,
--   Athena issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>. If workgroup settings override
--   client-side settings, then the query uses the settings specified for
--   the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
newResultConfiguration :: ResultConfiguration

-- | If query results are encrypted in Amazon S3, indicates the encryption
--   option used (for example, <tt>SSE-KMS</tt> or <tt>CSE-KMS</tt>) and
--   key information. This is a client-side setting. If workgroup settings
--   override client-side settings, then the query uses the encryption
--   configuration that is specified for the workgroup, and also uses the
--   location for storing query results specified in the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration and <a>Workgroup
--   Settings Override Client-Side Settings</a>.
resultConfiguration_encryptionConfiguration :: Lens' ResultConfiguration (Maybe EncryptionConfiguration)

-- | The location in Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. To run the query, you must
--   specify the query results location using one of the ways: either for
--   individual queries using either this setting (client-side), or in the
--   workgroup, using WorkGroupConfiguration. If none of them is set,
--   Athena issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>. If workgroup settings override
--   client-side settings, then the query uses the settings specified for
--   the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
resultConfiguration_outputLocation :: Lens' ResultConfiguration (Maybe Text)

-- | The information about the updates in the query results, such as output
--   location and encryption configuration for the query results.
--   
--   <i>See:</i> <a>newResultConfigurationUpdates</a> smart constructor.
data ResultConfigurationUpdates
ResultConfigurationUpdates' :: Maybe EncryptionConfiguration -> Maybe Bool -> Maybe Bool -> Maybe Text -> ResultConfigurationUpdates

-- | The encryption configuration for the query results.
[$sel:encryptionConfiguration:ResultConfigurationUpdates'] :: ResultConfigurationUpdates -> Maybe EncryptionConfiguration

-- | If set to "true", indicates that the previously-specified query
--   results location (also known as a client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the <tt>OutputLocation</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>OutputLocation</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
[$sel:removeOutputLocation:ResultConfigurationUpdates'] :: ResultConfigurationUpdates -> Maybe Bool

-- | If set to "true", indicates that the previously-specified encryption
--   configuration (also known as the client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the
--   <tt>EncryptionConfiguration</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>EncryptionConfiguration</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
[$sel:removeEncryptionConfiguration:ResultConfigurationUpdates'] :: ResultConfigurationUpdates -> Maybe Bool

-- | The location in Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. For more information, see
--   <a>Query Results</a> If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup. The
--   "workgroup settings override" is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
[$sel:outputLocation:ResultConfigurationUpdates'] :: ResultConfigurationUpdates -> Maybe Text

-- | Create a value of <a>ResultConfigurationUpdates</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionConfiguration:ResultConfigurationUpdates'</a>,
--   <a>resultConfigurationUpdates_encryptionConfiguration</a> - The
--   encryption configuration for the query results.
--   
--   <a>$sel:removeOutputLocation:ResultConfigurationUpdates'</a>,
--   <a>resultConfigurationUpdates_removeOutputLocation</a> - If set to
--   "true", indicates that the previously-specified query results location
--   (also known as a client-side setting) for queries in this workgroup
--   should be ignored and set to null. If set to "false" or not set, and a
--   value is present in the <tt>OutputLocation</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>OutputLocation</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
--   
--   <a>$sel:removeEncryptionConfiguration:ResultConfigurationUpdates'</a>,
--   <a>resultConfigurationUpdates_removeEncryptionConfiguration</a> - If
--   set to "true", indicates that the previously-specified encryption
--   configuration (also known as the client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the
--   <tt>EncryptionConfiguration</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>EncryptionConfiguration</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
--   
--   <a>$sel:outputLocation:ResultConfigurationUpdates'</a>,
--   <a>resultConfigurationUpdates_outputLocation</a> - The location in
--   Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. For more information, see
--   <a>Query Results</a> If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup. The
--   "workgroup settings override" is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
newResultConfigurationUpdates :: ResultConfigurationUpdates

-- | The encryption configuration for the query results.
resultConfigurationUpdates_encryptionConfiguration :: Lens' ResultConfigurationUpdates (Maybe EncryptionConfiguration)

-- | If set to "true", indicates that the previously-specified query
--   results location (also known as a client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the <tt>OutputLocation</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>OutputLocation</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
resultConfigurationUpdates_removeOutputLocation :: Lens' ResultConfigurationUpdates (Maybe Bool)

-- | If set to "true", indicates that the previously-specified encryption
--   configuration (also known as the client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the
--   <tt>EncryptionConfiguration</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>EncryptionConfiguration</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
resultConfigurationUpdates_removeEncryptionConfiguration :: Lens' ResultConfigurationUpdates (Maybe Bool)

-- | The location in Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. For more information, see
--   <a>Query Results</a> If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup. The
--   "workgroup settings override" is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
resultConfigurationUpdates_outputLocation :: Lens' ResultConfigurationUpdates (Maybe Text)

-- | The metadata and rows that comprise a query result set. The metadata
--   describes the column structure and data types. To return a
--   <tt>ResultSet</tt> object, use GetQueryResults.
--   
--   <i>See:</i> <a>newResultSet</a> smart constructor.
data ResultSet
ResultSet' :: Maybe [Row] -> Maybe ResultSetMetadata -> ResultSet

-- | The rows in the table.
[$sel:rows:ResultSet'] :: ResultSet -> Maybe [Row]

-- | The metadata that describes the column structure and data types of a
--   table of query results.
[$sel:resultSetMetadata:ResultSet'] :: ResultSet -> Maybe ResultSetMetadata

-- | Create a value of <a>ResultSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rows:ResultSet'</a>, <a>resultSet_rows</a> - The rows in the
--   table.
--   
--   <a>$sel:resultSetMetadata:ResultSet'</a>,
--   <a>resultSet_resultSetMetadata</a> - The metadata that describes the
--   column structure and data types of a table of query results.
newResultSet :: ResultSet

-- | The rows in the table.
resultSet_rows :: Lens' ResultSet (Maybe [Row])

-- | The metadata that describes the column structure and data types of a
--   table of query results.
resultSet_resultSetMetadata :: Lens' ResultSet (Maybe ResultSetMetadata)

-- | The metadata that describes the column structure and data types of a
--   table of query results. To return a <tt>ResultSetMetadata</tt> object,
--   use GetQueryResults.
--   
--   <i>See:</i> <a>newResultSetMetadata</a> smart constructor.
data ResultSetMetadata
ResultSetMetadata' :: Maybe [ColumnInfo] -> ResultSetMetadata

-- | Information about the columns returned in a query result metadata.
[$sel:columnInfo:ResultSetMetadata'] :: ResultSetMetadata -> Maybe [ColumnInfo]

-- | Create a value of <a>ResultSetMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:columnInfo:ResultSetMetadata'</a>,
--   <a>resultSetMetadata_columnInfo</a> - Information about the columns
--   returned in a query result metadata.
newResultSetMetadata :: ResultSetMetadata

-- | Information about the columns returned in a query result metadata.
resultSetMetadata_columnInfo :: Lens' ResultSetMetadata (Maybe [ColumnInfo])

-- | The rows that comprise a query result table.
--   
--   <i>See:</i> <a>newRow</a> smart constructor.
data Row
Row' :: Maybe [Datum] -> Row

-- | The data that populates a row in a query result table.
[$sel:data':Row'] :: Row -> Maybe [Datum]

-- | Create a value of <a>Row</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:data':Row'</a>, <a>row_data</a> - The data that populates a
--   row in a query result table.
newRow :: Row

-- | The data that populates a row in a query result table.
row_data :: Lens' Row (Maybe [Datum])

-- | Contains metadata for a table.
--   
--   <i>See:</i> <a>newTableMetadata</a> smart constructor.
data TableMetadata
TableMetadata' :: Maybe Text -> Maybe POSIX -> Maybe [Column] -> Maybe POSIX -> Maybe [Column] -> Maybe (HashMap Text Text) -> Text -> TableMetadata

-- | The type of table. In Athena, only <tt>EXTERNAL_TABLE</tt> is
--   supported.
[$sel:tableType:TableMetadata'] :: TableMetadata -> Maybe Text

-- | The time that the table was created.
[$sel:createTime:TableMetadata'] :: TableMetadata -> Maybe POSIX

-- | A list of the partition keys in the table.
[$sel:partitionKeys:TableMetadata'] :: TableMetadata -> Maybe [Column]

-- | The last time the table was accessed.
[$sel:lastAccessTime:TableMetadata'] :: TableMetadata -> Maybe POSIX

-- | A list of the columns in the table.
[$sel:columns:TableMetadata'] :: TableMetadata -> Maybe [Column]

-- | A set of custom key/value pairs for table properties.
[$sel:parameters:TableMetadata'] :: TableMetadata -> Maybe (HashMap Text Text)

-- | The name of the table.
[$sel:name:TableMetadata'] :: TableMetadata -> Text

-- | Create a value of <a>TableMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableType:TableMetadata'</a>, <a>tableMetadata_tableType</a> -
--   The type of table. In Athena, only <tt>EXTERNAL_TABLE</tt> is
--   supported.
--   
--   <a>$sel:createTime:TableMetadata'</a>, <a>tableMetadata_createTime</a>
--   - The time that the table was created.
--   
--   <a>$sel:partitionKeys:TableMetadata'</a>,
--   <a>tableMetadata_partitionKeys</a> - A list of the partition keys in
--   the table.
--   
--   <a>$sel:lastAccessTime:TableMetadata'</a>,
--   <a>tableMetadata_lastAccessTime</a> - The last time the table was
--   accessed.
--   
--   <a>$sel:columns:TableMetadata'</a>, <a>tableMetadata_columns</a> - A
--   list of the columns in the table.
--   
--   <a>$sel:parameters:TableMetadata'</a>, <a>tableMetadata_parameters</a>
--   - A set of custom key/value pairs for table properties.
--   
--   <a>$sel:name:TableMetadata'</a>, <a>tableMetadata_name</a> - The name
--   of the table.
newTableMetadata :: Text -> TableMetadata

-- | The type of table. In Athena, only <tt>EXTERNAL_TABLE</tt> is
--   supported.
tableMetadata_tableType :: Lens' TableMetadata (Maybe Text)

-- | The time that the table was created.
tableMetadata_createTime :: Lens' TableMetadata (Maybe UTCTime)

-- | A list of the partition keys in the table.
tableMetadata_partitionKeys :: Lens' TableMetadata (Maybe [Column])

-- | The last time the table was accessed.
tableMetadata_lastAccessTime :: Lens' TableMetadata (Maybe UTCTime)

-- | A list of the columns in the table.
tableMetadata_columns :: Lens' TableMetadata (Maybe [Column])

-- | A set of custom key/value pairs for table properties.
tableMetadata_parameters :: Lens' TableMetadata (Maybe (HashMap Text Text))

-- | The name of the table.
tableMetadata_name :: Lens' TableMetadata Text

-- | A label that you assign to a resource. In Athena, a resource can be a
--   workgroup or data catalog. Each tag consists of a key and an optional
--   value, both of which you define. For example, you can use tags to
--   categorize Athena workgroups or data catalogs by purpose, owner, or
--   environment. Use a consistent set of tag keys to make it easier to
--   search and filter workgroups or data catalogs in your account. For
--   best practices, see <a>Tagging Best Practices</a>. Tag keys can be
--   from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0
--   to 256 UTF-8 Unicode characters. Tags can use letters and numbers
--   representable in UTF-8, and the following characters: + - = . _ : / @.
--   Tag keys and values are case-sensitive. Tag keys must be unique per
--   resource. If you specify more than one tag, separate them by commas.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | A tag key. The tag key length is from 1 to 128 Unicode characters in
--   UTF-8. You can use letters and numbers representable in UTF-8, and the
--   following characters: + - = . _ : / @. Tag keys are case-sensitive and
--   must be unique per resource.
[$sel:key:Tag'] :: Tag -> Maybe Text

-- | A tag value. The tag value length is from 0 to 256 Unicode characters
--   in UTF-8. You can use letters and numbers representable in UTF-8, and
--   the following characters: + - = . _ : / @. Tag values are
--   case-sensitive.
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - A tag key. The tag key length
--   is from 1 to 128 Unicode characters in UTF-8. You can use letters and
--   numbers representable in UTF-8, and the following characters: + - = .
--   _ : / @. Tag keys are case-sensitive and must be unique per resource.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - A tag value. The tag value
--   length is from 0 to 256 Unicode characters in UTF-8. You can use
--   letters and numbers representable in UTF-8, and the following
--   characters: + - = . _ : / @. Tag values are case-sensitive.
newTag :: Tag

-- | A tag key. The tag key length is from 1 to 128 Unicode characters in
--   UTF-8. You can use letters and numbers representable in UTF-8, and the
--   following characters: + - = . _ : / @. Tag keys are case-sensitive and
--   must be unique per resource.
tag_key :: Lens' Tag (Maybe Text)

-- | A tag value. The tag value length is from 0 to 256 Unicode characters
--   in UTF-8. You can use letters and numbers representable in UTF-8, and
--   the following characters: + - = . _ : / @. Tag values are
--   case-sensitive.
tag_value :: Lens' Tag (Maybe Text)

-- | Information about a named query ID that could not be processed.
--   
--   <i>See:</i> <a>newUnprocessedNamedQueryId</a> smart constructor.
data UnprocessedNamedQueryId
UnprocessedNamedQueryId' :: Maybe Text -> Maybe Text -> Maybe Text -> UnprocessedNamedQueryId

-- | The unique identifier of the named query.
[$sel:namedQueryId:UnprocessedNamedQueryId'] :: UnprocessedNamedQueryId -> Maybe Text

-- | The error message returned when the processing request for the named
--   query failed, if applicable.
[$sel:errorMessage:UnprocessedNamedQueryId'] :: UnprocessedNamedQueryId -> Maybe Text

-- | The error code returned when the processing request for the named
--   query failed, if applicable.
[$sel:errorCode:UnprocessedNamedQueryId'] :: UnprocessedNamedQueryId -> Maybe Text

-- | Create a value of <a>UnprocessedNamedQueryId</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryId:UnprocessedNamedQueryId'</a>,
--   <a>unprocessedNamedQueryId_namedQueryId</a> - The unique identifier of
--   the named query.
--   
--   <a>$sel:errorMessage:UnprocessedNamedQueryId'</a>,
--   <a>unprocessedNamedQueryId_errorMessage</a> - The error message
--   returned when the processing request for the named query failed, if
--   applicable.
--   
--   <a>$sel:errorCode:UnprocessedNamedQueryId'</a>,
--   <a>unprocessedNamedQueryId_errorCode</a> - The error code returned
--   when the processing request for the named query failed, if applicable.
newUnprocessedNamedQueryId :: UnprocessedNamedQueryId

-- | The unique identifier of the named query.
unprocessedNamedQueryId_namedQueryId :: Lens' UnprocessedNamedQueryId (Maybe Text)

-- | The error message returned when the processing request for the named
--   query failed, if applicable.
unprocessedNamedQueryId_errorMessage :: Lens' UnprocessedNamedQueryId (Maybe Text)

-- | The error code returned when the processing request for the named
--   query failed, if applicable.
unprocessedNamedQueryId_errorCode :: Lens' UnprocessedNamedQueryId (Maybe Text)

-- | Describes a query execution that failed to process.
--   
--   <i>See:</i> <a>newUnprocessedQueryExecutionId</a> smart constructor.
data UnprocessedQueryExecutionId
UnprocessedQueryExecutionId' :: Maybe Text -> Maybe Text -> Maybe Text -> UnprocessedQueryExecutionId

-- | The unique identifier of the query execution.
[$sel:queryExecutionId:UnprocessedQueryExecutionId'] :: UnprocessedQueryExecutionId -> Maybe Text

-- | The error message returned when the query execution failed to process,
--   if applicable.
[$sel:errorMessage:UnprocessedQueryExecutionId'] :: UnprocessedQueryExecutionId -> Maybe Text

-- | The error code returned when the query execution failed to process, if
--   applicable.
[$sel:errorCode:UnprocessedQueryExecutionId'] :: UnprocessedQueryExecutionId -> Maybe Text

-- | Create a value of <a>UnprocessedQueryExecutionId</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionId:UnprocessedQueryExecutionId'</a>,
--   <a>unprocessedQueryExecutionId_queryExecutionId</a> - The unique
--   identifier of the query execution.
--   
--   <a>$sel:errorMessage:UnprocessedQueryExecutionId'</a>,
--   <a>unprocessedQueryExecutionId_errorMessage</a> - The error message
--   returned when the query execution failed to process, if applicable.
--   
--   <a>$sel:errorCode:UnprocessedQueryExecutionId'</a>,
--   <a>unprocessedQueryExecutionId_errorCode</a> - The error code returned
--   when the query execution failed to process, if applicable.
newUnprocessedQueryExecutionId :: UnprocessedQueryExecutionId

-- | The unique identifier of the query execution.
unprocessedQueryExecutionId_queryExecutionId :: Lens' UnprocessedQueryExecutionId (Maybe Text)

-- | The error message returned when the query execution failed to process,
--   if applicable.
unprocessedQueryExecutionId_errorMessage :: Lens' UnprocessedQueryExecutionId (Maybe Text)

-- | The error code returned when the query execution failed to process, if
--   applicable.
unprocessedQueryExecutionId_errorCode :: Lens' UnprocessedQueryExecutionId (Maybe Text)

-- | A workgroup, which contains a name, description, creation time, state,
--   and other configuration, listed under WorkGroup$Configuration. Each
--   workgroup enables you to isolate queries for you or your group of
--   users from other queries in the same account, to configure the query
--   results location and the encryption configuration (known as workgroup
--   settings), to enable sending query metrics to Amazon CloudWatch, and
--   to establish per-query data usage control limits for all queries in a
--   workgroup. The workgroup settings override is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <i>See:</i> <a>newWorkGroup</a> smart constructor.
data WorkGroup
WorkGroup' :: Maybe POSIX -> Maybe WorkGroupConfiguration -> Maybe WorkGroupState -> Maybe Text -> Text -> WorkGroup

-- | The date and time the workgroup was created.
[$sel:creationTime:WorkGroup'] :: WorkGroup -> Maybe POSIX

-- | The configuration of the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption
--   configuration, if any, used for query results; whether the Amazon
--   CloudWatch Metrics are enabled for the workgroup; whether workgroup
--   settings override client-side settings; and the data usage limits for
--   the amount of data scanned per query or per workgroup. The workgroup
--   settings override is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
[$sel:configuration:WorkGroup'] :: WorkGroup -> Maybe WorkGroupConfiguration

-- | The state of the workgroup: ENABLED or DISABLED.
[$sel:state:WorkGroup'] :: WorkGroup -> Maybe WorkGroupState

-- | The workgroup description.
[$sel:description:WorkGroup'] :: WorkGroup -> Maybe Text

-- | The workgroup name.
[$sel:name:WorkGroup'] :: WorkGroup -> Text

-- | Create a value of <a>WorkGroup</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:WorkGroup'</a>, <a>workGroup_creationTime</a> -
--   The date and time the workgroup was created.
--   
--   <a>$sel:configuration:WorkGroup'</a>, <a>workGroup_configuration</a> -
--   The configuration of the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption
--   configuration, if any, used for query results; whether the Amazon
--   CloudWatch Metrics are enabled for the workgroup; whether workgroup
--   settings override client-side settings; and the data usage limits for
--   the amount of data scanned per query or per workgroup. The workgroup
--   settings override is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <a>$sel:state:WorkGroup'</a>, <a>workGroup_state</a> - The state of
--   the workgroup: ENABLED or DISABLED.
--   
--   <a>$sel:description:WorkGroup'</a>, <a>workGroup_description</a> - The
--   workgroup description.
--   
--   <a>$sel:name:WorkGroup'</a>, <a>workGroup_name</a> - The workgroup
--   name.
newWorkGroup :: Text -> WorkGroup

-- | The date and time the workgroup was created.
workGroup_creationTime :: Lens' WorkGroup (Maybe UTCTime)

-- | The configuration of the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption
--   configuration, if any, used for query results; whether the Amazon
--   CloudWatch Metrics are enabled for the workgroup; whether workgroup
--   settings override client-side settings; and the data usage limits for
--   the amount of data scanned per query or per workgroup. The workgroup
--   settings override is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
workGroup_configuration :: Lens' WorkGroup (Maybe WorkGroupConfiguration)

-- | The state of the workgroup: ENABLED or DISABLED.
workGroup_state :: Lens' WorkGroup (Maybe WorkGroupState)

-- | The workgroup description.
workGroup_description :: Lens' WorkGroup (Maybe Text)

-- | The workgroup name.
workGroup_name :: Lens' WorkGroup Text

-- | The configuration of the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption option, if
--   any, used for query results, whether the Amazon CloudWatch Metrics are
--   enabled for the workgroup and whether workgroup settings override
--   query settings, and the data usage limits for the amount of data
--   scanned per query or per workgroup. The workgroup settings override is
--   specified in <tt>EnforceWorkGroupConfiguration</tt> (true/false) in
--   the <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <i>See:</i> <a>newWorkGroupConfiguration</a> smart constructor.
data WorkGroupConfiguration
WorkGroupConfiguration' :: Maybe Natural -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe EngineVersion -> Maybe ResultConfiguration -> WorkGroupConfiguration

-- | The upper data usage limit (cutoff) for the amount of bytes a single
--   query in a workgroup is allowed to scan.
[$sel:bytesScannedCutoffPerQuery:WorkGroupConfiguration'] :: WorkGroupConfiguration -> Maybe Natural

-- | Indicates that the Amazon CloudWatch metrics are enabled for the
--   workgroup.
[$sel:publishCloudWatchMetricsEnabled:WorkGroupConfiguration'] :: WorkGroupConfiguration -> Maybe Bool

-- | If set to <tt>true</tt>, allows members assigned to a workgroup to
--   reference Amazon S3 Requester Pays buckets in queries. If set to
--   <tt>false</tt>, workgroup members cannot query data from Requester
--   Pays buckets, and queries that retrieve data from Requester Pays
--   buckets cause an error. The default is <tt>false</tt>. For more
--   information about Requester Pays buckets, see <a>Requester Pays
--   Buckets</a> in the <i>Amazon Simple Storage Service Developer
--   Guide</i>.
[$sel:requesterPaysEnabled:WorkGroupConfiguration'] :: WorkGroupConfiguration -> Maybe Bool

-- | If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false", client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
[$sel:enforceWorkGroupConfiguration:WorkGroupConfiguration'] :: WorkGroupConfiguration -> Maybe Bool

-- | The engine version that all queries running on the workgroup use.
--   Queries on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run
--   on the preview engine regardless of this setting.
[$sel:engineVersion:WorkGroupConfiguration'] :: WorkGroupConfiguration -> Maybe EngineVersion

-- | The configuration for the workgroup, which includes the location in
--   Amazon S3 where query results are stored and the encryption option, if
--   any, used for query results. To run the query, you must specify the
--   query results location using one of the ways: either in the workgroup
--   using this setting, or for individual queries (client-side), using
--   ResultConfiguration$OutputLocation. If none of them is set, Athena
--   issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>.
[$sel:resultConfiguration:WorkGroupConfiguration'] :: WorkGroupConfiguration -> Maybe ResultConfiguration

-- | Create a value of <a>WorkGroupConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bytesScannedCutoffPerQuery:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_bytesScannedCutoffPerQuery</a> - The upper
--   data usage limit (cutoff) for the amount of bytes a single query in a
--   workgroup is allowed to scan.
--   
--   <a>$sel:publishCloudWatchMetricsEnabled:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_publishCloudWatchMetricsEnabled</a> -
--   Indicates that the Amazon CloudWatch metrics are enabled for the
--   workgroup.
--   
--   <a>$sel:requesterPaysEnabled:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_requesterPaysEnabled</a> - If set to
--   <tt>true</tt>, allows members assigned to a workgroup to reference
--   Amazon S3 Requester Pays buckets in queries. If set to <tt>false</tt>,
--   workgroup members cannot query data from Requester Pays buckets, and
--   queries that retrieve data from Requester Pays buckets cause an error.
--   The default is <tt>false</tt>. For more information about Requester
--   Pays buckets, see <a>Requester Pays Buckets</a> in the <i>Amazon
--   Simple Storage Service Developer Guide</i>.
--   
--   <a>$sel:enforceWorkGroupConfiguration:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_enforceWorkGroupConfiguration</a> - If set
--   to "true", the settings for the workgroup override client-side
--   settings. If set to "false", client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
--   
--   <a>$sel:engineVersion:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_engineVersion</a> - The engine version that
--   all queries running on the workgroup use. Queries on the
--   <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the preview
--   engine regardless of this setting.
--   
--   <a>$sel:resultConfiguration:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_resultConfiguration</a> - The configuration
--   for the workgroup, which includes the location in Amazon S3 where
--   query results are stored and the encryption option, if any, used for
--   query results. To run the query, you must specify the query results
--   location using one of the ways: either in the workgroup using this
--   setting, or for individual queries (client-side), using
--   ResultConfiguration$OutputLocation. If none of them is set, Athena
--   issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>.
newWorkGroupConfiguration :: WorkGroupConfiguration

-- | The upper data usage limit (cutoff) for the amount of bytes a single
--   query in a workgroup is allowed to scan.
workGroupConfiguration_bytesScannedCutoffPerQuery :: Lens' WorkGroupConfiguration (Maybe Natural)

-- | Indicates that the Amazon CloudWatch metrics are enabled for the
--   workgroup.
workGroupConfiguration_publishCloudWatchMetricsEnabled :: Lens' WorkGroupConfiguration (Maybe Bool)

-- | If set to <tt>true</tt>, allows members assigned to a workgroup to
--   reference Amazon S3 Requester Pays buckets in queries. If set to
--   <tt>false</tt>, workgroup members cannot query data from Requester
--   Pays buckets, and queries that retrieve data from Requester Pays
--   buckets cause an error. The default is <tt>false</tt>. For more
--   information about Requester Pays buckets, see <a>Requester Pays
--   Buckets</a> in the <i>Amazon Simple Storage Service Developer
--   Guide</i>.
workGroupConfiguration_requesterPaysEnabled :: Lens' WorkGroupConfiguration (Maybe Bool)

-- | If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false", client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
workGroupConfiguration_enforceWorkGroupConfiguration :: Lens' WorkGroupConfiguration (Maybe Bool)

-- | The engine version that all queries running on the workgroup use.
--   Queries on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run
--   on the preview engine regardless of this setting.
workGroupConfiguration_engineVersion :: Lens' WorkGroupConfiguration (Maybe EngineVersion)

-- | The configuration for the workgroup, which includes the location in
--   Amazon S3 where query results are stored and the encryption option, if
--   any, used for query results. To run the query, you must specify the
--   query results location using one of the ways: either in the workgroup
--   using this setting, or for individual queries (client-side), using
--   ResultConfiguration$OutputLocation. If none of them is set, Athena
--   issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>.
workGroupConfiguration_resultConfiguration :: Lens' WorkGroupConfiguration (Maybe ResultConfiguration)

-- | The configuration information that will be updated for this workgroup,
--   which includes the location in Amazon S3 where query results are
--   stored, the encryption option, if any, used for query results, whether
--   the Amazon CloudWatch Metrics are enabled for the workgroup, whether
--   the workgroup settings override the client-side settings, and the data
--   usage limit for the amount of bytes scanned per query, if it is
--   specified.
--   
--   <i>See:</i> <a>newWorkGroupConfigurationUpdates</a> smart constructor.
data WorkGroupConfigurationUpdates
WorkGroupConfigurationUpdates' :: Maybe Natural -> Maybe Bool -> Maybe ResultConfigurationUpdates -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe EngineVersion -> WorkGroupConfigurationUpdates

-- | The upper limit (cutoff) for the amount of bytes a single query in a
--   workgroup is allowed to scan.
[$sel:bytesScannedCutoffPerQuery:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe Natural

-- | Indicates whether this workgroup enables publishing metrics to Amazon
--   CloudWatch.
[$sel:publishCloudWatchMetricsEnabled:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe Bool

-- | The result configuration information about the queries in this
--   workgroup that will be updated. Includes the updated results location
--   and an updated option for encrypting query results.
[$sel:resultConfigurationUpdates:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe ResultConfigurationUpdates

-- | If set to <tt>true</tt>, allows members assigned to a workgroup to
--   specify Amazon S3 Requester Pays buckets in queries. If set to
--   <tt>false</tt>, workgroup members cannot query data from Requester
--   Pays buckets, and queries that retrieve data from Requester Pays
--   buckets cause an error. The default is <tt>false</tt>. For more
--   information about Requester Pays buckets, see <a>Requester Pays
--   Buckets</a> in the <i>Amazon Simple Storage Service Developer
--   Guide</i>.
[$sel:requesterPaysEnabled:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe Bool

-- | If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false" client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
[$sel:enforceWorkGroupConfiguration:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe Bool

-- | Indicates that the data usage control limit per query is removed.
--   WorkGroupConfiguration$BytesScannedCutoffPerQuery
[$sel:removeBytesScannedCutoffPerQuery:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe Bool

-- | The engine version requested when a workgroup is updated. After the
--   update, all queries on the workgroup run on the requested engine
--   version. If no value was previously set, the default is Auto. Queries
--   on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the
--   preview engine regardless of this setting.
[$sel:engineVersion:WorkGroupConfigurationUpdates'] :: WorkGroupConfigurationUpdates -> Maybe EngineVersion

-- | Create a value of <a>WorkGroupConfigurationUpdates</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bytesScannedCutoffPerQuery:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_bytesScannedCutoffPerQuery</a> - The
--   upper limit (cutoff) for the amount of bytes a single query in a
--   workgroup is allowed to scan.
--   
--   
--   <a>$sel:publishCloudWatchMetricsEnabled:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_publishCloudWatchMetricsEnabled</a> -
--   Indicates whether this workgroup enables publishing metrics to Amazon
--   CloudWatch.
--   
--   <a>$sel:resultConfigurationUpdates:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_resultConfigurationUpdates</a> - The
--   result configuration information about the queries in this workgroup
--   that will be updated. Includes the updated results location and an
--   updated option for encrypting query results.
--   
--   <a>$sel:requesterPaysEnabled:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_requesterPaysEnabled</a> - If set to
--   <tt>true</tt>, allows members assigned to a workgroup to specify
--   Amazon S3 Requester Pays buckets in queries. If set to <tt>false</tt>,
--   workgroup members cannot query data from Requester Pays buckets, and
--   queries that retrieve data from Requester Pays buckets cause an error.
--   The default is <tt>false</tt>. For more information about Requester
--   Pays buckets, see <a>Requester Pays Buckets</a> in the <i>Amazon
--   Simple Storage Service Developer Guide</i>.
--   
--   
--   <a>$sel:enforceWorkGroupConfiguration:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_enforceWorkGroupConfiguration</a> -
--   If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false" client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
--   
--   
--   <a>$sel:removeBytesScannedCutoffPerQuery:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_removeBytesScannedCutoffPerQuery</a>
--   - Indicates that the data usage control limit per query is removed.
--   WorkGroupConfiguration$BytesScannedCutoffPerQuery
--   
--   <a>$sel:engineVersion:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_engineVersion</a> - The engine
--   version requested when a workgroup is updated. After the update, all
--   queries on the workgroup run on the requested engine version. If no
--   value was previously set, the default is Auto. Queries on the
--   <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the preview
--   engine regardless of this setting.
newWorkGroupConfigurationUpdates :: WorkGroupConfigurationUpdates

-- | The upper limit (cutoff) for the amount of bytes a single query in a
--   workgroup is allowed to scan.
workGroupConfigurationUpdates_bytesScannedCutoffPerQuery :: Lens' WorkGroupConfigurationUpdates (Maybe Natural)

-- | Indicates whether this workgroup enables publishing metrics to Amazon
--   CloudWatch.
workGroupConfigurationUpdates_publishCloudWatchMetricsEnabled :: Lens' WorkGroupConfigurationUpdates (Maybe Bool)

-- | The result configuration information about the queries in this
--   workgroup that will be updated. Includes the updated results location
--   and an updated option for encrypting query results.
workGroupConfigurationUpdates_resultConfigurationUpdates :: Lens' WorkGroupConfigurationUpdates (Maybe ResultConfigurationUpdates)

-- | If set to <tt>true</tt>, allows members assigned to a workgroup to
--   specify Amazon S3 Requester Pays buckets in queries. If set to
--   <tt>false</tt>, workgroup members cannot query data from Requester
--   Pays buckets, and queries that retrieve data from Requester Pays
--   buckets cause an error. The default is <tt>false</tt>. For more
--   information about Requester Pays buckets, see <a>Requester Pays
--   Buckets</a> in the <i>Amazon Simple Storage Service Developer
--   Guide</i>.
workGroupConfigurationUpdates_requesterPaysEnabled :: Lens' WorkGroupConfigurationUpdates (Maybe Bool)

-- | If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false" client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
workGroupConfigurationUpdates_enforceWorkGroupConfiguration :: Lens' WorkGroupConfigurationUpdates (Maybe Bool)

-- | Indicates that the data usage control limit per query is removed.
--   WorkGroupConfiguration$BytesScannedCutoffPerQuery
workGroupConfigurationUpdates_removeBytesScannedCutoffPerQuery :: Lens' WorkGroupConfigurationUpdates (Maybe Bool)

-- | The engine version requested when a workgroup is updated. After the
--   update, all queries on the workgroup run on the requested engine
--   version. If no value was previously set, the default is Auto. Queries
--   on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the
--   preview engine regardless of this setting.
workGroupConfigurationUpdates_engineVersion :: Lens' WorkGroupConfigurationUpdates (Maybe EngineVersion)

-- | The summary information for the workgroup, which includes its name,
--   state, description, and the date and time it was created.
--   
--   <i>See:</i> <a>newWorkGroupSummary</a> smart constructor.
data WorkGroupSummary
WorkGroupSummary' :: Maybe POSIX -> Maybe Text -> Maybe WorkGroupState -> Maybe EngineVersion -> Maybe Text -> WorkGroupSummary

-- | The workgroup creation date and time.
[$sel:creationTime:WorkGroupSummary'] :: WorkGroupSummary -> Maybe POSIX

-- | The name of the workgroup.
[$sel:name:WorkGroupSummary'] :: WorkGroupSummary -> Maybe Text

-- | The state of the workgroup.
[$sel:state:WorkGroupSummary'] :: WorkGroupSummary -> Maybe WorkGroupState

-- | The engine version setting for all queries on the workgroup. Queries
--   on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the
--   preview engine regardless of this setting.
[$sel:engineVersion:WorkGroupSummary'] :: WorkGroupSummary -> Maybe EngineVersion

-- | The workgroup description.
[$sel:description:WorkGroupSummary'] :: WorkGroupSummary -> Maybe Text

-- | Create a value of <a>WorkGroupSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:WorkGroupSummary'</a>,
--   <a>workGroupSummary_creationTime</a> - The workgroup creation date and
--   time.
--   
--   <a>$sel:name:WorkGroupSummary'</a>, <a>workGroupSummary_name</a> - The
--   name of the workgroup.
--   
--   <a>$sel:state:WorkGroupSummary'</a>, <a>workGroupSummary_state</a> -
--   The state of the workgroup.
--   
--   <a>$sel:engineVersion:WorkGroupSummary'</a>,
--   <a>workGroupSummary_engineVersion</a> - The engine version setting for
--   all queries on the workgroup. Queries on the
--   <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the preview
--   engine regardless of this setting.
--   
--   <a>$sel:description:WorkGroupSummary'</a>,
--   <a>workGroupSummary_description</a> - The workgroup description.
newWorkGroupSummary :: WorkGroupSummary

-- | The workgroup creation date and time.
workGroupSummary_creationTime :: Lens' WorkGroupSummary (Maybe UTCTime)

-- | The name of the workgroup.
workGroupSummary_name :: Lens' WorkGroupSummary (Maybe Text)

-- | The state of the workgroup.
workGroupSummary_state :: Lens' WorkGroupSummary (Maybe WorkGroupState)

-- | The engine version setting for all queries on the workgroup. Queries
--   on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the
--   preview engine regardless of this setting.
workGroupSummary_engineVersion :: Lens' WorkGroupSummary (Maybe EngineVersion)

-- | The workgroup description.
workGroupSummary_description :: Lens' WorkGroupSummary (Maybe Text)


-- | Adds one or more tags to an Athena resource. A tag is a label that you
--   assign to a resource. In Athena, a resource can be a workgroup or data
--   catalog. Each tag consists of a key and an optional value, both of
--   which you define. For example, you can use tags to categorize Athena
--   workgroups or data catalogs by purpose, owner, or environment. Use a
--   consistent set of tag keys to make it easier to search and filter
--   workgroups or data catalogs in your account. For best practices, see
--   <a>Tagging Best Practices</a>. Tag keys can be from 1 to 128 UTF-8
--   Unicode characters, and tag values can be from 0 to 256 UTF-8 Unicode
--   characters. Tags can use letters and numbers representable in UTF-8,
--   and the following characters: + - = . _ : / @. Tag keys and values are
--   case-sensitive. Tag keys must be unique per resource. If you specify
--   more than one tag, separate them by commas.
module Network.AWS.Athena.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | Specifies the ARN of the Athena resource (workgroup or data catalog)
--   to which tags are to be added.
[$sel:resourceARN:TagResource'] :: TagResource -> Text

-- | A collection of one or more tags, separated by commas, to be added to
--   an Athena workgroup or data catalog resource.
[$sel:tags:TagResource'] :: TagResource -> [Tag]

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceARN:TagResource'</a>, <a>tagResource_resourceARN</a> -
--   Specifies the ARN of the Athena resource (workgroup or data catalog)
--   to which tags are to be added.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - A collection
--   of one or more tags, separated by commas, to be added to an Athena
--   workgroup or data catalog resource.
newTagResource :: Text -> TagResource

-- | Specifies the ARN of the Athena resource (workgroup or data catalog)
--   to which tags are to be added.
tagResource_resourceARN :: Lens' TagResource Text

-- | A collection of one or more tags, separated by commas, to be added to
--   an Athena workgroup or data catalog resource.
tagResource_tags :: Lens' TagResource [Tag]

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:TagResourceResponse'] :: TagResourceResponse -> Int

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.TagResource.TagResource
instance GHC.Show.Show Network.AWS.Athena.TagResource.TagResource
instance GHC.Read.Read Network.AWS.Athena.TagResource.TagResource
instance GHC.Classes.Eq Network.AWS.Athena.TagResource.TagResource
instance GHC.Generics.Generic Network.AWS.Athena.TagResource.TagResourceResponse
instance GHC.Show.Show Network.AWS.Athena.TagResource.TagResourceResponse
instance GHC.Read.Read Network.AWS.Athena.TagResource.TagResourceResponse
instance GHC.Classes.Eq Network.AWS.Athena.TagResource.TagResourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.TagResource.TagResource
instance Control.DeepSeq.NFData Network.AWS.Athena.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.TagResource.TagResource
instance Control.DeepSeq.NFData Network.AWS.Athena.TagResource.TagResource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.TagResource.TagResource
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.TagResource.TagResource
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.TagResource.TagResource


-- | Stops a query execution. Requires you to have access to the workgroup
--   in which the query ran.
--   
--   For code samples using the Amazon Web Services SDK for Java, see
--   <a>Examples and Code Samples</a> in the <i>Amazon Athena User
--   Guide</i>.
module Network.AWS.Athena.StopQueryExecution

-- | <i>See:</i> <a>newStopQueryExecution</a> smart constructor.
data StopQueryExecution
StopQueryExecution' :: Text -> StopQueryExecution

-- | The unique ID of the query execution to stop.
[$sel:queryExecutionId:StopQueryExecution'] :: StopQueryExecution -> Text

-- | Create a value of <a>StopQueryExecution</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionId:StopQueryExecution'</a>,
--   <a>stopQueryExecution_queryExecutionId</a> - The unique ID of the
--   query execution to stop.
newStopQueryExecution :: Text -> StopQueryExecution

-- | The unique ID of the query execution to stop.
stopQueryExecution_queryExecutionId :: Lens' StopQueryExecution Text

-- | <i>See:</i> <a>newStopQueryExecutionResponse</a> smart constructor.
data StopQueryExecutionResponse
StopQueryExecutionResponse' :: Int -> StopQueryExecutionResponse

-- | The response's http status code.
[$sel:httpStatus:StopQueryExecutionResponse'] :: StopQueryExecutionResponse -> Int

-- | Create a value of <a>StopQueryExecutionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:StopQueryExecutionResponse'</a>,
--   <a>stopQueryExecutionResponse_httpStatus</a> - The response's http
--   status code.
newStopQueryExecutionResponse :: Int -> StopQueryExecutionResponse

-- | The response's http status code.
stopQueryExecutionResponse_httpStatus :: Lens' StopQueryExecutionResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.StopQueryExecution.StopQueryExecution
instance GHC.Show.Show Network.AWS.Athena.StopQueryExecution.StopQueryExecution
instance GHC.Read.Read Network.AWS.Athena.StopQueryExecution.StopQueryExecution
instance GHC.Classes.Eq Network.AWS.Athena.StopQueryExecution.StopQueryExecution
instance GHC.Generics.Generic Network.AWS.Athena.StopQueryExecution.StopQueryExecutionResponse
instance GHC.Show.Show Network.AWS.Athena.StopQueryExecution.StopQueryExecutionResponse
instance GHC.Read.Read Network.AWS.Athena.StopQueryExecution.StopQueryExecutionResponse
instance GHC.Classes.Eq Network.AWS.Athena.StopQueryExecution.StopQueryExecutionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.StopQueryExecution.StopQueryExecution
instance Control.DeepSeq.NFData Network.AWS.Athena.StopQueryExecution.StopQueryExecutionResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.StopQueryExecution.StopQueryExecution
instance Control.DeepSeq.NFData Network.AWS.Athena.StopQueryExecution.StopQueryExecution
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.StopQueryExecution.StopQueryExecution
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.StopQueryExecution.StopQueryExecution
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.StopQueryExecution.StopQueryExecution
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.StopQueryExecution.StopQueryExecution


-- | Runs the SQL query statements contained in the <tt>Query</tt>.
--   Requires you to have access to the workgroup in which the query ran.
--   Running queries against an external catalog requires GetDataCatalog
--   permission to the catalog. For code samples using the Amazon Web
--   Services SDK for Java, see <a>Examples and Code Samples</a> in the
--   <i>Amazon Athena User Guide</i>.
module Network.AWS.Athena.StartQueryExecution

-- | <i>See:</i> <a>newStartQueryExecution</a> smart constructor.
data StartQueryExecution
StartQueryExecution' :: Maybe QueryExecutionContext -> Maybe ResultConfiguration -> Maybe Text -> Maybe Text -> Text -> StartQueryExecution

-- | The database within which the query executes.
[$sel:queryExecutionContext:StartQueryExecution'] :: StartQueryExecution -> Maybe QueryExecutionContext

-- | Specifies information about where and how to save the results of the
--   query execution. If the query runs in a workgroup, then workgroup's
--   settings may override query settings. This affects the query results
--   location. The workgroup settings override is specified in
--   EnforceWorkGroupConfiguration (true/false) in the
--   WorkGroupConfiguration. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
[$sel:resultConfiguration:StartQueryExecution'] :: StartQueryExecution -> Maybe ResultConfiguration

-- | The name of the workgroup in which the query is being started.
[$sel:workGroup:StartQueryExecution'] :: StartQueryExecution -> Maybe Text

-- | A unique case-sensitive string used to ensure the request to create
--   the query is idempotent (executes only once). If another
--   <tt>StartQueryExecution</tt> request is received, the same response is
--   returned and another query is not created. If a parameter has changed,
--   for example, the <tt>QueryString</tt>, an error is returned.
--   
--   This token is listed as not required because Amazon Web Services SDKs
--   (for example the Amazon Web Services SDK for Java) auto-generate the
--   token for users. If you are not using the Amazon Web Services SDK or
--   the Amazon Web Services CLI, you must provide this token or the action
--   will fail.
[$sel:clientRequestToken:StartQueryExecution'] :: StartQueryExecution -> Maybe Text

-- | The SQL query statements to be executed.
[$sel:queryString:StartQueryExecution'] :: StartQueryExecution -> Text

-- | Create a value of <a>StartQueryExecution</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionContext:StartQueryExecution'</a>,
--   <a>startQueryExecution_queryExecutionContext</a> - The database within
--   which the query executes.
--   
--   <a>$sel:resultConfiguration:StartQueryExecution'</a>,
--   <a>startQueryExecution_resultConfiguration</a> - Specifies information
--   about where and how to save the results of the query execution. If the
--   query runs in a workgroup, then workgroup's settings may override
--   query settings. This affects the query results location. The workgroup
--   settings override is specified in EnforceWorkGroupConfiguration
--   (true/false) in the WorkGroupConfiguration. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <a>$sel:workGroup:StartQueryExecution'</a>,
--   <a>startQueryExecution_workGroup</a> - The name of the workgroup in
--   which the query is being started.
--   
--   <a>$sel:clientRequestToken:StartQueryExecution'</a>,
--   <a>startQueryExecution_clientRequestToken</a> - A unique
--   case-sensitive string used to ensure the request to create the query
--   is idempotent (executes only once). If another
--   <tt>StartQueryExecution</tt> request is received, the same response is
--   returned and another query is not created. If a parameter has changed,
--   for example, the <tt>QueryString</tt>, an error is returned.
--   
--   This token is listed as not required because Amazon Web Services SDKs
--   (for example the Amazon Web Services SDK for Java) auto-generate the
--   token for users. If you are not using the Amazon Web Services SDK or
--   the Amazon Web Services CLI, you must provide this token or the action
--   will fail.
--   
--   <a>$sel:queryString:StartQueryExecution'</a>,
--   <a>startQueryExecution_queryString</a> - The SQL query statements to
--   be executed.
newStartQueryExecution :: Text -> StartQueryExecution

-- | The database within which the query executes.
startQueryExecution_queryExecutionContext :: Lens' StartQueryExecution (Maybe QueryExecutionContext)

-- | Specifies information about where and how to save the results of the
--   query execution. If the query runs in a workgroup, then workgroup's
--   settings may override query settings. This affects the query results
--   location. The workgroup settings override is specified in
--   EnforceWorkGroupConfiguration (true/false) in the
--   WorkGroupConfiguration. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
startQueryExecution_resultConfiguration :: Lens' StartQueryExecution (Maybe ResultConfiguration)

-- | The name of the workgroup in which the query is being started.
startQueryExecution_workGroup :: Lens' StartQueryExecution (Maybe Text)

-- | A unique case-sensitive string used to ensure the request to create
--   the query is idempotent (executes only once). If another
--   <tt>StartQueryExecution</tt> request is received, the same response is
--   returned and another query is not created. If a parameter has changed,
--   for example, the <tt>QueryString</tt>, an error is returned.
--   
--   This token is listed as not required because Amazon Web Services SDKs
--   (for example the Amazon Web Services SDK for Java) auto-generate the
--   token for users. If you are not using the Amazon Web Services SDK or
--   the Amazon Web Services CLI, you must provide this token or the action
--   will fail.
startQueryExecution_clientRequestToken :: Lens' StartQueryExecution (Maybe Text)

-- | The SQL query statements to be executed.
startQueryExecution_queryString :: Lens' StartQueryExecution Text

-- | <i>See:</i> <a>newStartQueryExecutionResponse</a> smart constructor.
data StartQueryExecutionResponse
StartQueryExecutionResponse' :: Maybe Text -> Int -> StartQueryExecutionResponse

-- | The unique ID of the query that ran as a result of this request.
[$sel:queryExecutionId:StartQueryExecutionResponse'] :: StartQueryExecutionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:StartQueryExecutionResponse'] :: StartQueryExecutionResponse -> Int

-- | Create a value of <a>StartQueryExecutionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionId:StartQueryExecutionResponse'</a>,
--   <a>startQueryExecutionResponse_queryExecutionId</a> - The unique ID of
--   the query that ran as a result of this request.
--   
--   <a>$sel:httpStatus:StartQueryExecutionResponse'</a>,
--   <a>startQueryExecutionResponse_httpStatus</a> - The response's http
--   status code.
newStartQueryExecutionResponse :: Int -> StartQueryExecutionResponse

-- | The unique ID of the query that ran as a result of this request.
startQueryExecutionResponse_queryExecutionId :: Lens' StartQueryExecutionResponse (Maybe Text)

-- | The response's http status code.
startQueryExecutionResponse_httpStatus :: Lens' StartQueryExecutionResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.StartQueryExecution.StartQueryExecution
instance GHC.Show.Show Network.AWS.Athena.StartQueryExecution.StartQueryExecution
instance GHC.Read.Read Network.AWS.Athena.StartQueryExecution.StartQueryExecution
instance GHC.Classes.Eq Network.AWS.Athena.StartQueryExecution.StartQueryExecution
instance GHC.Generics.Generic Network.AWS.Athena.StartQueryExecution.StartQueryExecutionResponse
instance GHC.Show.Show Network.AWS.Athena.StartQueryExecution.StartQueryExecutionResponse
instance GHC.Read.Read Network.AWS.Athena.StartQueryExecution.StartQueryExecutionResponse
instance GHC.Classes.Eq Network.AWS.Athena.StartQueryExecution.StartQueryExecutionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.StartQueryExecution.StartQueryExecution
instance Control.DeepSeq.NFData Network.AWS.Athena.StartQueryExecution.StartQueryExecutionResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.StartQueryExecution.StartQueryExecution
instance Control.DeepSeq.NFData Network.AWS.Athena.StartQueryExecution.StartQueryExecution
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.StartQueryExecution.StartQueryExecution
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.StartQueryExecution.StartQueryExecution
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.StartQueryExecution.StartQueryExecution
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.StartQueryExecution.StartQueryExecution


-- | Lists available workgroups for the account.
module Network.AWS.Athena.ListWorkGroups

-- | <i>See:</i> <a>newListWorkGroups</a> smart constructor.
data ListWorkGroups
ListWorkGroups' :: Maybe Text -> Maybe Natural -> ListWorkGroups

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
[$sel:nextToken:ListWorkGroups'] :: ListWorkGroups -> Maybe Text

-- | The maximum number of workgroups to return in this request.
[$sel:maxResults:ListWorkGroups'] :: ListWorkGroups -> Maybe Natural

-- | Create a value of <a>ListWorkGroups</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListWorkGroups'</a>, <a>listWorkGroups_nextToken</a>
--   - A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
--   
--   <a>$sel:maxResults:ListWorkGroups'</a>,
--   <a>listWorkGroups_maxResults</a> - The maximum number of workgroups to
--   return in this request.
newListWorkGroups :: ListWorkGroups

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listWorkGroups_nextToken :: Lens' ListWorkGroups (Maybe Text)

-- | The maximum number of workgroups to return in this request.
listWorkGroups_maxResults :: Lens' ListWorkGroups (Maybe Natural)

-- | <i>See:</i> <a>newListWorkGroupsResponse</a> smart constructor.
data ListWorkGroupsResponse
ListWorkGroupsResponse' :: Maybe Text -> Maybe [WorkGroupSummary] -> Int -> ListWorkGroupsResponse

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
[$sel:nextToken:ListWorkGroupsResponse'] :: ListWorkGroupsResponse -> Maybe Text

-- | A list of WorkGroupSummary objects that include the names,
--   descriptions, creation times, and states for each workgroup.
[$sel:workGroups:ListWorkGroupsResponse'] :: ListWorkGroupsResponse -> Maybe [WorkGroupSummary]

-- | The response's http status code.
[$sel:httpStatus:ListWorkGroupsResponse'] :: ListWorkGroupsResponse -> Int

-- | Create a value of <a>ListWorkGroupsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListWorkGroups'</a>,
--   <a>listWorkGroupsResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the <tt>NextToken</tt> from the response object of the previous
--   page call.
--   
--   <a>$sel:workGroups:ListWorkGroupsResponse'</a>,
--   <a>listWorkGroupsResponse_workGroups</a> - A list of WorkGroupSummary
--   objects that include the names, descriptions, creation times, and
--   states for each workgroup.
--   
--   <a>$sel:httpStatus:ListWorkGroupsResponse'</a>,
--   <a>listWorkGroupsResponse_httpStatus</a> - The response's http status
--   code.
newListWorkGroupsResponse :: Int -> ListWorkGroupsResponse

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listWorkGroupsResponse_nextToken :: Lens' ListWorkGroupsResponse (Maybe Text)

-- | A list of WorkGroupSummary objects that include the names,
--   descriptions, creation times, and states for each workgroup.
listWorkGroupsResponse_workGroups :: Lens' ListWorkGroupsResponse (Maybe [WorkGroupSummary])

-- | The response's http status code.
listWorkGroupsResponse_httpStatus :: Lens' ListWorkGroupsResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.ListWorkGroups.ListWorkGroups
instance GHC.Show.Show Network.AWS.Athena.ListWorkGroups.ListWorkGroups
instance GHC.Read.Read Network.AWS.Athena.ListWorkGroups.ListWorkGroups
instance GHC.Classes.Eq Network.AWS.Athena.ListWorkGroups.ListWorkGroups
instance GHC.Generics.Generic Network.AWS.Athena.ListWorkGroups.ListWorkGroupsResponse
instance GHC.Show.Show Network.AWS.Athena.ListWorkGroups.ListWorkGroupsResponse
instance GHC.Read.Read Network.AWS.Athena.ListWorkGroups.ListWorkGroupsResponse
instance GHC.Classes.Eq Network.AWS.Athena.ListWorkGroups.ListWorkGroupsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.ListWorkGroups.ListWorkGroups
instance Control.DeepSeq.NFData Network.AWS.Athena.ListWorkGroups.ListWorkGroupsResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.ListWorkGroups.ListWorkGroups
instance Control.DeepSeq.NFData Network.AWS.Athena.ListWorkGroups.ListWorkGroups
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.ListWorkGroups.ListWorkGroups
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.ListWorkGroups.ListWorkGroups
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.ListWorkGroups.ListWorkGroups
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.ListWorkGroups.ListWorkGroups


-- | Lists the tags associated with an Athena workgroup or data catalog
--   resource.
--   
--   This operation returns paginated results.
module Network.AWS.Athena.ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Maybe Text -> Maybe Natural -> Text -> ListTagsForResource

-- | The token for the next set of results, or null if there are no
--   additional results for this request, where the request lists the tags
--   for the resource with the specified ARN.
[$sel:nextToken:ListTagsForResource'] :: ListTagsForResource -> Maybe Text

-- | The maximum number of results to be returned per request that lists
--   the tags for the resource.
[$sel:maxResults:ListTagsForResource'] :: ListTagsForResource -> Maybe Natural

-- | Lists the tags for the resource with the specified ARN.
[$sel:resourceARN:ListTagsForResource'] :: ListTagsForResource -> Text

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForResource'</a>,
--   <a>listTagsForResource_nextToken</a> - The token for the next set of
--   results, or null if there are no additional results for this request,
--   where the request lists the tags for the resource with the specified
--   ARN.
--   
--   <a>$sel:maxResults:ListTagsForResource'</a>,
--   <a>listTagsForResource_maxResults</a> - The maximum number of results
--   to be returned per request that lists the tags for the resource.
--   
--   <a>$sel:resourceARN:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceARN</a> - Lists the tags for the
--   resource with the specified ARN.
newListTagsForResource :: Text -> ListTagsForResource

-- | The token for the next set of results, or null if there are no
--   additional results for this request, where the request lists the tags
--   for the resource with the specified ARN.
listTagsForResource_nextToken :: Lens' ListTagsForResource (Maybe Text)

-- | The maximum number of results to be returned per request that lists
--   the tags for the resource.
listTagsForResource_maxResults :: Lens' ListTagsForResource (Maybe Natural)

-- | Lists the tags for the resource with the specified ARN.
listTagsForResource_resourceARN :: Lens' ListTagsForResource Text

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe Text -> Maybe [Tag] -> Int -> ListTagsForResourceResponse

-- | A token to be used by the next request if this request is truncated.
[$sel:nextToken:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe Text

-- | The list of tags associated with the specified resource.
[$sel:tags:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe [Tag]

-- | The response's http status code.
[$sel:httpStatus:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Int

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForResource'</a>,
--   <a>listTagsForResourceResponse_nextToken</a> - A token to be used by
--   the next request if this request is truncated.
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - The list of tags associated
--   with the specified resource.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | A token to be used by the next request if this request is truncated.
listTagsForResourceResponse_nextToken :: Lens' ListTagsForResourceResponse (Maybe Text)

-- | The list of tags associated with the specified resource.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.ListTagsForResource.ListTagsForResource
instance GHC.Show.Show Network.AWS.Athena.ListTagsForResource.ListTagsForResource
instance GHC.Read.Read Network.AWS.Athena.ListTagsForResource.ListTagsForResource
instance GHC.Classes.Eq Network.AWS.Athena.ListTagsForResource.ListTagsForResource
instance GHC.Generics.Generic Network.AWS.Athena.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Show.Show Network.AWS.Athena.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Read.Read Network.AWS.Athena.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Classes.Eq Network.AWS.Athena.ListTagsForResource.ListTagsForResourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Network.AWS.Athena.ListTagsForResource.ListTagsForResourceResponse
instance Network.AWS.Pager.AWSPager Network.AWS.Athena.ListTagsForResource.ListTagsForResource
instance Data.Hashable.Class.Hashable Network.AWS.Athena.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Network.AWS.Athena.ListTagsForResource.ListTagsForResource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.ListTagsForResource.ListTagsForResource
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.ListTagsForResource.ListTagsForResource
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.ListTagsForResource.ListTagsForResource
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.ListTagsForResource.ListTagsForResource


-- | Lists the metadata for the tables in the specified data catalog
--   database.
--   
--   This operation returns paginated results.
module Network.AWS.Athena.ListTableMetadata

-- | <i>See:</i> <a>newListTableMetadata</a> smart constructor.
data ListTableMetadata
ListTableMetadata' :: Maybe Text -> Maybe Natural -> Maybe Text -> Text -> Text -> ListTableMetadata

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
[$sel:nextToken:ListTableMetadata'] :: ListTableMetadata -> Maybe Text

-- | Specifies the maximum number of results to return.
[$sel:maxResults:ListTableMetadata'] :: ListTableMetadata -> Maybe Natural

-- | A regex filter that pattern-matches table names. If no expression is
--   supplied, metadata for all tables are listed.
[$sel:expression:ListTableMetadata'] :: ListTableMetadata -> Maybe Text

-- | The name of the data catalog for which table metadata should be
--   returned.
[$sel:catalogName:ListTableMetadata'] :: ListTableMetadata -> Text

-- | The name of the database for which table metadata should be returned.
[$sel:databaseName:ListTableMetadata'] :: ListTableMetadata -> Text

-- | Create a value of <a>ListTableMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTableMetadata'</a>,
--   <a>listTableMetadata_nextToken</a> - A token generated by the Athena
--   service that specifies where to continue pagination if a previous
--   request was truncated. To obtain the next set of pages, pass in the
--   NextToken from the response object of the previous page call.
--   
--   <a>$sel:maxResults:ListTableMetadata'</a>,
--   <a>listTableMetadata_maxResults</a> - Specifies the maximum number of
--   results to return.
--   
--   <a>$sel:expression:ListTableMetadata'</a>,
--   <a>listTableMetadata_expression</a> - A regex filter that
--   pattern-matches table names. If no expression is supplied, metadata
--   for all tables are listed.
--   
--   <a>$sel:catalogName:ListTableMetadata'</a>,
--   <a>listTableMetadata_catalogName</a> - The name of the data catalog
--   for which table metadata should be returned.
--   
--   <a>$sel:databaseName:ListTableMetadata'</a>,
--   <a>listTableMetadata_databaseName</a> - The name of the database for
--   which table metadata should be returned.
newListTableMetadata :: Text -> Text -> ListTableMetadata

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
listTableMetadata_nextToken :: Lens' ListTableMetadata (Maybe Text)

-- | Specifies the maximum number of results to return.
listTableMetadata_maxResults :: Lens' ListTableMetadata (Maybe Natural)

-- | A regex filter that pattern-matches table names. If no expression is
--   supplied, metadata for all tables are listed.
listTableMetadata_expression :: Lens' ListTableMetadata (Maybe Text)

-- | The name of the data catalog for which table metadata should be
--   returned.
listTableMetadata_catalogName :: Lens' ListTableMetadata Text

-- | The name of the database for which table metadata should be returned.
listTableMetadata_databaseName :: Lens' ListTableMetadata Text

-- | <i>See:</i> <a>newListTableMetadataResponse</a> smart constructor.
data ListTableMetadataResponse
ListTableMetadataResponse' :: Maybe Text -> Maybe [TableMetadata] -> Int -> ListTableMetadataResponse

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
[$sel:nextToken:ListTableMetadataResponse'] :: ListTableMetadataResponse -> Maybe Text

-- | A list of table metadata.
[$sel:tableMetadataList:ListTableMetadataResponse'] :: ListTableMetadataResponse -> Maybe [TableMetadata]

-- | The response's http status code.
[$sel:httpStatus:ListTableMetadataResponse'] :: ListTableMetadataResponse -> Int

-- | Create a value of <a>ListTableMetadataResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTableMetadata'</a>,
--   <a>listTableMetadataResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the NextToken from the response object of the previous page call.
--   
--   <a>$sel:tableMetadataList:ListTableMetadataResponse'</a>,
--   <a>listTableMetadataResponse_tableMetadataList</a> - A list of table
--   metadata.
--   
--   <a>$sel:httpStatus:ListTableMetadataResponse'</a>,
--   <a>listTableMetadataResponse_httpStatus</a> - The response's http
--   status code.
newListTableMetadataResponse :: Int -> ListTableMetadataResponse

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
listTableMetadataResponse_nextToken :: Lens' ListTableMetadataResponse (Maybe Text)

-- | A list of table metadata.
listTableMetadataResponse_tableMetadataList :: Lens' ListTableMetadataResponse (Maybe [TableMetadata])

-- | The response's http status code.
listTableMetadataResponse_httpStatus :: Lens' ListTableMetadataResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.ListTableMetadata.ListTableMetadata
instance GHC.Show.Show Network.AWS.Athena.ListTableMetadata.ListTableMetadata
instance GHC.Read.Read Network.AWS.Athena.ListTableMetadata.ListTableMetadata
instance GHC.Classes.Eq Network.AWS.Athena.ListTableMetadata.ListTableMetadata
instance GHC.Generics.Generic Network.AWS.Athena.ListTableMetadata.ListTableMetadataResponse
instance GHC.Show.Show Network.AWS.Athena.ListTableMetadata.ListTableMetadataResponse
instance GHC.Read.Read Network.AWS.Athena.ListTableMetadata.ListTableMetadataResponse
instance GHC.Classes.Eq Network.AWS.Athena.ListTableMetadata.ListTableMetadataResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.ListTableMetadata.ListTableMetadata
instance Control.DeepSeq.NFData Network.AWS.Athena.ListTableMetadata.ListTableMetadataResponse
instance Network.AWS.Pager.AWSPager Network.AWS.Athena.ListTableMetadata.ListTableMetadata
instance Data.Hashable.Class.Hashable Network.AWS.Athena.ListTableMetadata.ListTableMetadata
instance Control.DeepSeq.NFData Network.AWS.Athena.ListTableMetadata.ListTableMetadata
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.ListTableMetadata.ListTableMetadata
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.ListTableMetadata.ListTableMetadata
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.ListTableMetadata.ListTableMetadata
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.ListTableMetadata.ListTableMetadata


-- | Provides a list of available query execution IDs for the queries in
--   the specified workgroup. If a workgroup is not specified, returns a
--   list of query execution IDs for the primary workgroup. Requires you to
--   have access to the workgroup in which the queries ran.
--   
--   For code samples using the Amazon Web Services SDK for Java, see
--   <a>Examples and Code Samples</a> in the <i>Amazon Athena User
--   Guide</i>.
--   
--   This operation returns paginated results.
module Network.AWS.Athena.ListQueryExecutions

-- | <i>See:</i> <a>newListQueryExecutions</a> smart constructor.
data ListQueryExecutions
ListQueryExecutions' :: Maybe Text -> Maybe Natural -> Maybe Text -> ListQueryExecutions

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
[$sel:nextToken:ListQueryExecutions'] :: ListQueryExecutions -> Maybe Text

-- | The maximum number of query executions to return in this request.
[$sel:maxResults:ListQueryExecutions'] :: ListQueryExecutions -> Maybe Natural

-- | The name of the workgroup from which queries are being returned. If a
--   workgroup is not specified, a list of available query execution IDs
--   for the queries in the primary workgroup is returned.
[$sel:workGroup:ListQueryExecutions'] :: ListQueryExecutions -> Maybe Text

-- | Create a value of <a>ListQueryExecutions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListQueryExecutions'</a>,
--   <a>listQueryExecutions_nextToken</a> - A token generated by the Athena
--   service that specifies where to continue pagination if a previous
--   request was truncated. To obtain the next set of pages, pass in the
--   <tt>NextToken</tt> from the response object of the previous page call.
--   
--   <a>$sel:maxResults:ListQueryExecutions'</a>,
--   <a>listQueryExecutions_maxResults</a> - The maximum number of query
--   executions to return in this request.
--   
--   <a>$sel:workGroup:ListQueryExecutions'</a>,
--   <a>listQueryExecutions_workGroup</a> - The name of the workgroup from
--   which queries are being returned. If a workgroup is not specified, a
--   list of available query execution IDs for the queries in the primary
--   workgroup is returned.
newListQueryExecutions :: ListQueryExecutions

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listQueryExecutions_nextToken :: Lens' ListQueryExecutions (Maybe Text)

-- | The maximum number of query executions to return in this request.
listQueryExecutions_maxResults :: Lens' ListQueryExecutions (Maybe Natural)

-- | The name of the workgroup from which queries are being returned. If a
--   workgroup is not specified, a list of available query execution IDs
--   for the queries in the primary workgroup is returned.
listQueryExecutions_workGroup :: Lens' ListQueryExecutions (Maybe Text)

-- | <i>See:</i> <a>newListQueryExecutionsResponse</a> smart constructor.
data ListQueryExecutionsResponse
ListQueryExecutionsResponse' :: Maybe Text -> Maybe (NonEmpty Text) -> Int -> ListQueryExecutionsResponse

-- | A token to be used by the next request if this request is truncated.
[$sel:nextToken:ListQueryExecutionsResponse'] :: ListQueryExecutionsResponse -> Maybe Text

-- | The unique IDs of each query execution as an array of strings.
[$sel:queryExecutionIds:ListQueryExecutionsResponse'] :: ListQueryExecutionsResponse -> Maybe (NonEmpty Text)

-- | The response's http status code.
[$sel:httpStatus:ListQueryExecutionsResponse'] :: ListQueryExecutionsResponse -> Int

-- | Create a value of <a>ListQueryExecutionsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListQueryExecutions'</a>,
--   <a>listQueryExecutionsResponse_nextToken</a> - A token to be used by
--   the next request if this request is truncated.
--   
--   <a>$sel:queryExecutionIds:ListQueryExecutionsResponse'</a>,
--   <a>listQueryExecutionsResponse_queryExecutionIds</a> - The unique IDs
--   of each query execution as an array of strings.
--   
--   <a>$sel:httpStatus:ListQueryExecutionsResponse'</a>,
--   <a>listQueryExecutionsResponse_httpStatus</a> - The response's http
--   status code.
newListQueryExecutionsResponse :: Int -> ListQueryExecutionsResponse

-- | A token to be used by the next request if this request is truncated.
listQueryExecutionsResponse_nextToken :: Lens' ListQueryExecutionsResponse (Maybe Text)

-- | The unique IDs of each query execution as an array of strings.
listQueryExecutionsResponse_queryExecutionIds :: Lens' ListQueryExecutionsResponse (Maybe (NonEmpty Text))

-- | The response's http status code.
listQueryExecutionsResponse_httpStatus :: Lens' ListQueryExecutionsResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.ListQueryExecutions.ListQueryExecutions
instance GHC.Show.Show Network.AWS.Athena.ListQueryExecutions.ListQueryExecutions
instance GHC.Read.Read Network.AWS.Athena.ListQueryExecutions.ListQueryExecutions
instance GHC.Classes.Eq Network.AWS.Athena.ListQueryExecutions.ListQueryExecutions
instance GHC.Generics.Generic Network.AWS.Athena.ListQueryExecutions.ListQueryExecutionsResponse
instance GHC.Show.Show Network.AWS.Athena.ListQueryExecutions.ListQueryExecutionsResponse
instance GHC.Read.Read Network.AWS.Athena.ListQueryExecutions.ListQueryExecutionsResponse
instance GHC.Classes.Eq Network.AWS.Athena.ListQueryExecutions.ListQueryExecutionsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.ListQueryExecutions.ListQueryExecutions
instance Control.DeepSeq.NFData Network.AWS.Athena.ListQueryExecutions.ListQueryExecutionsResponse
instance Network.AWS.Pager.AWSPager Network.AWS.Athena.ListQueryExecutions.ListQueryExecutions
instance Data.Hashable.Class.Hashable Network.AWS.Athena.ListQueryExecutions.ListQueryExecutions
instance Control.DeepSeq.NFData Network.AWS.Athena.ListQueryExecutions.ListQueryExecutions
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.ListQueryExecutions.ListQueryExecutions
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.ListQueryExecutions.ListQueryExecutions
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.ListQueryExecutions.ListQueryExecutions
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.ListQueryExecutions.ListQueryExecutions


-- | Lists the prepared statements in the specfied workgroup.
module Network.AWS.Athena.ListPreparedStatements

-- | <i>See:</i> <a>newListPreparedStatements</a> smart constructor.
data ListPreparedStatements
ListPreparedStatements' :: Maybe Text -> Maybe Natural -> Text -> ListPreparedStatements

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
[$sel:nextToken:ListPreparedStatements'] :: ListPreparedStatements -> Maybe Text

-- | The maximum number of results to return in this request.
[$sel:maxResults:ListPreparedStatements'] :: ListPreparedStatements -> Maybe Natural

-- | The workgroup to list the prepared statements for.
[$sel:workGroup:ListPreparedStatements'] :: ListPreparedStatements -> Text

-- | Create a value of <a>ListPreparedStatements</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListPreparedStatements'</a>,
--   <a>listPreparedStatements_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the <tt>NextToken</tt> from the response object of the previous
--   page call.
--   
--   <a>$sel:maxResults:ListPreparedStatements'</a>,
--   <a>listPreparedStatements_maxResults</a> - The maximum number of
--   results to return in this request.
--   
--   <a>$sel:workGroup:ListPreparedStatements'</a>,
--   <a>listPreparedStatements_workGroup</a> - The workgroup to list the
--   prepared statements for.
newListPreparedStatements :: Text -> ListPreparedStatements

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listPreparedStatements_nextToken :: Lens' ListPreparedStatements (Maybe Text)

-- | The maximum number of results to return in this request.
listPreparedStatements_maxResults :: Lens' ListPreparedStatements (Maybe Natural)

-- | The workgroup to list the prepared statements for.
listPreparedStatements_workGroup :: Lens' ListPreparedStatements Text

-- | <i>See:</i> <a>newListPreparedStatementsResponse</a> smart
--   constructor.
data ListPreparedStatementsResponse
ListPreparedStatementsResponse' :: Maybe Text -> Maybe [PreparedStatementSummary] -> Int -> ListPreparedStatementsResponse

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
[$sel:nextToken:ListPreparedStatementsResponse'] :: ListPreparedStatementsResponse -> Maybe Text

-- | The list of prepared statements for the workgroup.
[$sel:preparedStatements:ListPreparedStatementsResponse'] :: ListPreparedStatementsResponse -> Maybe [PreparedStatementSummary]

-- | The response's http status code.
[$sel:httpStatus:ListPreparedStatementsResponse'] :: ListPreparedStatementsResponse -> Int

-- | Create a value of <a>ListPreparedStatementsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListPreparedStatements'</a>,
--   <a>listPreparedStatementsResponse_nextToken</a> - A token generated by
--   the Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the <tt>NextToken</tt> from the response object of the previous
--   page call.
--   
--   <a>$sel:preparedStatements:ListPreparedStatementsResponse'</a>,
--   <a>listPreparedStatementsResponse_preparedStatements</a> - The list of
--   prepared statements for the workgroup.
--   
--   <a>$sel:httpStatus:ListPreparedStatementsResponse'</a>,
--   <a>listPreparedStatementsResponse_httpStatus</a> - The response's http
--   status code.
newListPreparedStatementsResponse :: Int -> ListPreparedStatementsResponse

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listPreparedStatementsResponse_nextToken :: Lens' ListPreparedStatementsResponse (Maybe Text)

-- | The list of prepared statements for the workgroup.
listPreparedStatementsResponse_preparedStatements :: Lens' ListPreparedStatementsResponse (Maybe [PreparedStatementSummary])

-- | The response's http status code.
listPreparedStatementsResponse_httpStatus :: Lens' ListPreparedStatementsResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.ListPreparedStatements.ListPreparedStatements
instance GHC.Show.Show Network.AWS.Athena.ListPreparedStatements.ListPreparedStatements
instance GHC.Read.Read Network.AWS.Athena.ListPreparedStatements.ListPreparedStatements
instance GHC.Classes.Eq Network.AWS.Athena.ListPreparedStatements.ListPreparedStatements
instance GHC.Generics.Generic Network.AWS.Athena.ListPreparedStatements.ListPreparedStatementsResponse
instance GHC.Show.Show Network.AWS.Athena.ListPreparedStatements.ListPreparedStatementsResponse
instance GHC.Read.Read Network.AWS.Athena.ListPreparedStatements.ListPreparedStatementsResponse
instance GHC.Classes.Eq Network.AWS.Athena.ListPreparedStatements.ListPreparedStatementsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.ListPreparedStatements.ListPreparedStatements
instance Control.DeepSeq.NFData Network.AWS.Athena.ListPreparedStatements.ListPreparedStatementsResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.ListPreparedStatements.ListPreparedStatements
instance Control.DeepSeq.NFData Network.AWS.Athena.ListPreparedStatements.ListPreparedStatements
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.ListPreparedStatements.ListPreparedStatements
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.ListPreparedStatements.ListPreparedStatements
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.ListPreparedStatements.ListPreparedStatements
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.ListPreparedStatements.ListPreparedStatements


-- | Provides a list of available query IDs only for queries saved in the
--   specified workgroup. Requires that you have access to the specified
--   workgroup. If a workgroup is not specified, lists the saved queries
--   for the primary workgroup.
--   
--   For code samples using the Amazon Web Services SDK for Java, see
--   <a>Examples and Code Samples</a> in the <i>Amazon Athena User
--   Guide</i>.
--   
--   This operation returns paginated results.
module Network.AWS.Athena.ListNamedQueries

-- | <i>See:</i> <a>newListNamedQueries</a> smart constructor.
data ListNamedQueries
ListNamedQueries' :: Maybe Text -> Maybe Natural -> Maybe Text -> ListNamedQueries

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
[$sel:nextToken:ListNamedQueries'] :: ListNamedQueries -> Maybe Text

-- | The maximum number of queries to return in this request.
[$sel:maxResults:ListNamedQueries'] :: ListNamedQueries -> Maybe Natural

-- | The name of the workgroup from which the named queries are being
--   returned. If a workgroup is not specified, the saved queries for the
--   primary workgroup are returned.
[$sel:workGroup:ListNamedQueries'] :: ListNamedQueries -> Maybe Text

-- | Create a value of <a>ListNamedQueries</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListNamedQueries'</a>,
--   <a>listNamedQueries_nextToken</a> - A token generated by the Athena
--   service that specifies where to continue pagination if a previous
--   request was truncated. To obtain the next set of pages, pass in the
--   <tt>NextToken</tt> from the response object of the previous page call.
--   
--   <a>$sel:maxResults:ListNamedQueries'</a>,
--   <a>listNamedQueries_maxResults</a> - The maximum number of queries to
--   return in this request.
--   
--   <a>$sel:workGroup:ListNamedQueries'</a>,
--   <a>listNamedQueries_workGroup</a> - The name of the workgroup from
--   which the named queries are being returned. If a workgroup is not
--   specified, the saved queries for the primary workgroup are returned.
newListNamedQueries :: ListNamedQueries

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listNamedQueries_nextToken :: Lens' ListNamedQueries (Maybe Text)

-- | The maximum number of queries to return in this request.
listNamedQueries_maxResults :: Lens' ListNamedQueries (Maybe Natural)

-- | The name of the workgroup from which the named queries are being
--   returned. If a workgroup is not specified, the saved queries for the
--   primary workgroup are returned.
listNamedQueries_workGroup :: Lens' ListNamedQueries (Maybe Text)

-- | <i>See:</i> <a>newListNamedQueriesResponse</a> smart constructor.
data ListNamedQueriesResponse
ListNamedQueriesResponse' :: Maybe (NonEmpty Text) -> Maybe Text -> Int -> ListNamedQueriesResponse

-- | The list of unique query IDs.
[$sel:namedQueryIds:ListNamedQueriesResponse'] :: ListNamedQueriesResponse -> Maybe (NonEmpty Text)

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
[$sel:nextToken:ListNamedQueriesResponse'] :: ListNamedQueriesResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListNamedQueriesResponse'] :: ListNamedQueriesResponse -> Int

-- | Create a value of <a>ListNamedQueriesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryIds:ListNamedQueriesResponse'</a>,
--   <a>listNamedQueriesResponse_namedQueryIds</a> - The list of unique
--   query IDs.
--   
--   <a>$sel:nextToken:ListNamedQueries'</a>,
--   <a>listNamedQueriesResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the <tt>NextToken</tt> from the response object of the previous
--   page call.
--   
--   <a>$sel:httpStatus:ListNamedQueriesResponse'</a>,
--   <a>listNamedQueriesResponse_httpStatus</a> - The response's http
--   status code.
newListNamedQueriesResponse :: Int -> ListNamedQueriesResponse

-- | The list of unique query IDs.
listNamedQueriesResponse_namedQueryIds :: Lens' ListNamedQueriesResponse (Maybe (NonEmpty Text))

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listNamedQueriesResponse_nextToken :: Lens' ListNamedQueriesResponse (Maybe Text)

-- | The response's http status code.
listNamedQueriesResponse_httpStatus :: Lens' ListNamedQueriesResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.ListNamedQueries.ListNamedQueries
instance GHC.Show.Show Network.AWS.Athena.ListNamedQueries.ListNamedQueries
instance GHC.Read.Read Network.AWS.Athena.ListNamedQueries.ListNamedQueries
instance GHC.Classes.Eq Network.AWS.Athena.ListNamedQueries.ListNamedQueries
instance GHC.Generics.Generic Network.AWS.Athena.ListNamedQueries.ListNamedQueriesResponse
instance GHC.Show.Show Network.AWS.Athena.ListNamedQueries.ListNamedQueriesResponse
instance GHC.Read.Read Network.AWS.Athena.ListNamedQueries.ListNamedQueriesResponse
instance GHC.Classes.Eq Network.AWS.Athena.ListNamedQueries.ListNamedQueriesResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.ListNamedQueries.ListNamedQueries
instance Control.DeepSeq.NFData Network.AWS.Athena.ListNamedQueries.ListNamedQueriesResponse
instance Network.AWS.Pager.AWSPager Network.AWS.Athena.ListNamedQueries.ListNamedQueries
instance Data.Hashable.Class.Hashable Network.AWS.Athena.ListNamedQueries.ListNamedQueries
instance Control.DeepSeq.NFData Network.AWS.Athena.ListNamedQueries.ListNamedQueries
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.ListNamedQueries.ListNamedQueries
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.ListNamedQueries.ListNamedQueries
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.ListNamedQueries.ListNamedQueries
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.ListNamedQueries.ListNamedQueries


-- | Returns a list of engine versions that are available to choose from,
--   including the Auto option.
module Network.AWS.Athena.ListEngineVersions

-- | <i>See:</i> <a>newListEngineVersions</a> smart constructor.
data ListEngineVersions
ListEngineVersions' :: Maybe Text -> Maybe Natural -> ListEngineVersions

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
[$sel:nextToken:ListEngineVersions'] :: ListEngineVersions -> Maybe Text

-- | The maximum number of engine versions to return in this request.
[$sel:maxResults:ListEngineVersions'] :: ListEngineVersions -> Maybe Natural

-- | Create a value of <a>ListEngineVersions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListEngineVersions'</a>,
--   <a>listEngineVersions_nextToken</a> - A token generated by the Athena
--   service that specifies where to continue pagination if a previous
--   request was truncated. To obtain the next set of pages, pass in the
--   <tt>NextToken</tt> from the response object of the previous page call.
--   
--   <a>$sel:maxResults:ListEngineVersions'</a>,
--   <a>listEngineVersions_maxResults</a> - The maximum number of engine
--   versions to return in this request.
newListEngineVersions :: ListEngineVersions

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listEngineVersions_nextToken :: Lens' ListEngineVersions (Maybe Text)

-- | The maximum number of engine versions to return in this request.
listEngineVersions_maxResults :: Lens' ListEngineVersions (Maybe Natural)

-- | <i>See:</i> <a>newListEngineVersionsResponse</a> smart constructor.
data ListEngineVersionsResponse
ListEngineVersionsResponse' :: Maybe Text -> Maybe [EngineVersion] -> Int -> ListEngineVersionsResponse

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
[$sel:nextToken:ListEngineVersionsResponse'] :: ListEngineVersionsResponse -> Maybe Text

-- | A list of engine versions that are available to choose from.
[$sel:engineVersions:ListEngineVersionsResponse'] :: ListEngineVersionsResponse -> Maybe [EngineVersion]

-- | The response's http status code.
[$sel:httpStatus:ListEngineVersionsResponse'] :: ListEngineVersionsResponse -> Int

-- | Create a value of <a>ListEngineVersionsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListEngineVersions'</a>,
--   <a>listEngineVersionsResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the <tt>NextToken</tt> from the response object of the previous
--   page call.
--   
--   <a>$sel:engineVersions:ListEngineVersionsResponse'</a>,
--   <a>listEngineVersionsResponse_engineVersions</a> - A list of engine
--   versions that are available to choose from.
--   
--   <a>$sel:httpStatus:ListEngineVersionsResponse'</a>,
--   <a>listEngineVersionsResponse_httpStatus</a> - The response's http
--   status code.
newListEngineVersionsResponse :: Int -> ListEngineVersionsResponse

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listEngineVersionsResponse_nextToken :: Lens' ListEngineVersionsResponse (Maybe Text)

-- | A list of engine versions that are available to choose from.
listEngineVersionsResponse_engineVersions :: Lens' ListEngineVersionsResponse (Maybe [EngineVersion])

-- | The response's http status code.
listEngineVersionsResponse_httpStatus :: Lens' ListEngineVersionsResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.ListEngineVersions.ListEngineVersions
instance GHC.Show.Show Network.AWS.Athena.ListEngineVersions.ListEngineVersions
instance GHC.Read.Read Network.AWS.Athena.ListEngineVersions.ListEngineVersions
instance GHC.Classes.Eq Network.AWS.Athena.ListEngineVersions.ListEngineVersions
instance GHC.Generics.Generic Network.AWS.Athena.ListEngineVersions.ListEngineVersionsResponse
instance GHC.Show.Show Network.AWS.Athena.ListEngineVersions.ListEngineVersionsResponse
instance GHC.Read.Read Network.AWS.Athena.ListEngineVersions.ListEngineVersionsResponse
instance GHC.Classes.Eq Network.AWS.Athena.ListEngineVersions.ListEngineVersionsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.ListEngineVersions.ListEngineVersions
instance Control.DeepSeq.NFData Network.AWS.Athena.ListEngineVersions.ListEngineVersionsResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.ListEngineVersions.ListEngineVersions
instance Control.DeepSeq.NFData Network.AWS.Athena.ListEngineVersions.ListEngineVersions
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.ListEngineVersions.ListEngineVersions
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.ListEngineVersions.ListEngineVersions
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.ListEngineVersions.ListEngineVersions
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.ListEngineVersions.ListEngineVersions


-- | Lists the databases in the specified data catalog.
--   
--   This operation returns paginated results.
module Network.AWS.Athena.ListDatabases

-- | <i>See:</i> <a>newListDatabases</a> smart constructor.
data ListDatabases
ListDatabases' :: Maybe Text -> Maybe Natural -> Text -> ListDatabases

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
[$sel:nextToken:ListDatabases'] :: ListDatabases -> Maybe Text

-- | Specifies the maximum number of results to return.
[$sel:maxResults:ListDatabases'] :: ListDatabases -> Maybe Natural

-- | The name of the data catalog that contains the databases to return.
[$sel:catalogName:ListDatabases'] :: ListDatabases -> Text

-- | Create a value of <a>ListDatabases</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDatabases'</a>, <a>listDatabases_nextToken</a> -
--   A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
--   
--   <a>$sel:maxResults:ListDatabases'</a>, <a>listDatabases_maxResults</a>
--   - Specifies the maximum number of results to return.
--   
--   <a>$sel:catalogName:ListDatabases'</a>,
--   <a>listDatabases_catalogName</a> - The name of the data catalog that
--   contains the databases to return.
newListDatabases :: Text -> ListDatabases

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listDatabases_nextToken :: Lens' ListDatabases (Maybe Text)

-- | Specifies the maximum number of results to return.
listDatabases_maxResults :: Lens' ListDatabases (Maybe Natural)

-- | The name of the data catalog that contains the databases to return.
listDatabases_catalogName :: Lens' ListDatabases Text

-- | <i>See:</i> <a>newListDatabasesResponse</a> smart constructor.
data ListDatabasesResponse
ListDatabasesResponse' :: Maybe [Database] -> Maybe Text -> Int -> ListDatabasesResponse

-- | A list of databases from a data catalog.
[$sel:databaseList:ListDatabasesResponse'] :: ListDatabasesResponse -> Maybe [Database]

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
[$sel:nextToken:ListDatabasesResponse'] :: ListDatabasesResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListDatabasesResponse'] :: ListDatabasesResponse -> Int

-- | Create a value of <a>ListDatabasesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:databaseList:ListDatabasesResponse'</a>,
--   <a>listDatabasesResponse_databaseList</a> - A list of databases from a
--   data catalog.
--   
--   <a>$sel:nextToken:ListDatabases'</a>,
--   <a>listDatabasesResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the NextToken from the response object of the previous page call.
--   
--   <a>$sel:httpStatus:ListDatabasesResponse'</a>,
--   <a>listDatabasesResponse_httpStatus</a> - The response's http status
--   code.
newListDatabasesResponse :: Int -> ListDatabasesResponse

-- | A list of databases from a data catalog.
listDatabasesResponse_databaseList :: Lens' ListDatabasesResponse (Maybe [Database])

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
listDatabasesResponse_nextToken :: Lens' ListDatabasesResponse (Maybe Text)

-- | The response's http status code.
listDatabasesResponse_httpStatus :: Lens' ListDatabasesResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.ListDatabases.ListDatabases
instance GHC.Show.Show Network.AWS.Athena.ListDatabases.ListDatabases
instance GHC.Read.Read Network.AWS.Athena.ListDatabases.ListDatabases
instance GHC.Classes.Eq Network.AWS.Athena.ListDatabases.ListDatabases
instance GHC.Generics.Generic Network.AWS.Athena.ListDatabases.ListDatabasesResponse
instance GHC.Show.Show Network.AWS.Athena.ListDatabases.ListDatabasesResponse
instance GHC.Read.Read Network.AWS.Athena.ListDatabases.ListDatabasesResponse
instance GHC.Classes.Eq Network.AWS.Athena.ListDatabases.ListDatabasesResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.ListDatabases.ListDatabases
instance Control.DeepSeq.NFData Network.AWS.Athena.ListDatabases.ListDatabasesResponse
instance Network.AWS.Pager.AWSPager Network.AWS.Athena.ListDatabases.ListDatabases
instance Data.Hashable.Class.Hashable Network.AWS.Athena.ListDatabases.ListDatabases
instance Control.DeepSeq.NFData Network.AWS.Athena.ListDatabases.ListDatabases
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.ListDatabases.ListDatabases
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.ListDatabases.ListDatabases
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.ListDatabases.ListDatabases
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.ListDatabases.ListDatabases


-- | Lists the data catalogs in the current Amazon Web Services account.
--   
--   This operation returns paginated results.
module Network.AWS.Athena.ListDataCatalogs

-- | <i>See:</i> <a>newListDataCatalogs</a> smart constructor.
data ListDataCatalogs
ListDataCatalogs' :: Maybe Text -> Maybe Natural -> ListDataCatalogs

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
[$sel:nextToken:ListDataCatalogs'] :: ListDataCatalogs -> Maybe Text

-- | Specifies the maximum number of data catalogs to return.
[$sel:maxResults:ListDataCatalogs'] :: ListDataCatalogs -> Maybe Natural

-- | Create a value of <a>ListDataCatalogs</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDataCatalogs'</a>,
--   <a>listDataCatalogs_nextToken</a> - A token generated by the Athena
--   service that specifies where to continue pagination if a previous
--   request was truncated. To obtain the next set of pages, pass in the
--   NextToken from the response object of the previous page call.
--   
--   <a>$sel:maxResults:ListDataCatalogs'</a>,
--   <a>listDataCatalogs_maxResults</a> - Specifies the maximum number of
--   data catalogs to return.
newListDataCatalogs :: ListDataCatalogs

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
listDataCatalogs_nextToken :: Lens' ListDataCatalogs (Maybe Text)

-- | Specifies the maximum number of data catalogs to return.
listDataCatalogs_maxResults :: Lens' ListDataCatalogs (Maybe Natural)

-- | <i>See:</i> <a>newListDataCatalogsResponse</a> smart constructor.
data ListDataCatalogsResponse
ListDataCatalogsResponse' :: Maybe Text -> Maybe [DataCatalogSummary] -> Int -> ListDataCatalogsResponse

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
[$sel:nextToken:ListDataCatalogsResponse'] :: ListDataCatalogsResponse -> Maybe Text

-- | A summary list of data catalogs.
[$sel:dataCatalogsSummary:ListDataCatalogsResponse'] :: ListDataCatalogsResponse -> Maybe [DataCatalogSummary]

-- | The response's http status code.
[$sel:httpStatus:ListDataCatalogsResponse'] :: ListDataCatalogsResponse -> Int

-- | Create a value of <a>ListDataCatalogsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDataCatalogs'</a>,
--   <a>listDataCatalogsResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the NextToken from the response object of the previous page call.
--   
--   <a>$sel:dataCatalogsSummary:ListDataCatalogsResponse'</a>,
--   <a>listDataCatalogsResponse_dataCatalogsSummary</a> - A summary list
--   of data catalogs.
--   
--   <a>$sel:httpStatus:ListDataCatalogsResponse'</a>,
--   <a>listDataCatalogsResponse_httpStatus</a> - The response's http
--   status code.
newListDataCatalogsResponse :: Int -> ListDataCatalogsResponse

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
listDataCatalogsResponse_nextToken :: Lens' ListDataCatalogsResponse (Maybe Text)

-- | A summary list of data catalogs.
listDataCatalogsResponse_dataCatalogsSummary :: Lens' ListDataCatalogsResponse (Maybe [DataCatalogSummary])

-- | The response's http status code.
listDataCatalogsResponse_httpStatus :: Lens' ListDataCatalogsResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.ListDataCatalogs.ListDataCatalogs
instance GHC.Show.Show Network.AWS.Athena.ListDataCatalogs.ListDataCatalogs
instance GHC.Read.Read Network.AWS.Athena.ListDataCatalogs.ListDataCatalogs
instance GHC.Classes.Eq Network.AWS.Athena.ListDataCatalogs.ListDataCatalogs
instance GHC.Generics.Generic Network.AWS.Athena.ListDataCatalogs.ListDataCatalogsResponse
instance GHC.Show.Show Network.AWS.Athena.ListDataCatalogs.ListDataCatalogsResponse
instance GHC.Read.Read Network.AWS.Athena.ListDataCatalogs.ListDataCatalogsResponse
instance GHC.Classes.Eq Network.AWS.Athena.ListDataCatalogs.ListDataCatalogsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.ListDataCatalogs.ListDataCatalogs
instance Control.DeepSeq.NFData Network.AWS.Athena.ListDataCatalogs.ListDataCatalogsResponse
instance Network.AWS.Pager.AWSPager Network.AWS.Athena.ListDataCatalogs.ListDataCatalogs
instance Data.Hashable.Class.Hashable Network.AWS.Athena.ListDataCatalogs.ListDataCatalogs
instance Control.DeepSeq.NFData Network.AWS.Athena.ListDataCatalogs.ListDataCatalogs
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.ListDataCatalogs.ListDataCatalogs
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.ListDataCatalogs.ListDataCatalogs
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.ListDataCatalogs.ListDataCatalogs
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.ListDataCatalogs.ListDataCatalogs


-- | Returns information about the workgroup with the specified name.
module Network.AWS.Athena.GetWorkGroup

-- | <i>See:</i> <a>newGetWorkGroup</a> smart constructor.
data GetWorkGroup
GetWorkGroup' :: Text -> GetWorkGroup

-- | The name of the workgroup.
[$sel:workGroup:GetWorkGroup'] :: GetWorkGroup -> Text

-- | Create a value of <a>GetWorkGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:workGroup:GetWorkGroup'</a>, <a>getWorkGroup_workGroup</a> -
--   The name of the workgroup.
newGetWorkGroup :: Text -> GetWorkGroup

-- | The name of the workgroup.
getWorkGroup_workGroup :: Lens' GetWorkGroup Text

-- | <i>See:</i> <a>newGetWorkGroupResponse</a> smart constructor.
data GetWorkGroupResponse
GetWorkGroupResponse' :: Maybe WorkGroup -> Int -> GetWorkGroupResponse

-- | Information about the workgroup.
[$sel:workGroup:GetWorkGroupResponse'] :: GetWorkGroupResponse -> Maybe WorkGroup

-- | The response's http status code.
[$sel:httpStatus:GetWorkGroupResponse'] :: GetWorkGroupResponse -> Int

-- | Create a value of <a>GetWorkGroupResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:workGroup:GetWorkGroup'</a>,
--   <a>getWorkGroupResponse_workGroup</a> - Information about the
--   workgroup.
--   
--   <a>$sel:httpStatus:GetWorkGroupResponse'</a>,
--   <a>getWorkGroupResponse_httpStatus</a> - The response's http status
--   code.
newGetWorkGroupResponse :: Int -> GetWorkGroupResponse

-- | Information about the workgroup.
getWorkGroupResponse_workGroup :: Lens' GetWorkGroupResponse (Maybe WorkGroup)

-- | The response's http status code.
getWorkGroupResponse_httpStatus :: Lens' GetWorkGroupResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.GetWorkGroup.GetWorkGroup
instance GHC.Show.Show Network.AWS.Athena.GetWorkGroup.GetWorkGroup
instance GHC.Read.Read Network.AWS.Athena.GetWorkGroup.GetWorkGroup
instance GHC.Classes.Eq Network.AWS.Athena.GetWorkGroup.GetWorkGroup
instance GHC.Generics.Generic Network.AWS.Athena.GetWorkGroup.GetWorkGroupResponse
instance GHC.Show.Show Network.AWS.Athena.GetWorkGroup.GetWorkGroupResponse
instance GHC.Read.Read Network.AWS.Athena.GetWorkGroup.GetWorkGroupResponse
instance GHC.Classes.Eq Network.AWS.Athena.GetWorkGroup.GetWorkGroupResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.GetWorkGroup.GetWorkGroup
instance Control.DeepSeq.NFData Network.AWS.Athena.GetWorkGroup.GetWorkGroupResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.GetWorkGroup.GetWorkGroup
instance Control.DeepSeq.NFData Network.AWS.Athena.GetWorkGroup.GetWorkGroup
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.GetWorkGroup.GetWorkGroup
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.GetWorkGroup.GetWorkGroup
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.GetWorkGroup.GetWorkGroup
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.GetWorkGroup.GetWorkGroup


-- | Returns table metadata for the specified catalog, database, and table.
module Network.AWS.Athena.GetTableMetadata

-- | <i>See:</i> <a>newGetTableMetadata</a> smart constructor.
data GetTableMetadata
GetTableMetadata' :: Text -> Text -> Text -> GetTableMetadata

-- | The name of the data catalog that contains the database and table
--   metadata to return.
[$sel:catalogName:GetTableMetadata'] :: GetTableMetadata -> Text

-- | The name of the database that contains the table metadata to return.
[$sel:databaseName:GetTableMetadata'] :: GetTableMetadata -> Text

-- | The name of the table for which metadata is returned.
[$sel:tableName:GetTableMetadata'] :: GetTableMetadata -> Text

-- | Create a value of <a>GetTableMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogName:GetTableMetadata'</a>,
--   <a>getTableMetadata_catalogName</a> - The name of the data catalog
--   that contains the database and table metadata to return.
--   
--   <a>$sel:databaseName:GetTableMetadata'</a>,
--   <a>getTableMetadata_databaseName</a> - The name of the database that
--   contains the table metadata to return.
--   
--   <a>$sel:tableName:GetTableMetadata'</a>,
--   <a>getTableMetadata_tableName</a> - The name of the table for which
--   metadata is returned.
newGetTableMetadata :: Text -> Text -> Text -> GetTableMetadata

-- | The name of the data catalog that contains the database and table
--   metadata to return.
getTableMetadata_catalogName :: Lens' GetTableMetadata Text

-- | The name of the database that contains the table metadata to return.
getTableMetadata_databaseName :: Lens' GetTableMetadata Text

-- | The name of the table for which metadata is returned.
getTableMetadata_tableName :: Lens' GetTableMetadata Text

-- | <i>See:</i> <a>newGetTableMetadataResponse</a> smart constructor.
data GetTableMetadataResponse
GetTableMetadataResponse' :: Maybe TableMetadata -> Int -> GetTableMetadataResponse

-- | An object that contains table metadata.
[$sel:tableMetadata:GetTableMetadataResponse'] :: GetTableMetadataResponse -> Maybe TableMetadata

-- | The response's http status code.
[$sel:httpStatus:GetTableMetadataResponse'] :: GetTableMetadataResponse -> Int

-- | Create a value of <a>GetTableMetadataResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableMetadata:GetTableMetadataResponse'</a>,
--   <a>getTableMetadataResponse_tableMetadata</a> - An object that
--   contains table metadata.
--   
--   <a>$sel:httpStatus:GetTableMetadataResponse'</a>,
--   <a>getTableMetadataResponse_httpStatus</a> - The response's http
--   status code.
newGetTableMetadataResponse :: Int -> GetTableMetadataResponse

-- | An object that contains table metadata.
getTableMetadataResponse_tableMetadata :: Lens' GetTableMetadataResponse (Maybe TableMetadata)

-- | The response's http status code.
getTableMetadataResponse_httpStatus :: Lens' GetTableMetadataResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.GetTableMetadata.GetTableMetadata
instance GHC.Show.Show Network.AWS.Athena.GetTableMetadata.GetTableMetadata
instance GHC.Read.Read Network.AWS.Athena.GetTableMetadata.GetTableMetadata
instance GHC.Classes.Eq Network.AWS.Athena.GetTableMetadata.GetTableMetadata
instance GHC.Generics.Generic Network.AWS.Athena.GetTableMetadata.GetTableMetadataResponse
instance GHC.Show.Show Network.AWS.Athena.GetTableMetadata.GetTableMetadataResponse
instance GHC.Read.Read Network.AWS.Athena.GetTableMetadata.GetTableMetadataResponse
instance GHC.Classes.Eq Network.AWS.Athena.GetTableMetadata.GetTableMetadataResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.GetTableMetadata.GetTableMetadata
instance Control.DeepSeq.NFData Network.AWS.Athena.GetTableMetadata.GetTableMetadataResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.GetTableMetadata.GetTableMetadata
instance Control.DeepSeq.NFData Network.AWS.Athena.GetTableMetadata.GetTableMetadata
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.GetTableMetadata.GetTableMetadata
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.GetTableMetadata.GetTableMetadata
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.GetTableMetadata.GetTableMetadata
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.GetTableMetadata.GetTableMetadata


-- | Streams the results of a single query execution specified by
--   <tt>QueryExecutionId</tt> from the Athena query results location in
--   Amazon S3. For more information, see <a>Query Results</a> in the
--   <i>Amazon Athena User Guide</i>. This request does not execute the
--   query but returns results. Use StartQueryExecution to run a query.
--   
--   To stream query results successfully, the IAM principal with
--   permission to call <tt>GetQueryResults</tt> also must have permissions
--   to the Amazon S3 <tt>GetObject</tt> action for the Athena query
--   results location.
--   
--   IAM principals with permission to the Amazon S3 <tt>GetObject</tt>
--   action for the query results location are able to retrieve query
--   results from Amazon S3 even if permission to the
--   <tt>GetQueryResults</tt> action is denied. To restrict user or role
--   access, ensure that Amazon S3 permissions to the Athena query location
--   are denied.
--   
--   This operation returns paginated results.
module Network.AWS.Athena.GetQueryResults

-- | <i>See:</i> <a>newGetQueryResults</a> smart constructor.
data GetQueryResults
GetQueryResults' :: Maybe Text -> Maybe Natural -> Text -> GetQueryResults

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
[$sel:nextToken:GetQueryResults'] :: GetQueryResults -> Maybe Text

-- | The maximum number of results (rows) to return in this request.
[$sel:maxResults:GetQueryResults'] :: GetQueryResults -> Maybe Natural

-- | The unique ID of the query execution.
[$sel:queryExecutionId:GetQueryResults'] :: GetQueryResults -> Text

-- | Create a value of <a>GetQueryResults</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:GetQueryResults'</a>,
--   <a>getQueryResults_nextToken</a> - A token generated by the Athena
--   service that specifies where to continue pagination if a previous
--   request was truncated. To obtain the next set of pages, pass in the
--   <tt>NextToken</tt> from the response object of the previous page call.
--   
--   <a>$sel:maxResults:GetQueryResults'</a>,
--   <a>getQueryResults_maxResults</a> - The maximum number of results
--   (rows) to return in this request.
--   
--   <a>$sel:queryExecutionId:GetQueryResults'</a>,
--   <a>getQueryResults_queryExecutionId</a> - The unique ID of the query
--   execution.
newGetQueryResults :: Text -> GetQueryResults

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
getQueryResults_nextToken :: Lens' GetQueryResults (Maybe Text)

-- | The maximum number of results (rows) to return in this request.
getQueryResults_maxResults :: Lens' GetQueryResults (Maybe Natural)

-- | The unique ID of the query execution.
getQueryResults_queryExecutionId :: Lens' GetQueryResults Text

-- | <i>See:</i> <a>newGetQueryResultsResponse</a> smart constructor.
data GetQueryResultsResponse
GetQueryResultsResponse' :: Maybe Text -> Maybe ResultSet -> Maybe Integer -> Int -> GetQueryResultsResponse

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
[$sel:nextToken:GetQueryResultsResponse'] :: GetQueryResultsResponse -> Maybe Text

-- | The results of the query execution.
[$sel:resultSet:GetQueryResultsResponse'] :: GetQueryResultsResponse -> Maybe ResultSet

-- | The number of rows inserted with a <tt>CREATE TABLE AS SELECT</tt>
--   statement.
[$sel:updateCount:GetQueryResultsResponse'] :: GetQueryResultsResponse -> Maybe Integer

-- | The response's http status code.
[$sel:httpStatus:GetQueryResultsResponse'] :: GetQueryResultsResponse -> Int

-- | Create a value of <a>GetQueryResultsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:GetQueryResults'</a>,
--   <a>getQueryResultsResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the <tt>NextToken</tt> from the response object of the previous
--   page call.
--   
--   <a>$sel:resultSet:GetQueryResultsResponse'</a>,
--   <a>getQueryResultsResponse_resultSet</a> - The results of the query
--   execution.
--   
--   <a>$sel:updateCount:GetQueryResultsResponse'</a>,
--   <a>getQueryResultsResponse_updateCount</a> - The number of rows
--   inserted with a <tt>CREATE TABLE AS SELECT</tt> statement.
--   
--   <a>$sel:httpStatus:GetQueryResultsResponse'</a>,
--   <a>getQueryResultsResponse_httpStatus</a> - The response's http status
--   code.
newGetQueryResultsResponse :: Int -> GetQueryResultsResponse

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
getQueryResultsResponse_nextToken :: Lens' GetQueryResultsResponse (Maybe Text)

-- | The results of the query execution.
getQueryResultsResponse_resultSet :: Lens' GetQueryResultsResponse (Maybe ResultSet)

-- | The number of rows inserted with a <tt>CREATE TABLE AS SELECT</tt>
--   statement.
getQueryResultsResponse_updateCount :: Lens' GetQueryResultsResponse (Maybe Integer)

-- | The response's http status code.
getQueryResultsResponse_httpStatus :: Lens' GetQueryResultsResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.GetQueryResults.GetQueryResults
instance GHC.Show.Show Network.AWS.Athena.GetQueryResults.GetQueryResults
instance GHC.Read.Read Network.AWS.Athena.GetQueryResults.GetQueryResults
instance GHC.Classes.Eq Network.AWS.Athena.GetQueryResults.GetQueryResults
instance GHC.Generics.Generic Network.AWS.Athena.GetQueryResults.GetQueryResultsResponse
instance GHC.Show.Show Network.AWS.Athena.GetQueryResults.GetQueryResultsResponse
instance GHC.Read.Read Network.AWS.Athena.GetQueryResults.GetQueryResultsResponse
instance GHC.Classes.Eq Network.AWS.Athena.GetQueryResults.GetQueryResultsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.GetQueryResults.GetQueryResults
instance Control.DeepSeq.NFData Network.AWS.Athena.GetQueryResults.GetQueryResultsResponse
instance Network.AWS.Pager.AWSPager Network.AWS.Athena.GetQueryResults.GetQueryResults
instance Data.Hashable.Class.Hashable Network.AWS.Athena.GetQueryResults.GetQueryResults
instance Control.DeepSeq.NFData Network.AWS.Athena.GetQueryResults.GetQueryResults
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.GetQueryResults.GetQueryResults
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.GetQueryResults.GetQueryResults
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.GetQueryResults.GetQueryResults
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.GetQueryResults.GetQueryResults


-- | Returns information about a single execution of a query if you have
--   access to the workgroup in which the query ran. Each time a query
--   executes, information about the query execution is saved with a unique
--   ID.
module Network.AWS.Athena.GetQueryExecution

-- | <i>See:</i> <a>newGetQueryExecution</a> smart constructor.
data GetQueryExecution
GetQueryExecution' :: Text -> GetQueryExecution

-- | The unique ID of the query execution.
[$sel:queryExecutionId:GetQueryExecution'] :: GetQueryExecution -> Text

-- | Create a value of <a>GetQueryExecution</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionId:GetQueryExecution'</a>,
--   <a>getQueryExecution_queryExecutionId</a> - The unique ID of the query
--   execution.
newGetQueryExecution :: Text -> GetQueryExecution

-- | The unique ID of the query execution.
getQueryExecution_queryExecutionId :: Lens' GetQueryExecution Text

-- | <i>See:</i> <a>newGetQueryExecutionResponse</a> smart constructor.
data GetQueryExecutionResponse
GetQueryExecutionResponse' :: Maybe QueryExecution -> Int -> GetQueryExecutionResponse

-- | Information about the query execution.
[$sel:queryExecution:GetQueryExecutionResponse'] :: GetQueryExecutionResponse -> Maybe QueryExecution

-- | The response's http status code.
[$sel:httpStatus:GetQueryExecutionResponse'] :: GetQueryExecutionResponse -> Int

-- | Create a value of <a>GetQueryExecutionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecution:GetQueryExecutionResponse'</a>,
--   <a>getQueryExecutionResponse_queryExecution</a> - Information about
--   the query execution.
--   
--   <a>$sel:httpStatus:GetQueryExecutionResponse'</a>,
--   <a>getQueryExecutionResponse_httpStatus</a> - The response's http
--   status code.
newGetQueryExecutionResponse :: Int -> GetQueryExecutionResponse

-- | Information about the query execution.
getQueryExecutionResponse_queryExecution :: Lens' GetQueryExecutionResponse (Maybe QueryExecution)

-- | The response's http status code.
getQueryExecutionResponse_httpStatus :: Lens' GetQueryExecutionResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.GetQueryExecution.GetQueryExecution
instance GHC.Show.Show Network.AWS.Athena.GetQueryExecution.GetQueryExecution
instance GHC.Read.Read Network.AWS.Athena.GetQueryExecution.GetQueryExecution
instance GHC.Classes.Eq Network.AWS.Athena.GetQueryExecution.GetQueryExecution
instance GHC.Generics.Generic Network.AWS.Athena.GetQueryExecution.GetQueryExecutionResponse
instance GHC.Show.Show Network.AWS.Athena.GetQueryExecution.GetQueryExecutionResponse
instance GHC.Read.Read Network.AWS.Athena.GetQueryExecution.GetQueryExecutionResponse
instance GHC.Classes.Eq Network.AWS.Athena.GetQueryExecution.GetQueryExecutionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.GetQueryExecution.GetQueryExecution
instance Control.DeepSeq.NFData Network.AWS.Athena.GetQueryExecution.GetQueryExecutionResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.GetQueryExecution.GetQueryExecution
instance Control.DeepSeq.NFData Network.AWS.Athena.GetQueryExecution.GetQueryExecution
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.GetQueryExecution.GetQueryExecution
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.GetQueryExecution.GetQueryExecution
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.GetQueryExecution.GetQueryExecution
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.GetQueryExecution.GetQueryExecution


-- | Retrieves the prepared statement with the specified name from the
--   specified workgroup.
module Network.AWS.Athena.GetPreparedStatement

-- | <i>See:</i> <a>newGetPreparedStatement</a> smart constructor.
data GetPreparedStatement
GetPreparedStatement' :: Text -> Text -> GetPreparedStatement

-- | The name of the prepared statement to retrieve.
[$sel:statementName:GetPreparedStatement'] :: GetPreparedStatement -> Text

-- | The workgroup to which the statement to be retrieved belongs.
[$sel:workGroup:GetPreparedStatement'] :: GetPreparedStatement -> Text

-- | Create a value of <a>GetPreparedStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statementName:GetPreparedStatement'</a>,
--   <a>getPreparedStatement_statementName</a> - The name of the prepared
--   statement to retrieve.
--   
--   <a>$sel:workGroup:GetPreparedStatement'</a>,
--   <a>getPreparedStatement_workGroup</a> - The workgroup to which the
--   statement to be retrieved belongs.
newGetPreparedStatement :: Text -> Text -> GetPreparedStatement

-- | The name of the prepared statement to retrieve.
getPreparedStatement_statementName :: Lens' GetPreparedStatement Text

-- | The workgroup to which the statement to be retrieved belongs.
getPreparedStatement_workGroup :: Lens' GetPreparedStatement Text

-- | <i>See:</i> <a>newGetPreparedStatementResponse</a> smart constructor.
data GetPreparedStatementResponse
GetPreparedStatementResponse' :: Maybe PreparedStatement -> Int -> GetPreparedStatementResponse

-- | The name of the prepared statement that was retrieved.
[$sel:preparedStatement:GetPreparedStatementResponse'] :: GetPreparedStatementResponse -> Maybe PreparedStatement

-- | The response's http status code.
[$sel:httpStatus:GetPreparedStatementResponse'] :: GetPreparedStatementResponse -> Int

-- | Create a value of <a>GetPreparedStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:preparedStatement:GetPreparedStatementResponse'</a>,
--   <a>getPreparedStatementResponse_preparedStatement</a> - The name of
--   the prepared statement that was retrieved.
--   
--   <a>$sel:httpStatus:GetPreparedStatementResponse'</a>,
--   <a>getPreparedStatementResponse_httpStatus</a> - The response's http
--   status code.
newGetPreparedStatementResponse :: Int -> GetPreparedStatementResponse

-- | The name of the prepared statement that was retrieved.
getPreparedStatementResponse_preparedStatement :: Lens' GetPreparedStatementResponse (Maybe PreparedStatement)

-- | The response's http status code.
getPreparedStatementResponse_httpStatus :: Lens' GetPreparedStatementResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.GetPreparedStatement.GetPreparedStatement
instance GHC.Show.Show Network.AWS.Athena.GetPreparedStatement.GetPreparedStatement
instance GHC.Read.Read Network.AWS.Athena.GetPreparedStatement.GetPreparedStatement
instance GHC.Classes.Eq Network.AWS.Athena.GetPreparedStatement.GetPreparedStatement
instance GHC.Generics.Generic Network.AWS.Athena.GetPreparedStatement.GetPreparedStatementResponse
instance GHC.Show.Show Network.AWS.Athena.GetPreparedStatement.GetPreparedStatementResponse
instance GHC.Read.Read Network.AWS.Athena.GetPreparedStatement.GetPreparedStatementResponse
instance GHC.Classes.Eq Network.AWS.Athena.GetPreparedStatement.GetPreparedStatementResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.GetPreparedStatement.GetPreparedStatement
instance Control.DeepSeq.NFData Network.AWS.Athena.GetPreparedStatement.GetPreparedStatementResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.GetPreparedStatement.GetPreparedStatement
instance Control.DeepSeq.NFData Network.AWS.Athena.GetPreparedStatement.GetPreparedStatement
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.GetPreparedStatement.GetPreparedStatement
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.GetPreparedStatement.GetPreparedStatement
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.GetPreparedStatement.GetPreparedStatement
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.GetPreparedStatement.GetPreparedStatement


-- | Returns information about a single query. Requires that you have
--   access to the workgroup in which the query was saved.
module Network.AWS.Athena.GetNamedQuery

-- | <i>See:</i> <a>newGetNamedQuery</a> smart constructor.
data GetNamedQuery
GetNamedQuery' :: Text -> GetNamedQuery

-- | The unique ID of the query. Use ListNamedQueries to get query IDs.
[$sel:namedQueryId:GetNamedQuery'] :: GetNamedQuery -> Text

-- | Create a value of <a>GetNamedQuery</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryId:GetNamedQuery'</a>,
--   <a>getNamedQuery_namedQueryId</a> - The unique ID of the query. Use
--   ListNamedQueries to get query IDs.
newGetNamedQuery :: Text -> GetNamedQuery

-- | The unique ID of the query. Use ListNamedQueries to get query IDs.
getNamedQuery_namedQueryId :: Lens' GetNamedQuery Text

-- | <i>See:</i> <a>newGetNamedQueryResponse</a> smart constructor.
data GetNamedQueryResponse
GetNamedQueryResponse' :: Maybe NamedQuery -> Int -> GetNamedQueryResponse

-- | Information about the query.
[$sel:namedQuery:GetNamedQueryResponse'] :: GetNamedQueryResponse -> Maybe NamedQuery

-- | The response's http status code.
[$sel:httpStatus:GetNamedQueryResponse'] :: GetNamedQueryResponse -> Int

-- | Create a value of <a>GetNamedQueryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQuery:GetNamedQueryResponse'</a>,
--   <a>getNamedQueryResponse_namedQuery</a> - Information about the query.
--   
--   <a>$sel:httpStatus:GetNamedQueryResponse'</a>,
--   <a>getNamedQueryResponse_httpStatus</a> - The response's http status
--   code.
newGetNamedQueryResponse :: Int -> GetNamedQueryResponse

-- | Information about the query.
getNamedQueryResponse_namedQuery :: Lens' GetNamedQueryResponse (Maybe NamedQuery)

-- | The response's http status code.
getNamedQueryResponse_httpStatus :: Lens' GetNamedQueryResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.GetNamedQuery.GetNamedQuery
instance GHC.Show.Show Network.AWS.Athena.GetNamedQuery.GetNamedQuery
instance GHC.Read.Read Network.AWS.Athena.GetNamedQuery.GetNamedQuery
instance GHC.Classes.Eq Network.AWS.Athena.GetNamedQuery.GetNamedQuery
instance GHC.Generics.Generic Network.AWS.Athena.GetNamedQuery.GetNamedQueryResponse
instance GHC.Show.Show Network.AWS.Athena.GetNamedQuery.GetNamedQueryResponse
instance GHC.Read.Read Network.AWS.Athena.GetNamedQuery.GetNamedQueryResponse
instance GHC.Classes.Eq Network.AWS.Athena.GetNamedQuery.GetNamedQueryResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.GetNamedQuery.GetNamedQuery
instance Control.DeepSeq.NFData Network.AWS.Athena.GetNamedQuery.GetNamedQueryResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.GetNamedQuery.GetNamedQuery
instance Control.DeepSeq.NFData Network.AWS.Athena.GetNamedQuery.GetNamedQuery
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.GetNamedQuery.GetNamedQuery
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.GetNamedQuery.GetNamedQuery
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.GetNamedQuery.GetNamedQuery
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.GetNamedQuery.GetNamedQuery


-- | Returns a database object for the specified database and data catalog.
module Network.AWS.Athena.GetDatabase

-- | <i>See:</i> <a>newGetDatabase</a> smart constructor.
data GetDatabase
GetDatabase' :: Text -> Text -> GetDatabase

-- | The name of the data catalog that contains the database to return.
[$sel:catalogName:GetDatabase'] :: GetDatabase -> Text

-- | The name of the database to return.
[$sel:databaseName:GetDatabase'] :: GetDatabase -> Text

-- | Create a value of <a>GetDatabase</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogName:GetDatabase'</a>, <a>getDatabase_catalogName</a> -
--   The name of the data catalog that contains the database to return.
--   
--   <a>$sel:databaseName:GetDatabase'</a>, <a>getDatabase_databaseName</a>
--   - The name of the database to return.
newGetDatabase :: Text -> Text -> GetDatabase

-- | The name of the data catalog that contains the database to return.
getDatabase_catalogName :: Lens' GetDatabase Text

-- | The name of the database to return.
getDatabase_databaseName :: Lens' GetDatabase Text

-- | <i>See:</i> <a>newGetDatabaseResponse</a> smart constructor.
data GetDatabaseResponse
GetDatabaseResponse' :: Maybe Database -> Int -> GetDatabaseResponse

-- | The database returned.
[$sel:database:GetDatabaseResponse'] :: GetDatabaseResponse -> Maybe Database

-- | The response's http status code.
[$sel:httpStatus:GetDatabaseResponse'] :: GetDatabaseResponse -> Int

-- | Create a value of <a>GetDatabaseResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:database:GetDatabaseResponse'</a>,
--   <a>getDatabaseResponse_database</a> - The database returned.
--   
--   <a>$sel:httpStatus:GetDatabaseResponse'</a>,
--   <a>getDatabaseResponse_httpStatus</a> - The response's http status
--   code.
newGetDatabaseResponse :: Int -> GetDatabaseResponse

-- | The database returned.
getDatabaseResponse_database :: Lens' GetDatabaseResponse (Maybe Database)

-- | The response's http status code.
getDatabaseResponse_httpStatus :: Lens' GetDatabaseResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.GetDatabase.GetDatabase
instance GHC.Show.Show Network.AWS.Athena.GetDatabase.GetDatabase
instance GHC.Read.Read Network.AWS.Athena.GetDatabase.GetDatabase
instance GHC.Classes.Eq Network.AWS.Athena.GetDatabase.GetDatabase
instance GHC.Generics.Generic Network.AWS.Athena.GetDatabase.GetDatabaseResponse
instance GHC.Show.Show Network.AWS.Athena.GetDatabase.GetDatabaseResponse
instance GHC.Read.Read Network.AWS.Athena.GetDatabase.GetDatabaseResponse
instance GHC.Classes.Eq Network.AWS.Athena.GetDatabase.GetDatabaseResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.GetDatabase.GetDatabase
instance Control.DeepSeq.NFData Network.AWS.Athena.GetDatabase.GetDatabaseResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.GetDatabase.GetDatabase
instance Control.DeepSeq.NFData Network.AWS.Athena.GetDatabase.GetDatabase
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.GetDatabase.GetDatabase
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.GetDatabase.GetDatabase
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.GetDatabase.GetDatabase
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.GetDatabase.GetDatabase


-- | Returns the specified data catalog.
module Network.AWS.Athena.GetDataCatalog

-- | <i>See:</i> <a>newGetDataCatalog</a> smart constructor.
data GetDataCatalog
GetDataCatalog' :: Text -> GetDataCatalog

-- | The name of the data catalog to return.
[$sel:name:GetDataCatalog'] :: GetDataCatalog -> Text

-- | Create a value of <a>GetDataCatalog</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:GetDataCatalog'</a>, <a>getDataCatalog_name</a> - The
--   name of the data catalog to return.
newGetDataCatalog :: Text -> GetDataCatalog

-- | The name of the data catalog to return.
getDataCatalog_name :: Lens' GetDataCatalog Text

-- | <i>See:</i> <a>newGetDataCatalogResponse</a> smart constructor.
data GetDataCatalogResponse
GetDataCatalogResponse' :: Maybe DataCatalog -> Int -> GetDataCatalogResponse

-- | The data catalog returned.
[$sel:dataCatalog:GetDataCatalogResponse'] :: GetDataCatalogResponse -> Maybe DataCatalog

-- | The response's http status code.
[$sel:httpStatus:GetDataCatalogResponse'] :: GetDataCatalogResponse -> Int

-- | Create a value of <a>GetDataCatalogResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataCatalog:GetDataCatalogResponse'</a>,
--   <a>getDataCatalogResponse_dataCatalog</a> - The data catalog returned.
--   
--   <a>$sel:httpStatus:GetDataCatalogResponse'</a>,
--   <a>getDataCatalogResponse_httpStatus</a> - The response's http status
--   code.
newGetDataCatalogResponse :: Int -> GetDataCatalogResponse

-- | The data catalog returned.
getDataCatalogResponse_dataCatalog :: Lens' GetDataCatalogResponse (Maybe DataCatalog)

-- | The response's http status code.
getDataCatalogResponse_httpStatus :: Lens' GetDataCatalogResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.GetDataCatalog.GetDataCatalog
instance GHC.Show.Show Network.AWS.Athena.GetDataCatalog.GetDataCatalog
instance GHC.Read.Read Network.AWS.Athena.GetDataCatalog.GetDataCatalog
instance GHC.Classes.Eq Network.AWS.Athena.GetDataCatalog.GetDataCatalog
instance GHC.Generics.Generic Network.AWS.Athena.GetDataCatalog.GetDataCatalogResponse
instance GHC.Show.Show Network.AWS.Athena.GetDataCatalog.GetDataCatalogResponse
instance GHC.Read.Read Network.AWS.Athena.GetDataCatalog.GetDataCatalogResponse
instance GHC.Classes.Eq Network.AWS.Athena.GetDataCatalog.GetDataCatalogResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.GetDataCatalog.GetDataCatalog
instance Control.DeepSeq.NFData Network.AWS.Athena.GetDataCatalog.GetDataCatalogResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.GetDataCatalog.GetDataCatalog
instance Control.DeepSeq.NFData Network.AWS.Athena.GetDataCatalog.GetDataCatalog
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.GetDataCatalog.GetDataCatalog
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.GetDataCatalog.GetDataCatalog
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.GetDataCatalog.GetDataCatalog
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.GetDataCatalog.GetDataCatalog


-- | Deletes the workgroup with the specified name. The primary workgroup
--   cannot be deleted.
module Network.AWS.Athena.DeleteWorkGroup

-- | <i>See:</i> <a>newDeleteWorkGroup</a> smart constructor.
data DeleteWorkGroup
DeleteWorkGroup' :: Maybe Bool -> Text -> DeleteWorkGroup

-- | The option to delete the workgroup and its contents even if the
--   workgroup contains any named queries or query executions.
[$sel:recursiveDeleteOption:DeleteWorkGroup'] :: DeleteWorkGroup -> Maybe Bool

-- | The unique name of the workgroup to delete.
[$sel:workGroup:DeleteWorkGroup'] :: DeleteWorkGroup -> Text

-- | Create a value of <a>DeleteWorkGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:recursiveDeleteOption:DeleteWorkGroup'</a>,
--   <a>deleteWorkGroup_recursiveDeleteOption</a> - The option to delete
--   the workgroup and its contents even if the workgroup contains any
--   named queries or query executions.
--   
--   <a>$sel:workGroup:DeleteWorkGroup'</a>,
--   <a>deleteWorkGroup_workGroup</a> - The unique name of the workgroup to
--   delete.
newDeleteWorkGroup :: Text -> DeleteWorkGroup

-- | The option to delete the workgroup and its contents even if the
--   workgroup contains any named queries or query executions.
deleteWorkGroup_recursiveDeleteOption :: Lens' DeleteWorkGroup (Maybe Bool)

-- | The unique name of the workgroup to delete.
deleteWorkGroup_workGroup :: Lens' DeleteWorkGroup Text

-- | <i>See:</i> <a>newDeleteWorkGroupResponse</a> smart constructor.
data DeleteWorkGroupResponse
DeleteWorkGroupResponse' :: Int -> DeleteWorkGroupResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteWorkGroupResponse'] :: DeleteWorkGroupResponse -> Int

-- | Create a value of <a>DeleteWorkGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteWorkGroupResponse'</a>,
--   <a>deleteWorkGroupResponse_httpStatus</a> - The response's http status
--   code.
newDeleteWorkGroupResponse :: Int -> DeleteWorkGroupResponse

-- | The response's http status code.
deleteWorkGroupResponse_httpStatus :: Lens' DeleteWorkGroupResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroup
instance GHC.Show.Show Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroup
instance GHC.Read.Read Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroup
instance GHC.Classes.Eq Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroup
instance GHC.Generics.Generic Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroupResponse
instance GHC.Show.Show Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroupResponse
instance GHC.Read.Read Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroupResponse
instance GHC.Classes.Eq Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroupResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroup
instance Control.DeepSeq.NFData Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroupResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroup
instance Control.DeepSeq.NFData Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroup
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroup
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroup
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroup
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.DeleteWorkGroup.DeleteWorkGroup


-- | Deletes the prepared statement with the specified name from the
--   specified workgroup.
module Network.AWS.Athena.DeletePreparedStatement

-- | <i>See:</i> <a>newDeletePreparedStatement</a> smart constructor.
data DeletePreparedStatement
DeletePreparedStatement' :: Text -> Text -> DeletePreparedStatement

-- | The name of the prepared statement to delete.
[$sel:statementName:DeletePreparedStatement'] :: DeletePreparedStatement -> Text

-- | The workgroup to which the statement to be deleted belongs.
[$sel:workGroup:DeletePreparedStatement'] :: DeletePreparedStatement -> Text

-- | Create a value of <a>DeletePreparedStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statementName:DeletePreparedStatement'</a>,
--   <a>deletePreparedStatement_statementName</a> - The name of the
--   prepared statement to delete.
--   
--   <a>$sel:workGroup:DeletePreparedStatement'</a>,
--   <a>deletePreparedStatement_workGroup</a> - The workgroup to which the
--   statement to be deleted belongs.
newDeletePreparedStatement :: Text -> Text -> DeletePreparedStatement

-- | The name of the prepared statement to delete.
deletePreparedStatement_statementName :: Lens' DeletePreparedStatement Text

-- | The workgroup to which the statement to be deleted belongs.
deletePreparedStatement_workGroup :: Lens' DeletePreparedStatement Text

-- | <i>See:</i> <a>newDeletePreparedStatementResponse</a> smart
--   constructor.
data DeletePreparedStatementResponse
DeletePreparedStatementResponse' :: Int -> DeletePreparedStatementResponse

-- | The response's http status code.
[$sel:httpStatus:DeletePreparedStatementResponse'] :: DeletePreparedStatementResponse -> Int

-- | Create a value of <a>DeletePreparedStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeletePreparedStatementResponse'</a>,
--   <a>deletePreparedStatementResponse_httpStatus</a> - The response's
--   http status code.
newDeletePreparedStatementResponse :: Int -> DeletePreparedStatementResponse

-- | The response's http status code.
deletePreparedStatementResponse_httpStatus :: Lens' DeletePreparedStatementResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatement
instance GHC.Show.Show Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatement
instance GHC.Read.Read Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatement
instance GHC.Classes.Eq Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatement
instance GHC.Generics.Generic Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatementResponse
instance GHC.Show.Show Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatementResponse
instance GHC.Read.Read Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatementResponse
instance GHC.Classes.Eq Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatementResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatement
instance Control.DeepSeq.NFData Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatementResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatement
instance Control.DeepSeq.NFData Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatement
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatement
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatement
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatement
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.DeletePreparedStatement.DeletePreparedStatement


-- | Deletes the named query if you have access to the workgroup in which
--   the query was saved.
--   
--   For code samples using the Amazon Web Services SDK for Java, see
--   <a>Examples and Code Samples</a> in the <i>Amazon Athena User
--   Guide</i>.
module Network.AWS.Athena.DeleteNamedQuery

-- | <i>See:</i> <a>newDeleteNamedQuery</a> smart constructor.
data DeleteNamedQuery
DeleteNamedQuery' :: Text -> DeleteNamedQuery

-- | The unique ID of the query to delete.
[$sel:namedQueryId:DeleteNamedQuery'] :: DeleteNamedQuery -> Text

-- | Create a value of <a>DeleteNamedQuery</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryId:DeleteNamedQuery'</a>,
--   <a>deleteNamedQuery_namedQueryId</a> - The unique ID of the query to
--   delete.
newDeleteNamedQuery :: Text -> DeleteNamedQuery

-- | The unique ID of the query to delete.
deleteNamedQuery_namedQueryId :: Lens' DeleteNamedQuery Text

-- | <i>See:</i> <a>newDeleteNamedQueryResponse</a> smart constructor.
data DeleteNamedQueryResponse
DeleteNamedQueryResponse' :: Int -> DeleteNamedQueryResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteNamedQueryResponse'] :: DeleteNamedQueryResponse -> Int

-- | Create a value of <a>DeleteNamedQueryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteNamedQueryResponse'</a>,
--   <a>deleteNamedQueryResponse_httpStatus</a> - The response's http
--   status code.
newDeleteNamedQueryResponse :: Int -> DeleteNamedQueryResponse

-- | The response's http status code.
deleteNamedQueryResponse_httpStatus :: Lens' DeleteNamedQueryResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQuery
instance GHC.Show.Show Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQuery
instance GHC.Read.Read Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQuery
instance GHC.Classes.Eq Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQuery
instance GHC.Generics.Generic Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQueryResponse
instance GHC.Show.Show Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQueryResponse
instance GHC.Read.Read Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQueryResponse
instance GHC.Classes.Eq Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQueryResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQuery
instance Control.DeepSeq.NFData Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQueryResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQuery
instance Control.DeepSeq.NFData Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQuery
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQuery
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQuery
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQuery
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.DeleteNamedQuery.DeleteNamedQuery


-- | Deletes a data catalog.
module Network.AWS.Athena.DeleteDataCatalog

-- | <i>See:</i> <a>newDeleteDataCatalog</a> smart constructor.
data DeleteDataCatalog
DeleteDataCatalog' :: Text -> DeleteDataCatalog

-- | The name of the data catalog to delete.
[$sel:name:DeleteDataCatalog'] :: DeleteDataCatalog -> Text

-- | Create a value of <a>DeleteDataCatalog</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:DeleteDataCatalog'</a>, <a>deleteDataCatalog_name</a> -
--   The name of the data catalog to delete.
newDeleteDataCatalog :: Text -> DeleteDataCatalog

-- | The name of the data catalog to delete.
deleteDataCatalog_name :: Lens' DeleteDataCatalog Text

-- | <i>See:</i> <a>newDeleteDataCatalogResponse</a> smart constructor.
data DeleteDataCatalogResponse
DeleteDataCatalogResponse' :: Int -> DeleteDataCatalogResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteDataCatalogResponse'] :: DeleteDataCatalogResponse -> Int

-- | Create a value of <a>DeleteDataCatalogResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteDataCatalogResponse'</a>,
--   <a>deleteDataCatalogResponse_httpStatus</a> - The response's http
--   status code.
newDeleteDataCatalogResponse :: Int -> DeleteDataCatalogResponse

-- | The response's http status code.
deleteDataCatalogResponse_httpStatus :: Lens' DeleteDataCatalogResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalog
instance GHC.Show.Show Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalog
instance GHC.Read.Read Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalog
instance GHC.Classes.Eq Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalog
instance GHC.Generics.Generic Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalogResponse
instance GHC.Show.Show Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalogResponse
instance GHC.Read.Read Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalogResponse
instance GHC.Classes.Eq Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalogResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalog
instance Control.DeepSeq.NFData Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalogResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalog
instance Control.DeepSeq.NFData Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalog
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalog
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalog
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalog
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.DeleteDataCatalog.DeleteDataCatalog


-- | Creates a workgroup with the specified name.
module Network.AWS.Athena.CreateWorkGroup

-- | <i>See:</i> <a>newCreateWorkGroup</a> smart constructor.
data CreateWorkGroup
CreateWorkGroup' :: Maybe WorkGroupConfiguration -> Maybe [Tag] -> Maybe Text -> Text -> CreateWorkGroup

-- | The configuration for the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption
--   configuration, if any, used for encrypting query results, whether the
--   Amazon CloudWatch Metrics are enabled for the workgroup, the limit for
--   the amount of bytes scanned (cutoff) per query, if it is specified,
--   and whether workgroup's settings (specified with
--   <tt>EnforceWorkGroupConfiguration</tt>) in the
--   <tt>WorkGroupConfiguration</tt> override client-side settings. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
[$sel:configuration:CreateWorkGroup'] :: CreateWorkGroup -> Maybe WorkGroupConfiguration

-- | A list of comma separated tags to add to the workgroup that is
--   created.
[$sel:tags:CreateWorkGroup'] :: CreateWorkGroup -> Maybe [Tag]

-- | The workgroup description.
[$sel:description:CreateWorkGroup'] :: CreateWorkGroup -> Maybe Text

-- | The workgroup name.
[$sel:name:CreateWorkGroup'] :: CreateWorkGroup -> Text

-- | Create a value of <a>CreateWorkGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configuration:CreateWorkGroup'</a>,
--   <a>createWorkGroup_configuration</a> - The configuration for the
--   workgroup, which includes the location in Amazon S3 where query
--   results are stored, the encryption configuration, if any, used for
--   encrypting query results, whether the Amazon CloudWatch Metrics are
--   enabled for the workgroup, the limit for the amount of bytes scanned
--   (cutoff) per query, if it is specified, and whether workgroup's
--   settings (specified with <tt>EnforceWorkGroupConfiguration</tt>) in
--   the <tt>WorkGroupConfiguration</tt> override client-side settings. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <a>$sel:tags:CreateWorkGroup'</a>, <a>createWorkGroup_tags</a> - A
--   list of comma separated tags to add to the workgroup that is created.
--   
--   <a>$sel:description:CreateWorkGroup'</a>,
--   <a>createWorkGroup_description</a> - The workgroup description.
--   
--   <a>$sel:name:CreateWorkGroup'</a>, <a>createWorkGroup_name</a> - The
--   workgroup name.
newCreateWorkGroup :: Text -> CreateWorkGroup

-- | The configuration for the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption
--   configuration, if any, used for encrypting query results, whether the
--   Amazon CloudWatch Metrics are enabled for the workgroup, the limit for
--   the amount of bytes scanned (cutoff) per query, if it is specified,
--   and whether workgroup's settings (specified with
--   <tt>EnforceWorkGroupConfiguration</tt>) in the
--   <tt>WorkGroupConfiguration</tt> override client-side settings. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
createWorkGroup_configuration :: Lens' CreateWorkGroup (Maybe WorkGroupConfiguration)

-- | A list of comma separated tags to add to the workgroup that is
--   created.
createWorkGroup_tags :: Lens' CreateWorkGroup (Maybe [Tag])

-- | The workgroup description.
createWorkGroup_description :: Lens' CreateWorkGroup (Maybe Text)

-- | The workgroup name.
createWorkGroup_name :: Lens' CreateWorkGroup Text

-- | <i>See:</i> <a>newCreateWorkGroupResponse</a> smart constructor.
data CreateWorkGroupResponse
CreateWorkGroupResponse' :: Int -> CreateWorkGroupResponse

-- | The response's http status code.
[$sel:httpStatus:CreateWorkGroupResponse'] :: CreateWorkGroupResponse -> Int

-- | Create a value of <a>CreateWorkGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreateWorkGroupResponse'</a>,
--   <a>createWorkGroupResponse_httpStatus</a> - The response's http status
--   code.
newCreateWorkGroupResponse :: Int -> CreateWorkGroupResponse

-- | The response's http status code.
createWorkGroupResponse_httpStatus :: Lens' CreateWorkGroupResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.CreateWorkGroup.CreateWorkGroup
instance GHC.Show.Show Network.AWS.Athena.CreateWorkGroup.CreateWorkGroup
instance GHC.Read.Read Network.AWS.Athena.CreateWorkGroup.CreateWorkGroup
instance GHC.Classes.Eq Network.AWS.Athena.CreateWorkGroup.CreateWorkGroup
instance GHC.Generics.Generic Network.AWS.Athena.CreateWorkGroup.CreateWorkGroupResponse
instance GHC.Show.Show Network.AWS.Athena.CreateWorkGroup.CreateWorkGroupResponse
instance GHC.Read.Read Network.AWS.Athena.CreateWorkGroup.CreateWorkGroupResponse
instance GHC.Classes.Eq Network.AWS.Athena.CreateWorkGroup.CreateWorkGroupResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.CreateWorkGroup.CreateWorkGroup
instance Control.DeepSeq.NFData Network.AWS.Athena.CreateWorkGroup.CreateWorkGroupResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.CreateWorkGroup.CreateWorkGroup
instance Control.DeepSeq.NFData Network.AWS.Athena.CreateWorkGroup.CreateWorkGroup
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.CreateWorkGroup.CreateWorkGroup
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.CreateWorkGroup.CreateWorkGroup
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.CreateWorkGroup.CreateWorkGroup
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.CreateWorkGroup.CreateWorkGroup


-- | Creates a prepared statement for use with SQL queries in Athena.
module Network.AWS.Athena.CreatePreparedStatement

-- | <i>See:</i> <a>newCreatePreparedStatement</a> smart constructor.
data CreatePreparedStatement
CreatePreparedStatement' :: Maybe Text -> Text -> Text -> Text -> CreatePreparedStatement

-- | The description of the prepared statement.
[$sel:description:CreatePreparedStatement'] :: CreatePreparedStatement -> Maybe Text

-- | The name of the prepared statement.
[$sel:statementName:CreatePreparedStatement'] :: CreatePreparedStatement -> Text

-- | The name of the workgroup to which the prepared statement belongs.
[$sel:workGroup:CreatePreparedStatement'] :: CreatePreparedStatement -> Text

-- | The query string for the prepared statement.
[$sel:queryStatement:CreatePreparedStatement'] :: CreatePreparedStatement -> Text

-- | Create a value of <a>CreatePreparedStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:CreatePreparedStatement'</a>,
--   <a>createPreparedStatement_description</a> - The description of the
--   prepared statement.
--   
--   <a>$sel:statementName:CreatePreparedStatement'</a>,
--   <a>createPreparedStatement_statementName</a> - The name of the
--   prepared statement.
--   
--   <a>$sel:workGroup:CreatePreparedStatement'</a>,
--   <a>createPreparedStatement_workGroup</a> - The name of the workgroup
--   to which the prepared statement belongs.
--   
--   <a>$sel:queryStatement:CreatePreparedStatement'</a>,
--   <a>createPreparedStatement_queryStatement</a> - The query string for
--   the prepared statement.
newCreatePreparedStatement :: Text -> Text -> Text -> CreatePreparedStatement

-- | The description of the prepared statement.
createPreparedStatement_description :: Lens' CreatePreparedStatement (Maybe Text)

-- | The name of the prepared statement.
createPreparedStatement_statementName :: Lens' CreatePreparedStatement Text

-- | The name of the workgroup to which the prepared statement belongs.
createPreparedStatement_workGroup :: Lens' CreatePreparedStatement Text

-- | The query string for the prepared statement.
createPreparedStatement_queryStatement :: Lens' CreatePreparedStatement Text

-- | <i>See:</i> <a>newCreatePreparedStatementResponse</a> smart
--   constructor.
data CreatePreparedStatementResponse
CreatePreparedStatementResponse' :: Int -> CreatePreparedStatementResponse

-- | The response's http status code.
[$sel:httpStatus:CreatePreparedStatementResponse'] :: CreatePreparedStatementResponse -> Int

-- | Create a value of <a>CreatePreparedStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreatePreparedStatementResponse'</a>,
--   <a>createPreparedStatementResponse_httpStatus</a> - The response's
--   http status code.
newCreatePreparedStatementResponse :: Int -> CreatePreparedStatementResponse

-- | The response's http status code.
createPreparedStatementResponse_httpStatus :: Lens' CreatePreparedStatementResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatement
instance GHC.Show.Show Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatement
instance GHC.Read.Read Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatement
instance GHC.Classes.Eq Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatement
instance GHC.Generics.Generic Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatementResponse
instance GHC.Show.Show Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatementResponse
instance GHC.Read.Read Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatementResponse
instance GHC.Classes.Eq Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatementResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatement
instance Control.DeepSeq.NFData Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatementResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatement
instance Control.DeepSeq.NFData Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatement
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatement
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatement
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatement
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.CreatePreparedStatement.CreatePreparedStatement


-- | Creates a named query in the specified workgroup. Requires that you
--   have access to the workgroup.
--   
--   For code samples using the Amazon Web Services SDK for Java, see
--   <a>Examples and Code Samples</a> in the <i>Amazon Athena User
--   Guide</i>.
module Network.AWS.Athena.CreateNamedQuery

-- | <i>See:</i> <a>newCreateNamedQuery</a> smart constructor.
data CreateNamedQuery
CreateNamedQuery' :: Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> CreateNamedQuery

-- | The query description.
[$sel:description:CreateNamedQuery'] :: CreateNamedQuery -> Maybe Text

-- | The name of the workgroup in which the named query is being created.
[$sel:workGroup:CreateNamedQuery'] :: CreateNamedQuery -> Maybe Text

-- | A unique case-sensitive string used to ensure the request to create
--   the query is idempotent (executes only once). If another
--   <tt>CreateNamedQuery</tt> request is received, the same response is
--   returned and another query is not created. If a parameter has changed,
--   for example, the <tt>QueryString</tt>, an error is returned.
--   
--   This token is listed as not required because Amazon Web Services SDKs
--   (for example the Amazon Web Services SDK for Java) auto-generate the
--   token for users. If you are not using the Amazon Web Services SDK or
--   the Amazon Web Services CLI, you must provide this token or the action
--   will fail.
[$sel:clientRequestToken:CreateNamedQuery'] :: CreateNamedQuery -> Maybe Text

-- | The query name.
[$sel:name:CreateNamedQuery'] :: CreateNamedQuery -> Text

-- | The database to which the query belongs.
[$sel:database:CreateNamedQuery'] :: CreateNamedQuery -> Text

-- | The contents of the query with all query statements.
[$sel:queryString:CreateNamedQuery'] :: CreateNamedQuery -> Text

-- | Create a value of <a>CreateNamedQuery</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:CreateNamedQuery'</a>,
--   <a>createNamedQuery_description</a> - The query description.
--   
--   <a>$sel:workGroup:CreateNamedQuery'</a>,
--   <a>createNamedQuery_workGroup</a> - The name of the workgroup in which
--   the named query is being created.
--   
--   <a>$sel:clientRequestToken:CreateNamedQuery'</a>,
--   <a>createNamedQuery_clientRequestToken</a> - A unique case-sensitive
--   string used to ensure the request to create the query is idempotent
--   (executes only once). If another <tt>CreateNamedQuery</tt> request is
--   received, the same response is returned and another query is not
--   created. If a parameter has changed, for example, the
--   <tt>QueryString</tt>, an error is returned.
--   
--   This token is listed as not required because Amazon Web Services SDKs
--   (for example the Amazon Web Services SDK for Java) auto-generate the
--   token for users. If you are not using the Amazon Web Services SDK or
--   the Amazon Web Services CLI, you must provide this token or the action
--   will fail.
--   
--   <a>$sel:name:CreateNamedQuery'</a>, <a>createNamedQuery_name</a> - The
--   query name.
--   
--   <a>$sel:database:CreateNamedQuery'</a>,
--   <a>createNamedQuery_database</a> - The database to which the query
--   belongs.
--   
--   <a>$sel:queryString:CreateNamedQuery'</a>,
--   <a>createNamedQuery_queryString</a> - The contents of the query with
--   all query statements.
newCreateNamedQuery :: Text -> Text -> Text -> CreateNamedQuery

-- | The query description.
createNamedQuery_description :: Lens' CreateNamedQuery (Maybe Text)

-- | The name of the workgroup in which the named query is being created.
createNamedQuery_workGroup :: Lens' CreateNamedQuery (Maybe Text)

-- | A unique case-sensitive string used to ensure the request to create
--   the query is idempotent (executes only once). If another
--   <tt>CreateNamedQuery</tt> request is received, the same response is
--   returned and another query is not created. If a parameter has changed,
--   for example, the <tt>QueryString</tt>, an error is returned.
--   
--   This token is listed as not required because Amazon Web Services SDKs
--   (for example the Amazon Web Services SDK for Java) auto-generate the
--   token for users. If you are not using the Amazon Web Services SDK or
--   the Amazon Web Services CLI, you must provide this token or the action
--   will fail.
createNamedQuery_clientRequestToken :: Lens' CreateNamedQuery (Maybe Text)

-- | The query name.
createNamedQuery_name :: Lens' CreateNamedQuery Text

-- | The database to which the query belongs.
createNamedQuery_database :: Lens' CreateNamedQuery Text

-- | The contents of the query with all query statements.
createNamedQuery_queryString :: Lens' CreateNamedQuery Text

-- | <i>See:</i> <a>newCreateNamedQueryResponse</a> smart constructor.
data CreateNamedQueryResponse
CreateNamedQueryResponse' :: Maybe Text -> Int -> CreateNamedQueryResponse

-- | The unique ID of the query.
[$sel:namedQueryId:CreateNamedQueryResponse'] :: CreateNamedQueryResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateNamedQueryResponse'] :: CreateNamedQueryResponse -> Int

-- | Create a value of <a>CreateNamedQueryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryId:CreateNamedQueryResponse'</a>,
--   <a>createNamedQueryResponse_namedQueryId</a> - The unique ID of the
--   query.
--   
--   <a>$sel:httpStatus:CreateNamedQueryResponse'</a>,
--   <a>createNamedQueryResponse_httpStatus</a> - The response's http
--   status code.
newCreateNamedQueryResponse :: Int -> CreateNamedQueryResponse

-- | The unique ID of the query.
createNamedQueryResponse_namedQueryId :: Lens' CreateNamedQueryResponse (Maybe Text)

-- | The response's http status code.
createNamedQueryResponse_httpStatus :: Lens' CreateNamedQueryResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.CreateNamedQuery.CreateNamedQuery
instance GHC.Show.Show Network.AWS.Athena.CreateNamedQuery.CreateNamedQuery
instance GHC.Read.Read Network.AWS.Athena.CreateNamedQuery.CreateNamedQuery
instance GHC.Classes.Eq Network.AWS.Athena.CreateNamedQuery.CreateNamedQuery
instance GHC.Generics.Generic Network.AWS.Athena.CreateNamedQuery.CreateNamedQueryResponse
instance GHC.Show.Show Network.AWS.Athena.CreateNamedQuery.CreateNamedQueryResponse
instance GHC.Read.Read Network.AWS.Athena.CreateNamedQuery.CreateNamedQueryResponse
instance GHC.Classes.Eq Network.AWS.Athena.CreateNamedQuery.CreateNamedQueryResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.CreateNamedQuery.CreateNamedQuery
instance Control.DeepSeq.NFData Network.AWS.Athena.CreateNamedQuery.CreateNamedQueryResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.CreateNamedQuery.CreateNamedQuery
instance Control.DeepSeq.NFData Network.AWS.Athena.CreateNamedQuery.CreateNamedQuery
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.CreateNamedQuery.CreateNamedQuery
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.CreateNamedQuery.CreateNamedQuery
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.CreateNamedQuery.CreateNamedQuery
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.CreateNamedQuery.CreateNamedQuery


-- | Creates (registers) a data catalog with the specified name and
--   properties. Catalogs created are visible to all users of the same
--   Amazon Web Services account.
module Network.AWS.Athena.CreateDataCatalog

-- | <i>See:</i> <a>newCreateDataCatalog</a> smart constructor.
data CreateDataCatalog
CreateDataCatalog' :: Maybe [Tag] -> Maybe Text -> Maybe (HashMap Text Text) -> Text -> DataCatalogType -> CreateDataCatalog

-- | A list of comma separated tags to add to the data catalog that is
--   created.
[$sel:tags:CreateDataCatalog'] :: CreateDataCatalog -> Maybe [Tag]

-- | A description of the data catalog to be created.
[$sel:description:CreateDataCatalog'] :: CreateDataCatalog -> Maybe Text

-- | Specifies the Lambda function or functions to use for creating the
--   data catalog. This is a mapping whose values depend on the catalog
--   type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue Data Catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li><li>In Regions where Athena engine version 2 is not
--   available, creating new Glue data catalogs results in an
--   <tt>INVALID_INPUT</tt> error.</li></ul></li>
--   </ul>
[$sel:parameters:CreateDataCatalog'] :: CreateDataCatalog -> Maybe (HashMap Text Text)

-- | The name of the data catalog to create. The catalog name must be
--   unique for the Amazon Web Services account and can use a maximum of
--   128 alphanumeric, underscore, at sign, or hyphen characters.
[$sel:name:CreateDataCatalog'] :: CreateDataCatalog -> Text

-- | The type of data catalog to create: <tt>LAMBDA</tt> for a federated
--   catalog, <tt>HIVE</tt> for an external hive metastore, or
--   <tt>GLUE</tt> for an Glue Data Catalog.
[$sel:type':CreateDataCatalog'] :: CreateDataCatalog -> DataCatalogType

-- | Create a value of <a>CreateDataCatalog</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:CreateDataCatalog'</a>, <a>createDataCatalog_tags</a> - A
--   list of comma separated tags to add to the data catalog that is
--   created.
--   
--   <a>$sel:description:CreateDataCatalog'</a>,
--   <a>createDataCatalog_description</a> - A description of the data
--   catalog to be created.
--   
--   <a>$sel:parameters:CreateDataCatalog'</a>,
--   <a>createDataCatalog_parameters</a> - Specifies the Lambda function or
--   functions to use for creating the data catalog. This is a mapping
--   whose values depend on the catalog type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue Data Catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li><li>In Regions where Athena engine version 2 is not
--   available, creating new Glue data catalogs results in an
--   <tt>INVALID_INPUT</tt> error.</li></ul></li>
--   </ul>
--   
--   <a>$sel:name:CreateDataCatalog'</a>, <a>createDataCatalog_name</a> -
--   The name of the data catalog to create. The catalog name must be
--   unique for the Amazon Web Services account and can use a maximum of
--   128 alphanumeric, underscore, at sign, or hyphen characters.
--   
--   <a>$sel:type':CreateDataCatalog'</a>, <a>createDataCatalog_type</a> -
--   The type of data catalog to create: <tt>LAMBDA</tt> for a federated
--   catalog, <tt>HIVE</tt> for an external hive metastore, or
--   <tt>GLUE</tt> for an Glue Data Catalog.
newCreateDataCatalog :: Text -> DataCatalogType -> CreateDataCatalog

-- | A list of comma separated tags to add to the data catalog that is
--   created.
createDataCatalog_tags :: Lens' CreateDataCatalog (Maybe [Tag])

-- | A description of the data catalog to be created.
createDataCatalog_description :: Lens' CreateDataCatalog (Maybe Text)

-- | Specifies the Lambda function or functions to use for creating the
--   data catalog. This is a mapping whose values depend on the catalog
--   type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue Data Catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li><li>In Regions where Athena engine version 2 is not
--   available, creating new Glue data catalogs results in an
--   <tt>INVALID_INPUT</tt> error.</li></ul></li>
--   </ul>
createDataCatalog_parameters :: Lens' CreateDataCatalog (Maybe (HashMap Text Text))

-- | The name of the data catalog to create. The catalog name must be
--   unique for the Amazon Web Services account and can use a maximum of
--   128 alphanumeric, underscore, at sign, or hyphen characters.
createDataCatalog_name :: Lens' CreateDataCatalog Text

-- | The type of data catalog to create: <tt>LAMBDA</tt> for a federated
--   catalog, <tt>HIVE</tt> for an external hive metastore, or
--   <tt>GLUE</tt> for an Glue Data Catalog.
createDataCatalog_type :: Lens' CreateDataCatalog DataCatalogType

-- | <i>See:</i> <a>newCreateDataCatalogResponse</a> smart constructor.
data CreateDataCatalogResponse
CreateDataCatalogResponse' :: Int -> CreateDataCatalogResponse

-- | The response's http status code.
[$sel:httpStatus:CreateDataCatalogResponse'] :: CreateDataCatalogResponse -> Int

-- | Create a value of <a>CreateDataCatalogResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreateDataCatalogResponse'</a>,
--   <a>createDataCatalogResponse_httpStatus</a> - The response's http
--   status code.
newCreateDataCatalogResponse :: Int -> CreateDataCatalogResponse

-- | The response's http status code.
createDataCatalogResponse_httpStatus :: Lens' CreateDataCatalogResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.CreateDataCatalog.CreateDataCatalog
instance GHC.Show.Show Network.AWS.Athena.CreateDataCatalog.CreateDataCatalog
instance GHC.Read.Read Network.AWS.Athena.CreateDataCatalog.CreateDataCatalog
instance GHC.Classes.Eq Network.AWS.Athena.CreateDataCatalog.CreateDataCatalog
instance GHC.Generics.Generic Network.AWS.Athena.CreateDataCatalog.CreateDataCatalogResponse
instance GHC.Show.Show Network.AWS.Athena.CreateDataCatalog.CreateDataCatalogResponse
instance GHC.Read.Read Network.AWS.Athena.CreateDataCatalog.CreateDataCatalogResponse
instance GHC.Classes.Eq Network.AWS.Athena.CreateDataCatalog.CreateDataCatalogResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.CreateDataCatalog.CreateDataCatalog
instance Control.DeepSeq.NFData Network.AWS.Athena.CreateDataCatalog.CreateDataCatalogResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.CreateDataCatalog.CreateDataCatalog
instance Control.DeepSeq.NFData Network.AWS.Athena.CreateDataCatalog.CreateDataCatalog
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.CreateDataCatalog.CreateDataCatalog
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.CreateDataCatalog.CreateDataCatalog
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.CreateDataCatalog.CreateDataCatalog
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.CreateDataCatalog.CreateDataCatalog


-- | Returns the details of a single query execution or a list of up to 50
--   query executions, which you provide as an array of query execution ID
--   strings. Requires you to have access to the workgroup in which the
--   queries ran. To get a list of query execution IDs, use
--   ListQueryExecutionsInput$WorkGroup. Query executions differ from named
--   (saved) queries. Use BatchGetNamedQueryInput to get details about
--   named queries.
module Network.AWS.Athena.BatchGetQueryExecution

-- | <i>See:</i> <a>newBatchGetQueryExecution</a> smart constructor.
data BatchGetQueryExecution
BatchGetQueryExecution' :: NonEmpty Text -> BatchGetQueryExecution

-- | An array of query execution IDs.
[$sel:queryExecutionIds:BatchGetQueryExecution'] :: BatchGetQueryExecution -> NonEmpty Text

-- | Create a value of <a>BatchGetQueryExecution</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionIds:BatchGetQueryExecution'</a>,
--   <a>batchGetQueryExecution_queryExecutionIds</a> - An array of query
--   execution IDs.
newBatchGetQueryExecution :: NonEmpty Text -> BatchGetQueryExecution

-- | An array of query execution IDs.
batchGetQueryExecution_queryExecutionIds :: Lens' BatchGetQueryExecution (NonEmpty Text)

-- | <i>See:</i> <a>newBatchGetQueryExecutionResponse</a> smart
--   constructor.
data BatchGetQueryExecutionResponse
BatchGetQueryExecutionResponse' :: Maybe [QueryExecution] -> Maybe [UnprocessedQueryExecutionId] -> Int -> BatchGetQueryExecutionResponse

-- | Information about a query execution.
[$sel:queryExecutions:BatchGetQueryExecutionResponse'] :: BatchGetQueryExecutionResponse -> Maybe [QueryExecution]

-- | Information about the query executions that failed to run.
[$sel:unprocessedQueryExecutionIds:BatchGetQueryExecutionResponse'] :: BatchGetQueryExecutionResponse -> Maybe [UnprocessedQueryExecutionId]

-- | The response's http status code.
[$sel:httpStatus:BatchGetQueryExecutionResponse'] :: BatchGetQueryExecutionResponse -> Int

-- | Create a value of <a>BatchGetQueryExecutionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutions:BatchGetQueryExecutionResponse'</a>,
--   <a>batchGetQueryExecutionResponse_queryExecutions</a> - Information
--   about a query execution.
--   
--   
--   <a>$sel:unprocessedQueryExecutionIds:BatchGetQueryExecutionResponse'</a>,
--   <a>batchGetQueryExecutionResponse_unprocessedQueryExecutionIds</a> -
--   Information about the query executions that failed to run.
--   
--   <a>$sel:httpStatus:BatchGetQueryExecutionResponse'</a>,
--   <a>batchGetQueryExecutionResponse_httpStatus</a> - The response's http
--   status code.
newBatchGetQueryExecutionResponse :: Int -> BatchGetQueryExecutionResponse

-- | Information about a query execution.
batchGetQueryExecutionResponse_queryExecutions :: Lens' BatchGetQueryExecutionResponse (Maybe [QueryExecution])

-- | Information about the query executions that failed to run.
batchGetQueryExecutionResponse_unprocessedQueryExecutionIds :: Lens' BatchGetQueryExecutionResponse (Maybe [UnprocessedQueryExecutionId])

-- | The response's http status code.
batchGetQueryExecutionResponse_httpStatus :: Lens' BatchGetQueryExecutionResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecution
instance GHC.Show.Show Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecution
instance GHC.Read.Read Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecution
instance GHC.Classes.Eq Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecution
instance GHC.Generics.Generic Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecutionResponse
instance GHC.Show.Show Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecutionResponse
instance GHC.Read.Read Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecutionResponse
instance GHC.Classes.Eq Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecutionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecution
instance Control.DeepSeq.NFData Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecutionResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecution
instance Control.DeepSeq.NFData Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecution
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecution
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecution
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecution
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.BatchGetQueryExecution.BatchGetQueryExecution


-- | Returns the details of a single named query or a list of up to 50
--   queries, which you provide as an array of query ID strings. Requires
--   you to have access to the workgroup in which the queries were saved.
--   Use ListNamedQueriesInput to get the list of named query IDs in the
--   specified workgroup. If information could not be retrieved for a
--   submitted query ID, information about the query ID submitted is listed
--   under UnprocessedNamedQueryId. Named queries differ from executed
--   queries. Use BatchGetQueryExecutionInput to get details about each
--   unique query execution, and ListQueryExecutionsInput to get a list of
--   query execution IDs.
module Network.AWS.Athena.BatchGetNamedQuery

-- | <i>See:</i> <a>newBatchGetNamedQuery</a> smart constructor.
data BatchGetNamedQuery
BatchGetNamedQuery' :: NonEmpty Text -> BatchGetNamedQuery

-- | An array of query IDs.
[$sel:namedQueryIds:BatchGetNamedQuery'] :: BatchGetNamedQuery -> NonEmpty Text

-- | Create a value of <a>BatchGetNamedQuery</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryIds:BatchGetNamedQuery'</a>,
--   <a>batchGetNamedQuery_namedQueryIds</a> - An array of query IDs.
newBatchGetNamedQuery :: NonEmpty Text -> BatchGetNamedQuery

-- | An array of query IDs.
batchGetNamedQuery_namedQueryIds :: Lens' BatchGetNamedQuery (NonEmpty Text)

-- | <i>See:</i> <a>newBatchGetNamedQueryResponse</a> smart constructor.
data BatchGetNamedQueryResponse
BatchGetNamedQueryResponse' :: Maybe [NamedQuery] -> Maybe [UnprocessedNamedQueryId] -> Int -> BatchGetNamedQueryResponse

-- | Information about the named query IDs submitted.
[$sel:namedQueries:BatchGetNamedQueryResponse'] :: BatchGetNamedQueryResponse -> Maybe [NamedQuery]

-- | Information about provided query IDs.
[$sel:unprocessedNamedQueryIds:BatchGetNamedQueryResponse'] :: BatchGetNamedQueryResponse -> Maybe [UnprocessedNamedQueryId]

-- | The response's http status code.
[$sel:httpStatus:BatchGetNamedQueryResponse'] :: BatchGetNamedQueryResponse -> Int

-- | Create a value of <a>BatchGetNamedQueryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueries:BatchGetNamedQueryResponse'</a>,
--   <a>batchGetNamedQueryResponse_namedQueries</a> - Information about the
--   named query IDs submitted.
--   
--   <a>$sel:unprocessedNamedQueryIds:BatchGetNamedQueryResponse'</a>,
--   <a>batchGetNamedQueryResponse_unprocessedNamedQueryIds</a> -
--   Information about provided query IDs.
--   
--   <a>$sel:httpStatus:BatchGetNamedQueryResponse'</a>,
--   <a>batchGetNamedQueryResponse_httpStatus</a> - The response's http
--   status code.
newBatchGetNamedQueryResponse :: Int -> BatchGetNamedQueryResponse

-- | Information about the named query IDs submitted.
batchGetNamedQueryResponse_namedQueries :: Lens' BatchGetNamedQueryResponse (Maybe [NamedQuery])

-- | Information about provided query IDs.
batchGetNamedQueryResponse_unprocessedNamedQueryIds :: Lens' BatchGetNamedQueryResponse (Maybe [UnprocessedNamedQueryId])

-- | The response's http status code.
batchGetNamedQueryResponse_httpStatus :: Lens' BatchGetNamedQueryResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQuery
instance GHC.Show.Show Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQuery
instance GHC.Read.Read Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQuery
instance GHC.Classes.Eq Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQuery
instance GHC.Generics.Generic Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQueryResponse
instance GHC.Show.Show Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQueryResponse
instance GHC.Read.Read Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQueryResponse
instance GHC.Classes.Eq Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQueryResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQuery
instance Control.DeepSeq.NFData Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQueryResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQuery
instance Control.DeepSeq.NFData Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQuery
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQuery
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQuery
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQuery
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.BatchGetNamedQuery.BatchGetNamedQuery


-- | Removes one or more tags from a data catalog or workgroup resource.
module Network.AWS.Athena.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | Specifies the ARN of the resource from which tags are to be removed.
[$sel:resourceARN:UntagResource'] :: UntagResource -> Text

-- | A comma-separated list of one or more tag keys whose tags are to be
--   removed from the specified resource.
[$sel:tagKeys:UntagResource'] :: UntagResource -> [Text]

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceARN:UntagResource'</a>,
--   <a>untagResource_resourceARN</a> - Specifies the ARN of the resource
--   from which tags are to be removed.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - A
--   comma-separated list of one or more tag keys whose tags are to be
--   removed from the specified resource.
newUntagResource :: Text -> UntagResource

-- | Specifies the ARN of the resource from which tags are to be removed.
untagResource_resourceARN :: Lens' UntagResource Text

-- | A comma-separated list of one or more tag keys whose tags are to be
--   removed from the specified resource.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:UntagResourceResponse'] :: UntagResourceResponse -> Int

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.UntagResource.UntagResource
instance GHC.Show.Show Network.AWS.Athena.UntagResource.UntagResource
instance GHC.Read.Read Network.AWS.Athena.UntagResource.UntagResource
instance GHC.Classes.Eq Network.AWS.Athena.UntagResource.UntagResource
instance GHC.Generics.Generic Network.AWS.Athena.UntagResource.UntagResourceResponse
instance GHC.Show.Show Network.AWS.Athena.UntagResource.UntagResourceResponse
instance GHC.Read.Read Network.AWS.Athena.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Network.AWS.Athena.UntagResource.UntagResourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.UntagResource.UntagResource
instance Control.DeepSeq.NFData Network.AWS.Athena.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.UntagResource.UntagResource
instance Control.DeepSeq.NFData Network.AWS.Athena.UntagResource.UntagResource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.UntagResource.UntagResource
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.UntagResource.UntagResource
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.UntagResource.UntagResource
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.UntagResource.UntagResource


-- | Updates the data catalog that has the specified name.
module Network.AWS.Athena.UpdateDataCatalog

-- | <i>See:</i> <a>newUpdateDataCatalog</a> smart constructor.
data UpdateDataCatalog
UpdateDataCatalog' :: Maybe Text -> Maybe (HashMap Text Text) -> Text -> DataCatalogType -> UpdateDataCatalog

-- | New or modified text that describes the data catalog.
[$sel:description:UpdateDataCatalog'] :: UpdateDataCatalog -> Maybe Text

-- | Specifies the Lambda function or functions to use for updating the
--   data catalog. This is a mapping whose values depend on the catalog
--   type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   </ul>
[$sel:parameters:UpdateDataCatalog'] :: UpdateDataCatalog -> Maybe (HashMap Text Text)

-- | The name of the data catalog to update. The catalog name must be
--   unique for the Amazon Web Services account and can use a maximum of
--   128 alphanumeric, underscore, at sign, or hyphen characters.
[$sel:name:UpdateDataCatalog'] :: UpdateDataCatalog -> Text

-- | Specifies the type of data catalog to update. Specify <tt>LAMBDA</tt>
--   for a federated catalog, <tt>HIVE</tt> for an external hive metastore,
--   or <tt>GLUE</tt> for an Glue Data Catalog.
[$sel:type':UpdateDataCatalog'] :: UpdateDataCatalog -> DataCatalogType

-- | Create a value of <a>UpdateDataCatalog</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:UpdateDataCatalog'</a>,
--   <a>updateDataCatalog_description</a> - New or modified text that
--   describes the data catalog.
--   
--   <a>$sel:parameters:UpdateDataCatalog'</a>,
--   <a>updateDataCatalog_parameters</a> - Specifies the Lambda function or
--   functions to use for updating the data catalog. This is a mapping
--   whose values depend on the catalog type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   </ul>
--   
--   <a>$sel:name:UpdateDataCatalog'</a>, <a>updateDataCatalog_name</a> -
--   The name of the data catalog to update. The catalog name must be
--   unique for the Amazon Web Services account and can use a maximum of
--   128 alphanumeric, underscore, at sign, or hyphen characters.
--   
--   <a>$sel:type':UpdateDataCatalog'</a>, <a>updateDataCatalog_type</a> -
--   Specifies the type of data catalog to update. Specify <tt>LAMBDA</tt>
--   for a federated catalog, <tt>HIVE</tt> for an external hive metastore,
--   or <tt>GLUE</tt> for an Glue Data Catalog.
newUpdateDataCatalog :: Text -> DataCatalogType -> UpdateDataCatalog

-- | New or modified text that describes the data catalog.
updateDataCatalog_description :: Lens' UpdateDataCatalog (Maybe Text)

-- | Specifies the Lambda function or functions to use for updating the
--   data catalog. This is a mapping whose values depend on the catalog
--   type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   </ul>
updateDataCatalog_parameters :: Lens' UpdateDataCatalog (Maybe (HashMap Text Text))

-- | The name of the data catalog to update. The catalog name must be
--   unique for the Amazon Web Services account and can use a maximum of
--   128 alphanumeric, underscore, at sign, or hyphen characters.
updateDataCatalog_name :: Lens' UpdateDataCatalog Text

-- | Specifies the type of data catalog to update. Specify <tt>LAMBDA</tt>
--   for a federated catalog, <tt>HIVE</tt> for an external hive metastore,
--   or <tt>GLUE</tt> for an Glue Data Catalog.
updateDataCatalog_type :: Lens' UpdateDataCatalog DataCatalogType

-- | <i>See:</i> <a>newUpdateDataCatalogResponse</a> smart constructor.
data UpdateDataCatalogResponse
UpdateDataCatalogResponse' :: Int -> UpdateDataCatalogResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateDataCatalogResponse'] :: UpdateDataCatalogResponse -> Int

-- | Create a value of <a>UpdateDataCatalogResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateDataCatalogResponse'</a>,
--   <a>updateDataCatalogResponse_httpStatus</a> - The response's http
--   status code.
newUpdateDataCatalogResponse :: Int -> UpdateDataCatalogResponse

-- | The response's http status code.
updateDataCatalogResponse_httpStatus :: Lens' UpdateDataCatalogResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalog
instance GHC.Show.Show Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalog
instance GHC.Read.Read Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalog
instance GHC.Classes.Eq Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalog
instance GHC.Generics.Generic Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalogResponse
instance GHC.Show.Show Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalogResponse
instance GHC.Read.Read Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalogResponse
instance GHC.Classes.Eq Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalogResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalog
instance Control.DeepSeq.NFData Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalogResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalog
instance Control.DeepSeq.NFData Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalog
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalog
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalog
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalog
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.UpdateDataCatalog.UpdateDataCatalog


-- | Updates a prepared statement.
module Network.AWS.Athena.UpdatePreparedStatement

-- | <i>See:</i> <a>newUpdatePreparedStatement</a> smart constructor.
data UpdatePreparedStatement
UpdatePreparedStatement' :: Maybe Text -> Text -> Text -> Text -> UpdatePreparedStatement

-- | The description of the prepared statement.
[$sel:description:UpdatePreparedStatement'] :: UpdatePreparedStatement -> Maybe Text

-- | The name of the prepared statement.
[$sel:statementName:UpdatePreparedStatement'] :: UpdatePreparedStatement -> Text

-- | The workgroup for the prepared statement.
[$sel:workGroup:UpdatePreparedStatement'] :: UpdatePreparedStatement -> Text

-- | The query string for the prepared statement.
[$sel:queryStatement:UpdatePreparedStatement'] :: UpdatePreparedStatement -> Text

-- | Create a value of <a>UpdatePreparedStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:UpdatePreparedStatement'</a>,
--   <a>updatePreparedStatement_description</a> - The description of the
--   prepared statement.
--   
--   <a>$sel:statementName:UpdatePreparedStatement'</a>,
--   <a>updatePreparedStatement_statementName</a> - The name of the
--   prepared statement.
--   
--   <a>$sel:workGroup:UpdatePreparedStatement'</a>,
--   <a>updatePreparedStatement_workGroup</a> - The workgroup for the
--   prepared statement.
--   
--   <a>$sel:queryStatement:UpdatePreparedStatement'</a>,
--   <a>updatePreparedStatement_queryStatement</a> - The query string for
--   the prepared statement.
newUpdatePreparedStatement :: Text -> Text -> Text -> UpdatePreparedStatement

-- | The description of the prepared statement.
updatePreparedStatement_description :: Lens' UpdatePreparedStatement (Maybe Text)

-- | The name of the prepared statement.
updatePreparedStatement_statementName :: Lens' UpdatePreparedStatement Text

-- | The workgroup for the prepared statement.
updatePreparedStatement_workGroup :: Lens' UpdatePreparedStatement Text

-- | The query string for the prepared statement.
updatePreparedStatement_queryStatement :: Lens' UpdatePreparedStatement Text

-- | <i>See:</i> <a>newUpdatePreparedStatementResponse</a> smart
--   constructor.
data UpdatePreparedStatementResponse
UpdatePreparedStatementResponse' :: Int -> UpdatePreparedStatementResponse

-- | The response's http status code.
[$sel:httpStatus:UpdatePreparedStatementResponse'] :: UpdatePreparedStatementResponse -> Int

-- | Create a value of <a>UpdatePreparedStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdatePreparedStatementResponse'</a>,
--   <a>updatePreparedStatementResponse_httpStatus</a> - The response's
--   http status code.
newUpdatePreparedStatementResponse :: Int -> UpdatePreparedStatementResponse

-- | The response's http status code.
updatePreparedStatementResponse_httpStatus :: Lens' UpdatePreparedStatementResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatement
instance GHC.Show.Show Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatement
instance GHC.Read.Read Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatement
instance GHC.Classes.Eq Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatement
instance GHC.Generics.Generic Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatementResponse
instance GHC.Show.Show Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatementResponse
instance GHC.Read.Read Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatementResponse
instance GHC.Classes.Eq Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatementResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatement
instance Control.DeepSeq.NFData Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatementResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatement
instance Control.DeepSeq.NFData Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatement
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatement
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatement
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatement
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.UpdatePreparedStatement.UpdatePreparedStatement


-- | Updates the workgroup with the specified name. The workgroup's name
--   cannot be changed.
module Network.AWS.Athena.UpdateWorkGroup

-- | <i>See:</i> <a>newUpdateWorkGroup</a> smart constructor.
data UpdateWorkGroup
UpdateWorkGroup' :: Maybe WorkGroupConfigurationUpdates -> Maybe WorkGroupState -> Maybe Text -> Text -> UpdateWorkGroup

-- | The workgroup configuration that will be updated for the given
--   workgroup.
[$sel:configurationUpdates:UpdateWorkGroup'] :: UpdateWorkGroup -> Maybe WorkGroupConfigurationUpdates

-- | The workgroup state that will be updated for the given workgroup.
[$sel:state:UpdateWorkGroup'] :: UpdateWorkGroup -> Maybe WorkGroupState

-- | The workgroup description.
[$sel:description:UpdateWorkGroup'] :: UpdateWorkGroup -> Maybe Text

-- | The specified workgroup that will be updated.
[$sel:workGroup:UpdateWorkGroup'] :: UpdateWorkGroup -> Text

-- | Create a value of <a>UpdateWorkGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configurationUpdates:UpdateWorkGroup'</a>,
--   <a>updateWorkGroup_configurationUpdates</a> - The workgroup
--   configuration that will be updated for the given workgroup.
--   
--   <a>$sel:state:UpdateWorkGroup'</a>, <a>updateWorkGroup_state</a> - The
--   workgroup state that will be updated for the given workgroup.
--   
--   <a>$sel:description:UpdateWorkGroup'</a>,
--   <a>updateWorkGroup_description</a> - The workgroup description.
--   
--   <a>$sel:workGroup:UpdateWorkGroup'</a>,
--   <a>updateWorkGroup_workGroup</a> - The specified workgroup that will
--   be updated.
newUpdateWorkGroup :: Text -> UpdateWorkGroup

-- | The workgroup configuration that will be updated for the given
--   workgroup.
updateWorkGroup_configurationUpdates :: Lens' UpdateWorkGroup (Maybe WorkGroupConfigurationUpdates)

-- | The workgroup state that will be updated for the given workgroup.
updateWorkGroup_state :: Lens' UpdateWorkGroup (Maybe WorkGroupState)

-- | The workgroup description.
updateWorkGroup_description :: Lens' UpdateWorkGroup (Maybe Text)

-- | The specified workgroup that will be updated.
updateWorkGroup_workGroup :: Lens' UpdateWorkGroup Text

-- | <i>See:</i> <a>newUpdateWorkGroupResponse</a> smart constructor.
data UpdateWorkGroupResponse
UpdateWorkGroupResponse' :: Int -> UpdateWorkGroupResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateWorkGroupResponse'] :: UpdateWorkGroupResponse -> Int

-- | Create a value of <a>UpdateWorkGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateWorkGroupResponse'</a>,
--   <a>updateWorkGroupResponse_httpStatus</a> - The response's http status
--   code.
newUpdateWorkGroupResponse :: Int -> UpdateWorkGroupResponse

-- | The response's http status code.
updateWorkGroupResponse_httpStatus :: Lens' UpdateWorkGroupResponse Int
instance GHC.Generics.Generic Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroup
instance GHC.Show.Show Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroup
instance GHC.Read.Read Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroup
instance GHC.Classes.Eq Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroup
instance GHC.Generics.Generic Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroupResponse
instance GHC.Show.Show Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroupResponse
instance GHC.Read.Read Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroupResponse
instance GHC.Classes.Eq Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroupResponse
instance Network.AWS.Types.AWSRequest Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroup
instance Control.DeepSeq.NFData Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroupResponse
instance Data.Hashable.Class.Hashable Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroup
instance Control.DeepSeq.NFData Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroup
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroup
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroup
instance Network.AWS.Data.Path.ToPath Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroup
instance Network.AWS.Data.Query.ToQuery Network.AWS.Athena.UpdateWorkGroup.UpdateWorkGroup


module Network.AWS.Athena.Lens

-- | A list of comma separated tags to add to the data catalog that is
--   created.
createDataCatalog_tags :: Lens' CreateDataCatalog (Maybe [Tag])

-- | A description of the data catalog to be created.
createDataCatalog_description :: Lens' CreateDataCatalog (Maybe Text)

-- | Specifies the Lambda function or functions to use for creating the
--   data catalog. This is a mapping whose values depend on the catalog
--   type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue Data Catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li><li>In Regions where Athena engine version 2 is not
--   available, creating new Glue data catalogs results in an
--   <tt>INVALID_INPUT</tt> error.</li></ul></li>
--   </ul>
createDataCatalog_parameters :: Lens' CreateDataCatalog (Maybe (HashMap Text Text))

-- | The name of the data catalog to create. The catalog name must be
--   unique for the Amazon Web Services account and can use a maximum of
--   128 alphanumeric, underscore, at sign, or hyphen characters.
createDataCatalog_name :: Lens' CreateDataCatalog Text

-- | The type of data catalog to create: <tt>LAMBDA</tt> for a federated
--   catalog, <tt>HIVE</tt> for an external hive metastore, or
--   <tt>GLUE</tt> for an Glue Data Catalog.
createDataCatalog_type :: Lens' CreateDataCatalog DataCatalogType

-- | The response's http status code.
createDataCatalogResponse_httpStatus :: Lens' CreateDataCatalogResponse Int

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listQueryExecutions_nextToken :: Lens' ListQueryExecutions (Maybe Text)

-- | The maximum number of query executions to return in this request.
listQueryExecutions_maxResults :: Lens' ListQueryExecutions (Maybe Natural)

-- | The name of the workgroup from which queries are being returned. If a
--   workgroup is not specified, a list of available query execution IDs
--   for the queries in the primary workgroup is returned.
listQueryExecutions_workGroup :: Lens' ListQueryExecutions (Maybe Text)

-- | A token to be used by the next request if this request is truncated.
listQueryExecutionsResponse_nextToken :: Lens' ListQueryExecutionsResponse (Maybe Text)

-- | The unique IDs of each query execution as an array of strings.
listQueryExecutionsResponse_queryExecutionIds :: Lens' ListQueryExecutionsResponse (Maybe (NonEmpty Text))

-- | The response's http status code.
listQueryExecutionsResponse_httpStatus :: Lens' ListQueryExecutionsResponse Int

-- | The name of the prepared statement to delete.
deletePreparedStatement_statementName :: Lens' DeletePreparedStatement Text

-- | The workgroup to which the statement to be deleted belongs.
deletePreparedStatement_workGroup :: Lens' DeletePreparedStatement Text

-- | The response's http status code.
deletePreparedStatementResponse_httpStatus :: Lens' DeletePreparedStatementResponse Int

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
listTableMetadata_nextToken :: Lens' ListTableMetadata (Maybe Text)

-- | Specifies the maximum number of results to return.
listTableMetadata_maxResults :: Lens' ListTableMetadata (Maybe Natural)

-- | A regex filter that pattern-matches table names. If no expression is
--   supplied, metadata for all tables are listed.
listTableMetadata_expression :: Lens' ListTableMetadata (Maybe Text)

-- | The name of the data catalog for which table metadata should be
--   returned.
listTableMetadata_catalogName :: Lens' ListTableMetadata Text

-- | The name of the database for which table metadata should be returned.
listTableMetadata_databaseName :: Lens' ListTableMetadata Text

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
listTableMetadataResponse_nextToken :: Lens' ListTableMetadataResponse (Maybe Text)

-- | A list of table metadata.
listTableMetadataResponse_tableMetadataList :: Lens' ListTableMetadataResponse (Maybe [TableMetadata])

-- | The response's http status code.
listTableMetadataResponse_httpStatus :: Lens' ListTableMetadataResponse Int

-- | The description of the prepared statement.
updatePreparedStatement_description :: Lens' UpdatePreparedStatement (Maybe Text)

-- | The name of the prepared statement.
updatePreparedStatement_statementName :: Lens' UpdatePreparedStatement Text

-- | The workgroup for the prepared statement.
updatePreparedStatement_workGroup :: Lens' UpdatePreparedStatement Text

-- | The query string for the prepared statement.
updatePreparedStatement_queryStatement :: Lens' UpdatePreparedStatement Text

-- | The response's http status code.
updatePreparedStatementResponse_httpStatus :: Lens' UpdatePreparedStatementResponse Int

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listPreparedStatements_nextToken :: Lens' ListPreparedStatements (Maybe Text)

-- | The maximum number of results to return in this request.
listPreparedStatements_maxResults :: Lens' ListPreparedStatements (Maybe Natural)

-- | The workgroup to list the prepared statements for.
listPreparedStatements_workGroup :: Lens' ListPreparedStatements Text

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listPreparedStatementsResponse_nextToken :: Lens' ListPreparedStatementsResponse (Maybe Text)

-- | The list of prepared statements for the workgroup.
listPreparedStatementsResponse_preparedStatements :: Lens' ListPreparedStatementsResponse (Maybe [PreparedStatementSummary])

-- | The response's http status code.
listPreparedStatementsResponse_httpStatus :: Lens' ListPreparedStatementsResponse Int

-- | The name of the prepared statement to retrieve.
getPreparedStatement_statementName :: Lens' GetPreparedStatement Text

-- | The workgroup to which the statement to be retrieved belongs.
getPreparedStatement_workGroup :: Lens' GetPreparedStatement Text

-- | The name of the prepared statement that was retrieved.
getPreparedStatementResponse_preparedStatement :: Lens' GetPreparedStatementResponse (Maybe PreparedStatement)

-- | The response's http status code.
getPreparedStatementResponse_httpStatus :: Lens' GetPreparedStatementResponse Int

-- | The unique ID of the query execution.
getQueryExecution_queryExecutionId :: Lens' GetQueryExecution Text

-- | Information about the query execution.
getQueryExecutionResponse_queryExecution :: Lens' GetQueryExecutionResponse (Maybe QueryExecution)

-- | The response's http status code.
getQueryExecutionResponse_httpStatus :: Lens' GetQueryExecutionResponse Int

-- | The name of the data catalog that contains the database to return.
getDatabase_catalogName :: Lens' GetDatabase Text

-- | The name of the database to return.
getDatabase_databaseName :: Lens' GetDatabase Text

-- | The database returned.
getDatabaseResponse_database :: Lens' GetDatabaseResponse (Maybe Database)

-- | The response's http status code.
getDatabaseResponse_httpStatus :: Lens' GetDatabaseResponse Int

-- | An array of query IDs.
batchGetNamedQuery_namedQueryIds :: Lens' BatchGetNamedQuery (NonEmpty Text)

-- | Information about the named query IDs submitted.
batchGetNamedQueryResponse_namedQueries :: Lens' BatchGetNamedQueryResponse (Maybe [NamedQuery])

-- | Information about provided query IDs.
batchGetNamedQueryResponse_unprocessedNamedQueryIds :: Lens' BatchGetNamedQueryResponse (Maybe [UnprocessedNamedQueryId])

-- | The response's http status code.
batchGetNamedQueryResponse_httpStatus :: Lens' BatchGetNamedQueryResponse Int

-- | Specifies the ARN of the resource from which tags are to be removed.
untagResource_resourceARN :: Lens' UntagResource Text

-- | A comma-separated list of one or more tag keys whose tags are to be
--   removed from the specified resource.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int

-- | Specifies the ARN of the Athena resource (workgroup or data catalog)
--   to which tags are to be added.
tagResource_resourceARN :: Lens' TagResource Text

-- | A collection of one or more tags, separated by commas, to be added to
--   an Athena workgroup or data catalog resource.
tagResource_tags :: Lens' TagResource [Tag]

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int

-- | The unique ID of the query to delete.
deleteNamedQuery_namedQueryId :: Lens' DeleteNamedQuery Text

-- | The response's http status code.
deleteNamedQueryResponse_httpStatus :: Lens' DeleteNamedQueryResponse Int

-- | The name of the data catalog to return.
getDataCatalog_name :: Lens' GetDataCatalog Text

-- | The data catalog returned.
getDataCatalogResponse_dataCatalog :: Lens' GetDataCatalogResponse (Maybe DataCatalog)

-- | The response's http status code.
getDataCatalogResponse_httpStatus :: Lens' GetDataCatalogResponse Int

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listEngineVersions_nextToken :: Lens' ListEngineVersions (Maybe Text)

-- | The maximum number of engine versions to return in this request.
listEngineVersions_maxResults :: Lens' ListEngineVersions (Maybe Natural)

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listEngineVersionsResponse_nextToken :: Lens' ListEngineVersionsResponse (Maybe Text)

-- | A list of engine versions that are available to choose from.
listEngineVersionsResponse_engineVersions :: Lens' ListEngineVersionsResponse (Maybe [EngineVersion])

-- | The response's http status code.
listEngineVersionsResponse_httpStatus :: Lens' ListEngineVersionsResponse Int

-- | The configuration for the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption
--   configuration, if any, used for encrypting query results, whether the
--   Amazon CloudWatch Metrics are enabled for the workgroup, the limit for
--   the amount of bytes scanned (cutoff) per query, if it is specified,
--   and whether workgroup's settings (specified with
--   <tt>EnforceWorkGroupConfiguration</tt>) in the
--   <tt>WorkGroupConfiguration</tt> override client-side settings. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
createWorkGroup_configuration :: Lens' CreateWorkGroup (Maybe WorkGroupConfiguration)

-- | A list of comma separated tags to add to the workgroup that is
--   created.
createWorkGroup_tags :: Lens' CreateWorkGroup (Maybe [Tag])

-- | The workgroup description.
createWorkGroup_description :: Lens' CreateWorkGroup (Maybe Text)

-- | The workgroup name.
createWorkGroup_name :: Lens' CreateWorkGroup Text

-- | The response's http status code.
createWorkGroupResponse_httpStatus :: Lens' CreateWorkGroupResponse Int

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
listDataCatalogs_nextToken :: Lens' ListDataCatalogs (Maybe Text)

-- | Specifies the maximum number of data catalogs to return.
listDataCatalogs_maxResults :: Lens' ListDataCatalogs (Maybe Natural)

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
listDataCatalogsResponse_nextToken :: Lens' ListDataCatalogsResponse (Maybe Text)

-- | A summary list of data catalogs.
listDataCatalogsResponse_dataCatalogsSummary :: Lens' ListDataCatalogsResponse (Maybe [DataCatalogSummary])

-- | The response's http status code.
listDataCatalogsResponse_httpStatus :: Lens' ListDataCatalogsResponse Int

-- | The workgroup configuration that will be updated for the given
--   workgroup.
updateWorkGroup_configurationUpdates :: Lens' UpdateWorkGroup (Maybe WorkGroupConfigurationUpdates)

-- | The workgroup state that will be updated for the given workgroup.
updateWorkGroup_state :: Lens' UpdateWorkGroup (Maybe WorkGroupState)

-- | The workgroup description.
updateWorkGroup_description :: Lens' UpdateWorkGroup (Maybe Text)

-- | The specified workgroup that will be updated.
updateWorkGroup_workGroup :: Lens' UpdateWorkGroup Text

-- | The response's http status code.
updateWorkGroupResponse_httpStatus :: Lens' UpdateWorkGroupResponse Int

-- | The unique ID of the query. Use ListNamedQueries to get query IDs.
getNamedQuery_namedQueryId :: Lens' GetNamedQuery Text

-- | Information about the query.
getNamedQueryResponse_namedQuery :: Lens' GetNamedQueryResponse (Maybe NamedQuery)

-- | The response's http status code.
getNamedQueryResponse_httpStatus :: Lens' GetNamedQueryResponse Int

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listWorkGroups_nextToken :: Lens' ListWorkGroups (Maybe Text)

-- | The maximum number of workgroups to return in this request.
listWorkGroups_maxResults :: Lens' ListWorkGroups (Maybe Natural)

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listWorkGroupsResponse_nextToken :: Lens' ListWorkGroupsResponse (Maybe Text)

-- | A list of WorkGroupSummary objects that include the names,
--   descriptions, creation times, and states for each workgroup.
listWorkGroupsResponse_workGroups :: Lens' ListWorkGroupsResponse (Maybe [WorkGroupSummary])

-- | The response's http status code.
listWorkGroupsResponse_httpStatus :: Lens' ListWorkGroupsResponse Int

-- | The option to delete the workgroup and its contents even if the
--   workgroup contains any named queries or query executions.
deleteWorkGroup_recursiveDeleteOption :: Lens' DeleteWorkGroup (Maybe Bool)

-- | The unique name of the workgroup to delete.
deleteWorkGroup_workGroup :: Lens' DeleteWorkGroup Text

-- | The response's http status code.
deleteWorkGroupResponse_httpStatus :: Lens' DeleteWorkGroupResponse Int

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listDatabases_nextToken :: Lens' ListDatabases (Maybe Text)

-- | Specifies the maximum number of results to return.
listDatabases_maxResults :: Lens' ListDatabases (Maybe Natural)

-- | The name of the data catalog that contains the databases to return.
listDatabases_catalogName :: Lens' ListDatabases Text

-- | A list of databases from a data catalog.
listDatabasesResponse_databaseList :: Lens' ListDatabasesResponse (Maybe [Database])

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the NextToken from the response object of
--   the previous page call.
listDatabasesResponse_nextToken :: Lens' ListDatabasesResponse (Maybe Text)

-- | The response's http status code.
listDatabasesResponse_httpStatus :: Lens' ListDatabasesResponse Int

-- | The description of the prepared statement.
createPreparedStatement_description :: Lens' CreatePreparedStatement (Maybe Text)

-- | The name of the prepared statement.
createPreparedStatement_statementName :: Lens' CreatePreparedStatement Text

-- | The name of the workgroup to which the prepared statement belongs.
createPreparedStatement_workGroup :: Lens' CreatePreparedStatement Text

-- | The query string for the prepared statement.
createPreparedStatement_queryStatement :: Lens' CreatePreparedStatement Text

-- | The response's http status code.
createPreparedStatementResponse_httpStatus :: Lens' CreatePreparedStatementResponse Int

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
getQueryResults_nextToken :: Lens' GetQueryResults (Maybe Text)

-- | The maximum number of results (rows) to return in this request.
getQueryResults_maxResults :: Lens' GetQueryResults (Maybe Natural)

-- | The unique ID of the query execution.
getQueryResults_queryExecutionId :: Lens' GetQueryResults Text

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
getQueryResultsResponse_nextToken :: Lens' GetQueryResultsResponse (Maybe Text)

-- | The results of the query execution.
getQueryResultsResponse_resultSet :: Lens' GetQueryResultsResponse (Maybe ResultSet)

-- | The number of rows inserted with a <tt>CREATE TABLE AS SELECT</tt>
--   statement.
getQueryResultsResponse_updateCount :: Lens' GetQueryResultsResponse (Maybe Integer)

-- | The response's http status code.
getQueryResultsResponse_httpStatus :: Lens' GetQueryResultsResponse Int

-- | The name of the workgroup.
getWorkGroup_workGroup :: Lens' GetWorkGroup Text

-- | Information about the workgroup.
getWorkGroupResponse_workGroup :: Lens' GetWorkGroupResponse (Maybe WorkGroup)

-- | The response's http status code.
getWorkGroupResponse_httpStatus :: Lens' GetWorkGroupResponse Int

-- | The unique ID of the query execution to stop.
stopQueryExecution_queryExecutionId :: Lens' StopQueryExecution Text

-- | The response's http status code.
stopQueryExecutionResponse_httpStatus :: Lens' StopQueryExecutionResponse Int

-- | The database within which the query executes.
startQueryExecution_queryExecutionContext :: Lens' StartQueryExecution (Maybe QueryExecutionContext)

-- | Specifies information about where and how to save the results of the
--   query execution. If the query runs in a workgroup, then workgroup's
--   settings may override query settings. This affects the query results
--   location. The workgroup settings override is specified in
--   EnforceWorkGroupConfiguration (true/false) in the
--   WorkGroupConfiguration. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
startQueryExecution_resultConfiguration :: Lens' StartQueryExecution (Maybe ResultConfiguration)

-- | The name of the workgroup in which the query is being started.
startQueryExecution_workGroup :: Lens' StartQueryExecution (Maybe Text)

-- | A unique case-sensitive string used to ensure the request to create
--   the query is idempotent (executes only once). If another
--   <tt>StartQueryExecution</tt> request is received, the same response is
--   returned and another query is not created. If a parameter has changed,
--   for example, the <tt>QueryString</tt>, an error is returned.
--   
--   This token is listed as not required because Amazon Web Services SDKs
--   (for example the Amazon Web Services SDK for Java) auto-generate the
--   token for users. If you are not using the Amazon Web Services SDK or
--   the Amazon Web Services CLI, you must provide this token or the action
--   will fail.
startQueryExecution_clientRequestToken :: Lens' StartQueryExecution (Maybe Text)

-- | The SQL query statements to be executed.
startQueryExecution_queryString :: Lens' StartQueryExecution Text

-- | The unique ID of the query that ran as a result of this request.
startQueryExecutionResponse_queryExecutionId :: Lens' StartQueryExecutionResponse (Maybe Text)

-- | The response's http status code.
startQueryExecutionResponse_httpStatus :: Lens' StartQueryExecutionResponse Int

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listNamedQueries_nextToken :: Lens' ListNamedQueries (Maybe Text)

-- | The maximum number of queries to return in this request.
listNamedQueries_maxResults :: Lens' ListNamedQueries (Maybe Natural)

-- | The name of the workgroup from which the named queries are being
--   returned. If a workgroup is not specified, the saved queries for the
--   primary workgroup are returned.
listNamedQueries_workGroup :: Lens' ListNamedQueries (Maybe Text)

-- | The list of unique query IDs.
listNamedQueriesResponse_namedQueryIds :: Lens' ListNamedQueriesResponse (Maybe (NonEmpty Text))

-- | A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
listNamedQueriesResponse_nextToken :: Lens' ListNamedQueriesResponse (Maybe Text)

-- | The response's http status code.
listNamedQueriesResponse_httpStatus :: Lens' ListNamedQueriesResponse Int

-- | The name of the data catalog that contains the database and table
--   metadata to return.
getTableMetadata_catalogName :: Lens' GetTableMetadata Text

-- | The name of the database that contains the table metadata to return.
getTableMetadata_databaseName :: Lens' GetTableMetadata Text

-- | The name of the table for which metadata is returned.
getTableMetadata_tableName :: Lens' GetTableMetadata Text

-- | An object that contains table metadata.
getTableMetadataResponse_tableMetadata :: Lens' GetTableMetadataResponse (Maybe TableMetadata)

-- | The response's http status code.
getTableMetadataResponse_httpStatus :: Lens' GetTableMetadataResponse Int

-- | The query description.
createNamedQuery_description :: Lens' CreateNamedQuery (Maybe Text)

-- | The name of the workgroup in which the named query is being created.
createNamedQuery_workGroup :: Lens' CreateNamedQuery (Maybe Text)

-- | A unique case-sensitive string used to ensure the request to create
--   the query is idempotent (executes only once). If another
--   <tt>CreateNamedQuery</tt> request is received, the same response is
--   returned and another query is not created. If a parameter has changed,
--   for example, the <tt>QueryString</tt>, an error is returned.
--   
--   This token is listed as not required because Amazon Web Services SDKs
--   (for example the Amazon Web Services SDK for Java) auto-generate the
--   token for users. If you are not using the Amazon Web Services SDK or
--   the Amazon Web Services CLI, you must provide this token or the action
--   will fail.
createNamedQuery_clientRequestToken :: Lens' CreateNamedQuery (Maybe Text)

-- | The query name.
createNamedQuery_name :: Lens' CreateNamedQuery Text

-- | The database to which the query belongs.
createNamedQuery_database :: Lens' CreateNamedQuery Text

-- | The contents of the query with all query statements.
createNamedQuery_queryString :: Lens' CreateNamedQuery Text

-- | The unique ID of the query.
createNamedQueryResponse_namedQueryId :: Lens' CreateNamedQueryResponse (Maybe Text)

-- | The response's http status code.
createNamedQueryResponse_httpStatus :: Lens' CreateNamedQueryResponse Int

-- | An array of query execution IDs.
batchGetQueryExecution_queryExecutionIds :: Lens' BatchGetQueryExecution (NonEmpty Text)

-- | Information about a query execution.
batchGetQueryExecutionResponse_queryExecutions :: Lens' BatchGetQueryExecutionResponse (Maybe [QueryExecution])

-- | Information about the query executions that failed to run.
batchGetQueryExecutionResponse_unprocessedQueryExecutionIds :: Lens' BatchGetQueryExecutionResponse (Maybe [UnprocessedQueryExecutionId])

-- | The response's http status code.
batchGetQueryExecutionResponse_httpStatus :: Lens' BatchGetQueryExecutionResponse Int

-- | The name of the data catalog to delete.
deleteDataCatalog_name :: Lens' DeleteDataCatalog Text

-- | The response's http status code.
deleteDataCatalogResponse_httpStatus :: Lens' DeleteDataCatalogResponse Int

-- | The token for the next set of results, or null if there are no
--   additional results for this request, where the request lists the tags
--   for the resource with the specified ARN.
listTagsForResource_nextToken :: Lens' ListTagsForResource (Maybe Text)

-- | The maximum number of results to be returned per request that lists
--   the tags for the resource.
listTagsForResource_maxResults :: Lens' ListTagsForResource (Maybe Natural)

-- | Lists the tags for the resource with the specified ARN.
listTagsForResource_resourceARN :: Lens' ListTagsForResource Text

-- | A token to be used by the next request if this request is truncated.
listTagsForResourceResponse_nextToken :: Lens' ListTagsForResourceResponse (Maybe Text)

-- | The list of tags associated with the specified resource.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int

-- | New or modified text that describes the data catalog.
updateDataCatalog_description :: Lens' UpdateDataCatalog (Maybe Text)

-- | Specifies the Lambda function or functions to use for updating the
--   data catalog. This is a mapping whose values depend on the catalog
--   type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   </ul>
updateDataCatalog_parameters :: Lens' UpdateDataCatalog (Maybe (HashMap Text Text))

-- | The name of the data catalog to update. The catalog name must be
--   unique for the Amazon Web Services account and can use a maximum of
--   128 alphanumeric, underscore, at sign, or hyphen characters.
updateDataCatalog_name :: Lens' UpdateDataCatalog Text

-- | Specifies the type of data catalog to update. Specify <tt>LAMBDA</tt>
--   for a federated catalog, <tt>HIVE</tt> for an external hive metastore,
--   or <tt>GLUE</tt> for an Glue Data Catalog.
updateDataCatalog_type :: Lens' UpdateDataCatalog DataCatalogType

-- | The response's http status code.
updateDataCatalogResponse_httpStatus :: Lens' UpdateDataCatalogResponse Int

-- | Optional information about the column.
column_comment :: Lens' Column (Maybe Text)

-- | The data type of the column.
column_type :: Lens' Column (Maybe Text)

-- | The name of the column.
column_name :: Lens' Column Text

-- | The catalog to which the query results belong.
columnInfo_catalogName :: Lens' ColumnInfo (Maybe Text)

-- | The table name for the query results.
columnInfo_tableName :: Lens' ColumnInfo (Maybe Text)

-- | For <tt>DECIMAL</tt> data types, specifies the total number of digits,
--   up to 38. For performance reasons, we recommend up to 18 digits.
columnInfo_precision :: Lens' ColumnInfo (Maybe Int)

-- | Indicates whether values in the column are case-sensitive.
columnInfo_caseSensitive :: Lens' ColumnInfo (Maybe Bool)

-- | Indicates the column's nullable status.
columnInfo_nullable :: Lens' ColumnInfo (Maybe ColumnNullable)

-- | A column label.
columnInfo_label :: Lens' ColumnInfo (Maybe Text)

-- | The schema name (database name) to which the query results belong.
columnInfo_schemaName :: Lens' ColumnInfo (Maybe Text)

-- | For <tt>DECIMAL</tt> data types, specifies the total number of digits
--   in the fractional part of the value. Defaults to 0.
columnInfo_scale :: Lens' ColumnInfo (Maybe Int)

-- | The name of the column.
columnInfo_name :: Lens' ColumnInfo Text

-- | The data type of the column.
columnInfo_type :: Lens' ColumnInfo Text

-- | An optional description of the data catalog.
dataCatalog_description :: Lens' DataCatalog (Maybe Text)

-- | Specifies the Lambda function or functions to use for the data
--   catalog. This is a mapping whose values depend on the catalog type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li></ul></li>
--   </ul>
dataCatalog_parameters :: Lens' DataCatalog (Maybe (HashMap Text Text))

-- | The name of the data catalog. The catalog name must be unique for the
--   Amazon Web Services account and can use a maximum of 128 alphanumeric,
--   underscore, at sign, or hyphen characters.
dataCatalog_name :: Lens' DataCatalog Text

-- | The type of data catalog to create: <tt>LAMBDA</tt> for a federated
--   catalog, <tt>HIVE</tt> for an external hive metastore, or
--   <tt>GLUE</tt> for an Glue Data Catalog.
dataCatalog_type :: Lens' DataCatalog DataCatalogType

-- | The name of the data catalog.
dataCatalogSummary_catalogName :: Lens' DataCatalogSummary (Maybe Text)

-- | The data catalog type.
dataCatalogSummary_type :: Lens' DataCatalogSummary (Maybe DataCatalogType)

-- | An optional description of the database.
database_description :: Lens' Database (Maybe Text)

-- | A set of custom key/value pairs.
database_parameters :: Lens' Database (Maybe (HashMap Text Text))

-- | The name of the database.
database_name :: Lens' Database Text

-- | The value of the datum.
datum_varCharValue :: Lens' Datum (Maybe Text)

-- | For <tt>SSE-KMS</tt> and <tt>CSE-KMS</tt>, this is the KMS key ARN or
--   ID.
encryptionConfiguration_kmsKey :: Lens' EncryptionConfiguration (Maybe Text)

-- | Indicates whether Amazon S3 server-side encryption with Amazon
--   S3-managed keys (<tt>SSE-S3</tt>), server-side encryption with
--   KMS-managed keys (<tt>SSE-KMS</tt>), or client-side encryption with
--   KMS-managed keys (CSE-KMS) is used.
--   
--   If a query runs in a workgroup and the workgroup overrides client-side
--   settings, then the workgroup's setting for encryption is used. It
--   specifies whether query results must be encrypted, for all queries
--   that run in this workgroup.
encryptionConfiguration_encryptionOption :: Lens' EncryptionConfiguration EncryptionOption

-- | Read only. The engine version on which the query runs. If the user
--   requests a valid engine version other than Auto, the effective engine
--   version is the same as the engine version that the user requested. If
--   the user requests Auto, the effective engine version is chosen by
--   Athena. When a request to update the engine version is made by a
--   <tt>CreateWorkGroup</tt> or <tt>UpdateWorkGroup</tt> operation, the
--   <tt>EffectiveEngineVersion</tt> field is ignored.
engineVersion_effectiveEngineVersion :: Lens' EngineVersion (Maybe Text)

-- | The engine version requested by the user. Possible values are
--   determined by the output of <tt>ListEngineVersions</tt>, including
--   Auto. The default is Auto.
engineVersion_selectedEngineVersion :: Lens' EngineVersion (Maybe Text)

-- | The unique identifier of the query.
namedQuery_namedQueryId :: Lens' NamedQuery (Maybe Text)

-- | The query description.
namedQuery_description :: Lens' NamedQuery (Maybe Text)

-- | The name of the workgroup that contains the named query.
namedQuery_workGroup :: Lens' NamedQuery (Maybe Text)

-- | The query name.
namedQuery_name :: Lens' NamedQuery Text

-- | The database to which the query belongs.
namedQuery_database :: Lens' NamedQuery Text

-- | The SQL query statements that comprise the query.
namedQuery_queryString :: Lens' NamedQuery Text

-- | The name of the workgroup to which the prepared statement belongs.
preparedStatement_workGroupName :: Lens' PreparedStatement (Maybe Text)

-- | The name of the prepared statement.
preparedStatement_statementName :: Lens' PreparedStatement (Maybe Text)

-- | The query string for the prepared statement.
preparedStatement_queryStatement :: Lens' PreparedStatement (Maybe Text)

-- | The last modified time of the prepared statement.
preparedStatement_lastModifiedTime :: Lens' PreparedStatement (Maybe UTCTime)

-- | The description of the prepared statement.
preparedStatement_description :: Lens' PreparedStatement (Maybe Text)

-- | The name of the prepared statement.
preparedStatementSummary_statementName :: Lens' PreparedStatementSummary (Maybe Text)

-- | The last modified time of the prepared statement.
preparedStatementSummary_lastModifiedTime :: Lens' PreparedStatementSummary (Maybe UTCTime)

-- | The completion date, current state, submission time, and state change
--   reason (if applicable) for the query execution.
queryExecution_status :: Lens' QueryExecution (Maybe QueryExecutionStatus)

-- | The unique identifier for each query execution.
queryExecution_queryExecutionId :: Lens' QueryExecution (Maybe Text)

-- | Query execution statistics, such as the amount of data scanned, the
--   amount of time that the query took to process, and the type of
--   statement that was run.
queryExecution_statistics :: Lens' QueryExecution (Maybe QueryExecutionStatistics)

-- | The SQL query statements which the query execution ran.
queryExecution_query :: Lens' QueryExecution (Maybe Text)

-- | The database in which the query execution occurred.
queryExecution_queryExecutionContext :: Lens' QueryExecution (Maybe QueryExecutionContext)

-- | The engine version that executed the query.
queryExecution_engineVersion :: Lens' QueryExecution (Maybe EngineVersion)

-- | The location in Amazon S3 where query results were stored and the
--   encryption option, if any, used for query results. These are known as
--   "client-side settings". If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup.
queryExecution_resultConfiguration :: Lens' QueryExecution (Maybe ResultConfiguration)

-- | The name of the workgroup in which the query ran.
queryExecution_workGroup :: Lens' QueryExecution (Maybe Text)

-- | The type of query statement that was run. <tt>DDL</tt> indicates DDL
--   query statements. <tt>DML</tt> indicates DML (Data Manipulation
--   Language) query statements, such as <tt>CREATE TABLE AS SELECT</tt>.
--   <tt>UTILITY</tt> indicates query statements other than DDL and DML,
--   such as <tt>SHOW CREATE TABLE</tt>, or <tt>DESCRIBE TABLE</tt>.
queryExecution_statementType :: Lens' QueryExecution (Maybe StatementType)

-- | The name of the data catalog used in the query execution.
queryExecutionContext_catalog :: Lens' QueryExecutionContext (Maybe Text)

-- | The name of the database used in the query execution. The database
--   must exist in the catalog.
queryExecutionContext_database :: Lens' QueryExecutionContext (Maybe Text)

-- | The number of milliseconds that Athena took to run the query.
queryExecutionStatistics_totalExecutionTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of milliseconds that Athena took to finalize and publish
--   the query results after the query engine finished running the query.
queryExecutionStatistics_serviceProcessingTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of milliseconds that the query was in your query queue
--   waiting for resources. Note that if transient errors occur, Athena
--   might automatically add the query back to the queue.
queryExecutionStatistics_queryQueueTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of bytes in the data that was queried.
queryExecutionStatistics_dataScannedInBytes :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of milliseconds that Athena took to plan the query
--   processing flow. This includes the time spent retrieving table
--   partitions from the data source. Note that because the query engine
--   performs the query planning, query planning time is a subset of engine
--   processing time.
queryExecutionStatistics_queryPlanningTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The number of milliseconds that the query took to execute.
queryExecutionStatistics_engineExecutionTimeInMillis :: Lens' QueryExecutionStatistics (Maybe Integer)

-- | The location and file name of a data manifest file. The manifest file
--   is saved to the Athena query results location in Amazon S3. The
--   manifest file tracks files that the query wrote to Amazon S3. If the
--   query fails, the manifest file also tracks files that the query
--   intended to write. The manifest is useful for identifying orphaned
--   files resulting from a failed query. For more information, see
--   <a>Working with Query Results, Output Files, and Query History</a> in
--   the <i>Amazon Athena User Guide</i>.
queryExecutionStatistics_dataManifestLocation :: Lens' QueryExecutionStatistics (Maybe Text)

-- | The date and time that the query was submitted.
queryExecutionStatus_submissionDateTime :: Lens' QueryExecutionStatus (Maybe UTCTime)

-- | The date and time that the query completed.
queryExecutionStatus_completionDateTime :: Lens' QueryExecutionStatus (Maybe UTCTime)

-- | Further detail about the status of the query.
queryExecutionStatus_stateChangeReason :: Lens' QueryExecutionStatus (Maybe Text)

-- | The state of query execution. <tt>QUEUED</tt> indicates that the query
--   has been submitted to the service, and Athena will execute the query
--   as soon as resources are available. <tt>RUNNING</tt> indicates that
--   the query is in execution phase. <tt>SUCCEEDED</tt> indicates that the
--   query completed without errors. <tt>FAILED</tt> indicates that the
--   query experienced an error and did not complete processing.
--   <tt>CANCELLED</tt> indicates that a user input interrupted query
--   execution.
--   
--   Athena automatically retries your queries in cases of certain
--   transient errors. As a result, you may see the query state transition
--   from <tt>RUNNING</tt> or <tt>FAILED</tt> to <tt>QUEUED</tt>.
queryExecutionStatus_state :: Lens' QueryExecutionStatus (Maybe QueryExecutionState)

-- | If query results are encrypted in Amazon S3, indicates the encryption
--   option used (for example, <tt>SSE-KMS</tt> or <tt>CSE-KMS</tt>) and
--   key information. This is a client-side setting. If workgroup settings
--   override client-side settings, then the query uses the encryption
--   configuration that is specified for the workgroup, and also uses the
--   location for storing query results specified in the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration and <a>Workgroup
--   Settings Override Client-Side Settings</a>.
resultConfiguration_encryptionConfiguration :: Lens' ResultConfiguration (Maybe EncryptionConfiguration)

-- | The location in Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. To run the query, you must
--   specify the query results location using one of the ways: either for
--   individual queries using either this setting (client-side), or in the
--   workgroup, using WorkGroupConfiguration. If none of them is set,
--   Athena issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>. If workgroup settings override
--   client-side settings, then the query uses the settings specified for
--   the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
resultConfiguration_outputLocation :: Lens' ResultConfiguration (Maybe Text)

-- | The encryption configuration for the query results.
resultConfigurationUpdates_encryptionConfiguration :: Lens' ResultConfigurationUpdates (Maybe EncryptionConfiguration)

-- | If set to "true", indicates that the previously-specified query
--   results location (also known as a client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the <tt>OutputLocation</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>OutputLocation</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
resultConfigurationUpdates_removeOutputLocation :: Lens' ResultConfigurationUpdates (Maybe Bool)

-- | If set to "true", indicates that the previously-specified encryption
--   configuration (also known as the client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the
--   <tt>EncryptionConfiguration</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>EncryptionConfiguration</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
resultConfigurationUpdates_removeEncryptionConfiguration :: Lens' ResultConfigurationUpdates (Maybe Bool)

-- | The location in Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. For more information, see
--   <a>Query Results</a> If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup. The
--   "workgroup settings override" is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
resultConfigurationUpdates_outputLocation :: Lens' ResultConfigurationUpdates (Maybe Text)

-- | The rows in the table.
resultSet_rows :: Lens' ResultSet (Maybe [Row])

-- | The metadata that describes the column structure and data types of a
--   table of query results.
resultSet_resultSetMetadata :: Lens' ResultSet (Maybe ResultSetMetadata)

-- | Information about the columns returned in a query result metadata.
resultSetMetadata_columnInfo :: Lens' ResultSetMetadata (Maybe [ColumnInfo])

-- | The data that populates a row in a query result table.
row_data :: Lens' Row (Maybe [Datum])

-- | The type of table. In Athena, only <tt>EXTERNAL_TABLE</tt> is
--   supported.
tableMetadata_tableType :: Lens' TableMetadata (Maybe Text)

-- | The time that the table was created.
tableMetadata_createTime :: Lens' TableMetadata (Maybe UTCTime)

-- | A list of the partition keys in the table.
tableMetadata_partitionKeys :: Lens' TableMetadata (Maybe [Column])

-- | The last time the table was accessed.
tableMetadata_lastAccessTime :: Lens' TableMetadata (Maybe UTCTime)

-- | A list of the columns in the table.
tableMetadata_columns :: Lens' TableMetadata (Maybe [Column])

-- | A set of custom key/value pairs for table properties.
tableMetadata_parameters :: Lens' TableMetadata (Maybe (HashMap Text Text))

-- | The name of the table.
tableMetadata_name :: Lens' TableMetadata Text

-- | A tag key. The tag key length is from 1 to 128 Unicode characters in
--   UTF-8. You can use letters and numbers representable in UTF-8, and the
--   following characters: + - = . _ : / @. Tag keys are case-sensitive and
--   must be unique per resource.
tag_key :: Lens' Tag (Maybe Text)

-- | A tag value. The tag value length is from 0 to 256 Unicode characters
--   in UTF-8. You can use letters and numbers representable in UTF-8, and
--   the following characters: + - = . _ : / @. Tag values are
--   case-sensitive.
tag_value :: Lens' Tag (Maybe Text)

-- | The unique identifier of the named query.
unprocessedNamedQueryId_namedQueryId :: Lens' UnprocessedNamedQueryId (Maybe Text)

-- | The error message returned when the processing request for the named
--   query failed, if applicable.
unprocessedNamedQueryId_errorMessage :: Lens' UnprocessedNamedQueryId (Maybe Text)

-- | The error code returned when the processing request for the named
--   query failed, if applicable.
unprocessedNamedQueryId_errorCode :: Lens' UnprocessedNamedQueryId (Maybe Text)

-- | The unique identifier of the query execution.
unprocessedQueryExecutionId_queryExecutionId :: Lens' UnprocessedQueryExecutionId (Maybe Text)

-- | The error message returned when the query execution failed to process,
--   if applicable.
unprocessedQueryExecutionId_errorMessage :: Lens' UnprocessedQueryExecutionId (Maybe Text)

-- | The error code returned when the query execution failed to process, if
--   applicable.
unprocessedQueryExecutionId_errorCode :: Lens' UnprocessedQueryExecutionId (Maybe Text)

-- | The date and time the workgroup was created.
workGroup_creationTime :: Lens' WorkGroup (Maybe UTCTime)

-- | The configuration of the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption
--   configuration, if any, used for query results; whether the Amazon
--   CloudWatch Metrics are enabled for the workgroup; whether workgroup
--   settings override client-side settings; and the data usage limits for
--   the amount of data scanned per query or per workgroup. The workgroup
--   settings override is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
workGroup_configuration :: Lens' WorkGroup (Maybe WorkGroupConfiguration)

-- | The state of the workgroup: ENABLED or DISABLED.
workGroup_state :: Lens' WorkGroup (Maybe WorkGroupState)

-- | The workgroup description.
workGroup_description :: Lens' WorkGroup (Maybe Text)

-- | The workgroup name.
workGroup_name :: Lens' WorkGroup Text

-- | The upper data usage limit (cutoff) for the amount of bytes a single
--   query in a workgroup is allowed to scan.
workGroupConfiguration_bytesScannedCutoffPerQuery :: Lens' WorkGroupConfiguration (Maybe Natural)

-- | Indicates that the Amazon CloudWatch metrics are enabled for the
--   workgroup.
workGroupConfiguration_publishCloudWatchMetricsEnabled :: Lens' WorkGroupConfiguration (Maybe Bool)

-- | If set to <tt>true</tt>, allows members assigned to a workgroup to
--   reference Amazon S3 Requester Pays buckets in queries. If set to
--   <tt>false</tt>, workgroup members cannot query data from Requester
--   Pays buckets, and queries that retrieve data from Requester Pays
--   buckets cause an error. The default is <tt>false</tt>. For more
--   information about Requester Pays buckets, see <a>Requester Pays
--   Buckets</a> in the <i>Amazon Simple Storage Service Developer
--   Guide</i>.
workGroupConfiguration_requesterPaysEnabled :: Lens' WorkGroupConfiguration (Maybe Bool)

-- | If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false", client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
workGroupConfiguration_enforceWorkGroupConfiguration :: Lens' WorkGroupConfiguration (Maybe Bool)

-- | The engine version that all queries running on the workgroup use.
--   Queries on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run
--   on the preview engine regardless of this setting.
workGroupConfiguration_engineVersion :: Lens' WorkGroupConfiguration (Maybe EngineVersion)

-- | The configuration for the workgroup, which includes the location in
--   Amazon S3 where query results are stored and the encryption option, if
--   any, used for query results. To run the query, you must specify the
--   query results location using one of the ways: either in the workgroup
--   using this setting, or for individual queries (client-side), using
--   ResultConfiguration$OutputLocation. If none of them is set, Athena
--   issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>.
workGroupConfiguration_resultConfiguration :: Lens' WorkGroupConfiguration (Maybe ResultConfiguration)

-- | The upper limit (cutoff) for the amount of bytes a single query in a
--   workgroup is allowed to scan.
workGroupConfigurationUpdates_bytesScannedCutoffPerQuery :: Lens' WorkGroupConfigurationUpdates (Maybe Natural)

-- | Indicates whether this workgroup enables publishing metrics to Amazon
--   CloudWatch.
workGroupConfigurationUpdates_publishCloudWatchMetricsEnabled :: Lens' WorkGroupConfigurationUpdates (Maybe Bool)

-- | The result configuration information about the queries in this
--   workgroup that will be updated. Includes the updated results location
--   and an updated option for encrypting query results.
workGroupConfigurationUpdates_resultConfigurationUpdates :: Lens' WorkGroupConfigurationUpdates (Maybe ResultConfigurationUpdates)

-- | If set to <tt>true</tt>, allows members assigned to a workgroup to
--   specify Amazon S3 Requester Pays buckets in queries. If set to
--   <tt>false</tt>, workgroup members cannot query data from Requester
--   Pays buckets, and queries that retrieve data from Requester Pays
--   buckets cause an error. The default is <tt>false</tt>. For more
--   information about Requester Pays buckets, see <a>Requester Pays
--   Buckets</a> in the <i>Amazon Simple Storage Service Developer
--   Guide</i>.
workGroupConfigurationUpdates_requesterPaysEnabled :: Lens' WorkGroupConfigurationUpdates (Maybe Bool)

-- | If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false" client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
workGroupConfigurationUpdates_enforceWorkGroupConfiguration :: Lens' WorkGroupConfigurationUpdates (Maybe Bool)

-- | Indicates that the data usage control limit per query is removed.
--   WorkGroupConfiguration$BytesScannedCutoffPerQuery
workGroupConfigurationUpdates_removeBytesScannedCutoffPerQuery :: Lens' WorkGroupConfigurationUpdates (Maybe Bool)

-- | The engine version requested when a workgroup is updated. After the
--   update, all queries on the workgroup run on the requested engine
--   version. If no value was previously set, the default is Auto. Queries
--   on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the
--   preview engine regardless of this setting.
workGroupConfigurationUpdates_engineVersion :: Lens' WorkGroupConfigurationUpdates (Maybe EngineVersion)

-- | The workgroup creation date and time.
workGroupSummary_creationTime :: Lens' WorkGroupSummary (Maybe UTCTime)

-- | The name of the workgroup.
workGroupSummary_name :: Lens' WorkGroupSummary (Maybe Text)

-- | The state of the workgroup.
workGroupSummary_state :: Lens' WorkGroupSummary (Maybe WorkGroupState)

-- | The engine version setting for all queries on the workgroup. Queries
--   on the <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the
--   preview engine regardless of this setting.
workGroupSummary_engineVersion :: Lens' WorkGroupSummary (Maybe EngineVersion)

-- | The workgroup description.
workGroupSummary_description :: Lens' WorkGroupSummary (Maybe Text)


module Network.AWS.Athena.Waiters


-- | Derived from API version <tt>2017-05-18</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon Athena is an interactive query service that lets you use
--   standard SQL to analyze data directly in Amazon S3. You can point
--   Athena at your data in Amazon S3 and run ad-hoc queries and get
--   results in seconds. Athena is serverless, so there is no
--   infrastructure to set up or manage. You pay only for the queries you
--   run. Athena scales automatically—executing queries in parallel—so
--   results are fast, even with large datasets and complex queries. For
--   more information, see <a>What is Amazon Athena</a> in the <i>Amazon
--   Athena User Guide</i>.
--   
--   If you connect to Athena using the JDBC driver, use version 1.1.0 of
--   the driver or later with the Amazon Athena API. Earlier version
--   drivers do not support the API. For more information and to download
--   the driver, see <a>Accessing Amazon Athena with JDBC</a>.
--   
--   For code samples using the Amazon Web Services SDK for Java, see
--   <a>Examples and Code Samples</a> in the <i>Amazon Athena User
--   Guide</i>.
module Network.AWS.Athena

-- | API version <tt>2017-05-18</tt> of the Amazon Athena SDK
--   configuration.
defaultService :: Service

-- | Indicates that something is wrong with the input to the request. For
--   example, a required parameter may be missing or out of range.
_InvalidRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A resource, such as a workgroup, was not found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Indicates a platform issue, which may be due to a transient condition
--   or outage.
_InternalServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An exception that Athena received when it called a custom metastore.
--   Occurs if the error is not caused by user input
--   (<tt>InvalidRequestException</tt>) or from the Athena platform
--   (<tt>InternalServerException</tt>). For example, if a user-created
--   Lambda function is missing permissions, the Lambda <tt>4XX</tt>
--   exception is returned in a <tt>MetadataException</tt>.
_MetadataException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Indicates that the request was throttled.
_TooManyRequestsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newCreateDataCatalog</a> smart constructor.
data CreateDataCatalog
CreateDataCatalog' :: Maybe [Tag] -> Maybe Text -> Maybe (HashMap Text Text) -> Text -> DataCatalogType -> CreateDataCatalog

-- | Create a value of <a>CreateDataCatalog</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:CreateDataCatalog'</a>, <a>createDataCatalog_tags</a> - A
--   list of comma separated tags to add to the data catalog that is
--   created.
--   
--   <a>$sel:description:CreateDataCatalog'</a>,
--   <a>createDataCatalog_description</a> - A description of the data
--   catalog to be created.
--   
--   <a>$sel:parameters:CreateDataCatalog'</a>,
--   <a>createDataCatalog_parameters</a> - Specifies the Lambda function or
--   functions to use for creating the data catalog. This is a mapping
--   whose values depend on the catalog type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue Data Catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li><li>In Regions where Athena engine version 2 is not
--   available, creating new Glue data catalogs results in an
--   <tt>INVALID_INPUT</tt> error.</li></ul></li>
--   </ul>
--   
--   <a>$sel:name:CreateDataCatalog'</a>, <a>createDataCatalog_name</a> -
--   The name of the data catalog to create. The catalog name must be
--   unique for the Amazon Web Services account and can use a maximum of
--   128 alphanumeric, underscore, at sign, or hyphen characters.
--   
--   <a>$sel:type':CreateDataCatalog'</a>, <a>createDataCatalog_type</a> -
--   The type of data catalog to create: <tt>LAMBDA</tt> for a federated
--   catalog, <tt>HIVE</tt> for an external hive metastore, or
--   <tt>GLUE</tt> for an Glue Data Catalog.
newCreateDataCatalog :: Text -> DataCatalogType -> CreateDataCatalog

-- | <i>See:</i> <a>newCreateDataCatalogResponse</a> smart constructor.
data CreateDataCatalogResponse
CreateDataCatalogResponse' :: Int -> CreateDataCatalogResponse

-- | Create a value of <a>CreateDataCatalogResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreateDataCatalogResponse'</a>,
--   <a>createDataCatalogResponse_httpStatus</a> - The response's http
--   status code.
newCreateDataCatalogResponse :: Int -> CreateDataCatalogResponse

-- | <i>See:</i> <a>newListQueryExecutions</a> smart constructor.
data ListQueryExecutions
ListQueryExecutions' :: Maybe Text -> Maybe Natural -> Maybe Text -> ListQueryExecutions

-- | Create a value of <a>ListQueryExecutions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListQueryExecutions'</a>,
--   <a>listQueryExecutions_nextToken</a> - A token generated by the Athena
--   service that specifies where to continue pagination if a previous
--   request was truncated. To obtain the next set of pages, pass in the
--   <tt>NextToken</tt> from the response object of the previous page call.
--   
--   <a>$sel:maxResults:ListQueryExecutions'</a>,
--   <a>listQueryExecutions_maxResults</a> - The maximum number of query
--   executions to return in this request.
--   
--   <a>$sel:workGroup:ListQueryExecutions'</a>,
--   <a>listQueryExecutions_workGroup</a> - The name of the workgroup from
--   which queries are being returned. If a workgroup is not specified, a
--   list of available query execution IDs for the queries in the primary
--   workgroup is returned.
newListQueryExecutions :: ListQueryExecutions

-- | <i>See:</i> <a>newListQueryExecutionsResponse</a> smart constructor.
data ListQueryExecutionsResponse
ListQueryExecutionsResponse' :: Maybe Text -> Maybe (NonEmpty Text) -> Int -> ListQueryExecutionsResponse

-- | Create a value of <a>ListQueryExecutionsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListQueryExecutions'</a>,
--   <a>listQueryExecutionsResponse_nextToken</a> - A token to be used by
--   the next request if this request is truncated.
--   
--   <a>$sel:queryExecutionIds:ListQueryExecutionsResponse'</a>,
--   <a>listQueryExecutionsResponse_queryExecutionIds</a> - The unique IDs
--   of each query execution as an array of strings.
--   
--   <a>$sel:httpStatus:ListQueryExecutionsResponse'</a>,
--   <a>listQueryExecutionsResponse_httpStatus</a> - The response's http
--   status code.
newListQueryExecutionsResponse :: Int -> ListQueryExecutionsResponse

-- | <i>See:</i> <a>newDeletePreparedStatement</a> smart constructor.
data DeletePreparedStatement
DeletePreparedStatement' :: Text -> Text -> DeletePreparedStatement

-- | Create a value of <a>DeletePreparedStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statementName:DeletePreparedStatement'</a>,
--   <a>deletePreparedStatement_statementName</a> - The name of the
--   prepared statement to delete.
--   
--   <a>$sel:workGroup:DeletePreparedStatement'</a>,
--   <a>deletePreparedStatement_workGroup</a> - The workgroup to which the
--   statement to be deleted belongs.
newDeletePreparedStatement :: Text -> Text -> DeletePreparedStatement

-- | <i>See:</i> <a>newDeletePreparedStatementResponse</a> smart
--   constructor.
data DeletePreparedStatementResponse
DeletePreparedStatementResponse' :: Int -> DeletePreparedStatementResponse

-- | Create a value of <a>DeletePreparedStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeletePreparedStatementResponse'</a>,
--   <a>deletePreparedStatementResponse_httpStatus</a> - The response's
--   http status code.
newDeletePreparedStatementResponse :: Int -> DeletePreparedStatementResponse

-- | <i>See:</i> <a>newListTableMetadata</a> smart constructor.
data ListTableMetadata
ListTableMetadata' :: Maybe Text -> Maybe Natural -> Maybe Text -> Text -> Text -> ListTableMetadata

-- | Create a value of <a>ListTableMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTableMetadata'</a>,
--   <a>listTableMetadata_nextToken</a> - A token generated by the Athena
--   service that specifies where to continue pagination if a previous
--   request was truncated. To obtain the next set of pages, pass in the
--   NextToken from the response object of the previous page call.
--   
--   <a>$sel:maxResults:ListTableMetadata'</a>,
--   <a>listTableMetadata_maxResults</a> - Specifies the maximum number of
--   results to return.
--   
--   <a>$sel:expression:ListTableMetadata'</a>,
--   <a>listTableMetadata_expression</a> - A regex filter that
--   pattern-matches table names. If no expression is supplied, metadata
--   for all tables are listed.
--   
--   <a>$sel:catalogName:ListTableMetadata'</a>,
--   <a>listTableMetadata_catalogName</a> - The name of the data catalog
--   for which table metadata should be returned.
--   
--   <a>$sel:databaseName:ListTableMetadata'</a>,
--   <a>listTableMetadata_databaseName</a> - The name of the database for
--   which table metadata should be returned.
newListTableMetadata :: Text -> Text -> ListTableMetadata

-- | <i>See:</i> <a>newListTableMetadataResponse</a> smart constructor.
data ListTableMetadataResponse
ListTableMetadataResponse' :: Maybe Text -> Maybe [TableMetadata] -> Int -> ListTableMetadataResponse

-- | Create a value of <a>ListTableMetadataResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTableMetadata'</a>,
--   <a>listTableMetadataResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the NextToken from the response object of the previous page call.
--   
--   <a>$sel:tableMetadataList:ListTableMetadataResponse'</a>,
--   <a>listTableMetadataResponse_tableMetadataList</a> - A list of table
--   metadata.
--   
--   <a>$sel:httpStatus:ListTableMetadataResponse'</a>,
--   <a>listTableMetadataResponse_httpStatus</a> - The response's http
--   status code.
newListTableMetadataResponse :: Int -> ListTableMetadataResponse

-- | <i>See:</i> <a>newUpdatePreparedStatement</a> smart constructor.
data UpdatePreparedStatement
UpdatePreparedStatement' :: Maybe Text -> Text -> Text -> Text -> UpdatePreparedStatement

-- | Create a value of <a>UpdatePreparedStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:UpdatePreparedStatement'</a>,
--   <a>updatePreparedStatement_description</a> - The description of the
--   prepared statement.
--   
--   <a>$sel:statementName:UpdatePreparedStatement'</a>,
--   <a>updatePreparedStatement_statementName</a> - The name of the
--   prepared statement.
--   
--   <a>$sel:workGroup:UpdatePreparedStatement'</a>,
--   <a>updatePreparedStatement_workGroup</a> - The workgroup for the
--   prepared statement.
--   
--   <a>$sel:queryStatement:UpdatePreparedStatement'</a>,
--   <a>updatePreparedStatement_queryStatement</a> - The query string for
--   the prepared statement.
newUpdatePreparedStatement :: Text -> Text -> Text -> UpdatePreparedStatement

-- | <i>See:</i> <a>newUpdatePreparedStatementResponse</a> smart
--   constructor.
data UpdatePreparedStatementResponse
UpdatePreparedStatementResponse' :: Int -> UpdatePreparedStatementResponse

-- | Create a value of <a>UpdatePreparedStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdatePreparedStatementResponse'</a>,
--   <a>updatePreparedStatementResponse_httpStatus</a> - The response's
--   http status code.
newUpdatePreparedStatementResponse :: Int -> UpdatePreparedStatementResponse

-- | <i>See:</i> <a>newListPreparedStatements</a> smart constructor.
data ListPreparedStatements
ListPreparedStatements' :: Maybe Text -> Maybe Natural -> Text -> ListPreparedStatements

-- | Create a value of <a>ListPreparedStatements</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListPreparedStatements'</a>,
--   <a>listPreparedStatements_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the <tt>NextToken</tt> from the response object of the previous
--   page call.
--   
--   <a>$sel:maxResults:ListPreparedStatements'</a>,
--   <a>listPreparedStatements_maxResults</a> - The maximum number of
--   results to return in this request.
--   
--   <a>$sel:workGroup:ListPreparedStatements'</a>,
--   <a>listPreparedStatements_workGroup</a> - The workgroup to list the
--   prepared statements for.
newListPreparedStatements :: Text -> ListPreparedStatements

-- | <i>See:</i> <a>newListPreparedStatementsResponse</a> smart
--   constructor.
data ListPreparedStatementsResponse
ListPreparedStatementsResponse' :: Maybe Text -> Maybe [PreparedStatementSummary] -> Int -> ListPreparedStatementsResponse

-- | Create a value of <a>ListPreparedStatementsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListPreparedStatements'</a>,
--   <a>listPreparedStatementsResponse_nextToken</a> - A token generated by
--   the Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the <tt>NextToken</tt> from the response object of the previous
--   page call.
--   
--   <a>$sel:preparedStatements:ListPreparedStatementsResponse'</a>,
--   <a>listPreparedStatementsResponse_preparedStatements</a> - The list of
--   prepared statements for the workgroup.
--   
--   <a>$sel:httpStatus:ListPreparedStatementsResponse'</a>,
--   <a>listPreparedStatementsResponse_httpStatus</a> - The response's http
--   status code.
newListPreparedStatementsResponse :: Int -> ListPreparedStatementsResponse

-- | <i>See:</i> <a>newGetPreparedStatement</a> smart constructor.
data GetPreparedStatement
GetPreparedStatement' :: Text -> Text -> GetPreparedStatement

-- | Create a value of <a>GetPreparedStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statementName:GetPreparedStatement'</a>,
--   <a>getPreparedStatement_statementName</a> - The name of the prepared
--   statement to retrieve.
--   
--   <a>$sel:workGroup:GetPreparedStatement'</a>,
--   <a>getPreparedStatement_workGroup</a> - The workgroup to which the
--   statement to be retrieved belongs.
newGetPreparedStatement :: Text -> Text -> GetPreparedStatement

-- | <i>See:</i> <a>newGetPreparedStatementResponse</a> smart constructor.
data GetPreparedStatementResponse
GetPreparedStatementResponse' :: Maybe PreparedStatement -> Int -> GetPreparedStatementResponse

-- | Create a value of <a>GetPreparedStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:preparedStatement:GetPreparedStatementResponse'</a>,
--   <a>getPreparedStatementResponse_preparedStatement</a> - The name of
--   the prepared statement that was retrieved.
--   
--   <a>$sel:httpStatus:GetPreparedStatementResponse'</a>,
--   <a>getPreparedStatementResponse_httpStatus</a> - The response's http
--   status code.
newGetPreparedStatementResponse :: Int -> GetPreparedStatementResponse

-- | <i>See:</i> <a>newGetQueryExecution</a> smart constructor.
data GetQueryExecution
GetQueryExecution' :: Text -> GetQueryExecution

-- | Create a value of <a>GetQueryExecution</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionId:GetQueryExecution'</a>,
--   <a>getQueryExecution_queryExecutionId</a> - The unique ID of the query
--   execution.
newGetQueryExecution :: Text -> GetQueryExecution

-- | <i>See:</i> <a>newGetQueryExecutionResponse</a> smart constructor.
data GetQueryExecutionResponse
GetQueryExecutionResponse' :: Maybe QueryExecution -> Int -> GetQueryExecutionResponse

-- | Create a value of <a>GetQueryExecutionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecution:GetQueryExecutionResponse'</a>,
--   <a>getQueryExecutionResponse_queryExecution</a> - Information about
--   the query execution.
--   
--   <a>$sel:httpStatus:GetQueryExecutionResponse'</a>,
--   <a>getQueryExecutionResponse_httpStatus</a> - The response's http
--   status code.
newGetQueryExecutionResponse :: Int -> GetQueryExecutionResponse

-- | <i>See:</i> <a>newGetDatabase</a> smart constructor.
data GetDatabase
GetDatabase' :: Text -> Text -> GetDatabase

-- | Create a value of <a>GetDatabase</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogName:GetDatabase'</a>, <a>getDatabase_catalogName</a> -
--   The name of the data catalog that contains the database to return.
--   
--   <a>$sel:databaseName:GetDatabase'</a>, <a>getDatabase_databaseName</a>
--   - The name of the database to return.
newGetDatabase :: Text -> Text -> GetDatabase

-- | <i>See:</i> <a>newGetDatabaseResponse</a> smart constructor.
data GetDatabaseResponse
GetDatabaseResponse' :: Maybe Database -> Int -> GetDatabaseResponse

-- | Create a value of <a>GetDatabaseResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:database:GetDatabaseResponse'</a>,
--   <a>getDatabaseResponse_database</a> - The database returned.
--   
--   <a>$sel:httpStatus:GetDatabaseResponse'</a>,
--   <a>getDatabaseResponse_httpStatus</a> - The response's http status
--   code.
newGetDatabaseResponse :: Int -> GetDatabaseResponse

-- | <i>See:</i> <a>newBatchGetNamedQuery</a> smart constructor.
data BatchGetNamedQuery
BatchGetNamedQuery' :: NonEmpty Text -> BatchGetNamedQuery

-- | Create a value of <a>BatchGetNamedQuery</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryIds:BatchGetNamedQuery'</a>,
--   <a>batchGetNamedQuery_namedQueryIds</a> - An array of query IDs.
newBatchGetNamedQuery :: NonEmpty Text -> BatchGetNamedQuery

-- | <i>See:</i> <a>newBatchGetNamedQueryResponse</a> smart constructor.
data BatchGetNamedQueryResponse
BatchGetNamedQueryResponse' :: Maybe [NamedQuery] -> Maybe [UnprocessedNamedQueryId] -> Int -> BatchGetNamedQueryResponse

-- | Create a value of <a>BatchGetNamedQueryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueries:BatchGetNamedQueryResponse'</a>,
--   <a>batchGetNamedQueryResponse_namedQueries</a> - Information about the
--   named query IDs submitted.
--   
--   <a>$sel:unprocessedNamedQueryIds:BatchGetNamedQueryResponse'</a>,
--   <a>batchGetNamedQueryResponse_unprocessedNamedQueryIds</a> -
--   Information about provided query IDs.
--   
--   <a>$sel:httpStatus:BatchGetNamedQueryResponse'</a>,
--   <a>batchGetNamedQueryResponse_httpStatus</a> - The response's http
--   status code.
newBatchGetNamedQueryResponse :: Int -> BatchGetNamedQueryResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceARN:UntagResource'</a>,
--   <a>untagResource_resourceARN</a> - Specifies the ARN of the resource
--   from which tags are to be removed.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - A
--   comma-separated list of one or more tag keys whose tags are to be
--   removed from the specified resource.
newUntagResource :: Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceARN:TagResource'</a>, <a>tagResource_resourceARN</a> -
--   Specifies the ARN of the Athena resource (workgroup or data catalog)
--   to which tags are to be added.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - A collection
--   of one or more tags, separated by commas, to be added to an Athena
--   workgroup or data catalog resource.
newTagResource :: Text -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | <i>See:</i> <a>newDeleteNamedQuery</a> smart constructor.
data DeleteNamedQuery
DeleteNamedQuery' :: Text -> DeleteNamedQuery

-- | Create a value of <a>DeleteNamedQuery</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryId:DeleteNamedQuery'</a>,
--   <a>deleteNamedQuery_namedQueryId</a> - The unique ID of the query to
--   delete.
newDeleteNamedQuery :: Text -> DeleteNamedQuery

-- | <i>See:</i> <a>newDeleteNamedQueryResponse</a> smart constructor.
data DeleteNamedQueryResponse
DeleteNamedQueryResponse' :: Int -> DeleteNamedQueryResponse

-- | Create a value of <a>DeleteNamedQueryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteNamedQueryResponse'</a>,
--   <a>deleteNamedQueryResponse_httpStatus</a> - The response's http
--   status code.
newDeleteNamedQueryResponse :: Int -> DeleteNamedQueryResponse

-- | <i>See:</i> <a>newGetDataCatalog</a> smart constructor.
data GetDataCatalog
GetDataCatalog' :: Text -> GetDataCatalog

-- | Create a value of <a>GetDataCatalog</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:GetDataCatalog'</a>, <a>getDataCatalog_name</a> - The
--   name of the data catalog to return.
newGetDataCatalog :: Text -> GetDataCatalog

-- | <i>See:</i> <a>newGetDataCatalogResponse</a> smart constructor.
data GetDataCatalogResponse
GetDataCatalogResponse' :: Maybe DataCatalog -> Int -> GetDataCatalogResponse

-- | Create a value of <a>GetDataCatalogResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataCatalog:GetDataCatalogResponse'</a>,
--   <a>getDataCatalogResponse_dataCatalog</a> - The data catalog returned.
--   
--   <a>$sel:httpStatus:GetDataCatalogResponse'</a>,
--   <a>getDataCatalogResponse_httpStatus</a> - The response's http status
--   code.
newGetDataCatalogResponse :: Int -> GetDataCatalogResponse

-- | <i>See:</i> <a>newListEngineVersions</a> smart constructor.
data ListEngineVersions
ListEngineVersions' :: Maybe Text -> Maybe Natural -> ListEngineVersions

-- | Create a value of <a>ListEngineVersions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListEngineVersions'</a>,
--   <a>listEngineVersions_nextToken</a> - A token generated by the Athena
--   service that specifies where to continue pagination if a previous
--   request was truncated. To obtain the next set of pages, pass in the
--   <tt>NextToken</tt> from the response object of the previous page call.
--   
--   <a>$sel:maxResults:ListEngineVersions'</a>,
--   <a>listEngineVersions_maxResults</a> - The maximum number of engine
--   versions to return in this request.
newListEngineVersions :: ListEngineVersions

-- | <i>See:</i> <a>newListEngineVersionsResponse</a> smart constructor.
data ListEngineVersionsResponse
ListEngineVersionsResponse' :: Maybe Text -> Maybe [EngineVersion] -> Int -> ListEngineVersionsResponse

-- | Create a value of <a>ListEngineVersionsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListEngineVersions'</a>,
--   <a>listEngineVersionsResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the <tt>NextToken</tt> from the response object of the previous
--   page call.
--   
--   <a>$sel:engineVersions:ListEngineVersionsResponse'</a>,
--   <a>listEngineVersionsResponse_engineVersions</a> - A list of engine
--   versions that are available to choose from.
--   
--   <a>$sel:httpStatus:ListEngineVersionsResponse'</a>,
--   <a>listEngineVersionsResponse_httpStatus</a> - The response's http
--   status code.
newListEngineVersionsResponse :: Int -> ListEngineVersionsResponse

-- | <i>See:</i> <a>newCreateWorkGroup</a> smart constructor.
data CreateWorkGroup
CreateWorkGroup' :: Maybe WorkGroupConfiguration -> Maybe [Tag] -> Maybe Text -> Text -> CreateWorkGroup

-- | Create a value of <a>CreateWorkGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configuration:CreateWorkGroup'</a>,
--   <a>createWorkGroup_configuration</a> - The configuration for the
--   workgroup, which includes the location in Amazon S3 where query
--   results are stored, the encryption configuration, if any, used for
--   encrypting query results, whether the Amazon CloudWatch Metrics are
--   enabled for the workgroup, the limit for the amount of bytes scanned
--   (cutoff) per query, if it is specified, and whether workgroup's
--   settings (specified with <tt>EnforceWorkGroupConfiguration</tt>) in
--   the <tt>WorkGroupConfiguration</tt> override client-side settings. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <a>$sel:tags:CreateWorkGroup'</a>, <a>createWorkGroup_tags</a> - A
--   list of comma separated tags to add to the workgroup that is created.
--   
--   <a>$sel:description:CreateWorkGroup'</a>,
--   <a>createWorkGroup_description</a> - The workgroup description.
--   
--   <a>$sel:name:CreateWorkGroup'</a>, <a>createWorkGroup_name</a> - The
--   workgroup name.
newCreateWorkGroup :: Text -> CreateWorkGroup

-- | <i>See:</i> <a>newCreateWorkGroupResponse</a> smart constructor.
data CreateWorkGroupResponse
CreateWorkGroupResponse' :: Int -> CreateWorkGroupResponse

-- | Create a value of <a>CreateWorkGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreateWorkGroupResponse'</a>,
--   <a>createWorkGroupResponse_httpStatus</a> - The response's http status
--   code.
newCreateWorkGroupResponse :: Int -> CreateWorkGroupResponse

-- | <i>See:</i> <a>newListDataCatalogs</a> smart constructor.
data ListDataCatalogs
ListDataCatalogs' :: Maybe Text -> Maybe Natural -> ListDataCatalogs

-- | Create a value of <a>ListDataCatalogs</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDataCatalogs'</a>,
--   <a>listDataCatalogs_nextToken</a> - A token generated by the Athena
--   service that specifies where to continue pagination if a previous
--   request was truncated. To obtain the next set of pages, pass in the
--   NextToken from the response object of the previous page call.
--   
--   <a>$sel:maxResults:ListDataCatalogs'</a>,
--   <a>listDataCatalogs_maxResults</a> - Specifies the maximum number of
--   data catalogs to return.
newListDataCatalogs :: ListDataCatalogs

-- | <i>See:</i> <a>newListDataCatalogsResponse</a> smart constructor.
data ListDataCatalogsResponse
ListDataCatalogsResponse' :: Maybe Text -> Maybe [DataCatalogSummary] -> Int -> ListDataCatalogsResponse

-- | Create a value of <a>ListDataCatalogsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDataCatalogs'</a>,
--   <a>listDataCatalogsResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the NextToken from the response object of the previous page call.
--   
--   <a>$sel:dataCatalogsSummary:ListDataCatalogsResponse'</a>,
--   <a>listDataCatalogsResponse_dataCatalogsSummary</a> - A summary list
--   of data catalogs.
--   
--   <a>$sel:httpStatus:ListDataCatalogsResponse'</a>,
--   <a>listDataCatalogsResponse_httpStatus</a> - The response's http
--   status code.
newListDataCatalogsResponse :: Int -> ListDataCatalogsResponse

-- | <i>See:</i> <a>newUpdateWorkGroup</a> smart constructor.
data UpdateWorkGroup
UpdateWorkGroup' :: Maybe WorkGroupConfigurationUpdates -> Maybe WorkGroupState -> Maybe Text -> Text -> UpdateWorkGroup

-- | Create a value of <a>UpdateWorkGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:configurationUpdates:UpdateWorkGroup'</a>,
--   <a>updateWorkGroup_configurationUpdates</a> - The workgroup
--   configuration that will be updated for the given workgroup.
--   
--   <a>$sel:state:UpdateWorkGroup'</a>, <a>updateWorkGroup_state</a> - The
--   workgroup state that will be updated for the given workgroup.
--   
--   <a>$sel:description:UpdateWorkGroup'</a>,
--   <a>updateWorkGroup_description</a> - The workgroup description.
--   
--   <a>$sel:workGroup:UpdateWorkGroup'</a>,
--   <a>updateWorkGroup_workGroup</a> - The specified workgroup that will
--   be updated.
newUpdateWorkGroup :: Text -> UpdateWorkGroup

-- | <i>See:</i> <a>newUpdateWorkGroupResponse</a> smart constructor.
data UpdateWorkGroupResponse
UpdateWorkGroupResponse' :: Int -> UpdateWorkGroupResponse

-- | Create a value of <a>UpdateWorkGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateWorkGroupResponse'</a>,
--   <a>updateWorkGroupResponse_httpStatus</a> - The response's http status
--   code.
newUpdateWorkGroupResponse :: Int -> UpdateWorkGroupResponse

-- | <i>See:</i> <a>newGetNamedQuery</a> smart constructor.
data GetNamedQuery
GetNamedQuery' :: Text -> GetNamedQuery

-- | Create a value of <a>GetNamedQuery</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryId:GetNamedQuery'</a>,
--   <a>getNamedQuery_namedQueryId</a> - The unique ID of the query. Use
--   ListNamedQueries to get query IDs.
newGetNamedQuery :: Text -> GetNamedQuery

-- | <i>See:</i> <a>newGetNamedQueryResponse</a> smart constructor.
data GetNamedQueryResponse
GetNamedQueryResponse' :: Maybe NamedQuery -> Int -> GetNamedQueryResponse

-- | Create a value of <a>GetNamedQueryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQuery:GetNamedQueryResponse'</a>,
--   <a>getNamedQueryResponse_namedQuery</a> - Information about the query.
--   
--   <a>$sel:httpStatus:GetNamedQueryResponse'</a>,
--   <a>getNamedQueryResponse_httpStatus</a> - The response's http status
--   code.
newGetNamedQueryResponse :: Int -> GetNamedQueryResponse

-- | <i>See:</i> <a>newListWorkGroups</a> smart constructor.
data ListWorkGroups
ListWorkGroups' :: Maybe Text -> Maybe Natural -> ListWorkGroups

-- | Create a value of <a>ListWorkGroups</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListWorkGroups'</a>, <a>listWorkGroups_nextToken</a>
--   - A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
--   
--   <a>$sel:maxResults:ListWorkGroups'</a>,
--   <a>listWorkGroups_maxResults</a> - The maximum number of workgroups to
--   return in this request.
newListWorkGroups :: ListWorkGroups

-- | <i>See:</i> <a>newListWorkGroupsResponse</a> smart constructor.
data ListWorkGroupsResponse
ListWorkGroupsResponse' :: Maybe Text -> Maybe [WorkGroupSummary] -> Int -> ListWorkGroupsResponse

-- | Create a value of <a>ListWorkGroupsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListWorkGroups'</a>,
--   <a>listWorkGroupsResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the <tt>NextToken</tt> from the response object of the previous
--   page call.
--   
--   <a>$sel:workGroups:ListWorkGroupsResponse'</a>,
--   <a>listWorkGroupsResponse_workGroups</a> - A list of WorkGroupSummary
--   objects that include the names, descriptions, creation times, and
--   states for each workgroup.
--   
--   <a>$sel:httpStatus:ListWorkGroupsResponse'</a>,
--   <a>listWorkGroupsResponse_httpStatus</a> - The response's http status
--   code.
newListWorkGroupsResponse :: Int -> ListWorkGroupsResponse

-- | <i>See:</i> <a>newDeleteWorkGroup</a> smart constructor.
data DeleteWorkGroup
DeleteWorkGroup' :: Maybe Bool -> Text -> DeleteWorkGroup

-- | Create a value of <a>DeleteWorkGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:recursiveDeleteOption:DeleteWorkGroup'</a>,
--   <a>deleteWorkGroup_recursiveDeleteOption</a> - The option to delete
--   the workgroup and its contents even if the workgroup contains any
--   named queries or query executions.
--   
--   <a>$sel:workGroup:DeleteWorkGroup'</a>,
--   <a>deleteWorkGroup_workGroup</a> - The unique name of the workgroup to
--   delete.
newDeleteWorkGroup :: Text -> DeleteWorkGroup

-- | <i>See:</i> <a>newDeleteWorkGroupResponse</a> smart constructor.
data DeleteWorkGroupResponse
DeleteWorkGroupResponse' :: Int -> DeleteWorkGroupResponse

-- | Create a value of <a>DeleteWorkGroupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteWorkGroupResponse'</a>,
--   <a>deleteWorkGroupResponse_httpStatus</a> - The response's http status
--   code.
newDeleteWorkGroupResponse :: Int -> DeleteWorkGroupResponse

-- | <i>See:</i> <a>newListDatabases</a> smart constructor.
data ListDatabases
ListDatabases' :: Maybe Text -> Maybe Natural -> Text -> ListDatabases

-- | Create a value of <a>ListDatabases</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListDatabases'</a>, <a>listDatabases_nextToken</a> -
--   A token generated by the Athena service that specifies where to
--   continue pagination if a previous request was truncated. To obtain the
--   next set of pages, pass in the <tt>NextToken</tt> from the response
--   object of the previous page call.
--   
--   <a>$sel:maxResults:ListDatabases'</a>, <a>listDatabases_maxResults</a>
--   - Specifies the maximum number of results to return.
--   
--   <a>$sel:catalogName:ListDatabases'</a>,
--   <a>listDatabases_catalogName</a> - The name of the data catalog that
--   contains the databases to return.
newListDatabases :: Text -> ListDatabases

-- | <i>See:</i> <a>newListDatabasesResponse</a> smart constructor.
data ListDatabasesResponse
ListDatabasesResponse' :: Maybe [Database] -> Maybe Text -> Int -> ListDatabasesResponse

-- | Create a value of <a>ListDatabasesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:databaseList:ListDatabasesResponse'</a>,
--   <a>listDatabasesResponse_databaseList</a> - A list of databases from a
--   data catalog.
--   
--   <a>$sel:nextToken:ListDatabases'</a>,
--   <a>listDatabasesResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the NextToken from the response object of the previous page call.
--   
--   <a>$sel:httpStatus:ListDatabasesResponse'</a>,
--   <a>listDatabasesResponse_httpStatus</a> - The response's http status
--   code.
newListDatabasesResponse :: Int -> ListDatabasesResponse

-- | <i>See:</i> <a>newCreatePreparedStatement</a> smart constructor.
data CreatePreparedStatement
CreatePreparedStatement' :: Maybe Text -> Text -> Text -> Text -> CreatePreparedStatement

-- | Create a value of <a>CreatePreparedStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:CreatePreparedStatement'</a>,
--   <a>createPreparedStatement_description</a> - The description of the
--   prepared statement.
--   
--   <a>$sel:statementName:CreatePreparedStatement'</a>,
--   <a>createPreparedStatement_statementName</a> - The name of the
--   prepared statement.
--   
--   <a>$sel:workGroup:CreatePreparedStatement'</a>,
--   <a>createPreparedStatement_workGroup</a> - The name of the workgroup
--   to which the prepared statement belongs.
--   
--   <a>$sel:queryStatement:CreatePreparedStatement'</a>,
--   <a>createPreparedStatement_queryStatement</a> - The query string for
--   the prepared statement.
newCreatePreparedStatement :: Text -> Text -> Text -> CreatePreparedStatement

-- | <i>See:</i> <a>newCreatePreparedStatementResponse</a> smart
--   constructor.
data CreatePreparedStatementResponse
CreatePreparedStatementResponse' :: Int -> CreatePreparedStatementResponse

-- | Create a value of <a>CreatePreparedStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreatePreparedStatementResponse'</a>,
--   <a>createPreparedStatementResponse_httpStatus</a> - The response's
--   http status code.
newCreatePreparedStatementResponse :: Int -> CreatePreparedStatementResponse

-- | <i>See:</i> <a>newGetQueryResults</a> smart constructor.
data GetQueryResults
GetQueryResults' :: Maybe Text -> Maybe Natural -> Text -> GetQueryResults

-- | Create a value of <a>GetQueryResults</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:GetQueryResults'</a>,
--   <a>getQueryResults_nextToken</a> - A token generated by the Athena
--   service that specifies where to continue pagination if a previous
--   request was truncated. To obtain the next set of pages, pass in the
--   <tt>NextToken</tt> from the response object of the previous page call.
--   
--   <a>$sel:maxResults:GetQueryResults'</a>,
--   <a>getQueryResults_maxResults</a> - The maximum number of results
--   (rows) to return in this request.
--   
--   <a>$sel:queryExecutionId:GetQueryResults'</a>,
--   <a>getQueryResults_queryExecutionId</a> - The unique ID of the query
--   execution.
newGetQueryResults :: Text -> GetQueryResults

-- | <i>See:</i> <a>newGetQueryResultsResponse</a> smart constructor.
data GetQueryResultsResponse
GetQueryResultsResponse' :: Maybe Text -> Maybe ResultSet -> Maybe Integer -> Int -> GetQueryResultsResponse

-- | Create a value of <a>GetQueryResultsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:GetQueryResults'</a>,
--   <a>getQueryResultsResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the <tt>NextToken</tt> from the response object of the previous
--   page call.
--   
--   <a>$sel:resultSet:GetQueryResultsResponse'</a>,
--   <a>getQueryResultsResponse_resultSet</a> - The results of the query
--   execution.
--   
--   <a>$sel:updateCount:GetQueryResultsResponse'</a>,
--   <a>getQueryResultsResponse_updateCount</a> - The number of rows
--   inserted with a <tt>CREATE TABLE AS SELECT</tt> statement.
--   
--   <a>$sel:httpStatus:GetQueryResultsResponse'</a>,
--   <a>getQueryResultsResponse_httpStatus</a> - The response's http status
--   code.
newGetQueryResultsResponse :: Int -> GetQueryResultsResponse

-- | <i>See:</i> <a>newGetWorkGroup</a> smart constructor.
data GetWorkGroup
GetWorkGroup' :: Text -> GetWorkGroup

-- | Create a value of <a>GetWorkGroup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:workGroup:GetWorkGroup'</a>, <a>getWorkGroup_workGroup</a> -
--   The name of the workgroup.
newGetWorkGroup :: Text -> GetWorkGroup

-- | <i>See:</i> <a>newGetWorkGroupResponse</a> smart constructor.
data GetWorkGroupResponse
GetWorkGroupResponse' :: Maybe WorkGroup -> Int -> GetWorkGroupResponse

-- | Create a value of <a>GetWorkGroupResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:workGroup:GetWorkGroup'</a>,
--   <a>getWorkGroupResponse_workGroup</a> - Information about the
--   workgroup.
--   
--   <a>$sel:httpStatus:GetWorkGroupResponse'</a>,
--   <a>getWorkGroupResponse_httpStatus</a> - The response's http status
--   code.
newGetWorkGroupResponse :: Int -> GetWorkGroupResponse

-- | <i>See:</i> <a>newStopQueryExecution</a> smart constructor.
data StopQueryExecution
StopQueryExecution' :: Text -> StopQueryExecution

-- | Create a value of <a>StopQueryExecution</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionId:StopQueryExecution'</a>,
--   <a>stopQueryExecution_queryExecutionId</a> - The unique ID of the
--   query execution to stop.
newStopQueryExecution :: Text -> StopQueryExecution

-- | <i>See:</i> <a>newStopQueryExecutionResponse</a> smart constructor.
data StopQueryExecutionResponse
StopQueryExecutionResponse' :: Int -> StopQueryExecutionResponse

-- | Create a value of <a>StopQueryExecutionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:StopQueryExecutionResponse'</a>,
--   <a>stopQueryExecutionResponse_httpStatus</a> - The response's http
--   status code.
newStopQueryExecutionResponse :: Int -> StopQueryExecutionResponse

-- | <i>See:</i> <a>newStartQueryExecution</a> smart constructor.
data StartQueryExecution
StartQueryExecution' :: Maybe QueryExecutionContext -> Maybe ResultConfiguration -> Maybe Text -> Maybe Text -> Text -> StartQueryExecution

-- | Create a value of <a>StartQueryExecution</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionContext:StartQueryExecution'</a>,
--   <a>startQueryExecution_queryExecutionContext</a> - The database within
--   which the query executes.
--   
--   <a>$sel:resultConfiguration:StartQueryExecution'</a>,
--   <a>startQueryExecution_resultConfiguration</a> - Specifies information
--   about where and how to save the results of the query execution. If the
--   query runs in a workgroup, then workgroup's settings may override
--   query settings. This affects the query results location. The workgroup
--   settings override is specified in EnforceWorkGroupConfiguration
--   (true/false) in the WorkGroupConfiguration. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <a>$sel:workGroup:StartQueryExecution'</a>,
--   <a>startQueryExecution_workGroup</a> - The name of the workgroup in
--   which the query is being started.
--   
--   <a>$sel:clientRequestToken:StartQueryExecution'</a>,
--   <a>startQueryExecution_clientRequestToken</a> - A unique
--   case-sensitive string used to ensure the request to create the query
--   is idempotent (executes only once). If another
--   <tt>StartQueryExecution</tt> request is received, the same response is
--   returned and another query is not created. If a parameter has changed,
--   for example, the <tt>QueryString</tt>, an error is returned.
--   
--   This token is listed as not required because Amazon Web Services SDKs
--   (for example the Amazon Web Services SDK for Java) auto-generate the
--   token for users. If you are not using the Amazon Web Services SDK or
--   the Amazon Web Services CLI, you must provide this token or the action
--   will fail.
--   
--   <a>$sel:queryString:StartQueryExecution'</a>,
--   <a>startQueryExecution_queryString</a> - The SQL query statements to
--   be executed.
newStartQueryExecution :: Text -> StartQueryExecution

-- | <i>See:</i> <a>newStartQueryExecutionResponse</a> smart constructor.
data StartQueryExecutionResponse
StartQueryExecutionResponse' :: Maybe Text -> Int -> StartQueryExecutionResponse

-- | Create a value of <a>StartQueryExecutionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionId:StartQueryExecutionResponse'</a>,
--   <a>startQueryExecutionResponse_queryExecutionId</a> - The unique ID of
--   the query that ran as a result of this request.
--   
--   <a>$sel:httpStatus:StartQueryExecutionResponse'</a>,
--   <a>startQueryExecutionResponse_httpStatus</a> - The response's http
--   status code.
newStartQueryExecutionResponse :: Int -> StartQueryExecutionResponse

-- | <i>See:</i> <a>newListNamedQueries</a> smart constructor.
data ListNamedQueries
ListNamedQueries' :: Maybe Text -> Maybe Natural -> Maybe Text -> ListNamedQueries

-- | Create a value of <a>ListNamedQueries</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListNamedQueries'</a>,
--   <a>listNamedQueries_nextToken</a> - A token generated by the Athena
--   service that specifies where to continue pagination if a previous
--   request was truncated. To obtain the next set of pages, pass in the
--   <tt>NextToken</tt> from the response object of the previous page call.
--   
--   <a>$sel:maxResults:ListNamedQueries'</a>,
--   <a>listNamedQueries_maxResults</a> - The maximum number of queries to
--   return in this request.
--   
--   <a>$sel:workGroup:ListNamedQueries'</a>,
--   <a>listNamedQueries_workGroup</a> - The name of the workgroup from
--   which the named queries are being returned. If a workgroup is not
--   specified, the saved queries for the primary workgroup are returned.
newListNamedQueries :: ListNamedQueries

-- | <i>See:</i> <a>newListNamedQueriesResponse</a> smart constructor.
data ListNamedQueriesResponse
ListNamedQueriesResponse' :: Maybe (NonEmpty Text) -> Maybe Text -> Int -> ListNamedQueriesResponse

-- | Create a value of <a>ListNamedQueriesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryIds:ListNamedQueriesResponse'</a>,
--   <a>listNamedQueriesResponse_namedQueryIds</a> - The list of unique
--   query IDs.
--   
--   <a>$sel:nextToken:ListNamedQueries'</a>,
--   <a>listNamedQueriesResponse_nextToken</a> - A token generated by the
--   Athena service that specifies where to continue pagination if a
--   previous request was truncated. To obtain the next set of pages, pass
--   in the <tt>NextToken</tt> from the response object of the previous
--   page call.
--   
--   <a>$sel:httpStatus:ListNamedQueriesResponse'</a>,
--   <a>listNamedQueriesResponse_httpStatus</a> - The response's http
--   status code.
newListNamedQueriesResponse :: Int -> ListNamedQueriesResponse

-- | <i>See:</i> <a>newGetTableMetadata</a> smart constructor.
data GetTableMetadata
GetTableMetadata' :: Text -> Text -> Text -> GetTableMetadata

-- | Create a value of <a>GetTableMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogName:GetTableMetadata'</a>,
--   <a>getTableMetadata_catalogName</a> - The name of the data catalog
--   that contains the database and table metadata to return.
--   
--   <a>$sel:databaseName:GetTableMetadata'</a>,
--   <a>getTableMetadata_databaseName</a> - The name of the database that
--   contains the table metadata to return.
--   
--   <a>$sel:tableName:GetTableMetadata'</a>,
--   <a>getTableMetadata_tableName</a> - The name of the table for which
--   metadata is returned.
newGetTableMetadata :: Text -> Text -> Text -> GetTableMetadata

-- | <i>See:</i> <a>newGetTableMetadataResponse</a> smart constructor.
data GetTableMetadataResponse
GetTableMetadataResponse' :: Maybe TableMetadata -> Int -> GetTableMetadataResponse

-- | Create a value of <a>GetTableMetadataResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableMetadata:GetTableMetadataResponse'</a>,
--   <a>getTableMetadataResponse_tableMetadata</a> - An object that
--   contains table metadata.
--   
--   <a>$sel:httpStatus:GetTableMetadataResponse'</a>,
--   <a>getTableMetadataResponse_httpStatus</a> - The response's http
--   status code.
newGetTableMetadataResponse :: Int -> GetTableMetadataResponse

-- | <i>See:</i> <a>newCreateNamedQuery</a> smart constructor.
data CreateNamedQuery
CreateNamedQuery' :: Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> CreateNamedQuery

-- | Create a value of <a>CreateNamedQuery</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:CreateNamedQuery'</a>,
--   <a>createNamedQuery_description</a> - The query description.
--   
--   <a>$sel:workGroup:CreateNamedQuery'</a>,
--   <a>createNamedQuery_workGroup</a> - The name of the workgroup in which
--   the named query is being created.
--   
--   <a>$sel:clientRequestToken:CreateNamedQuery'</a>,
--   <a>createNamedQuery_clientRequestToken</a> - A unique case-sensitive
--   string used to ensure the request to create the query is idempotent
--   (executes only once). If another <tt>CreateNamedQuery</tt> request is
--   received, the same response is returned and another query is not
--   created. If a parameter has changed, for example, the
--   <tt>QueryString</tt>, an error is returned.
--   
--   This token is listed as not required because Amazon Web Services SDKs
--   (for example the Amazon Web Services SDK for Java) auto-generate the
--   token for users. If you are not using the Amazon Web Services SDK or
--   the Amazon Web Services CLI, you must provide this token or the action
--   will fail.
--   
--   <a>$sel:name:CreateNamedQuery'</a>, <a>createNamedQuery_name</a> - The
--   query name.
--   
--   <a>$sel:database:CreateNamedQuery'</a>,
--   <a>createNamedQuery_database</a> - The database to which the query
--   belongs.
--   
--   <a>$sel:queryString:CreateNamedQuery'</a>,
--   <a>createNamedQuery_queryString</a> - The contents of the query with
--   all query statements.
newCreateNamedQuery :: Text -> Text -> Text -> CreateNamedQuery

-- | <i>See:</i> <a>newCreateNamedQueryResponse</a> smart constructor.
data CreateNamedQueryResponse
CreateNamedQueryResponse' :: Maybe Text -> Int -> CreateNamedQueryResponse

-- | Create a value of <a>CreateNamedQueryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryId:CreateNamedQueryResponse'</a>,
--   <a>createNamedQueryResponse_namedQueryId</a> - The unique ID of the
--   query.
--   
--   <a>$sel:httpStatus:CreateNamedQueryResponse'</a>,
--   <a>createNamedQueryResponse_httpStatus</a> - The response's http
--   status code.
newCreateNamedQueryResponse :: Int -> CreateNamedQueryResponse

-- | <i>See:</i> <a>newBatchGetQueryExecution</a> smart constructor.
data BatchGetQueryExecution
BatchGetQueryExecution' :: NonEmpty Text -> BatchGetQueryExecution

-- | Create a value of <a>BatchGetQueryExecution</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionIds:BatchGetQueryExecution'</a>,
--   <a>batchGetQueryExecution_queryExecutionIds</a> - An array of query
--   execution IDs.
newBatchGetQueryExecution :: NonEmpty Text -> BatchGetQueryExecution

-- | <i>See:</i> <a>newBatchGetQueryExecutionResponse</a> smart
--   constructor.
data BatchGetQueryExecutionResponse
BatchGetQueryExecutionResponse' :: Maybe [QueryExecution] -> Maybe [UnprocessedQueryExecutionId] -> Int -> BatchGetQueryExecutionResponse

-- | Create a value of <a>BatchGetQueryExecutionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutions:BatchGetQueryExecutionResponse'</a>,
--   <a>batchGetQueryExecutionResponse_queryExecutions</a> - Information
--   about a query execution.
--   
--   
--   <a>$sel:unprocessedQueryExecutionIds:BatchGetQueryExecutionResponse'</a>,
--   <a>batchGetQueryExecutionResponse_unprocessedQueryExecutionIds</a> -
--   Information about the query executions that failed to run.
--   
--   <a>$sel:httpStatus:BatchGetQueryExecutionResponse'</a>,
--   <a>batchGetQueryExecutionResponse_httpStatus</a> - The response's http
--   status code.
newBatchGetQueryExecutionResponse :: Int -> BatchGetQueryExecutionResponse

-- | <i>See:</i> <a>newDeleteDataCatalog</a> smart constructor.
data DeleteDataCatalog
DeleteDataCatalog' :: Text -> DeleteDataCatalog

-- | Create a value of <a>DeleteDataCatalog</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:DeleteDataCatalog'</a>, <a>deleteDataCatalog_name</a> -
--   The name of the data catalog to delete.
newDeleteDataCatalog :: Text -> DeleteDataCatalog

-- | <i>See:</i> <a>newDeleteDataCatalogResponse</a> smart constructor.
data DeleteDataCatalogResponse
DeleteDataCatalogResponse' :: Int -> DeleteDataCatalogResponse

-- | Create a value of <a>DeleteDataCatalogResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteDataCatalogResponse'</a>,
--   <a>deleteDataCatalogResponse_httpStatus</a> - The response's http
--   status code.
newDeleteDataCatalogResponse :: Int -> DeleteDataCatalogResponse

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Maybe Text -> Maybe Natural -> Text -> ListTagsForResource

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForResource'</a>,
--   <a>listTagsForResource_nextToken</a> - The token for the next set of
--   results, or null if there are no additional results for this request,
--   where the request lists the tags for the resource with the specified
--   ARN.
--   
--   <a>$sel:maxResults:ListTagsForResource'</a>,
--   <a>listTagsForResource_maxResults</a> - The maximum number of results
--   to be returned per request that lists the tags for the resource.
--   
--   <a>$sel:resourceARN:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceARN</a> - Lists the tags for the
--   resource with the specified ARN.
newListTagsForResource :: Text -> ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe Text -> Maybe [Tag] -> Int -> ListTagsForResourceResponse

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForResource'</a>,
--   <a>listTagsForResourceResponse_nextToken</a> - A token to be used by
--   the next request if this request is truncated.
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - The list of tags associated
--   with the specified resource.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | <i>See:</i> <a>newUpdateDataCatalog</a> smart constructor.
data UpdateDataCatalog
UpdateDataCatalog' :: Maybe Text -> Maybe (HashMap Text Text) -> Text -> DataCatalogType -> UpdateDataCatalog

-- | Create a value of <a>UpdateDataCatalog</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:UpdateDataCatalog'</a>,
--   <a>updateDataCatalog_description</a> - New or modified text that
--   describes the data catalog.
--   
--   <a>$sel:parameters:UpdateDataCatalog'</a>,
--   <a>updateDataCatalog_parameters</a> - Specifies the Lambda function or
--   functions to use for updating the data catalog. This is a mapping
--   whose values depend on the catalog type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   </ul>
--   
--   <a>$sel:name:UpdateDataCatalog'</a>, <a>updateDataCatalog_name</a> -
--   The name of the data catalog to update. The catalog name must be
--   unique for the Amazon Web Services account and can use a maximum of
--   128 alphanumeric, underscore, at sign, or hyphen characters.
--   
--   <a>$sel:type':UpdateDataCatalog'</a>, <a>updateDataCatalog_type</a> -
--   Specifies the type of data catalog to update. Specify <tt>LAMBDA</tt>
--   for a federated catalog, <tt>HIVE</tt> for an external hive metastore,
--   or <tt>GLUE</tt> for an Glue Data Catalog.
newUpdateDataCatalog :: Text -> DataCatalogType -> UpdateDataCatalog

-- | <i>See:</i> <a>newUpdateDataCatalogResponse</a> smart constructor.
data UpdateDataCatalogResponse
UpdateDataCatalogResponse' :: Int -> UpdateDataCatalogResponse

-- | Create a value of <a>UpdateDataCatalogResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateDataCatalogResponse'</a>,
--   <a>updateDataCatalogResponse_httpStatus</a> - The response's http
--   status code.
newUpdateDataCatalogResponse :: Int -> UpdateDataCatalogResponse
newtype ColumnNullable
ColumnNullable' :: Text -> ColumnNullable
[fromColumnNullable] :: ColumnNullable -> Text
pattern ColumnNullable_NOT_NULL :: ColumnNullable
pattern ColumnNullable_NULLABLE :: ColumnNullable
pattern ColumnNullable_UNKNOWN :: ColumnNullable
newtype DataCatalogType
DataCatalogType' :: Text -> DataCatalogType
[fromDataCatalogType] :: DataCatalogType -> Text
pattern DataCatalogType_GLUE :: DataCatalogType
pattern DataCatalogType_HIVE :: DataCatalogType
pattern DataCatalogType_LAMBDA :: DataCatalogType
newtype EncryptionOption
EncryptionOption' :: Text -> EncryptionOption
[fromEncryptionOption] :: EncryptionOption -> Text
pattern EncryptionOption_CSE_KMS :: EncryptionOption
pattern EncryptionOption_SSE_KMS :: EncryptionOption
pattern EncryptionOption_SSE_S3 :: EncryptionOption
newtype QueryExecutionState
QueryExecutionState' :: Text -> QueryExecutionState
[fromQueryExecutionState] :: QueryExecutionState -> Text
pattern QueryExecutionState_CANCELLED :: QueryExecutionState
pattern QueryExecutionState_FAILED :: QueryExecutionState
pattern QueryExecutionState_QUEUED :: QueryExecutionState
pattern QueryExecutionState_RUNNING :: QueryExecutionState
pattern QueryExecutionState_SUCCEEDED :: QueryExecutionState
newtype StatementType
StatementType' :: Text -> StatementType
[fromStatementType] :: StatementType -> Text
pattern StatementType_DDL :: StatementType
pattern StatementType_DML :: StatementType
pattern StatementType_UTILITY :: StatementType
newtype WorkGroupState
WorkGroupState' :: Text -> WorkGroupState
[fromWorkGroupState] :: WorkGroupState -> Text
pattern WorkGroupState_DISABLED :: WorkGroupState
pattern WorkGroupState_ENABLED :: WorkGroupState

-- | Contains metadata for a column in a table.
--   
--   <i>See:</i> <a>newColumn</a> smart constructor.
data Column
Column' :: Maybe Text -> Maybe Text -> Text -> Column

-- | Create a value of <a>Column</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:comment:Column'</a>, <a>column_comment</a> - Optional
--   information about the column.
--   
--   <a>$sel:type':Column'</a>, <a>column_type</a> - The data type of the
--   column.
--   
--   <a>$sel:name:Column'</a>, <a>column_name</a> - The name of the column.
newColumn :: Text -> Column

-- | Information about the columns in a query execution result.
--   
--   <i>See:</i> <a>newColumnInfo</a> smart constructor.
data ColumnInfo
ColumnInfo' :: Maybe Text -> Maybe Text -> Maybe Int -> Maybe Bool -> Maybe ColumnNullable -> Maybe Text -> Maybe Text -> Maybe Int -> Text -> Text -> ColumnInfo

-- | Create a value of <a>ColumnInfo</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogName:ColumnInfo'</a>, <a>columnInfo_catalogName</a> -
--   The catalog to which the query results belong.
--   
--   <a>$sel:tableName:ColumnInfo'</a>, <a>columnInfo_tableName</a> - The
--   table name for the query results.
--   
--   <a>$sel:precision:ColumnInfo'</a>, <a>columnInfo_precision</a> - For
--   <tt>DECIMAL</tt> data types, specifies the total number of digits, up
--   to 38. For performance reasons, we recommend up to 18 digits.
--   
--   <a>$sel:caseSensitive:ColumnInfo'</a>, <a>columnInfo_caseSensitive</a>
--   - Indicates whether values in the column are case-sensitive.
--   
--   <a>$sel:nullable:ColumnInfo'</a>, <a>columnInfo_nullable</a> -
--   Indicates the column's nullable status.
--   
--   <a>$sel:label:ColumnInfo'</a>, <a>columnInfo_label</a> - A column
--   label.
--   
--   <a>$sel:schemaName:ColumnInfo'</a>, <a>columnInfo_schemaName</a> - The
--   schema name (database name) to which the query results belong.
--   
--   <a>$sel:scale:ColumnInfo'</a>, <a>columnInfo_scale</a> - For
--   <tt>DECIMAL</tt> data types, specifies the total number of digits in
--   the fractional part of the value. Defaults to 0.
--   
--   <a>$sel:name:ColumnInfo'</a>, <a>columnInfo_name</a> - The name of the
--   column.
--   
--   <a>$sel:type':ColumnInfo'</a>, <a>columnInfo_type</a> - The data type
--   of the column.
newColumnInfo :: Text -> Text -> ColumnInfo

-- | Contains information about a data catalog in an Amazon Web Services
--   account.
--   
--   <i>See:</i> <a>newDataCatalog</a> smart constructor.
data DataCatalog
DataCatalog' :: Maybe Text -> Maybe (HashMap Text Text) -> Text -> DataCatalogType -> DataCatalog

-- | Create a value of <a>DataCatalog</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:DataCatalog'</a>, <a>dataCatalog_description</a> -
--   An optional description of the data catalog.
--   
--   <a>$sel:parameters:DataCatalog'</a>, <a>dataCatalog_parameters</a> -
--   Specifies the Lambda function or functions to use for the data
--   catalog. This is a mapping whose values depend on the catalog type.
--   
--   <ul>
--   <li>For the <tt>HIVE</tt> data catalog type, use the following syntax.
--   The <tt>metadata-function</tt> parameter is required. <tt>The
--   sdk-version</tt> parameter is optional and defaults to the currently
--   supported version.<pre>metadata-function=lambda_arn,
--   sdk-version=version_number</pre></li>
--   <li>For the <tt>LAMBDA</tt> data catalog type, use one of the
--   following sets of required parameters, but not both.<ul><li>If you
--   have one Lambda function that processes metadata and another for
--   reading the actual data, use the following syntax. Both parameters are
--   required.<pre>metadata-function=lambda_arn,
--   record-function=lambda_arn</pre></li><li>If you have a composite
--   Lambda function that processes both metadata and data, use the
--   following syntax to specify your Lambda
--   function.<pre>function=lambda_arn</pre></li></ul></li>
--   <li>The <tt>GLUE</tt> type takes a catalog ID parameter and is
--   required. The <tt> catalog_id </tt> is the account ID of the Amazon
--   Web Services account to which the Glue catalog
--   belongs.<pre>catalog-id=catalog_id</pre><ul><li>The <tt>GLUE</tt> data
--   catalog type also applies to the default <tt>AwsDataCatalog</tt> that
--   already exists in your account, of which you can have only one and
--   cannot modify.</li><li>Queries that specify a Glue Data Catalog other
--   than the default <tt>AwsDataCatalog</tt> must be run on Athena engine
--   version 2.</li></ul></li>
--   </ul>
--   
--   <a>$sel:name:DataCatalog'</a>, <a>dataCatalog_name</a> - The name of
--   the data catalog. The catalog name must be unique for the Amazon Web
--   Services account and can use a maximum of 128 alphanumeric,
--   underscore, at sign, or hyphen characters.
--   
--   <a>$sel:type':DataCatalog'</a>, <a>dataCatalog_type</a> - The type of
--   data catalog to create: <tt>LAMBDA</tt> for a federated catalog,
--   <tt>HIVE</tt> for an external hive metastore, or <tt>GLUE</tt> for an
--   Glue Data Catalog.
newDataCatalog :: Text -> DataCatalogType -> DataCatalog

-- | The summary information for the data catalog, which includes its name
--   and type.
--   
--   <i>See:</i> <a>newDataCatalogSummary</a> smart constructor.
data DataCatalogSummary
DataCatalogSummary' :: Maybe Text -> Maybe DataCatalogType -> DataCatalogSummary

-- | Create a value of <a>DataCatalogSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogName:DataCatalogSummary'</a>,
--   <a>dataCatalogSummary_catalogName</a> - The name of the data catalog.
--   
--   <a>$sel:type':DataCatalogSummary'</a>, <a>dataCatalogSummary_type</a>
--   - The data catalog type.
newDataCatalogSummary :: DataCatalogSummary

-- | Contains metadata information for a database in a data catalog.
--   
--   <i>See:</i> <a>newDatabase</a> smart constructor.
data Database
Database' :: Maybe Text -> Maybe (HashMap Text Text) -> Text -> Database

-- | Create a value of <a>Database</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:Database'</a>, <a>database_description</a> - An
--   optional description of the database.
--   
--   <a>$sel:parameters:Database'</a>, <a>database_parameters</a> - A set
--   of custom key/value pairs.
--   
--   <a>$sel:name:Database'</a>, <a>database_name</a> - The name of the
--   database.
newDatabase :: Text -> Database

-- | A piece of data (a field in the table).
--   
--   <i>See:</i> <a>newDatum</a> smart constructor.
data Datum
Datum' :: Maybe Text -> Datum

-- | Create a value of <a>Datum</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:varCharValue:Datum'</a>, <a>datum_varCharValue</a> - The value
--   of the datum.
newDatum :: Datum

-- | If query results are encrypted in Amazon S3, indicates the encryption
--   option used (for example, <tt>SSE-KMS</tt> or <tt>CSE-KMS</tt>) and
--   key information.
--   
--   <i>See:</i> <a>newEncryptionConfiguration</a> smart constructor.
data EncryptionConfiguration
EncryptionConfiguration' :: Maybe Text -> EncryptionOption -> EncryptionConfiguration

-- | Create a value of <a>EncryptionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsKey:EncryptionConfiguration'</a>,
--   <a>encryptionConfiguration_kmsKey</a> - For <tt>SSE-KMS</tt> and
--   <tt>CSE-KMS</tt>, this is the KMS key ARN or ID.
--   
--   <a>$sel:encryptionOption:EncryptionConfiguration'</a>,
--   <a>encryptionConfiguration_encryptionOption</a> - Indicates whether
--   Amazon S3 server-side encryption with Amazon S3-managed keys
--   (<tt>SSE-S3</tt>), server-side encryption with KMS-managed keys
--   (<tt>SSE-KMS</tt>), or client-side encryption with KMS-managed keys
--   (CSE-KMS) is used.
--   
--   If a query runs in a workgroup and the workgroup overrides client-side
--   settings, then the workgroup's setting for encryption is used. It
--   specifies whether query results must be encrypted, for all queries
--   that run in this workgroup.
newEncryptionConfiguration :: EncryptionOption -> EncryptionConfiguration

-- | The Athena engine version for running queries.
--   
--   <i>See:</i> <a>newEngineVersion</a> smart constructor.
data EngineVersion
EngineVersion' :: Maybe Text -> Maybe Text -> EngineVersion

-- | Create a value of <a>EngineVersion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:effectiveEngineVersion:EngineVersion'</a>,
--   <a>engineVersion_effectiveEngineVersion</a> - Read only. The engine
--   version on which the query runs. If the user requests a valid engine
--   version other than Auto, the effective engine version is the same as
--   the engine version that the user requested. If the user requests Auto,
--   the effective engine version is chosen by Athena. When a request to
--   update the engine version is made by a <tt>CreateWorkGroup</tt> or
--   <tt>UpdateWorkGroup</tt> operation, the
--   <tt>EffectiveEngineVersion</tt> field is ignored.
--   
--   <a>$sel:selectedEngineVersion:EngineVersion'</a>,
--   <a>engineVersion_selectedEngineVersion</a> - The engine version
--   requested by the user. Possible values are determined by the output of
--   <tt>ListEngineVersions</tt>, including Auto. The default is Auto.
newEngineVersion :: EngineVersion

-- | A query, where <tt>QueryString</tt> is the list of SQL query
--   statements that comprise the query.
--   
--   <i>See:</i> <a>newNamedQuery</a> smart constructor.
data NamedQuery
NamedQuery' :: Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> NamedQuery

-- | Create a value of <a>NamedQuery</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryId:NamedQuery'</a>, <a>namedQuery_namedQueryId</a> -
--   The unique identifier of the query.
--   
--   <a>$sel:description:NamedQuery'</a>, <a>namedQuery_description</a> -
--   The query description.
--   
--   <a>$sel:workGroup:NamedQuery'</a>, <a>namedQuery_workGroup</a> - The
--   name of the workgroup that contains the named query.
--   
--   <a>$sel:name:NamedQuery'</a>, <a>namedQuery_name</a> - The query name.
--   
--   <a>$sel:database:NamedQuery'</a>, <a>namedQuery_database</a> - The
--   database to which the query belongs.
--   
--   <a>$sel:queryString:NamedQuery'</a>, <a>namedQuery_queryString</a> -
--   The SQL query statements that comprise the query.
newNamedQuery :: Text -> Text -> Text -> NamedQuery

-- | A prepared SQL statement for use with Athena.
--   
--   <i>See:</i> <a>newPreparedStatement</a> smart constructor.
data PreparedStatement
PreparedStatement' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> PreparedStatement

-- | Create a value of <a>PreparedStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:workGroupName:PreparedStatement'</a>,
--   <a>preparedStatement_workGroupName</a> - The name of the workgroup to
--   which the prepared statement belongs.
--   
--   <a>$sel:statementName:PreparedStatement'</a>,
--   <a>preparedStatement_statementName</a> - The name of the prepared
--   statement.
--   
--   <a>$sel:queryStatement:PreparedStatement'</a>,
--   <a>preparedStatement_queryStatement</a> - The query string for the
--   prepared statement.
--   
--   <a>$sel:lastModifiedTime:PreparedStatement'</a>,
--   <a>preparedStatement_lastModifiedTime</a> - The last modified time of
--   the prepared statement.
--   
--   <a>$sel:description:PreparedStatement'</a>,
--   <a>preparedStatement_description</a> - The description of the prepared
--   statement.
newPreparedStatement :: PreparedStatement

-- | The name and last modified time of the prepared statement.
--   
--   <i>See:</i> <a>newPreparedStatementSummary</a> smart constructor.
data PreparedStatementSummary
PreparedStatementSummary' :: Maybe Text -> Maybe POSIX -> PreparedStatementSummary

-- | Create a value of <a>PreparedStatementSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statementName:PreparedStatementSummary'</a>,
--   <a>preparedStatementSummary_statementName</a> - The name of the
--   prepared statement.
--   
--   <a>$sel:lastModifiedTime:PreparedStatementSummary'</a>,
--   <a>preparedStatementSummary_lastModifiedTime</a> - The last modified
--   time of the prepared statement.
newPreparedStatementSummary :: PreparedStatementSummary

-- | Information about a single instance of a query execution.
--   
--   <i>See:</i> <a>newQueryExecution</a> smart constructor.
data QueryExecution
QueryExecution' :: Maybe QueryExecutionStatus -> Maybe Text -> Maybe QueryExecutionStatistics -> Maybe Text -> Maybe QueryExecutionContext -> Maybe EngineVersion -> Maybe ResultConfiguration -> Maybe Text -> Maybe StatementType -> QueryExecution

-- | Create a value of <a>QueryExecution</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:QueryExecution'</a>, <a>queryExecution_status</a> - The
--   completion date, current state, submission time, and state change
--   reason (if applicable) for the query execution.
--   
--   <a>$sel:queryExecutionId:QueryExecution'</a>,
--   <a>queryExecution_queryExecutionId</a> - The unique identifier for
--   each query execution.
--   
--   <a>$sel:statistics:QueryExecution'</a>,
--   <a>queryExecution_statistics</a> - Query execution statistics, such as
--   the amount of data scanned, the amount of time that the query took to
--   process, and the type of statement that was run.
--   
--   <a>$sel:query:QueryExecution'</a>, <a>queryExecution_query</a> - The
--   SQL query statements which the query execution ran.
--   
--   <a>$sel:queryExecutionContext:QueryExecution'</a>,
--   <a>queryExecution_queryExecutionContext</a> - The database in which
--   the query execution occurred.
--   
--   <a>$sel:engineVersion:QueryExecution'</a>,
--   <a>queryExecution_engineVersion</a> - The engine version that executed
--   the query.
--   
--   <a>$sel:resultConfiguration:QueryExecution'</a>,
--   <a>queryExecution_resultConfiguration</a> - The location in Amazon S3
--   where query results were stored and the encryption option, if any,
--   used for query results. These are known as "client-side settings". If
--   workgroup settings override client-side settings, then the query uses
--   the location for the query results and the encryption configuration
--   that are specified for the workgroup.
--   
--   <a>$sel:workGroup:QueryExecution'</a>, <a>queryExecution_workGroup</a>
--   - The name of the workgroup in which the query ran.
--   
--   <a>$sel:statementType:QueryExecution'</a>,
--   <a>queryExecution_statementType</a> - The type of query statement that
--   was run. <tt>DDL</tt> indicates DDL query statements. <tt>DML</tt>
--   indicates DML (Data Manipulation Language) query statements, such as
--   <tt>CREATE TABLE AS SELECT</tt>. <tt>UTILITY</tt> indicates query
--   statements other than DDL and DML, such as <tt>SHOW CREATE TABLE</tt>,
--   or <tt>DESCRIBE TABLE</tt>.
newQueryExecution :: QueryExecution

-- | The database and data catalog context in which the query execution
--   occurs.
--   
--   <i>See:</i> <a>newQueryExecutionContext</a> smart constructor.
data QueryExecutionContext
QueryExecutionContext' :: Maybe Text -> Maybe Text -> QueryExecutionContext

-- | Create a value of <a>QueryExecutionContext</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalog:QueryExecutionContext'</a>,
--   <a>queryExecutionContext_catalog</a> - The name of the data catalog
--   used in the query execution.
--   
--   <a>$sel:database:QueryExecutionContext'</a>,
--   <a>queryExecutionContext_database</a> - The name of the database used
--   in the query execution. The database must exist in the catalog.
newQueryExecutionContext :: QueryExecutionContext

-- | The amount of data scanned during the query execution and the amount
--   of time that it took to execute, and the type of statement that was
--   run.
--   
--   <i>See:</i> <a>newQueryExecutionStatistics</a> smart constructor.
data QueryExecutionStatistics
QueryExecutionStatistics' :: Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe Text -> QueryExecutionStatistics

-- | Create a value of <a>QueryExecutionStatistics</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:totalExecutionTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_totalExecutionTimeInMillis</a> - The
--   number of milliseconds that Athena took to run the query.
--   
--   <a>$sel:serviceProcessingTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_serviceProcessingTimeInMillis</a> - The
--   number of milliseconds that Athena took to finalize and publish the
--   query results after the query engine finished running the query.
--   
--   <a>$sel:queryQueueTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_queryQueueTimeInMillis</a> - The number of
--   milliseconds that the query was in your query queue waiting for
--   resources. Note that if transient errors occur, Athena might
--   automatically add the query back to the queue.
--   
--   <a>$sel:dataScannedInBytes:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_dataScannedInBytes</a> - The number of
--   bytes in the data that was queried.
--   
--   <a>$sel:queryPlanningTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_queryPlanningTimeInMillis</a> - The number
--   of milliseconds that Athena took to plan the query processing flow.
--   This includes the time spent retrieving table partitions from the data
--   source. Note that because the query engine performs the query
--   planning, query planning time is a subset of engine processing time.
--   
--   <a>$sel:engineExecutionTimeInMillis:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_engineExecutionTimeInMillis</a> - The
--   number of milliseconds that the query took to execute.
--   
--   <a>$sel:dataManifestLocation:QueryExecutionStatistics'</a>,
--   <a>queryExecutionStatistics_dataManifestLocation</a> - The location
--   and file name of a data manifest file. The manifest file is saved to
--   the Athena query results location in Amazon S3. The manifest file
--   tracks files that the query wrote to Amazon S3. If the query fails,
--   the manifest file also tracks files that the query intended to write.
--   The manifest is useful for identifying orphaned files resulting from a
--   failed query. For more information, see <a>Working with Query Results,
--   Output Files, and Query History</a> in the <i>Amazon Athena User
--   Guide</i>.
newQueryExecutionStatistics :: QueryExecutionStatistics

-- | The completion date, current state, submission time, and state change
--   reason (if applicable) for the query execution.
--   
--   <i>See:</i> <a>newQueryExecutionStatus</a> smart constructor.
data QueryExecutionStatus
QueryExecutionStatus' :: Maybe POSIX -> Maybe POSIX -> Maybe Text -> Maybe QueryExecutionState -> QueryExecutionStatus

-- | Create a value of <a>QueryExecutionStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:submissionDateTime:QueryExecutionStatus'</a>,
--   <a>queryExecutionStatus_submissionDateTime</a> - The date and time
--   that the query was submitted.
--   
--   <a>$sel:completionDateTime:QueryExecutionStatus'</a>,
--   <a>queryExecutionStatus_completionDateTime</a> - The date and time
--   that the query completed.
--   
--   <a>$sel:stateChangeReason:QueryExecutionStatus'</a>,
--   <a>queryExecutionStatus_stateChangeReason</a> - Further detail about
--   the status of the query.
--   
--   <a>$sel:state:QueryExecutionStatus'</a>,
--   <a>queryExecutionStatus_state</a> - The state of query execution.
--   <tt>QUEUED</tt> indicates that the query has been submitted to the
--   service, and Athena will execute the query as soon as resources are
--   available. <tt>RUNNING</tt> indicates that the query is in execution
--   phase. <tt>SUCCEEDED</tt> indicates that the query completed without
--   errors. <tt>FAILED</tt> indicates that the query experienced an error
--   and did not complete processing. <tt>CANCELLED</tt> indicates that a
--   user input interrupted query execution.
--   
--   Athena automatically retries your queries in cases of certain
--   transient errors. As a result, you may see the query state transition
--   from <tt>RUNNING</tt> or <tt>FAILED</tt> to <tt>QUEUED</tt>.
newQueryExecutionStatus :: QueryExecutionStatus

-- | The location in Amazon S3 where query results are stored and the
--   encryption option, if any, used for query results. These are known as
--   "client-side settings". If workgroup settings override client-side
--   settings, then the query uses the workgroup settings.
--   
--   <i>See:</i> <a>newResultConfiguration</a> smart constructor.
data ResultConfiguration
ResultConfiguration' :: Maybe EncryptionConfiguration -> Maybe Text -> ResultConfiguration

-- | Create a value of <a>ResultConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionConfiguration:ResultConfiguration'</a>,
--   <a>resultConfiguration_encryptionConfiguration</a> - If query results
--   are encrypted in Amazon S3, indicates the encryption option used (for
--   example, <tt>SSE-KMS</tt> or <tt>CSE-KMS</tt>) and key information.
--   This is a client-side setting. If workgroup settings override
--   client-side settings, then the query uses the encryption configuration
--   that is specified for the workgroup, and also uses the location for
--   storing query results specified in the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration and <a>Workgroup
--   Settings Override Client-Side Settings</a>.
--   
--   <a>$sel:outputLocation:ResultConfiguration'</a>,
--   <a>resultConfiguration_outputLocation</a> - The location in Amazon S3
--   where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. To run the query, you must
--   specify the query results location using one of the ways: either for
--   individual queries using either this setting (client-side), or in the
--   workgroup, using WorkGroupConfiguration. If none of them is set,
--   Athena issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>. If workgroup settings override
--   client-side settings, then the query uses the settings specified for
--   the workgroup. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
newResultConfiguration :: ResultConfiguration

-- | The information about the updates in the query results, such as output
--   location and encryption configuration for the query results.
--   
--   <i>See:</i> <a>newResultConfigurationUpdates</a> smart constructor.
data ResultConfigurationUpdates
ResultConfigurationUpdates' :: Maybe EncryptionConfiguration -> Maybe Bool -> Maybe Bool -> Maybe Text -> ResultConfigurationUpdates

-- | Create a value of <a>ResultConfigurationUpdates</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionConfiguration:ResultConfigurationUpdates'</a>,
--   <a>resultConfigurationUpdates_encryptionConfiguration</a> - The
--   encryption configuration for the query results.
--   
--   <a>$sel:removeOutputLocation:ResultConfigurationUpdates'</a>,
--   <a>resultConfigurationUpdates_removeOutputLocation</a> - If set to
--   "true", indicates that the previously-specified query results location
--   (also known as a client-side setting) for queries in this workgroup
--   should be ignored and set to null. If set to "false" or not set, and a
--   value is present in the <tt>OutputLocation</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>OutputLocation</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
--   
--   <a>$sel:removeEncryptionConfiguration:ResultConfigurationUpdates'</a>,
--   <a>resultConfigurationUpdates_removeEncryptionConfiguration</a> - If
--   set to "true", indicates that the previously-specified encryption
--   configuration (also known as the client-side setting) for queries in
--   this workgroup should be ignored and set to null. If set to "false" or
--   not set, and a value is present in the
--   <tt>EncryptionConfiguration</tt> in
--   <tt>ResultConfigurationUpdates</tt> (the client-side setting), the
--   <tt>EncryptionConfiguration</tt> in the workgroup's
--   <tt>ResultConfiguration</tt> will be updated with the new value. For
--   more information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
--   
--   <a>$sel:outputLocation:ResultConfigurationUpdates'</a>,
--   <a>resultConfigurationUpdates_outputLocation</a> - The location in
--   Amazon S3 where your query results are stored, such as
--   <tt>s3://path/to/query/bucket/</tt>. For more information, see
--   <a>Query Results</a> If workgroup settings override client-side
--   settings, then the query uses the location for the query results and
--   the encryption configuration that are specified for the workgroup. The
--   "workgroup settings override" is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
newResultConfigurationUpdates :: ResultConfigurationUpdates

-- | The metadata and rows that comprise a query result set. The metadata
--   describes the column structure and data types. To return a
--   <tt>ResultSet</tt> object, use GetQueryResults.
--   
--   <i>See:</i> <a>newResultSet</a> smart constructor.
data ResultSet
ResultSet' :: Maybe [Row] -> Maybe ResultSetMetadata -> ResultSet

-- | Create a value of <a>ResultSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rows:ResultSet'</a>, <a>resultSet_rows</a> - The rows in the
--   table.
--   
--   <a>$sel:resultSetMetadata:ResultSet'</a>,
--   <a>resultSet_resultSetMetadata</a> - The metadata that describes the
--   column structure and data types of a table of query results.
newResultSet :: ResultSet

-- | The metadata that describes the column structure and data types of a
--   table of query results. To return a <tt>ResultSetMetadata</tt> object,
--   use GetQueryResults.
--   
--   <i>See:</i> <a>newResultSetMetadata</a> smart constructor.
data ResultSetMetadata
ResultSetMetadata' :: Maybe [ColumnInfo] -> ResultSetMetadata

-- | Create a value of <a>ResultSetMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:columnInfo:ResultSetMetadata'</a>,
--   <a>resultSetMetadata_columnInfo</a> - Information about the columns
--   returned in a query result metadata.
newResultSetMetadata :: ResultSetMetadata

-- | The rows that comprise a query result table.
--   
--   <i>See:</i> <a>newRow</a> smart constructor.
data Row
Row' :: Maybe [Datum] -> Row

-- | Create a value of <a>Row</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:data':Row'</a>, <a>row_data</a> - The data that populates a
--   row in a query result table.
newRow :: Row

-- | Contains metadata for a table.
--   
--   <i>See:</i> <a>newTableMetadata</a> smart constructor.
data TableMetadata
TableMetadata' :: Maybe Text -> Maybe POSIX -> Maybe [Column] -> Maybe POSIX -> Maybe [Column] -> Maybe (HashMap Text Text) -> Text -> TableMetadata

-- | Create a value of <a>TableMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableType:TableMetadata'</a>, <a>tableMetadata_tableType</a> -
--   The type of table. In Athena, only <tt>EXTERNAL_TABLE</tt> is
--   supported.
--   
--   <a>$sel:createTime:TableMetadata'</a>, <a>tableMetadata_createTime</a>
--   - The time that the table was created.
--   
--   <a>$sel:partitionKeys:TableMetadata'</a>,
--   <a>tableMetadata_partitionKeys</a> - A list of the partition keys in
--   the table.
--   
--   <a>$sel:lastAccessTime:TableMetadata'</a>,
--   <a>tableMetadata_lastAccessTime</a> - The last time the table was
--   accessed.
--   
--   <a>$sel:columns:TableMetadata'</a>, <a>tableMetadata_columns</a> - A
--   list of the columns in the table.
--   
--   <a>$sel:parameters:TableMetadata'</a>, <a>tableMetadata_parameters</a>
--   - A set of custom key/value pairs for table properties.
--   
--   <a>$sel:name:TableMetadata'</a>, <a>tableMetadata_name</a> - The name
--   of the table.
newTableMetadata :: Text -> TableMetadata

-- | A label that you assign to a resource. In Athena, a resource can be a
--   workgroup or data catalog. Each tag consists of a key and an optional
--   value, both of which you define. For example, you can use tags to
--   categorize Athena workgroups or data catalogs by purpose, owner, or
--   environment. Use a consistent set of tag keys to make it easier to
--   search and filter workgroups or data catalogs in your account. For
--   best practices, see <a>Tagging Best Practices</a>. Tag keys can be
--   from 1 to 128 UTF-8 Unicode characters, and tag values can be from 0
--   to 256 UTF-8 Unicode characters. Tags can use letters and numbers
--   representable in UTF-8, and the following characters: + - = . _ : / @.
--   Tag keys and values are case-sensitive. Tag keys must be unique per
--   resource. If you specify more than one tag, separate them by commas.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - A tag key. The tag key length
--   is from 1 to 128 Unicode characters in UTF-8. You can use letters and
--   numbers representable in UTF-8, and the following characters: + - = .
--   _ : / @. Tag keys are case-sensitive and must be unique per resource.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - A tag value. The tag value
--   length is from 0 to 256 Unicode characters in UTF-8. You can use
--   letters and numbers representable in UTF-8, and the following
--   characters: + - = . _ : / @. Tag values are case-sensitive.
newTag :: Tag

-- | Information about a named query ID that could not be processed.
--   
--   <i>See:</i> <a>newUnprocessedNamedQueryId</a> smart constructor.
data UnprocessedNamedQueryId
UnprocessedNamedQueryId' :: Maybe Text -> Maybe Text -> Maybe Text -> UnprocessedNamedQueryId

-- | Create a value of <a>UnprocessedNamedQueryId</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:namedQueryId:UnprocessedNamedQueryId'</a>,
--   <a>unprocessedNamedQueryId_namedQueryId</a> - The unique identifier of
--   the named query.
--   
--   <a>$sel:errorMessage:UnprocessedNamedQueryId'</a>,
--   <a>unprocessedNamedQueryId_errorMessage</a> - The error message
--   returned when the processing request for the named query failed, if
--   applicable.
--   
--   <a>$sel:errorCode:UnprocessedNamedQueryId'</a>,
--   <a>unprocessedNamedQueryId_errorCode</a> - The error code returned
--   when the processing request for the named query failed, if applicable.
newUnprocessedNamedQueryId :: UnprocessedNamedQueryId

-- | Describes a query execution that failed to process.
--   
--   <i>See:</i> <a>newUnprocessedQueryExecutionId</a> smart constructor.
data UnprocessedQueryExecutionId
UnprocessedQueryExecutionId' :: Maybe Text -> Maybe Text -> Maybe Text -> UnprocessedQueryExecutionId

-- | Create a value of <a>UnprocessedQueryExecutionId</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:queryExecutionId:UnprocessedQueryExecutionId'</a>,
--   <a>unprocessedQueryExecutionId_queryExecutionId</a> - The unique
--   identifier of the query execution.
--   
--   <a>$sel:errorMessage:UnprocessedQueryExecutionId'</a>,
--   <a>unprocessedQueryExecutionId_errorMessage</a> - The error message
--   returned when the query execution failed to process, if applicable.
--   
--   <a>$sel:errorCode:UnprocessedQueryExecutionId'</a>,
--   <a>unprocessedQueryExecutionId_errorCode</a> - The error code returned
--   when the query execution failed to process, if applicable.
newUnprocessedQueryExecutionId :: UnprocessedQueryExecutionId

-- | A workgroup, which contains a name, description, creation time, state,
--   and other configuration, listed under WorkGroup$Configuration. Each
--   workgroup enables you to isolate queries for you or your group of
--   users from other queries in the same account, to configure the query
--   results location and the encryption configuration (known as workgroup
--   settings), to enable sending query metrics to Amazon CloudWatch, and
--   to establish per-query data usage control limits for all queries in a
--   workgroup. The workgroup settings override is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <i>See:</i> <a>newWorkGroup</a> smart constructor.
data WorkGroup
WorkGroup' :: Maybe POSIX -> Maybe WorkGroupConfiguration -> Maybe WorkGroupState -> Maybe Text -> Text -> WorkGroup

-- | Create a value of <a>WorkGroup</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:WorkGroup'</a>, <a>workGroup_creationTime</a> -
--   The date and time the workgroup was created.
--   
--   <a>$sel:configuration:WorkGroup'</a>, <a>workGroup_configuration</a> -
--   The configuration of the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption
--   configuration, if any, used for query results; whether the Amazon
--   CloudWatch Metrics are enabled for the workgroup; whether workgroup
--   settings override client-side settings; and the data usage limits for
--   the amount of data scanned per query or per workgroup. The workgroup
--   settings override is specified in
--   <tt>EnforceWorkGroupConfiguration</tt> (true/false) in the
--   <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <a>$sel:state:WorkGroup'</a>, <a>workGroup_state</a> - The state of
--   the workgroup: ENABLED or DISABLED.
--   
--   <a>$sel:description:WorkGroup'</a>, <a>workGroup_description</a> - The
--   workgroup description.
--   
--   <a>$sel:name:WorkGroup'</a>, <a>workGroup_name</a> - The workgroup
--   name.
newWorkGroup :: Text -> WorkGroup

-- | The configuration of the workgroup, which includes the location in
--   Amazon S3 where query results are stored, the encryption option, if
--   any, used for query results, whether the Amazon CloudWatch Metrics are
--   enabled for the workgroup and whether workgroup settings override
--   query settings, and the data usage limits for the amount of data
--   scanned per query or per workgroup. The workgroup settings override is
--   specified in <tt>EnforceWorkGroupConfiguration</tt> (true/false) in
--   the <tt>WorkGroupConfiguration</tt>. See
--   WorkGroupConfiguration$EnforceWorkGroupConfiguration.
--   
--   <i>See:</i> <a>newWorkGroupConfiguration</a> smart constructor.
data WorkGroupConfiguration
WorkGroupConfiguration' :: Maybe Natural -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe EngineVersion -> Maybe ResultConfiguration -> WorkGroupConfiguration

-- | Create a value of <a>WorkGroupConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bytesScannedCutoffPerQuery:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_bytesScannedCutoffPerQuery</a> - The upper
--   data usage limit (cutoff) for the amount of bytes a single query in a
--   workgroup is allowed to scan.
--   
--   <a>$sel:publishCloudWatchMetricsEnabled:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_publishCloudWatchMetricsEnabled</a> -
--   Indicates that the Amazon CloudWatch metrics are enabled for the
--   workgroup.
--   
--   <a>$sel:requesterPaysEnabled:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_requesterPaysEnabled</a> - If set to
--   <tt>true</tt>, allows members assigned to a workgroup to reference
--   Amazon S3 Requester Pays buckets in queries. If set to <tt>false</tt>,
--   workgroup members cannot query data from Requester Pays buckets, and
--   queries that retrieve data from Requester Pays buckets cause an error.
--   The default is <tt>false</tt>. For more information about Requester
--   Pays buckets, see <a>Requester Pays Buckets</a> in the <i>Amazon
--   Simple Storage Service Developer Guide</i>.
--   
--   <a>$sel:enforceWorkGroupConfiguration:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_enforceWorkGroupConfiguration</a> - If set
--   to "true", the settings for the workgroup override client-side
--   settings. If set to "false", client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
--   
--   <a>$sel:engineVersion:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_engineVersion</a> - The engine version that
--   all queries running on the workgroup use. Queries on the
--   <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the preview
--   engine regardless of this setting.
--   
--   <a>$sel:resultConfiguration:WorkGroupConfiguration'</a>,
--   <a>workGroupConfiguration_resultConfiguration</a> - The configuration
--   for the workgroup, which includes the location in Amazon S3 where
--   query results are stored and the encryption option, if any, used for
--   query results. To run the query, you must specify the query results
--   location using one of the ways: either in the workgroup using this
--   setting, or for individual queries (client-side), using
--   ResultConfiguration$OutputLocation. If none of them is set, Athena
--   issues an error that no output location is provided. For more
--   information, see <a>Query Results</a>.
newWorkGroupConfiguration :: WorkGroupConfiguration

-- | The configuration information that will be updated for this workgroup,
--   which includes the location in Amazon S3 where query results are
--   stored, the encryption option, if any, used for query results, whether
--   the Amazon CloudWatch Metrics are enabled for the workgroup, whether
--   the workgroup settings override the client-side settings, and the data
--   usage limit for the amount of bytes scanned per query, if it is
--   specified.
--   
--   <i>See:</i> <a>newWorkGroupConfigurationUpdates</a> smart constructor.
data WorkGroupConfigurationUpdates
WorkGroupConfigurationUpdates' :: Maybe Natural -> Maybe Bool -> Maybe ResultConfigurationUpdates -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe EngineVersion -> WorkGroupConfigurationUpdates

-- | Create a value of <a>WorkGroupConfigurationUpdates</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bytesScannedCutoffPerQuery:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_bytesScannedCutoffPerQuery</a> - The
--   upper limit (cutoff) for the amount of bytes a single query in a
--   workgroup is allowed to scan.
--   
--   
--   <a>$sel:publishCloudWatchMetricsEnabled:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_publishCloudWatchMetricsEnabled</a> -
--   Indicates whether this workgroup enables publishing metrics to Amazon
--   CloudWatch.
--   
--   <a>$sel:resultConfigurationUpdates:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_resultConfigurationUpdates</a> - The
--   result configuration information about the queries in this workgroup
--   that will be updated. Includes the updated results location and an
--   updated option for encrypting query results.
--   
--   <a>$sel:requesterPaysEnabled:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_requesterPaysEnabled</a> - If set to
--   <tt>true</tt>, allows members assigned to a workgroup to specify
--   Amazon S3 Requester Pays buckets in queries. If set to <tt>false</tt>,
--   workgroup members cannot query data from Requester Pays buckets, and
--   queries that retrieve data from Requester Pays buckets cause an error.
--   The default is <tt>false</tt>. For more information about Requester
--   Pays buckets, see <a>Requester Pays Buckets</a> in the <i>Amazon
--   Simple Storage Service Developer Guide</i>.
--   
--   
--   <a>$sel:enforceWorkGroupConfiguration:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_enforceWorkGroupConfiguration</a> -
--   If set to "true", the settings for the workgroup override client-side
--   settings. If set to "false" client-side settings are used. For more
--   information, see <a>Workgroup Settings Override Client-Side
--   Settings</a>.
--   
--   
--   <a>$sel:removeBytesScannedCutoffPerQuery:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_removeBytesScannedCutoffPerQuery</a>
--   - Indicates that the data usage control limit per query is removed.
--   WorkGroupConfiguration$BytesScannedCutoffPerQuery
--   
--   <a>$sel:engineVersion:WorkGroupConfigurationUpdates'</a>,
--   <a>workGroupConfigurationUpdates_engineVersion</a> - The engine
--   version requested when a workgroup is updated. After the update, all
--   queries on the workgroup run on the requested engine version. If no
--   value was previously set, the default is Auto. Queries on the
--   <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the preview
--   engine regardless of this setting.
newWorkGroupConfigurationUpdates :: WorkGroupConfigurationUpdates

-- | The summary information for the workgroup, which includes its name,
--   state, description, and the date and time it was created.
--   
--   <i>See:</i> <a>newWorkGroupSummary</a> smart constructor.
data WorkGroupSummary
WorkGroupSummary' :: Maybe POSIX -> Maybe Text -> Maybe WorkGroupState -> Maybe EngineVersion -> Maybe Text -> WorkGroupSummary

-- | Create a value of <a>WorkGroupSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:WorkGroupSummary'</a>,
--   <a>workGroupSummary_creationTime</a> - The workgroup creation date and
--   time.
--   
--   <a>$sel:name:WorkGroupSummary'</a>, <a>workGroupSummary_name</a> - The
--   name of the workgroup.
--   
--   <a>$sel:state:WorkGroupSummary'</a>, <a>workGroupSummary_state</a> -
--   The state of the workgroup.
--   
--   <a>$sel:engineVersion:WorkGroupSummary'</a>,
--   <a>workGroupSummary_engineVersion</a> - The engine version setting for
--   all queries on the workgroup. Queries on the
--   <tt>AmazonAthenaPreviewFunctionality</tt> workgroup run on the preview
--   engine regardless of this setting.
--   
--   <a>$sel:description:WorkGroupSummary'</a>,
--   <a>workGroupSummary_description</a> - The workgroup description.
newWorkGroupSummary :: WorkGroupSummary
