{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.SecurityHub.Types.Vulnerability
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Amazonka.SecurityHub.Types.Vulnerability where

import qualified Amazonka.Core as Core
import qualified Amazonka.Lens as Lens
import qualified Amazonka.Prelude as Prelude
import Amazonka.SecurityHub.Types.Cvss
import Amazonka.SecurityHub.Types.SoftwarePackage
import Amazonka.SecurityHub.Types.VulnerabilityVendor

-- | A vulnerability associated with a finding.
--
-- /See:/ 'newVulnerability' smart constructor.
data Vulnerability = Vulnerability'
  { -- | Information about the vendor that generates the vulnerability report.
    vendor :: Prelude.Maybe VulnerabilityVendor,
    -- | List of vulnerabilities that are related to this vulnerability.
    relatedVulnerabilities :: Prelude.Maybe [Prelude.Text],
    -- | List of software packages that have the vulnerability.
    vulnerablePackages :: Prelude.Maybe [SoftwarePackage],
    -- | A list of URLs that provide additional information about the
    -- vulnerability.
    referenceUrls :: Prelude.Maybe [Prelude.Text],
    -- | CVSS scores from the advisory related to the vulnerability.
    cvss :: Prelude.Maybe [Cvss],
    -- | The identifier of the vulnerability.
    id :: Prelude.Text
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'Vulnerability' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'vendor', 'vulnerability_vendor' - Information about the vendor that generates the vulnerability report.
--
-- 'relatedVulnerabilities', 'vulnerability_relatedVulnerabilities' - List of vulnerabilities that are related to this vulnerability.
--
-- 'vulnerablePackages', 'vulnerability_vulnerablePackages' - List of software packages that have the vulnerability.
--
-- 'referenceUrls', 'vulnerability_referenceUrls' - A list of URLs that provide additional information about the
-- vulnerability.
--
-- 'cvss', 'vulnerability_cvss' - CVSS scores from the advisory related to the vulnerability.
--
-- 'id', 'vulnerability_id' - The identifier of the vulnerability.
newVulnerability ::
  -- | 'id'
  Prelude.Text ->
  Vulnerability
newVulnerability pId_ =
  Vulnerability'
    { vendor = Prelude.Nothing,
      relatedVulnerabilities = Prelude.Nothing,
      vulnerablePackages = Prelude.Nothing,
      referenceUrls = Prelude.Nothing,
      cvss = Prelude.Nothing,
      id = pId_
    }

-- | Information about the vendor that generates the vulnerability report.
vulnerability_vendor :: Lens.Lens' Vulnerability (Prelude.Maybe VulnerabilityVendor)
vulnerability_vendor = Lens.lens (\Vulnerability' {vendor} -> vendor) (\s@Vulnerability' {} a -> s {vendor = a} :: Vulnerability)

-- | List of vulnerabilities that are related to this vulnerability.
vulnerability_relatedVulnerabilities :: Lens.Lens' Vulnerability (Prelude.Maybe [Prelude.Text])
vulnerability_relatedVulnerabilities = Lens.lens (\Vulnerability' {relatedVulnerabilities} -> relatedVulnerabilities) (\s@Vulnerability' {} a -> s {relatedVulnerabilities = a} :: Vulnerability) Prelude.. Lens.mapping Lens.coerced

-- | List of software packages that have the vulnerability.
vulnerability_vulnerablePackages :: Lens.Lens' Vulnerability (Prelude.Maybe [SoftwarePackage])
vulnerability_vulnerablePackages = Lens.lens (\Vulnerability' {vulnerablePackages} -> vulnerablePackages) (\s@Vulnerability' {} a -> s {vulnerablePackages = a} :: Vulnerability) Prelude.. Lens.mapping Lens.coerced

-- | A list of URLs that provide additional information about the
-- vulnerability.
vulnerability_referenceUrls :: Lens.Lens' Vulnerability (Prelude.Maybe [Prelude.Text])
vulnerability_referenceUrls = Lens.lens (\Vulnerability' {referenceUrls} -> referenceUrls) (\s@Vulnerability' {} a -> s {referenceUrls = a} :: Vulnerability) Prelude.. Lens.mapping Lens.coerced

-- | CVSS scores from the advisory related to the vulnerability.
vulnerability_cvss :: Lens.Lens' Vulnerability (Prelude.Maybe [Cvss])
vulnerability_cvss = Lens.lens (\Vulnerability' {cvss} -> cvss) (\s@Vulnerability' {} a -> s {cvss = a} :: Vulnerability) Prelude.. Lens.mapping Lens.coerced

-- | The identifier of the vulnerability.
vulnerability_id :: Lens.Lens' Vulnerability Prelude.Text
vulnerability_id = Lens.lens (\Vulnerability' {id} -> id) (\s@Vulnerability' {} a -> s {id = a} :: Vulnerability)

instance Core.FromJSON Vulnerability where
  parseJSON =
    Core.withObject
      "Vulnerability"
      ( \x ->
          Vulnerability'
            Prelude.<$> (x Core..:? "Vendor")
            Prelude.<*> ( x Core..:? "RelatedVulnerabilities"
                            Core..!= Prelude.mempty
                        )
            Prelude.<*> ( x Core..:? "VulnerablePackages"
                            Core..!= Prelude.mempty
                        )
            Prelude.<*> (x Core..:? "ReferenceUrls" Core..!= Prelude.mempty)
            Prelude.<*> (x Core..:? "Cvss" Core..!= Prelude.mempty)
            Prelude.<*> (x Core..: "Id")
      )

instance Prelude.Hashable Vulnerability where
  hashWithSalt salt' Vulnerability' {..} =
    salt' `Prelude.hashWithSalt` id
      `Prelude.hashWithSalt` cvss
      `Prelude.hashWithSalt` referenceUrls
      `Prelude.hashWithSalt` vulnerablePackages
      `Prelude.hashWithSalt` relatedVulnerabilities
      `Prelude.hashWithSalt` vendor

instance Prelude.NFData Vulnerability where
  rnf Vulnerability' {..} =
    Prelude.rnf vendor `Prelude.seq` Prelude.rnf id
      `Prelude.seq` Prelude.rnf cvss
      `Prelude.seq` Prelude.rnf referenceUrls
      `Prelude.seq` Prelude.rnf vulnerablePackages
      `Prelude.seq` Prelude.rnf relatedVulnerabilities

instance Core.ToJSON Vulnerability where
  toJSON Vulnerability' {..} =
    Core.object
      ( Prelude.catMaybes
          [ ("Vendor" Core..=) Prelude.<$> vendor,
            ("RelatedVulnerabilities" Core..=)
              Prelude.<$> relatedVulnerabilities,
            ("VulnerablePackages" Core..=)
              Prelude.<$> vulnerablePackages,
            ("ReferenceUrls" Core..=) Prelude.<$> referenceUrls,
            ("Cvss" Core..=) Prelude.<$> cvss,
            Prelude.Just ("Id" Core..= id)
          ]
      )
