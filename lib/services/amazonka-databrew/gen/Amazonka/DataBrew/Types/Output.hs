{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Amazonka.DataBrew.Types.Output
-- Copyright   : (c) 2013-2021 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Amazonka.DataBrew.Types.Output where

import qualified Amazonka.Core as Core
import Amazonka.DataBrew.Types.CompressionFormat
import Amazonka.DataBrew.Types.OutputFormat
import Amazonka.DataBrew.Types.OutputFormatOptions
import Amazonka.DataBrew.Types.S3Location
import qualified Amazonka.Lens as Lens
import qualified Amazonka.Prelude as Prelude

-- | Represents options that specify how and where in Amazon S3 DataBrew
-- writes the output generated by recipe jobs or profile jobs.
--
-- /See:/ 'newOutput' smart constructor.
data Output = Output'
  { -- | The names of one or more partition columns for the output of the job.
    partitionColumns :: Prelude.Maybe [Prelude.Text],
    -- | Represents options that define how DataBrew formats job output files.
    formatOptions :: Prelude.Maybe OutputFormatOptions,
    -- | The data format of the output of the job.
    format :: Prelude.Maybe OutputFormat,
    -- | The compression algorithm used to compress the output text of the job.
    compressionFormat :: Prelude.Maybe CompressionFormat,
    -- | A value that, if true, means that any data in the location specified for
    -- output is overwritten with new output.
    overwrite :: Prelude.Maybe Prelude.Bool,
    -- | The location in Amazon S3 where the job writes its output.
    location :: S3Location
  }
  deriving (Prelude.Eq, Prelude.Read, Prelude.Show, Prelude.Generic)

-- |
-- Create a value of 'Output' with all optional fields omitted.
--
-- Use <https://hackage.haskell.org/package/generic-lens generic-lens> or <https://hackage.haskell.org/package/optics optics> to modify other optional fields.
--
-- The following record fields are available, with the corresponding lenses provided
-- for backwards compatibility:
--
-- 'partitionColumns', 'output_partitionColumns' - The names of one or more partition columns for the output of the job.
--
-- 'formatOptions', 'output_formatOptions' - Represents options that define how DataBrew formats job output files.
--
-- 'format', 'output_format' - The data format of the output of the job.
--
-- 'compressionFormat', 'output_compressionFormat' - The compression algorithm used to compress the output text of the job.
--
-- 'overwrite', 'output_overwrite' - A value that, if true, means that any data in the location specified for
-- output is overwritten with new output.
--
-- 'location', 'output_location' - The location in Amazon S3 where the job writes its output.
newOutput ::
  -- | 'location'
  S3Location ->
  Output
newOutput pLocation_ =
  Output'
    { partitionColumns = Prelude.Nothing,
      formatOptions = Prelude.Nothing,
      format = Prelude.Nothing,
      compressionFormat = Prelude.Nothing,
      overwrite = Prelude.Nothing,
      location = pLocation_
    }

-- | The names of one or more partition columns for the output of the job.
output_partitionColumns :: Lens.Lens' Output (Prelude.Maybe [Prelude.Text])
output_partitionColumns = Lens.lens (\Output' {partitionColumns} -> partitionColumns) (\s@Output' {} a -> s {partitionColumns = a} :: Output) Prelude.. Lens.mapping Lens.coerced

-- | Represents options that define how DataBrew formats job output files.
output_formatOptions :: Lens.Lens' Output (Prelude.Maybe OutputFormatOptions)
output_formatOptions = Lens.lens (\Output' {formatOptions} -> formatOptions) (\s@Output' {} a -> s {formatOptions = a} :: Output)

-- | The data format of the output of the job.
output_format :: Lens.Lens' Output (Prelude.Maybe OutputFormat)
output_format = Lens.lens (\Output' {format} -> format) (\s@Output' {} a -> s {format = a} :: Output)

-- | The compression algorithm used to compress the output text of the job.
output_compressionFormat :: Lens.Lens' Output (Prelude.Maybe CompressionFormat)
output_compressionFormat = Lens.lens (\Output' {compressionFormat} -> compressionFormat) (\s@Output' {} a -> s {compressionFormat = a} :: Output)

-- | A value that, if true, means that any data in the location specified for
-- output is overwritten with new output.
output_overwrite :: Lens.Lens' Output (Prelude.Maybe Prelude.Bool)
output_overwrite = Lens.lens (\Output' {overwrite} -> overwrite) (\s@Output' {} a -> s {overwrite = a} :: Output)

-- | The location in Amazon S3 where the job writes its output.
output_location :: Lens.Lens' Output S3Location
output_location = Lens.lens (\Output' {location} -> location) (\s@Output' {} a -> s {location = a} :: Output)

instance Core.FromJSON Output where
  parseJSON =
    Core.withObject
      "Output"
      ( \x ->
          Output'
            Prelude.<$> ( x Core..:? "PartitionColumns"
                            Core..!= Prelude.mempty
                        )
            Prelude.<*> (x Core..:? "FormatOptions")
            Prelude.<*> (x Core..:? "Format")
            Prelude.<*> (x Core..:? "CompressionFormat")
            Prelude.<*> (x Core..:? "Overwrite")
            Prelude.<*> (x Core..: "Location")
      )

instance Prelude.Hashable Output where
  hashWithSalt salt' Output' {..} =
    salt' `Prelude.hashWithSalt` location
      `Prelude.hashWithSalt` overwrite
      `Prelude.hashWithSalt` compressionFormat
      `Prelude.hashWithSalt` format
      `Prelude.hashWithSalt` formatOptions
      `Prelude.hashWithSalt` partitionColumns

instance Prelude.NFData Output where
  rnf Output' {..} =
    Prelude.rnf partitionColumns
      `Prelude.seq` Prelude.rnf location
      `Prelude.seq` Prelude.rnf overwrite
      `Prelude.seq` Prelude.rnf compressionFormat
      `Prelude.seq` Prelude.rnf format
      `Prelude.seq` Prelude.rnf formatOptions

instance Core.ToJSON Output where
  toJSON Output' {..} =
    Core.object
      ( Prelude.catMaybes
          [ ("PartitionColumns" Core..=)
              Prelude.<$> partitionColumns,
            ("FormatOptions" Core..=) Prelude.<$> formatOptions,
            ("Format" Core..=) Prelude.<$> format,
            ("CompressionFormat" Core..=)
              Prelude.<$> compressionFormat,
            ("Overwrite" Core..=) Prelude.<$> overwrite,
            Prelude.Just ("Location" Core..= location)
          ]
      )
