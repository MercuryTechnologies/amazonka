-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package amazonka-kmsZSamazonka-kms
@version 1.6.1


module Network.AWS.KMS.Types.AlgorithmSpec
newtype AlgorithmSpec
AlgorithmSpec' :: Text -> AlgorithmSpec
[fromAlgorithmSpec] :: AlgorithmSpec -> Text
pattern AlgorithmSpec_RSAES_OAEP_SHA_1 :: AlgorithmSpec
pattern AlgorithmSpec_RSAES_OAEP_SHA_256 :: AlgorithmSpec
pattern AlgorithmSpec_RSAES_PKCS1_V1_5 :: AlgorithmSpec
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance GHC.Generics.Generic Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance GHC.Classes.Ord Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance GHC.Classes.Eq Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance GHC.Read.Read Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec
instance GHC.Show.Show Network.AWS.KMS.Types.AlgorithmSpec.AlgorithmSpec


module Network.AWS.KMS.Types.AliasListEntry

-- | Contains information about an alias.
--   
--   <i>See:</i> <a>newAliasListEntry</a> smart constructor.
data AliasListEntry
AliasListEntry' :: Maybe POSIX -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> AliasListEntry

-- | Date and time that the alias was most recently associated with a KMS
--   key in the account and Region. Formatted as Unix time.
[$sel:lastUpdatedDate:AliasListEntry'] :: AliasListEntry -> Maybe POSIX

-- | Date and time that the alias was most recently created in the account
--   and Region. Formatted as Unix time.
[$sel:creationDate:AliasListEntry'] :: AliasListEntry -> Maybe POSIX

-- | String that contains the alias. This value begins with
--   <tt>alias/</tt>.
[$sel:aliasName:AliasListEntry'] :: AliasListEntry -> Maybe Text

-- | String that contains the key identifier of the KMS key associated with
--   the alias.
[$sel:targetKeyId:AliasListEntry'] :: AliasListEntry -> Maybe Text

-- | String that contains the key ARN.
[$sel:aliasArn:AliasListEntry'] :: AliasListEntry -> Maybe Text

-- | Create a value of <a>AliasListEntry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastUpdatedDate:AliasListEntry'</a>,
--   <a>aliasListEntry_lastUpdatedDate</a> - Date and time that the alias
--   was most recently associated with a KMS key in the account and Region.
--   Formatted as Unix time.
--   
--   <a>$sel:creationDate:AliasListEntry'</a>,
--   <a>aliasListEntry_creationDate</a> - Date and time that the alias was
--   most recently created in the account and Region. Formatted as Unix
--   time.
--   
--   <a>$sel:aliasName:AliasListEntry'</a>, <a>aliasListEntry_aliasName</a>
--   - String that contains the alias. This value begins with
--   <tt>alias/</tt>.
--   
--   <a>$sel:targetKeyId:AliasListEntry'</a>,
--   <a>aliasListEntry_targetKeyId</a> - String that contains the key
--   identifier of the KMS key associated with the alias.
--   
--   <a>$sel:aliasArn:AliasListEntry'</a>, <a>aliasListEntry_aliasArn</a> -
--   String that contains the key ARN.
newAliasListEntry :: AliasListEntry

-- | Date and time that the alias was most recently associated with a KMS
--   key in the account and Region. Formatted as Unix time.
aliasListEntry_lastUpdatedDate :: Lens' AliasListEntry (Maybe UTCTime)

-- | Date and time that the alias was most recently created in the account
--   and Region. Formatted as Unix time.
aliasListEntry_creationDate :: Lens' AliasListEntry (Maybe UTCTime)

-- | String that contains the alias. This value begins with
--   <tt>alias/</tt>.
aliasListEntry_aliasName :: Lens' AliasListEntry (Maybe Text)

-- | String that contains the key identifier of the KMS key associated with
--   the alias.
aliasListEntry_targetKeyId :: Lens' AliasListEntry (Maybe Text)

-- | String that contains the key ARN.
aliasListEntry_aliasArn :: Lens' AliasListEntry (Maybe Text)
instance GHC.Generics.Generic Network.AWS.KMS.Types.AliasListEntry.AliasListEntry
instance GHC.Show.Show Network.AWS.KMS.Types.AliasListEntry.AliasListEntry
instance GHC.Read.Read Network.AWS.KMS.Types.AliasListEntry.AliasListEntry
instance GHC.Classes.Eq Network.AWS.KMS.Types.AliasListEntry.AliasListEntry
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.AliasListEntry.AliasListEntry
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.AliasListEntry.AliasListEntry
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.AliasListEntry.AliasListEntry


module Network.AWS.KMS.Types.ConnectionErrorCodeType
newtype ConnectionErrorCodeType
ConnectionErrorCodeType' :: Text -> ConnectionErrorCodeType
[fromConnectionErrorCodeType] :: ConnectionErrorCodeType -> Text
pattern ConnectionErrorCodeType_CLUSTER_NOT_FOUND :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_INSUFFICIENT_CLOUDHSM_HSMS :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_INTERNAL_ERROR :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_INVALID_CREDENTIALS :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_NETWORK_ERRORS :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_SUBNET_NOT_FOUND :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_USER_LOCKED_OUT :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_USER_LOGGED_IN :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_USER_NOT_FOUND :: ConnectionErrorCodeType
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance GHC.Generics.Generic Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance GHC.Classes.Ord Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance GHC.Classes.Eq Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance GHC.Read.Read Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType
instance GHC.Show.Show Network.AWS.KMS.Types.ConnectionErrorCodeType.ConnectionErrorCodeType


module Network.AWS.KMS.Types.ConnectionStateType
newtype ConnectionStateType
ConnectionStateType' :: Text -> ConnectionStateType
[fromConnectionStateType] :: ConnectionStateType -> Text
pattern ConnectionStateType_CONNECTED :: ConnectionStateType
pattern ConnectionStateType_CONNECTING :: ConnectionStateType
pattern ConnectionStateType_DISCONNECTED :: ConnectionStateType
pattern ConnectionStateType_DISCONNECTING :: ConnectionStateType
pattern ConnectionStateType_FAILED :: ConnectionStateType
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance GHC.Generics.Generic Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance GHC.Classes.Ord Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance GHC.Classes.Eq Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance GHC.Read.Read Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType
instance GHC.Show.Show Network.AWS.KMS.Types.ConnectionStateType.ConnectionStateType


module Network.AWS.KMS.Types.CustomKeyStoresListEntry

-- | Contains information about each custom key store in the custom key
--   store list.
--   
--   <i>See:</i> <a>newCustomKeyStoresListEntry</a> smart constructor.
data CustomKeyStoresListEntry
CustomKeyStoresListEntry' :: Maybe Text -> Maybe ConnectionStateType -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe ConnectionErrorCodeType -> CustomKeyStoresListEntry

-- | The user-specified friendly name for the custom key store.
[$sel:customKeyStoreName:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe Text

-- | Indicates whether the custom key store is connected to its CloudHSM
--   cluster.
--   
--   You can create and use KMS keys in your custom key stores only when
--   its connection state is <tt>CONNECTED</tt>.
--   
--   The value is <tt>DISCONNECTED</tt> if the key store has never been
--   connected or you use the DisconnectCustomKeyStore operation to
--   disconnect it. If the value is <tt>CONNECTED</tt> but you are having
--   trouble using the custom key store, make sure that its associated
--   CloudHSM cluster is active and contains at least one active HSM.
--   
--   A value of <tt>FAILED</tt> indicates that an attempt to connect was
--   unsuccessful. The <tt>ConnectionErrorCode</tt> field in the response
--   indicates the cause of the failure. For help resolving a connection
--   failure, see <a>Troubleshooting a Custom Key Store</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:connectionState:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe ConnectionStateType

-- | A unique identifier for the custom key store.
[$sel:customKeyStoreId:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe Text

-- | The trust anchor certificate of the associated CloudHSM cluster. When
--   you <a>initialize the cluster</a>, you create this certificate and
--   save it in the <tt>customerCA.crt</tt> file.
[$sel:trustAnchorCertificate:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe Text

-- | A unique identifier for the CloudHSM cluster that is associated with
--   the custom key store.
[$sel:cloudHsmClusterId:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe Text

-- | The date and time when the custom key store was created.
[$sel:creationDate:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe POSIX

-- | Describes the connection error. This field appears in the response
--   only when the <tt>ConnectionState</tt> is <tt>FAILED</tt>. For help
--   resolving these errors, see <a>How to Fix a Connection Failure</a> in
--   <i>Key Management Service Developer Guide</i>.
--   
--   Valid values are:
--   
--   <ul>
--   <li><tt>CLUSTER_NOT_FOUND</tt> - KMS cannot find the CloudHSM cluster
--   with the specified cluster ID.</li>
--   <li><tt>INSUFFICIENT_CLOUDHSM_HSMS</tt> - The associated CloudHSM
--   cluster does not contain any active HSMs. To connect a custom key
--   store to its CloudHSM cluster, the cluster must contain at least one
--   active HSM.</li>
--   <li><tt>INTERNAL_ERROR</tt> - KMS could not complete the request due
--   to an internal error. Retry the request. For
--   <tt>ConnectCustomKeyStore</tt> requests, disconnect the custom key
--   store before trying to connect again.</li>
--   <li><tt>INVALID_CREDENTIALS</tt> - KMS does not have the correct
--   password for the <tt>kmsuser</tt> crypto user in the CloudHSM cluster.
--   Before you can connect your custom key store to its CloudHSM cluster,
--   you must change the <tt>kmsuser</tt> account password and update the
--   key store password value for the custom key store.</li>
--   <li><tt>NETWORK_ERRORS</tt> - Network errors are preventing KMS from
--   connecting to the custom key store.</li>
--   <li><tt>SUBNET_NOT_FOUND</tt> - A subnet in the CloudHSM cluster
--   configuration was deleted. If KMS cannot find all of the subnets in
--   the cluster configuration, attempts to connect the custom key store to
--   the CloudHSM cluster fail. To fix this error, create a cluster from a
--   recent backup and associate it with your custom key store. (This
--   process creates a new cluster configuration with a VPC and private
--   subnets.) For details, see <a>How to Fix a Connection Failure</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_LOCKED_OUT</tt> - The <tt>kmsuser</tt> CU account is
--   locked out of the associated CloudHSM cluster due to too many failed
--   password attempts. Before you can connect your custom key store to its
--   CloudHSM cluster, you must change the <tt>kmsuser</tt> account
--   password and update the key store password value for the custom key
--   store.</li>
--   <li><tt>USER_LOGGED_IN</tt> - The <tt>kmsuser</tt> CU account is
--   logged into the the associated CloudHSM cluster. This prevents KMS
--   from rotating the <tt>kmsuser</tt> account password and logging into
--   the cluster. Before you can connect your custom key store to its
--   CloudHSM cluster, you must log the <tt>kmsuser</tt> CU out of the
--   cluster. If you changed the <tt>kmsuser</tt> password to log into the
--   cluster, you must also and update the key store password value for the
--   custom key store. For help, see <a>How to Log Out and Reconnect</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_NOT_FOUND</tt> - KMS cannot find a <tt>kmsuser</tt> CU
--   account in the associated CloudHSM cluster. Before you can connect
--   your custom key store to its CloudHSM cluster, you must create a
--   <tt>kmsuser</tt> CU account in the cluster, and then update the key
--   store password value for the custom key store.</li>
--   </ul>
[$sel:connectionErrorCode:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe ConnectionErrorCodeType

-- | Create a value of <a>CustomKeyStoresListEntry</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreName:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_customKeyStoreName</a> - The
--   user-specified friendly name for the custom key store.
--   
--   <a>$sel:connectionState:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_connectionState</a> - Indicates whether
--   the custom key store is connected to its CloudHSM cluster.
--   
--   You can create and use KMS keys in your custom key stores only when
--   its connection state is <tt>CONNECTED</tt>.
--   
--   The value is <tt>DISCONNECTED</tt> if the key store has never been
--   connected or you use the DisconnectCustomKeyStore operation to
--   disconnect it. If the value is <tt>CONNECTED</tt> but you are having
--   trouble using the custom key store, make sure that its associated
--   CloudHSM cluster is active and contains at least one active HSM.
--   
--   A value of <tt>FAILED</tt> indicates that an attempt to connect was
--   unsuccessful. The <tt>ConnectionErrorCode</tt> field in the response
--   indicates the cause of the failure. For help resolving a connection
--   failure, see <a>Troubleshooting a Custom Key Store</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:customKeyStoreId:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_customKeyStoreId</a> - A unique identifier
--   for the custom key store.
--   
--   <a>$sel:trustAnchorCertificate:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_trustAnchorCertificate</a> - The trust
--   anchor certificate of the associated CloudHSM cluster. When you
--   <a>initialize the cluster</a>, you create this certificate and save it
--   in the <tt>customerCA.crt</tt> file.
--   
--   <a>$sel:cloudHsmClusterId:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_cloudHsmClusterId</a> - A unique
--   identifier for the CloudHSM cluster that is associated with the custom
--   key store.
--   
--   <a>$sel:creationDate:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_creationDate</a> - The date and time when
--   the custom key store was created.
--   
--   <a>$sel:connectionErrorCode:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_connectionErrorCode</a> - Describes the
--   connection error. This field appears in the response only when the
--   <tt>ConnectionState</tt> is <tt>FAILED</tt>. For help resolving these
--   errors, see <a>How to Fix a Connection Failure</a> in <i>Key
--   Management Service Developer Guide</i>.
--   
--   Valid values are:
--   
--   <ul>
--   <li><tt>CLUSTER_NOT_FOUND</tt> - KMS cannot find the CloudHSM cluster
--   with the specified cluster ID.</li>
--   <li><tt>INSUFFICIENT_CLOUDHSM_HSMS</tt> - The associated CloudHSM
--   cluster does not contain any active HSMs. To connect a custom key
--   store to its CloudHSM cluster, the cluster must contain at least one
--   active HSM.</li>
--   <li><tt>INTERNAL_ERROR</tt> - KMS could not complete the request due
--   to an internal error. Retry the request. For
--   <tt>ConnectCustomKeyStore</tt> requests, disconnect the custom key
--   store before trying to connect again.</li>
--   <li><tt>INVALID_CREDENTIALS</tt> - KMS does not have the correct
--   password for the <tt>kmsuser</tt> crypto user in the CloudHSM cluster.
--   Before you can connect your custom key store to its CloudHSM cluster,
--   you must change the <tt>kmsuser</tt> account password and update the
--   key store password value for the custom key store.</li>
--   <li><tt>NETWORK_ERRORS</tt> - Network errors are preventing KMS from
--   connecting to the custom key store.</li>
--   <li><tt>SUBNET_NOT_FOUND</tt> - A subnet in the CloudHSM cluster
--   configuration was deleted. If KMS cannot find all of the subnets in
--   the cluster configuration, attempts to connect the custom key store to
--   the CloudHSM cluster fail. To fix this error, create a cluster from a
--   recent backup and associate it with your custom key store. (This
--   process creates a new cluster configuration with a VPC and private
--   subnets.) For details, see <a>How to Fix a Connection Failure</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_LOCKED_OUT</tt> - The <tt>kmsuser</tt> CU account is
--   locked out of the associated CloudHSM cluster due to too many failed
--   password attempts. Before you can connect your custom key store to its
--   CloudHSM cluster, you must change the <tt>kmsuser</tt> account
--   password and update the key store password value for the custom key
--   store.</li>
--   <li><tt>USER_LOGGED_IN</tt> - The <tt>kmsuser</tt> CU account is
--   logged into the the associated CloudHSM cluster. This prevents KMS
--   from rotating the <tt>kmsuser</tt> account password and logging into
--   the cluster. Before you can connect your custom key store to its
--   CloudHSM cluster, you must log the <tt>kmsuser</tt> CU out of the
--   cluster. If you changed the <tt>kmsuser</tt> password to log into the
--   cluster, you must also and update the key store password value for the
--   custom key store. For help, see <a>How to Log Out and Reconnect</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_NOT_FOUND</tt> - KMS cannot find a <tt>kmsuser</tt> CU
--   account in the associated CloudHSM cluster. Before you can connect
--   your custom key store to its CloudHSM cluster, you must create a
--   <tt>kmsuser</tt> CU account in the cluster, and then update the key
--   store password value for the custom key store.</li>
--   </ul>
newCustomKeyStoresListEntry :: CustomKeyStoresListEntry

-- | The user-specified friendly name for the custom key store.
customKeyStoresListEntry_customKeyStoreName :: Lens' CustomKeyStoresListEntry (Maybe Text)

-- | Indicates whether the custom key store is connected to its CloudHSM
--   cluster.
--   
--   You can create and use KMS keys in your custom key stores only when
--   its connection state is <tt>CONNECTED</tt>.
--   
--   The value is <tt>DISCONNECTED</tt> if the key store has never been
--   connected or you use the DisconnectCustomKeyStore operation to
--   disconnect it. If the value is <tt>CONNECTED</tt> but you are having
--   trouble using the custom key store, make sure that its associated
--   CloudHSM cluster is active and contains at least one active HSM.
--   
--   A value of <tt>FAILED</tt> indicates that an attempt to connect was
--   unsuccessful. The <tt>ConnectionErrorCode</tt> field in the response
--   indicates the cause of the failure. For help resolving a connection
--   failure, see <a>Troubleshooting a Custom Key Store</a> in the <i>Key
--   Management Service Developer Guide</i>.
customKeyStoresListEntry_connectionState :: Lens' CustomKeyStoresListEntry (Maybe ConnectionStateType)

-- | A unique identifier for the custom key store.
customKeyStoresListEntry_customKeyStoreId :: Lens' CustomKeyStoresListEntry (Maybe Text)

-- | The trust anchor certificate of the associated CloudHSM cluster. When
--   you <a>initialize the cluster</a>, you create this certificate and
--   save it in the <tt>customerCA.crt</tt> file.
customKeyStoresListEntry_trustAnchorCertificate :: Lens' CustomKeyStoresListEntry (Maybe Text)

-- | A unique identifier for the CloudHSM cluster that is associated with
--   the custom key store.
customKeyStoresListEntry_cloudHsmClusterId :: Lens' CustomKeyStoresListEntry (Maybe Text)

-- | The date and time when the custom key store was created.
customKeyStoresListEntry_creationDate :: Lens' CustomKeyStoresListEntry (Maybe UTCTime)

-- | Describes the connection error. This field appears in the response
--   only when the <tt>ConnectionState</tt> is <tt>FAILED</tt>. For help
--   resolving these errors, see <a>How to Fix a Connection Failure</a> in
--   <i>Key Management Service Developer Guide</i>.
--   
--   Valid values are:
--   
--   <ul>
--   <li><tt>CLUSTER_NOT_FOUND</tt> - KMS cannot find the CloudHSM cluster
--   with the specified cluster ID.</li>
--   <li><tt>INSUFFICIENT_CLOUDHSM_HSMS</tt> - The associated CloudHSM
--   cluster does not contain any active HSMs. To connect a custom key
--   store to its CloudHSM cluster, the cluster must contain at least one
--   active HSM.</li>
--   <li><tt>INTERNAL_ERROR</tt> - KMS could not complete the request due
--   to an internal error. Retry the request. For
--   <tt>ConnectCustomKeyStore</tt> requests, disconnect the custom key
--   store before trying to connect again.</li>
--   <li><tt>INVALID_CREDENTIALS</tt> - KMS does not have the correct
--   password for the <tt>kmsuser</tt> crypto user in the CloudHSM cluster.
--   Before you can connect your custom key store to its CloudHSM cluster,
--   you must change the <tt>kmsuser</tt> account password and update the
--   key store password value for the custom key store.</li>
--   <li><tt>NETWORK_ERRORS</tt> - Network errors are preventing KMS from
--   connecting to the custom key store.</li>
--   <li><tt>SUBNET_NOT_FOUND</tt> - A subnet in the CloudHSM cluster
--   configuration was deleted. If KMS cannot find all of the subnets in
--   the cluster configuration, attempts to connect the custom key store to
--   the CloudHSM cluster fail. To fix this error, create a cluster from a
--   recent backup and associate it with your custom key store. (This
--   process creates a new cluster configuration with a VPC and private
--   subnets.) For details, see <a>How to Fix a Connection Failure</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_LOCKED_OUT</tt> - The <tt>kmsuser</tt> CU account is
--   locked out of the associated CloudHSM cluster due to too many failed
--   password attempts. Before you can connect your custom key store to its
--   CloudHSM cluster, you must change the <tt>kmsuser</tt> account
--   password and update the key store password value for the custom key
--   store.</li>
--   <li><tt>USER_LOGGED_IN</tt> - The <tt>kmsuser</tt> CU account is
--   logged into the the associated CloudHSM cluster. This prevents KMS
--   from rotating the <tt>kmsuser</tt> account password and logging into
--   the cluster. Before you can connect your custom key store to its
--   CloudHSM cluster, you must log the <tt>kmsuser</tt> CU out of the
--   cluster. If you changed the <tt>kmsuser</tt> password to log into the
--   cluster, you must also and update the key store password value for the
--   custom key store. For help, see <a>How to Log Out and Reconnect</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_NOT_FOUND</tt> - KMS cannot find a <tt>kmsuser</tt> CU
--   account in the associated CloudHSM cluster. Before you can connect
--   your custom key store to its CloudHSM cluster, you must create a
--   <tt>kmsuser</tt> CU account in the cluster, and then update the key
--   store password value for the custom key store.</li>
--   </ul>
customKeyStoresListEntry_connectionErrorCode :: Lens' CustomKeyStoresListEntry (Maybe ConnectionErrorCodeType)
instance GHC.Generics.Generic Network.AWS.KMS.Types.CustomKeyStoresListEntry.CustomKeyStoresListEntry
instance GHC.Show.Show Network.AWS.KMS.Types.CustomKeyStoresListEntry.CustomKeyStoresListEntry
instance GHC.Read.Read Network.AWS.KMS.Types.CustomKeyStoresListEntry.CustomKeyStoresListEntry
instance GHC.Classes.Eq Network.AWS.KMS.Types.CustomKeyStoresListEntry.CustomKeyStoresListEntry
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.CustomKeyStoresListEntry.CustomKeyStoresListEntry
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.CustomKeyStoresListEntry.CustomKeyStoresListEntry
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.CustomKeyStoresListEntry.CustomKeyStoresListEntry


module Network.AWS.KMS.Types.CustomerMasterKeySpec
newtype CustomerMasterKeySpec
CustomerMasterKeySpec' :: Text -> CustomerMasterKeySpec
[fromCustomerMasterKeySpec] :: CustomerMasterKeySpec -> Text
pattern CustomerMasterKeySpec_ECC_NIST_P256 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_ECC_NIST_P384 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_ECC_NIST_P521 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_ECC_SECG_P256K1 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_RSA_2048 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_RSA_3072 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_RSA_4096 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_SYMMETRIC_DEFAULT :: CustomerMasterKeySpec
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance GHC.Generics.Generic Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance GHC.Classes.Ord Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance GHC.Classes.Eq Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance GHC.Read.Read Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec
instance GHC.Show.Show Network.AWS.KMS.Types.CustomerMasterKeySpec.CustomerMasterKeySpec


module Network.AWS.KMS.Types.DataKeyPairSpec
newtype DataKeyPairSpec
DataKeyPairSpec' :: Text -> DataKeyPairSpec
[fromDataKeyPairSpec] :: DataKeyPairSpec -> Text
pattern DataKeyPairSpec_ECC_NIST_P256 :: DataKeyPairSpec
pattern DataKeyPairSpec_ECC_NIST_P384 :: DataKeyPairSpec
pattern DataKeyPairSpec_ECC_NIST_P521 :: DataKeyPairSpec
pattern DataKeyPairSpec_ECC_SECG_P256K1 :: DataKeyPairSpec
pattern DataKeyPairSpec_RSA_2048 :: DataKeyPairSpec
pattern DataKeyPairSpec_RSA_3072 :: DataKeyPairSpec
pattern DataKeyPairSpec_RSA_4096 :: DataKeyPairSpec
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance GHC.Generics.Generic Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance GHC.Classes.Ord Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance GHC.Classes.Eq Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance GHC.Read.Read Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec
instance GHC.Show.Show Network.AWS.KMS.Types.DataKeyPairSpec.DataKeyPairSpec


module Network.AWS.KMS.Types.DataKeySpec
newtype DataKeySpec
DataKeySpec' :: Text -> DataKeySpec
[fromDataKeySpec] :: DataKeySpec -> Text
pattern DataKeySpec_AES_128 :: DataKeySpec
pattern DataKeySpec_AES_256 :: DataKeySpec
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance GHC.Generics.Generic Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance GHC.Classes.Ord Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance GHC.Classes.Eq Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance GHC.Read.Read Network.AWS.KMS.Types.DataKeySpec.DataKeySpec
instance GHC.Show.Show Network.AWS.KMS.Types.DataKeySpec.DataKeySpec


module Network.AWS.KMS.Types.EncryptionAlgorithmSpec
newtype EncryptionAlgorithmSpec
EncryptionAlgorithmSpec' :: Text -> EncryptionAlgorithmSpec
[fromEncryptionAlgorithmSpec] :: EncryptionAlgorithmSpec -> Text
pattern EncryptionAlgorithmSpec_RSAES_OAEP_SHA_1 :: EncryptionAlgorithmSpec
pattern EncryptionAlgorithmSpec_RSAES_OAEP_SHA_256 :: EncryptionAlgorithmSpec
pattern EncryptionAlgorithmSpec_SYMMETRIC_DEFAULT :: EncryptionAlgorithmSpec
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance GHC.Generics.Generic Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance GHC.Classes.Ord Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance GHC.Classes.Eq Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance GHC.Read.Read Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec
instance GHC.Show.Show Network.AWS.KMS.Types.EncryptionAlgorithmSpec.EncryptionAlgorithmSpec


module Network.AWS.KMS.Types.ExpirationModelType
newtype ExpirationModelType
ExpirationModelType' :: Text -> ExpirationModelType
[fromExpirationModelType] :: ExpirationModelType -> Text
pattern ExpirationModelType_KEY_MATERIAL_DOES_NOT_EXPIRE :: ExpirationModelType
pattern ExpirationModelType_KEY_MATERIAL_EXPIRES :: ExpirationModelType
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance GHC.Generics.Generic Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance GHC.Classes.Ord Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance GHC.Classes.Eq Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance GHC.Read.Read Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType
instance GHC.Show.Show Network.AWS.KMS.Types.ExpirationModelType.ExpirationModelType


module Network.AWS.KMS.Types.GrantConstraints

-- | Use this structure to allow <a>cryptographic operations</a> in the
--   grant only when the operation request includes the specified
--   <a>encryption context</a>.
--   
--   KMS applies the grant constraints only to cryptographic operations
--   that support an encryption context, that is, all cryptographic
--   operations with a <a>symmetric KMS key</a>. Grant constraints are not
--   applied to operations that do not support an encryption context, such
--   as cryptographic operations with asymmetric KMS keys and management
--   operations, such as DescribeKey or RetireGrant.
--   
--   In a cryptographic operation, the encryption context in the decryption
--   operation must be an exact, case-sensitive match for the keys and
--   values in the encryption context of the encryption operation. Only the
--   order of the pairs can vary.
--   
--   However, in a grant constraint, the key in each key-value pair is not
--   case sensitive, but the value is case sensitive.
--   
--   To avoid confusion, do not use multiple encryption context pairs that
--   differ only by case. To require a fully case-sensitive encryption
--   context, use the <tt>kms:EncryptionContext:</tt> and
--   <tt>kms:EncryptionContextKeys</tt> conditions in an IAM or key policy.
--   For details, see <a>kms:EncryptionContext:</a> in the /<i>Key
--   Management Service Developer Guide</i>/ .
--   
--   <i>See:</i> <a>newGrantConstraints</a> smart constructor.
data GrantConstraints
GrantConstraints' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text Text) -> GrantConstraints

-- | A list of key-value pairs that must match the encryption context in
--   the <a>cryptographic operation</a> request. The grant allows the
--   operation only when the encryption context in the request is the same
--   as the encryption context specified in this constraint.
[$sel:encryptionContextEquals:GrantConstraints'] :: GrantConstraints -> Maybe (HashMap Text Text)

-- | A list of key-value pairs that must be included in the encryption
--   context of the <a>cryptographic operation</a> request. The grant
--   allows the cryptographic operation only when the encryption context in
--   the request includes the key-value pairs specified in this constraint,
--   although it can include additional key-value pairs.
[$sel:encryptionContextSubset:GrantConstraints'] :: GrantConstraints -> Maybe (HashMap Text Text)

-- | Create a value of <a>GrantConstraints</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionContextEquals:GrantConstraints'</a>,
--   <a>grantConstraints_encryptionContextEquals</a> - A list of key-value
--   pairs that must match the encryption context in the <a>cryptographic
--   operation</a> request. The grant allows the operation only when the
--   encryption context in the request is the same as the encryption
--   context specified in this constraint.
--   
--   <a>$sel:encryptionContextSubset:GrantConstraints'</a>,
--   <a>grantConstraints_encryptionContextSubset</a> - A list of key-value
--   pairs that must be included in the encryption context of the
--   <a>cryptographic operation</a> request. The grant allows the
--   cryptographic operation only when the encryption context in the
--   request includes the key-value pairs specified in this constraint,
--   although it can include additional key-value pairs.
newGrantConstraints :: GrantConstraints

-- | A list of key-value pairs that must match the encryption context in
--   the <a>cryptographic operation</a> request. The grant allows the
--   operation only when the encryption context in the request is the same
--   as the encryption context specified in this constraint.
grantConstraints_encryptionContextEquals :: Lens' GrantConstraints (Maybe (HashMap Text Text))

-- | A list of key-value pairs that must be included in the encryption
--   context of the <a>cryptographic operation</a> request. The grant
--   allows the cryptographic operation only when the encryption context in
--   the request includes the key-value pairs specified in this constraint,
--   although it can include additional key-value pairs.
grantConstraints_encryptionContextSubset :: Lens' GrantConstraints (Maybe (HashMap Text Text))
instance GHC.Generics.Generic Network.AWS.KMS.Types.GrantConstraints.GrantConstraints
instance GHC.Show.Show Network.AWS.KMS.Types.GrantConstraints.GrantConstraints
instance GHC.Read.Read Network.AWS.KMS.Types.GrantConstraints.GrantConstraints
instance GHC.Classes.Eq Network.AWS.KMS.Types.GrantConstraints.GrantConstraints
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.GrantConstraints.GrantConstraints
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.GrantConstraints.GrantConstraints
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.GrantConstraints.GrantConstraints
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.GrantConstraints.GrantConstraints


module Network.AWS.KMS.Types.GrantOperation
newtype GrantOperation
GrantOperation' :: Text -> GrantOperation
[fromGrantOperation] :: GrantOperation -> Text
pattern GrantOperation_CreateGrant :: GrantOperation
pattern GrantOperation_Decrypt :: GrantOperation
pattern GrantOperation_DescribeKey :: GrantOperation
pattern GrantOperation_Encrypt :: GrantOperation
pattern GrantOperation_GenerateDataKey :: GrantOperation
pattern GrantOperation_GenerateDataKeyPair :: GrantOperation
pattern GrantOperation_GenerateDataKeyPairWithoutPlaintext :: GrantOperation
pattern GrantOperation_GenerateDataKeyWithoutPlaintext :: GrantOperation
pattern GrantOperation_GetPublicKey :: GrantOperation
pattern GrantOperation_ReEncryptFrom :: GrantOperation
pattern GrantOperation_ReEncryptTo :: GrantOperation
pattern GrantOperation_RetireGrant :: GrantOperation
pattern GrantOperation_Sign :: GrantOperation
pattern GrantOperation_Verify :: GrantOperation
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance GHC.Generics.Generic Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance GHC.Classes.Ord Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance GHC.Classes.Eq Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance GHC.Read.Read Network.AWS.KMS.Types.GrantOperation.GrantOperation
instance GHC.Show.Show Network.AWS.KMS.Types.GrantOperation.GrantOperation


module Network.AWS.KMS.Types.GrantListEntry

-- | Contains information about a grant.
--   
--   <i>See:</i> <a>newGrantListEntry</a> smart constructor.
data GrantListEntry
GrantListEntry' :: Maybe GrantConstraints -> Maybe [GrantOperation] -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> GrantListEntry

-- | A list of key-value pairs that must be present in the encryption
--   context of certain subsequent operations that the grant allows.
[$sel:constraints:GrantListEntry'] :: GrantListEntry -> Maybe GrantConstraints

-- | The list of operations permitted by the grant.
[$sel:operations:GrantListEntry'] :: GrantListEntry -> Maybe [GrantOperation]

-- | The date and time when the grant was created.
[$sel:creationDate:GrantListEntry'] :: GrantListEntry -> Maybe POSIX

-- | The friendly name that identifies the grant. If a name was provided in
--   the CreateGrant request, that name is returned. Otherwise this value
--   is null.
[$sel:name:GrantListEntry'] :: GrantListEntry -> Maybe Text

-- | The identity that gets the permissions in the grant.
--   
--   The <tt>GranteePrincipal</tt> field in the <tt>ListGrants</tt>
--   response usually contains the user or role designated as the grantee
--   principal in the grant. However, when the grantee principal in the
--   grant is an Amazon Web Services service, the <tt>GranteePrincipal</tt>
--   field contains the <a>service principal</a>, which might represent
--   several different grantee principals.
[$sel:granteePrincipal:GrantListEntry'] :: GrantListEntry -> Maybe Text

-- | The unique identifier for the grant.
[$sel:grantId:GrantListEntry'] :: GrantListEntry -> Maybe Text

-- | The Amazon Web Services account under which the grant was issued.
[$sel:issuingAccount:GrantListEntry'] :: GrantListEntry -> Maybe Text

-- | The principal that can retire the grant.
[$sel:retiringPrincipal:GrantListEntry'] :: GrantListEntry -> Maybe Text

-- | The unique identifier for the KMS key to which the grant applies.
[$sel:keyId:GrantListEntry'] :: GrantListEntry -> Maybe Text

-- | Create a value of <a>GrantListEntry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:constraints:GrantListEntry'</a>,
--   <a>grantListEntry_constraints</a> - A list of key-value pairs that
--   must be present in the encryption context of certain subsequent
--   operations that the grant allows.
--   
--   <a>$sel:operations:GrantListEntry'</a>,
--   <a>grantListEntry_operations</a> - The list of operations permitted by
--   the grant.
--   
--   <a>$sel:creationDate:GrantListEntry'</a>,
--   <a>grantListEntry_creationDate</a> - The date and time when the grant
--   was created.
--   
--   <a>$sel:name:GrantListEntry'</a>, <a>grantListEntry_name</a> - The
--   friendly name that identifies the grant. If a name was provided in the
--   CreateGrant request, that name is returned. Otherwise this value is
--   null.
--   
--   <a>$sel:granteePrincipal:GrantListEntry'</a>,
--   <a>grantListEntry_granteePrincipal</a> - The identity that gets the
--   permissions in the grant.
--   
--   The <tt>GranteePrincipal</tt> field in the <tt>ListGrants</tt>
--   response usually contains the user or role designated as the grantee
--   principal in the grant. However, when the grantee principal in the
--   grant is an Amazon Web Services service, the <tt>GranteePrincipal</tt>
--   field contains the <a>service principal</a>, which might represent
--   several different grantee principals.
--   
--   <a>$sel:grantId:GrantListEntry'</a>, <a>grantListEntry_grantId</a> -
--   The unique identifier for the grant.
--   
--   <a>$sel:issuingAccount:GrantListEntry'</a>,
--   <a>grantListEntry_issuingAccount</a> - The Amazon Web Services account
--   under which the grant was issued.
--   
--   <a>$sel:retiringPrincipal:GrantListEntry'</a>,
--   <a>grantListEntry_retiringPrincipal</a> - The principal that can
--   retire the grant.
--   
--   <a>$sel:keyId:GrantListEntry'</a>, <a>grantListEntry_keyId</a> - The
--   unique identifier for the KMS key to which the grant applies.
newGrantListEntry :: GrantListEntry

-- | A list of key-value pairs that must be present in the encryption
--   context of certain subsequent operations that the grant allows.
grantListEntry_constraints :: Lens' GrantListEntry (Maybe GrantConstraints)

-- | The list of operations permitted by the grant.
grantListEntry_operations :: Lens' GrantListEntry (Maybe [GrantOperation])

-- | The date and time when the grant was created.
grantListEntry_creationDate :: Lens' GrantListEntry (Maybe UTCTime)

-- | The friendly name that identifies the grant. If a name was provided in
--   the CreateGrant request, that name is returned. Otherwise this value
--   is null.
grantListEntry_name :: Lens' GrantListEntry (Maybe Text)

-- | The identity that gets the permissions in the grant.
--   
--   The <tt>GranteePrincipal</tt> field in the <tt>ListGrants</tt>
--   response usually contains the user or role designated as the grantee
--   principal in the grant. However, when the grantee principal in the
--   grant is an Amazon Web Services service, the <tt>GranteePrincipal</tt>
--   field contains the <a>service principal</a>, which might represent
--   several different grantee principals.
grantListEntry_granteePrincipal :: Lens' GrantListEntry (Maybe Text)

-- | The unique identifier for the grant.
grantListEntry_grantId :: Lens' GrantListEntry (Maybe Text)

-- | The Amazon Web Services account under which the grant was issued.
grantListEntry_issuingAccount :: Lens' GrantListEntry (Maybe Text)

-- | The principal that can retire the grant.
grantListEntry_retiringPrincipal :: Lens' GrantListEntry (Maybe Text)

-- | The unique identifier for the KMS key to which the grant applies.
grantListEntry_keyId :: Lens' GrantListEntry (Maybe Text)
instance GHC.Generics.Generic Network.AWS.KMS.Types.GrantListEntry.GrantListEntry
instance GHC.Show.Show Network.AWS.KMS.Types.GrantListEntry.GrantListEntry
instance GHC.Read.Read Network.AWS.KMS.Types.GrantListEntry.GrantListEntry
instance GHC.Classes.Eq Network.AWS.KMS.Types.GrantListEntry.GrantListEntry
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.GrantListEntry.GrantListEntry
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.GrantListEntry.GrantListEntry
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.GrantListEntry.GrantListEntry


module Network.AWS.KMS.Types.KeyListEntry

-- | Contains information about each entry in the key list.
--   
--   <i>See:</i> <a>newKeyListEntry</a> smart constructor.
data KeyListEntry
KeyListEntry' :: Maybe Text -> Maybe Text -> KeyListEntry

-- | ARN of the key.
[$sel:keyArn:KeyListEntry'] :: KeyListEntry -> Maybe Text

-- | Unique identifier of the key.
[$sel:keyId:KeyListEntry'] :: KeyListEntry -> Maybe Text

-- | Create a value of <a>KeyListEntry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyArn:KeyListEntry'</a>, <a>keyListEntry_keyArn</a> - ARN of
--   the key.
--   
--   <a>$sel:keyId:KeyListEntry'</a>, <a>keyListEntry_keyId</a> - Unique
--   identifier of the key.
newKeyListEntry :: KeyListEntry

-- | ARN of the key.
keyListEntry_keyArn :: Lens' KeyListEntry (Maybe Text)

-- | Unique identifier of the key.
keyListEntry_keyId :: Lens' KeyListEntry (Maybe Text)
instance GHC.Generics.Generic Network.AWS.KMS.Types.KeyListEntry.KeyListEntry
instance GHC.Show.Show Network.AWS.KMS.Types.KeyListEntry.KeyListEntry
instance GHC.Read.Read Network.AWS.KMS.Types.KeyListEntry.KeyListEntry
instance GHC.Classes.Eq Network.AWS.KMS.Types.KeyListEntry.KeyListEntry
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.KeyListEntry.KeyListEntry
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.KeyListEntry.KeyListEntry
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.KeyListEntry.KeyListEntry


module Network.AWS.KMS.Types.KeyManagerType
newtype KeyManagerType
KeyManagerType' :: Text -> KeyManagerType
[fromKeyManagerType] :: KeyManagerType -> Text
pattern KeyManagerType_AWS :: KeyManagerType
pattern KeyManagerType_CUSTOMER :: KeyManagerType
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance GHC.Generics.Generic Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance GHC.Classes.Ord Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance GHC.Classes.Eq Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance GHC.Read.Read Network.AWS.KMS.Types.KeyManagerType.KeyManagerType
instance GHC.Show.Show Network.AWS.KMS.Types.KeyManagerType.KeyManagerType


module Network.AWS.KMS.Types.KeySpec
newtype KeySpec
KeySpec' :: Text -> KeySpec
[fromKeySpec] :: KeySpec -> Text
pattern KeySpec_ECC_NIST_P256 :: KeySpec
pattern KeySpec_ECC_NIST_P384 :: KeySpec
pattern KeySpec_ECC_NIST_P521 :: KeySpec
pattern KeySpec_ECC_SECG_P256K1 :: KeySpec
pattern KeySpec_RSA_2048 :: KeySpec
pattern KeySpec_RSA_3072 :: KeySpec
pattern KeySpec_RSA_4096 :: KeySpec
pattern KeySpec_SYMMETRIC_DEFAULT :: KeySpec
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.KeySpec.KeySpec
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.KeySpec.KeySpec
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.KeySpec.KeySpec
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.KeySpec.KeySpec
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.KeySpec.KeySpec
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.KeySpec.KeySpec
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.KeySpec.KeySpec
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.KeySpec.KeySpec
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.KeySpec.KeySpec
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.KeySpec.KeySpec
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.KeySpec.KeySpec
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.KeySpec.KeySpec
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.KeySpec.KeySpec
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.KeySpec.KeySpec
instance GHC.Generics.Generic Network.AWS.KMS.Types.KeySpec.KeySpec
instance GHC.Classes.Ord Network.AWS.KMS.Types.KeySpec.KeySpec
instance GHC.Classes.Eq Network.AWS.KMS.Types.KeySpec.KeySpec
instance GHC.Read.Read Network.AWS.KMS.Types.KeySpec.KeySpec
instance GHC.Show.Show Network.AWS.KMS.Types.KeySpec.KeySpec


module Network.AWS.KMS.Types.KeyState
newtype KeyState
KeyState' :: Text -> KeyState
[fromKeyState] :: KeyState -> Text
pattern KeyState_Creating :: KeyState
pattern KeyState_Disabled :: KeyState
pattern KeyState_Enabled :: KeyState
pattern KeyState_PendingDeletion :: KeyState
pattern KeyState_PendingImport :: KeyState
pattern KeyState_PendingReplicaDeletion :: KeyState
pattern KeyState_Unavailable :: KeyState
pattern KeyState_Updating :: KeyState
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.KeyState.KeyState
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.KeyState.KeyState
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.KeyState.KeyState
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.KeyState.KeyState
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.KeyState.KeyState
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.KeyState.KeyState
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.KeyState.KeyState
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.KeyState.KeyState
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.KeyState.KeyState
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.KeyState.KeyState
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.KeyState.KeyState
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.KeyState.KeyState
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.KeyState.KeyState
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.KeyState.KeyState
instance GHC.Generics.Generic Network.AWS.KMS.Types.KeyState.KeyState
instance GHC.Classes.Ord Network.AWS.KMS.Types.KeyState.KeyState
instance GHC.Classes.Eq Network.AWS.KMS.Types.KeyState.KeyState
instance GHC.Read.Read Network.AWS.KMS.Types.KeyState.KeyState
instance GHC.Show.Show Network.AWS.KMS.Types.KeyState.KeyState


module Network.AWS.KMS.Types.KeyUsageType
newtype KeyUsageType
KeyUsageType' :: Text -> KeyUsageType
[fromKeyUsageType] :: KeyUsageType -> Text
pattern KeyUsageType_ENCRYPT_DECRYPT :: KeyUsageType
pattern KeyUsageType_SIGN_VERIFY :: KeyUsageType
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance GHC.Generics.Generic Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance GHC.Classes.Ord Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance GHC.Classes.Eq Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance GHC.Read.Read Network.AWS.KMS.Types.KeyUsageType.KeyUsageType
instance GHC.Show.Show Network.AWS.KMS.Types.KeyUsageType.KeyUsageType


module Network.AWS.KMS.Types.ListGrantsResponse

-- | <i>See:</i> <a>newListGrantsResponse</a> smart constructor.
data ListGrantsResponse
ListGrantsResponse' :: Maybe Text -> Maybe [GrantListEntry] -> Maybe Bool -> ListGrantsResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
[$sel:nextMarker:ListGrantsResponse'] :: ListGrantsResponse -> Maybe Text

-- | A list of grants.
[$sel:grants:ListGrantsResponse'] :: ListGrantsResponse -> Maybe [GrantListEntry]

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
[$sel:truncated:ListGrantsResponse'] :: ListGrantsResponse -> Maybe Bool

-- | Create a value of <a>ListGrantsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_nextMarker</a> - When <tt>Truncated</tt> is
--   true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:grants:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_grants</a> - A list of grants.
--   
--   <a>$sel:truncated:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_truncated</a> - A flag that indicates whether
--   there are more items in the list. When this value is true, the list in
--   this response is truncated. To get more items, pass the value of the
--   <tt>NextMarker</tt> element in thisresponse to the <tt>Marker</tt>
--   parameter in a subsequent request.
newListGrantsResponse :: ListGrantsResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listGrantsResponse_nextMarker :: Lens' ListGrantsResponse (Maybe Text)

-- | A list of grants.
listGrantsResponse_grants :: Lens' ListGrantsResponse (Maybe [GrantListEntry])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listGrantsResponse_truncated :: Lens' ListGrantsResponse (Maybe Bool)
instance GHC.Generics.Generic Network.AWS.KMS.Types.ListGrantsResponse.ListGrantsResponse
instance GHC.Show.Show Network.AWS.KMS.Types.ListGrantsResponse.ListGrantsResponse
instance GHC.Read.Read Network.AWS.KMS.Types.ListGrantsResponse.ListGrantsResponse
instance GHC.Classes.Eq Network.AWS.KMS.Types.ListGrantsResponse.ListGrantsResponse
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.ListGrantsResponse.ListGrantsResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.ListGrantsResponse.ListGrantsResponse
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.ListGrantsResponse.ListGrantsResponse


module Network.AWS.KMS.Types.MessageType
newtype MessageType
MessageType' :: Text -> MessageType
[fromMessageType] :: MessageType -> Text
pattern MessageType_DIGEST :: MessageType
pattern MessageType_RAW :: MessageType
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.MessageType.MessageType
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.MessageType.MessageType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.MessageType.MessageType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.MessageType.MessageType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.MessageType.MessageType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.MessageType.MessageType
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.MessageType.MessageType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.MessageType.MessageType
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.MessageType.MessageType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.MessageType.MessageType
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.MessageType.MessageType
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.MessageType.MessageType
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.MessageType.MessageType
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.MessageType.MessageType
instance GHC.Generics.Generic Network.AWS.KMS.Types.MessageType.MessageType
instance GHC.Classes.Ord Network.AWS.KMS.Types.MessageType.MessageType
instance GHC.Classes.Eq Network.AWS.KMS.Types.MessageType.MessageType
instance GHC.Read.Read Network.AWS.KMS.Types.MessageType.MessageType
instance GHC.Show.Show Network.AWS.KMS.Types.MessageType.MessageType


module Network.AWS.KMS.Types.MultiRegionKey

-- | Describes the primary or replica key in a multi-Region key.
--   
--   <i>See:</i> <a>newMultiRegionKey</a> smart constructor.
data MultiRegionKey
MultiRegionKey' :: Maybe Text -> Maybe Text -> MultiRegionKey

-- | Displays the key ARN of a primary or replica key of a multi-Region
--   key.
[$sel:arn:MultiRegionKey'] :: MultiRegionKey -> Maybe Text

-- | Displays the Amazon Web Services Region of a primary or replica key in
--   a multi-Region key.
[$sel:region:MultiRegionKey'] :: MultiRegionKey -> Maybe Text

-- | Create a value of <a>MultiRegionKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:MultiRegionKey'</a>, <a>multiRegionKey_arn</a> - Displays
--   the key ARN of a primary or replica key of a multi-Region key.
--   
--   <a>$sel:region:MultiRegionKey'</a>, <a>multiRegionKey_region</a> -
--   Displays the Amazon Web Services Region of a primary or replica key in
--   a multi-Region key.
newMultiRegionKey :: MultiRegionKey

-- | Displays the key ARN of a primary or replica key of a multi-Region
--   key.
multiRegionKey_arn :: Lens' MultiRegionKey (Maybe Text)

-- | Displays the Amazon Web Services Region of a primary or replica key in
--   a multi-Region key.
multiRegionKey_region :: Lens' MultiRegionKey (Maybe Text)
instance GHC.Generics.Generic Network.AWS.KMS.Types.MultiRegionKey.MultiRegionKey
instance GHC.Show.Show Network.AWS.KMS.Types.MultiRegionKey.MultiRegionKey
instance GHC.Read.Read Network.AWS.KMS.Types.MultiRegionKey.MultiRegionKey
instance GHC.Classes.Eq Network.AWS.KMS.Types.MultiRegionKey.MultiRegionKey
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.MultiRegionKey.MultiRegionKey
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.MultiRegionKey.MultiRegionKey
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.MultiRegionKey.MultiRegionKey


module Network.AWS.KMS.Types.MultiRegionKeyType
newtype MultiRegionKeyType
MultiRegionKeyType' :: Text -> MultiRegionKeyType
[fromMultiRegionKeyType] :: MultiRegionKeyType -> Text
pattern MultiRegionKeyType_PRIMARY :: MultiRegionKeyType
pattern MultiRegionKeyType_REPLICA :: MultiRegionKeyType
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance GHC.Generics.Generic Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance GHC.Classes.Ord Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance GHC.Classes.Eq Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance GHC.Read.Read Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType
instance GHC.Show.Show Network.AWS.KMS.Types.MultiRegionKeyType.MultiRegionKeyType


module Network.AWS.KMS.Types.MultiRegionConfiguration

-- | Describes the configuration of this multi-Region key. This field
--   appears only when the KMS key is a primary or replica of a
--   multi-Region key.
--   
--   For more information about any listed KMS key, use the DescribeKey
--   operation.
--   
--   <i>See:</i> <a>newMultiRegionConfiguration</a> smart constructor.
data MultiRegionConfiguration
MultiRegionConfiguration' :: Maybe [MultiRegionKey] -> Maybe MultiRegionKeyType -> Maybe MultiRegionKey -> MultiRegionConfiguration

-- | displays the key ARNs and Regions of all replica keys. This field
--   includes the current KMS key if it is a replica key.
[$sel:replicaKeys:MultiRegionConfiguration'] :: MultiRegionConfiguration -> Maybe [MultiRegionKey]

-- | Indicates whether the KMS key is a <tt>PRIMARY</tt> or
--   <tt>REPLICA</tt> key.
[$sel:multiRegionKeyType:MultiRegionConfiguration'] :: MultiRegionConfiguration -> Maybe MultiRegionKeyType

-- | Displays the key ARN and Region of the primary key. This field
--   includes the current KMS key if it is the primary key.
[$sel:primaryKey:MultiRegionConfiguration'] :: MultiRegionConfiguration -> Maybe MultiRegionKey

-- | Create a value of <a>MultiRegionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaKeys:MultiRegionConfiguration'</a>,
--   <a>multiRegionConfiguration_replicaKeys</a> - displays the key ARNs
--   and Regions of all replica keys. This field includes the current KMS
--   key if it is a replica key.
--   
--   <a>$sel:multiRegionKeyType:MultiRegionConfiguration'</a>,
--   <a>multiRegionConfiguration_multiRegionKeyType</a> - Indicates whether
--   the KMS key is a <tt>PRIMARY</tt> or <tt>REPLICA</tt> key.
--   
--   <a>$sel:primaryKey:MultiRegionConfiguration'</a>,
--   <a>multiRegionConfiguration_primaryKey</a> - Displays the key ARN and
--   Region of the primary key. This field includes the current KMS key if
--   it is the primary key.
newMultiRegionConfiguration :: MultiRegionConfiguration

-- | displays the key ARNs and Regions of all replica keys. This field
--   includes the current KMS key if it is a replica key.
multiRegionConfiguration_replicaKeys :: Lens' MultiRegionConfiguration (Maybe [MultiRegionKey])

-- | Indicates whether the KMS key is a <tt>PRIMARY</tt> or
--   <tt>REPLICA</tt> key.
multiRegionConfiguration_multiRegionKeyType :: Lens' MultiRegionConfiguration (Maybe MultiRegionKeyType)

-- | Displays the key ARN and Region of the primary key. This field
--   includes the current KMS key if it is the primary key.
multiRegionConfiguration_primaryKey :: Lens' MultiRegionConfiguration (Maybe MultiRegionKey)
instance GHC.Generics.Generic Network.AWS.KMS.Types.MultiRegionConfiguration.MultiRegionConfiguration
instance GHC.Show.Show Network.AWS.KMS.Types.MultiRegionConfiguration.MultiRegionConfiguration
instance GHC.Read.Read Network.AWS.KMS.Types.MultiRegionConfiguration.MultiRegionConfiguration
instance GHC.Classes.Eq Network.AWS.KMS.Types.MultiRegionConfiguration.MultiRegionConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.MultiRegionConfiguration.MultiRegionConfiguration
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.MultiRegionConfiguration.MultiRegionConfiguration
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.MultiRegionConfiguration.MultiRegionConfiguration


module Network.AWS.KMS.Types.OriginType
newtype OriginType
OriginType' :: Text -> OriginType
[fromOriginType] :: OriginType -> Text
pattern OriginType_AWS_CLOUDHSM :: OriginType
pattern OriginType_AWS_KMS :: OriginType
pattern OriginType_EXTERNAL :: OriginType
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.OriginType.OriginType
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.OriginType.OriginType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.OriginType.OriginType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.OriginType.OriginType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.OriginType.OriginType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.OriginType.OriginType
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.OriginType.OriginType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.OriginType.OriginType
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.OriginType.OriginType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.OriginType.OriginType
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.OriginType.OriginType
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.OriginType.OriginType
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.OriginType.OriginType
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.OriginType.OriginType
instance GHC.Generics.Generic Network.AWS.KMS.Types.OriginType.OriginType
instance GHC.Classes.Ord Network.AWS.KMS.Types.OriginType.OriginType
instance GHC.Classes.Eq Network.AWS.KMS.Types.OriginType.OriginType
instance GHC.Read.Read Network.AWS.KMS.Types.OriginType.OriginType
instance GHC.Show.Show Network.AWS.KMS.Types.OriginType.OriginType


module Network.AWS.KMS.Types.SigningAlgorithmSpec
newtype SigningAlgorithmSpec
SigningAlgorithmSpec' :: Text -> SigningAlgorithmSpec
[fromSigningAlgorithmSpec] :: SigningAlgorithmSpec -> Text
pattern SigningAlgorithmSpec_ECDSA_SHA_256 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_ECDSA_SHA_384 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_ECDSA_SHA_512 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PKCS1_V1_5_SHA_256 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PKCS1_V1_5_SHA_384 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PKCS1_V1_5_SHA_512 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PSS_SHA_256 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PSS_SHA_384 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PSS_SHA_512 :: SigningAlgorithmSpec
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance GHC.Generics.Generic Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance GHC.Classes.Ord Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance GHC.Classes.Eq Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance GHC.Read.Read Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec
instance GHC.Show.Show Network.AWS.KMS.Types.SigningAlgorithmSpec.SigningAlgorithmSpec


module Network.AWS.KMS.Types.KeyMetadata

-- | Contains metadata about a KMS key.
--   
--   This data type is used as a response element for the CreateKey and
--   DescribeKey operations.
--   
--   <i>See:</i> <a>newKeyMetadata</a> smart constructor.
data KeyMetadata
KeyMetadata' :: Maybe [SigningAlgorithmSpec] -> Maybe Natural -> Maybe OriginType -> Maybe KeyManagerType -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe [EncryptionAlgorithmSpec] -> Maybe Text -> Maybe KeyState -> Maybe Text -> Maybe Bool -> Maybe POSIX -> Maybe POSIX -> Maybe ExpirationModelType -> Maybe MultiRegionConfiguration -> Maybe Text -> Maybe POSIX -> Maybe KeySpec -> Maybe CustomerMasterKeySpec -> Maybe KeyUsageType -> Text -> KeyMetadata

-- | The signing algorithms that the KMS key supports. You cannot use the
--   KMS key with other signing algorithms within KMS.
--   
--   This field appears only when the <tt>KeyUsage</tt> of the KMS key is
--   <tt>SIGN_VERIFY</tt>.
[$sel:signingAlgorithms:KeyMetadata'] :: KeyMetadata -> Maybe [SigningAlgorithmSpec]

-- | The waiting period before the primary key in a multi-Region key is
--   deleted. This waiting period begins when the last of its replica keys
--   is deleted. This value is present only when the <tt>KeyState</tt> of
--   the KMS key is <tt>PendingReplicaDeletion</tt>. That indicates that
--   the KMS key is the primary key in a multi-Region key, it is scheduled
--   for deletion, and it still has existing replica keys.
--   
--   When a single-Region KMS key or a multi-Region replica key is
--   scheduled for deletion, its deletion date is displayed in the
--   <tt>DeletionDate</tt> field. However, when the primary key in a
--   multi-Region key is scheduled for deletion, its waiting period doesn't
--   begin until all of its replica keys are deleted. This value displays
--   that waiting period. When the last replica key in the multi-Region key
--   is deleted, the <tt>KeyState</tt> of the scheduled primary key changes
--   from <tt>PendingReplicaDeletion</tt> to <tt>PendingDeletion</tt> and
--   the deletion date appears in the <tt>DeletionDate</tt> field.
[$sel:pendingDeletionWindowInDays:KeyMetadata'] :: KeyMetadata -> Maybe Natural

-- | The source of the key material for the KMS key. When this value is
--   <tt>AWS_KMS</tt>, KMS created the key material. When this value is
--   <tt>EXTERNAL</tt>, the key material was imported or the KMS key
--   doesn't have any key material. When this value is
--   <tt>AWS_CLOUDHSM</tt>, the key material was created in the CloudHSM
--   cluster associated with a custom key store.
[$sel:origin:KeyMetadata'] :: KeyMetadata -> Maybe OriginType

-- | The manager of the KMS key. KMS keys in your Amazon Web Services
--   account are either customer managed or Amazon Web Services managed.
--   For more information about the difference, see <a>KMS keys</a> in the
--   <i>Key Management Service Developer Guide</i>.
[$sel:keyManager:KeyMetadata'] :: KeyMetadata -> Maybe KeyManagerType

-- | The twelve-digit account ID of the Amazon Web Services account that
--   owns the KMS key.
[$sel:aWSAccountId:KeyMetadata'] :: KeyMetadata -> Maybe Text

-- | Indicates whether the KMS key is a multi-Region (<tt>True</tt>) or
--   regional (<tt>False</tt>) key. This value is <tt>True</tt> for
--   multi-Region primary and replica keys and <tt>False</tt> for regional
--   KMS keys.
--   
--   For more information about multi-Region keys, see <a>Using
--   multi-Region keys</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:multiRegion:KeyMetadata'] :: KeyMetadata -> Maybe Bool

-- | A unique identifier for the <a>custom key store</a> that contains the
--   KMS key. This value is present only when the KMS key is created in a
--   custom key store.
[$sel:customKeyStoreId:KeyMetadata'] :: KeyMetadata -> Maybe Text

-- | The encryption algorithms that the KMS key supports. You cannot use
--   the KMS key with other encryption algorithms within KMS.
--   
--   This value is present only when the <tt>KeyUsage</tt> of the KMS key
--   is <tt>ENCRYPT_DECRYPT</tt>.
[$sel:encryptionAlgorithms:KeyMetadata'] :: KeyMetadata -> Maybe [EncryptionAlgorithmSpec]

-- | The cluster ID of the CloudHSM cluster that contains the key material
--   for the KMS key. When you create a KMS key in a <a>custom key
--   store</a>, KMS creates the key material for the KMS key in the
--   associated CloudHSM cluster. This value is present only when the KMS
--   key is created in a custom key store.
[$sel:cloudHsmClusterId:KeyMetadata'] :: KeyMetadata -> Maybe Text

-- | The current status of the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
[$sel:keyState:KeyMetadata'] :: KeyMetadata -> Maybe KeyState

-- | The Amazon Resource Name (ARN) of the KMS key. For examples, see
--   <a>Key Management Service (KMS)</a> in the Example ARNs section of the
--   /Amazon Web Services General Reference/.
[$sel:arn:KeyMetadata'] :: KeyMetadata -> Maybe Text

-- | Specifies whether the KMS key is enabled. When <tt>KeyState</tt> is
--   <tt>Enabled</tt> this value is true, otherwise it is false.
[$sel:enabled:KeyMetadata'] :: KeyMetadata -> Maybe Bool

-- | The date and time when the KMS key was created.
[$sel:creationDate:KeyMetadata'] :: KeyMetadata -> Maybe POSIX

-- | The time at which the imported key material expires. When the key
--   material expires, KMS deletes the key material and the KMS key becomes
--   unusable. This value is present only for KMS keys whose
--   <tt>Origin</tt> is <tt>EXTERNAL</tt> and whose
--   <tt>ExpirationModel</tt> is <tt>KEY_MATERIAL_EXPIRES</tt>, otherwise
--   this value is omitted.
[$sel:validTo:KeyMetadata'] :: KeyMetadata -> Maybe POSIX

-- | Specifies whether the KMS key's key material expires. This value is
--   present only when <tt>Origin</tt> is <tt>EXTERNAL</tt>, otherwise this
--   value is omitted.
[$sel:expirationModel:KeyMetadata'] :: KeyMetadata -> Maybe ExpirationModelType

-- | Lists the primary and replica keys in same multi-Region key. This
--   field is present only when the value of the <tt>MultiRegion</tt> field
--   is <tt>True</tt>.
--   
--   For more information about any listed KMS key, use the DescribeKey
--   operation.
--   
--   <ul>
--   <li><tt>MultiRegionKeyType</tt> indicates whether the KMS key is a
--   <tt>PRIMARY</tt> or <tt>REPLICA</tt> key.</li>
--   <li><tt>PrimaryKey</tt> displays the key ARN and Region of the primary
--   key. This field displays the current KMS key if it is the primary
--   key.</li>
--   <li><tt>ReplicaKeys</tt> displays the key ARNs and Regions of all
--   replica keys. This field includes the current KMS key if it is a
--   replica key.</li>
--   </ul>
[$sel:multiRegionConfiguration:KeyMetadata'] :: KeyMetadata -> Maybe MultiRegionConfiguration

-- | The description of the KMS key.
[$sel:description:KeyMetadata'] :: KeyMetadata -> Maybe Text

-- | The date and time after which KMS deletes this KMS key. This value is
--   present only when the KMS key is scheduled for deletion, that is, when
--   its <tt>KeyState</tt> is <tt>PendingDeletion</tt>.
--   
--   When the primary key in a multi-Region key is scheduled for deletion
--   but still has replica keys, its key state is
--   <tt>PendingReplicaDeletion</tt> and the length of its waiting period
--   is displayed in the <tt>PendingDeletionWindowInDays</tt> field.
[$sel:deletionDate:KeyMetadata'] :: KeyMetadata -> Maybe POSIX

-- | Describes the type of key material in the KMS key.
[$sel:keySpec:KeyMetadata'] :: KeyMetadata -> Maybe KeySpec

-- | Instead, use the <tt>KeySpec</tt> field.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
[$sel:customerMasterKeySpec:KeyMetadata'] :: KeyMetadata -> Maybe CustomerMasterKeySpec

-- | The <a>cryptographic operations</a> for which you can use the KMS key.
[$sel:keyUsage:KeyMetadata'] :: KeyMetadata -> Maybe KeyUsageType

-- | The globally unique identifier for the KMS key.
[$sel:keyId:KeyMetadata'] :: KeyMetadata -> Text

-- | Create a value of <a>KeyMetadata</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signingAlgorithms:KeyMetadata'</a>,
--   <a>keyMetadata_signingAlgorithms</a> - The signing algorithms that the
--   KMS key supports. You cannot use the KMS key with other signing
--   algorithms within KMS.
--   
--   This field appears only when the <tt>KeyUsage</tt> of the KMS key is
--   <tt>SIGN_VERIFY</tt>.
--   
--   <a>$sel:pendingDeletionWindowInDays:KeyMetadata'</a>,
--   <a>keyMetadata_pendingDeletionWindowInDays</a> - The waiting period
--   before the primary key in a multi-Region key is deleted. This waiting
--   period begins when the last of its replica keys is deleted. This value
--   is present only when the <tt>KeyState</tt> of the KMS key is
--   <tt>PendingReplicaDeletion</tt>. That indicates that the KMS key is
--   the primary key in a multi-Region key, it is scheduled for deletion,
--   and it still has existing replica keys.
--   
--   When a single-Region KMS key or a multi-Region replica key is
--   scheduled for deletion, its deletion date is displayed in the
--   <tt>DeletionDate</tt> field. However, when the primary key in a
--   multi-Region key is scheduled for deletion, its waiting period doesn't
--   begin until all of its replica keys are deleted. This value displays
--   that waiting period. When the last replica key in the multi-Region key
--   is deleted, the <tt>KeyState</tt> of the scheduled primary key changes
--   from <tt>PendingReplicaDeletion</tt> to <tt>PendingDeletion</tt> and
--   the deletion date appears in the <tt>DeletionDate</tt> field.
--   
--   <a>$sel:origin:KeyMetadata'</a>, <a>keyMetadata_origin</a> - The
--   source of the key material for the KMS key. When this value is
--   <tt>AWS_KMS</tt>, KMS created the key material. When this value is
--   <tt>EXTERNAL</tt>, the key material was imported or the KMS key
--   doesn't have any key material. When this value is
--   <tt>AWS_CLOUDHSM</tt>, the key material was created in the CloudHSM
--   cluster associated with a custom key store.
--   
--   <a>$sel:keyManager:KeyMetadata'</a>, <a>keyMetadata_keyManager</a> -
--   The manager of the KMS key. KMS keys in your Amazon Web Services
--   account are either customer managed or Amazon Web Services managed.
--   For more information about the difference, see <a>KMS keys</a> in the
--   <i>Key Management Service Developer Guide</i>.
--   
--   <a>$sel:aWSAccountId:KeyMetadata'</a>, <a>keyMetadata_aWSAccountId</a>
--   - The twelve-digit account ID of the Amazon Web Services account that
--   owns the KMS key.
--   
--   <a>$sel:multiRegion:KeyMetadata'</a>, <a>keyMetadata_multiRegion</a> -
--   Indicates whether the KMS key is a multi-Region (<tt>True</tt>) or
--   regional (<tt>False</tt>) key. This value is <tt>True</tt> for
--   multi-Region primary and replica keys and <tt>False</tt> for regional
--   KMS keys.
--   
--   For more information about multi-Region keys, see <a>Using
--   multi-Region keys</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:customKeyStoreId:KeyMetadata'</a>,
--   <a>keyMetadata_customKeyStoreId</a> - A unique identifier for the
--   <a>custom key store</a> that contains the KMS key. This value is
--   present only when the KMS key is created in a custom key store.
--   
--   <a>$sel:encryptionAlgorithms:KeyMetadata'</a>,
--   <a>keyMetadata_encryptionAlgorithms</a> - The encryption algorithms
--   that the KMS key supports. You cannot use the KMS key with other
--   encryption algorithms within KMS.
--   
--   This value is present only when the <tt>KeyUsage</tt> of the KMS key
--   is <tt>ENCRYPT_DECRYPT</tt>.
--   
--   <a>$sel:cloudHsmClusterId:KeyMetadata'</a>,
--   <a>keyMetadata_cloudHsmClusterId</a> - The cluster ID of the CloudHSM
--   cluster that contains the key material for the KMS key. When you
--   create a KMS key in a <a>custom key store</a>, KMS creates the key
--   material for the KMS key in the associated CloudHSM cluster. This
--   value is present only when the KMS key is created in a custom key
--   store.
--   
--   <a>$sel:keyState:KeyMetadata'</a>, <a>keyMetadata_keyState</a> - The
--   current status of the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   <a>$sel:arn:KeyMetadata'</a>, <a>keyMetadata_arn</a> - The Amazon
--   Resource Name (ARN) of the KMS key. For examples, see <a>Key
--   Management Service (KMS)</a> in the Example ARNs section of the
--   /Amazon Web Services General Reference/.
--   
--   <a>$sel:enabled:KeyMetadata'</a>, <a>keyMetadata_enabled</a> -
--   Specifies whether the KMS key is enabled. When <tt>KeyState</tt> is
--   <tt>Enabled</tt> this value is true, otherwise it is false.
--   
--   <a>$sel:creationDate:KeyMetadata'</a>, <a>keyMetadata_creationDate</a>
--   - The date and time when the KMS key was created.
--   
--   <a>$sel:validTo:KeyMetadata'</a>, <a>keyMetadata_validTo</a> - The
--   time at which the imported key material expires. When the key material
--   expires, KMS deletes the key material and the KMS key becomes
--   unusable. This value is present only for KMS keys whose
--   <tt>Origin</tt> is <tt>EXTERNAL</tt> and whose
--   <tt>ExpirationModel</tt> is <tt>KEY_MATERIAL_EXPIRES</tt>, otherwise
--   this value is omitted.
--   
--   <a>$sel:expirationModel:KeyMetadata'</a>,
--   <a>keyMetadata_expirationModel</a> - Specifies whether the KMS key's
--   key material expires. This value is present only when <tt>Origin</tt>
--   is <tt>EXTERNAL</tt>, otherwise this value is omitted.
--   
--   <a>$sel:multiRegionConfiguration:KeyMetadata'</a>,
--   <a>keyMetadata_multiRegionConfiguration</a> - Lists the primary and
--   replica keys in same multi-Region key. This field is present only when
--   the value of the <tt>MultiRegion</tt> field is <tt>True</tt>.
--   
--   For more information about any listed KMS key, use the DescribeKey
--   operation.
--   
--   <ul>
--   <li><tt>MultiRegionKeyType</tt> indicates whether the KMS key is a
--   <tt>PRIMARY</tt> or <tt>REPLICA</tt> key.</li>
--   <li><tt>PrimaryKey</tt> displays the key ARN and Region of the primary
--   key. This field displays the current KMS key if it is the primary
--   key.</li>
--   <li><tt>ReplicaKeys</tt> displays the key ARNs and Regions of all
--   replica keys. This field includes the current KMS key if it is a
--   replica key.</li>
--   </ul>
--   
--   <a>$sel:description:KeyMetadata'</a>, <a>keyMetadata_description</a> -
--   The description of the KMS key.
--   
--   <a>$sel:deletionDate:KeyMetadata'</a>, <a>keyMetadata_deletionDate</a>
--   - The date and time after which KMS deletes this KMS key. This value
--   is present only when the KMS key is scheduled for deletion, that is,
--   when its <tt>KeyState</tt> is <tt>PendingDeletion</tt>.
--   
--   When the primary key in a multi-Region key is scheduled for deletion
--   but still has replica keys, its key state is
--   <tt>PendingReplicaDeletion</tt> and the length of its waiting period
--   is displayed in the <tt>PendingDeletionWindowInDays</tt> field.
--   
--   <a>$sel:keySpec:KeyMetadata'</a>, <a>keyMetadata_keySpec</a> -
--   Describes the type of key material in the KMS key.
--   
--   <a>$sel:customerMasterKeySpec:KeyMetadata'</a>,
--   <a>keyMetadata_customerMasterKeySpec</a> - Instead, use the
--   <tt>KeySpec</tt> field.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
--   
--   <a>$sel:keyUsage:KeyMetadata'</a>, <a>keyMetadata_keyUsage</a> - The
--   <a>cryptographic operations</a> for which you can use the KMS key.
--   
--   <a>$sel:keyId:KeyMetadata'</a>, <a>keyMetadata_keyId</a> - The
--   globally unique identifier for the KMS key.
newKeyMetadata :: Text -> KeyMetadata

-- | The signing algorithms that the KMS key supports. You cannot use the
--   KMS key with other signing algorithms within KMS.
--   
--   This field appears only when the <tt>KeyUsage</tt> of the KMS key is
--   <tt>SIGN_VERIFY</tt>.
keyMetadata_signingAlgorithms :: Lens' KeyMetadata (Maybe [SigningAlgorithmSpec])

-- | The waiting period before the primary key in a multi-Region key is
--   deleted. This waiting period begins when the last of its replica keys
--   is deleted. This value is present only when the <tt>KeyState</tt> of
--   the KMS key is <tt>PendingReplicaDeletion</tt>. That indicates that
--   the KMS key is the primary key in a multi-Region key, it is scheduled
--   for deletion, and it still has existing replica keys.
--   
--   When a single-Region KMS key or a multi-Region replica key is
--   scheduled for deletion, its deletion date is displayed in the
--   <tt>DeletionDate</tt> field. However, when the primary key in a
--   multi-Region key is scheduled for deletion, its waiting period doesn't
--   begin until all of its replica keys are deleted. This value displays
--   that waiting period. When the last replica key in the multi-Region key
--   is deleted, the <tt>KeyState</tt> of the scheduled primary key changes
--   from <tt>PendingReplicaDeletion</tt> to <tt>PendingDeletion</tt> and
--   the deletion date appears in the <tt>DeletionDate</tt> field.
keyMetadata_pendingDeletionWindowInDays :: Lens' KeyMetadata (Maybe Natural)

-- | The source of the key material for the KMS key. When this value is
--   <tt>AWS_KMS</tt>, KMS created the key material. When this value is
--   <tt>EXTERNAL</tt>, the key material was imported or the KMS key
--   doesn't have any key material. When this value is
--   <tt>AWS_CLOUDHSM</tt>, the key material was created in the CloudHSM
--   cluster associated with a custom key store.
keyMetadata_origin :: Lens' KeyMetadata (Maybe OriginType)

-- | The manager of the KMS key. KMS keys in your Amazon Web Services
--   account are either customer managed or Amazon Web Services managed.
--   For more information about the difference, see <a>KMS keys</a> in the
--   <i>Key Management Service Developer Guide</i>.
keyMetadata_keyManager :: Lens' KeyMetadata (Maybe KeyManagerType)

-- | The twelve-digit account ID of the Amazon Web Services account that
--   owns the KMS key.
keyMetadata_aWSAccountId :: Lens' KeyMetadata (Maybe Text)

-- | Indicates whether the KMS key is a multi-Region (<tt>True</tt>) or
--   regional (<tt>False</tt>) key. This value is <tt>True</tt> for
--   multi-Region primary and replica keys and <tt>False</tt> for regional
--   KMS keys.
--   
--   For more information about multi-Region keys, see <a>Using
--   multi-Region keys</a> in the <i>Key Management Service Developer
--   Guide</i>.
keyMetadata_multiRegion :: Lens' KeyMetadata (Maybe Bool)

-- | A unique identifier for the <a>custom key store</a> that contains the
--   KMS key. This value is present only when the KMS key is created in a
--   custom key store.
keyMetadata_customKeyStoreId :: Lens' KeyMetadata (Maybe Text)

-- | The encryption algorithms that the KMS key supports. You cannot use
--   the KMS key with other encryption algorithms within KMS.
--   
--   This value is present only when the <tt>KeyUsage</tt> of the KMS key
--   is <tt>ENCRYPT_DECRYPT</tt>.
keyMetadata_encryptionAlgorithms :: Lens' KeyMetadata (Maybe [EncryptionAlgorithmSpec])

-- | The cluster ID of the CloudHSM cluster that contains the key material
--   for the KMS key. When you create a KMS key in a <a>custom key
--   store</a>, KMS creates the key material for the KMS key in the
--   associated CloudHSM cluster. This value is present only when the KMS
--   key is created in a custom key store.
keyMetadata_cloudHsmClusterId :: Lens' KeyMetadata (Maybe Text)

-- | The current status of the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
keyMetadata_keyState :: Lens' KeyMetadata (Maybe KeyState)

-- | The Amazon Resource Name (ARN) of the KMS key. For examples, see
--   <a>Key Management Service (KMS)</a> in the Example ARNs section of the
--   /Amazon Web Services General Reference/.
keyMetadata_arn :: Lens' KeyMetadata (Maybe Text)

-- | Specifies whether the KMS key is enabled. When <tt>KeyState</tt> is
--   <tt>Enabled</tt> this value is true, otherwise it is false.
keyMetadata_enabled :: Lens' KeyMetadata (Maybe Bool)

-- | The date and time when the KMS key was created.
keyMetadata_creationDate :: Lens' KeyMetadata (Maybe UTCTime)

-- | The time at which the imported key material expires. When the key
--   material expires, KMS deletes the key material and the KMS key becomes
--   unusable. This value is present only for KMS keys whose
--   <tt>Origin</tt> is <tt>EXTERNAL</tt> and whose
--   <tt>ExpirationModel</tt> is <tt>KEY_MATERIAL_EXPIRES</tt>, otherwise
--   this value is omitted.
keyMetadata_validTo :: Lens' KeyMetadata (Maybe UTCTime)

-- | Specifies whether the KMS key's key material expires. This value is
--   present only when <tt>Origin</tt> is <tt>EXTERNAL</tt>, otherwise this
--   value is omitted.
keyMetadata_expirationModel :: Lens' KeyMetadata (Maybe ExpirationModelType)

-- | Lists the primary and replica keys in same multi-Region key. This
--   field is present only when the value of the <tt>MultiRegion</tt> field
--   is <tt>True</tt>.
--   
--   For more information about any listed KMS key, use the DescribeKey
--   operation.
--   
--   <ul>
--   <li><tt>MultiRegionKeyType</tt> indicates whether the KMS key is a
--   <tt>PRIMARY</tt> or <tt>REPLICA</tt> key.</li>
--   <li><tt>PrimaryKey</tt> displays the key ARN and Region of the primary
--   key. This field displays the current KMS key if it is the primary
--   key.</li>
--   <li><tt>ReplicaKeys</tt> displays the key ARNs and Regions of all
--   replica keys. This field includes the current KMS key if it is a
--   replica key.</li>
--   </ul>
keyMetadata_multiRegionConfiguration :: Lens' KeyMetadata (Maybe MultiRegionConfiguration)

-- | The description of the KMS key.
keyMetadata_description :: Lens' KeyMetadata (Maybe Text)

-- | The date and time after which KMS deletes this KMS key. This value is
--   present only when the KMS key is scheduled for deletion, that is, when
--   its <tt>KeyState</tt> is <tt>PendingDeletion</tt>.
--   
--   When the primary key in a multi-Region key is scheduled for deletion
--   but still has replica keys, its key state is
--   <tt>PendingReplicaDeletion</tt> and the length of its waiting period
--   is displayed in the <tt>PendingDeletionWindowInDays</tt> field.
keyMetadata_deletionDate :: Lens' KeyMetadata (Maybe UTCTime)

-- | Describes the type of key material in the KMS key.
keyMetadata_keySpec :: Lens' KeyMetadata (Maybe KeySpec)

-- | Instead, use the <tt>KeySpec</tt> field.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
keyMetadata_customerMasterKeySpec :: Lens' KeyMetadata (Maybe CustomerMasterKeySpec)

-- | The <a>cryptographic operations</a> for which you can use the KMS key.
keyMetadata_keyUsage :: Lens' KeyMetadata (Maybe KeyUsageType)

-- | The globally unique identifier for the KMS key.
keyMetadata_keyId :: Lens' KeyMetadata Text
instance GHC.Generics.Generic Network.AWS.KMS.Types.KeyMetadata.KeyMetadata
instance GHC.Show.Show Network.AWS.KMS.Types.KeyMetadata.KeyMetadata
instance GHC.Read.Read Network.AWS.KMS.Types.KeyMetadata.KeyMetadata
instance GHC.Classes.Eq Network.AWS.KMS.Types.KeyMetadata.KeyMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.KeyMetadata.KeyMetadata
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.KeyMetadata.KeyMetadata
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.KeyMetadata.KeyMetadata


module Network.AWS.KMS.Types.Tag

-- | A key-value pair. A tag consists of a tag key and a tag value. Tag
--   keys and tag values are both required, but tag values can be empty
--   (null) strings.
--   
--   For information about the rules that apply to tag keys and tag values,
--   see <a>User-Defined Tag Restrictions</a> in the <i>Amazon Web Services
--   Billing and Cost Management User Guide</i>.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | The key of the tag.
[$sel:tagKey:Tag'] :: Tag -> Text

-- | The value of the tag.
[$sel:tagValue:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagKey:Tag'</a>, <a>tag_tagKey</a> - The key of the tag.
--   
--   <a>$sel:tagValue:Tag'</a>, <a>tag_tagValue</a> - The value of the tag.
newTag :: Text -> Text -> Tag

-- | The key of the tag.
tag_tagKey :: Lens' Tag Text

-- | The value of the tag.
tag_tagValue :: Lens' Tag Text
instance GHC.Generics.Generic Network.AWS.KMS.Types.Tag.Tag
instance GHC.Show.Show Network.AWS.KMS.Types.Tag.Tag
instance GHC.Read.Read Network.AWS.KMS.Types.Tag.Tag
instance GHC.Classes.Eq Network.AWS.KMS.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.Tag.Tag
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.Tag.Tag


module Network.AWS.KMS.Types.WrappingKeySpec
newtype WrappingKeySpec
WrappingKeySpec' :: Text -> WrappingKeySpec
[fromWrappingKeySpec] :: WrappingKeySpec -> Text
pattern WrappingKeySpec_RSA_2048 :: WrappingKeySpec
instance Network.AWS.Data.XML.ToXML Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Network.AWS.Data.XML.FromXML Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Network.AWS.Data.Headers.ToHeader Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Network.AWS.Data.Log.ToLog Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Network.AWS.Data.Text.ToText Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Network.AWS.Data.Text.FromText Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Control.DeepSeq.NFData Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance GHC.Generics.Generic Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance GHC.Classes.Ord Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance GHC.Classes.Eq Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance GHC.Read.Read Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec
instance GHC.Show.Show Network.AWS.KMS.Types.WrappingKeySpec.WrappingKeySpec


module Network.AWS.KMS.Types

-- | API version <tt>2014-11-01</tt> of the Amazon Key Management Service
--   SDK configuration.
defaultService :: Service

-- | The request was rejected because the specified alias name is not
--   valid.
_InvalidAliasNameException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because KMS cannot find a custom key store
--   with the specified key store name or ID.
_CustomKeyStoreNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified custom key store name
--   is already assigned to another custom key store in the account. Try
--   again with a custom key store name that is unique in the account.
_CustomKeyStoreNameInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified policy is not
--   syntactically or semantically correct.
_MalformedPolicyDocumentException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected for one of the following reasons:
--   
--   <ul>
--   <li>The <tt>KeyUsage</tt> value of the KMS key is incompatible with
--   the API operation.</li>
--   <li>The encryption algorithm or signing algorithm specified for the
--   operation is incompatible with the type of key material in the KMS key
--   <tt>(KeySpec</tt>).</li>
--   </ul>
--   
--   For encrypting, decrypting, re-encrypting, and generating data keys,
--   the <tt>KeyUsage</tt> must be <tt>ENCRYPT_DECRYPT</tt>. For signing
--   and verifying, the <tt>KeyUsage</tt> must be <tt>SIGN_VERIFY</tt>. To
--   find the <tt>KeyUsage</tt> of a KMS key, use the DescribeKey
--   operation.
--   
--   To find the encryption or signing algorithms supported for a
--   particular KMS key, use the DescribeKey operation.
_InvalidKeyUsageException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the state of the specified resource
--   is not valid for this request.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the /<i>Key Management
--   Service Developer Guide</i>/ .
_KMSInvalidStateException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the marker that specifies where
--   pagination should next begin is not valid.
_InvalidMarkerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified entity or resource
--   could not be found.
_NotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because KMS cannot find the CloudHSM cluster
--   with the specified cluster ID. Retry the request with a different
--   cluster ID.
_CloudHsmClusterNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified KMS key cannot decrypt
--   the data. The <tt>KeyId</tt> in a Decrypt request and the
--   <tt>SourceKeyId</tt> in a ReEncrypt request must identify the same KMS
--   key that was used to encrypt the ciphertext.
_IncorrectKeyException :: AsError a => Getting (First ServiceError) a ServiceError

-- | From the Decrypt or ReEncrypt operation, the request was rejected
--   because the specified ciphertext, or additional authenticated data
--   incorporated into the ciphertext, such as the encryption context, is
--   corrupted, missing, or otherwise invalid.
--   
--   From the ImportKeyMaterial operation, the request was rejected because
--   KMS could not decrypt the encrypted (wrapped) key material.
_InvalidCiphertextException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the associated CloudHSM cluster did
--   not meet the configuration requirements for a custom key store.
--   
--   <ul>
--   <li>The cluster must be configured with private subnets in at least
--   two different Availability Zones in the Region.</li>
--   <li>The <a>security group for the cluster</a>
--   (cloudhsm-cluster-<i>&lt;cluster-id&gt;</i>-sg) must include inbound
--   rules and outbound rules that allow TCP traffic on ports 2223-2225.
--   The <b>Source</b> in the inbound rules and the <b>Destination</b> in
--   the outbound rules must match the security group ID. These rules are
--   set by default when you create the cluster. Do not delete or change
--   them. To get information about a particular security group, use the
--   <a>DescribeSecurityGroups</a> operation.</li>
--   <li>The cluster must contain at least as many HSMs as the operation
--   requires. To add HSMs, use the CloudHSM <a>CreateHsm</a> operation.For
--   the CreateCustomKeyStore, UpdateCustomKeyStore, and CreateKey
--   operations, the CloudHSM cluster must have at least two active HSMs,
--   each in a different Availability Zone. For the ConnectCustomKeyStore
--   operation, the CloudHSM must contain at least one active HSM.</li>
--   </ul>
--   
--   For information about the requirements for an CloudHSM cluster that is
--   associated with a custom key store, see <a>Assemble the
--   Prerequisites</a> in the <i>Key Management Service Developer
--   Guide</i>. For information about creating a private subnet for an
--   CloudHSM cluster, see <a>Create a Private Subnet</a> in the
--   <i>CloudHSM User Guide</i>. For information about cluster security
--   groups, see <a>Configure a Default Security Group</a> in the
--   /<i>CloudHSM User Guide</i>/ .
_CloudHsmClusterInvalidConfigurationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because a specified ARN, or an ARN in a key
--   policy, is not valid.
_InvalidArnException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the custom key store contains KMS
--   keys. After verifying that you do not need to use the KMS keys, use
--   the ScheduleKeyDeletion operation to delete the KMS keys. After they
--   are deleted, you can delete the custom key store.
_CustomKeyStoreHasCMKsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified CloudHSM cluster has a
--   different cluster certificate than the original cluster. You cannot
--   use the operation to specify an unrelated cluster.
--   
--   Specify a cluster that shares a backup history with the original
--   cluster. This includes clusters that were created from a backup of the
--   current cluster, and clusters that were created from the same backup
--   that produced the current cluster.
--   
--   Clusters that share a backup history have the same cluster
--   certificate. To view the cluster certificate of a cluster, use the
--   <a>DescribeClusters</a> operation.
_CloudHsmClusterNotRelatedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because of the <tt>ConnectionState</tt> of
--   the custom key store. To get the <tt>ConnectionState</tt> of a custom
--   key store, use the DescribeCustomKeyStores operation.
--   
--   This exception is thrown under the following conditions:
--   
--   <ul>
--   <li>You requested the CreateKey or GenerateRandom operation in a
--   custom key store that is not connected. These operations are valid
--   only when the custom key store <tt>ConnectionState</tt> is
--   <tt>CONNECTED</tt>.</li>
--   <li>You requested the UpdateCustomKeyStore or DeleteCustomKeyStore
--   operation on a custom key store that is not disconnected. This
--   operation is valid only when the custom key store
--   <tt>ConnectionState</tt> is <tt>DISCONNECTED</tt>.</li>
--   <li>You requested the ConnectCustomKeyStore operation on a custom key
--   store with a <tt>ConnectionState</tt> of <tt>DISCONNECTING</tt> or
--   <tt>FAILED</tt>. This operation is valid for all other
--   <tt>ConnectionState</tt> values.</li>
--   </ul>
_CustomKeyStoreInvalidStateException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because a specified parameter is not
--   supported or a specified resource is not valid for this operation.
_UnsupportedOperationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the signature verification failed.
--   Signature verification fails when it cannot confirm that signature was
--   produced by signing the specified message with the specified KMS key
--   and signing algorithm.
_KMSInvalidSignatureException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified KMS key is not enabled.
_DisabledException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because it attempted to create a resource
--   that already exists.
_AlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because a quota was exceeded. For more
--   information, see <a>Quotas</a> in the <i>Key Management Service
--   Developer Guide</i>.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified import token is
--   expired. Use GetParametersForImport to get a new import token and
--   public key, use the new public key to encrypt the key material, and
--   then try the request again.
_ExpiredImportTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified CloudHSM cluster is
--   already associated with a custom key store or it shares a backup
--   history with a cluster that is associated with a custom key store.
--   Each custom key store must be associated with a different CloudHSM
--   cluster.
--   
--   Clusters that share a backup history have the same cluster
--   certificate. To view the cluster certificate of a cluster, use the
--   <a>DescribeClusters</a> operation.
_CloudHsmClusterInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The system timed out while trying to fulfill the request. The request
--   can be retried.
_DependencyTimeoutException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the trust anchor certificate in the
--   request is not the trust anchor certificate for the specified CloudHSM
--   cluster.
--   
--   When you <a>initialize the cluster</a>, you create the trust anchor
--   certificate and save it in the <tt>customerCA.crt</tt> file.
_IncorrectTrustAnchorException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the CloudHSM cluster that is
--   associated with the custom key store is not active. Initialize and
--   activate the cluster and try the command again. For detailed
--   instructions, see <a>Getting Started</a> in the <i>CloudHSM User
--   Guide</i>.
_CloudHsmClusterNotActiveException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified grant token is not
--   valid.
_InvalidGrantTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the provided import token is invalid
--   or is associated with a different KMS key.
_InvalidImportTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because an internal exception occurred. The
--   request can be retried.
_KMSInternalException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified <tt>GrantId</tt> is not
--   valid.
_InvalidGrantIdException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because one or more tags are not valid.
_TagException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the key material in the request is,
--   expired, invalid, or is not the same key material that was previously
--   imported into this KMS key.
_IncorrectKeyMaterialException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified KMS key was not
--   available. You can retry the request.
_KeyUnavailableException :: AsError a => Getting (First ServiceError) a ServiceError
newtype AlgorithmSpec
AlgorithmSpec' :: Text -> AlgorithmSpec
[fromAlgorithmSpec] :: AlgorithmSpec -> Text
pattern AlgorithmSpec_RSAES_OAEP_SHA_1 :: AlgorithmSpec
pattern AlgorithmSpec_RSAES_OAEP_SHA_256 :: AlgorithmSpec
pattern AlgorithmSpec_RSAES_PKCS1_V1_5 :: AlgorithmSpec
newtype ConnectionErrorCodeType
ConnectionErrorCodeType' :: Text -> ConnectionErrorCodeType
[fromConnectionErrorCodeType] :: ConnectionErrorCodeType -> Text
pattern ConnectionErrorCodeType_CLUSTER_NOT_FOUND :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_INSUFFICIENT_CLOUDHSM_HSMS :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_INTERNAL_ERROR :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_INVALID_CREDENTIALS :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_NETWORK_ERRORS :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_SUBNET_NOT_FOUND :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_USER_LOCKED_OUT :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_USER_LOGGED_IN :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_USER_NOT_FOUND :: ConnectionErrorCodeType
newtype ConnectionStateType
ConnectionStateType' :: Text -> ConnectionStateType
[fromConnectionStateType] :: ConnectionStateType -> Text
pattern ConnectionStateType_CONNECTED :: ConnectionStateType
pattern ConnectionStateType_CONNECTING :: ConnectionStateType
pattern ConnectionStateType_DISCONNECTED :: ConnectionStateType
pattern ConnectionStateType_DISCONNECTING :: ConnectionStateType
pattern ConnectionStateType_FAILED :: ConnectionStateType
newtype CustomerMasterKeySpec
CustomerMasterKeySpec' :: Text -> CustomerMasterKeySpec
[fromCustomerMasterKeySpec] :: CustomerMasterKeySpec -> Text
pattern CustomerMasterKeySpec_ECC_NIST_P256 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_ECC_NIST_P384 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_ECC_NIST_P521 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_ECC_SECG_P256K1 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_RSA_2048 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_RSA_3072 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_RSA_4096 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_SYMMETRIC_DEFAULT :: CustomerMasterKeySpec
newtype DataKeyPairSpec
DataKeyPairSpec' :: Text -> DataKeyPairSpec
[fromDataKeyPairSpec] :: DataKeyPairSpec -> Text
pattern DataKeyPairSpec_ECC_NIST_P256 :: DataKeyPairSpec
pattern DataKeyPairSpec_ECC_NIST_P384 :: DataKeyPairSpec
pattern DataKeyPairSpec_ECC_NIST_P521 :: DataKeyPairSpec
pattern DataKeyPairSpec_ECC_SECG_P256K1 :: DataKeyPairSpec
pattern DataKeyPairSpec_RSA_2048 :: DataKeyPairSpec
pattern DataKeyPairSpec_RSA_3072 :: DataKeyPairSpec
pattern DataKeyPairSpec_RSA_4096 :: DataKeyPairSpec
newtype DataKeySpec
DataKeySpec' :: Text -> DataKeySpec
[fromDataKeySpec] :: DataKeySpec -> Text
pattern DataKeySpec_AES_128 :: DataKeySpec
pattern DataKeySpec_AES_256 :: DataKeySpec
newtype EncryptionAlgorithmSpec
EncryptionAlgorithmSpec' :: Text -> EncryptionAlgorithmSpec
[fromEncryptionAlgorithmSpec] :: EncryptionAlgorithmSpec -> Text
pattern EncryptionAlgorithmSpec_RSAES_OAEP_SHA_1 :: EncryptionAlgorithmSpec
pattern EncryptionAlgorithmSpec_RSAES_OAEP_SHA_256 :: EncryptionAlgorithmSpec
pattern EncryptionAlgorithmSpec_SYMMETRIC_DEFAULT :: EncryptionAlgorithmSpec
newtype ExpirationModelType
ExpirationModelType' :: Text -> ExpirationModelType
[fromExpirationModelType] :: ExpirationModelType -> Text
pattern ExpirationModelType_KEY_MATERIAL_DOES_NOT_EXPIRE :: ExpirationModelType
pattern ExpirationModelType_KEY_MATERIAL_EXPIRES :: ExpirationModelType
newtype GrantOperation
GrantOperation' :: Text -> GrantOperation
[fromGrantOperation] :: GrantOperation -> Text
pattern GrantOperation_CreateGrant :: GrantOperation
pattern GrantOperation_Decrypt :: GrantOperation
pattern GrantOperation_DescribeKey :: GrantOperation
pattern GrantOperation_Encrypt :: GrantOperation
pattern GrantOperation_GenerateDataKey :: GrantOperation
pattern GrantOperation_GenerateDataKeyPair :: GrantOperation
pattern GrantOperation_GenerateDataKeyPairWithoutPlaintext :: GrantOperation
pattern GrantOperation_GenerateDataKeyWithoutPlaintext :: GrantOperation
pattern GrantOperation_GetPublicKey :: GrantOperation
pattern GrantOperation_ReEncryptFrom :: GrantOperation
pattern GrantOperation_ReEncryptTo :: GrantOperation
pattern GrantOperation_RetireGrant :: GrantOperation
pattern GrantOperation_Sign :: GrantOperation
pattern GrantOperation_Verify :: GrantOperation
newtype KeyManagerType
KeyManagerType' :: Text -> KeyManagerType
[fromKeyManagerType] :: KeyManagerType -> Text
pattern KeyManagerType_AWS :: KeyManagerType
pattern KeyManagerType_CUSTOMER :: KeyManagerType
newtype KeySpec
KeySpec' :: Text -> KeySpec
[fromKeySpec] :: KeySpec -> Text
pattern KeySpec_ECC_NIST_P256 :: KeySpec
pattern KeySpec_ECC_NIST_P384 :: KeySpec
pattern KeySpec_ECC_NIST_P521 :: KeySpec
pattern KeySpec_ECC_SECG_P256K1 :: KeySpec
pattern KeySpec_RSA_2048 :: KeySpec
pattern KeySpec_RSA_3072 :: KeySpec
pattern KeySpec_RSA_4096 :: KeySpec
pattern KeySpec_SYMMETRIC_DEFAULT :: KeySpec
newtype KeyState
KeyState' :: Text -> KeyState
[fromKeyState] :: KeyState -> Text
pattern KeyState_Creating :: KeyState
pattern KeyState_Disabled :: KeyState
pattern KeyState_Enabled :: KeyState
pattern KeyState_PendingDeletion :: KeyState
pattern KeyState_PendingImport :: KeyState
pattern KeyState_PendingReplicaDeletion :: KeyState
pattern KeyState_Unavailable :: KeyState
pattern KeyState_Updating :: KeyState
newtype KeyUsageType
KeyUsageType' :: Text -> KeyUsageType
[fromKeyUsageType] :: KeyUsageType -> Text
pattern KeyUsageType_ENCRYPT_DECRYPT :: KeyUsageType
pattern KeyUsageType_SIGN_VERIFY :: KeyUsageType
newtype MessageType
MessageType' :: Text -> MessageType
[fromMessageType] :: MessageType -> Text
pattern MessageType_DIGEST :: MessageType
pattern MessageType_RAW :: MessageType
newtype MultiRegionKeyType
MultiRegionKeyType' :: Text -> MultiRegionKeyType
[fromMultiRegionKeyType] :: MultiRegionKeyType -> Text
pattern MultiRegionKeyType_PRIMARY :: MultiRegionKeyType
pattern MultiRegionKeyType_REPLICA :: MultiRegionKeyType
newtype OriginType
OriginType' :: Text -> OriginType
[fromOriginType] :: OriginType -> Text
pattern OriginType_AWS_CLOUDHSM :: OriginType
pattern OriginType_AWS_KMS :: OriginType
pattern OriginType_EXTERNAL :: OriginType
newtype SigningAlgorithmSpec
SigningAlgorithmSpec' :: Text -> SigningAlgorithmSpec
[fromSigningAlgorithmSpec] :: SigningAlgorithmSpec -> Text
pattern SigningAlgorithmSpec_ECDSA_SHA_256 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_ECDSA_SHA_384 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_ECDSA_SHA_512 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PKCS1_V1_5_SHA_256 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PKCS1_V1_5_SHA_384 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PKCS1_V1_5_SHA_512 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PSS_SHA_256 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PSS_SHA_384 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PSS_SHA_512 :: SigningAlgorithmSpec
newtype WrappingKeySpec
WrappingKeySpec' :: Text -> WrappingKeySpec
[fromWrappingKeySpec] :: WrappingKeySpec -> Text
pattern WrappingKeySpec_RSA_2048 :: WrappingKeySpec

-- | Contains information about an alias.
--   
--   <i>See:</i> <a>newAliasListEntry</a> smart constructor.
data AliasListEntry
AliasListEntry' :: Maybe POSIX -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> AliasListEntry

-- | Date and time that the alias was most recently associated with a KMS
--   key in the account and Region. Formatted as Unix time.
[$sel:lastUpdatedDate:AliasListEntry'] :: AliasListEntry -> Maybe POSIX

-- | Date and time that the alias was most recently created in the account
--   and Region. Formatted as Unix time.
[$sel:creationDate:AliasListEntry'] :: AliasListEntry -> Maybe POSIX

-- | String that contains the alias. This value begins with
--   <tt>alias/</tt>.
[$sel:aliasName:AliasListEntry'] :: AliasListEntry -> Maybe Text

-- | String that contains the key identifier of the KMS key associated with
--   the alias.
[$sel:targetKeyId:AliasListEntry'] :: AliasListEntry -> Maybe Text

-- | String that contains the key ARN.
[$sel:aliasArn:AliasListEntry'] :: AliasListEntry -> Maybe Text

-- | Create a value of <a>AliasListEntry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastUpdatedDate:AliasListEntry'</a>,
--   <a>aliasListEntry_lastUpdatedDate</a> - Date and time that the alias
--   was most recently associated with a KMS key in the account and Region.
--   Formatted as Unix time.
--   
--   <a>$sel:creationDate:AliasListEntry'</a>,
--   <a>aliasListEntry_creationDate</a> - Date and time that the alias was
--   most recently created in the account and Region. Formatted as Unix
--   time.
--   
--   <a>$sel:aliasName:AliasListEntry'</a>, <a>aliasListEntry_aliasName</a>
--   - String that contains the alias. This value begins with
--   <tt>alias/</tt>.
--   
--   <a>$sel:targetKeyId:AliasListEntry'</a>,
--   <a>aliasListEntry_targetKeyId</a> - String that contains the key
--   identifier of the KMS key associated with the alias.
--   
--   <a>$sel:aliasArn:AliasListEntry'</a>, <a>aliasListEntry_aliasArn</a> -
--   String that contains the key ARN.
newAliasListEntry :: AliasListEntry

-- | Date and time that the alias was most recently associated with a KMS
--   key in the account and Region. Formatted as Unix time.
aliasListEntry_lastUpdatedDate :: Lens' AliasListEntry (Maybe UTCTime)

-- | Date and time that the alias was most recently created in the account
--   and Region. Formatted as Unix time.
aliasListEntry_creationDate :: Lens' AliasListEntry (Maybe UTCTime)

-- | String that contains the alias. This value begins with
--   <tt>alias/</tt>.
aliasListEntry_aliasName :: Lens' AliasListEntry (Maybe Text)

-- | String that contains the key identifier of the KMS key associated with
--   the alias.
aliasListEntry_targetKeyId :: Lens' AliasListEntry (Maybe Text)

-- | String that contains the key ARN.
aliasListEntry_aliasArn :: Lens' AliasListEntry (Maybe Text)

-- | Contains information about each custom key store in the custom key
--   store list.
--   
--   <i>See:</i> <a>newCustomKeyStoresListEntry</a> smart constructor.
data CustomKeyStoresListEntry
CustomKeyStoresListEntry' :: Maybe Text -> Maybe ConnectionStateType -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe ConnectionErrorCodeType -> CustomKeyStoresListEntry

-- | The user-specified friendly name for the custom key store.
[$sel:customKeyStoreName:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe Text

-- | Indicates whether the custom key store is connected to its CloudHSM
--   cluster.
--   
--   You can create and use KMS keys in your custom key stores only when
--   its connection state is <tt>CONNECTED</tt>.
--   
--   The value is <tt>DISCONNECTED</tt> if the key store has never been
--   connected or you use the DisconnectCustomKeyStore operation to
--   disconnect it. If the value is <tt>CONNECTED</tt> but you are having
--   trouble using the custom key store, make sure that its associated
--   CloudHSM cluster is active and contains at least one active HSM.
--   
--   A value of <tt>FAILED</tt> indicates that an attempt to connect was
--   unsuccessful. The <tt>ConnectionErrorCode</tt> field in the response
--   indicates the cause of the failure. For help resolving a connection
--   failure, see <a>Troubleshooting a Custom Key Store</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:connectionState:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe ConnectionStateType

-- | A unique identifier for the custom key store.
[$sel:customKeyStoreId:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe Text

-- | The trust anchor certificate of the associated CloudHSM cluster. When
--   you <a>initialize the cluster</a>, you create this certificate and
--   save it in the <tt>customerCA.crt</tt> file.
[$sel:trustAnchorCertificate:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe Text

-- | A unique identifier for the CloudHSM cluster that is associated with
--   the custom key store.
[$sel:cloudHsmClusterId:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe Text

-- | The date and time when the custom key store was created.
[$sel:creationDate:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe POSIX

-- | Describes the connection error. This field appears in the response
--   only when the <tt>ConnectionState</tt> is <tt>FAILED</tt>. For help
--   resolving these errors, see <a>How to Fix a Connection Failure</a> in
--   <i>Key Management Service Developer Guide</i>.
--   
--   Valid values are:
--   
--   <ul>
--   <li><tt>CLUSTER_NOT_FOUND</tt> - KMS cannot find the CloudHSM cluster
--   with the specified cluster ID.</li>
--   <li><tt>INSUFFICIENT_CLOUDHSM_HSMS</tt> - The associated CloudHSM
--   cluster does not contain any active HSMs. To connect a custom key
--   store to its CloudHSM cluster, the cluster must contain at least one
--   active HSM.</li>
--   <li><tt>INTERNAL_ERROR</tt> - KMS could not complete the request due
--   to an internal error. Retry the request. For
--   <tt>ConnectCustomKeyStore</tt> requests, disconnect the custom key
--   store before trying to connect again.</li>
--   <li><tt>INVALID_CREDENTIALS</tt> - KMS does not have the correct
--   password for the <tt>kmsuser</tt> crypto user in the CloudHSM cluster.
--   Before you can connect your custom key store to its CloudHSM cluster,
--   you must change the <tt>kmsuser</tt> account password and update the
--   key store password value for the custom key store.</li>
--   <li><tt>NETWORK_ERRORS</tt> - Network errors are preventing KMS from
--   connecting to the custom key store.</li>
--   <li><tt>SUBNET_NOT_FOUND</tt> - A subnet in the CloudHSM cluster
--   configuration was deleted. If KMS cannot find all of the subnets in
--   the cluster configuration, attempts to connect the custom key store to
--   the CloudHSM cluster fail. To fix this error, create a cluster from a
--   recent backup and associate it with your custom key store. (This
--   process creates a new cluster configuration with a VPC and private
--   subnets.) For details, see <a>How to Fix a Connection Failure</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_LOCKED_OUT</tt> - The <tt>kmsuser</tt> CU account is
--   locked out of the associated CloudHSM cluster due to too many failed
--   password attempts. Before you can connect your custom key store to its
--   CloudHSM cluster, you must change the <tt>kmsuser</tt> account
--   password and update the key store password value for the custom key
--   store.</li>
--   <li><tt>USER_LOGGED_IN</tt> - The <tt>kmsuser</tt> CU account is
--   logged into the the associated CloudHSM cluster. This prevents KMS
--   from rotating the <tt>kmsuser</tt> account password and logging into
--   the cluster. Before you can connect your custom key store to its
--   CloudHSM cluster, you must log the <tt>kmsuser</tt> CU out of the
--   cluster. If you changed the <tt>kmsuser</tt> password to log into the
--   cluster, you must also and update the key store password value for the
--   custom key store. For help, see <a>How to Log Out and Reconnect</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_NOT_FOUND</tt> - KMS cannot find a <tt>kmsuser</tt> CU
--   account in the associated CloudHSM cluster. Before you can connect
--   your custom key store to its CloudHSM cluster, you must create a
--   <tt>kmsuser</tt> CU account in the cluster, and then update the key
--   store password value for the custom key store.</li>
--   </ul>
[$sel:connectionErrorCode:CustomKeyStoresListEntry'] :: CustomKeyStoresListEntry -> Maybe ConnectionErrorCodeType

-- | Create a value of <a>CustomKeyStoresListEntry</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreName:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_customKeyStoreName</a> - The
--   user-specified friendly name for the custom key store.
--   
--   <a>$sel:connectionState:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_connectionState</a> - Indicates whether
--   the custom key store is connected to its CloudHSM cluster.
--   
--   You can create and use KMS keys in your custom key stores only when
--   its connection state is <tt>CONNECTED</tt>.
--   
--   The value is <tt>DISCONNECTED</tt> if the key store has never been
--   connected or you use the DisconnectCustomKeyStore operation to
--   disconnect it. If the value is <tt>CONNECTED</tt> but you are having
--   trouble using the custom key store, make sure that its associated
--   CloudHSM cluster is active and contains at least one active HSM.
--   
--   A value of <tt>FAILED</tt> indicates that an attempt to connect was
--   unsuccessful. The <tt>ConnectionErrorCode</tt> field in the response
--   indicates the cause of the failure. For help resolving a connection
--   failure, see <a>Troubleshooting a Custom Key Store</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:customKeyStoreId:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_customKeyStoreId</a> - A unique identifier
--   for the custom key store.
--   
--   <a>$sel:trustAnchorCertificate:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_trustAnchorCertificate</a> - The trust
--   anchor certificate of the associated CloudHSM cluster. When you
--   <a>initialize the cluster</a>, you create this certificate and save it
--   in the <tt>customerCA.crt</tt> file.
--   
--   <a>$sel:cloudHsmClusterId:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_cloudHsmClusterId</a> - A unique
--   identifier for the CloudHSM cluster that is associated with the custom
--   key store.
--   
--   <a>$sel:creationDate:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_creationDate</a> - The date and time when
--   the custom key store was created.
--   
--   <a>$sel:connectionErrorCode:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_connectionErrorCode</a> - Describes the
--   connection error. This field appears in the response only when the
--   <tt>ConnectionState</tt> is <tt>FAILED</tt>. For help resolving these
--   errors, see <a>How to Fix a Connection Failure</a> in <i>Key
--   Management Service Developer Guide</i>.
--   
--   Valid values are:
--   
--   <ul>
--   <li><tt>CLUSTER_NOT_FOUND</tt> - KMS cannot find the CloudHSM cluster
--   with the specified cluster ID.</li>
--   <li><tt>INSUFFICIENT_CLOUDHSM_HSMS</tt> - The associated CloudHSM
--   cluster does not contain any active HSMs. To connect a custom key
--   store to its CloudHSM cluster, the cluster must contain at least one
--   active HSM.</li>
--   <li><tt>INTERNAL_ERROR</tt> - KMS could not complete the request due
--   to an internal error. Retry the request. For
--   <tt>ConnectCustomKeyStore</tt> requests, disconnect the custom key
--   store before trying to connect again.</li>
--   <li><tt>INVALID_CREDENTIALS</tt> - KMS does not have the correct
--   password for the <tt>kmsuser</tt> crypto user in the CloudHSM cluster.
--   Before you can connect your custom key store to its CloudHSM cluster,
--   you must change the <tt>kmsuser</tt> account password and update the
--   key store password value for the custom key store.</li>
--   <li><tt>NETWORK_ERRORS</tt> - Network errors are preventing KMS from
--   connecting to the custom key store.</li>
--   <li><tt>SUBNET_NOT_FOUND</tt> - A subnet in the CloudHSM cluster
--   configuration was deleted. If KMS cannot find all of the subnets in
--   the cluster configuration, attempts to connect the custom key store to
--   the CloudHSM cluster fail. To fix this error, create a cluster from a
--   recent backup and associate it with your custom key store. (This
--   process creates a new cluster configuration with a VPC and private
--   subnets.) For details, see <a>How to Fix a Connection Failure</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_LOCKED_OUT</tt> - The <tt>kmsuser</tt> CU account is
--   locked out of the associated CloudHSM cluster due to too many failed
--   password attempts. Before you can connect your custom key store to its
--   CloudHSM cluster, you must change the <tt>kmsuser</tt> account
--   password and update the key store password value for the custom key
--   store.</li>
--   <li><tt>USER_LOGGED_IN</tt> - The <tt>kmsuser</tt> CU account is
--   logged into the the associated CloudHSM cluster. This prevents KMS
--   from rotating the <tt>kmsuser</tt> account password and logging into
--   the cluster. Before you can connect your custom key store to its
--   CloudHSM cluster, you must log the <tt>kmsuser</tt> CU out of the
--   cluster. If you changed the <tt>kmsuser</tt> password to log into the
--   cluster, you must also and update the key store password value for the
--   custom key store. For help, see <a>How to Log Out and Reconnect</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_NOT_FOUND</tt> - KMS cannot find a <tt>kmsuser</tt> CU
--   account in the associated CloudHSM cluster. Before you can connect
--   your custom key store to its CloudHSM cluster, you must create a
--   <tt>kmsuser</tt> CU account in the cluster, and then update the key
--   store password value for the custom key store.</li>
--   </ul>
newCustomKeyStoresListEntry :: CustomKeyStoresListEntry

-- | The user-specified friendly name for the custom key store.
customKeyStoresListEntry_customKeyStoreName :: Lens' CustomKeyStoresListEntry (Maybe Text)

-- | Indicates whether the custom key store is connected to its CloudHSM
--   cluster.
--   
--   You can create and use KMS keys in your custom key stores only when
--   its connection state is <tt>CONNECTED</tt>.
--   
--   The value is <tt>DISCONNECTED</tt> if the key store has never been
--   connected or you use the DisconnectCustomKeyStore operation to
--   disconnect it. If the value is <tt>CONNECTED</tt> but you are having
--   trouble using the custom key store, make sure that its associated
--   CloudHSM cluster is active and contains at least one active HSM.
--   
--   A value of <tt>FAILED</tt> indicates that an attempt to connect was
--   unsuccessful. The <tt>ConnectionErrorCode</tt> field in the response
--   indicates the cause of the failure. For help resolving a connection
--   failure, see <a>Troubleshooting a Custom Key Store</a> in the <i>Key
--   Management Service Developer Guide</i>.
customKeyStoresListEntry_connectionState :: Lens' CustomKeyStoresListEntry (Maybe ConnectionStateType)

-- | A unique identifier for the custom key store.
customKeyStoresListEntry_customKeyStoreId :: Lens' CustomKeyStoresListEntry (Maybe Text)

-- | The trust anchor certificate of the associated CloudHSM cluster. When
--   you <a>initialize the cluster</a>, you create this certificate and
--   save it in the <tt>customerCA.crt</tt> file.
customKeyStoresListEntry_trustAnchorCertificate :: Lens' CustomKeyStoresListEntry (Maybe Text)

-- | A unique identifier for the CloudHSM cluster that is associated with
--   the custom key store.
customKeyStoresListEntry_cloudHsmClusterId :: Lens' CustomKeyStoresListEntry (Maybe Text)

-- | The date and time when the custom key store was created.
customKeyStoresListEntry_creationDate :: Lens' CustomKeyStoresListEntry (Maybe UTCTime)

-- | Describes the connection error. This field appears in the response
--   only when the <tt>ConnectionState</tt> is <tt>FAILED</tt>. For help
--   resolving these errors, see <a>How to Fix a Connection Failure</a> in
--   <i>Key Management Service Developer Guide</i>.
--   
--   Valid values are:
--   
--   <ul>
--   <li><tt>CLUSTER_NOT_FOUND</tt> - KMS cannot find the CloudHSM cluster
--   with the specified cluster ID.</li>
--   <li><tt>INSUFFICIENT_CLOUDHSM_HSMS</tt> - The associated CloudHSM
--   cluster does not contain any active HSMs. To connect a custom key
--   store to its CloudHSM cluster, the cluster must contain at least one
--   active HSM.</li>
--   <li><tt>INTERNAL_ERROR</tt> - KMS could not complete the request due
--   to an internal error. Retry the request. For
--   <tt>ConnectCustomKeyStore</tt> requests, disconnect the custom key
--   store before trying to connect again.</li>
--   <li><tt>INVALID_CREDENTIALS</tt> - KMS does not have the correct
--   password for the <tt>kmsuser</tt> crypto user in the CloudHSM cluster.
--   Before you can connect your custom key store to its CloudHSM cluster,
--   you must change the <tt>kmsuser</tt> account password and update the
--   key store password value for the custom key store.</li>
--   <li><tt>NETWORK_ERRORS</tt> - Network errors are preventing KMS from
--   connecting to the custom key store.</li>
--   <li><tt>SUBNET_NOT_FOUND</tt> - A subnet in the CloudHSM cluster
--   configuration was deleted. If KMS cannot find all of the subnets in
--   the cluster configuration, attempts to connect the custom key store to
--   the CloudHSM cluster fail. To fix this error, create a cluster from a
--   recent backup and associate it with your custom key store. (This
--   process creates a new cluster configuration with a VPC and private
--   subnets.) For details, see <a>How to Fix a Connection Failure</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_LOCKED_OUT</tt> - The <tt>kmsuser</tt> CU account is
--   locked out of the associated CloudHSM cluster due to too many failed
--   password attempts. Before you can connect your custom key store to its
--   CloudHSM cluster, you must change the <tt>kmsuser</tt> account
--   password and update the key store password value for the custom key
--   store.</li>
--   <li><tt>USER_LOGGED_IN</tt> - The <tt>kmsuser</tt> CU account is
--   logged into the the associated CloudHSM cluster. This prevents KMS
--   from rotating the <tt>kmsuser</tt> account password and logging into
--   the cluster. Before you can connect your custom key store to its
--   CloudHSM cluster, you must log the <tt>kmsuser</tt> CU out of the
--   cluster. If you changed the <tt>kmsuser</tt> password to log into the
--   cluster, you must also and update the key store password value for the
--   custom key store. For help, see <a>How to Log Out and Reconnect</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_NOT_FOUND</tt> - KMS cannot find a <tt>kmsuser</tt> CU
--   account in the associated CloudHSM cluster. Before you can connect
--   your custom key store to its CloudHSM cluster, you must create a
--   <tt>kmsuser</tt> CU account in the cluster, and then update the key
--   store password value for the custom key store.</li>
--   </ul>
customKeyStoresListEntry_connectionErrorCode :: Lens' CustomKeyStoresListEntry (Maybe ConnectionErrorCodeType)

-- | Use this structure to allow <a>cryptographic operations</a> in the
--   grant only when the operation request includes the specified
--   <a>encryption context</a>.
--   
--   KMS applies the grant constraints only to cryptographic operations
--   that support an encryption context, that is, all cryptographic
--   operations with a <a>symmetric KMS key</a>. Grant constraints are not
--   applied to operations that do not support an encryption context, such
--   as cryptographic operations with asymmetric KMS keys and management
--   operations, such as DescribeKey or RetireGrant.
--   
--   In a cryptographic operation, the encryption context in the decryption
--   operation must be an exact, case-sensitive match for the keys and
--   values in the encryption context of the encryption operation. Only the
--   order of the pairs can vary.
--   
--   However, in a grant constraint, the key in each key-value pair is not
--   case sensitive, but the value is case sensitive.
--   
--   To avoid confusion, do not use multiple encryption context pairs that
--   differ only by case. To require a fully case-sensitive encryption
--   context, use the <tt>kms:EncryptionContext:</tt> and
--   <tt>kms:EncryptionContextKeys</tt> conditions in an IAM or key policy.
--   For details, see <a>kms:EncryptionContext:</a> in the /<i>Key
--   Management Service Developer Guide</i>/ .
--   
--   <i>See:</i> <a>newGrantConstraints</a> smart constructor.
data GrantConstraints
GrantConstraints' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text Text) -> GrantConstraints

-- | A list of key-value pairs that must match the encryption context in
--   the <a>cryptographic operation</a> request. The grant allows the
--   operation only when the encryption context in the request is the same
--   as the encryption context specified in this constraint.
[$sel:encryptionContextEquals:GrantConstraints'] :: GrantConstraints -> Maybe (HashMap Text Text)

-- | A list of key-value pairs that must be included in the encryption
--   context of the <a>cryptographic operation</a> request. The grant
--   allows the cryptographic operation only when the encryption context in
--   the request includes the key-value pairs specified in this constraint,
--   although it can include additional key-value pairs.
[$sel:encryptionContextSubset:GrantConstraints'] :: GrantConstraints -> Maybe (HashMap Text Text)

-- | Create a value of <a>GrantConstraints</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionContextEquals:GrantConstraints'</a>,
--   <a>grantConstraints_encryptionContextEquals</a> - A list of key-value
--   pairs that must match the encryption context in the <a>cryptographic
--   operation</a> request. The grant allows the operation only when the
--   encryption context in the request is the same as the encryption
--   context specified in this constraint.
--   
--   <a>$sel:encryptionContextSubset:GrantConstraints'</a>,
--   <a>grantConstraints_encryptionContextSubset</a> - A list of key-value
--   pairs that must be included in the encryption context of the
--   <a>cryptographic operation</a> request. The grant allows the
--   cryptographic operation only when the encryption context in the
--   request includes the key-value pairs specified in this constraint,
--   although it can include additional key-value pairs.
newGrantConstraints :: GrantConstraints

-- | A list of key-value pairs that must match the encryption context in
--   the <a>cryptographic operation</a> request. The grant allows the
--   operation only when the encryption context in the request is the same
--   as the encryption context specified in this constraint.
grantConstraints_encryptionContextEquals :: Lens' GrantConstraints (Maybe (HashMap Text Text))

-- | A list of key-value pairs that must be included in the encryption
--   context of the <a>cryptographic operation</a> request. The grant
--   allows the cryptographic operation only when the encryption context in
--   the request includes the key-value pairs specified in this constraint,
--   although it can include additional key-value pairs.
grantConstraints_encryptionContextSubset :: Lens' GrantConstraints (Maybe (HashMap Text Text))

-- | Contains information about a grant.
--   
--   <i>See:</i> <a>newGrantListEntry</a> smart constructor.
data GrantListEntry
GrantListEntry' :: Maybe GrantConstraints -> Maybe [GrantOperation] -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> GrantListEntry

-- | A list of key-value pairs that must be present in the encryption
--   context of certain subsequent operations that the grant allows.
[$sel:constraints:GrantListEntry'] :: GrantListEntry -> Maybe GrantConstraints

-- | The list of operations permitted by the grant.
[$sel:operations:GrantListEntry'] :: GrantListEntry -> Maybe [GrantOperation]

-- | The date and time when the grant was created.
[$sel:creationDate:GrantListEntry'] :: GrantListEntry -> Maybe POSIX

-- | The friendly name that identifies the grant. If a name was provided in
--   the CreateGrant request, that name is returned. Otherwise this value
--   is null.
[$sel:name:GrantListEntry'] :: GrantListEntry -> Maybe Text

-- | The identity that gets the permissions in the grant.
--   
--   The <tt>GranteePrincipal</tt> field in the <tt>ListGrants</tt>
--   response usually contains the user or role designated as the grantee
--   principal in the grant. However, when the grantee principal in the
--   grant is an Amazon Web Services service, the <tt>GranteePrincipal</tt>
--   field contains the <a>service principal</a>, which might represent
--   several different grantee principals.
[$sel:granteePrincipal:GrantListEntry'] :: GrantListEntry -> Maybe Text

-- | The unique identifier for the grant.
[$sel:grantId:GrantListEntry'] :: GrantListEntry -> Maybe Text

-- | The Amazon Web Services account under which the grant was issued.
[$sel:issuingAccount:GrantListEntry'] :: GrantListEntry -> Maybe Text

-- | The principal that can retire the grant.
[$sel:retiringPrincipal:GrantListEntry'] :: GrantListEntry -> Maybe Text

-- | The unique identifier for the KMS key to which the grant applies.
[$sel:keyId:GrantListEntry'] :: GrantListEntry -> Maybe Text

-- | Create a value of <a>GrantListEntry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:constraints:GrantListEntry'</a>,
--   <a>grantListEntry_constraints</a> - A list of key-value pairs that
--   must be present in the encryption context of certain subsequent
--   operations that the grant allows.
--   
--   <a>$sel:operations:GrantListEntry'</a>,
--   <a>grantListEntry_operations</a> - The list of operations permitted by
--   the grant.
--   
--   <a>$sel:creationDate:GrantListEntry'</a>,
--   <a>grantListEntry_creationDate</a> - The date and time when the grant
--   was created.
--   
--   <a>$sel:name:GrantListEntry'</a>, <a>grantListEntry_name</a> - The
--   friendly name that identifies the grant. If a name was provided in the
--   CreateGrant request, that name is returned. Otherwise this value is
--   null.
--   
--   <a>$sel:granteePrincipal:GrantListEntry'</a>,
--   <a>grantListEntry_granteePrincipal</a> - The identity that gets the
--   permissions in the grant.
--   
--   The <tt>GranteePrincipal</tt> field in the <tt>ListGrants</tt>
--   response usually contains the user or role designated as the grantee
--   principal in the grant. However, when the grantee principal in the
--   grant is an Amazon Web Services service, the <tt>GranteePrincipal</tt>
--   field contains the <a>service principal</a>, which might represent
--   several different grantee principals.
--   
--   <a>$sel:grantId:GrantListEntry'</a>, <a>grantListEntry_grantId</a> -
--   The unique identifier for the grant.
--   
--   <a>$sel:issuingAccount:GrantListEntry'</a>,
--   <a>grantListEntry_issuingAccount</a> - The Amazon Web Services account
--   under which the grant was issued.
--   
--   <a>$sel:retiringPrincipal:GrantListEntry'</a>,
--   <a>grantListEntry_retiringPrincipal</a> - The principal that can
--   retire the grant.
--   
--   <a>$sel:keyId:GrantListEntry'</a>, <a>grantListEntry_keyId</a> - The
--   unique identifier for the KMS key to which the grant applies.
newGrantListEntry :: GrantListEntry

-- | A list of key-value pairs that must be present in the encryption
--   context of certain subsequent operations that the grant allows.
grantListEntry_constraints :: Lens' GrantListEntry (Maybe GrantConstraints)

-- | The list of operations permitted by the grant.
grantListEntry_operations :: Lens' GrantListEntry (Maybe [GrantOperation])

-- | The date and time when the grant was created.
grantListEntry_creationDate :: Lens' GrantListEntry (Maybe UTCTime)

-- | The friendly name that identifies the grant. If a name was provided in
--   the CreateGrant request, that name is returned. Otherwise this value
--   is null.
grantListEntry_name :: Lens' GrantListEntry (Maybe Text)

-- | The identity that gets the permissions in the grant.
--   
--   The <tt>GranteePrincipal</tt> field in the <tt>ListGrants</tt>
--   response usually contains the user or role designated as the grantee
--   principal in the grant. However, when the grantee principal in the
--   grant is an Amazon Web Services service, the <tt>GranteePrincipal</tt>
--   field contains the <a>service principal</a>, which might represent
--   several different grantee principals.
grantListEntry_granteePrincipal :: Lens' GrantListEntry (Maybe Text)

-- | The unique identifier for the grant.
grantListEntry_grantId :: Lens' GrantListEntry (Maybe Text)

-- | The Amazon Web Services account under which the grant was issued.
grantListEntry_issuingAccount :: Lens' GrantListEntry (Maybe Text)

-- | The principal that can retire the grant.
grantListEntry_retiringPrincipal :: Lens' GrantListEntry (Maybe Text)

-- | The unique identifier for the KMS key to which the grant applies.
grantListEntry_keyId :: Lens' GrantListEntry (Maybe Text)

-- | Contains information about each entry in the key list.
--   
--   <i>See:</i> <a>newKeyListEntry</a> smart constructor.
data KeyListEntry
KeyListEntry' :: Maybe Text -> Maybe Text -> KeyListEntry

-- | ARN of the key.
[$sel:keyArn:KeyListEntry'] :: KeyListEntry -> Maybe Text

-- | Unique identifier of the key.
[$sel:keyId:KeyListEntry'] :: KeyListEntry -> Maybe Text

-- | Create a value of <a>KeyListEntry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyArn:KeyListEntry'</a>, <a>keyListEntry_keyArn</a> - ARN of
--   the key.
--   
--   <a>$sel:keyId:KeyListEntry'</a>, <a>keyListEntry_keyId</a> - Unique
--   identifier of the key.
newKeyListEntry :: KeyListEntry

-- | ARN of the key.
keyListEntry_keyArn :: Lens' KeyListEntry (Maybe Text)

-- | Unique identifier of the key.
keyListEntry_keyId :: Lens' KeyListEntry (Maybe Text)

-- | Contains metadata about a KMS key.
--   
--   This data type is used as a response element for the CreateKey and
--   DescribeKey operations.
--   
--   <i>See:</i> <a>newKeyMetadata</a> smart constructor.
data KeyMetadata
KeyMetadata' :: Maybe [SigningAlgorithmSpec] -> Maybe Natural -> Maybe OriginType -> Maybe KeyManagerType -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe [EncryptionAlgorithmSpec] -> Maybe Text -> Maybe KeyState -> Maybe Text -> Maybe Bool -> Maybe POSIX -> Maybe POSIX -> Maybe ExpirationModelType -> Maybe MultiRegionConfiguration -> Maybe Text -> Maybe POSIX -> Maybe KeySpec -> Maybe CustomerMasterKeySpec -> Maybe KeyUsageType -> Text -> KeyMetadata

-- | The signing algorithms that the KMS key supports. You cannot use the
--   KMS key with other signing algorithms within KMS.
--   
--   This field appears only when the <tt>KeyUsage</tt> of the KMS key is
--   <tt>SIGN_VERIFY</tt>.
[$sel:signingAlgorithms:KeyMetadata'] :: KeyMetadata -> Maybe [SigningAlgorithmSpec]

-- | The waiting period before the primary key in a multi-Region key is
--   deleted. This waiting period begins when the last of its replica keys
--   is deleted. This value is present only when the <tt>KeyState</tt> of
--   the KMS key is <tt>PendingReplicaDeletion</tt>. That indicates that
--   the KMS key is the primary key in a multi-Region key, it is scheduled
--   for deletion, and it still has existing replica keys.
--   
--   When a single-Region KMS key or a multi-Region replica key is
--   scheduled for deletion, its deletion date is displayed in the
--   <tt>DeletionDate</tt> field. However, when the primary key in a
--   multi-Region key is scheduled for deletion, its waiting period doesn't
--   begin until all of its replica keys are deleted. This value displays
--   that waiting period. When the last replica key in the multi-Region key
--   is deleted, the <tt>KeyState</tt> of the scheduled primary key changes
--   from <tt>PendingReplicaDeletion</tt> to <tt>PendingDeletion</tt> and
--   the deletion date appears in the <tt>DeletionDate</tt> field.
[$sel:pendingDeletionWindowInDays:KeyMetadata'] :: KeyMetadata -> Maybe Natural

-- | The source of the key material for the KMS key. When this value is
--   <tt>AWS_KMS</tt>, KMS created the key material. When this value is
--   <tt>EXTERNAL</tt>, the key material was imported or the KMS key
--   doesn't have any key material. When this value is
--   <tt>AWS_CLOUDHSM</tt>, the key material was created in the CloudHSM
--   cluster associated with a custom key store.
[$sel:origin:KeyMetadata'] :: KeyMetadata -> Maybe OriginType

-- | The manager of the KMS key. KMS keys in your Amazon Web Services
--   account are either customer managed or Amazon Web Services managed.
--   For more information about the difference, see <a>KMS keys</a> in the
--   <i>Key Management Service Developer Guide</i>.
[$sel:keyManager:KeyMetadata'] :: KeyMetadata -> Maybe KeyManagerType

-- | The twelve-digit account ID of the Amazon Web Services account that
--   owns the KMS key.
[$sel:aWSAccountId:KeyMetadata'] :: KeyMetadata -> Maybe Text

-- | Indicates whether the KMS key is a multi-Region (<tt>True</tt>) or
--   regional (<tt>False</tt>) key. This value is <tt>True</tt> for
--   multi-Region primary and replica keys and <tt>False</tt> for regional
--   KMS keys.
--   
--   For more information about multi-Region keys, see <a>Using
--   multi-Region keys</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:multiRegion:KeyMetadata'] :: KeyMetadata -> Maybe Bool

-- | A unique identifier for the <a>custom key store</a> that contains the
--   KMS key. This value is present only when the KMS key is created in a
--   custom key store.
[$sel:customKeyStoreId:KeyMetadata'] :: KeyMetadata -> Maybe Text

-- | The encryption algorithms that the KMS key supports. You cannot use
--   the KMS key with other encryption algorithms within KMS.
--   
--   This value is present only when the <tt>KeyUsage</tt> of the KMS key
--   is <tt>ENCRYPT_DECRYPT</tt>.
[$sel:encryptionAlgorithms:KeyMetadata'] :: KeyMetadata -> Maybe [EncryptionAlgorithmSpec]

-- | The cluster ID of the CloudHSM cluster that contains the key material
--   for the KMS key. When you create a KMS key in a <a>custom key
--   store</a>, KMS creates the key material for the KMS key in the
--   associated CloudHSM cluster. This value is present only when the KMS
--   key is created in a custom key store.
[$sel:cloudHsmClusterId:KeyMetadata'] :: KeyMetadata -> Maybe Text

-- | The current status of the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
[$sel:keyState:KeyMetadata'] :: KeyMetadata -> Maybe KeyState

-- | The Amazon Resource Name (ARN) of the KMS key. For examples, see
--   <a>Key Management Service (KMS)</a> in the Example ARNs section of the
--   /Amazon Web Services General Reference/.
[$sel:arn:KeyMetadata'] :: KeyMetadata -> Maybe Text

-- | Specifies whether the KMS key is enabled. When <tt>KeyState</tt> is
--   <tt>Enabled</tt> this value is true, otherwise it is false.
[$sel:enabled:KeyMetadata'] :: KeyMetadata -> Maybe Bool

-- | The date and time when the KMS key was created.
[$sel:creationDate:KeyMetadata'] :: KeyMetadata -> Maybe POSIX

-- | The time at which the imported key material expires. When the key
--   material expires, KMS deletes the key material and the KMS key becomes
--   unusable. This value is present only for KMS keys whose
--   <tt>Origin</tt> is <tt>EXTERNAL</tt> and whose
--   <tt>ExpirationModel</tt> is <tt>KEY_MATERIAL_EXPIRES</tt>, otherwise
--   this value is omitted.
[$sel:validTo:KeyMetadata'] :: KeyMetadata -> Maybe POSIX

-- | Specifies whether the KMS key's key material expires. This value is
--   present only when <tt>Origin</tt> is <tt>EXTERNAL</tt>, otherwise this
--   value is omitted.
[$sel:expirationModel:KeyMetadata'] :: KeyMetadata -> Maybe ExpirationModelType

-- | Lists the primary and replica keys in same multi-Region key. This
--   field is present only when the value of the <tt>MultiRegion</tt> field
--   is <tt>True</tt>.
--   
--   For more information about any listed KMS key, use the DescribeKey
--   operation.
--   
--   <ul>
--   <li><tt>MultiRegionKeyType</tt> indicates whether the KMS key is a
--   <tt>PRIMARY</tt> or <tt>REPLICA</tt> key.</li>
--   <li><tt>PrimaryKey</tt> displays the key ARN and Region of the primary
--   key. This field displays the current KMS key if it is the primary
--   key.</li>
--   <li><tt>ReplicaKeys</tt> displays the key ARNs and Regions of all
--   replica keys. This field includes the current KMS key if it is a
--   replica key.</li>
--   </ul>
[$sel:multiRegionConfiguration:KeyMetadata'] :: KeyMetadata -> Maybe MultiRegionConfiguration

-- | The description of the KMS key.
[$sel:description:KeyMetadata'] :: KeyMetadata -> Maybe Text

-- | The date and time after which KMS deletes this KMS key. This value is
--   present only when the KMS key is scheduled for deletion, that is, when
--   its <tt>KeyState</tt> is <tt>PendingDeletion</tt>.
--   
--   When the primary key in a multi-Region key is scheduled for deletion
--   but still has replica keys, its key state is
--   <tt>PendingReplicaDeletion</tt> and the length of its waiting period
--   is displayed in the <tt>PendingDeletionWindowInDays</tt> field.
[$sel:deletionDate:KeyMetadata'] :: KeyMetadata -> Maybe POSIX

-- | Describes the type of key material in the KMS key.
[$sel:keySpec:KeyMetadata'] :: KeyMetadata -> Maybe KeySpec

-- | Instead, use the <tt>KeySpec</tt> field.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
[$sel:customerMasterKeySpec:KeyMetadata'] :: KeyMetadata -> Maybe CustomerMasterKeySpec

-- | The <a>cryptographic operations</a> for which you can use the KMS key.
[$sel:keyUsage:KeyMetadata'] :: KeyMetadata -> Maybe KeyUsageType

-- | The globally unique identifier for the KMS key.
[$sel:keyId:KeyMetadata'] :: KeyMetadata -> Text

-- | Create a value of <a>KeyMetadata</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signingAlgorithms:KeyMetadata'</a>,
--   <a>keyMetadata_signingAlgorithms</a> - The signing algorithms that the
--   KMS key supports. You cannot use the KMS key with other signing
--   algorithms within KMS.
--   
--   This field appears only when the <tt>KeyUsage</tt> of the KMS key is
--   <tt>SIGN_VERIFY</tt>.
--   
--   <a>$sel:pendingDeletionWindowInDays:KeyMetadata'</a>,
--   <a>keyMetadata_pendingDeletionWindowInDays</a> - The waiting period
--   before the primary key in a multi-Region key is deleted. This waiting
--   period begins when the last of its replica keys is deleted. This value
--   is present only when the <tt>KeyState</tt> of the KMS key is
--   <tt>PendingReplicaDeletion</tt>. That indicates that the KMS key is
--   the primary key in a multi-Region key, it is scheduled for deletion,
--   and it still has existing replica keys.
--   
--   When a single-Region KMS key or a multi-Region replica key is
--   scheduled for deletion, its deletion date is displayed in the
--   <tt>DeletionDate</tt> field. However, when the primary key in a
--   multi-Region key is scheduled for deletion, its waiting period doesn't
--   begin until all of its replica keys are deleted. This value displays
--   that waiting period. When the last replica key in the multi-Region key
--   is deleted, the <tt>KeyState</tt> of the scheduled primary key changes
--   from <tt>PendingReplicaDeletion</tt> to <tt>PendingDeletion</tt> and
--   the deletion date appears in the <tt>DeletionDate</tt> field.
--   
--   <a>$sel:origin:KeyMetadata'</a>, <a>keyMetadata_origin</a> - The
--   source of the key material for the KMS key. When this value is
--   <tt>AWS_KMS</tt>, KMS created the key material. When this value is
--   <tt>EXTERNAL</tt>, the key material was imported or the KMS key
--   doesn't have any key material. When this value is
--   <tt>AWS_CLOUDHSM</tt>, the key material was created in the CloudHSM
--   cluster associated with a custom key store.
--   
--   <a>$sel:keyManager:KeyMetadata'</a>, <a>keyMetadata_keyManager</a> -
--   The manager of the KMS key. KMS keys in your Amazon Web Services
--   account are either customer managed or Amazon Web Services managed.
--   For more information about the difference, see <a>KMS keys</a> in the
--   <i>Key Management Service Developer Guide</i>.
--   
--   <a>$sel:aWSAccountId:KeyMetadata'</a>, <a>keyMetadata_aWSAccountId</a>
--   - The twelve-digit account ID of the Amazon Web Services account that
--   owns the KMS key.
--   
--   <a>$sel:multiRegion:KeyMetadata'</a>, <a>keyMetadata_multiRegion</a> -
--   Indicates whether the KMS key is a multi-Region (<tt>True</tt>) or
--   regional (<tt>False</tt>) key. This value is <tt>True</tt> for
--   multi-Region primary and replica keys and <tt>False</tt> for regional
--   KMS keys.
--   
--   For more information about multi-Region keys, see <a>Using
--   multi-Region keys</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:customKeyStoreId:KeyMetadata'</a>,
--   <a>keyMetadata_customKeyStoreId</a> - A unique identifier for the
--   <a>custom key store</a> that contains the KMS key. This value is
--   present only when the KMS key is created in a custom key store.
--   
--   <a>$sel:encryptionAlgorithms:KeyMetadata'</a>,
--   <a>keyMetadata_encryptionAlgorithms</a> - The encryption algorithms
--   that the KMS key supports. You cannot use the KMS key with other
--   encryption algorithms within KMS.
--   
--   This value is present only when the <tt>KeyUsage</tt> of the KMS key
--   is <tt>ENCRYPT_DECRYPT</tt>.
--   
--   <a>$sel:cloudHsmClusterId:KeyMetadata'</a>,
--   <a>keyMetadata_cloudHsmClusterId</a> - The cluster ID of the CloudHSM
--   cluster that contains the key material for the KMS key. When you
--   create a KMS key in a <a>custom key store</a>, KMS creates the key
--   material for the KMS key in the associated CloudHSM cluster. This
--   value is present only when the KMS key is created in a custom key
--   store.
--   
--   <a>$sel:keyState:KeyMetadata'</a>, <a>keyMetadata_keyState</a> - The
--   current status of the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   <a>$sel:arn:KeyMetadata'</a>, <a>keyMetadata_arn</a> - The Amazon
--   Resource Name (ARN) of the KMS key. For examples, see <a>Key
--   Management Service (KMS)</a> in the Example ARNs section of the
--   /Amazon Web Services General Reference/.
--   
--   <a>$sel:enabled:KeyMetadata'</a>, <a>keyMetadata_enabled</a> -
--   Specifies whether the KMS key is enabled. When <tt>KeyState</tt> is
--   <tt>Enabled</tt> this value is true, otherwise it is false.
--   
--   <a>$sel:creationDate:KeyMetadata'</a>, <a>keyMetadata_creationDate</a>
--   - The date and time when the KMS key was created.
--   
--   <a>$sel:validTo:KeyMetadata'</a>, <a>keyMetadata_validTo</a> - The
--   time at which the imported key material expires. When the key material
--   expires, KMS deletes the key material and the KMS key becomes
--   unusable. This value is present only for KMS keys whose
--   <tt>Origin</tt> is <tt>EXTERNAL</tt> and whose
--   <tt>ExpirationModel</tt> is <tt>KEY_MATERIAL_EXPIRES</tt>, otherwise
--   this value is omitted.
--   
--   <a>$sel:expirationModel:KeyMetadata'</a>,
--   <a>keyMetadata_expirationModel</a> - Specifies whether the KMS key's
--   key material expires. This value is present only when <tt>Origin</tt>
--   is <tt>EXTERNAL</tt>, otherwise this value is omitted.
--   
--   <a>$sel:multiRegionConfiguration:KeyMetadata'</a>,
--   <a>keyMetadata_multiRegionConfiguration</a> - Lists the primary and
--   replica keys in same multi-Region key. This field is present only when
--   the value of the <tt>MultiRegion</tt> field is <tt>True</tt>.
--   
--   For more information about any listed KMS key, use the DescribeKey
--   operation.
--   
--   <ul>
--   <li><tt>MultiRegionKeyType</tt> indicates whether the KMS key is a
--   <tt>PRIMARY</tt> or <tt>REPLICA</tt> key.</li>
--   <li><tt>PrimaryKey</tt> displays the key ARN and Region of the primary
--   key. This field displays the current KMS key if it is the primary
--   key.</li>
--   <li><tt>ReplicaKeys</tt> displays the key ARNs and Regions of all
--   replica keys. This field includes the current KMS key if it is a
--   replica key.</li>
--   </ul>
--   
--   <a>$sel:description:KeyMetadata'</a>, <a>keyMetadata_description</a> -
--   The description of the KMS key.
--   
--   <a>$sel:deletionDate:KeyMetadata'</a>, <a>keyMetadata_deletionDate</a>
--   - The date and time after which KMS deletes this KMS key. This value
--   is present only when the KMS key is scheduled for deletion, that is,
--   when its <tt>KeyState</tt> is <tt>PendingDeletion</tt>.
--   
--   When the primary key in a multi-Region key is scheduled for deletion
--   but still has replica keys, its key state is
--   <tt>PendingReplicaDeletion</tt> and the length of its waiting period
--   is displayed in the <tt>PendingDeletionWindowInDays</tt> field.
--   
--   <a>$sel:keySpec:KeyMetadata'</a>, <a>keyMetadata_keySpec</a> -
--   Describes the type of key material in the KMS key.
--   
--   <a>$sel:customerMasterKeySpec:KeyMetadata'</a>,
--   <a>keyMetadata_customerMasterKeySpec</a> - Instead, use the
--   <tt>KeySpec</tt> field.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
--   
--   <a>$sel:keyUsage:KeyMetadata'</a>, <a>keyMetadata_keyUsage</a> - The
--   <a>cryptographic operations</a> for which you can use the KMS key.
--   
--   <a>$sel:keyId:KeyMetadata'</a>, <a>keyMetadata_keyId</a> - The
--   globally unique identifier for the KMS key.
newKeyMetadata :: Text -> KeyMetadata

-- | The signing algorithms that the KMS key supports. You cannot use the
--   KMS key with other signing algorithms within KMS.
--   
--   This field appears only when the <tt>KeyUsage</tt> of the KMS key is
--   <tt>SIGN_VERIFY</tt>.
keyMetadata_signingAlgorithms :: Lens' KeyMetadata (Maybe [SigningAlgorithmSpec])

-- | The waiting period before the primary key in a multi-Region key is
--   deleted. This waiting period begins when the last of its replica keys
--   is deleted. This value is present only when the <tt>KeyState</tt> of
--   the KMS key is <tt>PendingReplicaDeletion</tt>. That indicates that
--   the KMS key is the primary key in a multi-Region key, it is scheduled
--   for deletion, and it still has existing replica keys.
--   
--   When a single-Region KMS key or a multi-Region replica key is
--   scheduled for deletion, its deletion date is displayed in the
--   <tt>DeletionDate</tt> field. However, when the primary key in a
--   multi-Region key is scheduled for deletion, its waiting period doesn't
--   begin until all of its replica keys are deleted. This value displays
--   that waiting period. When the last replica key in the multi-Region key
--   is deleted, the <tt>KeyState</tt> of the scheduled primary key changes
--   from <tt>PendingReplicaDeletion</tt> to <tt>PendingDeletion</tt> and
--   the deletion date appears in the <tt>DeletionDate</tt> field.
keyMetadata_pendingDeletionWindowInDays :: Lens' KeyMetadata (Maybe Natural)

-- | The source of the key material for the KMS key. When this value is
--   <tt>AWS_KMS</tt>, KMS created the key material. When this value is
--   <tt>EXTERNAL</tt>, the key material was imported or the KMS key
--   doesn't have any key material. When this value is
--   <tt>AWS_CLOUDHSM</tt>, the key material was created in the CloudHSM
--   cluster associated with a custom key store.
keyMetadata_origin :: Lens' KeyMetadata (Maybe OriginType)

-- | The manager of the KMS key. KMS keys in your Amazon Web Services
--   account are either customer managed or Amazon Web Services managed.
--   For more information about the difference, see <a>KMS keys</a> in the
--   <i>Key Management Service Developer Guide</i>.
keyMetadata_keyManager :: Lens' KeyMetadata (Maybe KeyManagerType)

-- | The twelve-digit account ID of the Amazon Web Services account that
--   owns the KMS key.
keyMetadata_aWSAccountId :: Lens' KeyMetadata (Maybe Text)

-- | Indicates whether the KMS key is a multi-Region (<tt>True</tt>) or
--   regional (<tt>False</tt>) key. This value is <tt>True</tt> for
--   multi-Region primary and replica keys and <tt>False</tt> for regional
--   KMS keys.
--   
--   For more information about multi-Region keys, see <a>Using
--   multi-Region keys</a> in the <i>Key Management Service Developer
--   Guide</i>.
keyMetadata_multiRegion :: Lens' KeyMetadata (Maybe Bool)

-- | A unique identifier for the <a>custom key store</a> that contains the
--   KMS key. This value is present only when the KMS key is created in a
--   custom key store.
keyMetadata_customKeyStoreId :: Lens' KeyMetadata (Maybe Text)

-- | The encryption algorithms that the KMS key supports. You cannot use
--   the KMS key with other encryption algorithms within KMS.
--   
--   This value is present only when the <tt>KeyUsage</tt> of the KMS key
--   is <tt>ENCRYPT_DECRYPT</tt>.
keyMetadata_encryptionAlgorithms :: Lens' KeyMetadata (Maybe [EncryptionAlgorithmSpec])

-- | The cluster ID of the CloudHSM cluster that contains the key material
--   for the KMS key. When you create a KMS key in a <a>custom key
--   store</a>, KMS creates the key material for the KMS key in the
--   associated CloudHSM cluster. This value is present only when the KMS
--   key is created in a custom key store.
keyMetadata_cloudHsmClusterId :: Lens' KeyMetadata (Maybe Text)

-- | The current status of the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
keyMetadata_keyState :: Lens' KeyMetadata (Maybe KeyState)

-- | The Amazon Resource Name (ARN) of the KMS key. For examples, see
--   <a>Key Management Service (KMS)</a> in the Example ARNs section of the
--   /Amazon Web Services General Reference/.
keyMetadata_arn :: Lens' KeyMetadata (Maybe Text)

-- | Specifies whether the KMS key is enabled. When <tt>KeyState</tt> is
--   <tt>Enabled</tt> this value is true, otherwise it is false.
keyMetadata_enabled :: Lens' KeyMetadata (Maybe Bool)

-- | The date and time when the KMS key was created.
keyMetadata_creationDate :: Lens' KeyMetadata (Maybe UTCTime)

-- | The time at which the imported key material expires. When the key
--   material expires, KMS deletes the key material and the KMS key becomes
--   unusable. This value is present only for KMS keys whose
--   <tt>Origin</tt> is <tt>EXTERNAL</tt> and whose
--   <tt>ExpirationModel</tt> is <tt>KEY_MATERIAL_EXPIRES</tt>, otherwise
--   this value is omitted.
keyMetadata_validTo :: Lens' KeyMetadata (Maybe UTCTime)

-- | Specifies whether the KMS key's key material expires. This value is
--   present only when <tt>Origin</tt> is <tt>EXTERNAL</tt>, otherwise this
--   value is omitted.
keyMetadata_expirationModel :: Lens' KeyMetadata (Maybe ExpirationModelType)

-- | Lists the primary and replica keys in same multi-Region key. This
--   field is present only when the value of the <tt>MultiRegion</tt> field
--   is <tt>True</tt>.
--   
--   For more information about any listed KMS key, use the DescribeKey
--   operation.
--   
--   <ul>
--   <li><tt>MultiRegionKeyType</tt> indicates whether the KMS key is a
--   <tt>PRIMARY</tt> or <tt>REPLICA</tt> key.</li>
--   <li><tt>PrimaryKey</tt> displays the key ARN and Region of the primary
--   key. This field displays the current KMS key if it is the primary
--   key.</li>
--   <li><tt>ReplicaKeys</tt> displays the key ARNs and Regions of all
--   replica keys. This field includes the current KMS key if it is a
--   replica key.</li>
--   </ul>
keyMetadata_multiRegionConfiguration :: Lens' KeyMetadata (Maybe MultiRegionConfiguration)

-- | The description of the KMS key.
keyMetadata_description :: Lens' KeyMetadata (Maybe Text)

-- | The date and time after which KMS deletes this KMS key. This value is
--   present only when the KMS key is scheduled for deletion, that is, when
--   its <tt>KeyState</tt> is <tt>PendingDeletion</tt>.
--   
--   When the primary key in a multi-Region key is scheduled for deletion
--   but still has replica keys, its key state is
--   <tt>PendingReplicaDeletion</tt> and the length of its waiting period
--   is displayed in the <tt>PendingDeletionWindowInDays</tt> field.
keyMetadata_deletionDate :: Lens' KeyMetadata (Maybe UTCTime)

-- | Describes the type of key material in the KMS key.
keyMetadata_keySpec :: Lens' KeyMetadata (Maybe KeySpec)

-- | Instead, use the <tt>KeySpec</tt> field.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
keyMetadata_customerMasterKeySpec :: Lens' KeyMetadata (Maybe CustomerMasterKeySpec)

-- | The <a>cryptographic operations</a> for which you can use the KMS key.
keyMetadata_keyUsage :: Lens' KeyMetadata (Maybe KeyUsageType)

-- | The globally unique identifier for the KMS key.
keyMetadata_keyId :: Lens' KeyMetadata Text

-- | <i>See:</i> <a>newListGrantsResponse</a> smart constructor.
data ListGrantsResponse
ListGrantsResponse' :: Maybe Text -> Maybe [GrantListEntry] -> Maybe Bool -> ListGrantsResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
[$sel:nextMarker:ListGrantsResponse'] :: ListGrantsResponse -> Maybe Text

-- | A list of grants.
[$sel:grants:ListGrantsResponse'] :: ListGrantsResponse -> Maybe [GrantListEntry]

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
[$sel:truncated:ListGrantsResponse'] :: ListGrantsResponse -> Maybe Bool

-- | Create a value of <a>ListGrantsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_nextMarker</a> - When <tt>Truncated</tt> is
--   true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:grants:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_grants</a> - A list of grants.
--   
--   <a>$sel:truncated:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_truncated</a> - A flag that indicates whether
--   there are more items in the list. When this value is true, the list in
--   this response is truncated. To get more items, pass the value of the
--   <tt>NextMarker</tt> element in thisresponse to the <tt>Marker</tt>
--   parameter in a subsequent request.
newListGrantsResponse :: ListGrantsResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listGrantsResponse_nextMarker :: Lens' ListGrantsResponse (Maybe Text)

-- | A list of grants.
listGrantsResponse_grants :: Lens' ListGrantsResponse (Maybe [GrantListEntry])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listGrantsResponse_truncated :: Lens' ListGrantsResponse (Maybe Bool)

-- | Describes the configuration of this multi-Region key. This field
--   appears only when the KMS key is a primary or replica of a
--   multi-Region key.
--   
--   For more information about any listed KMS key, use the DescribeKey
--   operation.
--   
--   <i>See:</i> <a>newMultiRegionConfiguration</a> smart constructor.
data MultiRegionConfiguration
MultiRegionConfiguration' :: Maybe [MultiRegionKey] -> Maybe MultiRegionKeyType -> Maybe MultiRegionKey -> MultiRegionConfiguration

-- | displays the key ARNs and Regions of all replica keys. This field
--   includes the current KMS key if it is a replica key.
[$sel:replicaKeys:MultiRegionConfiguration'] :: MultiRegionConfiguration -> Maybe [MultiRegionKey]

-- | Indicates whether the KMS key is a <tt>PRIMARY</tt> or
--   <tt>REPLICA</tt> key.
[$sel:multiRegionKeyType:MultiRegionConfiguration'] :: MultiRegionConfiguration -> Maybe MultiRegionKeyType

-- | Displays the key ARN and Region of the primary key. This field
--   includes the current KMS key if it is the primary key.
[$sel:primaryKey:MultiRegionConfiguration'] :: MultiRegionConfiguration -> Maybe MultiRegionKey

-- | Create a value of <a>MultiRegionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaKeys:MultiRegionConfiguration'</a>,
--   <a>multiRegionConfiguration_replicaKeys</a> - displays the key ARNs
--   and Regions of all replica keys. This field includes the current KMS
--   key if it is a replica key.
--   
--   <a>$sel:multiRegionKeyType:MultiRegionConfiguration'</a>,
--   <a>multiRegionConfiguration_multiRegionKeyType</a> - Indicates whether
--   the KMS key is a <tt>PRIMARY</tt> or <tt>REPLICA</tt> key.
--   
--   <a>$sel:primaryKey:MultiRegionConfiguration'</a>,
--   <a>multiRegionConfiguration_primaryKey</a> - Displays the key ARN and
--   Region of the primary key. This field includes the current KMS key if
--   it is the primary key.
newMultiRegionConfiguration :: MultiRegionConfiguration

-- | displays the key ARNs and Regions of all replica keys. This field
--   includes the current KMS key if it is a replica key.
multiRegionConfiguration_replicaKeys :: Lens' MultiRegionConfiguration (Maybe [MultiRegionKey])

-- | Indicates whether the KMS key is a <tt>PRIMARY</tt> or
--   <tt>REPLICA</tt> key.
multiRegionConfiguration_multiRegionKeyType :: Lens' MultiRegionConfiguration (Maybe MultiRegionKeyType)

-- | Displays the key ARN and Region of the primary key. This field
--   includes the current KMS key if it is the primary key.
multiRegionConfiguration_primaryKey :: Lens' MultiRegionConfiguration (Maybe MultiRegionKey)

-- | Describes the primary or replica key in a multi-Region key.
--   
--   <i>See:</i> <a>newMultiRegionKey</a> smart constructor.
data MultiRegionKey
MultiRegionKey' :: Maybe Text -> Maybe Text -> MultiRegionKey

-- | Displays the key ARN of a primary or replica key of a multi-Region
--   key.
[$sel:arn:MultiRegionKey'] :: MultiRegionKey -> Maybe Text

-- | Displays the Amazon Web Services Region of a primary or replica key in
--   a multi-Region key.
[$sel:region:MultiRegionKey'] :: MultiRegionKey -> Maybe Text

-- | Create a value of <a>MultiRegionKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:MultiRegionKey'</a>, <a>multiRegionKey_arn</a> - Displays
--   the key ARN of a primary or replica key of a multi-Region key.
--   
--   <a>$sel:region:MultiRegionKey'</a>, <a>multiRegionKey_region</a> -
--   Displays the Amazon Web Services Region of a primary or replica key in
--   a multi-Region key.
newMultiRegionKey :: MultiRegionKey

-- | Displays the key ARN of a primary or replica key of a multi-Region
--   key.
multiRegionKey_arn :: Lens' MultiRegionKey (Maybe Text)

-- | Displays the Amazon Web Services Region of a primary or replica key in
--   a multi-Region key.
multiRegionKey_region :: Lens' MultiRegionKey (Maybe Text)

-- | A key-value pair. A tag consists of a tag key and a tag value. Tag
--   keys and tag values are both required, but tag values can be empty
--   (null) strings.
--   
--   For information about the rules that apply to tag keys and tag values,
--   see <a>User-Defined Tag Restrictions</a> in the <i>Amazon Web Services
--   Billing and Cost Management User Guide</i>.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | The key of the tag.
[$sel:tagKey:Tag'] :: Tag -> Text

-- | The value of the tag.
[$sel:tagValue:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagKey:Tag'</a>, <a>tag_tagKey</a> - The key of the tag.
--   
--   <a>$sel:tagValue:Tag'</a>, <a>tag_tagValue</a> - The value of the tag.
newTag :: Text -> Text -> Tag

-- | The key of the tag.
tag_tagKey :: Lens' Tag Text

-- | The value of the tag.
tag_tagValue :: Lens' Tag Text


-- | Adds or edits tags on a <a>customer managed key</a>.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   Each tag consists of a tag key and a tag value, both of which are
--   case-sensitive strings. The tag value can be an empty (null) string.
--   To add a tag, specify a new tag key and a tag value. To edit a tag,
--   specify an existing tag key and a new tag value.
--   
--   You can use this operation to tag a <a>customer managed key</a>, but
--   you cannot tag an <a>Amazon Web Services managed key</a>, an <a>Amazon
--   Web Services owned key</a>, a <a>custom key store</a>, or an
--   <a>alias</a>.
--   
--   You can also add tags to a KMS key while creating it (CreateKey) or
--   replicating it (ReplicateKey).
--   
--   For information about using tags in KMS, see <a>Tagging keys</a>. For
--   general information about tags, including the format and syntax, see
--   <a>Tagging Amazon Web Services resources</a> in the <i>Amazon Web
--   Services General Reference</i>.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:TagResource</a> (key policy)
--   
--   <b>Related operations</b>
--   
--   <ul>
--   <li>CreateKey</li>
--   <li>ListResourceTags</li>
--   <li>ReplicateKey</li>
--   <li>UntagResource</li>
--   </ul>
module Network.AWS.KMS.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | Identifies a customer managed key in the account and Region.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:TagResource'] :: TagResource -> Text

-- | One or more tags.
--   
--   Each tag consists of a tag key and a tag value. The tag value can be
--   an empty (null) string.
--   
--   You cannot have more than one tag on a KMS key with the same tag key.
--   If you specify an existing tag key with a different tag value, KMS
--   replaces the current tag value with the specified one.
[$sel:tags:TagResource'] :: TagResource -> [Tag]

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:TagResource'</a>, <a>tagResource_keyId</a> - Identifies
--   a customer managed key in the account and Region.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - One or more
--   tags.
--   
--   Each tag consists of a tag key and a tag value. The tag value can be
--   an empty (null) string.
--   
--   You cannot have more than one tag on a KMS key with the same tag key.
--   If you specify an existing tag key with a different tag value, KMS
--   replaces the current tag value with the specified one.
newTagResource :: Text -> TagResource

-- | Identifies a customer managed key in the account and Region.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
tagResource_keyId :: Lens' TagResource Text

-- | One or more tags.
--   
--   Each tag consists of a tag key and a tag value. The tag value can be
--   an empty (null) string.
--   
--   You cannot have more than one tag on a KMS key with the same tag key.
--   If you specify an existing tag key with a different tag value, KMS
--   replaces the current tag value with the specified one.
tagResource_tags :: Lens' TagResource [Tag]

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newTagResourceResponse :: TagResourceResponse
instance GHC.Generics.Generic Network.AWS.KMS.TagResource.TagResource
instance GHC.Show.Show Network.AWS.KMS.TagResource.TagResource
instance GHC.Read.Read Network.AWS.KMS.TagResource.TagResource
instance GHC.Classes.Eq Network.AWS.KMS.TagResource.TagResource
instance GHC.Generics.Generic Network.AWS.KMS.TagResource.TagResourceResponse
instance GHC.Show.Show Network.AWS.KMS.TagResource.TagResourceResponse
instance GHC.Read.Read Network.AWS.KMS.TagResource.TagResourceResponse
instance GHC.Classes.Eq Network.AWS.KMS.TagResource.TagResourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.TagResource.TagResource
instance Control.DeepSeq.NFData Network.AWS.KMS.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.TagResource.TagResource
instance Control.DeepSeq.NFData Network.AWS.KMS.TagResource.TagResource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.TagResource.TagResource
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.TagResource.TagResource
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.TagResource.TagResource


-- | Creates a <a>digital signature</a> for a message or message digest by
--   using the private key in an asymmetric KMS key. To verify the
--   signature, use the Verify operation, or use the public key in the same
--   asymmetric KMS key outside of KMS. For information about symmetric and
--   asymmetric KMS keys, see <a>Using Symmetric and Asymmetric KMS
--   keys</a> in the <i>Key Management Service Developer Guide</i>.
--   
--   Digital signatures are generated and verified by using asymmetric key
--   pair, such as an RSA or ECC pair that is represented by an asymmetric
--   KMS key. The key owner (or an authorized user) uses their private key
--   to sign a message. Anyone with the public key can verify that the
--   message was signed with that particular private key and that the
--   message hasn't changed since it was signed.
--   
--   To use the <tt>Sign</tt> operation, provide the following information:
--   
--   <ul>
--   <li>Use the <tt>KeyId</tt> parameter to identify an asymmetric KMS key
--   with a <tt>KeyUsage</tt> value of <tt>SIGN_VERIFY</tt>. To get the
--   <tt>KeyUsage</tt> value of a KMS key, use the DescribeKey operation.
--   The caller must have <tt>kms:Sign</tt> permission on the KMS key.</li>
--   <li>Use the <tt>Message</tt> parameter to specify the message or
--   message digest to sign. You can submit messages of up to 4096 bytes.
--   To sign a larger message, generate a hash digest of the message, and
--   then provide the hash digest in the <tt>Message</tt> parameter. To
--   indicate whether the message is a full message or a digest, use the
--   <tt>MessageType</tt> parameter.</li>
--   <li>Choose a signing algorithm that is compatible with the KMS
--   key.</li>
--   </ul>
--   
--   When signing a message, be sure to record the KMS key and the signing
--   algorithm. This information is required to verify the signature.
--   
--   To verify the signature that this operation generates, use the Verify
--   operation. Or use the GetPublicKey operation to download the public
--   key and then use the public key to verify the signature outside of
--   KMS.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: Yes. To perform this operation with a KMS
--   key in a different Amazon Web Services account, specify the key ARN or
--   alias ARN in the value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>: <a>kms:Sign</a> (key policy)
--   
--   <b>Related operations</b>: Verify
module Network.AWS.KMS.Sign

-- | <i>See:</i> <a>newSign</a> smart constructor.
data Sign
Sign' :: Maybe [Text] -> Maybe MessageType -> Text -> Sensitive Base64 -> SigningAlgorithmSpec -> Sign

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantTokens:Sign'] :: Sign -> Maybe [Text]

-- | Tells KMS whether the value of the <tt>Message</tt> parameter is a
--   message or message digest. The default value, RAW, indicates a
--   message. To indicate a message digest, enter <tt>DIGEST</tt>.
[$sel:messageType:Sign'] :: Sign -> Maybe MessageType

-- | Identifies an asymmetric KMS key. KMS uses the private key in the
--   asymmetric KMS key to sign the message. The <tt>KeyUsage</tt> type of
--   the KMS key must be <tt>SIGN_VERIFY</tt>. To find the
--   <tt>KeyUsage</tt> of a KMS key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
[$sel:keyId:Sign'] :: Sign -> Text

-- | Specifies the message or message digest to sign. Messages can be
--   0-4096 bytes. To sign a larger message, provide the message digest.
--   
--   If you provide a message, KMS generates a hash digest of the message
--   and then signs it.
[$sel:message:Sign'] :: Sign -> Sensitive Base64

-- | Specifies the signing algorithm to use when signing the message.
--   
--   Choose an algorithm that is compatible with the type and size of the
--   specified asymmetric KMS key.
[$sel:signingAlgorithm:Sign'] :: Sign -> SigningAlgorithmSpec

-- | Create a value of <a>Sign</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:Sign'</a>, <a>sign_grantTokens</a> - A list of
--   grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:messageType:Sign'</a>, <a>sign_messageType</a> - Tells KMS
--   whether the value of the <tt>Message</tt> parameter is a message or
--   message digest. The default value, RAW, indicates a message. To
--   indicate a message digest, enter <tt>DIGEST</tt>.
--   
--   <a>$sel:keyId:Sign'</a>, <a>sign_keyId</a> - Identifies an asymmetric
--   KMS key. KMS uses the private key in the asymmetric KMS key to sign
--   the message. The <tt>KeyUsage</tt> type of the KMS key must be
--   <tt>SIGN_VERIFY</tt>. To find the <tt>KeyUsage</tt> of a KMS key, use
--   the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:message:Sign'</a>, <a>sign_message</a> - Specifies the message
--   or message digest to sign. Messages can be 0-4096 bytes. To sign a
--   larger message, provide the message digest.
--   
--   If you provide a message, KMS generates a hash digest of the message
--   and then signs it.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:signingAlgorithm:Sign'</a>, <a>sign_signingAlgorithm</a> -
--   Specifies the signing algorithm to use when signing the message.
--   
--   Choose an algorithm that is compatible with the type and size of the
--   specified asymmetric KMS key.
newSign :: Text -> ByteString -> SigningAlgorithmSpec -> Sign

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
sign_grantTokens :: Lens' Sign (Maybe [Text])

-- | Tells KMS whether the value of the <tt>Message</tt> parameter is a
--   message or message digest. The default value, RAW, indicates a
--   message. To indicate a message digest, enter <tt>DIGEST</tt>.
sign_messageType :: Lens' Sign (Maybe MessageType)

-- | Identifies an asymmetric KMS key. KMS uses the private key in the
--   asymmetric KMS key to sign the message. The <tt>KeyUsage</tt> type of
--   the KMS key must be <tt>SIGN_VERIFY</tt>. To find the
--   <tt>KeyUsage</tt> of a KMS key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
sign_keyId :: Lens' Sign Text

-- | Specifies the message or message digest to sign. Messages can be
--   0-4096 bytes. To sign a larger message, provide the message digest.
--   
--   If you provide a message, KMS generates a hash digest of the message
--   and then signs it.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
sign_message :: Lens' Sign ByteString

-- | Specifies the signing algorithm to use when signing the message.
--   
--   Choose an algorithm that is compatible with the type and size of the
--   specified asymmetric KMS key.
sign_signingAlgorithm :: Lens' Sign SigningAlgorithmSpec

-- | <i>See:</i> <a>newSignResponse</a> smart constructor.
data SignResponse
SignResponse' :: Maybe SigningAlgorithmSpec -> Maybe Base64 -> Maybe Text -> Int -> SignResponse

-- | The signing algorithm that was used to sign the message.
[$sel:signingAlgorithm:SignResponse'] :: SignResponse -> Maybe SigningAlgorithmSpec

-- | The cryptographic signature that was generated for the message.
--   
--   <ul>
--   <li>When used with the supported RSA signing algorithms, the encoding
--   of this value is defined by <a>PKCS #1 in RFC 8017</a>.</li>
--   <li>When used with the <tt>ECDSA_SHA_256</tt>, <tt>ECDSA_SHA_384</tt>,
--   or <tt>ECDSA_SHA_512</tt> signing algorithms, this value is a
--   DER-encoded object as defined by ANS X9.62–2005 and <a>RFC 3279
--   Section 2.2.3</a>. This is the most commonly used signature format and
--   is appropriate for most uses.</li>
--   </ul>
--   
--   When you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.
[$sel:signature:SignResponse'] :: SignResponse -> Maybe Base64

-- | The Amazon Resource Name (<a>key ARN</a>) of the asymmetric KMS key
--   that was used to sign the message.
[$sel:keyId:SignResponse'] :: SignResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:SignResponse'] :: SignResponse -> Int

-- | Create a value of <a>SignResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signingAlgorithm:Sign'</a>,
--   <a>signResponse_signingAlgorithm</a> - The signing algorithm that was
--   used to sign the message.
--   
--   <a>$sel:signature:SignResponse'</a>, <a>signResponse_signature</a> -
--   The cryptographic signature that was generated for the message.
--   
--   <ul>
--   <li>When used with the supported RSA signing algorithms, the encoding
--   of this value is defined by <a>PKCS #1 in RFC 8017</a>.</li>
--   <li>When used with the <tt>ECDSA_SHA_256</tt>, <tt>ECDSA_SHA_384</tt>,
--   or <tt>ECDSA_SHA_512</tt> signing algorithms, this value is a
--   DER-encoded object as defined by ANS X9.62–2005 and <a>RFC 3279
--   Section 2.2.3</a>. This is the most commonly used signature format and
--   is appropriate for most uses.</li>
--   </ul>
--   
--   When you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:keyId:Sign'</a>, <a>signResponse_keyId</a> - The Amazon
--   Resource Name (<a>key ARN</a>) of the asymmetric KMS key that was used
--   to sign the message.
--   
--   <a>$sel:httpStatus:SignResponse'</a>, <a>signResponse_httpStatus</a> -
--   The response's http status code.
newSignResponse :: Int -> SignResponse

-- | The signing algorithm that was used to sign the message.
signResponse_signingAlgorithm :: Lens' SignResponse (Maybe SigningAlgorithmSpec)

-- | The cryptographic signature that was generated for the message.
--   
--   <ul>
--   <li>When used with the supported RSA signing algorithms, the encoding
--   of this value is defined by <a>PKCS #1 in RFC 8017</a>.</li>
--   <li>When used with the <tt>ECDSA_SHA_256</tt>, <tt>ECDSA_SHA_384</tt>,
--   or <tt>ECDSA_SHA_512</tt> signing algorithms, this value is a
--   DER-encoded object as defined by ANS X9.62–2005 and <a>RFC 3279
--   Section 2.2.3</a>. This is the most commonly used signature format and
--   is appropriate for most uses.</li>
--   </ul>
--   
--   When you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
signResponse_signature :: Lens' SignResponse (Maybe ByteString)

-- | The Amazon Resource Name (<a>key ARN</a>) of the asymmetric KMS key
--   that was used to sign the message.
signResponse_keyId :: Lens' SignResponse (Maybe Text)

-- | The response's http status code.
signResponse_httpStatus :: Lens' SignResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.Sign.Sign
instance GHC.Show.Show Network.AWS.KMS.Sign.Sign
instance GHC.Classes.Eq Network.AWS.KMS.Sign.Sign
instance GHC.Generics.Generic Network.AWS.KMS.Sign.SignResponse
instance GHC.Show.Show Network.AWS.KMS.Sign.SignResponse
instance GHC.Read.Read Network.AWS.KMS.Sign.SignResponse
instance GHC.Classes.Eq Network.AWS.KMS.Sign.SignResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.Sign.Sign
instance Control.DeepSeq.NFData Network.AWS.KMS.Sign.SignResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Sign.Sign
instance Control.DeepSeq.NFData Network.AWS.KMS.Sign.Sign
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.Sign.Sign
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Sign.Sign
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.Sign.Sign
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Sign.Sign


-- | Schedules the deletion of a KMS key. By default, KMS applies a waiting
--   period of 30 days, but you can specify a waiting period of 7-30 days.
--   When this operation is successful, the key state of the KMS key
--   changes to <tt>PendingDeletion</tt> and the key can't be used in any
--   cryptographic operations. It remains in this state for the duration of
--   the waiting period. Before the waiting period ends, you can use
--   CancelKeyDeletion to cancel the deletion of the KMS key. After the
--   waiting period ends, KMS deletes the KMS key, its key material, and
--   all KMS data associated with it, including all aliases that refer to
--   it.
--   
--   Deleting a KMS key is a destructive and potentially dangerous
--   operation. When a KMS key is deleted, all data that was encrypted
--   under the KMS key is unrecoverable. (The only exception is a
--   multi-Region replica key.) To prevent the use of a KMS key without
--   deleting it, use DisableKey.
--   
--   If you schedule deletion of a KMS key from a <a>custom key store</a>,
--   when the waiting period expires, <tt>ScheduleKeyDeletion</tt> deletes
--   the KMS key from KMS. Then KMS makes a best effort to delete the key
--   material from the associated CloudHSM cluster. However, you might need
--   to manually <a>delete the orphaned key material</a> from the cluster
--   and its backups.
--   
--   You can schedule the deletion of a multi-Region primary key and its
--   replica keys at any time. However, KMS will not delete a multi-Region
--   primary key with existing replica keys. If you schedule the deletion
--   of a primary key with replicas, its key state changes to
--   <tt>PendingReplicaDeletion</tt> and it cannot be replicated or used in
--   cryptographic operations. This status can continue indefinitely. When
--   the last of its replicas keys is deleted (not just scheduled), the key
--   state of the primary key changes to <tt>PendingDeletion</tt> and its
--   waiting period (<tt>PendingWindowInDays</tt>) begins. For details, see
--   <a>Deleting multi-Region keys</a> in the <i>Key Management Service
--   Developer Guide</i>.
--   
--   For more information about scheduling a KMS key for deletion, see
--   <a>Deleting KMS keys</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: kms:ScheduleKeyDeletion (key policy)
--   
--   <b>Related operations</b>
--   
--   <ul>
--   <li>CancelKeyDeletion</li>
--   <li>DisableKey</li>
--   </ul>
module Network.AWS.KMS.ScheduleKeyDeletion

-- | <i>See:</i> <a>newScheduleKeyDeletion</a> smart constructor.
data ScheduleKeyDeletion
ScheduleKeyDeletion' :: Maybe Natural -> Text -> ScheduleKeyDeletion

-- | The waiting period, specified in number of days. After the waiting
--   period ends, KMS deletes the KMS key.
--   
--   If the KMS key is a multi-Region primary key with replicas, the
--   waiting period begins when the last of its replica keys is deleted.
--   Otherwise, the waiting period begins immediately.
--   
--   This value is optional. If you include a value, it must be between 7
--   and 30, inclusive. If you do not include a value, it defaults to 30.
[$sel:pendingWindowInDays:ScheduleKeyDeletion'] :: ScheduleKeyDeletion -> Maybe Natural

-- | The unique identifier of the KMS key to delete.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:ScheduleKeyDeletion'] :: ScheduleKeyDeletion -> Text

-- | Create a value of <a>ScheduleKeyDeletion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pendingWindowInDays:ScheduleKeyDeletion'</a>,
--   <a>scheduleKeyDeletion_pendingWindowInDays</a> - The waiting period,
--   specified in number of days. After the waiting period ends, KMS
--   deletes the KMS key.
--   
--   If the KMS key is a multi-Region primary key with replicas, the
--   waiting period begins when the last of its replica keys is deleted.
--   Otherwise, the waiting period begins immediately.
--   
--   This value is optional. If you include a value, it must be between 7
--   and 30, inclusive. If you do not include a value, it defaults to 30.
--   
--   <a>$sel:keyId:ScheduleKeyDeletion'</a>,
--   <a>scheduleKeyDeletion_keyId</a> - The unique identifier of the KMS
--   key to delete.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newScheduleKeyDeletion :: Text -> ScheduleKeyDeletion

-- | The waiting period, specified in number of days. After the waiting
--   period ends, KMS deletes the KMS key.
--   
--   If the KMS key is a multi-Region primary key with replicas, the
--   waiting period begins when the last of its replica keys is deleted.
--   Otherwise, the waiting period begins immediately.
--   
--   This value is optional. If you include a value, it must be between 7
--   and 30, inclusive. If you do not include a value, it defaults to 30.
scheduleKeyDeletion_pendingWindowInDays :: Lens' ScheduleKeyDeletion (Maybe Natural)

-- | The unique identifier of the KMS key to delete.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
scheduleKeyDeletion_keyId :: Lens' ScheduleKeyDeletion Text

-- | <i>See:</i> <a>newScheduleKeyDeletionResponse</a> smart constructor.
data ScheduleKeyDeletionResponse
ScheduleKeyDeletionResponse' :: Maybe Natural -> Maybe KeyState -> Maybe POSIX -> Maybe Text -> Int -> ScheduleKeyDeletionResponse

-- | The waiting period before the KMS key is deleted.
--   
--   If the KMS key is a multi-Region primary key with replicas, the
--   waiting period begins when the last of its replica keys is deleted.
--   Otherwise, the waiting period begins immediately.
[$sel:pendingWindowInDays:ScheduleKeyDeletionResponse'] :: ScheduleKeyDeletionResponse -> Maybe Natural

-- | The current status of the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
[$sel:keyState:ScheduleKeyDeletionResponse'] :: ScheduleKeyDeletionResponse -> Maybe KeyState

-- | The date and time after which KMS deletes the KMS key.
--   
--   If the KMS key is a multi-Region primary key with replica keys, this
--   field does not appear. The deletion date for the primary key isn't
--   known until its last replica key is deleted.
[$sel:deletionDate:ScheduleKeyDeletionResponse'] :: ScheduleKeyDeletionResponse -> Maybe POSIX

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key whose
--   deletion is scheduled.
[$sel:keyId:ScheduleKeyDeletionResponse'] :: ScheduleKeyDeletionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ScheduleKeyDeletionResponse'] :: ScheduleKeyDeletionResponse -> Int

-- | Create a value of <a>ScheduleKeyDeletionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pendingWindowInDays:ScheduleKeyDeletion'</a>,
--   <a>scheduleKeyDeletionResponse_pendingWindowInDays</a> - The waiting
--   period before the KMS key is deleted.
--   
--   If the KMS key is a multi-Region primary key with replicas, the
--   waiting period begins when the last of its replica keys is deleted.
--   Otherwise, the waiting period begins immediately.
--   
--   <a>$sel:keyState:ScheduleKeyDeletionResponse'</a>,
--   <a>scheduleKeyDeletionResponse_keyState</a> - The current status of
--   the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   <a>$sel:deletionDate:ScheduleKeyDeletionResponse'</a>,
--   <a>scheduleKeyDeletionResponse_deletionDate</a> - The date and time
--   after which KMS deletes the KMS key.
--   
--   If the KMS key is a multi-Region primary key with replica keys, this
--   field does not appear. The deletion date for the primary key isn't
--   known until its last replica key is deleted.
--   
--   <a>$sel:keyId:ScheduleKeyDeletion'</a>,
--   <a>scheduleKeyDeletionResponse_keyId</a> - The Amazon Resource Name
--   (<a>key ARN</a>) of the KMS key whose deletion is scheduled.
--   
--   <a>$sel:httpStatus:ScheduleKeyDeletionResponse'</a>,
--   <a>scheduleKeyDeletionResponse_httpStatus</a> - The response's http
--   status code.
newScheduleKeyDeletionResponse :: Int -> ScheduleKeyDeletionResponse

-- | The waiting period before the KMS key is deleted.
--   
--   If the KMS key is a multi-Region primary key with replicas, the
--   waiting period begins when the last of its replica keys is deleted.
--   Otherwise, the waiting period begins immediately.
scheduleKeyDeletionResponse_pendingWindowInDays :: Lens' ScheduleKeyDeletionResponse (Maybe Natural)

-- | The current status of the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
scheduleKeyDeletionResponse_keyState :: Lens' ScheduleKeyDeletionResponse (Maybe KeyState)

-- | The date and time after which KMS deletes the KMS key.
--   
--   If the KMS key is a multi-Region primary key with replica keys, this
--   field does not appear. The deletion date for the primary key isn't
--   known until its last replica key is deleted.
scheduleKeyDeletionResponse_deletionDate :: Lens' ScheduleKeyDeletionResponse (Maybe UTCTime)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key whose
--   deletion is scheduled.
scheduleKeyDeletionResponse_keyId :: Lens' ScheduleKeyDeletionResponse (Maybe Text)

-- | The response's http status code.
scheduleKeyDeletionResponse_httpStatus :: Lens' ScheduleKeyDeletionResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletion
instance GHC.Show.Show Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletion
instance GHC.Read.Read Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletion
instance GHC.Classes.Eq Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletion
instance GHC.Generics.Generic Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletionResponse
instance GHC.Show.Show Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletionResponse
instance GHC.Read.Read Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletionResponse
instance GHC.Classes.Eq Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletion
instance Control.DeepSeq.NFData Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletionResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletion
instance Control.DeepSeq.NFData Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletion
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletion
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletion
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletion
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.ScheduleKeyDeletion.ScheduleKeyDeletion


-- | Deletes the specified grant. You revoke a grant to terminate the
--   permissions that the grant allows. For more information, see
--   <a>Retiring and revoking grants</a> in the /<i>Key Management Service
--   Developer Guide</i>/ .
--   
--   When you create, retire, or revoke a grant, there might be a brief
--   delay, usually less than five minutes, until the grant is available
--   throughout KMS. This state is known as <i>eventual consistency</i>.
--   For details, see <a>Eventual consistency</a> in the /<i>Key Management
--   Service Developer Guide</i>/ .
--   
--   For detailed information about grants, including grant terminology,
--   see <a>Using grants</a> in the /<i>Key Management Service Developer
--   Guide</i>/ . For examples of working with grants in several
--   programming languages, see <a>Programming grants</a>.
--   
--   <b>Cross-account use</b>: Yes. To perform this operation on a KMS key
--   in a different Amazon Web Services account, specify the key ARN in the
--   value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>: <a>kms:RevokeGrant</a> (key policy).
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>CreateGrant</li>
--   <li>ListGrants</li>
--   <li>ListRetirableGrants</li>
--   <li>RetireGrant</li>
--   </ul>
module Network.AWS.KMS.RevokeGrant

-- | <i>See:</i> <a>newRevokeGrant</a> smart constructor.
data RevokeGrant
RevokeGrant' :: Text -> Text -> RevokeGrant

-- | A unique identifier for the KMS key associated with the grant. To get
--   the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:RevokeGrant'] :: RevokeGrant -> Text

-- | Identifies the grant to revoke. To get the grant ID, use CreateGrant,
--   ListGrants, or ListRetirableGrants.
[$sel:grantId:RevokeGrant'] :: RevokeGrant -> Text

-- | Create a value of <a>RevokeGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:RevokeGrant'</a>, <a>revokeGrant_keyId</a> - A unique
--   identifier for the KMS key associated with the grant. To get the key
--   ID and key ARN for a KMS key, use ListKeys or DescribeKey.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:grantId:RevokeGrant'</a>, <a>revokeGrant_grantId</a> -
--   Identifies the grant to revoke. To get the grant ID, use CreateGrant,
--   ListGrants, or ListRetirableGrants.
newRevokeGrant :: Text -> Text -> RevokeGrant

-- | A unique identifier for the KMS key associated with the grant. To get
--   the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
revokeGrant_keyId :: Lens' RevokeGrant Text

-- | Identifies the grant to revoke. To get the grant ID, use CreateGrant,
--   ListGrants, or ListRetirableGrants.
revokeGrant_grantId :: Lens' RevokeGrant Text

-- | <i>See:</i> <a>newRevokeGrantResponse</a> smart constructor.
data RevokeGrantResponse
RevokeGrantResponse' :: RevokeGrantResponse

-- | Create a value of <a>RevokeGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newRevokeGrantResponse :: RevokeGrantResponse
instance GHC.Generics.Generic Network.AWS.KMS.RevokeGrant.RevokeGrant
instance GHC.Show.Show Network.AWS.KMS.RevokeGrant.RevokeGrant
instance GHC.Read.Read Network.AWS.KMS.RevokeGrant.RevokeGrant
instance GHC.Classes.Eq Network.AWS.KMS.RevokeGrant.RevokeGrant
instance GHC.Generics.Generic Network.AWS.KMS.RevokeGrant.RevokeGrantResponse
instance GHC.Show.Show Network.AWS.KMS.RevokeGrant.RevokeGrantResponse
instance GHC.Read.Read Network.AWS.KMS.RevokeGrant.RevokeGrantResponse
instance GHC.Classes.Eq Network.AWS.KMS.RevokeGrant.RevokeGrantResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.RevokeGrant.RevokeGrant
instance Control.DeepSeq.NFData Network.AWS.KMS.RevokeGrant.RevokeGrantResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.RevokeGrant.RevokeGrant
instance Control.DeepSeq.NFData Network.AWS.KMS.RevokeGrant.RevokeGrant
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.RevokeGrant.RevokeGrant
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.RevokeGrant.RevokeGrant
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.RevokeGrant.RevokeGrant
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.RevokeGrant.RevokeGrant


-- | Deletes a grant. Typically, you retire a grant when you no longer need
--   its permissions. To identify the grant to retire, use a <a>grant
--   token</a>, or both the grant ID and a key identifier (key ID or key
--   ARN) of the KMS key. The CreateGrant operation returns both values.
--   
--   This operation can be called by the <i>retiring principal</i> for a
--   grant, by the <i>grantee principal</i> if the grant allows the
--   <tt>RetireGrant</tt> operation, and by the Amazon Web Services account
--   (root user) in which the grant is created. It can also be called by
--   principals to whom permission for retiring a grant is delegated. For
--   details, see <a>Retiring and revoking grants</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   For detailed information about grants, including grant terminology,
--   see <a>Using grants</a> in the /<i>Key Management Service Developer
--   Guide</i>/ . For examples of working with grants in several
--   programming languages, see <a>Programming grants</a>.
--   
--   <b>Cross-account use</b>: Yes. You can retire a grant on a KMS key in
--   a different Amazon Web Services account.
--   
--   <b>Required permissions:</b>:Permission to retire a grant is
--   determined primarily by the grant. For details, see <a>Retiring and
--   revoking grants</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>CreateGrant</li>
--   <li>ListGrants</li>
--   <li>ListRetirableGrants</li>
--   <li>RevokeGrant</li>
--   </ul>
module Network.AWS.KMS.RetireGrant

-- | <i>See:</i> <a>newRetireGrant</a> smart constructor.
data RetireGrant
RetireGrant' :: Maybe Text -> Maybe Text -> Maybe Text -> RetireGrant

-- | Identifies the grant to be retired. You can use a grant token to
--   identify a new grant even before it has achieved eventual consistency.
--   
--   Only the CreateGrant operation returns a grant token. For details, see
--   <a>Grant token</a> and <a>Eventual consistency</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:grantToken:RetireGrant'] :: RetireGrant -> Maybe Text

-- | Identifies the grant to retire. To get the grant ID, use CreateGrant,
--   ListGrants, or ListRetirableGrants.
--   
--   <ul>
--   <li>Grant ID Example -
--   0123456789012345678901234567890123456789012345678901234567890123</li>
--   </ul>
[$sel:grantId:RetireGrant'] :: RetireGrant -> Maybe Text

-- | The key ARN KMS key associated with the grant. To find the key ARN,
--   use the ListKeys operation.
--   
--   For example:
--   <tt>arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt>
[$sel:keyId:RetireGrant'] :: RetireGrant -> Maybe Text

-- | Create a value of <a>RetireGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantToken:RetireGrant'</a>, <a>retireGrant_grantToken</a> -
--   Identifies the grant to be retired. You can use a grant token to
--   identify a new grant even before it has achieved eventual consistency.
--   
--   Only the CreateGrant operation returns a grant token. For details, see
--   <a>Grant token</a> and <a>Eventual consistency</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:grantId:RetireGrant'</a>, <a>retireGrant_grantId</a> -
--   Identifies the grant to retire. To get the grant ID, use CreateGrant,
--   ListGrants, or ListRetirableGrants.
--   
--   <ul>
--   <li>Grant ID Example -
--   0123456789012345678901234567890123456789012345678901234567890123</li>
--   </ul>
--   
--   <a>$sel:keyId:RetireGrant'</a>, <a>retireGrant_keyId</a> - The key ARN
--   KMS key associated with the grant. To find the key ARN, use the
--   ListKeys operation.
--   
--   For example:
--   <tt>arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt>
newRetireGrant :: RetireGrant

-- | Identifies the grant to be retired. You can use a grant token to
--   identify a new grant even before it has achieved eventual consistency.
--   
--   Only the CreateGrant operation returns a grant token. For details, see
--   <a>Grant token</a> and <a>Eventual consistency</a> in the <i>Key
--   Management Service Developer Guide</i>.
retireGrant_grantToken :: Lens' RetireGrant (Maybe Text)

-- | Identifies the grant to retire. To get the grant ID, use CreateGrant,
--   ListGrants, or ListRetirableGrants.
--   
--   <ul>
--   <li>Grant ID Example -
--   0123456789012345678901234567890123456789012345678901234567890123</li>
--   </ul>
retireGrant_grantId :: Lens' RetireGrant (Maybe Text)

-- | The key ARN KMS key associated with the grant. To find the key ARN,
--   use the ListKeys operation.
--   
--   For example:
--   <tt>arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt>
retireGrant_keyId :: Lens' RetireGrant (Maybe Text)

-- | <i>See:</i> <a>newRetireGrantResponse</a> smart constructor.
data RetireGrantResponse
RetireGrantResponse' :: RetireGrantResponse

-- | Create a value of <a>RetireGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newRetireGrantResponse :: RetireGrantResponse
instance GHC.Generics.Generic Network.AWS.KMS.RetireGrant.RetireGrant
instance GHC.Show.Show Network.AWS.KMS.RetireGrant.RetireGrant
instance GHC.Read.Read Network.AWS.KMS.RetireGrant.RetireGrant
instance GHC.Classes.Eq Network.AWS.KMS.RetireGrant.RetireGrant
instance GHC.Generics.Generic Network.AWS.KMS.RetireGrant.RetireGrantResponse
instance GHC.Show.Show Network.AWS.KMS.RetireGrant.RetireGrantResponse
instance GHC.Read.Read Network.AWS.KMS.RetireGrant.RetireGrantResponse
instance GHC.Classes.Eq Network.AWS.KMS.RetireGrant.RetireGrantResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.RetireGrant.RetireGrant
instance Control.DeepSeq.NFData Network.AWS.KMS.RetireGrant.RetireGrantResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.RetireGrant.RetireGrant
instance Control.DeepSeq.NFData Network.AWS.KMS.RetireGrant.RetireGrant
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.RetireGrant.RetireGrant
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.RetireGrant.RetireGrant
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.RetireGrant.RetireGrant
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.RetireGrant.RetireGrant


-- | Replicates a multi-Region key into the specified Region. This
--   operation creates a multi-Region replica key based on a multi-Region
--   primary key in a different Region of the same Amazon Web Services
--   partition. You can create multiple replicas of a primary key, but each
--   must be in a different Region. To create a multi-Region primary key,
--   use the CreateKey operation.
--   
--   This operation supports <i>multi-Region keys</i>, an KMS feature that
--   lets you create multiple interoperable KMS keys in different Amazon
--   Web Services Regions. Because these KMS keys have the same key ID, key
--   material, and other metadata, you can use them interchangeably to
--   encrypt data in one Amazon Web Services Region and decrypt it in a
--   different Amazon Web Services Region without re-encrypting the data or
--   making a cross-Region call. For more information about multi-Region
--   keys, see <a>Using multi-Region keys</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   A <i>replica key</i> is a fully-functional KMS key that can be used
--   independently of its primary and peer replica keys. A primary key and
--   its replica keys share properties that make them interoperable. They
--   have the same <a>key ID</a> and key material. They also have the same
--   <a>key spec</a>, <a>key usage</a>, <a>key material origin</a>, and
--   <a>automatic key rotation status</a>. KMS automatically synchronizes
--   these shared properties among related multi-Region keys. All other
--   properties of a replica key can differ, including its <a>key
--   policy</a>, <a>tags</a>, <a>aliases</a>, and <a>key state</a>. KMS
--   pricing and quotas for KMS keys apply to each primary key and replica
--   key.
--   
--   When this operation completes, the new replica key has a transient key
--   state of <tt>Creating</tt>. This key state changes to <tt>Enabled</tt>
--   (or <tt>PendingImport</tt>) after a few seconds when the process of
--   creating the new replica key is complete. While the key state is
--   <tt>Creating</tt>, you can manage key, but you cannot yet use it in
--   cryptographic operations. If you are creating and using the replica
--   key programmatically, retry on <tt>KMSInvalidStateException</tt> or
--   call <tt>DescribeKey</tt> to check its <tt>KeyState</tt> value before
--   using it. For details about the <tt>Creating</tt> key state, see
--   <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   The CloudTrail log of a <tt>ReplicateKey</tt> operation records a
--   <tt>ReplicateKey</tt> operation in the primary key's Region and a
--   CreateKey operation in the replica key's Region.
--   
--   If you replicate a multi-Region primary key with imported key
--   material, the replica key is created with no key material. You must
--   import the same key material that you imported into the primary key.
--   For details, see <a>Importing key material into multi-Region keys</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   To convert a replica key to a primary key, use the UpdatePrimaryRegion
--   operation.
--   
--   <tt>ReplicateKey</tt> uses different default values for the
--   <tt>KeyPolicy</tt> and <tt>Tags</tt> parameters than those used in the
--   KMS console. For details, see the parameter descriptions.
--   
--   <b>Cross-account use</b>: No. You cannot use this operation to create
--   a replica key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>:
--   
--   <ul>
--   <li><tt>kms:ReplicateKey</tt> on the primary key (in the primary key's
--   Region). Include this permission in the primary key's key policy.</li>
--   <li><tt>kms:CreateKey</tt> in an IAM policy in the replica
--   Region.</li>
--   <li>To use the <tt>Tags</tt> parameter, <tt>kms:TagResource</tt> in an
--   IAM policy in the replica Region.</li>
--   </ul>
--   
--   <b>Related operations</b>
--   
--   <ul>
--   <li>CreateKey</li>
--   <li>UpdatePrimaryRegion</li>
--   </ul>
module Network.AWS.KMS.ReplicateKey

-- | <i>See:</i> <a>newReplicateKey</a> smart constructor.
data ReplicateKey
ReplicateKey' :: Maybe Bool -> Maybe [Tag] -> Maybe Text -> Maybe Text -> Text -> Text -> ReplicateKey

-- | A flag to indicate whether to bypass the key policy lockout safety
--   check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   Use this parameter only when you intend to prevent the principal that
--   is making the request from making a subsequent <tt>PutKeyPolicy</tt>
--   request on the KMS key.
--   
--   The default value is false.
[$sel:bypassPolicyLockoutSafetyCheck:ReplicateKey'] :: ReplicateKey -> Maybe Bool

-- | Assigns one or more tags to the replica key. Use this parameter to tag
--   the KMS key when it is created. To tag an existing KMS key, use the
--   TagResource operation.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   To use this parameter, you must have <a>kms:TagResource</a> permission
--   in an IAM policy.
--   
--   Tags are not a shared property of multi-Region keys. You can specify
--   the same tags or different tags for each key in a set of related
--   multi-Region keys. KMS does not synchronize this property.
--   
--   Each tag consists of a tag key and a tag value. Both the tag key and
--   the tag value are required, but the tag value can be an empty (null)
--   string. You cannot have more than one tag on a KMS key with the same
--   tag key. If you specify an existing tag key with a different tag
--   value, KMS replaces the current tag value with the specified one.
--   
--   When you add tags to an Amazon Web Services resource, Amazon Web
--   Services generates a cost allocation report with usage and costs
--   aggregated by tags. Tags can also be used to control access to a KMS
--   key. For details, see <a>Tagging Keys</a>.
[$sel:tags:ReplicateKey'] :: ReplicateKey -> Maybe [Tag]

-- | A description of the KMS key. The default value is an empty string (no
--   description).
--   
--   The description is not a shared property of multi-Region keys. You can
--   specify the same description or a different description for each key
--   in a set of related multi-Region keys. KMS does not synchronize this
--   property.
[$sel:description:ReplicateKey'] :: ReplicateKey -> Maybe Text

-- | The key policy to attach to the KMS key. This parameter is optional.
--   If you do not provide a key policy, KMS attaches the <a>default key
--   policy</a> to the KMS key.
--   
--   The key policy is not a shared property of multi-Region keys. You can
--   specify the same key policy or a different key policy for each key in
--   a set of related multi-Region keys. KMS does not synchronize this
--   property.
--   
--   If you provide a key policy, it must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must give the caller <tt>kms:PutKeyPolicy</tt>
--   permission on the replica key. This reduces the risk that the KMS key
--   becomes unmanageable. For more information, refer to the scenario in
--   the <a>Default Key Policy</a> section of the /<i>Key Management
--   Service Developer Guide</i>/ .</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /<i>Identity and Access Management User Guide</i>/
--   .</li>
--   <li>The key policy size quota is 32 kilobytes (32768 bytes).</li>
--   </ul>
[$sel:policy:ReplicateKey'] :: ReplicateKey -> Maybe Text

-- | Identifies the multi-Region primary key that is being replicated. To
--   determine whether a KMS key is a multi-Region primary key, use the
--   DescribeKey operation to check the value of the
--   <tt>MultiRegionKeyType</tt> property.
--   
--   Specify the key ID or key ARN of a multi-Region primary key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:ReplicateKey'] :: ReplicateKey -> Text

-- | The Region ID of the Amazon Web Services Region for this replica key.
--   
--   Enter the Region ID, such as <tt>us-east-1</tt> or
--   <tt>ap-southeast-2</tt>. For a list of Amazon Web Services Regions in
--   which KMS is supported, see <a>KMS service endpoints</a> in the
--   <i>Amazon Web Services General Reference</i>.
--   
--   The replica must be in a different Amazon Web Services Region than its
--   primary key and other replicas of that primary key, but in the same
--   Amazon Web Services partition. KMS must be available in the replica
--   Region. If the Region is not enabled by default, the Amazon Web
--   Services account must be enabled in the Region.
--   
--   For information about Amazon Web Services partitions, see <a>Amazon
--   Resource Names (ARNs) in the Amazon Web Services General
--   Reference.</a> For information about enabling and disabling Regions,
--   see <a>Enabling a Region</a> and <a>Disabling a Region</a> in the
--   <i>Amazon Web Services General Reference</i>.
[$sel:replicaRegion:ReplicateKey'] :: ReplicateKey -> Text

-- | Create a value of <a>ReplicateKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bypassPolicyLockoutSafetyCheck:ReplicateKey'</a>,
--   <a>replicateKey_bypassPolicyLockoutSafetyCheck</a> - A flag to
--   indicate whether to bypass the key policy lockout safety check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   Use this parameter only when you intend to prevent the principal that
--   is making the request from making a subsequent <tt>PutKeyPolicy</tt>
--   request on the KMS key.
--   
--   The default value is false.
--   
--   <a>$sel:tags:ReplicateKey'</a>, <a>replicateKey_tags</a> - Assigns one
--   or more tags to the replica key. Use this parameter to tag the KMS key
--   when it is created. To tag an existing KMS key, use the TagResource
--   operation.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   To use this parameter, you must have <a>kms:TagResource</a> permission
--   in an IAM policy.
--   
--   Tags are not a shared property of multi-Region keys. You can specify
--   the same tags or different tags for each key in a set of related
--   multi-Region keys. KMS does not synchronize this property.
--   
--   Each tag consists of a tag key and a tag value. Both the tag key and
--   the tag value are required, but the tag value can be an empty (null)
--   string. You cannot have more than one tag on a KMS key with the same
--   tag key. If you specify an existing tag key with a different tag
--   value, KMS replaces the current tag value with the specified one.
--   
--   When you add tags to an Amazon Web Services resource, Amazon Web
--   Services generates a cost allocation report with usage and costs
--   aggregated by tags. Tags can also be used to control access to a KMS
--   key. For details, see <a>Tagging Keys</a>.
--   
--   <a>$sel:description:ReplicateKey'</a>, <a>replicateKey_description</a>
--   - A description of the KMS key. The default value is an empty string
--   (no description).
--   
--   The description is not a shared property of multi-Region keys. You can
--   specify the same description or a different description for each key
--   in a set of related multi-Region keys. KMS does not synchronize this
--   property.
--   
--   <a>$sel:policy:ReplicateKey'</a>, <a>replicateKey_policy</a> - The key
--   policy to attach to the KMS key. This parameter is optional. If you do
--   not provide a key policy, KMS attaches the <a>default key policy</a>
--   to the KMS key.
--   
--   The key policy is not a shared property of multi-Region keys. You can
--   specify the same key policy or a different key policy for each key in
--   a set of related multi-Region keys. KMS does not synchronize this
--   property.
--   
--   If you provide a key policy, it must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must give the caller <tt>kms:PutKeyPolicy</tt>
--   permission on the replica key. This reduces the risk that the KMS key
--   becomes unmanageable. For more information, refer to the scenario in
--   the <a>Default Key Policy</a> section of the /<i>Key Management
--   Service Developer Guide</i>/ .</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /<i>Identity and Access Management User Guide</i>/
--   .</li>
--   <li>The key policy size quota is 32 kilobytes (32768 bytes).</li>
--   </ul>
--   
--   <a>$sel:keyId:ReplicateKey'</a>, <a>replicateKey_keyId</a> -
--   Identifies the multi-Region primary key that is being replicated. To
--   determine whether a KMS key is a multi-Region primary key, use the
--   DescribeKey operation to check the value of the
--   <tt>MultiRegionKeyType</tt> property.
--   
--   Specify the key ID or key ARN of a multi-Region primary key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:replicaRegion:ReplicateKey'</a>,
--   <a>replicateKey_replicaRegion</a> - The Region ID of the Amazon Web
--   Services Region for this replica key.
--   
--   Enter the Region ID, such as <tt>us-east-1</tt> or
--   <tt>ap-southeast-2</tt>. For a list of Amazon Web Services Regions in
--   which KMS is supported, see <a>KMS service endpoints</a> in the
--   <i>Amazon Web Services General Reference</i>.
--   
--   The replica must be in a different Amazon Web Services Region than its
--   primary key and other replicas of that primary key, but in the same
--   Amazon Web Services partition. KMS must be available in the replica
--   Region. If the Region is not enabled by default, the Amazon Web
--   Services account must be enabled in the Region.
--   
--   For information about Amazon Web Services partitions, see <a>Amazon
--   Resource Names (ARNs) in the Amazon Web Services General
--   Reference.</a> For information about enabling and disabling Regions,
--   see <a>Enabling a Region</a> and <a>Disabling a Region</a> in the
--   <i>Amazon Web Services General Reference</i>.
newReplicateKey :: Text -> Text -> ReplicateKey

-- | A flag to indicate whether to bypass the key policy lockout safety
--   check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   Use this parameter only when you intend to prevent the principal that
--   is making the request from making a subsequent <tt>PutKeyPolicy</tt>
--   request on the KMS key.
--   
--   The default value is false.
replicateKey_bypassPolicyLockoutSafetyCheck :: Lens' ReplicateKey (Maybe Bool)

-- | Assigns one or more tags to the replica key. Use this parameter to tag
--   the KMS key when it is created. To tag an existing KMS key, use the
--   TagResource operation.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   To use this parameter, you must have <a>kms:TagResource</a> permission
--   in an IAM policy.
--   
--   Tags are not a shared property of multi-Region keys. You can specify
--   the same tags or different tags for each key in a set of related
--   multi-Region keys. KMS does not synchronize this property.
--   
--   Each tag consists of a tag key and a tag value. Both the tag key and
--   the tag value are required, but the tag value can be an empty (null)
--   string. You cannot have more than one tag on a KMS key with the same
--   tag key. If you specify an existing tag key with a different tag
--   value, KMS replaces the current tag value with the specified one.
--   
--   When you add tags to an Amazon Web Services resource, Amazon Web
--   Services generates a cost allocation report with usage and costs
--   aggregated by tags. Tags can also be used to control access to a KMS
--   key. For details, see <a>Tagging Keys</a>.
replicateKey_tags :: Lens' ReplicateKey (Maybe [Tag])

-- | A description of the KMS key. The default value is an empty string (no
--   description).
--   
--   The description is not a shared property of multi-Region keys. You can
--   specify the same description or a different description for each key
--   in a set of related multi-Region keys. KMS does not synchronize this
--   property.
replicateKey_description :: Lens' ReplicateKey (Maybe Text)

-- | The key policy to attach to the KMS key. This parameter is optional.
--   If you do not provide a key policy, KMS attaches the <a>default key
--   policy</a> to the KMS key.
--   
--   The key policy is not a shared property of multi-Region keys. You can
--   specify the same key policy or a different key policy for each key in
--   a set of related multi-Region keys. KMS does not synchronize this
--   property.
--   
--   If you provide a key policy, it must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must give the caller <tt>kms:PutKeyPolicy</tt>
--   permission on the replica key. This reduces the risk that the KMS key
--   becomes unmanageable. For more information, refer to the scenario in
--   the <a>Default Key Policy</a> section of the /<i>Key Management
--   Service Developer Guide</i>/ .</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /<i>Identity and Access Management User Guide</i>/
--   .</li>
--   <li>The key policy size quota is 32 kilobytes (32768 bytes).</li>
--   </ul>
replicateKey_policy :: Lens' ReplicateKey (Maybe Text)

-- | Identifies the multi-Region primary key that is being replicated. To
--   determine whether a KMS key is a multi-Region primary key, use the
--   DescribeKey operation to check the value of the
--   <tt>MultiRegionKeyType</tt> property.
--   
--   Specify the key ID or key ARN of a multi-Region primary key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
replicateKey_keyId :: Lens' ReplicateKey Text

-- | The Region ID of the Amazon Web Services Region for this replica key.
--   
--   Enter the Region ID, such as <tt>us-east-1</tt> or
--   <tt>ap-southeast-2</tt>. For a list of Amazon Web Services Regions in
--   which KMS is supported, see <a>KMS service endpoints</a> in the
--   <i>Amazon Web Services General Reference</i>.
--   
--   The replica must be in a different Amazon Web Services Region than its
--   primary key and other replicas of that primary key, but in the same
--   Amazon Web Services partition. KMS must be available in the replica
--   Region. If the Region is not enabled by default, the Amazon Web
--   Services account must be enabled in the Region.
--   
--   For information about Amazon Web Services partitions, see <a>Amazon
--   Resource Names (ARNs) in the Amazon Web Services General
--   Reference.</a> For information about enabling and disabling Regions,
--   see <a>Enabling a Region</a> and <a>Disabling a Region</a> in the
--   <i>Amazon Web Services General Reference</i>.
replicateKey_replicaRegion :: Lens' ReplicateKey Text

-- | <i>See:</i> <a>newReplicateKeyResponse</a> smart constructor.
data ReplicateKeyResponse
ReplicateKeyResponse' :: Maybe [Tag] -> Maybe Text -> Maybe KeyMetadata -> Int -> ReplicateKeyResponse

-- | The tags on the new replica key. The value is a list of tag key and
--   tag value pairs.
[$sel:replicaTags:ReplicateKeyResponse'] :: ReplicateKeyResponse -> Maybe [Tag]

-- | The key policy of the new replica key. The value is a key policy
--   document in JSON format.
[$sel:replicaPolicy:ReplicateKeyResponse'] :: ReplicateKeyResponse -> Maybe Text

-- | Displays details about the new replica key, including its Amazon
--   Resource Name (<a>key ARN</a>) and <a>key state</a>. It also includes
--   the ARN and Amazon Web Services Region of its primary key and other
--   replica keys.
[$sel:replicaKeyMetadata:ReplicateKeyResponse'] :: ReplicateKeyResponse -> Maybe KeyMetadata

-- | The response's http status code.
[$sel:httpStatus:ReplicateKeyResponse'] :: ReplicateKeyResponse -> Int

-- | Create a value of <a>ReplicateKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaTags:ReplicateKeyResponse'</a>,
--   <a>replicateKeyResponse_replicaTags</a> - The tags on the new replica
--   key. The value is a list of tag key and tag value pairs.
--   
--   <a>$sel:replicaPolicy:ReplicateKeyResponse'</a>,
--   <a>replicateKeyResponse_replicaPolicy</a> - The key policy of the new
--   replica key. The value is a key policy document in JSON format.
--   
--   <a>$sel:replicaKeyMetadata:ReplicateKeyResponse'</a>,
--   <a>replicateKeyResponse_replicaKeyMetadata</a> - Displays details
--   about the new replica key, including its Amazon Resource Name (<a>key
--   ARN</a>) and <a>key state</a>. It also includes the ARN and Amazon Web
--   Services Region of its primary key and other replica keys.
--   
--   <a>$sel:httpStatus:ReplicateKeyResponse'</a>,
--   <a>replicateKeyResponse_httpStatus</a> - The response's http status
--   code.
newReplicateKeyResponse :: Int -> ReplicateKeyResponse

-- | The tags on the new replica key. The value is a list of tag key and
--   tag value pairs.
replicateKeyResponse_replicaTags :: Lens' ReplicateKeyResponse (Maybe [Tag])

-- | The key policy of the new replica key. The value is a key policy
--   document in JSON format.
replicateKeyResponse_replicaPolicy :: Lens' ReplicateKeyResponse (Maybe Text)

-- | Displays details about the new replica key, including its Amazon
--   Resource Name (<a>key ARN</a>) and <a>key state</a>. It also includes
--   the ARN and Amazon Web Services Region of its primary key and other
--   replica keys.
replicateKeyResponse_replicaKeyMetadata :: Lens' ReplicateKeyResponse (Maybe KeyMetadata)

-- | The response's http status code.
replicateKeyResponse_httpStatus :: Lens' ReplicateKeyResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.ReplicateKey.ReplicateKey
instance GHC.Show.Show Network.AWS.KMS.ReplicateKey.ReplicateKey
instance GHC.Read.Read Network.AWS.KMS.ReplicateKey.ReplicateKey
instance GHC.Classes.Eq Network.AWS.KMS.ReplicateKey.ReplicateKey
instance GHC.Generics.Generic Network.AWS.KMS.ReplicateKey.ReplicateKeyResponse
instance GHC.Show.Show Network.AWS.KMS.ReplicateKey.ReplicateKeyResponse
instance GHC.Read.Read Network.AWS.KMS.ReplicateKey.ReplicateKeyResponse
instance GHC.Classes.Eq Network.AWS.KMS.ReplicateKey.ReplicateKeyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.ReplicateKey.ReplicateKey
instance Control.DeepSeq.NFData Network.AWS.KMS.ReplicateKey.ReplicateKeyResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.ReplicateKey.ReplicateKey
instance Control.DeepSeq.NFData Network.AWS.KMS.ReplicateKey.ReplicateKey
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.ReplicateKey.ReplicateKey
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.ReplicateKey.ReplicateKey
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.ReplicateKey.ReplicateKey
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.ReplicateKey.ReplicateKey


-- | Decrypts ciphertext and then reencrypts it entirely within KMS. You
--   can use this operation to change the KMS key under which data is
--   encrypted, such as when you <a>manually rotate</a> a KMS key or change
--   the KMS key that protects a ciphertext. You can also use it to
--   reencrypt ciphertext under the same KMS key, such as to change the
--   <a>encryption context</a> of a ciphertext.
--   
--   The <tt>ReEncrypt</tt> operation can decrypt ciphertext that was
--   encrypted by using an KMS KMS key in an KMS operation, such as Encrypt
--   or GenerateDataKey. It can also decrypt ciphertext that was encrypted
--   by using the public key of an <a>asymmetric KMS key</a> outside of
--   KMS. However, it cannot decrypt ciphertext produced by other
--   libraries, such as the <a>Amazon Web Services Encryption SDK</a> or
--   <a>Amazon S3 client-side encryption</a>. These libraries return a
--   ciphertext format that is incompatible with KMS.
--   
--   When you use the <tt>ReEncrypt</tt> operation, you need to provide
--   information for the decrypt operation and the subsequent encrypt
--   operation.
--   
--   <ul>
--   <li>If your ciphertext was encrypted under an asymmetric KMS key, you
--   must use the <tt>SourceKeyId</tt> parameter to identify the KMS key
--   that encrypted the ciphertext. You must also supply the encryption
--   algorithm that was used. This information is required to decrypt the
--   data.</li>
--   <li>If your ciphertext was encrypted under a symmetric KMS key, the
--   <tt>SourceKeyId</tt> parameter is optional. KMS can get this
--   information from metadata that it adds to the symmetric ciphertext
--   blob. This feature adds durability to your implementation by ensuring
--   that authorized users can decrypt ciphertext decades after it was
--   encrypted, even if they've lost track of the key ID. However,
--   specifying the source KMS key is always recommended as a best
--   practice. When you use the <tt>SourceKeyId</tt> parameter to specify a
--   KMS key, KMS uses only the KMS key you specify. If the ciphertext was
--   encrypted under a different KMS key, the <tt>ReEncrypt</tt> operation
--   fails. This practice ensures that you use the KMS key that you
--   intend.</li>
--   <li>To reencrypt the data, you must use the <tt>DestinationKeyId</tt>
--   parameter specify the KMS key that re-encrypts the data after it is
--   decrypted. You can select a symmetric or asymmetric KMS key. If the
--   destination KMS key is an asymmetric KMS key, you must also provide
--   the encryption algorithm. The algorithm that you choose must be
--   compatible with the KMS key.When you use an asymmetric KMS key to
--   encrypt or reencrypt data, be sure to record the KMS key and
--   encryption algorithm that you choose. You will be required to provide
--   the same KMS key and encryption algorithm when you decrypt the data.
--   If the KMS key and algorithm do not match the values used to encrypt
--   the data, the decrypt operation fails.You are not required to supply
--   the key ID and encryption algorithm when you decrypt with symmetric
--   KMS keys because KMS stores this information in the ciphertext blob.
--   KMS cannot store metadata in ciphertext generated with asymmetric
--   keys. The standard format for asymmetric key ciphertext does not
--   include configurable fields.</li>
--   </ul>
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: Yes. The source KMS key and destination KMS
--   key can be in different Amazon Web Services accounts. Either or both
--   KMS keys can be in a different account than the caller. To specify a
--   KMS key in a different account, you must use its key ARN or alias ARN.
--   
--   <b>Required permissions</b>:
--   
--   <ul>
--   <li><a>kms:ReEncryptFrom</a> permission on the source KMS key (key
--   policy)</li>
--   <li><a>kms:ReEncryptTo</a> permission on the destination KMS key (key
--   policy)</li>
--   </ul>
--   
--   To permit reencryption from or to a KMS key, include the
--   <tt>"kms:ReEncrypt*"</tt> permission in your <a>key policy</a>. This
--   permission is automatically included in the key policy when you use
--   the console to create a KMS key. But you must include it manually when
--   you create a KMS key programmatically or when you use the PutKeyPolicy
--   operation to set a key policy.
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>Decrypt</li>
--   <li>Encrypt</li>
--   <li>GenerateDataKey</li>
--   <li>GenerateDataKeyPair</li>
--   </ul>
module Network.AWS.KMS.ReEncrypt

-- | <i>See:</i> <a>newReEncrypt</a> smart constructor.
data ReEncrypt
ReEncrypt' :: Maybe (HashMap Text Text) -> Maybe [Text] -> Maybe (HashMap Text Text) -> Maybe Text -> Maybe EncryptionAlgorithmSpec -> Maybe EncryptionAlgorithmSpec -> Base64 -> Text -> ReEncrypt

-- | Specifies that encryption context to use when the reencrypting the
--   data.
--   
--   A destination encryption context is valid only when the destination
--   KMS key is a symmetric KMS key. The standard ciphertext format for
--   asymmetric KMS keys does not include fields for metadata.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:destinationEncryptionContext:ReEncrypt'] :: ReEncrypt -> Maybe (HashMap Text Text)

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantTokens:ReEncrypt'] :: ReEncrypt -> Maybe [Text]

-- | Specifies the encryption context to use to decrypt the ciphertext.
--   Enter the same encryption context that was used to encrypt the
--   ciphertext.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:sourceEncryptionContext:ReEncrypt'] :: ReEncrypt -> Maybe (HashMap Text Text)

-- | Specifies the KMS key that KMS will use to decrypt the ciphertext
--   before it is re-encrypted. Enter a key ID of the KMS key that was used
--   to encrypt the ciphertext.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. If you used a symmetric KMS key, KMS can
--   get the KMS key from metadata that it adds to the symmetric ciphertext
--   blob. However, it is always recommended as a best practice. This
--   practice ensures that you use the KMS key that you intend.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
[$sel:sourceKeyId:ReEncrypt'] :: ReEncrypt -> Maybe Text

-- | Specifies the encryption algorithm that KMS will use to reecrypt the
--   data after it has decrypted it. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, represents the encryption algorithm used
--   for symmetric KMS keys.
--   
--   This parameter is required only when the destination KMS key is an
--   asymmetric KMS key.
[$sel:destinationEncryptionAlgorithm:ReEncrypt'] :: ReEncrypt -> Maybe EncryptionAlgorithmSpec

-- | Specifies the encryption algorithm that KMS will use to decrypt the
--   ciphertext before it is reencrypted. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, represents the algorithm used for
--   symmetric KMS keys.
--   
--   Specify the same algorithm that was used to encrypt the ciphertext. If
--   you specify a different algorithm, the decrypt attempt fails.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key.
[$sel:sourceEncryptionAlgorithm:ReEncrypt'] :: ReEncrypt -> Maybe EncryptionAlgorithmSpec

-- | Ciphertext of the data to reencrypt.
[$sel:ciphertextBlob:ReEncrypt'] :: ReEncrypt -> Base64

-- | A unique identifier for the KMS key that is used to reencrypt the
--   data. Specify a symmetric or asymmetric KMS key with a
--   <tt>KeyUsage</tt> value of <tt>ENCRYPT_DECRYPT</tt>. To find the
--   <tt>KeyUsage</tt> value of a KMS key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
[$sel:destinationKeyId:ReEncrypt'] :: ReEncrypt -> Text

-- | Create a value of <a>ReEncrypt</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:destinationEncryptionContext:ReEncrypt'</a>,
--   <a>reEncrypt_destinationEncryptionContext</a> - Specifies that
--   encryption context to use when the reencrypting the data.
--   
--   A destination encryption context is valid only when the destination
--   KMS key is a symmetric KMS key. The standard ciphertext format for
--   asymmetric KMS keys does not include fields for metadata.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:grantTokens:ReEncrypt'</a>, <a>reEncrypt_grantTokens</a> - A
--   list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:sourceEncryptionContext:ReEncrypt'</a>,
--   <a>reEncrypt_sourceEncryptionContext</a> - Specifies the encryption
--   context to use to decrypt the ciphertext. Enter the same encryption
--   context that was used to encrypt the ciphertext.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:sourceKeyId:ReEncrypt'</a>, <a>reEncrypt_sourceKeyId</a> -
--   Specifies the KMS key that KMS will use to decrypt the ciphertext
--   before it is re-encrypted. Enter a key ID of the KMS key that was used
--   to encrypt the ciphertext.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. If you used a symmetric KMS key, KMS can
--   get the KMS key from metadata that it adds to the symmetric ciphertext
--   blob. However, it is always recommended as a best practice. This
--   practice ensures that you use the KMS key that you intend.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:destinationEncryptionAlgorithm:ReEncrypt'</a>,
--   <a>reEncrypt_destinationEncryptionAlgorithm</a> - Specifies the
--   encryption algorithm that KMS will use to reecrypt the data after it
--   has decrypted it. The default value, <tt>SYMMETRIC_DEFAULT</tt>,
--   represents the encryption algorithm used for symmetric KMS keys.
--   
--   This parameter is required only when the destination KMS key is an
--   asymmetric KMS key.
--   
--   <a>$sel:sourceEncryptionAlgorithm:ReEncrypt'</a>,
--   <a>reEncrypt_sourceEncryptionAlgorithm</a> - Specifies the encryption
--   algorithm that KMS will use to decrypt the ciphertext before it is
--   reencrypted. The default value, <tt>SYMMETRIC_DEFAULT</tt>, represents
--   the algorithm used for symmetric KMS keys.
--   
--   Specify the same algorithm that was used to encrypt the ciphertext. If
--   you specify a different algorithm, the decrypt attempt fails.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key.
--   
--   <a>$sel:ciphertextBlob:ReEncrypt'</a>, <a>reEncrypt_ciphertextBlob</a>
--   - Ciphertext of the data to reencrypt.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:destinationKeyId:ReEncrypt'</a>,
--   <a>reEncrypt_destinationKeyId</a> - A unique identifier for the KMS
--   key that is used to reencrypt the data. Specify a symmetric or
--   asymmetric KMS key with a <tt>KeyUsage</tt> value of
--   <tt>ENCRYPT_DECRYPT</tt>. To find the <tt>KeyUsage</tt> value of a KMS
--   key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
newReEncrypt :: ByteString -> Text -> ReEncrypt

-- | Specifies that encryption context to use when the reencrypting the
--   data.
--   
--   A destination encryption context is valid only when the destination
--   KMS key is a symmetric KMS key. The standard ciphertext format for
--   asymmetric KMS keys does not include fields for metadata.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
reEncrypt_destinationEncryptionContext :: Lens' ReEncrypt (Maybe (HashMap Text Text))

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
reEncrypt_grantTokens :: Lens' ReEncrypt (Maybe [Text])

-- | Specifies the encryption context to use to decrypt the ciphertext.
--   Enter the same encryption context that was used to encrypt the
--   ciphertext.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
reEncrypt_sourceEncryptionContext :: Lens' ReEncrypt (Maybe (HashMap Text Text))

-- | Specifies the KMS key that KMS will use to decrypt the ciphertext
--   before it is re-encrypted. Enter a key ID of the KMS key that was used
--   to encrypt the ciphertext.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. If you used a symmetric KMS key, KMS can
--   get the KMS key from metadata that it adds to the symmetric ciphertext
--   blob. However, it is always recommended as a best practice. This
--   practice ensures that you use the KMS key that you intend.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
reEncrypt_sourceKeyId :: Lens' ReEncrypt (Maybe Text)

-- | Specifies the encryption algorithm that KMS will use to reecrypt the
--   data after it has decrypted it. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, represents the encryption algorithm used
--   for symmetric KMS keys.
--   
--   This parameter is required only when the destination KMS key is an
--   asymmetric KMS key.
reEncrypt_destinationEncryptionAlgorithm :: Lens' ReEncrypt (Maybe EncryptionAlgorithmSpec)

-- | Specifies the encryption algorithm that KMS will use to decrypt the
--   ciphertext before it is reencrypted. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, represents the algorithm used for
--   symmetric KMS keys.
--   
--   Specify the same algorithm that was used to encrypt the ciphertext. If
--   you specify a different algorithm, the decrypt attempt fails.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key.
reEncrypt_sourceEncryptionAlgorithm :: Lens' ReEncrypt (Maybe EncryptionAlgorithmSpec)

-- | Ciphertext of the data to reencrypt.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
reEncrypt_ciphertextBlob :: Lens' ReEncrypt ByteString

-- | A unique identifier for the KMS key that is used to reencrypt the
--   data. Specify a symmetric or asymmetric KMS key with a
--   <tt>KeyUsage</tt> value of <tt>ENCRYPT_DECRYPT</tt>. To find the
--   <tt>KeyUsage</tt> value of a KMS key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
reEncrypt_destinationKeyId :: Lens' ReEncrypt Text

-- | <i>See:</i> <a>newReEncryptResponse</a> smart constructor.
data ReEncryptResponse
ReEncryptResponse' :: Maybe Text -> Maybe EncryptionAlgorithmSpec -> Maybe Base64 -> Maybe EncryptionAlgorithmSpec -> Maybe Text -> Int -> ReEncryptResponse

-- | Unique identifier of the KMS key used to originally encrypt the data.
[$sel:sourceKeyId:ReEncryptResponse'] :: ReEncryptResponse -> Maybe Text

-- | The encryption algorithm that was used to reencrypt the data.
[$sel:destinationEncryptionAlgorithm:ReEncryptResponse'] :: ReEncryptResponse -> Maybe EncryptionAlgorithmSpec

-- | The reencrypted data. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.
[$sel:ciphertextBlob:ReEncryptResponse'] :: ReEncryptResponse -> Maybe Base64

-- | The encryption algorithm that was used to decrypt the ciphertext
--   before it was reencrypted.
[$sel:sourceEncryptionAlgorithm:ReEncryptResponse'] :: ReEncryptResponse -> Maybe EncryptionAlgorithmSpec

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that was used
--   to reencrypt the data.
[$sel:keyId:ReEncryptResponse'] :: ReEncryptResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ReEncryptResponse'] :: ReEncryptResponse -> Int

-- | Create a value of <a>ReEncryptResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourceKeyId:ReEncrypt'</a>,
--   <a>reEncryptResponse_sourceKeyId</a> - Unique identifier of the KMS
--   key used to originally encrypt the data.
--   
--   <a>$sel:destinationEncryptionAlgorithm:ReEncrypt'</a>,
--   <a>reEncryptResponse_destinationEncryptionAlgorithm</a> - The
--   encryption algorithm that was used to reencrypt the data.
--   
--   <a>$sel:ciphertextBlob:ReEncrypt'</a>,
--   <a>reEncryptResponse_ciphertextBlob</a> - The reencrypted data. When
--   you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:sourceEncryptionAlgorithm:ReEncrypt'</a>,
--   <a>reEncryptResponse_sourceEncryptionAlgorithm</a> - The encryption
--   algorithm that was used to decrypt the ciphertext before it was
--   reencrypted.
--   
--   <a>$sel:keyId:ReEncryptResponse'</a>, <a>reEncryptResponse_keyId</a> -
--   The Amazon Resource Name (<a>key ARN</a>) of the KMS key that was used
--   to reencrypt the data.
--   
--   <a>$sel:httpStatus:ReEncryptResponse'</a>,
--   <a>reEncryptResponse_httpStatus</a> - The response's http status code.
newReEncryptResponse :: Int -> ReEncryptResponse

-- | Unique identifier of the KMS key used to originally encrypt the data.
reEncryptResponse_sourceKeyId :: Lens' ReEncryptResponse (Maybe Text)

-- | The encryption algorithm that was used to reencrypt the data.
reEncryptResponse_destinationEncryptionAlgorithm :: Lens' ReEncryptResponse (Maybe EncryptionAlgorithmSpec)

-- | The reencrypted data. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
reEncryptResponse_ciphertextBlob :: Lens' ReEncryptResponse (Maybe ByteString)

-- | The encryption algorithm that was used to decrypt the ciphertext
--   before it was reencrypted.
reEncryptResponse_sourceEncryptionAlgorithm :: Lens' ReEncryptResponse (Maybe EncryptionAlgorithmSpec)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that was used
--   to reencrypt the data.
reEncryptResponse_keyId :: Lens' ReEncryptResponse (Maybe Text)

-- | The response's http status code.
reEncryptResponse_httpStatus :: Lens' ReEncryptResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.ReEncrypt.ReEncrypt
instance GHC.Show.Show Network.AWS.KMS.ReEncrypt.ReEncrypt
instance GHC.Read.Read Network.AWS.KMS.ReEncrypt.ReEncrypt
instance GHC.Classes.Eq Network.AWS.KMS.ReEncrypt.ReEncrypt
instance GHC.Generics.Generic Network.AWS.KMS.ReEncrypt.ReEncryptResponse
instance GHC.Show.Show Network.AWS.KMS.ReEncrypt.ReEncryptResponse
instance GHC.Read.Read Network.AWS.KMS.ReEncrypt.ReEncryptResponse
instance GHC.Classes.Eq Network.AWS.KMS.ReEncrypt.ReEncryptResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.ReEncrypt.ReEncrypt
instance Control.DeepSeq.NFData Network.AWS.KMS.ReEncrypt.ReEncryptResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.ReEncrypt.ReEncrypt
instance Control.DeepSeq.NFData Network.AWS.KMS.ReEncrypt.ReEncrypt
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.ReEncrypt.ReEncrypt
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.ReEncrypt.ReEncrypt
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.ReEncrypt.ReEncrypt
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.ReEncrypt.ReEncrypt


-- | Attaches a key policy to the specified KMS key.
--   
--   For more information about key policies, see <a>Key Policies</a> in
--   the <i>Key Management Service Developer Guide</i>. For help writing
--   and formatting a JSON policy document, see the <a>IAM JSON Policy
--   Reference</a> in the /<i>Identity and Access Management User
--   Guide</i>/ . For examples of adding a key policy in multiple
--   programming languages, see <a>Setting a key policy</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:PutKeyPolicy</a> (key policy)
--   
--   <b>Related operations</b>: GetKeyPolicy
module Network.AWS.KMS.PutKeyPolicy

-- | <i>See:</i> <a>newPutKeyPolicy</a> smart constructor.
data PutKeyPolicy
PutKeyPolicy' :: Maybe Bool -> Text -> Text -> Text -> PutKeyPolicy

-- | A flag to indicate whether to bypass the key policy lockout safety
--   check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   Use this parameter only when you intend to prevent the principal that
--   is making the request from making a subsequent <tt>PutKeyPolicy</tt>
--   request on the KMS key.
--   
--   The default value is false.
[$sel:bypassPolicyLockoutSafetyCheck:PutKeyPolicy'] :: PutKeyPolicy -> Maybe Bool

-- | Sets the key policy on the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:PutKeyPolicy'] :: PutKeyPolicy -> Text

-- | The name of the key policy. The only valid value is <tt>default</tt>.
[$sel:policyName:PutKeyPolicy'] :: PutKeyPolicy -> Text

-- | The key policy to attach to the KMS key.
--   
--   The key policy must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must allow the principal that is making the
--   <tt>PutKeyPolicy</tt> request to make a subsequent
--   <tt>PutKeyPolicy</tt> request on the KMS key. This reduces the risk
--   that the KMS key becomes unmanageable. For more information, refer to
--   the scenario in the <a>Default Key Policy</a> section of the <i>Key
--   Management Service Developer Guide</i>.</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /Amazon Web Services Identity and Access Management
--   User Guide/.</li>
--   </ul>
--   
--   The key policy cannot exceed 32 kilobytes (32768 bytes). For more
--   information, see <a>Resource Quotas</a> in the <i>Key Management
--   Service Developer Guide</i>.
[$sel:policy:PutKeyPolicy'] :: PutKeyPolicy -> Text

-- | Create a value of <a>PutKeyPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bypassPolicyLockoutSafetyCheck:PutKeyPolicy'</a>,
--   <a>putKeyPolicy_bypassPolicyLockoutSafetyCheck</a> - A flag to
--   indicate whether to bypass the key policy lockout safety check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   Use this parameter only when you intend to prevent the principal that
--   is making the request from making a subsequent <tt>PutKeyPolicy</tt>
--   request on the KMS key.
--   
--   The default value is false.
--   
--   <a>$sel:keyId:PutKeyPolicy'</a>, <a>putKeyPolicy_keyId</a> - Sets the
--   key policy on the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:policyName:PutKeyPolicy'</a>, <a>putKeyPolicy_policyName</a> -
--   The name of the key policy. The only valid value is <tt>default</tt>.
--   
--   <a>$sel:policy:PutKeyPolicy'</a>, <a>putKeyPolicy_policy</a> - The key
--   policy to attach to the KMS key.
--   
--   The key policy must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must allow the principal that is making the
--   <tt>PutKeyPolicy</tt> request to make a subsequent
--   <tt>PutKeyPolicy</tt> request on the KMS key. This reduces the risk
--   that the KMS key becomes unmanageable. For more information, refer to
--   the scenario in the <a>Default Key Policy</a> section of the <i>Key
--   Management Service Developer Guide</i>.</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /Amazon Web Services Identity and Access Management
--   User Guide/.</li>
--   </ul>
--   
--   The key policy cannot exceed 32 kilobytes (32768 bytes). For more
--   information, see <a>Resource Quotas</a> in the <i>Key Management
--   Service Developer Guide</i>.
newPutKeyPolicy :: Text -> Text -> Text -> PutKeyPolicy

-- | A flag to indicate whether to bypass the key policy lockout safety
--   check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   Use this parameter only when you intend to prevent the principal that
--   is making the request from making a subsequent <tt>PutKeyPolicy</tt>
--   request on the KMS key.
--   
--   The default value is false.
putKeyPolicy_bypassPolicyLockoutSafetyCheck :: Lens' PutKeyPolicy (Maybe Bool)

-- | Sets the key policy on the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
putKeyPolicy_keyId :: Lens' PutKeyPolicy Text

-- | The name of the key policy. The only valid value is <tt>default</tt>.
putKeyPolicy_policyName :: Lens' PutKeyPolicy Text

-- | The key policy to attach to the KMS key.
--   
--   The key policy must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must allow the principal that is making the
--   <tt>PutKeyPolicy</tt> request to make a subsequent
--   <tt>PutKeyPolicy</tt> request on the KMS key. This reduces the risk
--   that the KMS key becomes unmanageable. For more information, refer to
--   the scenario in the <a>Default Key Policy</a> section of the <i>Key
--   Management Service Developer Guide</i>.</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /Amazon Web Services Identity and Access Management
--   User Guide/.</li>
--   </ul>
--   
--   The key policy cannot exceed 32 kilobytes (32768 bytes). For more
--   information, see <a>Resource Quotas</a> in the <i>Key Management
--   Service Developer Guide</i>.
putKeyPolicy_policy :: Lens' PutKeyPolicy Text

-- | <i>See:</i> <a>newPutKeyPolicyResponse</a> smart constructor.
data PutKeyPolicyResponse
PutKeyPolicyResponse' :: PutKeyPolicyResponse

-- | Create a value of <a>PutKeyPolicyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newPutKeyPolicyResponse :: PutKeyPolicyResponse
instance GHC.Generics.Generic Network.AWS.KMS.PutKeyPolicy.PutKeyPolicy
instance GHC.Show.Show Network.AWS.KMS.PutKeyPolicy.PutKeyPolicy
instance GHC.Read.Read Network.AWS.KMS.PutKeyPolicy.PutKeyPolicy
instance GHC.Classes.Eq Network.AWS.KMS.PutKeyPolicy.PutKeyPolicy
instance GHC.Generics.Generic Network.AWS.KMS.PutKeyPolicy.PutKeyPolicyResponse
instance GHC.Show.Show Network.AWS.KMS.PutKeyPolicy.PutKeyPolicyResponse
instance GHC.Read.Read Network.AWS.KMS.PutKeyPolicy.PutKeyPolicyResponse
instance GHC.Classes.Eq Network.AWS.KMS.PutKeyPolicy.PutKeyPolicyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.PutKeyPolicy.PutKeyPolicy
instance Control.DeepSeq.NFData Network.AWS.KMS.PutKeyPolicy.PutKeyPolicyResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.PutKeyPolicy.PutKeyPolicy
instance Control.DeepSeq.NFData Network.AWS.KMS.PutKeyPolicy.PutKeyPolicy
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.PutKeyPolicy.PutKeyPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.PutKeyPolicy.PutKeyPolicy
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.PutKeyPolicy.PutKeyPolicy
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.PutKeyPolicy.PutKeyPolicy


-- | Returns information about all grants in the Amazon Web Services
--   account and Region that have the specified retiring principal.
--   
--   You can specify any principal in your Amazon Web Services account. The
--   grants that are returned include grants for KMS keys in your Amazon
--   Web Services account and other Amazon Web Services accounts. You might
--   use this operation to determine which grants you may retire. To retire
--   a grant, use the RetireGrant operation.
--   
--   For detailed information about grants, including grant terminology,
--   see <a>Using grants</a> in the /<i>Key Management Service Developer
--   Guide</i>/ . For examples of working with grants in several
--   programming languages, see <a>Programming grants</a>.
--   
--   <b>Cross-account use</b>: You must specify a principal in your Amazon
--   Web Services account. However, this operation can return grants in any
--   Amazon Web Services account. You do not need
--   <tt>kms:ListRetirableGrants</tt> permission (or any other additional
--   permission) in any Amazon Web Services account other than your own.
--   
--   <b>Required permissions</b>: <a>kms:ListRetirableGrants</a> (IAM
--   policy) in your Amazon Web Services account.
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>CreateGrant</li>
--   <li>ListGrants</li>
--   <li>RetireGrant</li>
--   <li>RevokeGrant</li>
--   </ul>
module Network.AWS.KMS.ListRetirableGrants

-- | <i>See:</i> <a>newListRetirableGrants</a> smart constructor.
data ListRetirableGrants
ListRetirableGrants' :: Maybe Natural -> Maybe Text -> Text -> ListRetirableGrants

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
[$sel:limit:ListRetirableGrants'] :: ListRetirableGrants -> Maybe Natural

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
[$sel:marker:ListRetirableGrants'] :: ListRetirableGrants -> Maybe Text

-- | The retiring principal for which to list grants. Enter a principal in
--   your Amazon Web Services account.
--   
--   To specify the retiring principal, use the <a>Amazon Resource Name
--   (ARN)</a> of an Amazon Web Services principal. Valid Amazon Web
--   Services principals include Amazon Web Services accounts (root), IAM
--   users, federated users, and assumed role users. For examples of the
--   ARN syntax for specifying a principal, see <a>Amazon Web Services
--   Identity and Access Management (IAM)</a> in the Example ARNs section
--   of the /Amazon Web Services General Reference/.
[$sel:retiringPrincipal:ListRetirableGrants'] :: ListRetirableGrants -> Text

-- | Create a value of <a>ListRetirableGrants</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListRetirableGrants'</a>,
--   <a>listRetirableGrants_limit</a> - Use this parameter to specify the
--   maximum number of items to return. When this value is present, KMS
--   does not return more than the specified number of items, but it might
--   return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
--   
--   <a>$sel:marker:ListRetirableGrants'</a>,
--   <a>listRetirableGrants_marker</a> - Use this parameter in a subsequent
--   request after you receive a response with truncated results. Set it to
--   the value of <tt>NextMarker</tt> from the truncated response you just
--   received.
--   
--   <a>$sel:retiringPrincipal:ListRetirableGrants'</a>,
--   <a>listRetirableGrants_retiringPrincipal</a> - The retiring principal
--   for which to list grants. Enter a principal in your Amazon Web
--   Services account.
--   
--   To specify the retiring principal, use the <a>Amazon Resource Name
--   (ARN)</a> of an Amazon Web Services principal. Valid Amazon Web
--   Services principals include Amazon Web Services accounts (root), IAM
--   users, federated users, and assumed role users. For examples of the
--   ARN syntax for specifying a principal, see <a>Amazon Web Services
--   Identity and Access Management (IAM)</a> in the Example ARNs section
--   of the /Amazon Web Services General Reference/.
newListRetirableGrants :: Text -> ListRetirableGrants

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
listRetirableGrants_limit :: Lens' ListRetirableGrants (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
listRetirableGrants_marker :: Lens' ListRetirableGrants (Maybe Text)

-- | The retiring principal for which to list grants. Enter a principal in
--   your Amazon Web Services account.
--   
--   To specify the retiring principal, use the <a>Amazon Resource Name
--   (ARN)</a> of an Amazon Web Services principal. Valid Amazon Web
--   Services principals include Amazon Web Services accounts (root), IAM
--   users, federated users, and assumed role users. For examples of the
--   ARN syntax for specifying a principal, see <a>Amazon Web Services
--   Identity and Access Management (IAM)</a> in the Example ARNs section
--   of the /Amazon Web Services General Reference/.
listRetirableGrants_retiringPrincipal :: Lens' ListRetirableGrants Text

-- | <i>See:</i> <a>newListGrantsResponse</a> smart constructor.
data ListGrantsResponse
ListGrantsResponse' :: Maybe Text -> Maybe [GrantListEntry] -> Maybe Bool -> ListGrantsResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
[$sel:nextMarker:ListGrantsResponse'] :: ListGrantsResponse -> Maybe Text

-- | A list of grants.
[$sel:grants:ListGrantsResponse'] :: ListGrantsResponse -> Maybe [GrantListEntry]

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
[$sel:truncated:ListGrantsResponse'] :: ListGrantsResponse -> Maybe Bool

-- | Create a value of <a>ListGrantsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_nextMarker</a> - When <tt>Truncated</tt> is
--   true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:grants:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_grants</a> - A list of grants.
--   
--   <a>$sel:truncated:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_truncated</a> - A flag that indicates whether
--   there are more items in the list. When this value is true, the list in
--   this response is truncated. To get more items, pass the value of the
--   <tt>NextMarker</tt> element in thisresponse to the <tt>Marker</tt>
--   parameter in a subsequent request.
newListGrantsResponse :: ListGrantsResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listGrantsResponse_nextMarker :: Lens' ListGrantsResponse (Maybe Text)

-- | A list of grants.
listGrantsResponse_grants :: Lens' ListGrantsResponse (Maybe [GrantListEntry])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listGrantsResponse_truncated :: Lens' ListGrantsResponse (Maybe Bool)
instance GHC.Generics.Generic Network.AWS.KMS.ListRetirableGrants.ListRetirableGrants
instance GHC.Show.Show Network.AWS.KMS.ListRetirableGrants.ListRetirableGrants
instance GHC.Read.Read Network.AWS.KMS.ListRetirableGrants.ListRetirableGrants
instance GHC.Classes.Eq Network.AWS.KMS.ListRetirableGrants.ListRetirableGrants
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.ListRetirableGrants.ListRetirableGrants
instance Data.Hashable.Class.Hashable Network.AWS.KMS.ListRetirableGrants.ListRetirableGrants
instance Control.DeepSeq.NFData Network.AWS.KMS.ListRetirableGrants.ListRetirableGrants
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.ListRetirableGrants.ListRetirableGrants
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.ListRetirableGrants.ListRetirableGrants
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.ListRetirableGrants.ListRetirableGrants
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.ListRetirableGrants.ListRetirableGrants


-- | Returns all tags on the specified KMS key.
--   
--   For general information about tags, including the format and syntax,
--   see <a>Tagging Amazon Web Services resources</a> in the <i>Amazon Web
--   Services General Reference</i>. For information about using tags in
--   KMS, see <a>Tagging keys</a>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:ListResourceTags</a> (key policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>CreateKey</li>
--   <li>ReplicateKey</li>
--   <li>TagResource</li>
--   <li>UntagResource</li>
--   </ul>
module Network.AWS.KMS.ListResourceTags

-- | <i>See:</i> <a>newListResourceTags</a> smart constructor.
data ListResourceTags
ListResourceTags' :: Maybe Natural -> Maybe Text -> Text -> ListResourceTags

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 50, inclusive. If you do not include a value, it defaults to 50.
[$sel:limit:ListResourceTags'] :: ListResourceTags -> Maybe Natural

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
--   
--   Do not attempt to construct this value. Use only the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
[$sel:marker:ListResourceTags'] :: ListResourceTags -> Maybe Text

-- | Gets tags on the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:ListResourceTags'] :: ListResourceTags -> Text

-- | Create a value of <a>ListResourceTags</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListResourceTags'</a>, <a>listResourceTags_limit</a> -
--   Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 50, inclusive. If you do not include a value, it defaults to 50.
--   
--   <a>$sel:marker:ListResourceTags'</a>, <a>listResourceTags_marker</a> -
--   Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
--   
--   Do not attempt to construct this value. Use only the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
--   
--   <a>$sel:keyId:ListResourceTags'</a>, <a>listResourceTags_keyId</a> -
--   Gets tags on the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newListResourceTags :: Text -> ListResourceTags

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 50, inclusive. If you do not include a value, it defaults to 50.
listResourceTags_limit :: Lens' ListResourceTags (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
--   
--   Do not attempt to construct this value. Use only the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
listResourceTags_marker :: Lens' ListResourceTags (Maybe Text)

-- | Gets tags on the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
listResourceTags_keyId :: Lens' ListResourceTags Text

-- | <i>See:</i> <a>newListResourceTagsResponse</a> smart constructor.
data ListResourceTagsResponse
ListResourceTagsResponse' :: Maybe Text -> Maybe [Tag] -> Maybe Bool -> Int -> ListResourceTagsResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
--   
--   Do not assume or infer any information from this value.
[$sel:nextMarker:ListResourceTagsResponse'] :: ListResourceTagsResponse -> Maybe Text

-- | A list of tags. Each tag consists of a tag key and a tag value.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:tags:ListResourceTagsResponse'] :: ListResourceTagsResponse -> Maybe [Tag]

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
[$sel:truncated:ListResourceTagsResponse'] :: ListResourceTagsResponse -> Maybe Bool

-- | The response's http status code.
[$sel:httpStatus:ListResourceTagsResponse'] :: ListResourceTagsResponse -> Int

-- | Create a value of <a>ListResourceTagsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListResourceTagsResponse'</a>,
--   <a>listResourceTagsResponse_nextMarker</a> - When <tt>Truncated</tt>
--   is true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   Do not assume or infer any information from this value.
--   
--   <a>$sel:tags:ListResourceTagsResponse'</a>,
--   <a>listResourceTagsResponse_tags</a> - A list of tags. Each tag
--   consists of a tag key and a tag value.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:truncated:ListResourceTagsResponse'</a>,
--   <a>listResourceTagsResponse_truncated</a> - A flag that indicates
--   whether there are more items in the list. When this value is true, the
--   list in this response is truncated. To get more items, pass the value
--   of the <tt>NextMarker</tt> element in thisresponse to the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:httpStatus:ListResourceTagsResponse'</a>,
--   <a>listResourceTagsResponse_httpStatus</a> - The response's http
--   status code.
newListResourceTagsResponse :: Int -> ListResourceTagsResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
--   
--   Do not assume or infer any information from this value.
listResourceTagsResponse_nextMarker :: Lens' ListResourceTagsResponse (Maybe Text)

-- | A list of tags. Each tag consists of a tag key and a tag value.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
listResourceTagsResponse_tags :: Lens' ListResourceTagsResponse (Maybe [Tag])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listResourceTagsResponse_truncated :: Lens' ListResourceTagsResponse (Maybe Bool)

-- | The response's http status code.
listResourceTagsResponse_httpStatus :: Lens' ListResourceTagsResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.ListResourceTags.ListResourceTags
instance GHC.Show.Show Network.AWS.KMS.ListResourceTags.ListResourceTags
instance GHC.Read.Read Network.AWS.KMS.ListResourceTags.ListResourceTags
instance GHC.Classes.Eq Network.AWS.KMS.ListResourceTags.ListResourceTags
instance GHC.Generics.Generic Network.AWS.KMS.ListResourceTags.ListResourceTagsResponse
instance GHC.Show.Show Network.AWS.KMS.ListResourceTags.ListResourceTagsResponse
instance GHC.Read.Read Network.AWS.KMS.ListResourceTags.ListResourceTagsResponse
instance GHC.Classes.Eq Network.AWS.KMS.ListResourceTags.ListResourceTagsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.ListResourceTags.ListResourceTags
instance Control.DeepSeq.NFData Network.AWS.KMS.ListResourceTags.ListResourceTagsResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.ListResourceTags.ListResourceTags
instance Control.DeepSeq.NFData Network.AWS.KMS.ListResourceTags.ListResourceTags
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.ListResourceTags.ListResourceTags
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.ListResourceTags.ListResourceTags
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.ListResourceTags.ListResourceTags
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.ListResourceTags.ListResourceTags


-- | Gets a list of all KMS keys in the caller's Amazon Web Services
--   account and Region.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:ListKeys</a> (IAM policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>CreateKey</li>
--   <li>DescribeKey</li>
--   <li>ListAliases</li>
--   <li>ListResourceTags</li>
--   </ul>
--   
--   This operation returns paginated results.
module Network.AWS.KMS.ListKeys

-- | <i>See:</i> <a>newListKeys</a> smart constructor.
data ListKeys
ListKeys' :: Maybe Natural -> Maybe Text -> ListKeys

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 1000, inclusive. If you do not include a value, it defaults to
--   100.
[$sel:limit:ListKeys'] :: ListKeys -> Maybe Natural

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
[$sel:marker:ListKeys'] :: ListKeys -> Maybe Text

-- | Create a value of <a>ListKeys</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListKeys'</a>, <a>listKeys_limit</a> - Use this
--   parameter to specify the maximum number of items to return. When this
--   value is present, KMS does not return more than the specified number
--   of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 1000, inclusive. If you do not include a value, it defaults to
--   100.
--   
--   <a>$sel:marker:ListKeys'</a>, <a>listKeys_marker</a> - Use this
--   parameter in a subsequent request after you receive a response with
--   truncated results. Set it to the value of <tt>NextMarker</tt> from the
--   truncated response you just received.
newListKeys :: ListKeys

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 1000, inclusive. If you do not include a value, it defaults to
--   100.
listKeys_limit :: Lens' ListKeys (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
listKeys_marker :: Lens' ListKeys (Maybe Text)

-- | <i>See:</i> <a>newListKeysResponse</a> smart constructor.
data ListKeysResponse
ListKeysResponse' :: Maybe Text -> Maybe [KeyListEntry] -> Maybe Bool -> Int -> ListKeysResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
[$sel:nextMarker:ListKeysResponse'] :: ListKeysResponse -> Maybe Text

-- | A list of KMS keys.
[$sel:keys:ListKeysResponse'] :: ListKeysResponse -> Maybe [KeyListEntry]

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
[$sel:truncated:ListKeysResponse'] :: ListKeysResponse -> Maybe Bool

-- | The response's http status code.
[$sel:httpStatus:ListKeysResponse'] :: ListKeysResponse -> Int

-- | Create a value of <a>ListKeysResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListKeysResponse'</a>,
--   <a>listKeysResponse_nextMarker</a> - When <tt>Truncated</tt> is true,
--   this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:keys:ListKeysResponse'</a>, <a>listKeysResponse_keys</a> - A
--   list of KMS keys.
--   
--   <a>$sel:truncated:ListKeysResponse'</a>,
--   <a>listKeysResponse_truncated</a> - A flag that indicates whether
--   there are more items in the list. When this value is true, the list in
--   this response is truncated. To get more items, pass the value of the
--   <tt>NextMarker</tt> element in thisresponse to the <tt>Marker</tt>
--   parameter in a subsequent request.
--   
--   <a>$sel:httpStatus:ListKeysResponse'</a>,
--   <a>listKeysResponse_httpStatus</a> - The response's http status code.
newListKeysResponse :: Int -> ListKeysResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listKeysResponse_nextMarker :: Lens' ListKeysResponse (Maybe Text)

-- | A list of KMS keys.
listKeysResponse_keys :: Lens' ListKeysResponse (Maybe [KeyListEntry])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listKeysResponse_truncated :: Lens' ListKeysResponse (Maybe Bool)

-- | The response's http status code.
listKeysResponse_httpStatus :: Lens' ListKeysResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.ListKeys.ListKeys
instance GHC.Show.Show Network.AWS.KMS.ListKeys.ListKeys
instance GHC.Read.Read Network.AWS.KMS.ListKeys.ListKeys
instance GHC.Classes.Eq Network.AWS.KMS.ListKeys.ListKeys
instance GHC.Generics.Generic Network.AWS.KMS.ListKeys.ListKeysResponse
instance GHC.Show.Show Network.AWS.KMS.ListKeys.ListKeysResponse
instance GHC.Read.Read Network.AWS.KMS.ListKeys.ListKeysResponse
instance GHC.Classes.Eq Network.AWS.KMS.ListKeys.ListKeysResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.ListKeys.ListKeys
instance Control.DeepSeq.NFData Network.AWS.KMS.ListKeys.ListKeysResponse
instance Network.AWS.Pager.AWSPager Network.AWS.KMS.ListKeys.ListKeys
instance Data.Hashable.Class.Hashable Network.AWS.KMS.ListKeys.ListKeys
instance Control.DeepSeq.NFData Network.AWS.KMS.ListKeys.ListKeys
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.ListKeys.ListKeys
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.ListKeys.ListKeys
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.ListKeys.ListKeys
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.ListKeys.ListKeys


-- | Gets the names of the key policies that are attached to a KMS key.
--   This operation is designed to get policy names that you can use in a
--   GetKeyPolicy operation. However, the only valid policy name is
--   <tt>default</tt>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:ListKeyPolicies</a> (key policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>GetKeyPolicy</li>
--   <li>PutKeyPolicy</li>
--   </ul>
--   
--   This operation returns paginated results.
module Network.AWS.KMS.ListKeyPolicies

-- | <i>See:</i> <a>newListKeyPolicies</a> smart constructor.
data ListKeyPolicies
ListKeyPolicies' :: Maybe Natural -> Maybe Text -> Text -> ListKeyPolicies

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 1000, inclusive. If you do not include a value, it defaults to
--   100.
--   
--   Only one policy can be attached to a key.
[$sel:limit:ListKeyPolicies'] :: ListKeyPolicies -> Maybe Natural

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
[$sel:marker:ListKeyPolicies'] :: ListKeyPolicies -> Maybe Text

-- | Gets the names of key policies for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:ListKeyPolicies'] :: ListKeyPolicies -> Text

-- | Create a value of <a>ListKeyPolicies</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListKeyPolicies'</a>, <a>listKeyPolicies_limit</a> - Use
--   this parameter to specify the maximum number of items to return. When
--   this value is present, KMS does not return more than the specified
--   number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 1000, inclusive. If you do not include a value, it defaults to
--   100.
--   
--   Only one policy can be attached to a key.
--   
--   <a>$sel:marker:ListKeyPolicies'</a>, <a>listKeyPolicies_marker</a> -
--   Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
--   
--   <a>$sel:keyId:ListKeyPolicies'</a>, <a>listKeyPolicies_keyId</a> -
--   Gets the names of key policies for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newListKeyPolicies :: Text -> ListKeyPolicies

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 1000, inclusive. If you do not include a value, it defaults to
--   100.
--   
--   Only one policy can be attached to a key.
listKeyPolicies_limit :: Lens' ListKeyPolicies (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
listKeyPolicies_marker :: Lens' ListKeyPolicies (Maybe Text)

-- | Gets the names of key policies for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
listKeyPolicies_keyId :: Lens' ListKeyPolicies Text

-- | <i>See:</i> <a>newListKeyPoliciesResponse</a> smart constructor.
data ListKeyPoliciesResponse
ListKeyPoliciesResponse' :: Maybe Text -> Maybe [Text] -> Maybe Bool -> Int -> ListKeyPoliciesResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
[$sel:nextMarker:ListKeyPoliciesResponse'] :: ListKeyPoliciesResponse -> Maybe Text

-- | A list of key policy names. The only valid value is <tt>default</tt>.
[$sel:policyNames:ListKeyPoliciesResponse'] :: ListKeyPoliciesResponse -> Maybe [Text]

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
[$sel:truncated:ListKeyPoliciesResponse'] :: ListKeyPoliciesResponse -> Maybe Bool

-- | The response's http status code.
[$sel:httpStatus:ListKeyPoliciesResponse'] :: ListKeyPoliciesResponse -> Int

-- | Create a value of <a>ListKeyPoliciesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListKeyPoliciesResponse'</a>,
--   <a>listKeyPoliciesResponse_nextMarker</a> - When <tt>Truncated</tt> is
--   true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:policyNames:ListKeyPoliciesResponse'</a>,
--   <a>listKeyPoliciesResponse_policyNames</a> - A list of key policy
--   names. The only valid value is <tt>default</tt>.
--   
--   <a>$sel:truncated:ListKeyPoliciesResponse'</a>,
--   <a>listKeyPoliciesResponse_truncated</a> - A flag that indicates
--   whether there are more items in the list. When this value is true, the
--   list in this response is truncated. To get more items, pass the value
--   of the <tt>NextMarker</tt> element in thisresponse to the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:httpStatus:ListKeyPoliciesResponse'</a>,
--   <a>listKeyPoliciesResponse_httpStatus</a> - The response's http status
--   code.
newListKeyPoliciesResponse :: Int -> ListKeyPoliciesResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listKeyPoliciesResponse_nextMarker :: Lens' ListKeyPoliciesResponse (Maybe Text)

-- | A list of key policy names. The only valid value is <tt>default</tt>.
listKeyPoliciesResponse_policyNames :: Lens' ListKeyPoliciesResponse (Maybe [Text])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listKeyPoliciesResponse_truncated :: Lens' ListKeyPoliciesResponse (Maybe Bool)

-- | The response's http status code.
listKeyPoliciesResponse_httpStatus :: Lens' ListKeyPoliciesResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.ListKeyPolicies.ListKeyPolicies
instance GHC.Show.Show Network.AWS.KMS.ListKeyPolicies.ListKeyPolicies
instance GHC.Read.Read Network.AWS.KMS.ListKeyPolicies.ListKeyPolicies
instance GHC.Classes.Eq Network.AWS.KMS.ListKeyPolicies.ListKeyPolicies
instance GHC.Generics.Generic Network.AWS.KMS.ListKeyPolicies.ListKeyPoliciesResponse
instance GHC.Show.Show Network.AWS.KMS.ListKeyPolicies.ListKeyPoliciesResponse
instance GHC.Read.Read Network.AWS.KMS.ListKeyPolicies.ListKeyPoliciesResponse
instance GHC.Classes.Eq Network.AWS.KMS.ListKeyPolicies.ListKeyPoliciesResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.ListKeyPolicies.ListKeyPolicies
instance Control.DeepSeq.NFData Network.AWS.KMS.ListKeyPolicies.ListKeyPoliciesResponse
instance Network.AWS.Pager.AWSPager Network.AWS.KMS.ListKeyPolicies.ListKeyPolicies
instance Data.Hashable.Class.Hashable Network.AWS.KMS.ListKeyPolicies.ListKeyPolicies
instance Control.DeepSeq.NFData Network.AWS.KMS.ListKeyPolicies.ListKeyPolicies
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.ListKeyPolicies.ListKeyPolicies
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.ListKeyPolicies.ListKeyPolicies
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.ListKeyPolicies.ListKeyPolicies
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.ListKeyPolicies.ListKeyPolicies


-- | Gets a list of all grants for the specified KMS key.
--   
--   You must specify the KMS key in all requests. You can filter the grant
--   list by grant ID or grantee principal.
--   
--   For detailed information about grants, including grant terminology,
--   see <a>Using grants</a> in the /<i>Key Management Service Developer
--   Guide</i>/ . For examples of working with grants in several
--   programming languages, see <a>Programming grants</a>.
--   
--   The <tt>GranteePrincipal</tt> field in the <tt>ListGrants</tt>
--   response usually contains the user or role designated as the grantee
--   principal in the grant. However, when the grantee principal in the
--   grant is an Amazon Web Services service, the <tt>GranteePrincipal</tt>
--   field contains the <a>service principal</a>, which might represent
--   several different grantee principals.
--   
--   <b>Cross-account use</b>: Yes. To perform this operation on a KMS key
--   in a different Amazon Web Services account, specify the key ARN in the
--   value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>: <a>kms:ListGrants</a> (key policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>CreateGrant</li>
--   <li>ListRetirableGrants</li>
--   <li>RetireGrant</li>
--   <li>RevokeGrant</li>
--   </ul>
--   
--   This operation returns paginated results.
module Network.AWS.KMS.ListGrants

-- | <i>See:</i> <a>newListGrants</a> smart constructor.
data ListGrants
ListGrants' :: Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> Text -> ListGrants

-- | Returns only grants where the specified principal is the grantee
--   principal for the grant.
[$sel:granteePrincipal:ListGrants'] :: ListGrants -> Maybe Text

-- | Returns only the grant with the specified grant ID. The grant ID
--   uniquely identifies the grant.
[$sel:grantId:ListGrants'] :: ListGrants -> Maybe Text

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
[$sel:limit:ListGrants'] :: ListGrants -> Maybe Natural

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
[$sel:marker:ListGrants'] :: ListGrants -> Maybe Text

-- | Returns only grants for the specified KMS key. This parameter is
--   required.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:ListGrants'] :: ListGrants -> Text

-- | Create a value of <a>ListGrants</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:granteePrincipal:ListGrants'</a>,
--   <a>listGrants_granteePrincipal</a> - Returns only grants where the
--   specified principal is the grantee principal for the grant.
--   
--   <a>$sel:grantId:ListGrants'</a>, <a>listGrants_grantId</a> - Returns
--   only the grant with the specified grant ID. The grant ID uniquely
--   identifies the grant.
--   
--   <a>$sel:limit:ListGrants'</a>, <a>listGrants_limit</a> - Use this
--   parameter to specify the maximum number of items to return. When this
--   value is present, KMS does not return more than the specified number
--   of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
--   
--   <a>$sel:marker:ListGrants'</a>, <a>listGrants_marker</a> - Use this
--   parameter in a subsequent request after you receive a response with
--   truncated results. Set it to the value of <tt>NextMarker</tt> from the
--   truncated response you just received.
--   
--   <a>$sel:keyId:ListGrants'</a>, <a>listGrants_keyId</a> - Returns only
--   grants for the specified KMS key. This parameter is required.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newListGrants :: Text -> ListGrants

-- | Returns only grants where the specified principal is the grantee
--   principal for the grant.
listGrants_granteePrincipal :: Lens' ListGrants (Maybe Text)

-- | Returns only the grant with the specified grant ID. The grant ID
--   uniquely identifies the grant.
listGrants_grantId :: Lens' ListGrants (Maybe Text)

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
listGrants_limit :: Lens' ListGrants (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
listGrants_marker :: Lens' ListGrants (Maybe Text)

-- | Returns only grants for the specified KMS key. This parameter is
--   required.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
listGrants_keyId :: Lens' ListGrants Text

-- | <i>See:</i> <a>newListGrantsResponse</a> smart constructor.
data ListGrantsResponse
ListGrantsResponse' :: Maybe Text -> Maybe [GrantListEntry] -> Maybe Bool -> ListGrantsResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
[$sel:nextMarker:ListGrantsResponse'] :: ListGrantsResponse -> Maybe Text

-- | A list of grants.
[$sel:grants:ListGrantsResponse'] :: ListGrantsResponse -> Maybe [GrantListEntry]

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
[$sel:truncated:ListGrantsResponse'] :: ListGrantsResponse -> Maybe Bool

-- | Create a value of <a>ListGrantsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_nextMarker</a> - When <tt>Truncated</tt> is
--   true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:grants:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_grants</a> - A list of grants.
--   
--   <a>$sel:truncated:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_truncated</a> - A flag that indicates whether
--   there are more items in the list. When this value is true, the list in
--   this response is truncated. To get more items, pass the value of the
--   <tt>NextMarker</tt> element in thisresponse to the <tt>Marker</tt>
--   parameter in a subsequent request.
newListGrantsResponse :: ListGrantsResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listGrantsResponse_nextMarker :: Lens' ListGrantsResponse (Maybe Text)

-- | A list of grants.
listGrantsResponse_grants :: Lens' ListGrantsResponse (Maybe [GrantListEntry])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listGrantsResponse_truncated :: Lens' ListGrantsResponse (Maybe Bool)
instance GHC.Generics.Generic Network.AWS.KMS.ListGrants.ListGrants
instance GHC.Show.Show Network.AWS.KMS.ListGrants.ListGrants
instance GHC.Read.Read Network.AWS.KMS.ListGrants.ListGrants
instance GHC.Classes.Eq Network.AWS.KMS.ListGrants.ListGrants
instance Network.AWS.Pager.AWSPager Network.AWS.KMS.ListGrants.ListGrants
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.ListGrants.ListGrants
instance Data.Hashable.Class.Hashable Network.AWS.KMS.ListGrants.ListGrants
instance Control.DeepSeq.NFData Network.AWS.KMS.ListGrants.ListGrants
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.ListGrants.ListGrants
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.ListGrants.ListGrants
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.ListGrants.ListGrants
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.ListGrants.ListGrants


-- | Gets a list of aliases in the caller's Amazon Web Services account and
--   region. For more information about aliases, see CreateAlias.
--   
--   By default, the <tt>ListAliases</tt> operation returns all aliases in
--   the account and region. To get only the aliases associated with a
--   particular KMS key, use the <tt>KeyId</tt> parameter.
--   
--   The <tt>ListAliases</tt> response can include aliases that you created
--   and associated with your customer managed keys, and aliases that
--   Amazon Web Services created and associated with Amazon Web Services
--   managed keys in your account. You can recognize Amazon Web Services
--   aliases because their names have the format
--   <tt>aws/&lt;service-name&gt;</tt>, such as <tt>aws/dynamodb</tt>.
--   
--   The response might also include aliases that have no
--   <tt>TargetKeyId</tt> field. These are predefined aliases that Amazon
--   Web Services has created but has not yet associated with a KMS key.
--   Aliases that Amazon Web Services creates in your account, including
--   predefined aliases, do not count against your <a>KMS aliases
--   quota</a>.
--   
--   <b>Cross-account use</b>: No. <tt>ListAliases</tt> does not return
--   aliases in other Amazon Web Services accounts.
--   
--   <b>Required permissions</b>: <a>kms:ListAliases</a> (IAM policy)
--   
--   For details, see <a>Controlling access to aliases</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>CreateAlias</li>
--   <li>DeleteAlias</li>
--   <li>UpdateAlias</li>
--   </ul>
--   
--   This operation returns paginated results.
module Network.AWS.KMS.ListAliases

-- | <i>See:</i> <a>newListAliases</a> smart constructor.
data ListAliases
ListAliases' :: Maybe Natural -> Maybe Text -> Maybe Text -> ListAliases

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
[$sel:limit:ListAliases'] :: ListAliases -> Maybe Natural

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
[$sel:marker:ListAliases'] :: ListAliases -> Maybe Text

-- | Lists only aliases that are associated with the specified KMS key.
--   Enter a KMS key in your Amazon Web Services account.
--   
--   This parameter is optional. If you omit it, <tt>ListAliases</tt>
--   returns all aliases in the account and Region.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:ListAliases'] :: ListAliases -> Maybe Text

-- | Create a value of <a>ListAliases</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListAliases'</a>, <a>listAliases_limit</a> - Use this
--   parameter to specify the maximum number of items to return. When this
--   value is present, KMS does not return more than the specified number
--   of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
--   
--   <a>$sel:marker:ListAliases'</a>, <a>listAliases_marker</a> - Use this
--   parameter in a subsequent request after you receive a response with
--   truncated results. Set it to the value of <tt>NextMarker</tt> from the
--   truncated response you just received.
--   
--   <a>$sel:keyId:ListAliases'</a>, <a>listAliases_keyId</a> - Lists only
--   aliases that are associated with the specified KMS key. Enter a KMS
--   key in your Amazon Web Services account.
--   
--   This parameter is optional. If you omit it, <tt>ListAliases</tt>
--   returns all aliases in the account and Region.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newListAliases :: ListAliases

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
listAliases_limit :: Lens' ListAliases (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
listAliases_marker :: Lens' ListAliases (Maybe Text)

-- | Lists only aliases that are associated with the specified KMS key.
--   Enter a KMS key in your Amazon Web Services account.
--   
--   This parameter is optional. If you omit it, <tt>ListAliases</tt>
--   returns all aliases in the account and Region.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
listAliases_keyId :: Lens' ListAliases (Maybe Text)

-- | <i>See:</i> <a>newListAliasesResponse</a> smart constructor.
data ListAliasesResponse
ListAliasesResponse' :: Maybe Text -> Maybe [AliasListEntry] -> Maybe Bool -> Int -> ListAliasesResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
[$sel:nextMarker:ListAliasesResponse'] :: ListAliasesResponse -> Maybe Text

-- | A list of aliases.
[$sel:aliases:ListAliasesResponse'] :: ListAliasesResponse -> Maybe [AliasListEntry]

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
[$sel:truncated:ListAliasesResponse'] :: ListAliasesResponse -> Maybe Bool

-- | The response's http status code.
[$sel:httpStatus:ListAliasesResponse'] :: ListAliasesResponse -> Int

-- | Create a value of <a>ListAliasesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListAliasesResponse'</a>,
--   <a>listAliasesResponse_nextMarker</a> - When <tt>Truncated</tt> is
--   true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:aliases:ListAliasesResponse'</a>,
--   <a>listAliasesResponse_aliases</a> - A list of aliases.
--   
--   <a>$sel:truncated:ListAliasesResponse'</a>,
--   <a>listAliasesResponse_truncated</a> - A flag that indicates whether
--   there are more items in the list. When this value is true, the list in
--   this response is truncated. To get more items, pass the value of the
--   <tt>NextMarker</tt> element in thisresponse to the <tt>Marker</tt>
--   parameter in a subsequent request.
--   
--   <a>$sel:httpStatus:ListAliasesResponse'</a>,
--   <a>listAliasesResponse_httpStatus</a> - The response's http status
--   code.
newListAliasesResponse :: Int -> ListAliasesResponse

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listAliasesResponse_nextMarker :: Lens' ListAliasesResponse (Maybe Text)

-- | A list of aliases.
listAliasesResponse_aliases :: Lens' ListAliasesResponse (Maybe [AliasListEntry])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listAliasesResponse_truncated :: Lens' ListAliasesResponse (Maybe Bool)

-- | The response's http status code.
listAliasesResponse_httpStatus :: Lens' ListAliasesResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.ListAliases.ListAliases
instance GHC.Show.Show Network.AWS.KMS.ListAliases.ListAliases
instance GHC.Read.Read Network.AWS.KMS.ListAliases.ListAliases
instance GHC.Classes.Eq Network.AWS.KMS.ListAliases.ListAliases
instance GHC.Generics.Generic Network.AWS.KMS.ListAliases.ListAliasesResponse
instance GHC.Show.Show Network.AWS.KMS.ListAliases.ListAliasesResponse
instance GHC.Read.Read Network.AWS.KMS.ListAliases.ListAliasesResponse
instance GHC.Classes.Eq Network.AWS.KMS.ListAliases.ListAliasesResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.ListAliases.ListAliases
instance Control.DeepSeq.NFData Network.AWS.KMS.ListAliases.ListAliasesResponse
instance Network.AWS.Pager.AWSPager Network.AWS.KMS.ListAliases.ListAliases
instance Data.Hashable.Class.Hashable Network.AWS.KMS.ListAliases.ListAliases
instance Control.DeepSeq.NFData Network.AWS.KMS.ListAliases.ListAliases
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.ListAliases.ListAliases
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.ListAliases.ListAliases
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.ListAliases.ListAliases
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.ListAliases.ListAliases


-- | Imports key material into an existing symmetric KMS KMS key that was
--   created without key material. After you successfully import key
--   material into a KMS key, you can <a>reimport the same key material</a>
--   into that KMS key, but you cannot import different key material.
--   
--   You cannot perform this operation on an asymmetric KMS key or on any
--   KMS key in a different Amazon Web Services account. For more
--   information about creating KMS keys with no key material and then
--   importing key material, see <a>Importing Key Material</a> in the
--   <i>Key Management Service Developer Guide</i>.
--   
--   Before using this operation, call GetParametersForImport. Its response
--   includes a public key and an import token. Use the public key to
--   encrypt the key material. Then, submit the import token from the same
--   <tt>GetParametersForImport</tt> response.
--   
--   When calling this operation, you must specify the following values:
--   
--   <ul>
--   <li>The key ID or key ARN of a KMS key with no key material. Its
--   <tt>Origin</tt> must be <tt>EXTERNAL</tt>.To create a KMS key with no
--   key material, call CreateKey and set the value of its <tt>Origin</tt>
--   parameter to <tt>EXTERNAL</tt>. To get the <tt>Origin</tt> of a KMS
--   key, call DescribeKey.)</li>
--   <li>The encrypted key material. To get the public key to encrypt the
--   key material, call GetParametersForImport.</li>
--   <li>The import token that GetParametersForImport returned. You must
--   use a public key and token from the same
--   <tt>GetParametersForImport</tt> response.</li>
--   <li>Whether the key material expires and if so, when. If you set an
--   expiration date, KMS deletes the key material from the KMS key on the
--   specified date, and the KMS key becomes unusable. To use the KMS key
--   again, you must reimport the same key material. The only way to change
--   an expiration date is by reimporting the same key material and
--   specifying a new expiration date.</li>
--   </ul>
--   
--   When this operation is successful, the key state of the KMS key
--   changes from <tt>PendingImport</tt> to <tt>Enabled</tt>, and you can
--   use the KMS key.
--   
--   If this operation fails, use the exception to help determine the
--   problem. If the error is related to the key material, the import
--   token, or wrapping key, use GetParametersForImport to get a new public
--   key and import token for the KMS key and repeat the import procedure.
--   For help, see <a>How To Import Key Material</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:ImportKeyMaterial</a> (key policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>DeleteImportedKeyMaterial</li>
--   <li>GetParametersForImport</li>
--   </ul>
module Network.AWS.KMS.ImportKeyMaterial

-- | <i>See:</i> <a>newImportKeyMaterial</a> smart constructor.
data ImportKeyMaterial
ImportKeyMaterial' :: Maybe POSIX -> Maybe ExpirationModelType -> Text -> Base64 -> Base64 -> ImportKeyMaterial

-- | The time at which the imported key material expires. When the key
--   material expires, KMS deletes the key material and the KMS key becomes
--   unusable. You must omit this parameter when the
--   <tt>ExpirationModel</tt> parameter is set to
--   <tt>KEY_MATERIAL_DOES_NOT_EXPIRE</tt>. Otherwise it is required.
[$sel:validTo:ImportKeyMaterial'] :: ImportKeyMaterial -> Maybe POSIX

-- | Specifies whether the key material expires. The default is
--   <tt>KEY_MATERIAL_EXPIRES</tt>, in which case you must include the
--   <tt>ValidTo</tt> parameter. When this parameter is set to
--   <tt>KEY_MATERIAL_DOES_NOT_EXPIRE</tt>, you must omit the
--   <tt>ValidTo</tt> parameter.
[$sel:expirationModel:ImportKeyMaterial'] :: ImportKeyMaterial -> Maybe ExpirationModelType

-- | The identifier of the symmetric KMS key that receives the imported key
--   material. The KMS key's <tt>Origin</tt> must be <tt>EXTERNAL</tt>.
--   This must be the same KMS key specified in the <tt>KeyID</tt>
--   parameter of the corresponding GetParametersForImport request.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:ImportKeyMaterial'] :: ImportKeyMaterial -> Text

-- | The import token that you received in the response to a previous
--   GetParametersForImport request. It must be from the same response that
--   contained the public key that you used to encrypt the key material.
[$sel:importToken:ImportKeyMaterial'] :: ImportKeyMaterial -> Base64

-- | The encrypted key material to import. The key material must be
--   encrypted with the public wrapping key that GetParametersForImport
--   returned, using the wrapping algorithm that you specified in the same
--   <tt>GetParametersForImport</tt> request.
[$sel:encryptedKeyMaterial:ImportKeyMaterial'] :: ImportKeyMaterial -> Base64

-- | Create a value of <a>ImportKeyMaterial</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:validTo:ImportKeyMaterial'</a>,
--   <a>importKeyMaterial_validTo</a> - The time at which the imported key
--   material expires. When the key material expires, KMS deletes the key
--   material and the KMS key becomes unusable. You must omit this
--   parameter when the <tt>ExpirationModel</tt> parameter is set to
--   <tt>KEY_MATERIAL_DOES_NOT_EXPIRE</tt>. Otherwise it is required.
--   
--   <a>$sel:expirationModel:ImportKeyMaterial'</a>,
--   <a>importKeyMaterial_expirationModel</a> - Specifies whether the key
--   material expires. The default is <tt>KEY_MATERIAL_EXPIRES</tt>, in
--   which case you must include the <tt>ValidTo</tt> parameter. When this
--   parameter is set to <tt>KEY_MATERIAL_DOES_NOT_EXPIRE</tt>, you must
--   omit the <tt>ValidTo</tt> parameter.
--   
--   <a>$sel:keyId:ImportKeyMaterial'</a>, <a>importKeyMaterial_keyId</a> -
--   The identifier of the symmetric KMS key that receives the imported key
--   material. The KMS key's <tt>Origin</tt> must be <tt>EXTERNAL</tt>.
--   This must be the same KMS key specified in the <tt>KeyID</tt>
--   parameter of the corresponding GetParametersForImport request.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:importToken:ImportKeyMaterial'</a>,
--   <a>importKeyMaterial_importToken</a> - The import token that you
--   received in the response to a previous GetParametersForImport request.
--   It must be from the same response that contained the public key that
--   you used to encrypt the key material.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:encryptedKeyMaterial:ImportKeyMaterial'</a>,
--   <a>importKeyMaterial_encryptedKeyMaterial</a> - The encrypted key
--   material to import. The key material must be encrypted with the public
--   wrapping key that GetParametersForImport returned, using the wrapping
--   algorithm that you specified in the same
--   <tt>GetParametersForImport</tt> request.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
newImportKeyMaterial :: Text -> ByteString -> ByteString -> ImportKeyMaterial

-- | The time at which the imported key material expires. When the key
--   material expires, KMS deletes the key material and the KMS key becomes
--   unusable. You must omit this parameter when the
--   <tt>ExpirationModel</tt> parameter is set to
--   <tt>KEY_MATERIAL_DOES_NOT_EXPIRE</tt>. Otherwise it is required.
importKeyMaterial_validTo :: Lens' ImportKeyMaterial (Maybe UTCTime)

-- | Specifies whether the key material expires. The default is
--   <tt>KEY_MATERIAL_EXPIRES</tt>, in which case you must include the
--   <tt>ValidTo</tt> parameter. When this parameter is set to
--   <tt>KEY_MATERIAL_DOES_NOT_EXPIRE</tt>, you must omit the
--   <tt>ValidTo</tt> parameter.
importKeyMaterial_expirationModel :: Lens' ImportKeyMaterial (Maybe ExpirationModelType)

-- | The identifier of the symmetric KMS key that receives the imported key
--   material. The KMS key's <tt>Origin</tt> must be <tt>EXTERNAL</tt>.
--   This must be the same KMS key specified in the <tt>KeyID</tt>
--   parameter of the corresponding GetParametersForImport request.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
importKeyMaterial_keyId :: Lens' ImportKeyMaterial Text

-- | The import token that you received in the response to a previous
--   GetParametersForImport request. It must be from the same response that
--   contained the public key that you used to encrypt the key material.--
--   -- <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
importKeyMaterial_importToken :: Lens' ImportKeyMaterial ByteString

-- | The encrypted key material to import. The key material must be
--   encrypted with the public wrapping key that GetParametersForImport
--   returned, using the wrapping algorithm that you specified in the same
--   <tt>GetParametersForImport</tt> request.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
importKeyMaterial_encryptedKeyMaterial :: Lens' ImportKeyMaterial ByteString

-- | <i>See:</i> <a>newImportKeyMaterialResponse</a> smart constructor.
data ImportKeyMaterialResponse
ImportKeyMaterialResponse' :: Int -> ImportKeyMaterialResponse

-- | The response's http status code.
[$sel:httpStatus:ImportKeyMaterialResponse'] :: ImportKeyMaterialResponse -> Int

-- | Create a value of <a>ImportKeyMaterialResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:ImportKeyMaterialResponse'</a>,
--   <a>importKeyMaterialResponse_httpStatus</a> - The response's http
--   status code.
newImportKeyMaterialResponse :: Int -> ImportKeyMaterialResponse

-- | The response's http status code.
importKeyMaterialResponse_httpStatus :: Lens' ImportKeyMaterialResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterial
instance GHC.Show.Show Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterial
instance GHC.Read.Read Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterial
instance GHC.Classes.Eq Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterial
instance GHC.Generics.Generic Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterialResponse
instance GHC.Show.Show Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterialResponse
instance GHC.Read.Read Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterialResponse
instance GHC.Classes.Eq Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterialResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterial
instance Control.DeepSeq.NFData Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterialResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterial
instance Control.DeepSeq.NFData Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterial
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterial
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterial
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterial
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.ImportKeyMaterial.ImportKeyMaterial


-- | Returns the public key of an asymmetric KMS key. Unlike the private
--   key of a asymmetric KMS key, which never leaves KMS unencrypted,
--   callers with <tt>kms:GetPublicKey</tt> permission can download the
--   public key of an asymmetric KMS key. You can share the public key to
--   allow others to encrypt messages and verify signatures outside of KMS.
--   For information about symmetric and asymmetric KMS keys, see <a>Using
--   Symmetric and Asymmetric KMS keys</a> in the <i>Key Management Service
--   Developer Guide</i>.
--   
--   You do not need to download the public key. Instead, you can use the
--   public key within KMS by calling the Encrypt, ReEncrypt, or Verify
--   operations with the identifier of an asymmetric KMS key. When you use
--   the public key within KMS, you benefit from the authentication,
--   authorization, and logging that are part of every KMS operation. You
--   also reduce of risk of encrypting data that cannot be decrypted. These
--   features are not effective outside of KMS. For details, see <a>Special
--   Considerations for Downloading Public Keys</a>.
--   
--   To help you use the public key safely outside of KMS,
--   <tt>GetPublicKey</tt> returns important information about the public
--   key in the response, including:
--   
--   <ul>
--   <li><a>KeySpec</a>: The type of key material in the public key, such
--   as <tt>RSA_4096</tt> or <tt>ECC_NIST_P521</tt>.</li>
--   <li><a>KeyUsage</a>: Whether the key is used for encryption or
--   signing.</li>
--   <li><a>EncryptionAlgorithms</a> or <a>SigningAlgorithms</a>: A list of
--   the encryption algorithms or the signing algorithms for the key.</li>
--   </ul>
--   
--   Although KMS cannot enforce these restrictions on external operations,
--   it is crucial that you use this information to prevent the public key
--   from being used improperly. For example, you can prevent a public
--   signing key from being used encrypt data, or prevent a public key from
--   being used with an encryption algorithm that is not supported by KMS.
--   You can also avoid errors, such as using the wrong signing algorithm
--   in a verification operation.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: Yes. To perform this operation with a KMS
--   key in a different Amazon Web Services account, specify the key ARN or
--   alias ARN in the value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>: <a>kms:GetPublicKey</a> (key policy)
--   
--   <b>Related operations</b>: CreateKey
module Network.AWS.KMS.GetPublicKey

-- | <i>See:</i> <a>newGetPublicKey</a> smart constructor.
data GetPublicKey
GetPublicKey' :: Maybe [Text] -> Text -> GetPublicKey

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantTokens:GetPublicKey'] :: GetPublicKey -> Maybe [Text]

-- | Identifies the asymmetric KMS key that includes the public key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
[$sel:keyId:GetPublicKey'] :: GetPublicKey -> Text

-- | Create a value of <a>GetPublicKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:GetPublicKey'</a>, <a>getPublicKey_grantTokens</a>
--   - A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:keyId:GetPublicKey'</a>, <a>getPublicKey_keyId</a> -
--   Identifies the asymmetric KMS key that includes the public key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
newGetPublicKey :: Text -> GetPublicKey

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
getPublicKey_grantTokens :: Lens' GetPublicKey (Maybe [Text])

-- | Identifies the asymmetric KMS key that includes the public key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
getPublicKey_keyId :: Lens' GetPublicKey Text

-- | <i>See:</i> <a>newGetPublicKeyResponse</a> smart constructor.
data GetPublicKeyResponse
GetPublicKeyResponse' :: Maybe [SigningAlgorithmSpec] -> Maybe Base64 -> Maybe [EncryptionAlgorithmSpec] -> Maybe KeySpec -> Maybe CustomerMasterKeySpec -> Maybe Text -> Maybe KeyUsageType -> Int -> GetPublicKeyResponse

-- | The signing algorithms that KMS supports for this key.
--   
--   This field appears in the response only when the <tt>KeyUsage</tt> of
--   the public key is <tt>SIGN_VERIFY</tt>.
[$sel:signingAlgorithms:GetPublicKeyResponse'] :: GetPublicKeyResponse -> Maybe [SigningAlgorithmSpec]

-- | The exported public key.
--   
--   The value is a DER-encoded X.509 public key, also known as
--   <tt>SubjectPublicKeyInfo</tt> (SPKI), as defined in <a>RFC 5280</a>.
--   When you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.
[$sel:publicKey:GetPublicKeyResponse'] :: GetPublicKeyResponse -> Maybe Base64

-- | The encryption algorithms that KMS supports for this key.
--   
--   This information is critical. If a public key encrypts data outside of
--   KMS by using an unsupported encryption algorithm, the ciphertext
--   cannot be decrypted.
--   
--   This field appears in the response only when the <tt>KeyUsage</tt> of
--   the public key is <tt>ENCRYPT_DECRYPT</tt>.
[$sel:encryptionAlgorithms:GetPublicKeyResponse'] :: GetPublicKeyResponse -> Maybe [EncryptionAlgorithmSpec]

-- | The type of the of the public key that was downloaded.
[$sel:keySpec:GetPublicKeyResponse'] :: GetPublicKeyResponse -> Maybe KeySpec

-- | Instead, use the <tt>KeySpec</tt> field in the <tt>GetPublicKey</tt>
--   response.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
[$sel:customerMasterKeySpec:GetPublicKeyResponse'] :: GetPublicKeyResponse -> Maybe CustomerMasterKeySpec

-- | The Amazon Resource Name (<a>key ARN</a>) of the asymmetric KMS key
--   from which the public key was downloaded.
[$sel:keyId:GetPublicKeyResponse'] :: GetPublicKeyResponse -> Maybe Text

-- | The permitted use of the public key. Valid values are
--   <tt>ENCRYPT_DECRYPT</tt> or <tt>SIGN_VERIFY</tt>.
--   
--   This information is critical. If a public key with
--   <tt>SIGN_VERIFY</tt> key usage encrypts data outside of KMS, the
--   ciphertext cannot be decrypted.
[$sel:keyUsage:GetPublicKeyResponse'] :: GetPublicKeyResponse -> Maybe KeyUsageType

-- | The response's http status code.
[$sel:httpStatus:GetPublicKeyResponse'] :: GetPublicKeyResponse -> Int

-- | Create a value of <a>GetPublicKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signingAlgorithms:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_signingAlgorithms</a> - The signing algorithms
--   that KMS supports for this key.
--   
--   This field appears in the response only when the <tt>KeyUsage</tt> of
--   the public key is <tt>SIGN_VERIFY</tt>.
--   
--   <a>$sel:publicKey:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_publicKey</a> - The exported public key.
--   
--   The value is a DER-encoded X.509 public key, also known as
--   <tt>SubjectPublicKeyInfo</tt> (SPKI), as defined in <a>RFC 5280</a>.
--   When you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:encryptionAlgorithms:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_encryptionAlgorithms</a> - The encryption
--   algorithms that KMS supports for this key.
--   
--   This information is critical. If a public key encrypts data outside of
--   KMS by using an unsupported encryption algorithm, the ciphertext
--   cannot be decrypted.
--   
--   This field appears in the response only when the <tt>KeyUsage</tt> of
--   the public key is <tt>ENCRYPT_DECRYPT</tt>.
--   
--   <a>$sel:keySpec:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_keySpec</a> - The type of the of the public
--   key that was downloaded.
--   
--   <a>$sel:customerMasterKeySpec:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_customerMasterKeySpec</a> - Instead, use the
--   <tt>KeySpec</tt> field in the <tt>GetPublicKey</tt> response.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
--   
--   <a>$sel:keyId:GetPublicKey'</a>, <a>getPublicKeyResponse_keyId</a> -
--   The Amazon Resource Name (<a>key ARN</a>) of the asymmetric KMS key
--   from which the public key was downloaded.
--   
--   <a>$sel:keyUsage:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_keyUsage</a> - The permitted use of the public
--   key. Valid values are <tt>ENCRYPT_DECRYPT</tt> or
--   <tt>SIGN_VERIFY</tt>.
--   
--   This information is critical. If a public key with
--   <tt>SIGN_VERIFY</tt> key usage encrypts data outside of KMS, the
--   ciphertext cannot be decrypted.
--   
--   <a>$sel:httpStatus:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_httpStatus</a> - The response's http status
--   code.
newGetPublicKeyResponse :: Int -> GetPublicKeyResponse

-- | The signing algorithms that KMS supports for this key.
--   
--   This field appears in the response only when the <tt>KeyUsage</tt> of
--   the public key is <tt>SIGN_VERIFY</tt>.
getPublicKeyResponse_signingAlgorithms :: Lens' GetPublicKeyResponse (Maybe [SigningAlgorithmSpec])

-- | The exported public key.
--   
--   The value is a DER-encoded X.509 public key, also known as
--   <tt>SubjectPublicKeyInfo</tt> (SPKI), as defined in <a>RFC 5280</a>.
--   When you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
getPublicKeyResponse_publicKey :: Lens' GetPublicKeyResponse (Maybe ByteString)

-- | The encryption algorithms that KMS supports for this key.
--   
--   This information is critical. If a public key encrypts data outside of
--   KMS by using an unsupported encryption algorithm, the ciphertext
--   cannot be decrypted.
--   
--   This field appears in the response only when the <tt>KeyUsage</tt> of
--   the public key is <tt>ENCRYPT_DECRYPT</tt>.
getPublicKeyResponse_encryptionAlgorithms :: Lens' GetPublicKeyResponse (Maybe [EncryptionAlgorithmSpec])

-- | The type of the of the public key that was downloaded.
getPublicKeyResponse_keySpec :: Lens' GetPublicKeyResponse (Maybe KeySpec)

-- | Instead, use the <tt>KeySpec</tt> field in the <tt>GetPublicKey</tt>
--   response.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
getPublicKeyResponse_customerMasterKeySpec :: Lens' GetPublicKeyResponse (Maybe CustomerMasterKeySpec)

-- | The Amazon Resource Name (<a>key ARN</a>) of the asymmetric KMS key
--   from which the public key was downloaded.
getPublicKeyResponse_keyId :: Lens' GetPublicKeyResponse (Maybe Text)

-- | The permitted use of the public key. Valid values are
--   <tt>ENCRYPT_DECRYPT</tt> or <tt>SIGN_VERIFY</tt>.
--   
--   This information is critical. If a public key with
--   <tt>SIGN_VERIFY</tt> key usage encrypts data outside of KMS, the
--   ciphertext cannot be decrypted.
getPublicKeyResponse_keyUsage :: Lens' GetPublicKeyResponse (Maybe KeyUsageType)

-- | The response's http status code.
getPublicKeyResponse_httpStatus :: Lens' GetPublicKeyResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.GetPublicKey.GetPublicKey
instance GHC.Show.Show Network.AWS.KMS.GetPublicKey.GetPublicKey
instance GHC.Read.Read Network.AWS.KMS.GetPublicKey.GetPublicKey
instance GHC.Classes.Eq Network.AWS.KMS.GetPublicKey.GetPublicKey
instance GHC.Generics.Generic Network.AWS.KMS.GetPublicKey.GetPublicKeyResponse
instance GHC.Show.Show Network.AWS.KMS.GetPublicKey.GetPublicKeyResponse
instance GHC.Read.Read Network.AWS.KMS.GetPublicKey.GetPublicKeyResponse
instance GHC.Classes.Eq Network.AWS.KMS.GetPublicKey.GetPublicKeyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.GetPublicKey.GetPublicKey
instance Control.DeepSeq.NFData Network.AWS.KMS.GetPublicKey.GetPublicKeyResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.GetPublicKey.GetPublicKey
instance Control.DeepSeq.NFData Network.AWS.KMS.GetPublicKey.GetPublicKey
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.GetPublicKey.GetPublicKey
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.GetPublicKey.GetPublicKey
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.GetPublicKey.GetPublicKey
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.GetPublicKey.GetPublicKey


-- | Returns the items you need to import key material into a symmetric,
--   customer managed KMS key. For more information about importing key
--   material into KMS, see <a>Importing Key Material</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   This operation returns a public key and an import token. Use the
--   public key to encrypt the symmetric key material. Store the import
--   token to send with a subsequent ImportKeyMaterial request.
--   
--   You must specify the key ID of the symmetric KMS key into which you
--   will import key material. This KMS key's <tt>Origin</tt> must be
--   <tt>EXTERNAL</tt>. You must also specify the wrapping algorithm and
--   type of wrapping key (public key) that you will use to encrypt the key
--   material. You cannot perform this operation on an asymmetric KMS key
--   or on any KMS key in a different Amazon Web Services account.
--   
--   To import key material, you must use the public key and import token
--   from the same response. These items are valid for 24 hours. The
--   expiration date and time appear in the <tt>GetParametersForImport</tt>
--   response. You cannot use an expired token in an ImportKeyMaterial
--   request. If your key and token expire, send another
--   <tt>GetParametersForImport</tt> request.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:GetParametersForImport</a> (key
--   policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>ImportKeyMaterial</li>
--   <li>DeleteImportedKeyMaterial</li>
--   </ul>
module Network.AWS.KMS.GetParametersForImport

-- | <i>See:</i> <a>newGetParametersForImport</a> smart constructor.
data GetParametersForImport
GetParametersForImport' :: Text -> AlgorithmSpec -> WrappingKeySpec -> GetParametersForImport

-- | The identifier of the symmetric KMS key into which you will import key
--   material. The <tt>Origin</tt> of the KMS key must be
--   <tt>EXTERNAL</tt>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:GetParametersForImport'] :: GetParametersForImport -> Text

-- | The algorithm you will use to encrypt the key material before
--   importing it with ImportKeyMaterial. For more information, see
--   <a>Encrypt the Key Material</a> in the <i>Key Management Service
--   Developer Guide</i>.
[$sel:wrappingAlgorithm:GetParametersForImport'] :: GetParametersForImport -> AlgorithmSpec

-- | The type of wrapping key (public key) to return in the response. Only
--   2048-bit RSA public keys are supported.
[$sel:wrappingKeySpec:GetParametersForImport'] :: GetParametersForImport -> WrappingKeySpec

-- | Create a value of <a>GetParametersForImport</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:GetParametersForImport'</a>,
--   <a>getParametersForImport_keyId</a> - The identifier of the symmetric
--   KMS key into which you will import key material. The <tt>Origin</tt>
--   of the KMS key must be <tt>EXTERNAL</tt>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:wrappingAlgorithm:GetParametersForImport'</a>,
--   <a>getParametersForImport_wrappingAlgorithm</a> - The algorithm you
--   will use to encrypt the key material before importing it with
--   ImportKeyMaterial. For more information, see <a>Encrypt the Key
--   Material</a> in the <i>Key Management Service Developer Guide</i>.
--   
--   <a>$sel:wrappingKeySpec:GetParametersForImport'</a>,
--   <a>getParametersForImport_wrappingKeySpec</a> - The type of wrapping
--   key (public key) to return in the response. Only 2048-bit RSA public
--   keys are supported.
newGetParametersForImport :: Text -> AlgorithmSpec -> WrappingKeySpec -> GetParametersForImport

-- | The identifier of the symmetric KMS key into which you will import key
--   material. The <tt>Origin</tt> of the KMS key must be
--   <tt>EXTERNAL</tt>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
getParametersForImport_keyId :: Lens' GetParametersForImport Text

-- | The algorithm you will use to encrypt the key material before
--   importing it with ImportKeyMaterial. For more information, see
--   <a>Encrypt the Key Material</a> in the <i>Key Management Service
--   Developer Guide</i>.
getParametersForImport_wrappingAlgorithm :: Lens' GetParametersForImport AlgorithmSpec

-- | The type of wrapping key (public key) to return in the response. Only
--   2048-bit RSA public keys are supported.
getParametersForImport_wrappingKeySpec :: Lens' GetParametersForImport WrappingKeySpec

-- | <i>See:</i> <a>newGetParametersForImportResponse</a> smart
--   constructor.
data GetParametersForImportResponse
GetParametersForImportResponse' :: Maybe POSIX -> Maybe (Sensitive Base64) -> Maybe Base64 -> Maybe Text -> Int -> GetParametersForImportResponse

-- | The time at which the import token and public key are no longer valid.
--   After this time, you cannot use them to make an ImportKeyMaterial
--   request and you must send another <tt>GetParametersForImport</tt>
--   request to get new ones.
[$sel:parametersValidTo:GetParametersForImportResponse'] :: GetParametersForImportResponse -> Maybe POSIX

-- | The public key to use to encrypt the key material before importing it
--   with ImportKeyMaterial.
[$sel:publicKey:GetParametersForImportResponse'] :: GetParametersForImportResponse -> Maybe (Sensitive Base64)

-- | The import token to send in a subsequent ImportKeyMaterial request.
[$sel:importToken:GetParametersForImportResponse'] :: GetParametersForImportResponse -> Maybe Base64

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key to use in a
--   subsequent ImportKeyMaterial request. This is the same KMS key
--   specified in the <tt>GetParametersForImport</tt> request.
[$sel:keyId:GetParametersForImportResponse'] :: GetParametersForImportResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetParametersForImportResponse'] :: GetParametersForImportResponse -> Int

-- | Create a value of <a>GetParametersForImportResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:parametersValidTo:GetParametersForImportResponse'</a>,
--   <a>getParametersForImportResponse_parametersValidTo</a> - The time at
--   which the import token and public key are no longer valid. After this
--   time, you cannot use them to make an ImportKeyMaterial request and you
--   must send another <tt>GetParametersForImport</tt> request to get new
--   ones.
--   
--   <a>$sel:publicKey:GetParametersForImportResponse'</a>,
--   <a>getParametersForImportResponse_publicKey</a> - The public key to
--   use to encrypt the key material before importing it with
--   ImportKeyMaterial.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:importToken:GetParametersForImportResponse'</a>,
--   <a>getParametersForImportResponse_importToken</a> - The import token
--   to send in a subsequent ImportKeyMaterial request.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:keyId:GetParametersForImport'</a>,
--   <a>getParametersForImportResponse_keyId</a> - The Amazon Resource Name
--   (<a>key ARN</a>) of the KMS key to use in a subsequent
--   ImportKeyMaterial request. This is the same KMS key specified in the
--   <tt>GetParametersForImport</tt> request.
--   
--   <a>$sel:httpStatus:GetParametersForImportResponse'</a>,
--   <a>getParametersForImportResponse_httpStatus</a> - The response's http
--   status code.
newGetParametersForImportResponse :: Int -> GetParametersForImportResponse

-- | The time at which the import token and public key are no longer valid.
--   After this time, you cannot use them to make an ImportKeyMaterial
--   request and you must send another <tt>GetParametersForImport</tt>
--   request to get new ones.
getParametersForImportResponse_parametersValidTo :: Lens' GetParametersForImportResponse (Maybe UTCTime)

-- | The public key to use to encrypt the key material before importing it
--   with ImportKeyMaterial.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
getParametersForImportResponse_publicKey :: Lens' GetParametersForImportResponse (Maybe ByteString)

-- | The import token to send in a subsequent ImportKeyMaterial request.--
--   -- <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
getParametersForImportResponse_importToken :: Lens' GetParametersForImportResponse (Maybe ByteString)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key to use in a
--   subsequent ImportKeyMaterial request. This is the same KMS key
--   specified in the <tt>GetParametersForImport</tt> request.
getParametersForImportResponse_keyId :: Lens' GetParametersForImportResponse (Maybe Text)

-- | The response's http status code.
getParametersForImportResponse_httpStatus :: Lens' GetParametersForImportResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.GetParametersForImport.GetParametersForImport
instance GHC.Show.Show Network.AWS.KMS.GetParametersForImport.GetParametersForImport
instance GHC.Read.Read Network.AWS.KMS.GetParametersForImport.GetParametersForImport
instance GHC.Classes.Eq Network.AWS.KMS.GetParametersForImport.GetParametersForImport
instance GHC.Generics.Generic Network.AWS.KMS.GetParametersForImport.GetParametersForImportResponse
instance GHC.Show.Show Network.AWS.KMS.GetParametersForImport.GetParametersForImportResponse
instance GHC.Classes.Eq Network.AWS.KMS.GetParametersForImport.GetParametersForImportResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.GetParametersForImport.GetParametersForImport
instance Control.DeepSeq.NFData Network.AWS.KMS.GetParametersForImport.GetParametersForImportResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.GetParametersForImport.GetParametersForImport
instance Control.DeepSeq.NFData Network.AWS.KMS.GetParametersForImport.GetParametersForImport
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.GetParametersForImport.GetParametersForImport
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.GetParametersForImport.GetParametersForImport
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.GetParametersForImport.GetParametersForImport
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.GetParametersForImport.GetParametersForImport


-- | Gets a Boolean value that indicates whether <a>automatic rotation of
--   the key material</a> is enabled for the specified KMS key.
--   
--   You cannot enable automatic rotation of <a>asymmetric KMS keys</a>,
--   KMS keys with <a>imported key material</a>, or KMS keys in a <a>custom
--   key store</a>. To enable or disable automatic rotation of a set of
--   related <a>multi-Region keys</a>, set the property on the primary key.
--   The key rotation status for these KMS keys is always <tt>false</tt>.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <ul>
--   <li>Disabled: The key rotation status does not change when you disable
--   a KMS key. However, while the KMS key is disabled, KMS does not rotate
--   the key material.</li>
--   <li>Pending deletion: While a KMS key is pending deletion, its key
--   rotation status is <tt>false</tt> and KMS does not rotate the key
--   material. If you cancel the deletion, the original key rotation status
--   is restored.</li>
--   </ul>
--   
--   <b>Cross-account use</b>: Yes. To perform this operation on a KMS key
--   in a different Amazon Web Services account, specify the key ARN in the
--   value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>: <a>kms:GetKeyRotationStatus</a> (key
--   policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>DisableKeyRotation</li>
--   <li>EnableKeyRotation</li>
--   </ul>
module Network.AWS.KMS.GetKeyRotationStatus

-- | <i>See:</i> <a>newGetKeyRotationStatus</a> smart constructor.
data GetKeyRotationStatus
GetKeyRotationStatus' :: Text -> GetKeyRotationStatus

-- | Gets the rotation status for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:GetKeyRotationStatus'] :: GetKeyRotationStatus -> Text

-- | Create a value of <a>GetKeyRotationStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:GetKeyRotationStatus'</a>,
--   <a>getKeyRotationStatus_keyId</a> - Gets the rotation status for the
--   specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newGetKeyRotationStatus :: Text -> GetKeyRotationStatus

-- | Gets the rotation status for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
getKeyRotationStatus_keyId :: Lens' GetKeyRotationStatus Text

-- | <i>See:</i> <a>newGetKeyRotationStatusResponse</a> smart constructor.
data GetKeyRotationStatusResponse
GetKeyRotationStatusResponse' :: Maybe Bool -> Int -> GetKeyRotationStatusResponse

-- | A Boolean value that specifies whether key rotation is enabled.
[$sel:keyRotationEnabled:GetKeyRotationStatusResponse'] :: GetKeyRotationStatusResponse -> Maybe Bool

-- | The response's http status code.
[$sel:httpStatus:GetKeyRotationStatusResponse'] :: GetKeyRotationStatusResponse -> Int

-- | Create a value of <a>GetKeyRotationStatusResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyRotationEnabled:GetKeyRotationStatusResponse'</a>,
--   <a>getKeyRotationStatusResponse_keyRotationEnabled</a> - A Boolean
--   value that specifies whether key rotation is enabled.
--   
--   <a>$sel:httpStatus:GetKeyRotationStatusResponse'</a>,
--   <a>getKeyRotationStatusResponse_httpStatus</a> - The response's http
--   status code.
newGetKeyRotationStatusResponse :: Int -> GetKeyRotationStatusResponse

-- | A Boolean value that specifies whether key rotation is enabled.
getKeyRotationStatusResponse_keyRotationEnabled :: Lens' GetKeyRotationStatusResponse (Maybe Bool)

-- | The response's http status code.
getKeyRotationStatusResponse_httpStatus :: Lens' GetKeyRotationStatusResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatus
instance GHC.Show.Show Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatus
instance GHC.Read.Read Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatus
instance GHC.Classes.Eq Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatus
instance GHC.Generics.Generic Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatusResponse
instance GHC.Show.Show Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatusResponse
instance GHC.Read.Read Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatusResponse
instance GHC.Classes.Eq Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatusResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatus
instance Control.DeepSeq.NFData Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatusResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatus
instance Control.DeepSeq.NFData Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatus
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatus
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatus
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatus
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.GetKeyRotationStatus.GetKeyRotationStatus


-- | Gets a key policy attached to the specified KMS key.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:GetKeyPolicy</a> (key policy)
--   
--   <b>Related operations</b>: PutKeyPolicy
module Network.AWS.KMS.GetKeyPolicy

-- | <i>See:</i> <a>newGetKeyPolicy</a> smart constructor.
data GetKeyPolicy
GetKeyPolicy' :: Text -> Text -> GetKeyPolicy

-- | Gets the key policy for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:GetKeyPolicy'] :: GetKeyPolicy -> Text

-- | Specifies the name of the key policy. The only valid name is
--   <tt>default</tt>. To get the names of key policies, use
--   ListKeyPolicies.
[$sel:policyName:GetKeyPolicy'] :: GetKeyPolicy -> Text

-- | Create a value of <a>GetKeyPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:GetKeyPolicy'</a>, <a>getKeyPolicy_keyId</a> - Gets the
--   key policy for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:policyName:GetKeyPolicy'</a>, <a>getKeyPolicy_policyName</a> -
--   Specifies the name of the key policy. The only valid name is
--   <tt>default</tt>. To get the names of key policies, use
--   ListKeyPolicies.
newGetKeyPolicy :: Text -> Text -> GetKeyPolicy

-- | Gets the key policy for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
getKeyPolicy_keyId :: Lens' GetKeyPolicy Text

-- | Specifies the name of the key policy. The only valid name is
--   <tt>default</tt>. To get the names of key policies, use
--   ListKeyPolicies.
getKeyPolicy_policyName :: Lens' GetKeyPolicy Text

-- | <i>See:</i> <a>newGetKeyPolicyResponse</a> smart constructor.
data GetKeyPolicyResponse
GetKeyPolicyResponse' :: Maybe Text -> Int -> GetKeyPolicyResponse

-- | A key policy document in JSON format.
[$sel:policy:GetKeyPolicyResponse'] :: GetKeyPolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetKeyPolicyResponse'] :: GetKeyPolicyResponse -> Int

-- | Create a value of <a>GetKeyPolicyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:policy:GetKeyPolicyResponse'</a>,
--   <a>getKeyPolicyResponse_policy</a> - A key policy document in JSON
--   format.
--   
--   <a>$sel:httpStatus:GetKeyPolicyResponse'</a>,
--   <a>getKeyPolicyResponse_httpStatus</a> - The response's http status
--   code.
newGetKeyPolicyResponse :: Int -> GetKeyPolicyResponse

-- | A key policy document in JSON format.
getKeyPolicyResponse_policy :: Lens' GetKeyPolicyResponse (Maybe Text)

-- | The response's http status code.
getKeyPolicyResponse_httpStatus :: Lens' GetKeyPolicyResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.GetKeyPolicy.GetKeyPolicy
instance GHC.Show.Show Network.AWS.KMS.GetKeyPolicy.GetKeyPolicy
instance GHC.Read.Read Network.AWS.KMS.GetKeyPolicy.GetKeyPolicy
instance GHC.Classes.Eq Network.AWS.KMS.GetKeyPolicy.GetKeyPolicy
instance GHC.Generics.Generic Network.AWS.KMS.GetKeyPolicy.GetKeyPolicyResponse
instance GHC.Show.Show Network.AWS.KMS.GetKeyPolicy.GetKeyPolicyResponse
instance GHC.Read.Read Network.AWS.KMS.GetKeyPolicy.GetKeyPolicyResponse
instance GHC.Classes.Eq Network.AWS.KMS.GetKeyPolicy.GetKeyPolicyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.GetKeyPolicy.GetKeyPolicy
instance Control.DeepSeq.NFData Network.AWS.KMS.GetKeyPolicy.GetKeyPolicyResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.GetKeyPolicy.GetKeyPolicy
instance Control.DeepSeq.NFData Network.AWS.KMS.GetKeyPolicy.GetKeyPolicy
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.GetKeyPolicy.GetKeyPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.GetKeyPolicy.GetKeyPolicy
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.GetKeyPolicy.GetKeyPolicy
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.GetKeyPolicy.GetKeyPolicy


-- | Returns a random byte string that is cryptographically secure.
--   
--   By default, the random byte string is generated in KMS. To generate
--   the byte string in the CloudHSM cluster that is associated with a
--   <a>custom key store</a>, specify the custom key store ID.
--   
--   Applications in Amazon Web Services Nitro Enclaves can call this
--   operation by using the <a>Amazon Web Services Nitro Enclaves
--   Development Kit</a>. For information about the supporting parameters,
--   see <a>How Amazon Web Services Nitro Enclaves use KMS</a> in the
--   <i>Key Management Service Developer Guide</i>.
--   
--   For more information about entropy and random number generation, see
--   <a>Key Management Service Cryptographic Details</a>.
--   
--   <b>Required permissions</b>: <a>kms:GenerateRandom</a> (IAM policy)
module Network.AWS.KMS.GenerateRandom

-- | <i>See:</i> <a>newGenerateRandom</a> smart constructor.
data GenerateRandom
GenerateRandom' :: Maybe Text -> Maybe Natural -> GenerateRandom

-- | Generates the random byte string in the CloudHSM cluster that is
--   associated with the specified <a>custom key store</a>. To find the ID
--   of a custom key store, use the DescribeCustomKeyStores operation.
[$sel:customKeyStoreId:GenerateRandom'] :: GenerateRandom -> Maybe Text

-- | The length of the byte string.
[$sel:numberOfBytes:GenerateRandom'] :: GenerateRandom -> Maybe Natural

-- | Create a value of <a>GenerateRandom</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreId:GenerateRandom'</a>,
--   <a>generateRandom_customKeyStoreId</a> - Generates the random byte
--   string in the CloudHSM cluster that is associated with the specified
--   <a>custom key store</a>. To find the ID of a custom key store, use the
--   DescribeCustomKeyStores operation.
--   
--   <a>$sel:numberOfBytes:GenerateRandom'</a>,
--   <a>generateRandom_numberOfBytes</a> - The length of the byte string.
newGenerateRandom :: GenerateRandom

-- | Generates the random byte string in the CloudHSM cluster that is
--   associated with the specified <a>custom key store</a>. To find the ID
--   of a custom key store, use the DescribeCustomKeyStores operation.
generateRandom_customKeyStoreId :: Lens' GenerateRandom (Maybe Text)

-- | The length of the byte string.
generateRandom_numberOfBytes :: Lens' GenerateRandom (Maybe Natural)

-- | <i>See:</i> <a>newGenerateRandomResponse</a> smart constructor.
data GenerateRandomResponse
GenerateRandomResponse' :: Maybe (Sensitive Base64) -> Int -> GenerateRandomResponse

-- | The random byte string. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.
[$sel:plaintext:GenerateRandomResponse'] :: GenerateRandomResponse -> Maybe (Sensitive Base64)

-- | The response's http status code.
[$sel:httpStatus:GenerateRandomResponse'] :: GenerateRandomResponse -> Int

-- | Create a value of <a>GenerateRandomResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:plaintext:GenerateRandomResponse'</a>,
--   <a>generateRandomResponse_plaintext</a> - The random byte string. When
--   you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:httpStatus:GenerateRandomResponse'</a>,
--   <a>generateRandomResponse_httpStatus</a> - The response's http status
--   code.
newGenerateRandomResponse :: Int -> GenerateRandomResponse

-- | The random byte string. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
generateRandomResponse_plaintext :: Lens' GenerateRandomResponse (Maybe ByteString)

-- | The response's http status code.
generateRandomResponse_httpStatus :: Lens' GenerateRandomResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.GenerateRandom.GenerateRandom
instance GHC.Show.Show Network.AWS.KMS.GenerateRandom.GenerateRandom
instance GHC.Read.Read Network.AWS.KMS.GenerateRandom.GenerateRandom
instance GHC.Classes.Eq Network.AWS.KMS.GenerateRandom.GenerateRandom
instance GHC.Generics.Generic Network.AWS.KMS.GenerateRandom.GenerateRandomResponse
instance GHC.Show.Show Network.AWS.KMS.GenerateRandom.GenerateRandomResponse
instance GHC.Classes.Eq Network.AWS.KMS.GenerateRandom.GenerateRandomResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.GenerateRandom.GenerateRandom
instance Control.DeepSeq.NFData Network.AWS.KMS.GenerateRandom.GenerateRandomResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.GenerateRandom.GenerateRandom
instance Control.DeepSeq.NFData Network.AWS.KMS.GenerateRandom.GenerateRandom
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.GenerateRandom.GenerateRandom
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.GenerateRandom.GenerateRandom
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.GenerateRandom.GenerateRandom
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.GenerateRandom.GenerateRandom


-- | Generates a unique symmetric data key. This operation returns a data
--   key that is encrypted under a KMS key that you specify. To request an
--   asymmetric data key pair, use the GenerateDataKeyPair or
--   GenerateDataKeyPairWithoutPlaintext operations.
--   
--   <tt>GenerateDataKeyWithoutPlaintext</tt> is identical to the
--   GenerateDataKey operation except that returns only the encrypted copy
--   of the data key. This operation is useful for systems that need to
--   encrypt data at some point, but not immediately. When you need to
--   encrypt the data, you call the Decrypt operation on the encrypted copy
--   of the key.
--   
--   It's also useful in distributed systems with different levels of
--   trust. For example, you might store encrypted data in containers. One
--   component of your system creates new containers and stores an
--   encrypted data key with each container. Then, a different component
--   puts the data into the containers. That component first decrypts the
--   data key, uses the plaintext data key to encrypt data, puts the
--   encrypted data into the container, and then destroys the plaintext
--   data key. In this system, the component that creates the containers
--   never sees the plaintext data key.
--   
--   <tt>GenerateDataKeyWithoutPlaintext</tt> returns a unique data key for
--   each request. The bytes in the keys are not related to the caller or
--   KMS key that is used to encrypt the private key.
--   
--   To generate a data key, you must specify the symmetric KMS key that is
--   used to encrypt the data key. You cannot use an asymmetric KMS key to
--   generate a data key. To get the type of your KMS key, use the
--   DescribeKey operation.
--   
--   If the operation succeeds, you will find the encrypted copy of the
--   data key in the <tt>CiphertextBlob</tt> field.
--   
--   You can use the optional encryption context to add additional security
--   to the encryption operation. If you specify an
--   <tt>EncryptionContext</tt>, you must specify the same encryption
--   context (a case-sensitive exact match) when decrypting the encrypted
--   data key. Otherwise, the request to decrypt fails with an
--   <tt>InvalidCiphertextException</tt>. For more information, see
--   <a>Encryption Context</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: Yes. To perform this operation with a KMS
--   key in a different Amazon Web Services account, specify the key ARN or
--   alias ARN in the value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>:
--   <a>kms:GenerateDataKeyWithoutPlaintext</a> (key policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>Decrypt</li>
--   <li>Encrypt</li>
--   <li>GenerateDataKey</li>
--   <li>GenerateDataKeyPair</li>
--   <li>GenerateDataKeyPairWithoutPlaintext</li>
--   </ul>
module Network.AWS.KMS.GenerateDataKeyWithoutPlaintext

-- | <i>See:</i> <a>newGenerateDataKeyWithoutPlaintext</a> smart
--   constructor.
data GenerateDataKeyWithoutPlaintext
GenerateDataKeyWithoutPlaintext' :: Maybe [Text] -> Maybe Natural -> Maybe (HashMap Text Text) -> Maybe DataKeySpec -> Text -> GenerateDataKeyWithoutPlaintext

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantTokens:GenerateDataKeyWithoutPlaintext'] :: GenerateDataKeyWithoutPlaintext -> Maybe [Text]

-- | The length of the data key in bytes. For example, use the value 64 to
--   generate a 512-bit data key (64 bytes is 512 bits). For common key
--   lengths (128-bit and 256-bit symmetric keys), we recommend that you
--   use the <tt>KeySpec</tt> field instead of this one.
[$sel:numberOfBytes:GenerateDataKeyWithoutPlaintext'] :: GenerateDataKeyWithoutPlaintext -> Maybe Natural

-- | Specifies the encryption context that will be used when encrypting the
--   data key.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:encryptionContext:GenerateDataKeyWithoutPlaintext'] :: GenerateDataKeyWithoutPlaintext -> Maybe (HashMap Text Text)

-- | The length of the data key. Use <tt>AES_128</tt> to generate a 128-bit
--   symmetric key, or <tt>AES_256</tt> to generate a 256-bit symmetric
--   key.
[$sel:keySpec:GenerateDataKeyWithoutPlaintext'] :: GenerateDataKeyWithoutPlaintext -> Maybe DataKeySpec

-- | The identifier of the symmetric KMS key that encrypts the data key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
[$sel:keyId:GenerateDataKeyWithoutPlaintext'] :: GenerateDataKeyWithoutPlaintext -> Text

-- | Create a value of <a>GenerateDataKeyWithoutPlaintext</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:GenerateDataKeyWithoutPlaintext'</a>,
--   <a>generateDataKeyWithoutPlaintext_grantTokens</a> - A list of grant
--   tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:numberOfBytes:GenerateDataKeyWithoutPlaintext'</a>,
--   <a>generateDataKeyWithoutPlaintext_numberOfBytes</a> - The length of
--   the data key in bytes. For example, use the value 64 to generate a
--   512-bit data key (64 bytes is 512 bits). For common key lengths
--   (128-bit and 256-bit symmetric keys), we recommend that you use the
--   <tt>KeySpec</tt> field instead of this one.
--   
--   <a>$sel:encryptionContext:GenerateDataKeyWithoutPlaintext'</a>,
--   <a>generateDataKeyWithoutPlaintext_encryptionContext</a> - Specifies
--   the encryption context that will be used when encrypting the data key.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keySpec:GenerateDataKeyWithoutPlaintext'</a>,
--   <a>generateDataKeyWithoutPlaintext_keySpec</a> - The length of the
--   data key. Use <tt>AES_128</tt> to generate a 128-bit symmetric key, or
--   <tt>AES_256</tt> to generate a 256-bit symmetric key.
--   
--   <a>$sel:keyId:GenerateDataKeyWithoutPlaintext'</a>,
--   <a>generateDataKeyWithoutPlaintext_keyId</a> - The identifier of the
--   symmetric KMS key that encrypts the data key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
newGenerateDataKeyWithoutPlaintext :: Text -> GenerateDataKeyWithoutPlaintext

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
generateDataKeyWithoutPlaintext_grantTokens :: Lens' GenerateDataKeyWithoutPlaintext (Maybe [Text])

-- | The length of the data key in bytes. For example, use the value 64 to
--   generate a 512-bit data key (64 bytes is 512 bits). For common key
--   lengths (128-bit and 256-bit symmetric keys), we recommend that you
--   use the <tt>KeySpec</tt> field instead of this one.
generateDataKeyWithoutPlaintext_numberOfBytes :: Lens' GenerateDataKeyWithoutPlaintext (Maybe Natural)

-- | Specifies the encryption context that will be used when encrypting the
--   data key.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
generateDataKeyWithoutPlaintext_encryptionContext :: Lens' GenerateDataKeyWithoutPlaintext (Maybe (HashMap Text Text))

-- | The length of the data key. Use <tt>AES_128</tt> to generate a 128-bit
--   symmetric key, or <tt>AES_256</tt> to generate a 256-bit symmetric
--   key.
generateDataKeyWithoutPlaintext_keySpec :: Lens' GenerateDataKeyWithoutPlaintext (Maybe DataKeySpec)

-- | The identifier of the symmetric KMS key that encrypts the data key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
generateDataKeyWithoutPlaintext_keyId :: Lens' GenerateDataKeyWithoutPlaintext Text

-- | <i>See:</i> <a>newGenerateDataKeyWithoutPlaintextResponse</a> smart
--   constructor.
data GenerateDataKeyWithoutPlaintextResponse
GenerateDataKeyWithoutPlaintextResponse' :: Maybe Base64 -> Maybe Text -> Int -> GenerateDataKeyWithoutPlaintextResponse

-- | The encrypted data key. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.
[$sel:ciphertextBlob:GenerateDataKeyWithoutPlaintextResponse'] :: GenerateDataKeyWithoutPlaintextResponse -> Maybe Base64

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that
--   encrypted the data key.
[$sel:keyId:GenerateDataKeyWithoutPlaintextResponse'] :: GenerateDataKeyWithoutPlaintextResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GenerateDataKeyWithoutPlaintextResponse'] :: GenerateDataKeyWithoutPlaintextResponse -> Int

-- | Create a value of <a>GenerateDataKeyWithoutPlaintextResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ciphertextBlob:GenerateDataKeyWithoutPlaintextResponse'</a>,
--   <a>generateDataKeyWithoutPlaintextResponse_ciphertextBlob</a> - The
--   encrypted data key. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:keyId:GenerateDataKeyWithoutPlaintext'</a>,
--   <a>generateDataKeyWithoutPlaintextResponse_keyId</a> - The Amazon
--   Resource Name (<a>key ARN</a>) of the KMS key that encrypted the data
--   key.
--   
--   <a>$sel:httpStatus:GenerateDataKeyWithoutPlaintextResponse'</a>,
--   <a>generateDataKeyWithoutPlaintextResponse_httpStatus</a> - The
--   response's http status code.
newGenerateDataKeyWithoutPlaintextResponse :: Int -> GenerateDataKeyWithoutPlaintextResponse

-- | The encrypted data key. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
generateDataKeyWithoutPlaintextResponse_ciphertextBlob :: Lens' GenerateDataKeyWithoutPlaintextResponse (Maybe ByteString)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that
--   encrypted the data key.
generateDataKeyWithoutPlaintextResponse_keyId :: Lens' GenerateDataKeyWithoutPlaintextResponse (Maybe Text)

-- | The response's http status code.
generateDataKeyWithoutPlaintextResponse_httpStatus :: Lens' GenerateDataKeyWithoutPlaintextResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintext
instance GHC.Show.Show Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintext
instance GHC.Read.Read Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintext
instance GHC.Classes.Eq Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintext
instance GHC.Generics.Generic Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintextResponse
instance GHC.Show.Show Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintextResponse
instance GHC.Read.Read Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintextResponse
instance GHC.Classes.Eq Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintextResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintext
instance Control.DeepSeq.NFData Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintextResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintext
instance Control.DeepSeq.NFData Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintext
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintext
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintext
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintext
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.GenerateDataKeyWithoutPlaintext.GenerateDataKeyWithoutPlaintext


-- | Generates a unique asymmetric data key pair. The
--   <tt>GenerateDataKeyPairWithoutPlaintext</tt> operation returns a
--   plaintext public key and a copy of the private key that is encrypted
--   under the symmetric KMS key you specify. Unlike GenerateDataKeyPair,
--   this operation does not return a plaintext private key.
--   
--   You can use the public key that
--   <tt>GenerateDataKeyPairWithoutPlaintext</tt> returns to encrypt data
--   or verify a signature outside of KMS. Then, store the encrypted
--   private key with the data. When you are ready to decrypt data or sign
--   a message, you can use the Decrypt operation to decrypt the encrypted
--   private key.
--   
--   To generate a data key pair, you must specify a symmetric KMS key to
--   encrypt the private key in a data key pair. You cannot use an
--   asymmetric KMS key or a KMS key in a custom key store. To get the type
--   and origin of your KMS key, use the DescribeKey operation.
--   
--   Use the <tt>KeyPairSpec</tt> parameter to choose an RSA or Elliptic
--   Curve (ECC) data key pair. KMS recommends that your use ECC key pairs
--   for signing, and use RSA key pairs for either encryption or signing,
--   but not both. However, KMS cannot enforce any restrictions on the use
--   of data key pairs outside of KMS.
--   
--   <tt>GenerateDataKeyPairWithoutPlaintext</tt> returns a unique data key
--   pair for each request. The bytes in the key are not related to the
--   caller or KMS key that is used to encrypt the private key. The public
--   key is a DER-encoded X.509 SubjectPublicKeyInfo, as specified in
--   <a>RFC 5280</a>.
--   
--   You can use the optional encryption context to add additional security
--   to the encryption operation. If you specify an
--   <tt>EncryptionContext</tt>, you must specify the same encryption
--   context (a case-sensitive exact match) when decrypting the encrypted
--   data key. Otherwise, the request to decrypt fails with an
--   <tt>InvalidCiphertextException</tt>. For more information, see
--   <a>Encryption Context</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: Yes. To perform this operation with a KMS
--   key in a different Amazon Web Services account, specify the key ARN or
--   alias ARN in the value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>:
--   <a>kms:GenerateDataKeyPairWithoutPlaintext</a> (key policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>Decrypt</li>
--   <li>Encrypt</li>
--   <li>GenerateDataKey</li>
--   <li>GenerateDataKeyPair</li>
--   <li>GenerateDataKeyWithoutPlaintext</li>
--   </ul>
module Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext

-- | <i>See:</i> <a>newGenerateDataKeyPairWithoutPlaintext</a> smart
--   constructor.
data GenerateDataKeyPairWithoutPlaintext
GenerateDataKeyPairWithoutPlaintext' :: Maybe [Text] -> Maybe (HashMap Text Text) -> Text -> DataKeyPairSpec -> GenerateDataKeyPairWithoutPlaintext

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantTokens:GenerateDataKeyPairWithoutPlaintext'] :: GenerateDataKeyPairWithoutPlaintext -> Maybe [Text]

-- | Specifies the encryption context that will be used when encrypting the
--   private key in the data key pair.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:encryptionContext:GenerateDataKeyPairWithoutPlaintext'] :: GenerateDataKeyPairWithoutPlaintext -> Maybe (HashMap Text Text)

-- | Specifies the KMS key that encrypts the private key in the data key
--   pair. You must specify a symmetric KMS key. You cannot use an
--   asymmetric KMS key or a KMS key in a custom key store. To get the type
--   and origin of your KMS key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
[$sel:keyId:GenerateDataKeyPairWithoutPlaintext'] :: GenerateDataKeyPairWithoutPlaintext -> Text

-- | Determines the type of data key pair that is generated.
--   
--   The KMS rule that restricts the use of asymmetric RSA KMS keys to
--   encrypt and decrypt or to sign and verify (but not both), and the rule
--   that permits you to use ECC KMS keys only to sign and verify, are not
--   effective on data key pairs, which are used outside of KMS.
[$sel:keyPairSpec:GenerateDataKeyPairWithoutPlaintext'] :: GenerateDataKeyPairWithoutPlaintext -> DataKeyPairSpec

-- | Create a value of <a>GenerateDataKeyPairWithoutPlaintext</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:GenerateDataKeyPairWithoutPlaintext'</a>,
--   <a>generateDataKeyPairWithoutPlaintext_grantTokens</a> - A list of
--   grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:encryptionContext:GenerateDataKeyPairWithoutPlaintext'</a>,
--   <a>generateDataKeyPairWithoutPlaintext_encryptionContext</a> -
--   Specifies the encryption context that will be used when encrypting the
--   private key in the data key pair.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keyId:GenerateDataKeyPairWithoutPlaintext'</a>,
--   <a>generateDataKeyPairWithoutPlaintext_keyId</a> - Specifies the KMS
--   key that encrypts the private key in the data key pair. You must
--   specify a symmetric KMS key. You cannot use an asymmetric KMS key or a
--   KMS key in a custom key store. To get the type and origin of your KMS
--   key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:keyPairSpec:GenerateDataKeyPairWithoutPlaintext'</a>,
--   <a>generateDataKeyPairWithoutPlaintext_keyPairSpec</a> - Determines
--   the type of data key pair that is generated.
--   
--   The KMS rule that restricts the use of asymmetric RSA KMS keys to
--   encrypt and decrypt or to sign and verify (but not both), and the rule
--   that permits you to use ECC KMS keys only to sign and verify, are not
--   effective on data key pairs, which are used outside of KMS.
newGenerateDataKeyPairWithoutPlaintext :: Text -> DataKeyPairSpec -> GenerateDataKeyPairWithoutPlaintext

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
generateDataKeyPairWithoutPlaintext_grantTokens :: Lens' GenerateDataKeyPairWithoutPlaintext (Maybe [Text])

-- | Specifies the encryption context that will be used when encrypting the
--   private key in the data key pair.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
generateDataKeyPairWithoutPlaintext_encryptionContext :: Lens' GenerateDataKeyPairWithoutPlaintext (Maybe (HashMap Text Text))

-- | Specifies the KMS key that encrypts the private key in the data key
--   pair. You must specify a symmetric KMS key. You cannot use an
--   asymmetric KMS key or a KMS key in a custom key store. To get the type
--   and origin of your KMS key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
generateDataKeyPairWithoutPlaintext_keyId :: Lens' GenerateDataKeyPairWithoutPlaintext Text

-- | Determines the type of data key pair that is generated.
--   
--   The KMS rule that restricts the use of asymmetric RSA KMS keys to
--   encrypt and decrypt or to sign and verify (but not both), and the rule
--   that permits you to use ECC KMS keys only to sign and verify, are not
--   effective on data key pairs, which are used outside of KMS.
generateDataKeyPairWithoutPlaintext_keyPairSpec :: Lens' GenerateDataKeyPairWithoutPlaintext DataKeyPairSpec

-- | <i>See:</i> <a>newGenerateDataKeyPairWithoutPlaintextResponse</a>
--   smart constructor.
data GenerateDataKeyPairWithoutPlaintextResponse
GenerateDataKeyPairWithoutPlaintextResponse' :: Maybe Base64 -> Maybe DataKeyPairSpec -> Maybe Base64 -> Maybe Text -> Int -> GenerateDataKeyPairWithoutPlaintextResponse

-- | The public key (in plaintext).
[$sel:publicKey:GenerateDataKeyPairWithoutPlaintextResponse'] :: GenerateDataKeyPairWithoutPlaintextResponse -> Maybe Base64

-- | The type of data key pair that was generated.
[$sel:keyPairSpec:GenerateDataKeyPairWithoutPlaintextResponse'] :: GenerateDataKeyPairWithoutPlaintextResponse -> Maybe DataKeyPairSpec

-- | The encrypted copy of the private key. When you use the HTTP API or
--   the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
--   it is not Base64-encoded.
[$sel:privateKeyCiphertextBlob:GenerateDataKeyPairWithoutPlaintextResponse'] :: GenerateDataKeyPairWithoutPlaintextResponse -> Maybe Base64

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that
--   encrypted the private key.
[$sel:keyId:GenerateDataKeyPairWithoutPlaintextResponse'] :: GenerateDataKeyPairWithoutPlaintextResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GenerateDataKeyPairWithoutPlaintextResponse'] :: GenerateDataKeyPairWithoutPlaintextResponse -> Int

-- | Create a value of <a>GenerateDataKeyPairWithoutPlaintextResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:publicKey:GenerateDataKeyPairWithoutPlaintextResponse'</a>,
--   <a>generateDataKeyPairWithoutPlaintextResponse_publicKey</a> - The
--   public key (in plaintext).-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:keyPairSpec:GenerateDataKeyPairWithoutPlaintext'</a>,
--   <a>generateDataKeyPairWithoutPlaintextResponse_keyPairSpec</a> - The
--   type of data key pair that was generated.
--   
--   
--   <a>$sel:privateKeyCiphertextBlob:GenerateDataKeyPairWithoutPlaintextResponse'</a>,
--   <a>generateDataKeyPairWithoutPlaintextResponse_privateKeyCiphertextBlob</a>
--   - The encrypted copy of the private key. When you use the HTTP API or
--   the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
--   it is not Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:keyId:GenerateDataKeyPairWithoutPlaintext'</a>,
--   <a>generateDataKeyPairWithoutPlaintextResponse_keyId</a> - The Amazon
--   Resource Name (<a>key ARN</a>) of the KMS key that encrypted the
--   private key.
--   
--   <a>$sel:httpStatus:GenerateDataKeyPairWithoutPlaintextResponse'</a>,
--   <a>generateDataKeyPairWithoutPlaintextResponse_httpStatus</a> - The
--   response's http status code.
newGenerateDataKeyPairWithoutPlaintextResponse :: Int -> GenerateDataKeyPairWithoutPlaintextResponse

-- | The public key (in plaintext).-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
generateDataKeyPairWithoutPlaintextResponse_publicKey :: Lens' GenerateDataKeyPairWithoutPlaintextResponse (Maybe ByteString)

-- | The type of data key pair that was generated.
generateDataKeyPairWithoutPlaintextResponse_keyPairSpec :: Lens' GenerateDataKeyPairWithoutPlaintextResponse (Maybe DataKeyPairSpec)

-- | The encrypted copy of the private key. When you use the HTTP API or
--   the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
--   it is not Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
generateDataKeyPairWithoutPlaintextResponse_privateKeyCiphertextBlob :: Lens' GenerateDataKeyPairWithoutPlaintextResponse (Maybe ByteString)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that
--   encrypted the private key.
generateDataKeyPairWithoutPlaintextResponse_keyId :: Lens' GenerateDataKeyPairWithoutPlaintextResponse (Maybe Text)

-- | The response's http status code.
generateDataKeyPairWithoutPlaintextResponse_httpStatus :: Lens' GenerateDataKeyPairWithoutPlaintextResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintext
instance GHC.Show.Show Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintext
instance GHC.Read.Read Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintext
instance GHC.Classes.Eq Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintext
instance GHC.Generics.Generic Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintextResponse
instance GHC.Show.Show Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintextResponse
instance GHC.Read.Read Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintextResponse
instance GHC.Classes.Eq Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintextResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintext
instance Control.DeepSeq.NFData Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintextResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintext
instance Control.DeepSeq.NFData Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintext
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintext
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintext
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintext
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.GenerateDataKeyPairWithoutPlaintext.GenerateDataKeyPairWithoutPlaintext


-- | Generates a unique asymmetric data key pair. The
--   <tt>GenerateDataKeyPair</tt> operation returns a plaintext public key,
--   a plaintext private key, and a copy of the private key that is
--   encrypted under the symmetric KMS key you specify. You can use the
--   data key pair to perform asymmetric cryptography and implement digital
--   signatures outside of KMS.
--   
--   You can use the public key that <tt>GenerateDataKeyPair</tt> returns
--   to encrypt data or verify a signature outside of KMS. Then, store the
--   encrypted private key with the data. When you are ready to decrypt
--   data or sign a message, you can use the Decrypt operation to decrypt
--   the encrypted private key.
--   
--   To generate a data key pair, you must specify a symmetric KMS key to
--   encrypt the private key in a data key pair. You cannot use an
--   asymmetric KMS key or a KMS key in a custom key store. To get the type
--   and origin of your KMS key, use the DescribeKey operation.
--   
--   Use the <tt>KeyPairSpec</tt> parameter to choose an RSA or Elliptic
--   Curve (ECC) data key pair. KMS recommends that your use ECC key pairs
--   for signing, and use RSA key pairs for either encryption or signing,
--   but not both. However, KMS cannot enforce any restrictions on the use
--   of data key pairs outside of KMS.
--   
--   If you are using the data key pair to encrypt data, or for any
--   operation where you don't immediately need a private key, consider
--   using the GenerateDataKeyPairWithoutPlaintext operation.
--   <tt>GenerateDataKeyPairWithoutPlaintext</tt> returns a plaintext
--   public key and an encrypted private key, but omits the plaintext
--   private key that you need only to decrypt ciphertext or sign a
--   message. Later, when you need to decrypt the data or sign a message,
--   use the Decrypt operation to decrypt the encrypted private key in the
--   data key pair.
--   
--   <tt>GenerateDataKeyPair</tt> returns a unique data key pair for each
--   request. The bytes in the keys are not related to the caller or the
--   KMS key that is used to encrypt the private key. The public key is a
--   DER-encoded X.509 SubjectPublicKeyInfo, as specified in <a>RFC
--   5280</a>. The private key is a DER-encoded PKCS8 PrivateKeyInfo, as
--   specified in <a>RFC 5958</a>.
--   
--   You can use the optional encryption context to add additional security
--   to the encryption operation. If you specify an
--   <tt>EncryptionContext</tt>, you must specify the same encryption
--   context (a case-sensitive exact match) when decrypting the encrypted
--   data key. Otherwise, the request to decrypt fails with an
--   <tt>InvalidCiphertextException</tt>. For more information, see
--   <a>Encryption Context</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: Yes. To perform this operation with a KMS
--   key in a different Amazon Web Services account, specify the key ARN or
--   alias ARN in the value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>: <a>kms:GenerateDataKeyPair</a> (key
--   policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>Decrypt</li>
--   <li>Encrypt</li>
--   <li>GenerateDataKey</li>
--   <li>GenerateDataKeyPairWithoutPlaintext</li>
--   <li>GenerateDataKeyWithoutPlaintext</li>
--   </ul>
module Network.AWS.KMS.GenerateDataKeyPair

-- | <i>See:</i> <a>newGenerateDataKeyPair</a> smart constructor.
data GenerateDataKeyPair
GenerateDataKeyPair' :: Maybe [Text] -> Maybe (HashMap Text Text) -> Text -> DataKeyPairSpec -> GenerateDataKeyPair

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantTokens:GenerateDataKeyPair'] :: GenerateDataKeyPair -> Maybe [Text]

-- | Specifies the encryption context that will be used when encrypting the
--   private key in the data key pair.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:encryptionContext:GenerateDataKeyPair'] :: GenerateDataKeyPair -> Maybe (HashMap Text Text)

-- | Specifies the symmetric KMS key that encrypts the private key in the
--   data key pair. You cannot specify an asymmetric KMS key or a KMS key
--   in a custom key store. To get the type and origin of your KMS key, use
--   the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
[$sel:keyId:GenerateDataKeyPair'] :: GenerateDataKeyPair -> Text

-- | Determines the type of data key pair that is generated.
--   
--   The KMS rule that restricts the use of asymmetric RSA KMS keys to
--   encrypt and decrypt or to sign and verify (but not both), and the rule
--   that permits you to use ECC KMS keys only to sign and verify, are not
--   effective on data key pairs, which are used outside of KMS.
[$sel:keyPairSpec:GenerateDataKeyPair'] :: GenerateDataKeyPair -> DataKeyPairSpec

-- | Create a value of <a>GenerateDataKeyPair</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:GenerateDataKeyPair'</a>,
--   <a>generateDataKeyPair_grantTokens</a> - A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:encryptionContext:GenerateDataKeyPair'</a>,
--   <a>generateDataKeyPair_encryptionContext</a> - Specifies the
--   encryption context that will be used when encrypting the private key
--   in the data key pair.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keyId:GenerateDataKeyPair'</a>,
--   <a>generateDataKeyPair_keyId</a> - Specifies the symmetric KMS key
--   that encrypts the private key in the data key pair. You cannot specify
--   an asymmetric KMS key or a KMS key in a custom key store. To get the
--   type and origin of your KMS key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:keyPairSpec:GenerateDataKeyPair'</a>,
--   <a>generateDataKeyPair_keyPairSpec</a> - Determines the type of data
--   key pair that is generated.
--   
--   The KMS rule that restricts the use of asymmetric RSA KMS keys to
--   encrypt and decrypt or to sign and verify (but not both), and the rule
--   that permits you to use ECC KMS keys only to sign and verify, are not
--   effective on data key pairs, which are used outside of KMS.
newGenerateDataKeyPair :: Text -> DataKeyPairSpec -> GenerateDataKeyPair

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
generateDataKeyPair_grantTokens :: Lens' GenerateDataKeyPair (Maybe [Text])

-- | Specifies the encryption context that will be used when encrypting the
--   private key in the data key pair.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
generateDataKeyPair_encryptionContext :: Lens' GenerateDataKeyPair (Maybe (HashMap Text Text))

-- | Specifies the symmetric KMS key that encrypts the private key in the
--   data key pair. You cannot specify an asymmetric KMS key or a KMS key
--   in a custom key store. To get the type and origin of your KMS key, use
--   the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
generateDataKeyPair_keyId :: Lens' GenerateDataKeyPair Text

-- | Determines the type of data key pair that is generated.
--   
--   The KMS rule that restricts the use of asymmetric RSA KMS keys to
--   encrypt and decrypt or to sign and verify (but not both), and the rule
--   that permits you to use ECC KMS keys only to sign and verify, are not
--   effective on data key pairs, which are used outside of KMS.
generateDataKeyPair_keyPairSpec :: Lens' GenerateDataKeyPair DataKeyPairSpec

-- | <i>See:</i> <a>newGenerateDataKeyPairResponse</a> smart constructor.
data GenerateDataKeyPairResponse
GenerateDataKeyPairResponse' :: Maybe Base64 -> Maybe DataKeyPairSpec -> Maybe Base64 -> Maybe (Sensitive Base64) -> Maybe Text -> Int -> GenerateDataKeyPairResponse

-- | The public key (in plaintext).
[$sel:publicKey:GenerateDataKeyPairResponse'] :: GenerateDataKeyPairResponse -> Maybe Base64

-- | The type of data key pair that was generated.
[$sel:keyPairSpec:GenerateDataKeyPairResponse'] :: GenerateDataKeyPairResponse -> Maybe DataKeyPairSpec

-- | The encrypted copy of the private key. When you use the HTTP API or
--   the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
--   it is not Base64-encoded.
[$sel:privateKeyCiphertextBlob:GenerateDataKeyPairResponse'] :: GenerateDataKeyPairResponse -> Maybe Base64

-- | The plaintext copy of the private key. When you use the HTTP API or
--   the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
--   it is not Base64-encoded.
[$sel:privateKeyPlaintext:GenerateDataKeyPairResponse'] :: GenerateDataKeyPairResponse -> Maybe (Sensitive Base64)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that
--   encrypted the private key.
[$sel:keyId:GenerateDataKeyPairResponse'] :: GenerateDataKeyPairResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GenerateDataKeyPairResponse'] :: GenerateDataKeyPairResponse -> Int

-- | Create a value of <a>GenerateDataKeyPairResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:publicKey:GenerateDataKeyPairResponse'</a>,
--   <a>generateDataKeyPairResponse_publicKey</a> - The public key (in
--   plaintext).-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
--   
--   <a>$sel:keyPairSpec:GenerateDataKeyPair'</a>,
--   <a>generateDataKeyPairResponse_keyPairSpec</a> - The type of data key
--   pair that was generated.
--   
--   <a>$sel:privateKeyCiphertextBlob:GenerateDataKeyPairResponse'</a>,
--   <a>generateDataKeyPairResponse_privateKeyCiphertextBlob</a> - The
--   encrypted copy of the private key. When you use the HTTP API or the
--   Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is
--   not Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:privateKeyPlaintext:GenerateDataKeyPairResponse'</a>,
--   <a>generateDataKeyPairResponse_privateKeyPlaintext</a> - The plaintext
--   copy of the private key. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:keyId:GenerateDataKeyPair'</a>,
--   <a>generateDataKeyPairResponse_keyId</a> - The Amazon Resource Name
--   (<a>key ARN</a>) of the KMS key that encrypted the private key.
--   
--   <a>$sel:httpStatus:GenerateDataKeyPairResponse'</a>,
--   <a>generateDataKeyPairResponse_httpStatus</a> - The response's http
--   status code.
newGenerateDataKeyPairResponse :: Int -> GenerateDataKeyPairResponse

-- | The public key (in plaintext).-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
generateDataKeyPairResponse_publicKey :: Lens' GenerateDataKeyPairResponse (Maybe ByteString)

-- | The type of data key pair that was generated.
generateDataKeyPairResponse_keyPairSpec :: Lens' GenerateDataKeyPairResponse (Maybe DataKeyPairSpec)

-- | The encrypted copy of the private key. When you use the HTTP API or
--   the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
--   it is not Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
generateDataKeyPairResponse_privateKeyCiphertextBlob :: Lens' GenerateDataKeyPairResponse (Maybe ByteString)

-- | The plaintext copy of the private key. When you use the HTTP API or
--   the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
--   it is not Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
generateDataKeyPairResponse_privateKeyPlaintext :: Lens' GenerateDataKeyPairResponse (Maybe ByteString)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that
--   encrypted the private key.
generateDataKeyPairResponse_keyId :: Lens' GenerateDataKeyPairResponse (Maybe Text)

-- | The response's http status code.
generateDataKeyPairResponse_httpStatus :: Lens' GenerateDataKeyPairResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPair
instance GHC.Show.Show Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPair
instance GHC.Read.Read Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPair
instance GHC.Classes.Eq Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPair
instance GHC.Generics.Generic Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPairResponse
instance GHC.Show.Show Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPairResponse
instance GHC.Classes.Eq Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPairResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPair
instance Control.DeepSeq.NFData Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPairResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPair
instance Control.DeepSeq.NFData Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPair
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPair
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPair
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPair
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.GenerateDataKeyPair.GenerateDataKeyPair


-- | Generates a unique symmetric data key for client-side encryption. This
--   operation returns a plaintext copy of the data key and a copy that is
--   encrypted under a KMS key that you specify. You can use the plaintext
--   key to encrypt your data outside of KMS and store the encrypted data
--   key with the encrypted data.
--   
--   <tt>GenerateDataKey</tt> returns a unique data key for each request.
--   The bytes in the plaintext key are not related to the caller or the
--   KMS key.
--   
--   To generate a data key, specify the symmetric KMS key that will be
--   used to encrypt the data key. You cannot use an asymmetric KMS key to
--   generate data keys. To get the type of your KMS key, use the
--   DescribeKey operation. You must also specify the length of the data
--   key. Use either the <tt>KeySpec</tt> or <tt>NumberOfBytes</tt>
--   parameters (but not both). For 128-bit and 256-bit data keys, use the
--   <tt>KeySpec</tt> parameter.
--   
--   To get only an encrypted copy of the data key, use
--   GenerateDataKeyWithoutPlaintext. To generate an asymmetric data key
--   pair, use the GenerateDataKeyPair or
--   GenerateDataKeyPairWithoutPlaintext operation. To get a
--   cryptographically secure random byte string, use GenerateRandom.
--   
--   You can use the optional encryption context to add additional security
--   to the encryption operation. If you specify an
--   <tt>EncryptionContext</tt>, you must specify the same encryption
--   context (a case-sensitive exact match) when decrypting the encrypted
--   data key. Otherwise, the request to decrypt fails with an
--   <tt>InvalidCiphertextException</tt>. For more information, see
--   <a>Encryption Context</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   Applications in Amazon Web Services Nitro Enclaves can call this
--   operation by using the <a>Amazon Web Services Nitro Enclaves
--   Development Kit</a>. For information about the supporting parameters,
--   see <a>How Amazon Web Services Nitro Enclaves use KMS</a> in the
--   <i>Key Management Service Developer Guide</i>.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>How to use your data key</b>
--   
--   We recommend that you use the following pattern to encrypt data
--   locally in your application. You can write your own code or use a
--   client-side encryption library, such as the <a>Amazon Web Services
--   Encryption SDK</a>, the <a>Amazon DynamoDB Encryption Client</a>, or
--   <a>Amazon S3 client-side encryption</a> to do these tasks for you.
--   
--   To encrypt data outside of KMS:
--   
--   <ol>
--   <li>Use the <tt>GenerateDataKey</tt> operation to get a data key.</li>
--   <li>Use the plaintext data key (in the <tt>Plaintext</tt> field of the
--   response) to encrypt your data outside of KMS. Then erase the
--   plaintext data key from memory.</li>
--   <li>Store the encrypted data key (in the <tt>CiphertextBlob</tt> field
--   of the response) with the encrypted data.</li>
--   </ol>
--   
--   To decrypt data outside of KMS:
--   
--   <ol>
--   <li>Use the Decrypt operation to decrypt the encrypted data key. The
--   operation returns a plaintext copy of the data key.</li>
--   <li>Use the plaintext data key to decrypt data outside of KMS, then
--   erase the plaintext data key from memory.</li>
--   </ol>
--   
--   <b>Cross-account use</b>: Yes. To perform this operation with a KMS
--   key in a different Amazon Web Services account, specify the key ARN or
--   alias ARN in the value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>: <a>kms:GenerateDataKey</a> (key policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>Decrypt</li>
--   <li>Encrypt</li>
--   <li>GenerateDataKeyPair</li>
--   <li>GenerateDataKeyPairWithoutPlaintext</li>
--   <li>GenerateDataKeyWithoutPlaintext</li>
--   </ul>
module Network.AWS.KMS.GenerateDataKey

-- | <i>See:</i> <a>newGenerateDataKey</a> smart constructor.
data GenerateDataKey
GenerateDataKey' :: Maybe [Text] -> Maybe Natural -> Maybe (HashMap Text Text) -> Maybe DataKeySpec -> Text -> GenerateDataKey

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantTokens:GenerateDataKey'] :: GenerateDataKey -> Maybe [Text]

-- | Specifies the length of the data key in bytes. For example, use the
--   value 64 to generate a 512-bit data key (64 bytes is 512 bits). For
--   128-bit (16-byte) and 256-bit (32-byte) data keys, use the
--   <tt>KeySpec</tt> parameter.
--   
--   You must specify either the <tt>KeySpec</tt> or the
--   <tt>NumberOfBytes</tt> parameter (but not both) in every
--   <tt>GenerateDataKey</tt> request.
[$sel:numberOfBytes:GenerateDataKey'] :: GenerateDataKey -> Maybe Natural

-- | Specifies the encryption context that will be used when encrypting the
--   data key.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:encryptionContext:GenerateDataKey'] :: GenerateDataKey -> Maybe (HashMap Text Text)

-- | Specifies the length of the data key. Use <tt>AES_128</tt> to generate
--   a 128-bit symmetric key, or <tt>AES_256</tt> to generate a 256-bit
--   symmetric key.
--   
--   You must specify either the <tt>KeySpec</tt> or the
--   <tt>NumberOfBytes</tt> parameter (but not both) in every
--   <tt>GenerateDataKey</tt> request.
[$sel:keySpec:GenerateDataKey'] :: GenerateDataKey -> Maybe DataKeySpec

-- | Identifies the symmetric KMS key that encrypts the data key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
[$sel:keyId:GenerateDataKey'] :: GenerateDataKey -> Text

-- | Create a value of <a>GenerateDataKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:GenerateDataKey'</a>,
--   <a>generateDataKey_grantTokens</a> - A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:numberOfBytes:GenerateDataKey'</a>,
--   <a>generateDataKey_numberOfBytes</a> - Specifies the length of the
--   data key in bytes. For example, use the value 64 to generate a 512-bit
--   data key (64 bytes is 512 bits). For 128-bit (16-byte) and 256-bit
--   (32-byte) data keys, use the <tt>KeySpec</tt> parameter.
--   
--   You must specify either the <tt>KeySpec</tt> or the
--   <tt>NumberOfBytes</tt> parameter (but not both) in every
--   <tt>GenerateDataKey</tt> request.
--   
--   <a>$sel:encryptionContext:GenerateDataKey'</a>,
--   <a>generateDataKey_encryptionContext</a> - Specifies the encryption
--   context that will be used when encrypting the data key.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keySpec:GenerateDataKey'</a>, <a>generateDataKey_keySpec</a> -
--   Specifies the length of the data key. Use <tt>AES_128</tt> to generate
--   a 128-bit symmetric key, or <tt>AES_256</tt> to generate a 256-bit
--   symmetric key.
--   
--   You must specify either the <tt>KeySpec</tt> or the
--   <tt>NumberOfBytes</tt> parameter (but not both) in every
--   <tt>GenerateDataKey</tt> request.
--   
--   <a>$sel:keyId:GenerateDataKey'</a>, <a>generateDataKey_keyId</a> -
--   Identifies the symmetric KMS key that encrypts the data key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
newGenerateDataKey :: Text -> GenerateDataKey

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
generateDataKey_grantTokens :: Lens' GenerateDataKey (Maybe [Text])

-- | Specifies the length of the data key in bytes. For example, use the
--   value 64 to generate a 512-bit data key (64 bytes is 512 bits). For
--   128-bit (16-byte) and 256-bit (32-byte) data keys, use the
--   <tt>KeySpec</tt> parameter.
--   
--   You must specify either the <tt>KeySpec</tt> or the
--   <tt>NumberOfBytes</tt> parameter (but not both) in every
--   <tt>GenerateDataKey</tt> request.
generateDataKey_numberOfBytes :: Lens' GenerateDataKey (Maybe Natural)

-- | Specifies the encryption context that will be used when encrypting the
--   data key.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
generateDataKey_encryptionContext :: Lens' GenerateDataKey (Maybe (HashMap Text Text))

-- | Specifies the length of the data key. Use <tt>AES_128</tt> to generate
--   a 128-bit symmetric key, or <tt>AES_256</tt> to generate a 256-bit
--   symmetric key.
--   
--   You must specify either the <tt>KeySpec</tt> or the
--   <tt>NumberOfBytes</tt> parameter (but not both) in every
--   <tt>GenerateDataKey</tt> request.
generateDataKey_keySpec :: Lens' GenerateDataKey (Maybe DataKeySpec)

-- | Identifies the symmetric KMS key that encrypts the data key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
generateDataKey_keyId :: Lens' GenerateDataKey Text

-- | <i>See:</i> <a>newGenerateDataKeyResponse</a> smart constructor.
data GenerateDataKeyResponse
GenerateDataKeyResponse' :: Int -> Text -> Sensitive Base64 -> Base64 -> GenerateDataKeyResponse

-- | The response's http status code.
[$sel:httpStatus:GenerateDataKeyResponse'] :: GenerateDataKeyResponse -> Int

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that
--   encrypted the data key.
[$sel:keyId:GenerateDataKeyResponse'] :: GenerateDataKeyResponse -> Text

-- | The plaintext data key. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded. Use this data key to encrypt your data outside of KMS.
--   Then, remove it from memory as soon as possible.
[$sel:plaintext:GenerateDataKeyResponse'] :: GenerateDataKeyResponse -> Sensitive Base64

-- | The encrypted copy of the data key. When you use the HTTP API or the
--   Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is
--   not Base64-encoded.
[$sel:ciphertextBlob:GenerateDataKeyResponse'] :: GenerateDataKeyResponse -> Base64

-- | Create a value of <a>GenerateDataKeyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GenerateDataKeyResponse'</a>,
--   <a>generateDataKeyResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:keyId:GenerateDataKey'</a>,
--   <a>generateDataKeyResponse_keyId</a> - The Amazon Resource Name
--   (<a>key ARN</a>) of the KMS key that encrypted the data key.
--   
--   <a>$sel:plaintext:GenerateDataKeyResponse'</a>,
--   <a>generateDataKeyResponse_plaintext</a> - The plaintext data key.
--   When you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded. Use this data key
--   to encrypt your data outside of KMS. Then, remove it from memory as
--   soon as possible.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:ciphertextBlob:GenerateDataKeyResponse'</a>,
--   <a>generateDataKeyResponse_ciphertextBlob</a> - The encrypted copy of
--   the data key. When you use the HTTP API or the Amazon Web Services
--   CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
newGenerateDataKeyResponse :: Int -> Text -> ByteString -> ByteString -> GenerateDataKeyResponse

-- | The response's http status code.
generateDataKeyResponse_httpStatus :: Lens' GenerateDataKeyResponse Int

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that
--   encrypted the data key.
generateDataKeyResponse_keyId :: Lens' GenerateDataKeyResponse Text

-- | The plaintext data key. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded. Use this data key to encrypt your data outside of KMS.
--   Then, remove it from memory as soon as possible.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
generateDataKeyResponse_plaintext :: Lens' GenerateDataKeyResponse ByteString

-- | The encrypted copy of the data key. When you use the HTTP API or the
--   Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is
--   not Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
generateDataKeyResponse_ciphertextBlob :: Lens' GenerateDataKeyResponse ByteString
instance GHC.Generics.Generic Network.AWS.KMS.GenerateDataKey.GenerateDataKey
instance GHC.Show.Show Network.AWS.KMS.GenerateDataKey.GenerateDataKey
instance GHC.Read.Read Network.AWS.KMS.GenerateDataKey.GenerateDataKey
instance GHC.Classes.Eq Network.AWS.KMS.GenerateDataKey.GenerateDataKey
instance GHC.Generics.Generic Network.AWS.KMS.GenerateDataKey.GenerateDataKeyResponse
instance GHC.Show.Show Network.AWS.KMS.GenerateDataKey.GenerateDataKeyResponse
instance GHC.Classes.Eq Network.AWS.KMS.GenerateDataKey.GenerateDataKeyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.GenerateDataKey.GenerateDataKey
instance Control.DeepSeq.NFData Network.AWS.KMS.GenerateDataKey.GenerateDataKeyResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.GenerateDataKey.GenerateDataKey
instance Control.DeepSeq.NFData Network.AWS.KMS.GenerateDataKey.GenerateDataKey
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.GenerateDataKey.GenerateDataKey
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.GenerateDataKey.GenerateDataKey
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.GenerateDataKey.GenerateDataKey
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.GenerateDataKey.GenerateDataKey


-- | Encrypts plaintext into ciphertext by using a KMS key. The
--   <tt>Encrypt</tt> operation has two primary use cases:
--   
--   <ul>
--   <li>You can encrypt small amounts of arbitrary data, such as a
--   personal identifier or database password, or other sensitive
--   information.</li>
--   <li>You can use the <tt>Encrypt</tt> operation to move encrypted data
--   from one Amazon Web Services Region to another. For example, in Region
--   A, generate a data key and use the plaintext key to encrypt your data.
--   Then, in Region A, use the <tt>Encrypt</tt> operation to encrypt the
--   plaintext data key under a KMS key in Region B. Now, you can move the
--   encrypted data and the encrypted data key to Region B. When necessary,
--   you can decrypt the encrypted data key and the encrypted data entirely
--   within in Region B.</li>
--   </ul>
--   
--   You don't need to use the <tt>Encrypt</tt> operation to encrypt a data
--   key. The GenerateDataKey and GenerateDataKeyPair operations return a
--   plaintext data key and an encrypted copy of that data key.
--   
--   When you encrypt data, you must specify a symmetric or asymmetric KMS
--   key to use in the encryption operation. The KMS key must have a
--   <tt>KeyUsage</tt> value of <tt>ENCRYPT_DECRYPT.</tt> To find the
--   <tt>KeyUsage</tt> of a KMS key, use the DescribeKey operation.
--   
--   If you use a symmetric KMS key, you can use an encryption context to
--   add additional security to your encryption operation. If you specify
--   an <tt>EncryptionContext</tt> when encrypting data, you must specify
--   the same encryption context (a case-sensitive exact match) when
--   decrypting the data. Otherwise, the request to decrypt fails with an
--   <tt>InvalidCiphertextException</tt>. For more information, see
--   <a>Encryption Context</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   If you specify an asymmetric KMS key, you must also specify the
--   encryption algorithm. The algorithm must be compatible with the KMS
--   key type.
--   
--   When you use an asymmetric KMS key to encrypt or reencrypt data, be
--   sure to record the KMS key and encryption algorithm that you choose.
--   You will be required to provide the same KMS key and encryption
--   algorithm when you decrypt the data. If the KMS key and algorithm do
--   not match the values used to encrypt the data, the decrypt operation
--   fails.
--   
--   You are not required to supply the key ID and encryption algorithm
--   when you decrypt with symmetric KMS keys because KMS stores this
--   information in the ciphertext blob. KMS cannot store metadata in
--   ciphertext generated with asymmetric keys. The standard format for
--   asymmetric key ciphertext does not include configurable fields.
--   
--   The maximum size of the data that you can encrypt varies with the type
--   of KMS key and the encryption algorithm that you choose.
--   
--   <ul>
--   <li>Symmetric KMS keys<ul><li><tt>SYMMETRIC_DEFAULT</tt>: 4096
--   bytes</li></ul></li>
--   <li><pre>RSA_2048</pre><ul><li><tt>RSAES_OAEP_SHA_1</tt>: 214
--   bytes</li><li><tt>RSAES_OAEP_SHA_256</tt>: 190 bytes</li></ul></li>
--   <li><pre>RSA_3072</pre><ul><li><tt>RSAES_OAEP_SHA_1</tt>: 342
--   bytes</li><li><tt>RSAES_OAEP_SHA_256</tt>: 318 bytes</li></ul></li>
--   <li><pre>RSA_4096</pre><ul><li><tt>RSAES_OAEP_SHA_1</tt>: 470
--   bytes</li><li><tt>RSAES_OAEP_SHA_256</tt>: 446 bytes</li></ul></li>
--   </ul>
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: Yes. To perform this operation with a KMS
--   key in a different Amazon Web Services account, specify the key ARN or
--   alias ARN in the value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>: <a>kms:Encrypt</a> (key policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>Decrypt</li>
--   <li>GenerateDataKey</li>
--   <li>GenerateDataKeyPair</li>
--   </ul>
module Network.AWS.KMS.Encrypt

-- | <i>See:</i> <a>newEncrypt</a> smart constructor.
data Encrypt
Encrypt' :: Maybe [Text] -> Maybe EncryptionAlgorithmSpec -> Maybe (HashMap Text Text) -> Text -> Sensitive Base64 -> Encrypt

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantTokens:Encrypt'] :: Encrypt -> Maybe [Text]

-- | Specifies the encryption algorithm that KMS will use to encrypt the
--   plaintext message. The algorithm must be compatible with the KMS key
--   that you specify.
--   
--   This parameter is required only for asymmetric KMS keys. The default
--   value, <tt>SYMMETRIC_DEFAULT</tt>, is the algorithm used for symmetric
--   KMS keys. If you are using an asymmetric KMS key, we recommend
--   RSAES_OAEP_SHA_256.
[$sel:encryptionAlgorithm:Encrypt'] :: Encrypt -> Maybe EncryptionAlgorithmSpec

-- | Specifies the encryption context that will be used to encrypt the
--   data. An encryption context is valid only for <a>cryptographic
--   operations</a> with a symmetric KMS key. The standard asymmetric
--   encryption algorithms that KMS uses do not support an encryption
--   context.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:encryptionContext:Encrypt'] :: Encrypt -> Maybe (HashMap Text Text)

-- | Identifies the KMS key to use in the encryption operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
[$sel:keyId:Encrypt'] :: Encrypt -> Text

-- | Data to be encrypted.
[$sel:plaintext:Encrypt'] :: Encrypt -> Sensitive Base64

-- | Create a value of <a>Encrypt</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:Encrypt'</a>, <a>encrypt_grantTokens</a> - A list
--   of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:encryptionAlgorithm:Encrypt'</a>,
--   <a>encrypt_encryptionAlgorithm</a> - Specifies the encryption
--   algorithm that KMS will use to encrypt the plaintext message. The
--   algorithm must be compatible with the KMS key that you specify.
--   
--   This parameter is required only for asymmetric KMS keys. The default
--   value, <tt>SYMMETRIC_DEFAULT</tt>, is the algorithm used for symmetric
--   KMS keys. If you are using an asymmetric KMS key, we recommend
--   RSAES_OAEP_SHA_256.
--   
--   <a>$sel:encryptionContext:Encrypt'</a>,
--   <a>encrypt_encryptionContext</a> - Specifies the encryption context
--   that will be used to encrypt the data. An encryption context is valid
--   only for <a>cryptographic operations</a> with a symmetric KMS key. The
--   standard asymmetric encryption algorithms that KMS uses do not support
--   an encryption context.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keyId:Encrypt'</a>, <a>encrypt_keyId</a> - Identifies the KMS
--   key to use in the encryption operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:plaintext:Encrypt'</a>, <a>encrypt_plaintext</a> - Data to be
--   encrypted.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newEncrypt :: Text -> ByteString -> Encrypt

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
encrypt_grantTokens :: Lens' Encrypt (Maybe [Text])

-- | Specifies the encryption algorithm that KMS will use to encrypt the
--   plaintext message. The algorithm must be compatible with the KMS key
--   that you specify.
--   
--   This parameter is required only for asymmetric KMS keys. The default
--   value, <tt>SYMMETRIC_DEFAULT</tt>, is the algorithm used for symmetric
--   KMS keys. If you are using an asymmetric KMS key, we recommend
--   RSAES_OAEP_SHA_256.
encrypt_encryptionAlgorithm :: Lens' Encrypt (Maybe EncryptionAlgorithmSpec)

-- | Specifies the encryption context that will be used to encrypt the
--   data. An encryption context is valid only for <a>cryptographic
--   operations</a> with a symmetric KMS key. The standard asymmetric
--   encryption algorithms that KMS uses do not support an encryption
--   context.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
encrypt_encryptionContext :: Lens' Encrypt (Maybe (HashMap Text Text))

-- | Identifies the KMS key to use in the encryption operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
encrypt_keyId :: Lens' Encrypt Text

-- | Data to be encrypted.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
encrypt_plaintext :: Lens' Encrypt ByteString

-- | <i>See:</i> <a>newEncryptResponse</a> smart constructor.
data EncryptResponse
EncryptResponse' :: Maybe EncryptionAlgorithmSpec -> Maybe Base64 -> Maybe Text -> Int -> EncryptResponse

-- | The encryption algorithm that was used to encrypt the plaintext.
[$sel:encryptionAlgorithm:EncryptResponse'] :: EncryptResponse -> Maybe EncryptionAlgorithmSpec

-- | The encrypted plaintext. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.
[$sel:ciphertextBlob:EncryptResponse'] :: EncryptResponse -> Maybe Base64

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that was used
--   to encrypt the plaintext.
[$sel:keyId:EncryptResponse'] :: EncryptResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:EncryptResponse'] :: EncryptResponse -> Int

-- | Create a value of <a>EncryptResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionAlgorithm:Encrypt'</a>,
--   <a>encryptResponse_encryptionAlgorithm</a> - The encryption algorithm
--   that was used to encrypt the plaintext.
--   
--   <a>$sel:ciphertextBlob:EncryptResponse'</a>,
--   <a>encryptResponse_ciphertextBlob</a> - The encrypted plaintext. When
--   you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:keyId:Encrypt'</a>, <a>encryptResponse_keyId</a> - The Amazon
--   Resource Name (<a>key ARN</a>) of the KMS key that was used to encrypt
--   the plaintext.
--   
--   <a>$sel:httpStatus:EncryptResponse'</a>,
--   <a>encryptResponse_httpStatus</a> - The response's http status code.
newEncryptResponse :: Int -> EncryptResponse

-- | The encryption algorithm that was used to encrypt the plaintext.
encryptResponse_encryptionAlgorithm :: Lens' EncryptResponse (Maybe EncryptionAlgorithmSpec)

-- | The encrypted plaintext. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
encryptResponse_ciphertextBlob :: Lens' EncryptResponse (Maybe ByteString)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that was used
--   to encrypt the plaintext.
encryptResponse_keyId :: Lens' EncryptResponse (Maybe Text)

-- | The response's http status code.
encryptResponse_httpStatus :: Lens' EncryptResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.Encrypt.Encrypt
instance GHC.Show.Show Network.AWS.KMS.Encrypt.Encrypt
instance GHC.Classes.Eq Network.AWS.KMS.Encrypt.Encrypt
instance GHC.Generics.Generic Network.AWS.KMS.Encrypt.EncryptResponse
instance GHC.Show.Show Network.AWS.KMS.Encrypt.EncryptResponse
instance GHC.Read.Read Network.AWS.KMS.Encrypt.EncryptResponse
instance GHC.Classes.Eq Network.AWS.KMS.Encrypt.EncryptResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.Encrypt.Encrypt
instance Control.DeepSeq.NFData Network.AWS.KMS.Encrypt.EncryptResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Encrypt.Encrypt
instance Control.DeepSeq.NFData Network.AWS.KMS.Encrypt.Encrypt
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.Encrypt.Encrypt
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Encrypt.Encrypt
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.Encrypt.Encrypt
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Encrypt.Encrypt


-- | Enables <a>automatic rotation of the key material</a> for the
--   specified symmetric KMS key.
--   
--   You cannot enable automatic rotation of <a>asymmetric KMS keys</a>,
--   KMS keys with <a>imported key material</a>, or KMS keys in a <a>custom
--   key store</a>. To enable or disable automatic rotation of a set of
--   related <a>multi-Region keys</a>, set the property on the primary key.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:EnableKeyRotation</a> (key policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>DisableKeyRotation</li>
--   <li>GetKeyRotationStatus</li>
--   </ul>
module Network.AWS.KMS.EnableKeyRotation

-- | <i>See:</i> <a>newEnableKeyRotation</a> smart constructor.
data EnableKeyRotation
EnableKeyRotation' :: Text -> EnableKeyRotation

-- | Identifies a symmetric KMS key. You cannot enable automatic rotation
--   of <a>asymmetric KMS keys</a>, KMS keys with <a>imported key
--   material</a>, or KMS keys in a <a>custom key store</a>. To enable or
--   disable automatic rotation of a set of related <a>multi-Region
--   keys</a>, set the property on the primary key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:EnableKeyRotation'] :: EnableKeyRotation -> Text

-- | Create a value of <a>EnableKeyRotation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:EnableKeyRotation'</a>, <a>enableKeyRotation_keyId</a> -
--   Identifies a symmetric KMS key. You cannot enable automatic rotation
--   of <a>asymmetric KMS keys</a>, KMS keys with <a>imported key
--   material</a>, or KMS keys in a <a>custom key store</a>. To enable or
--   disable automatic rotation of a set of related <a>multi-Region
--   keys</a>, set the property on the primary key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newEnableKeyRotation :: Text -> EnableKeyRotation

-- | Identifies a symmetric KMS key. You cannot enable automatic rotation
--   of <a>asymmetric KMS keys</a>, KMS keys with <a>imported key
--   material</a>, or KMS keys in a <a>custom key store</a>. To enable or
--   disable automatic rotation of a set of related <a>multi-Region
--   keys</a>, set the property on the primary key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
enableKeyRotation_keyId :: Lens' EnableKeyRotation Text

-- | <i>See:</i> <a>newEnableKeyRotationResponse</a> smart constructor.
data EnableKeyRotationResponse
EnableKeyRotationResponse' :: EnableKeyRotationResponse

-- | Create a value of <a>EnableKeyRotationResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newEnableKeyRotationResponse :: EnableKeyRotationResponse
instance GHC.Generics.Generic Network.AWS.KMS.EnableKeyRotation.EnableKeyRotation
instance GHC.Show.Show Network.AWS.KMS.EnableKeyRotation.EnableKeyRotation
instance GHC.Read.Read Network.AWS.KMS.EnableKeyRotation.EnableKeyRotation
instance GHC.Classes.Eq Network.AWS.KMS.EnableKeyRotation.EnableKeyRotation
instance GHC.Generics.Generic Network.AWS.KMS.EnableKeyRotation.EnableKeyRotationResponse
instance GHC.Show.Show Network.AWS.KMS.EnableKeyRotation.EnableKeyRotationResponse
instance GHC.Read.Read Network.AWS.KMS.EnableKeyRotation.EnableKeyRotationResponse
instance GHC.Classes.Eq Network.AWS.KMS.EnableKeyRotation.EnableKeyRotationResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.EnableKeyRotation.EnableKeyRotation
instance Control.DeepSeq.NFData Network.AWS.KMS.EnableKeyRotation.EnableKeyRotationResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.EnableKeyRotation.EnableKeyRotation
instance Control.DeepSeq.NFData Network.AWS.KMS.EnableKeyRotation.EnableKeyRotation
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.EnableKeyRotation.EnableKeyRotation
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.EnableKeyRotation.EnableKeyRotation
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.EnableKeyRotation.EnableKeyRotation
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.EnableKeyRotation.EnableKeyRotation


-- | Sets the key state of a KMS key to enabled. This allows you to use the
--   KMS key for <a>cryptographic operations</a>.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:EnableKey</a> (key policy)
--   
--   <b>Related operations</b>: DisableKey
module Network.AWS.KMS.EnableKey

-- | <i>See:</i> <a>newEnableKey</a> smart constructor.
data EnableKey
EnableKey' :: Text -> EnableKey

-- | Identifies the KMS key to enable.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:EnableKey'] :: EnableKey -> Text

-- | Create a value of <a>EnableKey</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:EnableKey'</a>, <a>enableKey_keyId</a> - Identifies the
--   KMS key to enable.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newEnableKey :: Text -> EnableKey

-- | Identifies the KMS key to enable.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
enableKey_keyId :: Lens' EnableKey Text

-- | <i>See:</i> <a>newEnableKeyResponse</a> smart constructor.
data EnableKeyResponse
EnableKeyResponse' :: EnableKeyResponse

-- | Create a value of <a>EnableKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newEnableKeyResponse :: EnableKeyResponse
instance GHC.Generics.Generic Network.AWS.KMS.EnableKey.EnableKey
instance GHC.Show.Show Network.AWS.KMS.EnableKey.EnableKey
instance GHC.Read.Read Network.AWS.KMS.EnableKey.EnableKey
instance GHC.Classes.Eq Network.AWS.KMS.EnableKey.EnableKey
instance GHC.Generics.Generic Network.AWS.KMS.EnableKey.EnableKeyResponse
instance GHC.Show.Show Network.AWS.KMS.EnableKey.EnableKeyResponse
instance GHC.Read.Read Network.AWS.KMS.EnableKey.EnableKeyResponse
instance GHC.Classes.Eq Network.AWS.KMS.EnableKey.EnableKeyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.EnableKey.EnableKey
instance Control.DeepSeq.NFData Network.AWS.KMS.EnableKey.EnableKeyResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.EnableKey.EnableKey
instance Control.DeepSeq.NFData Network.AWS.KMS.EnableKey.EnableKey
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.EnableKey.EnableKey
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.EnableKey.EnableKey
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.EnableKey.EnableKey
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.EnableKey.EnableKey


-- | Disconnects the <a>custom key store</a> from its associated CloudHSM
--   cluster. While a custom key store is disconnected, you can manage the
--   custom key store and its KMS keys, but you cannot create or use KMS
--   keys in the custom key store. You can reconnect the custom key store
--   at any time.
--   
--   While a custom key store is disconnected, all attempts to create KMS
--   keys in the custom key store or to use existing KMS keys in
--   <a>cryptographic operations</a> will fail. This action can prevent
--   users from storing and accessing sensitive data.
--   
--   To find the connection state of a custom key store, use the
--   DescribeCustomKeyStores operation. To reconnect a custom key store,
--   use the ConnectCustomKeyStore operation.
--   
--   If the operation succeeds, it returns a JSON object with no
--   properties.
--   
--   This operation is part of the <a>Custom Key Store feature</a> feature
--   in KMS, which combines the convenience and extensive integration of
--   KMS with the isolation and control of a single-tenant key store.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   custom key store in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:DisconnectCustomKeyStore</a> (IAM
--   policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>ConnectCustomKeyStore</li>
--   <li>CreateCustomKeyStore</li>
--   <li>DeleteCustomKeyStore</li>
--   <li>DescribeCustomKeyStores</li>
--   <li>UpdateCustomKeyStore</li>
--   </ul>
module Network.AWS.KMS.DisconnectCustomKeyStore

-- | <i>See:</i> <a>newDisconnectCustomKeyStore</a> smart constructor.
data DisconnectCustomKeyStore
DisconnectCustomKeyStore' :: Text -> DisconnectCustomKeyStore

-- | Enter the ID of the custom key store you want to disconnect. To find
--   the ID of a custom key store, use the DescribeCustomKeyStores
--   operation.
[$sel:customKeyStoreId:DisconnectCustomKeyStore'] :: DisconnectCustomKeyStore -> Text

-- | Create a value of <a>DisconnectCustomKeyStore</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreId:DisconnectCustomKeyStore'</a>,
--   <a>disconnectCustomKeyStore_customKeyStoreId</a> - Enter the ID of the
--   custom key store you want to disconnect. To find the ID of a custom
--   key store, use the DescribeCustomKeyStores operation.
newDisconnectCustomKeyStore :: Text -> DisconnectCustomKeyStore

-- | Enter the ID of the custom key store you want to disconnect. To find
--   the ID of a custom key store, use the DescribeCustomKeyStores
--   operation.
disconnectCustomKeyStore_customKeyStoreId :: Lens' DisconnectCustomKeyStore Text

-- | <i>See:</i> <a>newDisconnectCustomKeyStoreResponse</a> smart
--   constructor.
data DisconnectCustomKeyStoreResponse
DisconnectCustomKeyStoreResponse' :: Int -> DisconnectCustomKeyStoreResponse

-- | The response's http status code.
[$sel:httpStatus:DisconnectCustomKeyStoreResponse'] :: DisconnectCustomKeyStoreResponse -> Int

-- | Create a value of <a>DisconnectCustomKeyStoreResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DisconnectCustomKeyStoreResponse'</a>,
--   <a>disconnectCustomKeyStoreResponse_httpStatus</a> - The response's
--   http status code.
newDisconnectCustomKeyStoreResponse :: Int -> DisconnectCustomKeyStoreResponse

-- | The response's http status code.
disconnectCustomKeyStoreResponse_httpStatus :: Lens' DisconnectCustomKeyStoreResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStore
instance GHC.Show.Show Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStore
instance GHC.Read.Read Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStore
instance GHC.Classes.Eq Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStore
instance GHC.Generics.Generic Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStoreResponse
instance GHC.Show.Show Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStoreResponse
instance GHC.Read.Read Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStoreResponse
instance GHC.Classes.Eq Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStoreResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStore
instance Control.DeepSeq.NFData Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStoreResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStore
instance Control.DeepSeq.NFData Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStore
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStore
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStore
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStore
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.DisconnectCustomKeyStore.DisconnectCustomKeyStore


-- | Disables <a>automatic rotation of the key material</a> for the
--   specified symmetric KMS key.
--   
--   You cannot enable automatic rotation of <a>asymmetric KMS keys</a>,
--   KMS keys with <a>imported key material</a>, or KMS keys in a <a>custom
--   key store</a>. To enable or disable automatic rotation of a set of
--   related <a>multi-Region keys</a>, set the property on the primary key.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:DisableKeyRotation</a> (key
--   policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>EnableKeyRotation</li>
--   <li>GetKeyRotationStatus</li>
--   </ul>
module Network.AWS.KMS.DisableKeyRotation

-- | <i>See:</i> <a>newDisableKeyRotation</a> smart constructor.
data DisableKeyRotation
DisableKeyRotation' :: Text -> DisableKeyRotation

-- | Identifies a symmetric KMS key. You cannot enable or disable automatic
--   rotation of <a>asymmetric KMS keys</a>, KMS keys with <a>imported key
--   material</a>, or KMS keys in a <a>custom key store</a>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:DisableKeyRotation'] :: DisableKeyRotation -> Text

-- | Create a value of <a>DisableKeyRotation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:DisableKeyRotation'</a>, <a>disableKeyRotation_keyId</a>
--   - Identifies a symmetric KMS key. You cannot enable or disable
--   automatic rotation of <a>asymmetric KMS keys</a>, KMS keys with
--   <a>imported key material</a>, or KMS keys in a <a>custom key
--   store</a>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newDisableKeyRotation :: Text -> DisableKeyRotation

-- | Identifies a symmetric KMS key. You cannot enable or disable automatic
--   rotation of <a>asymmetric KMS keys</a>, KMS keys with <a>imported key
--   material</a>, or KMS keys in a <a>custom key store</a>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
disableKeyRotation_keyId :: Lens' DisableKeyRotation Text

-- | <i>See:</i> <a>newDisableKeyRotationResponse</a> smart constructor.
data DisableKeyRotationResponse
DisableKeyRotationResponse' :: DisableKeyRotationResponse

-- | Create a value of <a>DisableKeyRotationResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDisableKeyRotationResponse :: DisableKeyRotationResponse
instance GHC.Generics.Generic Network.AWS.KMS.DisableKeyRotation.DisableKeyRotation
instance GHC.Show.Show Network.AWS.KMS.DisableKeyRotation.DisableKeyRotation
instance GHC.Read.Read Network.AWS.KMS.DisableKeyRotation.DisableKeyRotation
instance GHC.Classes.Eq Network.AWS.KMS.DisableKeyRotation.DisableKeyRotation
instance GHC.Generics.Generic Network.AWS.KMS.DisableKeyRotation.DisableKeyRotationResponse
instance GHC.Show.Show Network.AWS.KMS.DisableKeyRotation.DisableKeyRotationResponse
instance GHC.Read.Read Network.AWS.KMS.DisableKeyRotation.DisableKeyRotationResponse
instance GHC.Classes.Eq Network.AWS.KMS.DisableKeyRotation.DisableKeyRotationResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.DisableKeyRotation.DisableKeyRotation
instance Control.DeepSeq.NFData Network.AWS.KMS.DisableKeyRotation.DisableKeyRotationResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.DisableKeyRotation.DisableKeyRotation
instance Control.DeepSeq.NFData Network.AWS.KMS.DisableKeyRotation.DisableKeyRotation
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.DisableKeyRotation.DisableKeyRotation
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.DisableKeyRotation.DisableKeyRotation
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.DisableKeyRotation.DisableKeyRotation
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.DisableKeyRotation.DisableKeyRotation


-- | Sets the state of a KMS key to disabled. This change temporarily
--   prevents use of the KMS key for <a>cryptographic operations</a>.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the /<i>Key Management
--   Service Developer Guide</i>/ .
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:DisableKey</a> (key policy)
--   
--   <b>Related operations</b>: EnableKey
module Network.AWS.KMS.DisableKey

-- | <i>See:</i> <a>newDisableKey</a> smart constructor.
data DisableKey
DisableKey' :: Text -> DisableKey

-- | Identifies the KMS key to disable.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:DisableKey'] :: DisableKey -> Text

-- | Create a value of <a>DisableKey</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:DisableKey'</a>, <a>disableKey_keyId</a> - Identifies
--   the KMS key to disable.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newDisableKey :: Text -> DisableKey

-- | Identifies the KMS key to disable.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
disableKey_keyId :: Lens' DisableKey Text

-- | <i>See:</i> <a>newDisableKeyResponse</a> smart constructor.
data DisableKeyResponse
DisableKeyResponse' :: DisableKeyResponse

-- | Create a value of <a>DisableKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDisableKeyResponse :: DisableKeyResponse
instance GHC.Generics.Generic Network.AWS.KMS.DisableKey.DisableKey
instance GHC.Show.Show Network.AWS.KMS.DisableKey.DisableKey
instance GHC.Read.Read Network.AWS.KMS.DisableKey.DisableKey
instance GHC.Classes.Eq Network.AWS.KMS.DisableKey.DisableKey
instance GHC.Generics.Generic Network.AWS.KMS.DisableKey.DisableKeyResponse
instance GHC.Show.Show Network.AWS.KMS.DisableKey.DisableKeyResponse
instance GHC.Read.Read Network.AWS.KMS.DisableKey.DisableKeyResponse
instance GHC.Classes.Eq Network.AWS.KMS.DisableKey.DisableKeyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.DisableKey.DisableKey
instance Control.DeepSeq.NFData Network.AWS.KMS.DisableKey.DisableKeyResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.DisableKey.DisableKey
instance Control.DeepSeq.NFData Network.AWS.KMS.DisableKey.DisableKey
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.DisableKey.DisableKey
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.DisableKey.DisableKey
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.DisableKey.DisableKey
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.DisableKey.DisableKey


-- | Provides detailed information about a KMS key. You can run
--   <tt>DescribeKey</tt> on a <a>customer managed key</a> or an <a>Amazon
--   Web Services managed key</a>.
--   
--   This detailed information includes the key ARN, creation date (and
--   deletion date, if applicable), the key state, and the origin and
--   expiration date (if any) of the key material. It includes fields, like
--   <tt>KeySpec</tt>, that help you distinguish symmetric from asymmetric
--   KMS keys. It also provides information that is particularly important
--   to asymmetric keys, such as the key usage (encryption or signing) and
--   the encryption algorithms or signing algorithms that the KMS key
--   supports. For KMS keys in custom key stores, it includes information
--   about the custom key store, such as the key store ID and the CloudHSM
--   cluster ID. For multi-Region keys, it displays the primary key and all
--   related replica keys.
--   
--   <tt>DescribeKey</tt> does not return the following information:
--   
--   <ul>
--   <li>Aliases associated with the KMS key. To get this information, use
--   ListAliases.</li>
--   <li>Whether automatic key rotation is enabled on the KMS key. To get
--   this information, use GetKeyRotationStatus. Also, some key states
--   prevent a KMS key from being automatically rotated. For details, see
--   <a>How Automatic Key Rotation Works</a> in <i>Key Management Service
--   Developer Guide</i>.</li>
--   <li>Tags on the KMS key. To get this information, use
--   ListResourceTags.</li>
--   <li>Key policies and grants on the KMS key. To get this information,
--   use GetKeyPolicy and ListGrants.</li>
--   </ul>
--   
--   If you call the <tt>DescribeKey</tt> operation on a /predefined Amazon
--   Web Services alias/, that is, an Amazon Web Services alias with no key
--   ID, KMS creates an <a>Amazon Web Services managed key</a>. Then, it
--   associates the alias with the new KMS key, and returns the
--   <tt>KeyId</tt> and <tt>Arn</tt> of the new KMS key in the response.
--   
--   <b>Cross-account use</b>: Yes. To perform this operation with a KMS
--   key in a different Amazon Web Services account, specify the key ARN or
--   alias ARN in the value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>: <a>kms:DescribeKey</a> (key policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>GetKeyPolicy</li>
--   <li>GetKeyRotationStatus</li>
--   <li>ListAliases</li>
--   <li>ListGrants</li>
--   <li>ListKeys</li>
--   <li>ListResourceTags</li>
--   <li>ListRetirableGrants</li>
--   </ul>
module Network.AWS.KMS.DescribeKey

-- | <i>See:</i> <a>newDescribeKey</a> smart constructor.
data DescribeKey
DescribeKey' :: Maybe [Text] -> Text -> DescribeKey

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantTokens:DescribeKey'] :: DescribeKey -> Maybe [Text]

-- | Describes the specified KMS key.
--   
--   If you specify a predefined Amazon Web Services alias (an Amazon Web
--   Services alias with no key ID), KMS associates the alias with an
--   <a>Amazon Web Services managed key</a> and returns its <tt>KeyId</tt>
--   and <tt>Arn</tt> in the response.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
[$sel:keyId:DescribeKey'] :: DescribeKey -> Text

-- | Create a value of <a>DescribeKey</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:DescribeKey'</a>, <a>describeKey_grantTokens</a> -
--   A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:keyId:DescribeKey'</a>, <a>describeKey_keyId</a> - Describes
--   the specified KMS key.
--   
--   If you specify a predefined Amazon Web Services alias (an Amazon Web
--   Services alias with no key ID), KMS associates the alias with an
--   <a>Amazon Web Services managed key</a> and returns its <tt>KeyId</tt>
--   and <tt>Arn</tt> in the response.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
newDescribeKey :: Text -> DescribeKey

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
describeKey_grantTokens :: Lens' DescribeKey (Maybe [Text])

-- | Describes the specified KMS key.
--   
--   If you specify a predefined Amazon Web Services alias (an Amazon Web
--   Services alias with no key ID), KMS associates the alias with an
--   <a>Amazon Web Services managed key</a> and returns its <tt>KeyId</tt>
--   and <tt>Arn</tt> in the response.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
describeKey_keyId :: Lens' DescribeKey Text

-- | <i>See:</i> <a>newDescribeKeyResponse</a> smart constructor.
data DescribeKeyResponse
DescribeKeyResponse' :: Maybe KeyMetadata -> Int -> DescribeKeyResponse

-- | Metadata associated with the key.
[$sel:keyMetadata:DescribeKeyResponse'] :: DescribeKeyResponse -> Maybe KeyMetadata

-- | The response's http status code.
[$sel:httpStatus:DescribeKeyResponse'] :: DescribeKeyResponse -> Int

-- | Create a value of <a>DescribeKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyMetadata:DescribeKeyResponse'</a>,
--   <a>describeKeyResponse_keyMetadata</a> - Metadata associated with the
--   key.
--   
--   <a>$sel:httpStatus:DescribeKeyResponse'</a>,
--   <a>describeKeyResponse_httpStatus</a> - The response's http status
--   code.
newDescribeKeyResponse :: Int -> DescribeKeyResponse

-- | Metadata associated with the key.
describeKeyResponse_keyMetadata :: Lens' DescribeKeyResponse (Maybe KeyMetadata)

-- | The response's http status code.
describeKeyResponse_httpStatus :: Lens' DescribeKeyResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.DescribeKey.DescribeKey
instance GHC.Show.Show Network.AWS.KMS.DescribeKey.DescribeKey
instance GHC.Read.Read Network.AWS.KMS.DescribeKey.DescribeKey
instance GHC.Classes.Eq Network.AWS.KMS.DescribeKey.DescribeKey
instance GHC.Generics.Generic Network.AWS.KMS.DescribeKey.DescribeKeyResponse
instance GHC.Show.Show Network.AWS.KMS.DescribeKey.DescribeKeyResponse
instance GHC.Read.Read Network.AWS.KMS.DescribeKey.DescribeKeyResponse
instance GHC.Classes.Eq Network.AWS.KMS.DescribeKey.DescribeKeyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.DescribeKey.DescribeKey
instance Control.DeepSeq.NFData Network.AWS.KMS.DescribeKey.DescribeKeyResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.DescribeKey.DescribeKey
instance Control.DeepSeq.NFData Network.AWS.KMS.DescribeKey.DescribeKey
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.DescribeKey.DescribeKey
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.DescribeKey.DescribeKey
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.DescribeKey.DescribeKey
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.DescribeKey.DescribeKey


-- | Gets information about <a>custom key stores</a> in the account and
--   Region.
--   
--   This operation is part of the <a>Custom Key Store feature</a> feature
--   in KMS, which combines the convenience and extensive integration of
--   KMS with the isolation and control of a single-tenant key store.
--   
--   By default, this operation returns information about all custom key
--   stores in the account and Region. To get only information about a
--   particular custom key store, use either the
--   <tt>CustomKeyStoreName</tt> or <tt>CustomKeyStoreId</tt> parameter
--   (but not both).
--   
--   To determine whether the custom key store is connected to its CloudHSM
--   cluster, use the <tt>ConnectionState</tt> element in the response. If
--   an attempt to connect the custom key store failed, the
--   <tt>ConnectionState</tt> value is <tt>FAILED</tt> and the
--   <tt>ConnectionErrorCode</tt> element in the response indicates the
--   cause of the failure. For help interpreting the
--   <tt>ConnectionErrorCode</tt>, see CustomKeyStoresListEntry.
--   
--   Custom key stores have a <tt>DISCONNECTED</tt> connection state if the
--   key store has never been connected or you use the
--   DisconnectCustomKeyStore operation to disconnect it. If your custom
--   key store state is <tt>CONNECTED</tt> but you are having trouble using
--   it, make sure that its associated CloudHSM cluster is active and
--   contains the minimum number of HSMs required for the operation, if
--   any.
--   
--   For help repairing your custom key store, see the <a>Troubleshooting
--   Custom Key Stores</a> topic in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   custom key store in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:DescribeCustomKeyStores</a> (IAM
--   policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>ConnectCustomKeyStore</li>
--   <li>CreateCustomKeyStore</li>
--   <li>DeleteCustomKeyStore</li>
--   <li>DisconnectCustomKeyStore</li>
--   <li>UpdateCustomKeyStore</li>
--   </ul>
module Network.AWS.KMS.DescribeCustomKeyStores

-- | <i>See:</i> <a>newDescribeCustomKeyStores</a> smart constructor.
data DescribeCustomKeyStores
DescribeCustomKeyStores' :: Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> DescribeCustomKeyStores

-- | Gets only information about the specified custom key store. Enter the
--   friendly name of the custom key store.
--   
--   By default, this operation gets information about all custom key
--   stores in the account and Region. To limit the output to a particular
--   custom key store, you can use either the <tt>CustomKeyStoreId</tt> or
--   <tt>CustomKeyStoreName</tt> parameter, but not both.
[$sel:customKeyStoreName:DescribeCustomKeyStores'] :: DescribeCustomKeyStores -> Maybe Text

-- | Gets only information about the specified custom key store. Enter the
--   key store ID.
--   
--   By default, this operation gets information about all custom key
--   stores in the account and Region. To limit the output to a particular
--   custom key store, you can use either the <tt>CustomKeyStoreId</tt> or
--   <tt>CustomKeyStoreName</tt> parameter, but not both.
[$sel:customKeyStoreId:DescribeCustomKeyStores'] :: DescribeCustomKeyStores -> Maybe Text

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
[$sel:limit:DescribeCustomKeyStores'] :: DescribeCustomKeyStores -> Maybe Natural

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
[$sel:marker:DescribeCustomKeyStores'] :: DescribeCustomKeyStores -> Maybe Text

-- | Create a value of <a>DescribeCustomKeyStores</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreName:DescribeCustomKeyStores'</a>,
--   <a>describeCustomKeyStores_customKeyStoreName</a> - Gets only
--   information about the specified custom key store. Enter the friendly
--   name of the custom key store.
--   
--   By default, this operation gets information about all custom key
--   stores in the account and Region. To limit the output to a particular
--   custom key store, you can use either the <tt>CustomKeyStoreId</tt> or
--   <tt>CustomKeyStoreName</tt> parameter, but not both.
--   
--   <a>$sel:customKeyStoreId:DescribeCustomKeyStores'</a>,
--   <a>describeCustomKeyStores_customKeyStoreId</a> - Gets only
--   information about the specified custom key store. Enter the key store
--   ID.
--   
--   By default, this operation gets information about all custom key
--   stores in the account and Region. To limit the output to a particular
--   custom key store, you can use either the <tt>CustomKeyStoreId</tt> or
--   <tt>CustomKeyStoreName</tt> parameter, but not both.
--   
--   <a>$sel:limit:DescribeCustomKeyStores'</a>,
--   <a>describeCustomKeyStores_limit</a> - Use this parameter to specify
--   the maximum number of items to return. When this value is present, KMS
--   does not return more than the specified number of items, but it might
--   return fewer.
--   
--   <a>$sel:marker:DescribeCustomKeyStores'</a>,
--   <a>describeCustomKeyStores_marker</a> - Use this parameter in a
--   subsequent request after you receive a response with truncated
--   results. Set it to the value of <tt>NextMarker</tt> from the truncated
--   response you just received.
newDescribeCustomKeyStores :: DescribeCustomKeyStores

-- | Gets only information about the specified custom key store. Enter the
--   friendly name of the custom key store.
--   
--   By default, this operation gets information about all custom key
--   stores in the account and Region. To limit the output to a particular
--   custom key store, you can use either the <tt>CustomKeyStoreId</tt> or
--   <tt>CustomKeyStoreName</tt> parameter, but not both.
describeCustomKeyStores_customKeyStoreName :: Lens' DescribeCustomKeyStores (Maybe Text)

-- | Gets only information about the specified custom key store. Enter the
--   key store ID.
--   
--   By default, this operation gets information about all custom key
--   stores in the account and Region. To limit the output to a particular
--   custom key store, you can use either the <tt>CustomKeyStoreId</tt> or
--   <tt>CustomKeyStoreName</tt> parameter, but not both.
describeCustomKeyStores_customKeyStoreId :: Lens' DescribeCustomKeyStores (Maybe Text)

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
describeCustomKeyStores_limit :: Lens' DescribeCustomKeyStores (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
describeCustomKeyStores_marker :: Lens' DescribeCustomKeyStores (Maybe Text)

-- | <i>See:</i> <a>newDescribeCustomKeyStoresResponse</a> smart
--   constructor.
data DescribeCustomKeyStoresResponse
DescribeCustomKeyStoresResponse' :: Maybe [CustomKeyStoresListEntry] -> Maybe Text -> Maybe Bool -> Int -> DescribeCustomKeyStoresResponse

-- | Contains metadata about each custom key store.
[$sel:customKeyStores:DescribeCustomKeyStoresResponse'] :: DescribeCustomKeyStoresResponse -> Maybe [CustomKeyStoresListEntry]

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
[$sel:nextMarker:DescribeCustomKeyStoresResponse'] :: DescribeCustomKeyStoresResponse -> Maybe Text

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
[$sel:truncated:DescribeCustomKeyStoresResponse'] :: DescribeCustomKeyStoresResponse -> Maybe Bool

-- | The response's http status code.
[$sel:httpStatus:DescribeCustomKeyStoresResponse'] :: DescribeCustomKeyStoresResponse -> Int

-- | Create a value of <a>DescribeCustomKeyStoresResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStores:DescribeCustomKeyStoresResponse'</a>,
--   <a>describeCustomKeyStoresResponse_customKeyStores</a> - Contains
--   metadata about each custom key store.
--   
--   <a>$sel:nextMarker:DescribeCustomKeyStoresResponse'</a>,
--   <a>describeCustomKeyStoresResponse_nextMarker</a> - When
--   <tt>Truncated</tt> is true, this element is present and contains the
--   value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
--   
--   <a>$sel:truncated:DescribeCustomKeyStoresResponse'</a>,
--   <a>describeCustomKeyStoresResponse_truncated</a> - A flag that
--   indicates whether there are more items in the list. When this value is
--   true, the list in this response is truncated. To get more items, pass
--   the value of the <tt>NextMarker</tt> element in thisresponse to the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:httpStatus:DescribeCustomKeyStoresResponse'</a>,
--   <a>describeCustomKeyStoresResponse_httpStatus</a> - The response's
--   http status code.
newDescribeCustomKeyStoresResponse :: Int -> DescribeCustomKeyStoresResponse

-- | Contains metadata about each custom key store.
describeCustomKeyStoresResponse_customKeyStores :: Lens' DescribeCustomKeyStoresResponse (Maybe [CustomKeyStoresListEntry])

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
describeCustomKeyStoresResponse_nextMarker :: Lens' DescribeCustomKeyStoresResponse (Maybe Text)

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
describeCustomKeyStoresResponse_truncated :: Lens' DescribeCustomKeyStoresResponse (Maybe Bool)

-- | The response's http status code.
describeCustomKeyStoresResponse_httpStatus :: Lens' DescribeCustomKeyStoresResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStores
instance GHC.Show.Show Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStores
instance GHC.Read.Read Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStores
instance GHC.Classes.Eq Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStores
instance GHC.Generics.Generic Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStoresResponse
instance GHC.Show.Show Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStoresResponse
instance GHC.Read.Read Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStoresResponse
instance GHC.Classes.Eq Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStoresResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStores
instance Control.DeepSeq.NFData Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStoresResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStores
instance Control.DeepSeq.NFData Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStores
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStores
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStores
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStores
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.DescribeCustomKeyStores.DescribeCustomKeyStores


-- | Deletes key material that you previously imported. This operation
--   makes the specified KMS key unusable. For more information about
--   importing key material into KMS, see <a>Importing Key Material</a> in
--   the <i>Key Management Service Developer Guide</i>.
--   
--   When the specified KMS key is in the <tt>PendingDeletion</tt> state,
--   this operation does not change the KMS key's state. Otherwise, it
--   changes the KMS key's state to <tt>PendingImport</tt>.
--   
--   After you delete key material, you can use ImportKeyMaterial to
--   reimport the same key material into the KMS key.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:DeleteImportedKeyMaterial</a> (key
--   policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>GetParametersForImport</li>
--   <li>ImportKeyMaterial</li>
--   </ul>
module Network.AWS.KMS.DeleteImportedKeyMaterial

-- | <i>See:</i> <a>newDeleteImportedKeyMaterial</a> smart constructor.
data DeleteImportedKeyMaterial
DeleteImportedKeyMaterial' :: Text -> DeleteImportedKeyMaterial

-- | Identifies the KMS key from which you are deleting imported key
--   material. The <tt>Origin</tt> of the KMS key must be
--   <tt>EXTERNAL</tt>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:DeleteImportedKeyMaterial'] :: DeleteImportedKeyMaterial -> Text

-- | Create a value of <a>DeleteImportedKeyMaterial</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:DeleteImportedKeyMaterial'</a>,
--   <a>deleteImportedKeyMaterial_keyId</a> - Identifies the KMS key from
--   which you are deleting imported key material. The <tt>Origin</tt> of
--   the KMS key must be <tt>EXTERNAL</tt>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newDeleteImportedKeyMaterial :: Text -> DeleteImportedKeyMaterial

-- | Identifies the KMS key from which you are deleting imported key
--   material. The <tt>Origin</tt> of the KMS key must be
--   <tt>EXTERNAL</tt>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
deleteImportedKeyMaterial_keyId :: Lens' DeleteImportedKeyMaterial Text

-- | <i>See:</i> <a>newDeleteImportedKeyMaterialResponse</a> smart
--   constructor.
data DeleteImportedKeyMaterialResponse
DeleteImportedKeyMaterialResponse' :: DeleteImportedKeyMaterialResponse

-- | Create a value of <a>DeleteImportedKeyMaterialResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteImportedKeyMaterialResponse :: DeleteImportedKeyMaterialResponse
instance GHC.Generics.Generic Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterial
instance GHC.Show.Show Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterial
instance GHC.Read.Read Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterial
instance GHC.Classes.Eq Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterial
instance GHC.Generics.Generic Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterialResponse
instance GHC.Show.Show Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterialResponse
instance GHC.Read.Read Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterialResponse
instance GHC.Classes.Eq Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterialResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterial
instance Control.DeepSeq.NFData Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterialResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterial
instance Control.DeepSeq.NFData Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterial
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterial
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterial
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterial
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.DeleteImportedKeyMaterial.DeleteImportedKeyMaterial


-- | Deletes a <a>custom key store</a>. This operation does not delete the
--   CloudHSM cluster that is associated with the custom key store, or
--   affect any users or keys in the cluster.
--   
--   The custom key store that you delete cannot contain any KMS <a>KMS
--   keys</a>. Before deleting the key store, verify that you will never
--   need to use any of the KMS keys in the key store for any
--   <a>cryptographic operations</a>. Then, use ScheduleKeyDeletion to
--   delete the KMS keys from the key store. When the scheduled waiting
--   period expires, the <tt>ScheduleKeyDeletion</tt> operation deletes the
--   KMS keys. Then it makes a best effort to delete the key material from
--   the associated cluster. However, you might need to manually <a>delete
--   the orphaned key material</a> from the cluster and its backups.
--   
--   After all KMS keys are deleted from KMS, use DisconnectCustomKeyStore
--   to disconnect the key store from KMS. Then, you can delete the custom
--   key store.
--   
--   Instead of deleting the custom key store, consider using
--   DisconnectCustomKeyStore to disconnect it from KMS. While the key
--   store is disconnected, you cannot create or use the KMS keys in the
--   key store. But, you do not need to delete KMS keys and you can
--   reconnect a disconnected custom key store at any time.
--   
--   If the operation succeeds, it returns a JSON object with no
--   properties.
--   
--   This operation is part of the <a>Custom Key Store feature</a> feature
--   in KMS, which combines the convenience and extensive integration of
--   KMS with the isolation and control of a single-tenant key store.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   custom key store in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:DeleteCustomKeyStore</a> (IAM
--   policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>ConnectCustomKeyStore</li>
--   <li>CreateCustomKeyStore</li>
--   <li>DescribeCustomKeyStores</li>
--   <li>DisconnectCustomKeyStore</li>
--   <li>UpdateCustomKeyStore</li>
--   </ul>
module Network.AWS.KMS.DeleteCustomKeyStore

-- | <i>See:</i> <a>newDeleteCustomKeyStore</a> smart constructor.
data DeleteCustomKeyStore
DeleteCustomKeyStore' :: Text -> DeleteCustomKeyStore

-- | Enter the ID of the custom key store you want to delete. To find the
--   ID of a custom key store, use the DescribeCustomKeyStores operation.
[$sel:customKeyStoreId:DeleteCustomKeyStore'] :: DeleteCustomKeyStore -> Text

-- | Create a value of <a>DeleteCustomKeyStore</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreId:DeleteCustomKeyStore'</a>,
--   <a>deleteCustomKeyStore_customKeyStoreId</a> - Enter the ID of the
--   custom key store you want to delete. To find the ID of a custom key
--   store, use the DescribeCustomKeyStores operation.
newDeleteCustomKeyStore :: Text -> DeleteCustomKeyStore

-- | Enter the ID of the custom key store you want to delete. To find the
--   ID of a custom key store, use the DescribeCustomKeyStores operation.
deleteCustomKeyStore_customKeyStoreId :: Lens' DeleteCustomKeyStore Text

-- | <i>See:</i> <a>newDeleteCustomKeyStoreResponse</a> smart constructor.
data DeleteCustomKeyStoreResponse
DeleteCustomKeyStoreResponse' :: Int -> DeleteCustomKeyStoreResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteCustomKeyStoreResponse'] :: DeleteCustomKeyStoreResponse -> Int

-- | Create a value of <a>DeleteCustomKeyStoreResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteCustomKeyStoreResponse'</a>,
--   <a>deleteCustomKeyStoreResponse_httpStatus</a> - The response's http
--   status code.
newDeleteCustomKeyStoreResponse :: Int -> DeleteCustomKeyStoreResponse

-- | The response's http status code.
deleteCustomKeyStoreResponse_httpStatus :: Lens' DeleteCustomKeyStoreResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStore
instance GHC.Show.Show Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStore
instance GHC.Read.Read Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStore
instance GHC.Classes.Eq Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStore
instance GHC.Generics.Generic Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStoreResponse
instance GHC.Show.Show Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStoreResponse
instance GHC.Read.Read Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStoreResponse
instance GHC.Classes.Eq Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStoreResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStore
instance Control.DeepSeq.NFData Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStoreResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStore
instance Control.DeepSeq.NFData Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStore
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStore
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStore
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStore
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.DeleteCustomKeyStore.DeleteCustomKeyStore


-- | Deletes the specified alias.
--   
--   Adding, deleting, or updating an alias can allow or deny permission to
--   the KMS key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   Because an alias is not a property of a KMS key, you can delete and
--   change the aliases of a KMS key without affecting the KMS key. Also,
--   aliases do not appear in the response from the DescribeKey operation.
--   To get the aliases of all KMS keys, use the ListAliases operation.
--   
--   Each KMS key can have multiple aliases. To change the alias of a KMS
--   key, use DeleteAlias to delete the current alias and CreateAlias to
--   create a new alias. To associate an existing alias with a different
--   KMS key, call UpdateAlias.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on an
--   alias in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>
--   
--   <ul>
--   <li><a>kms:DeleteAlias</a> on the alias (IAM policy).</li>
--   <li><a>kms:DeleteAlias</a> on the KMS key (key policy).</li>
--   </ul>
--   
--   For details, see <a>Controlling access to aliases</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>CreateAlias</li>
--   <li>ListAliases</li>
--   <li>UpdateAlias</li>
--   </ul>
module Network.AWS.KMS.DeleteAlias

-- | <i>See:</i> <a>newDeleteAlias</a> smart constructor.
data DeleteAlias
DeleteAlias' :: Text -> DeleteAlias

-- | The alias to be deleted. The alias name must begin with
--   <tt>alias/</tt> followed by the alias name, such as
--   <tt>alias/ExampleAlias</tt>.
[$sel:aliasName:DeleteAlias'] :: DeleteAlias -> Text

-- | Create a value of <a>DeleteAlias</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:aliasName:DeleteAlias'</a>, <a>deleteAlias_aliasName</a> - The
--   alias to be deleted. The alias name must begin with <tt>alias/</tt>
--   followed by the alias name, such as <tt>alias/ExampleAlias</tt>.
newDeleteAlias :: Text -> DeleteAlias

-- | The alias to be deleted. The alias name must begin with
--   <tt>alias/</tt> followed by the alias name, such as
--   <tt>alias/ExampleAlias</tt>.
deleteAlias_aliasName :: Lens' DeleteAlias Text

-- | <i>See:</i> <a>newDeleteAliasResponse</a> smart constructor.
data DeleteAliasResponse
DeleteAliasResponse' :: DeleteAliasResponse

-- | Create a value of <a>DeleteAliasResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteAliasResponse :: DeleteAliasResponse
instance GHC.Generics.Generic Network.AWS.KMS.DeleteAlias.DeleteAlias
instance GHC.Show.Show Network.AWS.KMS.DeleteAlias.DeleteAlias
instance GHC.Read.Read Network.AWS.KMS.DeleteAlias.DeleteAlias
instance GHC.Classes.Eq Network.AWS.KMS.DeleteAlias.DeleteAlias
instance GHC.Generics.Generic Network.AWS.KMS.DeleteAlias.DeleteAliasResponse
instance GHC.Show.Show Network.AWS.KMS.DeleteAlias.DeleteAliasResponse
instance GHC.Read.Read Network.AWS.KMS.DeleteAlias.DeleteAliasResponse
instance GHC.Classes.Eq Network.AWS.KMS.DeleteAlias.DeleteAliasResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.DeleteAlias.DeleteAlias
instance Control.DeepSeq.NFData Network.AWS.KMS.DeleteAlias.DeleteAliasResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.DeleteAlias.DeleteAlias
instance Control.DeepSeq.NFData Network.AWS.KMS.DeleteAlias.DeleteAlias
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.DeleteAlias.DeleteAlias
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.DeleteAlias.DeleteAlias
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.DeleteAlias.DeleteAlias
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.DeleteAlias.DeleteAlias


-- | Decrypts ciphertext that was encrypted by a KMS key using any of the
--   following operations:
--   
--   <ul>
--   <li>Encrypt</li>
--   <li>GenerateDataKey</li>
--   <li>GenerateDataKeyPair</li>
--   <li>GenerateDataKeyWithoutPlaintext</li>
--   <li>GenerateDataKeyPairWithoutPlaintext</li>
--   </ul>
--   
--   You can use this operation to decrypt ciphertext that was encrypted
--   under a symmetric or asymmetric KMS key. When the KMS key is
--   asymmetric, you must specify the KMS key and the encryption algorithm
--   that was used to encrypt the ciphertext. For information about
--   symmetric and asymmetric KMS keys, see <a>Using Symmetric and
--   Asymmetric KMS keys</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   The Decrypt operation also decrypts ciphertext that was encrypted
--   outside of KMS by the public key in an KMS asymmetric KMS key.
--   However, it cannot decrypt ciphertext produced by other libraries,
--   such as the <a>Amazon Web Services Encryption SDK</a> or <a>Amazon S3
--   client-side encryption</a>. These libraries return a ciphertext format
--   that is incompatible with KMS.
--   
--   If the ciphertext was encrypted under a symmetric KMS key, the
--   <tt>KeyId</tt> parameter is optional. KMS can get this information
--   from metadata that it adds to the symmetric ciphertext blob. This
--   feature adds durability to your implementation by ensuring that
--   authorized users can decrypt ciphertext decades after it was
--   encrypted, even if they've lost track of the key ID. However,
--   specifying the KMS key is always recommended as a best practice. When
--   you use the <tt>KeyId</tt> parameter to specify a KMS key, KMS only
--   uses the KMS key you specify. If the ciphertext was encrypted under a
--   different KMS key, the <tt>Decrypt</tt> operation fails. This practice
--   ensures that you use the KMS key that you intend.
--   
--   Whenever possible, use key policies to give users permission to call
--   the <tt>Decrypt</tt> operation on a particular KMS key, instead of
--   using IAM policies. Otherwise, you might create an IAM user policy
--   that gives the user <tt>Decrypt</tt> permission on all KMS keys. This
--   user could decrypt ciphertext that was encrypted by KMS keys in other
--   accounts if the key policy for the cross-account KMS key permits it.
--   If you must use an IAM policy for <tt>Decrypt</tt> permissions, limit
--   the user to particular KMS keys or particular trusted accounts. For
--   details, see <a>Best practices for IAM policies</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   Applications in Amazon Web Services Nitro Enclaves can call this
--   operation by using the <a>Amazon Web Services Nitro Enclaves
--   Development Kit</a>. For information about the supporting parameters,
--   see <a>How Amazon Web Services Nitro Enclaves use KMS</a> in the
--   <i>Key Management Service Developer Guide</i>.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: Yes. To perform this operation with a KMS
--   key in a different Amazon Web Services account, specify the key ARN or
--   alias ARN in the value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>: <a>kms:Decrypt</a> (key policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>Encrypt</li>
--   <li>GenerateDataKey</li>
--   <li>GenerateDataKeyPair</li>
--   <li>ReEncrypt</li>
--   </ul>
module Network.AWS.KMS.Decrypt

-- | <i>See:</i> <a>newDecrypt</a> smart constructor.
data Decrypt
Decrypt' :: Maybe [Text] -> Maybe EncryptionAlgorithmSpec -> Maybe (HashMap Text Text) -> Maybe Text -> Base64 -> Decrypt

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantTokens:Decrypt'] :: Decrypt -> Maybe [Text]

-- | Specifies the encryption algorithm that will be used to decrypt the
--   ciphertext. Specify the same algorithm that was used to encrypt the
--   data. If you specify a different algorithm, the <tt>Decrypt</tt>
--   operation fails.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, represents the only supported algorithm
--   that is valid for symmetric KMS keys.
[$sel:encryptionAlgorithm:Decrypt'] :: Decrypt -> Maybe EncryptionAlgorithmSpec

-- | Specifies the encryption context to use when decrypting the data. An
--   encryption context is valid only for <a>cryptographic operations</a>
--   with a symmetric KMS key. The standard asymmetric encryption
--   algorithms that KMS uses do not support an encryption context.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:encryptionContext:Decrypt'] :: Decrypt -> Maybe (HashMap Text Text)

-- | Specifies the KMS key that KMS uses to decrypt the ciphertext. Enter a
--   key ID of the KMS key that was used to encrypt the ciphertext.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. If you used a symmetric KMS key, KMS can
--   get the KMS key from metadata that it adds to the symmetric ciphertext
--   blob. However, it is always recommended as a best practice. This
--   practice ensures that you use the KMS key that you intend.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
[$sel:keyId:Decrypt'] :: Decrypt -> Maybe Text

-- | Ciphertext to be decrypted. The blob includes metadata.
[$sel:ciphertextBlob:Decrypt'] :: Decrypt -> Base64

-- | Create a value of <a>Decrypt</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:Decrypt'</a>, <a>decrypt_grantTokens</a> - A list
--   of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:encryptionAlgorithm:Decrypt'</a>,
--   <a>decrypt_encryptionAlgorithm</a> - Specifies the encryption
--   algorithm that will be used to decrypt the ciphertext. Specify the
--   same algorithm that was used to encrypt the data. If you specify a
--   different algorithm, the <tt>Decrypt</tt> operation fails.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, represents the only supported algorithm
--   that is valid for symmetric KMS keys.
--   
--   <a>$sel:encryptionContext:Decrypt'</a>,
--   <a>decrypt_encryptionContext</a> - Specifies the encryption context to
--   use when decrypting the data. An encryption context is valid only for
--   <a>cryptographic operations</a> with a symmetric KMS key. The standard
--   asymmetric encryption algorithms that KMS uses do not support an
--   encryption context.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keyId:Decrypt'</a>, <a>decrypt_keyId</a> - Specifies the KMS
--   key that KMS uses to decrypt the ciphertext. Enter a key ID of the KMS
--   key that was used to encrypt the ciphertext.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. If you used a symmetric KMS key, KMS can
--   get the KMS key from metadata that it adds to the symmetric ciphertext
--   blob. However, it is always recommended as a best practice. This
--   practice ensures that you use the KMS key that you intend.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:ciphertextBlob:Decrypt'</a>, <a>decrypt_ciphertextBlob</a> -
--   Ciphertext to be decrypted. The blob includes metadata.-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newDecrypt :: ByteString -> Decrypt

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
decrypt_grantTokens :: Lens' Decrypt (Maybe [Text])

-- | Specifies the encryption algorithm that will be used to decrypt the
--   ciphertext. Specify the same algorithm that was used to encrypt the
--   data. If you specify a different algorithm, the <tt>Decrypt</tt>
--   operation fails.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, represents the only supported algorithm
--   that is valid for symmetric KMS keys.
decrypt_encryptionAlgorithm :: Lens' Decrypt (Maybe EncryptionAlgorithmSpec)

-- | Specifies the encryption context to use when decrypting the data. An
--   encryption context is valid only for <a>cryptographic operations</a>
--   with a symmetric KMS key. The standard asymmetric encryption
--   algorithms that KMS uses do not support an encryption context.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
decrypt_encryptionContext :: Lens' Decrypt (Maybe (HashMap Text Text))

-- | Specifies the KMS key that KMS uses to decrypt the ciphertext. Enter a
--   key ID of the KMS key that was used to encrypt the ciphertext.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. If you used a symmetric KMS key, KMS can
--   get the KMS key from metadata that it adds to the symmetric ciphertext
--   blob. However, it is always recommended as a best practice. This
--   practice ensures that you use the KMS key that you intend.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
decrypt_keyId :: Lens' Decrypt (Maybe Text)

-- | Ciphertext to be decrypted. The blob includes metadata.-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
decrypt_ciphertextBlob :: Lens' Decrypt ByteString

-- | <i>See:</i> <a>newDecryptResponse</a> smart constructor.
data DecryptResponse
DecryptResponse' :: Maybe (Sensitive Base64) -> Maybe EncryptionAlgorithmSpec -> Maybe Text -> Int -> DecryptResponse

-- | Decrypted plaintext data. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.
[$sel:plaintext:DecryptResponse'] :: DecryptResponse -> Maybe (Sensitive Base64)

-- | The encryption algorithm that was used to decrypt the ciphertext.
[$sel:encryptionAlgorithm:DecryptResponse'] :: DecryptResponse -> Maybe EncryptionAlgorithmSpec

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that was used
--   to decrypt the ciphertext.
[$sel:keyId:DecryptResponse'] :: DecryptResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DecryptResponse'] :: DecryptResponse -> Int

-- | Create a value of <a>DecryptResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:plaintext:DecryptResponse'</a>,
--   <a>decryptResponse_plaintext</a> - Decrypted plaintext data. When you
--   use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:encryptionAlgorithm:Decrypt'</a>,
--   <a>decryptResponse_encryptionAlgorithm</a> - The encryption algorithm
--   that was used to decrypt the ciphertext.
--   
--   <a>$sel:keyId:Decrypt'</a>, <a>decryptResponse_keyId</a> - The Amazon
--   Resource Name (<a>key ARN</a>) of the KMS key that was used to decrypt
--   the ciphertext.
--   
--   <a>$sel:httpStatus:DecryptResponse'</a>,
--   <a>decryptResponse_httpStatus</a> - The response's http status code.
newDecryptResponse :: Int -> DecryptResponse

-- | Decrypted plaintext data. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
decryptResponse_plaintext :: Lens' DecryptResponse (Maybe ByteString)

-- | The encryption algorithm that was used to decrypt the ciphertext.
decryptResponse_encryptionAlgorithm :: Lens' DecryptResponse (Maybe EncryptionAlgorithmSpec)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that was used
--   to decrypt the ciphertext.
decryptResponse_keyId :: Lens' DecryptResponse (Maybe Text)

-- | The response's http status code.
decryptResponse_httpStatus :: Lens' DecryptResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.Decrypt.Decrypt
instance GHC.Show.Show Network.AWS.KMS.Decrypt.Decrypt
instance GHC.Read.Read Network.AWS.KMS.Decrypt.Decrypt
instance GHC.Classes.Eq Network.AWS.KMS.Decrypt.Decrypt
instance GHC.Generics.Generic Network.AWS.KMS.Decrypt.DecryptResponse
instance GHC.Show.Show Network.AWS.KMS.Decrypt.DecryptResponse
instance GHC.Classes.Eq Network.AWS.KMS.Decrypt.DecryptResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.Decrypt.Decrypt
instance Control.DeepSeq.NFData Network.AWS.KMS.Decrypt.DecryptResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Decrypt.Decrypt
instance Control.DeepSeq.NFData Network.AWS.KMS.Decrypt.Decrypt
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.Decrypt.Decrypt
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Decrypt.Decrypt
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.Decrypt.Decrypt
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Decrypt.Decrypt


-- | Creates a unique customer managed <a>KMS key</a> in your Amazon Web
--   Services account and Region.
--   
--   KMS is replacing the term <i>customer master key (CMK)</i> with <i>KMS
--   key</i> and <i>KMS key</i>. The concept has not changed. To prevent
--   breaking changes, KMS is keeping some variations of this term.
--   
--   You can use the <tt>CreateKey</tt> operation to create symmetric or
--   asymmetric KMS keys.
--   
--   <ul>
--   <li><b>Symmetric KMS keys</b> contain a 256-bit symmetric key that
--   never leaves KMS unencrypted. To use the KMS key, you must call KMS.
--   You can use a symmetric KMS key to encrypt and decrypt small amounts
--   of data, but they are typically used to generate <a>data keys</a> and
--   <a>data keys pairs</a>. For details, see GenerateDataKey and
--   GenerateDataKeyPair.</li>
--   <li><b>Asymmetric KMS keys</b> can contain an RSA key pair or an
--   Elliptic Curve (ECC) key pair. The private key in an asymmetric KMS
--   key never leaves KMS unencrypted. However, you can use the
--   GetPublicKey operation to download the public key so it can be used
--   outside of KMS. KMS keys with RSA key pairs can be used to encrypt or
--   decrypt data or sign and verify messages (but not both). KMS keys with
--   ECC key pairs can be used only to sign and verify messages.</li>
--   </ul>
--   
--   For information about symmetric and asymmetric KMS keys, see <a>Using
--   Symmetric and Asymmetric KMS keys</a> in the <i>Key Management Service
--   Developer Guide</i>.
--   
--   To create different types of KMS keys, use the following guidance:
--   
--   <ul>
--   <li><i>Asymmetric KMS keys</i> To create an asymmetric KMS key, use
--   the <tt>KeySpec</tt> parameter to specify the type of key material in
--   the KMS key. Then, use the <tt>KeyUsage</tt> parameter to determine
--   whether the KMS key will be used to encrypt and decrypt or sign and
--   verify. You can't change these properties after the KMS key is
--   created.</li>
--   <li><i>Symmetric KMS keys</i> When creating a symmetric KMS key, you
--   don't need to specify the <tt>KeySpec</tt> or <tt>KeyUsage</tt>
--   parameters. The default value for <tt>KeySpec</tt>,
--   <tt>SYMMETRIC_DEFAULT</tt>, and the default value for
--   <tt>KeyUsage</tt>, <tt>ENCRYPT_DECRYPT</tt>, are the only valid values
--   for symmetric KMS keys.</li>
--   </ul>
--   
--   [Multi-Region primary keys Imported key material] To create a
--   multi-Region <i>primary key</i> in the local Amazon Web Services
--   Region, use the <tt>MultiRegion</tt> parameter with a value of
--   <tt>True</tt>. To create a multi-Region <i>replica key</i>, that is, a
--   KMS key with the same key ID and key material as a primary key, but in
--   a different Amazon Web Services Region, use the ReplicateKey
--   operation. To change a replica key to a primary key, and its primary
--   key to a replica key, use the UpdatePrimaryRegion operation.
--   
--   This operation supports <i>multi-Region keys</i>, an KMS feature that
--   lets you create multiple interoperable KMS keys in different Amazon
--   Web Services Regions. Because these KMS keys have the same key ID, key
--   material, and other metadata, you can use them interchangeably to
--   encrypt data in one Amazon Web Services Region and decrypt it in a
--   different Amazon Web Services Region without re-encrypting the data or
--   making a cross-Region call. For more information about multi-Region
--   keys, see <a>Using multi-Region keys</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   You can create symmetric and asymmetric multi-Region keys and
--   multi-Region keys with imported key material. You cannot create
--   multi-Region keys in a custom key store.
--   
--   To import your own key material, begin by creating a symmetric KMS key
--   with no key material. To do this, use the <tt>Origin</tt> parameter of
--   <tt>CreateKey</tt> with a value of <tt>EXTERNAL</tt>. Next, use
--   GetParametersForImport operation to get a public key and import token,
--   and use the public key to encrypt your key material. Then, use
--   ImportKeyMaterial with your import token to import the key material.
--   For step-by-step instructions, see <a>Importing Key Material</a> in
--   the /<i>Key Management Service Developer Guide</i>/ . You cannot
--   import the key material into an asymmetric KMS key.
--   
--   To create a multi-Region primary key with imported key material, use
--   the <tt>Origin</tt> parameter of <tt>CreateKey</tt> with a value of
--   <tt>EXTERNAL</tt> and the <tt>MultiRegion</tt> parameter with a value
--   of <tt>True</tt>. To create replicas of the multi-Region primary key,
--   use the ReplicateKey operation. For more information about
--   multi-Region keys, see <a>Using multi-Region keys</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <ul>
--   <li><i>Custom key store</i> To create a symmetric KMS key in a
--   <a>custom key store</a>, use the <tt>CustomKeyStoreId</tt> parameter
--   to specify the custom key store. You must also use the <tt>Origin</tt>
--   parameter with a value of <tt>AWS_CLOUDHSM</tt>. The CloudHSM cluster
--   that is associated with the custom key store must have at least two
--   active HSMs in different Availability Zones in the Amazon Web Services
--   Region.You cannot create an asymmetric KMS key in a custom key store.
--   For information about custom key stores in KMS see <a>Using Custom Key
--   Stores</a> in the /<i>Key Management Service Developer Guide</i>/
--   .</li>
--   </ul>
--   
--   <b>Cross-account use</b>: No. You cannot use this operation to create
--   a KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:CreateKey</a> (IAM policy). To use
--   the <tt>Tags</tt> parameter, <a>kms:TagResource</a> (IAM policy). For
--   examples and information about related permissions, see <a>Allow a
--   user to create KMS keys</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>DescribeKey</li>
--   <li>ListKeys</li>
--   <li>ScheduleKeyDeletion</li>
--   </ul>
module Network.AWS.KMS.CreateKey

-- | <i>See:</i> <a>newCreateKey</a> smart constructor.
data CreateKey
CreateKey' :: Maybe OriginType -> Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe [Tag] -> Maybe Text -> Maybe Text -> Maybe KeySpec -> Maybe CustomerMasterKeySpec -> Maybe KeyUsageType -> CreateKey

-- | The source of the key material for the KMS key. You cannot change the
--   origin after you create the KMS key. The default is <tt>AWS_KMS</tt>,
--   which means that KMS creates the key material.
--   
--   To create a KMS key with no key material (for imported key material),
--   set the value to <tt>EXTERNAL</tt>. For more information about
--   importing key material into KMS, see <a>Importing Key Material</a> in
--   the <i>Key Management Service Developer Guide</i>. This value is valid
--   only for symmetric KMS keys.
--   
--   To create a KMS key in an KMS <a>custom key store</a> and create its
--   key material in the associated CloudHSM cluster, set this value to
--   <tt>AWS_CLOUDHSM</tt>. You must also use the <tt>CustomKeyStoreId</tt>
--   parameter to identify the custom key store. This value is valid only
--   for symmetric KMS keys.
[$sel:origin:CreateKey'] :: CreateKey -> Maybe OriginType

-- | Creates a multi-Region primary key that you can replicate into other
--   Amazon Web Services Regions. You cannot change this value after you
--   create the KMS key.
--   
--   For a multi-Region key, set this parameter to <tt>True</tt>. For a
--   single-Region KMS key, omit this parameter or set it to
--   <tt>False</tt>. The default value is <tt>False</tt>.
--   
--   This operation supports <i>multi-Region keys</i>, an KMS feature that
--   lets you create multiple interoperable KMS keys in different Amazon
--   Web Services Regions. Because these KMS keys have the same key ID, key
--   material, and other metadata, you can use them interchangeably to
--   encrypt data in one Amazon Web Services Region and decrypt it in a
--   different Amazon Web Services Region without re-encrypting the data or
--   making a cross-Region call. For more information about multi-Region
--   keys, see <a>Using multi-Region keys</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   This value creates a <i>primary key</i>, not a replica. To create a
--   /replica key/, use the ReplicateKey operation.
--   
--   You can create a symmetric or asymmetric multi-Region key, and you can
--   create a multi-Region key with imported key material. However, you
--   cannot create a multi-Region key in a custom key store.
[$sel:multiRegion:CreateKey'] :: CreateKey -> Maybe Bool

-- | Creates the KMS key in the specified <a>custom key store</a> and the
--   key material in its associated CloudHSM cluster. To create a KMS key
--   in a custom key store, you must also specify the <tt>Origin</tt>
--   parameter with a value of <tt>AWS_CLOUDHSM</tt>. The CloudHSM cluster
--   that is associated with the custom key store must have at least two
--   active HSMs, each in a different Availability Zone in the Region.
--   
--   This parameter is valid only for symmetric KMS keys and regional KMS
--   keys. You cannot create an asymmetric KMS key or a multi-Region key in
--   a custom key store.
--   
--   To find the ID of a custom key store, use the DescribeCustomKeyStores
--   operation.
--   
--   The response includes the custom key store ID and the ID of the
--   CloudHSM cluster.
--   
--   This operation is part of the <a>Custom Key Store feature</a> feature
--   in KMS, which combines the convenience and extensive integration of
--   KMS with the isolation and control of a single-tenant key store.
[$sel:customKeyStoreId:CreateKey'] :: CreateKey -> Maybe Text

-- | A flag to indicate whether to bypass the key policy lockout safety
--   check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the /<i>Key Management Service Developer
--   Guide</i>/ .
--   
--   Use this parameter only when you include a policy in the request and
--   you intend to prevent the principal that is making the request from
--   making a subsequent PutKeyPolicy request on the KMS key.
--   
--   The default value is false.
[$sel:bypassPolicyLockoutSafetyCheck:CreateKey'] :: CreateKey -> Maybe Bool

-- | Assigns one or more tags to the KMS key. Use this parameter to tag the
--   KMS key when it is created. To tag an existing KMS key, use the
--   TagResource operation.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   To use this parameter, you must have <a>kms:TagResource</a> permission
--   in an IAM policy.
--   
--   Each tag consists of a tag key and a tag value. Both the tag key and
--   the tag value are required, but the tag value can be an empty (null)
--   string. You cannot have more than one tag on a KMS key with the same
--   tag key. If you specify an existing tag key with a different tag
--   value, KMS replaces the current tag value with the specified one.
--   
--   When you add tags to an Amazon Web Services resource, Amazon Web
--   Services generates a cost allocation report with usage and costs
--   aggregated by tags. Tags can also be used to control access to a KMS
--   key. For details, see <a>Tagging Keys</a>.
[$sel:tags:CreateKey'] :: CreateKey -> Maybe [Tag]

-- | A description of the KMS key.
--   
--   Use a description that helps you decide whether the KMS key is
--   appropriate for a task. The default value is an empty string (no
--   description).
--   
--   To set or change the description after the key is created, use
--   UpdateKeyDescription.
[$sel:description:CreateKey'] :: CreateKey -> Maybe Text

-- | The key policy to attach to the KMS key.
--   
--   If you provide a key policy, it must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must allow the principal that is making the
--   <tt>CreateKey</tt> request to make a subsequent PutKeyPolicy request
--   on the KMS key. This reduces the risk that the KMS key becomes
--   unmanageable. For more information, refer to the scenario in the
--   <a>Default Key Policy</a> section of the /<i>Key Management Service
--   Developer Guide</i>/ .</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /Amazon Web Services Identity and Access Management
--   User Guide/.</li>
--   </ul>
--   
--   If you do not provide a key policy, KMS attaches a default key policy
--   to the KMS key. For more information, see <a>Default Key Policy</a> in
--   the <i>Key Management Service Developer Guide</i>.
--   
--   The key policy size quota is 32 kilobytes (32768 bytes).
--   
--   For help writing and formatting a JSON policy document, see the <a>IAM
--   JSON Policy Reference</a> in the /<i>Identity and Access Management
--   User Guide</i>/ .
[$sel:policy:CreateKey'] :: CreateKey -> Maybe Text

-- | Specifies the type of KMS key to create. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, creates a KMS key with a 256-bit symmetric
--   key for encryption and decryption. For help choosing a key spec for
--   your KMS key, see <a>How to Choose Your KMS key Configuration</a> in
--   the /<i>Key Management Service Developer Guide</i>/ .
--   
--   The <tt>KeySpec</tt> determines whether the KMS key contains a
--   symmetric key or an asymmetric key pair. It also determines the
--   encryption algorithms or signing algorithms that the KMS key supports.
--   You can't change the <tt>KeySpec</tt> after the KMS key is created. To
--   further restrict the algorithms that can be used with the KMS key, use
--   a condition key in its key policy or IAM policy. For more information,
--   see <a>kms:EncryptionAlgorithm</a> or <a>kms:Signing Algorithm</a> in
--   the /<i>Key Management Service Developer Guide</i>/ .
--   
--   <a>Amazon Web Services services that are integrated with KMS</a> use
--   symmetric KMS keys to protect your data. These services do not support
--   asymmetric KMS keys. For help determining whether a KMS key is
--   symmetric or asymmetric, see <a>Identifying Symmetric and Asymmetric
--   KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
--   
--   KMS supports the following key specs for KMS keys:
--   
--   <ul>
--   <li>Symmetric key (default)<ul><li><tt>SYMMETRIC_DEFAULT</tt>
--   (AES-256-GCM)</li></ul></li>
--   <li>Asymmetric RSA key
--   pairs<ul><li><pre>RSA_2048</pre></li><li><pre>RSA_3072</pre></li><li><pre>RSA_4096</pre></li></ul></li>
--   <li>Asymmetric NIST-recommended elliptic curve key
--   pairs<ul><li><tt>ECC_NIST_P256</tt>
--   (secp256r1)</li><li><tt>ECC_NIST_P384</tt>
--   (secp384r1)</li><li><tt>ECC_NIST_P521</tt> (secp521r1)</li></ul></li>
--   <li>Other asymmetric elliptic curve key
--   pairs<ul><li><tt>ECC_SECG_P256K1</tt> (secp256k1), commonly used for
--   cryptocurrencies.</li></ul></li>
--   </ul>
[$sel:keySpec:CreateKey'] :: CreateKey -> Maybe KeySpec

-- | Instead, use the <tt>KeySpec</tt> parameter.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> parameters
--   work the same way. Only the names differ. We recommend that you use
--   <tt>KeySpec</tt> parameter in your code. However, to avoid breaking
--   changes, KMS will support both parameters.
[$sel:customerMasterKeySpec:CreateKey'] :: CreateKey -> Maybe CustomerMasterKeySpec

-- | Determines the <a>cryptographic operations</a> for which you can use
--   the KMS key. The default value is <tt>ENCRYPT_DECRYPT</tt>. This
--   parameter is required only for asymmetric KMS keys. You can't change
--   the <tt>KeyUsage</tt> value after the KMS key is created.
--   
--   Select only one valid value.
--   
--   <ul>
--   <li>For symmetric KMS keys, omit the parameter or specify
--   <tt>ENCRYPT_DECRYPT</tt>.</li>
--   <li>For asymmetric KMS keys with RSA key material, specify
--   <tt>ENCRYPT_DECRYPT</tt> or <tt>SIGN_VERIFY</tt>.</li>
--   <li>For asymmetric KMS keys with ECC key material, specify
--   <tt>SIGN_VERIFY</tt>.</li>
--   </ul>
[$sel:keyUsage:CreateKey'] :: CreateKey -> Maybe KeyUsageType

-- | Create a value of <a>CreateKey</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:origin:CreateKey'</a>, <a>createKey_origin</a> - The source of
--   the key material for the KMS key. You cannot change the origin after
--   you create the KMS key. The default is <tt>AWS_KMS</tt>, which means
--   that KMS creates the key material.
--   
--   To create a KMS key with no key material (for imported key material),
--   set the value to <tt>EXTERNAL</tt>. For more information about
--   importing key material into KMS, see <a>Importing Key Material</a> in
--   the <i>Key Management Service Developer Guide</i>. This value is valid
--   only for symmetric KMS keys.
--   
--   To create a KMS key in an KMS <a>custom key store</a> and create its
--   key material in the associated CloudHSM cluster, set this value to
--   <tt>AWS_CLOUDHSM</tt>. You must also use the <tt>CustomKeyStoreId</tt>
--   parameter to identify the custom key store. This value is valid only
--   for symmetric KMS keys.
--   
--   <a>$sel:multiRegion:CreateKey'</a>, <a>createKey_multiRegion</a> -
--   Creates a multi-Region primary key that you can replicate into other
--   Amazon Web Services Regions. You cannot change this value after you
--   create the KMS key.
--   
--   For a multi-Region key, set this parameter to <tt>True</tt>. For a
--   single-Region KMS key, omit this parameter or set it to
--   <tt>False</tt>. The default value is <tt>False</tt>.
--   
--   This operation supports <i>multi-Region keys</i>, an KMS feature that
--   lets you create multiple interoperable KMS keys in different Amazon
--   Web Services Regions. Because these KMS keys have the same key ID, key
--   material, and other metadata, you can use them interchangeably to
--   encrypt data in one Amazon Web Services Region and decrypt it in a
--   different Amazon Web Services Region without re-encrypting the data or
--   making a cross-Region call. For more information about multi-Region
--   keys, see <a>Using multi-Region keys</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   This value creates a <i>primary key</i>, not a replica. To create a
--   /replica key/, use the ReplicateKey operation.
--   
--   You can create a symmetric or asymmetric multi-Region key, and you can
--   create a multi-Region key with imported key material. However, you
--   cannot create a multi-Region key in a custom key store.
--   
--   <a>$sel:customKeyStoreId:CreateKey'</a>,
--   <a>createKey_customKeyStoreId</a> - Creates the KMS key in the
--   specified <a>custom key store</a> and the key material in its
--   associated CloudHSM cluster. To create a KMS key in a custom key
--   store, you must also specify the <tt>Origin</tt> parameter with a
--   value of <tt>AWS_CLOUDHSM</tt>. The CloudHSM cluster that is
--   associated with the custom key store must have at least two active
--   HSMs, each in a different Availability Zone in the Region.
--   
--   This parameter is valid only for symmetric KMS keys and regional KMS
--   keys. You cannot create an asymmetric KMS key or a multi-Region key in
--   a custom key store.
--   
--   To find the ID of a custom key store, use the DescribeCustomKeyStores
--   operation.
--   
--   The response includes the custom key store ID and the ID of the
--   CloudHSM cluster.
--   
--   This operation is part of the <a>Custom Key Store feature</a> feature
--   in KMS, which combines the convenience and extensive integration of
--   KMS with the isolation and control of a single-tenant key store.
--   
--   <a>$sel:bypassPolicyLockoutSafetyCheck:CreateKey'</a>,
--   <a>createKey_bypassPolicyLockoutSafetyCheck</a> - A flag to indicate
--   whether to bypass the key policy lockout safety check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the /<i>Key Management Service Developer
--   Guide</i>/ .
--   
--   Use this parameter only when you include a policy in the request and
--   you intend to prevent the principal that is making the request from
--   making a subsequent PutKeyPolicy request on the KMS key.
--   
--   The default value is false.
--   
--   <a>$sel:tags:CreateKey'</a>, <a>createKey_tags</a> - Assigns one or
--   more tags to the KMS key. Use this parameter to tag the KMS key when
--   it is created. To tag an existing KMS key, use the TagResource
--   operation.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   To use this parameter, you must have <a>kms:TagResource</a> permission
--   in an IAM policy.
--   
--   Each tag consists of a tag key and a tag value. Both the tag key and
--   the tag value are required, but the tag value can be an empty (null)
--   string. You cannot have more than one tag on a KMS key with the same
--   tag key. If you specify an existing tag key with a different tag
--   value, KMS replaces the current tag value with the specified one.
--   
--   When you add tags to an Amazon Web Services resource, Amazon Web
--   Services generates a cost allocation report with usage and costs
--   aggregated by tags. Tags can also be used to control access to a KMS
--   key. For details, see <a>Tagging Keys</a>.
--   
--   <a>$sel:description:CreateKey'</a>, <a>createKey_description</a> - A
--   description of the KMS key.
--   
--   Use a description that helps you decide whether the KMS key is
--   appropriate for a task. The default value is an empty string (no
--   description).
--   
--   To set or change the description after the key is created, use
--   UpdateKeyDescription.
--   
--   <a>$sel:policy:CreateKey'</a>, <a>createKey_policy</a> - The key
--   policy to attach to the KMS key.
--   
--   If you provide a key policy, it must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must allow the principal that is making the
--   <tt>CreateKey</tt> request to make a subsequent PutKeyPolicy request
--   on the KMS key. This reduces the risk that the KMS key becomes
--   unmanageable. For more information, refer to the scenario in the
--   <a>Default Key Policy</a> section of the /<i>Key Management Service
--   Developer Guide</i>/ .</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /Amazon Web Services Identity and Access Management
--   User Guide/.</li>
--   </ul>
--   
--   If you do not provide a key policy, KMS attaches a default key policy
--   to the KMS key. For more information, see <a>Default Key Policy</a> in
--   the <i>Key Management Service Developer Guide</i>.
--   
--   The key policy size quota is 32 kilobytes (32768 bytes).
--   
--   For help writing and formatting a JSON policy document, see the <a>IAM
--   JSON Policy Reference</a> in the /<i>Identity and Access Management
--   User Guide</i>/ .
--   
--   <a>$sel:keySpec:CreateKey'</a>, <a>createKey_keySpec</a> - Specifies
--   the type of KMS key to create. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, creates a KMS key with a 256-bit symmetric
--   key for encryption and decryption. For help choosing a key spec for
--   your KMS key, see <a>How to Choose Your KMS key Configuration</a> in
--   the /<i>Key Management Service Developer Guide</i>/ .
--   
--   The <tt>KeySpec</tt> determines whether the KMS key contains a
--   symmetric key or an asymmetric key pair. It also determines the
--   encryption algorithms or signing algorithms that the KMS key supports.
--   You can't change the <tt>KeySpec</tt> after the KMS key is created. To
--   further restrict the algorithms that can be used with the KMS key, use
--   a condition key in its key policy or IAM policy. For more information,
--   see <a>kms:EncryptionAlgorithm</a> or <a>kms:Signing Algorithm</a> in
--   the /<i>Key Management Service Developer Guide</i>/ .
--   
--   <a>Amazon Web Services services that are integrated with KMS</a> use
--   symmetric KMS keys to protect your data. These services do not support
--   asymmetric KMS keys. For help determining whether a KMS key is
--   symmetric or asymmetric, see <a>Identifying Symmetric and Asymmetric
--   KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
--   
--   KMS supports the following key specs for KMS keys:
--   
--   <ul>
--   <li>Symmetric key (default)<ul><li><tt>SYMMETRIC_DEFAULT</tt>
--   (AES-256-GCM)</li></ul></li>
--   <li>Asymmetric RSA key
--   pairs<ul><li><pre>RSA_2048</pre></li><li><pre>RSA_3072</pre></li><li><pre>RSA_4096</pre></li></ul></li>
--   <li>Asymmetric NIST-recommended elliptic curve key
--   pairs<ul><li><tt>ECC_NIST_P256</tt>
--   (secp256r1)</li><li><tt>ECC_NIST_P384</tt>
--   (secp384r1)</li><li><tt>ECC_NIST_P521</tt> (secp521r1)</li></ul></li>
--   <li>Other asymmetric elliptic curve key
--   pairs<ul><li><tt>ECC_SECG_P256K1</tt> (secp256k1), commonly used for
--   cryptocurrencies.</li></ul></li>
--   </ul>
--   
--   <a>$sel:customerMasterKeySpec:CreateKey'</a>,
--   <a>createKey_customerMasterKeySpec</a> - Instead, use the
--   <tt>KeySpec</tt> parameter.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> parameters
--   work the same way. Only the names differ. We recommend that you use
--   <tt>KeySpec</tt> parameter in your code. However, to avoid breaking
--   changes, KMS will support both parameters.
--   
--   <a>$sel:keyUsage:CreateKey'</a>, <a>createKey_keyUsage</a> -
--   Determines the <a>cryptographic operations</a> for which you can use
--   the KMS key. The default value is <tt>ENCRYPT_DECRYPT</tt>. This
--   parameter is required only for asymmetric KMS keys. You can't change
--   the <tt>KeyUsage</tt> value after the KMS key is created.
--   
--   Select only one valid value.
--   
--   <ul>
--   <li>For symmetric KMS keys, omit the parameter or specify
--   <tt>ENCRYPT_DECRYPT</tt>.</li>
--   <li>For asymmetric KMS keys with RSA key material, specify
--   <tt>ENCRYPT_DECRYPT</tt> or <tt>SIGN_VERIFY</tt>.</li>
--   <li>For asymmetric KMS keys with ECC key material, specify
--   <tt>SIGN_VERIFY</tt>.</li>
--   </ul>
newCreateKey :: CreateKey

-- | The source of the key material for the KMS key. You cannot change the
--   origin after you create the KMS key. The default is <tt>AWS_KMS</tt>,
--   which means that KMS creates the key material.
--   
--   To create a KMS key with no key material (for imported key material),
--   set the value to <tt>EXTERNAL</tt>. For more information about
--   importing key material into KMS, see <a>Importing Key Material</a> in
--   the <i>Key Management Service Developer Guide</i>. This value is valid
--   only for symmetric KMS keys.
--   
--   To create a KMS key in an KMS <a>custom key store</a> and create its
--   key material in the associated CloudHSM cluster, set this value to
--   <tt>AWS_CLOUDHSM</tt>. You must also use the <tt>CustomKeyStoreId</tt>
--   parameter to identify the custom key store. This value is valid only
--   for symmetric KMS keys.
createKey_origin :: Lens' CreateKey (Maybe OriginType)

-- | Creates a multi-Region primary key that you can replicate into other
--   Amazon Web Services Regions. You cannot change this value after you
--   create the KMS key.
--   
--   For a multi-Region key, set this parameter to <tt>True</tt>. For a
--   single-Region KMS key, omit this parameter or set it to
--   <tt>False</tt>. The default value is <tt>False</tt>.
--   
--   This operation supports <i>multi-Region keys</i>, an KMS feature that
--   lets you create multiple interoperable KMS keys in different Amazon
--   Web Services Regions. Because these KMS keys have the same key ID, key
--   material, and other metadata, you can use them interchangeably to
--   encrypt data in one Amazon Web Services Region and decrypt it in a
--   different Amazon Web Services Region without re-encrypting the data or
--   making a cross-Region call. For more information about multi-Region
--   keys, see <a>Using multi-Region keys</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   This value creates a <i>primary key</i>, not a replica. To create a
--   /replica key/, use the ReplicateKey operation.
--   
--   You can create a symmetric or asymmetric multi-Region key, and you can
--   create a multi-Region key with imported key material. However, you
--   cannot create a multi-Region key in a custom key store.
createKey_multiRegion :: Lens' CreateKey (Maybe Bool)

-- | Creates the KMS key in the specified <a>custom key store</a> and the
--   key material in its associated CloudHSM cluster. To create a KMS key
--   in a custom key store, you must also specify the <tt>Origin</tt>
--   parameter with a value of <tt>AWS_CLOUDHSM</tt>. The CloudHSM cluster
--   that is associated with the custom key store must have at least two
--   active HSMs, each in a different Availability Zone in the Region.
--   
--   This parameter is valid only for symmetric KMS keys and regional KMS
--   keys. You cannot create an asymmetric KMS key or a multi-Region key in
--   a custom key store.
--   
--   To find the ID of a custom key store, use the DescribeCustomKeyStores
--   operation.
--   
--   The response includes the custom key store ID and the ID of the
--   CloudHSM cluster.
--   
--   This operation is part of the <a>Custom Key Store feature</a> feature
--   in KMS, which combines the convenience and extensive integration of
--   KMS with the isolation and control of a single-tenant key store.
createKey_customKeyStoreId :: Lens' CreateKey (Maybe Text)

-- | A flag to indicate whether to bypass the key policy lockout safety
--   check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the /<i>Key Management Service Developer
--   Guide</i>/ .
--   
--   Use this parameter only when you include a policy in the request and
--   you intend to prevent the principal that is making the request from
--   making a subsequent PutKeyPolicy request on the KMS key.
--   
--   The default value is false.
createKey_bypassPolicyLockoutSafetyCheck :: Lens' CreateKey (Maybe Bool)

-- | Assigns one or more tags to the KMS key. Use this parameter to tag the
--   KMS key when it is created. To tag an existing KMS key, use the
--   TagResource operation.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   To use this parameter, you must have <a>kms:TagResource</a> permission
--   in an IAM policy.
--   
--   Each tag consists of a tag key and a tag value. Both the tag key and
--   the tag value are required, but the tag value can be an empty (null)
--   string. You cannot have more than one tag on a KMS key with the same
--   tag key. If you specify an existing tag key with a different tag
--   value, KMS replaces the current tag value with the specified one.
--   
--   When you add tags to an Amazon Web Services resource, Amazon Web
--   Services generates a cost allocation report with usage and costs
--   aggregated by tags. Tags can also be used to control access to a KMS
--   key. For details, see <a>Tagging Keys</a>.
createKey_tags :: Lens' CreateKey (Maybe [Tag])

-- | A description of the KMS key.
--   
--   Use a description that helps you decide whether the KMS key is
--   appropriate for a task. The default value is an empty string (no
--   description).
--   
--   To set or change the description after the key is created, use
--   UpdateKeyDescription.
createKey_description :: Lens' CreateKey (Maybe Text)

-- | The key policy to attach to the KMS key.
--   
--   If you provide a key policy, it must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must allow the principal that is making the
--   <tt>CreateKey</tt> request to make a subsequent PutKeyPolicy request
--   on the KMS key. This reduces the risk that the KMS key becomes
--   unmanageable. For more information, refer to the scenario in the
--   <a>Default Key Policy</a> section of the /<i>Key Management Service
--   Developer Guide</i>/ .</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /Amazon Web Services Identity and Access Management
--   User Guide/.</li>
--   </ul>
--   
--   If you do not provide a key policy, KMS attaches a default key policy
--   to the KMS key. For more information, see <a>Default Key Policy</a> in
--   the <i>Key Management Service Developer Guide</i>.
--   
--   The key policy size quota is 32 kilobytes (32768 bytes).
--   
--   For help writing and formatting a JSON policy document, see the <a>IAM
--   JSON Policy Reference</a> in the /<i>Identity and Access Management
--   User Guide</i>/ .
createKey_policy :: Lens' CreateKey (Maybe Text)

-- | Specifies the type of KMS key to create. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, creates a KMS key with a 256-bit symmetric
--   key for encryption and decryption. For help choosing a key spec for
--   your KMS key, see <a>How to Choose Your KMS key Configuration</a> in
--   the /<i>Key Management Service Developer Guide</i>/ .
--   
--   The <tt>KeySpec</tt> determines whether the KMS key contains a
--   symmetric key or an asymmetric key pair. It also determines the
--   encryption algorithms or signing algorithms that the KMS key supports.
--   You can't change the <tt>KeySpec</tt> after the KMS key is created. To
--   further restrict the algorithms that can be used with the KMS key, use
--   a condition key in its key policy or IAM policy. For more information,
--   see <a>kms:EncryptionAlgorithm</a> or <a>kms:Signing Algorithm</a> in
--   the /<i>Key Management Service Developer Guide</i>/ .
--   
--   <a>Amazon Web Services services that are integrated with KMS</a> use
--   symmetric KMS keys to protect your data. These services do not support
--   asymmetric KMS keys. For help determining whether a KMS key is
--   symmetric or asymmetric, see <a>Identifying Symmetric and Asymmetric
--   KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
--   
--   KMS supports the following key specs for KMS keys:
--   
--   <ul>
--   <li>Symmetric key (default)<ul><li><tt>SYMMETRIC_DEFAULT</tt>
--   (AES-256-GCM)</li></ul></li>
--   <li>Asymmetric RSA key
--   pairs<ul><li><pre>RSA_2048</pre></li><li><pre>RSA_3072</pre></li><li><pre>RSA_4096</pre></li></ul></li>
--   <li>Asymmetric NIST-recommended elliptic curve key
--   pairs<ul><li><tt>ECC_NIST_P256</tt>
--   (secp256r1)</li><li><tt>ECC_NIST_P384</tt>
--   (secp384r1)</li><li><tt>ECC_NIST_P521</tt> (secp521r1)</li></ul></li>
--   <li>Other asymmetric elliptic curve key
--   pairs<ul><li><tt>ECC_SECG_P256K1</tt> (secp256k1), commonly used for
--   cryptocurrencies.</li></ul></li>
--   </ul>
createKey_keySpec :: Lens' CreateKey (Maybe KeySpec)

-- | Instead, use the <tt>KeySpec</tt> parameter.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> parameters
--   work the same way. Only the names differ. We recommend that you use
--   <tt>KeySpec</tt> parameter in your code. However, to avoid breaking
--   changes, KMS will support both parameters.
createKey_customerMasterKeySpec :: Lens' CreateKey (Maybe CustomerMasterKeySpec)

-- | Determines the <a>cryptographic operations</a> for which you can use
--   the KMS key. The default value is <tt>ENCRYPT_DECRYPT</tt>. This
--   parameter is required only for asymmetric KMS keys. You can't change
--   the <tt>KeyUsage</tt> value after the KMS key is created.
--   
--   Select only one valid value.
--   
--   <ul>
--   <li>For symmetric KMS keys, omit the parameter or specify
--   <tt>ENCRYPT_DECRYPT</tt>.</li>
--   <li>For asymmetric KMS keys with RSA key material, specify
--   <tt>ENCRYPT_DECRYPT</tt> or <tt>SIGN_VERIFY</tt>.</li>
--   <li>For asymmetric KMS keys with ECC key material, specify
--   <tt>SIGN_VERIFY</tt>.</li>
--   </ul>
createKey_keyUsage :: Lens' CreateKey (Maybe KeyUsageType)

-- | <i>See:</i> <a>newCreateKeyResponse</a> smart constructor.
data CreateKeyResponse
CreateKeyResponse' :: Maybe KeyMetadata -> Int -> CreateKeyResponse

-- | Metadata associated with the KMS key.
[$sel:keyMetadata:CreateKeyResponse'] :: CreateKeyResponse -> Maybe KeyMetadata

-- | The response's http status code.
[$sel:httpStatus:CreateKeyResponse'] :: CreateKeyResponse -> Int

-- | Create a value of <a>CreateKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyMetadata:CreateKeyResponse'</a>,
--   <a>createKeyResponse_keyMetadata</a> - Metadata associated with the
--   KMS key.
--   
--   <a>$sel:httpStatus:CreateKeyResponse'</a>,
--   <a>createKeyResponse_httpStatus</a> - The response's http status code.
newCreateKeyResponse :: Int -> CreateKeyResponse

-- | Metadata associated with the KMS key.
createKeyResponse_keyMetadata :: Lens' CreateKeyResponse (Maybe KeyMetadata)

-- | The response's http status code.
createKeyResponse_httpStatus :: Lens' CreateKeyResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.CreateKey.CreateKey
instance GHC.Show.Show Network.AWS.KMS.CreateKey.CreateKey
instance GHC.Read.Read Network.AWS.KMS.CreateKey.CreateKey
instance GHC.Classes.Eq Network.AWS.KMS.CreateKey.CreateKey
instance GHC.Generics.Generic Network.AWS.KMS.CreateKey.CreateKeyResponse
instance GHC.Show.Show Network.AWS.KMS.CreateKey.CreateKeyResponse
instance GHC.Read.Read Network.AWS.KMS.CreateKey.CreateKeyResponse
instance GHC.Classes.Eq Network.AWS.KMS.CreateKey.CreateKeyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.CreateKey.CreateKey
instance Control.DeepSeq.NFData Network.AWS.KMS.CreateKey.CreateKeyResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.CreateKey.CreateKey
instance Control.DeepSeq.NFData Network.AWS.KMS.CreateKey.CreateKey
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.CreateKey.CreateKey
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.CreateKey.CreateKey
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.CreateKey.CreateKey
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.CreateKey.CreateKey


-- | Adds a grant to a KMS key.
--   
--   A <i>grant</i> is a policy instrument that allows Amazon Web Services
--   principals to use KMS keys in cryptographic operations. It also can
--   allow them to view a KMS key (DescribeKey) and create and manage
--   grants. When authorizing access to a KMS key, grants are considered
--   along with key policies and IAM policies. Grants are often used for
--   temporary permissions because you can create one, use its permissions,
--   and delete it without changing your key policies or IAM policies.
--   
--   For detailed information about grants, including grant terminology,
--   see <a>Using grants</a> in the /<i>Key Management Service Developer
--   Guide</i>/ . For examples of working with grants in several
--   programming languages, see <a>Programming grants</a>.
--   
--   The <tt>CreateGrant</tt> operation returns a <tt>GrantToken</tt> and a
--   <tt>GrantId</tt>.
--   
--   <ul>
--   <li>When you create, retire, or revoke a grant, there might be a brief
--   delay, usually less than five minutes, until the grant is available
--   throughout KMS. This state is known as <i>eventual consistency</i>.
--   Once the grant has achieved eventual consistency, the grantee
--   principal can use the permissions in the grant without identifying the
--   grant.However, to use the permissions in the grant immediately, use
--   the <tt>GrantToken</tt> that <tt>CreateGrant</tt> returns. For
--   details, see <a>Using a grant token</a> in the /<i>Key Management
--   Service Developer Guide</i>/ .</li>
--   <li>The <tt>CreateGrant</tt> operation also returns a
--   <tt>GrantId</tt>. You can use the <tt>GrantId</tt> and a key
--   identifier to identify the grant in the RetireGrant and RevokeGrant
--   operations. To find the grant ID, use the ListGrants or
--   ListRetirableGrants operations.</li>
--   </ul>
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: Yes. To perform this operation on a KMS key
--   in a different Amazon Web Services account, specify the key ARN in the
--   value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>: <a>kms:CreateGrant</a> (key policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>ListGrants</li>
--   <li>ListRetirableGrants</li>
--   <li>RetireGrant</li>
--   <li>RevokeGrant</li>
--   </ul>
module Network.AWS.KMS.CreateGrant

-- | <i>See:</i> <a>newCreateGrant</a> smart constructor.
data CreateGrant
CreateGrant' :: Maybe GrantConstraints -> Maybe [Text] -> Maybe Text -> Maybe Text -> Text -> Text -> [GrantOperation] -> CreateGrant

-- | Specifies a grant constraint.
--   
--   KMS supports the <tt>EncryptionContextEquals</tt> and
--   <tt>EncryptionContextSubset</tt> grant constraints. Each constraint
--   value can include up to 8 encryption context pairs. The encryption
--   context value in each constraint cannot exceed 384 characters.
--   
--   These grant constraints allow the permissions in the grant only when
--   the encryption context in the request matches
--   (<tt>EncryptionContextEquals</tt>) or includes
--   (<tt>EncryptionContextSubset</tt>) the encryption context specified in
--   this structure. For information about grant constraints, see <a>Using
--   grant constraints</a> in the <i>Key Management Service Developer
--   Guide</i>. For more information about encryption context, see
--   <a>Encryption Context</a> in the /<i>Key Management Service Developer
--   Guide</i>/ .
--   
--   The encryption context grant constraints are supported only on
--   operations that include an encryption context. You cannot use an
--   encryption context grant constraint for cryptographic operations with
--   asymmetric KMS keys or for management operations, such as DescribeKey
--   or RetireGrant.
[$sel:constraints:CreateGrant'] :: CreateGrant -> Maybe GrantConstraints

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantTokens:CreateGrant'] :: CreateGrant -> Maybe [Text]

-- | A friendly name for the grant. Use this value to prevent the
--   unintended creation of duplicate grants when retrying this request.
--   
--   When this value is absent, all <tt>CreateGrant</tt> requests result in
--   a new grant with a unique <tt>GrantId</tt> even if all the supplied
--   parameters are identical. This can result in unintended duplicates
--   when you retry the <tt>CreateGrant</tt> request.
--   
--   When this value is present, you can retry a <tt>CreateGrant</tt>
--   request with identical parameters; if the grant already exists, the
--   original <tt>GrantId</tt> is returned without creating a new grant.
--   Note that the returned grant token is unique with every
--   <tt>CreateGrant</tt> request, even when a duplicate <tt>GrantId</tt>
--   is returned. All grant tokens for the same grant ID can be used
--   interchangeably.
[$sel:name:CreateGrant'] :: CreateGrant -> Maybe Text

-- | The principal that has permission to use the RetireGrant operation to
--   retire the grant.
--   
--   To specify the principal, use the <a>Amazon Resource Name (ARN)</a> of
--   an Amazon Web Services principal. Valid Amazon Web Services principals
--   include Amazon Web Services accounts (root), IAM users, federated
--   users, and assumed role users. For examples of the ARN syntax to use
--   for specifying a principal, see <a>Amazon Web Services Identity and
--   Access Management (IAM)</a> in the Example ARNs section of the /Amazon
--   Web Services General Reference/.
--   
--   The grant determines the retiring principal. Other principals might
--   have permission to retire the grant or revoke the grant. For details,
--   see RevokeGrant and <a>Retiring and revoking grants</a> in the <i>Key
--   Management Service Developer Guide</i>.
[$sel:retiringPrincipal:CreateGrant'] :: CreateGrant -> Maybe Text

-- | Identifies the KMS key for the grant. The grant gives principals
--   permission to use this KMS key.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:CreateGrant'] :: CreateGrant -> Text

-- | The identity that gets the permissions specified in the grant.
--   
--   To specify the principal, use the <a>Amazon Resource Name (ARN)</a> of
--   an Amazon Web Services principal. Valid Amazon Web Services principals
--   include Amazon Web Services accounts (root), IAM users, IAM roles,
--   federated users, and assumed role users. For examples of the ARN
--   syntax to use for specifying a principal, see <a>Amazon Web Services
--   Identity and Access Management (IAM)</a> in the Example ARNs section
--   of the /Amazon Web Services General Reference/.
[$sel:granteePrincipal:CreateGrant'] :: CreateGrant -> Text

-- | A list of operations that the grant permits.
--   
--   The operation must be supported on the KMS key. For example, you
--   cannot create a grant for a symmetric KMS key that allows the Sign
--   operation, or a grant for an asymmetric KMS key that allows the
--   GenerateDataKey operation. If you try, KMS returns a
--   <tt>ValidationError</tt> exception. For details, see <a>Grant
--   operations</a> in the <i>Key Management Service Developer Guide</i>.
[$sel:operations:CreateGrant'] :: CreateGrant -> [GrantOperation]

-- | Create a value of <a>CreateGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:constraints:CreateGrant'</a>, <a>createGrant_constraints</a> -
--   Specifies a grant constraint.
--   
--   KMS supports the <tt>EncryptionContextEquals</tt> and
--   <tt>EncryptionContextSubset</tt> grant constraints. Each constraint
--   value can include up to 8 encryption context pairs. The encryption
--   context value in each constraint cannot exceed 384 characters.
--   
--   These grant constraints allow the permissions in the grant only when
--   the encryption context in the request matches
--   (<tt>EncryptionContextEquals</tt>) or includes
--   (<tt>EncryptionContextSubset</tt>) the encryption context specified in
--   this structure. For information about grant constraints, see <a>Using
--   grant constraints</a> in the <i>Key Management Service Developer
--   Guide</i>. For more information about encryption context, see
--   <a>Encryption Context</a> in the /<i>Key Management Service Developer
--   Guide</i>/ .
--   
--   The encryption context grant constraints are supported only on
--   operations that include an encryption context. You cannot use an
--   encryption context grant constraint for cryptographic operations with
--   asymmetric KMS keys or for management operations, such as DescribeKey
--   or RetireGrant.
--   
--   <a>$sel:grantTokens:CreateGrant'</a>, <a>createGrant_grantTokens</a> -
--   A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:name:CreateGrant'</a>, <a>createGrant_name</a> - A friendly
--   name for the grant. Use this value to prevent the unintended creation
--   of duplicate grants when retrying this request.
--   
--   When this value is absent, all <tt>CreateGrant</tt> requests result in
--   a new grant with a unique <tt>GrantId</tt> even if all the supplied
--   parameters are identical. This can result in unintended duplicates
--   when you retry the <tt>CreateGrant</tt> request.
--   
--   When this value is present, you can retry a <tt>CreateGrant</tt>
--   request with identical parameters; if the grant already exists, the
--   original <tt>GrantId</tt> is returned without creating a new grant.
--   Note that the returned grant token is unique with every
--   <tt>CreateGrant</tt> request, even when a duplicate <tt>GrantId</tt>
--   is returned. All grant tokens for the same grant ID can be used
--   interchangeably.
--   
--   <a>$sel:retiringPrincipal:CreateGrant'</a>,
--   <a>createGrant_retiringPrincipal</a> - The principal that has
--   permission to use the RetireGrant operation to retire the grant.
--   
--   To specify the principal, use the <a>Amazon Resource Name (ARN)</a> of
--   an Amazon Web Services principal. Valid Amazon Web Services principals
--   include Amazon Web Services accounts (root), IAM users, federated
--   users, and assumed role users. For examples of the ARN syntax to use
--   for specifying a principal, see <a>Amazon Web Services Identity and
--   Access Management (IAM)</a> in the Example ARNs section of the /Amazon
--   Web Services General Reference/.
--   
--   The grant determines the retiring principal. Other principals might
--   have permission to retire the grant or revoke the grant. For details,
--   see RevokeGrant and <a>Retiring and revoking grants</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keyId:CreateGrant'</a>, <a>createGrant_keyId</a> - Identifies
--   the KMS key for the grant. The grant gives principals permission to
--   use this KMS key.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:granteePrincipal:CreateGrant'</a>,
--   <a>createGrant_granteePrincipal</a> - The identity that gets the
--   permissions specified in the grant.
--   
--   To specify the principal, use the <a>Amazon Resource Name (ARN)</a> of
--   an Amazon Web Services principal. Valid Amazon Web Services principals
--   include Amazon Web Services accounts (root), IAM users, IAM roles,
--   federated users, and assumed role users. For examples of the ARN
--   syntax to use for specifying a principal, see <a>Amazon Web Services
--   Identity and Access Management (IAM)</a> in the Example ARNs section
--   of the /Amazon Web Services General Reference/.
--   
--   <a>$sel:operations:CreateGrant'</a>, <a>createGrant_operations</a> - A
--   list of operations that the grant permits.
--   
--   The operation must be supported on the KMS key. For example, you
--   cannot create a grant for a symmetric KMS key that allows the Sign
--   operation, or a grant for an asymmetric KMS key that allows the
--   GenerateDataKey operation. If you try, KMS returns a
--   <tt>ValidationError</tt> exception. For details, see <a>Grant
--   operations</a> in the <i>Key Management Service Developer Guide</i>.
newCreateGrant :: Text -> Text -> CreateGrant

-- | Specifies a grant constraint.
--   
--   KMS supports the <tt>EncryptionContextEquals</tt> and
--   <tt>EncryptionContextSubset</tt> grant constraints. Each constraint
--   value can include up to 8 encryption context pairs. The encryption
--   context value in each constraint cannot exceed 384 characters.
--   
--   These grant constraints allow the permissions in the grant only when
--   the encryption context in the request matches
--   (<tt>EncryptionContextEquals</tt>) or includes
--   (<tt>EncryptionContextSubset</tt>) the encryption context specified in
--   this structure. For information about grant constraints, see <a>Using
--   grant constraints</a> in the <i>Key Management Service Developer
--   Guide</i>. For more information about encryption context, see
--   <a>Encryption Context</a> in the /<i>Key Management Service Developer
--   Guide</i>/ .
--   
--   The encryption context grant constraints are supported only on
--   operations that include an encryption context. You cannot use an
--   encryption context grant constraint for cryptographic operations with
--   asymmetric KMS keys or for management operations, such as DescribeKey
--   or RetireGrant.
createGrant_constraints :: Lens' CreateGrant (Maybe GrantConstraints)

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
createGrant_grantTokens :: Lens' CreateGrant (Maybe [Text])

-- | A friendly name for the grant. Use this value to prevent the
--   unintended creation of duplicate grants when retrying this request.
--   
--   When this value is absent, all <tt>CreateGrant</tt> requests result in
--   a new grant with a unique <tt>GrantId</tt> even if all the supplied
--   parameters are identical. This can result in unintended duplicates
--   when you retry the <tt>CreateGrant</tt> request.
--   
--   When this value is present, you can retry a <tt>CreateGrant</tt>
--   request with identical parameters; if the grant already exists, the
--   original <tt>GrantId</tt> is returned without creating a new grant.
--   Note that the returned grant token is unique with every
--   <tt>CreateGrant</tt> request, even when a duplicate <tt>GrantId</tt>
--   is returned. All grant tokens for the same grant ID can be used
--   interchangeably.
createGrant_name :: Lens' CreateGrant (Maybe Text)

-- | The principal that has permission to use the RetireGrant operation to
--   retire the grant.
--   
--   To specify the principal, use the <a>Amazon Resource Name (ARN)</a> of
--   an Amazon Web Services principal. Valid Amazon Web Services principals
--   include Amazon Web Services accounts (root), IAM users, federated
--   users, and assumed role users. For examples of the ARN syntax to use
--   for specifying a principal, see <a>Amazon Web Services Identity and
--   Access Management (IAM)</a> in the Example ARNs section of the /Amazon
--   Web Services General Reference/.
--   
--   The grant determines the retiring principal. Other principals might
--   have permission to retire the grant or revoke the grant. For details,
--   see RevokeGrant and <a>Retiring and revoking grants</a> in the <i>Key
--   Management Service Developer Guide</i>.
createGrant_retiringPrincipal :: Lens' CreateGrant (Maybe Text)

-- | Identifies the KMS key for the grant. The grant gives principals
--   permission to use this KMS key.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
createGrant_keyId :: Lens' CreateGrant Text

-- | The identity that gets the permissions specified in the grant.
--   
--   To specify the principal, use the <a>Amazon Resource Name (ARN)</a> of
--   an Amazon Web Services principal. Valid Amazon Web Services principals
--   include Amazon Web Services accounts (root), IAM users, IAM roles,
--   federated users, and assumed role users. For examples of the ARN
--   syntax to use for specifying a principal, see <a>Amazon Web Services
--   Identity and Access Management (IAM)</a> in the Example ARNs section
--   of the /Amazon Web Services General Reference/.
createGrant_granteePrincipal :: Lens' CreateGrant Text

-- | A list of operations that the grant permits.
--   
--   The operation must be supported on the KMS key. For example, you
--   cannot create a grant for a symmetric KMS key that allows the Sign
--   operation, or a grant for an asymmetric KMS key that allows the
--   GenerateDataKey operation. If you try, KMS returns a
--   <tt>ValidationError</tt> exception. For details, see <a>Grant
--   operations</a> in the <i>Key Management Service Developer Guide</i>.
createGrant_operations :: Lens' CreateGrant [GrantOperation]

-- | <i>See:</i> <a>newCreateGrantResponse</a> smart constructor.
data CreateGrantResponse
CreateGrantResponse' :: Maybe Text -> Maybe Text -> Int -> CreateGrantResponse

-- | The grant token.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantToken:CreateGrantResponse'] :: CreateGrantResponse -> Maybe Text

-- | The unique identifier for the grant.
--   
--   You can use the <tt>GrantId</tt> in a ListGrants, RetireGrant, or
--   RevokeGrant operation.
[$sel:grantId:CreateGrantResponse'] :: CreateGrantResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateGrantResponse'] :: CreateGrantResponse -> Int

-- | Create a value of <a>CreateGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantToken:CreateGrantResponse'</a>,
--   <a>createGrantResponse_grantToken</a> - The grant token.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:grantId:CreateGrantResponse'</a>,
--   <a>createGrantResponse_grantId</a> - The unique identifier for the
--   grant.
--   
--   You can use the <tt>GrantId</tt> in a ListGrants, RetireGrant, or
--   RevokeGrant operation.
--   
--   <a>$sel:httpStatus:CreateGrantResponse'</a>,
--   <a>createGrantResponse_httpStatus</a> - The response's http status
--   code.
newCreateGrantResponse :: Int -> CreateGrantResponse

-- | The grant token.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
createGrantResponse_grantToken :: Lens' CreateGrantResponse (Maybe Text)

-- | The unique identifier for the grant.
--   
--   You can use the <tt>GrantId</tt> in a ListGrants, RetireGrant, or
--   RevokeGrant operation.
createGrantResponse_grantId :: Lens' CreateGrantResponse (Maybe Text)

-- | The response's http status code.
createGrantResponse_httpStatus :: Lens' CreateGrantResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.CreateGrant.CreateGrant
instance GHC.Show.Show Network.AWS.KMS.CreateGrant.CreateGrant
instance GHC.Read.Read Network.AWS.KMS.CreateGrant.CreateGrant
instance GHC.Classes.Eq Network.AWS.KMS.CreateGrant.CreateGrant
instance GHC.Generics.Generic Network.AWS.KMS.CreateGrant.CreateGrantResponse
instance GHC.Show.Show Network.AWS.KMS.CreateGrant.CreateGrantResponse
instance GHC.Read.Read Network.AWS.KMS.CreateGrant.CreateGrantResponse
instance GHC.Classes.Eq Network.AWS.KMS.CreateGrant.CreateGrantResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.CreateGrant.CreateGrant
instance Control.DeepSeq.NFData Network.AWS.KMS.CreateGrant.CreateGrantResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.CreateGrant.CreateGrant
instance Control.DeepSeq.NFData Network.AWS.KMS.CreateGrant.CreateGrant
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.CreateGrant.CreateGrant
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.CreateGrant.CreateGrant
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.CreateGrant.CreateGrant
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.CreateGrant.CreateGrant


-- | Creates a <a>custom key store</a> that is associated with an
--   <a>CloudHSM cluster</a> that you own and manage.
--   
--   This operation is part of the <a>Custom Key Store feature</a> feature
--   in KMS, which combines the convenience and extensive integration of
--   KMS with the isolation and control of a single-tenant key store.
--   
--   Before you create the custom key store, you must assemble the required
--   elements, including an CloudHSM cluster that fulfills the requirements
--   for a custom key store. For details about the required elements, see
--   <a>Assemble the Prerequisites</a> in the <i>Key Management Service
--   Developer Guide</i>.
--   
--   When the operation completes successfully, it returns the ID of the
--   new custom key store. Before you can use your new custom key store,
--   you need to use the ConnectCustomKeyStore operation to connect the new
--   key store to its CloudHSM cluster. Even if you are not going to use
--   your custom key store immediately, you might want to connect it to
--   verify that all settings are correct and then disconnect it until you
--   are ready to use it.
--   
--   For help with failures, see <a>Troubleshooting a Custom Key Store</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   custom key store in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:CreateCustomKeyStore</a> (IAM
--   policy).
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>ConnectCustomKeyStore</li>
--   <li>DeleteCustomKeyStore</li>
--   <li>DescribeCustomKeyStores</li>
--   <li>DisconnectCustomKeyStore</li>
--   <li>UpdateCustomKeyStore</li>
--   </ul>
module Network.AWS.KMS.CreateCustomKeyStore

-- | <i>See:</i> <a>newCreateCustomKeyStore</a> smart constructor.
data CreateCustomKeyStore
CreateCustomKeyStore' :: Text -> Text -> Text -> Sensitive Text -> CreateCustomKeyStore

-- | Specifies a friendly name for the custom key store. The name must be
--   unique in your Amazon Web Services account.
[$sel:customKeyStoreName:CreateCustomKeyStore'] :: CreateCustomKeyStore -> Text

-- | Identifies the CloudHSM cluster for the custom key store. Enter the
--   cluster ID of any active CloudHSM cluster that is not already
--   associated with a custom key store. To find the cluster ID, use the
--   <a>DescribeClusters</a> operation.
[$sel:cloudHsmClusterId:CreateCustomKeyStore'] :: CreateCustomKeyStore -> Text

-- | Enter the content of the trust anchor certificate for the cluster.
--   This is the content of the <tt>customerCA.crt</tt> file that you
--   created when you <a>initialized the cluster</a>.
[$sel:trustAnchorCertificate:CreateCustomKeyStore'] :: CreateCustomKeyStore -> Text

-- | Enter the password of the <a>kmsuser crypto user (CU) account</a> in
--   the specified CloudHSM cluster. KMS logs into the cluster as this user
--   to manage key material on your behalf.
--   
--   The password must be a string of 7 to 32 characters. Its value is case
--   sensitive.
--   
--   This parameter tells KMS the <tt>kmsuser</tt> account password; it
--   does not change the password in the CloudHSM cluster.
[$sel:keyStorePassword:CreateCustomKeyStore'] :: CreateCustomKeyStore -> Sensitive Text

-- | Create a value of <a>CreateCustomKeyStore</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreName:CreateCustomKeyStore'</a>,
--   <a>createCustomKeyStore_customKeyStoreName</a> - Specifies a friendly
--   name for the custom key store. The name must be unique in your Amazon
--   Web Services account.
--   
--   <a>$sel:cloudHsmClusterId:CreateCustomKeyStore'</a>,
--   <a>createCustomKeyStore_cloudHsmClusterId</a> - Identifies the
--   CloudHSM cluster for the custom key store. Enter the cluster ID of any
--   active CloudHSM cluster that is not already associated with a custom
--   key store. To find the cluster ID, use the <a>DescribeClusters</a>
--   operation.
--   
--   <a>$sel:trustAnchorCertificate:CreateCustomKeyStore'</a>,
--   <a>createCustomKeyStore_trustAnchorCertificate</a> - Enter the content
--   of the trust anchor certificate for the cluster. This is the content
--   of the <tt>customerCA.crt</tt> file that you created when you
--   <a>initialized the cluster</a>.
--   
--   <a>$sel:keyStorePassword:CreateCustomKeyStore'</a>,
--   <a>createCustomKeyStore_keyStorePassword</a> - Enter the password of
--   the <a>kmsuser crypto user (CU) account</a> in the specified CloudHSM
--   cluster. KMS logs into the cluster as this user to manage key material
--   on your behalf.
--   
--   The password must be a string of 7 to 32 characters. Its value is case
--   sensitive.
--   
--   This parameter tells KMS the <tt>kmsuser</tt> account password; it
--   does not change the password in the CloudHSM cluster.
newCreateCustomKeyStore :: Text -> Text -> Text -> Text -> CreateCustomKeyStore

-- | Specifies a friendly name for the custom key store. The name must be
--   unique in your Amazon Web Services account.
createCustomKeyStore_customKeyStoreName :: Lens' CreateCustomKeyStore Text

-- | Identifies the CloudHSM cluster for the custom key store. Enter the
--   cluster ID of any active CloudHSM cluster that is not already
--   associated with a custom key store. To find the cluster ID, use the
--   <a>DescribeClusters</a> operation.
createCustomKeyStore_cloudHsmClusterId :: Lens' CreateCustomKeyStore Text

-- | Enter the content of the trust anchor certificate for the cluster.
--   This is the content of the <tt>customerCA.crt</tt> file that you
--   created when you <a>initialized the cluster</a>.
createCustomKeyStore_trustAnchorCertificate :: Lens' CreateCustomKeyStore Text

-- | Enter the password of the <a>kmsuser crypto user (CU) account</a> in
--   the specified CloudHSM cluster. KMS logs into the cluster as this user
--   to manage key material on your behalf.
--   
--   The password must be a string of 7 to 32 characters. Its value is case
--   sensitive.
--   
--   This parameter tells KMS the <tt>kmsuser</tt> account password; it
--   does not change the password in the CloudHSM cluster.
createCustomKeyStore_keyStorePassword :: Lens' CreateCustomKeyStore Text

-- | <i>See:</i> <a>newCreateCustomKeyStoreResponse</a> smart constructor.
data CreateCustomKeyStoreResponse
CreateCustomKeyStoreResponse' :: Maybe Text -> Int -> CreateCustomKeyStoreResponse

-- | A unique identifier for the new custom key store.
[$sel:customKeyStoreId:CreateCustomKeyStoreResponse'] :: CreateCustomKeyStoreResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateCustomKeyStoreResponse'] :: CreateCustomKeyStoreResponse -> Int

-- | Create a value of <a>CreateCustomKeyStoreResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreId:CreateCustomKeyStoreResponse'</a>,
--   <a>createCustomKeyStoreResponse_customKeyStoreId</a> - A unique
--   identifier for the new custom key store.
--   
--   <a>$sel:httpStatus:CreateCustomKeyStoreResponse'</a>,
--   <a>createCustomKeyStoreResponse_httpStatus</a> - The response's http
--   status code.
newCreateCustomKeyStoreResponse :: Int -> CreateCustomKeyStoreResponse

-- | A unique identifier for the new custom key store.
createCustomKeyStoreResponse_customKeyStoreId :: Lens' CreateCustomKeyStoreResponse (Maybe Text)

-- | The response's http status code.
createCustomKeyStoreResponse_httpStatus :: Lens' CreateCustomKeyStoreResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStore
instance GHC.Show.Show Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStore
instance GHC.Classes.Eq Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStore
instance GHC.Generics.Generic Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStoreResponse
instance GHC.Show.Show Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStoreResponse
instance GHC.Read.Read Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStoreResponse
instance GHC.Classes.Eq Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStoreResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStore
instance Control.DeepSeq.NFData Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStoreResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStore
instance Control.DeepSeq.NFData Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStore
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStore
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStore
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStore
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.CreateCustomKeyStore.CreateCustomKeyStore


-- | Creates a friendly name for a KMS key.
--   
--   Adding, deleting, or updating an alias can allow or deny permission to
--   the KMS key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   You can use an alias to identify a KMS key in the KMS console, in the
--   DescribeKey operation and in <a>cryptographic operations</a>, such as
--   Encrypt and GenerateDataKey. You can also change the KMS key that's
--   associated with the alias (UpdateAlias) or delete the alias
--   (DeleteAlias) at any time. These operations don't affect the
--   underlying KMS key.
--   
--   You can associate the alias with any customer managed key in the same
--   Amazon Web Services Region. Each alias is associated with only one KMS
--   key at a time, but a KMS key can have multiple aliases. A valid KMS
--   key is required. You can't create an alias without a KMS key.
--   
--   The alias must be unique in the account and Region, but you can have
--   aliases with the same name in different Regions. For detailed
--   information about aliases, see <a>Using aliases</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   This operation does not return a response. To get the alias that you
--   created, use the ListAliases operation.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on an
--   alias in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>
--   
--   <ul>
--   <li><a>kms:CreateAlias</a> on the alias (IAM policy).</li>
--   <li><a>kms:CreateAlias</a> on the KMS key (key policy).</li>
--   </ul>
--   
--   For details, see <a>Controlling access to aliases</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>DeleteAlias</li>
--   <li>ListAliases</li>
--   <li>UpdateAlias</li>
--   </ul>
module Network.AWS.KMS.CreateAlias

-- | <i>See:</i> <a>newCreateAlias</a> smart constructor.
data CreateAlias
CreateAlias' :: Text -> Text -> CreateAlias

-- | Specifies the alias name. This value must begin with <tt>alias/</tt>
--   followed by a name, such as <tt>alias/ExampleAlias</tt>.
--   
--   The <tt>AliasName</tt> value must be string of 1-256 characters. It
--   can contain only alphanumeric characters, forward slashes (/),
--   underscores (_), and dashes (-). The alias name cannot begin with
--   <tt>alias/aws/</tt>. The <tt>alias/aws/</tt> prefix is reserved for
--   <a>Amazon Web Services managed keys</a>.
[$sel:aliasName:CreateAlias'] :: CreateAlias -> Text

-- | Associates the alias with the specified <a>customer managed key</a>.
--   The KMS key must be in the same Amazon Web Services Region.
--   
--   A valid key ID is required. If you supply a null or empty string
--   value, this operation returns an error.
--   
--   For help finding the key ID and ARN, see <a>Finding the Key ID and
--   ARN</a> in the /<i>Key Management Service Developer Guide</i>/ .
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:targetKeyId:CreateAlias'] :: CreateAlias -> Text

-- | Create a value of <a>CreateAlias</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:aliasName:CreateAlias'</a>, <a>createAlias_aliasName</a> -
--   Specifies the alias name. This value must begin with <tt>alias/</tt>
--   followed by a name, such as <tt>alias/ExampleAlias</tt>.
--   
--   The <tt>AliasName</tt> value must be string of 1-256 characters. It
--   can contain only alphanumeric characters, forward slashes (/),
--   underscores (_), and dashes (-). The alias name cannot begin with
--   <tt>alias/aws/</tt>. The <tt>alias/aws/</tt> prefix is reserved for
--   <a>Amazon Web Services managed keys</a>.
--   
--   <a>$sel:targetKeyId:CreateAlias'</a>, <a>createAlias_targetKeyId</a> -
--   Associates the alias with the specified <a>customer managed key</a>.
--   The KMS key must be in the same Amazon Web Services Region.
--   
--   A valid key ID is required. If you supply a null or empty string
--   value, this operation returns an error.
--   
--   For help finding the key ID and ARN, see <a>Finding the Key ID and
--   ARN</a> in the /<i>Key Management Service Developer Guide</i>/ .
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newCreateAlias :: Text -> Text -> CreateAlias

-- | Specifies the alias name. This value must begin with <tt>alias/</tt>
--   followed by a name, such as <tt>alias/ExampleAlias</tt>.
--   
--   The <tt>AliasName</tt> value must be string of 1-256 characters. It
--   can contain only alphanumeric characters, forward slashes (/),
--   underscores (_), and dashes (-). The alias name cannot begin with
--   <tt>alias/aws/</tt>. The <tt>alias/aws/</tt> prefix is reserved for
--   <a>Amazon Web Services managed keys</a>.
createAlias_aliasName :: Lens' CreateAlias Text

-- | Associates the alias with the specified <a>customer managed key</a>.
--   The KMS key must be in the same Amazon Web Services Region.
--   
--   A valid key ID is required. If you supply a null or empty string
--   value, this operation returns an error.
--   
--   For help finding the key ID and ARN, see <a>Finding the Key ID and
--   ARN</a> in the /<i>Key Management Service Developer Guide</i>/ .
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
createAlias_targetKeyId :: Lens' CreateAlias Text

-- | <i>See:</i> <a>newCreateAliasResponse</a> smart constructor.
data CreateAliasResponse
CreateAliasResponse' :: CreateAliasResponse

-- | Create a value of <a>CreateAliasResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newCreateAliasResponse :: CreateAliasResponse
instance GHC.Generics.Generic Network.AWS.KMS.CreateAlias.CreateAlias
instance GHC.Show.Show Network.AWS.KMS.CreateAlias.CreateAlias
instance GHC.Read.Read Network.AWS.KMS.CreateAlias.CreateAlias
instance GHC.Classes.Eq Network.AWS.KMS.CreateAlias.CreateAlias
instance GHC.Generics.Generic Network.AWS.KMS.CreateAlias.CreateAliasResponse
instance GHC.Show.Show Network.AWS.KMS.CreateAlias.CreateAliasResponse
instance GHC.Read.Read Network.AWS.KMS.CreateAlias.CreateAliasResponse
instance GHC.Classes.Eq Network.AWS.KMS.CreateAlias.CreateAliasResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.CreateAlias.CreateAlias
instance Control.DeepSeq.NFData Network.AWS.KMS.CreateAlias.CreateAliasResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.CreateAlias.CreateAlias
instance Control.DeepSeq.NFData Network.AWS.KMS.CreateAlias.CreateAlias
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.CreateAlias.CreateAlias
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.CreateAlias.CreateAlias
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.CreateAlias.CreateAlias
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.CreateAlias.CreateAlias


-- | Connects or reconnects a <a>custom key store</a> to its associated
--   CloudHSM cluster.
--   
--   The custom key store must be connected before you can create KMS keys
--   in the key store or use the KMS keys it contains. You can disconnect
--   and reconnect a custom key store at any time.
--   
--   To connect a custom key store, its associated CloudHSM cluster must
--   have at least one active HSM. To get the number of active HSMs in a
--   cluster, use the <a>DescribeClusters</a> operation. To add HSMs to the
--   cluster, use the <a>CreateHsm</a> operation. Also, the <a>kmsuser
--   crypto user</a> (CU) must not be logged into the cluster. This
--   prevents KMS from using this account to log in.
--   
--   The connection process can take an extended amount of time to
--   complete; up to 20 minutes. This operation starts the connection
--   process, but it does not wait for it to complete. When it succeeds,
--   this operation quickly returns an HTTP 200 response and a JSON object
--   with no properties. However, this response does not indicate that the
--   custom key store is connected. To get the connection state of the
--   custom key store, use the DescribeCustomKeyStores operation.
--   
--   During the connection process, KMS finds the CloudHSM cluster that is
--   associated with the custom key store, creates the connection
--   infrastructure, connects to the cluster, logs into the CloudHSM client
--   as the <tt>kmsuser</tt> CU, and rotates its password.
--   
--   The <tt>ConnectCustomKeyStore</tt> operation might fail for various
--   reasons. To find the reason, use the DescribeCustomKeyStores operation
--   and see the <tt>ConnectionErrorCode</tt> in the response. For help
--   interpreting the <tt>ConnectionErrorCode</tt>, see
--   CustomKeyStoresListEntry.
--   
--   To fix the failure, use the DisconnectCustomKeyStore operation to
--   disconnect the custom key store, correct the error, use the
--   UpdateCustomKeyStore operation if necessary, and then use
--   <tt>ConnectCustomKeyStore</tt> again.
--   
--   If you are having trouble connecting or disconnecting a custom key
--   store, see <a>Troubleshooting a Custom Key Store</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   custom key store in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:ConnectCustomKeyStore</a> (IAM
--   policy)
--   
--   <b>Related operations</b>
--   
--   <ul>
--   <li>CreateCustomKeyStore</li>
--   <li>DeleteCustomKeyStore</li>
--   <li>DescribeCustomKeyStores</li>
--   <li>DisconnectCustomKeyStore</li>
--   <li>UpdateCustomKeyStore</li>
--   </ul>
module Network.AWS.KMS.ConnectCustomKeyStore

-- | <i>See:</i> <a>newConnectCustomKeyStore</a> smart constructor.
data ConnectCustomKeyStore
ConnectCustomKeyStore' :: Text -> ConnectCustomKeyStore

-- | Enter the key store ID of the custom key store that you want to
--   connect. To find the ID of a custom key store, use the
--   DescribeCustomKeyStores operation.
[$sel:customKeyStoreId:ConnectCustomKeyStore'] :: ConnectCustomKeyStore -> Text

-- | Create a value of <a>ConnectCustomKeyStore</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreId:ConnectCustomKeyStore'</a>,
--   <a>connectCustomKeyStore_customKeyStoreId</a> - Enter the key store ID
--   of the custom key store that you want to connect. To find the ID of a
--   custom key store, use the DescribeCustomKeyStores operation.
newConnectCustomKeyStore :: Text -> ConnectCustomKeyStore

-- | Enter the key store ID of the custom key store that you want to
--   connect. To find the ID of a custom key store, use the
--   DescribeCustomKeyStores operation.
connectCustomKeyStore_customKeyStoreId :: Lens' ConnectCustomKeyStore Text

-- | <i>See:</i> <a>newConnectCustomKeyStoreResponse</a> smart constructor.
data ConnectCustomKeyStoreResponse
ConnectCustomKeyStoreResponse' :: Int -> ConnectCustomKeyStoreResponse

-- | The response's http status code.
[$sel:httpStatus:ConnectCustomKeyStoreResponse'] :: ConnectCustomKeyStoreResponse -> Int

-- | Create a value of <a>ConnectCustomKeyStoreResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:ConnectCustomKeyStoreResponse'</a>,
--   <a>connectCustomKeyStoreResponse_httpStatus</a> - The response's http
--   status code.
newConnectCustomKeyStoreResponse :: Int -> ConnectCustomKeyStoreResponse

-- | The response's http status code.
connectCustomKeyStoreResponse_httpStatus :: Lens' ConnectCustomKeyStoreResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStore
instance GHC.Show.Show Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStore
instance GHC.Read.Read Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStore
instance GHC.Classes.Eq Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStore
instance GHC.Generics.Generic Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStoreResponse
instance GHC.Show.Show Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStoreResponse
instance GHC.Read.Read Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStoreResponse
instance GHC.Classes.Eq Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStoreResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStore
instance Control.DeepSeq.NFData Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStoreResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStore
instance Control.DeepSeq.NFData Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStore
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStore
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStore
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStore
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.ConnectCustomKeyStore.ConnectCustomKeyStore


-- | Cancels the deletion of a KMS key. When this operation succeeds, the
--   key state of the KMS key is <tt>Disabled</tt>. To enable the KMS key,
--   use EnableKey.
--   
--   For more information about scheduling and canceling deletion of a KMS
--   key, see <a>Deleting KMS keys</a> in the <i>Key Management Service
--   Developer Guide</i>.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:CancelKeyDeletion</a> (key policy)
--   
--   <b>Related operations</b>: ScheduleKeyDeletion
module Network.AWS.KMS.CancelKeyDeletion

-- | <i>See:</i> <a>newCancelKeyDeletion</a> smart constructor.
data CancelKeyDeletion
CancelKeyDeletion' :: Text -> CancelKeyDeletion

-- | Identifies the KMS key whose deletion is being canceled.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:CancelKeyDeletion'] :: CancelKeyDeletion -> Text

-- | Create a value of <a>CancelKeyDeletion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:CancelKeyDeletion'</a>, <a>cancelKeyDeletion_keyId</a> -
--   Identifies the KMS key whose deletion is being canceled.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newCancelKeyDeletion :: Text -> CancelKeyDeletion

-- | Identifies the KMS key whose deletion is being canceled.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
cancelKeyDeletion_keyId :: Lens' CancelKeyDeletion Text

-- | <i>See:</i> <a>newCancelKeyDeletionResponse</a> smart constructor.
data CancelKeyDeletionResponse
CancelKeyDeletionResponse' :: Maybe Text -> Int -> CancelKeyDeletionResponse

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key whose
--   deletion is canceled.
[$sel:keyId:CancelKeyDeletionResponse'] :: CancelKeyDeletionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CancelKeyDeletionResponse'] :: CancelKeyDeletionResponse -> Int

-- | Create a value of <a>CancelKeyDeletionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:CancelKeyDeletion'</a>,
--   <a>cancelKeyDeletionResponse_keyId</a> - The Amazon Resource Name
--   (<a>key ARN</a>) of the KMS key whose deletion is canceled.
--   
--   <a>$sel:httpStatus:CancelKeyDeletionResponse'</a>,
--   <a>cancelKeyDeletionResponse_httpStatus</a> - The response's http
--   status code.
newCancelKeyDeletionResponse :: Int -> CancelKeyDeletionResponse

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key whose
--   deletion is canceled.
cancelKeyDeletionResponse_keyId :: Lens' CancelKeyDeletionResponse (Maybe Text)

-- | The response's http status code.
cancelKeyDeletionResponse_httpStatus :: Lens' CancelKeyDeletionResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletion
instance GHC.Show.Show Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletion
instance GHC.Read.Read Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletion
instance GHC.Classes.Eq Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletion
instance GHC.Generics.Generic Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletionResponse
instance GHC.Show.Show Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletionResponse
instance GHC.Read.Read Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletionResponse
instance GHC.Classes.Eq Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletion
instance Control.DeepSeq.NFData Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletionResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletion
instance Control.DeepSeq.NFData Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletion
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletion
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletion
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletion
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.CancelKeyDeletion.CancelKeyDeletion


-- | Deletes tags from a <a>customer managed key</a>. To delete a tag,
--   specify the tag key and the KMS key.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   When it succeeds, the <tt>UntagResource</tt> operation doesn't return
--   any output. Also, if the specified tag key isn't found on the KMS key,
--   it doesn't throw an exception or return a response. To confirm that
--   the operation worked, use the ListResourceTags operation.
--   
--   For information about using tags in KMS, see <a>Tagging keys</a>. For
--   general information about tags, including the format and syntax, see
--   <a>Tagging Amazon Web Services resources</a> in the <i>Amazon Web
--   Services General Reference</i>.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:UntagResource</a> (key policy)
--   
--   <b>Related operations</b>
--   
--   <ul>
--   <li>CreateKey</li>
--   <li>ListResourceTags</li>
--   <li>ReplicateKey</li>
--   <li>TagResource</li>
--   </ul>
module Network.AWS.KMS.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | Identifies the KMS key from which you are removing tags.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:UntagResource'] :: UntagResource -> Text

-- | One or more tag keys. Specify only the tag keys, not the tag values.
[$sel:tagKeys:UntagResource'] :: UntagResource -> [Text]

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:UntagResource'</a>, <a>untagResource_keyId</a> -
--   Identifies the KMS key from which you are removing tags.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - One
--   or more tag keys. Specify only the tag keys, not the tag values.
newUntagResource :: Text -> UntagResource

-- | Identifies the KMS key from which you are removing tags.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
untagResource_keyId :: Lens' UntagResource Text

-- | One or more tag keys. Specify only the tag keys, not the tag values.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newUntagResourceResponse :: UntagResourceResponse
instance GHC.Generics.Generic Network.AWS.KMS.UntagResource.UntagResource
instance GHC.Show.Show Network.AWS.KMS.UntagResource.UntagResource
instance GHC.Read.Read Network.AWS.KMS.UntagResource.UntagResource
instance GHC.Classes.Eq Network.AWS.KMS.UntagResource.UntagResource
instance GHC.Generics.Generic Network.AWS.KMS.UntagResource.UntagResourceResponse
instance GHC.Show.Show Network.AWS.KMS.UntagResource.UntagResourceResponse
instance GHC.Read.Read Network.AWS.KMS.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Network.AWS.KMS.UntagResource.UntagResourceResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.UntagResource.UntagResource
instance Control.DeepSeq.NFData Network.AWS.KMS.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.UntagResource.UntagResource
instance Control.DeepSeq.NFData Network.AWS.KMS.UntagResource.UntagResource
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.UntagResource.UntagResource
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.UntagResource.UntagResource
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.UntagResource.UntagResource
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.UntagResource.UntagResource


-- | Associates an existing KMS alias with a different KMS key. Each alias
--   is associated with only one KMS key at a time, although a KMS key can
--   have multiple aliases. The alias and the KMS key must be in the same
--   Amazon Web Services account and Region.
--   
--   Adding, deleting, or updating an alias can allow or deny permission to
--   the KMS key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   The current and new KMS key must be the same type (both symmetric or
--   both asymmetric), and they must have the same key usage
--   (<tt>ENCRYPT_DECRYPT</tt> or <tt>SIGN_VERIFY</tt>). This restriction
--   prevents errors in code that uses aliases. If you must assign an alias
--   to a different type of KMS key, use DeleteAlias to delete the old
--   alias and CreateAlias to create a new alias.
--   
--   You cannot use <tt>UpdateAlias</tt> to change an alias name. To change
--   an alias name, use DeleteAlias to delete the old alias and CreateAlias
--   to create a new alias.
--   
--   Because an alias is not a property of a KMS key, you can create,
--   update, and delete the aliases of a KMS key without affecting the KMS
--   key. Also, aliases do not appear in the response from the DescribeKey
--   operation. To get the aliases of all KMS keys in the account, use the
--   ListAliases operation.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>
--   
--   <ul>
--   <li><a>kms:UpdateAlias</a> on the alias (IAM policy).</li>
--   <li><a>kms:UpdateAlias</a> on the current KMS key (key policy).</li>
--   <li><a>kms:UpdateAlias</a> on the new KMS key (key policy).</li>
--   </ul>
--   
--   For details, see <a>Controlling access to aliases</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>CreateAlias</li>
--   <li>DeleteAlias</li>
--   <li>ListAliases</li>
--   </ul>
module Network.AWS.KMS.UpdateAlias

-- | <i>See:</i> <a>newUpdateAlias</a> smart constructor.
data UpdateAlias
UpdateAlias' :: Text -> Text -> UpdateAlias

-- | Identifies the alias that is changing its KMS key. This value must
--   begin with <tt>alias/</tt> followed by the alias name, such as
--   <tt>alias/ExampleAlias</tt>. You cannot use UpdateAlias to change the
--   alias name.
[$sel:aliasName:UpdateAlias'] :: UpdateAlias -> Text

-- | Identifies the <a>customer managed key</a> to associate with the
--   alias. You don't have permission to associate an alias with an
--   <a>Amazon Web Services managed key</a>.
--   
--   The KMS key must be in the same Amazon Web Services account and Region
--   as the alias. Also, the new target KMS key must be the same type as
--   the current target KMS key (both symmetric or both asymmetric) and
--   they must have the same key usage.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   To verify that the alias is mapped to the correct KMS key, use
--   ListAliases.
[$sel:targetKeyId:UpdateAlias'] :: UpdateAlias -> Text

-- | Create a value of <a>UpdateAlias</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:aliasName:UpdateAlias'</a>, <a>updateAlias_aliasName</a> -
--   Identifies the alias that is changing its KMS key. This value must
--   begin with <tt>alias/</tt> followed by the alias name, such as
--   <tt>alias/ExampleAlias</tt>. You cannot use UpdateAlias to change the
--   alias name.
--   
--   <a>$sel:targetKeyId:UpdateAlias'</a>, <a>updateAlias_targetKeyId</a> -
--   Identifies the <a>customer managed key</a> to associate with the
--   alias. You don't have permission to associate an alias with an
--   <a>Amazon Web Services managed key</a>.
--   
--   The KMS key must be in the same Amazon Web Services account and Region
--   as the alias. Also, the new target KMS key must be the same type as
--   the current target KMS key (both symmetric or both asymmetric) and
--   they must have the same key usage.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   To verify that the alias is mapped to the correct KMS key, use
--   ListAliases.
newUpdateAlias :: Text -> Text -> UpdateAlias

-- | Identifies the alias that is changing its KMS key. This value must
--   begin with <tt>alias/</tt> followed by the alias name, such as
--   <tt>alias/ExampleAlias</tt>. You cannot use UpdateAlias to change the
--   alias name.
updateAlias_aliasName :: Lens' UpdateAlias Text

-- | Identifies the <a>customer managed key</a> to associate with the
--   alias. You don't have permission to associate an alias with an
--   <a>Amazon Web Services managed key</a>.
--   
--   The KMS key must be in the same Amazon Web Services account and Region
--   as the alias. Also, the new target KMS key must be the same type as
--   the current target KMS key (both symmetric or both asymmetric) and
--   they must have the same key usage.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   To verify that the alias is mapped to the correct KMS key, use
--   ListAliases.
updateAlias_targetKeyId :: Lens' UpdateAlias Text

-- | <i>See:</i> <a>newUpdateAliasResponse</a> smart constructor.
data UpdateAliasResponse
UpdateAliasResponse' :: UpdateAliasResponse

-- | Create a value of <a>UpdateAliasResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newUpdateAliasResponse :: UpdateAliasResponse
instance GHC.Generics.Generic Network.AWS.KMS.UpdateAlias.UpdateAlias
instance GHC.Show.Show Network.AWS.KMS.UpdateAlias.UpdateAlias
instance GHC.Read.Read Network.AWS.KMS.UpdateAlias.UpdateAlias
instance GHC.Classes.Eq Network.AWS.KMS.UpdateAlias.UpdateAlias
instance GHC.Generics.Generic Network.AWS.KMS.UpdateAlias.UpdateAliasResponse
instance GHC.Show.Show Network.AWS.KMS.UpdateAlias.UpdateAliasResponse
instance GHC.Read.Read Network.AWS.KMS.UpdateAlias.UpdateAliasResponse
instance GHC.Classes.Eq Network.AWS.KMS.UpdateAlias.UpdateAliasResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.UpdateAlias.UpdateAlias
instance Control.DeepSeq.NFData Network.AWS.KMS.UpdateAlias.UpdateAliasResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.UpdateAlias.UpdateAlias
instance Control.DeepSeq.NFData Network.AWS.KMS.UpdateAlias.UpdateAlias
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.UpdateAlias.UpdateAlias
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.UpdateAlias.UpdateAlias
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.UpdateAlias.UpdateAlias
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.UpdateAlias.UpdateAlias


-- | Changes the properties of a custom key store. Use the
--   <tt>CustomKeyStoreId</tt> parameter to identify the custom key store
--   you want to edit. Use the remaining parameters to change the
--   properties of the custom key store.
--   
--   You can only update a custom key store that is disconnected. To
--   disconnect the custom key store, use DisconnectCustomKeyStore. To
--   reconnect the custom key store after the update completes, use
--   ConnectCustomKeyStore. To find the connection state of a custom key
--   store, use the DescribeCustomKeyStores operation.
--   
--   Use the parameters of <tt>UpdateCustomKeyStore</tt> to edit your
--   keystore settings.
--   
--   <ul>
--   <li>Use the <b>NewCustomKeyStoreName</b> parameter to change the
--   friendly name of the custom key store to the value that you
--   specify.</li>
--   <li>Use the <b>KeyStorePassword</b> parameter tell KMS the current
--   password of the <a>kmsuser crypto user (CU)</a> in the associated
--   CloudHSM cluster. You can use this parameter to <a>fix connection
--   failures</a> that occur when KMS cannot log into the associated
--   cluster because the <tt>kmsuser</tt> password has changed. This value
--   does not change the password in the CloudHSM cluster.</li>
--   <li>Use the <b>CloudHsmClusterId</b> parameter to associate the custom
--   key store with a different, but related, CloudHSM cluster. You can use
--   this parameter to repair a custom key store if its CloudHSM cluster
--   becomes corrupted or is deleted, or when you need to create or restore
--   a cluster from a backup.</li>
--   </ul>
--   
--   If the operation succeeds, it returns a JSON object with no
--   properties.
--   
--   This operation is part of the <a>Custom Key Store feature</a> feature
--   in KMS, which combines the convenience and extensive integration of
--   KMS with the isolation and control of a single-tenant key store.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   custom key store in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:UpdateCustomKeyStore</a> (IAM
--   policy)
--   
--   <b>Related operations:</b>
--   
--   <ul>
--   <li>ConnectCustomKeyStore</li>
--   <li>CreateCustomKeyStore</li>
--   <li>DeleteCustomKeyStore</li>
--   <li>DescribeCustomKeyStores</li>
--   <li>DisconnectCustomKeyStore</li>
--   </ul>
module Network.AWS.KMS.UpdateCustomKeyStore

-- | <i>See:</i> <a>newUpdateCustomKeyStore</a> smart constructor.
data UpdateCustomKeyStore
UpdateCustomKeyStore' :: Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Text -> UpdateCustomKeyStore

-- | Enter the current password of the <tt>kmsuser</tt> crypto user (CU) in
--   the CloudHSM cluster that is associated with the custom key store.
--   
--   This parameter tells KMS the current password of the <tt>kmsuser</tt>
--   crypto user (CU). It does not set or change the password of any users
--   in the CloudHSM cluster.
[$sel:keyStorePassword:UpdateCustomKeyStore'] :: UpdateCustomKeyStore -> Maybe (Sensitive Text)

-- | Changes the friendly name of the custom key store to the value that
--   you specify. The custom key store name must be unique in the Amazon
--   Web Services account.
[$sel:newCustomKeyStoreName':UpdateCustomKeyStore'] :: UpdateCustomKeyStore -> Maybe Text

-- | Associates the custom key store with a related CloudHSM cluster.
--   
--   Enter the cluster ID of the cluster that you used to create the custom
--   key store or a cluster that shares a backup history and has the same
--   cluster certificate as the original cluster. You cannot use this
--   parameter to associate a custom key store with an unrelated cluster.
--   In addition, the replacement cluster must <a>fulfill the
--   requirements</a> for a cluster associated with a custom key store. To
--   view the cluster certificate of a cluster, use the
--   <a>DescribeClusters</a> operation.
[$sel:cloudHsmClusterId:UpdateCustomKeyStore'] :: UpdateCustomKeyStore -> Maybe Text

-- | Identifies the custom key store that you want to update. Enter the ID
--   of the custom key store. To find the ID of a custom key store, use the
--   DescribeCustomKeyStores operation.
[$sel:customKeyStoreId:UpdateCustomKeyStore'] :: UpdateCustomKeyStore -> Text

-- | Create a value of <a>UpdateCustomKeyStore</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyStorePassword:UpdateCustomKeyStore'</a>,
--   <a>updateCustomKeyStore_keyStorePassword</a> - Enter the current
--   password of the <tt>kmsuser</tt> crypto user (CU) in the CloudHSM
--   cluster that is associated with the custom key store.
--   
--   This parameter tells KMS the current password of the <tt>kmsuser</tt>
--   crypto user (CU). It does not set or change the password of any users
--   in the CloudHSM cluster.
--   
--   <a>$sel:newCustomKeyStoreName':UpdateCustomKeyStore'</a>,
--   <a>updateCustomKeyStore_newCustomKeyStoreName</a> - Changes the
--   friendly name of the custom key store to the value that you specify.
--   The custom key store name must be unique in the Amazon Web Services
--   account.
--   
--   <a>$sel:cloudHsmClusterId:UpdateCustomKeyStore'</a>,
--   <a>updateCustomKeyStore_cloudHsmClusterId</a> - Associates the custom
--   key store with a related CloudHSM cluster.
--   
--   Enter the cluster ID of the cluster that you used to create the custom
--   key store or a cluster that shares a backup history and has the same
--   cluster certificate as the original cluster. You cannot use this
--   parameter to associate a custom key store with an unrelated cluster.
--   In addition, the replacement cluster must <a>fulfill the
--   requirements</a> for a cluster associated with a custom key store. To
--   view the cluster certificate of a cluster, use the
--   <a>DescribeClusters</a> operation.
--   
--   <a>$sel:customKeyStoreId:UpdateCustomKeyStore'</a>,
--   <a>updateCustomKeyStore_customKeyStoreId</a> - Identifies the custom
--   key store that you want to update. Enter the ID of the custom key
--   store. To find the ID of a custom key store, use the
--   DescribeCustomKeyStores operation.
newUpdateCustomKeyStore :: Text -> UpdateCustomKeyStore

-- | Enter the current password of the <tt>kmsuser</tt> crypto user (CU) in
--   the CloudHSM cluster that is associated with the custom key store.
--   
--   This parameter tells KMS the current password of the <tt>kmsuser</tt>
--   crypto user (CU). It does not set or change the password of any users
--   in the CloudHSM cluster.
updateCustomKeyStore_keyStorePassword :: Lens' UpdateCustomKeyStore (Maybe Text)

-- | Changes the friendly name of the custom key store to the value that
--   you specify. The custom key store name must be unique in the Amazon
--   Web Services account.
updateCustomKeyStore_newCustomKeyStoreName :: Lens' UpdateCustomKeyStore (Maybe Text)

-- | Associates the custom key store with a related CloudHSM cluster.
--   
--   Enter the cluster ID of the cluster that you used to create the custom
--   key store or a cluster that shares a backup history and has the same
--   cluster certificate as the original cluster. You cannot use this
--   parameter to associate a custom key store with an unrelated cluster.
--   In addition, the replacement cluster must <a>fulfill the
--   requirements</a> for a cluster associated with a custom key store. To
--   view the cluster certificate of a cluster, use the
--   <a>DescribeClusters</a> operation.
updateCustomKeyStore_cloudHsmClusterId :: Lens' UpdateCustomKeyStore (Maybe Text)

-- | Identifies the custom key store that you want to update. Enter the ID
--   of the custom key store. To find the ID of a custom key store, use the
--   DescribeCustomKeyStores operation.
updateCustomKeyStore_customKeyStoreId :: Lens' UpdateCustomKeyStore Text

-- | <i>See:</i> <a>newUpdateCustomKeyStoreResponse</a> smart constructor.
data UpdateCustomKeyStoreResponse
UpdateCustomKeyStoreResponse' :: Int -> UpdateCustomKeyStoreResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateCustomKeyStoreResponse'] :: UpdateCustomKeyStoreResponse -> Int

-- | Create a value of <a>UpdateCustomKeyStoreResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateCustomKeyStoreResponse'</a>,
--   <a>updateCustomKeyStoreResponse_httpStatus</a> - The response's http
--   status code.
newUpdateCustomKeyStoreResponse :: Int -> UpdateCustomKeyStoreResponse

-- | The response's http status code.
updateCustomKeyStoreResponse_httpStatus :: Lens' UpdateCustomKeyStoreResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStore
instance GHC.Show.Show Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStore
instance GHC.Classes.Eq Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStore
instance GHC.Generics.Generic Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStoreResponse
instance GHC.Show.Show Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStoreResponse
instance GHC.Read.Read Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStoreResponse
instance GHC.Classes.Eq Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStoreResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStore
instance Control.DeepSeq.NFData Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStoreResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStore
instance Control.DeepSeq.NFData Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStore
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStore
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStore
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStore
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.UpdateCustomKeyStore.UpdateCustomKeyStore


-- | Updates the description of a KMS key. To see the description of a KMS
--   key, use DescribeKey.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: No. You cannot perform this operation on a
--   KMS key in a different Amazon Web Services account.
--   
--   <b>Required permissions</b>: <a>kms:UpdateKeyDescription</a> (key
--   policy)
--   
--   <b>Related operations</b>
--   
--   <ul>
--   <li>CreateKey</li>
--   <li>DescribeKey</li>
--   </ul>
module Network.AWS.KMS.UpdateKeyDescription

-- | <i>See:</i> <a>newUpdateKeyDescription</a> smart constructor.
data UpdateKeyDescription
UpdateKeyDescription' :: Text -> Text -> UpdateKeyDescription

-- | Updates the description of the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:UpdateKeyDescription'] :: UpdateKeyDescription -> Text

-- | New description for the KMS key.
[$sel:description:UpdateKeyDescription'] :: UpdateKeyDescription -> Text

-- | Create a value of <a>UpdateKeyDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:UpdateKeyDescription'</a>,
--   <a>updateKeyDescription_keyId</a> - Updates the description of the
--   specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:description:UpdateKeyDescription'</a>,
--   <a>updateKeyDescription_description</a> - New description for the KMS
--   key.
newUpdateKeyDescription :: Text -> Text -> UpdateKeyDescription

-- | Updates the description of the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
updateKeyDescription_keyId :: Lens' UpdateKeyDescription Text

-- | New description for the KMS key.
updateKeyDescription_description :: Lens' UpdateKeyDescription Text

-- | <i>See:</i> <a>newUpdateKeyDescriptionResponse</a> smart constructor.
data UpdateKeyDescriptionResponse
UpdateKeyDescriptionResponse' :: UpdateKeyDescriptionResponse

-- | Create a value of <a>UpdateKeyDescriptionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newUpdateKeyDescriptionResponse :: UpdateKeyDescriptionResponse
instance GHC.Generics.Generic Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescription
instance GHC.Show.Show Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescription
instance GHC.Read.Read Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescription
instance GHC.Classes.Eq Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescription
instance GHC.Generics.Generic Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescriptionResponse
instance GHC.Show.Show Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescriptionResponse
instance GHC.Read.Read Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescriptionResponse
instance GHC.Classes.Eq Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescriptionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescription
instance Control.DeepSeq.NFData Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescriptionResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescription
instance Control.DeepSeq.NFData Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescription
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescription
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescription
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescription
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.UpdateKeyDescription.UpdateKeyDescription


-- | Changes the primary key of a multi-Region key.
--   
--   This operation changes the replica key in the specified Region to a
--   primary key and changes the former primary key to a replica key. For
--   example, suppose you have a primary key in <tt>us-east-1</tt> and a
--   replica key in <tt>eu-west-2</tt>. If you run
--   <tt>UpdatePrimaryRegion</tt> with a <tt>PrimaryRegion</tt> value of
--   <tt>eu-west-2</tt>, the primary key is now the key in
--   <tt>eu-west-2</tt>, and the key in <tt>us-east-1</tt> becomes a
--   replica key. For details, see <a>Updating the primary Region</a> in
--   the <i>Key Management Service Developer Guide</i>.
--   
--   This operation supports <i>multi-Region keys</i>, an KMS feature that
--   lets you create multiple interoperable KMS keys in different Amazon
--   Web Services Regions. Because these KMS keys have the same key ID, key
--   material, and other metadata, you can use them interchangeably to
--   encrypt data in one Amazon Web Services Region and decrypt it in a
--   different Amazon Web Services Region without re-encrypting the data or
--   making a cross-Region call. For more information about multi-Region
--   keys, see <a>Using multi-Region keys</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   The <i>primary key</i> of a multi-Region key is the source for
--   properties that are always shared by primary and replica keys,
--   including the key material, <a>key ID</a>, <a>key spec</a>, <a>key
--   usage</a>, <a>key material origin</a>, and <a>automatic key
--   rotation</a>. It's the only key that can be replicated. You cannot
--   <a>delete the primary key</a> until all replica keys are deleted.
--   
--   The key ID and primary Region that you specify uniquely identify the
--   replica key that will become the primary key. The primary Region must
--   already have a replica key. This operation does not create a KMS key
--   in the specified Region. To find the replica keys, use the DescribeKey
--   operation on the primary key or any replica key. To create a replica
--   key, use the ReplicateKey operation.
--   
--   You can run this operation while using the affected multi-Region keys
--   in cryptographic operations. This operation should not delay,
--   interrupt, or cause failures in cryptographic operations.
--   
--   Even after this operation completes, the process of updating the
--   primary Region might still be in progress for a few more seconds.
--   Operations such as <tt>DescribeKey</tt> might display both the old and
--   new primary keys as replicas. The old and new primary keys have a
--   transient key state of <tt>Updating</tt>. The original key state is
--   restored when the update is complete. While the key state is
--   <tt>Updating</tt>, you can use the keys in cryptographic operations,
--   but you cannot replicate the new primary key or perform certain
--   management operations, such as enabling or disabling these keys. For
--   details about the <tt>Updating</tt> key state, see <a>Key state:
--   Effect on your KMS key</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   This operation does not return any output. To verify that primary key
--   is changed, use the DescribeKey operation.
--   
--   <b>Cross-account use</b>: No. You cannot use this operation in a
--   different Amazon Web Services account.
--   
--   <b>Required permissions</b>:
--   
--   <ul>
--   <li><tt>kms:UpdatePrimaryRegion</tt> on the current primary key (in
--   the primary key's Region). Include this permission primary key's key
--   policy.</li>
--   <li><tt>kms:UpdatePrimaryRegion</tt> on the current replica key (in
--   the replica key's Region). Include this permission in the replica
--   key's key policy.</li>
--   </ul>
--   
--   <b>Related operations</b>
--   
--   <ul>
--   <li>CreateKey</li>
--   <li>ReplicateKey</li>
--   </ul>
module Network.AWS.KMS.UpdatePrimaryRegion

-- | <i>See:</i> <a>newUpdatePrimaryRegion</a> smart constructor.
data UpdatePrimaryRegion
UpdatePrimaryRegion' :: Text -> Text -> UpdatePrimaryRegion

-- | Identifies the current primary key. When the operation completes, this
--   KMS key will be a replica key.
--   
--   Specify the key ID or key ARN of a multi-Region primary key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
[$sel:keyId:UpdatePrimaryRegion'] :: UpdatePrimaryRegion -> Text

-- | The Amazon Web Services Region of the new primary key. Enter the
--   Region ID, such as <tt>us-east-1</tt> or <tt>ap-southeast-2</tt>.
--   There must be an existing replica key in this Region.
--   
--   When the operation completes, the multi-Region key in this Region will
--   be the primary key.
[$sel:primaryRegion:UpdatePrimaryRegion'] :: UpdatePrimaryRegion -> Text

-- | Create a value of <a>UpdatePrimaryRegion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:UpdatePrimaryRegion'</a>,
--   <a>updatePrimaryRegion_keyId</a> - Identifies the current primary key.
--   When the operation completes, this KMS key will be a replica key.
--   
--   Specify the key ID or key ARN of a multi-Region primary key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:primaryRegion:UpdatePrimaryRegion'</a>,
--   <a>updatePrimaryRegion_primaryRegion</a> - The Amazon Web Services
--   Region of the new primary key. Enter the Region ID, such as
--   <tt>us-east-1</tt> or <tt>ap-southeast-2</tt>. There must be an
--   existing replica key in this Region.
--   
--   When the operation completes, the multi-Region key in this Region will
--   be the primary key.
newUpdatePrimaryRegion :: Text -> Text -> UpdatePrimaryRegion

-- | Identifies the current primary key. When the operation completes, this
--   KMS key will be a replica key.
--   
--   Specify the key ID or key ARN of a multi-Region primary key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
updatePrimaryRegion_keyId :: Lens' UpdatePrimaryRegion Text

-- | The Amazon Web Services Region of the new primary key. Enter the
--   Region ID, such as <tt>us-east-1</tt> or <tt>ap-southeast-2</tt>.
--   There must be an existing replica key in this Region.
--   
--   When the operation completes, the multi-Region key in this Region will
--   be the primary key.
updatePrimaryRegion_primaryRegion :: Lens' UpdatePrimaryRegion Text

-- | <i>See:</i> <a>newUpdatePrimaryRegionResponse</a> smart constructor.
data UpdatePrimaryRegionResponse
UpdatePrimaryRegionResponse' :: UpdatePrimaryRegionResponse

-- | Create a value of <a>UpdatePrimaryRegionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newUpdatePrimaryRegionResponse :: UpdatePrimaryRegionResponse
instance GHC.Generics.Generic Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegion
instance GHC.Show.Show Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegion
instance GHC.Read.Read Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegion
instance GHC.Classes.Eq Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegion
instance GHC.Generics.Generic Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegionResponse
instance GHC.Show.Show Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegionResponse
instance GHC.Read.Read Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegionResponse
instance GHC.Classes.Eq Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegion
instance Control.DeepSeq.NFData Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegionResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegion
instance Control.DeepSeq.NFData Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegion
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegion
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegion
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegion
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.UpdatePrimaryRegion.UpdatePrimaryRegion


-- | Verifies a digital signature that was generated by the Sign operation.
--   
--   Verification confirms that an authorized user signed the message with
--   the specified KMS key and signing algorithm, and the message hasn't
--   changed since it was signed. If the signature is verified, the value
--   of the <tt>SignatureValid</tt> field in the response is <tt>True</tt>.
--   If the signature verification fails, the <tt>Verify</tt> operation
--   fails with an <tt>KMSInvalidSignatureException</tt> exception.
--   
--   A digital signature is generated by using the private key in an
--   asymmetric KMS key. The signature is verified by using the public key
--   in the same asymmetric KMS key. For information about symmetric and
--   asymmetric KMS keys, see <a>Using Symmetric and Asymmetric KMS
--   keys</a> in the <i>Key Management Service Developer Guide</i>.
--   
--   To verify a digital signature, you can use the <tt>Verify</tt>
--   operation. Specify the same asymmetric KMS key, message, and signing
--   algorithm that were used to produce the signature.
--   
--   You can also verify the digital signature by using the public key of
--   the KMS key outside of KMS. Use the GetPublicKey operation to download
--   the public key in the asymmetric KMS key and then use the public key
--   to verify the signature outside of KMS. The advantage of using the
--   <tt>Verify</tt> operation is that it is performed within KMS. As a
--   result, it's easy to call, the operation is performed within the FIPS
--   boundary, it is logged in CloudTrail, and you can use key policy and
--   IAM policy to determine who is authorized to use the KMS key to verify
--   signatures.
--   
--   The KMS key that you use for this operation must be in a compatible
--   key state. For details, see <a>Key state: Effect on your KMS key</a>
--   in the <i>Key Management Service Developer Guide</i>.
--   
--   <b>Cross-account use</b>: Yes. To perform this operation with a KMS
--   key in a different Amazon Web Services account, specify the key ARN or
--   alias ARN in the value of the <tt>KeyId</tt> parameter.
--   
--   <b>Required permissions</b>: <a>kms:Verify</a> (key policy)
--   
--   <b>Related operations</b>: Sign
module Network.AWS.KMS.Verify

-- | <i>See:</i> <a>newVerify</a> smart constructor.
data Verify
Verify' :: Maybe [Text] -> Maybe MessageType -> Text -> Sensitive Base64 -> Base64 -> SigningAlgorithmSpec -> Verify

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
[$sel:grantTokens:Verify'] :: Verify -> Maybe [Text]

-- | Tells KMS whether the value of the <tt>Message</tt> parameter is a
--   message or message digest. The default value, RAW, indicates a
--   message. To indicate a message digest, enter <tt>DIGEST</tt>.
--   
--   Use the <tt>DIGEST</tt> value only when the value of the
--   <tt>Message</tt> parameter is a message digest. If you use the
--   <tt>DIGEST</tt> value with a raw message, the security of the
--   verification operation can be compromised.
[$sel:messageType:Verify'] :: Verify -> Maybe MessageType

-- | Identifies the asymmetric KMS key that will be used to verify the
--   signature. This must be the same KMS key that was used to generate the
--   signature. If you specify a different KMS key, the signature
--   verification fails.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
[$sel:keyId:Verify'] :: Verify -> Text

-- | Specifies the message that was signed. You can submit a raw message of
--   up to 4096 bytes, or a hash digest of the message. If you submit a
--   digest, use the <tt>MessageType</tt> parameter with a value of
--   <tt>DIGEST</tt>.
--   
--   If the message specified here is different from the message that was
--   signed, the signature verification fails. A message and its hash
--   digest are considered to be the same message.
[$sel:message:Verify'] :: Verify -> Sensitive Base64

-- | The signature that the <tt>Sign</tt> operation generated.
[$sel:signature:Verify'] :: Verify -> Base64

-- | The signing algorithm that was used to sign the message. If you submit
--   a different algorithm, the signature verification fails.
[$sel:signingAlgorithm:Verify'] :: Verify -> SigningAlgorithmSpec

-- | Create a value of <a>Verify</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:Verify'</a>, <a>verify_grantTokens</a> - A list of
--   grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:messageType:Verify'</a>, <a>verify_messageType</a> - Tells KMS
--   whether the value of the <tt>Message</tt> parameter is a message or
--   message digest. The default value, RAW, indicates a message. To
--   indicate a message digest, enter <tt>DIGEST</tt>.
--   
--   Use the <tt>DIGEST</tt> value only when the value of the
--   <tt>Message</tt> parameter is a message digest. If you use the
--   <tt>DIGEST</tt> value with a raw message, the security of the
--   verification operation can be compromised.
--   
--   <a>$sel:keyId:Verify'</a>, <a>verify_keyId</a> - Identifies the
--   asymmetric KMS key that will be used to verify the signature. This
--   must be the same KMS key that was used to generate the signature. If
--   you specify a different KMS key, the signature verification fails.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:message:Verify'</a>, <a>verify_message</a> - Specifies the
--   message that was signed. You can submit a raw message of up to 4096
--   bytes, or a hash digest of the message. If you submit a digest, use
--   the <tt>MessageType</tt> parameter with a value of <tt>DIGEST</tt>.
--   
--   If the message specified here is different from the message that was
--   signed, the signature verification fails. A message and its hash
--   digest are considered to be the same message.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:signature:Verify'</a>, <a>verify_signature</a> - The signature
--   that the <tt>Sign</tt> operation generated.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:signingAlgorithm:Verify'</a>, <a>verify_signingAlgorithm</a> -
--   The signing algorithm that was used to sign the message. If you submit
--   a different algorithm, the signature verification fails.
newVerify :: Text -> ByteString -> ByteString -> SigningAlgorithmSpec -> Verify

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
verify_grantTokens :: Lens' Verify (Maybe [Text])

-- | Tells KMS whether the value of the <tt>Message</tt> parameter is a
--   message or message digest. The default value, RAW, indicates a
--   message. To indicate a message digest, enter <tt>DIGEST</tt>.
--   
--   Use the <tt>DIGEST</tt> value only when the value of the
--   <tt>Message</tt> parameter is a message digest. If you use the
--   <tt>DIGEST</tt> value with a raw message, the security of the
--   verification operation can be compromised.
verify_messageType :: Lens' Verify (Maybe MessageType)

-- | Identifies the asymmetric KMS key that will be used to verify the
--   signature. This must be the same KMS key that was used to generate the
--   signature. If you specify a different KMS key, the signature
--   verification fails.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
verify_keyId :: Lens' Verify Text

-- | Specifies the message that was signed. You can submit a raw message of
--   up to 4096 bytes, or a hash digest of the message. If you submit a
--   digest, use the <tt>MessageType</tt> parameter with a value of
--   <tt>DIGEST</tt>.
--   
--   If the message specified here is different from the message that was
--   signed, the signature verification fails. A message and its hash
--   digest are considered to be the same message.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
verify_message :: Lens' Verify ByteString

-- | The signature that the <tt>Sign</tt> operation generated.-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
verify_signature :: Lens' Verify ByteString

-- | The signing algorithm that was used to sign the message. If you submit
--   a different algorithm, the signature verification fails.
verify_signingAlgorithm :: Lens' Verify SigningAlgorithmSpec

-- | <i>See:</i> <a>newVerifyResponse</a> smart constructor.
data VerifyResponse
VerifyResponse' :: Maybe SigningAlgorithmSpec -> Maybe Bool -> Maybe Text -> Int -> VerifyResponse

-- | The signing algorithm that was used to verify the signature.
[$sel:signingAlgorithm:VerifyResponse'] :: VerifyResponse -> Maybe SigningAlgorithmSpec

-- | A Boolean value that indicates whether the signature was verified. A
--   value of <tt>True</tt> indicates that the <tt>Signature</tt> was
--   produced by signing the <tt>Message</tt> with the specified
--   <tt>KeyID</tt> and <tt>SigningAlgorithm.</tt> If the signature is not
--   verified, the <tt>Verify</tt> operation fails with a
--   <tt>KMSInvalidSignatureException</tt> exception.
[$sel:signatureValid:VerifyResponse'] :: VerifyResponse -> Maybe Bool

-- | The Amazon Resource Name (<a>key ARN</a>) of the asymmetric KMS key
--   that was used to verify the signature.
[$sel:keyId:VerifyResponse'] :: VerifyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:VerifyResponse'] :: VerifyResponse -> Int

-- | Create a value of <a>VerifyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signingAlgorithm:Verify'</a>,
--   <a>verifyResponse_signingAlgorithm</a> - The signing algorithm that
--   was used to verify the signature.
--   
--   <a>$sel:signatureValid:VerifyResponse'</a>,
--   <a>verifyResponse_signatureValid</a> - A Boolean value that indicates
--   whether the signature was verified. A value of <tt>True</tt> indicates
--   that the <tt>Signature</tt> was produced by signing the
--   <tt>Message</tt> with the specified <tt>KeyID</tt> and
--   <tt>SigningAlgorithm.</tt> If the signature is not verified, the
--   <tt>Verify</tt> operation fails with a
--   <tt>KMSInvalidSignatureException</tt> exception.
--   
--   <a>$sel:keyId:Verify'</a>, <a>verifyResponse_keyId</a> - The Amazon
--   Resource Name (<a>key ARN</a>) of the asymmetric KMS key that was used
--   to verify the signature.
--   
--   <a>$sel:httpStatus:VerifyResponse'</a>,
--   <a>verifyResponse_httpStatus</a> - The response's http status code.
newVerifyResponse :: Int -> VerifyResponse

-- | The signing algorithm that was used to verify the signature.
verifyResponse_signingAlgorithm :: Lens' VerifyResponse (Maybe SigningAlgorithmSpec)

-- | A Boolean value that indicates whether the signature was verified. A
--   value of <tt>True</tt> indicates that the <tt>Signature</tt> was
--   produced by signing the <tt>Message</tt> with the specified
--   <tt>KeyID</tt> and <tt>SigningAlgorithm.</tt> If the signature is not
--   verified, the <tt>Verify</tt> operation fails with a
--   <tt>KMSInvalidSignatureException</tt> exception.
verifyResponse_signatureValid :: Lens' VerifyResponse (Maybe Bool)

-- | The Amazon Resource Name (<a>key ARN</a>) of the asymmetric KMS key
--   that was used to verify the signature.
verifyResponse_keyId :: Lens' VerifyResponse (Maybe Text)

-- | The response's http status code.
verifyResponse_httpStatus :: Lens' VerifyResponse Int
instance GHC.Generics.Generic Network.AWS.KMS.Verify.Verify
instance GHC.Show.Show Network.AWS.KMS.Verify.Verify
instance GHC.Classes.Eq Network.AWS.KMS.Verify.Verify
instance GHC.Generics.Generic Network.AWS.KMS.Verify.VerifyResponse
instance GHC.Show.Show Network.AWS.KMS.Verify.VerifyResponse
instance GHC.Read.Read Network.AWS.KMS.Verify.VerifyResponse
instance GHC.Classes.Eq Network.AWS.KMS.Verify.VerifyResponse
instance Network.AWS.Types.AWSRequest Network.AWS.KMS.Verify.Verify
instance Control.DeepSeq.NFData Network.AWS.KMS.Verify.VerifyResponse
instance Data.Hashable.Class.Hashable Network.AWS.KMS.Verify.Verify
instance Control.DeepSeq.NFData Network.AWS.KMS.Verify.Verify
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.KMS.Verify.Verify
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.KMS.Verify.Verify
instance Network.AWS.Data.Path.ToPath Network.AWS.KMS.Verify.Verify
instance Network.AWS.Data.Query.ToQuery Network.AWS.KMS.Verify.Verify


module Network.AWS.KMS.Lens

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
verify_grantTokens :: Lens' Verify (Maybe [Text])

-- | Tells KMS whether the value of the <tt>Message</tt> parameter is a
--   message or message digest. The default value, RAW, indicates a
--   message. To indicate a message digest, enter <tt>DIGEST</tt>.
--   
--   Use the <tt>DIGEST</tt> value only when the value of the
--   <tt>Message</tt> parameter is a message digest. If you use the
--   <tt>DIGEST</tt> value with a raw message, the security of the
--   verification operation can be compromised.
verify_messageType :: Lens' Verify (Maybe MessageType)

-- | Identifies the asymmetric KMS key that will be used to verify the
--   signature. This must be the same KMS key that was used to generate the
--   signature. If you specify a different KMS key, the signature
--   verification fails.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
verify_keyId :: Lens' Verify Text

-- | Specifies the message that was signed. You can submit a raw message of
--   up to 4096 bytes, or a hash digest of the message. If you submit a
--   digest, use the <tt>MessageType</tt> parameter with a value of
--   <tt>DIGEST</tt>.
--   
--   If the message specified here is different from the message that was
--   signed, the signature verification fails. A message and its hash
--   digest are considered to be the same message.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
verify_message :: Lens' Verify ByteString

-- | The signature that the <tt>Sign</tt> operation generated.-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
verify_signature :: Lens' Verify ByteString

-- | The signing algorithm that was used to sign the message. If you submit
--   a different algorithm, the signature verification fails.
verify_signingAlgorithm :: Lens' Verify SigningAlgorithmSpec

-- | The signing algorithm that was used to verify the signature.
verifyResponse_signingAlgorithm :: Lens' VerifyResponse (Maybe SigningAlgorithmSpec)

-- | A Boolean value that indicates whether the signature was verified. A
--   value of <tt>True</tt> indicates that the <tt>Signature</tt> was
--   produced by signing the <tt>Message</tt> with the specified
--   <tt>KeyID</tt> and <tt>SigningAlgorithm.</tt> If the signature is not
--   verified, the <tt>Verify</tt> operation fails with a
--   <tt>KMSInvalidSignatureException</tt> exception.
verifyResponse_signatureValid :: Lens' VerifyResponse (Maybe Bool)

-- | The Amazon Resource Name (<a>key ARN</a>) of the asymmetric KMS key
--   that was used to verify the signature.
verifyResponse_keyId :: Lens' VerifyResponse (Maybe Text)

-- | The response's http status code.
verifyResponse_httpStatus :: Lens' VerifyResponse Int

-- | Identifies a symmetric KMS key. You cannot enable or disable automatic
--   rotation of <a>asymmetric KMS keys</a>, KMS keys with <a>imported key
--   material</a>, or KMS keys in a <a>custom key store</a>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
disableKeyRotation_keyId :: Lens' DisableKeyRotation Text

-- | Returns only grants where the specified principal is the grantee
--   principal for the grant.
listGrants_granteePrincipal :: Lens' ListGrants (Maybe Text)

-- | Returns only the grant with the specified grant ID. The grant ID
--   uniquely identifies the grant.
listGrants_grantId :: Lens' ListGrants (Maybe Text)

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
listGrants_limit :: Lens' ListGrants (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
listGrants_marker :: Lens' ListGrants (Maybe Text)

-- | Returns only grants for the specified KMS key. This parameter is
--   required.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
listGrants_keyId :: Lens' ListGrants Text

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listGrantsResponse_nextMarker :: Lens' ListGrantsResponse (Maybe Text)

-- | A list of grants.
listGrantsResponse_grants :: Lens' ListGrantsResponse (Maybe [GrantListEntry])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listGrantsResponse_truncated :: Lens' ListGrantsResponse (Maybe Bool)

-- | The alias to be deleted. The alias name must begin with
--   <tt>alias/</tt> followed by the alias name, such as
--   <tt>alias/ExampleAlias</tt>.
deleteAlias_aliasName :: Lens' DeleteAlias Text

-- | Specifies a friendly name for the custom key store. The name must be
--   unique in your Amazon Web Services account.
createCustomKeyStore_customKeyStoreName :: Lens' CreateCustomKeyStore Text

-- | Identifies the CloudHSM cluster for the custom key store. Enter the
--   cluster ID of any active CloudHSM cluster that is not already
--   associated with a custom key store. To find the cluster ID, use the
--   <a>DescribeClusters</a> operation.
createCustomKeyStore_cloudHsmClusterId :: Lens' CreateCustomKeyStore Text

-- | Enter the content of the trust anchor certificate for the cluster.
--   This is the content of the <tt>customerCA.crt</tt> file that you
--   created when you <a>initialized the cluster</a>.
createCustomKeyStore_trustAnchorCertificate :: Lens' CreateCustomKeyStore Text

-- | Enter the password of the <a>kmsuser crypto user (CU) account</a> in
--   the specified CloudHSM cluster. KMS logs into the cluster as this user
--   to manage key material on your behalf.
--   
--   The password must be a string of 7 to 32 characters. Its value is case
--   sensitive.
--   
--   This parameter tells KMS the <tt>kmsuser</tt> account password; it
--   does not change the password in the CloudHSM cluster.
createCustomKeyStore_keyStorePassword :: Lens' CreateCustomKeyStore Text

-- | A unique identifier for the new custom key store.
createCustomKeyStoreResponse_customKeyStoreId :: Lens' CreateCustomKeyStoreResponse (Maybe Text)

-- | The response's http status code.
createCustomKeyStoreResponse_httpStatus :: Lens' CreateCustomKeyStoreResponse Int

-- | Identifies the alias that is changing its KMS key. This value must
--   begin with <tt>alias/</tt> followed by the alias name, such as
--   <tt>alias/ExampleAlias</tt>. You cannot use UpdateAlias to change the
--   alias name.
updateAlias_aliasName :: Lens' UpdateAlias Text

-- | Identifies the <a>customer managed key</a> to associate with the
--   alias. You don't have permission to associate an alias with an
--   <a>Amazon Web Services managed key</a>.
--   
--   The KMS key must be in the same Amazon Web Services account and Region
--   as the alias. Also, the new target KMS key must be the same type as
--   the current target KMS key (both symmetric or both asymmetric) and
--   they must have the same key usage.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   To verify that the alias is mapped to the correct KMS key, use
--   ListAliases.
updateAlias_targetKeyId :: Lens' UpdateAlias Text

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
generateDataKey_grantTokens :: Lens' GenerateDataKey (Maybe [Text])

-- | Specifies the length of the data key in bytes. For example, use the
--   value 64 to generate a 512-bit data key (64 bytes is 512 bits). For
--   128-bit (16-byte) and 256-bit (32-byte) data keys, use the
--   <tt>KeySpec</tt> parameter.
--   
--   You must specify either the <tt>KeySpec</tt> or the
--   <tt>NumberOfBytes</tt> parameter (but not both) in every
--   <tt>GenerateDataKey</tt> request.
generateDataKey_numberOfBytes :: Lens' GenerateDataKey (Maybe Natural)

-- | Specifies the encryption context that will be used when encrypting the
--   data key.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
generateDataKey_encryptionContext :: Lens' GenerateDataKey (Maybe (HashMap Text Text))

-- | Specifies the length of the data key. Use <tt>AES_128</tt> to generate
--   a 128-bit symmetric key, or <tt>AES_256</tt> to generate a 256-bit
--   symmetric key.
--   
--   You must specify either the <tt>KeySpec</tt> or the
--   <tt>NumberOfBytes</tt> parameter (but not both) in every
--   <tt>GenerateDataKey</tt> request.
generateDataKey_keySpec :: Lens' GenerateDataKey (Maybe DataKeySpec)

-- | Identifies the symmetric KMS key that encrypts the data key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
generateDataKey_keyId :: Lens' GenerateDataKey Text

-- | The response's http status code.
generateDataKeyResponse_httpStatus :: Lens' GenerateDataKeyResponse Int

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that
--   encrypted the data key.
generateDataKeyResponse_keyId :: Lens' GenerateDataKeyResponse Text

-- | The plaintext data key. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded. Use this data key to encrypt your data outside of KMS.
--   Then, remove it from memory as soon as possible.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
generateDataKeyResponse_plaintext :: Lens' GenerateDataKeyResponse ByteString

-- | The encrypted copy of the data key. When you use the HTTP API or the
--   Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is
--   not Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
generateDataKeyResponse_ciphertextBlob :: Lens' GenerateDataKeyResponse ByteString

-- | Identifies the KMS key from which you are deleting imported key
--   material. The <tt>Origin</tt> of the KMS key must be
--   <tt>EXTERNAL</tt>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
deleteImportedKeyMaterial_keyId :: Lens' DeleteImportedKeyMaterial Text

-- | The time at which the imported key material expires. When the key
--   material expires, KMS deletes the key material and the KMS key becomes
--   unusable. You must omit this parameter when the
--   <tt>ExpirationModel</tt> parameter is set to
--   <tt>KEY_MATERIAL_DOES_NOT_EXPIRE</tt>. Otherwise it is required.
importKeyMaterial_validTo :: Lens' ImportKeyMaterial (Maybe UTCTime)

-- | Specifies whether the key material expires. The default is
--   <tt>KEY_MATERIAL_EXPIRES</tt>, in which case you must include the
--   <tt>ValidTo</tt> parameter. When this parameter is set to
--   <tt>KEY_MATERIAL_DOES_NOT_EXPIRE</tt>, you must omit the
--   <tt>ValidTo</tt> parameter.
importKeyMaterial_expirationModel :: Lens' ImportKeyMaterial (Maybe ExpirationModelType)

-- | The identifier of the symmetric KMS key that receives the imported key
--   material. The KMS key's <tt>Origin</tt> must be <tt>EXTERNAL</tt>.
--   This must be the same KMS key specified in the <tt>KeyID</tt>
--   parameter of the corresponding GetParametersForImport request.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
importKeyMaterial_keyId :: Lens' ImportKeyMaterial Text

-- | The import token that you received in the response to a previous
--   GetParametersForImport request. It must be from the same response that
--   contained the public key that you used to encrypt the key material.--
--   -- <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
importKeyMaterial_importToken :: Lens' ImportKeyMaterial ByteString

-- | The encrypted key material to import. The key material must be
--   encrypted with the public wrapping key that GetParametersForImport
--   returned, using the wrapping algorithm that you specified in the same
--   <tt>GetParametersForImport</tt> request.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
importKeyMaterial_encryptedKeyMaterial :: Lens' ImportKeyMaterial ByteString

-- | The response's http status code.
importKeyMaterialResponse_httpStatus :: Lens' ImportKeyMaterialResponse Int

-- | Gets the rotation status for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
getKeyRotationStatus_keyId :: Lens' GetKeyRotationStatus Text

-- | A Boolean value that specifies whether key rotation is enabled.
getKeyRotationStatusResponse_keyRotationEnabled :: Lens' GetKeyRotationStatusResponse (Maybe Bool)

-- | The response's http status code.
getKeyRotationStatusResponse_httpStatus :: Lens' GetKeyRotationStatusResponse Int

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 50, inclusive. If you do not include a value, it defaults to 50.
listResourceTags_limit :: Lens' ListResourceTags (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
--   
--   Do not attempt to construct this value. Use only the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
listResourceTags_marker :: Lens' ListResourceTags (Maybe Text)

-- | Gets tags on the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
listResourceTags_keyId :: Lens' ListResourceTags Text

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
--   
--   Do not assume or infer any information from this value.
listResourceTagsResponse_nextMarker :: Lens' ListResourceTagsResponse (Maybe Text)

-- | A list of tags. Each tag consists of a tag key and a tag value.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
listResourceTagsResponse_tags :: Lens' ListResourceTagsResponse (Maybe [Tag])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listResourceTagsResponse_truncated :: Lens' ListResourceTagsResponse (Maybe Bool)

-- | The response's http status code.
listResourceTagsResponse_httpStatus :: Lens' ListResourceTagsResponse Int

-- | A flag to indicate whether to bypass the key policy lockout safety
--   check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   Use this parameter only when you intend to prevent the principal that
--   is making the request from making a subsequent <tt>PutKeyPolicy</tt>
--   request on the KMS key.
--   
--   The default value is false.
replicateKey_bypassPolicyLockoutSafetyCheck :: Lens' ReplicateKey (Maybe Bool)

-- | Assigns one or more tags to the replica key. Use this parameter to tag
--   the KMS key when it is created. To tag an existing KMS key, use the
--   TagResource operation.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   To use this parameter, you must have <a>kms:TagResource</a> permission
--   in an IAM policy.
--   
--   Tags are not a shared property of multi-Region keys. You can specify
--   the same tags or different tags for each key in a set of related
--   multi-Region keys. KMS does not synchronize this property.
--   
--   Each tag consists of a tag key and a tag value. Both the tag key and
--   the tag value are required, but the tag value can be an empty (null)
--   string. You cannot have more than one tag on a KMS key with the same
--   tag key. If you specify an existing tag key with a different tag
--   value, KMS replaces the current tag value with the specified one.
--   
--   When you add tags to an Amazon Web Services resource, Amazon Web
--   Services generates a cost allocation report with usage and costs
--   aggregated by tags. Tags can also be used to control access to a KMS
--   key. For details, see <a>Tagging Keys</a>.
replicateKey_tags :: Lens' ReplicateKey (Maybe [Tag])

-- | A description of the KMS key. The default value is an empty string (no
--   description).
--   
--   The description is not a shared property of multi-Region keys. You can
--   specify the same description or a different description for each key
--   in a set of related multi-Region keys. KMS does not synchronize this
--   property.
replicateKey_description :: Lens' ReplicateKey (Maybe Text)

-- | The key policy to attach to the KMS key. This parameter is optional.
--   If you do not provide a key policy, KMS attaches the <a>default key
--   policy</a> to the KMS key.
--   
--   The key policy is not a shared property of multi-Region keys. You can
--   specify the same key policy or a different key policy for each key in
--   a set of related multi-Region keys. KMS does not synchronize this
--   property.
--   
--   If you provide a key policy, it must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must give the caller <tt>kms:PutKeyPolicy</tt>
--   permission on the replica key. This reduces the risk that the KMS key
--   becomes unmanageable. For more information, refer to the scenario in
--   the <a>Default Key Policy</a> section of the /<i>Key Management
--   Service Developer Guide</i>/ .</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /<i>Identity and Access Management User Guide</i>/
--   .</li>
--   <li>The key policy size quota is 32 kilobytes (32768 bytes).</li>
--   </ul>
replicateKey_policy :: Lens' ReplicateKey (Maybe Text)

-- | Identifies the multi-Region primary key that is being replicated. To
--   determine whether a KMS key is a multi-Region primary key, use the
--   DescribeKey operation to check the value of the
--   <tt>MultiRegionKeyType</tt> property.
--   
--   Specify the key ID or key ARN of a multi-Region primary key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
replicateKey_keyId :: Lens' ReplicateKey Text

-- | The Region ID of the Amazon Web Services Region for this replica key.
--   
--   Enter the Region ID, such as <tt>us-east-1</tt> or
--   <tt>ap-southeast-2</tt>. For a list of Amazon Web Services Regions in
--   which KMS is supported, see <a>KMS service endpoints</a> in the
--   <i>Amazon Web Services General Reference</i>.
--   
--   The replica must be in a different Amazon Web Services Region than its
--   primary key and other replicas of that primary key, but in the same
--   Amazon Web Services partition. KMS must be available in the replica
--   Region. If the Region is not enabled by default, the Amazon Web
--   Services account must be enabled in the Region.
--   
--   For information about Amazon Web Services partitions, see <a>Amazon
--   Resource Names (ARNs) in the Amazon Web Services General
--   Reference.</a> For information about enabling and disabling Regions,
--   see <a>Enabling a Region</a> and <a>Disabling a Region</a> in the
--   <i>Amazon Web Services General Reference</i>.
replicateKey_replicaRegion :: Lens' ReplicateKey Text

-- | The tags on the new replica key. The value is a list of tag key and
--   tag value pairs.
replicateKeyResponse_replicaTags :: Lens' ReplicateKeyResponse (Maybe [Tag])

-- | The key policy of the new replica key. The value is a key policy
--   document in JSON format.
replicateKeyResponse_replicaPolicy :: Lens' ReplicateKeyResponse (Maybe Text)

-- | Displays details about the new replica key, including its Amazon
--   Resource Name (<a>key ARN</a>) and <a>key state</a>. It also includes
--   the ARN and Amazon Web Services Region of its primary key and other
--   replica keys.
replicateKeyResponse_replicaKeyMetadata :: Lens' ReplicateKeyResponse (Maybe KeyMetadata)

-- | The response's http status code.
replicateKeyResponse_httpStatus :: Lens' ReplicateKeyResponse Int

-- | A flag to indicate whether to bypass the key policy lockout safety
--   check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   Use this parameter only when you intend to prevent the principal that
--   is making the request from making a subsequent <tt>PutKeyPolicy</tt>
--   request on the KMS key.
--   
--   The default value is false.
putKeyPolicy_bypassPolicyLockoutSafetyCheck :: Lens' PutKeyPolicy (Maybe Bool)

-- | Sets the key policy on the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
putKeyPolicy_keyId :: Lens' PutKeyPolicy Text

-- | The name of the key policy. The only valid value is <tt>default</tt>.
putKeyPolicy_policyName :: Lens' PutKeyPolicy Text

-- | The key policy to attach to the KMS key.
--   
--   The key policy must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must allow the principal that is making the
--   <tt>PutKeyPolicy</tt> request to make a subsequent
--   <tt>PutKeyPolicy</tt> request on the KMS key. This reduces the risk
--   that the KMS key becomes unmanageable. For more information, refer to
--   the scenario in the <a>Default Key Policy</a> section of the <i>Key
--   Management Service Developer Guide</i>.</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /Amazon Web Services Identity and Access Management
--   User Guide/.</li>
--   </ul>
--   
--   The key policy cannot exceed 32 kilobytes (32768 bytes). For more
--   information, see <a>Resource Quotas</a> in the <i>Key Management
--   Service Developer Guide</i>.
putKeyPolicy_policy :: Lens' PutKeyPolicy Text

-- | Identifies the KMS key to disable.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
disableKey_keyId :: Lens' DisableKey Text

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 1000, inclusive. If you do not include a value, it defaults to
--   100.
--   
--   Only one policy can be attached to a key.
listKeyPolicies_limit :: Lens' ListKeyPolicies (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
listKeyPolicies_marker :: Lens' ListKeyPolicies (Maybe Text)

-- | Gets the names of key policies for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
listKeyPolicies_keyId :: Lens' ListKeyPolicies Text

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listKeyPoliciesResponse_nextMarker :: Lens' ListKeyPoliciesResponse (Maybe Text)

-- | A list of key policy names. The only valid value is <tt>default</tt>.
listKeyPoliciesResponse_policyNames :: Lens' ListKeyPoliciesResponse (Maybe [Text])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listKeyPoliciesResponse_truncated :: Lens' ListKeyPoliciesResponse (Maybe Bool)

-- | The response's http status code.
listKeyPoliciesResponse_httpStatus :: Lens' ListKeyPoliciesResponse Int

-- | Identifies the KMS key from which you are removing tags.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
untagResource_keyId :: Lens' UntagResource Text

-- | One or more tag keys. Specify only the tag keys, not the tag values.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | Enter the ID of the custom key store you want to disconnect. To find
--   the ID of a custom key store, use the DescribeCustomKeyStores
--   operation.
disconnectCustomKeyStore_customKeyStoreId :: Lens' DisconnectCustomKeyStore Text

-- | The response's http status code.
disconnectCustomKeyStoreResponse_httpStatus :: Lens' DisconnectCustomKeyStoreResponse Int

-- | Identifies a customer managed key in the account and Region.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
tagResource_keyId :: Lens' TagResource Text

-- | One or more tags.
--   
--   Each tag consists of a tag key and a tag value. The tag value can be
--   an empty (null) string.
--   
--   You cannot have more than one tag on a KMS key with the same tag key.
--   If you specify an existing tag key with a different tag value, KMS
--   replaces the current tag value with the specified one.
tagResource_tags :: Lens' TagResource [Tag]

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
getPublicKey_grantTokens :: Lens' GetPublicKey (Maybe [Text])

-- | Identifies the asymmetric KMS key that includes the public key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
getPublicKey_keyId :: Lens' GetPublicKey Text

-- | The signing algorithms that KMS supports for this key.
--   
--   This field appears in the response only when the <tt>KeyUsage</tt> of
--   the public key is <tt>SIGN_VERIFY</tt>.
getPublicKeyResponse_signingAlgorithms :: Lens' GetPublicKeyResponse (Maybe [SigningAlgorithmSpec])

-- | The exported public key.
--   
--   The value is a DER-encoded X.509 public key, also known as
--   <tt>SubjectPublicKeyInfo</tt> (SPKI), as defined in <a>RFC 5280</a>.
--   When you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
getPublicKeyResponse_publicKey :: Lens' GetPublicKeyResponse (Maybe ByteString)

-- | The encryption algorithms that KMS supports for this key.
--   
--   This information is critical. If a public key encrypts data outside of
--   KMS by using an unsupported encryption algorithm, the ciphertext
--   cannot be decrypted.
--   
--   This field appears in the response only when the <tt>KeyUsage</tt> of
--   the public key is <tt>ENCRYPT_DECRYPT</tt>.
getPublicKeyResponse_encryptionAlgorithms :: Lens' GetPublicKeyResponse (Maybe [EncryptionAlgorithmSpec])

-- | The type of the of the public key that was downloaded.
getPublicKeyResponse_keySpec :: Lens' GetPublicKeyResponse (Maybe KeySpec)

-- | Instead, use the <tt>KeySpec</tt> field in the <tt>GetPublicKey</tt>
--   response.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
getPublicKeyResponse_customerMasterKeySpec :: Lens' GetPublicKeyResponse (Maybe CustomerMasterKeySpec)

-- | The Amazon Resource Name (<a>key ARN</a>) of the asymmetric KMS key
--   from which the public key was downloaded.
getPublicKeyResponse_keyId :: Lens' GetPublicKeyResponse (Maybe Text)

-- | The permitted use of the public key. Valid values are
--   <tt>ENCRYPT_DECRYPT</tt> or <tt>SIGN_VERIFY</tt>.
--   
--   This information is critical. If a public key with
--   <tt>SIGN_VERIFY</tt> key usage encrypts data outside of KMS, the
--   ciphertext cannot be decrypted.
getPublicKeyResponse_keyUsage :: Lens' GetPublicKeyResponse (Maybe KeyUsageType)

-- | The response's http status code.
getPublicKeyResponse_httpStatus :: Lens' GetPublicKeyResponse Int

-- | Generates the random byte string in the CloudHSM cluster that is
--   associated with the specified <a>custom key store</a>. To find the ID
--   of a custom key store, use the DescribeCustomKeyStores operation.
generateRandom_customKeyStoreId :: Lens' GenerateRandom (Maybe Text)

-- | The length of the byte string.
generateRandom_numberOfBytes :: Lens' GenerateRandom (Maybe Natural)

-- | The random byte string. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
generateRandomResponse_plaintext :: Lens' GenerateRandomResponse (Maybe ByteString)

-- | The response's http status code.
generateRandomResponse_httpStatus :: Lens' GenerateRandomResponse Int

-- | Specifies that encryption context to use when the reencrypting the
--   data.
--   
--   A destination encryption context is valid only when the destination
--   KMS key is a symmetric KMS key. The standard ciphertext format for
--   asymmetric KMS keys does not include fields for metadata.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
reEncrypt_destinationEncryptionContext :: Lens' ReEncrypt (Maybe (HashMap Text Text))

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
reEncrypt_grantTokens :: Lens' ReEncrypt (Maybe [Text])

-- | Specifies the encryption context to use to decrypt the ciphertext.
--   Enter the same encryption context that was used to encrypt the
--   ciphertext.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
reEncrypt_sourceEncryptionContext :: Lens' ReEncrypt (Maybe (HashMap Text Text))

-- | Specifies the KMS key that KMS will use to decrypt the ciphertext
--   before it is re-encrypted. Enter a key ID of the KMS key that was used
--   to encrypt the ciphertext.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. If you used a symmetric KMS key, KMS can
--   get the KMS key from metadata that it adds to the symmetric ciphertext
--   blob. However, it is always recommended as a best practice. This
--   practice ensures that you use the KMS key that you intend.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
reEncrypt_sourceKeyId :: Lens' ReEncrypt (Maybe Text)

-- | Specifies the encryption algorithm that KMS will use to reecrypt the
--   data after it has decrypted it. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, represents the encryption algorithm used
--   for symmetric KMS keys.
--   
--   This parameter is required only when the destination KMS key is an
--   asymmetric KMS key.
reEncrypt_destinationEncryptionAlgorithm :: Lens' ReEncrypt (Maybe EncryptionAlgorithmSpec)

-- | Specifies the encryption algorithm that KMS will use to decrypt the
--   ciphertext before it is reencrypted. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, represents the algorithm used for
--   symmetric KMS keys.
--   
--   Specify the same algorithm that was used to encrypt the ciphertext. If
--   you specify a different algorithm, the decrypt attempt fails.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key.
reEncrypt_sourceEncryptionAlgorithm :: Lens' ReEncrypt (Maybe EncryptionAlgorithmSpec)

-- | Ciphertext of the data to reencrypt.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
reEncrypt_ciphertextBlob :: Lens' ReEncrypt ByteString

-- | A unique identifier for the KMS key that is used to reencrypt the
--   data. Specify a symmetric or asymmetric KMS key with a
--   <tt>KeyUsage</tt> value of <tt>ENCRYPT_DECRYPT</tt>. To find the
--   <tt>KeyUsage</tt> value of a KMS key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
reEncrypt_destinationKeyId :: Lens' ReEncrypt Text

-- | Unique identifier of the KMS key used to originally encrypt the data.
reEncryptResponse_sourceKeyId :: Lens' ReEncryptResponse (Maybe Text)

-- | The encryption algorithm that was used to reencrypt the data.
reEncryptResponse_destinationEncryptionAlgorithm :: Lens' ReEncryptResponse (Maybe EncryptionAlgorithmSpec)

-- | The reencrypted data. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
reEncryptResponse_ciphertextBlob :: Lens' ReEncryptResponse (Maybe ByteString)

-- | The encryption algorithm that was used to decrypt the ciphertext
--   before it was reencrypted.
reEncryptResponse_sourceEncryptionAlgorithm :: Lens' ReEncryptResponse (Maybe EncryptionAlgorithmSpec)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that was used
--   to reencrypt the data.
reEncryptResponse_keyId :: Lens' ReEncryptResponse (Maybe Text)

-- | The response's http status code.
reEncryptResponse_httpStatus :: Lens' ReEncryptResponse Int

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
listRetirableGrants_limit :: Lens' ListRetirableGrants (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
listRetirableGrants_marker :: Lens' ListRetirableGrants (Maybe Text)

-- | The retiring principal for which to list grants. Enter a principal in
--   your Amazon Web Services account.
--   
--   To specify the retiring principal, use the <a>Amazon Resource Name
--   (ARN)</a> of an Amazon Web Services principal. Valid Amazon Web
--   Services principals include Amazon Web Services accounts (root), IAM
--   users, federated users, and assumed role users. For examples of the
--   ARN syntax for specifying a principal, see <a>Amazon Web Services
--   Identity and Access Management (IAM)</a> in the Example ARNs section
--   of the /Amazon Web Services General Reference/.
listRetirableGrants_retiringPrincipal :: Lens' ListRetirableGrants Text

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listGrantsResponse_nextMarker :: Lens' ListGrantsResponse (Maybe Text)

-- | A list of grants.
listGrantsResponse_grants :: Lens' ListGrantsResponse (Maybe [GrantListEntry])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listGrantsResponse_truncated :: Lens' ListGrantsResponse (Maybe Bool)

-- | Enter the key store ID of the custom key store that you want to
--   connect. To find the ID of a custom key store, use the
--   DescribeCustomKeyStores operation.
connectCustomKeyStore_customKeyStoreId :: Lens' ConnectCustomKeyStore Text

-- | The response's http status code.
connectCustomKeyStoreResponse_httpStatus :: Lens' ConnectCustomKeyStoreResponse Int

-- | Identifies the current primary key. When the operation completes, this
--   KMS key will be a replica key.
--   
--   Specify the key ID or key ARN of a multi-Region primary key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
updatePrimaryRegion_keyId :: Lens' UpdatePrimaryRegion Text

-- | The Amazon Web Services Region of the new primary key. Enter the
--   Region ID, such as <tt>us-east-1</tt> or <tt>ap-southeast-2</tt>.
--   There must be an existing replica key in this Region.
--   
--   When the operation completes, the multi-Region key in this Region will
--   be the primary key.
updatePrimaryRegion_primaryRegion :: Lens' UpdatePrimaryRegion Text

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
describeKey_grantTokens :: Lens' DescribeKey (Maybe [Text])

-- | Describes the specified KMS key.
--   
--   If you specify a predefined Amazon Web Services alias (an Amazon Web
--   Services alias with no key ID), KMS associates the alias with an
--   <a>Amazon Web Services managed key</a> and returns its <tt>KeyId</tt>
--   and <tt>Arn</tt> in the response.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
describeKey_keyId :: Lens' DescribeKey Text

-- | Metadata associated with the key.
describeKeyResponse_keyMetadata :: Lens' DescribeKeyResponse (Maybe KeyMetadata)

-- | The response's http status code.
describeKeyResponse_httpStatus :: Lens' DescribeKeyResponse Int

-- | The identifier of the symmetric KMS key into which you will import key
--   material. The <tt>Origin</tt> of the KMS key must be
--   <tt>EXTERNAL</tt>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
getParametersForImport_keyId :: Lens' GetParametersForImport Text

-- | The algorithm you will use to encrypt the key material before
--   importing it with ImportKeyMaterial. For more information, see
--   <a>Encrypt the Key Material</a> in the <i>Key Management Service
--   Developer Guide</i>.
getParametersForImport_wrappingAlgorithm :: Lens' GetParametersForImport AlgorithmSpec

-- | The type of wrapping key (public key) to return in the response. Only
--   2048-bit RSA public keys are supported.
getParametersForImport_wrappingKeySpec :: Lens' GetParametersForImport WrappingKeySpec

-- | The time at which the import token and public key are no longer valid.
--   After this time, you cannot use them to make an ImportKeyMaterial
--   request and you must send another <tt>GetParametersForImport</tt>
--   request to get new ones.
getParametersForImportResponse_parametersValidTo :: Lens' GetParametersForImportResponse (Maybe UTCTime)

-- | The public key to use to encrypt the key material before importing it
--   with ImportKeyMaterial.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
getParametersForImportResponse_publicKey :: Lens' GetParametersForImportResponse (Maybe ByteString)

-- | The import token to send in a subsequent ImportKeyMaterial request.--
--   -- <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
getParametersForImportResponse_importToken :: Lens' GetParametersForImportResponse (Maybe ByteString)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key to use in a
--   subsequent ImportKeyMaterial request. This is the same KMS key
--   specified in the <tt>GetParametersForImport</tt> request.
getParametersForImportResponse_keyId :: Lens' GetParametersForImportResponse (Maybe Text)

-- | The response's http status code.
getParametersForImportResponse_httpStatus :: Lens' GetParametersForImportResponse Int

-- | Enter the current password of the <tt>kmsuser</tt> crypto user (CU) in
--   the CloudHSM cluster that is associated with the custom key store.
--   
--   This parameter tells KMS the current password of the <tt>kmsuser</tt>
--   crypto user (CU). It does not set or change the password of any users
--   in the CloudHSM cluster.
updateCustomKeyStore_keyStorePassword :: Lens' UpdateCustomKeyStore (Maybe Text)

-- | Changes the friendly name of the custom key store to the value that
--   you specify. The custom key store name must be unique in the Amazon
--   Web Services account.
updateCustomKeyStore_newCustomKeyStoreName :: Lens' UpdateCustomKeyStore (Maybe Text)

-- | Associates the custom key store with a related CloudHSM cluster.
--   
--   Enter the cluster ID of the cluster that you used to create the custom
--   key store or a cluster that shares a backup history and has the same
--   cluster certificate as the original cluster. You cannot use this
--   parameter to associate a custom key store with an unrelated cluster.
--   In addition, the replacement cluster must <a>fulfill the
--   requirements</a> for a cluster associated with a custom key store. To
--   view the cluster certificate of a cluster, use the
--   <a>DescribeClusters</a> operation.
updateCustomKeyStore_cloudHsmClusterId :: Lens' UpdateCustomKeyStore (Maybe Text)

-- | Identifies the custom key store that you want to update. Enter the ID
--   of the custom key store. To find the ID of a custom key store, use the
--   DescribeCustomKeyStores operation.
updateCustomKeyStore_customKeyStoreId :: Lens' UpdateCustomKeyStore Text

-- | The response's http status code.
updateCustomKeyStoreResponse_httpStatus :: Lens' UpdateCustomKeyStoreResponse Int

-- | Enter the ID of the custom key store you want to delete. To find the
--   ID of a custom key store, use the DescribeCustomKeyStores operation.
deleteCustomKeyStore_customKeyStoreId :: Lens' DeleteCustomKeyStore Text

-- | The response's http status code.
deleteCustomKeyStoreResponse_httpStatus :: Lens' DeleteCustomKeyStoreResponse Int

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
encrypt_grantTokens :: Lens' Encrypt (Maybe [Text])

-- | Specifies the encryption algorithm that KMS will use to encrypt the
--   plaintext message. The algorithm must be compatible with the KMS key
--   that you specify.
--   
--   This parameter is required only for asymmetric KMS keys. The default
--   value, <tt>SYMMETRIC_DEFAULT</tt>, is the algorithm used for symmetric
--   KMS keys. If you are using an asymmetric KMS key, we recommend
--   RSAES_OAEP_SHA_256.
encrypt_encryptionAlgorithm :: Lens' Encrypt (Maybe EncryptionAlgorithmSpec)

-- | Specifies the encryption context that will be used to encrypt the
--   data. An encryption context is valid only for <a>cryptographic
--   operations</a> with a symmetric KMS key. The standard asymmetric
--   encryption algorithms that KMS uses do not support an encryption
--   context.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
encrypt_encryptionContext :: Lens' Encrypt (Maybe (HashMap Text Text))

-- | Identifies the KMS key to use in the encryption operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
encrypt_keyId :: Lens' Encrypt Text

-- | Data to be encrypted.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
encrypt_plaintext :: Lens' Encrypt ByteString

-- | The encryption algorithm that was used to encrypt the plaintext.
encryptResponse_encryptionAlgorithm :: Lens' EncryptResponse (Maybe EncryptionAlgorithmSpec)

-- | The encrypted plaintext. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
encryptResponse_ciphertextBlob :: Lens' EncryptResponse (Maybe ByteString)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that was used
--   to encrypt the plaintext.
encryptResponse_keyId :: Lens' EncryptResponse (Maybe Text)

-- | The response's http status code.
encryptResponse_httpStatus :: Lens' EncryptResponse Int

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
generateDataKeyWithoutPlaintext_grantTokens :: Lens' GenerateDataKeyWithoutPlaintext (Maybe [Text])

-- | The length of the data key in bytes. For example, use the value 64 to
--   generate a 512-bit data key (64 bytes is 512 bits). For common key
--   lengths (128-bit and 256-bit symmetric keys), we recommend that you
--   use the <tt>KeySpec</tt> field instead of this one.
generateDataKeyWithoutPlaintext_numberOfBytes :: Lens' GenerateDataKeyWithoutPlaintext (Maybe Natural)

-- | Specifies the encryption context that will be used when encrypting the
--   data key.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
generateDataKeyWithoutPlaintext_encryptionContext :: Lens' GenerateDataKeyWithoutPlaintext (Maybe (HashMap Text Text))

-- | The length of the data key. Use <tt>AES_128</tt> to generate a 128-bit
--   symmetric key, or <tt>AES_256</tt> to generate a 256-bit symmetric
--   key.
generateDataKeyWithoutPlaintext_keySpec :: Lens' GenerateDataKeyWithoutPlaintext (Maybe DataKeySpec)

-- | The identifier of the symmetric KMS key that encrypts the data key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
generateDataKeyWithoutPlaintext_keyId :: Lens' GenerateDataKeyWithoutPlaintext Text

-- | The encrypted data key. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
generateDataKeyWithoutPlaintextResponse_ciphertextBlob :: Lens' GenerateDataKeyWithoutPlaintextResponse (Maybe ByteString)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that
--   encrypted the data key.
generateDataKeyWithoutPlaintextResponse_keyId :: Lens' GenerateDataKeyWithoutPlaintextResponse (Maybe Text)

-- | The response's http status code.
generateDataKeyWithoutPlaintextResponse_httpStatus :: Lens' GenerateDataKeyWithoutPlaintextResponse Int

-- | Gets the key policy for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
getKeyPolicy_keyId :: Lens' GetKeyPolicy Text

-- | Specifies the name of the key policy. The only valid name is
--   <tt>default</tt>. To get the names of key policies, use
--   ListKeyPolicies.
getKeyPolicy_policyName :: Lens' GetKeyPolicy Text

-- | A key policy document in JSON format.
getKeyPolicyResponse_policy :: Lens' GetKeyPolicyResponse (Maybe Text)

-- | The response's http status code.
getKeyPolicyResponse_httpStatus :: Lens' GetKeyPolicyResponse Int

-- | Identifies the KMS key to enable.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
enableKey_keyId :: Lens' EnableKey Text

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
generateDataKeyPair_grantTokens :: Lens' GenerateDataKeyPair (Maybe [Text])

-- | Specifies the encryption context that will be used when encrypting the
--   private key in the data key pair.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
generateDataKeyPair_encryptionContext :: Lens' GenerateDataKeyPair (Maybe (HashMap Text Text))

-- | Specifies the symmetric KMS key that encrypts the private key in the
--   data key pair. You cannot specify an asymmetric KMS key or a KMS key
--   in a custom key store. To get the type and origin of your KMS key, use
--   the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
generateDataKeyPair_keyId :: Lens' GenerateDataKeyPair Text

-- | Determines the type of data key pair that is generated.
--   
--   The KMS rule that restricts the use of asymmetric RSA KMS keys to
--   encrypt and decrypt or to sign and verify (but not both), and the rule
--   that permits you to use ECC KMS keys only to sign and verify, are not
--   effective on data key pairs, which are used outside of KMS.
generateDataKeyPair_keyPairSpec :: Lens' GenerateDataKeyPair DataKeyPairSpec

-- | The public key (in plaintext).-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
generateDataKeyPairResponse_publicKey :: Lens' GenerateDataKeyPairResponse (Maybe ByteString)

-- | The type of data key pair that was generated.
generateDataKeyPairResponse_keyPairSpec :: Lens' GenerateDataKeyPairResponse (Maybe DataKeyPairSpec)

-- | The encrypted copy of the private key. When you use the HTTP API or
--   the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
--   it is not Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
generateDataKeyPairResponse_privateKeyCiphertextBlob :: Lens' GenerateDataKeyPairResponse (Maybe ByteString)

-- | The plaintext copy of the private key. When you use the HTTP API or
--   the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
--   it is not Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
generateDataKeyPairResponse_privateKeyPlaintext :: Lens' GenerateDataKeyPairResponse (Maybe ByteString)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that
--   encrypted the private key.
generateDataKeyPairResponse_keyId :: Lens' GenerateDataKeyPairResponse (Maybe Text)

-- | The response's http status code.
generateDataKeyPairResponse_httpStatus :: Lens' GenerateDataKeyPairResponse Int

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 1000, inclusive. If you do not include a value, it defaults to
--   100.
listKeys_limit :: Lens' ListKeys (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
listKeys_marker :: Lens' ListKeys (Maybe Text)

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listKeysResponse_nextMarker :: Lens' ListKeysResponse (Maybe Text)

-- | A list of KMS keys.
listKeysResponse_keys :: Lens' ListKeysResponse (Maybe [KeyListEntry])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listKeysResponse_truncated :: Lens' ListKeysResponse (Maybe Bool)

-- | The response's http status code.
listKeysResponse_httpStatus :: Lens' ListKeysResponse Int

-- | A unique identifier for the KMS key associated with the grant. To get
--   the key ID and key ARN for a KMS key, use ListKeys or DescribeKey.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
revokeGrant_keyId :: Lens' RevokeGrant Text

-- | Identifies the grant to revoke. To get the grant ID, use CreateGrant,
--   ListGrants, or ListRetirableGrants.
revokeGrant_grantId :: Lens' RevokeGrant Text

-- | The waiting period, specified in number of days. After the waiting
--   period ends, KMS deletes the KMS key.
--   
--   If the KMS key is a multi-Region primary key with replicas, the
--   waiting period begins when the last of its replica keys is deleted.
--   Otherwise, the waiting period begins immediately.
--   
--   This value is optional. If you include a value, it must be between 7
--   and 30, inclusive. If you do not include a value, it defaults to 30.
scheduleKeyDeletion_pendingWindowInDays :: Lens' ScheduleKeyDeletion (Maybe Natural)

-- | The unique identifier of the KMS key to delete.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
scheduleKeyDeletion_keyId :: Lens' ScheduleKeyDeletion Text

-- | The waiting period before the KMS key is deleted.
--   
--   If the KMS key is a multi-Region primary key with replicas, the
--   waiting period begins when the last of its replica keys is deleted.
--   Otherwise, the waiting period begins immediately.
scheduleKeyDeletionResponse_pendingWindowInDays :: Lens' ScheduleKeyDeletionResponse (Maybe Natural)

-- | The current status of the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
scheduleKeyDeletionResponse_keyState :: Lens' ScheduleKeyDeletionResponse (Maybe KeyState)

-- | The date and time after which KMS deletes the KMS key.
--   
--   If the KMS key is a multi-Region primary key with replica keys, this
--   field does not appear. The deletion date for the primary key isn't
--   known until its last replica key is deleted.
scheduleKeyDeletionResponse_deletionDate :: Lens' ScheduleKeyDeletionResponse (Maybe UTCTime)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key whose
--   deletion is scheduled.
scheduleKeyDeletionResponse_keyId :: Lens' ScheduleKeyDeletionResponse (Maybe Text)

-- | The response's http status code.
scheduleKeyDeletionResponse_httpStatus :: Lens' ScheduleKeyDeletionResponse Int

-- | Identifies the grant to be retired. You can use a grant token to
--   identify a new grant even before it has achieved eventual consistency.
--   
--   Only the CreateGrant operation returns a grant token. For details, see
--   <a>Grant token</a> and <a>Eventual consistency</a> in the <i>Key
--   Management Service Developer Guide</i>.
retireGrant_grantToken :: Lens' RetireGrant (Maybe Text)

-- | Identifies the grant to retire. To get the grant ID, use CreateGrant,
--   ListGrants, or ListRetirableGrants.
--   
--   <ul>
--   <li>Grant ID Example -
--   0123456789012345678901234567890123456789012345678901234567890123</li>
--   </ul>
retireGrant_grantId :: Lens' RetireGrant (Maybe Text)

-- | The key ARN KMS key associated with the grant. To find the key ARN,
--   use the ListKeys operation.
--   
--   For example:
--   <tt>arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt>
retireGrant_keyId :: Lens' RetireGrant (Maybe Text)

-- | The source of the key material for the KMS key. You cannot change the
--   origin after you create the KMS key. The default is <tt>AWS_KMS</tt>,
--   which means that KMS creates the key material.
--   
--   To create a KMS key with no key material (for imported key material),
--   set the value to <tt>EXTERNAL</tt>. For more information about
--   importing key material into KMS, see <a>Importing Key Material</a> in
--   the <i>Key Management Service Developer Guide</i>. This value is valid
--   only for symmetric KMS keys.
--   
--   To create a KMS key in an KMS <a>custom key store</a> and create its
--   key material in the associated CloudHSM cluster, set this value to
--   <tt>AWS_CLOUDHSM</tt>. You must also use the <tt>CustomKeyStoreId</tt>
--   parameter to identify the custom key store. This value is valid only
--   for symmetric KMS keys.
createKey_origin :: Lens' CreateKey (Maybe OriginType)

-- | Creates a multi-Region primary key that you can replicate into other
--   Amazon Web Services Regions. You cannot change this value after you
--   create the KMS key.
--   
--   For a multi-Region key, set this parameter to <tt>True</tt>. For a
--   single-Region KMS key, omit this parameter or set it to
--   <tt>False</tt>. The default value is <tt>False</tt>.
--   
--   This operation supports <i>multi-Region keys</i>, an KMS feature that
--   lets you create multiple interoperable KMS keys in different Amazon
--   Web Services Regions. Because these KMS keys have the same key ID, key
--   material, and other metadata, you can use them interchangeably to
--   encrypt data in one Amazon Web Services Region and decrypt it in a
--   different Amazon Web Services Region without re-encrypting the data or
--   making a cross-Region call. For more information about multi-Region
--   keys, see <a>Using multi-Region keys</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   This value creates a <i>primary key</i>, not a replica. To create a
--   /replica key/, use the ReplicateKey operation.
--   
--   You can create a symmetric or asymmetric multi-Region key, and you can
--   create a multi-Region key with imported key material. However, you
--   cannot create a multi-Region key in a custom key store.
createKey_multiRegion :: Lens' CreateKey (Maybe Bool)

-- | Creates the KMS key in the specified <a>custom key store</a> and the
--   key material in its associated CloudHSM cluster. To create a KMS key
--   in a custom key store, you must also specify the <tt>Origin</tt>
--   parameter with a value of <tt>AWS_CLOUDHSM</tt>. The CloudHSM cluster
--   that is associated with the custom key store must have at least two
--   active HSMs, each in a different Availability Zone in the Region.
--   
--   This parameter is valid only for symmetric KMS keys and regional KMS
--   keys. You cannot create an asymmetric KMS key or a multi-Region key in
--   a custom key store.
--   
--   To find the ID of a custom key store, use the DescribeCustomKeyStores
--   operation.
--   
--   The response includes the custom key store ID and the ID of the
--   CloudHSM cluster.
--   
--   This operation is part of the <a>Custom Key Store feature</a> feature
--   in KMS, which combines the convenience and extensive integration of
--   KMS with the isolation and control of a single-tenant key store.
createKey_customKeyStoreId :: Lens' CreateKey (Maybe Text)

-- | A flag to indicate whether to bypass the key policy lockout safety
--   check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the /<i>Key Management Service Developer
--   Guide</i>/ .
--   
--   Use this parameter only when you include a policy in the request and
--   you intend to prevent the principal that is making the request from
--   making a subsequent PutKeyPolicy request on the KMS key.
--   
--   The default value is false.
createKey_bypassPolicyLockoutSafetyCheck :: Lens' CreateKey (Maybe Bool)

-- | Assigns one or more tags to the KMS key. Use this parameter to tag the
--   KMS key when it is created. To tag an existing KMS key, use the
--   TagResource operation.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   To use this parameter, you must have <a>kms:TagResource</a> permission
--   in an IAM policy.
--   
--   Each tag consists of a tag key and a tag value. Both the tag key and
--   the tag value are required, but the tag value can be an empty (null)
--   string. You cannot have more than one tag on a KMS key with the same
--   tag key. If you specify an existing tag key with a different tag
--   value, KMS replaces the current tag value with the specified one.
--   
--   When you add tags to an Amazon Web Services resource, Amazon Web
--   Services generates a cost allocation report with usage and costs
--   aggregated by tags. Tags can also be used to control access to a KMS
--   key. For details, see <a>Tagging Keys</a>.
createKey_tags :: Lens' CreateKey (Maybe [Tag])

-- | A description of the KMS key.
--   
--   Use a description that helps you decide whether the KMS key is
--   appropriate for a task. The default value is an empty string (no
--   description).
--   
--   To set or change the description after the key is created, use
--   UpdateKeyDescription.
createKey_description :: Lens' CreateKey (Maybe Text)

-- | The key policy to attach to the KMS key.
--   
--   If you provide a key policy, it must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must allow the principal that is making the
--   <tt>CreateKey</tt> request to make a subsequent PutKeyPolicy request
--   on the KMS key. This reduces the risk that the KMS key becomes
--   unmanageable. For more information, refer to the scenario in the
--   <a>Default Key Policy</a> section of the /<i>Key Management Service
--   Developer Guide</i>/ .</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /Amazon Web Services Identity and Access Management
--   User Guide/.</li>
--   </ul>
--   
--   If you do not provide a key policy, KMS attaches a default key policy
--   to the KMS key. For more information, see <a>Default Key Policy</a> in
--   the <i>Key Management Service Developer Guide</i>.
--   
--   The key policy size quota is 32 kilobytes (32768 bytes).
--   
--   For help writing and formatting a JSON policy document, see the <a>IAM
--   JSON Policy Reference</a> in the /<i>Identity and Access Management
--   User Guide</i>/ .
createKey_policy :: Lens' CreateKey (Maybe Text)

-- | Specifies the type of KMS key to create. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, creates a KMS key with a 256-bit symmetric
--   key for encryption and decryption. For help choosing a key spec for
--   your KMS key, see <a>How to Choose Your KMS key Configuration</a> in
--   the /<i>Key Management Service Developer Guide</i>/ .
--   
--   The <tt>KeySpec</tt> determines whether the KMS key contains a
--   symmetric key or an asymmetric key pair. It also determines the
--   encryption algorithms or signing algorithms that the KMS key supports.
--   You can't change the <tt>KeySpec</tt> after the KMS key is created. To
--   further restrict the algorithms that can be used with the KMS key, use
--   a condition key in its key policy or IAM policy. For more information,
--   see <a>kms:EncryptionAlgorithm</a> or <a>kms:Signing Algorithm</a> in
--   the /<i>Key Management Service Developer Guide</i>/ .
--   
--   <a>Amazon Web Services services that are integrated with KMS</a> use
--   symmetric KMS keys to protect your data. These services do not support
--   asymmetric KMS keys. For help determining whether a KMS key is
--   symmetric or asymmetric, see <a>Identifying Symmetric and Asymmetric
--   KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
--   
--   KMS supports the following key specs for KMS keys:
--   
--   <ul>
--   <li>Symmetric key (default)<ul><li><tt>SYMMETRIC_DEFAULT</tt>
--   (AES-256-GCM)</li></ul></li>
--   <li>Asymmetric RSA key
--   pairs<ul><li><pre>RSA_2048</pre></li><li><pre>RSA_3072</pre></li><li><pre>RSA_4096</pre></li></ul></li>
--   <li>Asymmetric NIST-recommended elliptic curve key
--   pairs<ul><li><tt>ECC_NIST_P256</tt>
--   (secp256r1)</li><li><tt>ECC_NIST_P384</tt>
--   (secp384r1)</li><li><tt>ECC_NIST_P521</tt> (secp521r1)</li></ul></li>
--   <li>Other asymmetric elliptic curve key
--   pairs<ul><li><tt>ECC_SECG_P256K1</tt> (secp256k1), commonly used for
--   cryptocurrencies.</li></ul></li>
--   </ul>
createKey_keySpec :: Lens' CreateKey (Maybe KeySpec)

-- | Instead, use the <tt>KeySpec</tt> parameter.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> parameters
--   work the same way. Only the names differ. We recommend that you use
--   <tt>KeySpec</tt> parameter in your code. However, to avoid breaking
--   changes, KMS will support both parameters.
createKey_customerMasterKeySpec :: Lens' CreateKey (Maybe CustomerMasterKeySpec)

-- | Determines the <a>cryptographic operations</a> for which you can use
--   the KMS key. The default value is <tt>ENCRYPT_DECRYPT</tt>. This
--   parameter is required only for asymmetric KMS keys. You can't change
--   the <tt>KeyUsage</tt> value after the KMS key is created.
--   
--   Select only one valid value.
--   
--   <ul>
--   <li>For symmetric KMS keys, omit the parameter or specify
--   <tt>ENCRYPT_DECRYPT</tt>.</li>
--   <li>For asymmetric KMS keys with RSA key material, specify
--   <tt>ENCRYPT_DECRYPT</tt> or <tt>SIGN_VERIFY</tt>.</li>
--   <li>For asymmetric KMS keys with ECC key material, specify
--   <tt>SIGN_VERIFY</tt>.</li>
--   </ul>
createKey_keyUsage :: Lens' CreateKey (Maybe KeyUsageType)

-- | Metadata associated with the KMS key.
createKeyResponse_keyMetadata :: Lens' CreateKeyResponse (Maybe KeyMetadata)

-- | The response's http status code.
createKeyResponse_httpStatus :: Lens' CreateKeyResponse Int

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
sign_grantTokens :: Lens' Sign (Maybe [Text])

-- | Tells KMS whether the value of the <tt>Message</tt> parameter is a
--   message or message digest. The default value, RAW, indicates a
--   message. To indicate a message digest, enter <tt>DIGEST</tt>.
sign_messageType :: Lens' Sign (Maybe MessageType)

-- | Identifies an asymmetric KMS key. KMS uses the private key in the
--   asymmetric KMS key to sign the message. The <tt>KeyUsage</tt> type of
--   the KMS key must be <tt>SIGN_VERIFY</tt>. To find the
--   <tt>KeyUsage</tt> of a KMS key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
sign_keyId :: Lens' Sign Text

-- | Specifies the message or message digest to sign. Messages can be
--   0-4096 bytes. To sign a larger message, provide the message digest.
--   
--   If you provide a message, KMS generates a hash digest of the message
--   and then signs it.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
sign_message :: Lens' Sign ByteString

-- | Specifies the signing algorithm to use when signing the message.
--   
--   Choose an algorithm that is compatible with the type and size of the
--   specified asymmetric KMS key.
sign_signingAlgorithm :: Lens' Sign SigningAlgorithmSpec

-- | The signing algorithm that was used to sign the message.
signResponse_signingAlgorithm :: Lens' SignResponse (Maybe SigningAlgorithmSpec)

-- | The cryptographic signature that was generated for the message.
--   
--   <ul>
--   <li>When used with the supported RSA signing algorithms, the encoding
--   of this value is defined by <a>PKCS #1 in RFC 8017</a>.</li>
--   <li>When used with the <tt>ECDSA_SHA_256</tt>, <tt>ECDSA_SHA_384</tt>,
--   or <tt>ECDSA_SHA_512</tt> signing algorithms, this value is a
--   DER-encoded object as defined by ANS X9.62–2005 and <a>RFC 3279
--   Section 2.2.3</a>. This is the most commonly used signature format and
--   is appropriate for most uses.</li>
--   </ul>
--   
--   When you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
signResponse_signature :: Lens' SignResponse (Maybe ByteString)

-- | The Amazon Resource Name (<a>key ARN</a>) of the asymmetric KMS key
--   that was used to sign the message.
signResponse_keyId :: Lens' SignResponse (Maybe Text)

-- | The response's http status code.
signResponse_httpStatus :: Lens' SignResponse Int

-- | Updates the description of the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
updateKeyDescription_keyId :: Lens' UpdateKeyDescription Text

-- | New description for the KMS key.
updateKeyDescription_description :: Lens' UpdateKeyDescription Text

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
generateDataKeyPairWithoutPlaintext_grantTokens :: Lens' GenerateDataKeyPairWithoutPlaintext (Maybe [Text])

-- | Specifies the encryption context that will be used when encrypting the
--   private key in the data key pair.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
generateDataKeyPairWithoutPlaintext_encryptionContext :: Lens' GenerateDataKeyPairWithoutPlaintext (Maybe (HashMap Text Text))

-- | Specifies the KMS key that encrypts the private key in the data key
--   pair. You must specify a symmetric KMS key. You cannot use an
--   asymmetric KMS key or a KMS key in a custom key store. To get the type
--   and origin of your KMS key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
generateDataKeyPairWithoutPlaintext_keyId :: Lens' GenerateDataKeyPairWithoutPlaintext Text

-- | Determines the type of data key pair that is generated.
--   
--   The KMS rule that restricts the use of asymmetric RSA KMS keys to
--   encrypt and decrypt or to sign and verify (but not both), and the rule
--   that permits you to use ECC KMS keys only to sign and verify, are not
--   effective on data key pairs, which are used outside of KMS.
generateDataKeyPairWithoutPlaintext_keyPairSpec :: Lens' GenerateDataKeyPairWithoutPlaintext DataKeyPairSpec

-- | The public key (in plaintext).-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
generateDataKeyPairWithoutPlaintextResponse_publicKey :: Lens' GenerateDataKeyPairWithoutPlaintextResponse (Maybe ByteString)

-- | The type of data key pair that was generated.
generateDataKeyPairWithoutPlaintextResponse_keyPairSpec :: Lens' GenerateDataKeyPairWithoutPlaintextResponse (Maybe DataKeyPairSpec)

-- | The encrypted copy of the private key. When you use the HTTP API or
--   the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
--   it is not Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
generateDataKeyPairWithoutPlaintextResponse_privateKeyCiphertextBlob :: Lens' GenerateDataKeyPairWithoutPlaintextResponse (Maybe ByteString)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that
--   encrypted the private key.
generateDataKeyPairWithoutPlaintextResponse_keyId :: Lens' GenerateDataKeyPairWithoutPlaintextResponse (Maybe Text)

-- | The response's http status code.
generateDataKeyPairWithoutPlaintextResponse_httpStatus :: Lens' GenerateDataKeyPairWithoutPlaintextResponse Int

-- | Identifies the KMS key whose deletion is being canceled.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
cancelKeyDeletion_keyId :: Lens' CancelKeyDeletion Text

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key whose
--   deletion is canceled.
cancelKeyDeletionResponse_keyId :: Lens' CancelKeyDeletionResponse (Maybe Text)

-- | The response's http status code.
cancelKeyDeletionResponse_httpStatus :: Lens' CancelKeyDeletionResponse Int

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
decrypt_grantTokens :: Lens' Decrypt (Maybe [Text])

-- | Specifies the encryption algorithm that will be used to decrypt the
--   ciphertext. Specify the same algorithm that was used to encrypt the
--   data. If you specify a different algorithm, the <tt>Decrypt</tt>
--   operation fails.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, represents the only supported algorithm
--   that is valid for symmetric KMS keys.
decrypt_encryptionAlgorithm :: Lens' Decrypt (Maybe EncryptionAlgorithmSpec)

-- | Specifies the encryption context to use when decrypting the data. An
--   encryption context is valid only for <a>cryptographic operations</a>
--   with a symmetric KMS key. The standard asymmetric encryption
--   algorithms that KMS uses do not support an encryption context.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
decrypt_encryptionContext :: Lens' Decrypt (Maybe (HashMap Text Text))

-- | Specifies the KMS key that KMS uses to decrypt the ciphertext. Enter a
--   key ID of the KMS key that was used to encrypt the ciphertext.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. If you used a symmetric KMS key, KMS can
--   get the KMS key from metadata that it adds to the symmetric ciphertext
--   blob. However, it is always recommended as a best practice. This
--   practice ensures that you use the KMS key that you intend.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
decrypt_keyId :: Lens' Decrypt (Maybe Text)

-- | Ciphertext to be decrypted. The blob includes metadata.-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
decrypt_ciphertextBlob :: Lens' Decrypt ByteString

-- | Decrypted plaintext data. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
decryptResponse_plaintext :: Lens' DecryptResponse (Maybe ByteString)

-- | The encryption algorithm that was used to decrypt the ciphertext.
decryptResponse_encryptionAlgorithm :: Lens' DecryptResponse (Maybe EncryptionAlgorithmSpec)

-- | The Amazon Resource Name (<a>key ARN</a>) of the KMS key that was used
--   to decrypt the ciphertext.
decryptResponse_keyId :: Lens' DecryptResponse (Maybe Text)

-- | The response's http status code.
decryptResponse_httpStatus :: Lens' DecryptResponse Int

-- | Gets only information about the specified custom key store. Enter the
--   friendly name of the custom key store.
--   
--   By default, this operation gets information about all custom key
--   stores in the account and Region. To limit the output to a particular
--   custom key store, you can use either the <tt>CustomKeyStoreId</tt> or
--   <tt>CustomKeyStoreName</tt> parameter, but not both.
describeCustomKeyStores_customKeyStoreName :: Lens' DescribeCustomKeyStores (Maybe Text)

-- | Gets only information about the specified custom key store. Enter the
--   key store ID.
--   
--   By default, this operation gets information about all custom key
--   stores in the account and Region. To limit the output to a particular
--   custom key store, you can use either the <tt>CustomKeyStoreId</tt> or
--   <tt>CustomKeyStoreName</tt> parameter, but not both.
describeCustomKeyStores_customKeyStoreId :: Lens' DescribeCustomKeyStores (Maybe Text)

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
describeCustomKeyStores_limit :: Lens' DescribeCustomKeyStores (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
describeCustomKeyStores_marker :: Lens' DescribeCustomKeyStores (Maybe Text)

-- | Contains metadata about each custom key store.
describeCustomKeyStoresResponse_customKeyStores :: Lens' DescribeCustomKeyStoresResponse (Maybe [CustomKeyStoresListEntry])

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
describeCustomKeyStoresResponse_nextMarker :: Lens' DescribeCustomKeyStoresResponse (Maybe Text)

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
describeCustomKeyStoresResponse_truncated :: Lens' DescribeCustomKeyStoresResponse (Maybe Bool)

-- | The response's http status code.
describeCustomKeyStoresResponse_httpStatus :: Lens' DescribeCustomKeyStoresResponse Int

-- | Specifies a grant constraint.
--   
--   KMS supports the <tt>EncryptionContextEquals</tt> and
--   <tt>EncryptionContextSubset</tt> grant constraints. Each constraint
--   value can include up to 8 encryption context pairs. The encryption
--   context value in each constraint cannot exceed 384 characters.
--   
--   These grant constraints allow the permissions in the grant only when
--   the encryption context in the request matches
--   (<tt>EncryptionContextEquals</tt>) or includes
--   (<tt>EncryptionContextSubset</tt>) the encryption context specified in
--   this structure. For information about grant constraints, see <a>Using
--   grant constraints</a> in the <i>Key Management Service Developer
--   Guide</i>. For more information about encryption context, see
--   <a>Encryption Context</a> in the /<i>Key Management Service Developer
--   Guide</i>/ .
--   
--   The encryption context grant constraints are supported only on
--   operations that include an encryption context. You cannot use an
--   encryption context grant constraint for cryptographic operations with
--   asymmetric KMS keys or for management operations, such as DescribeKey
--   or RetireGrant.
createGrant_constraints :: Lens' CreateGrant (Maybe GrantConstraints)

-- | A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
createGrant_grantTokens :: Lens' CreateGrant (Maybe [Text])

-- | A friendly name for the grant. Use this value to prevent the
--   unintended creation of duplicate grants when retrying this request.
--   
--   When this value is absent, all <tt>CreateGrant</tt> requests result in
--   a new grant with a unique <tt>GrantId</tt> even if all the supplied
--   parameters are identical. This can result in unintended duplicates
--   when you retry the <tt>CreateGrant</tt> request.
--   
--   When this value is present, you can retry a <tt>CreateGrant</tt>
--   request with identical parameters; if the grant already exists, the
--   original <tt>GrantId</tt> is returned without creating a new grant.
--   Note that the returned grant token is unique with every
--   <tt>CreateGrant</tt> request, even when a duplicate <tt>GrantId</tt>
--   is returned. All grant tokens for the same grant ID can be used
--   interchangeably.
createGrant_name :: Lens' CreateGrant (Maybe Text)

-- | The principal that has permission to use the RetireGrant operation to
--   retire the grant.
--   
--   To specify the principal, use the <a>Amazon Resource Name (ARN)</a> of
--   an Amazon Web Services principal. Valid Amazon Web Services principals
--   include Amazon Web Services accounts (root), IAM users, federated
--   users, and assumed role users. For examples of the ARN syntax to use
--   for specifying a principal, see <a>Amazon Web Services Identity and
--   Access Management (IAM)</a> in the Example ARNs section of the /Amazon
--   Web Services General Reference/.
--   
--   The grant determines the retiring principal. Other principals might
--   have permission to retire the grant or revoke the grant. For details,
--   see RevokeGrant and <a>Retiring and revoking grants</a> in the <i>Key
--   Management Service Developer Guide</i>.
createGrant_retiringPrincipal :: Lens' CreateGrant (Maybe Text)

-- | Identifies the KMS key for the grant. The grant gives principals
--   permission to use this KMS key.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
createGrant_keyId :: Lens' CreateGrant Text

-- | The identity that gets the permissions specified in the grant.
--   
--   To specify the principal, use the <a>Amazon Resource Name (ARN)</a> of
--   an Amazon Web Services principal. Valid Amazon Web Services principals
--   include Amazon Web Services accounts (root), IAM users, IAM roles,
--   federated users, and assumed role users. For examples of the ARN
--   syntax to use for specifying a principal, see <a>Amazon Web Services
--   Identity and Access Management (IAM)</a> in the Example ARNs section
--   of the /Amazon Web Services General Reference/.
createGrant_granteePrincipal :: Lens' CreateGrant Text

-- | A list of operations that the grant permits.
--   
--   The operation must be supported on the KMS key. For example, you
--   cannot create a grant for a symmetric KMS key that allows the Sign
--   operation, or a grant for an asymmetric KMS key that allows the
--   GenerateDataKey operation. If you try, KMS returns a
--   <tt>ValidationError</tt> exception. For details, see <a>Grant
--   operations</a> in the <i>Key Management Service Developer Guide</i>.
createGrant_operations :: Lens' CreateGrant [GrantOperation]

-- | The grant token.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
createGrantResponse_grantToken :: Lens' CreateGrantResponse (Maybe Text)

-- | The unique identifier for the grant.
--   
--   You can use the <tt>GrantId</tt> in a ListGrants, RetireGrant, or
--   RevokeGrant operation.
createGrantResponse_grantId :: Lens' CreateGrantResponse (Maybe Text)

-- | The response's http status code.
createGrantResponse_httpStatus :: Lens' CreateGrantResponse Int

-- | Identifies a symmetric KMS key. You cannot enable automatic rotation
--   of <a>asymmetric KMS keys</a>, KMS keys with <a>imported key
--   material</a>, or KMS keys in a <a>custom key store</a>. To enable or
--   disable automatic rotation of a set of related <a>multi-Region
--   keys</a>, set the property on the primary key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
enableKeyRotation_keyId :: Lens' EnableKeyRotation Text

-- | Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
listAliases_limit :: Lens' ListAliases (Maybe Natural)

-- | Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
listAliases_marker :: Lens' ListAliases (Maybe Text)

-- | Lists only aliases that are associated with the specified KMS key.
--   Enter a KMS key in your Amazon Web Services account.
--   
--   This parameter is optional. If you omit it, <tt>ListAliases</tt>
--   returns all aliases in the account and Region.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
listAliases_keyId :: Lens' ListAliases (Maybe Text)

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listAliasesResponse_nextMarker :: Lens' ListAliasesResponse (Maybe Text)

-- | A list of aliases.
listAliasesResponse_aliases :: Lens' ListAliasesResponse (Maybe [AliasListEntry])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listAliasesResponse_truncated :: Lens' ListAliasesResponse (Maybe Bool)

-- | The response's http status code.
listAliasesResponse_httpStatus :: Lens' ListAliasesResponse Int

-- | Specifies the alias name. This value must begin with <tt>alias/</tt>
--   followed by a name, such as <tt>alias/ExampleAlias</tt>.
--   
--   The <tt>AliasName</tt> value must be string of 1-256 characters. It
--   can contain only alphanumeric characters, forward slashes (/),
--   underscores (_), and dashes (-). The alias name cannot begin with
--   <tt>alias/aws/</tt>. The <tt>alias/aws/</tt> prefix is reserved for
--   <a>Amazon Web Services managed keys</a>.
createAlias_aliasName :: Lens' CreateAlias Text

-- | Associates the alias with the specified <a>customer managed key</a>.
--   The KMS key must be in the same Amazon Web Services Region.
--   
--   A valid key ID is required. If you supply a null or empty string
--   value, this operation returns an error.
--   
--   For help finding the key ID and ARN, see <a>Finding the Key ID and
--   ARN</a> in the /<i>Key Management Service Developer Guide</i>/ .
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
createAlias_targetKeyId :: Lens' CreateAlias Text

-- | Date and time that the alias was most recently associated with a KMS
--   key in the account and Region. Formatted as Unix time.
aliasListEntry_lastUpdatedDate :: Lens' AliasListEntry (Maybe UTCTime)

-- | Date and time that the alias was most recently created in the account
--   and Region. Formatted as Unix time.
aliasListEntry_creationDate :: Lens' AliasListEntry (Maybe UTCTime)

-- | String that contains the alias. This value begins with
--   <tt>alias/</tt>.
aliasListEntry_aliasName :: Lens' AliasListEntry (Maybe Text)

-- | String that contains the key identifier of the KMS key associated with
--   the alias.
aliasListEntry_targetKeyId :: Lens' AliasListEntry (Maybe Text)

-- | String that contains the key ARN.
aliasListEntry_aliasArn :: Lens' AliasListEntry (Maybe Text)

-- | The user-specified friendly name for the custom key store.
customKeyStoresListEntry_customKeyStoreName :: Lens' CustomKeyStoresListEntry (Maybe Text)

-- | Indicates whether the custom key store is connected to its CloudHSM
--   cluster.
--   
--   You can create and use KMS keys in your custom key stores only when
--   its connection state is <tt>CONNECTED</tt>.
--   
--   The value is <tt>DISCONNECTED</tt> if the key store has never been
--   connected or you use the DisconnectCustomKeyStore operation to
--   disconnect it. If the value is <tt>CONNECTED</tt> but you are having
--   trouble using the custom key store, make sure that its associated
--   CloudHSM cluster is active and contains at least one active HSM.
--   
--   A value of <tt>FAILED</tt> indicates that an attempt to connect was
--   unsuccessful. The <tt>ConnectionErrorCode</tt> field in the response
--   indicates the cause of the failure. For help resolving a connection
--   failure, see <a>Troubleshooting a Custom Key Store</a> in the <i>Key
--   Management Service Developer Guide</i>.
customKeyStoresListEntry_connectionState :: Lens' CustomKeyStoresListEntry (Maybe ConnectionStateType)

-- | A unique identifier for the custom key store.
customKeyStoresListEntry_customKeyStoreId :: Lens' CustomKeyStoresListEntry (Maybe Text)

-- | The trust anchor certificate of the associated CloudHSM cluster. When
--   you <a>initialize the cluster</a>, you create this certificate and
--   save it in the <tt>customerCA.crt</tt> file.
customKeyStoresListEntry_trustAnchorCertificate :: Lens' CustomKeyStoresListEntry (Maybe Text)

-- | A unique identifier for the CloudHSM cluster that is associated with
--   the custom key store.
customKeyStoresListEntry_cloudHsmClusterId :: Lens' CustomKeyStoresListEntry (Maybe Text)

-- | The date and time when the custom key store was created.
customKeyStoresListEntry_creationDate :: Lens' CustomKeyStoresListEntry (Maybe UTCTime)

-- | Describes the connection error. This field appears in the response
--   only when the <tt>ConnectionState</tt> is <tt>FAILED</tt>. For help
--   resolving these errors, see <a>How to Fix a Connection Failure</a> in
--   <i>Key Management Service Developer Guide</i>.
--   
--   Valid values are:
--   
--   <ul>
--   <li><tt>CLUSTER_NOT_FOUND</tt> - KMS cannot find the CloudHSM cluster
--   with the specified cluster ID.</li>
--   <li><tt>INSUFFICIENT_CLOUDHSM_HSMS</tt> - The associated CloudHSM
--   cluster does not contain any active HSMs. To connect a custom key
--   store to its CloudHSM cluster, the cluster must contain at least one
--   active HSM.</li>
--   <li><tt>INTERNAL_ERROR</tt> - KMS could not complete the request due
--   to an internal error. Retry the request. For
--   <tt>ConnectCustomKeyStore</tt> requests, disconnect the custom key
--   store before trying to connect again.</li>
--   <li><tt>INVALID_CREDENTIALS</tt> - KMS does not have the correct
--   password for the <tt>kmsuser</tt> crypto user in the CloudHSM cluster.
--   Before you can connect your custom key store to its CloudHSM cluster,
--   you must change the <tt>kmsuser</tt> account password and update the
--   key store password value for the custom key store.</li>
--   <li><tt>NETWORK_ERRORS</tt> - Network errors are preventing KMS from
--   connecting to the custom key store.</li>
--   <li><tt>SUBNET_NOT_FOUND</tt> - A subnet in the CloudHSM cluster
--   configuration was deleted. If KMS cannot find all of the subnets in
--   the cluster configuration, attempts to connect the custom key store to
--   the CloudHSM cluster fail. To fix this error, create a cluster from a
--   recent backup and associate it with your custom key store. (This
--   process creates a new cluster configuration with a VPC and private
--   subnets.) For details, see <a>How to Fix a Connection Failure</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_LOCKED_OUT</tt> - The <tt>kmsuser</tt> CU account is
--   locked out of the associated CloudHSM cluster due to too many failed
--   password attempts. Before you can connect your custom key store to its
--   CloudHSM cluster, you must change the <tt>kmsuser</tt> account
--   password and update the key store password value for the custom key
--   store.</li>
--   <li><tt>USER_LOGGED_IN</tt> - The <tt>kmsuser</tt> CU account is
--   logged into the the associated CloudHSM cluster. This prevents KMS
--   from rotating the <tt>kmsuser</tt> account password and logging into
--   the cluster. Before you can connect your custom key store to its
--   CloudHSM cluster, you must log the <tt>kmsuser</tt> CU out of the
--   cluster. If you changed the <tt>kmsuser</tt> password to log into the
--   cluster, you must also and update the key store password value for the
--   custom key store. For help, see <a>How to Log Out and Reconnect</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_NOT_FOUND</tt> - KMS cannot find a <tt>kmsuser</tt> CU
--   account in the associated CloudHSM cluster. Before you can connect
--   your custom key store to its CloudHSM cluster, you must create a
--   <tt>kmsuser</tt> CU account in the cluster, and then update the key
--   store password value for the custom key store.</li>
--   </ul>
customKeyStoresListEntry_connectionErrorCode :: Lens' CustomKeyStoresListEntry (Maybe ConnectionErrorCodeType)

-- | A list of key-value pairs that must match the encryption context in
--   the <a>cryptographic operation</a> request. The grant allows the
--   operation only when the encryption context in the request is the same
--   as the encryption context specified in this constraint.
grantConstraints_encryptionContextEquals :: Lens' GrantConstraints (Maybe (HashMap Text Text))

-- | A list of key-value pairs that must be included in the encryption
--   context of the <a>cryptographic operation</a> request. The grant
--   allows the cryptographic operation only when the encryption context in
--   the request includes the key-value pairs specified in this constraint,
--   although it can include additional key-value pairs.
grantConstraints_encryptionContextSubset :: Lens' GrantConstraints (Maybe (HashMap Text Text))

-- | A list of key-value pairs that must be present in the encryption
--   context of certain subsequent operations that the grant allows.
grantListEntry_constraints :: Lens' GrantListEntry (Maybe GrantConstraints)

-- | The list of operations permitted by the grant.
grantListEntry_operations :: Lens' GrantListEntry (Maybe [GrantOperation])

-- | The date and time when the grant was created.
grantListEntry_creationDate :: Lens' GrantListEntry (Maybe UTCTime)

-- | The friendly name that identifies the grant. If a name was provided in
--   the CreateGrant request, that name is returned. Otherwise this value
--   is null.
grantListEntry_name :: Lens' GrantListEntry (Maybe Text)

-- | The identity that gets the permissions in the grant.
--   
--   The <tt>GranteePrincipal</tt> field in the <tt>ListGrants</tt>
--   response usually contains the user or role designated as the grantee
--   principal in the grant. However, when the grantee principal in the
--   grant is an Amazon Web Services service, the <tt>GranteePrincipal</tt>
--   field contains the <a>service principal</a>, which might represent
--   several different grantee principals.
grantListEntry_granteePrincipal :: Lens' GrantListEntry (Maybe Text)

-- | The unique identifier for the grant.
grantListEntry_grantId :: Lens' GrantListEntry (Maybe Text)

-- | The Amazon Web Services account under which the grant was issued.
grantListEntry_issuingAccount :: Lens' GrantListEntry (Maybe Text)

-- | The principal that can retire the grant.
grantListEntry_retiringPrincipal :: Lens' GrantListEntry (Maybe Text)

-- | The unique identifier for the KMS key to which the grant applies.
grantListEntry_keyId :: Lens' GrantListEntry (Maybe Text)

-- | ARN of the key.
keyListEntry_keyArn :: Lens' KeyListEntry (Maybe Text)

-- | Unique identifier of the key.
keyListEntry_keyId :: Lens' KeyListEntry (Maybe Text)

-- | The signing algorithms that the KMS key supports. You cannot use the
--   KMS key with other signing algorithms within KMS.
--   
--   This field appears only when the <tt>KeyUsage</tt> of the KMS key is
--   <tt>SIGN_VERIFY</tt>.
keyMetadata_signingAlgorithms :: Lens' KeyMetadata (Maybe [SigningAlgorithmSpec])

-- | The waiting period before the primary key in a multi-Region key is
--   deleted. This waiting period begins when the last of its replica keys
--   is deleted. This value is present only when the <tt>KeyState</tt> of
--   the KMS key is <tt>PendingReplicaDeletion</tt>. That indicates that
--   the KMS key is the primary key in a multi-Region key, it is scheduled
--   for deletion, and it still has existing replica keys.
--   
--   When a single-Region KMS key or a multi-Region replica key is
--   scheduled for deletion, its deletion date is displayed in the
--   <tt>DeletionDate</tt> field. However, when the primary key in a
--   multi-Region key is scheduled for deletion, its waiting period doesn't
--   begin until all of its replica keys are deleted. This value displays
--   that waiting period. When the last replica key in the multi-Region key
--   is deleted, the <tt>KeyState</tt> of the scheduled primary key changes
--   from <tt>PendingReplicaDeletion</tt> to <tt>PendingDeletion</tt> and
--   the deletion date appears in the <tt>DeletionDate</tt> field.
keyMetadata_pendingDeletionWindowInDays :: Lens' KeyMetadata (Maybe Natural)

-- | The source of the key material for the KMS key. When this value is
--   <tt>AWS_KMS</tt>, KMS created the key material. When this value is
--   <tt>EXTERNAL</tt>, the key material was imported or the KMS key
--   doesn't have any key material. When this value is
--   <tt>AWS_CLOUDHSM</tt>, the key material was created in the CloudHSM
--   cluster associated with a custom key store.
keyMetadata_origin :: Lens' KeyMetadata (Maybe OriginType)

-- | The manager of the KMS key. KMS keys in your Amazon Web Services
--   account are either customer managed or Amazon Web Services managed.
--   For more information about the difference, see <a>KMS keys</a> in the
--   <i>Key Management Service Developer Guide</i>.
keyMetadata_keyManager :: Lens' KeyMetadata (Maybe KeyManagerType)

-- | The twelve-digit account ID of the Amazon Web Services account that
--   owns the KMS key.
keyMetadata_aWSAccountId :: Lens' KeyMetadata (Maybe Text)

-- | Indicates whether the KMS key is a multi-Region (<tt>True</tt>) or
--   regional (<tt>False</tt>) key. This value is <tt>True</tt> for
--   multi-Region primary and replica keys and <tt>False</tt> for regional
--   KMS keys.
--   
--   For more information about multi-Region keys, see <a>Using
--   multi-Region keys</a> in the <i>Key Management Service Developer
--   Guide</i>.
keyMetadata_multiRegion :: Lens' KeyMetadata (Maybe Bool)

-- | A unique identifier for the <a>custom key store</a> that contains the
--   KMS key. This value is present only when the KMS key is created in a
--   custom key store.
keyMetadata_customKeyStoreId :: Lens' KeyMetadata (Maybe Text)

-- | The encryption algorithms that the KMS key supports. You cannot use
--   the KMS key with other encryption algorithms within KMS.
--   
--   This value is present only when the <tt>KeyUsage</tt> of the KMS key
--   is <tt>ENCRYPT_DECRYPT</tt>.
keyMetadata_encryptionAlgorithms :: Lens' KeyMetadata (Maybe [EncryptionAlgorithmSpec])

-- | The cluster ID of the CloudHSM cluster that contains the key material
--   for the KMS key. When you create a KMS key in a <a>custom key
--   store</a>, KMS creates the key material for the KMS key in the
--   associated CloudHSM cluster. This value is present only when the KMS
--   key is created in a custom key store.
keyMetadata_cloudHsmClusterId :: Lens' KeyMetadata (Maybe Text)

-- | The current status of the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
keyMetadata_keyState :: Lens' KeyMetadata (Maybe KeyState)

-- | The Amazon Resource Name (ARN) of the KMS key. For examples, see
--   <a>Key Management Service (KMS)</a> in the Example ARNs section of the
--   /Amazon Web Services General Reference/.
keyMetadata_arn :: Lens' KeyMetadata (Maybe Text)

-- | Specifies whether the KMS key is enabled. When <tt>KeyState</tt> is
--   <tt>Enabled</tt> this value is true, otherwise it is false.
keyMetadata_enabled :: Lens' KeyMetadata (Maybe Bool)

-- | The date and time when the KMS key was created.
keyMetadata_creationDate :: Lens' KeyMetadata (Maybe UTCTime)

-- | The time at which the imported key material expires. When the key
--   material expires, KMS deletes the key material and the KMS key becomes
--   unusable. This value is present only for KMS keys whose
--   <tt>Origin</tt> is <tt>EXTERNAL</tt> and whose
--   <tt>ExpirationModel</tt> is <tt>KEY_MATERIAL_EXPIRES</tt>, otherwise
--   this value is omitted.
keyMetadata_validTo :: Lens' KeyMetadata (Maybe UTCTime)

-- | Specifies whether the KMS key's key material expires. This value is
--   present only when <tt>Origin</tt> is <tt>EXTERNAL</tt>, otherwise this
--   value is omitted.
keyMetadata_expirationModel :: Lens' KeyMetadata (Maybe ExpirationModelType)

-- | Lists the primary and replica keys in same multi-Region key. This
--   field is present only when the value of the <tt>MultiRegion</tt> field
--   is <tt>True</tt>.
--   
--   For more information about any listed KMS key, use the DescribeKey
--   operation.
--   
--   <ul>
--   <li><tt>MultiRegionKeyType</tt> indicates whether the KMS key is a
--   <tt>PRIMARY</tt> or <tt>REPLICA</tt> key.</li>
--   <li><tt>PrimaryKey</tt> displays the key ARN and Region of the primary
--   key. This field displays the current KMS key if it is the primary
--   key.</li>
--   <li><tt>ReplicaKeys</tt> displays the key ARNs and Regions of all
--   replica keys. This field includes the current KMS key if it is a
--   replica key.</li>
--   </ul>
keyMetadata_multiRegionConfiguration :: Lens' KeyMetadata (Maybe MultiRegionConfiguration)

-- | The description of the KMS key.
keyMetadata_description :: Lens' KeyMetadata (Maybe Text)

-- | The date and time after which KMS deletes this KMS key. This value is
--   present only when the KMS key is scheduled for deletion, that is, when
--   its <tt>KeyState</tt> is <tt>PendingDeletion</tt>.
--   
--   When the primary key in a multi-Region key is scheduled for deletion
--   but still has replica keys, its key state is
--   <tt>PendingReplicaDeletion</tt> and the length of its waiting period
--   is displayed in the <tt>PendingDeletionWindowInDays</tt> field.
keyMetadata_deletionDate :: Lens' KeyMetadata (Maybe UTCTime)

-- | Describes the type of key material in the KMS key.
keyMetadata_keySpec :: Lens' KeyMetadata (Maybe KeySpec)

-- | Instead, use the <tt>KeySpec</tt> field.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
keyMetadata_customerMasterKeySpec :: Lens' KeyMetadata (Maybe CustomerMasterKeySpec)

-- | The <a>cryptographic operations</a> for which you can use the KMS key.
keyMetadata_keyUsage :: Lens' KeyMetadata (Maybe KeyUsageType)

-- | The globally unique identifier for the KMS key.
keyMetadata_keyId :: Lens' KeyMetadata Text

-- | When <tt>Truncated</tt> is true, this element is present and contains
--   the value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
listGrantsResponse_nextMarker :: Lens' ListGrantsResponse (Maybe Text)

-- | A list of grants.
listGrantsResponse_grants :: Lens' ListGrantsResponse (Maybe [GrantListEntry])

-- | A flag that indicates whether there are more items in the list. When
--   this value is true, the list in this response is truncated. To get
--   more items, pass the value of the <tt>NextMarker</tt> element in
--   thisresponse to the <tt>Marker</tt> parameter in a subsequent request.
listGrantsResponse_truncated :: Lens' ListGrantsResponse (Maybe Bool)

-- | displays the key ARNs and Regions of all replica keys. This field
--   includes the current KMS key if it is a replica key.
multiRegionConfiguration_replicaKeys :: Lens' MultiRegionConfiguration (Maybe [MultiRegionKey])

-- | Indicates whether the KMS key is a <tt>PRIMARY</tt> or
--   <tt>REPLICA</tt> key.
multiRegionConfiguration_multiRegionKeyType :: Lens' MultiRegionConfiguration (Maybe MultiRegionKeyType)

-- | Displays the key ARN and Region of the primary key. This field
--   includes the current KMS key if it is the primary key.
multiRegionConfiguration_primaryKey :: Lens' MultiRegionConfiguration (Maybe MultiRegionKey)

-- | Displays the key ARN of a primary or replica key of a multi-Region
--   key.
multiRegionKey_arn :: Lens' MultiRegionKey (Maybe Text)

-- | Displays the Amazon Web Services Region of a primary or replica key in
--   a multi-Region key.
multiRegionKey_region :: Lens' MultiRegionKey (Maybe Text)

-- | The key of the tag.
tag_tagKey :: Lens' Tag Text

-- | The value of the tag.
tag_tagValue :: Lens' Tag Text


module Network.AWS.KMS.Waiters


-- | Derived from API version <tt>2014-11-01</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Key Management Service
--   
--   Key Management Service (KMS) is an encryption and key management web
--   service. This guide describes the KMS operations that you can call
--   programmatically. For general information about KMS, see the <a>Key
--   Management Service Developer Guide</a> .
--   
--   KMS is replacing the term <i>customer master key (CMK)</i> with <i>KMS
--   key</i> and <i>KMS key</i>. The concept has not changed. To prevent
--   breaking changes, KMS is keeping some variations of this term.
--   
--   Amazon Web Services provides SDKs that consist of libraries and sample
--   code for various programming languages and platforms (Java, Ruby,
--   .Net, macOS, Android, etc.). The SDKs provide a convenient way to
--   create programmatic access to KMS and other Amazon Web Services
--   services. For example, the SDKs take care of tasks such as signing
--   requests (see below), managing errors, and retrying requests
--   automatically. For more information about the Amazon Web Services
--   SDKs, including how to download and install them, see <a>Tools for
--   Amazon Web Services</a>.
--   
--   We recommend that you use the Amazon Web Services SDKs to make
--   programmatic API calls to KMS.
--   
--   Clients must support TLS (Transport Layer Security) 1.0. We recommend
--   TLS 1.2. Clients must also support cipher suites with Perfect Forward
--   Secrecy (PFS) such as Ephemeral Diffie-Hellman (DHE) or Elliptic Curve
--   Ephemeral Diffie-Hellman (ECDHE). Most modern systems such as Java 7
--   and later support these modes.
--   
--   <b>Signing Requests</b>
--   
--   Requests must be signed by using an access key ID and a secret access
--   key. We strongly recommend that you <i>do not</i> use your Amazon Web
--   Services account (root) access key ID and secret key for everyday work
--   with KMS. Instead, use the access key ID and secret access key for an
--   IAM user. You can also use the Amazon Web Services Security Token
--   Service to generate temporary security credentials that you can use to
--   sign requests.
--   
--   All KMS operations require <a>Signature Version 4</a>.
--   
--   <b>Logging API Requests</b>
--   
--   KMS supports CloudTrail, a service that logs Amazon Web Services API
--   calls and related events for your Amazon Web Services account and
--   delivers them to an Amazon S3 bucket that you specify. By using the
--   information collected by CloudTrail, you can determine what requests
--   were made to KMS, who made the request, when it was made, and so on.
--   To learn more about CloudTrail, including how to turn it on and find
--   your log files, see the <a>CloudTrail User Guide</a>.
--   
--   <b>Additional Resources</b>
--   
--   For more information about credentials and request signing, see the
--   following:
--   
--   <ul>
--   <li><a>Amazon Web Services Security Credentials</a></li>
--   <li>This topic provides general information about the types of
--   credentials used to access Amazon Web Services.</li>
--   <li><a>Temporary Security Credentials</a></li>
--   <li>This section of the <i>IAM User Guide</i> describes how to create
--   and use temporary security credentials.</li>
--   <li><a>Signature Version 4 Signing Process</a></li>
--   <li>This set of topics walks you through the process of signing a
--   request using an access key ID and a secret access key.</li>
--   </ul>
--   
--   <b>Commonly Used API Operations</b>
--   
--   Of the API operations discussed in this guide, the following will
--   prove the most useful for most applications. You will likely perform
--   operations other than these, such as creating keys and assigning
--   policies, by using the console.
--   
--   <ul>
--   <li>Encrypt</li>
--   <li>Decrypt</li>
--   <li>GenerateDataKey</li>
--   <li>GenerateDataKeyWithoutPlaintext</li>
--   </ul>
module Network.AWS.KMS

-- | API version <tt>2014-11-01</tt> of the Amazon Key Management Service
--   SDK configuration.
defaultService :: Service

-- | The request was rejected because the specified alias name is not
--   valid.
_InvalidAliasNameException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because KMS cannot find a custom key store
--   with the specified key store name or ID.
_CustomKeyStoreNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified custom key store name
--   is already assigned to another custom key store in the account. Try
--   again with a custom key store name that is unique in the account.
_CustomKeyStoreNameInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified policy is not
--   syntactically or semantically correct.
_MalformedPolicyDocumentException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected for one of the following reasons:
--   
--   <ul>
--   <li>The <tt>KeyUsage</tt> value of the KMS key is incompatible with
--   the API operation.</li>
--   <li>The encryption algorithm or signing algorithm specified for the
--   operation is incompatible with the type of key material in the KMS key
--   <tt>(KeySpec</tt>).</li>
--   </ul>
--   
--   For encrypting, decrypting, re-encrypting, and generating data keys,
--   the <tt>KeyUsage</tt> must be <tt>ENCRYPT_DECRYPT</tt>. For signing
--   and verifying, the <tt>KeyUsage</tt> must be <tt>SIGN_VERIFY</tt>. To
--   find the <tt>KeyUsage</tt> of a KMS key, use the DescribeKey
--   operation.
--   
--   To find the encryption or signing algorithms supported for a
--   particular KMS key, use the DescribeKey operation.
_InvalidKeyUsageException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the state of the specified resource
--   is not valid for this request.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the /<i>Key Management
--   Service Developer Guide</i>/ .
_KMSInvalidStateException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the marker that specifies where
--   pagination should next begin is not valid.
_InvalidMarkerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified entity or resource
--   could not be found.
_NotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because KMS cannot find the CloudHSM cluster
--   with the specified cluster ID. Retry the request with a different
--   cluster ID.
_CloudHsmClusterNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified KMS key cannot decrypt
--   the data. The <tt>KeyId</tt> in a Decrypt request and the
--   <tt>SourceKeyId</tt> in a ReEncrypt request must identify the same KMS
--   key that was used to encrypt the ciphertext.
_IncorrectKeyException :: AsError a => Getting (First ServiceError) a ServiceError

-- | From the Decrypt or ReEncrypt operation, the request was rejected
--   because the specified ciphertext, or additional authenticated data
--   incorporated into the ciphertext, such as the encryption context, is
--   corrupted, missing, or otherwise invalid.
--   
--   From the ImportKeyMaterial operation, the request was rejected because
--   KMS could not decrypt the encrypted (wrapped) key material.
_InvalidCiphertextException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the associated CloudHSM cluster did
--   not meet the configuration requirements for a custom key store.
--   
--   <ul>
--   <li>The cluster must be configured with private subnets in at least
--   two different Availability Zones in the Region.</li>
--   <li>The <a>security group for the cluster</a>
--   (cloudhsm-cluster-<i>&lt;cluster-id&gt;</i>-sg) must include inbound
--   rules and outbound rules that allow TCP traffic on ports 2223-2225.
--   The <b>Source</b> in the inbound rules and the <b>Destination</b> in
--   the outbound rules must match the security group ID. These rules are
--   set by default when you create the cluster. Do not delete or change
--   them. To get information about a particular security group, use the
--   <a>DescribeSecurityGroups</a> operation.</li>
--   <li>The cluster must contain at least as many HSMs as the operation
--   requires. To add HSMs, use the CloudHSM <a>CreateHsm</a> operation.For
--   the CreateCustomKeyStore, UpdateCustomKeyStore, and CreateKey
--   operations, the CloudHSM cluster must have at least two active HSMs,
--   each in a different Availability Zone. For the ConnectCustomKeyStore
--   operation, the CloudHSM must contain at least one active HSM.</li>
--   </ul>
--   
--   For information about the requirements for an CloudHSM cluster that is
--   associated with a custom key store, see <a>Assemble the
--   Prerequisites</a> in the <i>Key Management Service Developer
--   Guide</i>. For information about creating a private subnet for an
--   CloudHSM cluster, see <a>Create a Private Subnet</a> in the
--   <i>CloudHSM User Guide</i>. For information about cluster security
--   groups, see <a>Configure a Default Security Group</a> in the
--   /<i>CloudHSM User Guide</i>/ .
_CloudHsmClusterInvalidConfigurationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because a specified ARN, or an ARN in a key
--   policy, is not valid.
_InvalidArnException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the custom key store contains KMS
--   keys. After verifying that you do not need to use the KMS keys, use
--   the ScheduleKeyDeletion operation to delete the KMS keys. After they
--   are deleted, you can delete the custom key store.
_CustomKeyStoreHasCMKsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified CloudHSM cluster has a
--   different cluster certificate than the original cluster. You cannot
--   use the operation to specify an unrelated cluster.
--   
--   Specify a cluster that shares a backup history with the original
--   cluster. This includes clusters that were created from a backup of the
--   current cluster, and clusters that were created from the same backup
--   that produced the current cluster.
--   
--   Clusters that share a backup history have the same cluster
--   certificate. To view the cluster certificate of a cluster, use the
--   <a>DescribeClusters</a> operation.
_CloudHsmClusterNotRelatedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because of the <tt>ConnectionState</tt> of
--   the custom key store. To get the <tt>ConnectionState</tt> of a custom
--   key store, use the DescribeCustomKeyStores operation.
--   
--   This exception is thrown under the following conditions:
--   
--   <ul>
--   <li>You requested the CreateKey or GenerateRandom operation in a
--   custom key store that is not connected. These operations are valid
--   only when the custom key store <tt>ConnectionState</tt> is
--   <tt>CONNECTED</tt>.</li>
--   <li>You requested the UpdateCustomKeyStore or DeleteCustomKeyStore
--   operation on a custom key store that is not disconnected. This
--   operation is valid only when the custom key store
--   <tt>ConnectionState</tt> is <tt>DISCONNECTED</tt>.</li>
--   <li>You requested the ConnectCustomKeyStore operation on a custom key
--   store with a <tt>ConnectionState</tt> of <tt>DISCONNECTING</tt> or
--   <tt>FAILED</tt>. This operation is valid for all other
--   <tt>ConnectionState</tt> values.</li>
--   </ul>
_CustomKeyStoreInvalidStateException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because a specified parameter is not
--   supported or a specified resource is not valid for this operation.
_UnsupportedOperationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the signature verification failed.
--   Signature verification fails when it cannot confirm that signature was
--   produced by signing the specified message with the specified KMS key
--   and signing algorithm.
_KMSInvalidSignatureException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified KMS key is not enabled.
_DisabledException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because it attempted to create a resource
--   that already exists.
_AlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because a quota was exceeded. For more
--   information, see <a>Quotas</a> in the <i>Key Management Service
--   Developer Guide</i>.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified import token is
--   expired. Use GetParametersForImport to get a new import token and
--   public key, use the new public key to encrypt the key material, and
--   then try the request again.
_ExpiredImportTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified CloudHSM cluster is
--   already associated with a custom key store or it shares a backup
--   history with a cluster that is associated with a custom key store.
--   Each custom key store must be associated with a different CloudHSM
--   cluster.
--   
--   Clusters that share a backup history have the same cluster
--   certificate. To view the cluster certificate of a cluster, use the
--   <a>DescribeClusters</a> operation.
_CloudHsmClusterInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The system timed out while trying to fulfill the request. The request
--   can be retried.
_DependencyTimeoutException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the trust anchor certificate in the
--   request is not the trust anchor certificate for the specified CloudHSM
--   cluster.
--   
--   When you <a>initialize the cluster</a>, you create the trust anchor
--   certificate and save it in the <tt>customerCA.crt</tt> file.
_IncorrectTrustAnchorException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the CloudHSM cluster that is
--   associated with the custom key store is not active. Initialize and
--   activate the cluster and try the command again. For detailed
--   instructions, see <a>Getting Started</a> in the <i>CloudHSM User
--   Guide</i>.
_CloudHsmClusterNotActiveException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified grant token is not
--   valid.
_InvalidGrantTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the provided import token is invalid
--   or is associated with a different KMS key.
_InvalidImportTokenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because an internal exception occurred. The
--   request can be retried.
_KMSInternalException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified <tt>GrantId</tt> is not
--   valid.
_InvalidGrantIdException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because one or more tags are not valid.
_TagException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the key material in the request is,
--   expired, invalid, or is not the same key material that was previously
--   imported into this KMS key.
_IncorrectKeyMaterialException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request was rejected because the specified KMS key was not
--   available. You can retry the request.
_KeyUnavailableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newVerify</a> smart constructor.
data Verify
Verify' :: Maybe [Text] -> Maybe MessageType -> Text -> Sensitive Base64 -> Base64 -> SigningAlgorithmSpec -> Verify

-- | Create a value of <a>Verify</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:Verify'</a>, <a>verify_grantTokens</a> - A list of
--   grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:messageType:Verify'</a>, <a>verify_messageType</a> - Tells KMS
--   whether the value of the <tt>Message</tt> parameter is a message or
--   message digest. The default value, RAW, indicates a message. To
--   indicate a message digest, enter <tt>DIGEST</tt>.
--   
--   Use the <tt>DIGEST</tt> value only when the value of the
--   <tt>Message</tt> parameter is a message digest. If you use the
--   <tt>DIGEST</tt> value with a raw message, the security of the
--   verification operation can be compromised.
--   
--   <a>$sel:keyId:Verify'</a>, <a>verify_keyId</a> - Identifies the
--   asymmetric KMS key that will be used to verify the signature. This
--   must be the same KMS key that was used to generate the signature. If
--   you specify a different KMS key, the signature verification fails.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:message:Verify'</a>, <a>verify_message</a> - Specifies the
--   message that was signed. You can submit a raw message of up to 4096
--   bytes, or a hash digest of the message. If you submit a digest, use
--   the <tt>MessageType</tt> parameter with a value of <tt>DIGEST</tt>.
--   
--   If the message specified here is different from the message that was
--   signed, the signature verification fails. A message and its hash
--   digest are considered to be the same message.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:signature:Verify'</a>, <a>verify_signature</a> - The signature
--   that the <tt>Sign</tt> operation generated.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:signingAlgorithm:Verify'</a>, <a>verify_signingAlgorithm</a> -
--   The signing algorithm that was used to sign the message. If you submit
--   a different algorithm, the signature verification fails.
newVerify :: Text -> ByteString -> ByteString -> SigningAlgorithmSpec -> Verify

-- | <i>See:</i> <a>newVerifyResponse</a> smart constructor.
data VerifyResponse
VerifyResponse' :: Maybe SigningAlgorithmSpec -> Maybe Bool -> Maybe Text -> Int -> VerifyResponse

-- | Create a value of <a>VerifyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signingAlgorithm:Verify'</a>,
--   <a>verifyResponse_signingAlgorithm</a> - The signing algorithm that
--   was used to verify the signature.
--   
--   <a>$sel:signatureValid:VerifyResponse'</a>,
--   <a>verifyResponse_signatureValid</a> - A Boolean value that indicates
--   whether the signature was verified. A value of <tt>True</tt> indicates
--   that the <tt>Signature</tt> was produced by signing the
--   <tt>Message</tt> with the specified <tt>KeyID</tt> and
--   <tt>SigningAlgorithm.</tt> If the signature is not verified, the
--   <tt>Verify</tt> operation fails with a
--   <tt>KMSInvalidSignatureException</tt> exception.
--   
--   <a>$sel:keyId:Verify'</a>, <a>verifyResponse_keyId</a> - The Amazon
--   Resource Name (<a>key ARN</a>) of the asymmetric KMS key that was used
--   to verify the signature.
--   
--   <a>$sel:httpStatus:VerifyResponse'</a>,
--   <a>verifyResponse_httpStatus</a> - The response's http status code.
newVerifyResponse :: Int -> VerifyResponse

-- | <i>See:</i> <a>newDisableKeyRotation</a> smart constructor.
data DisableKeyRotation
DisableKeyRotation' :: Text -> DisableKeyRotation

-- | Create a value of <a>DisableKeyRotation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:DisableKeyRotation'</a>, <a>disableKeyRotation_keyId</a>
--   - Identifies a symmetric KMS key. You cannot enable or disable
--   automatic rotation of <a>asymmetric KMS keys</a>, KMS keys with
--   <a>imported key material</a>, or KMS keys in a <a>custom key
--   store</a>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newDisableKeyRotation :: Text -> DisableKeyRotation

-- | <i>See:</i> <a>newDisableKeyRotationResponse</a> smart constructor.
data DisableKeyRotationResponse
DisableKeyRotationResponse' :: DisableKeyRotationResponse

-- | Create a value of <a>DisableKeyRotationResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDisableKeyRotationResponse :: DisableKeyRotationResponse

-- | <i>See:</i> <a>newListGrants</a> smart constructor.
data ListGrants
ListGrants' :: Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> Text -> ListGrants

-- | Create a value of <a>ListGrants</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:granteePrincipal:ListGrants'</a>,
--   <a>listGrants_granteePrincipal</a> - Returns only grants where the
--   specified principal is the grantee principal for the grant.
--   
--   <a>$sel:grantId:ListGrants'</a>, <a>listGrants_grantId</a> - Returns
--   only the grant with the specified grant ID. The grant ID uniquely
--   identifies the grant.
--   
--   <a>$sel:limit:ListGrants'</a>, <a>listGrants_limit</a> - Use this
--   parameter to specify the maximum number of items to return. When this
--   value is present, KMS does not return more than the specified number
--   of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
--   
--   <a>$sel:marker:ListGrants'</a>, <a>listGrants_marker</a> - Use this
--   parameter in a subsequent request after you receive a response with
--   truncated results. Set it to the value of <tt>NextMarker</tt> from the
--   truncated response you just received.
--   
--   <a>$sel:keyId:ListGrants'</a>, <a>listGrants_keyId</a> - Returns only
--   grants for the specified KMS key. This parameter is required.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newListGrants :: Text -> ListGrants

-- | <i>See:</i> <a>newListGrantsResponse</a> smart constructor.
data ListGrantsResponse
ListGrantsResponse' :: Maybe Text -> Maybe [GrantListEntry] -> Maybe Bool -> ListGrantsResponse

-- | Create a value of <a>ListGrantsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_nextMarker</a> - When <tt>Truncated</tt> is
--   true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:grants:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_grants</a> - A list of grants.
--   
--   <a>$sel:truncated:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_truncated</a> - A flag that indicates whether
--   there are more items in the list. When this value is true, the list in
--   this response is truncated. To get more items, pass the value of the
--   <tt>NextMarker</tt> element in thisresponse to the <tt>Marker</tt>
--   parameter in a subsequent request.
newListGrantsResponse :: ListGrantsResponse

-- | <i>See:</i> <a>newDeleteAlias</a> smart constructor.
data DeleteAlias
DeleteAlias' :: Text -> DeleteAlias

-- | Create a value of <a>DeleteAlias</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:aliasName:DeleteAlias'</a>, <a>deleteAlias_aliasName</a> - The
--   alias to be deleted. The alias name must begin with <tt>alias/</tt>
--   followed by the alias name, such as <tt>alias/ExampleAlias</tt>.
newDeleteAlias :: Text -> DeleteAlias

-- | <i>See:</i> <a>newDeleteAliasResponse</a> smart constructor.
data DeleteAliasResponse
DeleteAliasResponse' :: DeleteAliasResponse

-- | Create a value of <a>DeleteAliasResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteAliasResponse :: DeleteAliasResponse

-- | <i>See:</i> <a>newCreateCustomKeyStore</a> smart constructor.
data CreateCustomKeyStore
CreateCustomKeyStore' :: Text -> Text -> Text -> Sensitive Text -> CreateCustomKeyStore

-- | Create a value of <a>CreateCustomKeyStore</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreName:CreateCustomKeyStore'</a>,
--   <a>createCustomKeyStore_customKeyStoreName</a> - Specifies a friendly
--   name for the custom key store. The name must be unique in your Amazon
--   Web Services account.
--   
--   <a>$sel:cloudHsmClusterId:CreateCustomKeyStore'</a>,
--   <a>createCustomKeyStore_cloudHsmClusterId</a> - Identifies the
--   CloudHSM cluster for the custom key store. Enter the cluster ID of any
--   active CloudHSM cluster that is not already associated with a custom
--   key store. To find the cluster ID, use the <a>DescribeClusters</a>
--   operation.
--   
--   <a>$sel:trustAnchorCertificate:CreateCustomKeyStore'</a>,
--   <a>createCustomKeyStore_trustAnchorCertificate</a> - Enter the content
--   of the trust anchor certificate for the cluster. This is the content
--   of the <tt>customerCA.crt</tt> file that you created when you
--   <a>initialized the cluster</a>.
--   
--   <a>$sel:keyStorePassword:CreateCustomKeyStore'</a>,
--   <a>createCustomKeyStore_keyStorePassword</a> - Enter the password of
--   the <a>kmsuser crypto user (CU) account</a> in the specified CloudHSM
--   cluster. KMS logs into the cluster as this user to manage key material
--   on your behalf.
--   
--   The password must be a string of 7 to 32 characters. Its value is case
--   sensitive.
--   
--   This parameter tells KMS the <tt>kmsuser</tt> account password; it
--   does not change the password in the CloudHSM cluster.
newCreateCustomKeyStore :: Text -> Text -> Text -> Text -> CreateCustomKeyStore

-- | <i>See:</i> <a>newCreateCustomKeyStoreResponse</a> smart constructor.
data CreateCustomKeyStoreResponse
CreateCustomKeyStoreResponse' :: Maybe Text -> Int -> CreateCustomKeyStoreResponse

-- | Create a value of <a>CreateCustomKeyStoreResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreId:CreateCustomKeyStoreResponse'</a>,
--   <a>createCustomKeyStoreResponse_customKeyStoreId</a> - A unique
--   identifier for the new custom key store.
--   
--   <a>$sel:httpStatus:CreateCustomKeyStoreResponse'</a>,
--   <a>createCustomKeyStoreResponse_httpStatus</a> - The response's http
--   status code.
newCreateCustomKeyStoreResponse :: Int -> CreateCustomKeyStoreResponse

-- | <i>See:</i> <a>newUpdateAlias</a> smart constructor.
data UpdateAlias
UpdateAlias' :: Text -> Text -> UpdateAlias

-- | Create a value of <a>UpdateAlias</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:aliasName:UpdateAlias'</a>, <a>updateAlias_aliasName</a> -
--   Identifies the alias that is changing its KMS key. This value must
--   begin with <tt>alias/</tt> followed by the alias name, such as
--   <tt>alias/ExampleAlias</tt>. You cannot use UpdateAlias to change the
--   alias name.
--   
--   <a>$sel:targetKeyId:UpdateAlias'</a>, <a>updateAlias_targetKeyId</a> -
--   Identifies the <a>customer managed key</a> to associate with the
--   alias. You don't have permission to associate an alias with an
--   <a>Amazon Web Services managed key</a>.
--   
--   The KMS key must be in the same Amazon Web Services account and Region
--   as the alias. Also, the new target KMS key must be the same type as
--   the current target KMS key (both symmetric or both asymmetric) and
--   they must have the same key usage.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   To verify that the alias is mapped to the correct KMS key, use
--   ListAliases.
newUpdateAlias :: Text -> Text -> UpdateAlias

-- | <i>See:</i> <a>newUpdateAliasResponse</a> smart constructor.
data UpdateAliasResponse
UpdateAliasResponse' :: UpdateAliasResponse

-- | Create a value of <a>UpdateAliasResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newUpdateAliasResponse :: UpdateAliasResponse

-- | <i>See:</i> <a>newGenerateDataKey</a> smart constructor.
data GenerateDataKey
GenerateDataKey' :: Maybe [Text] -> Maybe Natural -> Maybe (HashMap Text Text) -> Maybe DataKeySpec -> Text -> GenerateDataKey

-- | Create a value of <a>GenerateDataKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:GenerateDataKey'</a>,
--   <a>generateDataKey_grantTokens</a> - A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:numberOfBytes:GenerateDataKey'</a>,
--   <a>generateDataKey_numberOfBytes</a> - Specifies the length of the
--   data key in bytes. For example, use the value 64 to generate a 512-bit
--   data key (64 bytes is 512 bits). For 128-bit (16-byte) and 256-bit
--   (32-byte) data keys, use the <tt>KeySpec</tt> parameter.
--   
--   You must specify either the <tt>KeySpec</tt> or the
--   <tt>NumberOfBytes</tt> parameter (but not both) in every
--   <tt>GenerateDataKey</tt> request.
--   
--   <a>$sel:encryptionContext:GenerateDataKey'</a>,
--   <a>generateDataKey_encryptionContext</a> - Specifies the encryption
--   context that will be used when encrypting the data key.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keySpec:GenerateDataKey'</a>, <a>generateDataKey_keySpec</a> -
--   Specifies the length of the data key. Use <tt>AES_128</tt> to generate
--   a 128-bit symmetric key, or <tt>AES_256</tt> to generate a 256-bit
--   symmetric key.
--   
--   You must specify either the <tt>KeySpec</tt> or the
--   <tt>NumberOfBytes</tt> parameter (but not both) in every
--   <tt>GenerateDataKey</tt> request.
--   
--   <a>$sel:keyId:GenerateDataKey'</a>, <a>generateDataKey_keyId</a> -
--   Identifies the symmetric KMS key that encrypts the data key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
newGenerateDataKey :: Text -> GenerateDataKey

-- | <i>See:</i> <a>newGenerateDataKeyResponse</a> smart constructor.
data GenerateDataKeyResponse
GenerateDataKeyResponse' :: Int -> Text -> Sensitive Base64 -> Base64 -> GenerateDataKeyResponse

-- | Create a value of <a>GenerateDataKeyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GenerateDataKeyResponse'</a>,
--   <a>generateDataKeyResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:keyId:GenerateDataKey'</a>,
--   <a>generateDataKeyResponse_keyId</a> - The Amazon Resource Name
--   (<a>key ARN</a>) of the KMS key that encrypted the data key.
--   
--   <a>$sel:plaintext:GenerateDataKeyResponse'</a>,
--   <a>generateDataKeyResponse_plaintext</a> - The plaintext data key.
--   When you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded. Use this data key
--   to encrypt your data outside of KMS. Then, remove it from memory as
--   soon as possible.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:ciphertextBlob:GenerateDataKeyResponse'</a>,
--   <a>generateDataKeyResponse_ciphertextBlob</a> - The encrypted copy of
--   the data key. When you use the HTTP API or the Amazon Web Services
--   CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
newGenerateDataKeyResponse :: Int -> Text -> ByteString -> ByteString -> GenerateDataKeyResponse

-- | <i>See:</i> <a>newDeleteImportedKeyMaterial</a> smart constructor.
data DeleteImportedKeyMaterial
DeleteImportedKeyMaterial' :: Text -> DeleteImportedKeyMaterial

-- | Create a value of <a>DeleteImportedKeyMaterial</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:DeleteImportedKeyMaterial'</a>,
--   <a>deleteImportedKeyMaterial_keyId</a> - Identifies the KMS key from
--   which you are deleting imported key material. The <tt>Origin</tt> of
--   the KMS key must be <tt>EXTERNAL</tt>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newDeleteImportedKeyMaterial :: Text -> DeleteImportedKeyMaterial

-- | <i>See:</i> <a>newDeleteImportedKeyMaterialResponse</a> smart
--   constructor.
data DeleteImportedKeyMaterialResponse
DeleteImportedKeyMaterialResponse' :: DeleteImportedKeyMaterialResponse

-- | Create a value of <a>DeleteImportedKeyMaterialResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDeleteImportedKeyMaterialResponse :: DeleteImportedKeyMaterialResponse

-- | <i>See:</i> <a>newImportKeyMaterial</a> smart constructor.
data ImportKeyMaterial
ImportKeyMaterial' :: Maybe POSIX -> Maybe ExpirationModelType -> Text -> Base64 -> Base64 -> ImportKeyMaterial

-- | Create a value of <a>ImportKeyMaterial</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:validTo:ImportKeyMaterial'</a>,
--   <a>importKeyMaterial_validTo</a> - The time at which the imported key
--   material expires. When the key material expires, KMS deletes the key
--   material and the KMS key becomes unusable. You must omit this
--   parameter when the <tt>ExpirationModel</tt> parameter is set to
--   <tt>KEY_MATERIAL_DOES_NOT_EXPIRE</tt>. Otherwise it is required.
--   
--   <a>$sel:expirationModel:ImportKeyMaterial'</a>,
--   <a>importKeyMaterial_expirationModel</a> - Specifies whether the key
--   material expires. The default is <tt>KEY_MATERIAL_EXPIRES</tt>, in
--   which case you must include the <tt>ValidTo</tt> parameter. When this
--   parameter is set to <tt>KEY_MATERIAL_DOES_NOT_EXPIRE</tt>, you must
--   omit the <tt>ValidTo</tt> parameter.
--   
--   <a>$sel:keyId:ImportKeyMaterial'</a>, <a>importKeyMaterial_keyId</a> -
--   The identifier of the symmetric KMS key that receives the imported key
--   material. The KMS key's <tt>Origin</tt> must be <tt>EXTERNAL</tt>.
--   This must be the same KMS key specified in the <tt>KeyID</tt>
--   parameter of the corresponding GetParametersForImport request.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:importToken:ImportKeyMaterial'</a>,
--   <a>importKeyMaterial_importToken</a> - The import token that you
--   received in the response to a previous GetParametersForImport request.
--   It must be from the same response that contained the public key that
--   you used to encrypt the key material.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:encryptedKeyMaterial:ImportKeyMaterial'</a>,
--   <a>importKeyMaterial_encryptedKeyMaterial</a> - The encrypted key
--   material to import. The key material must be encrypted with the public
--   wrapping key that GetParametersForImport returned, using the wrapping
--   algorithm that you specified in the same
--   <tt>GetParametersForImport</tt> request.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
newImportKeyMaterial :: Text -> ByteString -> ByteString -> ImportKeyMaterial

-- | <i>See:</i> <a>newImportKeyMaterialResponse</a> smart constructor.
data ImportKeyMaterialResponse
ImportKeyMaterialResponse' :: Int -> ImportKeyMaterialResponse

-- | Create a value of <a>ImportKeyMaterialResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:ImportKeyMaterialResponse'</a>,
--   <a>importKeyMaterialResponse_httpStatus</a> - The response's http
--   status code.
newImportKeyMaterialResponse :: Int -> ImportKeyMaterialResponse

-- | <i>See:</i> <a>newGetKeyRotationStatus</a> smart constructor.
data GetKeyRotationStatus
GetKeyRotationStatus' :: Text -> GetKeyRotationStatus

-- | Create a value of <a>GetKeyRotationStatus</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:GetKeyRotationStatus'</a>,
--   <a>getKeyRotationStatus_keyId</a> - Gets the rotation status for the
--   specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newGetKeyRotationStatus :: Text -> GetKeyRotationStatus

-- | <i>See:</i> <a>newGetKeyRotationStatusResponse</a> smart constructor.
data GetKeyRotationStatusResponse
GetKeyRotationStatusResponse' :: Maybe Bool -> Int -> GetKeyRotationStatusResponse

-- | Create a value of <a>GetKeyRotationStatusResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyRotationEnabled:GetKeyRotationStatusResponse'</a>,
--   <a>getKeyRotationStatusResponse_keyRotationEnabled</a> - A Boolean
--   value that specifies whether key rotation is enabled.
--   
--   <a>$sel:httpStatus:GetKeyRotationStatusResponse'</a>,
--   <a>getKeyRotationStatusResponse_httpStatus</a> - The response's http
--   status code.
newGetKeyRotationStatusResponse :: Int -> GetKeyRotationStatusResponse

-- | <i>See:</i> <a>newListResourceTags</a> smart constructor.
data ListResourceTags
ListResourceTags' :: Maybe Natural -> Maybe Text -> Text -> ListResourceTags

-- | Create a value of <a>ListResourceTags</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListResourceTags'</a>, <a>listResourceTags_limit</a> -
--   Use this parameter to specify the maximum number of items to return.
--   When this value is present, KMS does not return more than the
--   specified number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 50, inclusive. If you do not include a value, it defaults to 50.
--   
--   <a>$sel:marker:ListResourceTags'</a>, <a>listResourceTags_marker</a> -
--   Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
--   
--   Do not attempt to construct this value. Use only the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
--   
--   <a>$sel:keyId:ListResourceTags'</a>, <a>listResourceTags_keyId</a> -
--   Gets tags on the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newListResourceTags :: Text -> ListResourceTags

-- | <i>See:</i> <a>newListResourceTagsResponse</a> smart constructor.
data ListResourceTagsResponse
ListResourceTagsResponse' :: Maybe Text -> Maybe [Tag] -> Maybe Bool -> Int -> ListResourceTagsResponse

-- | Create a value of <a>ListResourceTagsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListResourceTagsResponse'</a>,
--   <a>listResourceTagsResponse_nextMarker</a> - When <tt>Truncated</tt>
--   is true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   Do not assume or infer any information from this value.
--   
--   <a>$sel:tags:ListResourceTagsResponse'</a>,
--   <a>listResourceTagsResponse_tags</a> - A list of tags. Each tag
--   consists of a tag key and a tag value.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:truncated:ListResourceTagsResponse'</a>,
--   <a>listResourceTagsResponse_truncated</a> - A flag that indicates
--   whether there are more items in the list. When this value is true, the
--   list in this response is truncated. To get more items, pass the value
--   of the <tt>NextMarker</tt> element in thisresponse to the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:httpStatus:ListResourceTagsResponse'</a>,
--   <a>listResourceTagsResponse_httpStatus</a> - The response's http
--   status code.
newListResourceTagsResponse :: Int -> ListResourceTagsResponse

-- | <i>See:</i> <a>newReplicateKey</a> smart constructor.
data ReplicateKey
ReplicateKey' :: Maybe Bool -> Maybe [Tag] -> Maybe Text -> Maybe Text -> Text -> Text -> ReplicateKey

-- | Create a value of <a>ReplicateKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bypassPolicyLockoutSafetyCheck:ReplicateKey'</a>,
--   <a>replicateKey_bypassPolicyLockoutSafetyCheck</a> - A flag to
--   indicate whether to bypass the key policy lockout safety check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   Use this parameter only when you intend to prevent the principal that
--   is making the request from making a subsequent <tt>PutKeyPolicy</tt>
--   request on the KMS key.
--   
--   The default value is false.
--   
--   <a>$sel:tags:ReplicateKey'</a>, <a>replicateKey_tags</a> - Assigns one
--   or more tags to the replica key. Use this parameter to tag the KMS key
--   when it is created. To tag an existing KMS key, use the TagResource
--   operation.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   To use this parameter, you must have <a>kms:TagResource</a> permission
--   in an IAM policy.
--   
--   Tags are not a shared property of multi-Region keys. You can specify
--   the same tags or different tags for each key in a set of related
--   multi-Region keys. KMS does not synchronize this property.
--   
--   Each tag consists of a tag key and a tag value. Both the tag key and
--   the tag value are required, but the tag value can be an empty (null)
--   string. You cannot have more than one tag on a KMS key with the same
--   tag key. If you specify an existing tag key with a different tag
--   value, KMS replaces the current tag value with the specified one.
--   
--   When you add tags to an Amazon Web Services resource, Amazon Web
--   Services generates a cost allocation report with usage and costs
--   aggregated by tags. Tags can also be used to control access to a KMS
--   key. For details, see <a>Tagging Keys</a>.
--   
--   <a>$sel:description:ReplicateKey'</a>, <a>replicateKey_description</a>
--   - A description of the KMS key. The default value is an empty string
--   (no description).
--   
--   The description is not a shared property of multi-Region keys. You can
--   specify the same description or a different description for each key
--   in a set of related multi-Region keys. KMS does not synchronize this
--   property.
--   
--   <a>$sel:policy:ReplicateKey'</a>, <a>replicateKey_policy</a> - The key
--   policy to attach to the KMS key. This parameter is optional. If you do
--   not provide a key policy, KMS attaches the <a>default key policy</a>
--   to the KMS key.
--   
--   The key policy is not a shared property of multi-Region keys. You can
--   specify the same key policy or a different key policy for each key in
--   a set of related multi-Region keys. KMS does not synchronize this
--   property.
--   
--   If you provide a key policy, it must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must give the caller <tt>kms:PutKeyPolicy</tt>
--   permission on the replica key. This reduces the risk that the KMS key
--   becomes unmanageable. For more information, refer to the scenario in
--   the <a>Default Key Policy</a> section of the /<i>Key Management
--   Service Developer Guide</i>/ .</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /<i>Identity and Access Management User Guide</i>/
--   .</li>
--   <li>The key policy size quota is 32 kilobytes (32768 bytes).</li>
--   </ul>
--   
--   <a>$sel:keyId:ReplicateKey'</a>, <a>replicateKey_keyId</a> -
--   Identifies the multi-Region primary key that is being replicated. To
--   determine whether a KMS key is a multi-Region primary key, use the
--   DescribeKey operation to check the value of the
--   <tt>MultiRegionKeyType</tt> property.
--   
--   Specify the key ID or key ARN of a multi-Region primary key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:replicaRegion:ReplicateKey'</a>,
--   <a>replicateKey_replicaRegion</a> - The Region ID of the Amazon Web
--   Services Region for this replica key.
--   
--   Enter the Region ID, such as <tt>us-east-1</tt> or
--   <tt>ap-southeast-2</tt>. For a list of Amazon Web Services Regions in
--   which KMS is supported, see <a>KMS service endpoints</a> in the
--   <i>Amazon Web Services General Reference</i>.
--   
--   The replica must be in a different Amazon Web Services Region than its
--   primary key and other replicas of that primary key, but in the same
--   Amazon Web Services partition. KMS must be available in the replica
--   Region. If the Region is not enabled by default, the Amazon Web
--   Services account must be enabled in the Region.
--   
--   For information about Amazon Web Services partitions, see <a>Amazon
--   Resource Names (ARNs) in the Amazon Web Services General
--   Reference.</a> For information about enabling and disabling Regions,
--   see <a>Enabling a Region</a> and <a>Disabling a Region</a> in the
--   <i>Amazon Web Services General Reference</i>.
newReplicateKey :: Text -> Text -> ReplicateKey

-- | <i>See:</i> <a>newReplicateKeyResponse</a> smart constructor.
data ReplicateKeyResponse
ReplicateKeyResponse' :: Maybe [Tag] -> Maybe Text -> Maybe KeyMetadata -> Int -> ReplicateKeyResponse

-- | Create a value of <a>ReplicateKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaTags:ReplicateKeyResponse'</a>,
--   <a>replicateKeyResponse_replicaTags</a> - The tags on the new replica
--   key. The value is a list of tag key and tag value pairs.
--   
--   <a>$sel:replicaPolicy:ReplicateKeyResponse'</a>,
--   <a>replicateKeyResponse_replicaPolicy</a> - The key policy of the new
--   replica key. The value is a key policy document in JSON format.
--   
--   <a>$sel:replicaKeyMetadata:ReplicateKeyResponse'</a>,
--   <a>replicateKeyResponse_replicaKeyMetadata</a> - Displays details
--   about the new replica key, including its Amazon Resource Name (<a>key
--   ARN</a>) and <a>key state</a>. It also includes the ARN and Amazon Web
--   Services Region of its primary key and other replica keys.
--   
--   <a>$sel:httpStatus:ReplicateKeyResponse'</a>,
--   <a>replicateKeyResponse_httpStatus</a> - The response's http status
--   code.
newReplicateKeyResponse :: Int -> ReplicateKeyResponse

-- | <i>See:</i> <a>newPutKeyPolicy</a> smart constructor.
data PutKeyPolicy
PutKeyPolicy' :: Maybe Bool -> Text -> Text -> Text -> PutKeyPolicy

-- | Create a value of <a>PutKeyPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bypassPolicyLockoutSafetyCheck:PutKeyPolicy'</a>,
--   <a>putKeyPolicy_bypassPolicyLockoutSafetyCheck</a> - A flag to
--   indicate whether to bypass the key policy lockout safety check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   Use this parameter only when you intend to prevent the principal that
--   is making the request from making a subsequent <tt>PutKeyPolicy</tt>
--   request on the KMS key.
--   
--   The default value is false.
--   
--   <a>$sel:keyId:PutKeyPolicy'</a>, <a>putKeyPolicy_keyId</a> - Sets the
--   key policy on the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:policyName:PutKeyPolicy'</a>, <a>putKeyPolicy_policyName</a> -
--   The name of the key policy. The only valid value is <tt>default</tt>.
--   
--   <a>$sel:policy:PutKeyPolicy'</a>, <a>putKeyPolicy_policy</a> - The key
--   policy to attach to the KMS key.
--   
--   The key policy must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must allow the principal that is making the
--   <tt>PutKeyPolicy</tt> request to make a subsequent
--   <tt>PutKeyPolicy</tt> request on the KMS key. This reduces the risk
--   that the KMS key becomes unmanageable. For more information, refer to
--   the scenario in the <a>Default Key Policy</a> section of the <i>Key
--   Management Service Developer Guide</i>.</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /Amazon Web Services Identity and Access Management
--   User Guide/.</li>
--   </ul>
--   
--   The key policy cannot exceed 32 kilobytes (32768 bytes). For more
--   information, see <a>Resource Quotas</a> in the <i>Key Management
--   Service Developer Guide</i>.
newPutKeyPolicy :: Text -> Text -> Text -> PutKeyPolicy

-- | <i>See:</i> <a>newPutKeyPolicyResponse</a> smart constructor.
data PutKeyPolicyResponse
PutKeyPolicyResponse' :: PutKeyPolicyResponse

-- | Create a value of <a>PutKeyPolicyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newPutKeyPolicyResponse :: PutKeyPolicyResponse

-- | <i>See:</i> <a>newDisableKey</a> smart constructor.
data DisableKey
DisableKey' :: Text -> DisableKey

-- | Create a value of <a>DisableKey</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:DisableKey'</a>, <a>disableKey_keyId</a> - Identifies
--   the KMS key to disable.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newDisableKey :: Text -> DisableKey

-- | <i>See:</i> <a>newDisableKeyResponse</a> smart constructor.
data DisableKeyResponse
DisableKeyResponse' :: DisableKeyResponse

-- | Create a value of <a>DisableKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDisableKeyResponse :: DisableKeyResponse

-- | <i>See:</i> <a>newListKeyPolicies</a> smart constructor.
data ListKeyPolicies
ListKeyPolicies' :: Maybe Natural -> Maybe Text -> Text -> ListKeyPolicies

-- | Create a value of <a>ListKeyPolicies</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListKeyPolicies'</a>, <a>listKeyPolicies_limit</a> - Use
--   this parameter to specify the maximum number of items to return. When
--   this value is present, KMS does not return more than the specified
--   number of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 1000, inclusive. If you do not include a value, it defaults to
--   100.
--   
--   Only one policy can be attached to a key.
--   
--   <a>$sel:marker:ListKeyPolicies'</a>, <a>listKeyPolicies_marker</a> -
--   Use this parameter in a subsequent request after you receive a
--   response with truncated results. Set it to the value of
--   <tt>NextMarker</tt> from the truncated response you just received.
--   
--   <a>$sel:keyId:ListKeyPolicies'</a>, <a>listKeyPolicies_keyId</a> -
--   Gets the names of key policies for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newListKeyPolicies :: Text -> ListKeyPolicies

-- | <i>See:</i> <a>newListKeyPoliciesResponse</a> smart constructor.
data ListKeyPoliciesResponse
ListKeyPoliciesResponse' :: Maybe Text -> Maybe [Text] -> Maybe Bool -> Int -> ListKeyPoliciesResponse

-- | Create a value of <a>ListKeyPoliciesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListKeyPoliciesResponse'</a>,
--   <a>listKeyPoliciesResponse_nextMarker</a> - When <tt>Truncated</tt> is
--   true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:policyNames:ListKeyPoliciesResponse'</a>,
--   <a>listKeyPoliciesResponse_policyNames</a> - A list of key policy
--   names. The only valid value is <tt>default</tt>.
--   
--   <a>$sel:truncated:ListKeyPoliciesResponse'</a>,
--   <a>listKeyPoliciesResponse_truncated</a> - A flag that indicates
--   whether there are more items in the list. When this value is true, the
--   list in this response is truncated. To get more items, pass the value
--   of the <tt>NextMarker</tt> element in thisresponse to the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:httpStatus:ListKeyPoliciesResponse'</a>,
--   <a>listKeyPoliciesResponse_httpStatus</a> - The response's http status
--   code.
newListKeyPoliciesResponse :: Int -> ListKeyPoliciesResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:UntagResource'</a>, <a>untagResource_keyId</a> -
--   Identifies the KMS key from which you are removing tags.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - One
--   or more tag keys. Specify only the tag keys, not the tag values.
newUntagResource :: Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newUntagResourceResponse :: UntagResourceResponse

-- | <i>See:</i> <a>newDisconnectCustomKeyStore</a> smart constructor.
data DisconnectCustomKeyStore
DisconnectCustomKeyStore' :: Text -> DisconnectCustomKeyStore

-- | Create a value of <a>DisconnectCustomKeyStore</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreId:DisconnectCustomKeyStore'</a>,
--   <a>disconnectCustomKeyStore_customKeyStoreId</a> - Enter the ID of the
--   custom key store you want to disconnect. To find the ID of a custom
--   key store, use the DescribeCustomKeyStores operation.
newDisconnectCustomKeyStore :: Text -> DisconnectCustomKeyStore

-- | <i>See:</i> <a>newDisconnectCustomKeyStoreResponse</a> smart
--   constructor.
data DisconnectCustomKeyStoreResponse
DisconnectCustomKeyStoreResponse' :: Int -> DisconnectCustomKeyStoreResponse

-- | Create a value of <a>DisconnectCustomKeyStoreResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DisconnectCustomKeyStoreResponse'</a>,
--   <a>disconnectCustomKeyStoreResponse_httpStatus</a> - The response's
--   http status code.
newDisconnectCustomKeyStoreResponse :: Int -> DisconnectCustomKeyStoreResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:TagResource'</a>, <a>tagResource_keyId</a> - Identifies
--   a customer managed key in the account and Region.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - One or more
--   tags.
--   
--   Each tag consists of a tag key and a tag value. The tag value can be
--   an empty (null) string.
--   
--   You cannot have more than one tag on a KMS key with the same tag key.
--   If you specify an existing tag key with a different tag value, KMS
--   replaces the current tag value with the specified one.
newTagResource :: Text -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newTagResourceResponse :: TagResourceResponse

-- | <i>See:</i> <a>newGetPublicKey</a> smart constructor.
data GetPublicKey
GetPublicKey' :: Maybe [Text] -> Text -> GetPublicKey

-- | Create a value of <a>GetPublicKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:GetPublicKey'</a>, <a>getPublicKey_grantTokens</a>
--   - A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:keyId:GetPublicKey'</a>, <a>getPublicKey_keyId</a> -
--   Identifies the asymmetric KMS key that includes the public key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
newGetPublicKey :: Text -> GetPublicKey

-- | <i>See:</i> <a>newGetPublicKeyResponse</a> smart constructor.
data GetPublicKeyResponse
GetPublicKeyResponse' :: Maybe [SigningAlgorithmSpec] -> Maybe Base64 -> Maybe [EncryptionAlgorithmSpec] -> Maybe KeySpec -> Maybe CustomerMasterKeySpec -> Maybe Text -> Maybe KeyUsageType -> Int -> GetPublicKeyResponse

-- | Create a value of <a>GetPublicKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signingAlgorithms:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_signingAlgorithms</a> - The signing algorithms
--   that KMS supports for this key.
--   
--   This field appears in the response only when the <tt>KeyUsage</tt> of
--   the public key is <tt>SIGN_VERIFY</tt>.
--   
--   <a>$sel:publicKey:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_publicKey</a> - The exported public key.
--   
--   The value is a DER-encoded X.509 public key, also known as
--   <tt>SubjectPublicKeyInfo</tt> (SPKI), as defined in <a>RFC 5280</a>.
--   When you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:encryptionAlgorithms:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_encryptionAlgorithms</a> - The encryption
--   algorithms that KMS supports for this key.
--   
--   This information is critical. If a public key encrypts data outside of
--   KMS by using an unsupported encryption algorithm, the ciphertext
--   cannot be decrypted.
--   
--   This field appears in the response only when the <tt>KeyUsage</tt> of
--   the public key is <tt>ENCRYPT_DECRYPT</tt>.
--   
--   <a>$sel:keySpec:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_keySpec</a> - The type of the of the public
--   key that was downloaded.
--   
--   <a>$sel:customerMasterKeySpec:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_customerMasterKeySpec</a> - Instead, use the
--   <tt>KeySpec</tt> field in the <tt>GetPublicKey</tt> response.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
--   
--   <a>$sel:keyId:GetPublicKey'</a>, <a>getPublicKeyResponse_keyId</a> -
--   The Amazon Resource Name (<a>key ARN</a>) of the asymmetric KMS key
--   from which the public key was downloaded.
--   
--   <a>$sel:keyUsage:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_keyUsage</a> - The permitted use of the public
--   key. Valid values are <tt>ENCRYPT_DECRYPT</tt> or
--   <tt>SIGN_VERIFY</tt>.
--   
--   This information is critical. If a public key with
--   <tt>SIGN_VERIFY</tt> key usage encrypts data outside of KMS, the
--   ciphertext cannot be decrypted.
--   
--   <a>$sel:httpStatus:GetPublicKeyResponse'</a>,
--   <a>getPublicKeyResponse_httpStatus</a> - The response's http status
--   code.
newGetPublicKeyResponse :: Int -> GetPublicKeyResponse

-- | <i>See:</i> <a>newGenerateRandom</a> smart constructor.
data GenerateRandom
GenerateRandom' :: Maybe Text -> Maybe Natural -> GenerateRandom

-- | Create a value of <a>GenerateRandom</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreId:GenerateRandom'</a>,
--   <a>generateRandom_customKeyStoreId</a> - Generates the random byte
--   string in the CloudHSM cluster that is associated with the specified
--   <a>custom key store</a>. To find the ID of a custom key store, use the
--   DescribeCustomKeyStores operation.
--   
--   <a>$sel:numberOfBytes:GenerateRandom'</a>,
--   <a>generateRandom_numberOfBytes</a> - The length of the byte string.
newGenerateRandom :: GenerateRandom

-- | <i>See:</i> <a>newGenerateRandomResponse</a> smart constructor.
data GenerateRandomResponse
GenerateRandomResponse' :: Maybe (Sensitive Base64) -> Int -> GenerateRandomResponse

-- | Create a value of <a>GenerateRandomResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:plaintext:GenerateRandomResponse'</a>,
--   <a>generateRandomResponse_plaintext</a> - The random byte string. When
--   you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:httpStatus:GenerateRandomResponse'</a>,
--   <a>generateRandomResponse_httpStatus</a> - The response's http status
--   code.
newGenerateRandomResponse :: Int -> GenerateRandomResponse

-- | <i>See:</i> <a>newReEncrypt</a> smart constructor.
data ReEncrypt
ReEncrypt' :: Maybe (HashMap Text Text) -> Maybe [Text] -> Maybe (HashMap Text Text) -> Maybe Text -> Maybe EncryptionAlgorithmSpec -> Maybe EncryptionAlgorithmSpec -> Base64 -> Text -> ReEncrypt

-- | Create a value of <a>ReEncrypt</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:destinationEncryptionContext:ReEncrypt'</a>,
--   <a>reEncrypt_destinationEncryptionContext</a> - Specifies that
--   encryption context to use when the reencrypting the data.
--   
--   A destination encryption context is valid only when the destination
--   KMS key is a symmetric KMS key. The standard ciphertext format for
--   asymmetric KMS keys does not include fields for metadata.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:grantTokens:ReEncrypt'</a>, <a>reEncrypt_grantTokens</a> - A
--   list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:sourceEncryptionContext:ReEncrypt'</a>,
--   <a>reEncrypt_sourceEncryptionContext</a> - Specifies the encryption
--   context to use to decrypt the ciphertext. Enter the same encryption
--   context that was used to encrypt the ciphertext.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:sourceKeyId:ReEncrypt'</a>, <a>reEncrypt_sourceKeyId</a> -
--   Specifies the KMS key that KMS will use to decrypt the ciphertext
--   before it is re-encrypted. Enter a key ID of the KMS key that was used
--   to encrypt the ciphertext.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. If you used a symmetric KMS key, KMS can
--   get the KMS key from metadata that it adds to the symmetric ciphertext
--   blob. However, it is always recommended as a best practice. This
--   practice ensures that you use the KMS key that you intend.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:destinationEncryptionAlgorithm:ReEncrypt'</a>,
--   <a>reEncrypt_destinationEncryptionAlgorithm</a> - Specifies the
--   encryption algorithm that KMS will use to reecrypt the data after it
--   has decrypted it. The default value, <tt>SYMMETRIC_DEFAULT</tt>,
--   represents the encryption algorithm used for symmetric KMS keys.
--   
--   This parameter is required only when the destination KMS key is an
--   asymmetric KMS key.
--   
--   <a>$sel:sourceEncryptionAlgorithm:ReEncrypt'</a>,
--   <a>reEncrypt_sourceEncryptionAlgorithm</a> - Specifies the encryption
--   algorithm that KMS will use to decrypt the ciphertext before it is
--   reencrypted. The default value, <tt>SYMMETRIC_DEFAULT</tt>, represents
--   the algorithm used for symmetric KMS keys.
--   
--   Specify the same algorithm that was used to encrypt the ciphertext. If
--   you specify a different algorithm, the decrypt attempt fails.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key.
--   
--   <a>$sel:ciphertextBlob:ReEncrypt'</a>, <a>reEncrypt_ciphertextBlob</a>
--   - Ciphertext of the data to reencrypt.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:destinationKeyId:ReEncrypt'</a>,
--   <a>reEncrypt_destinationKeyId</a> - A unique identifier for the KMS
--   key that is used to reencrypt the data. Specify a symmetric or
--   asymmetric KMS key with a <tt>KeyUsage</tt> value of
--   <tt>ENCRYPT_DECRYPT</tt>. To find the <tt>KeyUsage</tt> value of a KMS
--   key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
newReEncrypt :: ByteString -> Text -> ReEncrypt

-- | <i>See:</i> <a>newReEncryptResponse</a> smart constructor.
data ReEncryptResponse
ReEncryptResponse' :: Maybe Text -> Maybe EncryptionAlgorithmSpec -> Maybe Base64 -> Maybe EncryptionAlgorithmSpec -> Maybe Text -> Int -> ReEncryptResponse

-- | Create a value of <a>ReEncryptResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourceKeyId:ReEncrypt'</a>,
--   <a>reEncryptResponse_sourceKeyId</a> - Unique identifier of the KMS
--   key used to originally encrypt the data.
--   
--   <a>$sel:destinationEncryptionAlgorithm:ReEncrypt'</a>,
--   <a>reEncryptResponse_destinationEncryptionAlgorithm</a> - The
--   encryption algorithm that was used to reencrypt the data.
--   
--   <a>$sel:ciphertextBlob:ReEncrypt'</a>,
--   <a>reEncryptResponse_ciphertextBlob</a> - The reencrypted data. When
--   you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:sourceEncryptionAlgorithm:ReEncrypt'</a>,
--   <a>reEncryptResponse_sourceEncryptionAlgorithm</a> - The encryption
--   algorithm that was used to decrypt the ciphertext before it was
--   reencrypted.
--   
--   <a>$sel:keyId:ReEncryptResponse'</a>, <a>reEncryptResponse_keyId</a> -
--   The Amazon Resource Name (<a>key ARN</a>) of the KMS key that was used
--   to reencrypt the data.
--   
--   <a>$sel:httpStatus:ReEncryptResponse'</a>,
--   <a>reEncryptResponse_httpStatus</a> - The response's http status code.
newReEncryptResponse :: Int -> ReEncryptResponse

-- | <i>See:</i> <a>newListRetirableGrants</a> smart constructor.
data ListRetirableGrants
ListRetirableGrants' :: Maybe Natural -> Maybe Text -> Text -> ListRetirableGrants

-- | Create a value of <a>ListRetirableGrants</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListRetirableGrants'</a>,
--   <a>listRetirableGrants_limit</a> - Use this parameter to specify the
--   maximum number of items to return. When this value is present, KMS
--   does not return more than the specified number of items, but it might
--   return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
--   
--   <a>$sel:marker:ListRetirableGrants'</a>,
--   <a>listRetirableGrants_marker</a> - Use this parameter in a subsequent
--   request after you receive a response with truncated results. Set it to
--   the value of <tt>NextMarker</tt> from the truncated response you just
--   received.
--   
--   <a>$sel:retiringPrincipal:ListRetirableGrants'</a>,
--   <a>listRetirableGrants_retiringPrincipal</a> - The retiring principal
--   for which to list grants. Enter a principal in your Amazon Web
--   Services account.
--   
--   To specify the retiring principal, use the <a>Amazon Resource Name
--   (ARN)</a> of an Amazon Web Services principal. Valid Amazon Web
--   Services principals include Amazon Web Services accounts (root), IAM
--   users, federated users, and assumed role users. For examples of the
--   ARN syntax for specifying a principal, see <a>Amazon Web Services
--   Identity and Access Management (IAM)</a> in the Example ARNs section
--   of the /Amazon Web Services General Reference/.
newListRetirableGrants :: Text -> ListRetirableGrants

-- | <i>See:</i> <a>newListGrantsResponse</a> smart constructor.
data ListGrantsResponse
ListGrantsResponse' :: Maybe Text -> Maybe [GrantListEntry] -> Maybe Bool -> ListGrantsResponse

-- | Create a value of <a>ListGrantsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_nextMarker</a> - When <tt>Truncated</tt> is
--   true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:grants:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_grants</a> - A list of grants.
--   
--   <a>$sel:truncated:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_truncated</a> - A flag that indicates whether
--   there are more items in the list. When this value is true, the list in
--   this response is truncated. To get more items, pass the value of the
--   <tt>NextMarker</tt> element in thisresponse to the <tt>Marker</tt>
--   parameter in a subsequent request.
newListGrantsResponse :: ListGrantsResponse

-- | <i>See:</i> <a>newConnectCustomKeyStore</a> smart constructor.
data ConnectCustomKeyStore
ConnectCustomKeyStore' :: Text -> ConnectCustomKeyStore

-- | Create a value of <a>ConnectCustomKeyStore</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreId:ConnectCustomKeyStore'</a>,
--   <a>connectCustomKeyStore_customKeyStoreId</a> - Enter the key store ID
--   of the custom key store that you want to connect. To find the ID of a
--   custom key store, use the DescribeCustomKeyStores operation.
newConnectCustomKeyStore :: Text -> ConnectCustomKeyStore

-- | <i>See:</i> <a>newConnectCustomKeyStoreResponse</a> smart constructor.
data ConnectCustomKeyStoreResponse
ConnectCustomKeyStoreResponse' :: Int -> ConnectCustomKeyStoreResponse

-- | Create a value of <a>ConnectCustomKeyStoreResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:ConnectCustomKeyStoreResponse'</a>,
--   <a>connectCustomKeyStoreResponse_httpStatus</a> - The response's http
--   status code.
newConnectCustomKeyStoreResponse :: Int -> ConnectCustomKeyStoreResponse

-- | <i>See:</i> <a>newUpdatePrimaryRegion</a> smart constructor.
data UpdatePrimaryRegion
UpdatePrimaryRegion' :: Text -> Text -> UpdatePrimaryRegion

-- | Create a value of <a>UpdatePrimaryRegion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:UpdatePrimaryRegion'</a>,
--   <a>updatePrimaryRegion_keyId</a> - Identifies the current primary key.
--   When the operation completes, this KMS key will be a replica key.
--   
--   Specify the key ID or key ARN of a multi-Region primary key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:primaryRegion:UpdatePrimaryRegion'</a>,
--   <a>updatePrimaryRegion_primaryRegion</a> - The Amazon Web Services
--   Region of the new primary key. Enter the Region ID, such as
--   <tt>us-east-1</tt> or <tt>ap-southeast-2</tt>. There must be an
--   existing replica key in this Region.
--   
--   When the operation completes, the multi-Region key in this Region will
--   be the primary key.
newUpdatePrimaryRegion :: Text -> Text -> UpdatePrimaryRegion

-- | <i>See:</i> <a>newUpdatePrimaryRegionResponse</a> smart constructor.
data UpdatePrimaryRegionResponse
UpdatePrimaryRegionResponse' :: UpdatePrimaryRegionResponse

-- | Create a value of <a>UpdatePrimaryRegionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newUpdatePrimaryRegionResponse :: UpdatePrimaryRegionResponse

-- | <i>See:</i> <a>newDescribeKey</a> smart constructor.
data DescribeKey
DescribeKey' :: Maybe [Text] -> Text -> DescribeKey

-- | Create a value of <a>DescribeKey</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:DescribeKey'</a>, <a>describeKey_grantTokens</a> -
--   A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:keyId:DescribeKey'</a>, <a>describeKey_keyId</a> - Describes
--   the specified KMS key.
--   
--   If you specify a predefined Amazon Web Services alias (an Amazon Web
--   Services alias with no key ID), KMS associates the alias with an
--   <a>Amazon Web Services managed key</a> and returns its <tt>KeyId</tt>
--   and <tt>Arn</tt> in the response.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
newDescribeKey :: Text -> DescribeKey

-- | <i>See:</i> <a>newDescribeKeyResponse</a> smart constructor.
data DescribeKeyResponse
DescribeKeyResponse' :: Maybe KeyMetadata -> Int -> DescribeKeyResponse

-- | Create a value of <a>DescribeKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyMetadata:DescribeKeyResponse'</a>,
--   <a>describeKeyResponse_keyMetadata</a> - Metadata associated with the
--   key.
--   
--   <a>$sel:httpStatus:DescribeKeyResponse'</a>,
--   <a>describeKeyResponse_httpStatus</a> - The response's http status
--   code.
newDescribeKeyResponse :: Int -> DescribeKeyResponse

-- | <i>See:</i> <a>newGetParametersForImport</a> smart constructor.
data GetParametersForImport
GetParametersForImport' :: Text -> AlgorithmSpec -> WrappingKeySpec -> GetParametersForImport

-- | Create a value of <a>GetParametersForImport</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:GetParametersForImport'</a>,
--   <a>getParametersForImport_keyId</a> - The identifier of the symmetric
--   KMS key into which you will import key material. The <tt>Origin</tt>
--   of the KMS key must be <tt>EXTERNAL</tt>.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:wrappingAlgorithm:GetParametersForImport'</a>,
--   <a>getParametersForImport_wrappingAlgorithm</a> - The algorithm you
--   will use to encrypt the key material before importing it with
--   ImportKeyMaterial. For more information, see <a>Encrypt the Key
--   Material</a> in the <i>Key Management Service Developer Guide</i>.
--   
--   <a>$sel:wrappingKeySpec:GetParametersForImport'</a>,
--   <a>getParametersForImport_wrappingKeySpec</a> - The type of wrapping
--   key (public key) to return in the response. Only 2048-bit RSA public
--   keys are supported.
newGetParametersForImport :: Text -> AlgorithmSpec -> WrappingKeySpec -> GetParametersForImport

-- | <i>See:</i> <a>newGetParametersForImportResponse</a> smart
--   constructor.
data GetParametersForImportResponse
GetParametersForImportResponse' :: Maybe POSIX -> Maybe (Sensitive Base64) -> Maybe Base64 -> Maybe Text -> Int -> GetParametersForImportResponse

-- | Create a value of <a>GetParametersForImportResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:parametersValidTo:GetParametersForImportResponse'</a>,
--   <a>getParametersForImportResponse_parametersValidTo</a> - The time at
--   which the import token and public key are no longer valid. After this
--   time, you cannot use them to make an ImportKeyMaterial request and you
--   must send another <tt>GetParametersForImport</tt> request to get new
--   ones.
--   
--   <a>$sel:publicKey:GetParametersForImportResponse'</a>,
--   <a>getParametersForImportResponse_publicKey</a> - The public key to
--   use to encrypt the key material before importing it with
--   ImportKeyMaterial.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:importToken:GetParametersForImportResponse'</a>,
--   <a>getParametersForImportResponse_importToken</a> - The import token
--   to send in a subsequent ImportKeyMaterial request.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:keyId:GetParametersForImport'</a>,
--   <a>getParametersForImportResponse_keyId</a> - The Amazon Resource Name
--   (<a>key ARN</a>) of the KMS key to use in a subsequent
--   ImportKeyMaterial request. This is the same KMS key specified in the
--   <tt>GetParametersForImport</tt> request.
--   
--   <a>$sel:httpStatus:GetParametersForImportResponse'</a>,
--   <a>getParametersForImportResponse_httpStatus</a> - The response's http
--   status code.
newGetParametersForImportResponse :: Int -> GetParametersForImportResponse

-- | <i>See:</i> <a>newUpdateCustomKeyStore</a> smart constructor.
data UpdateCustomKeyStore
UpdateCustomKeyStore' :: Maybe (Sensitive Text) -> Maybe Text -> Maybe Text -> Text -> UpdateCustomKeyStore

-- | Create a value of <a>UpdateCustomKeyStore</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyStorePassword:UpdateCustomKeyStore'</a>,
--   <a>updateCustomKeyStore_keyStorePassword</a> - Enter the current
--   password of the <tt>kmsuser</tt> crypto user (CU) in the CloudHSM
--   cluster that is associated with the custom key store.
--   
--   This parameter tells KMS the current password of the <tt>kmsuser</tt>
--   crypto user (CU). It does not set or change the password of any users
--   in the CloudHSM cluster.
--   
--   <a>$sel:newCustomKeyStoreName':UpdateCustomKeyStore'</a>,
--   <a>updateCustomKeyStore_newCustomKeyStoreName</a> - Changes the
--   friendly name of the custom key store to the value that you specify.
--   The custom key store name must be unique in the Amazon Web Services
--   account.
--   
--   <a>$sel:cloudHsmClusterId:UpdateCustomKeyStore'</a>,
--   <a>updateCustomKeyStore_cloudHsmClusterId</a> - Associates the custom
--   key store with a related CloudHSM cluster.
--   
--   Enter the cluster ID of the cluster that you used to create the custom
--   key store or a cluster that shares a backup history and has the same
--   cluster certificate as the original cluster. You cannot use this
--   parameter to associate a custom key store with an unrelated cluster.
--   In addition, the replacement cluster must <a>fulfill the
--   requirements</a> for a cluster associated with a custom key store. To
--   view the cluster certificate of a cluster, use the
--   <a>DescribeClusters</a> operation.
--   
--   <a>$sel:customKeyStoreId:UpdateCustomKeyStore'</a>,
--   <a>updateCustomKeyStore_customKeyStoreId</a> - Identifies the custom
--   key store that you want to update. Enter the ID of the custom key
--   store. To find the ID of a custom key store, use the
--   DescribeCustomKeyStores operation.
newUpdateCustomKeyStore :: Text -> UpdateCustomKeyStore

-- | <i>See:</i> <a>newUpdateCustomKeyStoreResponse</a> smart constructor.
data UpdateCustomKeyStoreResponse
UpdateCustomKeyStoreResponse' :: Int -> UpdateCustomKeyStoreResponse

-- | Create a value of <a>UpdateCustomKeyStoreResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateCustomKeyStoreResponse'</a>,
--   <a>updateCustomKeyStoreResponse_httpStatus</a> - The response's http
--   status code.
newUpdateCustomKeyStoreResponse :: Int -> UpdateCustomKeyStoreResponse

-- | <i>See:</i> <a>newDeleteCustomKeyStore</a> smart constructor.
data DeleteCustomKeyStore
DeleteCustomKeyStore' :: Text -> DeleteCustomKeyStore

-- | Create a value of <a>DeleteCustomKeyStore</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreId:DeleteCustomKeyStore'</a>,
--   <a>deleteCustomKeyStore_customKeyStoreId</a> - Enter the ID of the
--   custom key store you want to delete. To find the ID of a custom key
--   store, use the DescribeCustomKeyStores operation.
newDeleteCustomKeyStore :: Text -> DeleteCustomKeyStore

-- | <i>See:</i> <a>newDeleteCustomKeyStoreResponse</a> smart constructor.
data DeleteCustomKeyStoreResponse
DeleteCustomKeyStoreResponse' :: Int -> DeleteCustomKeyStoreResponse

-- | Create a value of <a>DeleteCustomKeyStoreResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteCustomKeyStoreResponse'</a>,
--   <a>deleteCustomKeyStoreResponse_httpStatus</a> - The response's http
--   status code.
newDeleteCustomKeyStoreResponse :: Int -> DeleteCustomKeyStoreResponse

-- | <i>See:</i> <a>newEncrypt</a> smart constructor.
data Encrypt
Encrypt' :: Maybe [Text] -> Maybe EncryptionAlgorithmSpec -> Maybe (HashMap Text Text) -> Text -> Sensitive Base64 -> Encrypt

-- | Create a value of <a>Encrypt</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:Encrypt'</a>, <a>encrypt_grantTokens</a> - A list
--   of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:encryptionAlgorithm:Encrypt'</a>,
--   <a>encrypt_encryptionAlgorithm</a> - Specifies the encryption
--   algorithm that KMS will use to encrypt the plaintext message. The
--   algorithm must be compatible with the KMS key that you specify.
--   
--   This parameter is required only for asymmetric KMS keys. The default
--   value, <tt>SYMMETRIC_DEFAULT</tt>, is the algorithm used for symmetric
--   KMS keys. If you are using an asymmetric KMS key, we recommend
--   RSAES_OAEP_SHA_256.
--   
--   <a>$sel:encryptionContext:Encrypt'</a>,
--   <a>encrypt_encryptionContext</a> - Specifies the encryption context
--   that will be used to encrypt the data. An encryption context is valid
--   only for <a>cryptographic operations</a> with a symmetric KMS key. The
--   standard asymmetric encryption algorithms that KMS uses do not support
--   an encryption context.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keyId:Encrypt'</a>, <a>encrypt_keyId</a> - Identifies the KMS
--   key to use in the encryption operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:plaintext:Encrypt'</a>, <a>encrypt_plaintext</a> - Data to be
--   encrypted.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newEncrypt :: Text -> ByteString -> Encrypt

-- | <i>See:</i> <a>newEncryptResponse</a> smart constructor.
data EncryptResponse
EncryptResponse' :: Maybe EncryptionAlgorithmSpec -> Maybe Base64 -> Maybe Text -> Int -> EncryptResponse

-- | Create a value of <a>EncryptResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionAlgorithm:Encrypt'</a>,
--   <a>encryptResponse_encryptionAlgorithm</a> - The encryption algorithm
--   that was used to encrypt the plaintext.
--   
--   <a>$sel:ciphertextBlob:EncryptResponse'</a>,
--   <a>encryptResponse_ciphertextBlob</a> - The encrypted plaintext. When
--   you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:keyId:Encrypt'</a>, <a>encryptResponse_keyId</a> - The Amazon
--   Resource Name (<a>key ARN</a>) of the KMS key that was used to encrypt
--   the plaintext.
--   
--   <a>$sel:httpStatus:EncryptResponse'</a>,
--   <a>encryptResponse_httpStatus</a> - The response's http status code.
newEncryptResponse :: Int -> EncryptResponse

-- | <i>See:</i> <a>newGenerateDataKeyWithoutPlaintext</a> smart
--   constructor.
data GenerateDataKeyWithoutPlaintext
GenerateDataKeyWithoutPlaintext' :: Maybe [Text] -> Maybe Natural -> Maybe (HashMap Text Text) -> Maybe DataKeySpec -> Text -> GenerateDataKeyWithoutPlaintext

-- | Create a value of <a>GenerateDataKeyWithoutPlaintext</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:GenerateDataKeyWithoutPlaintext'</a>,
--   <a>generateDataKeyWithoutPlaintext_grantTokens</a> - A list of grant
--   tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:numberOfBytes:GenerateDataKeyWithoutPlaintext'</a>,
--   <a>generateDataKeyWithoutPlaintext_numberOfBytes</a> - The length of
--   the data key in bytes. For example, use the value 64 to generate a
--   512-bit data key (64 bytes is 512 bits). For common key lengths
--   (128-bit and 256-bit symmetric keys), we recommend that you use the
--   <tt>KeySpec</tt> field instead of this one.
--   
--   <a>$sel:encryptionContext:GenerateDataKeyWithoutPlaintext'</a>,
--   <a>generateDataKeyWithoutPlaintext_encryptionContext</a> - Specifies
--   the encryption context that will be used when encrypting the data key.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keySpec:GenerateDataKeyWithoutPlaintext'</a>,
--   <a>generateDataKeyWithoutPlaintext_keySpec</a> - The length of the
--   data key. Use <tt>AES_128</tt> to generate a 128-bit symmetric key, or
--   <tt>AES_256</tt> to generate a 256-bit symmetric key.
--   
--   <a>$sel:keyId:GenerateDataKeyWithoutPlaintext'</a>,
--   <a>generateDataKeyWithoutPlaintext_keyId</a> - The identifier of the
--   symmetric KMS key that encrypts the data key.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
newGenerateDataKeyWithoutPlaintext :: Text -> GenerateDataKeyWithoutPlaintext

-- | <i>See:</i> <a>newGenerateDataKeyWithoutPlaintextResponse</a> smart
--   constructor.
data GenerateDataKeyWithoutPlaintextResponse
GenerateDataKeyWithoutPlaintextResponse' :: Maybe Base64 -> Maybe Text -> Int -> GenerateDataKeyWithoutPlaintextResponse

-- | Create a value of <a>GenerateDataKeyWithoutPlaintextResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ciphertextBlob:GenerateDataKeyWithoutPlaintextResponse'</a>,
--   <a>generateDataKeyWithoutPlaintextResponse_ciphertextBlob</a> - The
--   encrypted data key. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:keyId:GenerateDataKeyWithoutPlaintext'</a>,
--   <a>generateDataKeyWithoutPlaintextResponse_keyId</a> - The Amazon
--   Resource Name (<a>key ARN</a>) of the KMS key that encrypted the data
--   key.
--   
--   <a>$sel:httpStatus:GenerateDataKeyWithoutPlaintextResponse'</a>,
--   <a>generateDataKeyWithoutPlaintextResponse_httpStatus</a> - The
--   response's http status code.
newGenerateDataKeyWithoutPlaintextResponse :: Int -> GenerateDataKeyWithoutPlaintextResponse

-- | <i>See:</i> <a>newGetKeyPolicy</a> smart constructor.
data GetKeyPolicy
GetKeyPolicy' :: Text -> Text -> GetKeyPolicy

-- | Create a value of <a>GetKeyPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:GetKeyPolicy'</a>, <a>getKeyPolicy_keyId</a> - Gets the
--   key policy for the specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:policyName:GetKeyPolicy'</a>, <a>getKeyPolicy_policyName</a> -
--   Specifies the name of the key policy. The only valid name is
--   <tt>default</tt>. To get the names of key policies, use
--   ListKeyPolicies.
newGetKeyPolicy :: Text -> Text -> GetKeyPolicy

-- | <i>See:</i> <a>newGetKeyPolicyResponse</a> smart constructor.
data GetKeyPolicyResponse
GetKeyPolicyResponse' :: Maybe Text -> Int -> GetKeyPolicyResponse

-- | Create a value of <a>GetKeyPolicyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:policy:GetKeyPolicyResponse'</a>,
--   <a>getKeyPolicyResponse_policy</a> - A key policy document in JSON
--   format.
--   
--   <a>$sel:httpStatus:GetKeyPolicyResponse'</a>,
--   <a>getKeyPolicyResponse_httpStatus</a> - The response's http status
--   code.
newGetKeyPolicyResponse :: Int -> GetKeyPolicyResponse

-- | <i>See:</i> <a>newEnableKey</a> smart constructor.
data EnableKey
EnableKey' :: Text -> EnableKey

-- | Create a value of <a>EnableKey</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:EnableKey'</a>, <a>enableKey_keyId</a> - Identifies the
--   KMS key to enable.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newEnableKey :: Text -> EnableKey

-- | <i>See:</i> <a>newEnableKeyResponse</a> smart constructor.
data EnableKeyResponse
EnableKeyResponse' :: EnableKeyResponse

-- | Create a value of <a>EnableKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newEnableKeyResponse :: EnableKeyResponse

-- | <i>See:</i> <a>newGenerateDataKeyPair</a> smart constructor.
data GenerateDataKeyPair
GenerateDataKeyPair' :: Maybe [Text] -> Maybe (HashMap Text Text) -> Text -> DataKeyPairSpec -> GenerateDataKeyPair

-- | Create a value of <a>GenerateDataKeyPair</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:GenerateDataKeyPair'</a>,
--   <a>generateDataKeyPair_grantTokens</a> - A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:encryptionContext:GenerateDataKeyPair'</a>,
--   <a>generateDataKeyPair_encryptionContext</a> - Specifies the
--   encryption context that will be used when encrypting the private key
--   in the data key pair.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keyId:GenerateDataKeyPair'</a>,
--   <a>generateDataKeyPair_keyId</a> - Specifies the symmetric KMS key
--   that encrypts the private key in the data key pair. You cannot specify
--   an asymmetric KMS key or a KMS key in a custom key store. To get the
--   type and origin of your KMS key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:keyPairSpec:GenerateDataKeyPair'</a>,
--   <a>generateDataKeyPair_keyPairSpec</a> - Determines the type of data
--   key pair that is generated.
--   
--   The KMS rule that restricts the use of asymmetric RSA KMS keys to
--   encrypt and decrypt or to sign and verify (but not both), and the rule
--   that permits you to use ECC KMS keys only to sign and verify, are not
--   effective on data key pairs, which are used outside of KMS.
newGenerateDataKeyPair :: Text -> DataKeyPairSpec -> GenerateDataKeyPair

-- | <i>See:</i> <a>newGenerateDataKeyPairResponse</a> smart constructor.
data GenerateDataKeyPairResponse
GenerateDataKeyPairResponse' :: Maybe Base64 -> Maybe DataKeyPairSpec -> Maybe Base64 -> Maybe (Sensitive Base64) -> Maybe Text -> Int -> GenerateDataKeyPairResponse

-- | Create a value of <a>GenerateDataKeyPairResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:publicKey:GenerateDataKeyPairResponse'</a>,
--   <a>generateDataKeyPairResponse_publicKey</a> - The public key (in
--   plaintext).-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
--   
--   <a>$sel:keyPairSpec:GenerateDataKeyPair'</a>,
--   <a>generateDataKeyPairResponse_keyPairSpec</a> - The type of data key
--   pair that was generated.
--   
--   <a>$sel:privateKeyCiphertextBlob:GenerateDataKeyPairResponse'</a>,
--   <a>generateDataKeyPairResponse_privateKeyCiphertextBlob</a> - The
--   encrypted copy of the private key. When you use the HTTP API or the
--   Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is
--   not Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:privateKeyPlaintext:GenerateDataKeyPairResponse'</a>,
--   <a>generateDataKeyPairResponse_privateKeyPlaintext</a> - The plaintext
--   copy of the private key. When you use the HTTP API or the Amazon Web
--   Services CLI, the value is Base64-encoded. Otherwise, it is not
--   Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:keyId:GenerateDataKeyPair'</a>,
--   <a>generateDataKeyPairResponse_keyId</a> - The Amazon Resource Name
--   (<a>key ARN</a>) of the KMS key that encrypted the private key.
--   
--   <a>$sel:httpStatus:GenerateDataKeyPairResponse'</a>,
--   <a>generateDataKeyPairResponse_httpStatus</a> - The response's http
--   status code.
newGenerateDataKeyPairResponse :: Int -> GenerateDataKeyPairResponse

-- | <i>See:</i> <a>newListKeys</a> smart constructor.
data ListKeys
ListKeys' :: Maybe Natural -> Maybe Text -> ListKeys

-- | Create a value of <a>ListKeys</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListKeys'</a>, <a>listKeys_limit</a> - Use this
--   parameter to specify the maximum number of items to return. When this
--   value is present, KMS does not return more than the specified number
--   of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 1000, inclusive. If you do not include a value, it defaults to
--   100.
--   
--   <a>$sel:marker:ListKeys'</a>, <a>listKeys_marker</a> - Use this
--   parameter in a subsequent request after you receive a response with
--   truncated results. Set it to the value of <tt>NextMarker</tt> from the
--   truncated response you just received.
newListKeys :: ListKeys

-- | <i>See:</i> <a>newListKeysResponse</a> smart constructor.
data ListKeysResponse
ListKeysResponse' :: Maybe Text -> Maybe [KeyListEntry] -> Maybe Bool -> Int -> ListKeysResponse

-- | Create a value of <a>ListKeysResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListKeysResponse'</a>,
--   <a>listKeysResponse_nextMarker</a> - When <tt>Truncated</tt> is true,
--   this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:keys:ListKeysResponse'</a>, <a>listKeysResponse_keys</a> - A
--   list of KMS keys.
--   
--   <a>$sel:truncated:ListKeysResponse'</a>,
--   <a>listKeysResponse_truncated</a> - A flag that indicates whether
--   there are more items in the list. When this value is true, the list in
--   this response is truncated. To get more items, pass the value of the
--   <tt>NextMarker</tt> element in thisresponse to the <tt>Marker</tt>
--   parameter in a subsequent request.
--   
--   <a>$sel:httpStatus:ListKeysResponse'</a>,
--   <a>listKeysResponse_httpStatus</a> - The response's http status code.
newListKeysResponse :: Int -> ListKeysResponse

-- | <i>See:</i> <a>newRevokeGrant</a> smart constructor.
data RevokeGrant
RevokeGrant' :: Text -> Text -> RevokeGrant

-- | Create a value of <a>RevokeGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:RevokeGrant'</a>, <a>revokeGrant_keyId</a> - A unique
--   identifier for the KMS key associated with the grant. To get the key
--   ID and key ARN for a KMS key, use ListKeys or DescribeKey.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:grantId:RevokeGrant'</a>, <a>revokeGrant_grantId</a> -
--   Identifies the grant to revoke. To get the grant ID, use CreateGrant,
--   ListGrants, or ListRetirableGrants.
newRevokeGrant :: Text -> Text -> RevokeGrant

-- | <i>See:</i> <a>newRevokeGrantResponse</a> smart constructor.
data RevokeGrantResponse
RevokeGrantResponse' :: RevokeGrantResponse

-- | Create a value of <a>RevokeGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newRevokeGrantResponse :: RevokeGrantResponse

-- | <i>See:</i> <a>newScheduleKeyDeletion</a> smart constructor.
data ScheduleKeyDeletion
ScheduleKeyDeletion' :: Maybe Natural -> Text -> ScheduleKeyDeletion

-- | Create a value of <a>ScheduleKeyDeletion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pendingWindowInDays:ScheduleKeyDeletion'</a>,
--   <a>scheduleKeyDeletion_pendingWindowInDays</a> - The waiting period,
--   specified in number of days. After the waiting period ends, KMS
--   deletes the KMS key.
--   
--   If the KMS key is a multi-Region primary key with replicas, the
--   waiting period begins when the last of its replica keys is deleted.
--   Otherwise, the waiting period begins immediately.
--   
--   This value is optional. If you include a value, it must be between 7
--   and 30, inclusive. If you do not include a value, it defaults to 30.
--   
--   <a>$sel:keyId:ScheduleKeyDeletion'</a>,
--   <a>scheduleKeyDeletion_keyId</a> - The unique identifier of the KMS
--   key to delete.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newScheduleKeyDeletion :: Text -> ScheduleKeyDeletion

-- | <i>See:</i> <a>newScheduleKeyDeletionResponse</a> smart constructor.
data ScheduleKeyDeletionResponse
ScheduleKeyDeletionResponse' :: Maybe Natural -> Maybe KeyState -> Maybe POSIX -> Maybe Text -> Int -> ScheduleKeyDeletionResponse

-- | Create a value of <a>ScheduleKeyDeletionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pendingWindowInDays:ScheduleKeyDeletion'</a>,
--   <a>scheduleKeyDeletionResponse_pendingWindowInDays</a> - The waiting
--   period before the KMS key is deleted.
--   
--   If the KMS key is a multi-Region primary key with replicas, the
--   waiting period begins when the last of its replica keys is deleted.
--   Otherwise, the waiting period begins immediately.
--   
--   <a>$sel:keyState:ScheduleKeyDeletionResponse'</a>,
--   <a>scheduleKeyDeletionResponse_keyState</a> - The current status of
--   the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   <a>$sel:deletionDate:ScheduleKeyDeletionResponse'</a>,
--   <a>scheduleKeyDeletionResponse_deletionDate</a> - The date and time
--   after which KMS deletes the KMS key.
--   
--   If the KMS key is a multi-Region primary key with replica keys, this
--   field does not appear. The deletion date for the primary key isn't
--   known until its last replica key is deleted.
--   
--   <a>$sel:keyId:ScheduleKeyDeletion'</a>,
--   <a>scheduleKeyDeletionResponse_keyId</a> - The Amazon Resource Name
--   (<a>key ARN</a>) of the KMS key whose deletion is scheduled.
--   
--   <a>$sel:httpStatus:ScheduleKeyDeletionResponse'</a>,
--   <a>scheduleKeyDeletionResponse_httpStatus</a> - The response's http
--   status code.
newScheduleKeyDeletionResponse :: Int -> ScheduleKeyDeletionResponse

-- | <i>See:</i> <a>newRetireGrant</a> smart constructor.
data RetireGrant
RetireGrant' :: Maybe Text -> Maybe Text -> Maybe Text -> RetireGrant

-- | Create a value of <a>RetireGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantToken:RetireGrant'</a>, <a>retireGrant_grantToken</a> -
--   Identifies the grant to be retired. You can use a grant token to
--   identify a new grant even before it has achieved eventual consistency.
--   
--   Only the CreateGrant operation returns a grant token. For details, see
--   <a>Grant token</a> and <a>Eventual consistency</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:grantId:RetireGrant'</a>, <a>retireGrant_grantId</a> -
--   Identifies the grant to retire. To get the grant ID, use CreateGrant,
--   ListGrants, or ListRetirableGrants.
--   
--   <ul>
--   <li>Grant ID Example -
--   0123456789012345678901234567890123456789012345678901234567890123</li>
--   </ul>
--   
--   <a>$sel:keyId:RetireGrant'</a>, <a>retireGrant_keyId</a> - The key ARN
--   KMS key associated with the grant. To find the key ARN, use the
--   ListKeys operation.
--   
--   For example:
--   <tt>arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt>
newRetireGrant :: RetireGrant

-- | <i>See:</i> <a>newRetireGrantResponse</a> smart constructor.
data RetireGrantResponse
RetireGrantResponse' :: RetireGrantResponse

-- | Create a value of <a>RetireGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newRetireGrantResponse :: RetireGrantResponse

-- | <i>See:</i> <a>newCreateKey</a> smart constructor.
data CreateKey
CreateKey' :: Maybe OriginType -> Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe [Tag] -> Maybe Text -> Maybe Text -> Maybe KeySpec -> Maybe CustomerMasterKeySpec -> Maybe KeyUsageType -> CreateKey

-- | Create a value of <a>CreateKey</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:origin:CreateKey'</a>, <a>createKey_origin</a> - The source of
--   the key material for the KMS key. You cannot change the origin after
--   you create the KMS key. The default is <tt>AWS_KMS</tt>, which means
--   that KMS creates the key material.
--   
--   To create a KMS key with no key material (for imported key material),
--   set the value to <tt>EXTERNAL</tt>. For more information about
--   importing key material into KMS, see <a>Importing Key Material</a> in
--   the <i>Key Management Service Developer Guide</i>. This value is valid
--   only for symmetric KMS keys.
--   
--   To create a KMS key in an KMS <a>custom key store</a> and create its
--   key material in the associated CloudHSM cluster, set this value to
--   <tt>AWS_CLOUDHSM</tt>. You must also use the <tt>CustomKeyStoreId</tt>
--   parameter to identify the custom key store. This value is valid only
--   for symmetric KMS keys.
--   
--   <a>$sel:multiRegion:CreateKey'</a>, <a>createKey_multiRegion</a> -
--   Creates a multi-Region primary key that you can replicate into other
--   Amazon Web Services Regions. You cannot change this value after you
--   create the KMS key.
--   
--   For a multi-Region key, set this parameter to <tt>True</tt>. For a
--   single-Region KMS key, omit this parameter or set it to
--   <tt>False</tt>. The default value is <tt>False</tt>.
--   
--   This operation supports <i>multi-Region keys</i>, an KMS feature that
--   lets you create multiple interoperable KMS keys in different Amazon
--   Web Services Regions. Because these KMS keys have the same key ID, key
--   material, and other metadata, you can use them interchangeably to
--   encrypt data in one Amazon Web Services Region and decrypt it in a
--   different Amazon Web Services Region without re-encrypting the data or
--   making a cross-Region call. For more information about multi-Region
--   keys, see <a>Using multi-Region keys</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   This value creates a <i>primary key</i>, not a replica. To create a
--   /replica key/, use the ReplicateKey operation.
--   
--   You can create a symmetric or asymmetric multi-Region key, and you can
--   create a multi-Region key with imported key material. However, you
--   cannot create a multi-Region key in a custom key store.
--   
--   <a>$sel:customKeyStoreId:CreateKey'</a>,
--   <a>createKey_customKeyStoreId</a> - Creates the KMS key in the
--   specified <a>custom key store</a> and the key material in its
--   associated CloudHSM cluster. To create a KMS key in a custom key
--   store, you must also specify the <tt>Origin</tt> parameter with a
--   value of <tt>AWS_CLOUDHSM</tt>. The CloudHSM cluster that is
--   associated with the custom key store must have at least two active
--   HSMs, each in a different Availability Zone in the Region.
--   
--   This parameter is valid only for symmetric KMS keys and regional KMS
--   keys. You cannot create an asymmetric KMS key or a multi-Region key in
--   a custom key store.
--   
--   To find the ID of a custom key store, use the DescribeCustomKeyStores
--   operation.
--   
--   The response includes the custom key store ID and the ID of the
--   CloudHSM cluster.
--   
--   This operation is part of the <a>Custom Key Store feature</a> feature
--   in KMS, which combines the convenience and extensive integration of
--   KMS with the isolation and control of a single-tenant key store.
--   
--   <a>$sel:bypassPolicyLockoutSafetyCheck:CreateKey'</a>,
--   <a>createKey_bypassPolicyLockoutSafetyCheck</a> - A flag to indicate
--   whether to bypass the key policy lockout safety check.
--   
--   Setting this value to true increases the risk that the KMS key becomes
--   unmanageable. Do not set this value to true indiscriminately.
--   
--   For more information, refer to the scenario in the <a>Default Key
--   Policy</a> section in the /<i>Key Management Service Developer
--   Guide</i>/ .
--   
--   Use this parameter only when you include a policy in the request and
--   you intend to prevent the principal that is making the request from
--   making a subsequent PutKeyPolicy request on the KMS key.
--   
--   The default value is false.
--   
--   <a>$sel:tags:CreateKey'</a>, <a>createKey_tags</a> - Assigns one or
--   more tags to the KMS key. Use this parameter to tag the KMS key when
--   it is created. To tag an existing KMS key, use the TagResource
--   operation.
--   
--   Tagging or untagging a KMS key can allow or deny permission to the KMS
--   key. For details, see <a>Using ABAC in KMS</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   To use this parameter, you must have <a>kms:TagResource</a> permission
--   in an IAM policy.
--   
--   Each tag consists of a tag key and a tag value. Both the tag key and
--   the tag value are required, but the tag value can be an empty (null)
--   string. You cannot have more than one tag on a KMS key with the same
--   tag key. If you specify an existing tag key with a different tag
--   value, KMS replaces the current tag value with the specified one.
--   
--   When you add tags to an Amazon Web Services resource, Amazon Web
--   Services generates a cost allocation report with usage and costs
--   aggregated by tags. Tags can also be used to control access to a KMS
--   key. For details, see <a>Tagging Keys</a>.
--   
--   <a>$sel:description:CreateKey'</a>, <a>createKey_description</a> - A
--   description of the KMS key.
--   
--   Use a description that helps you decide whether the KMS key is
--   appropriate for a task. The default value is an empty string (no
--   description).
--   
--   To set or change the description after the key is created, use
--   UpdateKeyDescription.
--   
--   <a>$sel:policy:CreateKey'</a>, <a>createKey_policy</a> - The key
--   policy to attach to the KMS key.
--   
--   If you provide a key policy, it must meet the following criteria:
--   
--   <ul>
--   <li>If you don't set <tt>BypassPolicyLockoutSafetyCheck</tt> to true,
--   the key policy must allow the principal that is making the
--   <tt>CreateKey</tt> request to make a subsequent PutKeyPolicy request
--   on the KMS key. This reduces the risk that the KMS key becomes
--   unmanageable. For more information, refer to the scenario in the
--   <a>Default Key Policy</a> section of the /<i>Key Management Service
--   Developer Guide</i>/ .</li>
--   <li>Each statement in the key policy must contain one or more
--   principals. The principals in the key policy must exist and be visible
--   to KMS. When you create a new Amazon Web Services principal (for
--   example, an IAM user or role), you might need to enforce a delay
--   before including the new principal in a key policy because the new
--   principal might not be immediately visible to KMS. For more
--   information, see <a>Changes that I make are not always immediately
--   visible</a> in the /Amazon Web Services Identity and Access Management
--   User Guide/.</li>
--   </ul>
--   
--   If you do not provide a key policy, KMS attaches a default key policy
--   to the KMS key. For more information, see <a>Default Key Policy</a> in
--   the <i>Key Management Service Developer Guide</i>.
--   
--   The key policy size quota is 32 kilobytes (32768 bytes).
--   
--   For help writing and formatting a JSON policy document, see the <a>IAM
--   JSON Policy Reference</a> in the /<i>Identity and Access Management
--   User Guide</i>/ .
--   
--   <a>$sel:keySpec:CreateKey'</a>, <a>createKey_keySpec</a> - Specifies
--   the type of KMS key to create. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, creates a KMS key with a 256-bit symmetric
--   key for encryption and decryption. For help choosing a key spec for
--   your KMS key, see <a>How to Choose Your KMS key Configuration</a> in
--   the /<i>Key Management Service Developer Guide</i>/ .
--   
--   The <tt>KeySpec</tt> determines whether the KMS key contains a
--   symmetric key or an asymmetric key pair. It also determines the
--   encryption algorithms or signing algorithms that the KMS key supports.
--   You can't change the <tt>KeySpec</tt> after the KMS key is created. To
--   further restrict the algorithms that can be used with the KMS key, use
--   a condition key in its key policy or IAM policy. For more information,
--   see <a>kms:EncryptionAlgorithm</a> or <a>kms:Signing Algorithm</a> in
--   the /<i>Key Management Service Developer Guide</i>/ .
--   
--   <a>Amazon Web Services services that are integrated with KMS</a> use
--   symmetric KMS keys to protect your data. These services do not support
--   asymmetric KMS keys. For help determining whether a KMS key is
--   symmetric or asymmetric, see <a>Identifying Symmetric and Asymmetric
--   KMS keys</a> in the <i>Key Management Service Developer Guide</i>.
--   
--   KMS supports the following key specs for KMS keys:
--   
--   <ul>
--   <li>Symmetric key (default)<ul><li><tt>SYMMETRIC_DEFAULT</tt>
--   (AES-256-GCM)</li></ul></li>
--   <li>Asymmetric RSA key
--   pairs<ul><li><pre>RSA_2048</pre></li><li><pre>RSA_3072</pre></li><li><pre>RSA_4096</pre></li></ul></li>
--   <li>Asymmetric NIST-recommended elliptic curve key
--   pairs<ul><li><tt>ECC_NIST_P256</tt>
--   (secp256r1)</li><li><tt>ECC_NIST_P384</tt>
--   (secp384r1)</li><li><tt>ECC_NIST_P521</tt> (secp521r1)</li></ul></li>
--   <li>Other asymmetric elliptic curve key
--   pairs<ul><li><tt>ECC_SECG_P256K1</tt> (secp256k1), commonly used for
--   cryptocurrencies.</li></ul></li>
--   </ul>
--   
--   <a>$sel:customerMasterKeySpec:CreateKey'</a>,
--   <a>createKey_customerMasterKeySpec</a> - Instead, use the
--   <tt>KeySpec</tt> parameter.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> parameters
--   work the same way. Only the names differ. We recommend that you use
--   <tt>KeySpec</tt> parameter in your code. However, to avoid breaking
--   changes, KMS will support both parameters.
--   
--   <a>$sel:keyUsage:CreateKey'</a>, <a>createKey_keyUsage</a> -
--   Determines the <a>cryptographic operations</a> for which you can use
--   the KMS key. The default value is <tt>ENCRYPT_DECRYPT</tt>. This
--   parameter is required only for asymmetric KMS keys. You can't change
--   the <tt>KeyUsage</tt> value after the KMS key is created.
--   
--   Select only one valid value.
--   
--   <ul>
--   <li>For symmetric KMS keys, omit the parameter or specify
--   <tt>ENCRYPT_DECRYPT</tt>.</li>
--   <li>For asymmetric KMS keys with RSA key material, specify
--   <tt>ENCRYPT_DECRYPT</tt> or <tt>SIGN_VERIFY</tt>.</li>
--   <li>For asymmetric KMS keys with ECC key material, specify
--   <tt>SIGN_VERIFY</tt>.</li>
--   </ul>
newCreateKey :: CreateKey

-- | <i>See:</i> <a>newCreateKeyResponse</a> smart constructor.
data CreateKeyResponse
CreateKeyResponse' :: Maybe KeyMetadata -> Int -> CreateKeyResponse

-- | Create a value of <a>CreateKeyResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyMetadata:CreateKeyResponse'</a>,
--   <a>createKeyResponse_keyMetadata</a> - Metadata associated with the
--   KMS key.
--   
--   <a>$sel:httpStatus:CreateKeyResponse'</a>,
--   <a>createKeyResponse_httpStatus</a> - The response's http status code.
newCreateKeyResponse :: Int -> CreateKeyResponse

-- | <i>See:</i> <a>newSign</a> smart constructor.
data Sign
Sign' :: Maybe [Text] -> Maybe MessageType -> Text -> Sensitive Base64 -> SigningAlgorithmSpec -> Sign

-- | Create a value of <a>Sign</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:Sign'</a>, <a>sign_grantTokens</a> - A list of
--   grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:messageType:Sign'</a>, <a>sign_messageType</a> - Tells KMS
--   whether the value of the <tt>Message</tt> parameter is a message or
--   message digest. The default value, RAW, indicates a message. To
--   indicate a message digest, enter <tt>DIGEST</tt>.
--   
--   <a>$sel:keyId:Sign'</a>, <a>sign_keyId</a> - Identifies an asymmetric
--   KMS key. KMS uses the private key in the asymmetric KMS key to sign
--   the message. The <tt>KeyUsage</tt> type of the KMS key must be
--   <tt>SIGN_VERIFY</tt>. To find the <tt>KeyUsage</tt> of a KMS key, use
--   the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:message:Sign'</a>, <a>sign_message</a> - Specifies the message
--   or message digest to sign. Messages can be 0-4096 bytes. To sign a
--   larger message, provide the message digest.
--   
--   If you provide a message, KMS generates a hash digest of the message
--   and then signs it.-- -- <i>Note:</i> This <tt>Lens</tt> automatically
--   encodes and decodes Base64 data. -- The underlying isomorphism will
--   encode to Base64 representation during -- serialisation, and decode
--   from Base64 representation during deserialisation. -- This
--   <tt>Lens</tt> accepts and returns only raw unencoded data.
--   
--   <a>$sel:signingAlgorithm:Sign'</a>, <a>sign_signingAlgorithm</a> -
--   Specifies the signing algorithm to use when signing the message.
--   
--   Choose an algorithm that is compatible with the type and size of the
--   specified asymmetric KMS key.
newSign :: Text -> ByteString -> SigningAlgorithmSpec -> Sign

-- | <i>See:</i> <a>newSignResponse</a> smart constructor.
data SignResponse
SignResponse' :: Maybe SigningAlgorithmSpec -> Maybe Base64 -> Maybe Text -> Int -> SignResponse

-- | Create a value of <a>SignResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signingAlgorithm:Sign'</a>,
--   <a>signResponse_signingAlgorithm</a> - The signing algorithm that was
--   used to sign the message.
--   
--   <a>$sel:signature:SignResponse'</a>, <a>signResponse_signature</a> -
--   The cryptographic signature that was generated for the message.
--   
--   <ul>
--   <li>When used with the supported RSA signing algorithms, the encoding
--   of this value is defined by <a>PKCS #1 in RFC 8017</a>.</li>
--   <li>When used with the <tt>ECDSA_SHA_256</tt>, <tt>ECDSA_SHA_384</tt>,
--   or <tt>ECDSA_SHA_512</tt> signing algorithms, this value is a
--   DER-encoded object as defined by ANS X9.62–2005 and <a>RFC 3279
--   Section 2.2.3</a>. This is the most commonly used signature format and
--   is appropriate for most uses.</li>
--   </ul>
--   
--   When you use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:keyId:Sign'</a>, <a>signResponse_keyId</a> - The Amazon
--   Resource Name (<a>key ARN</a>) of the asymmetric KMS key that was used
--   to sign the message.
--   
--   <a>$sel:httpStatus:SignResponse'</a>, <a>signResponse_httpStatus</a> -
--   The response's http status code.
newSignResponse :: Int -> SignResponse

-- | <i>See:</i> <a>newUpdateKeyDescription</a> smart constructor.
data UpdateKeyDescription
UpdateKeyDescription' :: Text -> Text -> UpdateKeyDescription

-- | Create a value of <a>UpdateKeyDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:UpdateKeyDescription'</a>,
--   <a>updateKeyDescription_keyId</a> - Updates the description of the
--   specified KMS key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:description:UpdateKeyDescription'</a>,
--   <a>updateKeyDescription_description</a> - New description for the KMS
--   key.
newUpdateKeyDescription :: Text -> Text -> UpdateKeyDescription

-- | <i>See:</i> <a>newUpdateKeyDescriptionResponse</a> smart constructor.
data UpdateKeyDescriptionResponse
UpdateKeyDescriptionResponse' :: UpdateKeyDescriptionResponse

-- | Create a value of <a>UpdateKeyDescriptionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newUpdateKeyDescriptionResponse :: UpdateKeyDescriptionResponse

-- | <i>See:</i> <a>newGenerateDataKeyPairWithoutPlaintext</a> smart
--   constructor.
data GenerateDataKeyPairWithoutPlaintext
GenerateDataKeyPairWithoutPlaintext' :: Maybe [Text] -> Maybe (HashMap Text Text) -> Text -> DataKeyPairSpec -> GenerateDataKeyPairWithoutPlaintext

-- | Create a value of <a>GenerateDataKeyPairWithoutPlaintext</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:GenerateDataKeyPairWithoutPlaintext'</a>,
--   <a>generateDataKeyPairWithoutPlaintext_grantTokens</a> - A list of
--   grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:encryptionContext:GenerateDataKeyPairWithoutPlaintext'</a>,
--   <a>generateDataKeyPairWithoutPlaintext_encryptionContext</a> -
--   Specifies the encryption context that will be used when encrypting the
--   private key in the data key pair.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keyId:GenerateDataKeyPairWithoutPlaintext'</a>,
--   <a>generateDataKeyPairWithoutPlaintext_keyId</a> - Specifies the KMS
--   key that encrypts the private key in the data key pair. You must
--   specify a symmetric KMS key. You cannot use an asymmetric KMS key or a
--   KMS key in a custom key store. To get the type and origin of your KMS
--   key, use the DescribeKey operation.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:keyPairSpec:GenerateDataKeyPairWithoutPlaintext'</a>,
--   <a>generateDataKeyPairWithoutPlaintext_keyPairSpec</a> - Determines
--   the type of data key pair that is generated.
--   
--   The KMS rule that restricts the use of asymmetric RSA KMS keys to
--   encrypt and decrypt or to sign and verify (but not both), and the rule
--   that permits you to use ECC KMS keys only to sign and verify, are not
--   effective on data key pairs, which are used outside of KMS.
newGenerateDataKeyPairWithoutPlaintext :: Text -> DataKeyPairSpec -> GenerateDataKeyPairWithoutPlaintext

-- | <i>See:</i> <a>newGenerateDataKeyPairWithoutPlaintextResponse</a>
--   smart constructor.
data GenerateDataKeyPairWithoutPlaintextResponse
GenerateDataKeyPairWithoutPlaintextResponse' :: Maybe Base64 -> Maybe DataKeyPairSpec -> Maybe Base64 -> Maybe Text -> Int -> GenerateDataKeyPairWithoutPlaintextResponse

-- | Create a value of <a>GenerateDataKeyPairWithoutPlaintextResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:publicKey:GenerateDataKeyPairWithoutPlaintextResponse'</a>,
--   <a>generateDataKeyPairWithoutPlaintextResponse_publicKey</a> - The
--   public key (in plaintext).-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:keyPairSpec:GenerateDataKeyPairWithoutPlaintext'</a>,
--   <a>generateDataKeyPairWithoutPlaintextResponse_keyPairSpec</a> - The
--   type of data key pair that was generated.
--   
--   
--   <a>$sel:privateKeyCiphertextBlob:GenerateDataKeyPairWithoutPlaintextResponse'</a>,
--   <a>generateDataKeyPairWithoutPlaintextResponse_privateKeyCiphertextBlob</a>
--   - The encrypted copy of the private key. When you use the HTTP API or
--   the Amazon Web Services CLI, the value is Base64-encoded. Otherwise,
--   it is not Base64-encoded.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:keyId:GenerateDataKeyPairWithoutPlaintext'</a>,
--   <a>generateDataKeyPairWithoutPlaintextResponse_keyId</a> - The Amazon
--   Resource Name (<a>key ARN</a>) of the KMS key that encrypted the
--   private key.
--   
--   <a>$sel:httpStatus:GenerateDataKeyPairWithoutPlaintextResponse'</a>,
--   <a>generateDataKeyPairWithoutPlaintextResponse_httpStatus</a> - The
--   response's http status code.
newGenerateDataKeyPairWithoutPlaintextResponse :: Int -> GenerateDataKeyPairWithoutPlaintextResponse

-- | <i>See:</i> <a>newCancelKeyDeletion</a> smart constructor.
data CancelKeyDeletion
CancelKeyDeletion' :: Text -> CancelKeyDeletion

-- | Create a value of <a>CancelKeyDeletion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:CancelKeyDeletion'</a>, <a>cancelKeyDeletion_keyId</a> -
--   Identifies the KMS key whose deletion is being canceled.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newCancelKeyDeletion :: Text -> CancelKeyDeletion

-- | <i>See:</i> <a>newCancelKeyDeletionResponse</a> smart constructor.
data CancelKeyDeletionResponse
CancelKeyDeletionResponse' :: Maybe Text -> Int -> CancelKeyDeletionResponse

-- | Create a value of <a>CancelKeyDeletionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:CancelKeyDeletion'</a>,
--   <a>cancelKeyDeletionResponse_keyId</a> - The Amazon Resource Name
--   (<a>key ARN</a>) of the KMS key whose deletion is canceled.
--   
--   <a>$sel:httpStatus:CancelKeyDeletionResponse'</a>,
--   <a>cancelKeyDeletionResponse_httpStatus</a> - The response's http
--   status code.
newCancelKeyDeletionResponse :: Int -> CancelKeyDeletionResponse

-- | <i>See:</i> <a>newDecrypt</a> smart constructor.
data Decrypt
Decrypt' :: Maybe [Text] -> Maybe EncryptionAlgorithmSpec -> Maybe (HashMap Text Text) -> Maybe Text -> Base64 -> Decrypt

-- | Create a value of <a>Decrypt</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantTokens:Decrypt'</a>, <a>decrypt_grantTokens</a> - A list
--   of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:encryptionAlgorithm:Decrypt'</a>,
--   <a>decrypt_encryptionAlgorithm</a> - Specifies the encryption
--   algorithm that will be used to decrypt the ciphertext. Specify the
--   same algorithm that was used to encrypt the data. If you specify a
--   different algorithm, the <tt>Decrypt</tt> operation fails.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. The default value,
--   <tt>SYMMETRIC_DEFAULT</tt>, represents the only supported algorithm
--   that is valid for symmetric KMS keys.
--   
--   <a>$sel:encryptionContext:Decrypt'</a>,
--   <a>decrypt_encryptionContext</a> - Specifies the encryption context to
--   use when decrypting the data. An encryption context is valid only for
--   <a>cryptographic operations</a> with a symmetric KMS key. The standard
--   asymmetric encryption algorithms that KMS uses do not support an
--   encryption context.
--   
--   An <i>encryption context</i> is a collection of non-secret key-value
--   pairs that represents additional authenticated data. When you use an
--   encryption context to encrypt data, you must specify the same (an
--   exact case-sensitive match) encryption context to decrypt the data. An
--   encryption context is optional when encrypting with a symmetric KMS
--   key, but it is highly recommended.
--   
--   For more information, see <a>Encryption Context</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keyId:Decrypt'</a>, <a>decrypt_keyId</a> - Specifies the KMS
--   key that KMS uses to decrypt the ciphertext. Enter a key ID of the KMS
--   key that was used to encrypt the ciphertext.
--   
--   This parameter is required only when the ciphertext was encrypted
--   under an asymmetric KMS key. If you used a symmetric KMS key, KMS can
--   get the KMS key from metadata that it adds to the symmetric ciphertext
--   blob. However, it is always recommended as a best practice. This
--   practice ensures that you use the KMS key that you intend.
--   
--   To specify a KMS key, use its key ID, key ARN, alias name, or alias
--   ARN. When using an alias name, prefix it with <tt>"alias/"</tt>. To
--   specify a KMS key in a different Amazon Web Services account, you must
--   use the key ARN or alias ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Alias name: <tt>alias/ExampleAlias</tt></li>
--   <li>Alias ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey. To get the alias name and alias ARN, use ListAliases.
--   
--   <a>$sel:ciphertextBlob:Decrypt'</a>, <a>decrypt_ciphertextBlob</a> -
--   Ciphertext to be decrypted. The blob includes metadata.-- --
--   <i>Note:</i> This <tt>Lens</tt> automatically encodes and decodes
--   Base64 data. -- The underlying isomorphism will encode to Base64
--   representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newDecrypt :: ByteString -> Decrypt

-- | <i>See:</i> <a>newDecryptResponse</a> smart constructor.
data DecryptResponse
DecryptResponse' :: Maybe (Sensitive Base64) -> Maybe EncryptionAlgorithmSpec -> Maybe Text -> Int -> DecryptResponse

-- | Create a value of <a>DecryptResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:plaintext:DecryptResponse'</a>,
--   <a>decryptResponse_plaintext</a> - Decrypted plaintext data. When you
--   use the HTTP API or the Amazon Web Services CLI, the value is
--   Base64-encoded. Otherwise, it is not Base64-encoded.-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:encryptionAlgorithm:Decrypt'</a>,
--   <a>decryptResponse_encryptionAlgorithm</a> - The encryption algorithm
--   that was used to decrypt the ciphertext.
--   
--   <a>$sel:keyId:Decrypt'</a>, <a>decryptResponse_keyId</a> - The Amazon
--   Resource Name (<a>key ARN</a>) of the KMS key that was used to decrypt
--   the ciphertext.
--   
--   <a>$sel:httpStatus:DecryptResponse'</a>,
--   <a>decryptResponse_httpStatus</a> - The response's http status code.
newDecryptResponse :: Int -> DecryptResponse

-- | <i>See:</i> <a>newDescribeCustomKeyStores</a> smart constructor.
data DescribeCustomKeyStores
DescribeCustomKeyStores' :: Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> DescribeCustomKeyStores

-- | Create a value of <a>DescribeCustomKeyStores</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreName:DescribeCustomKeyStores'</a>,
--   <a>describeCustomKeyStores_customKeyStoreName</a> - Gets only
--   information about the specified custom key store. Enter the friendly
--   name of the custom key store.
--   
--   By default, this operation gets information about all custom key
--   stores in the account and Region. To limit the output to a particular
--   custom key store, you can use either the <tt>CustomKeyStoreId</tt> or
--   <tt>CustomKeyStoreName</tt> parameter, but not both.
--   
--   <a>$sel:customKeyStoreId:DescribeCustomKeyStores'</a>,
--   <a>describeCustomKeyStores_customKeyStoreId</a> - Gets only
--   information about the specified custom key store. Enter the key store
--   ID.
--   
--   By default, this operation gets information about all custom key
--   stores in the account and Region. To limit the output to a particular
--   custom key store, you can use either the <tt>CustomKeyStoreId</tt> or
--   <tt>CustomKeyStoreName</tt> parameter, but not both.
--   
--   <a>$sel:limit:DescribeCustomKeyStores'</a>,
--   <a>describeCustomKeyStores_limit</a> - Use this parameter to specify
--   the maximum number of items to return. When this value is present, KMS
--   does not return more than the specified number of items, but it might
--   return fewer.
--   
--   <a>$sel:marker:DescribeCustomKeyStores'</a>,
--   <a>describeCustomKeyStores_marker</a> - Use this parameter in a
--   subsequent request after you receive a response with truncated
--   results. Set it to the value of <tt>NextMarker</tt> from the truncated
--   response you just received.
newDescribeCustomKeyStores :: DescribeCustomKeyStores

-- | <i>See:</i> <a>newDescribeCustomKeyStoresResponse</a> smart
--   constructor.
data DescribeCustomKeyStoresResponse
DescribeCustomKeyStoresResponse' :: Maybe [CustomKeyStoresListEntry] -> Maybe Text -> Maybe Bool -> Int -> DescribeCustomKeyStoresResponse

-- | Create a value of <a>DescribeCustomKeyStoresResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStores:DescribeCustomKeyStoresResponse'</a>,
--   <a>describeCustomKeyStoresResponse_customKeyStores</a> - Contains
--   metadata about each custom key store.
--   
--   <a>$sel:nextMarker:DescribeCustomKeyStoresResponse'</a>,
--   <a>describeCustomKeyStoresResponse_nextMarker</a> - When
--   <tt>Truncated</tt> is true, this element is present and contains the
--   value to use for the <tt>Marker</tt> parameter in a subsequent
--   request.
--   
--   <a>$sel:truncated:DescribeCustomKeyStoresResponse'</a>,
--   <a>describeCustomKeyStoresResponse_truncated</a> - A flag that
--   indicates whether there are more items in the list. When this value is
--   true, the list in this response is truncated. To get more items, pass
--   the value of the <tt>NextMarker</tt> element in thisresponse to the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:httpStatus:DescribeCustomKeyStoresResponse'</a>,
--   <a>describeCustomKeyStoresResponse_httpStatus</a> - The response's
--   http status code.
newDescribeCustomKeyStoresResponse :: Int -> DescribeCustomKeyStoresResponse

-- | <i>See:</i> <a>newCreateGrant</a> smart constructor.
data CreateGrant
CreateGrant' :: Maybe GrantConstraints -> Maybe [Text] -> Maybe Text -> Maybe Text -> Text -> Text -> [GrantOperation] -> CreateGrant

-- | Create a value of <a>CreateGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:constraints:CreateGrant'</a>, <a>createGrant_constraints</a> -
--   Specifies a grant constraint.
--   
--   KMS supports the <tt>EncryptionContextEquals</tt> and
--   <tt>EncryptionContextSubset</tt> grant constraints. Each constraint
--   value can include up to 8 encryption context pairs. The encryption
--   context value in each constraint cannot exceed 384 characters.
--   
--   These grant constraints allow the permissions in the grant only when
--   the encryption context in the request matches
--   (<tt>EncryptionContextEquals</tt>) or includes
--   (<tt>EncryptionContextSubset</tt>) the encryption context specified in
--   this structure. For information about grant constraints, see <a>Using
--   grant constraints</a> in the <i>Key Management Service Developer
--   Guide</i>. For more information about encryption context, see
--   <a>Encryption Context</a> in the /<i>Key Management Service Developer
--   Guide</i>/ .
--   
--   The encryption context grant constraints are supported only on
--   operations that include an encryption context. You cannot use an
--   encryption context grant constraint for cryptographic operations with
--   asymmetric KMS keys or for management operations, such as DescribeKey
--   or RetireGrant.
--   
--   <a>$sel:grantTokens:CreateGrant'</a>, <a>createGrant_grantTokens</a> -
--   A list of grant tokens.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:name:CreateGrant'</a>, <a>createGrant_name</a> - A friendly
--   name for the grant. Use this value to prevent the unintended creation
--   of duplicate grants when retrying this request.
--   
--   When this value is absent, all <tt>CreateGrant</tt> requests result in
--   a new grant with a unique <tt>GrantId</tt> even if all the supplied
--   parameters are identical. This can result in unintended duplicates
--   when you retry the <tt>CreateGrant</tt> request.
--   
--   When this value is present, you can retry a <tt>CreateGrant</tt>
--   request with identical parameters; if the grant already exists, the
--   original <tt>GrantId</tt> is returned without creating a new grant.
--   Note that the returned grant token is unique with every
--   <tt>CreateGrant</tt> request, even when a duplicate <tt>GrantId</tt>
--   is returned. All grant tokens for the same grant ID can be used
--   interchangeably.
--   
--   <a>$sel:retiringPrincipal:CreateGrant'</a>,
--   <a>createGrant_retiringPrincipal</a> - The principal that has
--   permission to use the RetireGrant operation to retire the grant.
--   
--   To specify the principal, use the <a>Amazon Resource Name (ARN)</a> of
--   an Amazon Web Services principal. Valid Amazon Web Services principals
--   include Amazon Web Services accounts (root), IAM users, federated
--   users, and assumed role users. For examples of the ARN syntax to use
--   for specifying a principal, see <a>Amazon Web Services Identity and
--   Access Management (IAM)</a> in the Example ARNs section of the /Amazon
--   Web Services General Reference/.
--   
--   The grant determines the retiring principal. Other principals might
--   have permission to retire the grant or revoke the grant. For details,
--   see RevokeGrant and <a>Retiring and revoking grants</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:keyId:CreateGrant'</a>, <a>createGrant_keyId</a> - Identifies
--   the KMS key for the grant. The grant gives principals permission to
--   use this KMS key.
--   
--   Specify the key ID or key ARN of the KMS key. To specify a KMS key in
--   a different Amazon Web Services account, you must use the key ARN.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
--   
--   <a>$sel:granteePrincipal:CreateGrant'</a>,
--   <a>createGrant_granteePrincipal</a> - The identity that gets the
--   permissions specified in the grant.
--   
--   To specify the principal, use the <a>Amazon Resource Name (ARN)</a> of
--   an Amazon Web Services principal. Valid Amazon Web Services principals
--   include Amazon Web Services accounts (root), IAM users, IAM roles,
--   federated users, and assumed role users. For examples of the ARN
--   syntax to use for specifying a principal, see <a>Amazon Web Services
--   Identity and Access Management (IAM)</a> in the Example ARNs section
--   of the /Amazon Web Services General Reference/.
--   
--   <a>$sel:operations:CreateGrant'</a>, <a>createGrant_operations</a> - A
--   list of operations that the grant permits.
--   
--   The operation must be supported on the KMS key. For example, you
--   cannot create a grant for a symmetric KMS key that allows the Sign
--   operation, or a grant for an asymmetric KMS key that allows the
--   GenerateDataKey operation. If you try, KMS returns a
--   <tt>ValidationError</tt> exception. For details, see <a>Grant
--   operations</a> in the <i>Key Management Service Developer Guide</i>.
newCreateGrant :: Text -> Text -> CreateGrant

-- | <i>See:</i> <a>newCreateGrantResponse</a> smart constructor.
data CreateGrantResponse
CreateGrantResponse' :: Maybe Text -> Maybe Text -> Int -> CreateGrantResponse

-- | Create a value of <a>CreateGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantToken:CreateGrantResponse'</a>,
--   <a>createGrantResponse_grantToken</a> - The grant token.
--   
--   Use a grant token when your permission to call this operation comes
--   from a new grant that has not yet achieved <i>eventual
--   consistency</i>. For more information, see <a>Grant token</a> and
--   <a>Using a grant token</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:grantId:CreateGrantResponse'</a>,
--   <a>createGrantResponse_grantId</a> - The unique identifier for the
--   grant.
--   
--   You can use the <tt>GrantId</tt> in a ListGrants, RetireGrant, or
--   RevokeGrant operation.
--   
--   <a>$sel:httpStatus:CreateGrantResponse'</a>,
--   <a>createGrantResponse_httpStatus</a> - The response's http status
--   code.
newCreateGrantResponse :: Int -> CreateGrantResponse

-- | <i>See:</i> <a>newEnableKeyRotation</a> smart constructor.
data EnableKeyRotation
EnableKeyRotation' :: Text -> EnableKeyRotation

-- | Create a value of <a>EnableKeyRotation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyId:EnableKeyRotation'</a>, <a>enableKeyRotation_keyId</a> -
--   Identifies a symmetric KMS key. You cannot enable automatic rotation
--   of <a>asymmetric KMS keys</a>, KMS keys with <a>imported key
--   material</a>, or KMS keys in a <a>custom key store</a>. To enable or
--   disable automatic rotation of a set of related <a>multi-Region
--   keys</a>, set the property on the primary key.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newEnableKeyRotation :: Text -> EnableKeyRotation

-- | <i>See:</i> <a>newEnableKeyRotationResponse</a> smart constructor.
data EnableKeyRotationResponse
EnableKeyRotationResponse' :: EnableKeyRotationResponse

-- | Create a value of <a>EnableKeyRotationResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newEnableKeyRotationResponse :: EnableKeyRotationResponse

-- | <i>See:</i> <a>newListAliases</a> smart constructor.
data ListAliases
ListAliases' :: Maybe Natural -> Maybe Text -> Maybe Text -> ListAliases

-- | Create a value of <a>ListAliases</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:ListAliases'</a>, <a>listAliases_limit</a> - Use this
--   parameter to specify the maximum number of items to return. When this
--   value is present, KMS does not return more than the specified number
--   of items, but it might return fewer.
--   
--   This value is optional. If you include a value, it must be between 1
--   and 100, inclusive. If you do not include a value, it defaults to 50.
--   
--   <a>$sel:marker:ListAliases'</a>, <a>listAliases_marker</a> - Use this
--   parameter in a subsequent request after you receive a response with
--   truncated results. Set it to the value of <tt>NextMarker</tt> from the
--   truncated response you just received.
--   
--   <a>$sel:keyId:ListAliases'</a>, <a>listAliases_keyId</a> - Lists only
--   aliases that are associated with the specified KMS key. Enter a KMS
--   key in your Amazon Web Services account.
--   
--   This parameter is optional. If you omit it, <tt>ListAliases</tt>
--   returns all aliases in the account and Region.
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newListAliases :: ListAliases

-- | <i>See:</i> <a>newListAliasesResponse</a> smart constructor.
data ListAliasesResponse
ListAliasesResponse' :: Maybe Text -> Maybe [AliasListEntry] -> Maybe Bool -> Int -> ListAliasesResponse

-- | Create a value of <a>ListAliasesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListAliasesResponse'</a>,
--   <a>listAliasesResponse_nextMarker</a> - When <tt>Truncated</tt> is
--   true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:aliases:ListAliasesResponse'</a>,
--   <a>listAliasesResponse_aliases</a> - A list of aliases.
--   
--   <a>$sel:truncated:ListAliasesResponse'</a>,
--   <a>listAliasesResponse_truncated</a> - A flag that indicates whether
--   there are more items in the list. When this value is true, the list in
--   this response is truncated. To get more items, pass the value of the
--   <tt>NextMarker</tt> element in thisresponse to the <tt>Marker</tt>
--   parameter in a subsequent request.
--   
--   <a>$sel:httpStatus:ListAliasesResponse'</a>,
--   <a>listAliasesResponse_httpStatus</a> - The response's http status
--   code.
newListAliasesResponse :: Int -> ListAliasesResponse

-- | <i>See:</i> <a>newCreateAlias</a> smart constructor.
data CreateAlias
CreateAlias' :: Text -> Text -> CreateAlias

-- | Create a value of <a>CreateAlias</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:aliasName:CreateAlias'</a>, <a>createAlias_aliasName</a> -
--   Specifies the alias name. This value must begin with <tt>alias/</tt>
--   followed by a name, such as <tt>alias/ExampleAlias</tt>.
--   
--   The <tt>AliasName</tt> value must be string of 1-256 characters. It
--   can contain only alphanumeric characters, forward slashes (/),
--   underscores (_), and dashes (-). The alias name cannot begin with
--   <tt>alias/aws/</tt>. The <tt>alias/aws/</tt> prefix is reserved for
--   <a>Amazon Web Services managed keys</a>.
--   
--   <a>$sel:targetKeyId:CreateAlias'</a>, <a>createAlias_targetKeyId</a> -
--   Associates the alias with the specified <a>customer managed key</a>.
--   The KMS key must be in the same Amazon Web Services Region.
--   
--   A valid key ID is required. If you supply a null or empty string
--   value, this operation returns an error.
--   
--   For help finding the key ID and ARN, see <a>Finding the Key ID and
--   ARN</a> in the /<i>Key Management Service Developer Guide</i>/ .
--   
--   Specify the key ID or key ARN of the KMS key.
--   
--   For example:
--   
--   <ul>
--   <li>Key ID: <tt>1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   <li>Key ARN:
--   <tt>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</tt></li>
--   </ul>
--   
--   To get the key ID and key ARN for a KMS key, use ListKeys or
--   DescribeKey.
newCreateAlias :: Text -> Text -> CreateAlias

-- | <i>See:</i> <a>newCreateAliasResponse</a> smart constructor.
data CreateAliasResponse
CreateAliasResponse' :: CreateAliasResponse

-- | Create a value of <a>CreateAliasResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newCreateAliasResponse :: CreateAliasResponse
newtype AlgorithmSpec
AlgorithmSpec' :: Text -> AlgorithmSpec
[fromAlgorithmSpec] :: AlgorithmSpec -> Text
pattern AlgorithmSpec_RSAES_OAEP_SHA_1 :: AlgorithmSpec
pattern AlgorithmSpec_RSAES_OAEP_SHA_256 :: AlgorithmSpec
pattern AlgorithmSpec_RSAES_PKCS1_V1_5 :: AlgorithmSpec
newtype ConnectionErrorCodeType
ConnectionErrorCodeType' :: Text -> ConnectionErrorCodeType
[fromConnectionErrorCodeType] :: ConnectionErrorCodeType -> Text
pattern ConnectionErrorCodeType_CLUSTER_NOT_FOUND :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_INSUFFICIENT_CLOUDHSM_HSMS :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_INTERNAL_ERROR :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_INVALID_CREDENTIALS :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_NETWORK_ERRORS :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_SUBNET_NOT_FOUND :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_USER_LOCKED_OUT :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_USER_LOGGED_IN :: ConnectionErrorCodeType
pattern ConnectionErrorCodeType_USER_NOT_FOUND :: ConnectionErrorCodeType
newtype ConnectionStateType
ConnectionStateType' :: Text -> ConnectionStateType
[fromConnectionStateType] :: ConnectionStateType -> Text
pattern ConnectionStateType_CONNECTED :: ConnectionStateType
pattern ConnectionStateType_CONNECTING :: ConnectionStateType
pattern ConnectionStateType_DISCONNECTED :: ConnectionStateType
pattern ConnectionStateType_DISCONNECTING :: ConnectionStateType
pattern ConnectionStateType_FAILED :: ConnectionStateType
newtype CustomerMasterKeySpec
CustomerMasterKeySpec' :: Text -> CustomerMasterKeySpec
[fromCustomerMasterKeySpec] :: CustomerMasterKeySpec -> Text
pattern CustomerMasterKeySpec_ECC_NIST_P256 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_ECC_NIST_P384 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_ECC_NIST_P521 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_ECC_SECG_P256K1 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_RSA_2048 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_RSA_3072 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_RSA_4096 :: CustomerMasterKeySpec
pattern CustomerMasterKeySpec_SYMMETRIC_DEFAULT :: CustomerMasterKeySpec
newtype DataKeyPairSpec
DataKeyPairSpec' :: Text -> DataKeyPairSpec
[fromDataKeyPairSpec] :: DataKeyPairSpec -> Text
pattern DataKeyPairSpec_ECC_NIST_P256 :: DataKeyPairSpec
pattern DataKeyPairSpec_ECC_NIST_P384 :: DataKeyPairSpec
pattern DataKeyPairSpec_ECC_NIST_P521 :: DataKeyPairSpec
pattern DataKeyPairSpec_ECC_SECG_P256K1 :: DataKeyPairSpec
pattern DataKeyPairSpec_RSA_2048 :: DataKeyPairSpec
pattern DataKeyPairSpec_RSA_3072 :: DataKeyPairSpec
pattern DataKeyPairSpec_RSA_4096 :: DataKeyPairSpec
newtype DataKeySpec
DataKeySpec' :: Text -> DataKeySpec
[fromDataKeySpec] :: DataKeySpec -> Text
pattern DataKeySpec_AES_128 :: DataKeySpec
pattern DataKeySpec_AES_256 :: DataKeySpec
newtype EncryptionAlgorithmSpec
EncryptionAlgorithmSpec' :: Text -> EncryptionAlgorithmSpec
[fromEncryptionAlgorithmSpec] :: EncryptionAlgorithmSpec -> Text
pattern EncryptionAlgorithmSpec_RSAES_OAEP_SHA_1 :: EncryptionAlgorithmSpec
pattern EncryptionAlgorithmSpec_RSAES_OAEP_SHA_256 :: EncryptionAlgorithmSpec
pattern EncryptionAlgorithmSpec_SYMMETRIC_DEFAULT :: EncryptionAlgorithmSpec
newtype ExpirationModelType
ExpirationModelType' :: Text -> ExpirationModelType
[fromExpirationModelType] :: ExpirationModelType -> Text
pattern ExpirationModelType_KEY_MATERIAL_DOES_NOT_EXPIRE :: ExpirationModelType
pattern ExpirationModelType_KEY_MATERIAL_EXPIRES :: ExpirationModelType
newtype GrantOperation
GrantOperation' :: Text -> GrantOperation
[fromGrantOperation] :: GrantOperation -> Text
pattern GrantOperation_CreateGrant :: GrantOperation
pattern GrantOperation_Decrypt :: GrantOperation
pattern GrantOperation_DescribeKey :: GrantOperation
pattern GrantOperation_Encrypt :: GrantOperation
pattern GrantOperation_GenerateDataKey :: GrantOperation
pattern GrantOperation_GenerateDataKeyPair :: GrantOperation
pattern GrantOperation_GenerateDataKeyPairWithoutPlaintext :: GrantOperation
pattern GrantOperation_GenerateDataKeyWithoutPlaintext :: GrantOperation
pattern GrantOperation_GetPublicKey :: GrantOperation
pattern GrantOperation_ReEncryptFrom :: GrantOperation
pattern GrantOperation_ReEncryptTo :: GrantOperation
pattern GrantOperation_RetireGrant :: GrantOperation
pattern GrantOperation_Sign :: GrantOperation
pattern GrantOperation_Verify :: GrantOperation
newtype KeyManagerType
KeyManagerType' :: Text -> KeyManagerType
[fromKeyManagerType] :: KeyManagerType -> Text
pattern KeyManagerType_AWS :: KeyManagerType
pattern KeyManagerType_CUSTOMER :: KeyManagerType
newtype KeySpec
KeySpec' :: Text -> KeySpec
[fromKeySpec] :: KeySpec -> Text
pattern KeySpec_ECC_NIST_P256 :: KeySpec
pattern KeySpec_ECC_NIST_P384 :: KeySpec
pattern KeySpec_ECC_NIST_P521 :: KeySpec
pattern KeySpec_ECC_SECG_P256K1 :: KeySpec
pattern KeySpec_RSA_2048 :: KeySpec
pattern KeySpec_RSA_3072 :: KeySpec
pattern KeySpec_RSA_4096 :: KeySpec
pattern KeySpec_SYMMETRIC_DEFAULT :: KeySpec
newtype KeyState
KeyState' :: Text -> KeyState
[fromKeyState] :: KeyState -> Text
pattern KeyState_Creating :: KeyState
pattern KeyState_Disabled :: KeyState
pattern KeyState_Enabled :: KeyState
pattern KeyState_PendingDeletion :: KeyState
pattern KeyState_PendingImport :: KeyState
pattern KeyState_PendingReplicaDeletion :: KeyState
pattern KeyState_Unavailable :: KeyState
pattern KeyState_Updating :: KeyState
newtype KeyUsageType
KeyUsageType' :: Text -> KeyUsageType
[fromKeyUsageType] :: KeyUsageType -> Text
pattern KeyUsageType_ENCRYPT_DECRYPT :: KeyUsageType
pattern KeyUsageType_SIGN_VERIFY :: KeyUsageType
newtype MessageType
MessageType' :: Text -> MessageType
[fromMessageType] :: MessageType -> Text
pattern MessageType_DIGEST :: MessageType
pattern MessageType_RAW :: MessageType
newtype MultiRegionKeyType
MultiRegionKeyType' :: Text -> MultiRegionKeyType
[fromMultiRegionKeyType] :: MultiRegionKeyType -> Text
pattern MultiRegionKeyType_PRIMARY :: MultiRegionKeyType
pattern MultiRegionKeyType_REPLICA :: MultiRegionKeyType
newtype OriginType
OriginType' :: Text -> OriginType
[fromOriginType] :: OriginType -> Text
pattern OriginType_AWS_CLOUDHSM :: OriginType
pattern OriginType_AWS_KMS :: OriginType
pattern OriginType_EXTERNAL :: OriginType
newtype SigningAlgorithmSpec
SigningAlgorithmSpec' :: Text -> SigningAlgorithmSpec
[fromSigningAlgorithmSpec] :: SigningAlgorithmSpec -> Text
pattern SigningAlgorithmSpec_ECDSA_SHA_256 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_ECDSA_SHA_384 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_ECDSA_SHA_512 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PKCS1_V1_5_SHA_256 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PKCS1_V1_5_SHA_384 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PKCS1_V1_5_SHA_512 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PSS_SHA_256 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PSS_SHA_384 :: SigningAlgorithmSpec
pattern SigningAlgorithmSpec_RSASSA_PSS_SHA_512 :: SigningAlgorithmSpec
newtype WrappingKeySpec
WrappingKeySpec' :: Text -> WrappingKeySpec
[fromWrappingKeySpec] :: WrappingKeySpec -> Text
pattern WrappingKeySpec_RSA_2048 :: WrappingKeySpec

-- | Contains information about an alias.
--   
--   <i>See:</i> <a>newAliasListEntry</a> smart constructor.
data AliasListEntry
AliasListEntry' :: Maybe POSIX -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> AliasListEntry

-- | Create a value of <a>AliasListEntry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastUpdatedDate:AliasListEntry'</a>,
--   <a>aliasListEntry_lastUpdatedDate</a> - Date and time that the alias
--   was most recently associated with a KMS key in the account and Region.
--   Formatted as Unix time.
--   
--   <a>$sel:creationDate:AliasListEntry'</a>,
--   <a>aliasListEntry_creationDate</a> - Date and time that the alias was
--   most recently created in the account and Region. Formatted as Unix
--   time.
--   
--   <a>$sel:aliasName:AliasListEntry'</a>, <a>aliasListEntry_aliasName</a>
--   - String that contains the alias. This value begins with
--   <tt>alias/</tt>.
--   
--   <a>$sel:targetKeyId:AliasListEntry'</a>,
--   <a>aliasListEntry_targetKeyId</a> - String that contains the key
--   identifier of the KMS key associated with the alias.
--   
--   <a>$sel:aliasArn:AliasListEntry'</a>, <a>aliasListEntry_aliasArn</a> -
--   String that contains the key ARN.
newAliasListEntry :: AliasListEntry

-- | Contains information about each custom key store in the custom key
--   store list.
--   
--   <i>See:</i> <a>newCustomKeyStoresListEntry</a> smart constructor.
data CustomKeyStoresListEntry
CustomKeyStoresListEntry' :: Maybe Text -> Maybe ConnectionStateType -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe ConnectionErrorCodeType -> CustomKeyStoresListEntry

-- | Create a value of <a>CustomKeyStoresListEntry</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:customKeyStoreName:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_customKeyStoreName</a> - The
--   user-specified friendly name for the custom key store.
--   
--   <a>$sel:connectionState:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_connectionState</a> - Indicates whether
--   the custom key store is connected to its CloudHSM cluster.
--   
--   You can create and use KMS keys in your custom key stores only when
--   its connection state is <tt>CONNECTED</tt>.
--   
--   The value is <tt>DISCONNECTED</tt> if the key store has never been
--   connected or you use the DisconnectCustomKeyStore operation to
--   disconnect it. If the value is <tt>CONNECTED</tt> but you are having
--   trouble using the custom key store, make sure that its associated
--   CloudHSM cluster is active and contains at least one active HSM.
--   
--   A value of <tt>FAILED</tt> indicates that an attempt to connect was
--   unsuccessful. The <tt>ConnectionErrorCode</tt> field in the response
--   indicates the cause of the failure. For help resolving a connection
--   failure, see <a>Troubleshooting a Custom Key Store</a> in the <i>Key
--   Management Service Developer Guide</i>.
--   
--   <a>$sel:customKeyStoreId:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_customKeyStoreId</a> - A unique identifier
--   for the custom key store.
--   
--   <a>$sel:trustAnchorCertificate:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_trustAnchorCertificate</a> - The trust
--   anchor certificate of the associated CloudHSM cluster. When you
--   <a>initialize the cluster</a>, you create this certificate and save it
--   in the <tt>customerCA.crt</tt> file.
--   
--   <a>$sel:cloudHsmClusterId:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_cloudHsmClusterId</a> - A unique
--   identifier for the CloudHSM cluster that is associated with the custom
--   key store.
--   
--   <a>$sel:creationDate:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_creationDate</a> - The date and time when
--   the custom key store was created.
--   
--   <a>$sel:connectionErrorCode:CustomKeyStoresListEntry'</a>,
--   <a>customKeyStoresListEntry_connectionErrorCode</a> - Describes the
--   connection error. This field appears in the response only when the
--   <tt>ConnectionState</tt> is <tt>FAILED</tt>. For help resolving these
--   errors, see <a>How to Fix a Connection Failure</a> in <i>Key
--   Management Service Developer Guide</i>.
--   
--   Valid values are:
--   
--   <ul>
--   <li><tt>CLUSTER_NOT_FOUND</tt> - KMS cannot find the CloudHSM cluster
--   with the specified cluster ID.</li>
--   <li><tt>INSUFFICIENT_CLOUDHSM_HSMS</tt> - The associated CloudHSM
--   cluster does not contain any active HSMs. To connect a custom key
--   store to its CloudHSM cluster, the cluster must contain at least one
--   active HSM.</li>
--   <li><tt>INTERNAL_ERROR</tt> - KMS could not complete the request due
--   to an internal error. Retry the request. For
--   <tt>ConnectCustomKeyStore</tt> requests, disconnect the custom key
--   store before trying to connect again.</li>
--   <li><tt>INVALID_CREDENTIALS</tt> - KMS does not have the correct
--   password for the <tt>kmsuser</tt> crypto user in the CloudHSM cluster.
--   Before you can connect your custom key store to its CloudHSM cluster,
--   you must change the <tt>kmsuser</tt> account password and update the
--   key store password value for the custom key store.</li>
--   <li><tt>NETWORK_ERRORS</tt> - Network errors are preventing KMS from
--   connecting to the custom key store.</li>
--   <li><tt>SUBNET_NOT_FOUND</tt> - A subnet in the CloudHSM cluster
--   configuration was deleted. If KMS cannot find all of the subnets in
--   the cluster configuration, attempts to connect the custom key store to
--   the CloudHSM cluster fail. To fix this error, create a cluster from a
--   recent backup and associate it with your custom key store. (This
--   process creates a new cluster configuration with a VPC and private
--   subnets.) For details, see <a>How to Fix a Connection Failure</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_LOCKED_OUT</tt> - The <tt>kmsuser</tt> CU account is
--   locked out of the associated CloudHSM cluster due to too many failed
--   password attempts. Before you can connect your custom key store to its
--   CloudHSM cluster, you must change the <tt>kmsuser</tt> account
--   password and update the key store password value for the custom key
--   store.</li>
--   <li><tt>USER_LOGGED_IN</tt> - The <tt>kmsuser</tt> CU account is
--   logged into the the associated CloudHSM cluster. This prevents KMS
--   from rotating the <tt>kmsuser</tt> account password and logging into
--   the cluster. Before you can connect your custom key store to its
--   CloudHSM cluster, you must log the <tt>kmsuser</tt> CU out of the
--   cluster. If you changed the <tt>kmsuser</tt> password to log into the
--   cluster, you must also and update the key store password value for the
--   custom key store. For help, see <a>How to Log Out and Reconnect</a> in
--   the <i>Key Management Service Developer Guide</i>.</li>
--   <li><tt>USER_NOT_FOUND</tt> - KMS cannot find a <tt>kmsuser</tt> CU
--   account in the associated CloudHSM cluster. Before you can connect
--   your custom key store to its CloudHSM cluster, you must create a
--   <tt>kmsuser</tt> CU account in the cluster, and then update the key
--   store password value for the custom key store.</li>
--   </ul>
newCustomKeyStoresListEntry :: CustomKeyStoresListEntry

-- | Use this structure to allow <a>cryptographic operations</a> in the
--   grant only when the operation request includes the specified
--   <a>encryption context</a>.
--   
--   KMS applies the grant constraints only to cryptographic operations
--   that support an encryption context, that is, all cryptographic
--   operations with a <a>symmetric KMS key</a>. Grant constraints are not
--   applied to operations that do not support an encryption context, such
--   as cryptographic operations with asymmetric KMS keys and management
--   operations, such as DescribeKey or RetireGrant.
--   
--   In a cryptographic operation, the encryption context in the decryption
--   operation must be an exact, case-sensitive match for the keys and
--   values in the encryption context of the encryption operation. Only the
--   order of the pairs can vary.
--   
--   However, in a grant constraint, the key in each key-value pair is not
--   case sensitive, but the value is case sensitive.
--   
--   To avoid confusion, do not use multiple encryption context pairs that
--   differ only by case. To require a fully case-sensitive encryption
--   context, use the <tt>kms:EncryptionContext:</tt> and
--   <tt>kms:EncryptionContextKeys</tt> conditions in an IAM or key policy.
--   For details, see <a>kms:EncryptionContext:</a> in the /<i>Key
--   Management Service Developer Guide</i>/ .
--   
--   <i>See:</i> <a>newGrantConstraints</a> smart constructor.
data GrantConstraints
GrantConstraints' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text Text) -> GrantConstraints

-- | Create a value of <a>GrantConstraints</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:encryptionContextEquals:GrantConstraints'</a>,
--   <a>grantConstraints_encryptionContextEquals</a> - A list of key-value
--   pairs that must match the encryption context in the <a>cryptographic
--   operation</a> request. The grant allows the operation only when the
--   encryption context in the request is the same as the encryption
--   context specified in this constraint.
--   
--   <a>$sel:encryptionContextSubset:GrantConstraints'</a>,
--   <a>grantConstraints_encryptionContextSubset</a> - A list of key-value
--   pairs that must be included in the encryption context of the
--   <a>cryptographic operation</a> request. The grant allows the
--   cryptographic operation only when the encryption context in the
--   request includes the key-value pairs specified in this constraint,
--   although it can include additional key-value pairs.
newGrantConstraints :: GrantConstraints

-- | Contains information about a grant.
--   
--   <i>See:</i> <a>newGrantListEntry</a> smart constructor.
data GrantListEntry
GrantListEntry' :: Maybe GrantConstraints -> Maybe [GrantOperation] -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> GrantListEntry

-- | Create a value of <a>GrantListEntry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:constraints:GrantListEntry'</a>,
--   <a>grantListEntry_constraints</a> - A list of key-value pairs that
--   must be present in the encryption context of certain subsequent
--   operations that the grant allows.
--   
--   <a>$sel:operations:GrantListEntry'</a>,
--   <a>grantListEntry_operations</a> - The list of operations permitted by
--   the grant.
--   
--   <a>$sel:creationDate:GrantListEntry'</a>,
--   <a>grantListEntry_creationDate</a> - The date and time when the grant
--   was created.
--   
--   <a>$sel:name:GrantListEntry'</a>, <a>grantListEntry_name</a> - The
--   friendly name that identifies the grant. If a name was provided in the
--   CreateGrant request, that name is returned. Otherwise this value is
--   null.
--   
--   <a>$sel:granteePrincipal:GrantListEntry'</a>,
--   <a>grantListEntry_granteePrincipal</a> - The identity that gets the
--   permissions in the grant.
--   
--   The <tt>GranteePrincipal</tt> field in the <tt>ListGrants</tt>
--   response usually contains the user or role designated as the grantee
--   principal in the grant. However, when the grantee principal in the
--   grant is an Amazon Web Services service, the <tt>GranteePrincipal</tt>
--   field contains the <a>service principal</a>, which might represent
--   several different grantee principals.
--   
--   <a>$sel:grantId:GrantListEntry'</a>, <a>grantListEntry_grantId</a> -
--   The unique identifier for the grant.
--   
--   <a>$sel:issuingAccount:GrantListEntry'</a>,
--   <a>grantListEntry_issuingAccount</a> - The Amazon Web Services account
--   under which the grant was issued.
--   
--   <a>$sel:retiringPrincipal:GrantListEntry'</a>,
--   <a>grantListEntry_retiringPrincipal</a> - The principal that can
--   retire the grant.
--   
--   <a>$sel:keyId:GrantListEntry'</a>, <a>grantListEntry_keyId</a> - The
--   unique identifier for the KMS key to which the grant applies.
newGrantListEntry :: GrantListEntry

-- | Contains information about each entry in the key list.
--   
--   <i>See:</i> <a>newKeyListEntry</a> smart constructor.
data KeyListEntry
KeyListEntry' :: Maybe Text -> Maybe Text -> KeyListEntry

-- | Create a value of <a>KeyListEntry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyArn:KeyListEntry'</a>, <a>keyListEntry_keyArn</a> - ARN of
--   the key.
--   
--   <a>$sel:keyId:KeyListEntry'</a>, <a>keyListEntry_keyId</a> - Unique
--   identifier of the key.
newKeyListEntry :: KeyListEntry

-- | Contains metadata about a KMS key.
--   
--   This data type is used as a response element for the CreateKey and
--   DescribeKey operations.
--   
--   <i>See:</i> <a>newKeyMetadata</a> smart constructor.
data KeyMetadata
KeyMetadata' :: Maybe [SigningAlgorithmSpec] -> Maybe Natural -> Maybe OriginType -> Maybe KeyManagerType -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe [EncryptionAlgorithmSpec] -> Maybe Text -> Maybe KeyState -> Maybe Text -> Maybe Bool -> Maybe POSIX -> Maybe POSIX -> Maybe ExpirationModelType -> Maybe MultiRegionConfiguration -> Maybe Text -> Maybe POSIX -> Maybe KeySpec -> Maybe CustomerMasterKeySpec -> Maybe KeyUsageType -> Text -> KeyMetadata

-- | Create a value of <a>KeyMetadata</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signingAlgorithms:KeyMetadata'</a>,
--   <a>keyMetadata_signingAlgorithms</a> - The signing algorithms that the
--   KMS key supports. You cannot use the KMS key with other signing
--   algorithms within KMS.
--   
--   This field appears only when the <tt>KeyUsage</tt> of the KMS key is
--   <tt>SIGN_VERIFY</tt>.
--   
--   <a>$sel:pendingDeletionWindowInDays:KeyMetadata'</a>,
--   <a>keyMetadata_pendingDeletionWindowInDays</a> - The waiting period
--   before the primary key in a multi-Region key is deleted. This waiting
--   period begins when the last of its replica keys is deleted. This value
--   is present only when the <tt>KeyState</tt> of the KMS key is
--   <tt>PendingReplicaDeletion</tt>. That indicates that the KMS key is
--   the primary key in a multi-Region key, it is scheduled for deletion,
--   and it still has existing replica keys.
--   
--   When a single-Region KMS key or a multi-Region replica key is
--   scheduled for deletion, its deletion date is displayed in the
--   <tt>DeletionDate</tt> field. However, when the primary key in a
--   multi-Region key is scheduled for deletion, its waiting period doesn't
--   begin until all of its replica keys are deleted. This value displays
--   that waiting period. When the last replica key in the multi-Region key
--   is deleted, the <tt>KeyState</tt> of the scheduled primary key changes
--   from <tt>PendingReplicaDeletion</tt> to <tt>PendingDeletion</tt> and
--   the deletion date appears in the <tt>DeletionDate</tt> field.
--   
--   <a>$sel:origin:KeyMetadata'</a>, <a>keyMetadata_origin</a> - The
--   source of the key material for the KMS key. When this value is
--   <tt>AWS_KMS</tt>, KMS created the key material. When this value is
--   <tt>EXTERNAL</tt>, the key material was imported or the KMS key
--   doesn't have any key material. When this value is
--   <tt>AWS_CLOUDHSM</tt>, the key material was created in the CloudHSM
--   cluster associated with a custom key store.
--   
--   <a>$sel:keyManager:KeyMetadata'</a>, <a>keyMetadata_keyManager</a> -
--   The manager of the KMS key. KMS keys in your Amazon Web Services
--   account are either customer managed or Amazon Web Services managed.
--   For more information about the difference, see <a>KMS keys</a> in the
--   <i>Key Management Service Developer Guide</i>.
--   
--   <a>$sel:aWSAccountId:KeyMetadata'</a>, <a>keyMetadata_aWSAccountId</a>
--   - The twelve-digit account ID of the Amazon Web Services account that
--   owns the KMS key.
--   
--   <a>$sel:multiRegion:KeyMetadata'</a>, <a>keyMetadata_multiRegion</a> -
--   Indicates whether the KMS key is a multi-Region (<tt>True</tt>) or
--   regional (<tt>False</tt>) key. This value is <tt>True</tt> for
--   multi-Region primary and replica keys and <tt>False</tt> for regional
--   KMS keys.
--   
--   For more information about multi-Region keys, see <a>Using
--   multi-Region keys</a> in the <i>Key Management Service Developer
--   Guide</i>.
--   
--   <a>$sel:customKeyStoreId:KeyMetadata'</a>,
--   <a>keyMetadata_customKeyStoreId</a> - A unique identifier for the
--   <a>custom key store</a> that contains the KMS key. This value is
--   present only when the KMS key is created in a custom key store.
--   
--   <a>$sel:encryptionAlgorithms:KeyMetadata'</a>,
--   <a>keyMetadata_encryptionAlgorithms</a> - The encryption algorithms
--   that the KMS key supports. You cannot use the KMS key with other
--   encryption algorithms within KMS.
--   
--   This value is present only when the <tt>KeyUsage</tt> of the KMS key
--   is <tt>ENCRYPT_DECRYPT</tt>.
--   
--   <a>$sel:cloudHsmClusterId:KeyMetadata'</a>,
--   <a>keyMetadata_cloudHsmClusterId</a> - The cluster ID of the CloudHSM
--   cluster that contains the key material for the KMS key. When you
--   create a KMS key in a <a>custom key store</a>, KMS creates the key
--   material for the KMS key in the associated CloudHSM cluster. This
--   value is present only when the KMS key is created in a custom key
--   store.
--   
--   <a>$sel:keyState:KeyMetadata'</a>, <a>keyMetadata_keyState</a> - The
--   current status of the KMS key.
--   
--   For more information about how key state affects the use of a KMS key,
--   see <a>Key state: Effect on your KMS key</a> in the <i>Key Management
--   Service Developer Guide</i>.
--   
--   <a>$sel:arn:KeyMetadata'</a>, <a>keyMetadata_arn</a> - The Amazon
--   Resource Name (ARN) of the KMS key. For examples, see <a>Key
--   Management Service (KMS)</a> in the Example ARNs section of the
--   /Amazon Web Services General Reference/.
--   
--   <a>$sel:enabled:KeyMetadata'</a>, <a>keyMetadata_enabled</a> -
--   Specifies whether the KMS key is enabled. When <tt>KeyState</tt> is
--   <tt>Enabled</tt> this value is true, otherwise it is false.
--   
--   <a>$sel:creationDate:KeyMetadata'</a>, <a>keyMetadata_creationDate</a>
--   - The date and time when the KMS key was created.
--   
--   <a>$sel:validTo:KeyMetadata'</a>, <a>keyMetadata_validTo</a> - The
--   time at which the imported key material expires. When the key material
--   expires, KMS deletes the key material and the KMS key becomes
--   unusable. This value is present only for KMS keys whose
--   <tt>Origin</tt> is <tt>EXTERNAL</tt> and whose
--   <tt>ExpirationModel</tt> is <tt>KEY_MATERIAL_EXPIRES</tt>, otherwise
--   this value is omitted.
--   
--   <a>$sel:expirationModel:KeyMetadata'</a>,
--   <a>keyMetadata_expirationModel</a> - Specifies whether the KMS key's
--   key material expires. This value is present only when <tt>Origin</tt>
--   is <tt>EXTERNAL</tt>, otherwise this value is omitted.
--   
--   <a>$sel:multiRegionConfiguration:KeyMetadata'</a>,
--   <a>keyMetadata_multiRegionConfiguration</a> - Lists the primary and
--   replica keys in same multi-Region key. This field is present only when
--   the value of the <tt>MultiRegion</tt> field is <tt>True</tt>.
--   
--   For more information about any listed KMS key, use the DescribeKey
--   operation.
--   
--   <ul>
--   <li><tt>MultiRegionKeyType</tt> indicates whether the KMS key is a
--   <tt>PRIMARY</tt> or <tt>REPLICA</tt> key.</li>
--   <li><tt>PrimaryKey</tt> displays the key ARN and Region of the primary
--   key. This field displays the current KMS key if it is the primary
--   key.</li>
--   <li><tt>ReplicaKeys</tt> displays the key ARNs and Regions of all
--   replica keys. This field includes the current KMS key if it is a
--   replica key.</li>
--   </ul>
--   
--   <a>$sel:description:KeyMetadata'</a>, <a>keyMetadata_description</a> -
--   The description of the KMS key.
--   
--   <a>$sel:deletionDate:KeyMetadata'</a>, <a>keyMetadata_deletionDate</a>
--   - The date and time after which KMS deletes this KMS key. This value
--   is present only when the KMS key is scheduled for deletion, that is,
--   when its <tt>KeyState</tt> is <tt>PendingDeletion</tt>.
--   
--   When the primary key in a multi-Region key is scheduled for deletion
--   but still has replica keys, its key state is
--   <tt>PendingReplicaDeletion</tt> and the length of its waiting period
--   is displayed in the <tt>PendingDeletionWindowInDays</tt> field.
--   
--   <a>$sel:keySpec:KeyMetadata'</a>, <a>keyMetadata_keySpec</a> -
--   Describes the type of key material in the KMS key.
--   
--   <a>$sel:customerMasterKeySpec:KeyMetadata'</a>,
--   <a>keyMetadata_customerMasterKeySpec</a> - Instead, use the
--   <tt>KeySpec</tt> field.
--   
--   The <tt>KeySpec</tt> and <tt>CustomerMasterKeySpec</tt> fields have
--   the same value. We recommend that you use the <tt>KeySpec</tt> field
--   in your code. However, to avoid breaking changes, KMS will support
--   both fields.
--   
--   <a>$sel:keyUsage:KeyMetadata'</a>, <a>keyMetadata_keyUsage</a> - The
--   <a>cryptographic operations</a> for which you can use the KMS key.
--   
--   <a>$sel:keyId:KeyMetadata'</a>, <a>keyMetadata_keyId</a> - The
--   globally unique identifier for the KMS key.
newKeyMetadata :: Text -> KeyMetadata

-- | <i>See:</i> <a>newListGrantsResponse</a> smart constructor.
data ListGrantsResponse
ListGrantsResponse' :: Maybe Text -> Maybe [GrantListEntry] -> Maybe Bool -> ListGrantsResponse

-- | Create a value of <a>ListGrantsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextMarker:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_nextMarker</a> - When <tt>Truncated</tt> is
--   true, this element is present and contains the value to use for the
--   <tt>Marker</tt> parameter in a subsequent request.
--   
--   <a>$sel:grants:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_grants</a> - A list of grants.
--   
--   <a>$sel:truncated:ListGrantsResponse'</a>,
--   <a>listGrantsResponse_truncated</a> - A flag that indicates whether
--   there are more items in the list. When this value is true, the list in
--   this response is truncated. To get more items, pass the value of the
--   <tt>NextMarker</tt> element in thisresponse to the <tt>Marker</tt>
--   parameter in a subsequent request.
newListGrantsResponse :: ListGrantsResponse

-- | Describes the configuration of this multi-Region key. This field
--   appears only when the KMS key is a primary or replica of a
--   multi-Region key.
--   
--   For more information about any listed KMS key, use the DescribeKey
--   operation.
--   
--   <i>See:</i> <a>newMultiRegionConfiguration</a> smart constructor.
data MultiRegionConfiguration
MultiRegionConfiguration' :: Maybe [MultiRegionKey] -> Maybe MultiRegionKeyType -> Maybe MultiRegionKey -> MultiRegionConfiguration

-- | Create a value of <a>MultiRegionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaKeys:MultiRegionConfiguration'</a>,
--   <a>multiRegionConfiguration_replicaKeys</a> - displays the key ARNs
--   and Regions of all replica keys. This field includes the current KMS
--   key if it is a replica key.
--   
--   <a>$sel:multiRegionKeyType:MultiRegionConfiguration'</a>,
--   <a>multiRegionConfiguration_multiRegionKeyType</a> - Indicates whether
--   the KMS key is a <tt>PRIMARY</tt> or <tt>REPLICA</tt> key.
--   
--   <a>$sel:primaryKey:MultiRegionConfiguration'</a>,
--   <a>multiRegionConfiguration_primaryKey</a> - Displays the key ARN and
--   Region of the primary key. This field includes the current KMS key if
--   it is the primary key.
newMultiRegionConfiguration :: MultiRegionConfiguration

-- | Describes the primary or replica key in a multi-Region key.
--   
--   <i>See:</i> <a>newMultiRegionKey</a> smart constructor.
data MultiRegionKey
MultiRegionKey' :: Maybe Text -> Maybe Text -> MultiRegionKey

-- | Create a value of <a>MultiRegionKey</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:MultiRegionKey'</a>, <a>multiRegionKey_arn</a> - Displays
--   the key ARN of a primary or replica key of a multi-Region key.
--   
--   <a>$sel:region:MultiRegionKey'</a>, <a>multiRegionKey_region</a> -
--   Displays the Amazon Web Services Region of a primary or replica key in
--   a multi-Region key.
newMultiRegionKey :: MultiRegionKey

-- | A key-value pair. A tag consists of a tag key and a tag value. Tag
--   keys and tag values are both required, but tag values can be empty
--   (null) strings.
--   
--   For information about the rules that apply to tag keys and tag values,
--   see <a>User-Defined Tag Restrictions</a> in the <i>Amazon Web Services
--   Billing and Cost Management User Guide</i>.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tagKey:Tag'</a>, <a>tag_tagKey</a> - The key of the tag.
--   
--   <a>$sel:tagValue:Tag'</a>, <a>tag_tagValue</a> - The value of the tag.
newTag :: Text -> Text -> Tag
