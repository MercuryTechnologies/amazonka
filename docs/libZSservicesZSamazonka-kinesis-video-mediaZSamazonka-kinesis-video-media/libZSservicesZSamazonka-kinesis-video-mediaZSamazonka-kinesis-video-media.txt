-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-kinesis-video-mediaZSamazonka-kinesis-video-media
@version 2.0


module Amazonka.KinesisVideoMedia.Types.StartSelectorType
newtype StartSelectorType
StartSelectorType' :: Text -> StartSelectorType
[fromStartSelectorType] :: StartSelectorType -> Text
pattern StartSelectorType_CONTINUATION_TOKEN :: StartSelectorType
pattern StartSelectorType_EARLIEST :: StartSelectorType
pattern StartSelectorType_FRAGMENT_NUMBER :: StartSelectorType
pattern StartSelectorType_NOW :: StartSelectorType
pattern StartSelectorType_PRODUCER_TIMESTAMP :: StartSelectorType
pattern StartSelectorType_SERVER_TIMESTAMP :: StartSelectorType
instance Amazonka.Data.XML.ToXML Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Amazonka.Data.XML.FromXML Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Amazonka.Data.Headers.ToHeader Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Amazonka.Data.Log.ToLog Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Amazonka.Data.ByteString.ToByteString Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Amazonka.Data.Text.ToText Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Amazonka.Data.Text.FromText Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Control.DeepSeq.NFData Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance GHC.Generics.Generic Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance GHC.Classes.Ord Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance GHC.Classes.Eq Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance GHC.Read.Read Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType
instance GHC.Show.Show Amazonka.KinesisVideoMedia.Types.StartSelectorType.StartSelectorType


module Amazonka.KinesisVideoMedia.Types.StartSelector

-- | Identifies the chunk on the Kinesis video stream where you want the
--   <tt>GetMedia</tt> API to start returning media data. You have the
--   following options to identify the starting chunk:
--   
--   <ul>
--   <li>Choose the latest (or oldest) chunk.</li>
--   <li>Identify a specific chunk. You can identify a specific chunk
--   either by providing a fragment number or timestamp (server or
--   producer).</li>
--   <li>Each chunk's metadata includes a continuation token as a Matroska
--   (MKV) tag (<tt>AWS_KINESISVIDEO_CONTINUATION_TOKEN</tt>). If your
--   previous <tt>GetMedia</tt> request terminated, you can use this tag
--   value in your next <tt>GetMedia</tt> request. The API then starts
--   returning chunks starting where the last API ended.</li>
--   </ul>
--   
--   <i>See:</i> <a>newStartSelector</a> smart constructor.
data StartSelector
StartSelector' :: Maybe Text -> Maybe Text -> Maybe POSIX -> StartSelectorType -> StartSelector

-- | Continuation token that Kinesis Video Streams returned in the previous
--   <tt>GetMedia</tt> response. The <tt>GetMedia</tt> API then starts with
--   the chunk identified by the continuation token.
[$sel:continuationToken:StartSelector'] :: StartSelector -> Maybe Text

-- | Specifies the fragment number from where you want the
--   <tt>GetMedia</tt> API to start returning the fragments.
[$sel:afterFragmentNumber:StartSelector'] :: StartSelector -> Maybe Text

-- | A timestamp value. This value is required if you choose the
--   PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP as the
--   <tt>startSelectorType</tt>. The <tt>GetMedia</tt> API then starts with
--   the chunk containing the fragment that has the specified timestamp.
[$sel:startTimestamp:StartSelector'] :: StartSelector -> Maybe POSIX

-- | Identifies the fragment on the Kinesis video stream where you want to
--   start getting the data from.
--   
--   <ul>
--   <li>NOW - Start with the latest chunk on the stream.</li>
--   <li>EARLIEST - Start with earliest available chunk on the stream.</li>
--   <li>FRAGMENT_NUMBER - Start with the chunk after a specific fragment.
--   You must also specify the <tt>AfterFragmentNumber</tt> parameter.</li>
--   <li>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk
--   containing a fragment with the specified producer or server timestamp.
--   You specify the timestamp by adding <tt>StartTimestamp</tt>.</li>
--   <li>CONTINUATION_TOKEN - Read using the specified continuation
--   token.</li>
--   </ul>
--   
--   If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the
--   <tt>startSelectorType</tt>, you don't provide any additional
--   information in the <tt>startSelector</tt>.
[$sel:startSelectorType:StartSelector'] :: StartSelector -> StartSelectorType

-- | Create a value of <a>StartSelector</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:continuationToken:StartSelector'</a>,
--   <a>startSelector_continuationToken</a> - Continuation token that
--   Kinesis Video Streams returned in the previous <tt>GetMedia</tt>
--   response. The <tt>GetMedia</tt> API then starts with the chunk
--   identified by the continuation token.
--   
--   <a>$sel:afterFragmentNumber:StartSelector'</a>,
--   <a>startSelector_afterFragmentNumber</a> - Specifies the fragment
--   number from where you want the <tt>GetMedia</tt> API to start
--   returning the fragments.
--   
--   <a>$sel:startTimestamp:StartSelector'</a>,
--   <a>startSelector_startTimestamp</a> - A timestamp value. This value is
--   required if you choose the PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP
--   as the <tt>startSelectorType</tt>. The <tt>GetMedia</tt> API then
--   starts with the chunk containing the fragment that has the specified
--   timestamp.
--   
--   <a>$sel:startSelectorType:StartSelector'</a>,
--   <a>startSelector_startSelectorType</a> - Identifies the fragment on
--   the Kinesis video stream where you want to start getting the data
--   from.
--   
--   <ul>
--   <li>NOW - Start with the latest chunk on the stream.</li>
--   <li>EARLIEST - Start with earliest available chunk on the stream.</li>
--   <li>FRAGMENT_NUMBER - Start with the chunk after a specific fragment.
--   You must also specify the <tt>AfterFragmentNumber</tt> parameter.</li>
--   <li>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk
--   containing a fragment with the specified producer or server timestamp.
--   You specify the timestamp by adding <tt>StartTimestamp</tt>.</li>
--   <li>CONTINUATION_TOKEN - Read using the specified continuation
--   token.</li>
--   </ul>
--   
--   If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the
--   <tt>startSelectorType</tt>, you don't provide any additional
--   information in the <tt>startSelector</tt>.
newStartSelector :: StartSelectorType -> StartSelector

-- | Continuation token that Kinesis Video Streams returned in the previous
--   <tt>GetMedia</tt> response. The <tt>GetMedia</tt> API then starts with
--   the chunk identified by the continuation token.
startSelector_continuationToken :: Lens' StartSelector (Maybe Text)

-- | Specifies the fragment number from where you want the
--   <tt>GetMedia</tt> API to start returning the fragments.
startSelector_afterFragmentNumber :: Lens' StartSelector (Maybe Text)

-- | A timestamp value. This value is required if you choose the
--   PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP as the
--   <tt>startSelectorType</tt>. The <tt>GetMedia</tt> API then starts with
--   the chunk containing the fragment that has the specified timestamp.
startSelector_startTimestamp :: Lens' StartSelector (Maybe UTCTime)

-- | Identifies the fragment on the Kinesis video stream where you want to
--   start getting the data from.
--   
--   <ul>
--   <li>NOW - Start with the latest chunk on the stream.</li>
--   <li>EARLIEST - Start with earliest available chunk on the stream.</li>
--   <li>FRAGMENT_NUMBER - Start with the chunk after a specific fragment.
--   You must also specify the <tt>AfterFragmentNumber</tt> parameter.</li>
--   <li>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk
--   containing a fragment with the specified producer or server timestamp.
--   You specify the timestamp by adding <tt>StartTimestamp</tt>.</li>
--   <li>CONTINUATION_TOKEN - Read using the specified continuation
--   token.</li>
--   </ul>
--   
--   If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the
--   <tt>startSelectorType</tt>, you don't provide any additional
--   information in the <tt>startSelector</tt>.
startSelector_startSelectorType :: Lens' StartSelector StartSelectorType
instance GHC.Generics.Generic Amazonka.KinesisVideoMedia.Types.StartSelector.StartSelector
instance GHC.Show.Show Amazonka.KinesisVideoMedia.Types.StartSelector.StartSelector
instance GHC.Read.Read Amazonka.KinesisVideoMedia.Types.StartSelector.StartSelector
instance GHC.Classes.Eq Amazonka.KinesisVideoMedia.Types.StartSelector.StartSelector
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideoMedia.Types.StartSelector.StartSelector
instance Control.DeepSeq.NFData Amazonka.KinesisVideoMedia.Types.StartSelector.StartSelector
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideoMedia.Types.StartSelector.StartSelector


module Amazonka.KinesisVideoMedia.Types

-- | API version <tt>2017-09-30</tt> of the Amazon Kinesis Video Streams
--   Media SDK configuration.
defaultService :: Service

-- | Kinesis Video Streams has throttled the request because you have
--   exceeded the limit of allowed client connections.
_ConnectionLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The value for this input parameter is invalid.
_InvalidArgumentException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Status Code: 403, The caller is not authorized to perform an operation
--   on the given stream, or the token has expired.
_NotAuthorizedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Kinesis Video Streams has throttled the request because you have
--   exceeded the limit of allowed client calls. Try making the call later.
_ClientLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Status Code: 400, Caller used wrong endpoint to write data to a
--   stream. On receiving such an exception, the user must call
--   <tt>GetDataEndpoint</tt> with <tt>AccessMode</tt> set to "READ" and
--   use the endpoint Kinesis Video returns in the next <tt>GetMedia</tt>
--   call.
_InvalidEndpointException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Status Code: 404, The stream with the given name does not exist.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError
newtype StartSelectorType
StartSelectorType' :: Text -> StartSelectorType
[fromStartSelectorType] :: StartSelectorType -> Text
pattern StartSelectorType_CONTINUATION_TOKEN :: StartSelectorType
pattern StartSelectorType_EARLIEST :: StartSelectorType
pattern StartSelectorType_FRAGMENT_NUMBER :: StartSelectorType
pattern StartSelectorType_NOW :: StartSelectorType
pattern StartSelectorType_PRODUCER_TIMESTAMP :: StartSelectorType
pattern StartSelectorType_SERVER_TIMESTAMP :: StartSelectorType

-- | Identifies the chunk on the Kinesis video stream where you want the
--   <tt>GetMedia</tt> API to start returning media data. You have the
--   following options to identify the starting chunk:
--   
--   <ul>
--   <li>Choose the latest (or oldest) chunk.</li>
--   <li>Identify a specific chunk. You can identify a specific chunk
--   either by providing a fragment number or timestamp (server or
--   producer).</li>
--   <li>Each chunk's metadata includes a continuation token as a Matroska
--   (MKV) tag (<tt>AWS_KINESISVIDEO_CONTINUATION_TOKEN</tt>). If your
--   previous <tt>GetMedia</tt> request terminated, you can use this tag
--   value in your next <tt>GetMedia</tt> request. The API then starts
--   returning chunks starting where the last API ended.</li>
--   </ul>
--   
--   <i>See:</i> <a>newStartSelector</a> smart constructor.
data StartSelector
StartSelector' :: Maybe Text -> Maybe Text -> Maybe POSIX -> StartSelectorType -> StartSelector

-- | Continuation token that Kinesis Video Streams returned in the previous
--   <tt>GetMedia</tt> response. The <tt>GetMedia</tt> API then starts with
--   the chunk identified by the continuation token.
[$sel:continuationToken:StartSelector'] :: StartSelector -> Maybe Text

-- | Specifies the fragment number from where you want the
--   <tt>GetMedia</tt> API to start returning the fragments.
[$sel:afterFragmentNumber:StartSelector'] :: StartSelector -> Maybe Text

-- | A timestamp value. This value is required if you choose the
--   PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP as the
--   <tt>startSelectorType</tt>. The <tt>GetMedia</tt> API then starts with
--   the chunk containing the fragment that has the specified timestamp.
[$sel:startTimestamp:StartSelector'] :: StartSelector -> Maybe POSIX

-- | Identifies the fragment on the Kinesis video stream where you want to
--   start getting the data from.
--   
--   <ul>
--   <li>NOW - Start with the latest chunk on the stream.</li>
--   <li>EARLIEST - Start with earliest available chunk on the stream.</li>
--   <li>FRAGMENT_NUMBER - Start with the chunk after a specific fragment.
--   You must also specify the <tt>AfterFragmentNumber</tt> parameter.</li>
--   <li>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk
--   containing a fragment with the specified producer or server timestamp.
--   You specify the timestamp by adding <tt>StartTimestamp</tt>.</li>
--   <li>CONTINUATION_TOKEN - Read using the specified continuation
--   token.</li>
--   </ul>
--   
--   If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the
--   <tt>startSelectorType</tt>, you don't provide any additional
--   information in the <tt>startSelector</tt>.
[$sel:startSelectorType:StartSelector'] :: StartSelector -> StartSelectorType

-- | Create a value of <a>StartSelector</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:continuationToken:StartSelector'</a>,
--   <a>startSelector_continuationToken</a> - Continuation token that
--   Kinesis Video Streams returned in the previous <tt>GetMedia</tt>
--   response. The <tt>GetMedia</tt> API then starts with the chunk
--   identified by the continuation token.
--   
--   <a>$sel:afterFragmentNumber:StartSelector'</a>,
--   <a>startSelector_afterFragmentNumber</a> - Specifies the fragment
--   number from where you want the <tt>GetMedia</tt> API to start
--   returning the fragments.
--   
--   <a>$sel:startTimestamp:StartSelector'</a>,
--   <a>startSelector_startTimestamp</a> - A timestamp value. This value is
--   required if you choose the PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP
--   as the <tt>startSelectorType</tt>. The <tt>GetMedia</tt> API then
--   starts with the chunk containing the fragment that has the specified
--   timestamp.
--   
--   <a>$sel:startSelectorType:StartSelector'</a>,
--   <a>startSelector_startSelectorType</a> - Identifies the fragment on
--   the Kinesis video stream where you want to start getting the data
--   from.
--   
--   <ul>
--   <li>NOW - Start with the latest chunk on the stream.</li>
--   <li>EARLIEST - Start with earliest available chunk on the stream.</li>
--   <li>FRAGMENT_NUMBER - Start with the chunk after a specific fragment.
--   You must also specify the <tt>AfterFragmentNumber</tt> parameter.</li>
--   <li>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk
--   containing a fragment with the specified producer or server timestamp.
--   You specify the timestamp by adding <tt>StartTimestamp</tt>.</li>
--   <li>CONTINUATION_TOKEN - Read using the specified continuation
--   token.</li>
--   </ul>
--   
--   If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the
--   <tt>startSelectorType</tt>, you don't provide any additional
--   information in the <tt>startSelector</tt>.
newStartSelector :: StartSelectorType -> StartSelector

-- | Continuation token that Kinesis Video Streams returned in the previous
--   <tt>GetMedia</tt> response. The <tt>GetMedia</tt> API then starts with
--   the chunk identified by the continuation token.
startSelector_continuationToken :: Lens' StartSelector (Maybe Text)

-- | Specifies the fragment number from where you want the
--   <tt>GetMedia</tt> API to start returning the fragments.
startSelector_afterFragmentNumber :: Lens' StartSelector (Maybe Text)

-- | A timestamp value. This value is required if you choose the
--   PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP as the
--   <tt>startSelectorType</tt>. The <tt>GetMedia</tt> API then starts with
--   the chunk containing the fragment that has the specified timestamp.
startSelector_startTimestamp :: Lens' StartSelector (Maybe UTCTime)

-- | Identifies the fragment on the Kinesis video stream where you want to
--   start getting the data from.
--   
--   <ul>
--   <li>NOW - Start with the latest chunk on the stream.</li>
--   <li>EARLIEST - Start with earliest available chunk on the stream.</li>
--   <li>FRAGMENT_NUMBER - Start with the chunk after a specific fragment.
--   You must also specify the <tt>AfterFragmentNumber</tt> parameter.</li>
--   <li>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk
--   containing a fragment with the specified producer or server timestamp.
--   You specify the timestamp by adding <tt>StartTimestamp</tt>.</li>
--   <li>CONTINUATION_TOKEN - Read using the specified continuation
--   token.</li>
--   </ul>
--   
--   If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the
--   <tt>startSelectorType</tt>, you don't provide any additional
--   information in the <tt>startSelector</tt>.
startSelector_startSelectorType :: Lens' StartSelector StartSelectorType


-- | Use this API to retrieve media content from a Kinesis video stream. In
--   the request, you identify the stream name or stream Amazon Resource
--   Name (ARN), and the starting chunk. Kinesis Video Streams then returns
--   a stream of chunks in order by fragment number.
--   
--   You must first call the <tt>GetDataEndpoint</tt> API to get an
--   endpoint. Then send the <tt>GetMedia</tt> requests to this endpoint
--   using the <a>--endpoint-url parameter</a>.
--   
--   When you put media data (fragments) on a stream, Kinesis Video Streams
--   stores each incoming fragment and related metadata in what is called a
--   "chunk." For more information, see <a>PutMedia</a>. The
--   <tt>GetMedia</tt> API returns a stream of these chunks starting from
--   the chunk that you specify in the request.
--   
--   The following limits apply when using the <tt>GetMedia</tt> API:
--   
--   <ul>
--   <li>A client can call <tt>GetMedia</tt> up to five times per second
--   per stream.</li>
--   <li>Kinesis Video Streams sends media data at a rate of up to 25
--   megabytes per second (or 200 megabits per second) during a
--   <tt>GetMedia</tt> session.</li>
--   </ul>
--   
--   If an error is thrown after invoking a Kinesis Video Streams media
--   API, in addition to the HTTP status code and the response body, it
--   includes the following pieces of information:
--   
--   <ul>
--   <li><tt>x-amz-ErrorType</tt> HTTP header – contains a more specific
--   error type in addition to what the HTTP status code provides.</li>
--   <li><tt>x-amz-RequestId</tt> HTTP header – if you want to report an
--   issue to AWS, the support team can better diagnose the problem if
--   given the Request Id.</li>
--   </ul>
--   
--   Both the HTTP status code and the ErrorType header can be utilized to
--   make programmatic decisions about whether errors are retry-able and
--   under what conditions, as well as provide information on what actions
--   the client programmer might need to take in order to successfully try
--   again.
--   
--   For more information, see the <b>Errors</b> section at the bottom of
--   this topic, as well as <a>Common Errors</a>.
module Amazonka.KinesisVideoMedia.GetMedia

-- | <i>See:</i> <a>newGetMedia</a> smart constructor.
data GetMedia
GetMedia' :: Maybe Text -> Maybe Text -> StartSelector -> GetMedia

-- | The ARN of the stream from where you want to get the media content. If
--   you don't specify the <tt>streamARN</tt>, you must specify the
--   <tt>streamName</tt>.
[$sel:streamARN:GetMedia'] :: GetMedia -> Maybe Text

-- | The Kinesis video stream name from where you want to get the media
--   content. If you don't specify the <tt>streamName</tt>, you must
--   specify the <tt>streamARN</tt>.
[$sel:streamName:GetMedia'] :: GetMedia -> Maybe Text

-- | Identifies the starting chunk to get from the specified stream.
[$sel:startSelector:GetMedia'] :: GetMedia -> StartSelector

-- | Create a value of <a>GetMedia</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:GetMedia'</a>, <a>getMedia_streamARN</a> - The ARN
--   of the stream from where you want to get the media content. If you
--   don't specify the <tt>streamARN</tt>, you must specify the
--   <tt>streamName</tt>.
--   
--   <a>$sel:streamName:GetMedia'</a>, <a>getMedia_streamName</a> - The
--   Kinesis video stream name from where you want to get the media
--   content. If you don't specify the <tt>streamName</tt>, you must
--   specify the <tt>streamARN</tt>.
--   
--   <a>$sel:startSelector:GetMedia'</a>, <a>getMedia_startSelector</a> -
--   Identifies the starting chunk to get from the specified stream.
newGetMedia :: StartSelector -> GetMedia

-- | The ARN of the stream from where you want to get the media content. If
--   you don't specify the <tt>streamARN</tt>, you must specify the
--   <tt>streamName</tt>.
getMedia_streamARN :: Lens' GetMedia (Maybe Text)

-- | The Kinesis video stream name from where you want to get the media
--   content. If you don't specify the <tt>streamName</tt>, you must
--   specify the <tt>streamARN</tt>.
getMedia_streamName :: Lens' GetMedia (Maybe Text)

-- | Identifies the starting chunk to get from the specified stream.
getMedia_startSelector :: Lens' GetMedia StartSelector

-- | <i>See:</i> <a>newGetMediaResponse</a> smart constructor.
data GetMediaResponse
GetMediaResponse' :: Maybe Text -> Int -> ResponseBody -> GetMediaResponse

-- | The content type of the requested media.
[$sel:contentType:GetMediaResponse'] :: GetMediaResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetMediaResponse'] :: GetMediaResponse -> Int

-- | The payload Kinesis Video Streams returns is a sequence of chunks from
--   the specified stream. For information about the chunks, see . The
--   chunks that Kinesis Video Streams returns in the <tt>GetMedia</tt>
--   call also include the following additional Matroska (MKV) tags:
--   
--   <ul>
--   <li>AWS_KINESISVIDEO_CONTINUATION_TOKEN (UTF-8 string) - In the event
--   your <tt>GetMedia</tt> call terminates, you can use this continuation
--   token in your next request to get the next chunk where the last
--   request terminated.</li>
--   <li>AWS_KINESISVIDEO_MILLIS_BEHIND_NOW (UTF-8 string) - Client
--   applications can use this tag value to determine how far behind the
--   chunk returned in the response is from the latest chunk on the
--   stream.</li>
--   <li>AWS_KINESISVIDEO_FRAGMENT_NUMBER - Fragment number returned in the
--   chunk.</li>
--   <li>AWS_KINESISVIDEO_SERVER_TIMESTAMP - Server timestamp of the
--   fragment.</li>
--   <li>AWS_KINESISVIDEO_PRODUCER_TIMESTAMP - Producer timestamp of the
--   fragment.</li>
--   </ul>
--   
--   The following tags will be present if an error occurs:
--   
--   <ul>
--   <li>AWS_KINESISVIDEO_ERROR_CODE - String description of an error that
--   caused GetMedia to stop.</li>
--   <li>AWS_KINESISVIDEO_ERROR_ID: Integer code of the error.</li>
--   </ul>
--   
--   The error codes are as follows:
--   
--   <ul>
--   <li>3002 - Error writing to the stream</li>
--   <li>4000 - Requested fragment is not found</li>
--   <li>4500 - Access denied for the stream's KMS key</li>
--   <li>4501 - Stream's KMS key is disabled</li>
--   <li>4502 - Validation error on the stream's KMS key</li>
--   <li>4503 - KMS key specified in the stream is unavailable</li>
--   <li>4504 - Invalid usage of the KMS key specified in the stream</li>
--   <li>4505 - Invalid state of the KMS key specified in the stream</li>
--   <li>4506 - Unable to find the KMS key specified in the stream</li>
--   <li>5000 - Internal error</li>
--   </ul>
[$sel:payload:GetMediaResponse'] :: GetMediaResponse -> ResponseBody

-- | Create a value of <a>GetMediaResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:contentType:GetMediaResponse'</a>,
--   <a>getMediaResponse_contentType</a> - The content type of the
--   requested media.
--   
--   <a>$sel:httpStatus:GetMediaResponse'</a>,
--   <a>getMediaResponse_httpStatus</a> - The response's http status code.
--   
--   <a>$sel:payload:GetMediaResponse'</a>, <a>getMediaResponse_payload</a>
--   - The payload Kinesis Video Streams returns is a sequence of chunks
--   from the specified stream. For information about the chunks, see . The
--   chunks that Kinesis Video Streams returns in the <tt>GetMedia</tt>
--   call also include the following additional Matroska (MKV) tags:
--   
--   <ul>
--   <li>AWS_KINESISVIDEO_CONTINUATION_TOKEN (UTF-8 string) - In the event
--   your <tt>GetMedia</tt> call terminates, you can use this continuation
--   token in your next request to get the next chunk where the last
--   request terminated.</li>
--   <li>AWS_KINESISVIDEO_MILLIS_BEHIND_NOW (UTF-8 string) - Client
--   applications can use this tag value to determine how far behind the
--   chunk returned in the response is from the latest chunk on the
--   stream.</li>
--   <li>AWS_KINESISVIDEO_FRAGMENT_NUMBER - Fragment number returned in the
--   chunk.</li>
--   <li>AWS_KINESISVIDEO_SERVER_TIMESTAMP - Server timestamp of the
--   fragment.</li>
--   <li>AWS_KINESISVIDEO_PRODUCER_TIMESTAMP - Producer timestamp of the
--   fragment.</li>
--   </ul>
--   
--   The following tags will be present if an error occurs:
--   
--   <ul>
--   <li>AWS_KINESISVIDEO_ERROR_CODE - String description of an error that
--   caused GetMedia to stop.</li>
--   <li>AWS_KINESISVIDEO_ERROR_ID: Integer code of the error.</li>
--   </ul>
--   
--   The error codes are as follows:
--   
--   <ul>
--   <li>3002 - Error writing to the stream</li>
--   <li>4000 - Requested fragment is not found</li>
--   <li>4500 - Access denied for the stream's KMS key</li>
--   <li>4501 - Stream's KMS key is disabled</li>
--   <li>4502 - Validation error on the stream's KMS key</li>
--   <li>4503 - KMS key specified in the stream is unavailable</li>
--   <li>4504 - Invalid usage of the KMS key specified in the stream</li>
--   <li>4505 - Invalid state of the KMS key specified in the stream</li>
--   <li>4506 - Unable to find the KMS key specified in the stream</li>
--   <li>5000 - Internal error</li>
--   </ul>
newGetMediaResponse :: Int -> ResponseBody -> GetMediaResponse

-- | The content type of the requested media.
getMediaResponse_contentType :: Lens' GetMediaResponse (Maybe Text)

-- | The response's http status code.
getMediaResponse_httpStatus :: Lens' GetMediaResponse Int

-- | The payload Kinesis Video Streams returns is a sequence of chunks from
--   the specified stream. For information about the chunks, see . The
--   chunks that Kinesis Video Streams returns in the <tt>GetMedia</tt>
--   call also include the following additional Matroska (MKV) tags:
--   
--   <ul>
--   <li>AWS_KINESISVIDEO_CONTINUATION_TOKEN (UTF-8 string) - In the event
--   your <tt>GetMedia</tt> call terminates, you can use this continuation
--   token in your next request to get the next chunk where the last
--   request terminated.</li>
--   <li>AWS_KINESISVIDEO_MILLIS_BEHIND_NOW (UTF-8 string) - Client
--   applications can use this tag value to determine how far behind the
--   chunk returned in the response is from the latest chunk on the
--   stream.</li>
--   <li>AWS_KINESISVIDEO_FRAGMENT_NUMBER - Fragment number returned in the
--   chunk.</li>
--   <li>AWS_KINESISVIDEO_SERVER_TIMESTAMP - Server timestamp of the
--   fragment.</li>
--   <li>AWS_KINESISVIDEO_PRODUCER_TIMESTAMP - Producer timestamp of the
--   fragment.</li>
--   </ul>
--   
--   The following tags will be present if an error occurs:
--   
--   <ul>
--   <li>AWS_KINESISVIDEO_ERROR_CODE - String description of an error that
--   caused GetMedia to stop.</li>
--   <li>AWS_KINESISVIDEO_ERROR_ID: Integer code of the error.</li>
--   </ul>
--   
--   The error codes are as follows:
--   
--   <ul>
--   <li>3002 - Error writing to the stream</li>
--   <li>4000 - Requested fragment is not found</li>
--   <li>4500 - Access denied for the stream's KMS key</li>
--   <li>4501 - Stream's KMS key is disabled</li>
--   <li>4502 - Validation error on the stream's KMS key</li>
--   <li>4503 - KMS key specified in the stream is unavailable</li>
--   <li>4504 - Invalid usage of the KMS key specified in the stream</li>
--   <li>4505 - Invalid state of the KMS key specified in the stream</li>
--   <li>4506 - Unable to find the KMS key specified in the stream</li>
--   <li>5000 - Internal error</li>
--   </ul>
getMediaResponse_payload :: Lens' GetMediaResponse ResponseBody
instance GHC.Generics.Generic Amazonka.KinesisVideoMedia.GetMedia.GetMedia
instance GHC.Show.Show Amazonka.KinesisVideoMedia.GetMedia.GetMedia
instance GHC.Read.Read Amazonka.KinesisVideoMedia.GetMedia.GetMedia
instance GHC.Classes.Eq Amazonka.KinesisVideoMedia.GetMedia.GetMedia
instance GHC.Generics.Generic Amazonka.KinesisVideoMedia.GetMedia.GetMediaResponse
instance GHC.Show.Show Amazonka.KinesisVideoMedia.GetMedia.GetMediaResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideoMedia.GetMedia.GetMedia
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideoMedia.GetMedia.GetMedia
instance Control.DeepSeq.NFData Amazonka.KinesisVideoMedia.GetMedia.GetMedia
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideoMedia.GetMedia.GetMedia
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideoMedia.GetMedia.GetMedia
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideoMedia.GetMedia.GetMedia
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideoMedia.GetMedia.GetMedia


module Amazonka.KinesisVideoMedia.Lens

-- | The ARN of the stream from where you want to get the media content. If
--   you don't specify the <tt>streamARN</tt>, you must specify the
--   <tt>streamName</tt>.
getMedia_streamARN :: Lens' GetMedia (Maybe Text)

-- | The Kinesis video stream name from where you want to get the media
--   content. If you don't specify the <tt>streamName</tt>, you must
--   specify the <tt>streamARN</tt>.
getMedia_streamName :: Lens' GetMedia (Maybe Text)

-- | Identifies the starting chunk to get from the specified stream.
getMedia_startSelector :: Lens' GetMedia StartSelector

-- | The content type of the requested media.
getMediaResponse_contentType :: Lens' GetMediaResponse (Maybe Text)

-- | The response's http status code.
getMediaResponse_httpStatus :: Lens' GetMediaResponse Int

-- | The payload Kinesis Video Streams returns is a sequence of chunks from
--   the specified stream. For information about the chunks, see . The
--   chunks that Kinesis Video Streams returns in the <tt>GetMedia</tt>
--   call also include the following additional Matroska (MKV) tags:
--   
--   <ul>
--   <li>AWS_KINESISVIDEO_CONTINUATION_TOKEN (UTF-8 string) - In the event
--   your <tt>GetMedia</tt> call terminates, you can use this continuation
--   token in your next request to get the next chunk where the last
--   request terminated.</li>
--   <li>AWS_KINESISVIDEO_MILLIS_BEHIND_NOW (UTF-8 string) - Client
--   applications can use this tag value to determine how far behind the
--   chunk returned in the response is from the latest chunk on the
--   stream.</li>
--   <li>AWS_KINESISVIDEO_FRAGMENT_NUMBER - Fragment number returned in the
--   chunk.</li>
--   <li>AWS_KINESISVIDEO_SERVER_TIMESTAMP - Server timestamp of the
--   fragment.</li>
--   <li>AWS_KINESISVIDEO_PRODUCER_TIMESTAMP - Producer timestamp of the
--   fragment.</li>
--   </ul>
--   
--   The following tags will be present if an error occurs:
--   
--   <ul>
--   <li>AWS_KINESISVIDEO_ERROR_CODE - String description of an error that
--   caused GetMedia to stop.</li>
--   <li>AWS_KINESISVIDEO_ERROR_ID: Integer code of the error.</li>
--   </ul>
--   
--   The error codes are as follows:
--   
--   <ul>
--   <li>3002 - Error writing to the stream</li>
--   <li>4000 - Requested fragment is not found</li>
--   <li>4500 - Access denied for the stream's KMS key</li>
--   <li>4501 - Stream's KMS key is disabled</li>
--   <li>4502 - Validation error on the stream's KMS key</li>
--   <li>4503 - KMS key specified in the stream is unavailable</li>
--   <li>4504 - Invalid usage of the KMS key specified in the stream</li>
--   <li>4505 - Invalid state of the KMS key specified in the stream</li>
--   <li>4506 - Unable to find the KMS key specified in the stream</li>
--   <li>5000 - Internal error</li>
--   </ul>
getMediaResponse_payload :: Lens' GetMediaResponse ResponseBody

-- | Continuation token that Kinesis Video Streams returned in the previous
--   <tt>GetMedia</tt> response. The <tt>GetMedia</tt> API then starts with
--   the chunk identified by the continuation token.
startSelector_continuationToken :: Lens' StartSelector (Maybe Text)

-- | Specifies the fragment number from where you want the
--   <tt>GetMedia</tt> API to start returning the fragments.
startSelector_afterFragmentNumber :: Lens' StartSelector (Maybe Text)

-- | A timestamp value. This value is required if you choose the
--   PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP as the
--   <tt>startSelectorType</tt>. The <tt>GetMedia</tt> API then starts with
--   the chunk containing the fragment that has the specified timestamp.
startSelector_startTimestamp :: Lens' StartSelector (Maybe UTCTime)

-- | Identifies the fragment on the Kinesis video stream where you want to
--   start getting the data from.
--   
--   <ul>
--   <li>NOW - Start with the latest chunk on the stream.</li>
--   <li>EARLIEST - Start with earliest available chunk on the stream.</li>
--   <li>FRAGMENT_NUMBER - Start with the chunk after a specific fragment.
--   You must also specify the <tt>AfterFragmentNumber</tt> parameter.</li>
--   <li>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk
--   containing a fragment with the specified producer or server timestamp.
--   You specify the timestamp by adding <tt>StartTimestamp</tt>.</li>
--   <li>CONTINUATION_TOKEN - Read using the specified continuation
--   token.</li>
--   </ul>
--   
--   If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the
--   <tt>startSelectorType</tt>, you don't provide any additional
--   information in the <tt>startSelector</tt>.
startSelector_startSelectorType :: Lens' StartSelector StartSelectorType


module Amazonka.KinesisVideoMedia.Waiters


-- | Derived from API version <tt>2017-09-30</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
module Amazonka.KinesisVideoMedia

-- | API version <tt>2017-09-30</tt> of the Amazon Kinesis Video Streams
--   Media SDK configuration.
defaultService :: Service

-- | Kinesis Video Streams has throttled the request because you have
--   exceeded the limit of allowed client connections.
_ConnectionLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The value for this input parameter is invalid.
_InvalidArgumentException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Status Code: 403, The caller is not authorized to perform an operation
--   on the given stream, or the token has expired.
_NotAuthorizedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Kinesis Video Streams has throttled the request because you have
--   exceeded the limit of allowed client calls. Try making the call later.
_ClientLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Status Code: 400, Caller used wrong endpoint to write data to a
--   stream. On receiving such an exception, the user must call
--   <tt>GetDataEndpoint</tt> with <tt>AccessMode</tt> set to "READ" and
--   use the endpoint Kinesis Video returns in the next <tt>GetMedia</tt>
--   call.
_InvalidEndpointException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Status Code: 404, The stream with the given name does not exist.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newGetMedia</a> smart constructor.
data GetMedia
GetMedia' :: Maybe Text -> Maybe Text -> StartSelector -> GetMedia

-- | Create a value of <a>GetMedia</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:GetMedia'</a>, <a>getMedia_streamARN</a> - The ARN
--   of the stream from where you want to get the media content. If you
--   don't specify the <tt>streamARN</tt>, you must specify the
--   <tt>streamName</tt>.
--   
--   <a>$sel:streamName:GetMedia'</a>, <a>getMedia_streamName</a> - The
--   Kinesis video stream name from where you want to get the media
--   content. If you don't specify the <tt>streamName</tt>, you must
--   specify the <tt>streamARN</tt>.
--   
--   <a>$sel:startSelector:GetMedia'</a>, <a>getMedia_startSelector</a> -
--   Identifies the starting chunk to get from the specified stream.
newGetMedia :: StartSelector -> GetMedia

-- | <i>See:</i> <a>newGetMediaResponse</a> smart constructor.
data GetMediaResponse
GetMediaResponse' :: Maybe Text -> Int -> ResponseBody -> GetMediaResponse

-- | Create a value of <a>GetMediaResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:contentType:GetMediaResponse'</a>,
--   <a>getMediaResponse_contentType</a> - The content type of the
--   requested media.
--   
--   <a>$sel:httpStatus:GetMediaResponse'</a>,
--   <a>getMediaResponse_httpStatus</a> - The response's http status code.
--   
--   <a>$sel:payload:GetMediaResponse'</a>, <a>getMediaResponse_payload</a>
--   - The payload Kinesis Video Streams returns is a sequence of chunks
--   from the specified stream. For information about the chunks, see . The
--   chunks that Kinesis Video Streams returns in the <tt>GetMedia</tt>
--   call also include the following additional Matroska (MKV) tags:
--   
--   <ul>
--   <li>AWS_KINESISVIDEO_CONTINUATION_TOKEN (UTF-8 string) - In the event
--   your <tt>GetMedia</tt> call terminates, you can use this continuation
--   token in your next request to get the next chunk where the last
--   request terminated.</li>
--   <li>AWS_KINESISVIDEO_MILLIS_BEHIND_NOW (UTF-8 string) - Client
--   applications can use this tag value to determine how far behind the
--   chunk returned in the response is from the latest chunk on the
--   stream.</li>
--   <li>AWS_KINESISVIDEO_FRAGMENT_NUMBER - Fragment number returned in the
--   chunk.</li>
--   <li>AWS_KINESISVIDEO_SERVER_TIMESTAMP - Server timestamp of the
--   fragment.</li>
--   <li>AWS_KINESISVIDEO_PRODUCER_TIMESTAMP - Producer timestamp of the
--   fragment.</li>
--   </ul>
--   
--   The following tags will be present if an error occurs:
--   
--   <ul>
--   <li>AWS_KINESISVIDEO_ERROR_CODE - String description of an error that
--   caused GetMedia to stop.</li>
--   <li>AWS_KINESISVIDEO_ERROR_ID: Integer code of the error.</li>
--   </ul>
--   
--   The error codes are as follows:
--   
--   <ul>
--   <li>3002 - Error writing to the stream</li>
--   <li>4000 - Requested fragment is not found</li>
--   <li>4500 - Access denied for the stream's KMS key</li>
--   <li>4501 - Stream's KMS key is disabled</li>
--   <li>4502 - Validation error on the stream's KMS key</li>
--   <li>4503 - KMS key specified in the stream is unavailable</li>
--   <li>4504 - Invalid usage of the KMS key specified in the stream</li>
--   <li>4505 - Invalid state of the KMS key specified in the stream</li>
--   <li>4506 - Unable to find the KMS key specified in the stream</li>
--   <li>5000 - Internal error</li>
--   </ul>
newGetMediaResponse :: Int -> ResponseBody -> GetMediaResponse
newtype StartSelectorType
StartSelectorType' :: Text -> StartSelectorType
[fromStartSelectorType] :: StartSelectorType -> Text
pattern StartSelectorType_CONTINUATION_TOKEN :: StartSelectorType
pattern StartSelectorType_EARLIEST :: StartSelectorType
pattern StartSelectorType_FRAGMENT_NUMBER :: StartSelectorType
pattern StartSelectorType_NOW :: StartSelectorType
pattern StartSelectorType_PRODUCER_TIMESTAMP :: StartSelectorType
pattern StartSelectorType_SERVER_TIMESTAMP :: StartSelectorType

-- | Identifies the chunk on the Kinesis video stream where you want the
--   <tt>GetMedia</tt> API to start returning media data. You have the
--   following options to identify the starting chunk:
--   
--   <ul>
--   <li>Choose the latest (or oldest) chunk.</li>
--   <li>Identify a specific chunk. You can identify a specific chunk
--   either by providing a fragment number or timestamp (server or
--   producer).</li>
--   <li>Each chunk's metadata includes a continuation token as a Matroska
--   (MKV) tag (<tt>AWS_KINESISVIDEO_CONTINUATION_TOKEN</tt>). If your
--   previous <tt>GetMedia</tt> request terminated, you can use this tag
--   value in your next <tt>GetMedia</tt> request. The API then starts
--   returning chunks starting where the last API ended.</li>
--   </ul>
--   
--   <i>See:</i> <a>newStartSelector</a> smart constructor.
data StartSelector
StartSelector' :: Maybe Text -> Maybe Text -> Maybe POSIX -> StartSelectorType -> StartSelector

-- | Create a value of <a>StartSelector</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:continuationToken:StartSelector'</a>,
--   <a>startSelector_continuationToken</a> - Continuation token that
--   Kinesis Video Streams returned in the previous <tt>GetMedia</tt>
--   response. The <tt>GetMedia</tt> API then starts with the chunk
--   identified by the continuation token.
--   
--   <a>$sel:afterFragmentNumber:StartSelector'</a>,
--   <a>startSelector_afterFragmentNumber</a> - Specifies the fragment
--   number from where you want the <tt>GetMedia</tt> API to start
--   returning the fragments.
--   
--   <a>$sel:startTimestamp:StartSelector'</a>,
--   <a>startSelector_startTimestamp</a> - A timestamp value. This value is
--   required if you choose the PRODUCER_TIMESTAMP or the SERVER_TIMESTAMP
--   as the <tt>startSelectorType</tt>. The <tt>GetMedia</tt> API then
--   starts with the chunk containing the fragment that has the specified
--   timestamp.
--   
--   <a>$sel:startSelectorType:StartSelector'</a>,
--   <a>startSelector_startSelectorType</a> - Identifies the fragment on
--   the Kinesis video stream where you want to start getting the data
--   from.
--   
--   <ul>
--   <li>NOW - Start with the latest chunk on the stream.</li>
--   <li>EARLIEST - Start with earliest available chunk on the stream.</li>
--   <li>FRAGMENT_NUMBER - Start with the chunk after a specific fragment.
--   You must also specify the <tt>AfterFragmentNumber</tt> parameter.</li>
--   <li>PRODUCER_TIMESTAMP or SERVER_TIMESTAMP - Start with the chunk
--   containing a fragment with the specified producer or server timestamp.
--   You specify the timestamp by adding <tt>StartTimestamp</tt>.</li>
--   <li>CONTINUATION_TOKEN - Read using the specified continuation
--   token.</li>
--   </ul>
--   
--   If you choose the NOW, EARLIEST, or CONTINUATION_TOKEN as the
--   <tt>startSelectorType</tt>, you don't provide any additional
--   information in the <tt>startSelector</tt>.
newStartSelector :: StartSelectorType -> StartSelector
