-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-kinesis-videoZSamazonka-kinesis-video
@version 2.0


module Amazonka.KinesisVideo.Types.APIName
newtype APIName
APIName' :: Text -> APIName
[fromAPIName] :: APIName -> Text
pattern APIName_GET_CLIP :: APIName
pattern APIName_GET_DASH_STREAMING_SESSION_URL :: APIName
pattern APIName_GET_HLS_STREAMING_SESSION_URL :: APIName
pattern APIName_GET_MEDIA :: APIName
pattern APIName_GET_MEDIA_FOR_FRAGMENT_LIST :: APIName
pattern APIName_LIST_FRAGMENTS :: APIName
pattern APIName_PUT_MEDIA :: APIName
instance Amazonka.Data.XML.ToXML Amazonka.KinesisVideo.Types.APIName.APIName
instance Amazonka.Data.XML.FromXML Amazonka.KinesisVideo.Types.APIName.APIName
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.KinesisVideo.Types.APIName.APIName
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.Types.APIName.APIName
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.KinesisVideo.Types.APIName.APIName
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.KinesisVideo.Types.APIName.APIName
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.Types.APIName.APIName
instance Amazonka.Data.Headers.ToHeader Amazonka.KinesisVideo.Types.APIName.APIName
instance Amazonka.Data.Log.ToLog Amazonka.KinesisVideo.Types.APIName.APIName
instance Amazonka.Data.ByteString.ToByteString Amazonka.KinesisVideo.Types.APIName.APIName
instance Amazonka.Data.Text.ToText Amazonka.KinesisVideo.Types.APIName.APIName
instance Amazonka.Data.Text.FromText Amazonka.KinesisVideo.Types.APIName.APIName
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.APIName.APIName
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.APIName.APIName
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.APIName.APIName
instance GHC.Classes.Ord Amazonka.KinesisVideo.Types.APIName.APIName
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.APIName.APIName
instance GHC.Read.Read Amazonka.KinesisVideo.Types.APIName.APIName
instance GHC.Show.Show Amazonka.KinesisVideo.Types.APIName.APIName


module Amazonka.KinesisVideo.Types.ChannelProtocol
newtype ChannelProtocol
ChannelProtocol' :: Text -> ChannelProtocol
[fromChannelProtocol] :: ChannelProtocol -> Text
pattern ChannelProtocol_HTTPS :: ChannelProtocol
pattern ChannelProtocol_WSS :: ChannelProtocol
instance Amazonka.Data.XML.ToXML Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Amazonka.Data.XML.FromXML Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Amazonka.Data.Headers.ToHeader Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Amazonka.Data.Log.ToLog Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Amazonka.Data.ByteString.ToByteString Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Amazonka.Data.Text.ToText Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Amazonka.Data.Text.FromText Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance GHC.Classes.Ord Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance GHC.Read.Read Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol
instance GHC.Show.Show Amazonka.KinesisVideo.Types.ChannelProtocol.ChannelProtocol


module Amazonka.KinesisVideo.Types.ChannelRole
newtype ChannelRole
ChannelRole' :: Text -> ChannelRole
[fromChannelRole] :: ChannelRole -> Text
pattern ChannelRole_MASTER :: ChannelRole
pattern ChannelRole_VIEWER :: ChannelRole
instance Amazonka.Data.XML.ToXML Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Amazonka.Data.XML.FromXML Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Amazonka.Data.Headers.ToHeader Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Amazonka.Data.Log.ToLog Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Amazonka.Data.ByteString.ToByteString Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Amazonka.Data.Text.ToText Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Amazonka.Data.Text.FromText Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance GHC.Classes.Ord Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance GHC.Read.Read Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole
instance GHC.Show.Show Amazonka.KinesisVideo.Types.ChannelRole.ChannelRole


module Amazonka.KinesisVideo.Types.ChannelType
newtype ChannelType
ChannelType' :: Text -> ChannelType
[fromChannelType] :: ChannelType -> Text
pattern ChannelType_SINGLE_MASTER :: ChannelType
instance Amazonka.Data.XML.ToXML Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Amazonka.Data.XML.FromXML Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Amazonka.Data.Headers.ToHeader Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Amazonka.Data.Log.ToLog Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Amazonka.Data.ByteString.ToByteString Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Amazonka.Data.Text.ToText Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Amazonka.Data.Text.FromText Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance GHC.Classes.Ord Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance GHC.Read.Read Amazonka.KinesisVideo.Types.ChannelType.ChannelType
instance GHC.Show.Show Amazonka.KinesisVideo.Types.ChannelType.ChannelType


module Amazonka.KinesisVideo.Types.ComparisonOperator
newtype ComparisonOperator
ComparisonOperator' :: Text -> ComparisonOperator
[fromComparisonOperator] :: ComparisonOperator -> Text
pattern ComparisonOperator_BEGINS_WITH :: ComparisonOperator
instance Amazonka.Data.XML.ToXML Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.XML.FromXML Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.Headers.ToHeader Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.Log.ToLog Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.ByteString.ToByteString Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.Text.ToText Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.Text.FromText Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance GHC.Classes.Ord Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance GHC.Read.Read Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator
instance GHC.Show.Show Amazonka.KinesisVideo.Types.ComparisonOperator.ComparisonOperator


module Amazonka.KinesisVideo.Types.ChannelNameCondition

-- | An optional input parameter for the <tt>ListSignalingChannels</tt>
--   API. When this parameter is specified while invoking
--   <tt>ListSignalingChannels</tt>, the API returns only the channels that
--   satisfy a condition specified in <tt>ChannelNameCondition</tt>.
--   
--   <i>See:</i> <a>newChannelNameCondition</a> smart constructor.
data ChannelNameCondition
ChannelNameCondition' :: Maybe ComparisonOperator -> Maybe Text -> ChannelNameCondition

-- | A comparison operator. Currently, you can only specify the
--   <tt>BEGINS_WITH</tt> operator, which finds signaling channels whose
--   names begin with a given prefix.
[$sel:comparisonOperator:ChannelNameCondition'] :: ChannelNameCondition -> Maybe ComparisonOperator

-- | A value to compare.
[$sel:comparisonValue:ChannelNameCondition'] :: ChannelNameCondition -> Maybe Text

-- | Create a value of <a>ChannelNameCondition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:comparisonOperator:ChannelNameCondition'</a>,
--   <a>channelNameCondition_comparisonOperator</a> - A comparison
--   operator. Currently, you can only specify the <tt>BEGINS_WITH</tt>
--   operator, which finds signaling channels whose names begin with a
--   given prefix.
--   
--   <a>$sel:comparisonValue:ChannelNameCondition'</a>,
--   <a>channelNameCondition_comparisonValue</a> - A value to compare.
newChannelNameCondition :: ChannelNameCondition

-- | A comparison operator. Currently, you can only specify the
--   <tt>BEGINS_WITH</tt> operator, which finds signaling channels whose
--   names begin with a given prefix.
channelNameCondition_comparisonOperator :: Lens' ChannelNameCondition (Maybe ComparisonOperator)

-- | A value to compare.
channelNameCondition_comparisonValue :: Lens' ChannelNameCondition (Maybe Text)
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.ChannelNameCondition.ChannelNameCondition
instance GHC.Show.Show Amazonka.KinesisVideo.Types.ChannelNameCondition.ChannelNameCondition
instance GHC.Read.Read Amazonka.KinesisVideo.Types.ChannelNameCondition.ChannelNameCondition
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.ChannelNameCondition.ChannelNameCondition
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.ChannelNameCondition.ChannelNameCondition
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.ChannelNameCondition.ChannelNameCondition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.Types.ChannelNameCondition.ChannelNameCondition


module Amazonka.KinesisVideo.Types.ResourceEndpointListItem

-- | An object that describes the endpoint of the signaling channel
--   returned by the <tt>GetSignalingChannelEndpoint</tt> API.
--   
--   <i>See:</i> <a>newResourceEndpointListItem</a> smart constructor.
data ResourceEndpointListItem
ResourceEndpointListItem' :: Maybe ChannelProtocol -> Maybe Text -> ResourceEndpointListItem

-- | The protocol of the signaling channel returned by the
--   <tt>GetSignalingChannelEndpoint</tt> API.
[$sel:protocol:ResourceEndpointListItem'] :: ResourceEndpointListItem -> Maybe ChannelProtocol

-- | The endpoint of the signaling channel returned by the
--   <tt>GetSignalingChannelEndpoint</tt> API.
[$sel:resourceEndpoint:ResourceEndpointListItem'] :: ResourceEndpointListItem -> Maybe Text

-- | Create a value of <a>ResourceEndpointListItem</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocol:ResourceEndpointListItem'</a>,
--   <a>resourceEndpointListItem_protocol</a> - The protocol of the
--   signaling channel returned by the <tt>GetSignalingChannelEndpoint</tt>
--   API.
--   
--   <a>$sel:resourceEndpoint:ResourceEndpointListItem'</a>,
--   <a>resourceEndpointListItem_resourceEndpoint</a> - The endpoint of the
--   signaling channel returned by the <tt>GetSignalingChannelEndpoint</tt>
--   API.
newResourceEndpointListItem :: ResourceEndpointListItem

-- | The protocol of the signaling channel returned by the
--   <tt>GetSignalingChannelEndpoint</tt> API.
resourceEndpointListItem_protocol :: Lens' ResourceEndpointListItem (Maybe ChannelProtocol)

-- | The endpoint of the signaling channel returned by the
--   <tt>GetSignalingChannelEndpoint</tt> API.
resourceEndpointListItem_resourceEndpoint :: Lens' ResourceEndpointListItem (Maybe Text)
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.ResourceEndpointListItem.ResourceEndpointListItem
instance GHC.Show.Show Amazonka.KinesisVideo.Types.ResourceEndpointListItem.ResourceEndpointListItem
instance GHC.Read.Read Amazonka.KinesisVideo.Types.ResourceEndpointListItem.ResourceEndpointListItem
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.ResourceEndpointListItem.ResourceEndpointListItem
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.KinesisVideo.Types.ResourceEndpointListItem.ResourceEndpointListItem
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.ResourceEndpointListItem.ResourceEndpointListItem
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.ResourceEndpointListItem.ResourceEndpointListItem


module Amazonka.KinesisVideo.Types.SingleMasterChannelEndpointConfiguration

-- | An object that contains the endpoint configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
--   
--   <i>See:</i> <a>newSingleMasterChannelEndpointConfiguration</a> smart
--   constructor.
data SingleMasterChannelEndpointConfiguration
SingleMasterChannelEndpointConfiguration' :: Maybe (NonEmpty ChannelProtocol) -> Maybe ChannelRole -> SingleMasterChannelEndpointConfiguration

-- | This property is used to determine the nature of communication over
--   this <tt>SINGLE_MASTER</tt> signaling channel. If <tt>WSS</tt> is
--   specified, this API returns a websocket endpoint. If <tt>HTTPS</tt> is
--   specified, this API returns an <tt>HTTPS</tt> endpoint.
[$sel:protocols:SingleMasterChannelEndpointConfiguration'] :: SingleMasterChannelEndpointConfiguration -> Maybe (NonEmpty ChannelProtocol)

-- | This property is used to determine messaging permissions in this
--   <tt>SINGLE_MASTER</tt> signaling channel. If <tt>MASTER</tt> is
--   specified, this API returns an endpoint that a client can use to
--   receive offers from and send answers to any of the viewers on this
--   signaling channel. If <tt>VIEWER</tt> is specified, this API returns
--   an endpoint that a client can use only to send offers to another
--   <tt>MASTER</tt> client on this signaling channel.
[$sel:role':SingleMasterChannelEndpointConfiguration'] :: SingleMasterChannelEndpointConfiguration -> Maybe ChannelRole

-- | Create a value of <a>SingleMasterChannelEndpointConfiguration</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocols:SingleMasterChannelEndpointConfiguration'</a>,
--   <a>singleMasterChannelEndpointConfiguration_protocols</a> - This
--   property is used to determine the nature of communication over this
--   <tt>SINGLE_MASTER</tt> signaling channel. If <tt>WSS</tt> is
--   specified, this API returns a websocket endpoint. If <tt>HTTPS</tt> is
--   specified, this API returns an <tt>HTTPS</tt> endpoint.
--   
--   <a>$sel:role':SingleMasterChannelEndpointConfiguration'</a>,
--   <a>singleMasterChannelEndpointConfiguration_role</a> - This property
--   is used to determine messaging permissions in this
--   <tt>SINGLE_MASTER</tt> signaling channel. If <tt>MASTER</tt> is
--   specified, this API returns an endpoint that a client can use to
--   receive offers from and send answers to any of the viewers on this
--   signaling channel. If <tt>VIEWER</tt> is specified, this API returns
--   an endpoint that a client can use only to send offers to another
--   <tt>MASTER</tt> client on this signaling channel.
newSingleMasterChannelEndpointConfiguration :: SingleMasterChannelEndpointConfiguration

-- | This property is used to determine the nature of communication over
--   this <tt>SINGLE_MASTER</tt> signaling channel. If <tt>WSS</tt> is
--   specified, this API returns a websocket endpoint. If <tt>HTTPS</tt> is
--   specified, this API returns an <tt>HTTPS</tt> endpoint.
singleMasterChannelEndpointConfiguration_protocols :: Lens' SingleMasterChannelEndpointConfiguration (Maybe (NonEmpty ChannelProtocol))

-- | This property is used to determine messaging permissions in this
--   <tt>SINGLE_MASTER</tt> signaling channel. If <tt>MASTER</tt> is
--   specified, this API returns an endpoint that a client can use to
--   receive offers from and send answers to any of the viewers on this
--   signaling channel. If <tt>VIEWER</tt> is specified, this API returns
--   an endpoint that a client can use only to send offers to another
--   <tt>MASTER</tt> client on this signaling channel.
singleMasterChannelEndpointConfiguration_role :: Lens' SingleMasterChannelEndpointConfiguration (Maybe ChannelRole)
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.SingleMasterChannelEndpointConfiguration.SingleMasterChannelEndpointConfiguration
instance GHC.Show.Show Amazonka.KinesisVideo.Types.SingleMasterChannelEndpointConfiguration.SingleMasterChannelEndpointConfiguration
instance GHC.Read.Read Amazonka.KinesisVideo.Types.SingleMasterChannelEndpointConfiguration.SingleMasterChannelEndpointConfiguration
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.SingleMasterChannelEndpointConfiguration.SingleMasterChannelEndpointConfiguration
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.SingleMasterChannelEndpointConfiguration.SingleMasterChannelEndpointConfiguration
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.SingleMasterChannelEndpointConfiguration.SingleMasterChannelEndpointConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.Types.SingleMasterChannelEndpointConfiguration.SingleMasterChannelEndpointConfiguration


module Amazonka.KinesisVideo.Types.SingleMasterConfiguration

-- | A structure that contains the configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
--   
--   <i>See:</i> <a>newSingleMasterConfiguration</a> smart constructor.
data SingleMasterConfiguration
SingleMasterConfiguration' :: Maybe Natural -> SingleMasterConfiguration

-- | The period of time a signaling channel retains underlivered messages
--   before they are discarded.
[$sel:messageTtlSeconds:SingleMasterConfiguration'] :: SingleMasterConfiguration -> Maybe Natural

-- | Create a value of <a>SingleMasterConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:messageTtlSeconds:SingleMasterConfiguration'</a>,
--   <a>singleMasterConfiguration_messageTtlSeconds</a> - The period of
--   time a signaling channel retains underlivered messages before they are
--   discarded.
newSingleMasterConfiguration :: SingleMasterConfiguration

-- | The period of time a signaling channel retains underlivered messages
--   before they are discarded.
singleMasterConfiguration_messageTtlSeconds :: Lens' SingleMasterConfiguration (Maybe Natural)
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.SingleMasterConfiguration.SingleMasterConfiguration
instance GHC.Show.Show Amazonka.KinesisVideo.Types.SingleMasterConfiguration.SingleMasterConfiguration
instance GHC.Read.Read Amazonka.KinesisVideo.Types.SingleMasterConfiguration.SingleMasterConfiguration
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.SingleMasterConfiguration.SingleMasterConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.KinesisVideo.Types.SingleMasterConfiguration.SingleMasterConfiguration
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.SingleMasterConfiguration.SingleMasterConfiguration
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.SingleMasterConfiguration.SingleMasterConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.Types.SingleMasterConfiguration.SingleMasterConfiguration


module Amazonka.KinesisVideo.Types.StreamNameCondition

-- | Specifies the condition that streams must satisfy to be returned when
--   you list streams (see the <tt>ListStreams</tt> API). A condition has a
--   comparison operation and a value. Currently, you can specify only the
--   <tt>BEGINS_WITH</tt> operator, which finds streams whose names start
--   with a given prefix.
--   
--   <i>See:</i> <a>newStreamNameCondition</a> smart constructor.
data StreamNameCondition
StreamNameCondition' :: Maybe ComparisonOperator -> Maybe Text -> StreamNameCondition

-- | A comparison operator. Currently, you can specify only the
--   <tt>BEGINS_WITH</tt> operator, which finds streams whose names start
--   with a given prefix.
[$sel:comparisonOperator:StreamNameCondition'] :: StreamNameCondition -> Maybe ComparisonOperator

-- | A value to compare.
[$sel:comparisonValue:StreamNameCondition'] :: StreamNameCondition -> Maybe Text

-- | Create a value of <a>StreamNameCondition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:comparisonOperator:StreamNameCondition'</a>,
--   <a>streamNameCondition_comparisonOperator</a> - A comparison operator.
--   Currently, you can specify only the <tt>BEGINS_WITH</tt> operator,
--   which finds streams whose names start with a given prefix.
--   
--   <a>$sel:comparisonValue:StreamNameCondition'</a>,
--   <a>streamNameCondition_comparisonValue</a> - A value to compare.
newStreamNameCondition :: StreamNameCondition

-- | A comparison operator. Currently, you can specify only the
--   <tt>BEGINS_WITH</tt> operator, which finds streams whose names start
--   with a given prefix.
streamNameCondition_comparisonOperator :: Lens' StreamNameCondition (Maybe ComparisonOperator)

-- | A value to compare.
streamNameCondition_comparisonValue :: Lens' StreamNameCondition (Maybe Text)
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.StreamNameCondition.StreamNameCondition
instance GHC.Show.Show Amazonka.KinesisVideo.Types.StreamNameCondition.StreamNameCondition
instance GHC.Read.Read Amazonka.KinesisVideo.Types.StreamNameCondition.StreamNameCondition
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.StreamNameCondition.StreamNameCondition
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.StreamNameCondition.StreamNameCondition
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.StreamNameCondition.StreamNameCondition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.Types.StreamNameCondition.StreamNameCondition


module Amazonka.KinesisVideo.Types.StreamStatus
newtype StreamStatus
StreamStatus' :: Text -> StreamStatus
[fromStreamStatus] :: StreamStatus -> Text
pattern StreamStatus_ACTIVE :: StreamStatus
pattern StreamStatus_CREATING :: StreamStatus
pattern StreamStatus_DELETING :: StreamStatus
pattern StreamStatus_UPDATING :: StreamStatus
instance Amazonka.Data.XML.ToXML Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Amazonka.Data.XML.FromXML Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Amazonka.Data.Log.ToLog Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Amazonka.Data.Text.ToText Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Amazonka.Data.Text.FromText Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance GHC.Classes.Ord Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance GHC.Read.Read Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus
instance GHC.Show.Show Amazonka.KinesisVideo.Types.StreamStatus.StreamStatus


module Amazonka.KinesisVideo.Types.StreamInfo

-- | An object describing a Kinesis video stream.
--   
--   <i>See:</i> <a>newStreamInfo</a> smart constructor.
data StreamInfo
StreamInfo' :: Maybe POSIX -> Maybe StreamStatus -> Maybe Text -> Maybe Natural -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> StreamInfo

-- | A time stamp that indicates when the stream was created.
[$sel:creationTime:StreamInfo'] :: StreamInfo -> Maybe POSIX

-- | The status of the stream.
[$sel:status:StreamInfo'] :: StreamInfo -> Maybe StreamStatus

-- | The <tt>MediaType</tt> of the stream.
[$sel:mediaType:StreamInfo'] :: StreamInfo -> Maybe Text

-- | How long the stream retains data, in hours.
[$sel:dataRetentionInHours:StreamInfo'] :: StreamInfo -> Maybe Natural

-- | The Amazon Resource Name (ARN) of the stream.
[$sel:streamARN:StreamInfo'] :: StreamInfo -> Maybe Text

-- | The ID of the AWS Key Management Service (AWS KMS) key that Kinesis
--   Video Streams uses to encrypt data on the stream.
[$sel:kmsKeyId:StreamInfo'] :: StreamInfo -> Maybe Text

-- | The name of the device that is associated with the stream.
[$sel:deviceName:StreamInfo'] :: StreamInfo -> Maybe Text

-- | The version of the stream.
[$sel:version:StreamInfo'] :: StreamInfo -> Maybe Text

-- | The name of the stream.
[$sel:streamName:StreamInfo'] :: StreamInfo -> Maybe Text

-- | Create a value of <a>StreamInfo</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:StreamInfo'</a>, <a>streamInfo_creationTime</a> -
--   A time stamp that indicates when the stream was created.
--   
--   <a>$sel:status:StreamInfo'</a>, <a>streamInfo_status</a> - The status
--   of the stream.
--   
--   <a>$sel:mediaType:StreamInfo'</a>, <a>streamInfo_mediaType</a> - The
--   <tt>MediaType</tt> of the stream.
--   
--   <a>$sel:dataRetentionInHours:StreamInfo'</a>,
--   <a>streamInfo_dataRetentionInHours</a> - How long the stream retains
--   data, in hours.
--   
--   <a>$sel:streamARN:StreamInfo'</a>, <a>streamInfo_streamARN</a> - The
--   Amazon Resource Name (ARN) of the stream.
--   
--   <a>$sel:kmsKeyId:StreamInfo'</a>, <a>streamInfo_kmsKeyId</a> - The ID
--   of the AWS Key Management Service (AWS KMS) key that Kinesis Video
--   Streams uses to encrypt data on the stream.
--   
--   <a>$sel:deviceName:StreamInfo'</a>, <a>streamInfo_deviceName</a> - The
--   name of the device that is associated with the stream.
--   
--   <a>$sel:version:StreamInfo'</a>, <a>streamInfo_version</a> - The
--   version of the stream.
--   
--   <a>$sel:streamName:StreamInfo'</a>, <a>streamInfo_streamName</a> - The
--   name of the stream.
newStreamInfo :: StreamInfo

-- | A time stamp that indicates when the stream was created.
streamInfo_creationTime :: Lens' StreamInfo (Maybe UTCTime)

-- | The status of the stream.
streamInfo_status :: Lens' StreamInfo (Maybe StreamStatus)

-- | The <tt>MediaType</tt> of the stream.
streamInfo_mediaType :: Lens' StreamInfo (Maybe Text)

-- | How long the stream retains data, in hours.
streamInfo_dataRetentionInHours :: Lens' StreamInfo (Maybe Natural)

-- | The Amazon Resource Name (ARN) of the stream.
streamInfo_streamARN :: Lens' StreamInfo (Maybe Text)

-- | The ID of the AWS Key Management Service (AWS KMS) key that Kinesis
--   Video Streams uses to encrypt data on the stream.
streamInfo_kmsKeyId :: Lens' StreamInfo (Maybe Text)

-- | The name of the device that is associated with the stream.
streamInfo_deviceName :: Lens' StreamInfo (Maybe Text)

-- | The version of the stream.
streamInfo_version :: Lens' StreamInfo (Maybe Text)

-- | The name of the stream.
streamInfo_streamName :: Lens' StreamInfo (Maybe Text)
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.StreamInfo.StreamInfo
instance GHC.Show.Show Amazonka.KinesisVideo.Types.StreamInfo.StreamInfo
instance GHC.Read.Read Amazonka.KinesisVideo.Types.StreamInfo.StreamInfo
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.StreamInfo.StreamInfo
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.KinesisVideo.Types.StreamInfo.StreamInfo
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.StreamInfo.StreamInfo
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.StreamInfo.StreamInfo


module Amazonka.KinesisVideo.Types.ChannelInfo

-- | A structure that encapsulates a signaling channel's metadata and
--   properties.
--   
--   <i>See:</i> <a>newChannelInfo</a> smart constructor.
data ChannelInfo
ChannelInfo' :: Maybe POSIX -> Maybe StreamStatus -> Maybe Text -> Maybe SingleMasterConfiguration -> Maybe Text -> Maybe Text -> Maybe ChannelType -> ChannelInfo

-- | The time at which the signaling channel was created.
[$sel:creationTime:ChannelInfo'] :: ChannelInfo -> Maybe POSIX

-- | Current status of the signaling channel.
[$sel:channelStatus:ChannelInfo'] :: ChannelInfo -> Maybe StreamStatus

-- | The Amazon Resource Name (ARN) of the signaling channel.
[$sel:channelARN:ChannelInfo'] :: ChannelInfo -> Maybe Text

-- | A structure that contains the configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
[$sel:singleMasterConfiguration:ChannelInfo'] :: ChannelInfo -> Maybe SingleMasterConfiguration

-- | The name of the signaling channel.
[$sel:channelName:ChannelInfo'] :: ChannelInfo -> Maybe Text

-- | The current version of the signaling channel.
[$sel:version:ChannelInfo'] :: ChannelInfo -> Maybe Text

-- | The type of the signaling channel.
[$sel:channelType:ChannelInfo'] :: ChannelInfo -> Maybe ChannelType

-- | Create a value of <a>ChannelInfo</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:ChannelInfo'</a>, <a>channelInfo_creationTime</a>
--   - The time at which the signaling channel was created.
--   
--   <a>$sel:channelStatus:ChannelInfo'</a>,
--   <a>channelInfo_channelStatus</a> - Current status of the signaling
--   channel.
--   
--   <a>$sel:channelARN:ChannelInfo'</a>, <a>channelInfo_channelARN</a> -
--   The Amazon Resource Name (ARN) of the signaling channel.
--   
--   <a>$sel:singleMasterConfiguration:ChannelInfo'</a>,
--   <a>channelInfo_singleMasterConfiguration</a> - A structure that
--   contains the configuration for the <tt>SINGLE_MASTER</tt> channel
--   type.
--   
--   <a>$sel:channelName:ChannelInfo'</a>, <a>channelInfo_channelName</a> -
--   The name of the signaling channel.
--   
--   <a>$sel:version:ChannelInfo'</a>, <a>channelInfo_version</a> - The
--   current version of the signaling channel.
--   
--   <a>$sel:channelType:ChannelInfo'</a>, <a>channelInfo_channelType</a> -
--   The type of the signaling channel.
newChannelInfo :: ChannelInfo

-- | The time at which the signaling channel was created.
channelInfo_creationTime :: Lens' ChannelInfo (Maybe UTCTime)

-- | Current status of the signaling channel.
channelInfo_channelStatus :: Lens' ChannelInfo (Maybe StreamStatus)

-- | The Amazon Resource Name (ARN) of the signaling channel.
channelInfo_channelARN :: Lens' ChannelInfo (Maybe Text)

-- | A structure that contains the configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
channelInfo_singleMasterConfiguration :: Lens' ChannelInfo (Maybe SingleMasterConfiguration)

-- | The name of the signaling channel.
channelInfo_channelName :: Lens' ChannelInfo (Maybe Text)

-- | The current version of the signaling channel.
channelInfo_version :: Lens' ChannelInfo (Maybe Text)

-- | The type of the signaling channel.
channelInfo_channelType :: Lens' ChannelInfo (Maybe ChannelType)
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.ChannelInfo.ChannelInfo
instance GHC.Show.Show Amazonka.KinesisVideo.Types.ChannelInfo.ChannelInfo
instance GHC.Read.Read Amazonka.KinesisVideo.Types.ChannelInfo.ChannelInfo
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.ChannelInfo.ChannelInfo
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.KinesisVideo.Types.ChannelInfo.ChannelInfo
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.ChannelInfo.ChannelInfo
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.ChannelInfo.ChannelInfo


module Amazonka.KinesisVideo.Types.Tag

-- | A key and value pair that is associated with the specified signaling
--   channel.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | The key of the tag that is associated with the specified signaling
--   channel.
[$sel:key:Tag'] :: Tag -> Text

-- | The value of the tag that is associated with the specified signaling
--   channel.
[$sel:value:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The key of the tag that is
--   associated with the specified signaling channel.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The value of the tag that
--   is associated with the specified signaling channel.
newTag :: Text -> Text -> Tag

-- | The key of the tag that is associated with the specified signaling
--   channel.
tag_key :: Lens' Tag Text

-- | The value of the tag that is associated with the specified signaling
--   channel.
tag_value :: Lens' Tag Text
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.Tag.Tag
instance GHC.Show.Show Amazonka.KinesisVideo.Types.Tag.Tag
instance GHC.Read.Read Amazonka.KinesisVideo.Types.Tag.Tag
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.Tag.Tag
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.Types.Tag.Tag


module Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation
newtype UpdateDataRetentionOperation
UpdateDataRetentionOperation' :: Text -> UpdateDataRetentionOperation
[fromUpdateDataRetentionOperation] :: UpdateDataRetentionOperation -> Text
pattern UpdateDataRetentionOperation_DECREASE_DATA_RETENTION :: UpdateDataRetentionOperation
pattern UpdateDataRetentionOperation_INCREASE_DATA_RETENTION :: UpdateDataRetentionOperation
instance Amazonka.Data.XML.ToXML Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Amazonka.Data.XML.FromXML Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Amazonka.Data.Headers.ToHeader Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Amazonka.Data.Log.ToLog Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Amazonka.Data.ByteString.ToByteString Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Amazonka.Data.Text.ToText Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Amazonka.Data.Text.FromText Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance GHC.Generics.Generic Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance GHC.Classes.Ord Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance GHC.Classes.Eq Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance GHC.Read.Read Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation
instance GHC.Show.Show Amazonka.KinesisVideo.Types.UpdateDataRetentionOperation.UpdateDataRetentionOperation


module Amazonka.KinesisVideo.Types

-- | API version <tt>2017-09-30</tt> of the Amazon Kinesis Video Streams
--   SDK configuration.
defaultService :: Service

-- | You do not have required permissions to perform this operation.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The value for this input parameter is invalid.
_InvalidArgumentException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You have exceeded the limit of tags that you can associate with the
--   resource. Kinesis video streams support up to 50 tags.
_TagsPerResourceExceededLimitException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The caller is not authorized to perform this operation.
_NotAuthorizedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Kinesis Video Streams has throttled the request because you have
--   exceeded the limit of allowed client calls. Try making the call later.
_ClientLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You have reached the maximum limit of active signaling channels for
--   this AWS account in this region.
_AccountChannelLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Not implemented.
_InvalidDeviceException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The stream version that you specified is not the latest version. To
--   get the latest version, use the <a>DescribeStream</a> API.
_VersionMismatchException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The number of streams created for the account is too high.
_AccountStreamLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The format of the <tt>StreamARN</tt> is invalid.
_InvalidResourceFormatException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Not implemented.
_DeviceStreamLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Amazon Kinesis Video Streams can't find the stream that you specified.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The signaling channel is currently not available for this operation.
_ResourceInUseException :: AsError a => Getting (First ServiceError) a ServiceError
newtype APIName
APIName' :: Text -> APIName
[fromAPIName] :: APIName -> Text
pattern APIName_GET_CLIP :: APIName
pattern APIName_GET_DASH_STREAMING_SESSION_URL :: APIName
pattern APIName_GET_HLS_STREAMING_SESSION_URL :: APIName
pattern APIName_GET_MEDIA :: APIName
pattern APIName_GET_MEDIA_FOR_FRAGMENT_LIST :: APIName
pattern APIName_LIST_FRAGMENTS :: APIName
pattern APIName_PUT_MEDIA :: APIName
newtype ChannelProtocol
ChannelProtocol' :: Text -> ChannelProtocol
[fromChannelProtocol] :: ChannelProtocol -> Text
pattern ChannelProtocol_HTTPS :: ChannelProtocol
pattern ChannelProtocol_WSS :: ChannelProtocol
newtype ChannelRole
ChannelRole' :: Text -> ChannelRole
[fromChannelRole] :: ChannelRole -> Text
pattern ChannelRole_MASTER :: ChannelRole
pattern ChannelRole_VIEWER :: ChannelRole
newtype ChannelType
ChannelType' :: Text -> ChannelType
[fromChannelType] :: ChannelType -> Text
pattern ChannelType_SINGLE_MASTER :: ChannelType
newtype ComparisonOperator
ComparisonOperator' :: Text -> ComparisonOperator
[fromComparisonOperator] :: ComparisonOperator -> Text
pattern ComparisonOperator_BEGINS_WITH :: ComparisonOperator
newtype StreamStatus
StreamStatus' :: Text -> StreamStatus
[fromStreamStatus] :: StreamStatus -> Text
pattern StreamStatus_ACTIVE :: StreamStatus
pattern StreamStatus_CREATING :: StreamStatus
pattern StreamStatus_DELETING :: StreamStatus
pattern StreamStatus_UPDATING :: StreamStatus
newtype UpdateDataRetentionOperation
UpdateDataRetentionOperation' :: Text -> UpdateDataRetentionOperation
[fromUpdateDataRetentionOperation] :: UpdateDataRetentionOperation -> Text
pattern UpdateDataRetentionOperation_DECREASE_DATA_RETENTION :: UpdateDataRetentionOperation
pattern UpdateDataRetentionOperation_INCREASE_DATA_RETENTION :: UpdateDataRetentionOperation

-- | A structure that encapsulates a signaling channel's metadata and
--   properties.
--   
--   <i>See:</i> <a>newChannelInfo</a> smart constructor.
data ChannelInfo
ChannelInfo' :: Maybe POSIX -> Maybe StreamStatus -> Maybe Text -> Maybe SingleMasterConfiguration -> Maybe Text -> Maybe Text -> Maybe ChannelType -> ChannelInfo

-- | The time at which the signaling channel was created.
[$sel:creationTime:ChannelInfo'] :: ChannelInfo -> Maybe POSIX

-- | Current status of the signaling channel.
[$sel:channelStatus:ChannelInfo'] :: ChannelInfo -> Maybe StreamStatus

-- | The Amazon Resource Name (ARN) of the signaling channel.
[$sel:channelARN:ChannelInfo'] :: ChannelInfo -> Maybe Text

-- | A structure that contains the configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
[$sel:singleMasterConfiguration:ChannelInfo'] :: ChannelInfo -> Maybe SingleMasterConfiguration

-- | The name of the signaling channel.
[$sel:channelName:ChannelInfo'] :: ChannelInfo -> Maybe Text

-- | The current version of the signaling channel.
[$sel:version:ChannelInfo'] :: ChannelInfo -> Maybe Text

-- | The type of the signaling channel.
[$sel:channelType:ChannelInfo'] :: ChannelInfo -> Maybe ChannelType

-- | Create a value of <a>ChannelInfo</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:ChannelInfo'</a>, <a>channelInfo_creationTime</a>
--   - The time at which the signaling channel was created.
--   
--   <a>$sel:channelStatus:ChannelInfo'</a>,
--   <a>channelInfo_channelStatus</a> - Current status of the signaling
--   channel.
--   
--   <a>$sel:channelARN:ChannelInfo'</a>, <a>channelInfo_channelARN</a> -
--   The Amazon Resource Name (ARN) of the signaling channel.
--   
--   <a>$sel:singleMasterConfiguration:ChannelInfo'</a>,
--   <a>channelInfo_singleMasterConfiguration</a> - A structure that
--   contains the configuration for the <tt>SINGLE_MASTER</tt> channel
--   type.
--   
--   <a>$sel:channelName:ChannelInfo'</a>, <a>channelInfo_channelName</a> -
--   The name of the signaling channel.
--   
--   <a>$sel:version:ChannelInfo'</a>, <a>channelInfo_version</a> - The
--   current version of the signaling channel.
--   
--   <a>$sel:channelType:ChannelInfo'</a>, <a>channelInfo_channelType</a> -
--   The type of the signaling channel.
newChannelInfo :: ChannelInfo

-- | The time at which the signaling channel was created.
channelInfo_creationTime :: Lens' ChannelInfo (Maybe UTCTime)

-- | Current status of the signaling channel.
channelInfo_channelStatus :: Lens' ChannelInfo (Maybe StreamStatus)

-- | The Amazon Resource Name (ARN) of the signaling channel.
channelInfo_channelARN :: Lens' ChannelInfo (Maybe Text)

-- | A structure that contains the configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
channelInfo_singleMasterConfiguration :: Lens' ChannelInfo (Maybe SingleMasterConfiguration)

-- | The name of the signaling channel.
channelInfo_channelName :: Lens' ChannelInfo (Maybe Text)

-- | The current version of the signaling channel.
channelInfo_version :: Lens' ChannelInfo (Maybe Text)

-- | The type of the signaling channel.
channelInfo_channelType :: Lens' ChannelInfo (Maybe ChannelType)

-- | An optional input parameter for the <tt>ListSignalingChannels</tt>
--   API. When this parameter is specified while invoking
--   <tt>ListSignalingChannels</tt>, the API returns only the channels that
--   satisfy a condition specified in <tt>ChannelNameCondition</tt>.
--   
--   <i>See:</i> <a>newChannelNameCondition</a> smart constructor.
data ChannelNameCondition
ChannelNameCondition' :: Maybe ComparisonOperator -> Maybe Text -> ChannelNameCondition

-- | A comparison operator. Currently, you can only specify the
--   <tt>BEGINS_WITH</tt> operator, which finds signaling channels whose
--   names begin with a given prefix.
[$sel:comparisonOperator:ChannelNameCondition'] :: ChannelNameCondition -> Maybe ComparisonOperator

-- | A value to compare.
[$sel:comparisonValue:ChannelNameCondition'] :: ChannelNameCondition -> Maybe Text

-- | Create a value of <a>ChannelNameCondition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:comparisonOperator:ChannelNameCondition'</a>,
--   <a>channelNameCondition_comparisonOperator</a> - A comparison
--   operator. Currently, you can only specify the <tt>BEGINS_WITH</tt>
--   operator, which finds signaling channels whose names begin with a
--   given prefix.
--   
--   <a>$sel:comparisonValue:ChannelNameCondition'</a>,
--   <a>channelNameCondition_comparisonValue</a> - A value to compare.
newChannelNameCondition :: ChannelNameCondition

-- | A comparison operator. Currently, you can only specify the
--   <tt>BEGINS_WITH</tt> operator, which finds signaling channels whose
--   names begin with a given prefix.
channelNameCondition_comparisonOperator :: Lens' ChannelNameCondition (Maybe ComparisonOperator)

-- | A value to compare.
channelNameCondition_comparisonValue :: Lens' ChannelNameCondition (Maybe Text)

-- | An object that describes the endpoint of the signaling channel
--   returned by the <tt>GetSignalingChannelEndpoint</tt> API.
--   
--   <i>See:</i> <a>newResourceEndpointListItem</a> smart constructor.
data ResourceEndpointListItem
ResourceEndpointListItem' :: Maybe ChannelProtocol -> Maybe Text -> ResourceEndpointListItem

-- | The protocol of the signaling channel returned by the
--   <tt>GetSignalingChannelEndpoint</tt> API.
[$sel:protocol:ResourceEndpointListItem'] :: ResourceEndpointListItem -> Maybe ChannelProtocol

-- | The endpoint of the signaling channel returned by the
--   <tt>GetSignalingChannelEndpoint</tt> API.
[$sel:resourceEndpoint:ResourceEndpointListItem'] :: ResourceEndpointListItem -> Maybe Text

-- | Create a value of <a>ResourceEndpointListItem</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocol:ResourceEndpointListItem'</a>,
--   <a>resourceEndpointListItem_protocol</a> - The protocol of the
--   signaling channel returned by the <tt>GetSignalingChannelEndpoint</tt>
--   API.
--   
--   <a>$sel:resourceEndpoint:ResourceEndpointListItem'</a>,
--   <a>resourceEndpointListItem_resourceEndpoint</a> - The endpoint of the
--   signaling channel returned by the <tt>GetSignalingChannelEndpoint</tt>
--   API.
newResourceEndpointListItem :: ResourceEndpointListItem

-- | The protocol of the signaling channel returned by the
--   <tt>GetSignalingChannelEndpoint</tt> API.
resourceEndpointListItem_protocol :: Lens' ResourceEndpointListItem (Maybe ChannelProtocol)

-- | The endpoint of the signaling channel returned by the
--   <tt>GetSignalingChannelEndpoint</tt> API.
resourceEndpointListItem_resourceEndpoint :: Lens' ResourceEndpointListItem (Maybe Text)

-- | An object that contains the endpoint configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
--   
--   <i>See:</i> <a>newSingleMasterChannelEndpointConfiguration</a> smart
--   constructor.
data SingleMasterChannelEndpointConfiguration
SingleMasterChannelEndpointConfiguration' :: Maybe (NonEmpty ChannelProtocol) -> Maybe ChannelRole -> SingleMasterChannelEndpointConfiguration

-- | This property is used to determine the nature of communication over
--   this <tt>SINGLE_MASTER</tt> signaling channel. If <tt>WSS</tt> is
--   specified, this API returns a websocket endpoint. If <tt>HTTPS</tt> is
--   specified, this API returns an <tt>HTTPS</tt> endpoint.
[$sel:protocols:SingleMasterChannelEndpointConfiguration'] :: SingleMasterChannelEndpointConfiguration -> Maybe (NonEmpty ChannelProtocol)

-- | This property is used to determine messaging permissions in this
--   <tt>SINGLE_MASTER</tt> signaling channel. If <tt>MASTER</tt> is
--   specified, this API returns an endpoint that a client can use to
--   receive offers from and send answers to any of the viewers on this
--   signaling channel. If <tt>VIEWER</tt> is specified, this API returns
--   an endpoint that a client can use only to send offers to another
--   <tt>MASTER</tt> client on this signaling channel.
[$sel:role':SingleMasterChannelEndpointConfiguration'] :: SingleMasterChannelEndpointConfiguration -> Maybe ChannelRole

-- | Create a value of <a>SingleMasterChannelEndpointConfiguration</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocols:SingleMasterChannelEndpointConfiguration'</a>,
--   <a>singleMasterChannelEndpointConfiguration_protocols</a> - This
--   property is used to determine the nature of communication over this
--   <tt>SINGLE_MASTER</tt> signaling channel. If <tt>WSS</tt> is
--   specified, this API returns a websocket endpoint. If <tt>HTTPS</tt> is
--   specified, this API returns an <tt>HTTPS</tt> endpoint.
--   
--   <a>$sel:role':SingleMasterChannelEndpointConfiguration'</a>,
--   <a>singleMasterChannelEndpointConfiguration_role</a> - This property
--   is used to determine messaging permissions in this
--   <tt>SINGLE_MASTER</tt> signaling channel. If <tt>MASTER</tt> is
--   specified, this API returns an endpoint that a client can use to
--   receive offers from and send answers to any of the viewers on this
--   signaling channel. If <tt>VIEWER</tt> is specified, this API returns
--   an endpoint that a client can use only to send offers to another
--   <tt>MASTER</tt> client on this signaling channel.
newSingleMasterChannelEndpointConfiguration :: SingleMasterChannelEndpointConfiguration

-- | This property is used to determine the nature of communication over
--   this <tt>SINGLE_MASTER</tt> signaling channel. If <tt>WSS</tt> is
--   specified, this API returns a websocket endpoint. If <tt>HTTPS</tt> is
--   specified, this API returns an <tt>HTTPS</tt> endpoint.
singleMasterChannelEndpointConfiguration_protocols :: Lens' SingleMasterChannelEndpointConfiguration (Maybe (NonEmpty ChannelProtocol))

-- | This property is used to determine messaging permissions in this
--   <tt>SINGLE_MASTER</tt> signaling channel. If <tt>MASTER</tt> is
--   specified, this API returns an endpoint that a client can use to
--   receive offers from and send answers to any of the viewers on this
--   signaling channel. If <tt>VIEWER</tt> is specified, this API returns
--   an endpoint that a client can use only to send offers to another
--   <tt>MASTER</tt> client on this signaling channel.
singleMasterChannelEndpointConfiguration_role :: Lens' SingleMasterChannelEndpointConfiguration (Maybe ChannelRole)

-- | A structure that contains the configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
--   
--   <i>See:</i> <a>newSingleMasterConfiguration</a> smart constructor.
data SingleMasterConfiguration
SingleMasterConfiguration' :: Maybe Natural -> SingleMasterConfiguration

-- | The period of time a signaling channel retains underlivered messages
--   before they are discarded.
[$sel:messageTtlSeconds:SingleMasterConfiguration'] :: SingleMasterConfiguration -> Maybe Natural

-- | Create a value of <a>SingleMasterConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:messageTtlSeconds:SingleMasterConfiguration'</a>,
--   <a>singleMasterConfiguration_messageTtlSeconds</a> - The period of
--   time a signaling channel retains underlivered messages before they are
--   discarded.
newSingleMasterConfiguration :: SingleMasterConfiguration

-- | The period of time a signaling channel retains underlivered messages
--   before they are discarded.
singleMasterConfiguration_messageTtlSeconds :: Lens' SingleMasterConfiguration (Maybe Natural)

-- | An object describing a Kinesis video stream.
--   
--   <i>See:</i> <a>newStreamInfo</a> smart constructor.
data StreamInfo
StreamInfo' :: Maybe POSIX -> Maybe StreamStatus -> Maybe Text -> Maybe Natural -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> StreamInfo

-- | A time stamp that indicates when the stream was created.
[$sel:creationTime:StreamInfo'] :: StreamInfo -> Maybe POSIX

-- | The status of the stream.
[$sel:status:StreamInfo'] :: StreamInfo -> Maybe StreamStatus

-- | The <tt>MediaType</tt> of the stream.
[$sel:mediaType:StreamInfo'] :: StreamInfo -> Maybe Text

-- | How long the stream retains data, in hours.
[$sel:dataRetentionInHours:StreamInfo'] :: StreamInfo -> Maybe Natural

-- | The Amazon Resource Name (ARN) of the stream.
[$sel:streamARN:StreamInfo'] :: StreamInfo -> Maybe Text

-- | The ID of the AWS Key Management Service (AWS KMS) key that Kinesis
--   Video Streams uses to encrypt data on the stream.
[$sel:kmsKeyId:StreamInfo'] :: StreamInfo -> Maybe Text

-- | The name of the device that is associated with the stream.
[$sel:deviceName:StreamInfo'] :: StreamInfo -> Maybe Text

-- | The version of the stream.
[$sel:version:StreamInfo'] :: StreamInfo -> Maybe Text

-- | The name of the stream.
[$sel:streamName:StreamInfo'] :: StreamInfo -> Maybe Text

-- | Create a value of <a>StreamInfo</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:StreamInfo'</a>, <a>streamInfo_creationTime</a> -
--   A time stamp that indicates when the stream was created.
--   
--   <a>$sel:status:StreamInfo'</a>, <a>streamInfo_status</a> - The status
--   of the stream.
--   
--   <a>$sel:mediaType:StreamInfo'</a>, <a>streamInfo_mediaType</a> - The
--   <tt>MediaType</tt> of the stream.
--   
--   <a>$sel:dataRetentionInHours:StreamInfo'</a>,
--   <a>streamInfo_dataRetentionInHours</a> - How long the stream retains
--   data, in hours.
--   
--   <a>$sel:streamARN:StreamInfo'</a>, <a>streamInfo_streamARN</a> - The
--   Amazon Resource Name (ARN) of the stream.
--   
--   <a>$sel:kmsKeyId:StreamInfo'</a>, <a>streamInfo_kmsKeyId</a> - The ID
--   of the AWS Key Management Service (AWS KMS) key that Kinesis Video
--   Streams uses to encrypt data on the stream.
--   
--   <a>$sel:deviceName:StreamInfo'</a>, <a>streamInfo_deviceName</a> - The
--   name of the device that is associated with the stream.
--   
--   <a>$sel:version:StreamInfo'</a>, <a>streamInfo_version</a> - The
--   version of the stream.
--   
--   <a>$sel:streamName:StreamInfo'</a>, <a>streamInfo_streamName</a> - The
--   name of the stream.
newStreamInfo :: StreamInfo

-- | A time stamp that indicates when the stream was created.
streamInfo_creationTime :: Lens' StreamInfo (Maybe UTCTime)

-- | The status of the stream.
streamInfo_status :: Lens' StreamInfo (Maybe StreamStatus)

-- | The <tt>MediaType</tt> of the stream.
streamInfo_mediaType :: Lens' StreamInfo (Maybe Text)

-- | How long the stream retains data, in hours.
streamInfo_dataRetentionInHours :: Lens' StreamInfo (Maybe Natural)

-- | The Amazon Resource Name (ARN) of the stream.
streamInfo_streamARN :: Lens' StreamInfo (Maybe Text)

-- | The ID of the AWS Key Management Service (AWS KMS) key that Kinesis
--   Video Streams uses to encrypt data on the stream.
streamInfo_kmsKeyId :: Lens' StreamInfo (Maybe Text)

-- | The name of the device that is associated with the stream.
streamInfo_deviceName :: Lens' StreamInfo (Maybe Text)

-- | The version of the stream.
streamInfo_version :: Lens' StreamInfo (Maybe Text)

-- | The name of the stream.
streamInfo_streamName :: Lens' StreamInfo (Maybe Text)

-- | Specifies the condition that streams must satisfy to be returned when
--   you list streams (see the <tt>ListStreams</tt> API). A condition has a
--   comparison operation and a value. Currently, you can specify only the
--   <tt>BEGINS_WITH</tt> operator, which finds streams whose names start
--   with a given prefix.
--   
--   <i>See:</i> <a>newStreamNameCondition</a> smart constructor.
data StreamNameCondition
StreamNameCondition' :: Maybe ComparisonOperator -> Maybe Text -> StreamNameCondition

-- | A comparison operator. Currently, you can specify only the
--   <tt>BEGINS_WITH</tt> operator, which finds streams whose names start
--   with a given prefix.
[$sel:comparisonOperator:StreamNameCondition'] :: StreamNameCondition -> Maybe ComparisonOperator

-- | A value to compare.
[$sel:comparisonValue:StreamNameCondition'] :: StreamNameCondition -> Maybe Text

-- | Create a value of <a>StreamNameCondition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:comparisonOperator:StreamNameCondition'</a>,
--   <a>streamNameCondition_comparisonOperator</a> - A comparison operator.
--   Currently, you can specify only the <tt>BEGINS_WITH</tt> operator,
--   which finds streams whose names start with a given prefix.
--   
--   <a>$sel:comparisonValue:StreamNameCondition'</a>,
--   <a>streamNameCondition_comparisonValue</a> - A value to compare.
newStreamNameCondition :: StreamNameCondition

-- | A comparison operator. Currently, you can specify only the
--   <tt>BEGINS_WITH</tt> operator, which finds streams whose names start
--   with a given prefix.
streamNameCondition_comparisonOperator :: Lens' StreamNameCondition (Maybe ComparisonOperator)

-- | A value to compare.
streamNameCondition_comparisonValue :: Lens' StreamNameCondition (Maybe Text)

-- | A key and value pair that is associated with the specified signaling
--   channel.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | The key of the tag that is associated with the specified signaling
--   channel.
[$sel:key:Tag'] :: Tag -> Text

-- | The value of the tag that is associated with the specified signaling
--   channel.
[$sel:value:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The key of the tag that is
--   associated with the specified signaling channel.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The value of the tag that
--   is associated with the specified signaling channel.
newTag :: Text -> Text -> Tag

-- | The key of the tag that is associated with the specified signaling
--   channel.
tag_key :: Lens' Tag Text

-- | The value of the tag that is associated with the specified signaling
--   channel.
tag_value :: Lens' Tag Text


-- | Adds one or more tags to a stream. A <i>tag</i> is a key-value pair
--   (the value is optional) that you can define and assign to AWS
--   resources. If you specify a tag that already exists, the tag value is
--   replaced with the value that you specify in the request. For more
--   information, see <a>Using Cost Allocation Tags</a> in the <i>AWS
--   Billing and Cost Management User Guide</i>.
--   
--   You must provide either the <tt>StreamName</tt> or the
--   <tt>StreamARN</tt>.
--   
--   This operation requires permission for the
--   <tt>KinesisVideo:TagStream</tt> action.
--   
--   Kinesis video streams support up to 50 tags.
module Amazonka.KinesisVideo.TagStream

-- | <i>See:</i> <a>newTagStream</a> smart constructor.
data TagStream
TagStream' :: Maybe Text -> Maybe Text -> HashMap Text Text -> TagStream

-- | The Amazon Resource Name (ARN) of the resource that you want to add
--   the tag or tags to.
[$sel:streamARN:TagStream'] :: TagStream -> Maybe Text

-- | The name of the stream that you want to add the tag or tags to.
[$sel:streamName:TagStream'] :: TagStream -> Maybe Text

-- | A list of tags to associate with the specified stream. Each tag is a
--   key-value pair (the value is optional).
[$sel:tags:TagStream'] :: TagStream -> HashMap Text Text

-- | Create a value of <a>TagStream</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:TagStream'</a>, <a>tagStream_streamARN</a> - The
--   Amazon Resource Name (ARN) of the resource that you want to add the
--   tag or tags to.
--   
--   <a>$sel:streamName:TagStream'</a>, <a>tagStream_streamName</a> - The
--   name of the stream that you want to add the tag or tags to.
--   
--   <a>$sel:tags:TagStream'</a>, <a>tagStream_tags</a> - A list of tags to
--   associate with the specified stream. Each tag is a key-value pair (the
--   value is optional).
newTagStream :: TagStream

-- | The Amazon Resource Name (ARN) of the resource that you want to add
--   the tag or tags to.
tagStream_streamARN :: Lens' TagStream (Maybe Text)

-- | The name of the stream that you want to add the tag or tags to.
tagStream_streamName :: Lens' TagStream (Maybe Text)

-- | A list of tags to associate with the specified stream. Each tag is a
--   key-value pair (the value is optional).
tagStream_tags :: Lens' TagStream (HashMap Text Text)

-- | <i>See:</i> <a>newTagStreamResponse</a> smart constructor.
data TagStreamResponse
TagStreamResponse' :: Int -> TagStreamResponse

-- | The response's http status code.
[$sel:httpStatus:TagStreamResponse'] :: TagStreamResponse -> Int

-- | Create a value of <a>TagStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagStreamResponse'</a>,
--   <a>tagStreamResponse_httpStatus</a> - The response's http status code.
newTagStreamResponse :: Int -> TagStreamResponse

-- | The response's http status code.
tagStreamResponse_httpStatus :: Lens' TagStreamResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.TagStream.TagStream
instance GHC.Show.Show Amazonka.KinesisVideo.TagStream.TagStream
instance GHC.Read.Read Amazonka.KinesisVideo.TagStream.TagStream
instance GHC.Classes.Eq Amazonka.KinesisVideo.TagStream.TagStream
instance GHC.Generics.Generic Amazonka.KinesisVideo.TagStream.TagStreamResponse
instance GHC.Show.Show Amazonka.KinesisVideo.TagStream.TagStreamResponse
instance GHC.Read.Read Amazonka.KinesisVideo.TagStream.TagStreamResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.TagStream.TagStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.TagStream.TagStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.TagStream.TagStreamResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.TagStream.TagStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.TagStream.TagStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.TagStream.TagStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.TagStream.TagStream
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.TagStream.TagStream
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.TagStream.TagStream


-- | Adds one or more tags to a signaling channel. A <i>tag</i> is a
--   key-value pair (the value is optional) that you can define and assign
--   to AWS resources. If you specify a tag that already exists, the tag
--   value is replaced with the value that you specify in the request. For
--   more information, see <a>Using Cost Allocation Tags</a> in the <i>AWS
--   Billing and Cost Management User Guide</i>.
module Amazonka.KinesisVideo.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> NonEmpty Tag -> TagResource

-- | The Amazon Resource Name (ARN) of the signaling channel to which you
--   want to add tags.
[$sel:resourceARN:TagResource'] :: TagResource -> Text

-- | A list of tags to associate with the specified signaling channel. Each
--   tag is a key-value pair.
[$sel:tags:TagResource'] :: TagResource -> NonEmpty Tag

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceARN:TagResource'</a>, <a>tagResource_resourceARN</a> -
--   The Amazon Resource Name (ARN) of the signaling channel to which you
--   want to add tags.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - A list of
--   tags to associate with the specified signaling channel. Each tag is a
--   key-value pair.
newTagResource :: Text -> NonEmpty Tag -> TagResource

-- | The Amazon Resource Name (ARN) of the signaling channel to which you
--   want to add tags.
tagResource_resourceARN :: Lens' TagResource Text

-- | A list of tags to associate with the specified signaling channel. Each
--   tag is a key-value pair.
tagResource_tags :: Lens' TagResource (NonEmpty Tag)

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:TagResourceResponse'] :: TagResourceResponse -> Int

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.TagResource.TagResource
instance GHC.Show.Show Amazonka.KinesisVideo.TagResource.TagResource
instance GHC.Read.Read Amazonka.KinesisVideo.TagResource.TagResource
instance GHC.Classes.Eq Amazonka.KinesisVideo.TagResource.TagResource
instance GHC.Generics.Generic Amazonka.KinesisVideo.TagResource.TagResourceResponse
instance GHC.Show.Show Amazonka.KinesisVideo.TagResource.TagResourceResponse
instance GHC.Read.Read Amazonka.KinesisVideo.TagResource.TagResourceResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.TagResource.TagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.TagResource.TagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.TagResource.TagResource
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.TagResource.TagResource
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.TagResource.TagResource


-- | Returns a list of tags associated with the specified stream.
--   
--   In the request, you must specify either the <tt>StreamName</tt> or the
--   <tt>StreamARN</tt>.
module Amazonka.KinesisVideo.ListTagsForStream

-- | <i>See:</i> <a>newListTagsForStream</a> smart constructor.
data ListTagsForStream
ListTagsForStream' :: Maybe Text -> Maybe Text -> Maybe Text -> ListTagsForStream

-- | The Amazon Resource Name (ARN) of the stream that you want to list
--   tags for.
[$sel:streamARN:ListTagsForStream'] :: ListTagsForStream -> Maybe Text

-- | If you specify this parameter and the result of a
--   <tt>ListTagsForStream</tt> call is truncated, the response includes a
--   token that you can use in the next request to fetch the next batch of
--   tags.
[$sel:nextToken:ListTagsForStream'] :: ListTagsForStream -> Maybe Text

-- | The name of the stream that you want to list tags for.
[$sel:streamName:ListTagsForStream'] :: ListTagsForStream -> Maybe Text

-- | Create a value of <a>ListTagsForStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:ListTagsForStream'</a>,
--   <a>listTagsForStream_streamARN</a> - The Amazon Resource Name (ARN) of
--   the stream that you want to list tags for.
--   
--   <a>$sel:nextToken:ListTagsForStream'</a>,
--   <a>listTagsForStream_nextToken</a> - If you specify this parameter and
--   the result of a <tt>ListTagsForStream</tt> call is truncated, the
--   response includes a token that you can use in the next request to
--   fetch the next batch of tags.
--   
--   <a>$sel:streamName:ListTagsForStream'</a>,
--   <a>listTagsForStream_streamName</a> - The name of the stream that you
--   want to list tags for.
newListTagsForStream :: ListTagsForStream

-- | The Amazon Resource Name (ARN) of the stream that you want to list
--   tags for.
listTagsForStream_streamARN :: Lens' ListTagsForStream (Maybe Text)

-- | If you specify this parameter and the result of a
--   <tt>ListTagsForStream</tt> call is truncated, the response includes a
--   token that you can use in the next request to fetch the next batch of
--   tags.
listTagsForStream_nextToken :: Lens' ListTagsForStream (Maybe Text)

-- | The name of the stream that you want to list tags for.
listTagsForStream_streamName :: Lens' ListTagsForStream (Maybe Text)

-- | <i>See:</i> <a>newListTagsForStreamResponse</a> smart constructor.
data ListTagsForStreamResponse
ListTagsForStreamResponse' :: Maybe Text -> Maybe (HashMap Text Text) -> Int -> ListTagsForStreamResponse

-- | If you specify this parameter and the result of a <tt>ListTags</tt>
--   call is truncated, the response includes a token that you can use in
--   the next request to fetch the next set of tags.
[$sel:nextToken:ListTagsForStreamResponse'] :: ListTagsForStreamResponse -> Maybe Text

-- | A map of tag keys and values associated with the specified stream.
[$sel:tags:ListTagsForStreamResponse'] :: ListTagsForStreamResponse -> Maybe (HashMap Text Text)

-- | The response's http status code.
[$sel:httpStatus:ListTagsForStreamResponse'] :: ListTagsForStreamResponse -> Int

-- | Create a value of <a>ListTagsForStreamResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForStream'</a>,
--   <a>listTagsForStreamResponse_nextToken</a> - If you specify this
--   parameter and the result of a <tt>ListTags</tt> call is truncated, the
--   response includes a token that you can use in the next request to
--   fetch the next set of tags.
--   
--   <a>$sel:tags:ListTagsForStreamResponse'</a>,
--   <a>listTagsForStreamResponse_tags</a> - A map of tag keys and values
--   associated with the specified stream.
--   
--   <a>$sel:httpStatus:ListTagsForStreamResponse'</a>,
--   <a>listTagsForStreamResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForStreamResponse :: Int -> ListTagsForStreamResponse

-- | If you specify this parameter and the result of a <tt>ListTags</tt>
--   call is truncated, the response includes a token that you can use in
--   the next request to fetch the next set of tags.
listTagsForStreamResponse_nextToken :: Lens' ListTagsForStreamResponse (Maybe Text)

-- | A map of tag keys and values associated with the specified stream.
listTagsForStreamResponse_tags :: Lens' ListTagsForStreamResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
listTagsForStreamResponse_httpStatus :: Lens' ListTagsForStreamResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStream
instance GHC.Show.Show Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStream
instance GHC.Read.Read Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStream
instance GHC.Classes.Eq Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStream
instance GHC.Generics.Generic Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStreamResponse
instance GHC.Show.Show Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStreamResponse
instance GHC.Read.Read Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStreamResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStreamResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStream
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStream
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.ListTagsForStream.ListTagsForStream


-- | Returns a list of tags associated with the specified signaling
--   channel.
module Amazonka.KinesisVideo.ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Maybe Text -> Text -> ListTagsForResource

-- | If you specify this parameter and the result of a
--   <tt>ListTagsForResource</tt> call is truncated, the response includes
--   a token that you can use in the next request to fetch the next batch
--   of tags.
[$sel:nextToken:ListTagsForResource'] :: ListTagsForResource -> Maybe Text

-- | The Amazon Resource Name (ARN) of the signaling channel for which you
--   want to list tags.
[$sel:resourceARN:ListTagsForResource'] :: ListTagsForResource -> Text

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForResource'</a>,
--   <a>listTagsForResource_nextToken</a> - If you specify this parameter
--   and the result of a <tt>ListTagsForResource</tt> call is truncated,
--   the response includes a token that you can use in the next request to
--   fetch the next batch of tags.
--   
--   <a>$sel:resourceARN:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceARN</a> - The Amazon Resource Name
--   (ARN) of the signaling channel for which you want to list tags.
newListTagsForResource :: Text -> ListTagsForResource

-- | If you specify this parameter and the result of a
--   <tt>ListTagsForResource</tt> call is truncated, the response includes
--   a token that you can use in the next request to fetch the next batch
--   of tags.
listTagsForResource_nextToken :: Lens' ListTagsForResource (Maybe Text)

-- | The Amazon Resource Name (ARN) of the signaling channel for which you
--   want to list tags.
listTagsForResource_resourceARN :: Lens' ListTagsForResource Text

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe Text -> Maybe (HashMap Text Text) -> Int -> ListTagsForResourceResponse

-- | If you specify this parameter and the result of a
--   <tt>ListTagsForResource</tt> call is truncated, the response includes
--   a token that you can use in the next request to fetch the next set of
--   tags.
[$sel:nextToken:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe Text

-- | A map of tag keys and values associated with the specified signaling
--   channel.
[$sel:tags:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe (HashMap Text Text)

-- | The response's http status code.
[$sel:httpStatus:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Int

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForResource'</a>,
--   <a>listTagsForResourceResponse_nextToken</a> - If you specify this
--   parameter and the result of a <tt>ListTagsForResource</tt> call is
--   truncated, the response includes a token that you can use in the next
--   request to fetch the next set of tags.
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - A map of tag keys and values
--   associated with the specified signaling channel.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | If you specify this parameter and the result of a
--   <tt>ListTagsForResource</tt> call is truncated, the response includes
--   a token that you can use in the next request to fetch the next set of
--   tags.
listTagsForResourceResponse_nextToken :: Lens' ListTagsForResourceResponse (Maybe Text)

-- | A map of tag keys and values associated with the specified signaling
--   channel.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResource
instance GHC.Show.Show Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResource
instance GHC.Read.Read Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResource
instance GHC.Classes.Eq Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResource
instance GHC.Generics.Generic Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Show.Show Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Read.Read Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.ListTagsForResource.ListTagsForResource


-- | Returns an array of <tt>StreamInfo</tt> objects. Each object describes
--   a stream. To retrieve only streams that satisfy a specific condition,
--   you can specify a <tt>StreamNameCondition</tt>.
--   
--   This operation returns paginated results.
module Amazonka.KinesisVideo.ListStreams

-- | <i>See:</i> <a>newListStreams</a> smart constructor.
data ListStreams
ListStreams' :: Maybe Text -> Maybe StreamNameCondition -> Maybe Natural -> ListStreams

-- | If you specify this parameter, when the result of a
--   <tt>ListStreams</tt> operation is truncated, the call returns the
--   <tt>NextToken</tt> in the response. To get another batch of streams,
--   provide this token in your next request.
[$sel:nextToken:ListStreams'] :: ListStreams -> Maybe Text

-- | Optional: Returns only streams that satisfy a specific condition.
--   Currently, you can specify only the prefix of a stream name as a
--   condition.
[$sel:streamNameCondition:ListStreams'] :: ListStreams -> Maybe StreamNameCondition

-- | The maximum number of streams to return in the response. The default
--   is 10,000.
[$sel:maxResults:ListStreams'] :: ListStreams -> Maybe Natural

-- | Create a value of <a>ListStreams</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListStreams'</a>, <a>listStreams_nextToken</a> - If
--   you specify this parameter, when the result of a <tt>ListStreams</tt>
--   operation is truncated, the call returns the <tt>NextToken</tt> in the
--   response. To get another batch of streams, provide this token in your
--   next request.
--   
--   <a>$sel:streamNameCondition:ListStreams'</a>,
--   <a>listStreams_streamNameCondition</a> - Optional: Returns only
--   streams that satisfy a specific condition. Currently, you can specify
--   only the prefix of a stream name as a condition.
--   
--   <a>$sel:maxResults:ListStreams'</a>, <a>listStreams_maxResults</a> -
--   The maximum number of streams to return in the response. The default
--   is 10,000.
newListStreams :: ListStreams

-- | If you specify this parameter, when the result of a
--   <tt>ListStreams</tt> operation is truncated, the call returns the
--   <tt>NextToken</tt> in the response. To get another batch of streams,
--   provide this token in your next request.
listStreams_nextToken :: Lens' ListStreams (Maybe Text)

-- | Optional: Returns only streams that satisfy a specific condition.
--   Currently, you can specify only the prefix of a stream name as a
--   condition.
listStreams_streamNameCondition :: Lens' ListStreams (Maybe StreamNameCondition)

-- | The maximum number of streams to return in the response. The default
--   is 10,000.
listStreams_maxResults :: Lens' ListStreams (Maybe Natural)

-- | <i>See:</i> <a>newListStreamsResponse</a> smart constructor.
data ListStreamsResponse
ListStreamsResponse' :: Maybe [StreamInfo] -> Maybe Text -> Int -> ListStreamsResponse

-- | An array of <tt>StreamInfo</tt> objects.
[$sel:streamInfoList:ListStreamsResponse'] :: ListStreamsResponse -> Maybe [StreamInfo]

-- | If the response is truncated, the call returns this element with a
--   token. To get the next batch of streams, use this token in your next
--   request.
[$sel:nextToken:ListStreamsResponse'] :: ListStreamsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListStreamsResponse'] :: ListStreamsResponse -> Int

-- | Create a value of <a>ListStreamsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamInfoList:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_streamInfoList</a> - An array of
--   <tt>StreamInfo</tt> objects.
--   
--   <a>$sel:nextToken:ListStreams'</a>,
--   <a>listStreamsResponse_nextToken</a> - If the response is truncated,
--   the call returns this element with a token. To get the next batch of
--   streams, use this token in your next request.
--   
--   <a>$sel:httpStatus:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_httpStatus</a> - The response's http status
--   code.
newListStreamsResponse :: Int -> ListStreamsResponse

-- | An array of <tt>StreamInfo</tt> objects.
listStreamsResponse_streamInfoList :: Lens' ListStreamsResponse (Maybe [StreamInfo])

-- | If the response is truncated, the call returns this element with a
--   token. To get the next batch of streams, use this token in your next
--   request.
listStreamsResponse_nextToken :: Lens' ListStreamsResponse (Maybe Text)

-- | The response's http status code.
listStreamsResponse_httpStatus :: Lens' ListStreamsResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.ListStreams.ListStreams
instance GHC.Show.Show Amazonka.KinesisVideo.ListStreams.ListStreams
instance GHC.Read.Read Amazonka.KinesisVideo.ListStreams.ListStreams
instance GHC.Classes.Eq Amazonka.KinesisVideo.ListStreams.ListStreams
instance GHC.Generics.Generic Amazonka.KinesisVideo.ListStreams.ListStreamsResponse
instance GHC.Show.Show Amazonka.KinesisVideo.ListStreams.ListStreamsResponse
instance GHC.Read.Read Amazonka.KinesisVideo.ListStreams.ListStreamsResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.ListStreams.ListStreamsResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.ListStreams.ListStreams
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.ListStreams.ListStreamsResponse
instance Amazonka.Pager.AWSPager Amazonka.KinesisVideo.ListStreams.ListStreams
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.ListStreams.ListStreams
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.ListStreams.ListStreams
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.ListStreams.ListStreams
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.ListStreams.ListStreams
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.ListStreams.ListStreams
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.ListStreams.ListStreams


-- | Returns an array of <tt>ChannelInfo</tt> objects. Each object
--   describes a signaling channel. To retrieve only those channels that
--   satisfy a specific condition, you can specify a
--   <tt>ChannelNameCondition</tt>.
--   
--   This operation returns paginated results.
module Amazonka.KinesisVideo.ListSignalingChannels

-- | <i>See:</i> <a>newListSignalingChannels</a> smart constructor.
data ListSignalingChannels
ListSignalingChannels' :: Maybe ChannelNameCondition -> Maybe Text -> Maybe Natural -> ListSignalingChannels

-- | Optional: Returns only the channels that satisfy a specific condition.
[$sel:channelNameCondition:ListSignalingChannels'] :: ListSignalingChannels -> Maybe ChannelNameCondition

-- | If you specify this parameter, when the result of a
--   <tt>ListSignalingChannels</tt> operation is truncated, the call
--   returns the <tt>NextToken</tt> in the response. To get another batch
--   of channels, provide this token in your next request.
[$sel:nextToken:ListSignalingChannels'] :: ListSignalingChannels -> Maybe Text

-- | The maximum number of channels to return in the response. The default
--   is 500.
[$sel:maxResults:ListSignalingChannels'] :: ListSignalingChannels -> Maybe Natural

-- | Create a value of <a>ListSignalingChannels</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:channelNameCondition:ListSignalingChannels'</a>,
--   <a>listSignalingChannels_channelNameCondition</a> - Optional: Returns
--   only the channels that satisfy a specific condition.
--   
--   <a>$sel:nextToken:ListSignalingChannels'</a>,
--   <a>listSignalingChannels_nextToken</a> - If you specify this
--   parameter, when the result of a <tt>ListSignalingChannels</tt>
--   operation is truncated, the call returns the <tt>NextToken</tt> in the
--   response. To get another batch of channels, provide this token in your
--   next request.
--   
--   <a>$sel:maxResults:ListSignalingChannels'</a>,
--   <a>listSignalingChannels_maxResults</a> - The maximum number of
--   channels to return in the response. The default is 500.
newListSignalingChannels :: ListSignalingChannels

-- | Optional: Returns only the channels that satisfy a specific condition.
listSignalingChannels_channelNameCondition :: Lens' ListSignalingChannels (Maybe ChannelNameCondition)

-- | If you specify this parameter, when the result of a
--   <tt>ListSignalingChannels</tt> operation is truncated, the call
--   returns the <tt>NextToken</tt> in the response. To get another batch
--   of channels, provide this token in your next request.
listSignalingChannels_nextToken :: Lens' ListSignalingChannels (Maybe Text)

-- | The maximum number of channels to return in the response. The default
--   is 500.
listSignalingChannels_maxResults :: Lens' ListSignalingChannels (Maybe Natural)

-- | <i>See:</i> <a>newListSignalingChannelsResponse</a> smart constructor.
data ListSignalingChannelsResponse
ListSignalingChannelsResponse' :: Maybe [ChannelInfo] -> Maybe Text -> Int -> ListSignalingChannelsResponse

-- | An array of <tt>ChannelInfo</tt> objects.
[$sel:channelInfoList:ListSignalingChannelsResponse'] :: ListSignalingChannelsResponse -> Maybe [ChannelInfo]

-- | If the response is truncated, the call returns this element with a
--   token. To get the next batch of streams, use this token in your next
--   request.
[$sel:nextToken:ListSignalingChannelsResponse'] :: ListSignalingChannelsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListSignalingChannelsResponse'] :: ListSignalingChannelsResponse -> Int

-- | Create a value of <a>ListSignalingChannelsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:channelInfoList:ListSignalingChannelsResponse'</a>,
--   <a>listSignalingChannelsResponse_channelInfoList</a> - An array of
--   <tt>ChannelInfo</tt> objects.
--   
--   <a>$sel:nextToken:ListSignalingChannels'</a>,
--   <a>listSignalingChannelsResponse_nextToken</a> - If the response is
--   truncated, the call returns this element with a token. To get the next
--   batch of streams, use this token in your next request.
--   
--   <a>$sel:httpStatus:ListSignalingChannelsResponse'</a>,
--   <a>listSignalingChannelsResponse_httpStatus</a> - The response's http
--   status code.
newListSignalingChannelsResponse :: Int -> ListSignalingChannelsResponse

-- | An array of <tt>ChannelInfo</tt> objects.
listSignalingChannelsResponse_channelInfoList :: Lens' ListSignalingChannelsResponse (Maybe [ChannelInfo])

-- | If the response is truncated, the call returns this element with a
--   token. To get the next batch of streams, use this token in your next
--   request.
listSignalingChannelsResponse_nextToken :: Lens' ListSignalingChannelsResponse (Maybe Text)

-- | The response's http status code.
listSignalingChannelsResponse_httpStatus :: Lens' ListSignalingChannelsResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannels
instance GHC.Show.Show Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannels
instance GHC.Read.Read Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannels
instance GHC.Classes.Eq Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannels
instance GHC.Generics.Generic Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannelsResponse
instance GHC.Show.Show Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannelsResponse
instance GHC.Read.Read Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannelsResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannelsResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannels
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannelsResponse
instance Amazonka.Pager.AWSPager Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannels
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannels
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannels
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannels
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannels
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannels
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.ListSignalingChannels.ListSignalingChannels


-- | Provides an endpoint for the specified signaling channel to send and
--   receive messages. This API uses the
--   <tt>SingleMasterChannelEndpointConfiguration</tt> input parameter,
--   which consists of the <tt>Protocols</tt> and <tt>Role</tt> properties.
--   
--   <tt>Protocols</tt> is used to determine the communication mechanism.
--   For example, if you specify <tt>WSS</tt> as the protocol, this API
--   produces a secure websocket endpoint. If you specify <tt>HTTPS</tt> as
--   the protocol, this API generates an HTTPS endpoint.
--   
--   <tt>Role</tt> determines the messaging permissions. A <tt>MASTER</tt>
--   role results in this API generating an endpoint that a client can use
--   to communicate with any of the viewers on the channel. A
--   <tt>VIEWER</tt> role results in this API generating an endpoint that a
--   client can use to communicate only with a <tt>MASTER</tt>.
module Amazonka.KinesisVideo.GetSignalingChannelEndpoint

-- | <i>See:</i> <a>newGetSignalingChannelEndpoint</a> smart constructor.
data GetSignalingChannelEndpoint
GetSignalingChannelEndpoint' :: Maybe SingleMasterChannelEndpointConfiguration -> Text -> GetSignalingChannelEndpoint

-- | A structure containing the endpoint configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
[$sel:singleMasterChannelEndpointConfiguration:GetSignalingChannelEndpoint'] :: GetSignalingChannelEndpoint -> Maybe SingleMasterChannelEndpointConfiguration

-- | The Amazon Resource Name (ARN) of the signalling channel for which you
--   want to get an endpoint.
[$sel:channelARN:GetSignalingChannelEndpoint'] :: GetSignalingChannelEndpoint -> Text

-- | Create a value of <a>GetSignalingChannelEndpoint</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:singleMasterChannelEndpointConfiguration:GetSignalingChannelEndpoint'</a>,
--   <a>getSignalingChannelEndpoint_singleMasterChannelEndpointConfiguration</a>
--   - A structure containing the endpoint configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
--   
--   <a>$sel:channelARN:GetSignalingChannelEndpoint'</a>,
--   <a>getSignalingChannelEndpoint_channelARN</a> - The Amazon Resource
--   Name (ARN) of the signalling channel for which you want to get an
--   endpoint.
newGetSignalingChannelEndpoint :: Text -> GetSignalingChannelEndpoint

-- | A structure containing the endpoint configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
getSignalingChannelEndpoint_singleMasterChannelEndpointConfiguration :: Lens' GetSignalingChannelEndpoint (Maybe SingleMasterChannelEndpointConfiguration)

-- | The Amazon Resource Name (ARN) of the signalling channel for which you
--   want to get an endpoint.
getSignalingChannelEndpoint_channelARN :: Lens' GetSignalingChannelEndpoint Text

-- | <i>See:</i> <a>newGetSignalingChannelEndpointResponse</a> smart
--   constructor.
data GetSignalingChannelEndpointResponse
GetSignalingChannelEndpointResponse' :: Maybe [ResourceEndpointListItem] -> Int -> GetSignalingChannelEndpointResponse

-- | A list of endpoints for the specified signaling channel.
[$sel:resourceEndpointList:GetSignalingChannelEndpointResponse'] :: GetSignalingChannelEndpointResponse -> Maybe [ResourceEndpointListItem]

-- | The response's http status code.
[$sel:httpStatus:GetSignalingChannelEndpointResponse'] :: GetSignalingChannelEndpointResponse -> Int

-- | Create a value of <a>GetSignalingChannelEndpointResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceEndpointList:GetSignalingChannelEndpointResponse'</a>,
--   <a>getSignalingChannelEndpointResponse_resourceEndpointList</a> - A
--   list of endpoints for the specified signaling channel.
--   
--   <a>$sel:httpStatus:GetSignalingChannelEndpointResponse'</a>,
--   <a>getSignalingChannelEndpointResponse_httpStatus</a> - The response's
--   http status code.
newGetSignalingChannelEndpointResponse :: Int -> GetSignalingChannelEndpointResponse

-- | A list of endpoints for the specified signaling channel.
getSignalingChannelEndpointResponse_resourceEndpointList :: Lens' GetSignalingChannelEndpointResponse (Maybe [ResourceEndpointListItem])

-- | The response's http status code.
getSignalingChannelEndpointResponse_httpStatus :: Lens' GetSignalingChannelEndpointResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpoint
instance GHC.Show.Show Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpoint
instance GHC.Read.Read Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpoint
instance GHC.Classes.Eq Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpoint
instance GHC.Generics.Generic Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpointResponse
instance GHC.Show.Show Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpointResponse
instance GHC.Read.Read Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpointResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpointResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpoint
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpointResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpoint
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpoint
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpoint
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpoint
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpoint
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.GetSignalingChannelEndpoint.GetSignalingChannelEndpoint


-- | Gets an endpoint for a specified stream for either reading or writing.
--   Use this endpoint in your application to read from the specified
--   stream (using the <tt>GetMedia</tt> or
--   <tt>GetMediaForFragmentList</tt> operations) or write to it (using the
--   <tt>PutMedia</tt> operation).
--   
--   The returned endpoint does not have the API name appended. The client
--   needs to add the API name to the returned endpoint.
--   
--   In the request, specify the stream either by <tt>StreamName</tt> or
--   <tt>StreamARN</tt>.
module Amazonka.KinesisVideo.GetDataEndpoint

-- | <i>See:</i> <a>newGetDataEndpoint</a> smart constructor.
data GetDataEndpoint
GetDataEndpoint' :: Maybe Text -> Maybe Text -> APIName -> GetDataEndpoint

-- | The Amazon Resource Name (ARN) of the stream that you want to get the
--   endpoint for. You must specify either this parameter or a
--   <tt>StreamName</tt> in the request.
[$sel:streamARN:GetDataEndpoint'] :: GetDataEndpoint -> Maybe Text

-- | The name of the stream that you want to get the endpoint for. You must
--   specify either this parameter or a <tt>StreamARN</tt> in the request.
[$sel:streamName:GetDataEndpoint'] :: GetDataEndpoint -> Maybe Text

-- | The name of the API action for which to get an endpoint.
[$sel:aPIName:GetDataEndpoint'] :: GetDataEndpoint -> APIName

-- | Create a value of <a>GetDataEndpoint</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:GetDataEndpoint'</a>,
--   <a>getDataEndpoint_streamARN</a> - The Amazon Resource Name (ARN) of
--   the stream that you want to get the endpoint for. You must specify
--   either this parameter or a <tt>StreamName</tt> in the request.
--   
--   <a>$sel:streamName:GetDataEndpoint'</a>,
--   <a>getDataEndpoint_streamName</a> - The name of the stream that you
--   want to get the endpoint for. You must specify either this parameter
--   or a <tt>StreamARN</tt> in the request.
--   
--   <a>$sel:aPIName:GetDataEndpoint'</a>, <a>getDataEndpoint_aPIName</a> -
--   The name of the API action for which to get an endpoint.
newGetDataEndpoint :: APIName -> GetDataEndpoint

-- | The Amazon Resource Name (ARN) of the stream that you want to get the
--   endpoint for. You must specify either this parameter or a
--   <tt>StreamName</tt> in the request.
getDataEndpoint_streamARN :: Lens' GetDataEndpoint (Maybe Text)

-- | The name of the stream that you want to get the endpoint for. You must
--   specify either this parameter or a <tt>StreamARN</tt> in the request.
getDataEndpoint_streamName :: Lens' GetDataEndpoint (Maybe Text)

-- | The name of the API action for which to get an endpoint.
getDataEndpoint_aPIName :: Lens' GetDataEndpoint APIName

-- | <i>See:</i> <a>newGetDataEndpointResponse</a> smart constructor.
data GetDataEndpointResponse
GetDataEndpointResponse' :: Maybe Text -> Int -> GetDataEndpointResponse

-- | The endpoint value. To read data from the stream or to write data to
--   it, specify this endpoint in your application.
[$sel:dataEndpoint:GetDataEndpointResponse'] :: GetDataEndpointResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetDataEndpointResponse'] :: GetDataEndpointResponse -> Int

-- | Create a value of <a>GetDataEndpointResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataEndpoint:GetDataEndpointResponse'</a>,
--   <a>getDataEndpointResponse_dataEndpoint</a> - The endpoint value. To
--   read data from the stream or to write data to it, specify this
--   endpoint in your application.
--   
--   <a>$sel:httpStatus:GetDataEndpointResponse'</a>,
--   <a>getDataEndpointResponse_httpStatus</a> - The response's http status
--   code.
newGetDataEndpointResponse :: Int -> GetDataEndpointResponse

-- | The endpoint value. To read data from the stream or to write data to
--   it, specify this endpoint in your application.
getDataEndpointResponse_dataEndpoint :: Lens' GetDataEndpointResponse (Maybe Text)

-- | The response's http status code.
getDataEndpointResponse_httpStatus :: Lens' GetDataEndpointResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpoint
instance GHC.Show.Show Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpoint
instance GHC.Read.Read Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpoint
instance GHC.Classes.Eq Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpoint
instance GHC.Generics.Generic Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpointResponse
instance GHC.Show.Show Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpointResponse
instance GHC.Read.Read Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpointResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpointResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpoint
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpointResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpoint
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpoint
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpoint
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpoint
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpoint
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.GetDataEndpoint.GetDataEndpoint


-- | Returns the most current information about the specified stream. You
--   must specify either the <tt>StreamName</tt> or the <tt>StreamARN</tt>.
module Amazonka.KinesisVideo.DescribeStream

-- | <i>See:</i> <a>newDescribeStream</a> smart constructor.
data DescribeStream
DescribeStream' :: Maybe Text -> Maybe Text -> DescribeStream

-- | The Amazon Resource Name (ARN) of the stream.
[$sel:streamARN:DescribeStream'] :: DescribeStream -> Maybe Text

-- | The name of the stream.
[$sel:streamName:DescribeStream'] :: DescribeStream -> Maybe Text

-- | Create a value of <a>DescribeStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:DescribeStream'</a>, <a>describeStream_streamARN</a>
--   - The Amazon Resource Name (ARN) of the stream.
--   
--   <a>$sel:streamName:DescribeStream'</a>,
--   <a>describeStream_streamName</a> - The name of the stream.
newDescribeStream :: DescribeStream

-- | The Amazon Resource Name (ARN) of the stream.
describeStream_streamARN :: Lens' DescribeStream (Maybe Text)

-- | The name of the stream.
describeStream_streamName :: Lens' DescribeStream (Maybe Text)

-- | <i>See:</i> <a>newDescribeStreamResponse</a> smart constructor.
data DescribeStreamResponse
DescribeStreamResponse' :: Maybe StreamInfo -> Int -> DescribeStreamResponse

-- | An object that describes the stream.
[$sel:streamInfo:DescribeStreamResponse'] :: DescribeStreamResponse -> Maybe StreamInfo

-- | The response's http status code.
[$sel:httpStatus:DescribeStreamResponse'] :: DescribeStreamResponse -> Int

-- | Create a value of <a>DescribeStreamResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamInfo:DescribeStreamResponse'</a>,
--   <a>describeStreamResponse_streamInfo</a> - An object that describes
--   the stream.
--   
--   <a>$sel:httpStatus:DescribeStreamResponse'</a>,
--   <a>describeStreamResponse_httpStatus</a> - The response's http status
--   code.
newDescribeStreamResponse :: Int -> DescribeStreamResponse

-- | An object that describes the stream.
describeStreamResponse_streamInfo :: Lens' DescribeStreamResponse (Maybe StreamInfo)

-- | The response's http status code.
describeStreamResponse_httpStatus :: Lens' DescribeStreamResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.DescribeStream.DescribeStream
instance GHC.Show.Show Amazonka.KinesisVideo.DescribeStream.DescribeStream
instance GHC.Read.Read Amazonka.KinesisVideo.DescribeStream.DescribeStream
instance GHC.Classes.Eq Amazonka.KinesisVideo.DescribeStream.DescribeStream
instance GHC.Generics.Generic Amazonka.KinesisVideo.DescribeStream.DescribeStreamResponse
instance GHC.Show.Show Amazonka.KinesisVideo.DescribeStream.DescribeStreamResponse
instance GHC.Read.Read Amazonka.KinesisVideo.DescribeStream.DescribeStreamResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.DescribeStream.DescribeStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.DescribeStream.DescribeStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.DescribeStream.DescribeStreamResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.DescribeStream.DescribeStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.DescribeStream.DescribeStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.DescribeStream.DescribeStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.DescribeStream.DescribeStream
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.DescribeStream.DescribeStream
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.DescribeStream.DescribeStream


-- | Returns the most current information about the signaling channel. You
--   must specify either the name or the Amazon Resource Name (ARN) of the
--   channel that you want to describe.
module Amazonka.KinesisVideo.DescribeSignalingChannel

-- | <i>See:</i> <a>newDescribeSignalingChannel</a> smart constructor.
data DescribeSignalingChannel
DescribeSignalingChannel' :: Maybe Text -> Maybe Text -> DescribeSignalingChannel

-- | The ARN of the signaling channel that you want to describe.
[$sel:channelARN:DescribeSignalingChannel'] :: DescribeSignalingChannel -> Maybe Text

-- | The name of the signaling channel that you want to describe.
[$sel:channelName:DescribeSignalingChannel'] :: DescribeSignalingChannel -> Maybe Text

-- | Create a value of <a>DescribeSignalingChannel</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:channelARN:DescribeSignalingChannel'</a>,
--   <a>describeSignalingChannel_channelARN</a> - The ARN of the signaling
--   channel that you want to describe.
--   
--   <a>$sel:channelName:DescribeSignalingChannel'</a>,
--   <a>describeSignalingChannel_channelName</a> - The name of the
--   signaling channel that you want to describe.
newDescribeSignalingChannel :: DescribeSignalingChannel

-- | The ARN of the signaling channel that you want to describe.
describeSignalingChannel_channelARN :: Lens' DescribeSignalingChannel (Maybe Text)

-- | The name of the signaling channel that you want to describe.
describeSignalingChannel_channelName :: Lens' DescribeSignalingChannel (Maybe Text)

-- | <i>See:</i> <a>newDescribeSignalingChannelResponse</a> smart
--   constructor.
data DescribeSignalingChannelResponse
DescribeSignalingChannelResponse' :: Maybe ChannelInfo -> Int -> DescribeSignalingChannelResponse

-- | A structure that encapsulates the specified signaling channel's
--   metadata and properties.
[$sel:channelInfo:DescribeSignalingChannelResponse'] :: DescribeSignalingChannelResponse -> Maybe ChannelInfo

-- | The response's http status code.
[$sel:httpStatus:DescribeSignalingChannelResponse'] :: DescribeSignalingChannelResponse -> Int

-- | Create a value of <a>DescribeSignalingChannelResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:channelInfo:DescribeSignalingChannelResponse'</a>,
--   <a>describeSignalingChannelResponse_channelInfo</a> - A structure that
--   encapsulates the specified signaling channel's metadata and
--   properties.
--   
--   <a>$sel:httpStatus:DescribeSignalingChannelResponse'</a>,
--   <a>describeSignalingChannelResponse_httpStatus</a> - The response's
--   http status code.
newDescribeSignalingChannelResponse :: Int -> DescribeSignalingChannelResponse

-- | A structure that encapsulates the specified signaling channel's
--   metadata and properties.
describeSignalingChannelResponse_channelInfo :: Lens' DescribeSignalingChannelResponse (Maybe ChannelInfo)

-- | The response's http status code.
describeSignalingChannelResponse_httpStatus :: Lens' DescribeSignalingChannelResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannel
instance GHC.Show.Show Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannel
instance GHC.Read.Read Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannel
instance GHC.Classes.Eq Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannel
instance GHC.Generics.Generic Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannelResponse
instance GHC.Show.Show Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannelResponse
instance GHC.Read.Read Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannelResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannelResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannel
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannelResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannel
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannel
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannel
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannel
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannel
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.DescribeSignalingChannel.DescribeSignalingChannel


-- | Deletes a Kinesis video stream and the data contained in the stream.
--   
--   This method marks the stream for deletion, and makes the data in the
--   stream inaccessible immediately.
--   
--   To ensure that you have the latest version of the stream before
--   deleting it, you can specify the stream version. Kinesis Video Streams
--   assigns a version to each stream. When you update a stream, Kinesis
--   Video Streams assigns a new version number. To get the latest stream
--   version, use the <tt>DescribeStream</tt> API.
--   
--   This operation requires permission for the
--   <tt>KinesisVideo:DeleteStream</tt> action.
module Amazonka.KinesisVideo.DeleteStream

-- | <i>See:</i> <a>newDeleteStream</a> smart constructor.
data DeleteStream
DeleteStream' :: Maybe Text -> Text -> DeleteStream

-- | Optional: The version of the stream that you want to delete.
--   
--   Specify the version as a safeguard to ensure that your are deleting
--   the correct stream. To get the stream version, use the
--   <tt>DescribeStream</tt> API.
--   
--   If not specified, only the <tt>CreationTime</tt> is checked before
--   deleting the stream.
[$sel:currentVersion:DeleteStream'] :: DeleteStream -> Maybe Text

-- | The Amazon Resource Name (ARN) of the stream that you want to delete.
[$sel:streamARN:DeleteStream'] :: DeleteStream -> Text

-- | Create a value of <a>DeleteStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:currentVersion:DeleteStream'</a>,
--   <a>deleteStream_currentVersion</a> - Optional: The version of the
--   stream that you want to delete.
--   
--   Specify the version as a safeguard to ensure that your are deleting
--   the correct stream. To get the stream version, use the
--   <tt>DescribeStream</tt> API.
--   
--   If not specified, only the <tt>CreationTime</tt> is checked before
--   deleting the stream.
--   
--   <a>$sel:streamARN:DeleteStream'</a>, <a>deleteStream_streamARN</a> -
--   The Amazon Resource Name (ARN) of the stream that you want to delete.
newDeleteStream :: Text -> DeleteStream

-- | Optional: The version of the stream that you want to delete.
--   
--   Specify the version as a safeguard to ensure that your are deleting
--   the correct stream. To get the stream version, use the
--   <tt>DescribeStream</tt> API.
--   
--   If not specified, only the <tt>CreationTime</tt> is checked before
--   deleting the stream.
deleteStream_currentVersion :: Lens' DeleteStream (Maybe Text)

-- | The Amazon Resource Name (ARN) of the stream that you want to delete.
deleteStream_streamARN :: Lens' DeleteStream Text

-- | <i>See:</i> <a>newDeleteStreamResponse</a> smart constructor.
data DeleteStreamResponse
DeleteStreamResponse' :: Int -> DeleteStreamResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteStreamResponse'] :: DeleteStreamResponse -> Int

-- | Create a value of <a>DeleteStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteStreamResponse'</a>,
--   <a>deleteStreamResponse_httpStatus</a> - The response's http status
--   code.
newDeleteStreamResponse :: Int -> DeleteStreamResponse

-- | The response's http status code.
deleteStreamResponse_httpStatus :: Lens' DeleteStreamResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.DeleteStream.DeleteStream
instance GHC.Show.Show Amazonka.KinesisVideo.DeleteStream.DeleteStream
instance GHC.Read.Read Amazonka.KinesisVideo.DeleteStream.DeleteStream
instance GHC.Classes.Eq Amazonka.KinesisVideo.DeleteStream.DeleteStream
instance GHC.Generics.Generic Amazonka.KinesisVideo.DeleteStream.DeleteStreamResponse
instance GHC.Show.Show Amazonka.KinesisVideo.DeleteStream.DeleteStreamResponse
instance GHC.Read.Read Amazonka.KinesisVideo.DeleteStream.DeleteStreamResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.DeleteStream.DeleteStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.DeleteStream.DeleteStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.DeleteStream.DeleteStreamResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.DeleteStream.DeleteStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.DeleteStream.DeleteStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.DeleteStream.DeleteStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.DeleteStream.DeleteStream
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.DeleteStream.DeleteStream
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.DeleteStream.DeleteStream


-- | Deletes a specified signaling channel. <tt>DeleteSignalingChannel</tt>
--   is an asynchronous operation. If you don't specify the channel's
--   current version, the most recent version is deleted.
module Amazonka.KinesisVideo.DeleteSignalingChannel

-- | <i>See:</i> <a>newDeleteSignalingChannel</a> smart constructor.
data DeleteSignalingChannel
DeleteSignalingChannel' :: Maybe Text -> Text -> DeleteSignalingChannel

-- | The current version of the signaling channel that you want to delete.
--   You can obtain the current version by invoking the
--   <tt>DescribeSignalingChannel</tt> or <tt>ListSignalingChannels</tt>
--   API operations.
[$sel:currentVersion:DeleteSignalingChannel'] :: DeleteSignalingChannel -> Maybe Text

-- | The Amazon Resource Name (ARN) of the signaling channel that you want
--   to delete.
[$sel:channelARN:DeleteSignalingChannel'] :: DeleteSignalingChannel -> Text

-- | Create a value of <a>DeleteSignalingChannel</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:currentVersion:DeleteSignalingChannel'</a>,
--   <a>deleteSignalingChannel_currentVersion</a> - The current version of
--   the signaling channel that you want to delete. You can obtain the
--   current version by invoking the <tt>DescribeSignalingChannel</tt> or
--   <tt>ListSignalingChannels</tt> API operations.
--   
--   <a>$sel:channelARN:DeleteSignalingChannel'</a>,
--   <a>deleteSignalingChannel_channelARN</a> - The Amazon Resource Name
--   (ARN) of the signaling channel that you want to delete.
newDeleteSignalingChannel :: Text -> DeleteSignalingChannel

-- | The current version of the signaling channel that you want to delete.
--   You can obtain the current version by invoking the
--   <tt>DescribeSignalingChannel</tt> or <tt>ListSignalingChannels</tt>
--   API operations.
deleteSignalingChannel_currentVersion :: Lens' DeleteSignalingChannel (Maybe Text)

-- | The Amazon Resource Name (ARN) of the signaling channel that you want
--   to delete.
deleteSignalingChannel_channelARN :: Lens' DeleteSignalingChannel Text

-- | <i>See:</i> <a>newDeleteSignalingChannelResponse</a> smart
--   constructor.
data DeleteSignalingChannelResponse
DeleteSignalingChannelResponse' :: Int -> DeleteSignalingChannelResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteSignalingChannelResponse'] :: DeleteSignalingChannelResponse -> Int

-- | Create a value of <a>DeleteSignalingChannelResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteSignalingChannelResponse'</a>,
--   <a>deleteSignalingChannelResponse_httpStatus</a> - The response's http
--   status code.
newDeleteSignalingChannelResponse :: Int -> DeleteSignalingChannelResponse

-- | The response's http status code.
deleteSignalingChannelResponse_httpStatus :: Lens' DeleteSignalingChannelResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannel
instance GHC.Show.Show Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannel
instance GHC.Read.Read Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannel
instance GHC.Classes.Eq Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannel
instance GHC.Generics.Generic Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannelResponse
instance GHC.Show.Show Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannelResponse
instance GHC.Read.Read Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannelResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannelResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannel
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannelResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannel
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannel
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannel
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannel
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannel
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.DeleteSignalingChannel.DeleteSignalingChannel


-- | Creates a new Kinesis video stream.
--   
--   When you create a new stream, Kinesis Video Streams assigns it a
--   version number. When you change the stream's metadata, Kinesis Video
--   Streams updates the version.
--   
--   <tt>CreateStream</tt> is an asynchronous operation.
--   
--   For information about how the service works, see <a>How it Works</a>.
--   
--   You must have permissions for the <tt>KinesisVideo:CreateStream</tt>
--   action.
module Amazonka.KinesisVideo.CreateStream

-- | <i>See:</i> <a>newCreateStream</a> smart constructor.
data CreateStream
CreateStream' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe Text -> Maybe (HashMap Text Text) -> Text -> CreateStream

-- | The media type of the stream. Consumers of the stream can use this
--   information when processing the stream. For more information about
--   media types, see <a>Media Types</a>. If you choose to specify the
--   <tt>MediaType</tt>, see <a>Naming Requirements</a> for guidelines.
--   
--   Example valid values include "video/h264" and "video/h264,audio/aac".
--   
--   This parameter is optional; the default value is <tt>null</tt> (or
--   empty in JSON).
[$sel:mediaType:CreateStream'] :: CreateStream -> Maybe Text

-- | The number of hours that you want to retain the data in the stream.
--   Kinesis Video Streams retains the data in a data store that is
--   associated with the stream.
--   
--   The default value is 0, indicating that the stream does not persist
--   data.
--   
--   When the <tt>DataRetentionInHours</tt> value is 0, consumers can still
--   consume the fragments that remain in the service host buffer, which
--   has a retention time limit of 5 minutes and a retention memory limit
--   of 200 MB. Fragments are removed from the buffer when either limit is
--   reached.
[$sel:dataRetentionInHours:CreateStream'] :: CreateStream -> Maybe Natural

-- | The ID of the AWS Key Management Service (AWS KMS) key that you want
--   Kinesis Video Streams to use to encrypt stream data.
--   
--   If no key ID is specified, the default, Kinesis Video-managed key
--   (<tt>aws/kinesisvideo</tt>) is used.
--   
--   For more information, see <a>DescribeKey</a>.
[$sel:kmsKeyId:CreateStream'] :: CreateStream -> Maybe Text

-- | The name of the device that is writing to the stream.
--   
--   In the current implementation, Kinesis Video Streams does not use this
--   name.
[$sel:deviceName:CreateStream'] :: CreateStream -> Maybe Text

-- | A list of tags to associate with the specified stream. Each tag is a
--   key-value pair (the value is optional).
[$sel:tags:CreateStream'] :: CreateStream -> Maybe (HashMap Text Text)

-- | A name for the stream that you are creating.
--   
--   The stream name is an identifier for the stream, and must be unique
--   for each account and region.
[$sel:streamName:CreateStream'] :: CreateStream -> Text

-- | Create a value of <a>CreateStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mediaType:CreateStream'</a>, <a>createStream_mediaType</a> -
--   The media type of the stream. Consumers of the stream can use this
--   information when processing the stream. For more information about
--   media types, see <a>Media Types</a>. If you choose to specify the
--   <tt>MediaType</tt>, see <a>Naming Requirements</a> for guidelines.
--   
--   Example valid values include "video/h264" and "video/h264,audio/aac".
--   
--   This parameter is optional; the default value is <tt>null</tt> (or
--   empty in JSON).
--   
--   <a>$sel:dataRetentionInHours:CreateStream'</a>,
--   <a>createStream_dataRetentionInHours</a> - The number of hours that
--   you want to retain the data in the stream. Kinesis Video Streams
--   retains the data in a data store that is associated with the stream.
--   
--   The default value is 0, indicating that the stream does not persist
--   data.
--   
--   When the <tt>DataRetentionInHours</tt> value is 0, consumers can still
--   consume the fragments that remain in the service host buffer, which
--   has a retention time limit of 5 minutes and a retention memory limit
--   of 200 MB. Fragments are removed from the buffer when either limit is
--   reached.
--   
--   <a>$sel:kmsKeyId:CreateStream'</a>, <a>createStream_kmsKeyId</a> - The
--   ID of the AWS Key Management Service (AWS KMS) key that you want
--   Kinesis Video Streams to use to encrypt stream data.
--   
--   If no key ID is specified, the default, Kinesis Video-managed key
--   (<tt>aws/kinesisvideo</tt>) is used.
--   
--   For more information, see <a>DescribeKey</a>.
--   
--   <a>$sel:deviceName:CreateStream'</a>, <a>createStream_deviceName</a> -
--   The name of the device that is writing to the stream.
--   
--   In the current implementation, Kinesis Video Streams does not use this
--   name.
--   
--   <a>$sel:tags:CreateStream'</a>, <a>createStream_tags</a> - A list of
--   tags to associate with the specified stream. Each tag is a key-value
--   pair (the value is optional).
--   
--   <a>$sel:streamName:CreateStream'</a>, <a>createStream_streamName</a> -
--   A name for the stream that you are creating.
--   
--   The stream name is an identifier for the stream, and must be unique
--   for each account and region.
newCreateStream :: Text -> CreateStream

-- | The media type of the stream. Consumers of the stream can use this
--   information when processing the stream. For more information about
--   media types, see <a>Media Types</a>. If you choose to specify the
--   <tt>MediaType</tt>, see <a>Naming Requirements</a> for guidelines.
--   
--   Example valid values include "video/h264" and "video/h264,audio/aac".
--   
--   This parameter is optional; the default value is <tt>null</tt> (or
--   empty in JSON).
createStream_mediaType :: Lens' CreateStream (Maybe Text)

-- | The number of hours that you want to retain the data in the stream.
--   Kinesis Video Streams retains the data in a data store that is
--   associated with the stream.
--   
--   The default value is 0, indicating that the stream does not persist
--   data.
--   
--   When the <tt>DataRetentionInHours</tt> value is 0, consumers can still
--   consume the fragments that remain in the service host buffer, which
--   has a retention time limit of 5 minutes and a retention memory limit
--   of 200 MB. Fragments are removed from the buffer when either limit is
--   reached.
createStream_dataRetentionInHours :: Lens' CreateStream (Maybe Natural)

-- | The ID of the AWS Key Management Service (AWS KMS) key that you want
--   Kinesis Video Streams to use to encrypt stream data.
--   
--   If no key ID is specified, the default, Kinesis Video-managed key
--   (<tt>aws/kinesisvideo</tt>) is used.
--   
--   For more information, see <a>DescribeKey</a>.
createStream_kmsKeyId :: Lens' CreateStream (Maybe Text)

-- | The name of the device that is writing to the stream.
--   
--   In the current implementation, Kinesis Video Streams does not use this
--   name.
createStream_deviceName :: Lens' CreateStream (Maybe Text)

-- | A list of tags to associate with the specified stream. Each tag is a
--   key-value pair (the value is optional).
createStream_tags :: Lens' CreateStream (Maybe (HashMap Text Text))

-- | A name for the stream that you are creating.
--   
--   The stream name is an identifier for the stream, and must be unique
--   for each account and region.
createStream_streamName :: Lens' CreateStream Text

-- | <i>See:</i> <a>newCreateStreamResponse</a> smart constructor.
data CreateStreamResponse
CreateStreamResponse' :: Maybe Text -> Int -> CreateStreamResponse

-- | The Amazon Resource Name (ARN) of the stream.
[$sel:streamARN:CreateStreamResponse'] :: CreateStreamResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateStreamResponse'] :: CreateStreamResponse -> Int

-- | Create a value of <a>CreateStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:CreateStreamResponse'</a>,
--   <a>createStreamResponse_streamARN</a> - The Amazon Resource Name (ARN)
--   of the stream.
--   
--   <a>$sel:httpStatus:CreateStreamResponse'</a>,
--   <a>createStreamResponse_httpStatus</a> - The response's http status
--   code.
newCreateStreamResponse :: Int -> CreateStreamResponse

-- | The Amazon Resource Name (ARN) of the stream.
createStreamResponse_streamARN :: Lens' CreateStreamResponse (Maybe Text)

-- | The response's http status code.
createStreamResponse_httpStatus :: Lens' CreateStreamResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.CreateStream.CreateStream
instance GHC.Show.Show Amazonka.KinesisVideo.CreateStream.CreateStream
instance GHC.Read.Read Amazonka.KinesisVideo.CreateStream.CreateStream
instance GHC.Classes.Eq Amazonka.KinesisVideo.CreateStream.CreateStream
instance GHC.Generics.Generic Amazonka.KinesisVideo.CreateStream.CreateStreamResponse
instance GHC.Show.Show Amazonka.KinesisVideo.CreateStream.CreateStreamResponse
instance GHC.Read.Read Amazonka.KinesisVideo.CreateStream.CreateStreamResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.CreateStream.CreateStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.CreateStream.CreateStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.CreateStream.CreateStreamResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.CreateStream.CreateStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.CreateStream.CreateStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.CreateStream.CreateStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.CreateStream.CreateStream
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.CreateStream.CreateStream
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.CreateStream.CreateStream


-- | Creates a signaling channel.
--   
--   <tt>CreateSignalingChannel</tt> is an asynchronous operation.
module Amazonka.KinesisVideo.CreateSignalingChannel

-- | <i>See:</i> <a>newCreateSignalingChannel</a> smart constructor.
data CreateSignalingChannel
CreateSignalingChannel' :: Maybe SingleMasterConfiguration -> Maybe ChannelType -> Maybe [Tag] -> Text -> CreateSignalingChannel

-- | A structure containing the configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
[$sel:singleMasterConfiguration:CreateSignalingChannel'] :: CreateSignalingChannel -> Maybe SingleMasterConfiguration

-- | A type of the signaling channel that you are creating. Currently,
--   <tt>SINGLE_MASTER</tt> is the only supported channel type.
[$sel:channelType:CreateSignalingChannel'] :: CreateSignalingChannel -> Maybe ChannelType

-- | A set of tags (key-value pairs) that you want to associate with this
--   channel.
[$sel:tags:CreateSignalingChannel'] :: CreateSignalingChannel -> Maybe [Tag]

-- | A name for the signaling channel that you are creating. It must be
--   unique for each AWS account and AWS Region.
[$sel:channelName:CreateSignalingChannel'] :: CreateSignalingChannel -> Text

-- | Create a value of <a>CreateSignalingChannel</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:singleMasterConfiguration:CreateSignalingChannel'</a>,
--   <a>createSignalingChannel_singleMasterConfiguration</a> - A structure
--   containing the configuration for the <tt>SINGLE_MASTER</tt> channel
--   type.
--   
--   <a>$sel:channelType:CreateSignalingChannel'</a>,
--   <a>createSignalingChannel_channelType</a> - A type of the signaling
--   channel that you are creating. Currently, <tt>SINGLE_MASTER</tt> is
--   the only supported channel type.
--   
--   <a>$sel:tags:CreateSignalingChannel'</a>,
--   <a>createSignalingChannel_tags</a> - A set of tags (key-value pairs)
--   that you want to associate with this channel.
--   
--   <a>$sel:channelName:CreateSignalingChannel'</a>,
--   <a>createSignalingChannel_channelName</a> - A name for the signaling
--   channel that you are creating. It must be unique for each AWS account
--   and AWS Region.
newCreateSignalingChannel :: Text -> CreateSignalingChannel

-- | A structure containing the configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
createSignalingChannel_singleMasterConfiguration :: Lens' CreateSignalingChannel (Maybe SingleMasterConfiguration)

-- | A type of the signaling channel that you are creating. Currently,
--   <tt>SINGLE_MASTER</tt> is the only supported channel type.
createSignalingChannel_channelType :: Lens' CreateSignalingChannel (Maybe ChannelType)

-- | A set of tags (key-value pairs) that you want to associate with this
--   channel.
createSignalingChannel_tags :: Lens' CreateSignalingChannel (Maybe [Tag])

-- | A name for the signaling channel that you are creating. It must be
--   unique for each AWS account and AWS Region.
createSignalingChannel_channelName :: Lens' CreateSignalingChannel Text

-- | <i>See:</i> <a>newCreateSignalingChannelResponse</a> smart
--   constructor.
data CreateSignalingChannelResponse
CreateSignalingChannelResponse' :: Maybe Text -> Int -> CreateSignalingChannelResponse

-- | The Amazon Resource Name (ARN) of the created channel.
[$sel:channelARN:CreateSignalingChannelResponse'] :: CreateSignalingChannelResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateSignalingChannelResponse'] :: CreateSignalingChannelResponse -> Int

-- | Create a value of <a>CreateSignalingChannelResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:channelARN:CreateSignalingChannelResponse'</a>,
--   <a>createSignalingChannelResponse_channelARN</a> - The Amazon Resource
--   Name (ARN) of the created channel.
--   
--   <a>$sel:httpStatus:CreateSignalingChannelResponse'</a>,
--   <a>createSignalingChannelResponse_httpStatus</a> - The response's http
--   status code.
newCreateSignalingChannelResponse :: Int -> CreateSignalingChannelResponse

-- | The Amazon Resource Name (ARN) of the created channel.
createSignalingChannelResponse_channelARN :: Lens' CreateSignalingChannelResponse (Maybe Text)

-- | The response's http status code.
createSignalingChannelResponse_httpStatus :: Lens' CreateSignalingChannelResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannel
instance GHC.Show.Show Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannel
instance GHC.Read.Read Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannel
instance GHC.Classes.Eq Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannel
instance GHC.Generics.Generic Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannelResponse
instance GHC.Show.Show Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannelResponse
instance GHC.Read.Read Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannelResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannelResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannel
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannelResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannel
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannel
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannel
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannel
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannel
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.CreateSignalingChannel.CreateSignalingChannel


-- | Removes one or more tags from a signaling channel. In the request,
--   specify only a tag key or keys; don't specify the value. If you
--   specify a tag key that does not exist, it's ignored.
module Amazonka.KinesisVideo.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> NonEmpty Text -> UntagResource

-- | The Amazon Resource Name (ARN) of the signaling channel from which you
--   want to remove tags.
[$sel:resourceARN:UntagResource'] :: UntagResource -> Text

-- | A list of the keys of the tags that you want to remove.
[$sel:tagKeyList:UntagResource'] :: UntagResource -> NonEmpty Text

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceARN:UntagResource'</a>,
--   <a>untagResource_resourceARN</a> - The Amazon Resource Name (ARN) of
--   the signaling channel from which you want to remove tags.
--   
--   <a>$sel:tagKeyList:UntagResource'</a>, <a>untagResource_tagKeyList</a>
--   - A list of the keys of the tags that you want to remove.
newUntagResource :: Text -> NonEmpty Text -> UntagResource

-- | The Amazon Resource Name (ARN) of the signaling channel from which you
--   want to remove tags.
untagResource_resourceARN :: Lens' UntagResource Text

-- | A list of the keys of the tags that you want to remove.
untagResource_tagKeyList :: Lens' UntagResource (NonEmpty Text)

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:UntagResourceResponse'] :: UntagResourceResponse -> Int

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.UntagResource.UntagResource
instance GHC.Show.Show Amazonka.KinesisVideo.UntagResource.UntagResource
instance GHC.Read.Read Amazonka.KinesisVideo.UntagResource.UntagResource
instance GHC.Classes.Eq Amazonka.KinesisVideo.UntagResource.UntagResource
instance GHC.Generics.Generic Amazonka.KinesisVideo.UntagResource.UntagResourceResponse
instance GHC.Show.Show Amazonka.KinesisVideo.UntagResource.UntagResourceResponse
instance GHC.Read.Read Amazonka.KinesisVideo.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.UntagResource.UntagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.UntagResource.UntagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.UntagResource.UntagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.UntagResource.UntagResource
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.UntagResource.UntagResource
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.UntagResource.UntagResource


-- | Removes one or more tags from a stream. In the request, specify only a
--   tag key or keys; don't specify the value. If you specify a tag key
--   that does not exist, it's ignored.
--   
--   In the request, you must provide the <tt>StreamName</tt> or
--   <tt>StreamARN</tt>.
module Amazonka.KinesisVideo.UntagStream

-- | <i>See:</i> <a>newUntagStream</a> smart constructor.
data UntagStream
UntagStream' :: Maybe Text -> Maybe Text -> NonEmpty Text -> UntagStream

-- | The Amazon Resource Name (ARN) of the stream that you want to remove
--   tags from.
[$sel:streamARN:UntagStream'] :: UntagStream -> Maybe Text

-- | The name of the stream that you want to remove tags from.
[$sel:streamName:UntagStream'] :: UntagStream -> Maybe Text

-- | A list of the keys of the tags that you want to remove.
[$sel:tagKeyList:UntagStream'] :: UntagStream -> NonEmpty Text

-- | Create a value of <a>UntagStream</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:UntagStream'</a>, <a>untagStream_streamARN</a> - The
--   Amazon Resource Name (ARN) of the stream that you want to remove tags
--   from.
--   
--   <a>$sel:streamName:UntagStream'</a>, <a>untagStream_streamName</a> -
--   The name of the stream that you want to remove tags from.
--   
--   <a>$sel:tagKeyList:UntagStream'</a>, <a>untagStream_tagKeyList</a> - A
--   list of the keys of the tags that you want to remove.
newUntagStream :: NonEmpty Text -> UntagStream

-- | The Amazon Resource Name (ARN) of the stream that you want to remove
--   tags from.
untagStream_streamARN :: Lens' UntagStream (Maybe Text)

-- | The name of the stream that you want to remove tags from.
untagStream_streamName :: Lens' UntagStream (Maybe Text)

-- | A list of the keys of the tags that you want to remove.
untagStream_tagKeyList :: Lens' UntagStream (NonEmpty Text)

-- | <i>See:</i> <a>newUntagStreamResponse</a> smart constructor.
data UntagStreamResponse
UntagStreamResponse' :: Int -> UntagStreamResponse

-- | The response's http status code.
[$sel:httpStatus:UntagStreamResponse'] :: UntagStreamResponse -> Int

-- | Create a value of <a>UntagStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagStreamResponse'</a>,
--   <a>untagStreamResponse_httpStatus</a> - The response's http status
--   code.
newUntagStreamResponse :: Int -> UntagStreamResponse

-- | The response's http status code.
untagStreamResponse_httpStatus :: Lens' UntagStreamResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.UntagStream.UntagStream
instance GHC.Show.Show Amazonka.KinesisVideo.UntagStream.UntagStream
instance GHC.Read.Read Amazonka.KinesisVideo.UntagStream.UntagStream
instance GHC.Classes.Eq Amazonka.KinesisVideo.UntagStream.UntagStream
instance GHC.Generics.Generic Amazonka.KinesisVideo.UntagStream.UntagStreamResponse
instance GHC.Show.Show Amazonka.KinesisVideo.UntagStream.UntagStreamResponse
instance GHC.Read.Read Amazonka.KinesisVideo.UntagStream.UntagStreamResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.UntagStream.UntagStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.UntagStream.UntagStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.UntagStream.UntagStreamResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.UntagStream.UntagStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.UntagStream.UntagStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.UntagStream.UntagStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.UntagStream.UntagStream
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.UntagStream.UntagStream
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.UntagStream.UntagStream


-- | Increases or decreases the stream's data retention period by the value
--   that you specify. To indicate whether you want to increase or decrease
--   the data retention period, specify the <tt>Operation</tt> parameter in
--   the request body. In the request, you must specify either the
--   <tt>StreamName</tt> or the <tt>StreamARN</tt>.
--   
--   The retention period that you specify replaces the current value.
--   
--   This operation requires permission for the
--   <tt>KinesisVideo:UpdateDataRetention</tt> action.
--   
--   Changing the data retention period affects the data in the stream as
--   follows:
--   
--   <ul>
--   <li>If the data retention period is increased, existing data is
--   retained for the new retention period. For example, if the data
--   retention period is increased from one hour to seven hours, all
--   existing data is retained for seven hours.</li>
--   <li>If the data retention period is decreased, existing data is
--   retained for the new retention period. For example, if the data
--   retention period is decreased from seven hours to one hour, all
--   existing data is retained for one hour, and any data older than one
--   hour is deleted immediately.</li>
--   </ul>
module Amazonka.KinesisVideo.UpdateDataRetention

-- | <i>See:</i> <a>newUpdateDataRetention</a> smart constructor.
data UpdateDataRetention
UpdateDataRetention' :: Maybe Text -> Maybe Text -> Text -> UpdateDataRetentionOperation -> Natural -> UpdateDataRetention

-- | The Amazon Resource Name (ARN) of the stream whose retention period
--   you want to change.
[$sel:streamARN:UpdateDataRetention'] :: UpdateDataRetention -> Maybe Text

-- | The name of the stream whose retention period you want to change.
[$sel:streamName:UpdateDataRetention'] :: UpdateDataRetention -> Maybe Text

-- | The version of the stream whose retention period you want to change.
--   To get the version, call either the <tt>DescribeStream</tt> or the
--   <tt>ListStreams</tt> API.
[$sel:currentVersion:UpdateDataRetention'] :: UpdateDataRetention -> Text

-- | Indicates whether you want to increase or decrease the retention
--   period.
[$sel:operation:UpdateDataRetention'] :: UpdateDataRetention -> UpdateDataRetentionOperation

-- | The retention period, in hours. The value you specify replaces the
--   current value. The maximum value for this parameter is 87600 (ten
--   years).
[$sel:dataRetentionChangeInHours:UpdateDataRetention'] :: UpdateDataRetention -> Natural

-- | Create a value of <a>UpdateDataRetention</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:UpdateDataRetention'</a>,
--   <a>updateDataRetention_streamARN</a> - The Amazon Resource Name (ARN)
--   of the stream whose retention period you want to change.
--   
--   <a>$sel:streamName:UpdateDataRetention'</a>,
--   <a>updateDataRetention_streamName</a> - The name of the stream whose
--   retention period you want to change.
--   
--   <a>$sel:currentVersion:UpdateDataRetention'</a>,
--   <a>updateDataRetention_currentVersion</a> - The version of the stream
--   whose retention period you want to change. To get the version, call
--   either the <tt>DescribeStream</tt> or the <tt>ListStreams</tt> API.
--   
--   <a>$sel:operation:UpdateDataRetention'</a>,
--   <a>updateDataRetention_operation</a> - Indicates whether you want to
--   increase or decrease the retention period.
--   
--   <a>$sel:dataRetentionChangeInHours:UpdateDataRetention'</a>,
--   <a>updateDataRetention_dataRetentionChangeInHours</a> - The retention
--   period, in hours. The value you specify replaces the current value.
--   The maximum value for this parameter is 87600 (ten years).
newUpdateDataRetention :: Text -> UpdateDataRetentionOperation -> Natural -> UpdateDataRetention

-- | The Amazon Resource Name (ARN) of the stream whose retention period
--   you want to change.
updateDataRetention_streamARN :: Lens' UpdateDataRetention (Maybe Text)

-- | The name of the stream whose retention period you want to change.
updateDataRetention_streamName :: Lens' UpdateDataRetention (Maybe Text)

-- | The version of the stream whose retention period you want to change.
--   To get the version, call either the <tt>DescribeStream</tt> or the
--   <tt>ListStreams</tt> API.
updateDataRetention_currentVersion :: Lens' UpdateDataRetention Text

-- | Indicates whether you want to increase or decrease the retention
--   period.
updateDataRetention_operation :: Lens' UpdateDataRetention UpdateDataRetentionOperation

-- | The retention period, in hours. The value you specify replaces the
--   current value. The maximum value for this parameter is 87600 (ten
--   years).
updateDataRetention_dataRetentionChangeInHours :: Lens' UpdateDataRetention Natural

-- | <i>See:</i> <a>newUpdateDataRetentionResponse</a> smart constructor.
data UpdateDataRetentionResponse
UpdateDataRetentionResponse' :: Int -> UpdateDataRetentionResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateDataRetentionResponse'] :: UpdateDataRetentionResponse -> Int

-- | Create a value of <a>UpdateDataRetentionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateDataRetentionResponse'</a>,
--   <a>updateDataRetentionResponse_httpStatus</a> - The response's http
--   status code.
newUpdateDataRetentionResponse :: Int -> UpdateDataRetentionResponse

-- | The response's http status code.
updateDataRetentionResponse_httpStatus :: Lens' UpdateDataRetentionResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetention
instance GHC.Show.Show Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetention
instance GHC.Read.Read Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetention
instance GHC.Classes.Eq Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetention
instance GHC.Generics.Generic Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetentionResponse
instance GHC.Show.Show Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetentionResponse
instance GHC.Read.Read Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetentionResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetentionResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetention
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetentionResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetention
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetention
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetention
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetention
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetention
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.UpdateDataRetention.UpdateDataRetention


-- | Updates the existing signaling channel. This is an asynchronous
--   operation and takes time to complete.
--   
--   If the <tt>MessageTtlSeconds</tt> value is updated (either increased
--   or reduced), it only applies to new messages sent via this channel
--   after it's been updated. Existing messages are still expired as per
--   the previous <tt>MessageTtlSeconds</tt> value.
module Amazonka.KinesisVideo.UpdateSignalingChannel

-- | <i>See:</i> <a>newUpdateSignalingChannel</a> smart constructor.
data UpdateSignalingChannel
UpdateSignalingChannel' :: Maybe SingleMasterConfiguration -> Text -> Text -> UpdateSignalingChannel

-- | The structure containing the configuration for the
--   <tt>SINGLE_MASTER</tt> type of the signaling channel that you want to
--   update.
[$sel:singleMasterConfiguration:UpdateSignalingChannel'] :: UpdateSignalingChannel -> Maybe SingleMasterConfiguration

-- | The Amazon Resource Name (ARN) of the signaling channel that you want
--   to update.
[$sel:channelARN:UpdateSignalingChannel'] :: UpdateSignalingChannel -> Text

-- | The current version of the signaling channel that you want to update.
[$sel:currentVersion:UpdateSignalingChannel'] :: UpdateSignalingChannel -> Text

-- | Create a value of <a>UpdateSignalingChannel</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:singleMasterConfiguration:UpdateSignalingChannel'</a>,
--   <a>updateSignalingChannel_singleMasterConfiguration</a> - The
--   structure containing the configuration for the <tt>SINGLE_MASTER</tt>
--   type of the signaling channel that you want to update.
--   
--   <a>$sel:channelARN:UpdateSignalingChannel'</a>,
--   <a>updateSignalingChannel_channelARN</a> - The Amazon Resource Name
--   (ARN) of the signaling channel that you want to update.
--   
--   <a>$sel:currentVersion:UpdateSignalingChannel'</a>,
--   <a>updateSignalingChannel_currentVersion</a> - The current version of
--   the signaling channel that you want to update.
newUpdateSignalingChannel :: Text -> Text -> UpdateSignalingChannel

-- | The structure containing the configuration for the
--   <tt>SINGLE_MASTER</tt> type of the signaling channel that you want to
--   update.
updateSignalingChannel_singleMasterConfiguration :: Lens' UpdateSignalingChannel (Maybe SingleMasterConfiguration)

-- | The Amazon Resource Name (ARN) of the signaling channel that you want
--   to update.
updateSignalingChannel_channelARN :: Lens' UpdateSignalingChannel Text

-- | The current version of the signaling channel that you want to update.
updateSignalingChannel_currentVersion :: Lens' UpdateSignalingChannel Text

-- | <i>See:</i> <a>newUpdateSignalingChannelResponse</a> smart
--   constructor.
data UpdateSignalingChannelResponse
UpdateSignalingChannelResponse' :: Int -> UpdateSignalingChannelResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateSignalingChannelResponse'] :: UpdateSignalingChannelResponse -> Int

-- | Create a value of <a>UpdateSignalingChannelResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateSignalingChannelResponse'</a>,
--   <a>updateSignalingChannelResponse_httpStatus</a> - The response's http
--   status code.
newUpdateSignalingChannelResponse :: Int -> UpdateSignalingChannelResponse

-- | The response's http status code.
updateSignalingChannelResponse_httpStatus :: Lens' UpdateSignalingChannelResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannel
instance GHC.Show.Show Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannel
instance GHC.Read.Read Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannel
instance GHC.Classes.Eq Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannel
instance GHC.Generics.Generic Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannelResponse
instance GHC.Show.Show Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannelResponse
instance GHC.Read.Read Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannelResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannelResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannel
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannelResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannel
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannel
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannel
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannel
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannel
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.UpdateSignalingChannel.UpdateSignalingChannel


-- | Updates stream metadata, such as the device name and media type.
--   
--   You must provide the stream name or the Amazon Resource Name (ARN) of
--   the stream.
--   
--   To make sure that you have the latest version of the stream before
--   updating it, you can specify the stream version. Kinesis Video Streams
--   assigns a version to each stream. When you update a stream, Kinesis
--   Video Streams assigns a new version number. To get the latest stream
--   version, use the <tt>DescribeStream</tt> API.
--   
--   <tt>UpdateStream</tt> is an asynchronous operation, and takes time to
--   complete.
module Amazonka.KinesisVideo.UpdateStream

-- | <i>See:</i> <a>newUpdateStream</a> smart constructor.
data UpdateStream
UpdateStream' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Text -> UpdateStream

-- | The stream's media type. Use <tt>MediaType</tt> to specify the type of
--   content that the stream contains to the consumers of the stream. For
--   more information about media types, see <a>Media Types</a>. If you
--   choose to specify the <tt>MediaType</tt>, see <a>Naming
--   Requirements</a>.
--   
--   To play video on the console, you must specify the correct video type.
--   For example, if the video in the stream is H.264, specify
--   <tt>video/h264</tt> as the <tt>MediaType</tt>.
[$sel:mediaType:UpdateStream'] :: UpdateStream -> Maybe Text

-- | The ARN of the stream whose metadata you want to update.
[$sel:streamARN:UpdateStream'] :: UpdateStream -> Maybe Text

-- | The name of the device that is writing to the stream.
--   
--   In the current implementation, Kinesis Video Streams does not use this
--   name.
[$sel:deviceName:UpdateStream'] :: UpdateStream -> Maybe Text

-- | The name of the stream whose metadata you want to update.
--   
--   The stream name is an identifier for the stream, and must be unique
--   for each account and region.
[$sel:streamName:UpdateStream'] :: UpdateStream -> Maybe Text

-- | The version of the stream whose metadata you want to update.
[$sel:currentVersion:UpdateStream'] :: UpdateStream -> Text

-- | Create a value of <a>UpdateStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mediaType:UpdateStream'</a>, <a>updateStream_mediaType</a> -
--   The stream's media type. Use <tt>MediaType</tt> to specify the type of
--   content that the stream contains to the consumers of the stream. For
--   more information about media types, see <a>Media Types</a>. If you
--   choose to specify the <tt>MediaType</tt>, see <a>Naming
--   Requirements</a>.
--   
--   To play video on the console, you must specify the correct video type.
--   For example, if the video in the stream is H.264, specify
--   <tt>video/h264</tt> as the <tt>MediaType</tt>.
--   
--   <a>$sel:streamARN:UpdateStream'</a>, <a>updateStream_streamARN</a> -
--   The ARN of the stream whose metadata you want to update.
--   
--   <a>$sel:deviceName:UpdateStream'</a>, <a>updateStream_deviceName</a> -
--   The name of the device that is writing to the stream.
--   
--   In the current implementation, Kinesis Video Streams does not use this
--   name.
--   
--   <a>$sel:streamName:UpdateStream'</a>, <a>updateStream_streamName</a> -
--   The name of the stream whose metadata you want to update.
--   
--   The stream name is an identifier for the stream, and must be unique
--   for each account and region.
--   
--   <a>$sel:currentVersion:UpdateStream'</a>,
--   <a>updateStream_currentVersion</a> - The version of the stream whose
--   metadata you want to update.
newUpdateStream :: Text -> UpdateStream

-- | The stream's media type. Use <tt>MediaType</tt> to specify the type of
--   content that the stream contains to the consumers of the stream. For
--   more information about media types, see <a>Media Types</a>. If you
--   choose to specify the <tt>MediaType</tt>, see <a>Naming
--   Requirements</a>.
--   
--   To play video on the console, you must specify the correct video type.
--   For example, if the video in the stream is H.264, specify
--   <tt>video/h264</tt> as the <tt>MediaType</tt>.
updateStream_mediaType :: Lens' UpdateStream (Maybe Text)

-- | The ARN of the stream whose metadata you want to update.
updateStream_streamARN :: Lens' UpdateStream (Maybe Text)

-- | The name of the device that is writing to the stream.
--   
--   In the current implementation, Kinesis Video Streams does not use this
--   name.
updateStream_deviceName :: Lens' UpdateStream (Maybe Text)

-- | The name of the stream whose metadata you want to update.
--   
--   The stream name is an identifier for the stream, and must be unique
--   for each account and region.
updateStream_streamName :: Lens' UpdateStream (Maybe Text)

-- | The version of the stream whose metadata you want to update.
updateStream_currentVersion :: Lens' UpdateStream Text

-- | <i>See:</i> <a>newUpdateStreamResponse</a> smart constructor.
data UpdateStreamResponse
UpdateStreamResponse' :: Int -> UpdateStreamResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateStreamResponse'] :: UpdateStreamResponse -> Int

-- | Create a value of <a>UpdateStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateStreamResponse'</a>,
--   <a>updateStreamResponse_httpStatus</a> - The response's http status
--   code.
newUpdateStreamResponse :: Int -> UpdateStreamResponse

-- | The response's http status code.
updateStreamResponse_httpStatus :: Lens' UpdateStreamResponse Int
instance GHC.Generics.Generic Amazonka.KinesisVideo.UpdateStream.UpdateStream
instance GHC.Show.Show Amazonka.KinesisVideo.UpdateStream.UpdateStream
instance GHC.Read.Read Amazonka.KinesisVideo.UpdateStream.UpdateStream
instance GHC.Classes.Eq Amazonka.KinesisVideo.UpdateStream.UpdateStream
instance GHC.Generics.Generic Amazonka.KinesisVideo.UpdateStream.UpdateStreamResponse
instance GHC.Show.Show Amazonka.KinesisVideo.UpdateStream.UpdateStreamResponse
instance GHC.Read.Read Amazonka.KinesisVideo.UpdateStream.UpdateStreamResponse
instance GHC.Classes.Eq Amazonka.KinesisVideo.UpdateStream.UpdateStreamResponse
instance Amazonka.Types.AWSRequest Amazonka.KinesisVideo.UpdateStream.UpdateStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.UpdateStream.UpdateStreamResponse
instance Data.Hashable.Class.Hashable Amazonka.KinesisVideo.UpdateStream.UpdateStream
instance Control.DeepSeq.NFData Amazonka.KinesisVideo.UpdateStream.UpdateStream
instance Amazonka.Data.Headers.ToHeaders Amazonka.KinesisVideo.UpdateStream.UpdateStream
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.KinesisVideo.UpdateStream.UpdateStream
instance Amazonka.Data.Path.ToPath Amazonka.KinesisVideo.UpdateStream.UpdateStream
instance Amazonka.Data.Query.ToQuery Amazonka.KinesisVideo.UpdateStream.UpdateStream


module Amazonka.KinesisVideo.Lens

-- | Optional: Returns only the channels that satisfy a specific condition.
listSignalingChannels_channelNameCondition :: Lens' ListSignalingChannels (Maybe ChannelNameCondition)

-- | If you specify this parameter, when the result of a
--   <tt>ListSignalingChannels</tt> operation is truncated, the call
--   returns the <tt>NextToken</tt> in the response. To get another batch
--   of channels, provide this token in your next request.
listSignalingChannels_nextToken :: Lens' ListSignalingChannels (Maybe Text)

-- | The maximum number of channels to return in the response. The default
--   is 500.
listSignalingChannels_maxResults :: Lens' ListSignalingChannels (Maybe Natural)

-- | An array of <tt>ChannelInfo</tt> objects.
listSignalingChannelsResponse_channelInfoList :: Lens' ListSignalingChannelsResponse (Maybe [ChannelInfo])

-- | If the response is truncated, the call returns this element with a
--   token. To get the next batch of streams, use this token in your next
--   request.
listSignalingChannelsResponse_nextToken :: Lens' ListSignalingChannelsResponse (Maybe Text)

-- | The response's http status code.
listSignalingChannelsResponse_httpStatus :: Lens' ListSignalingChannelsResponse Int

-- | If you specify this parameter and the result of a
--   <tt>ListTagsForResource</tt> call is truncated, the response includes
--   a token that you can use in the next request to fetch the next batch
--   of tags.
listTagsForResource_nextToken :: Lens' ListTagsForResource (Maybe Text)

-- | The Amazon Resource Name (ARN) of the signaling channel for which you
--   want to list tags.
listTagsForResource_resourceARN :: Lens' ListTagsForResource Text

-- | If you specify this parameter and the result of a
--   <tt>ListTagsForResource</tt> call is truncated, the response includes
--   a token that you can use in the next request to fetch the next set of
--   tags.
listTagsForResourceResponse_nextToken :: Lens' ListTagsForResourceResponse (Maybe Text)

-- | A map of tag keys and values associated with the specified signaling
--   channel.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int

-- | The Amazon Resource Name (ARN) of the stream that you want to remove
--   tags from.
untagStream_streamARN :: Lens' UntagStream (Maybe Text)

-- | The name of the stream that you want to remove tags from.
untagStream_streamName :: Lens' UntagStream (Maybe Text)

-- | A list of the keys of the tags that you want to remove.
untagStream_tagKeyList :: Lens' UntagStream (NonEmpty Text)

-- | The response's http status code.
untagStreamResponse_httpStatus :: Lens' UntagStreamResponse Int

-- | The Amazon Resource Name (ARN) of the stream whose retention period
--   you want to change.
updateDataRetention_streamARN :: Lens' UpdateDataRetention (Maybe Text)

-- | The name of the stream whose retention period you want to change.
updateDataRetention_streamName :: Lens' UpdateDataRetention (Maybe Text)

-- | The version of the stream whose retention period you want to change.
--   To get the version, call either the <tt>DescribeStream</tt> or the
--   <tt>ListStreams</tt> API.
updateDataRetention_currentVersion :: Lens' UpdateDataRetention Text

-- | Indicates whether you want to increase or decrease the retention
--   period.
updateDataRetention_operation :: Lens' UpdateDataRetention UpdateDataRetentionOperation

-- | The retention period, in hours. The value you specify replaces the
--   current value. The maximum value for this parameter is 87600 (ten
--   years).
updateDataRetention_dataRetentionChangeInHours :: Lens' UpdateDataRetention Natural

-- | The response's http status code.
updateDataRetentionResponse_httpStatus :: Lens' UpdateDataRetentionResponse Int

-- | The Amazon Resource Name (ARN) of the stream that you want to get the
--   endpoint for. You must specify either this parameter or a
--   <tt>StreamName</tt> in the request.
getDataEndpoint_streamARN :: Lens' GetDataEndpoint (Maybe Text)

-- | The name of the stream that you want to get the endpoint for. You must
--   specify either this parameter or a <tt>StreamARN</tt> in the request.
getDataEndpoint_streamName :: Lens' GetDataEndpoint (Maybe Text)

-- | The name of the API action for which to get an endpoint.
getDataEndpoint_aPIName :: Lens' GetDataEndpoint APIName

-- | The endpoint value. To read data from the stream or to write data to
--   it, specify this endpoint in your application.
getDataEndpointResponse_dataEndpoint :: Lens' GetDataEndpointResponse (Maybe Text)

-- | The response's http status code.
getDataEndpointResponse_httpStatus :: Lens' GetDataEndpointResponse Int

-- | A structure containing the endpoint configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
getSignalingChannelEndpoint_singleMasterChannelEndpointConfiguration :: Lens' GetSignalingChannelEndpoint (Maybe SingleMasterChannelEndpointConfiguration)

-- | The Amazon Resource Name (ARN) of the signalling channel for which you
--   want to get an endpoint.
getSignalingChannelEndpoint_channelARN :: Lens' GetSignalingChannelEndpoint Text

-- | A list of endpoints for the specified signaling channel.
getSignalingChannelEndpointResponse_resourceEndpointList :: Lens' GetSignalingChannelEndpointResponse (Maybe [ResourceEndpointListItem])

-- | The response's http status code.
getSignalingChannelEndpointResponse_httpStatus :: Lens' GetSignalingChannelEndpointResponse Int

-- | The Amazon Resource Name (ARN) of the stream that you want to list
--   tags for.
listTagsForStream_streamARN :: Lens' ListTagsForStream (Maybe Text)

-- | If you specify this parameter and the result of a
--   <tt>ListTagsForStream</tt> call is truncated, the response includes a
--   token that you can use in the next request to fetch the next batch of
--   tags.
listTagsForStream_nextToken :: Lens' ListTagsForStream (Maybe Text)

-- | The name of the stream that you want to list tags for.
listTagsForStream_streamName :: Lens' ListTagsForStream (Maybe Text)

-- | If you specify this parameter and the result of a <tt>ListTags</tt>
--   call is truncated, the response includes a token that you can use in
--   the next request to fetch the next set of tags.
listTagsForStreamResponse_nextToken :: Lens' ListTagsForStreamResponse (Maybe Text)

-- | A map of tag keys and values associated with the specified stream.
listTagsForStreamResponse_tags :: Lens' ListTagsForStreamResponse (Maybe (HashMap Text Text))

-- | The response's http status code.
listTagsForStreamResponse_httpStatus :: Lens' ListTagsForStreamResponse Int

-- | The current version of the signaling channel that you want to delete.
--   You can obtain the current version by invoking the
--   <tt>DescribeSignalingChannel</tt> or <tt>ListSignalingChannels</tt>
--   API operations.
deleteSignalingChannel_currentVersion :: Lens' DeleteSignalingChannel (Maybe Text)

-- | The Amazon Resource Name (ARN) of the signaling channel that you want
--   to delete.
deleteSignalingChannel_channelARN :: Lens' DeleteSignalingChannel Text

-- | The response's http status code.
deleteSignalingChannelResponse_httpStatus :: Lens' DeleteSignalingChannelResponse Int

-- | The structure containing the configuration for the
--   <tt>SINGLE_MASTER</tt> type of the signaling channel that you want to
--   update.
updateSignalingChannel_singleMasterConfiguration :: Lens' UpdateSignalingChannel (Maybe SingleMasterConfiguration)

-- | The Amazon Resource Name (ARN) of the signaling channel that you want
--   to update.
updateSignalingChannel_channelARN :: Lens' UpdateSignalingChannel Text

-- | The current version of the signaling channel that you want to update.
updateSignalingChannel_currentVersion :: Lens' UpdateSignalingChannel Text

-- | The response's http status code.
updateSignalingChannelResponse_httpStatus :: Lens' UpdateSignalingChannelResponse Int

-- | The stream's media type. Use <tt>MediaType</tt> to specify the type of
--   content that the stream contains to the consumers of the stream. For
--   more information about media types, see <a>Media Types</a>. If you
--   choose to specify the <tt>MediaType</tt>, see <a>Naming
--   Requirements</a>.
--   
--   To play video on the console, you must specify the correct video type.
--   For example, if the video in the stream is H.264, specify
--   <tt>video/h264</tt> as the <tt>MediaType</tt>.
updateStream_mediaType :: Lens' UpdateStream (Maybe Text)

-- | The ARN of the stream whose metadata you want to update.
updateStream_streamARN :: Lens' UpdateStream (Maybe Text)

-- | The name of the device that is writing to the stream.
--   
--   In the current implementation, Kinesis Video Streams does not use this
--   name.
updateStream_deviceName :: Lens' UpdateStream (Maybe Text)

-- | The name of the stream whose metadata you want to update.
--   
--   The stream name is an identifier for the stream, and must be unique
--   for each account and region.
updateStream_streamName :: Lens' UpdateStream (Maybe Text)

-- | The version of the stream whose metadata you want to update.
updateStream_currentVersion :: Lens' UpdateStream Text

-- | The response's http status code.
updateStreamResponse_httpStatus :: Lens' UpdateStreamResponse Int

-- | Optional: The version of the stream that you want to delete.
--   
--   Specify the version as a safeguard to ensure that your are deleting
--   the correct stream. To get the stream version, use the
--   <tt>DescribeStream</tt> API.
--   
--   If not specified, only the <tt>CreationTime</tt> is checked before
--   deleting the stream.
deleteStream_currentVersion :: Lens' DeleteStream (Maybe Text)

-- | The Amazon Resource Name (ARN) of the stream that you want to delete.
deleteStream_streamARN :: Lens' DeleteStream Text

-- | The response's http status code.
deleteStreamResponse_httpStatus :: Lens' DeleteStreamResponse Int

-- | If you specify this parameter, when the result of a
--   <tt>ListStreams</tt> operation is truncated, the call returns the
--   <tt>NextToken</tt> in the response. To get another batch of streams,
--   provide this token in your next request.
listStreams_nextToken :: Lens' ListStreams (Maybe Text)

-- | Optional: Returns only streams that satisfy a specific condition.
--   Currently, you can specify only the prefix of a stream name as a
--   condition.
listStreams_streamNameCondition :: Lens' ListStreams (Maybe StreamNameCondition)

-- | The maximum number of streams to return in the response. The default
--   is 10,000.
listStreams_maxResults :: Lens' ListStreams (Maybe Natural)

-- | An array of <tt>StreamInfo</tt> objects.
listStreamsResponse_streamInfoList :: Lens' ListStreamsResponse (Maybe [StreamInfo])

-- | If the response is truncated, the call returns this element with a
--   token. To get the next batch of streams, use this token in your next
--   request.
listStreamsResponse_nextToken :: Lens' ListStreamsResponse (Maybe Text)

-- | The response's http status code.
listStreamsResponse_httpStatus :: Lens' ListStreamsResponse Int

-- | The media type of the stream. Consumers of the stream can use this
--   information when processing the stream. For more information about
--   media types, see <a>Media Types</a>. If you choose to specify the
--   <tt>MediaType</tt>, see <a>Naming Requirements</a> for guidelines.
--   
--   Example valid values include "video/h264" and "video/h264,audio/aac".
--   
--   This parameter is optional; the default value is <tt>null</tt> (or
--   empty in JSON).
createStream_mediaType :: Lens' CreateStream (Maybe Text)

-- | The number of hours that you want to retain the data in the stream.
--   Kinesis Video Streams retains the data in a data store that is
--   associated with the stream.
--   
--   The default value is 0, indicating that the stream does not persist
--   data.
--   
--   When the <tt>DataRetentionInHours</tt> value is 0, consumers can still
--   consume the fragments that remain in the service host buffer, which
--   has a retention time limit of 5 minutes and a retention memory limit
--   of 200 MB. Fragments are removed from the buffer when either limit is
--   reached.
createStream_dataRetentionInHours :: Lens' CreateStream (Maybe Natural)

-- | The ID of the AWS Key Management Service (AWS KMS) key that you want
--   Kinesis Video Streams to use to encrypt stream data.
--   
--   If no key ID is specified, the default, Kinesis Video-managed key
--   (<tt>aws/kinesisvideo</tt>) is used.
--   
--   For more information, see <a>DescribeKey</a>.
createStream_kmsKeyId :: Lens' CreateStream (Maybe Text)

-- | The name of the device that is writing to the stream.
--   
--   In the current implementation, Kinesis Video Streams does not use this
--   name.
createStream_deviceName :: Lens' CreateStream (Maybe Text)

-- | A list of tags to associate with the specified stream. Each tag is a
--   key-value pair (the value is optional).
createStream_tags :: Lens' CreateStream (Maybe (HashMap Text Text))

-- | A name for the stream that you are creating.
--   
--   The stream name is an identifier for the stream, and must be unique
--   for each account and region.
createStream_streamName :: Lens' CreateStream Text

-- | The Amazon Resource Name (ARN) of the stream.
createStreamResponse_streamARN :: Lens' CreateStreamResponse (Maybe Text)

-- | The response's http status code.
createStreamResponse_httpStatus :: Lens' CreateStreamResponse Int

-- | The ARN of the signaling channel that you want to describe.
describeSignalingChannel_channelARN :: Lens' DescribeSignalingChannel (Maybe Text)

-- | The name of the signaling channel that you want to describe.
describeSignalingChannel_channelName :: Lens' DescribeSignalingChannel (Maybe Text)

-- | A structure that encapsulates the specified signaling channel's
--   metadata and properties.
describeSignalingChannelResponse_channelInfo :: Lens' DescribeSignalingChannelResponse (Maybe ChannelInfo)

-- | The response's http status code.
describeSignalingChannelResponse_httpStatus :: Lens' DescribeSignalingChannelResponse Int

-- | The Amazon Resource Name (ARN) of the signaling channel to which you
--   want to add tags.
tagResource_resourceARN :: Lens' TagResource Text

-- | A list of tags to associate with the specified signaling channel. Each
--   tag is a key-value pair.
tagResource_tags :: Lens' TagResource (NonEmpty Tag)

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int

-- | The Amazon Resource Name (ARN) of the signaling channel from which you
--   want to remove tags.
untagResource_resourceARN :: Lens' UntagResource Text

-- | A list of the keys of the tags that you want to remove.
untagResource_tagKeyList :: Lens' UntagResource (NonEmpty Text)

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int

-- | The Amazon Resource Name (ARN) of the resource that you want to add
--   the tag or tags to.
tagStream_streamARN :: Lens' TagStream (Maybe Text)

-- | The name of the stream that you want to add the tag or tags to.
tagStream_streamName :: Lens' TagStream (Maybe Text)

-- | A list of tags to associate with the specified stream. Each tag is a
--   key-value pair (the value is optional).
tagStream_tags :: Lens' TagStream (HashMap Text Text)

-- | The response's http status code.
tagStreamResponse_httpStatus :: Lens' TagStreamResponse Int

-- | A structure containing the configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
createSignalingChannel_singleMasterConfiguration :: Lens' CreateSignalingChannel (Maybe SingleMasterConfiguration)

-- | A type of the signaling channel that you are creating. Currently,
--   <tt>SINGLE_MASTER</tt> is the only supported channel type.
createSignalingChannel_channelType :: Lens' CreateSignalingChannel (Maybe ChannelType)

-- | A set of tags (key-value pairs) that you want to associate with this
--   channel.
createSignalingChannel_tags :: Lens' CreateSignalingChannel (Maybe [Tag])

-- | A name for the signaling channel that you are creating. It must be
--   unique for each AWS account and AWS Region.
createSignalingChannel_channelName :: Lens' CreateSignalingChannel Text

-- | The Amazon Resource Name (ARN) of the created channel.
createSignalingChannelResponse_channelARN :: Lens' CreateSignalingChannelResponse (Maybe Text)

-- | The response's http status code.
createSignalingChannelResponse_httpStatus :: Lens' CreateSignalingChannelResponse Int

-- | The Amazon Resource Name (ARN) of the stream.
describeStream_streamARN :: Lens' DescribeStream (Maybe Text)

-- | The name of the stream.
describeStream_streamName :: Lens' DescribeStream (Maybe Text)

-- | An object that describes the stream.
describeStreamResponse_streamInfo :: Lens' DescribeStreamResponse (Maybe StreamInfo)

-- | The response's http status code.
describeStreamResponse_httpStatus :: Lens' DescribeStreamResponse Int

-- | The time at which the signaling channel was created.
channelInfo_creationTime :: Lens' ChannelInfo (Maybe UTCTime)

-- | Current status of the signaling channel.
channelInfo_channelStatus :: Lens' ChannelInfo (Maybe StreamStatus)

-- | The Amazon Resource Name (ARN) of the signaling channel.
channelInfo_channelARN :: Lens' ChannelInfo (Maybe Text)

-- | A structure that contains the configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
channelInfo_singleMasterConfiguration :: Lens' ChannelInfo (Maybe SingleMasterConfiguration)

-- | The name of the signaling channel.
channelInfo_channelName :: Lens' ChannelInfo (Maybe Text)

-- | The current version of the signaling channel.
channelInfo_version :: Lens' ChannelInfo (Maybe Text)

-- | The type of the signaling channel.
channelInfo_channelType :: Lens' ChannelInfo (Maybe ChannelType)

-- | A comparison operator. Currently, you can only specify the
--   <tt>BEGINS_WITH</tt> operator, which finds signaling channels whose
--   names begin with a given prefix.
channelNameCondition_comparisonOperator :: Lens' ChannelNameCondition (Maybe ComparisonOperator)

-- | A value to compare.
channelNameCondition_comparisonValue :: Lens' ChannelNameCondition (Maybe Text)

-- | The protocol of the signaling channel returned by the
--   <tt>GetSignalingChannelEndpoint</tt> API.
resourceEndpointListItem_protocol :: Lens' ResourceEndpointListItem (Maybe ChannelProtocol)

-- | The endpoint of the signaling channel returned by the
--   <tt>GetSignalingChannelEndpoint</tt> API.
resourceEndpointListItem_resourceEndpoint :: Lens' ResourceEndpointListItem (Maybe Text)

-- | This property is used to determine the nature of communication over
--   this <tt>SINGLE_MASTER</tt> signaling channel. If <tt>WSS</tt> is
--   specified, this API returns a websocket endpoint. If <tt>HTTPS</tt> is
--   specified, this API returns an <tt>HTTPS</tt> endpoint.
singleMasterChannelEndpointConfiguration_protocols :: Lens' SingleMasterChannelEndpointConfiguration (Maybe (NonEmpty ChannelProtocol))

-- | This property is used to determine messaging permissions in this
--   <tt>SINGLE_MASTER</tt> signaling channel. If <tt>MASTER</tt> is
--   specified, this API returns an endpoint that a client can use to
--   receive offers from and send answers to any of the viewers on this
--   signaling channel. If <tt>VIEWER</tt> is specified, this API returns
--   an endpoint that a client can use only to send offers to another
--   <tt>MASTER</tt> client on this signaling channel.
singleMasterChannelEndpointConfiguration_role :: Lens' SingleMasterChannelEndpointConfiguration (Maybe ChannelRole)

-- | The period of time a signaling channel retains underlivered messages
--   before they are discarded.
singleMasterConfiguration_messageTtlSeconds :: Lens' SingleMasterConfiguration (Maybe Natural)

-- | A time stamp that indicates when the stream was created.
streamInfo_creationTime :: Lens' StreamInfo (Maybe UTCTime)

-- | The status of the stream.
streamInfo_status :: Lens' StreamInfo (Maybe StreamStatus)

-- | The <tt>MediaType</tt> of the stream.
streamInfo_mediaType :: Lens' StreamInfo (Maybe Text)

-- | How long the stream retains data, in hours.
streamInfo_dataRetentionInHours :: Lens' StreamInfo (Maybe Natural)

-- | The Amazon Resource Name (ARN) of the stream.
streamInfo_streamARN :: Lens' StreamInfo (Maybe Text)

-- | The ID of the AWS Key Management Service (AWS KMS) key that Kinesis
--   Video Streams uses to encrypt data on the stream.
streamInfo_kmsKeyId :: Lens' StreamInfo (Maybe Text)

-- | The name of the device that is associated with the stream.
streamInfo_deviceName :: Lens' StreamInfo (Maybe Text)

-- | The version of the stream.
streamInfo_version :: Lens' StreamInfo (Maybe Text)

-- | The name of the stream.
streamInfo_streamName :: Lens' StreamInfo (Maybe Text)

-- | A comparison operator. Currently, you can specify only the
--   <tt>BEGINS_WITH</tt> operator, which finds streams whose names start
--   with a given prefix.
streamNameCondition_comparisonOperator :: Lens' StreamNameCondition (Maybe ComparisonOperator)

-- | A value to compare.
streamNameCondition_comparisonValue :: Lens' StreamNameCondition (Maybe Text)

-- | The key of the tag that is associated with the specified signaling
--   channel.
tag_key :: Lens' Tag Text

-- | The value of the tag that is associated with the specified signaling
--   channel.
tag_value :: Lens' Tag Text


module Amazonka.KinesisVideo.Waiters


-- | Derived from API version <tt>2017-09-30</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
module Amazonka.KinesisVideo

-- | API version <tt>2017-09-30</tt> of the Amazon Kinesis Video Streams
--   SDK configuration.
defaultService :: Service

-- | You do not have required permissions to perform this operation.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The value for this input parameter is invalid.
_InvalidArgumentException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You have exceeded the limit of tags that you can associate with the
--   resource. Kinesis video streams support up to 50 tags.
_TagsPerResourceExceededLimitException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The caller is not authorized to perform this operation.
_NotAuthorizedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Kinesis Video Streams has throttled the request because you have
--   exceeded the limit of allowed client calls. Try making the call later.
_ClientLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You have reached the maximum limit of active signaling channels for
--   this AWS account in this region.
_AccountChannelLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Not implemented.
_InvalidDeviceException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The stream version that you specified is not the latest version. To
--   get the latest version, use the <a>DescribeStream</a> API.
_VersionMismatchException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The number of streams created for the account is too high.
_AccountStreamLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The format of the <tt>StreamARN</tt> is invalid.
_InvalidResourceFormatException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Not implemented.
_DeviceStreamLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Amazon Kinesis Video Streams can't find the stream that you specified.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The signaling channel is currently not available for this operation.
_ResourceInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newListSignalingChannels</a> smart constructor.
data ListSignalingChannels
ListSignalingChannels' :: Maybe ChannelNameCondition -> Maybe Text -> Maybe Natural -> ListSignalingChannels

-- | Create a value of <a>ListSignalingChannels</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:channelNameCondition:ListSignalingChannels'</a>,
--   <a>listSignalingChannels_channelNameCondition</a> - Optional: Returns
--   only the channels that satisfy a specific condition.
--   
--   <a>$sel:nextToken:ListSignalingChannels'</a>,
--   <a>listSignalingChannels_nextToken</a> - If you specify this
--   parameter, when the result of a <tt>ListSignalingChannels</tt>
--   operation is truncated, the call returns the <tt>NextToken</tt> in the
--   response. To get another batch of channels, provide this token in your
--   next request.
--   
--   <a>$sel:maxResults:ListSignalingChannels'</a>,
--   <a>listSignalingChannels_maxResults</a> - The maximum number of
--   channels to return in the response. The default is 500.
newListSignalingChannels :: ListSignalingChannels

-- | <i>See:</i> <a>newListSignalingChannelsResponse</a> smart constructor.
data ListSignalingChannelsResponse
ListSignalingChannelsResponse' :: Maybe [ChannelInfo] -> Maybe Text -> Int -> ListSignalingChannelsResponse

-- | Create a value of <a>ListSignalingChannelsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:channelInfoList:ListSignalingChannelsResponse'</a>,
--   <a>listSignalingChannelsResponse_channelInfoList</a> - An array of
--   <tt>ChannelInfo</tt> objects.
--   
--   <a>$sel:nextToken:ListSignalingChannels'</a>,
--   <a>listSignalingChannelsResponse_nextToken</a> - If the response is
--   truncated, the call returns this element with a token. To get the next
--   batch of streams, use this token in your next request.
--   
--   <a>$sel:httpStatus:ListSignalingChannelsResponse'</a>,
--   <a>listSignalingChannelsResponse_httpStatus</a> - The response's http
--   status code.
newListSignalingChannelsResponse :: Int -> ListSignalingChannelsResponse

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Maybe Text -> Text -> ListTagsForResource

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForResource'</a>,
--   <a>listTagsForResource_nextToken</a> - If you specify this parameter
--   and the result of a <tt>ListTagsForResource</tt> call is truncated,
--   the response includes a token that you can use in the next request to
--   fetch the next batch of tags.
--   
--   <a>$sel:resourceARN:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceARN</a> - The Amazon Resource Name
--   (ARN) of the signaling channel for which you want to list tags.
newListTagsForResource :: Text -> ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe Text -> Maybe (HashMap Text Text) -> Int -> ListTagsForResourceResponse

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForResource'</a>,
--   <a>listTagsForResourceResponse_nextToken</a> - If you specify this
--   parameter and the result of a <tt>ListTagsForResource</tt> call is
--   truncated, the response includes a token that you can use in the next
--   request to fetch the next set of tags.
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - A map of tag keys and values
--   associated with the specified signaling channel.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | <i>See:</i> <a>newUntagStream</a> smart constructor.
data UntagStream
UntagStream' :: Maybe Text -> Maybe Text -> NonEmpty Text -> UntagStream

-- | Create a value of <a>UntagStream</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:UntagStream'</a>, <a>untagStream_streamARN</a> - The
--   Amazon Resource Name (ARN) of the stream that you want to remove tags
--   from.
--   
--   <a>$sel:streamName:UntagStream'</a>, <a>untagStream_streamName</a> -
--   The name of the stream that you want to remove tags from.
--   
--   <a>$sel:tagKeyList:UntagStream'</a>, <a>untagStream_tagKeyList</a> - A
--   list of the keys of the tags that you want to remove.
newUntagStream :: NonEmpty Text -> UntagStream

-- | <i>See:</i> <a>newUntagStreamResponse</a> smart constructor.
data UntagStreamResponse
UntagStreamResponse' :: Int -> UntagStreamResponse

-- | Create a value of <a>UntagStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagStreamResponse'</a>,
--   <a>untagStreamResponse_httpStatus</a> - The response's http status
--   code.
newUntagStreamResponse :: Int -> UntagStreamResponse

-- | <i>See:</i> <a>newUpdateDataRetention</a> smart constructor.
data UpdateDataRetention
UpdateDataRetention' :: Maybe Text -> Maybe Text -> Text -> UpdateDataRetentionOperation -> Natural -> UpdateDataRetention

-- | Create a value of <a>UpdateDataRetention</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:UpdateDataRetention'</a>,
--   <a>updateDataRetention_streamARN</a> - The Amazon Resource Name (ARN)
--   of the stream whose retention period you want to change.
--   
--   <a>$sel:streamName:UpdateDataRetention'</a>,
--   <a>updateDataRetention_streamName</a> - The name of the stream whose
--   retention period you want to change.
--   
--   <a>$sel:currentVersion:UpdateDataRetention'</a>,
--   <a>updateDataRetention_currentVersion</a> - The version of the stream
--   whose retention period you want to change. To get the version, call
--   either the <tt>DescribeStream</tt> or the <tt>ListStreams</tt> API.
--   
--   <a>$sel:operation:UpdateDataRetention'</a>,
--   <a>updateDataRetention_operation</a> - Indicates whether you want to
--   increase or decrease the retention period.
--   
--   <a>$sel:dataRetentionChangeInHours:UpdateDataRetention'</a>,
--   <a>updateDataRetention_dataRetentionChangeInHours</a> - The retention
--   period, in hours. The value you specify replaces the current value.
--   The maximum value for this parameter is 87600 (ten years).
newUpdateDataRetention :: Text -> UpdateDataRetentionOperation -> Natural -> UpdateDataRetention

-- | <i>See:</i> <a>newUpdateDataRetentionResponse</a> smart constructor.
data UpdateDataRetentionResponse
UpdateDataRetentionResponse' :: Int -> UpdateDataRetentionResponse

-- | Create a value of <a>UpdateDataRetentionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateDataRetentionResponse'</a>,
--   <a>updateDataRetentionResponse_httpStatus</a> - The response's http
--   status code.
newUpdateDataRetentionResponse :: Int -> UpdateDataRetentionResponse

-- | <i>See:</i> <a>newGetDataEndpoint</a> smart constructor.
data GetDataEndpoint
GetDataEndpoint' :: Maybe Text -> Maybe Text -> APIName -> GetDataEndpoint

-- | Create a value of <a>GetDataEndpoint</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:GetDataEndpoint'</a>,
--   <a>getDataEndpoint_streamARN</a> - The Amazon Resource Name (ARN) of
--   the stream that you want to get the endpoint for. You must specify
--   either this parameter or a <tt>StreamName</tt> in the request.
--   
--   <a>$sel:streamName:GetDataEndpoint'</a>,
--   <a>getDataEndpoint_streamName</a> - The name of the stream that you
--   want to get the endpoint for. You must specify either this parameter
--   or a <tt>StreamARN</tt> in the request.
--   
--   <a>$sel:aPIName:GetDataEndpoint'</a>, <a>getDataEndpoint_aPIName</a> -
--   The name of the API action for which to get an endpoint.
newGetDataEndpoint :: APIName -> GetDataEndpoint

-- | <i>See:</i> <a>newGetDataEndpointResponse</a> smart constructor.
data GetDataEndpointResponse
GetDataEndpointResponse' :: Maybe Text -> Int -> GetDataEndpointResponse

-- | Create a value of <a>GetDataEndpointResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dataEndpoint:GetDataEndpointResponse'</a>,
--   <a>getDataEndpointResponse_dataEndpoint</a> - The endpoint value. To
--   read data from the stream or to write data to it, specify this
--   endpoint in your application.
--   
--   <a>$sel:httpStatus:GetDataEndpointResponse'</a>,
--   <a>getDataEndpointResponse_httpStatus</a> - The response's http status
--   code.
newGetDataEndpointResponse :: Int -> GetDataEndpointResponse

-- | <i>See:</i> <a>newGetSignalingChannelEndpoint</a> smart constructor.
data GetSignalingChannelEndpoint
GetSignalingChannelEndpoint' :: Maybe SingleMasterChannelEndpointConfiguration -> Text -> GetSignalingChannelEndpoint

-- | Create a value of <a>GetSignalingChannelEndpoint</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:singleMasterChannelEndpointConfiguration:GetSignalingChannelEndpoint'</a>,
--   <a>getSignalingChannelEndpoint_singleMasterChannelEndpointConfiguration</a>
--   - A structure containing the endpoint configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
--   
--   <a>$sel:channelARN:GetSignalingChannelEndpoint'</a>,
--   <a>getSignalingChannelEndpoint_channelARN</a> - The Amazon Resource
--   Name (ARN) of the signalling channel for which you want to get an
--   endpoint.
newGetSignalingChannelEndpoint :: Text -> GetSignalingChannelEndpoint

-- | <i>See:</i> <a>newGetSignalingChannelEndpointResponse</a> smart
--   constructor.
data GetSignalingChannelEndpointResponse
GetSignalingChannelEndpointResponse' :: Maybe [ResourceEndpointListItem] -> Int -> GetSignalingChannelEndpointResponse

-- | Create a value of <a>GetSignalingChannelEndpointResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceEndpointList:GetSignalingChannelEndpointResponse'</a>,
--   <a>getSignalingChannelEndpointResponse_resourceEndpointList</a> - A
--   list of endpoints for the specified signaling channel.
--   
--   <a>$sel:httpStatus:GetSignalingChannelEndpointResponse'</a>,
--   <a>getSignalingChannelEndpointResponse_httpStatus</a> - The response's
--   http status code.
newGetSignalingChannelEndpointResponse :: Int -> GetSignalingChannelEndpointResponse

-- | <i>See:</i> <a>newListTagsForStream</a> smart constructor.
data ListTagsForStream
ListTagsForStream' :: Maybe Text -> Maybe Text -> Maybe Text -> ListTagsForStream

-- | Create a value of <a>ListTagsForStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:ListTagsForStream'</a>,
--   <a>listTagsForStream_streamARN</a> - The Amazon Resource Name (ARN) of
--   the stream that you want to list tags for.
--   
--   <a>$sel:nextToken:ListTagsForStream'</a>,
--   <a>listTagsForStream_nextToken</a> - If you specify this parameter and
--   the result of a <tt>ListTagsForStream</tt> call is truncated, the
--   response includes a token that you can use in the next request to
--   fetch the next batch of tags.
--   
--   <a>$sel:streamName:ListTagsForStream'</a>,
--   <a>listTagsForStream_streamName</a> - The name of the stream that you
--   want to list tags for.
newListTagsForStream :: ListTagsForStream

-- | <i>See:</i> <a>newListTagsForStreamResponse</a> smart constructor.
data ListTagsForStreamResponse
ListTagsForStreamResponse' :: Maybe Text -> Maybe (HashMap Text Text) -> Int -> ListTagsForStreamResponse

-- | Create a value of <a>ListTagsForStreamResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsForStream'</a>,
--   <a>listTagsForStreamResponse_nextToken</a> - If you specify this
--   parameter and the result of a <tt>ListTags</tt> call is truncated, the
--   response includes a token that you can use in the next request to
--   fetch the next set of tags.
--   
--   <a>$sel:tags:ListTagsForStreamResponse'</a>,
--   <a>listTagsForStreamResponse_tags</a> - A map of tag keys and values
--   associated with the specified stream.
--   
--   <a>$sel:httpStatus:ListTagsForStreamResponse'</a>,
--   <a>listTagsForStreamResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForStreamResponse :: Int -> ListTagsForStreamResponse

-- | <i>See:</i> <a>newDeleteSignalingChannel</a> smart constructor.
data DeleteSignalingChannel
DeleteSignalingChannel' :: Maybe Text -> Text -> DeleteSignalingChannel

-- | Create a value of <a>DeleteSignalingChannel</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:currentVersion:DeleteSignalingChannel'</a>,
--   <a>deleteSignalingChannel_currentVersion</a> - The current version of
--   the signaling channel that you want to delete. You can obtain the
--   current version by invoking the <tt>DescribeSignalingChannel</tt> or
--   <tt>ListSignalingChannels</tt> API operations.
--   
--   <a>$sel:channelARN:DeleteSignalingChannel'</a>,
--   <a>deleteSignalingChannel_channelARN</a> - The Amazon Resource Name
--   (ARN) of the signaling channel that you want to delete.
newDeleteSignalingChannel :: Text -> DeleteSignalingChannel

-- | <i>See:</i> <a>newDeleteSignalingChannelResponse</a> smart
--   constructor.
data DeleteSignalingChannelResponse
DeleteSignalingChannelResponse' :: Int -> DeleteSignalingChannelResponse

-- | Create a value of <a>DeleteSignalingChannelResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteSignalingChannelResponse'</a>,
--   <a>deleteSignalingChannelResponse_httpStatus</a> - The response's http
--   status code.
newDeleteSignalingChannelResponse :: Int -> DeleteSignalingChannelResponse

-- | <i>See:</i> <a>newUpdateSignalingChannel</a> smart constructor.
data UpdateSignalingChannel
UpdateSignalingChannel' :: Maybe SingleMasterConfiguration -> Text -> Text -> UpdateSignalingChannel

-- | Create a value of <a>UpdateSignalingChannel</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:singleMasterConfiguration:UpdateSignalingChannel'</a>,
--   <a>updateSignalingChannel_singleMasterConfiguration</a> - The
--   structure containing the configuration for the <tt>SINGLE_MASTER</tt>
--   type of the signaling channel that you want to update.
--   
--   <a>$sel:channelARN:UpdateSignalingChannel'</a>,
--   <a>updateSignalingChannel_channelARN</a> - The Amazon Resource Name
--   (ARN) of the signaling channel that you want to update.
--   
--   <a>$sel:currentVersion:UpdateSignalingChannel'</a>,
--   <a>updateSignalingChannel_currentVersion</a> - The current version of
--   the signaling channel that you want to update.
newUpdateSignalingChannel :: Text -> Text -> UpdateSignalingChannel

-- | <i>See:</i> <a>newUpdateSignalingChannelResponse</a> smart
--   constructor.
data UpdateSignalingChannelResponse
UpdateSignalingChannelResponse' :: Int -> UpdateSignalingChannelResponse

-- | Create a value of <a>UpdateSignalingChannelResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateSignalingChannelResponse'</a>,
--   <a>updateSignalingChannelResponse_httpStatus</a> - The response's http
--   status code.
newUpdateSignalingChannelResponse :: Int -> UpdateSignalingChannelResponse

-- | <i>See:</i> <a>newUpdateStream</a> smart constructor.
data UpdateStream
UpdateStream' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Text -> UpdateStream

-- | Create a value of <a>UpdateStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mediaType:UpdateStream'</a>, <a>updateStream_mediaType</a> -
--   The stream's media type. Use <tt>MediaType</tt> to specify the type of
--   content that the stream contains to the consumers of the stream. For
--   more information about media types, see <a>Media Types</a>. If you
--   choose to specify the <tt>MediaType</tt>, see <a>Naming
--   Requirements</a>.
--   
--   To play video on the console, you must specify the correct video type.
--   For example, if the video in the stream is H.264, specify
--   <tt>video/h264</tt> as the <tt>MediaType</tt>.
--   
--   <a>$sel:streamARN:UpdateStream'</a>, <a>updateStream_streamARN</a> -
--   The ARN of the stream whose metadata you want to update.
--   
--   <a>$sel:deviceName:UpdateStream'</a>, <a>updateStream_deviceName</a> -
--   The name of the device that is writing to the stream.
--   
--   In the current implementation, Kinesis Video Streams does not use this
--   name.
--   
--   <a>$sel:streamName:UpdateStream'</a>, <a>updateStream_streamName</a> -
--   The name of the stream whose metadata you want to update.
--   
--   The stream name is an identifier for the stream, and must be unique
--   for each account and region.
--   
--   <a>$sel:currentVersion:UpdateStream'</a>,
--   <a>updateStream_currentVersion</a> - The version of the stream whose
--   metadata you want to update.
newUpdateStream :: Text -> UpdateStream

-- | <i>See:</i> <a>newUpdateStreamResponse</a> smart constructor.
data UpdateStreamResponse
UpdateStreamResponse' :: Int -> UpdateStreamResponse

-- | Create a value of <a>UpdateStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateStreamResponse'</a>,
--   <a>updateStreamResponse_httpStatus</a> - The response's http status
--   code.
newUpdateStreamResponse :: Int -> UpdateStreamResponse

-- | <i>See:</i> <a>newDeleteStream</a> smart constructor.
data DeleteStream
DeleteStream' :: Maybe Text -> Text -> DeleteStream

-- | Create a value of <a>DeleteStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:currentVersion:DeleteStream'</a>,
--   <a>deleteStream_currentVersion</a> - Optional: The version of the
--   stream that you want to delete.
--   
--   Specify the version as a safeguard to ensure that your are deleting
--   the correct stream. To get the stream version, use the
--   <tt>DescribeStream</tt> API.
--   
--   If not specified, only the <tt>CreationTime</tt> is checked before
--   deleting the stream.
--   
--   <a>$sel:streamARN:DeleteStream'</a>, <a>deleteStream_streamARN</a> -
--   The Amazon Resource Name (ARN) of the stream that you want to delete.
newDeleteStream :: Text -> DeleteStream

-- | <i>See:</i> <a>newDeleteStreamResponse</a> smart constructor.
data DeleteStreamResponse
DeleteStreamResponse' :: Int -> DeleteStreamResponse

-- | Create a value of <a>DeleteStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteStreamResponse'</a>,
--   <a>deleteStreamResponse_httpStatus</a> - The response's http status
--   code.
newDeleteStreamResponse :: Int -> DeleteStreamResponse

-- | <i>See:</i> <a>newListStreams</a> smart constructor.
data ListStreams
ListStreams' :: Maybe Text -> Maybe StreamNameCondition -> Maybe Natural -> ListStreams

-- | Create a value of <a>ListStreams</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListStreams'</a>, <a>listStreams_nextToken</a> - If
--   you specify this parameter, when the result of a <tt>ListStreams</tt>
--   operation is truncated, the call returns the <tt>NextToken</tt> in the
--   response. To get another batch of streams, provide this token in your
--   next request.
--   
--   <a>$sel:streamNameCondition:ListStreams'</a>,
--   <a>listStreams_streamNameCondition</a> - Optional: Returns only
--   streams that satisfy a specific condition. Currently, you can specify
--   only the prefix of a stream name as a condition.
--   
--   <a>$sel:maxResults:ListStreams'</a>, <a>listStreams_maxResults</a> -
--   The maximum number of streams to return in the response. The default
--   is 10,000.
newListStreams :: ListStreams

-- | <i>See:</i> <a>newListStreamsResponse</a> smart constructor.
data ListStreamsResponse
ListStreamsResponse' :: Maybe [StreamInfo] -> Maybe Text -> Int -> ListStreamsResponse

-- | Create a value of <a>ListStreamsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamInfoList:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_streamInfoList</a> - An array of
--   <tt>StreamInfo</tt> objects.
--   
--   <a>$sel:nextToken:ListStreams'</a>,
--   <a>listStreamsResponse_nextToken</a> - If the response is truncated,
--   the call returns this element with a token. To get the next batch of
--   streams, use this token in your next request.
--   
--   <a>$sel:httpStatus:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_httpStatus</a> - The response's http status
--   code.
newListStreamsResponse :: Int -> ListStreamsResponse

-- | <i>See:</i> <a>newCreateStream</a> smart constructor.
data CreateStream
CreateStream' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe Text -> Maybe (HashMap Text Text) -> Text -> CreateStream

-- | Create a value of <a>CreateStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mediaType:CreateStream'</a>, <a>createStream_mediaType</a> -
--   The media type of the stream. Consumers of the stream can use this
--   information when processing the stream. For more information about
--   media types, see <a>Media Types</a>. If you choose to specify the
--   <tt>MediaType</tt>, see <a>Naming Requirements</a> for guidelines.
--   
--   Example valid values include "video/h264" and "video/h264,audio/aac".
--   
--   This parameter is optional; the default value is <tt>null</tt> (or
--   empty in JSON).
--   
--   <a>$sel:dataRetentionInHours:CreateStream'</a>,
--   <a>createStream_dataRetentionInHours</a> - The number of hours that
--   you want to retain the data in the stream. Kinesis Video Streams
--   retains the data in a data store that is associated with the stream.
--   
--   The default value is 0, indicating that the stream does not persist
--   data.
--   
--   When the <tt>DataRetentionInHours</tt> value is 0, consumers can still
--   consume the fragments that remain in the service host buffer, which
--   has a retention time limit of 5 minutes and a retention memory limit
--   of 200 MB. Fragments are removed from the buffer when either limit is
--   reached.
--   
--   <a>$sel:kmsKeyId:CreateStream'</a>, <a>createStream_kmsKeyId</a> - The
--   ID of the AWS Key Management Service (AWS KMS) key that you want
--   Kinesis Video Streams to use to encrypt stream data.
--   
--   If no key ID is specified, the default, Kinesis Video-managed key
--   (<tt>aws/kinesisvideo</tt>) is used.
--   
--   For more information, see <a>DescribeKey</a>.
--   
--   <a>$sel:deviceName:CreateStream'</a>, <a>createStream_deviceName</a> -
--   The name of the device that is writing to the stream.
--   
--   In the current implementation, Kinesis Video Streams does not use this
--   name.
--   
--   <a>$sel:tags:CreateStream'</a>, <a>createStream_tags</a> - A list of
--   tags to associate with the specified stream. Each tag is a key-value
--   pair (the value is optional).
--   
--   <a>$sel:streamName:CreateStream'</a>, <a>createStream_streamName</a> -
--   A name for the stream that you are creating.
--   
--   The stream name is an identifier for the stream, and must be unique
--   for each account and region.
newCreateStream :: Text -> CreateStream

-- | <i>See:</i> <a>newCreateStreamResponse</a> smart constructor.
data CreateStreamResponse
CreateStreamResponse' :: Maybe Text -> Int -> CreateStreamResponse

-- | Create a value of <a>CreateStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:CreateStreamResponse'</a>,
--   <a>createStreamResponse_streamARN</a> - The Amazon Resource Name (ARN)
--   of the stream.
--   
--   <a>$sel:httpStatus:CreateStreamResponse'</a>,
--   <a>createStreamResponse_httpStatus</a> - The response's http status
--   code.
newCreateStreamResponse :: Int -> CreateStreamResponse

-- | <i>See:</i> <a>newDescribeSignalingChannel</a> smart constructor.
data DescribeSignalingChannel
DescribeSignalingChannel' :: Maybe Text -> Maybe Text -> DescribeSignalingChannel

-- | Create a value of <a>DescribeSignalingChannel</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:channelARN:DescribeSignalingChannel'</a>,
--   <a>describeSignalingChannel_channelARN</a> - The ARN of the signaling
--   channel that you want to describe.
--   
--   <a>$sel:channelName:DescribeSignalingChannel'</a>,
--   <a>describeSignalingChannel_channelName</a> - The name of the
--   signaling channel that you want to describe.
newDescribeSignalingChannel :: DescribeSignalingChannel

-- | <i>See:</i> <a>newDescribeSignalingChannelResponse</a> smart
--   constructor.
data DescribeSignalingChannelResponse
DescribeSignalingChannelResponse' :: Maybe ChannelInfo -> Int -> DescribeSignalingChannelResponse

-- | Create a value of <a>DescribeSignalingChannelResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:channelInfo:DescribeSignalingChannelResponse'</a>,
--   <a>describeSignalingChannelResponse_channelInfo</a> - A structure that
--   encapsulates the specified signaling channel's metadata and
--   properties.
--   
--   <a>$sel:httpStatus:DescribeSignalingChannelResponse'</a>,
--   <a>describeSignalingChannelResponse_httpStatus</a> - The response's
--   http status code.
newDescribeSignalingChannelResponse :: Int -> DescribeSignalingChannelResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> NonEmpty Tag -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceARN:TagResource'</a>, <a>tagResource_resourceARN</a> -
--   The Amazon Resource Name (ARN) of the signaling channel to which you
--   want to add tags.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - A list of
--   tags to associate with the specified signaling channel. Each tag is a
--   key-value pair.
newTagResource :: Text -> NonEmpty Tag -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> NonEmpty Text -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceARN:UntagResource'</a>,
--   <a>untagResource_resourceARN</a> - The Amazon Resource Name (ARN) of
--   the signaling channel from which you want to remove tags.
--   
--   <a>$sel:tagKeyList:UntagResource'</a>, <a>untagResource_tagKeyList</a>
--   - A list of the keys of the tags that you want to remove.
newUntagResource :: Text -> NonEmpty Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | <i>See:</i> <a>newTagStream</a> smart constructor.
data TagStream
TagStream' :: Maybe Text -> Maybe Text -> HashMap Text Text -> TagStream

-- | Create a value of <a>TagStream</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:TagStream'</a>, <a>tagStream_streamARN</a> - The
--   Amazon Resource Name (ARN) of the resource that you want to add the
--   tag or tags to.
--   
--   <a>$sel:streamName:TagStream'</a>, <a>tagStream_streamName</a> - The
--   name of the stream that you want to add the tag or tags to.
--   
--   <a>$sel:tags:TagStream'</a>, <a>tagStream_tags</a> - A list of tags to
--   associate with the specified stream. Each tag is a key-value pair (the
--   value is optional).
newTagStream :: TagStream

-- | <i>See:</i> <a>newTagStreamResponse</a> smart constructor.
data TagStreamResponse
TagStreamResponse' :: Int -> TagStreamResponse

-- | Create a value of <a>TagStreamResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagStreamResponse'</a>,
--   <a>tagStreamResponse_httpStatus</a> - The response's http status code.
newTagStreamResponse :: Int -> TagStreamResponse

-- | <i>See:</i> <a>newCreateSignalingChannel</a> smart constructor.
data CreateSignalingChannel
CreateSignalingChannel' :: Maybe SingleMasterConfiguration -> Maybe ChannelType -> Maybe [Tag] -> Text -> CreateSignalingChannel

-- | Create a value of <a>CreateSignalingChannel</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:singleMasterConfiguration:CreateSignalingChannel'</a>,
--   <a>createSignalingChannel_singleMasterConfiguration</a> - A structure
--   containing the configuration for the <tt>SINGLE_MASTER</tt> channel
--   type.
--   
--   <a>$sel:channelType:CreateSignalingChannel'</a>,
--   <a>createSignalingChannel_channelType</a> - A type of the signaling
--   channel that you are creating. Currently, <tt>SINGLE_MASTER</tt> is
--   the only supported channel type.
--   
--   <a>$sel:tags:CreateSignalingChannel'</a>,
--   <a>createSignalingChannel_tags</a> - A set of tags (key-value pairs)
--   that you want to associate with this channel.
--   
--   <a>$sel:channelName:CreateSignalingChannel'</a>,
--   <a>createSignalingChannel_channelName</a> - A name for the signaling
--   channel that you are creating. It must be unique for each AWS account
--   and AWS Region.
newCreateSignalingChannel :: Text -> CreateSignalingChannel

-- | <i>See:</i> <a>newCreateSignalingChannelResponse</a> smart
--   constructor.
data CreateSignalingChannelResponse
CreateSignalingChannelResponse' :: Maybe Text -> Int -> CreateSignalingChannelResponse

-- | Create a value of <a>CreateSignalingChannelResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:channelARN:CreateSignalingChannelResponse'</a>,
--   <a>createSignalingChannelResponse_channelARN</a> - The Amazon Resource
--   Name (ARN) of the created channel.
--   
--   <a>$sel:httpStatus:CreateSignalingChannelResponse'</a>,
--   <a>createSignalingChannelResponse_httpStatus</a> - The response's http
--   status code.
newCreateSignalingChannelResponse :: Int -> CreateSignalingChannelResponse

-- | <i>See:</i> <a>newDescribeStream</a> smart constructor.
data DescribeStream
DescribeStream' :: Maybe Text -> Maybe Text -> DescribeStream

-- | Create a value of <a>DescribeStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamARN:DescribeStream'</a>, <a>describeStream_streamARN</a>
--   - The Amazon Resource Name (ARN) of the stream.
--   
--   <a>$sel:streamName:DescribeStream'</a>,
--   <a>describeStream_streamName</a> - The name of the stream.
newDescribeStream :: DescribeStream

-- | <i>See:</i> <a>newDescribeStreamResponse</a> smart constructor.
data DescribeStreamResponse
DescribeStreamResponse' :: Maybe StreamInfo -> Int -> DescribeStreamResponse

-- | Create a value of <a>DescribeStreamResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamInfo:DescribeStreamResponse'</a>,
--   <a>describeStreamResponse_streamInfo</a> - An object that describes
--   the stream.
--   
--   <a>$sel:httpStatus:DescribeStreamResponse'</a>,
--   <a>describeStreamResponse_httpStatus</a> - The response's http status
--   code.
newDescribeStreamResponse :: Int -> DescribeStreamResponse
newtype APIName
APIName' :: Text -> APIName
[fromAPIName] :: APIName -> Text
pattern APIName_GET_CLIP :: APIName
pattern APIName_GET_DASH_STREAMING_SESSION_URL :: APIName
pattern APIName_GET_HLS_STREAMING_SESSION_URL :: APIName
pattern APIName_GET_MEDIA :: APIName
pattern APIName_GET_MEDIA_FOR_FRAGMENT_LIST :: APIName
pattern APIName_LIST_FRAGMENTS :: APIName
pattern APIName_PUT_MEDIA :: APIName
newtype ChannelProtocol
ChannelProtocol' :: Text -> ChannelProtocol
[fromChannelProtocol] :: ChannelProtocol -> Text
pattern ChannelProtocol_HTTPS :: ChannelProtocol
pattern ChannelProtocol_WSS :: ChannelProtocol
newtype ChannelRole
ChannelRole' :: Text -> ChannelRole
[fromChannelRole] :: ChannelRole -> Text
pattern ChannelRole_MASTER :: ChannelRole
pattern ChannelRole_VIEWER :: ChannelRole
newtype ChannelType
ChannelType' :: Text -> ChannelType
[fromChannelType] :: ChannelType -> Text
pattern ChannelType_SINGLE_MASTER :: ChannelType
newtype ComparisonOperator
ComparisonOperator' :: Text -> ComparisonOperator
[fromComparisonOperator] :: ComparisonOperator -> Text
pattern ComparisonOperator_BEGINS_WITH :: ComparisonOperator
newtype StreamStatus
StreamStatus' :: Text -> StreamStatus
[fromStreamStatus] :: StreamStatus -> Text
pattern StreamStatus_ACTIVE :: StreamStatus
pattern StreamStatus_CREATING :: StreamStatus
pattern StreamStatus_DELETING :: StreamStatus
pattern StreamStatus_UPDATING :: StreamStatus
newtype UpdateDataRetentionOperation
UpdateDataRetentionOperation' :: Text -> UpdateDataRetentionOperation
[fromUpdateDataRetentionOperation] :: UpdateDataRetentionOperation -> Text
pattern UpdateDataRetentionOperation_DECREASE_DATA_RETENTION :: UpdateDataRetentionOperation
pattern UpdateDataRetentionOperation_INCREASE_DATA_RETENTION :: UpdateDataRetentionOperation

-- | A structure that encapsulates a signaling channel's metadata and
--   properties.
--   
--   <i>See:</i> <a>newChannelInfo</a> smart constructor.
data ChannelInfo
ChannelInfo' :: Maybe POSIX -> Maybe StreamStatus -> Maybe Text -> Maybe SingleMasterConfiguration -> Maybe Text -> Maybe Text -> Maybe ChannelType -> ChannelInfo

-- | Create a value of <a>ChannelInfo</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:ChannelInfo'</a>, <a>channelInfo_creationTime</a>
--   - The time at which the signaling channel was created.
--   
--   <a>$sel:channelStatus:ChannelInfo'</a>,
--   <a>channelInfo_channelStatus</a> - Current status of the signaling
--   channel.
--   
--   <a>$sel:channelARN:ChannelInfo'</a>, <a>channelInfo_channelARN</a> -
--   The Amazon Resource Name (ARN) of the signaling channel.
--   
--   <a>$sel:singleMasterConfiguration:ChannelInfo'</a>,
--   <a>channelInfo_singleMasterConfiguration</a> - A structure that
--   contains the configuration for the <tt>SINGLE_MASTER</tt> channel
--   type.
--   
--   <a>$sel:channelName:ChannelInfo'</a>, <a>channelInfo_channelName</a> -
--   The name of the signaling channel.
--   
--   <a>$sel:version:ChannelInfo'</a>, <a>channelInfo_version</a> - The
--   current version of the signaling channel.
--   
--   <a>$sel:channelType:ChannelInfo'</a>, <a>channelInfo_channelType</a> -
--   The type of the signaling channel.
newChannelInfo :: ChannelInfo

-- | An optional input parameter for the <tt>ListSignalingChannels</tt>
--   API. When this parameter is specified while invoking
--   <tt>ListSignalingChannels</tt>, the API returns only the channels that
--   satisfy a condition specified in <tt>ChannelNameCondition</tt>.
--   
--   <i>See:</i> <a>newChannelNameCondition</a> smart constructor.
data ChannelNameCondition
ChannelNameCondition' :: Maybe ComparisonOperator -> Maybe Text -> ChannelNameCondition

-- | Create a value of <a>ChannelNameCondition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:comparisonOperator:ChannelNameCondition'</a>,
--   <a>channelNameCondition_comparisonOperator</a> - A comparison
--   operator. Currently, you can only specify the <tt>BEGINS_WITH</tt>
--   operator, which finds signaling channels whose names begin with a
--   given prefix.
--   
--   <a>$sel:comparisonValue:ChannelNameCondition'</a>,
--   <a>channelNameCondition_comparisonValue</a> - A value to compare.
newChannelNameCondition :: ChannelNameCondition

-- | An object that describes the endpoint of the signaling channel
--   returned by the <tt>GetSignalingChannelEndpoint</tt> API.
--   
--   <i>See:</i> <a>newResourceEndpointListItem</a> smart constructor.
data ResourceEndpointListItem
ResourceEndpointListItem' :: Maybe ChannelProtocol -> Maybe Text -> ResourceEndpointListItem

-- | Create a value of <a>ResourceEndpointListItem</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocol:ResourceEndpointListItem'</a>,
--   <a>resourceEndpointListItem_protocol</a> - The protocol of the
--   signaling channel returned by the <tt>GetSignalingChannelEndpoint</tt>
--   API.
--   
--   <a>$sel:resourceEndpoint:ResourceEndpointListItem'</a>,
--   <a>resourceEndpointListItem_resourceEndpoint</a> - The endpoint of the
--   signaling channel returned by the <tt>GetSignalingChannelEndpoint</tt>
--   API.
newResourceEndpointListItem :: ResourceEndpointListItem

-- | An object that contains the endpoint configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
--   
--   <i>See:</i> <a>newSingleMasterChannelEndpointConfiguration</a> smart
--   constructor.
data SingleMasterChannelEndpointConfiguration
SingleMasterChannelEndpointConfiguration' :: Maybe (NonEmpty ChannelProtocol) -> Maybe ChannelRole -> SingleMasterChannelEndpointConfiguration

-- | Create a value of <a>SingleMasterChannelEndpointConfiguration</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocols:SingleMasterChannelEndpointConfiguration'</a>,
--   <a>singleMasterChannelEndpointConfiguration_protocols</a> - This
--   property is used to determine the nature of communication over this
--   <tt>SINGLE_MASTER</tt> signaling channel. If <tt>WSS</tt> is
--   specified, this API returns a websocket endpoint. If <tt>HTTPS</tt> is
--   specified, this API returns an <tt>HTTPS</tt> endpoint.
--   
--   <a>$sel:role':SingleMasterChannelEndpointConfiguration'</a>,
--   <a>singleMasterChannelEndpointConfiguration_role</a> - This property
--   is used to determine messaging permissions in this
--   <tt>SINGLE_MASTER</tt> signaling channel. If <tt>MASTER</tt> is
--   specified, this API returns an endpoint that a client can use to
--   receive offers from and send answers to any of the viewers on this
--   signaling channel. If <tt>VIEWER</tt> is specified, this API returns
--   an endpoint that a client can use only to send offers to another
--   <tt>MASTER</tt> client on this signaling channel.
newSingleMasterChannelEndpointConfiguration :: SingleMasterChannelEndpointConfiguration

-- | A structure that contains the configuration for the
--   <tt>SINGLE_MASTER</tt> channel type.
--   
--   <i>See:</i> <a>newSingleMasterConfiguration</a> smart constructor.
data SingleMasterConfiguration
SingleMasterConfiguration' :: Maybe Natural -> SingleMasterConfiguration

-- | Create a value of <a>SingleMasterConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:messageTtlSeconds:SingleMasterConfiguration'</a>,
--   <a>singleMasterConfiguration_messageTtlSeconds</a> - The period of
--   time a signaling channel retains underlivered messages before they are
--   discarded.
newSingleMasterConfiguration :: SingleMasterConfiguration

-- | An object describing a Kinesis video stream.
--   
--   <i>See:</i> <a>newStreamInfo</a> smart constructor.
data StreamInfo
StreamInfo' :: Maybe POSIX -> Maybe StreamStatus -> Maybe Text -> Maybe Natural -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> StreamInfo

-- | Create a value of <a>StreamInfo</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:StreamInfo'</a>, <a>streamInfo_creationTime</a> -
--   A time stamp that indicates when the stream was created.
--   
--   <a>$sel:status:StreamInfo'</a>, <a>streamInfo_status</a> - The status
--   of the stream.
--   
--   <a>$sel:mediaType:StreamInfo'</a>, <a>streamInfo_mediaType</a> - The
--   <tt>MediaType</tt> of the stream.
--   
--   <a>$sel:dataRetentionInHours:StreamInfo'</a>,
--   <a>streamInfo_dataRetentionInHours</a> - How long the stream retains
--   data, in hours.
--   
--   <a>$sel:streamARN:StreamInfo'</a>, <a>streamInfo_streamARN</a> - The
--   Amazon Resource Name (ARN) of the stream.
--   
--   <a>$sel:kmsKeyId:StreamInfo'</a>, <a>streamInfo_kmsKeyId</a> - The ID
--   of the AWS Key Management Service (AWS KMS) key that Kinesis Video
--   Streams uses to encrypt data on the stream.
--   
--   <a>$sel:deviceName:StreamInfo'</a>, <a>streamInfo_deviceName</a> - The
--   name of the device that is associated with the stream.
--   
--   <a>$sel:version:StreamInfo'</a>, <a>streamInfo_version</a> - The
--   version of the stream.
--   
--   <a>$sel:streamName:StreamInfo'</a>, <a>streamInfo_streamName</a> - The
--   name of the stream.
newStreamInfo :: StreamInfo

-- | Specifies the condition that streams must satisfy to be returned when
--   you list streams (see the <tt>ListStreams</tt> API). A condition has a
--   comparison operation and a value. Currently, you can specify only the
--   <tt>BEGINS_WITH</tt> operator, which finds streams whose names start
--   with a given prefix.
--   
--   <i>See:</i> <a>newStreamNameCondition</a> smart constructor.
data StreamNameCondition
StreamNameCondition' :: Maybe ComparisonOperator -> Maybe Text -> StreamNameCondition

-- | Create a value of <a>StreamNameCondition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:comparisonOperator:StreamNameCondition'</a>,
--   <a>streamNameCondition_comparisonOperator</a> - A comparison operator.
--   Currently, you can specify only the <tt>BEGINS_WITH</tt> operator,
--   which finds streams whose names start with a given prefix.
--   
--   <a>$sel:comparisonValue:StreamNameCondition'</a>,
--   <a>streamNameCondition_comparisonValue</a> - A value to compare.
newStreamNameCondition :: StreamNameCondition

-- | A key and value pair that is associated with the specified signaling
--   channel.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The key of the tag that is
--   associated with the specified signaling channel.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The value of the tag that
--   is associated with the specified signaling channel.
newTag :: Text -> Text -> Tag
