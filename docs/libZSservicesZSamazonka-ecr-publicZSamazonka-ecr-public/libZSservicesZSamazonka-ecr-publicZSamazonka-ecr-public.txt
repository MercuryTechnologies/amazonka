-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-ecr-publicZSamazonka-ecr-public
@version 2.0


module Amazonka.ECRPublic.Types.AuthorizationData

-- | An authorization token data object that corresponds to a public
--   registry.
--   
--   <i>See:</i> <a>newAuthorizationData</a> smart constructor.
data AuthorizationData
AuthorizationData' :: Maybe POSIX -> Maybe Text -> AuthorizationData

-- | The Unix time in seconds and milliseconds when the authorization token
--   expires. Authorization tokens are valid for 12 hours.
[$sel:expiresAt:AuthorizationData'] :: AuthorizationData -> Maybe POSIX

-- | A base64-encoded string that contains authorization data for a public
--   Amazon ECR registry. When the string is decoded, it is presented in
--   the format <tt>user:password</tt> for public registry authentication
--   using <tt>docker login</tt>.
[$sel:authorizationToken:AuthorizationData'] :: AuthorizationData -> Maybe Text

-- | Create a value of <a>AuthorizationData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expiresAt:AuthorizationData'</a>,
--   <a>authorizationData_expiresAt</a> - The Unix time in seconds and
--   milliseconds when the authorization token expires. Authorization
--   tokens are valid for 12 hours.
--   
--   <a>$sel:authorizationToken:AuthorizationData'</a>,
--   <a>authorizationData_authorizationToken</a> - A base64-encoded string
--   that contains authorization data for a public Amazon ECR registry.
--   When the string is decoded, it is presented in the format
--   <tt>user:password</tt> for public registry authentication using
--   <tt>docker login</tt>.
newAuthorizationData :: AuthorizationData

-- | The Unix time in seconds and milliseconds when the authorization token
--   expires. Authorization tokens are valid for 12 hours.
authorizationData_expiresAt :: Lens' AuthorizationData (Maybe UTCTime)

-- | A base64-encoded string that contains authorization data for a public
--   Amazon ECR registry. When the string is decoded, it is presented in
--   the format <tt>user:password</tt> for public registry authentication
--   using <tt>docker login</tt>.
authorizationData_authorizationToken :: Lens' AuthorizationData (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.AuthorizationData.AuthorizationData
instance GHC.Show.Show Amazonka.ECRPublic.Types.AuthorizationData.AuthorizationData
instance GHC.Read.Read Amazonka.ECRPublic.Types.AuthorizationData.AuthorizationData
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.AuthorizationData.AuthorizationData
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.AuthorizationData.AuthorizationData
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.AuthorizationData.AuthorizationData
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.AuthorizationData.AuthorizationData


module Amazonka.ECRPublic.Types.ImageDetail

-- | An object that describes an image returned by a DescribeImages
--   operation.
--   
--   <i>See:</i> <a>newImageDetail</a> smart constructor.
data ImageDetail
ImageDetail' :: Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Integer -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> ImageDetail

-- | The AWS account ID associated with the public registry to which this
--   image belongs.
[$sel:registryId:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The list of tags associated with this image.
[$sel:imageTags:ImageDetail'] :: ImageDetail -> Maybe [Text]

-- | The media type of the image manifest.
[$sel:imageManifestMediaType:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
[$sel:imageSizeInBytes:ImageDetail'] :: ImageDetail -> Maybe Integer

-- | The <tt>sha256</tt> digest of the image manifest.
[$sel:imageDigest:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The artifact media type of the image.
[$sel:artifactMediaType:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
[$sel:imagePushedAt:ImageDetail'] :: ImageDetail -> Maybe POSIX

-- | The name of the repository to which this image belongs.
[$sel:repositoryName:ImageDetail'] :: ImageDetail -> Maybe Text

-- | Create a value of <a>ImageDetail</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:ImageDetail'</a>, <a>imageDetail_registryId</a> -
--   The AWS account ID associated with the public registry to which this
--   image belongs.
--   
--   <a>$sel:imageTags:ImageDetail'</a>, <a>imageDetail_imageTags</a> - The
--   list of tags associated with this image.
--   
--   <a>$sel:imageManifestMediaType:ImageDetail'</a>,
--   <a>imageDetail_imageManifestMediaType</a> - The media type of the
--   image manifest.
--   
--   <a>$sel:imageSizeInBytes:ImageDetail'</a>,
--   <a>imageDetail_imageSizeInBytes</a> - The size, in bytes, of the image
--   in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
--   
--   <a>$sel:imageDigest:ImageDetail'</a>, <a>imageDetail_imageDigest</a> -
--   The <tt>sha256</tt> digest of the image manifest.
--   
--   <a>$sel:artifactMediaType:ImageDetail'</a>,
--   <a>imageDetail_artifactMediaType</a> - The artifact media type of the
--   image.
--   
--   <a>$sel:imagePushedAt:ImageDetail'</a>,
--   <a>imageDetail_imagePushedAt</a> - The date and time, expressed in
--   standard JavaScript date format, at which the current image was pushed
--   to the repository.
--   
--   <a>$sel:repositoryName:ImageDetail'</a>,
--   <a>imageDetail_repositoryName</a> - The name of the repository to
--   which this image belongs.
newImageDetail :: ImageDetail

-- | The AWS account ID associated with the public registry to which this
--   image belongs.
imageDetail_registryId :: Lens' ImageDetail (Maybe Text)

-- | The list of tags associated with this image.
imageDetail_imageTags :: Lens' ImageDetail (Maybe [Text])

-- | The media type of the image manifest.
imageDetail_imageManifestMediaType :: Lens' ImageDetail (Maybe Text)

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
imageDetail_imageSizeInBytes :: Lens' ImageDetail (Maybe Integer)

-- | The <tt>sha256</tt> digest of the image manifest.
imageDetail_imageDigest :: Lens' ImageDetail (Maybe Text)

-- | The artifact media type of the image.
imageDetail_artifactMediaType :: Lens' ImageDetail (Maybe Text)

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
imageDetail_imagePushedAt :: Lens' ImageDetail (Maybe UTCTime)

-- | The name of the repository to which this image belongs.
imageDetail_repositoryName :: Lens' ImageDetail (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.ImageDetail.ImageDetail
instance GHC.Show.Show Amazonka.ECRPublic.Types.ImageDetail.ImageDetail
instance GHC.Read.Read Amazonka.ECRPublic.Types.ImageDetail.ImageDetail
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.ImageDetail.ImageDetail
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.ImageDetail.ImageDetail
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.ImageDetail.ImageDetail
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.ImageDetail.ImageDetail


module Amazonka.ECRPublic.Types.ImageFailureCode
newtype ImageFailureCode
ImageFailureCode' :: Text -> ImageFailureCode
[fromImageFailureCode] :: ImageFailureCode -> Text
pattern ImageFailureCode_ImageNotFound :: ImageFailureCode
pattern ImageFailureCode_ImageReferencedByManifestList :: ImageFailureCode
pattern ImageFailureCode_ImageTagDoesNotMatchDigest :: ImageFailureCode
pattern ImageFailureCode_InvalidImageDigest :: ImageFailureCode
pattern ImageFailureCode_InvalidImageTag :: ImageFailureCode
pattern ImageFailureCode_KmsError :: ImageFailureCode
pattern ImageFailureCode_MissingDigestAndTag :: ImageFailureCode
instance Amazonka.Data.XML.ToXML Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Amazonka.Data.XML.FromXML Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Amazonka.Data.Headers.ToHeader Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Amazonka.Data.Log.ToLog Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Amazonka.Data.Text.ToText Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Amazonka.Data.Text.FromText Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance GHC.Classes.Ord Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance GHC.Read.Read Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode
instance GHC.Show.Show Amazonka.ECRPublic.Types.ImageFailureCode.ImageFailureCode


module Amazonka.ECRPublic.Types.ImageIdentifier

-- | An object with identifying information for an Amazon ECR image.
--   
--   <i>See:</i> <a>newImageIdentifier</a> smart constructor.
data ImageIdentifier
ImageIdentifier' :: Maybe Text -> Maybe Text -> ImageIdentifier

-- | The <tt>sha256</tt> digest of the image manifest.
[$sel:imageDigest:ImageIdentifier'] :: ImageIdentifier -> Maybe Text

-- | The tag used for the image.
[$sel:imageTag:ImageIdentifier'] :: ImageIdentifier -> Maybe Text

-- | Create a value of <a>ImageIdentifier</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:ImageIdentifier'</a>,
--   <a>imageIdentifier_imageDigest</a> - The <tt>sha256</tt> digest of the
--   image manifest.
--   
--   <a>$sel:imageTag:ImageIdentifier'</a>, <a>imageIdentifier_imageTag</a>
--   - The tag used for the image.
newImageIdentifier :: ImageIdentifier

-- | The <tt>sha256</tt> digest of the image manifest.
imageIdentifier_imageDigest :: Lens' ImageIdentifier (Maybe Text)

-- | The tag used for the image.
imageIdentifier_imageTag :: Lens' ImageIdentifier (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.ImageIdentifier.ImageIdentifier
instance GHC.Show.Show Amazonka.ECRPublic.Types.ImageIdentifier.ImageIdentifier
instance GHC.Read.Read Amazonka.ECRPublic.Types.ImageIdentifier.ImageIdentifier
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.ImageIdentifier.ImageIdentifier
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.ImageIdentifier.ImageIdentifier
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.ImageIdentifier.ImageIdentifier
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.ImageIdentifier.ImageIdentifier
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.Types.ImageIdentifier.ImageIdentifier


module Amazonka.ECRPublic.Types.ImageFailure

-- | An object representing an Amazon ECR image failure.
--   
--   <i>See:</i> <a>newImageFailure</a> smart constructor.
data ImageFailure
ImageFailure' :: Maybe Text -> Maybe ImageFailureCode -> Maybe ImageIdentifier -> ImageFailure

-- | The reason for the failure.
[$sel:failureReason:ImageFailure'] :: ImageFailure -> Maybe Text

-- | The code associated with the failure.
[$sel:failureCode:ImageFailure'] :: ImageFailure -> Maybe ImageFailureCode

-- | The image ID associated with the failure.
[$sel:imageId:ImageFailure'] :: ImageFailure -> Maybe ImageIdentifier

-- | Create a value of <a>ImageFailure</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureReason:ImageFailure'</a>,
--   <a>imageFailure_failureReason</a> - The reason for the failure.
--   
--   <a>$sel:failureCode:ImageFailure'</a>, <a>imageFailure_failureCode</a>
--   - The code associated with the failure.
--   
--   <a>$sel:imageId:ImageFailure'</a>, <a>imageFailure_imageId</a> - The
--   image ID associated with the failure.
newImageFailure :: ImageFailure

-- | The reason for the failure.
imageFailure_failureReason :: Lens' ImageFailure (Maybe Text)

-- | The code associated with the failure.
imageFailure_failureCode :: Lens' ImageFailure (Maybe ImageFailureCode)

-- | The image ID associated with the failure.
imageFailure_imageId :: Lens' ImageFailure (Maybe ImageIdentifier)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.ImageFailure.ImageFailure
instance GHC.Show.Show Amazonka.ECRPublic.Types.ImageFailure.ImageFailure
instance GHC.Read.Read Amazonka.ECRPublic.Types.ImageFailure.ImageFailure
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.ImageFailure.ImageFailure
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.ImageFailure.ImageFailure
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.ImageFailure.ImageFailure
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.ImageFailure.ImageFailure


module Amazonka.ECRPublic.Types.Image

-- | An object representing an Amazon ECR image.
--   
--   <i>See:</i> <a>newImage</a> smart constructor.
data Image
Image' :: Maybe Text -> Maybe Text -> Maybe ImageIdentifier -> Maybe Text -> Maybe Text -> Image

-- | The AWS account ID associated with the registry containing the image.
[$sel:registryId:Image'] :: Image -> Maybe Text

-- | The manifest media type of the image.
[$sel:imageManifestMediaType:Image'] :: Image -> Maybe Text

-- | An object containing the image tag and image digest associated with an
--   image.
[$sel:imageId:Image'] :: Image -> Maybe ImageIdentifier

-- | The name of the repository associated with the image.
[$sel:repositoryName:Image'] :: Image -> Maybe Text

-- | The image manifest associated with the image.
[$sel:imageManifest:Image'] :: Image -> Maybe Text

-- | Create a value of <a>Image</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:Image'</a>, <a>image_registryId</a> - The AWS
--   account ID associated with the registry containing the image.
--   
--   <a>$sel:imageManifestMediaType:Image'</a>,
--   <a>image_imageManifestMediaType</a> - The manifest media type of the
--   image.
--   
--   <a>$sel:imageId:Image'</a>, <a>image_imageId</a> - An object
--   containing the image tag and image digest associated with an image.
--   
--   <a>$sel:repositoryName:Image'</a>, <a>image_repositoryName</a> - The
--   name of the repository associated with the image.
--   
--   <a>$sel:imageManifest:Image'</a>, <a>image_imageManifest</a> - The
--   image manifest associated with the image.
newImage :: Image

-- | The AWS account ID associated with the registry containing the image.
image_registryId :: Lens' Image (Maybe Text)

-- | The manifest media type of the image.
image_imageManifestMediaType :: Lens' Image (Maybe Text)

-- | An object containing the image tag and image digest associated with an
--   image.
image_imageId :: Lens' Image (Maybe ImageIdentifier)

-- | The name of the repository associated with the image.
image_repositoryName :: Lens' Image (Maybe Text)

-- | The image manifest associated with the image.
image_imageManifest :: Lens' Image (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.Image.Image
instance GHC.Show.Show Amazonka.ECRPublic.Types.Image.Image
instance GHC.Read.Read Amazonka.ECRPublic.Types.Image.Image
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.Image.Image
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.Image.Image
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.Image.Image
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.Image.Image


module Amazonka.ECRPublic.Types.LayerAvailability
newtype LayerAvailability
LayerAvailability' :: Text -> LayerAvailability
[fromLayerAvailability] :: LayerAvailability -> Text
pattern LayerAvailability_AVAILABLE :: LayerAvailability
pattern LayerAvailability_UNAVAILABLE :: LayerAvailability
instance Amazonka.Data.XML.ToXML Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Amazonka.Data.XML.FromXML Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Amazonka.Data.Headers.ToHeader Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Amazonka.Data.Log.ToLog Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Amazonka.Data.Text.ToText Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Amazonka.Data.Text.FromText Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance GHC.Classes.Ord Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance GHC.Read.Read Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability
instance GHC.Show.Show Amazonka.ECRPublic.Types.LayerAvailability.LayerAvailability


module Amazonka.ECRPublic.Types.Layer

-- | An object representing an Amazon ECR image layer.
--   
--   <i>See:</i> <a>newLayer</a> smart constructor.
data Layer
Layer' :: Maybe Text -> Maybe Text -> Maybe Integer -> Maybe LayerAvailability -> Layer

-- | The media type of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
[$sel:mediaType:Layer'] :: Layer -> Maybe Text

-- | The <tt>sha256</tt> digest of the image layer.
[$sel:layerDigest:Layer'] :: Layer -> Maybe Text

-- | The size, in bytes, of the image layer.
[$sel:layerSize:Layer'] :: Layer -> Maybe Integer

-- | The availability status of the image layer.
[$sel:layerAvailability:Layer'] :: Layer -> Maybe LayerAvailability

-- | Create a value of <a>Layer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mediaType:Layer'</a>, <a>layer_mediaType</a> - The media type
--   of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
--   
--   <a>$sel:layerDigest:Layer'</a>, <a>layer_layerDigest</a> - The
--   <tt>sha256</tt> digest of the image layer.
--   
--   <a>$sel:layerSize:Layer'</a>, <a>layer_layerSize</a> - The size, in
--   bytes, of the image layer.
--   
--   <a>$sel:layerAvailability:Layer'</a>, <a>layer_layerAvailability</a> -
--   The availability status of the image layer.
newLayer :: Layer

-- | The media type of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
layer_mediaType :: Lens' Layer (Maybe Text)

-- | The <tt>sha256</tt> digest of the image layer.
layer_layerDigest :: Lens' Layer (Maybe Text)

-- | The size, in bytes, of the image layer.
layer_layerSize :: Lens' Layer (Maybe Integer)

-- | The availability status of the image layer.
layer_layerAvailability :: Lens' Layer (Maybe LayerAvailability)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.Layer.Layer
instance GHC.Show.Show Amazonka.ECRPublic.Types.Layer.Layer
instance GHC.Read.Read Amazonka.ECRPublic.Types.Layer.Layer
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.Layer.Layer
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.Layer.Layer
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.Layer.Layer
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.Layer.Layer


module Amazonka.ECRPublic.Types.LayerFailureCode
newtype LayerFailureCode
LayerFailureCode' :: Text -> LayerFailureCode
[fromLayerFailureCode] :: LayerFailureCode -> Text
pattern LayerFailureCode_InvalidLayerDigest :: LayerFailureCode
pattern LayerFailureCode_MissingLayerDigest :: LayerFailureCode
instance Amazonka.Data.XML.ToXML Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Amazonka.Data.XML.FromXML Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Amazonka.Data.Headers.ToHeader Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Amazonka.Data.Log.ToLog Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Amazonka.Data.Text.ToText Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Amazonka.Data.Text.FromText Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance GHC.Classes.Ord Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance GHC.Read.Read Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode
instance GHC.Show.Show Amazonka.ECRPublic.Types.LayerFailureCode.LayerFailureCode


module Amazonka.ECRPublic.Types.LayerFailure

-- | An object representing an Amazon ECR image layer failure.
--   
--   <i>See:</i> <a>newLayerFailure</a> smart constructor.
data LayerFailure
LayerFailure' :: Maybe Text -> Maybe LayerFailureCode -> Maybe Text -> LayerFailure

-- | The reason for the failure.
[$sel:failureReason:LayerFailure'] :: LayerFailure -> Maybe Text

-- | The failure code associated with the failure.
[$sel:failureCode:LayerFailure'] :: LayerFailure -> Maybe LayerFailureCode

-- | The layer digest associated with the failure.
[$sel:layerDigest:LayerFailure'] :: LayerFailure -> Maybe Text

-- | Create a value of <a>LayerFailure</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureReason:LayerFailure'</a>,
--   <a>layerFailure_failureReason</a> - The reason for the failure.
--   
--   <a>$sel:failureCode:LayerFailure'</a>, <a>layerFailure_failureCode</a>
--   - The failure code associated with the failure.
--   
--   <a>$sel:layerDigest:LayerFailure'</a>, <a>layerFailure_layerDigest</a>
--   - The layer digest associated with the failure.
newLayerFailure :: LayerFailure

-- | The reason for the failure.
layerFailure_failureReason :: Lens' LayerFailure (Maybe Text)

-- | The failure code associated with the failure.
layerFailure_failureCode :: Lens' LayerFailure (Maybe LayerFailureCode)

-- | The layer digest associated with the failure.
layerFailure_layerDigest :: Lens' LayerFailure (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.LayerFailure.LayerFailure
instance GHC.Show.Show Amazonka.ECRPublic.Types.LayerFailure.LayerFailure
instance GHC.Read.Read Amazonka.ECRPublic.Types.LayerFailure.LayerFailure
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.LayerFailure.LayerFailure
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.LayerFailure.LayerFailure
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.LayerFailure.LayerFailure
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.LayerFailure.LayerFailure


module Amazonka.ECRPublic.Types.ReferencedImageDetail

-- | An object that describes the image tag details returned by a
--   DescribeImageTags action.
--   
--   <i>See:</i> <a>newReferencedImageDetail</a> smart constructor.
data ReferencedImageDetail
ReferencedImageDetail' :: Maybe Text -> Maybe Integer -> Maybe Text -> Maybe Text -> Maybe POSIX -> ReferencedImageDetail

-- | The media type of the image manifest.
[$sel:imageManifestMediaType:ReferencedImageDetail'] :: ReferencedImageDetail -> Maybe Text

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
[$sel:imageSizeInBytes:ReferencedImageDetail'] :: ReferencedImageDetail -> Maybe Integer

-- | The <tt>sha256</tt> digest of the image manifest.
[$sel:imageDigest:ReferencedImageDetail'] :: ReferencedImageDetail -> Maybe Text

-- | The artifact media type of the image.
[$sel:artifactMediaType:ReferencedImageDetail'] :: ReferencedImageDetail -> Maybe Text

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image tag was pushed to the repository.
[$sel:imagePushedAt:ReferencedImageDetail'] :: ReferencedImageDetail -> Maybe POSIX

-- | Create a value of <a>ReferencedImageDetail</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageManifestMediaType:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_imageManifestMediaType</a> - The media type
--   of the image manifest.
--   
--   <a>$sel:imageSizeInBytes:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_imageSizeInBytes</a> - The size, in bytes, of
--   the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
--   
--   <a>$sel:imageDigest:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_imageDigest</a> - The <tt>sha256</tt> digest
--   of the image manifest.
--   
--   <a>$sel:artifactMediaType:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_artifactMediaType</a> - The artifact media
--   type of the image.
--   
--   <a>$sel:imagePushedAt:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_imagePushedAt</a> - The date and time,
--   expressed in standard JavaScript date format, at which the current
--   image tag was pushed to the repository.
newReferencedImageDetail :: ReferencedImageDetail

-- | The media type of the image manifest.
referencedImageDetail_imageManifestMediaType :: Lens' ReferencedImageDetail (Maybe Text)

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
referencedImageDetail_imageSizeInBytes :: Lens' ReferencedImageDetail (Maybe Integer)

-- | The <tt>sha256</tt> digest of the image manifest.
referencedImageDetail_imageDigest :: Lens' ReferencedImageDetail (Maybe Text)

-- | The artifact media type of the image.
referencedImageDetail_artifactMediaType :: Lens' ReferencedImageDetail (Maybe Text)

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image tag was pushed to the repository.
referencedImageDetail_imagePushedAt :: Lens' ReferencedImageDetail (Maybe UTCTime)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.ReferencedImageDetail.ReferencedImageDetail
instance GHC.Show.Show Amazonka.ECRPublic.Types.ReferencedImageDetail.ReferencedImageDetail
instance GHC.Read.Read Amazonka.ECRPublic.Types.ReferencedImageDetail.ReferencedImageDetail
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.ReferencedImageDetail.ReferencedImageDetail
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.ReferencedImageDetail.ReferencedImageDetail
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.ReferencedImageDetail.ReferencedImageDetail
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.ReferencedImageDetail.ReferencedImageDetail


module Amazonka.ECRPublic.Types.ImageTagDetail

-- | An object representing the image tag details for an image.
--   
--   <i>See:</i> <a>newImageTagDetail</a> smart constructor.
data ImageTagDetail
ImageTagDetail' :: Maybe POSIX -> Maybe ReferencedImageDetail -> Maybe Text -> ImageTagDetail

-- | The time stamp indicating when the image tag was created.
[$sel:createdAt:ImageTagDetail'] :: ImageTagDetail -> Maybe POSIX

-- | An object that describes the details of an image.
[$sel:imageDetail:ImageTagDetail'] :: ImageTagDetail -> Maybe ReferencedImageDetail

-- | The tag associated with the image.
[$sel:imageTag:ImageTagDetail'] :: ImageTagDetail -> Maybe Text

-- | Create a value of <a>ImageTagDetail</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:createdAt:ImageTagDetail'</a>, <a>imageTagDetail_createdAt</a>
--   - The time stamp indicating when the image tag was created.
--   
--   <a>$sel:imageDetail:ImageTagDetail'</a>,
--   <a>imageTagDetail_imageDetail</a> - An object that describes the
--   details of an image.
--   
--   <a>$sel:imageTag:ImageTagDetail'</a>, <a>imageTagDetail_imageTag</a> -
--   The tag associated with the image.
newImageTagDetail :: ImageTagDetail

-- | The time stamp indicating when the image tag was created.
imageTagDetail_createdAt :: Lens' ImageTagDetail (Maybe UTCTime)

-- | An object that describes the details of an image.
imageTagDetail_imageDetail :: Lens' ImageTagDetail (Maybe ReferencedImageDetail)

-- | The tag associated with the image.
imageTagDetail_imageTag :: Lens' ImageTagDetail (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.ImageTagDetail.ImageTagDetail
instance GHC.Show.Show Amazonka.ECRPublic.Types.ImageTagDetail.ImageTagDetail
instance GHC.Read.Read Amazonka.ECRPublic.Types.ImageTagDetail.ImageTagDetail
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.ImageTagDetail.ImageTagDetail
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.ImageTagDetail.ImageTagDetail
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.ImageTagDetail.ImageTagDetail
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.ImageTagDetail.ImageTagDetail


module Amazonka.ECRPublic.Types.RegistryAliasStatus
newtype RegistryAliasStatus
RegistryAliasStatus' :: Text -> RegistryAliasStatus
[fromRegistryAliasStatus] :: RegistryAliasStatus -> Text
pattern RegistryAliasStatus_ACTIVE :: RegistryAliasStatus
pattern RegistryAliasStatus_PENDING :: RegistryAliasStatus
pattern RegistryAliasStatus_REJECTED :: RegistryAliasStatus
instance Amazonka.Data.XML.ToXML Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Amazonka.Data.XML.FromXML Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Amazonka.Data.Log.ToLog Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Amazonka.Data.Text.ToText Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Amazonka.Data.Text.FromText Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance GHC.Classes.Ord Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance GHC.Read.Read Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus
instance GHC.Show.Show Amazonka.ECRPublic.Types.RegistryAliasStatus.RegistryAliasStatus


module Amazonka.ECRPublic.Types.RegistryAlias

-- | An object representing the aliases for a public registry. A public
--   registry is given an alias upon creation but a custom alias can be set
--   using the Amazon ECR console. For more information, see
--   <a>Registries</a> in the <i>Amazon Elastic Container Registry User
--   Guide</i>.
--   
--   <i>See:</i> <a>newRegistryAlias</a> smart constructor.
data RegistryAlias
RegistryAlias' :: Text -> RegistryAliasStatus -> Bool -> Bool -> RegistryAlias

-- | The name of the registry alias.
[$sel:name:RegistryAlias'] :: RegistryAlias -> Text

-- | The status of the registry alias.
[$sel:status:RegistryAlias'] :: RegistryAlias -> RegistryAliasStatus

-- | Whether or not the registry alias is the primary alias for the
--   registry. If true, the alias is the primary registry alias and is
--   displayed in both the repository URL and the image URI used in the
--   <tt>docker pull</tt> commands on the Amazon ECR Public Gallery.
--   
--   A registry alias that is not the primary registry alias can be used in
--   the repository URI in a <tt>docker pull</tt> command.
[$sel:primaryRegistryAlias:RegistryAlias'] :: RegistryAlias -> Bool

-- | Whether or not the registry alias is the default alias for the
--   registry. When the first public repository is created, your public
--   registry is assigned a default registry alias.
[$sel:defaultRegistryAlias:RegistryAlias'] :: RegistryAlias -> Bool

-- | Create a value of <a>RegistryAlias</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:RegistryAlias'</a>, <a>registryAlias_name</a> - The name
--   of the registry alias.
--   
--   <a>$sel:status:RegistryAlias'</a>, <a>registryAlias_status</a> - The
--   status of the registry alias.
--   
--   <a>$sel:primaryRegistryAlias:RegistryAlias'</a>,
--   <a>registryAlias_primaryRegistryAlias</a> - Whether or not the
--   registry alias is the primary alias for the registry. If true, the
--   alias is the primary registry alias and is displayed in both the
--   repository URL and the image URI used in the <tt>docker pull</tt>
--   commands on the Amazon ECR Public Gallery.
--   
--   A registry alias that is not the primary registry alias can be used in
--   the repository URI in a <tt>docker pull</tt> command.
--   
--   <a>$sel:defaultRegistryAlias:RegistryAlias'</a>,
--   <a>registryAlias_defaultRegistryAlias</a> - Whether or not the
--   registry alias is the default alias for the registry. When the first
--   public repository is created, your public registry is assigned a
--   default registry alias.
newRegistryAlias :: Text -> RegistryAliasStatus -> Bool -> Bool -> RegistryAlias

-- | The name of the registry alias.
registryAlias_name :: Lens' RegistryAlias Text

-- | The status of the registry alias.
registryAlias_status :: Lens' RegistryAlias RegistryAliasStatus

-- | Whether or not the registry alias is the primary alias for the
--   registry. If true, the alias is the primary registry alias and is
--   displayed in both the repository URL and the image URI used in the
--   <tt>docker pull</tt> commands on the Amazon ECR Public Gallery.
--   
--   A registry alias that is not the primary registry alias can be used in
--   the repository URI in a <tt>docker pull</tt> command.
registryAlias_primaryRegistryAlias :: Lens' RegistryAlias Bool

-- | Whether or not the registry alias is the default alias for the
--   registry. When the first public repository is created, your public
--   registry is assigned a default registry alias.
registryAlias_defaultRegistryAlias :: Lens' RegistryAlias Bool
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.RegistryAlias.RegistryAlias
instance GHC.Show.Show Amazonka.ECRPublic.Types.RegistryAlias.RegistryAlias
instance GHC.Read.Read Amazonka.ECRPublic.Types.RegistryAlias.RegistryAlias
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.RegistryAlias.RegistryAlias
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.RegistryAlias.RegistryAlias
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.RegistryAlias.RegistryAlias
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.RegistryAlias.RegistryAlias


module Amazonka.ECRPublic.Types.Registry

-- | The details of a public registry.
--   
--   <i>See:</i> <a>newRegistry</a> smart constructor.
data Registry
Registry' :: Text -> Text -> Text -> Bool -> [RegistryAlias] -> Registry

-- | The AWS account ID associated with the registry. If you do not specify
--   a registry, the default public registry is assumed.
[$sel:registryId:Registry'] :: Registry -> Text

-- | The Amazon Resource Name (ARN) of the public registry.
[$sel:registryArn:Registry'] :: Registry -> Text

-- | The URI of a public registry. The URI contains a universal prefix and
--   the registry alias.
[$sel:registryUri:Registry'] :: Registry -> Text

-- | Whether the account is verified. This indicates whether the account is
--   an AWS Marketplace vendor. If an account is verified, each public
--   repository will received a verified account badge on the Amazon ECR
--   Public Gallery.
[$sel:verified:Registry'] :: Registry -> Bool

-- | An array of objects representing the aliases for a public registry.
[$sel:aliases:Registry'] :: Registry -> [RegistryAlias]

-- | Create a value of <a>Registry</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:Registry'</a>, <a>registry_registryId</a> - The AWS
--   account ID associated with the registry. If you do not specify a
--   registry, the default public registry is assumed.
--   
--   <a>$sel:registryArn:Registry'</a>, <a>registry_registryArn</a> - The
--   Amazon Resource Name (ARN) of the public registry.
--   
--   <a>$sel:registryUri:Registry'</a>, <a>registry_registryUri</a> - The
--   URI of a public registry. The URI contains a universal prefix and the
--   registry alias.
--   
--   <a>$sel:verified:Registry'</a>, <a>registry_verified</a> - Whether the
--   account is verified. This indicates whether the account is an AWS
--   Marketplace vendor. If an account is verified, each public repository
--   will received a verified account badge on the Amazon ECR Public
--   Gallery.
--   
--   <a>$sel:aliases:Registry'</a>, <a>registry_aliases</a> - An array of
--   objects representing the aliases for a public registry.
newRegistry :: Text -> Text -> Text -> Bool -> Registry

-- | The AWS account ID associated with the registry. If you do not specify
--   a registry, the default public registry is assumed.
registry_registryId :: Lens' Registry Text

-- | The Amazon Resource Name (ARN) of the public registry.
registry_registryArn :: Lens' Registry Text

-- | The URI of a public registry. The URI contains a universal prefix and
--   the registry alias.
registry_registryUri :: Lens' Registry Text

-- | Whether the account is verified. This indicates whether the account is
--   an AWS Marketplace vendor. If an account is verified, each public
--   repository will received a verified account badge on the Amazon ECR
--   Public Gallery.
registry_verified :: Lens' Registry Bool

-- | An array of objects representing the aliases for a public registry.
registry_aliases :: Lens' Registry [RegistryAlias]
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.Registry.Registry
instance GHC.Show.Show Amazonka.ECRPublic.Types.Registry.Registry
instance GHC.Read.Read Amazonka.ECRPublic.Types.Registry.Registry
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.Registry.Registry
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.Registry.Registry
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.Registry.Registry
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.Registry.Registry


module Amazonka.ECRPublic.Types.RegistryCatalogData

-- | The metadata for a public registry.
--   
--   <i>See:</i> <a>newRegistryCatalogData</a> smart constructor.
data RegistryCatalogData
RegistryCatalogData' :: Maybe Text -> RegistryCatalogData

-- | The display name for a public registry. This appears on the Amazon ECR
--   Public Gallery.
--   
--   Only accounts that have the verified account badge can have a registry
--   display name.
[$sel:displayName:RegistryCatalogData'] :: RegistryCatalogData -> Maybe Text

-- | Create a value of <a>RegistryCatalogData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:displayName:RegistryCatalogData'</a>,
--   <a>registryCatalogData_displayName</a> - The display name for a public
--   registry. This appears on the Amazon ECR Public Gallery.
--   
--   Only accounts that have the verified account badge can have a registry
--   display name.
newRegistryCatalogData :: RegistryCatalogData

-- | The display name for a public registry. This appears on the Amazon ECR
--   Public Gallery.
--   
--   Only accounts that have the verified account badge can have a registry
--   display name.
registryCatalogData_displayName :: Lens' RegistryCatalogData (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.RegistryCatalogData.RegistryCatalogData
instance GHC.Show.Show Amazonka.ECRPublic.Types.RegistryCatalogData.RegistryCatalogData
instance GHC.Read.Read Amazonka.ECRPublic.Types.RegistryCatalogData.RegistryCatalogData
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.RegistryCatalogData.RegistryCatalogData
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.RegistryCatalogData.RegistryCatalogData
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.RegistryCatalogData.RegistryCatalogData
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.RegistryCatalogData.RegistryCatalogData


module Amazonka.ECRPublic.Types.Repository

-- | An object representing a repository.
--   
--   <i>See:</i> <a>newRepository</a> smart constructor.
data Repository
Repository' :: Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Repository

-- | The Amazon Resource Name (ARN) that identifies the repository. The ARN
--   contains the <tt>arn:aws:ecr</tt> namespace, followed by the region of
--   the repository, AWS account ID of the repository owner, repository
--   namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
[$sel:repositoryArn:Repository'] :: Repository -> Maybe Text

-- | The date and time, in JavaScript date format, when the repository was
--   created.
[$sel:createdAt:Repository'] :: Repository -> Maybe POSIX

-- | The AWS account ID associated with the public registry that contains
--   the repository.
[$sel:registryId:Repository'] :: Repository -> Maybe Text

-- | The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
[$sel:repositoryUri:Repository'] :: Repository -> Maybe Text

-- | The name of the repository.
[$sel:repositoryName:Repository'] :: Repository -> Maybe Text

-- | Create a value of <a>Repository</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repositoryArn:Repository'</a>, <a>repository_repositoryArn</a>
--   - The Amazon Resource Name (ARN) that identifies the repository. The
--   ARN contains the <tt>arn:aws:ecr</tt> namespace, followed by the
--   region of the repository, AWS account ID of the repository owner,
--   repository namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
--   
--   <a>$sel:createdAt:Repository'</a>, <a>repository_createdAt</a> - The
--   date and time, in JavaScript date format, when the repository was
--   created.
--   
--   <a>$sel:registryId:Repository'</a>, <a>repository_registryId</a> - The
--   AWS account ID associated with the public registry that contains the
--   repository.
--   
--   <a>$sel:repositoryUri:Repository'</a>, <a>repository_repositoryUri</a>
--   - The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
--   
--   <a>$sel:repositoryName:Repository'</a>,
--   <a>repository_repositoryName</a> - The name of the repository.
newRepository :: Repository

-- | The Amazon Resource Name (ARN) that identifies the repository. The ARN
--   contains the <tt>arn:aws:ecr</tt> namespace, followed by the region of
--   the repository, AWS account ID of the repository owner, repository
--   namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
repository_repositoryArn :: Lens' Repository (Maybe Text)

-- | The date and time, in JavaScript date format, when the repository was
--   created.
repository_createdAt :: Lens' Repository (Maybe UTCTime)

-- | The AWS account ID associated with the public registry that contains
--   the repository.
repository_registryId :: Lens' Repository (Maybe Text)

-- | The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
repository_repositoryUri :: Lens' Repository (Maybe Text)

-- | The name of the repository.
repository_repositoryName :: Lens' Repository (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.Repository.Repository
instance GHC.Show.Show Amazonka.ECRPublic.Types.Repository.Repository
instance GHC.Read.Read Amazonka.ECRPublic.Types.Repository.Repository
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.Repository.Repository
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.Repository.Repository
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.Repository.Repository
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.Repository.Repository


module Amazonka.ECRPublic.Types.RepositoryCatalogData

-- | The catalog data for a repository. This data is publicly visible in
--   the Amazon ECR Public Gallery.
--   
--   <i>See:</i> <a>newRepositoryCatalogData</a> smart constructor.
data RepositoryCatalogData
RepositoryCatalogData' :: Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe [Text] -> Maybe Text -> RepositoryCatalogData

-- | The URL containing the logo associated with the repository.
[$sel:logoUrl:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe Text

-- | The architecture tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
[$sel:architectures:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe [Text]

-- | The longform usage details of the contents of the repository. The
--   usage text provides context for users of the repository.
[$sel:usageText:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe Text

-- | Whether or not the repository is certified by AWS Marketplace.
[$sel:marketplaceCertified:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe Bool

-- | The longform description of the contents of the repository. This text
--   appears in the repository details on the Amazon ECR Public Gallery.
[$sel:aboutText:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe Text

-- | The operating system tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
[$sel:operatingSystems:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe [Text]

-- | The short description of the repository.
[$sel:description:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe Text

-- | Create a value of <a>RepositoryCatalogData</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logoUrl:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_logoUrl</a> - The URL containing the logo
--   associated with the repository.
--   
--   <a>$sel:architectures:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_architectures</a> - The architecture tags
--   that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
--   
--   <a>$sel:usageText:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_usageText</a> - The longform usage details of
--   the contents of the repository. The usage text provides context for
--   users of the repository.
--   
--   <a>$sel:marketplaceCertified:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_marketplaceCertified</a> - Whether or not the
--   repository is certified by AWS Marketplace.
--   
--   <a>$sel:aboutText:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_aboutText</a> - The longform description of
--   the contents of the repository. This text appears in the repository
--   details on the Amazon ECR Public Gallery.
--   
--   <a>$sel:operatingSystems:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_operatingSystems</a> - The operating system
--   tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
--   
--   <a>$sel:description:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_description</a> - The short description of
--   the repository.
newRepositoryCatalogData :: RepositoryCatalogData

-- | The URL containing the logo associated with the repository.
repositoryCatalogData_logoUrl :: Lens' RepositoryCatalogData (Maybe Text)

-- | The architecture tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
repositoryCatalogData_architectures :: Lens' RepositoryCatalogData (Maybe [Text])

-- | The longform usage details of the contents of the repository. The
--   usage text provides context for users of the repository.
repositoryCatalogData_usageText :: Lens' RepositoryCatalogData (Maybe Text)

-- | Whether or not the repository is certified by AWS Marketplace.
repositoryCatalogData_marketplaceCertified :: Lens' RepositoryCatalogData (Maybe Bool)

-- | The longform description of the contents of the repository. This text
--   appears in the repository details on the Amazon ECR Public Gallery.
repositoryCatalogData_aboutText :: Lens' RepositoryCatalogData (Maybe Text)

-- | The operating system tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
repositoryCatalogData_operatingSystems :: Lens' RepositoryCatalogData (Maybe [Text])

-- | The short description of the repository.
repositoryCatalogData_description :: Lens' RepositoryCatalogData (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.RepositoryCatalogData.RepositoryCatalogData
instance GHC.Show.Show Amazonka.ECRPublic.Types.RepositoryCatalogData.RepositoryCatalogData
instance GHC.Read.Read Amazonka.ECRPublic.Types.RepositoryCatalogData.RepositoryCatalogData
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.RepositoryCatalogData.RepositoryCatalogData
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.RepositoryCatalogData.RepositoryCatalogData
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.RepositoryCatalogData.RepositoryCatalogData
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.RepositoryCatalogData.RepositoryCatalogData


module Amazonka.ECRPublic.Types.RepositoryCatalogDataInput

-- | An object containing the catalog data for a repository. This data is
--   publicly visible in the Amazon ECR Public Gallery.
--   
--   <i>See:</i> <a>newRepositoryCatalogDataInput</a> smart constructor.
data RepositoryCatalogDataInput
RepositoryCatalogDataInput' :: Maybe Base64 -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Text -> RepositoryCatalogDataInput

-- | The base64-encoded repository logo payload.
--   
--   The repository logo is only publicly visible in the Amazon ECR Public
--   Gallery for verified accounts.
[$sel:logoImageBlob:RepositoryCatalogDataInput'] :: RepositoryCatalogDataInput -> Maybe Base64

-- | The system architecture that the images in the repository are
--   compatible with. On the Amazon ECR Public Gallery, the following
--   supported architectures will appear as badges on the repository and
--   are used as search filters.
--   
--   <ul>
--   <li><pre>Linux</pre></li>
--   <li><pre>Windows</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
[$sel:architectures:RepositoryCatalogDataInput'] :: RepositoryCatalogDataInput -> Maybe [Text]

-- | Detailed information on how to use the contents of the repository. It
--   is publicly visible in the Amazon ECR Public Gallery. The usage text
--   provides context, support information, and additional usage details
--   for users of the repository. The text must be in markdown format.
[$sel:usageText:RepositoryCatalogDataInput'] :: RepositoryCatalogDataInput -> Maybe Text

-- | A detailed description of the contents of the repository. It is
--   publicly visible in the Amazon ECR Public Gallery. The text must be in
--   markdown format.
[$sel:aboutText:RepositoryCatalogDataInput'] :: RepositoryCatalogDataInput -> Maybe Text

-- | The operating systems that the images in the repository are compatible
--   with. On the Amazon ECR Public Gallery, the following supported
--   operating systems will appear as badges on the repository and are used
--   as search filters.
--   
--   <ul>
--   <li><pre>ARM</pre></li>
--   <li><pre>ARM 64</pre></li>
--   <li><pre>x86</pre></li>
--   <li><pre>x86-64</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
[$sel:operatingSystems:RepositoryCatalogDataInput'] :: RepositoryCatalogDataInput -> Maybe [Text]

-- | A short description of the contents of the repository. This text
--   appears in both the image details and also when searching for
--   repositories on the Amazon ECR Public Gallery.
[$sel:description:RepositoryCatalogDataInput'] :: RepositoryCatalogDataInput -> Maybe Text

-- | Create a value of <a>RepositoryCatalogDataInput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logoImageBlob:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_logoImageBlob</a> - The base64-encoded
--   repository logo payload.
--   
--   The repository logo is only publicly visible in the Amazon ECR Public
--   Gallery for verified accounts.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:architectures:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_architectures</a> - The system
--   architecture that the images in the repository are compatible with. On
--   the Amazon ECR Public Gallery, the following supported architectures
--   will appear as badges on the repository and are used as search
--   filters.
--   
--   <ul>
--   <li><pre>Linux</pre></li>
--   <li><pre>Windows</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
--   
--   <a>$sel:usageText:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_usageText</a> - Detailed information on
--   how to use the contents of the repository. It is publicly visible in
--   the Amazon ECR Public Gallery. The usage text provides context,
--   support information, and additional usage details for users of the
--   repository. The text must be in markdown format.
--   
--   <a>$sel:aboutText:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_aboutText</a> - A detailed description
--   of the contents of the repository. It is publicly visible in the
--   Amazon ECR Public Gallery. The text must be in markdown format.
--   
--   <a>$sel:operatingSystems:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_operatingSystems</a> - The operating
--   systems that the images in the repository are compatible with. On the
--   Amazon ECR Public Gallery, the following supported operating systems
--   will appear as badges on the repository and are used as search
--   filters.
--   
--   <ul>
--   <li><pre>ARM</pre></li>
--   <li><pre>ARM 64</pre></li>
--   <li><pre>x86</pre></li>
--   <li><pre>x86-64</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
--   
--   <a>$sel:description:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_description</a> - A short description of
--   the contents of the repository. This text appears in both the image
--   details and also when searching for repositories on the Amazon ECR
--   Public Gallery.
newRepositoryCatalogDataInput :: RepositoryCatalogDataInput

-- | The base64-encoded repository logo payload.
--   
--   The repository logo is only publicly visible in the Amazon ECR Public
--   Gallery for verified accounts.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
repositoryCatalogDataInput_logoImageBlob :: Lens' RepositoryCatalogDataInput (Maybe ByteString)

-- | The system architecture that the images in the repository are
--   compatible with. On the Amazon ECR Public Gallery, the following
--   supported architectures will appear as badges on the repository and
--   are used as search filters.
--   
--   <ul>
--   <li><pre>Linux</pre></li>
--   <li><pre>Windows</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
repositoryCatalogDataInput_architectures :: Lens' RepositoryCatalogDataInput (Maybe [Text])

-- | Detailed information on how to use the contents of the repository. It
--   is publicly visible in the Amazon ECR Public Gallery. The usage text
--   provides context, support information, and additional usage details
--   for users of the repository. The text must be in markdown format.
repositoryCatalogDataInput_usageText :: Lens' RepositoryCatalogDataInput (Maybe Text)

-- | A detailed description of the contents of the repository. It is
--   publicly visible in the Amazon ECR Public Gallery. The text must be in
--   markdown format.
repositoryCatalogDataInput_aboutText :: Lens' RepositoryCatalogDataInput (Maybe Text)

-- | The operating systems that the images in the repository are compatible
--   with. On the Amazon ECR Public Gallery, the following supported
--   operating systems will appear as badges on the repository and are used
--   as search filters.
--   
--   <ul>
--   <li><pre>ARM</pre></li>
--   <li><pre>ARM 64</pre></li>
--   <li><pre>x86</pre></li>
--   <li><pre>x86-64</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
repositoryCatalogDataInput_operatingSystems :: Lens' RepositoryCatalogDataInput (Maybe [Text])

-- | A short description of the contents of the repository. This text
--   appears in both the image details and also when searching for
--   repositories on the Amazon ECR Public Gallery.
repositoryCatalogDataInput_description :: Lens' RepositoryCatalogDataInput (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.RepositoryCatalogDataInput.RepositoryCatalogDataInput
instance GHC.Show.Show Amazonka.ECRPublic.Types.RepositoryCatalogDataInput.RepositoryCatalogDataInput
instance GHC.Read.Read Amazonka.ECRPublic.Types.RepositoryCatalogDataInput.RepositoryCatalogDataInput
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.RepositoryCatalogDataInput.RepositoryCatalogDataInput
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.RepositoryCatalogDataInput.RepositoryCatalogDataInput
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.RepositoryCatalogDataInput.RepositoryCatalogDataInput
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.Types.RepositoryCatalogDataInput.RepositoryCatalogDataInput


module Amazonka.ECRPublic.Types.Tag

-- | The metadata that you apply to a resource to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. Tag keys can have a maximum character length of
--   128 characters, and tag values can have a maximum length of 256
--   characters.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
[$sel:key:Tag'] :: Tag -> Maybe Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The optional part of a
--   key-value pair that make up a tag. A <tt>value</tt> acts as a
--   descriptor within a tag category (key).
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - One part of a key-value pair
--   that make up a tag. A <tt>key</tt> is a general label that acts like a
--   category for more specific tag values.
newTag :: Tag

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
tag_value :: Lens' Tag (Maybe Text)

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
tag_key :: Lens' Tag (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECRPublic.Types.Tag.Tag
instance GHC.Show.Show Amazonka.ECRPublic.Types.Tag.Tag
instance GHC.Read.Read Amazonka.ECRPublic.Types.Tag.Tag
instance GHC.Classes.Eq Amazonka.ECRPublic.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECRPublic.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.Types.Tag.Tag
instance Control.DeepSeq.NFData Amazonka.ECRPublic.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.Types.Tag.Tag


module Amazonka.ECRPublic.Types

-- | API version <tt>2020-10-30</tt> of the Amazon Elastic Container
--   Registry Public SDK configuration.
defaultService :: Service

-- | The specified image is tagged with a tag that already exists. The
--   repository is configured for tag immutability.
_ImageTagAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified layers could not be found, or the specified layer is not
--   valid for this repository.
_LayersNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The manifest list is referencing an image that does not exist.
_ReferencedImagesNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified parameter is invalid. Review the available parameters
--   for the API request.
_InvalidParameterException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The image layer already exists in the associated repository.
_LayerAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | These errors are usually caused by a server-side issue.
_ServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The action is not supported in this Region.
_UnsupportedCommandException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The layer digest calculation performed by Amazon ECR upon receipt of
--   the image layer does not match the digest specified.
_InvalidLayerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Layer parts must be at least 5 MiB in size.
_LayerPartTooSmallException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified image digest does not match the digest that Amazon ECR
--   calculated for the image.
_ImageDigestDoesNotMatchException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The image requested does not exist in the specified repository.
_ImageNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified image has already been pushed, and there were no changes
--   to the manifest or image tag after the last push.
_ImageAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository could not be found. Check the spelling of the
--   specified repository and ensure that you are performing operations on
--   the correct registry.
_RepositoryNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The list of tags on the repository is over the limit. The maximum
--   number of tags that can be applied to a repository is 50.
_TooManyTagsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The upload could not be found, or the specified upload ID is not valid
--   for this repository.
_UploadNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The layer part size is not valid, or the first byte specified is not
--   consecutive to the last byte of a previous layer part upload.
_InvalidLayerPartException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An invalid parameter has been specified. Tag keys can have a maximum
--   character length of 128 characters, and tag values can have a maximum
--   length of 256 characters.
_InvalidTagParameterException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository contains images. To delete a repository that
--   contains images, you must force the deletion with the <tt>force</tt>
--   parameter.
_RepositoryNotEmptyException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository already exists in the specified registry.
_RepositoryAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository and registry combination does not have an
--   associated repository policy.
_RepositoryPolicyNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified layer upload does not contain any layer parts.
_EmptyUploadException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation did not succeed because it would have exceeded a service
--   limit for your account. For more information, see <a>Amazon ECR
--   Service Quotas</a> in the Amazon Elastic Container Registry User
--   Guide.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The registry does not exist.
_RegistryNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError
newtype ImageFailureCode
ImageFailureCode' :: Text -> ImageFailureCode
[fromImageFailureCode] :: ImageFailureCode -> Text
pattern ImageFailureCode_ImageNotFound :: ImageFailureCode
pattern ImageFailureCode_ImageReferencedByManifestList :: ImageFailureCode
pattern ImageFailureCode_ImageTagDoesNotMatchDigest :: ImageFailureCode
pattern ImageFailureCode_InvalidImageDigest :: ImageFailureCode
pattern ImageFailureCode_InvalidImageTag :: ImageFailureCode
pattern ImageFailureCode_KmsError :: ImageFailureCode
pattern ImageFailureCode_MissingDigestAndTag :: ImageFailureCode
newtype LayerAvailability
LayerAvailability' :: Text -> LayerAvailability
[fromLayerAvailability] :: LayerAvailability -> Text
pattern LayerAvailability_AVAILABLE :: LayerAvailability
pattern LayerAvailability_UNAVAILABLE :: LayerAvailability
newtype LayerFailureCode
LayerFailureCode' :: Text -> LayerFailureCode
[fromLayerFailureCode] :: LayerFailureCode -> Text
pattern LayerFailureCode_InvalidLayerDigest :: LayerFailureCode
pattern LayerFailureCode_MissingLayerDigest :: LayerFailureCode
newtype RegistryAliasStatus
RegistryAliasStatus' :: Text -> RegistryAliasStatus
[fromRegistryAliasStatus] :: RegistryAliasStatus -> Text
pattern RegistryAliasStatus_ACTIVE :: RegistryAliasStatus
pattern RegistryAliasStatus_PENDING :: RegistryAliasStatus
pattern RegistryAliasStatus_REJECTED :: RegistryAliasStatus

-- | An authorization token data object that corresponds to a public
--   registry.
--   
--   <i>See:</i> <a>newAuthorizationData</a> smart constructor.
data AuthorizationData
AuthorizationData' :: Maybe POSIX -> Maybe Text -> AuthorizationData

-- | The Unix time in seconds and milliseconds when the authorization token
--   expires. Authorization tokens are valid for 12 hours.
[$sel:expiresAt:AuthorizationData'] :: AuthorizationData -> Maybe POSIX

-- | A base64-encoded string that contains authorization data for a public
--   Amazon ECR registry. When the string is decoded, it is presented in
--   the format <tt>user:password</tt> for public registry authentication
--   using <tt>docker login</tt>.
[$sel:authorizationToken:AuthorizationData'] :: AuthorizationData -> Maybe Text

-- | Create a value of <a>AuthorizationData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expiresAt:AuthorizationData'</a>,
--   <a>authorizationData_expiresAt</a> - The Unix time in seconds and
--   milliseconds when the authorization token expires. Authorization
--   tokens are valid for 12 hours.
--   
--   <a>$sel:authorizationToken:AuthorizationData'</a>,
--   <a>authorizationData_authorizationToken</a> - A base64-encoded string
--   that contains authorization data for a public Amazon ECR registry.
--   When the string is decoded, it is presented in the format
--   <tt>user:password</tt> for public registry authentication using
--   <tt>docker login</tt>.
newAuthorizationData :: AuthorizationData

-- | The Unix time in seconds and milliseconds when the authorization token
--   expires. Authorization tokens are valid for 12 hours.
authorizationData_expiresAt :: Lens' AuthorizationData (Maybe UTCTime)

-- | A base64-encoded string that contains authorization data for a public
--   Amazon ECR registry. When the string is decoded, it is presented in
--   the format <tt>user:password</tt> for public registry authentication
--   using <tt>docker login</tt>.
authorizationData_authorizationToken :: Lens' AuthorizationData (Maybe Text)

-- | An object representing an Amazon ECR image.
--   
--   <i>See:</i> <a>newImage</a> smart constructor.
data Image
Image' :: Maybe Text -> Maybe Text -> Maybe ImageIdentifier -> Maybe Text -> Maybe Text -> Image

-- | The AWS account ID associated with the registry containing the image.
[$sel:registryId:Image'] :: Image -> Maybe Text

-- | The manifest media type of the image.
[$sel:imageManifestMediaType:Image'] :: Image -> Maybe Text

-- | An object containing the image tag and image digest associated with an
--   image.
[$sel:imageId:Image'] :: Image -> Maybe ImageIdentifier

-- | The name of the repository associated with the image.
[$sel:repositoryName:Image'] :: Image -> Maybe Text

-- | The image manifest associated with the image.
[$sel:imageManifest:Image'] :: Image -> Maybe Text

-- | Create a value of <a>Image</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:Image'</a>, <a>image_registryId</a> - The AWS
--   account ID associated with the registry containing the image.
--   
--   <a>$sel:imageManifestMediaType:Image'</a>,
--   <a>image_imageManifestMediaType</a> - The manifest media type of the
--   image.
--   
--   <a>$sel:imageId:Image'</a>, <a>image_imageId</a> - An object
--   containing the image tag and image digest associated with an image.
--   
--   <a>$sel:repositoryName:Image'</a>, <a>image_repositoryName</a> - The
--   name of the repository associated with the image.
--   
--   <a>$sel:imageManifest:Image'</a>, <a>image_imageManifest</a> - The
--   image manifest associated with the image.
newImage :: Image

-- | The AWS account ID associated with the registry containing the image.
image_registryId :: Lens' Image (Maybe Text)

-- | The manifest media type of the image.
image_imageManifestMediaType :: Lens' Image (Maybe Text)

-- | An object containing the image tag and image digest associated with an
--   image.
image_imageId :: Lens' Image (Maybe ImageIdentifier)

-- | The name of the repository associated with the image.
image_repositoryName :: Lens' Image (Maybe Text)

-- | The image manifest associated with the image.
image_imageManifest :: Lens' Image (Maybe Text)

-- | An object that describes an image returned by a DescribeImages
--   operation.
--   
--   <i>See:</i> <a>newImageDetail</a> smart constructor.
data ImageDetail
ImageDetail' :: Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Integer -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> ImageDetail

-- | The AWS account ID associated with the public registry to which this
--   image belongs.
[$sel:registryId:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The list of tags associated with this image.
[$sel:imageTags:ImageDetail'] :: ImageDetail -> Maybe [Text]

-- | The media type of the image manifest.
[$sel:imageManifestMediaType:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
[$sel:imageSizeInBytes:ImageDetail'] :: ImageDetail -> Maybe Integer

-- | The <tt>sha256</tt> digest of the image manifest.
[$sel:imageDigest:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The artifact media type of the image.
[$sel:artifactMediaType:ImageDetail'] :: ImageDetail -> Maybe Text

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
[$sel:imagePushedAt:ImageDetail'] :: ImageDetail -> Maybe POSIX

-- | The name of the repository to which this image belongs.
[$sel:repositoryName:ImageDetail'] :: ImageDetail -> Maybe Text

-- | Create a value of <a>ImageDetail</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:ImageDetail'</a>, <a>imageDetail_registryId</a> -
--   The AWS account ID associated with the public registry to which this
--   image belongs.
--   
--   <a>$sel:imageTags:ImageDetail'</a>, <a>imageDetail_imageTags</a> - The
--   list of tags associated with this image.
--   
--   <a>$sel:imageManifestMediaType:ImageDetail'</a>,
--   <a>imageDetail_imageManifestMediaType</a> - The media type of the
--   image manifest.
--   
--   <a>$sel:imageSizeInBytes:ImageDetail'</a>,
--   <a>imageDetail_imageSizeInBytes</a> - The size, in bytes, of the image
--   in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
--   
--   <a>$sel:imageDigest:ImageDetail'</a>, <a>imageDetail_imageDigest</a> -
--   The <tt>sha256</tt> digest of the image manifest.
--   
--   <a>$sel:artifactMediaType:ImageDetail'</a>,
--   <a>imageDetail_artifactMediaType</a> - The artifact media type of the
--   image.
--   
--   <a>$sel:imagePushedAt:ImageDetail'</a>,
--   <a>imageDetail_imagePushedAt</a> - The date and time, expressed in
--   standard JavaScript date format, at which the current image was pushed
--   to the repository.
--   
--   <a>$sel:repositoryName:ImageDetail'</a>,
--   <a>imageDetail_repositoryName</a> - The name of the repository to
--   which this image belongs.
newImageDetail :: ImageDetail

-- | The AWS account ID associated with the public registry to which this
--   image belongs.
imageDetail_registryId :: Lens' ImageDetail (Maybe Text)

-- | The list of tags associated with this image.
imageDetail_imageTags :: Lens' ImageDetail (Maybe [Text])

-- | The media type of the image manifest.
imageDetail_imageManifestMediaType :: Lens' ImageDetail (Maybe Text)

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
imageDetail_imageSizeInBytes :: Lens' ImageDetail (Maybe Integer)

-- | The <tt>sha256</tt> digest of the image manifest.
imageDetail_imageDigest :: Lens' ImageDetail (Maybe Text)

-- | The artifact media type of the image.
imageDetail_artifactMediaType :: Lens' ImageDetail (Maybe Text)

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
imageDetail_imagePushedAt :: Lens' ImageDetail (Maybe UTCTime)

-- | The name of the repository to which this image belongs.
imageDetail_repositoryName :: Lens' ImageDetail (Maybe Text)

-- | An object representing an Amazon ECR image failure.
--   
--   <i>See:</i> <a>newImageFailure</a> smart constructor.
data ImageFailure
ImageFailure' :: Maybe Text -> Maybe ImageFailureCode -> Maybe ImageIdentifier -> ImageFailure

-- | The reason for the failure.
[$sel:failureReason:ImageFailure'] :: ImageFailure -> Maybe Text

-- | The code associated with the failure.
[$sel:failureCode:ImageFailure'] :: ImageFailure -> Maybe ImageFailureCode

-- | The image ID associated with the failure.
[$sel:imageId:ImageFailure'] :: ImageFailure -> Maybe ImageIdentifier

-- | Create a value of <a>ImageFailure</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureReason:ImageFailure'</a>,
--   <a>imageFailure_failureReason</a> - The reason for the failure.
--   
--   <a>$sel:failureCode:ImageFailure'</a>, <a>imageFailure_failureCode</a>
--   - The code associated with the failure.
--   
--   <a>$sel:imageId:ImageFailure'</a>, <a>imageFailure_imageId</a> - The
--   image ID associated with the failure.
newImageFailure :: ImageFailure

-- | The reason for the failure.
imageFailure_failureReason :: Lens' ImageFailure (Maybe Text)

-- | The code associated with the failure.
imageFailure_failureCode :: Lens' ImageFailure (Maybe ImageFailureCode)

-- | The image ID associated with the failure.
imageFailure_imageId :: Lens' ImageFailure (Maybe ImageIdentifier)

-- | An object with identifying information for an Amazon ECR image.
--   
--   <i>See:</i> <a>newImageIdentifier</a> smart constructor.
data ImageIdentifier
ImageIdentifier' :: Maybe Text -> Maybe Text -> ImageIdentifier

-- | The <tt>sha256</tt> digest of the image manifest.
[$sel:imageDigest:ImageIdentifier'] :: ImageIdentifier -> Maybe Text

-- | The tag used for the image.
[$sel:imageTag:ImageIdentifier'] :: ImageIdentifier -> Maybe Text

-- | Create a value of <a>ImageIdentifier</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:ImageIdentifier'</a>,
--   <a>imageIdentifier_imageDigest</a> - The <tt>sha256</tt> digest of the
--   image manifest.
--   
--   <a>$sel:imageTag:ImageIdentifier'</a>, <a>imageIdentifier_imageTag</a>
--   - The tag used for the image.
newImageIdentifier :: ImageIdentifier

-- | The <tt>sha256</tt> digest of the image manifest.
imageIdentifier_imageDigest :: Lens' ImageIdentifier (Maybe Text)

-- | The tag used for the image.
imageIdentifier_imageTag :: Lens' ImageIdentifier (Maybe Text)

-- | An object representing the image tag details for an image.
--   
--   <i>See:</i> <a>newImageTagDetail</a> smart constructor.
data ImageTagDetail
ImageTagDetail' :: Maybe POSIX -> Maybe ReferencedImageDetail -> Maybe Text -> ImageTagDetail

-- | The time stamp indicating when the image tag was created.
[$sel:createdAt:ImageTagDetail'] :: ImageTagDetail -> Maybe POSIX

-- | An object that describes the details of an image.
[$sel:imageDetail:ImageTagDetail'] :: ImageTagDetail -> Maybe ReferencedImageDetail

-- | The tag associated with the image.
[$sel:imageTag:ImageTagDetail'] :: ImageTagDetail -> Maybe Text

-- | Create a value of <a>ImageTagDetail</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:createdAt:ImageTagDetail'</a>, <a>imageTagDetail_createdAt</a>
--   - The time stamp indicating when the image tag was created.
--   
--   <a>$sel:imageDetail:ImageTagDetail'</a>,
--   <a>imageTagDetail_imageDetail</a> - An object that describes the
--   details of an image.
--   
--   <a>$sel:imageTag:ImageTagDetail'</a>, <a>imageTagDetail_imageTag</a> -
--   The tag associated with the image.
newImageTagDetail :: ImageTagDetail

-- | The time stamp indicating when the image tag was created.
imageTagDetail_createdAt :: Lens' ImageTagDetail (Maybe UTCTime)

-- | An object that describes the details of an image.
imageTagDetail_imageDetail :: Lens' ImageTagDetail (Maybe ReferencedImageDetail)

-- | The tag associated with the image.
imageTagDetail_imageTag :: Lens' ImageTagDetail (Maybe Text)

-- | An object representing an Amazon ECR image layer.
--   
--   <i>See:</i> <a>newLayer</a> smart constructor.
data Layer
Layer' :: Maybe Text -> Maybe Text -> Maybe Integer -> Maybe LayerAvailability -> Layer

-- | The media type of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
[$sel:mediaType:Layer'] :: Layer -> Maybe Text

-- | The <tt>sha256</tt> digest of the image layer.
[$sel:layerDigest:Layer'] :: Layer -> Maybe Text

-- | The size, in bytes, of the image layer.
[$sel:layerSize:Layer'] :: Layer -> Maybe Integer

-- | The availability status of the image layer.
[$sel:layerAvailability:Layer'] :: Layer -> Maybe LayerAvailability

-- | Create a value of <a>Layer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mediaType:Layer'</a>, <a>layer_mediaType</a> - The media type
--   of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
--   
--   <a>$sel:layerDigest:Layer'</a>, <a>layer_layerDigest</a> - The
--   <tt>sha256</tt> digest of the image layer.
--   
--   <a>$sel:layerSize:Layer'</a>, <a>layer_layerSize</a> - The size, in
--   bytes, of the image layer.
--   
--   <a>$sel:layerAvailability:Layer'</a>, <a>layer_layerAvailability</a> -
--   The availability status of the image layer.
newLayer :: Layer

-- | The media type of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
layer_mediaType :: Lens' Layer (Maybe Text)

-- | The <tt>sha256</tt> digest of the image layer.
layer_layerDigest :: Lens' Layer (Maybe Text)

-- | The size, in bytes, of the image layer.
layer_layerSize :: Lens' Layer (Maybe Integer)

-- | The availability status of the image layer.
layer_layerAvailability :: Lens' Layer (Maybe LayerAvailability)

-- | An object representing an Amazon ECR image layer failure.
--   
--   <i>See:</i> <a>newLayerFailure</a> smart constructor.
data LayerFailure
LayerFailure' :: Maybe Text -> Maybe LayerFailureCode -> Maybe Text -> LayerFailure

-- | The reason for the failure.
[$sel:failureReason:LayerFailure'] :: LayerFailure -> Maybe Text

-- | The failure code associated with the failure.
[$sel:failureCode:LayerFailure'] :: LayerFailure -> Maybe LayerFailureCode

-- | The layer digest associated with the failure.
[$sel:layerDigest:LayerFailure'] :: LayerFailure -> Maybe Text

-- | Create a value of <a>LayerFailure</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureReason:LayerFailure'</a>,
--   <a>layerFailure_failureReason</a> - The reason for the failure.
--   
--   <a>$sel:failureCode:LayerFailure'</a>, <a>layerFailure_failureCode</a>
--   - The failure code associated with the failure.
--   
--   <a>$sel:layerDigest:LayerFailure'</a>, <a>layerFailure_layerDigest</a>
--   - The layer digest associated with the failure.
newLayerFailure :: LayerFailure

-- | The reason for the failure.
layerFailure_failureReason :: Lens' LayerFailure (Maybe Text)

-- | The failure code associated with the failure.
layerFailure_failureCode :: Lens' LayerFailure (Maybe LayerFailureCode)

-- | The layer digest associated with the failure.
layerFailure_layerDigest :: Lens' LayerFailure (Maybe Text)

-- | An object that describes the image tag details returned by a
--   DescribeImageTags action.
--   
--   <i>See:</i> <a>newReferencedImageDetail</a> smart constructor.
data ReferencedImageDetail
ReferencedImageDetail' :: Maybe Text -> Maybe Integer -> Maybe Text -> Maybe Text -> Maybe POSIX -> ReferencedImageDetail

-- | The media type of the image manifest.
[$sel:imageManifestMediaType:ReferencedImageDetail'] :: ReferencedImageDetail -> Maybe Text

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
[$sel:imageSizeInBytes:ReferencedImageDetail'] :: ReferencedImageDetail -> Maybe Integer

-- | The <tt>sha256</tt> digest of the image manifest.
[$sel:imageDigest:ReferencedImageDetail'] :: ReferencedImageDetail -> Maybe Text

-- | The artifact media type of the image.
[$sel:artifactMediaType:ReferencedImageDetail'] :: ReferencedImageDetail -> Maybe Text

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image tag was pushed to the repository.
[$sel:imagePushedAt:ReferencedImageDetail'] :: ReferencedImageDetail -> Maybe POSIX

-- | Create a value of <a>ReferencedImageDetail</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageManifestMediaType:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_imageManifestMediaType</a> - The media type
--   of the image manifest.
--   
--   <a>$sel:imageSizeInBytes:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_imageSizeInBytes</a> - The size, in bytes, of
--   the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
--   
--   <a>$sel:imageDigest:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_imageDigest</a> - The <tt>sha256</tt> digest
--   of the image manifest.
--   
--   <a>$sel:artifactMediaType:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_artifactMediaType</a> - The artifact media
--   type of the image.
--   
--   <a>$sel:imagePushedAt:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_imagePushedAt</a> - The date and time,
--   expressed in standard JavaScript date format, at which the current
--   image tag was pushed to the repository.
newReferencedImageDetail :: ReferencedImageDetail

-- | The media type of the image manifest.
referencedImageDetail_imageManifestMediaType :: Lens' ReferencedImageDetail (Maybe Text)

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
referencedImageDetail_imageSizeInBytes :: Lens' ReferencedImageDetail (Maybe Integer)

-- | The <tt>sha256</tt> digest of the image manifest.
referencedImageDetail_imageDigest :: Lens' ReferencedImageDetail (Maybe Text)

-- | The artifact media type of the image.
referencedImageDetail_artifactMediaType :: Lens' ReferencedImageDetail (Maybe Text)

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image tag was pushed to the repository.
referencedImageDetail_imagePushedAt :: Lens' ReferencedImageDetail (Maybe UTCTime)

-- | The details of a public registry.
--   
--   <i>See:</i> <a>newRegistry</a> smart constructor.
data Registry
Registry' :: Text -> Text -> Text -> Bool -> [RegistryAlias] -> Registry

-- | The AWS account ID associated with the registry. If you do not specify
--   a registry, the default public registry is assumed.
[$sel:registryId:Registry'] :: Registry -> Text

-- | The Amazon Resource Name (ARN) of the public registry.
[$sel:registryArn:Registry'] :: Registry -> Text

-- | The URI of a public registry. The URI contains a universal prefix and
--   the registry alias.
[$sel:registryUri:Registry'] :: Registry -> Text

-- | Whether the account is verified. This indicates whether the account is
--   an AWS Marketplace vendor. If an account is verified, each public
--   repository will received a verified account badge on the Amazon ECR
--   Public Gallery.
[$sel:verified:Registry'] :: Registry -> Bool

-- | An array of objects representing the aliases for a public registry.
[$sel:aliases:Registry'] :: Registry -> [RegistryAlias]

-- | Create a value of <a>Registry</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:Registry'</a>, <a>registry_registryId</a> - The AWS
--   account ID associated with the registry. If you do not specify a
--   registry, the default public registry is assumed.
--   
--   <a>$sel:registryArn:Registry'</a>, <a>registry_registryArn</a> - The
--   Amazon Resource Name (ARN) of the public registry.
--   
--   <a>$sel:registryUri:Registry'</a>, <a>registry_registryUri</a> - The
--   URI of a public registry. The URI contains a universal prefix and the
--   registry alias.
--   
--   <a>$sel:verified:Registry'</a>, <a>registry_verified</a> - Whether the
--   account is verified. This indicates whether the account is an AWS
--   Marketplace vendor. If an account is verified, each public repository
--   will received a verified account badge on the Amazon ECR Public
--   Gallery.
--   
--   <a>$sel:aliases:Registry'</a>, <a>registry_aliases</a> - An array of
--   objects representing the aliases for a public registry.
newRegistry :: Text -> Text -> Text -> Bool -> Registry

-- | The AWS account ID associated with the registry. If you do not specify
--   a registry, the default public registry is assumed.
registry_registryId :: Lens' Registry Text

-- | The Amazon Resource Name (ARN) of the public registry.
registry_registryArn :: Lens' Registry Text

-- | The URI of a public registry. The URI contains a universal prefix and
--   the registry alias.
registry_registryUri :: Lens' Registry Text

-- | Whether the account is verified. This indicates whether the account is
--   an AWS Marketplace vendor. If an account is verified, each public
--   repository will received a verified account badge on the Amazon ECR
--   Public Gallery.
registry_verified :: Lens' Registry Bool

-- | An array of objects representing the aliases for a public registry.
registry_aliases :: Lens' Registry [RegistryAlias]

-- | An object representing the aliases for a public registry. A public
--   registry is given an alias upon creation but a custom alias can be set
--   using the Amazon ECR console. For more information, see
--   <a>Registries</a> in the <i>Amazon Elastic Container Registry User
--   Guide</i>.
--   
--   <i>See:</i> <a>newRegistryAlias</a> smart constructor.
data RegistryAlias
RegistryAlias' :: Text -> RegistryAliasStatus -> Bool -> Bool -> RegistryAlias

-- | The name of the registry alias.
[$sel:name:RegistryAlias'] :: RegistryAlias -> Text

-- | The status of the registry alias.
[$sel:status:RegistryAlias'] :: RegistryAlias -> RegistryAliasStatus

-- | Whether or not the registry alias is the primary alias for the
--   registry. If true, the alias is the primary registry alias and is
--   displayed in both the repository URL and the image URI used in the
--   <tt>docker pull</tt> commands on the Amazon ECR Public Gallery.
--   
--   A registry alias that is not the primary registry alias can be used in
--   the repository URI in a <tt>docker pull</tt> command.
[$sel:primaryRegistryAlias:RegistryAlias'] :: RegistryAlias -> Bool

-- | Whether or not the registry alias is the default alias for the
--   registry. When the first public repository is created, your public
--   registry is assigned a default registry alias.
[$sel:defaultRegistryAlias:RegistryAlias'] :: RegistryAlias -> Bool

-- | Create a value of <a>RegistryAlias</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:RegistryAlias'</a>, <a>registryAlias_name</a> - The name
--   of the registry alias.
--   
--   <a>$sel:status:RegistryAlias'</a>, <a>registryAlias_status</a> - The
--   status of the registry alias.
--   
--   <a>$sel:primaryRegistryAlias:RegistryAlias'</a>,
--   <a>registryAlias_primaryRegistryAlias</a> - Whether or not the
--   registry alias is the primary alias for the registry. If true, the
--   alias is the primary registry alias and is displayed in both the
--   repository URL and the image URI used in the <tt>docker pull</tt>
--   commands on the Amazon ECR Public Gallery.
--   
--   A registry alias that is not the primary registry alias can be used in
--   the repository URI in a <tt>docker pull</tt> command.
--   
--   <a>$sel:defaultRegistryAlias:RegistryAlias'</a>,
--   <a>registryAlias_defaultRegistryAlias</a> - Whether or not the
--   registry alias is the default alias for the registry. When the first
--   public repository is created, your public registry is assigned a
--   default registry alias.
newRegistryAlias :: Text -> RegistryAliasStatus -> Bool -> Bool -> RegistryAlias

-- | The name of the registry alias.
registryAlias_name :: Lens' RegistryAlias Text

-- | The status of the registry alias.
registryAlias_status :: Lens' RegistryAlias RegistryAliasStatus

-- | Whether or not the registry alias is the primary alias for the
--   registry. If true, the alias is the primary registry alias and is
--   displayed in both the repository URL and the image URI used in the
--   <tt>docker pull</tt> commands on the Amazon ECR Public Gallery.
--   
--   A registry alias that is not the primary registry alias can be used in
--   the repository URI in a <tt>docker pull</tt> command.
registryAlias_primaryRegistryAlias :: Lens' RegistryAlias Bool

-- | Whether or not the registry alias is the default alias for the
--   registry. When the first public repository is created, your public
--   registry is assigned a default registry alias.
registryAlias_defaultRegistryAlias :: Lens' RegistryAlias Bool

-- | The metadata for a public registry.
--   
--   <i>See:</i> <a>newRegistryCatalogData</a> smart constructor.
data RegistryCatalogData
RegistryCatalogData' :: Maybe Text -> RegistryCatalogData

-- | The display name for a public registry. This appears on the Amazon ECR
--   Public Gallery.
--   
--   Only accounts that have the verified account badge can have a registry
--   display name.
[$sel:displayName:RegistryCatalogData'] :: RegistryCatalogData -> Maybe Text

-- | Create a value of <a>RegistryCatalogData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:displayName:RegistryCatalogData'</a>,
--   <a>registryCatalogData_displayName</a> - The display name for a public
--   registry. This appears on the Amazon ECR Public Gallery.
--   
--   Only accounts that have the verified account badge can have a registry
--   display name.
newRegistryCatalogData :: RegistryCatalogData

-- | The display name for a public registry. This appears on the Amazon ECR
--   Public Gallery.
--   
--   Only accounts that have the verified account badge can have a registry
--   display name.
registryCatalogData_displayName :: Lens' RegistryCatalogData (Maybe Text)

-- | An object representing a repository.
--   
--   <i>See:</i> <a>newRepository</a> smart constructor.
data Repository
Repository' :: Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Repository

-- | The Amazon Resource Name (ARN) that identifies the repository. The ARN
--   contains the <tt>arn:aws:ecr</tt> namespace, followed by the region of
--   the repository, AWS account ID of the repository owner, repository
--   namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
[$sel:repositoryArn:Repository'] :: Repository -> Maybe Text

-- | The date and time, in JavaScript date format, when the repository was
--   created.
[$sel:createdAt:Repository'] :: Repository -> Maybe POSIX

-- | The AWS account ID associated with the public registry that contains
--   the repository.
[$sel:registryId:Repository'] :: Repository -> Maybe Text

-- | The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
[$sel:repositoryUri:Repository'] :: Repository -> Maybe Text

-- | The name of the repository.
[$sel:repositoryName:Repository'] :: Repository -> Maybe Text

-- | Create a value of <a>Repository</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repositoryArn:Repository'</a>, <a>repository_repositoryArn</a>
--   - The Amazon Resource Name (ARN) that identifies the repository. The
--   ARN contains the <tt>arn:aws:ecr</tt> namespace, followed by the
--   region of the repository, AWS account ID of the repository owner,
--   repository namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
--   
--   <a>$sel:createdAt:Repository'</a>, <a>repository_createdAt</a> - The
--   date and time, in JavaScript date format, when the repository was
--   created.
--   
--   <a>$sel:registryId:Repository'</a>, <a>repository_registryId</a> - The
--   AWS account ID associated with the public registry that contains the
--   repository.
--   
--   <a>$sel:repositoryUri:Repository'</a>, <a>repository_repositoryUri</a>
--   - The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
--   
--   <a>$sel:repositoryName:Repository'</a>,
--   <a>repository_repositoryName</a> - The name of the repository.
newRepository :: Repository

-- | The Amazon Resource Name (ARN) that identifies the repository. The ARN
--   contains the <tt>arn:aws:ecr</tt> namespace, followed by the region of
--   the repository, AWS account ID of the repository owner, repository
--   namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
repository_repositoryArn :: Lens' Repository (Maybe Text)

-- | The date and time, in JavaScript date format, when the repository was
--   created.
repository_createdAt :: Lens' Repository (Maybe UTCTime)

-- | The AWS account ID associated with the public registry that contains
--   the repository.
repository_registryId :: Lens' Repository (Maybe Text)

-- | The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
repository_repositoryUri :: Lens' Repository (Maybe Text)

-- | The name of the repository.
repository_repositoryName :: Lens' Repository (Maybe Text)

-- | The catalog data for a repository. This data is publicly visible in
--   the Amazon ECR Public Gallery.
--   
--   <i>See:</i> <a>newRepositoryCatalogData</a> smart constructor.
data RepositoryCatalogData
RepositoryCatalogData' :: Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe [Text] -> Maybe Text -> RepositoryCatalogData

-- | The URL containing the logo associated with the repository.
[$sel:logoUrl:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe Text

-- | The architecture tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
[$sel:architectures:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe [Text]

-- | The longform usage details of the contents of the repository. The
--   usage text provides context for users of the repository.
[$sel:usageText:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe Text

-- | Whether or not the repository is certified by AWS Marketplace.
[$sel:marketplaceCertified:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe Bool

-- | The longform description of the contents of the repository. This text
--   appears in the repository details on the Amazon ECR Public Gallery.
[$sel:aboutText:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe Text

-- | The operating system tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
[$sel:operatingSystems:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe [Text]

-- | The short description of the repository.
[$sel:description:RepositoryCatalogData'] :: RepositoryCatalogData -> Maybe Text

-- | Create a value of <a>RepositoryCatalogData</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logoUrl:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_logoUrl</a> - The URL containing the logo
--   associated with the repository.
--   
--   <a>$sel:architectures:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_architectures</a> - The architecture tags
--   that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
--   
--   <a>$sel:usageText:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_usageText</a> - The longform usage details of
--   the contents of the repository. The usage text provides context for
--   users of the repository.
--   
--   <a>$sel:marketplaceCertified:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_marketplaceCertified</a> - Whether or not the
--   repository is certified by AWS Marketplace.
--   
--   <a>$sel:aboutText:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_aboutText</a> - The longform description of
--   the contents of the repository. This text appears in the repository
--   details on the Amazon ECR Public Gallery.
--   
--   <a>$sel:operatingSystems:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_operatingSystems</a> - The operating system
--   tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
--   
--   <a>$sel:description:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_description</a> - The short description of
--   the repository.
newRepositoryCatalogData :: RepositoryCatalogData

-- | The URL containing the logo associated with the repository.
repositoryCatalogData_logoUrl :: Lens' RepositoryCatalogData (Maybe Text)

-- | The architecture tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
repositoryCatalogData_architectures :: Lens' RepositoryCatalogData (Maybe [Text])

-- | The longform usage details of the contents of the repository. The
--   usage text provides context for users of the repository.
repositoryCatalogData_usageText :: Lens' RepositoryCatalogData (Maybe Text)

-- | Whether or not the repository is certified by AWS Marketplace.
repositoryCatalogData_marketplaceCertified :: Lens' RepositoryCatalogData (Maybe Bool)

-- | The longform description of the contents of the repository. This text
--   appears in the repository details on the Amazon ECR Public Gallery.
repositoryCatalogData_aboutText :: Lens' RepositoryCatalogData (Maybe Text)

-- | The operating system tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
repositoryCatalogData_operatingSystems :: Lens' RepositoryCatalogData (Maybe [Text])

-- | The short description of the repository.
repositoryCatalogData_description :: Lens' RepositoryCatalogData (Maybe Text)

-- | An object containing the catalog data for a repository. This data is
--   publicly visible in the Amazon ECR Public Gallery.
--   
--   <i>See:</i> <a>newRepositoryCatalogDataInput</a> smart constructor.
data RepositoryCatalogDataInput
RepositoryCatalogDataInput' :: Maybe Base64 -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Text -> RepositoryCatalogDataInput

-- | The base64-encoded repository logo payload.
--   
--   The repository logo is only publicly visible in the Amazon ECR Public
--   Gallery for verified accounts.
[$sel:logoImageBlob:RepositoryCatalogDataInput'] :: RepositoryCatalogDataInput -> Maybe Base64

-- | The system architecture that the images in the repository are
--   compatible with. On the Amazon ECR Public Gallery, the following
--   supported architectures will appear as badges on the repository and
--   are used as search filters.
--   
--   <ul>
--   <li><pre>Linux</pre></li>
--   <li><pre>Windows</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
[$sel:architectures:RepositoryCatalogDataInput'] :: RepositoryCatalogDataInput -> Maybe [Text]

-- | Detailed information on how to use the contents of the repository. It
--   is publicly visible in the Amazon ECR Public Gallery. The usage text
--   provides context, support information, and additional usage details
--   for users of the repository. The text must be in markdown format.
[$sel:usageText:RepositoryCatalogDataInput'] :: RepositoryCatalogDataInput -> Maybe Text

-- | A detailed description of the contents of the repository. It is
--   publicly visible in the Amazon ECR Public Gallery. The text must be in
--   markdown format.
[$sel:aboutText:RepositoryCatalogDataInput'] :: RepositoryCatalogDataInput -> Maybe Text

-- | The operating systems that the images in the repository are compatible
--   with. On the Amazon ECR Public Gallery, the following supported
--   operating systems will appear as badges on the repository and are used
--   as search filters.
--   
--   <ul>
--   <li><pre>ARM</pre></li>
--   <li><pre>ARM 64</pre></li>
--   <li><pre>x86</pre></li>
--   <li><pre>x86-64</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
[$sel:operatingSystems:RepositoryCatalogDataInput'] :: RepositoryCatalogDataInput -> Maybe [Text]

-- | A short description of the contents of the repository. This text
--   appears in both the image details and also when searching for
--   repositories on the Amazon ECR Public Gallery.
[$sel:description:RepositoryCatalogDataInput'] :: RepositoryCatalogDataInput -> Maybe Text

-- | Create a value of <a>RepositoryCatalogDataInput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logoImageBlob:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_logoImageBlob</a> - The base64-encoded
--   repository logo payload.
--   
--   The repository logo is only publicly visible in the Amazon ECR Public
--   Gallery for verified accounts.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:architectures:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_architectures</a> - The system
--   architecture that the images in the repository are compatible with. On
--   the Amazon ECR Public Gallery, the following supported architectures
--   will appear as badges on the repository and are used as search
--   filters.
--   
--   <ul>
--   <li><pre>Linux</pre></li>
--   <li><pre>Windows</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
--   
--   <a>$sel:usageText:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_usageText</a> - Detailed information on
--   how to use the contents of the repository. It is publicly visible in
--   the Amazon ECR Public Gallery. The usage text provides context,
--   support information, and additional usage details for users of the
--   repository. The text must be in markdown format.
--   
--   <a>$sel:aboutText:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_aboutText</a> - A detailed description
--   of the contents of the repository. It is publicly visible in the
--   Amazon ECR Public Gallery. The text must be in markdown format.
--   
--   <a>$sel:operatingSystems:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_operatingSystems</a> - The operating
--   systems that the images in the repository are compatible with. On the
--   Amazon ECR Public Gallery, the following supported operating systems
--   will appear as badges on the repository and are used as search
--   filters.
--   
--   <ul>
--   <li><pre>ARM</pre></li>
--   <li><pre>ARM 64</pre></li>
--   <li><pre>x86</pre></li>
--   <li><pre>x86-64</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
--   
--   <a>$sel:description:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_description</a> - A short description of
--   the contents of the repository. This text appears in both the image
--   details and also when searching for repositories on the Amazon ECR
--   Public Gallery.
newRepositoryCatalogDataInput :: RepositoryCatalogDataInput

-- | The base64-encoded repository logo payload.
--   
--   The repository logo is only publicly visible in the Amazon ECR Public
--   Gallery for verified accounts.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
repositoryCatalogDataInput_logoImageBlob :: Lens' RepositoryCatalogDataInput (Maybe ByteString)

-- | The system architecture that the images in the repository are
--   compatible with. On the Amazon ECR Public Gallery, the following
--   supported architectures will appear as badges on the repository and
--   are used as search filters.
--   
--   <ul>
--   <li><pre>Linux</pre></li>
--   <li><pre>Windows</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
repositoryCatalogDataInput_architectures :: Lens' RepositoryCatalogDataInput (Maybe [Text])

-- | Detailed information on how to use the contents of the repository. It
--   is publicly visible in the Amazon ECR Public Gallery. The usage text
--   provides context, support information, and additional usage details
--   for users of the repository. The text must be in markdown format.
repositoryCatalogDataInput_usageText :: Lens' RepositoryCatalogDataInput (Maybe Text)

-- | A detailed description of the contents of the repository. It is
--   publicly visible in the Amazon ECR Public Gallery. The text must be in
--   markdown format.
repositoryCatalogDataInput_aboutText :: Lens' RepositoryCatalogDataInput (Maybe Text)

-- | The operating systems that the images in the repository are compatible
--   with. On the Amazon ECR Public Gallery, the following supported
--   operating systems will appear as badges on the repository and are used
--   as search filters.
--   
--   <ul>
--   <li><pre>ARM</pre></li>
--   <li><pre>ARM 64</pre></li>
--   <li><pre>x86</pre></li>
--   <li><pre>x86-64</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
repositoryCatalogDataInput_operatingSystems :: Lens' RepositoryCatalogDataInput (Maybe [Text])

-- | A short description of the contents of the repository. This text
--   appears in both the image details and also when searching for
--   repositories on the Amazon ECR Public Gallery.
repositoryCatalogDataInput_description :: Lens' RepositoryCatalogDataInput (Maybe Text)

-- | The metadata that you apply to a resource to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. Tag keys can have a maximum character length of
--   128 characters, and tag values can have a maximum length of 256
--   characters.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
[$sel:key:Tag'] :: Tag -> Maybe Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The optional part of a
--   key-value pair that make up a tag. A <tt>value</tt> acts as a
--   descriptor within a tag category (key).
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - One part of a key-value pair
--   that make up a tag. A <tt>key</tt> is a general label that acts like a
--   category for more specific tag values.
newTag :: Tag

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
tag_value :: Lens' Tag (Maybe Text)

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
tag_key :: Lens' Tag (Maybe Text)


-- | Associates the specified tags to a resource with the specified
--   <tt>resourceArn</tt>. If existing tags on a resource are not specified
--   in the request parameters, they are not changed. When a resource is
--   deleted, the tags associated with that resource are deleted as well.
module Amazonka.ECRPublic.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | The Amazon Resource Name (ARN) of the resource to which to add tags.
--   Currently, the supported resource is an Amazon ECR Public repository.
[$sel:resourceArn:TagResource'] :: TagResource -> Text

-- | The tags to add to the resource. A tag is an array of key-value pairs.
--   Tag keys can have a maximum character length of 128 characters, and
--   tag values can have a maximum length of 256 characters.
[$sel:tags:TagResource'] :: TagResource -> [Tag]

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the resource to which to add tags.
--   Currently, the supported resource is an Amazon ECR Public repository.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - The tags to
--   add to the resource. A tag is an array of key-value pairs. Tag keys
--   can have a maximum character length of 128 characters, and tag values
--   can have a maximum length of 256 characters.
newTagResource :: Text -> TagResource

-- | The Amazon Resource Name (ARN) of the resource to which to add tags.
--   Currently, the supported resource is an Amazon ECR Public repository.
tagResource_resourceArn :: Lens' TagResource Text

-- | The tags to add to the resource. A tag is an array of key-value pairs.
--   Tag keys can have a maximum character length of 128 characters, and
--   tag values can have a maximum length of 256 characters.
tagResource_tags :: Lens' TagResource [Tag]

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:TagResourceResponse'] :: TagResourceResponse -> Int

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.TagResource.TagResource
instance GHC.Show.Show Amazonka.ECRPublic.TagResource.TagResource
instance GHC.Read.Read Amazonka.ECRPublic.TagResource.TagResource
instance GHC.Classes.Eq Amazonka.ECRPublic.TagResource.TagResource
instance GHC.Generics.Generic Amazonka.ECRPublic.TagResource.TagResourceResponse
instance GHC.Show.Show Amazonka.ECRPublic.TagResource.TagResourceResponse
instance GHC.Read.Read Amazonka.ECRPublic.TagResource.TagResourceResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.TagResource.TagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.ECRPublic.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.ECRPublic.TagResource.TagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.TagResource.TagResource
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.TagResource.TagResource
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.TagResource.TagResource


-- | Applies a repository policy to the specified public repository to
--   control access permissions. For more information, see <a>Amazon ECR
--   Repository Policies</a> in the <i>Amazon Elastic Container Registry
--   User Guide</i>.
module Amazonka.ECRPublic.SetRepositoryPolicy

-- | <i>See:</i> <a>newSetRepositoryPolicy</a> smart constructor.
data SetRepositoryPolicy
SetRepositoryPolicy' :: Maybe Bool -> Maybe Text -> Text -> Text -> SetRepositoryPolicy

-- | If the policy you are attempting to set on a repository policy would
--   prevent you from setting another policy in the future, you must force
--   the SetRepositoryPolicy operation. This is intended to prevent
--   accidental repository lock outs.
[$sel:force:SetRepositoryPolicy'] :: SetRepositoryPolicy -> Maybe Bool

-- | The AWS account ID associated with the registry that contains the
--   repository. If you do not specify a registry, the default public
--   registry is assumed.
[$sel:registryId:SetRepositoryPolicy'] :: SetRepositoryPolicy -> Maybe Text

-- | The name of the repository to receive the policy.
[$sel:repositoryName:SetRepositoryPolicy'] :: SetRepositoryPolicy -> Text

-- | The JSON repository policy text to apply to the repository. For more
--   information, see <a>Amazon ECR Repository Policies</a> in the
--   <i>Amazon Elastic Container Registry User Guide</i>.
[$sel:policyText:SetRepositoryPolicy'] :: SetRepositoryPolicy -> Text

-- | Create a value of <a>SetRepositoryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:force:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_force</a> - If the policy you are attempting to
--   set on a repository policy would prevent you from setting another
--   policy in the future, you must force the SetRepositoryPolicy
--   operation. This is intended to prevent accidental repository lock
--   outs.
--   
--   <a>$sel:registryId:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_registryId</a> - The AWS account ID associated
--   with the registry that contains the repository. If you do not specify
--   a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_repositoryName</a> - The name of the repository
--   to receive the policy.
--   
--   <a>$sel:policyText:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_policyText</a> - The JSON repository policy
--   text to apply to the repository. For more information, see <a>Amazon
--   ECR Repository Policies</a> in the <i>Amazon Elastic Container
--   Registry User Guide</i>.
newSetRepositoryPolicy :: Text -> Text -> SetRepositoryPolicy

-- | If the policy you are attempting to set on a repository policy would
--   prevent you from setting another policy in the future, you must force
--   the SetRepositoryPolicy operation. This is intended to prevent
--   accidental repository lock outs.
setRepositoryPolicy_force :: Lens' SetRepositoryPolicy (Maybe Bool)

-- | The AWS account ID associated with the registry that contains the
--   repository. If you do not specify a registry, the default public
--   registry is assumed.
setRepositoryPolicy_registryId :: Lens' SetRepositoryPolicy (Maybe Text)

-- | The name of the repository to receive the policy.
setRepositoryPolicy_repositoryName :: Lens' SetRepositoryPolicy Text

-- | The JSON repository policy text to apply to the repository. For more
--   information, see <a>Amazon ECR Repository Policies</a> in the
--   <i>Amazon Elastic Container Registry User Guide</i>.
setRepositoryPolicy_policyText :: Lens' SetRepositoryPolicy Text

-- | <i>See:</i> <a>newSetRepositoryPolicyResponse</a> smart constructor.
data SetRepositoryPolicyResponse
SetRepositoryPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> SetRepositoryPolicyResponse

-- | The registry ID associated with the request.
[$sel:registryId:SetRepositoryPolicyResponse'] :: SetRepositoryPolicyResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:SetRepositoryPolicyResponse'] :: SetRepositoryPolicyResponse -> Maybe Text

-- | The JSON repository policy text applied to the repository.
[$sel:policyText:SetRepositoryPolicyResponse'] :: SetRepositoryPolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:SetRepositoryPolicyResponse'] :: SetRepositoryPolicyResponse -> Int

-- | Create a value of <a>SetRepositoryPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:policyText:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicyResponse_policyText</a> - The JSON repository
--   policy text applied to the repository.
--   
--   <a>$sel:httpStatus:SetRepositoryPolicyResponse'</a>,
--   <a>setRepositoryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newSetRepositoryPolicyResponse :: Int -> SetRepositoryPolicyResponse

-- | The registry ID associated with the request.
setRepositoryPolicyResponse_registryId :: Lens' SetRepositoryPolicyResponse (Maybe Text)

-- | The repository name associated with the request.
setRepositoryPolicyResponse_repositoryName :: Lens' SetRepositoryPolicyResponse (Maybe Text)

-- | The JSON repository policy text applied to the repository.
setRepositoryPolicyResponse_policyText :: Lens' SetRepositoryPolicyResponse (Maybe Text)

-- | The response's http status code.
setRepositoryPolicyResponse_httpStatus :: Lens' SetRepositoryPolicyResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicy
instance GHC.Show.Show Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicy
instance GHC.Read.Read Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicy
instance GHC.Classes.Eq Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicy
instance GHC.Generics.Generic Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicyResponse
instance GHC.Show.Show Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicyResponse
instance GHC.Read.Read Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicyResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicy
instance Control.DeepSeq.NFData Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicy
instance Control.DeepSeq.NFData Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicy
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.SetRepositoryPolicy.SetRepositoryPolicy


-- | Creates or updates the catalog data for a repository in a public
--   registry.
module Amazonka.ECRPublic.PutRepositoryCatalogData

-- | <i>See:</i> <a>newPutRepositoryCatalogData</a> smart constructor.
data PutRepositoryCatalogData
PutRepositoryCatalogData' :: Maybe Text -> Text -> RepositoryCatalogDataInput -> PutRepositoryCatalogData

-- | The AWS account ID associated with the public registry the repository
--   is in. If you do not specify a registry, the default public registry
--   is assumed.
[$sel:registryId:PutRepositoryCatalogData'] :: PutRepositoryCatalogData -> Maybe Text

-- | The name of the repository to create or update the catalog data for.
[$sel:repositoryName:PutRepositoryCatalogData'] :: PutRepositoryCatalogData -> Text

-- | An object containing the catalog data for a repository. This data is
--   publicly visible in the Amazon ECR Public Gallery.
[$sel:catalogData:PutRepositoryCatalogData'] :: PutRepositoryCatalogData -> RepositoryCatalogDataInput

-- | Create a value of <a>PutRepositoryCatalogData</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutRepositoryCatalogData'</a>,
--   <a>putRepositoryCatalogData_registryId</a> - The AWS account ID
--   associated with the public registry the repository is in. If you do
--   not specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:PutRepositoryCatalogData'</a>,
--   <a>putRepositoryCatalogData_repositoryName</a> - The name of the
--   repository to create or update the catalog data for.
--   
--   <a>$sel:catalogData:PutRepositoryCatalogData'</a>,
--   <a>putRepositoryCatalogData_catalogData</a> - An object containing the
--   catalog data for a repository. This data is publicly visible in the
--   Amazon ECR Public Gallery.
newPutRepositoryCatalogData :: Text -> RepositoryCatalogDataInput -> PutRepositoryCatalogData

-- | The AWS account ID associated with the public registry the repository
--   is in. If you do not specify a registry, the default public registry
--   is assumed.
putRepositoryCatalogData_registryId :: Lens' PutRepositoryCatalogData (Maybe Text)

-- | The name of the repository to create or update the catalog data for.
putRepositoryCatalogData_repositoryName :: Lens' PutRepositoryCatalogData Text

-- | An object containing the catalog data for a repository. This data is
--   publicly visible in the Amazon ECR Public Gallery.
putRepositoryCatalogData_catalogData :: Lens' PutRepositoryCatalogData RepositoryCatalogDataInput

-- | <i>See:</i> <a>newPutRepositoryCatalogDataResponse</a> smart
--   constructor.
data PutRepositoryCatalogDataResponse
PutRepositoryCatalogDataResponse' :: Maybe RepositoryCatalogData -> Int -> PutRepositoryCatalogDataResponse

-- | The catalog data for the repository.
[$sel:catalogData:PutRepositoryCatalogDataResponse'] :: PutRepositoryCatalogDataResponse -> Maybe RepositoryCatalogData

-- | The response's http status code.
[$sel:httpStatus:PutRepositoryCatalogDataResponse'] :: PutRepositoryCatalogDataResponse -> Int

-- | Create a value of <a>PutRepositoryCatalogDataResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogData:PutRepositoryCatalogData'</a>,
--   <a>putRepositoryCatalogDataResponse_catalogData</a> - The catalog data
--   for the repository.
--   
--   <a>$sel:httpStatus:PutRepositoryCatalogDataResponse'</a>,
--   <a>putRepositoryCatalogDataResponse_httpStatus</a> - The response's
--   http status code.
newPutRepositoryCatalogDataResponse :: Int -> PutRepositoryCatalogDataResponse

-- | The catalog data for the repository.
putRepositoryCatalogDataResponse_catalogData :: Lens' PutRepositoryCatalogDataResponse (Maybe RepositoryCatalogData)

-- | The response's http status code.
putRepositoryCatalogDataResponse_httpStatus :: Lens' PutRepositoryCatalogDataResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogData
instance GHC.Show.Show Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogData
instance GHC.Read.Read Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogData
instance GHC.Classes.Eq Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogData
instance GHC.Generics.Generic Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogDataResponse
instance GHC.Show.Show Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogDataResponse
instance GHC.Read.Read Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogDataResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogDataResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogData
instance Control.DeepSeq.NFData Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogDataResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogData
instance Control.DeepSeq.NFData Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogData
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogData
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogData
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogData
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.PutRepositoryCatalogData.PutRepositoryCatalogData


-- | Create or updates the catalog data for a public registry.
module Amazonka.ECRPublic.PutRegistryCatalogData

-- | <i>See:</i> <a>newPutRegistryCatalogData</a> smart constructor.
data PutRegistryCatalogData
PutRegistryCatalogData' :: Maybe Text -> PutRegistryCatalogData

-- | The display name for a public registry. The display name is shown as
--   the repository author in the Amazon ECR Public Gallery.
--   
--   The registry display name is only publicly visible in the Amazon ECR
--   Public Gallery for verified accounts.
[$sel:displayName:PutRegistryCatalogData'] :: PutRegistryCatalogData -> Maybe Text

-- | Create a value of <a>PutRegistryCatalogData</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:displayName:PutRegistryCatalogData'</a>,
--   <a>putRegistryCatalogData_displayName</a> - The display name for a
--   public registry. The display name is shown as the repository author in
--   the Amazon ECR Public Gallery.
--   
--   The registry display name is only publicly visible in the Amazon ECR
--   Public Gallery for verified accounts.
newPutRegistryCatalogData :: PutRegistryCatalogData

-- | The display name for a public registry. The display name is shown as
--   the repository author in the Amazon ECR Public Gallery.
--   
--   The registry display name is only publicly visible in the Amazon ECR
--   Public Gallery for verified accounts.
putRegistryCatalogData_displayName :: Lens' PutRegistryCatalogData (Maybe Text)

-- | <i>See:</i> <a>newPutRegistryCatalogDataResponse</a> smart
--   constructor.
data PutRegistryCatalogDataResponse
PutRegistryCatalogDataResponse' :: Int -> RegistryCatalogData -> PutRegistryCatalogDataResponse

-- | The response's http status code.
[$sel:httpStatus:PutRegistryCatalogDataResponse'] :: PutRegistryCatalogDataResponse -> Int

-- | The catalog data for the public registry.
[$sel:registryCatalogData:PutRegistryCatalogDataResponse'] :: PutRegistryCatalogDataResponse -> RegistryCatalogData

-- | Create a value of <a>PutRegistryCatalogDataResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:PutRegistryCatalogDataResponse'</a>,
--   <a>putRegistryCatalogDataResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:registryCatalogData:PutRegistryCatalogDataResponse'</a>,
--   <a>putRegistryCatalogDataResponse_registryCatalogData</a> - The
--   catalog data for the public registry.
newPutRegistryCatalogDataResponse :: Int -> RegistryCatalogData -> PutRegistryCatalogDataResponse

-- | The response's http status code.
putRegistryCatalogDataResponse_httpStatus :: Lens' PutRegistryCatalogDataResponse Int

-- | The catalog data for the public registry.
putRegistryCatalogDataResponse_registryCatalogData :: Lens' PutRegistryCatalogDataResponse RegistryCatalogData
instance GHC.Generics.Generic Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogData
instance GHC.Show.Show Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogData
instance GHC.Read.Read Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogData
instance GHC.Classes.Eq Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogData
instance GHC.Generics.Generic Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogDataResponse
instance GHC.Show.Show Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogDataResponse
instance GHC.Read.Read Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogDataResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogDataResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogData
instance Control.DeepSeq.NFData Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogDataResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogData
instance Control.DeepSeq.NFData Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogData
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogData
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogData
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogData
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.PutRegistryCatalogData.PutRegistryCatalogData


-- | Creates or updates the image manifest and tags associated with an
--   image.
--   
--   When an image is pushed and all new image layers have been uploaded,
--   the PutImage API is called once to create or update the image manifest
--   and the tags associated with the image.
--   
--   This operation is used by the Amazon ECR proxy and is not generally
--   used by customers for pulling and pushing images. In most cases, you
--   should use the <tt>docker</tt> CLI to pull, tag, and push images.
module Amazonka.ECRPublic.PutImage

-- | <i>See:</i> <a>newPutImage</a> smart constructor.
data PutImage
PutImage' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> PutImage

-- | The AWS account ID associated with the public registry that contains
--   the repository in which to put the image. If you do not specify a
--   registry, the default public registry is assumed.
[$sel:registryId:PutImage'] :: PutImage -> Maybe Text

-- | The media type of the image manifest. If you push an image manifest
--   that does not contain the <tt>mediaType</tt> field, you must specify
--   the <tt>imageManifestMediaType</tt> in the request.
[$sel:imageManifestMediaType:PutImage'] :: PutImage -> Maybe Text

-- | The image digest of the image manifest corresponding to the image.
[$sel:imageDigest:PutImage'] :: PutImage -> Maybe Text

-- | The tag to associate with the image. This parameter is required for
--   images that use the Docker Image Manifest V2 Schema 2 or Open
--   Container Initiative (OCI) formats.
[$sel:imageTag:PutImage'] :: PutImage -> Maybe Text

-- | The name of the repository in which to put the image.
[$sel:repositoryName:PutImage'] :: PutImage -> Text

-- | The image manifest corresponding to the image to be uploaded.
[$sel:imageManifest:PutImage'] :: PutImage -> Text

-- | Create a value of <a>PutImage</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutImage'</a>, <a>putImage_registryId</a> - The AWS
--   account ID associated with the public registry that contains the
--   repository in which to put the image. If you do not specify a
--   registry, the default public registry is assumed.
--   
--   <a>$sel:imageManifestMediaType:PutImage'</a>,
--   <a>putImage_imageManifestMediaType</a> - The media type of the image
--   manifest. If you push an image manifest that does not contain the
--   <tt>mediaType</tt> field, you must specify the
--   <tt>imageManifestMediaType</tt> in the request.
--   
--   <a>$sel:imageDigest:PutImage'</a>, <a>putImage_imageDigest</a> - The
--   image digest of the image manifest corresponding to the image.
--   
--   <a>$sel:imageTag:PutImage'</a>, <a>putImage_imageTag</a> - The tag to
--   associate with the image. This parameter is required for images that
--   use the Docker Image Manifest V2 Schema 2 or Open Container Initiative
--   (OCI) formats.
--   
--   <a>$sel:repositoryName:PutImage'</a>, <a>putImage_repositoryName</a> -
--   The name of the repository in which to put the image.
--   
--   <a>$sel:imageManifest:PutImage'</a>, <a>putImage_imageManifest</a> -
--   The image manifest corresponding to the image to be uploaded.
newPutImage :: Text -> Text -> PutImage

-- | The AWS account ID associated with the public registry that contains
--   the repository in which to put the image. If you do not specify a
--   registry, the default public registry is assumed.
putImage_registryId :: Lens' PutImage (Maybe Text)

-- | The media type of the image manifest. If you push an image manifest
--   that does not contain the <tt>mediaType</tt> field, you must specify
--   the <tt>imageManifestMediaType</tt> in the request.
putImage_imageManifestMediaType :: Lens' PutImage (Maybe Text)

-- | The image digest of the image manifest corresponding to the image.
putImage_imageDigest :: Lens' PutImage (Maybe Text)

-- | The tag to associate with the image. This parameter is required for
--   images that use the Docker Image Manifest V2 Schema 2 or Open
--   Container Initiative (OCI) formats.
putImage_imageTag :: Lens' PutImage (Maybe Text)

-- | The name of the repository in which to put the image.
putImage_repositoryName :: Lens' PutImage Text

-- | The image manifest corresponding to the image to be uploaded.
putImage_imageManifest :: Lens' PutImage Text

-- | <i>See:</i> <a>newPutImageResponse</a> smart constructor.
data PutImageResponse
PutImageResponse' :: Maybe Image -> Int -> PutImageResponse

-- | Details of the image uploaded.
[$sel:image:PutImageResponse'] :: PutImageResponse -> Maybe Image

-- | The response's http status code.
[$sel:httpStatus:PutImageResponse'] :: PutImageResponse -> Int

-- | Create a value of <a>PutImageResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:image:PutImageResponse'</a>, <a>putImageResponse_image</a> -
--   Details of the image uploaded.
--   
--   <a>$sel:httpStatus:PutImageResponse'</a>,
--   <a>putImageResponse_httpStatus</a> - The response's http status code.
newPutImageResponse :: Int -> PutImageResponse

-- | Details of the image uploaded.
putImageResponse_image :: Lens' PutImageResponse (Maybe Image)

-- | The response's http status code.
putImageResponse_httpStatus :: Lens' PutImageResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.PutImage.PutImage
instance GHC.Show.Show Amazonka.ECRPublic.PutImage.PutImage
instance GHC.Read.Read Amazonka.ECRPublic.PutImage.PutImage
instance GHC.Classes.Eq Amazonka.ECRPublic.PutImage.PutImage
instance GHC.Generics.Generic Amazonka.ECRPublic.PutImage.PutImageResponse
instance GHC.Show.Show Amazonka.ECRPublic.PutImage.PutImageResponse
instance GHC.Read.Read Amazonka.ECRPublic.PutImage.PutImageResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.PutImage.PutImageResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.PutImage.PutImage
instance Control.DeepSeq.NFData Amazonka.ECRPublic.PutImage.PutImageResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.PutImage.PutImage
instance Control.DeepSeq.NFData Amazonka.ECRPublic.PutImage.PutImage
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.PutImage.PutImage
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.PutImage.PutImage
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.PutImage.PutImage
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.PutImage.PutImage


-- | List the tags for an Amazon ECR Public resource.
module Amazonka.ECRPublic.ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | The Amazon Resource Name (ARN) that identifies the resource for which
--   to list the tags. Currently, the supported resource is an Amazon ECR
--   Public repository.
[$sel:resourceArn:ListTagsForResource'] :: ListTagsForResource -> Text

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The Amazon Resource Name
--   (ARN) that identifies the resource for which to list the tags.
--   Currently, the supported resource is an Amazon ECR Public repository.
newListTagsForResource :: Text -> ListTagsForResource

-- | The Amazon Resource Name (ARN) that identifies the resource for which
--   to list the tags. Currently, the supported resource is an Amazon ECR
--   Public repository.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe [Tag] -> Int -> ListTagsForResourceResponse

-- | The tags for the resource.
[$sel:tags:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe [Tag]

-- | The response's http status code.
[$sel:httpStatus:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Int

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - The tags for the resource.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | The tags for the resource.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.ListTagsForResource.ListTagsForResource
instance GHC.Show.Show Amazonka.ECRPublic.ListTagsForResource.ListTagsForResource
instance GHC.Read.Read Amazonka.ECRPublic.ListTagsForResource.ListTagsForResource
instance GHC.Classes.Eq Amazonka.ECRPublic.ListTagsForResource.ListTagsForResource
instance GHC.Generics.Generic Amazonka.ECRPublic.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Show.Show Amazonka.ECRPublic.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Read.Read Amazonka.ECRPublic.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.ListTagsForResource.ListTagsForResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.ECRPublic.ListTagsForResource.ListTagsForResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.ECRPublic.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.ListTagsForResource.ListTagsForResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.ListTagsForResource.ListTagsForResource


-- | Notifies Amazon ECR that you intend to upload an image layer.
--   
--   When an image is pushed, the InitiateLayerUpload API is called once
--   per image layer that has not already been uploaded. Whether or not an
--   image layer has been uploaded is determined by the
--   BatchCheckLayerAvailability API action.
--   
--   This operation is used by the Amazon ECR proxy and is not generally
--   used by customers for pulling and pushing images. In most cases, you
--   should use the <tt>docker</tt> CLI to pull, tag, and push images.
module Amazonka.ECRPublic.InitiateLayerUpload

-- | <i>See:</i> <a>newInitiateLayerUpload</a> smart constructor.
data InitiateLayerUpload
InitiateLayerUpload' :: Maybe Text -> Text -> InitiateLayerUpload

-- | The AWS account ID associated with the registry to which you intend to
--   upload layers. If you do not specify a registry, the default public
--   registry is assumed.
[$sel:registryId:InitiateLayerUpload'] :: InitiateLayerUpload -> Maybe Text

-- | The name of the repository to which you intend to upload layers.
[$sel:repositoryName:InitiateLayerUpload'] :: InitiateLayerUpload -> Text

-- | Create a value of <a>InitiateLayerUpload</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:InitiateLayerUpload'</a>,
--   <a>initiateLayerUpload_registryId</a> - The AWS account ID associated
--   with the registry to which you intend to upload layers. If you do not
--   specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:InitiateLayerUpload'</a>,
--   <a>initiateLayerUpload_repositoryName</a> - The name of the repository
--   to which you intend to upload layers.
newInitiateLayerUpload :: Text -> InitiateLayerUpload

-- | The AWS account ID associated with the registry to which you intend to
--   upload layers. If you do not specify a registry, the default public
--   registry is assumed.
initiateLayerUpload_registryId :: Lens' InitiateLayerUpload (Maybe Text)

-- | The name of the repository to which you intend to upload layers.
initiateLayerUpload_repositoryName :: Lens' InitiateLayerUpload Text

-- | <i>See:</i> <a>newInitiateLayerUploadResponse</a> smart constructor.
data InitiateLayerUploadResponse
InitiateLayerUploadResponse' :: Maybe Natural -> Maybe Text -> Int -> InitiateLayerUploadResponse

-- | The size, in bytes, that Amazon ECR expects future layer part uploads
--   to be.
[$sel:partSize:InitiateLayerUploadResponse'] :: InitiateLayerUploadResponse -> Maybe Natural

-- | The upload ID for the layer upload. This parameter is passed to
--   further UploadLayerPart and CompleteLayerUpload operations.
[$sel:uploadId:InitiateLayerUploadResponse'] :: InitiateLayerUploadResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:InitiateLayerUploadResponse'] :: InitiateLayerUploadResponse -> Int

-- | Create a value of <a>InitiateLayerUploadResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:partSize:InitiateLayerUploadResponse'</a>,
--   <a>initiateLayerUploadResponse_partSize</a> - The size, in bytes, that
--   Amazon ECR expects future layer part uploads to be.
--   
--   <a>$sel:uploadId:InitiateLayerUploadResponse'</a>,
--   <a>initiateLayerUploadResponse_uploadId</a> - The upload ID for the
--   layer upload. This parameter is passed to further UploadLayerPart and
--   CompleteLayerUpload operations.
--   
--   <a>$sel:httpStatus:InitiateLayerUploadResponse'</a>,
--   <a>initiateLayerUploadResponse_httpStatus</a> - The response's http
--   status code.
newInitiateLayerUploadResponse :: Int -> InitiateLayerUploadResponse

-- | The size, in bytes, that Amazon ECR expects future layer part uploads
--   to be.
initiateLayerUploadResponse_partSize :: Lens' InitiateLayerUploadResponse (Maybe Natural)

-- | The upload ID for the layer upload. This parameter is passed to
--   further UploadLayerPart and CompleteLayerUpload operations.
initiateLayerUploadResponse_uploadId :: Lens' InitiateLayerUploadResponse (Maybe Text)

-- | The response's http status code.
initiateLayerUploadResponse_httpStatus :: Lens' InitiateLayerUploadResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUpload
instance GHC.Show.Show Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUpload
instance GHC.Read.Read Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUpload
instance GHC.Classes.Eq Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUpload
instance GHC.Generics.Generic Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUploadResponse
instance GHC.Show.Show Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUploadResponse
instance GHC.Read.Read Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUploadResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUploadResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUpload
instance Control.DeepSeq.NFData Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUploadResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUpload
instance Control.DeepSeq.NFData Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUpload
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUpload
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUpload
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUpload
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.InitiateLayerUpload.InitiateLayerUpload


-- | Retrieves the repository policy for the specified repository.
module Amazonka.ECRPublic.GetRepositoryPolicy

-- | <i>See:</i> <a>newGetRepositoryPolicy</a> smart constructor.
data GetRepositoryPolicy
GetRepositoryPolicy' :: Maybe Text -> Text -> GetRepositoryPolicy

-- | The AWS account ID associated with the public registry that contains
--   the repository. If you do not specify a registry, the default public
--   registry is assumed.
[$sel:registryId:GetRepositoryPolicy'] :: GetRepositoryPolicy -> Maybe Text

-- | The name of the repository with the policy to retrieve.
[$sel:repositoryName:GetRepositoryPolicy'] :: GetRepositoryPolicy -> Text

-- | Create a value of <a>GetRepositoryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicy_registryId</a> - The AWS account ID associated
--   with the public registry that contains the repository. If you do not
--   specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicy_repositoryName</a> - The name of the repository
--   with the policy to retrieve.
newGetRepositoryPolicy :: Text -> GetRepositoryPolicy

-- | The AWS account ID associated with the public registry that contains
--   the repository. If you do not specify a registry, the default public
--   registry is assumed.
getRepositoryPolicy_registryId :: Lens' GetRepositoryPolicy (Maybe Text)

-- | The name of the repository with the policy to retrieve.
getRepositoryPolicy_repositoryName :: Lens' GetRepositoryPolicy Text

-- | <i>See:</i> <a>newGetRepositoryPolicyResponse</a> smart constructor.
data GetRepositoryPolicyResponse
GetRepositoryPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> GetRepositoryPolicyResponse

-- | The registry ID associated with the request.
[$sel:registryId:GetRepositoryPolicyResponse'] :: GetRepositoryPolicyResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:GetRepositoryPolicyResponse'] :: GetRepositoryPolicyResponse -> Maybe Text

-- | The repository policy text associated with the repository. The policy
--   text will be in JSON format.
[$sel:policyText:GetRepositoryPolicyResponse'] :: GetRepositoryPolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetRepositoryPolicyResponse'] :: GetRepositoryPolicyResponse -> Int

-- | Create a value of <a>GetRepositoryPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:policyText:GetRepositoryPolicyResponse'</a>,
--   <a>getRepositoryPolicyResponse_policyText</a> - The repository policy
--   text associated with the repository. The policy text will be in JSON
--   format.
--   
--   <a>$sel:httpStatus:GetRepositoryPolicyResponse'</a>,
--   <a>getRepositoryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newGetRepositoryPolicyResponse :: Int -> GetRepositoryPolicyResponse

-- | The registry ID associated with the request.
getRepositoryPolicyResponse_registryId :: Lens' GetRepositoryPolicyResponse (Maybe Text)

-- | The repository name associated with the request.
getRepositoryPolicyResponse_repositoryName :: Lens' GetRepositoryPolicyResponse (Maybe Text)

-- | The repository policy text associated with the repository. The policy
--   text will be in JSON format.
getRepositoryPolicyResponse_policyText :: Lens' GetRepositoryPolicyResponse (Maybe Text)

-- | The response's http status code.
getRepositoryPolicyResponse_httpStatus :: Lens' GetRepositoryPolicyResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicy
instance GHC.Show.Show Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicy
instance GHC.Read.Read Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicy
instance GHC.Classes.Eq Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicy
instance GHC.Generics.Generic Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicyResponse
instance GHC.Show.Show Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicyResponse
instance GHC.Read.Read Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicyResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicy
instance Control.DeepSeq.NFData Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicy
instance Control.DeepSeq.NFData Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicy
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.GetRepositoryPolicy.GetRepositoryPolicy


-- | Retrieve catalog metadata for a repository in a public registry. This
--   metadata is displayed publicly in the Amazon ECR Public Gallery.
module Amazonka.ECRPublic.GetRepositoryCatalogData

-- | <i>See:</i> <a>newGetRepositoryCatalogData</a> smart constructor.
data GetRepositoryCatalogData
GetRepositoryCatalogData' :: Maybe Text -> Text -> GetRepositoryCatalogData

-- | The AWS account ID associated with the registry that contains the
--   repositories to be described. If you do not specify a registry, the
--   default public registry is assumed.
[$sel:registryId:GetRepositoryCatalogData'] :: GetRepositoryCatalogData -> Maybe Text

-- | The name of the repository to retrieve the catalog metadata for.
[$sel:repositoryName:GetRepositoryCatalogData'] :: GetRepositoryCatalogData -> Text

-- | Create a value of <a>GetRepositoryCatalogData</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetRepositoryCatalogData'</a>,
--   <a>getRepositoryCatalogData_registryId</a> - The AWS account ID
--   associated with the registry that contains the repositories to be
--   described. If you do not specify a registry, the default public
--   registry is assumed.
--   
--   <a>$sel:repositoryName:GetRepositoryCatalogData'</a>,
--   <a>getRepositoryCatalogData_repositoryName</a> - The name of the
--   repository to retrieve the catalog metadata for.
newGetRepositoryCatalogData :: Text -> GetRepositoryCatalogData

-- | The AWS account ID associated with the registry that contains the
--   repositories to be described. If you do not specify a registry, the
--   default public registry is assumed.
getRepositoryCatalogData_registryId :: Lens' GetRepositoryCatalogData (Maybe Text)

-- | The name of the repository to retrieve the catalog metadata for.
getRepositoryCatalogData_repositoryName :: Lens' GetRepositoryCatalogData Text

-- | <i>See:</i> <a>newGetRepositoryCatalogDataResponse</a> smart
--   constructor.
data GetRepositoryCatalogDataResponse
GetRepositoryCatalogDataResponse' :: Maybe RepositoryCatalogData -> Int -> GetRepositoryCatalogDataResponse

-- | The catalog metadata for the repository.
[$sel:catalogData:GetRepositoryCatalogDataResponse'] :: GetRepositoryCatalogDataResponse -> Maybe RepositoryCatalogData

-- | The response's http status code.
[$sel:httpStatus:GetRepositoryCatalogDataResponse'] :: GetRepositoryCatalogDataResponse -> Int

-- | Create a value of <a>GetRepositoryCatalogDataResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogData:GetRepositoryCatalogDataResponse'</a>,
--   <a>getRepositoryCatalogDataResponse_catalogData</a> - The catalog
--   metadata for the repository.
--   
--   <a>$sel:httpStatus:GetRepositoryCatalogDataResponse'</a>,
--   <a>getRepositoryCatalogDataResponse_httpStatus</a> - The response's
--   http status code.
newGetRepositoryCatalogDataResponse :: Int -> GetRepositoryCatalogDataResponse

-- | The catalog metadata for the repository.
getRepositoryCatalogDataResponse_catalogData :: Lens' GetRepositoryCatalogDataResponse (Maybe RepositoryCatalogData)

-- | The response's http status code.
getRepositoryCatalogDataResponse_httpStatus :: Lens' GetRepositoryCatalogDataResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogData
instance GHC.Show.Show Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogData
instance GHC.Read.Read Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogData
instance GHC.Classes.Eq Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogData
instance GHC.Generics.Generic Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogDataResponse
instance GHC.Show.Show Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogDataResponse
instance GHC.Read.Read Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogDataResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogDataResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogData
instance Control.DeepSeq.NFData Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogDataResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogData
instance Control.DeepSeq.NFData Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogData
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogData
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogData
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogData
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.GetRepositoryCatalogData.GetRepositoryCatalogData


-- | Retrieves catalog metadata for a public registry.
module Amazonka.ECRPublic.GetRegistryCatalogData

-- | <i>See:</i> <a>newGetRegistryCatalogData</a> smart constructor.
data GetRegistryCatalogData
GetRegistryCatalogData' :: GetRegistryCatalogData

-- | Create a value of <a>GetRegistryCatalogData</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newGetRegistryCatalogData :: GetRegistryCatalogData

-- | <i>See:</i> <a>newGetRegistryCatalogDataResponse</a> smart
--   constructor.
data GetRegistryCatalogDataResponse
GetRegistryCatalogDataResponse' :: Int -> RegistryCatalogData -> GetRegistryCatalogDataResponse

-- | The response's http status code.
[$sel:httpStatus:GetRegistryCatalogDataResponse'] :: GetRegistryCatalogDataResponse -> Int

-- | The catalog metadata for the public registry.
[$sel:registryCatalogData:GetRegistryCatalogDataResponse'] :: GetRegistryCatalogDataResponse -> RegistryCatalogData

-- | Create a value of <a>GetRegistryCatalogDataResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GetRegistryCatalogDataResponse'</a>,
--   <a>getRegistryCatalogDataResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:registryCatalogData:GetRegistryCatalogDataResponse'</a>,
--   <a>getRegistryCatalogDataResponse_registryCatalogData</a> - The
--   catalog metadata for the public registry.
newGetRegistryCatalogDataResponse :: Int -> RegistryCatalogData -> GetRegistryCatalogDataResponse

-- | The response's http status code.
getRegistryCatalogDataResponse_httpStatus :: Lens' GetRegistryCatalogDataResponse Int

-- | The catalog metadata for the public registry.
getRegistryCatalogDataResponse_registryCatalogData :: Lens' GetRegistryCatalogDataResponse RegistryCatalogData
instance GHC.Generics.Generic Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogData
instance GHC.Show.Show Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogData
instance GHC.Read.Read Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogData
instance GHC.Classes.Eq Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogData
instance GHC.Generics.Generic Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogDataResponse
instance GHC.Show.Show Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogDataResponse
instance GHC.Read.Read Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogDataResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogDataResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogData
instance Control.DeepSeq.NFData Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogDataResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogData
instance Control.DeepSeq.NFData Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogData
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogData
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogData
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogData
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.GetRegistryCatalogData.GetRegistryCatalogData


-- | Retrieves an authorization token. An authorization token represents
--   your IAM authentication credentials and can be used to access any
--   Amazon ECR registry that your IAM principal has access to. The
--   authorization token is valid for 12 hours. This API requires the
--   <tt>ecr-public:GetAuthorizationToken</tt> and
--   <tt>sts:GetServiceBearerToken</tt> permissions.
module Amazonka.ECRPublic.GetAuthorizationToken

-- | <i>See:</i> <a>newGetAuthorizationToken</a> smart constructor.
data GetAuthorizationToken
GetAuthorizationToken' :: GetAuthorizationToken

-- | Create a value of <a>GetAuthorizationToken</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newGetAuthorizationToken :: GetAuthorizationToken

-- | <i>See:</i> <a>newGetAuthorizationTokenResponse</a> smart constructor.
data GetAuthorizationTokenResponse
GetAuthorizationTokenResponse' :: Maybe AuthorizationData -> Int -> GetAuthorizationTokenResponse

-- | An authorization token data object that corresponds to a public
--   registry.
[$sel:authorizationData:GetAuthorizationTokenResponse'] :: GetAuthorizationTokenResponse -> Maybe AuthorizationData

-- | The response's http status code.
[$sel:httpStatus:GetAuthorizationTokenResponse'] :: GetAuthorizationTokenResponse -> Int

-- | Create a value of <a>GetAuthorizationTokenResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:authorizationData:GetAuthorizationTokenResponse'</a>,
--   <a>getAuthorizationTokenResponse_authorizationData</a> - An
--   authorization token data object that corresponds to a public registry.
--   
--   <a>$sel:httpStatus:GetAuthorizationTokenResponse'</a>,
--   <a>getAuthorizationTokenResponse_httpStatus</a> - The response's http
--   status code.
newGetAuthorizationTokenResponse :: Int -> GetAuthorizationTokenResponse

-- | An authorization token data object that corresponds to a public
--   registry.
getAuthorizationTokenResponse_authorizationData :: Lens' GetAuthorizationTokenResponse (Maybe AuthorizationData)

-- | The response's http status code.
getAuthorizationTokenResponse_httpStatus :: Lens' GetAuthorizationTokenResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationToken
instance GHC.Show.Show Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationToken
instance GHC.Read.Read Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationToken
instance GHC.Classes.Eq Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationToken
instance GHC.Generics.Generic Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationTokenResponse
instance GHC.Show.Show Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationTokenResponse
instance GHC.Read.Read Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationTokenResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationTokenResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationToken
instance Control.DeepSeq.NFData Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationTokenResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationToken
instance Control.DeepSeq.NFData Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationToken
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationToken
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationToken
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationToken
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.GetAuthorizationToken.GetAuthorizationToken


-- | Describes repositories in a public registry.
--   
--   This operation returns paginated results.
module Amazonka.ECRPublic.DescribeRepositories

-- | <i>See:</i> <a>newDescribeRepositories</a> smart constructor.
data DescribeRepositories
DescribeRepositories' :: Maybe Text -> Maybe (NonEmpty Text) -> Maybe Text -> Maybe Natural -> DescribeRepositories

-- | The AWS account ID associated with the registry that contains the
--   repositories to be described. If you do not specify a registry, the
--   default public registry is assumed.
[$sel:registryId:DescribeRepositories'] :: DescribeRepositories -> Maybe Text

-- | A list of repositories to describe. If this parameter is omitted, then
--   all repositories in a registry are described.
[$sel:repositoryNames:DescribeRepositories'] :: DescribeRepositories -> Maybe (NonEmpty Text)

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeRepositories</tt> request where <tt>maxResults</tt> was
--   used and the results exceeded the value of that parameter. Pagination
--   continues from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   repositories with <tt>repositoryNames</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:DescribeRepositories'] :: DescribeRepositories -> Maybe Text

-- | The maximum number of repository results returned by
--   <tt>DescribeRepositories</tt> in paginated output. When this parameter
--   is used, <tt>DescribeRepositories</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeRepositories</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRepositories</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
[$sel:maxResults:DescribeRepositories'] :: DescribeRepositories -> Maybe Natural

-- | Create a value of <a>DescribeRepositories</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DescribeRepositories'</a>,
--   <a>describeRepositories_registryId</a> - The AWS account ID associated
--   with the registry that contains the repositories to be described. If
--   you do not specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryNames:DescribeRepositories'</a>,
--   <a>describeRepositories_repositoryNames</a> - A list of repositories
--   to describe. If this parameter is omitted, then all repositories in a
--   registry are described.
--   
--   <a>$sel:nextToken:DescribeRepositories'</a>,
--   <a>describeRepositories_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a previous paginated <tt>DescribeRepositories</tt>
--   request where <tt>maxResults</tt> was used and the results exceeded
--   the value of that parameter. Pagination continues from the end of the
--   previous results that returned the <tt>nextToken</tt> value. This
--   value is <tt>null</tt> when there are no more results to return. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:maxResults:DescribeRepositories'</a>,
--   <a>describeRepositories_maxResults</a> - The maximum number of
--   repository results returned by <tt>DescribeRepositories</tt> in
--   paginated output. When this parameter is used,
--   <tt>DescribeRepositories</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>DescribeRepositories</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRepositories</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
newDescribeRepositories :: DescribeRepositories

-- | The AWS account ID associated with the registry that contains the
--   repositories to be described. If you do not specify a registry, the
--   default public registry is assumed.
describeRepositories_registryId :: Lens' DescribeRepositories (Maybe Text)

-- | A list of repositories to describe. If this parameter is omitted, then
--   all repositories in a registry are described.
describeRepositories_repositoryNames :: Lens' DescribeRepositories (Maybe (NonEmpty Text))

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeRepositories</tt> request where <tt>maxResults</tt> was
--   used and the results exceeded the value of that parameter. Pagination
--   continues from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   repositories with <tt>repositoryNames</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
describeRepositories_nextToken :: Lens' DescribeRepositories (Maybe Text)

-- | The maximum number of repository results returned by
--   <tt>DescribeRepositories</tt> in paginated output. When this parameter
--   is used, <tt>DescribeRepositories</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeRepositories</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRepositories</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
describeRepositories_maxResults :: Lens' DescribeRepositories (Maybe Natural)

-- | <i>See:</i> <a>newDescribeRepositoriesResponse</a> smart constructor.
data DescribeRepositoriesResponse
DescribeRepositoriesResponse' :: Maybe [Repository] -> Maybe Text -> Int -> DescribeRepositoriesResponse

-- | A list of repository objects corresponding to valid repositories.
[$sel:repositories:DescribeRepositoriesResponse'] :: DescribeRepositoriesResponse -> Maybe [Repository]

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeRepositories</tt> request. When the results of a
--   <tt>DescribeRepositories</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
[$sel:nextToken:DescribeRepositoriesResponse'] :: DescribeRepositoriesResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DescribeRepositoriesResponse'] :: DescribeRepositoriesResponse -> Int

-- | Create a value of <a>DescribeRepositoriesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repositories:DescribeRepositoriesResponse'</a>,
--   <a>describeRepositoriesResponse_repositories</a> - A list of
--   repository objects corresponding to valid repositories.
--   
--   <a>$sel:nextToken:DescribeRepositories'</a>,
--   <a>describeRepositoriesResponse_nextToken</a> - The <tt>nextToken</tt>
--   value to include in a future <tt>DescribeRepositories</tt> request.
--   When the results of a <tt>DescribeRepositories</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:httpStatus:DescribeRepositoriesResponse'</a>,
--   <a>describeRepositoriesResponse_httpStatus</a> - The response's http
--   status code.
newDescribeRepositoriesResponse :: Int -> DescribeRepositoriesResponse

-- | A list of repository objects corresponding to valid repositories.
describeRepositoriesResponse_repositories :: Lens' DescribeRepositoriesResponse (Maybe [Repository])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeRepositories</tt> request. When the results of a
--   <tt>DescribeRepositories</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
describeRepositoriesResponse_nextToken :: Lens' DescribeRepositoriesResponse (Maybe Text)

-- | The response's http status code.
describeRepositoriesResponse_httpStatus :: Lens' DescribeRepositoriesResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.DescribeRepositories.DescribeRepositories
instance GHC.Show.Show Amazonka.ECRPublic.DescribeRepositories.DescribeRepositories
instance GHC.Read.Read Amazonka.ECRPublic.DescribeRepositories.DescribeRepositories
instance GHC.Classes.Eq Amazonka.ECRPublic.DescribeRepositories.DescribeRepositories
instance GHC.Generics.Generic Amazonka.ECRPublic.DescribeRepositories.DescribeRepositoriesResponse
instance GHC.Show.Show Amazonka.ECRPublic.DescribeRepositories.DescribeRepositoriesResponse
instance GHC.Read.Read Amazonka.ECRPublic.DescribeRepositories.DescribeRepositoriesResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.DescribeRepositories.DescribeRepositoriesResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.DescribeRepositories.DescribeRepositories
instance Control.DeepSeq.NFData Amazonka.ECRPublic.DescribeRepositories.DescribeRepositoriesResponse
instance Amazonka.Pager.AWSPager Amazonka.ECRPublic.DescribeRepositories.DescribeRepositories
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.DescribeRepositories.DescribeRepositories
instance Control.DeepSeq.NFData Amazonka.ECRPublic.DescribeRepositories.DescribeRepositories
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.DescribeRepositories.DescribeRepositories
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.DescribeRepositories.DescribeRepositories
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.DescribeRepositories.DescribeRepositories
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.DescribeRepositories.DescribeRepositories


-- | Returns details for a public registry.
--   
--   This operation returns paginated results.
module Amazonka.ECRPublic.DescribeRegistries

-- | <i>See:</i> <a>newDescribeRegistries</a> smart constructor.
data DescribeRegistries
DescribeRegistries' :: Maybe Text -> Maybe Natural -> DescribeRegistries

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeRegistries</tt> request where <tt>maxResults</tt> was used
--   and the results exceeded the value of that parameter. Pagination
--   continues from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:DescribeRegistries'] :: DescribeRegistries -> Maybe Text

-- | The maximum number of repository results returned by
--   <tt>DescribeRegistries</tt> in paginated output. When this parameter
--   is used, <tt>DescribeRegistries</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>DescribeRegistries</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRegistries</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable.
[$sel:maxResults:DescribeRegistries'] :: DescribeRegistries -> Maybe Natural

-- | Create a value of <a>DescribeRegistries</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeRegistries'</a>,
--   <a>describeRegistries_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a previous paginated <tt>DescribeRegistries</tt> request
--   where <tt>maxResults</tt> was used and the results exceeded the value
--   of that parameter. Pagination continues from the end of the previous
--   results that returned the <tt>nextToken</tt> value. This value is
--   <tt>null</tt> when there are no more results to return.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:maxResults:DescribeRegistries'</a>,
--   <a>describeRegistries_maxResults</a> - The maximum number of
--   repository results returned by <tt>DescribeRegistries</tt> in
--   paginated output. When this parameter is used,
--   <tt>DescribeRegistries</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>DescribeRegistries</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRegistries</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable.
newDescribeRegistries :: DescribeRegistries

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeRegistries</tt> request where <tt>maxResults</tt> was used
--   and the results exceeded the value of that parameter. Pagination
--   continues from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
describeRegistries_nextToken :: Lens' DescribeRegistries (Maybe Text)

-- | The maximum number of repository results returned by
--   <tt>DescribeRegistries</tt> in paginated output. When this parameter
--   is used, <tt>DescribeRegistries</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>DescribeRegistries</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRegistries</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable.
describeRegistries_maxResults :: Lens' DescribeRegistries (Maybe Natural)

-- | <i>See:</i> <a>newDescribeRegistriesResponse</a> smart constructor.
data DescribeRegistriesResponse
DescribeRegistriesResponse' :: Maybe Text -> Int -> [Registry] -> DescribeRegistriesResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeRepositories</tt> request. When the results of a
--   <tt>DescribeRepositories</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
[$sel:nextToken:DescribeRegistriesResponse'] :: DescribeRegistriesResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DescribeRegistriesResponse'] :: DescribeRegistriesResponse -> Int

-- | An object containing the details for a public registry.
[$sel:registries:DescribeRegistriesResponse'] :: DescribeRegistriesResponse -> [Registry]

-- | Create a value of <a>DescribeRegistriesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeRegistries'</a>,
--   <a>describeRegistriesResponse_nextToken</a> - The <tt>nextToken</tt>
--   value to include in a future <tt>DescribeRepositories</tt> request.
--   When the results of a <tt>DescribeRepositories</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:httpStatus:DescribeRegistriesResponse'</a>,
--   <a>describeRegistriesResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:registries:DescribeRegistriesResponse'</a>,
--   <a>describeRegistriesResponse_registries</a> - An object containing
--   the details for a public registry.
newDescribeRegistriesResponse :: Int -> DescribeRegistriesResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeRepositories</tt> request. When the results of a
--   <tt>DescribeRepositories</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
describeRegistriesResponse_nextToken :: Lens' DescribeRegistriesResponse (Maybe Text)

-- | The response's http status code.
describeRegistriesResponse_httpStatus :: Lens' DescribeRegistriesResponse Int

-- | An object containing the details for a public registry.
describeRegistriesResponse_registries :: Lens' DescribeRegistriesResponse [Registry]
instance GHC.Generics.Generic Amazonka.ECRPublic.DescribeRegistries.DescribeRegistries
instance GHC.Show.Show Amazonka.ECRPublic.DescribeRegistries.DescribeRegistries
instance GHC.Read.Read Amazonka.ECRPublic.DescribeRegistries.DescribeRegistries
instance GHC.Classes.Eq Amazonka.ECRPublic.DescribeRegistries.DescribeRegistries
instance GHC.Generics.Generic Amazonka.ECRPublic.DescribeRegistries.DescribeRegistriesResponse
instance GHC.Show.Show Amazonka.ECRPublic.DescribeRegistries.DescribeRegistriesResponse
instance GHC.Read.Read Amazonka.ECRPublic.DescribeRegistries.DescribeRegistriesResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.DescribeRegistries.DescribeRegistriesResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.DescribeRegistries.DescribeRegistries
instance Control.DeepSeq.NFData Amazonka.ECRPublic.DescribeRegistries.DescribeRegistriesResponse
instance Amazonka.Pager.AWSPager Amazonka.ECRPublic.DescribeRegistries.DescribeRegistries
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.DescribeRegistries.DescribeRegistries
instance Control.DeepSeq.NFData Amazonka.ECRPublic.DescribeRegistries.DescribeRegistries
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.DescribeRegistries.DescribeRegistries
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.DescribeRegistries.DescribeRegistries
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.DescribeRegistries.DescribeRegistries
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.DescribeRegistries.DescribeRegistries


-- | Returns metadata about the images in a repository in a public
--   registry.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
--   
--   This operation returns paginated results.
module Amazonka.ECRPublic.DescribeImages

-- | <i>See:</i> <a>newDescribeImages</a> smart constructor.
data DescribeImages
DescribeImages' :: Maybe Text -> Maybe (NonEmpty ImageIdentifier) -> Maybe Text -> Maybe Natural -> Text -> DescribeImages

-- | The AWS account ID associated with the public registry that contains
--   the repository in which to describe images. If you do not specify a
--   registry, the default public registry is assumed.
[$sel:registryId:DescribeImages'] :: DescribeImages -> Maybe Text

-- | The list of image IDs for the requested repository.
[$sel:imageIds:DescribeImages'] :: DescribeImages -> Maybe (NonEmpty ImageIdentifier)

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImages</tt> request where <tt>maxResults</tt> was used and
--   the results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
[$sel:nextToken:DescribeImages'] :: DescribeImages -> Maybe Text

-- | The maximum number of repository results returned by
--   <tt>DescribeImages</tt> in paginated output. When this parameter is
--   used, <tt>DescribeImages</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>DescribeImages</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImages</tt> returns up to
--   100 results and a <tt>nextToken</tt> value, if applicable. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
[$sel:maxResults:DescribeImages'] :: DescribeImages -> Maybe Natural

-- | The repository that contains the images to describe.
[$sel:repositoryName:DescribeImages'] :: DescribeImages -> Text

-- | Create a value of <a>DescribeImages</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DescribeImages'</a>,
--   <a>describeImages_registryId</a> - The AWS account ID associated with
--   the public registry that contains the repository in which to describe
--   images. If you do not specify a registry, the default public registry
--   is assumed.
--   
--   <a>$sel:imageIds:DescribeImages'</a>, <a>describeImages_imageIds</a> -
--   The list of image IDs for the requested repository.
--   
--   <a>$sel:nextToken:DescribeImages'</a>, <a>describeImages_nextToken</a>
--   - The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImages</tt> request where <tt>maxResults</tt> was used and
--   the results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
--   
--   <a>$sel:maxResults:DescribeImages'</a>,
--   <a>describeImages_maxResults</a> - The maximum number of repository
--   results returned by <tt>DescribeImages</tt> in paginated output. When
--   this parameter is used, <tt>DescribeImages</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>DescribeImages</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 1000. If this parameter is not used, then
--   <tt>DescribeImages</tt> returns up to 100 results and a
--   <tt>nextToken</tt> value, if applicable. This option cannot be used
--   when you specify images with <tt>imageIds</tt>.
--   
--   <a>$sel:repositoryName:DescribeImages'</a>,
--   <a>describeImages_repositoryName</a> - The repository that contains
--   the images to describe.
newDescribeImages :: Text -> DescribeImages

-- | The AWS account ID associated with the public registry that contains
--   the repository in which to describe images. If you do not specify a
--   registry, the default public registry is assumed.
describeImages_registryId :: Lens' DescribeImages (Maybe Text)

-- | The list of image IDs for the requested repository.
describeImages_imageIds :: Lens' DescribeImages (Maybe (NonEmpty ImageIdentifier))

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImages</tt> request where <tt>maxResults</tt> was used and
--   the results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
describeImages_nextToken :: Lens' DescribeImages (Maybe Text)

-- | The maximum number of repository results returned by
--   <tt>DescribeImages</tt> in paginated output. When this parameter is
--   used, <tt>DescribeImages</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>DescribeImages</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImages</tt> returns up to
--   100 results and a <tt>nextToken</tt> value, if applicable. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
describeImages_maxResults :: Lens' DescribeImages (Maybe Natural)

-- | The repository that contains the images to describe.
describeImages_repositoryName :: Lens' DescribeImages Text

-- | <i>See:</i> <a>newDescribeImagesResponse</a> smart constructor.
data DescribeImagesResponse
DescribeImagesResponse' :: Maybe [ImageDetail] -> Maybe Text -> Int -> DescribeImagesResponse

-- | A list of ImageDetail objects that contain data about the image.
[$sel:imageDetails:DescribeImagesResponse'] :: DescribeImagesResponse -> Maybe [ImageDetail]

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImages</tt> request. When the results of a
--   <tt>DescribeImages</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
[$sel:nextToken:DescribeImagesResponse'] :: DescribeImagesResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DescribeImagesResponse'] :: DescribeImagesResponse -> Int

-- | Create a value of <a>DescribeImagesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDetails:DescribeImagesResponse'</a>,
--   <a>describeImagesResponse_imageDetails</a> - A list of ImageDetail
--   objects that contain data about the image.
--   
--   <a>$sel:nextToken:DescribeImages'</a>,
--   <a>describeImagesResponse_nextToken</a> - The <tt>nextToken</tt> value
--   to include in a future <tt>DescribeImages</tt> request. When the
--   results of a <tt>DescribeImages</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:httpStatus:DescribeImagesResponse'</a>,
--   <a>describeImagesResponse_httpStatus</a> - The response's http status
--   code.
newDescribeImagesResponse :: Int -> DescribeImagesResponse

-- | A list of ImageDetail objects that contain data about the image.
describeImagesResponse_imageDetails :: Lens' DescribeImagesResponse (Maybe [ImageDetail])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImages</tt> request. When the results of a
--   <tt>DescribeImages</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
describeImagesResponse_nextToken :: Lens' DescribeImagesResponse (Maybe Text)

-- | The response's http status code.
describeImagesResponse_httpStatus :: Lens' DescribeImagesResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.DescribeImages.DescribeImages
instance GHC.Show.Show Amazonka.ECRPublic.DescribeImages.DescribeImages
instance GHC.Read.Read Amazonka.ECRPublic.DescribeImages.DescribeImages
instance GHC.Classes.Eq Amazonka.ECRPublic.DescribeImages.DescribeImages
instance GHC.Generics.Generic Amazonka.ECRPublic.DescribeImages.DescribeImagesResponse
instance GHC.Show.Show Amazonka.ECRPublic.DescribeImages.DescribeImagesResponse
instance GHC.Read.Read Amazonka.ECRPublic.DescribeImages.DescribeImagesResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.DescribeImages.DescribeImagesResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.DescribeImages.DescribeImages
instance Control.DeepSeq.NFData Amazonka.ECRPublic.DescribeImages.DescribeImagesResponse
instance Amazonka.Pager.AWSPager Amazonka.ECRPublic.DescribeImages.DescribeImages
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.DescribeImages.DescribeImages
instance Control.DeepSeq.NFData Amazonka.ECRPublic.DescribeImages.DescribeImages
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.DescribeImages.DescribeImages
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.DescribeImages.DescribeImages
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.DescribeImages.DescribeImages
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.DescribeImages.DescribeImages


-- | Returns the image tag details for a repository in a public registry.
--   
--   This operation returns paginated results.
module Amazonka.ECRPublic.DescribeImageTags

-- | <i>See:</i> <a>newDescribeImageTags</a> smart constructor.
data DescribeImageTags
DescribeImageTags' :: Maybe Text -> Maybe Text -> Maybe Natural -> Text -> DescribeImageTags

-- | The AWS account ID associated with the public registry that contains
--   the repository in which to describe images. If you do not specify a
--   registry, the default public registry is assumed.
[$sel:registryId:DescribeImageTags'] :: DescribeImageTags -> Maybe Text

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImageTags</tt> request where <tt>maxResults</tt> was used
--   and the results exceeded the value of that parameter. Pagination
--   continues from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
[$sel:nextToken:DescribeImageTags'] :: DescribeImageTags -> Maybe Text

-- | The maximum number of repository results returned by
--   <tt>DescribeImageTags</tt> in paginated output. When this parameter is
--   used, <tt>DescribeImageTags</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>DescribeImageTags</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImageTags</tt> returns up
--   to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify images with <tt>imageIds</tt>.
[$sel:maxResults:DescribeImageTags'] :: DescribeImageTags -> Maybe Natural

-- | The name of the repository that contains the image tag details to
--   describe.
[$sel:repositoryName:DescribeImageTags'] :: DescribeImageTags -> Text

-- | Create a value of <a>DescribeImageTags</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DescribeImageTags'</a>,
--   <a>describeImageTags_registryId</a> - The AWS account ID associated
--   with the public registry that contains the repository in which to
--   describe images. If you do not specify a registry, the default public
--   registry is assumed.
--   
--   <a>$sel:nextToken:DescribeImageTags'</a>,
--   <a>describeImageTags_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a previous paginated <tt>DescribeImageTags</tt> request
--   where <tt>maxResults</tt> was used and the results exceeded the value
--   of that parameter. Pagination continues from the end of the previous
--   results that returned the <tt>nextToken</tt> value. This value is
--   <tt>null</tt> when there are no more results to return. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
--   
--   <a>$sel:maxResults:DescribeImageTags'</a>,
--   <a>describeImageTags_maxResults</a> - The maximum number of repository
--   results returned by <tt>DescribeImageTags</tt> in paginated output.
--   When this parameter is used, <tt>DescribeImageTags</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeImageTags</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImageTags</tt> returns up
--   to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify images with <tt>imageIds</tt>.
--   
--   <a>$sel:repositoryName:DescribeImageTags'</a>,
--   <a>describeImageTags_repositoryName</a> - The name of the repository
--   that contains the image tag details to describe.
newDescribeImageTags :: Text -> DescribeImageTags

-- | The AWS account ID associated with the public registry that contains
--   the repository in which to describe images. If you do not specify a
--   registry, the default public registry is assumed.
describeImageTags_registryId :: Lens' DescribeImageTags (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImageTags</tt> request where <tt>maxResults</tt> was used
--   and the results exceeded the value of that parameter. Pagination
--   continues from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
describeImageTags_nextToken :: Lens' DescribeImageTags (Maybe Text)

-- | The maximum number of repository results returned by
--   <tt>DescribeImageTags</tt> in paginated output. When this parameter is
--   used, <tt>DescribeImageTags</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>DescribeImageTags</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImageTags</tt> returns up
--   to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify images with <tt>imageIds</tt>.
describeImageTags_maxResults :: Lens' DescribeImageTags (Maybe Natural)

-- | The name of the repository that contains the image tag details to
--   describe.
describeImageTags_repositoryName :: Lens' DescribeImageTags Text

-- | <i>See:</i> <a>newDescribeImageTagsResponse</a> smart constructor.
data DescribeImageTagsResponse
DescribeImageTagsResponse' :: Maybe Text -> Maybe [ImageTagDetail] -> Int -> DescribeImageTagsResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImageTags</tt> request. When the results of a
--   <tt>DescribeImageTags</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
[$sel:nextToken:DescribeImageTagsResponse'] :: DescribeImageTagsResponse -> Maybe Text

-- | The image tag details for the images in the requested repository.
[$sel:imageTagDetails:DescribeImageTagsResponse'] :: DescribeImageTagsResponse -> Maybe [ImageTagDetail]

-- | The response's http status code.
[$sel:httpStatus:DescribeImageTagsResponse'] :: DescribeImageTagsResponse -> Int

-- | Create a value of <a>DescribeImageTagsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeImageTags'</a>,
--   <a>describeImageTagsResponse_nextToken</a> - The <tt>nextToken</tt>
--   value to include in a future <tt>DescribeImageTags</tt> request. When
--   the results of a <tt>DescribeImageTags</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:imageTagDetails:DescribeImageTagsResponse'</a>,
--   <a>describeImageTagsResponse_imageTagDetails</a> - The image tag
--   details for the images in the requested repository.
--   
--   <a>$sel:httpStatus:DescribeImageTagsResponse'</a>,
--   <a>describeImageTagsResponse_httpStatus</a> - The response's http
--   status code.
newDescribeImageTagsResponse :: Int -> DescribeImageTagsResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImageTags</tt> request. When the results of a
--   <tt>DescribeImageTags</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
describeImageTagsResponse_nextToken :: Lens' DescribeImageTagsResponse (Maybe Text)

-- | The image tag details for the images in the requested repository.
describeImageTagsResponse_imageTagDetails :: Lens' DescribeImageTagsResponse (Maybe [ImageTagDetail])

-- | The response's http status code.
describeImageTagsResponse_httpStatus :: Lens' DescribeImageTagsResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.DescribeImageTags.DescribeImageTags
instance GHC.Show.Show Amazonka.ECRPublic.DescribeImageTags.DescribeImageTags
instance GHC.Read.Read Amazonka.ECRPublic.DescribeImageTags.DescribeImageTags
instance GHC.Classes.Eq Amazonka.ECRPublic.DescribeImageTags.DescribeImageTags
instance GHC.Generics.Generic Amazonka.ECRPublic.DescribeImageTags.DescribeImageTagsResponse
instance GHC.Show.Show Amazonka.ECRPublic.DescribeImageTags.DescribeImageTagsResponse
instance GHC.Read.Read Amazonka.ECRPublic.DescribeImageTags.DescribeImageTagsResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.DescribeImageTags.DescribeImageTagsResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.DescribeImageTags.DescribeImageTags
instance Control.DeepSeq.NFData Amazonka.ECRPublic.DescribeImageTags.DescribeImageTagsResponse
instance Amazonka.Pager.AWSPager Amazonka.ECRPublic.DescribeImageTags.DescribeImageTags
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.DescribeImageTags.DescribeImageTags
instance Control.DeepSeq.NFData Amazonka.ECRPublic.DescribeImageTags.DescribeImageTags
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.DescribeImageTags.DescribeImageTags
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.DescribeImageTags.DescribeImageTags
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.DescribeImageTags.DescribeImageTags
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.DescribeImageTags.DescribeImageTags


-- | Deletes the repository policy associated with the specified
--   repository.
module Amazonka.ECRPublic.DeleteRepositoryPolicy

-- | <i>See:</i> <a>newDeleteRepositoryPolicy</a> smart constructor.
data DeleteRepositoryPolicy
DeleteRepositoryPolicy' :: Maybe Text -> Text -> DeleteRepositoryPolicy

-- | The AWS account ID associated with the public registry that contains
--   the repository policy to delete. If you do not specify a registry, the
--   default public registry is assumed.
[$sel:registryId:DeleteRepositoryPolicy'] :: DeleteRepositoryPolicy -> Maybe Text

-- | The name of the repository that is associated with the repository
--   policy to delete.
[$sel:repositoryName:DeleteRepositoryPolicy'] :: DeleteRepositoryPolicy -> Text

-- | Create a value of <a>DeleteRepositoryPolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicy_registryId</a> - The AWS account ID
--   associated with the public registry that contains the repository
--   policy to delete. If you do not specify a registry, the default public
--   registry is assumed.
--   
--   <a>$sel:repositoryName:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicy_repositoryName</a> - The name of the
--   repository that is associated with the repository policy to delete.
newDeleteRepositoryPolicy :: Text -> DeleteRepositoryPolicy

-- | The AWS account ID associated with the public registry that contains
--   the repository policy to delete. If you do not specify a registry, the
--   default public registry is assumed.
deleteRepositoryPolicy_registryId :: Lens' DeleteRepositoryPolicy (Maybe Text)

-- | The name of the repository that is associated with the repository
--   policy to delete.
deleteRepositoryPolicy_repositoryName :: Lens' DeleteRepositoryPolicy Text

-- | <i>See:</i> <a>newDeleteRepositoryPolicyResponse</a> smart
--   constructor.
data DeleteRepositoryPolicyResponse
DeleteRepositoryPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> DeleteRepositoryPolicyResponse

-- | The registry ID associated with the request.
[$sel:registryId:DeleteRepositoryPolicyResponse'] :: DeleteRepositoryPolicyResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:DeleteRepositoryPolicyResponse'] :: DeleteRepositoryPolicyResponse -> Maybe Text

-- | The JSON repository policy that was deleted from the repository.
[$sel:policyText:DeleteRepositoryPolicyResponse'] :: DeleteRepositoryPolicyResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DeleteRepositoryPolicyResponse'] :: DeleteRepositoryPolicyResponse -> Int

-- | Create a value of <a>DeleteRepositoryPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:policyText:DeleteRepositoryPolicyResponse'</a>,
--   <a>deleteRepositoryPolicyResponse_policyText</a> - The JSON repository
--   policy that was deleted from the repository.
--   
--   <a>$sel:httpStatus:DeleteRepositoryPolicyResponse'</a>,
--   <a>deleteRepositoryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteRepositoryPolicyResponse :: Int -> DeleteRepositoryPolicyResponse

-- | The registry ID associated with the request.
deleteRepositoryPolicyResponse_registryId :: Lens' DeleteRepositoryPolicyResponse (Maybe Text)

-- | The repository name associated with the request.
deleteRepositoryPolicyResponse_repositoryName :: Lens' DeleteRepositoryPolicyResponse (Maybe Text)

-- | The JSON repository policy that was deleted from the repository.
deleteRepositoryPolicyResponse_policyText :: Lens' DeleteRepositoryPolicyResponse (Maybe Text)

-- | The response's http status code.
deleteRepositoryPolicyResponse_httpStatus :: Lens' DeleteRepositoryPolicyResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance GHC.Show.Show Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance GHC.Read.Read Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance GHC.Classes.Eq Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance GHC.Generics.Generic Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicyResponse
instance GHC.Show.Show Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicyResponse
instance GHC.Read.Read Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicyResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance Control.DeepSeq.NFData Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance Control.DeepSeq.NFData Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.DeleteRepositoryPolicy.DeleteRepositoryPolicy


-- | Deletes a repository in a public registry. If the repository contains
--   images, you must either delete all images in the repository or use the
--   <tt>force</tt> option which deletes all images on your behalf before
--   deleting the repository.
module Amazonka.ECRPublic.DeleteRepository

-- | <i>See:</i> <a>newDeleteRepository</a> smart constructor.
data DeleteRepository
DeleteRepository' :: Maybe Bool -> Maybe Text -> Text -> DeleteRepository

-- | If a repository contains images, forces the deletion.
[$sel:force:DeleteRepository'] :: DeleteRepository -> Maybe Bool

-- | The AWS account ID associated with the public registry that contains
--   the repository to delete. If you do not specify a registry, the
--   default public registry is assumed.
[$sel:registryId:DeleteRepository'] :: DeleteRepository -> Maybe Text

-- | The name of the repository to delete.
[$sel:repositoryName:DeleteRepository'] :: DeleteRepository -> Text

-- | Create a value of <a>DeleteRepository</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:force:DeleteRepository'</a>, <a>deleteRepository_force</a> -
--   If a repository contains images, forces the deletion.
--   
--   <a>$sel:registryId:DeleteRepository'</a>,
--   <a>deleteRepository_registryId</a> - The AWS account ID associated
--   with the public registry that contains the repository to delete. If
--   you do not specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:DeleteRepository'</a>,
--   <a>deleteRepository_repositoryName</a> - The name of the repository to
--   delete.
newDeleteRepository :: Text -> DeleteRepository

-- | If a repository contains images, forces the deletion.
deleteRepository_force :: Lens' DeleteRepository (Maybe Bool)

-- | The AWS account ID associated with the public registry that contains
--   the repository to delete. If you do not specify a registry, the
--   default public registry is assumed.
deleteRepository_registryId :: Lens' DeleteRepository (Maybe Text)

-- | The name of the repository to delete.
deleteRepository_repositoryName :: Lens' DeleteRepository Text

-- | <i>See:</i> <a>newDeleteRepositoryResponse</a> smart constructor.
data DeleteRepositoryResponse
DeleteRepositoryResponse' :: Maybe Repository -> Int -> DeleteRepositoryResponse

-- | The repository that was deleted.
[$sel:repository:DeleteRepositoryResponse'] :: DeleteRepositoryResponse -> Maybe Repository

-- | The response's http status code.
[$sel:httpStatus:DeleteRepositoryResponse'] :: DeleteRepositoryResponse -> Int

-- | Create a value of <a>DeleteRepositoryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repository:DeleteRepositoryResponse'</a>,
--   <a>deleteRepositoryResponse_repository</a> - The repository that was
--   deleted.
--   
--   <a>$sel:httpStatus:DeleteRepositoryResponse'</a>,
--   <a>deleteRepositoryResponse_httpStatus</a> - The response's http
--   status code.
newDeleteRepositoryResponse :: Int -> DeleteRepositoryResponse

-- | The repository that was deleted.
deleteRepositoryResponse_repository :: Lens' DeleteRepositoryResponse (Maybe Repository)

-- | The response's http status code.
deleteRepositoryResponse_httpStatus :: Lens' DeleteRepositoryResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.DeleteRepository.DeleteRepository
instance GHC.Show.Show Amazonka.ECRPublic.DeleteRepository.DeleteRepository
instance GHC.Read.Read Amazonka.ECRPublic.DeleteRepository.DeleteRepository
instance GHC.Classes.Eq Amazonka.ECRPublic.DeleteRepository.DeleteRepository
instance GHC.Generics.Generic Amazonka.ECRPublic.DeleteRepository.DeleteRepositoryResponse
instance GHC.Show.Show Amazonka.ECRPublic.DeleteRepository.DeleteRepositoryResponse
instance GHC.Read.Read Amazonka.ECRPublic.DeleteRepository.DeleteRepositoryResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.DeleteRepository.DeleteRepositoryResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.DeleteRepository.DeleteRepository
instance Control.DeepSeq.NFData Amazonka.ECRPublic.DeleteRepository.DeleteRepositoryResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.DeleteRepository.DeleteRepository
instance Control.DeepSeq.NFData Amazonka.ECRPublic.DeleteRepository.DeleteRepository
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.DeleteRepository.DeleteRepository
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.DeleteRepository.DeleteRepository
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.DeleteRepository.DeleteRepository
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.DeleteRepository.DeleteRepository


-- | Creates a repository in a public registry. For more information, see
--   <a>Amazon ECR repositories</a> in the <i>Amazon Elastic Container
--   Registry User Guide</i>.
module Amazonka.ECRPublic.CreateRepository

-- | <i>See:</i> <a>newCreateRepository</a> smart constructor.
data CreateRepository
CreateRepository' :: Maybe RepositoryCatalogDataInput -> Maybe [Tag] -> Text -> CreateRepository

-- | The details about the repository that are publicly visible in the
--   Amazon ECR Public Gallery.
[$sel:catalogData:CreateRepository'] :: CreateRepository -> Maybe RepositoryCatalogDataInput

-- | The metadata that you apply to the repository to help you categorize
--   and organize them. Each tag consists of a key and an optional value,
--   both of which you define. Tag keys can have a maximum character length
--   of 128 characters, and tag values can have a maximum length of 256
--   characters.
[$sel:tags:CreateRepository'] :: CreateRepository -> Maybe [Tag]

-- | The name to use for the repository. This appears publicly in the
--   Amazon ECR Public Gallery. The repository name may be specified on its
--   own (such as <tt>nginx-web-app</tt>) or it can be prepended with a
--   namespace to group the repository into a category (such as
--   <tt>project-a/nginx-web-app</tt>).
[$sel:repositoryName:CreateRepository'] :: CreateRepository -> Text

-- | Create a value of <a>CreateRepository</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogData:CreateRepository'</a>,
--   <a>createRepository_catalogData</a> - The details about the repository
--   that are publicly visible in the Amazon ECR Public Gallery.
--   
--   <a>$sel:tags:CreateRepository'</a>, <a>createRepository_tags</a> - The
--   metadata that you apply to the repository to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. Tag keys can have a maximum character length of
--   128 characters, and tag values can have a maximum length of 256
--   characters.
--   
--   <a>$sel:repositoryName:CreateRepository'</a>,
--   <a>createRepository_repositoryName</a> - The name to use for the
--   repository. This appears publicly in the Amazon ECR Public Gallery.
--   The repository name may be specified on its own (such as
--   <tt>nginx-web-app</tt>) or it can be prepended with a namespace to
--   group the repository into a category (such as
--   <tt>project-a/nginx-web-app</tt>).
newCreateRepository :: Text -> CreateRepository

-- | The details about the repository that are publicly visible in the
--   Amazon ECR Public Gallery.
createRepository_catalogData :: Lens' CreateRepository (Maybe RepositoryCatalogDataInput)

-- | The metadata that you apply to the repository to help you categorize
--   and organize them. Each tag consists of a key and an optional value,
--   both of which you define. Tag keys can have a maximum character length
--   of 128 characters, and tag values can have a maximum length of 256
--   characters.
createRepository_tags :: Lens' CreateRepository (Maybe [Tag])

-- | The name to use for the repository. This appears publicly in the
--   Amazon ECR Public Gallery. The repository name may be specified on its
--   own (such as <tt>nginx-web-app</tt>) or it can be prepended with a
--   namespace to group the repository into a category (such as
--   <tt>project-a/nginx-web-app</tt>).
createRepository_repositoryName :: Lens' CreateRepository Text

-- | <i>See:</i> <a>newCreateRepositoryResponse</a> smart constructor.
data CreateRepositoryResponse
CreateRepositoryResponse' :: Maybe Repository -> Maybe RepositoryCatalogData -> Int -> CreateRepositoryResponse

-- | The repository that was created.
[$sel:repository:CreateRepositoryResponse'] :: CreateRepositoryResponse -> Maybe Repository
[$sel:catalogData:CreateRepositoryResponse'] :: CreateRepositoryResponse -> Maybe RepositoryCatalogData

-- | The response's http status code.
[$sel:httpStatus:CreateRepositoryResponse'] :: CreateRepositoryResponse -> Int

-- | Create a value of <a>CreateRepositoryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repository:CreateRepositoryResponse'</a>,
--   <a>createRepositoryResponse_repository</a> - The repository that was
--   created.
--   
--   <a>$sel:catalogData:CreateRepository'</a>,
--   <a>createRepositoryResponse_catalogData</a> - Undocumented member.
--   
--   <a>$sel:httpStatus:CreateRepositoryResponse'</a>,
--   <a>createRepositoryResponse_httpStatus</a> - The response's http
--   status code.
newCreateRepositoryResponse :: Int -> CreateRepositoryResponse

-- | The repository that was created.
createRepositoryResponse_repository :: Lens' CreateRepositoryResponse (Maybe Repository)

-- | Undocumented member.
createRepositoryResponse_catalogData :: Lens' CreateRepositoryResponse (Maybe RepositoryCatalogData)

-- | The response's http status code.
createRepositoryResponse_httpStatus :: Lens' CreateRepositoryResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.CreateRepository.CreateRepository
instance GHC.Show.Show Amazonka.ECRPublic.CreateRepository.CreateRepository
instance GHC.Read.Read Amazonka.ECRPublic.CreateRepository.CreateRepository
instance GHC.Classes.Eq Amazonka.ECRPublic.CreateRepository.CreateRepository
instance GHC.Generics.Generic Amazonka.ECRPublic.CreateRepository.CreateRepositoryResponse
instance GHC.Show.Show Amazonka.ECRPublic.CreateRepository.CreateRepositoryResponse
instance GHC.Read.Read Amazonka.ECRPublic.CreateRepository.CreateRepositoryResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.CreateRepository.CreateRepositoryResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.CreateRepository.CreateRepository
instance Control.DeepSeq.NFData Amazonka.ECRPublic.CreateRepository.CreateRepositoryResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.CreateRepository.CreateRepository
instance Control.DeepSeq.NFData Amazonka.ECRPublic.CreateRepository.CreateRepository
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.CreateRepository.CreateRepository
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.CreateRepository.CreateRepository
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.CreateRepository.CreateRepository
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.CreateRepository.CreateRepository


-- | Informs Amazon ECR that the image layer upload has completed for a
--   specified public registry, repository name, and upload ID. You can
--   optionally provide a <tt>sha256</tt> digest of the image layer for
--   data validation purposes.
--   
--   When an image is pushed, the CompleteLayerUpload API is called once
--   per each new image layer to verify that the upload has completed.
--   
--   This operation is used by the Amazon ECR proxy and is not generally
--   used by customers for pulling and pushing images. In most cases, you
--   should use the <tt>docker</tt> CLI to pull, tag, and push images.
module Amazonka.ECRPublic.CompleteLayerUpload

-- | <i>See:</i> <a>newCompleteLayerUpload</a> smart constructor.
data CompleteLayerUpload
CompleteLayerUpload' :: Maybe Text -> Text -> Text -> NonEmpty Text -> CompleteLayerUpload

-- | The AWS account ID associated with the registry to which to upload
--   layers. If you do not specify a registry, the default public registry
--   is assumed.
[$sel:registryId:CompleteLayerUpload'] :: CompleteLayerUpload -> Maybe Text

-- | The name of the repository in a public registry to associate with the
--   image layer.
[$sel:repositoryName:CompleteLayerUpload'] :: CompleteLayerUpload -> Text

-- | The upload ID from a previous InitiateLayerUpload operation to
--   associate with the image layer.
[$sel:uploadId:CompleteLayerUpload'] :: CompleteLayerUpload -> Text

-- | The <tt>sha256</tt> digest of the image layer.
[$sel:layerDigests:CompleteLayerUpload'] :: CompleteLayerUpload -> NonEmpty Text

-- | Create a value of <a>CompleteLayerUpload</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_registryId</a> - The AWS account ID associated
--   with the registry to which to upload layers. If you do not specify a
--   registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_repositoryName</a> - The name of the repository
--   in a public registry to associate with the image layer.
--   
--   <a>$sel:uploadId:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_uploadId</a> - The upload ID from a previous
--   InitiateLayerUpload operation to associate with the image layer.
--   
--   <a>$sel:layerDigests:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_layerDigests</a> - The <tt>sha256</tt> digest
--   of the image layer.
newCompleteLayerUpload :: Text -> Text -> NonEmpty Text -> CompleteLayerUpload

-- | The AWS account ID associated with the registry to which to upload
--   layers. If you do not specify a registry, the default public registry
--   is assumed.
completeLayerUpload_registryId :: Lens' CompleteLayerUpload (Maybe Text)

-- | The name of the repository in a public registry to associate with the
--   image layer.
completeLayerUpload_repositoryName :: Lens' CompleteLayerUpload Text

-- | The upload ID from a previous InitiateLayerUpload operation to
--   associate with the image layer.
completeLayerUpload_uploadId :: Lens' CompleteLayerUpload Text

-- | The <tt>sha256</tt> digest of the image layer.
completeLayerUpload_layerDigests :: Lens' CompleteLayerUpload (NonEmpty Text)

-- | <i>See:</i> <a>newCompleteLayerUploadResponse</a> smart constructor.
data CompleteLayerUploadResponse
CompleteLayerUploadResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> CompleteLayerUploadResponse

-- | The public registry ID associated with the request.
[$sel:registryId:CompleteLayerUploadResponse'] :: CompleteLayerUploadResponse -> Maybe Text

-- | The <tt>sha256</tt> digest of the image layer.
[$sel:layerDigest:CompleteLayerUploadResponse'] :: CompleteLayerUploadResponse -> Maybe Text

-- | The repository name associated with the request.
[$sel:repositoryName:CompleteLayerUploadResponse'] :: CompleteLayerUploadResponse -> Maybe Text

-- | The upload ID associated with the layer.
[$sel:uploadId:CompleteLayerUploadResponse'] :: CompleteLayerUploadResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CompleteLayerUploadResponse'] :: CompleteLayerUploadResponse -> Int

-- | Create a value of <a>CompleteLayerUploadResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:CompleteLayerUpload'</a>,
--   <a>completeLayerUploadResponse_registryId</a> - The public registry ID
--   associated with the request.
--   
--   <a>$sel:layerDigest:CompleteLayerUploadResponse'</a>,
--   <a>completeLayerUploadResponse_layerDigest</a> - The <tt>sha256</tt>
--   digest of the image layer.
--   
--   <a>$sel:repositoryName:CompleteLayerUpload'</a>,
--   <a>completeLayerUploadResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:uploadId:CompleteLayerUpload'</a>,
--   <a>completeLayerUploadResponse_uploadId</a> - The upload ID associated
--   with the layer.
--   
--   <a>$sel:httpStatus:CompleteLayerUploadResponse'</a>,
--   <a>completeLayerUploadResponse_httpStatus</a> - The response's http
--   status code.
newCompleteLayerUploadResponse :: Int -> CompleteLayerUploadResponse

-- | The public registry ID associated with the request.
completeLayerUploadResponse_registryId :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The <tt>sha256</tt> digest of the image layer.
completeLayerUploadResponse_layerDigest :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The repository name associated with the request.
completeLayerUploadResponse_repositoryName :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The upload ID associated with the layer.
completeLayerUploadResponse_uploadId :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The response's http status code.
completeLayerUploadResponse_httpStatus :: Lens' CompleteLayerUploadResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUpload
instance GHC.Show.Show Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUpload
instance GHC.Read.Read Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUpload
instance GHC.Classes.Eq Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUpload
instance GHC.Generics.Generic Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUploadResponse
instance GHC.Show.Show Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUploadResponse
instance GHC.Read.Read Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUploadResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUploadResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUpload
instance Control.DeepSeq.NFData Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUploadResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUpload
instance Control.DeepSeq.NFData Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUpload
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUpload
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUpload
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUpload
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.CompleteLayerUpload.CompleteLayerUpload


-- | Deletes a list of specified images within a repository in a public
--   registry. Images are specified with either an <tt>imageTag</tt> or
--   <tt>imageDigest</tt>.
--   
--   You can remove a tag from an image by specifying the image's tag in
--   your request. When you remove the last tag from an image, the image is
--   deleted from your repository.
--   
--   You can completely delete an image (and all of its tags) by specifying
--   the image's digest in your request.
module Amazonka.ECRPublic.BatchDeleteImage

-- | <i>See:</i> <a>newBatchDeleteImage</a> smart constructor.
data BatchDeleteImage
BatchDeleteImage' :: Maybe Text -> Text -> NonEmpty ImageIdentifier -> BatchDeleteImage

-- | The AWS account ID associated with the registry that contains the
--   image to delete. If you do not specify a registry, the default public
--   registry is assumed.
[$sel:registryId:BatchDeleteImage'] :: BatchDeleteImage -> Maybe Text

-- | The repository in a public registry that contains the image to delete.
[$sel:repositoryName:BatchDeleteImage'] :: BatchDeleteImage -> Text

-- | A list of image ID references that correspond to images to delete. The
--   format of the <tt>imageIds</tt> reference is <tt>imageTag=tag</tt> or
--   <tt>imageDigest=digest</tt>.
[$sel:imageIds:BatchDeleteImage'] :: BatchDeleteImage -> NonEmpty ImageIdentifier

-- | Create a value of <a>BatchDeleteImage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:BatchDeleteImage'</a>,
--   <a>batchDeleteImage_registryId</a> - The AWS account ID associated
--   with the registry that contains the image to delete. If you do not
--   specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:BatchDeleteImage'</a>,
--   <a>batchDeleteImage_repositoryName</a> - The repository in a public
--   registry that contains the image to delete.
--   
--   <a>$sel:imageIds:BatchDeleteImage'</a>,
--   <a>batchDeleteImage_imageIds</a> - A list of image ID references that
--   correspond to images to delete. The format of the <tt>imageIds</tt>
--   reference is <tt>imageTag=tag</tt> or <tt>imageDigest=digest</tt>.
newBatchDeleteImage :: Text -> NonEmpty ImageIdentifier -> BatchDeleteImage

-- | The AWS account ID associated with the registry that contains the
--   image to delete. If you do not specify a registry, the default public
--   registry is assumed.
batchDeleteImage_registryId :: Lens' BatchDeleteImage (Maybe Text)

-- | The repository in a public registry that contains the image to delete.
batchDeleteImage_repositoryName :: Lens' BatchDeleteImage Text

-- | A list of image ID references that correspond to images to delete. The
--   format of the <tt>imageIds</tt> reference is <tt>imageTag=tag</tt> or
--   <tt>imageDigest=digest</tt>.
batchDeleteImage_imageIds :: Lens' BatchDeleteImage (NonEmpty ImageIdentifier)

-- | <i>See:</i> <a>newBatchDeleteImageResponse</a> smart constructor.
data BatchDeleteImageResponse
BatchDeleteImageResponse' :: Maybe [ImageFailure] -> Maybe (NonEmpty ImageIdentifier) -> Int -> BatchDeleteImageResponse

-- | Any failures associated with the call.
[$sel:failures:BatchDeleteImageResponse'] :: BatchDeleteImageResponse -> Maybe [ImageFailure]

-- | The image IDs of the deleted images.
[$sel:imageIds:BatchDeleteImageResponse'] :: BatchDeleteImageResponse -> Maybe (NonEmpty ImageIdentifier)

-- | The response's http status code.
[$sel:httpStatus:BatchDeleteImageResponse'] :: BatchDeleteImageResponse -> Int

-- | Create a value of <a>BatchDeleteImageResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:BatchDeleteImageResponse'</a>,
--   <a>batchDeleteImageResponse_failures</a> - Any failures associated
--   with the call.
--   
--   <a>$sel:imageIds:BatchDeleteImage'</a>,
--   <a>batchDeleteImageResponse_imageIds</a> - The image IDs of the
--   deleted images.
--   
--   <a>$sel:httpStatus:BatchDeleteImageResponse'</a>,
--   <a>batchDeleteImageResponse_httpStatus</a> - The response's http
--   status code.
newBatchDeleteImageResponse :: Int -> BatchDeleteImageResponse

-- | Any failures associated with the call.
batchDeleteImageResponse_failures :: Lens' BatchDeleteImageResponse (Maybe [ImageFailure])

-- | The image IDs of the deleted images.
batchDeleteImageResponse_imageIds :: Lens' BatchDeleteImageResponse (Maybe (NonEmpty ImageIdentifier))

-- | The response's http status code.
batchDeleteImageResponse_httpStatus :: Lens' BatchDeleteImageResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImage
instance GHC.Show.Show Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImage
instance GHC.Read.Read Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImage
instance GHC.Classes.Eq Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImage
instance GHC.Generics.Generic Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImageResponse
instance GHC.Show.Show Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImageResponse
instance GHC.Read.Read Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImageResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImageResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImage
instance Control.DeepSeq.NFData Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImageResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImage
instance Control.DeepSeq.NFData Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImage
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImage
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImage
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImage
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.BatchDeleteImage.BatchDeleteImage


-- | Checks the availability of one or more image layers within a
--   repository in a public registry. When an image is pushed to a
--   repository, each image layer is checked to verify if it has been
--   uploaded before. If it has been uploaded, then the image layer is
--   skipped.
--   
--   This operation is used by the Amazon ECR proxy and is not generally
--   used by customers for pulling and pushing images. In most cases, you
--   should use the <tt>docker</tt> CLI to pull, tag, and push images.
module Amazonka.ECRPublic.BatchCheckLayerAvailability

-- | <i>See:</i> <a>newBatchCheckLayerAvailability</a> smart constructor.
data BatchCheckLayerAvailability
BatchCheckLayerAvailability' :: Maybe Text -> Text -> NonEmpty Text -> BatchCheckLayerAvailability

-- | The AWS account ID associated with the public registry that contains
--   the image layers to check. If you do not specify a registry, the
--   default public registry is assumed.
[$sel:registryId:BatchCheckLayerAvailability'] :: BatchCheckLayerAvailability -> Maybe Text

-- | The name of the repository that is associated with the image layers to
--   check.
[$sel:repositoryName:BatchCheckLayerAvailability'] :: BatchCheckLayerAvailability -> Text

-- | The digests of the image layers to check.
[$sel:layerDigests:BatchCheckLayerAvailability'] :: BatchCheckLayerAvailability -> NonEmpty Text

-- | Create a value of <a>BatchCheckLayerAvailability</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:BatchCheckLayerAvailability'</a>,
--   <a>batchCheckLayerAvailability_registryId</a> - The AWS account ID
--   associated with the public registry that contains the image layers to
--   check. If you do not specify a registry, the default public registry
--   is assumed.
--   
--   <a>$sel:repositoryName:BatchCheckLayerAvailability'</a>,
--   <a>batchCheckLayerAvailability_repositoryName</a> - The name of the
--   repository that is associated with the image layers to check.
--   
--   <a>$sel:layerDigests:BatchCheckLayerAvailability'</a>,
--   <a>batchCheckLayerAvailability_layerDigests</a> - The digests of the
--   image layers to check.
newBatchCheckLayerAvailability :: Text -> NonEmpty Text -> BatchCheckLayerAvailability

-- | The AWS account ID associated with the public registry that contains
--   the image layers to check. If you do not specify a registry, the
--   default public registry is assumed.
batchCheckLayerAvailability_registryId :: Lens' BatchCheckLayerAvailability (Maybe Text)

-- | The name of the repository that is associated with the image layers to
--   check.
batchCheckLayerAvailability_repositoryName :: Lens' BatchCheckLayerAvailability Text

-- | The digests of the image layers to check.
batchCheckLayerAvailability_layerDigests :: Lens' BatchCheckLayerAvailability (NonEmpty Text)

-- | <i>See:</i> <a>newBatchCheckLayerAvailabilityResponse</a> smart
--   constructor.
data BatchCheckLayerAvailabilityResponse
BatchCheckLayerAvailabilityResponse' :: Maybe [LayerFailure] -> Maybe [Layer] -> Int -> BatchCheckLayerAvailabilityResponse

-- | Any failures associated with the call.
[$sel:failures:BatchCheckLayerAvailabilityResponse'] :: BatchCheckLayerAvailabilityResponse -> Maybe [LayerFailure]

-- | A list of image layer objects corresponding to the image layer
--   references in the request.
[$sel:layers:BatchCheckLayerAvailabilityResponse'] :: BatchCheckLayerAvailabilityResponse -> Maybe [Layer]

-- | The response's http status code.
[$sel:httpStatus:BatchCheckLayerAvailabilityResponse'] :: BatchCheckLayerAvailabilityResponse -> Int

-- | Create a value of <a>BatchCheckLayerAvailabilityResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:BatchCheckLayerAvailabilityResponse'</a>,
--   <a>batchCheckLayerAvailabilityResponse_failures</a> - Any failures
--   associated with the call.
--   
--   <a>$sel:layers:BatchCheckLayerAvailabilityResponse'</a>,
--   <a>batchCheckLayerAvailabilityResponse_layers</a> - A list of image
--   layer objects corresponding to the image layer references in the
--   request.
--   
--   <a>$sel:httpStatus:BatchCheckLayerAvailabilityResponse'</a>,
--   <a>batchCheckLayerAvailabilityResponse_httpStatus</a> - The response's
--   http status code.
newBatchCheckLayerAvailabilityResponse :: Int -> BatchCheckLayerAvailabilityResponse

-- | Any failures associated with the call.
batchCheckLayerAvailabilityResponse_failures :: Lens' BatchCheckLayerAvailabilityResponse (Maybe [LayerFailure])

-- | A list of image layer objects corresponding to the image layer
--   references in the request.
batchCheckLayerAvailabilityResponse_layers :: Lens' BatchCheckLayerAvailabilityResponse (Maybe [Layer])

-- | The response's http status code.
batchCheckLayerAvailabilityResponse_httpStatus :: Lens' BatchCheckLayerAvailabilityResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance GHC.Show.Show Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance GHC.Read.Read Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance GHC.Classes.Eq Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance GHC.Generics.Generic Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailabilityResponse
instance GHC.Show.Show Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailabilityResponse
instance GHC.Read.Read Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailabilityResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailabilityResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance Control.DeepSeq.NFData Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailabilityResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance Control.DeepSeq.NFData Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailability
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.BatchCheckLayerAvailability.BatchCheckLayerAvailability


-- | Deletes specified tags from a resource.
module Amazonka.ECRPublic.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | The Amazon Resource Name (ARN) of the resource from which to delete
--   tags. Currently, the supported resource is an Amazon ECR Public
--   repository.
[$sel:resourceArn:UntagResource'] :: UntagResource -> Text

-- | The keys of the tags to be removed.
[$sel:tagKeys:UntagResource'] :: UntagResource -> [Text]

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The Amazon Resource Name (ARN) of
--   the resource from which to delete tags. Currently, the supported
--   resource is an Amazon ECR Public repository.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - The
--   keys of the tags to be removed.
newUntagResource :: Text -> UntagResource

-- | The Amazon Resource Name (ARN) of the resource from which to delete
--   tags. Currently, the supported resource is an Amazon ECR Public
--   repository.
untagResource_resourceArn :: Lens' UntagResource Text

-- | The keys of the tags to be removed.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:UntagResourceResponse'] :: UntagResourceResponse -> Int

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.UntagResource.UntagResource
instance GHC.Show.Show Amazonka.ECRPublic.UntagResource.UntagResource
instance GHC.Read.Read Amazonka.ECRPublic.UntagResource.UntagResource
instance GHC.Classes.Eq Amazonka.ECRPublic.UntagResource.UntagResource
instance GHC.Generics.Generic Amazonka.ECRPublic.UntagResource.UntagResourceResponse
instance GHC.Show.Show Amazonka.ECRPublic.UntagResource.UntagResourceResponse
instance GHC.Read.Read Amazonka.ECRPublic.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.UntagResource.UntagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.ECRPublic.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.ECRPublic.UntagResource.UntagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.UntagResource.UntagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.UntagResource.UntagResource
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.UntagResource.UntagResource
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.UntagResource.UntagResource


-- | Uploads an image layer part to Amazon ECR.
--   
--   When an image is pushed, each new image layer is uploaded in parts.
--   The maximum size of each image layer part can be 20971520 bytes (or
--   about 20MB). The UploadLayerPart API is called once per each new image
--   layer part.
--   
--   This operation is used by the Amazon ECR proxy and is not generally
--   used by customers for pulling and pushing images. In most cases, you
--   should use the <tt>docker</tt> CLI to pull, tag, and push images.
module Amazonka.ECRPublic.UploadLayerPart

-- | <i>See:</i> <a>newUploadLayerPart</a> smart constructor.
data UploadLayerPart
UploadLayerPart' :: Maybe Text -> Text -> Text -> Natural -> Natural -> Base64 -> UploadLayerPart

-- | The AWS account ID associated with the registry to which you are
--   uploading layer parts. If you do not specify a registry, the default
--   public registry is assumed.
[$sel:registryId:UploadLayerPart'] :: UploadLayerPart -> Maybe Text

-- | The name of the repository to which you are uploading layer parts.
[$sel:repositoryName:UploadLayerPart'] :: UploadLayerPart -> Text

-- | The upload ID from a previous InitiateLayerUpload operation to
--   associate with the layer part upload.
[$sel:uploadId:UploadLayerPart'] :: UploadLayerPart -> Text

-- | The position of the first byte of the layer part witin the overall
--   image layer.
[$sel:partFirstByte:UploadLayerPart'] :: UploadLayerPart -> Natural

-- | The position of the last byte of the layer part within the overall
--   image layer.
[$sel:partLastByte:UploadLayerPart'] :: UploadLayerPart -> Natural

-- | The base64-encoded layer part payload.
[$sel:layerPartBlob:UploadLayerPart'] :: UploadLayerPart -> Base64

-- | Create a value of <a>UploadLayerPart</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:UploadLayerPart'</a>,
--   <a>uploadLayerPart_registryId</a> - The AWS account ID associated with
--   the registry to which you are uploading layer parts. If you do not
--   specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:UploadLayerPart'</a>,
--   <a>uploadLayerPart_repositoryName</a> - The name of the repository to
--   which you are uploading layer parts.
--   
--   <a>$sel:uploadId:UploadLayerPart'</a>, <a>uploadLayerPart_uploadId</a>
--   - The upload ID from a previous InitiateLayerUpload operation to
--   associate with the layer part upload.
--   
--   <a>$sel:partFirstByte:UploadLayerPart'</a>,
--   <a>uploadLayerPart_partFirstByte</a> - The position of the first byte
--   of the layer part witin the overall image layer.
--   
--   <a>$sel:partLastByte:UploadLayerPart'</a>,
--   <a>uploadLayerPart_partLastByte</a> - The position of the last byte of
--   the layer part within the overall image layer.
--   
--   <a>$sel:layerPartBlob:UploadLayerPart'</a>,
--   <a>uploadLayerPart_layerPartBlob</a> - The base64-encoded layer part
--   payload.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newUploadLayerPart :: Text -> Text -> Natural -> Natural -> ByteString -> UploadLayerPart

-- | The AWS account ID associated with the registry to which you are
--   uploading layer parts. If you do not specify a registry, the default
--   public registry is assumed.
uploadLayerPart_registryId :: Lens' UploadLayerPart (Maybe Text)

-- | The name of the repository to which you are uploading layer parts.
uploadLayerPart_repositoryName :: Lens' UploadLayerPart Text

-- | The upload ID from a previous InitiateLayerUpload operation to
--   associate with the layer part upload.
uploadLayerPart_uploadId :: Lens' UploadLayerPart Text

-- | The position of the first byte of the layer part witin the overall
--   image layer.
uploadLayerPart_partFirstByte :: Lens' UploadLayerPart Natural

-- | The position of the last byte of the layer part within the overall
--   image layer.
uploadLayerPart_partLastByte :: Lens' UploadLayerPart Natural

-- | The base64-encoded layer part payload.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
uploadLayerPart_layerPartBlob :: Lens' UploadLayerPart ByteString

-- | <i>See:</i> <a>newUploadLayerPartResponse</a> smart constructor.
data UploadLayerPartResponse
UploadLayerPartResponse' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe Text -> Int -> UploadLayerPartResponse

-- | The registry ID associated with the request.
[$sel:registryId:UploadLayerPartResponse'] :: UploadLayerPartResponse -> Maybe Text

-- | The integer value of the last byte received in the request.
[$sel:lastByteReceived:UploadLayerPartResponse'] :: UploadLayerPartResponse -> Maybe Natural

-- | The repository name associated with the request.
[$sel:repositoryName:UploadLayerPartResponse'] :: UploadLayerPartResponse -> Maybe Text

-- | The upload ID associated with the request.
[$sel:uploadId:UploadLayerPartResponse'] :: UploadLayerPartResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:UploadLayerPartResponse'] :: UploadLayerPartResponse -> Int

-- | Create a value of <a>UploadLayerPartResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:UploadLayerPart'</a>,
--   <a>uploadLayerPartResponse_registryId</a> - The registry ID associated
--   with the request.
--   
--   <a>$sel:lastByteReceived:UploadLayerPartResponse'</a>,
--   <a>uploadLayerPartResponse_lastByteReceived</a> - The integer value of
--   the last byte received in the request.
--   
--   <a>$sel:repositoryName:UploadLayerPart'</a>,
--   <a>uploadLayerPartResponse_repositoryName</a> - The repository name
--   associated with the request.
--   
--   <a>$sel:uploadId:UploadLayerPart'</a>,
--   <a>uploadLayerPartResponse_uploadId</a> - The upload ID associated
--   with the request.
--   
--   <a>$sel:httpStatus:UploadLayerPartResponse'</a>,
--   <a>uploadLayerPartResponse_httpStatus</a> - The response's http status
--   code.
newUploadLayerPartResponse :: Int -> UploadLayerPartResponse

-- | The registry ID associated with the request.
uploadLayerPartResponse_registryId :: Lens' UploadLayerPartResponse (Maybe Text)

-- | The integer value of the last byte received in the request.
uploadLayerPartResponse_lastByteReceived :: Lens' UploadLayerPartResponse (Maybe Natural)

-- | The repository name associated with the request.
uploadLayerPartResponse_repositoryName :: Lens' UploadLayerPartResponse (Maybe Text)

-- | The upload ID associated with the request.
uploadLayerPartResponse_uploadId :: Lens' UploadLayerPartResponse (Maybe Text)

-- | The response's http status code.
uploadLayerPartResponse_httpStatus :: Lens' UploadLayerPartResponse Int
instance GHC.Generics.Generic Amazonka.ECRPublic.UploadLayerPart.UploadLayerPart
instance GHC.Show.Show Amazonka.ECRPublic.UploadLayerPart.UploadLayerPart
instance GHC.Read.Read Amazonka.ECRPublic.UploadLayerPart.UploadLayerPart
instance GHC.Classes.Eq Amazonka.ECRPublic.UploadLayerPart.UploadLayerPart
instance GHC.Generics.Generic Amazonka.ECRPublic.UploadLayerPart.UploadLayerPartResponse
instance GHC.Show.Show Amazonka.ECRPublic.UploadLayerPart.UploadLayerPartResponse
instance GHC.Read.Read Amazonka.ECRPublic.UploadLayerPart.UploadLayerPartResponse
instance GHC.Classes.Eq Amazonka.ECRPublic.UploadLayerPart.UploadLayerPartResponse
instance Amazonka.Types.AWSRequest Amazonka.ECRPublic.UploadLayerPart.UploadLayerPart
instance Control.DeepSeq.NFData Amazonka.ECRPublic.UploadLayerPart.UploadLayerPartResponse
instance Data.Hashable.Class.Hashable Amazonka.ECRPublic.UploadLayerPart.UploadLayerPart
instance Control.DeepSeq.NFData Amazonka.ECRPublic.UploadLayerPart.UploadLayerPart
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECRPublic.UploadLayerPart.UploadLayerPart
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECRPublic.UploadLayerPart.UploadLayerPart
instance Amazonka.Data.Path.ToPath Amazonka.ECRPublic.UploadLayerPart.UploadLayerPart
instance Amazonka.Data.Query.ToQuery Amazonka.ECRPublic.UploadLayerPart.UploadLayerPart


module Amazonka.ECRPublic.Lens

-- | The AWS account ID associated with the public registry that contains
--   the repository. If you do not specify a registry, the default public
--   registry is assumed.
getRepositoryPolicy_registryId :: Lens' GetRepositoryPolicy (Maybe Text)

-- | The name of the repository with the policy to retrieve.
getRepositoryPolicy_repositoryName :: Lens' GetRepositoryPolicy Text

-- | The registry ID associated with the request.
getRepositoryPolicyResponse_registryId :: Lens' GetRepositoryPolicyResponse (Maybe Text)

-- | The repository name associated with the request.
getRepositoryPolicyResponse_repositoryName :: Lens' GetRepositoryPolicyResponse (Maybe Text)

-- | The repository policy text associated with the repository. The policy
--   text will be in JSON format.
getRepositoryPolicyResponse_policyText :: Lens' GetRepositoryPolicyResponse (Maybe Text)

-- | The response's http status code.
getRepositoryPolicyResponse_httpStatus :: Lens' GetRepositoryPolicyResponse Int

-- | The display name for a public registry. The display name is shown as
--   the repository author in the Amazon ECR Public Gallery.
--   
--   The registry display name is only publicly visible in the Amazon ECR
--   Public Gallery for verified accounts.
putRegistryCatalogData_displayName :: Lens' PutRegistryCatalogData (Maybe Text)

-- | The response's http status code.
putRegistryCatalogDataResponse_httpStatus :: Lens' PutRegistryCatalogDataResponse Int

-- | The catalog data for the public registry.
putRegistryCatalogDataResponse_registryCatalogData :: Lens' PutRegistryCatalogDataResponse RegistryCatalogData

-- | The AWS account ID associated with the registry that contains the
--   image to delete. If you do not specify a registry, the default public
--   registry is assumed.
batchDeleteImage_registryId :: Lens' BatchDeleteImage (Maybe Text)

-- | The repository in a public registry that contains the image to delete.
batchDeleteImage_repositoryName :: Lens' BatchDeleteImage Text

-- | A list of image ID references that correspond to images to delete. The
--   format of the <tt>imageIds</tt> reference is <tt>imageTag=tag</tt> or
--   <tt>imageDigest=digest</tt>.
batchDeleteImage_imageIds :: Lens' BatchDeleteImage (NonEmpty ImageIdentifier)

-- | Any failures associated with the call.
batchDeleteImageResponse_failures :: Lens' BatchDeleteImageResponse (Maybe [ImageFailure])

-- | The image IDs of the deleted images.
batchDeleteImageResponse_imageIds :: Lens' BatchDeleteImageResponse (Maybe (NonEmpty ImageIdentifier))

-- | The response's http status code.
batchDeleteImageResponse_httpStatus :: Lens' BatchDeleteImageResponse Int

-- | The Amazon Resource Name (ARN) that identifies the resource for which
--   to list the tags. Currently, the supported resource is an Amazon ECR
--   Public repository.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | The tags for the resource.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int

-- | The AWS account ID associated with the public registry that contains
--   the image layers to check. If you do not specify a registry, the
--   default public registry is assumed.
batchCheckLayerAvailability_registryId :: Lens' BatchCheckLayerAvailability (Maybe Text)

-- | The name of the repository that is associated with the image layers to
--   check.
batchCheckLayerAvailability_repositoryName :: Lens' BatchCheckLayerAvailability Text

-- | The digests of the image layers to check.
batchCheckLayerAvailability_layerDigests :: Lens' BatchCheckLayerAvailability (NonEmpty Text)

-- | Any failures associated with the call.
batchCheckLayerAvailabilityResponse_failures :: Lens' BatchCheckLayerAvailabilityResponse (Maybe [LayerFailure])

-- | A list of image layer objects corresponding to the image layer
--   references in the request.
batchCheckLayerAvailabilityResponse_layers :: Lens' BatchCheckLayerAvailabilityResponse (Maybe [Layer])

-- | The response's http status code.
batchCheckLayerAvailabilityResponse_httpStatus :: Lens' BatchCheckLayerAvailabilityResponse Int

-- | The AWS account ID associated with the public registry the repository
--   is in. If you do not specify a registry, the default public registry
--   is assumed.
putRepositoryCatalogData_registryId :: Lens' PutRepositoryCatalogData (Maybe Text)

-- | The name of the repository to create or update the catalog data for.
putRepositoryCatalogData_repositoryName :: Lens' PutRepositoryCatalogData Text

-- | An object containing the catalog data for a repository. This data is
--   publicly visible in the Amazon ECR Public Gallery.
putRepositoryCatalogData_catalogData :: Lens' PutRepositoryCatalogData RepositoryCatalogDataInput

-- | The catalog data for the repository.
putRepositoryCatalogDataResponse_catalogData :: Lens' PutRepositoryCatalogDataResponse (Maybe RepositoryCatalogData)

-- | The response's http status code.
putRepositoryCatalogDataResponse_httpStatus :: Lens' PutRepositoryCatalogDataResponse Int

-- | The AWS account ID associated with the public registry that contains
--   the repository policy to delete. If you do not specify a registry, the
--   default public registry is assumed.
deleteRepositoryPolicy_registryId :: Lens' DeleteRepositoryPolicy (Maybe Text)

-- | The name of the repository that is associated with the repository
--   policy to delete.
deleteRepositoryPolicy_repositoryName :: Lens' DeleteRepositoryPolicy Text

-- | The registry ID associated with the request.
deleteRepositoryPolicyResponse_registryId :: Lens' DeleteRepositoryPolicyResponse (Maybe Text)

-- | The repository name associated with the request.
deleteRepositoryPolicyResponse_repositoryName :: Lens' DeleteRepositoryPolicyResponse (Maybe Text)

-- | The JSON repository policy that was deleted from the repository.
deleteRepositoryPolicyResponse_policyText :: Lens' DeleteRepositoryPolicyResponse (Maybe Text)

-- | The response's http status code.
deleteRepositoryPolicyResponse_httpStatus :: Lens' DeleteRepositoryPolicyResponse Int

-- | The details about the repository that are publicly visible in the
--   Amazon ECR Public Gallery.
createRepository_catalogData :: Lens' CreateRepository (Maybe RepositoryCatalogDataInput)

-- | The metadata that you apply to the repository to help you categorize
--   and organize them. Each tag consists of a key and an optional value,
--   both of which you define. Tag keys can have a maximum character length
--   of 128 characters, and tag values can have a maximum length of 256
--   characters.
createRepository_tags :: Lens' CreateRepository (Maybe [Tag])

-- | The name to use for the repository. This appears publicly in the
--   Amazon ECR Public Gallery. The repository name may be specified on its
--   own (such as <tt>nginx-web-app</tt>) or it can be prepended with a
--   namespace to group the repository into a category (such as
--   <tt>project-a/nginx-web-app</tt>).
createRepository_repositoryName :: Lens' CreateRepository Text

-- | The repository that was created.
createRepositoryResponse_repository :: Lens' CreateRepositoryResponse (Maybe Repository)

-- | Undocumented member.
createRepositoryResponse_catalogData :: Lens' CreateRepositoryResponse (Maybe RepositoryCatalogData)

-- | The response's http status code.
createRepositoryResponse_httpStatus :: Lens' CreateRepositoryResponse Int

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeRegistries</tt> request where <tt>maxResults</tt> was used
--   and the results exceeded the value of that parameter. Pagination
--   continues from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
describeRegistries_nextToken :: Lens' DescribeRegistries (Maybe Text)

-- | The maximum number of repository results returned by
--   <tt>DescribeRegistries</tt> in paginated output. When this parameter
--   is used, <tt>DescribeRegistries</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>DescribeRegistries</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRegistries</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable.
describeRegistries_maxResults :: Lens' DescribeRegistries (Maybe Natural)

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeRepositories</tt> request. When the results of a
--   <tt>DescribeRepositories</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
describeRegistriesResponse_nextToken :: Lens' DescribeRegistriesResponse (Maybe Text)

-- | The response's http status code.
describeRegistriesResponse_httpStatus :: Lens' DescribeRegistriesResponse Int

-- | An object containing the details for a public registry.
describeRegistriesResponse_registries :: Lens' DescribeRegistriesResponse [Registry]

-- | The AWS account ID associated with the registry to which to upload
--   layers. If you do not specify a registry, the default public registry
--   is assumed.
completeLayerUpload_registryId :: Lens' CompleteLayerUpload (Maybe Text)

-- | The name of the repository in a public registry to associate with the
--   image layer.
completeLayerUpload_repositoryName :: Lens' CompleteLayerUpload Text

-- | The upload ID from a previous InitiateLayerUpload operation to
--   associate with the image layer.
completeLayerUpload_uploadId :: Lens' CompleteLayerUpload Text

-- | The <tt>sha256</tt> digest of the image layer.
completeLayerUpload_layerDigests :: Lens' CompleteLayerUpload (NonEmpty Text)

-- | The public registry ID associated with the request.
completeLayerUploadResponse_registryId :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The <tt>sha256</tt> digest of the image layer.
completeLayerUploadResponse_layerDigest :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The repository name associated with the request.
completeLayerUploadResponse_repositoryName :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The upload ID associated with the layer.
completeLayerUploadResponse_uploadId :: Lens' CompleteLayerUploadResponse (Maybe Text)

-- | The response's http status code.
completeLayerUploadResponse_httpStatus :: Lens' CompleteLayerUploadResponse Int

-- | The AWS account ID associated with the registry that contains the
--   repositories to be described. If you do not specify a registry, the
--   default public registry is assumed.
describeRepositories_registryId :: Lens' DescribeRepositories (Maybe Text)

-- | A list of repositories to describe. If this parameter is omitted, then
--   all repositories in a registry are described.
describeRepositories_repositoryNames :: Lens' DescribeRepositories (Maybe (NonEmpty Text))

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeRepositories</tt> request where <tt>maxResults</tt> was
--   used and the results exceeded the value of that parameter. Pagination
--   continues from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   repositories with <tt>repositoryNames</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
describeRepositories_nextToken :: Lens' DescribeRepositories (Maybe Text)

-- | The maximum number of repository results returned by
--   <tt>DescribeRepositories</tt> in paginated output. When this parameter
--   is used, <tt>DescribeRepositories</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeRepositories</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRepositories</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
describeRepositories_maxResults :: Lens' DescribeRepositories (Maybe Natural)

-- | A list of repository objects corresponding to valid repositories.
describeRepositoriesResponse_repositories :: Lens' DescribeRepositoriesResponse (Maybe [Repository])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeRepositories</tt> request. When the results of a
--   <tt>DescribeRepositories</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
describeRepositoriesResponse_nextToken :: Lens' DescribeRepositoriesResponse (Maybe Text)

-- | The response's http status code.
describeRepositoriesResponse_httpStatus :: Lens' DescribeRepositoriesResponse Int

-- | The AWS account ID associated with the registry to which you are
--   uploading layer parts. If you do not specify a registry, the default
--   public registry is assumed.
uploadLayerPart_registryId :: Lens' UploadLayerPart (Maybe Text)

-- | The name of the repository to which you are uploading layer parts.
uploadLayerPart_repositoryName :: Lens' UploadLayerPart Text

-- | The upload ID from a previous InitiateLayerUpload operation to
--   associate with the layer part upload.
uploadLayerPart_uploadId :: Lens' UploadLayerPart Text

-- | The position of the first byte of the layer part witin the overall
--   image layer.
uploadLayerPart_partFirstByte :: Lens' UploadLayerPart Natural

-- | The position of the last byte of the layer part within the overall
--   image layer.
uploadLayerPart_partLastByte :: Lens' UploadLayerPart Natural

-- | The base64-encoded layer part payload.-- -- <i>Note:</i> This
--   <tt>Lens</tt> automatically encodes and decodes Base64 data. -- The
--   underlying isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
uploadLayerPart_layerPartBlob :: Lens' UploadLayerPart ByteString

-- | The registry ID associated with the request.
uploadLayerPartResponse_registryId :: Lens' UploadLayerPartResponse (Maybe Text)

-- | The integer value of the last byte received in the request.
uploadLayerPartResponse_lastByteReceived :: Lens' UploadLayerPartResponse (Maybe Natural)

-- | The repository name associated with the request.
uploadLayerPartResponse_repositoryName :: Lens' UploadLayerPartResponse (Maybe Text)

-- | The upload ID associated with the request.
uploadLayerPartResponse_uploadId :: Lens' UploadLayerPartResponse (Maybe Text)

-- | The response's http status code.
uploadLayerPartResponse_httpStatus :: Lens' UploadLayerPartResponse Int

-- | The AWS account ID associated with the registry that contains the
--   repositories to be described. If you do not specify a registry, the
--   default public registry is assumed.
getRepositoryCatalogData_registryId :: Lens' GetRepositoryCatalogData (Maybe Text)

-- | The name of the repository to retrieve the catalog metadata for.
getRepositoryCatalogData_repositoryName :: Lens' GetRepositoryCatalogData Text

-- | The catalog metadata for the repository.
getRepositoryCatalogDataResponse_catalogData :: Lens' GetRepositoryCatalogDataResponse (Maybe RepositoryCatalogData)

-- | The response's http status code.
getRepositoryCatalogDataResponse_httpStatus :: Lens' GetRepositoryCatalogDataResponse Int

-- | The response's http status code.
getRegistryCatalogDataResponse_httpStatus :: Lens' GetRegistryCatalogDataResponse Int

-- | The catalog metadata for the public registry.
getRegistryCatalogDataResponse_registryCatalogData :: Lens' GetRegistryCatalogDataResponse RegistryCatalogData

-- | The Amazon Resource Name (ARN) of the resource to which to add tags.
--   Currently, the supported resource is an Amazon ECR Public repository.
tagResource_resourceArn :: Lens' TagResource Text

-- | The tags to add to the resource. A tag is an array of key-value pairs.
--   Tag keys can have a maximum character length of 128 characters, and
--   tag values can have a maximum length of 256 characters.
tagResource_tags :: Lens' TagResource [Tag]

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int

-- | If the policy you are attempting to set on a repository policy would
--   prevent you from setting another policy in the future, you must force
--   the SetRepositoryPolicy operation. This is intended to prevent
--   accidental repository lock outs.
setRepositoryPolicy_force :: Lens' SetRepositoryPolicy (Maybe Bool)

-- | The AWS account ID associated with the registry that contains the
--   repository. If you do not specify a registry, the default public
--   registry is assumed.
setRepositoryPolicy_registryId :: Lens' SetRepositoryPolicy (Maybe Text)

-- | The name of the repository to receive the policy.
setRepositoryPolicy_repositoryName :: Lens' SetRepositoryPolicy Text

-- | The JSON repository policy text to apply to the repository. For more
--   information, see <a>Amazon ECR Repository Policies</a> in the
--   <i>Amazon Elastic Container Registry User Guide</i>.
setRepositoryPolicy_policyText :: Lens' SetRepositoryPolicy Text

-- | The registry ID associated with the request.
setRepositoryPolicyResponse_registryId :: Lens' SetRepositoryPolicyResponse (Maybe Text)

-- | The repository name associated with the request.
setRepositoryPolicyResponse_repositoryName :: Lens' SetRepositoryPolicyResponse (Maybe Text)

-- | The JSON repository policy text applied to the repository.
setRepositoryPolicyResponse_policyText :: Lens' SetRepositoryPolicyResponse (Maybe Text)

-- | The response's http status code.
setRepositoryPolicyResponse_httpStatus :: Lens' SetRepositoryPolicyResponse Int

-- | The AWS account ID associated with the registry to which you intend to
--   upload layers. If you do not specify a registry, the default public
--   registry is assumed.
initiateLayerUpload_registryId :: Lens' InitiateLayerUpload (Maybe Text)

-- | The name of the repository to which you intend to upload layers.
initiateLayerUpload_repositoryName :: Lens' InitiateLayerUpload Text

-- | The size, in bytes, that Amazon ECR expects future layer part uploads
--   to be.
initiateLayerUploadResponse_partSize :: Lens' InitiateLayerUploadResponse (Maybe Natural)

-- | The upload ID for the layer upload. This parameter is passed to
--   further UploadLayerPart and CompleteLayerUpload operations.
initiateLayerUploadResponse_uploadId :: Lens' InitiateLayerUploadResponse (Maybe Text)

-- | The response's http status code.
initiateLayerUploadResponse_httpStatus :: Lens' InitiateLayerUploadResponse Int

-- | The Amazon Resource Name (ARN) of the resource from which to delete
--   tags. Currently, the supported resource is an Amazon ECR Public
--   repository.
untagResource_resourceArn :: Lens' UntagResource Text

-- | The keys of the tags to be removed.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int

-- | The AWS account ID associated with the public registry that contains
--   the repository in which to describe images. If you do not specify a
--   registry, the default public registry is assumed.
describeImageTags_registryId :: Lens' DescribeImageTags (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImageTags</tt> request where <tt>maxResults</tt> was used
--   and the results exceeded the value of that parameter. Pagination
--   continues from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
describeImageTags_nextToken :: Lens' DescribeImageTags (Maybe Text)

-- | The maximum number of repository results returned by
--   <tt>DescribeImageTags</tt> in paginated output. When this parameter is
--   used, <tt>DescribeImageTags</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>DescribeImageTags</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImageTags</tt> returns up
--   to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify images with <tt>imageIds</tt>.
describeImageTags_maxResults :: Lens' DescribeImageTags (Maybe Natural)

-- | The name of the repository that contains the image tag details to
--   describe.
describeImageTags_repositoryName :: Lens' DescribeImageTags Text

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImageTags</tt> request. When the results of a
--   <tt>DescribeImageTags</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
describeImageTagsResponse_nextToken :: Lens' DescribeImageTagsResponse (Maybe Text)

-- | The image tag details for the images in the requested repository.
describeImageTagsResponse_imageTagDetails :: Lens' DescribeImageTagsResponse (Maybe [ImageTagDetail])

-- | The response's http status code.
describeImageTagsResponse_httpStatus :: Lens' DescribeImageTagsResponse Int

-- | If a repository contains images, forces the deletion.
deleteRepository_force :: Lens' DeleteRepository (Maybe Bool)

-- | The AWS account ID associated with the public registry that contains
--   the repository to delete. If you do not specify a registry, the
--   default public registry is assumed.
deleteRepository_registryId :: Lens' DeleteRepository (Maybe Text)

-- | The name of the repository to delete.
deleteRepository_repositoryName :: Lens' DeleteRepository Text

-- | The repository that was deleted.
deleteRepositoryResponse_repository :: Lens' DeleteRepositoryResponse (Maybe Repository)

-- | The response's http status code.
deleteRepositoryResponse_httpStatus :: Lens' DeleteRepositoryResponse Int

-- | The AWS account ID associated with the public registry that contains
--   the repository in which to put the image. If you do not specify a
--   registry, the default public registry is assumed.
putImage_registryId :: Lens' PutImage (Maybe Text)

-- | The media type of the image manifest. If you push an image manifest
--   that does not contain the <tt>mediaType</tt> field, you must specify
--   the <tt>imageManifestMediaType</tt> in the request.
putImage_imageManifestMediaType :: Lens' PutImage (Maybe Text)

-- | The image digest of the image manifest corresponding to the image.
putImage_imageDigest :: Lens' PutImage (Maybe Text)

-- | The tag to associate with the image. This parameter is required for
--   images that use the Docker Image Manifest V2 Schema 2 or Open
--   Container Initiative (OCI) formats.
putImage_imageTag :: Lens' PutImage (Maybe Text)

-- | The name of the repository in which to put the image.
putImage_repositoryName :: Lens' PutImage Text

-- | The image manifest corresponding to the image to be uploaded.
putImage_imageManifest :: Lens' PutImage Text

-- | Details of the image uploaded.
putImageResponse_image :: Lens' PutImageResponse (Maybe Image)

-- | The response's http status code.
putImageResponse_httpStatus :: Lens' PutImageResponse Int

-- | An authorization token data object that corresponds to a public
--   registry.
getAuthorizationTokenResponse_authorizationData :: Lens' GetAuthorizationTokenResponse (Maybe AuthorizationData)

-- | The response's http status code.
getAuthorizationTokenResponse_httpStatus :: Lens' GetAuthorizationTokenResponse Int

-- | The AWS account ID associated with the public registry that contains
--   the repository in which to describe images. If you do not specify a
--   registry, the default public registry is assumed.
describeImages_registryId :: Lens' DescribeImages (Maybe Text)

-- | The list of image IDs for the requested repository.
describeImages_imageIds :: Lens' DescribeImages (Maybe (NonEmpty ImageIdentifier))

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImages</tt> request where <tt>maxResults</tt> was used and
--   the results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
describeImages_nextToken :: Lens' DescribeImages (Maybe Text)

-- | The maximum number of repository results returned by
--   <tt>DescribeImages</tt> in paginated output. When this parameter is
--   used, <tt>DescribeImages</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>DescribeImages</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImages</tt> returns up to
--   100 results and a <tt>nextToken</tt> value, if applicable. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
describeImages_maxResults :: Lens' DescribeImages (Maybe Natural)

-- | The repository that contains the images to describe.
describeImages_repositoryName :: Lens' DescribeImages Text

-- | A list of ImageDetail objects that contain data about the image.
describeImagesResponse_imageDetails :: Lens' DescribeImagesResponse (Maybe [ImageDetail])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeImages</tt> request. When the results of a
--   <tt>DescribeImages</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
describeImagesResponse_nextToken :: Lens' DescribeImagesResponse (Maybe Text)

-- | The response's http status code.
describeImagesResponse_httpStatus :: Lens' DescribeImagesResponse Int

-- | The Unix time in seconds and milliseconds when the authorization token
--   expires. Authorization tokens are valid for 12 hours.
authorizationData_expiresAt :: Lens' AuthorizationData (Maybe UTCTime)

-- | A base64-encoded string that contains authorization data for a public
--   Amazon ECR registry. When the string is decoded, it is presented in
--   the format <tt>user:password</tt> for public registry authentication
--   using <tt>docker login</tt>.
authorizationData_authorizationToken :: Lens' AuthorizationData (Maybe Text)

-- | The AWS account ID associated with the registry containing the image.
image_registryId :: Lens' Image (Maybe Text)

-- | The manifest media type of the image.
image_imageManifestMediaType :: Lens' Image (Maybe Text)

-- | An object containing the image tag and image digest associated with an
--   image.
image_imageId :: Lens' Image (Maybe ImageIdentifier)

-- | The name of the repository associated with the image.
image_repositoryName :: Lens' Image (Maybe Text)

-- | The image manifest associated with the image.
image_imageManifest :: Lens' Image (Maybe Text)

-- | The AWS account ID associated with the public registry to which this
--   image belongs.
imageDetail_registryId :: Lens' ImageDetail (Maybe Text)

-- | The list of tags associated with this image.
imageDetail_imageTags :: Lens' ImageDetail (Maybe [Text])

-- | The media type of the image manifest.
imageDetail_imageManifestMediaType :: Lens' ImageDetail (Maybe Text)

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
imageDetail_imageSizeInBytes :: Lens' ImageDetail (Maybe Integer)

-- | The <tt>sha256</tt> digest of the image manifest.
imageDetail_imageDigest :: Lens' ImageDetail (Maybe Text)

-- | The artifact media type of the image.
imageDetail_artifactMediaType :: Lens' ImageDetail (Maybe Text)

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image was pushed to the repository.
imageDetail_imagePushedAt :: Lens' ImageDetail (Maybe UTCTime)

-- | The name of the repository to which this image belongs.
imageDetail_repositoryName :: Lens' ImageDetail (Maybe Text)

-- | The reason for the failure.
imageFailure_failureReason :: Lens' ImageFailure (Maybe Text)

-- | The code associated with the failure.
imageFailure_failureCode :: Lens' ImageFailure (Maybe ImageFailureCode)

-- | The image ID associated with the failure.
imageFailure_imageId :: Lens' ImageFailure (Maybe ImageIdentifier)

-- | The <tt>sha256</tt> digest of the image manifest.
imageIdentifier_imageDigest :: Lens' ImageIdentifier (Maybe Text)

-- | The tag used for the image.
imageIdentifier_imageTag :: Lens' ImageIdentifier (Maybe Text)

-- | The time stamp indicating when the image tag was created.
imageTagDetail_createdAt :: Lens' ImageTagDetail (Maybe UTCTime)

-- | An object that describes the details of an image.
imageTagDetail_imageDetail :: Lens' ImageTagDetail (Maybe ReferencedImageDetail)

-- | The tag associated with the image.
imageTagDetail_imageTag :: Lens' ImageTagDetail (Maybe Text)

-- | The media type of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
layer_mediaType :: Lens' Layer (Maybe Text)

-- | The <tt>sha256</tt> digest of the image layer.
layer_layerDigest :: Lens' Layer (Maybe Text)

-- | The size, in bytes, of the image layer.
layer_layerSize :: Lens' Layer (Maybe Integer)

-- | The availability status of the image layer.
layer_layerAvailability :: Lens' Layer (Maybe LayerAvailability)

-- | The reason for the failure.
layerFailure_failureReason :: Lens' LayerFailure (Maybe Text)

-- | The failure code associated with the failure.
layerFailure_failureCode :: Lens' LayerFailure (Maybe LayerFailureCode)

-- | The layer digest associated with the failure.
layerFailure_layerDigest :: Lens' LayerFailure (Maybe Text)

-- | The media type of the image manifest.
referencedImageDetail_imageManifestMediaType :: Lens' ReferencedImageDetail (Maybe Text)

-- | The size, in bytes, of the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
referencedImageDetail_imageSizeInBytes :: Lens' ReferencedImageDetail (Maybe Integer)

-- | The <tt>sha256</tt> digest of the image manifest.
referencedImageDetail_imageDigest :: Lens' ReferencedImageDetail (Maybe Text)

-- | The artifact media type of the image.
referencedImageDetail_artifactMediaType :: Lens' ReferencedImageDetail (Maybe Text)

-- | The date and time, expressed in standard JavaScript date format, at
--   which the current image tag was pushed to the repository.
referencedImageDetail_imagePushedAt :: Lens' ReferencedImageDetail (Maybe UTCTime)

-- | The AWS account ID associated with the registry. If you do not specify
--   a registry, the default public registry is assumed.
registry_registryId :: Lens' Registry Text

-- | The Amazon Resource Name (ARN) of the public registry.
registry_registryArn :: Lens' Registry Text

-- | The URI of a public registry. The URI contains a universal prefix and
--   the registry alias.
registry_registryUri :: Lens' Registry Text

-- | Whether the account is verified. This indicates whether the account is
--   an AWS Marketplace vendor. If an account is verified, each public
--   repository will received a verified account badge on the Amazon ECR
--   Public Gallery.
registry_verified :: Lens' Registry Bool

-- | An array of objects representing the aliases for a public registry.
registry_aliases :: Lens' Registry [RegistryAlias]

-- | The name of the registry alias.
registryAlias_name :: Lens' RegistryAlias Text

-- | The status of the registry alias.
registryAlias_status :: Lens' RegistryAlias RegistryAliasStatus

-- | Whether or not the registry alias is the primary alias for the
--   registry. If true, the alias is the primary registry alias and is
--   displayed in both the repository URL and the image URI used in the
--   <tt>docker pull</tt> commands on the Amazon ECR Public Gallery.
--   
--   A registry alias that is not the primary registry alias can be used in
--   the repository URI in a <tt>docker pull</tt> command.
registryAlias_primaryRegistryAlias :: Lens' RegistryAlias Bool

-- | Whether or not the registry alias is the default alias for the
--   registry. When the first public repository is created, your public
--   registry is assigned a default registry alias.
registryAlias_defaultRegistryAlias :: Lens' RegistryAlias Bool

-- | The display name for a public registry. This appears on the Amazon ECR
--   Public Gallery.
--   
--   Only accounts that have the verified account badge can have a registry
--   display name.
registryCatalogData_displayName :: Lens' RegistryCatalogData (Maybe Text)

-- | The Amazon Resource Name (ARN) that identifies the repository. The ARN
--   contains the <tt>arn:aws:ecr</tt> namespace, followed by the region of
--   the repository, AWS account ID of the repository owner, repository
--   namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
repository_repositoryArn :: Lens' Repository (Maybe Text)

-- | The date and time, in JavaScript date format, when the repository was
--   created.
repository_createdAt :: Lens' Repository (Maybe UTCTime)

-- | The AWS account ID associated with the public registry that contains
--   the repository.
repository_registryId :: Lens' Repository (Maybe Text)

-- | The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
repository_repositoryUri :: Lens' Repository (Maybe Text)

-- | The name of the repository.
repository_repositoryName :: Lens' Repository (Maybe Text)

-- | The URL containing the logo associated with the repository.
repositoryCatalogData_logoUrl :: Lens' RepositoryCatalogData (Maybe Text)

-- | The architecture tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
repositoryCatalogData_architectures :: Lens' RepositoryCatalogData (Maybe [Text])

-- | The longform usage details of the contents of the repository. The
--   usage text provides context for users of the repository.
repositoryCatalogData_usageText :: Lens' RepositoryCatalogData (Maybe Text)

-- | Whether or not the repository is certified by AWS Marketplace.
repositoryCatalogData_marketplaceCertified :: Lens' RepositoryCatalogData (Maybe Bool)

-- | The longform description of the contents of the repository. This text
--   appears in the repository details on the Amazon ECR Public Gallery.
repositoryCatalogData_aboutText :: Lens' RepositoryCatalogData (Maybe Text)

-- | The operating system tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
repositoryCatalogData_operatingSystems :: Lens' RepositoryCatalogData (Maybe [Text])

-- | The short description of the repository.
repositoryCatalogData_description :: Lens' RepositoryCatalogData (Maybe Text)

-- | The base64-encoded repository logo payload.
--   
--   The repository logo is only publicly visible in the Amazon ECR Public
--   Gallery for verified accounts.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
repositoryCatalogDataInput_logoImageBlob :: Lens' RepositoryCatalogDataInput (Maybe ByteString)

-- | The system architecture that the images in the repository are
--   compatible with. On the Amazon ECR Public Gallery, the following
--   supported architectures will appear as badges on the repository and
--   are used as search filters.
--   
--   <ul>
--   <li><pre>Linux</pre></li>
--   <li><pre>Windows</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
repositoryCatalogDataInput_architectures :: Lens' RepositoryCatalogDataInput (Maybe [Text])

-- | Detailed information on how to use the contents of the repository. It
--   is publicly visible in the Amazon ECR Public Gallery. The usage text
--   provides context, support information, and additional usage details
--   for users of the repository. The text must be in markdown format.
repositoryCatalogDataInput_usageText :: Lens' RepositoryCatalogDataInput (Maybe Text)

-- | A detailed description of the contents of the repository. It is
--   publicly visible in the Amazon ECR Public Gallery. The text must be in
--   markdown format.
repositoryCatalogDataInput_aboutText :: Lens' RepositoryCatalogDataInput (Maybe Text)

-- | The operating systems that the images in the repository are compatible
--   with. On the Amazon ECR Public Gallery, the following supported
--   operating systems will appear as badges on the repository and are used
--   as search filters.
--   
--   <ul>
--   <li><pre>ARM</pre></li>
--   <li><pre>ARM 64</pre></li>
--   <li><pre>x86</pre></li>
--   <li><pre>x86-64</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
repositoryCatalogDataInput_operatingSystems :: Lens' RepositoryCatalogDataInput (Maybe [Text])

-- | A short description of the contents of the repository. This text
--   appears in both the image details and also when searching for
--   repositories on the Amazon ECR Public Gallery.
repositoryCatalogDataInput_description :: Lens' RepositoryCatalogDataInput (Maybe Text)

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
tag_value :: Lens' Tag (Maybe Text)

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
tag_key :: Lens' Tag (Maybe Text)


module Amazonka.ECRPublic.Waiters


-- | Derived from API version <tt>2020-10-30</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon Elastic Container Registry Public
--   
--   Amazon Elastic Container Registry (Amazon ECR) is a managed container
--   image registry service. Amazon ECR provides both public and private
--   registries to host your container images. You can use the familiar
--   Docker CLI, or their preferred client, to push, pull, and manage
--   images. Amazon ECR provides a secure, scalable, and reliable registry
--   for your Docker or Open Container Initiative (OCI) images. Amazon ECR
--   supports public repositories with this API. For information about the
--   Amazon ECR API for private repositories, see <a>Amazon Elastic
--   Container Registry API Reference</a>.
module Amazonka.ECRPublic

-- | API version <tt>2020-10-30</tt> of the Amazon Elastic Container
--   Registry Public SDK configuration.
defaultService :: Service

-- | The specified image is tagged with a tag that already exists. The
--   repository is configured for tag immutability.
_ImageTagAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified layers could not be found, or the specified layer is not
--   valid for this repository.
_LayersNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The manifest list is referencing an image that does not exist.
_ReferencedImagesNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified parameter is invalid. Review the available parameters
--   for the API request.
_InvalidParameterException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The image layer already exists in the associated repository.
_LayerAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | These errors are usually caused by a server-side issue.
_ServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The action is not supported in this Region.
_UnsupportedCommandException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The layer digest calculation performed by Amazon ECR upon receipt of
--   the image layer does not match the digest specified.
_InvalidLayerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Layer parts must be at least 5 MiB in size.
_LayerPartTooSmallException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified image digest does not match the digest that Amazon ECR
--   calculated for the image.
_ImageDigestDoesNotMatchException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The image requested does not exist in the specified repository.
_ImageNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified image has already been pushed, and there were no changes
--   to the manifest or image tag after the last push.
_ImageAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository could not be found. Check the spelling of the
--   specified repository and ensure that you are performing operations on
--   the correct registry.
_RepositoryNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The list of tags on the repository is over the limit. The maximum
--   number of tags that can be applied to a repository is 50.
_TooManyTagsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The upload could not be found, or the specified upload ID is not valid
--   for this repository.
_UploadNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The layer part size is not valid, or the first byte specified is not
--   consecutive to the last byte of a previous layer part upload.
_InvalidLayerPartException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An invalid parameter has been specified. Tag keys can have a maximum
--   character length of 128 characters, and tag values can have a maximum
--   length of 256 characters.
_InvalidTagParameterException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository contains images. To delete a repository that
--   contains images, you must force the deletion with the <tt>force</tt>
--   parameter.
_RepositoryNotEmptyException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository already exists in the specified registry.
_RepositoryAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified repository and registry combination does not have an
--   associated repository policy.
_RepositoryPolicyNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified layer upload does not contain any layer parts.
_EmptyUploadException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation did not succeed because it would have exceeded a service
--   limit for your account. For more information, see <a>Amazon ECR
--   Service Quotas</a> in the Amazon Elastic Container Registry User
--   Guide.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The registry does not exist.
_RegistryNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newGetRepositoryPolicy</a> smart constructor.
data GetRepositoryPolicy
GetRepositoryPolicy' :: Maybe Text -> Text -> GetRepositoryPolicy

-- | Create a value of <a>GetRepositoryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicy_registryId</a> - The AWS account ID associated
--   with the public registry that contains the repository. If you do not
--   specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicy_repositoryName</a> - The name of the repository
--   with the policy to retrieve.
newGetRepositoryPolicy :: Text -> GetRepositoryPolicy

-- | <i>See:</i> <a>newGetRepositoryPolicyResponse</a> smart constructor.
data GetRepositoryPolicyResponse
GetRepositoryPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> GetRepositoryPolicyResponse

-- | Create a value of <a>GetRepositoryPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:GetRepositoryPolicy'</a>,
--   <a>getRepositoryPolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:policyText:GetRepositoryPolicyResponse'</a>,
--   <a>getRepositoryPolicyResponse_policyText</a> - The repository policy
--   text associated with the repository. The policy text will be in JSON
--   format.
--   
--   <a>$sel:httpStatus:GetRepositoryPolicyResponse'</a>,
--   <a>getRepositoryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newGetRepositoryPolicyResponse :: Int -> GetRepositoryPolicyResponse

-- | <i>See:</i> <a>newPutRegistryCatalogData</a> smart constructor.
data PutRegistryCatalogData
PutRegistryCatalogData' :: Maybe Text -> PutRegistryCatalogData

-- | Create a value of <a>PutRegistryCatalogData</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:displayName:PutRegistryCatalogData'</a>,
--   <a>putRegistryCatalogData_displayName</a> - The display name for a
--   public registry. The display name is shown as the repository author in
--   the Amazon ECR Public Gallery.
--   
--   The registry display name is only publicly visible in the Amazon ECR
--   Public Gallery for verified accounts.
newPutRegistryCatalogData :: PutRegistryCatalogData

-- | <i>See:</i> <a>newPutRegistryCatalogDataResponse</a> smart
--   constructor.
data PutRegistryCatalogDataResponse
PutRegistryCatalogDataResponse' :: Int -> RegistryCatalogData -> PutRegistryCatalogDataResponse

-- | Create a value of <a>PutRegistryCatalogDataResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:PutRegistryCatalogDataResponse'</a>,
--   <a>putRegistryCatalogDataResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:registryCatalogData:PutRegistryCatalogDataResponse'</a>,
--   <a>putRegistryCatalogDataResponse_registryCatalogData</a> - The
--   catalog data for the public registry.
newPutRegistryCatalogDataResponse :: Int -> RegistryCatalogData -> PutRegistryCatalogDataResponse

-- | <i>See:</i> <a>newBatchDeleteImage</a> smart constructor.
data BatchDeleteImage
BatchDeleteImage' :: Maybe Text -> Text -> NonEmpty ImageIdentifier -> BatchDeleteImage

-- | Create a value of <a>BatchDeleteImage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:BatchDeleteImage'</a>,
--   <a>batchDeleteImage_registryId</a> - The AWS account ID associated
--   with the registry that contains the image to delete. If you do not
--   specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:BatchDeleteImage'</a>,
--   <a>batchDeleteImage_repositoryName</a> - The repository in a public
--   registry that contains the image to delete.
--   
--   <a>$sel:imageIds:BatchDeleteImage'</a>,
--   <a>batchDeleteImage_imageIds</a> - A list of image ID references that
--   correspond to images to delete. The format of the <tt>imageIds</tt>
--   reference is <tt>imageTag=tag</tt> or <tt>imageDigest=digest</tt>.
newBatchDeleteImage :: Text -> NonEmpty ImageIdentifier -> BatchDeleteImage

-- | <i>See:</i> <a>newBatchDeleteImageResponse</a> smart constructor.
data BatchDeleteImageResponse
BatchDeleteImageResponse' :: Maybe [ImageFailure] -> Maybe (NonEmpty ImageIdentifier) -> Int -> BatchDeleteImageResponse

-- | Create a value of <a>BatchDeleteImageResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:BatchDeleteImageResponse'</a>,
--   <a>batchDeleteImageResponse_failures</a> - Any failures associated
--   with the call.
--   
--   <a>$sel:imageIds:BatchDeleteImage'</a>,
--   <a>batchDeleteImageResponse_imageIds</a> - The image IDs of the
--   deleted images.
--   
--   <a>$sel:httpStatus:BatchDeleteImageResponse'</a>,
--   <a>batchDeleteImageResponse_httpStatus</a> - The response's http
--   status code.
newBatchDeleteImageResponse :: Int -> BatchDeleteImageResponse

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The Amazon Resource Name
--   (ARN) that identifies the resource for which to list the tags.
--   Currently, the supported resource is an Amazon ECR Public repository.
newListTagsForResource :: Text -> ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe [Tag] -> Int -> ListTagsForResourceResponse

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - The tags for the resource.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | <i>See:</i> <a>newBatchCheckLayerAvailability</a> smart constructor.
data BatchCheckLayerAvailability
BatchCheckLayerAvailability' :: Maybe Text -> Text -> NonEmpty Text -> BatchCheckLayerAvailability

-- | Create a value of <a>BatchCheckLayerAvailability</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:BatchCheckLayerAvailability'</a>,
--   <a>batchCheckLayerAvailability_registryId</a> - The AWS account ID
--   associated with the public registry that contains the image layers to
--   check. If you do not specify a registry, the default public registry
--   is assumed.
--   
--   <a>$sel:repositoryName:BatchCheckLayerAvailability'</a>,
--   <a>batchCheckLayerAvailability_repositoryName</a> - The name of the
--   repository that is associated with the image layers to check.
--   
--   <a>$sel:layerDigests:BatchCheckLayerAvailability'</a>,
--   <a>batchCheckLayerAvailability_layerDigests</a> - The digests of the
--   image layers to check.
newBatchCheckLayerAvailability :: Text -> NonEmpty Text -> BatchCheckLayerAvailability

-- | <i>See:</i> <a>newBatchCheckLayerAvailabilityResponse</a> smart
--   constructor.
data BatchCheckLayerAvailabilityResponse
BatchCheckLayerAvailabilityResponse' :: Maybe [LayerFailure] -> Maybe [Layer] -> Int -> BatchCheckLayerAvailabilityResponse

-- | Create a value of <a>BatchCheckLayerAvailabilityResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:BatchCheckLayerAvailabilityResponse'</a>,
--   <a>batchCheckLayerAvailabilityResponse_failures</a> - Any failures
--   associated with the call.
--   
--   <a>$sel:layers:BatchCheckLayerAvailabilityResponse'</a>,
--   <a>batchCheckLayerAvailabilityResponse_layers</a> - A list of image
--   layer objects corresponding to the image layer references in the
--   request.
--   
--   <a>$sel:httpStatus:BatchCheckLayerAvailabilityResponse'</a>,
--   <a>batchCheckLayerAvailabilityResponse_httpStatus</a> - The response's
--   http status code.
newBatchCheckLayerAvailabilityResponse :: Int -> BatchCheckLayerAvailabilityResponse

-- | <i>See:</i> <a>newPutRepositoryCatalogData</a> smart constructor.
data PutRepositoryCatalogData
PutRepositoryCatalogData' :: Maybe Text -> Text -> RepositoryCatalogDataInput -> PutRepositoryCatalogData

-- | Create a value of <a>PutRepositoryCatalogData</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutRepositoryCatalogData'</a>,
--   <a>putRepositoryCatalogData_registryId</a> - The AWS account ID
--   associated with the public registry the repository is in. If you do
--   not specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:PutRepositoryCatalogData'</a>,
--   <a>putRepositoryCatalogData_repositoryName</a> - The name of the
--   repository to create or update the catalog data for.
--   
--   <a>$sel:catalogData:PutRepositoryCatalogData'</a>,
--   <a>putRepositoryCatalogData_catalogData</a> - An object containing the
--   catalog data for a repository. This data is publicly visible in the
--   Amazon ECR Public Gallery.
newPutRepositoryCatalogData :: Text -> RepositoryCatalogDataInput -> PutRepositoryCatalogData

-- | <i>See:</i> <a>newPutRepositoryCatalogDataResponse</a> smart
--   constructor.
data PutRepositoryCatalogDataResponse
PutRepositoryCatalogDataResponse' :: Maybe RepositoryCatalogData -> Int -> PutRepositoryCatalogDataResponse

-- | Create a value of <a>PutRepositoryCatalogDataResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogData:PutRepositoryCatalogData'</a>,
--   <a>putRepositoryCatalogDataResponse_catalogData</a> - The catalog data
--   for the repository.
--   
--   <a>$sel:httpStatus:PutRepositoryCatalogDataResponse'</a>,
--   <a>putRepositoryCatalogDataResponse_httpStatus</a> - The response's
--   http status code.
newPutRepositoryCatalogDataResponse :: Int -> PutRepositoryCatalogDataResponse

-- | <i>See:</i> <a>newDeleteRepositoryPolicy</a> smart constructor.
data DeleteRepositoryPolicy
DeleteRepositoryPolicy' :: Maybe Text -> Text -> DeleteRepositoryPolicy

-- | Create a value of <a>DeleteRepositoryPolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicy_registryId</a> - The AWS account ID
--   associated with the public registry that contains the repository
--   policy to delete. If you do not specify a registry, the default public
--   registry is assumed.
--   
--   <a>$sel:repositoryName:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicy_repositoryName</a> - The name of the
--   repository that is associated with the repository policy to delete.
newDeleteRepositoryPolicy :: Text -> DeleteRepositoryPolicy

-- | <i>See:</i> <a>newDeleteRepositoryPolicyResponse</a> smart
--   constructor.
data DeleteRepositoryPolicyResponse
DeleteRepositoryPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> DeleteRepositoryPolicyResponse

-- | Create a value of <a>DeleteRepositoryPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:DeleteRepositoryPolicy'</a>,
--   <a>deleteRepositoryPolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:policyText:DeleteRepositoryPolicyResponse'</a>,
--   <a>deleteRepositoryPolicyResponse_policyText</a> - The JSON repository
--   policy that was deleted from the repository.
--   
--   <a>$sel:httpStatus:DeleteRepositoryPolicyResponse'</a>,
--   <a>deleteRepositoryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteRepositoryPolicyResponse :: Int -> DeleteRepositoryPolicyResponse

-- | <i>See:</i> <a>newCreateRepository</a> smart constructor.
data CreateRepository
CreateRepository' :: Maybe RepositoryCatalogDataInput -> Maybe [Tag] -> Text -> CreateRepository

-- | Create a value of <a>CreateRepository</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogData:CreateRepository'</a>,
--   <a>createRepository_catalogData</a> - The details about the repository
--   that are publicly visible in the Amazon ECR Public Gallery.
--   
--   <a>$sel:tags:CreateRepository'</a>, <a>createRepository_tags</a> - The
--   metadata that you apply to the repository to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. Tag keys can have a maximum character length of
--   128 characters, and tag values can have a maximum length of 256
--   characters.
--   
--   <a>$sel:repositoryName:CreateRepository'</a>,
--   <a>createRepository_repositoryName</a> - The name to use for the
--   repository. This appears publicly in the Amazon ECR Public Gallery.
--   The repository name may be specified on its own (such as
--   <tt>nginx-web-app</tt>) or it can be prepended with a namespace to
--   group the repository into a category (such as
--   <tt>project-a/nginx-web-app</tt>).
newCreateRepository :: Text -> CreateRepository

-- | <i>See:</i> <a>newCreateRepositoryResponse</a> smart constructor.
data CreateRepositoryResponse
CreateRepositoryResponse' :: Maybe Repository -> Maybe RepositoryCatalogData -> Int -> CreateRepositoryResponse

-- | Create a value of <a>CreateRepositoryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repository:CreateRepositoryResponse'</a>,
--   <a>createRepositoryResponse_repository</a> - The repository that was
--   created.
--   
--   <a>$sel:catalogData:CreateRepository'</a>,
--   <a>createRepositoryResponse_catalogData</a> - Undocumented member.
--   
--   <a>$sel:httpStatus:CreateRepositoryResponse'</a>,
--   <a>createRepositoryResponse_httpStatus</a> - The response's http
--   status code.
newCreateRepositoryResponse :: Int -> CreateRepositoryResponse

-- | <i>See:</i> <a>newDescribeRegistries</a> smart constructor.
data DescribeRegistries
DescribeRegistries' :: Maybe Text -> Maybe Natural -> DescribeRegistries

-- | Create a value of <a>DescribeRegistries</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeRegistries'</a>,
--   <a>describeRegistries_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a previous paginated <tt>DescribeRegistries</tt> request
--   where <tt>maxResults</tt> was used and the results exceeded the value
--   of that parameter. Pagination continues from the end of the previous
--   results that returned the <tt>nextToken</tt> value. This value is
--   <tt>null</tt> when there are no more results to return.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:maxResults:DescribeRegistries'</a>,
--   <a>describeRegistries_maxResults</a> - The maximum number of
--   repository results returned by <tt>DescribeRegistries</tt> in
--   paginated output. When this parameter is used,
--   <tt>DescribeRegistries</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>DescribeRegistries</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRegistries</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable.
newDescribeRegistries :: DescribeRegistries

-- | <i>See:</i> <a>newDescribeRegistriesResponse</a> smart constructor.
data DescribeRegistriesResponse
DescribeRegistriesResponse' :: Maybe Text -> Int -> [Registry] -> DescribeRegistriesResponse

-- | Create a value of <a>DescribeRegistriesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeRegistries'</a>,
--   <a>describeRegistriesResponse_nextToken</a> - The <tt>nextToken</tt>
--   value to include in a future <tt>DescribeRepositories</tt> request.
--   When the results of a <tt>DescribeRepositories</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:httpStatus:DescribeRegistriesResponse'</a>,
--   <a>describeRegistriesResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:registries:DescribeRegistriesResponse'</a>,
--   <a>describeRegistriesResponse_registries</a> - An object containing
--   the details for a public registry.
newDescribeRegistriesResponse :: Int -> DescribeRegistriesResponse

-- | <i>See:</i> <a>newCompleteLayerUpload</a> smart constructor.
data CompleteLayerUpload
CompleteLayerUpload' :: Maybe Text -> Text -> Text -> NonEmpty Text -> CompleteLayerUpload

-- | Create a value of <a>CompleteLayerUpload</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_registryId</a> - The AWS account ID associated
--   with the registry to which to upload layers. If you do not specify a
--   registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_repositoryName</a> - The name of the repository
--   in a public registry to associate with the image layer.
--   
--   <a>$sel:uploadId:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_uploadId</a> - The upload ID from a previous
--   InitiateLayerUpload operation to associate with the image layer.
--   
--   <a>$sel:layerDigests:CompleteLayerUpload'</a>,
--   <a>completeLayerUpload_layerDigests</a> - The <tt>sha256</tt> digest
--   of the image layer.
newCompleteLayerUpload :: Text -> Text -> NonEmpty Text -> CompleteLayerUpload

-- | <i>See:</i> <a>newCompleteLayerUploadResponse</a> smart constructor.
data CompleteLayerUploadResponse
CompleteLayerUploadResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> CompleteLayerUploadResponse

-- | Create a value of <a>CompleteLayerUploadResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:CompleteLayerUpload'</a>,
--   <a>completeLayerUploadResponse_registryId</a> - The public registry ID
--   associated with the request.
--   
--   <a>$sel:layerDigest:CompleteLayerUploadResponse'</a>,
--   <a>completeLayerUploadResponse_layerDigest</a> - The <tt>sha256</tt>
--   digest of the image layer.
--   
--   <a>$sel:repositoryName:CompleteLayerUpload'</a>,
--   <a>completeLayerUploadResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:uploadId:CompleteLayerUpload'</a>,
--   <a>completeLayerUploadResponse_uploadId</a> - The upload ID associated
--   with the layer.
--   
--   <a>$sel:httpStatus:CompleteLayerUploadResponse'</a>,
--   <a>completeLayerUploadResponse_httpStatus</a> - The response's http
--   status code.
newCompleteLayerUploadResponse :: Int -> CompleteLayerUploadResponse

-- | <i>See:</i> <a>newDescribeRepositories</a> smart constructor.
data DescribeRepositories
DescribeRepositories' :: Maybe Text -> Maybe (NonEmpty Text) -> Maybe Text -> Maybe Natural -> DescribeRepositories

-- | Create a value of <a>DescribeRepositories</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DescribeRepositories'</a>,
--   <a>describeRepositories_registryId</a> - The AWS account ID associated
--   with the registry that contains the repositories to be described. If
--   you do not specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryNames:DescribeRepositories'</a>,
--   <a>describeRepositories_repositoryNames</a> - A list of repositories
--   to describe. If this parameter is omitted, then all repositories in a
--   registry are described.
--   
--   <a>$sel:nextToken:DescribeRepositories'</a>,
--   <a>describeRepositories_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a previous paginated <tt>DescribeRepositories</tt>
--   request where <tt>maxResults</tt> was used and the results exceeded
--   the value of that parameter. Pagination continues from the end of the
--   previous results that returned the <tt>nextToken</tt> value. This
--   value is <tt>null</tt> when there are no more results to return. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:maxResults:DescribeRepositories'</a>,
--   <a>describeRepositories_maxResults</a> - The maximum number of
--   repository results returned by <tt>DescribeRepositories</tt> in
--   paginated output. When this parameter is used,
--   <tt>DescribeRepositories</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>DescribeRepositories</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeRepositories</tt> returns
--   up to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify repositories with
--   <tt>repositoryNames</tt>.
newDescribeRepositories :: DescribeRepositories

-- | <i>See:</i> <a>newDescribeRepositoriesResponse</a> smart constructor.
data DescribeRepositoriesResponse
DescribeRepositoriesResponse' :: Maybe [Repository] -> Maybe Text -> Int -> DescribeRepositoriesResponse

-- | Create a value of <a>DescribeRepositoriesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repositories:DescribeRepositoriesResponse'</a>,
--   <a>describeRepositoriesResponse_repositories</a> - A list of
--   repository objects corresponding to valid repositories.
--   
--   <a>$sel:nextToken:DescribeRepositories'</a>,
--   <a>describeRepositoriesResponse_nextToken</a> - The <tt>nextToken</tt>
--   value to include in a future <tt>DescribeRepositories</tt> request.
--   When the results of a <tt>DescribeRepositories</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:httpStatus:DescribeRepositoriesResponse'</a>,
--   <a>describeRepositoriesResponse_httpStatus</a> - The response's http
--   status code.
newDescribeRepositoriesResponse :: Int -> DescribeRepositoriesResponse

-- | <i>See:</i> <a>newUploadLayerPart</a> smart constructor.
data UploadLayerPart
UploadLayerPart' :: Maybe Text -> Text -> Text -> Natural -> Natural -> Base64 -> UploadLayerPart

-- | Create a value of <a>UploadLayerPart</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:UploadLayerPart'</a>,
--   <a>uploadLayerPart_registryId</a> - The AWS account ID associated with
--   the registry to which you are uploading layer parts. If you do not
--   specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:UploadLayerPart'</a>,
--   <a>uploadLayerPart_repositoryName</a> - The name of the repository to
--   which you are uploading layer parts.
--   
--   <a>$sel:uploadId:UploadLayerPart'</a>, <a>uploadLayerPart_uploadId</a>
--   - The upload ID from a previous InitiateLayerUpload operation to
--   associate with the layer part upload.
--   
--   <a>$sel:partFirstByte:UploadLayerPart'</a>,
--   <a>uploadLayerPart_partFirstByte</a> - The position of the first byte
--   of the layer part witin the overall image layer.
--   
--   <a>$sel:partLastByte:UploadLayerPart'</a>,
--   <a>uploadLayerPart_partLastByte</a> - The position of the last byte of
--   the layer part within the overall image layer.
--   
--   <a>$sel:layerPartBlob:UploadLayerPart'</a>,
--   <a>uploadLayerPart_layerPartBlob</a> - The base64-encoded layer part
--   payload.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
newUploadLayerPart :: Text -> Text -> Natural -> Natural -> ByteString -> UploadLayerPart

-- | <i>See:</i> <a>newUploadLayerPartResponse</a> smart constructor.
data UploadLayerPartResponse
UploadLayerPartResponse' :: Maybe Text -> Maybe Natural -> Maybe Text -> Maybe Text -> Int -> UploadLayerPartResponse

-- | Create a value of <a>UploadLayerPartResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:UploadLayerPart'</a>,
--   <a>uploadLayerPartResponse_registryId</a> - The registry ID associated
--   with the request.
--   
--   <a>$sel:lastByteReceived:UploadLayerPartResponse'</a>,
--   <a>uploadLayerPartResponse_lastByteReceived</a> - The integer value of
--   the last byte received in the request.
--   
--   <a>$sel:repositoryName:UploadLayerPart'</a>,
--   <a>uploadLayerPartResponse_repositoryName</a> - The repository name
--   associated with the request.
--   
--   <a>$sel:uploadId:UploadLayerPart'</a>,
--   <a>uploadLayerPartResponse_uploadId</a> - The upload ID associated
--   with the request.
--   
--   <a>$sel:httpStatus:UploadLayerPartResponse'</a>,
--   <a>uploadLayerPartResponse_httpStatus</a> - The response's http status
--   code.
newUploadLayerPartResponse :: Int -> UploadLayerPartResponse

-- | <i>See:</i> <a>newGetRepositoryCatalogData</a> smart constructor.
data GetRepositoryCatalogData
GetRepositoryCatalogData' :: Maybe Text -> Text -> GetRepositoryCatalogData

-- | Create a value of <a>GetRepositoryCatalogData</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:GetRepositoryCatalogData'</a>,
--   <a>getRepositoryCatalogData_registryId</a> - The AWS account ID
--   associated with the registry that contains the repositories to be
--   described. If you do not specify a registry, the default public
--   registry is assumed.
--   
--   <a>$sel:repositoryName:GetRepositoryCatalogData'</a>,
--   <a>getRepositoryCatalogData_repositoryName</a> - The name of the
--   repository to retrieve the catalog metadata for.
newGetRepositoryCatalogData :: Text -> GetRepositoryCatalogData

-- | <i>See:</i> <a>newGetRepositoryCatalogDataResponse</a> smart
--   constructor.
data GetRepositoryCatalogDataResponse
GetRepositoryCatalogDataResponse' :: Maybe RepositoryCatalogData -> Int -> GetRepositoryCatalogDataResponse

-- | Create a value of <a>GetRepositoryCatalogDataResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:catalogData:GetRepositoryCatalogDataResponse'</a>,
--   <a>getRepositoryCatalogDataResponse_catalogData</a> - The catalog
--   metadata for the repository.
--   
--   <a>$sel:httpStatus:GetRepositoryCatalogDataResponse'</a>,
--   <a>getRepositoryCatalogDataResponse_httpStatus</a> - The response's
--   http status code.
newGetRepositoryCatalogDataResponse :: Int -> GetRepositoryCatalogDataResponse

-- | <i>See:</i> <a>newGetRegistryCatalogData</a> smart constructor.
data GetRegistryCatalogData
GetRegistryCatalogData' :: GetRegistryCatalogData

-- | Create a value of <a>GetRegistryCatalogData</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newGetRegistryCatalogData :: GetRegistryCatalogData

-- | <i>See:</i> <a>newGetRegistryCatalogDataResponse</a> smart
--   constructor.
data GetRegistryCatalogDataResponse
GetRegistryCatalogDataResponse' :: Int -> RegistryCatalogData -> GetRegistryCatalogDataResponse

-- | Create a value of <a>GetRegistryCatalogDataResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GetRegistryCatalogDataResponse'</a>,
--   <a>getRegistryCatalogDataResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:registryCatalogData:GetRegistryCatalogDataResponse'</a>,
--   <a>getRegistryCatalogDataResponse_registryCatalogData</a> - The
--   catalog metadata for the public registry.
newGetRegistryCatalogDataResponse :: Int -> RegistryCatalogData -> GetRegistryCatalogDataResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the resource to which to add tags.
--   Currently, the supported resource is an Amazon ECR Public repository.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - The tags to
--   add to the resource. A tag is an array of key-value pairs. Tag keys
--   can have a maximum character length of 128 characters, and tag values
--   can have a maximum length of 256 characters.
newTagResource :: Text -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | <i>See:</i> <a>newSetRepositoryPolicy</a> smart constructor.
data SetRepositoryPolicy
SetRepositoryPolicy' :: Maybe Bool -> Maybe Text -> Text -> Text -> SetRepositoryPolicy

-- | Create a value of <a>SetRepositoryPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:force:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_force</a> - If the policy you are attempting to
--   set on a repository policy would prevent you from setting another
--   policy in the future, you must force the SetRepositoryPolicy
--   operation. This is intended to prevent accidental repository lock
--   outs.
--   
--   <a>$sel:registryId:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_registryId</a> - The AWS account ID associated
--   with the registry that contains the repository. If you do not specify
--   a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_repositoryName</a> - The name of the repository
--   to receive the policy.
--   
--   <a>$sel:policyText:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicy_policyText</a> - The JSON repository policy
--   text to apply to the repository. For more information, see <a>Amazon
--   ECR Repository Policies</a> in the <i>Amazon Elastic Container
--   Registry User Guide</i>.
newSetRepositoryPolicy :: Text -> Text -> SetRepositoryPolicy

-- | <i>See:</i> <a>newSetRepositoryPolicyResponse</a> smart constructor.
data SetRepositoryPolicyResponse
SetRepositoryPolicyResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Int -> SetRepositoryPolicyResponse

-- | Create a value of <a>SetRepositoryPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicyResponse_registryId</a> - The registry ID
--   associated with the request.
--   
--   <a>$sel:repositoryName:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicyResponse_repositoryName</a> - The repository
--   name associated with the request.
--   
--   <a>$sel:policyText:SetRepositoryPolicy'</a>,
--   <a>setRepositoryPolicyResponse_policyText</a> - The JSON repository
--   policy text applied to the repository.
--   
--   <a>$sel:httpStatus:SetRepositoryPolicyResponse'</a>,
--   <a>setRepositoryPolicyResponse_httpStatus</a> - The response's http
--   status code.
newSetRepositoryPolicyResponse :: Int -> SetRepositoryPolicyResponse

-- | <i>See:</i> <a>newInitiateLayerUpload</a> smart constructor.
data InitiateLayerUpload
InitiateLayerUpload' :: Maybe Text -> Text -> InitiateLayerUpload

-- | Create a value of <a>InitiateLayerUpload</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:InitiateLayerUpload'</a>,
--   <a>initiateLayerUpload_registryId</a> - The AWS account ID associated
--   with the registry to which you intend to upload layers. If you do not
--   specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:InitiateLayerUpload'</a>,
--   <a>initiateLayerUpload_repositoryName</a> - The name of the repository
--   to which you intend to upload layers.
newInitiateLayerUpload :: Text -> InitiateLayerUpload

-- | <i>See:</i> <a>newInitiateLayerUploadResponse</a> smart constructor.
data InitiateLayerUploadResponse
InitiateLayerUploadResponse' :: Maybe Natural -> Maybe Text -> Int -> InitiateLayerUploadResponse

-- | Create a value of <a>InitiateLayerUploadResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:partSize:InitiateLayerUploadResponse'</a>,
--   <a>initiateLayerUploadResponse_partSize</a> - The size, in bytes, that
--   Amazon ECR expects future layer part uploads to be.
--   
--   <a>$sel:uploadId:InitiateLayerUploadResponse'</a>,
--   <a>initiateLayerUploadResponse_uploadId</a> - The upload ID for the
--   layer upload. This parameter is passed to further UploadLayerPart and
--   CompleteLayerUpload operations.
--   
--   <a>$sel:httpStatus:InitiateLayerUploadResponse'</a>,
--   <a>initiateLayerUploadResponse_httpStatus</a> - The response's http
--   status code.
newInitiateLayerUploadResponse :: Int -> InitiateLayerUploadResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The Amazon Resource Name (ARN) of
--   the resource from which to delete tags. Currently, the supported
--   resource is an Amazon ECR Public repository.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - The
--   keys of the tags to be removed.
newUntagResource :: Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | <i>See:</i> <a>newDescribeImageTags</a> smart constructor.
data DescribeImageTags
DescribeImageTags' :: Maybe Text -> Maybe Text -> Maybe Natural -> Text -> DescribeImageTags

-- | Create a value of <a>DescribeImageTags</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DescribeImageTags'</a>,
--   <a>describeImageTags_registryId</a> - The AWS account ID associated
--   with the public registry that contains the repository in which to
--   describe images. If you do not specify a registry, the default public
--   registry is assumed.
--   
--   <a>$sel:nextToken:DescribeImageTags'</a>,
--   <a>describeImageTags_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a previous paginated <tt>DescribeImageTags</tt> request
--   where <tt>maxResults</tt> was used and the results exceeded the value
--   of that parameter. Pagination continues from the end of the previous
--   results that returned the <tt>nextToken</tt> value. This value is
--   <tt>null</tt> when there are no more results to return. This option
--   cannot be used when you specify images with <tt>imageIds</tt>.
--   
--   <a>$sel:maxResults:DescribeImageTags'</a>,
--   <a>describeImageTags_maxResults</a> - The maximum number of repository
--   results returned by <tt>DescribeImageTags</tt> in paginated output.
--   When this parameter is used, <tt>DescribeImageTags</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeImageTags</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 1000. If
--   this parameter is not used, then <tt>DescribeImageTags</tt> returns up
--   to 100 results and a <tt>nextToken</tt> value, if applicable. This
--   option cannot be used when you specify images with <tt>imageIds</tt>.
--   
--   <a>$sel:repositoryName:DescribeImageTags'</a>,
--   <a>describeImageTags_repositoryName</a> - The name of the repository
--   that contains the image tag details to describe.
newDescribeImageTags :: Text -> DescribeImageTags

-- | <i>See:</i> <a>newDescribeImageTagsResponse</a> smart constructor.
data DescribeImageTagsResponse
DescribeImageTagsResponse' :: Maybe Text -> Maybe [ImageTagDetail] -> Int -> DescribeImageTagsResponse

-- | Create a value of <a>DescribeImageTagsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:DescribeImageTags'</a>,
--   <a>describeImageTagsResponse_nextToken</a> - The <tt>nextToken</tt>
--   value to include in a future <tt>DescribeImageTags</tt> request. When
--   the results of a <tt>DescribeImageTags</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:imageTagDetails:DescribeImageTagsResponse'</a>,
--   <a>describeImageTagsResponse_imageTagDetails</a> - The image tag
--   details for the images in the requested repository.
--   
--   <a>$sel:httpStatus:DescribeImageTagsResponse'</a>,
--   <a>describeImageTagsResponse_httpStatus</a> - The response's http
--   status code.
newDescribeImageTagsResponse :: Int -> DescribeImageTagsResponse

-- | <i>See:</i> <a>newDeleteRepository</a> smart constructor.
data DeleteRepository
DeleteRepository' :: Maybe Bool -> Maybe Text -> Text -> DeleteRepository

-- | Create a value of <a>DeleteRepository</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:force:DeleteRepository'</a>, <a>deleteRepository_force</a> -
--   If a repository contains images, forces the deletion.
--   
--   <a>$sel:registryId:DeleteRepository'</a>,
--   <a>deleteRepository_registryId</a> - The AWS account ID associated
--   with the public registry that contains the repository to delete. If
--   you do not specify a registry, the default public registry is assumed.
--   
--   <a>$sel:repositoryName:DeleteRepository'</a>,
--   <a>deleteRepository_repositoryName</a> - The name of the repository to
--   delete.
newDeleteRepository :: Text -> DeleteRepository

-- | <i>See:</i> <a>newDeleteRepositoryResponse</a> smart constructor.
data DeleteRepositoryResponse
DeleteRepositoryResponse' :: Maybe Repository -> Int -> DeleteRepositoryResponse

-- | Create a value of <a>DeleteRepositoryResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repository:DeleteRepositoryResponse'</a>,
--   <a>deleteRepositoryResponse_repository</a> - The repository that was
--   deleted.
--   
--   <a>$sel:httpStatus:DeleteRepositoryResponse'</a>,
--   <a>deleteRepositoryResponse_httpStatus</a> - The response's http
--   status code.
newDeleteRepositoryResponse :: Int -> DeleteRepositoryResponse

-- | <i>See:</i> <a>newPutImage</a> smart constructor.
data PutImage
PutImage' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> PutImage

-- | Create a value of <a>PutImage</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:PutImage'</a>, <a>putImage_registryId</a> - The AWS
--   account ID associated with the public registry that contains the
--   repository in which to put the image. If you do not specify a
--   registry, the default public registry is assumed.
--   
--   <a>$sel:imageManifestMediaType:PutImage'</a>,
--   <a>putImage_imageManifestMediaType</a> - The media type of the image
--   manifest. If you push an image manifest that does not contain the
--   <tt>mediaType</tt> field, you must specify the
--   <tt>imageManifestMediaType</tt> in the request.
--   
--   <a>$sel:imageDigest:PutImage'</a>, <a>putImage_imageDigest</a> - The
--   image digest of the image manifest corresponding to the image.
--   
--   <a>$sel:imageTag:PutImage'</a>, <a>putImage_imageTag</a> - The tag to
--   associate with the image. This parameter is required for images that
--   use the Docker Image Manifest V2 Schema 2 or Open Container Initiative
--   (OCI) formats.
--   
--   <a>$sel:repositoryName:PutImage'</a>, <a>putImage_repositoryName</a> -
--   The name of the repository in which to put the image.
--   
--   <a>$sel:imageManifest:PutImage'</a>, <a>putImage_imageManifest</a> -
--   The image manifest corresponding to the image to be uploaded.
newPutImage :: Text -> Text -> PutImage

-- | <i>See:</i> <a>newPutImageResponse</a> smart constructor.
data PutImageResponse
PutImageResponse' :: Maybe Image -> Int -> PutImageResponse

-- | Create a value of <a>PutImageResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:image:PutImageResponse'</a>, <a>putImageResponse_image</a> -
--   Details of the image uploaded.
--   
--   <a>$sel:httpStatus:PutImageResponse'</a>,
--   <a>putImageResponse_httpStatus</a> - The response's http status code.
newPutImageResponse :: Int -> PutImageResponse

-- | <i>See:</i> <a>newGetAuthorizationToken</a> smart constructor.
data GetAuthorizationToken
GetAuthorizationToken' :: GetAuthorizationToken

-- | Create a value of <a>GetAuthorizationToken</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newGetAuthorizationToken :: GetAuthorizationToken

-- | <i>See:</i> <a>newGetAuthorizationTokenResponse</a> smart constructor.
data GetAuthorizationTokenResponse
GetAuthorizationTokenResponse' :: Maybe AuthorizationData -> Int -> GetAuthorizationTokenResponse

-- | Create a value of <a>GetAuthorizationTokenResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:authorizationData:GetAuthorizationTokenResponse'</a>,
--   <a>getAuthorizationTokenResponse_authorizationData</a> - An
--   authorization token data object that corresponds to a public registry.
--   
--   <a>$sel:httpStatus:GetAuthorizationTokenResponse'</a>,
--   <a>getAuthorizationTokenResponse_httpStatus</a> - The response's http
--   status code.
newGetAuthorizationTokenResponse :: Int -> GetAuthorizationTokenResponse

-- | <i>See:</i> <a>newDescribeImages</a> smart constructor.
data DescribeImages
DescribeImages' :: Maybe Text -> Maybe (NonEmpty ImageIdentifier) -> Maybe Text -> Maybe Natural -> Text -> DescribeImages

-- | Create a value of <a>DescribeImages</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:DescribeImages'</a>,
--   <a>describeImages_registryId</a> - The AWS account ID associated with
--   the public registry that contains the repository in which to describe
--   images. If you do not specify a registry, the default public registry
--   is assumed.
--   
--   <a>$sel:imageIds:DescribeImages'</a>, <a>describeImages_imageIds</a> -
--   The list of image IDs for the requested repository.
--   
--   <a>$sel:nextToken:DescribeImages'</a>, <a>describeImages_nextToken</a>
--   - The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeImages</tt> request where <tt>maxResults</tt> was used and
--   the results exceeded the value of that parameter. Pagination continues
--   from the end of the previous results that returned the
--   <tt>nextToken</tt> value. This value is <tt>null</tt> when there are
--   no more results to return. This option cannot be used when you specify
--   images with <tt>imageIds</tt>.
--   
--   <a>$sel:maxResults:DescribeImages'</a>,
--   <a>describeImages_maxResults</a> - The maximum number of repository
--   results returned by <tt>DescribeImages</tt> in paginated output. When
--   this parameter is used, <tt>DescribeImages</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>DescribeImages</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 1000. If this parameter is not used, then
--   <tt>DescribeImages</tt> returns up to 100 results and a
--   <tt>nextToken</tt> value, if applicable. This option cannot be used
--   when you specify images with <tt>imageIds</tt>.
--   
--   <a>$sel:repositoryName:DescribeImages'</a>,
--   <a>describeImages_repositoryName</a> - The repository that contains
--   the images to describe.
newDescribeImages :: Text -> DescribeImages

-- | <i>See:</i> <a>newDescribeImagesResponse</a> smart constructor.
data DescribeImagesResponse
DescribeImagesResponse' :: Maybe [ImageDetail] -> Maybe Text -> Int -> DescribeImagesResponse

-- | Create a value of <a>DescribeImagesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDetails:DescribeImagesResponse'</a>,
--   <a>describeImagesResponse_imageDetails</a> - A list of ImageDetail
--   objects that contain data about the image.
--   
--   <a>$sel:nextToken:DescribeImages'</a>,
--   <a>describeImagesResponse_nextToken</a> - The <tt>nextToken</tt> value
--   to include in a future <tt>DescribeImages</tt> request. When the
--   results of a <tt>DescribeImages</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:httpStatus:DescribeImagesResponse'</a>,
--   <a>describeImagesResponse_httpStatus</a> - The response's http status
--   code.
newDescribeImagesResponse :: Int -> DescribeImagesResponse
newtype ImageFailureCode
ImageFailureCode' :: Text -> ImageFailureCode
[fromImageFailureCode] :: ImageFailureCode -> Text
pattern ImageFailureCode_ImageNotFound :: ImageFailureCode
pattern ImageFailureCode_ImageReferencedByManifestList :: ImageFailureCode
pattern ImageFailureCode_ImageTagDoesNotMatchDigest :: ImageFailureCode
pattern ImageFailureCode_InvalidImageDigest :: ImageFailureCode
pattern ImageFailureCode_InvalidImageTag :: ImageFailureCode
pattern ImageFailureCode_KmsError :: ImageFailureCode
pattern ImageFailureCode_MissingDigestAndTag :: ImageFailureCode
newtype LayerAvailability
LayerAvailability' :: Text -> LayerAvailability
[fromLayerAvailability] :: LayerAvailability -> Text
pattern LayerAvailability_AVAILABLE :: LayerAvailability
pattern LayerAvailability_UNAVAILABLE :: LayerAvailability
newtype LayerFailureCode
LayerFailureCode' :: Text -> LayerFailureCode
[fromLayerFailureCode] :: LayerFailureCode -> Text
pattern LayerFailureCode_InvalidLayerDigest :: LayerFailureCode
pattern LayerFailureCode_MissingLayerDigest :: LayerFailureCode
newtype RegistryAliasStatus
RegistryAliasStatus' :: Text -> RegistryAliasStatus
[fromRegistryAliasStatus] :: RegistryAliasStatus -> Text
pattern RegistryAliasStatus_ACTIVE :: RegistryAliasStatus
pattern RegistryAliasStatus_PENDING :: RegistryAliasStatus
pattern RegistryAliasStatus_REJECTED :: RegistryAliasStatus

-- | An authorization token data object that corresponds to a public
--   registry.
--   
--   <i>See:</i> <a>newAuthorizationData</a> smart constructor.
data AuthorizationData
AuthorizationData' :: Maybe POSIX -> Maybe Text -> AuthorizationData

-- | Create a value of <a>AuthorizationData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expiresAt:AuthorizationData'</a>,
--   <a>authorizationData_expiresAt</a> - The Unix time in seconds and
--   milliseconds when the authorization token expires. Authorization
--   tokens are valid for 12 hours.
--   
--   <a>$sel:authorizationToken:AuthorizationData'</a>,
--   <a>authorizationData_authorizationToken</a> - A base64-encoded string
--   that contains authorization data for a public Amazon ECR registry.
--   When the string is decoded, it is presented in the format
--   <tt>user:password</tt> for public registry authentication using
--   <tt>docker login</tt>.
newAuthorizationData :: AuthorizationData

-- | An object representing an Amazon ECR image.
--   
--   <i>See:</i> <a>newImage</a> smart constructor.
data Image
Image' :: Maybe Text -> Maybe Text -> Maybe ImageIdentifier -> Maybe Text -> Maybe Text -> Image

-- | Create a value of <a>Image</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:Image'</a>, <a>image_registryId</a> - The AWS
--   account ID associated with the registry containing the image.
--   
--   <a>$sel:imageManifestMediaType:Image'</a>,
--   <a>image_imageManifestMediaType</a> - The manifest media type of the
--   image.
--   
--   <a>$sel:imageId:Image'</a>, <a>image_imageId</a> - An object
--   containing the image tag and image digest associated with an image.
--   
--   <a>$sel:repositoryName:Image'</a>, <a>image_repositoryName</a> - The
--   name of the repository associated with the image.
--   
--   <a>$sel:imageManifest:Image'</a>, <a>image_imageManifest</a> - The
--   image manifest associated with the image.
newImage :: Image

-- | An object that describes an image returned by a DescribeImages
--   operation.
--   
--   <i>See:</i> <a>newImageDetail</a> smart constructor.
data ImageDetail
ImageDetail' :: Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Integer -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> ImageDetail

-- | Create a value of <a>ImageDetail</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:ImageDetail'</a>, <a>imageDetail_registryId</a> -
--   The AWS account ID associated with the public registry to which this
--   image belongs.
--   
--   <a>$sel:imageTags:ImageDetail'</a>, <a>imageDetail_imageTags</a> - The
--   list of tags associated with this image.
--   
--   <a>$sel:imageManifestMediaType:ImageDetail'</a>,
--   <a>imageDetail_imageManifestMediaType</a> - The media type of the
--   image manifest.
--   
--   <a>$sel:imageSizeInBytes:ImageDetail'</a>,
--   <a>imageDetail_imageSizeInBytes</a> - The size, in bytes, of the image
--   in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
--   
--   <a>$sel:imageDigest:ImageDetail'</a>, <a>imageDetail_imageDigest</a> -
--   The <tt>sha256</tt> digest of the image manifest.
--   
--   <a>$sel:artifactMediaType:ImageDetail'</a>,
--   <a>imageDetail_artifactMediaType</a> - The artifact media type of the
--   image.
--   
--   <a>$sel:imagePushedAt:ImageDetail'</a>,
--   <a>imageDetail_imagePushedAt</a> - The date and time, expressed in
--   standard JavaScript date format, at which the current image was pushed
--   to the repository.
--   
--   <a>$sel:repositoryName:ImageDetail'</a>,
--   <a>imageDetail_repositoryName</a> - The name of the repository to
--   which this image belongs.
newImageDetail :: ImageDetail

-- | An object representing an Amazon ECR image failure.
--   
--   <i>See:</i> <a>newImageFailure</a> smart constructor.
data ImageFailure
ImageFailure' :: Maybe Text -> Maybe ImageFailureCode -> Maybe ImageIdentifier -> ImageFailure

-- | Create a value of <a>ImageFailure</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureReason:ImageFailure'</a>,
--   <a>imageFailure_failureReason</a> - The reason for the failure.
--   
--   <a>$sel:failureCode:ImageFailure'</a>, <a>imageFailure_failureCode</a>
--   - The code associated with the failure.
--   
--   <a>$sel:imageId:ImageFailure'</a>, <a>imageFailure_imageId</a> - The
--   image ID associated with the failure.
newImageFailure :: ImageFailure

-- | An object with identifying information for an Amazon ECR image.
--   
--   <i>See:</i> <a>newImageIdentifier</a> smart constructor.
data ImageIdentifier
ImageIdentifier' :: Maybe Text -> Maybe Text -> ImageIdentifier

-- | Create a value of <a>ImageIdentifier</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageDigest:ImageIdentifier'</a>,
--   <a>imageIdentifier_imageDigest</a> - The <tt>sha256</tt> digest of the
--   image manifest.
--   
--   <a>$sel:imageTag:ImageIdentifier'</a>, <a>imageIdentifier_imageTag</a>
--   - The tag used for the image.
newImageIdentifier :: ImageIdentifier

-- | An object representing the image tag details for an image.
--   
--   <i>See:</i> <a>newImageTagDetail</a> smart constructor.
data ImageTagDetail
ImageTagDetail' :: Maybe POSIX -> Maybe ReferencedImageDetail -> Maybe Text -> ImageTagDetail

-- | Create a value of <a>ImageTagDetail</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:createdAt:ImageTagDetail'</a>, <a>imageTagDetail_createdAt</a>
--   - The time stamp indicating when the image tag was created.
--   
--   <a>$sel:imageDetail:ImageTagDetail'</a>,
--   <a>imageTagDetail_imageDetail</a> - An object that describes the
--   details of an image.
--   
--   <a>$sel:imageTag:ImageTagDetail'</a>, <a>imageTagDetail_imageTag</a> -
--   The tag associated with the image.
newImageTagDetail :: ImageTagDetail

-- | An object representing an Amazon ECR image layer.
--   
--   <i>See:</i> <a>newLayer</a> smart constructor.
data Layer
Layer' :: Maybe Text -> Maybe Text -> Maybe Integer -> Maybe LayerAvailability -> Layer

-- | Create a value of <a>Layer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mediaType:Layer'</a>, <a>layer_mediaType</a> - The media type
--   of the layer, such as
--   <tt>application/vnd.docker.image.rootfs.diff.tar.gzip</tt> or
--   <tt>application/vnd.oci.image.layer.v1.tar+gzip</tt>.
--   
--   <a>$sel:layerDigest:Layer'</a>, <a>layer_layerDigest</a> - The
--   <tt>sha256</tt> digest of the image layer.
--   
--   <a>$sel:layerSize:Layer'</a>, <a>layer_layerSize</a> - The size, in
--   bytes, of the image layer.
--   
--   <a>$sel:layerAvailability:Layer'</a>, <a>layer_layerAvailability</a> -
--   The availability status of the image layer.
newLayer :: Layer

-- | An object representing an Amazon ECR image layer failure.
--   
--   <i>See:</i> <a>newLayerFailure</a> smart constructor.
data LayerFailure
LayerFailure' :: Maybe Text -> Maybe LayerFailureCode -> Maybe Text -> LayerFailure

-- | Create a value of <a>LayerFailure</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failureReason:LayerFailure'</a>,
--   <a>layerFailure_failureReason</a> - The reason for the failure.
--   
--   <a>$sel:failureCode:LayerFailure'</a>, <a>layerFailure_failureCode</a>
--   - The failure code associated with the failure.
--   
--   <a>$sel:layerDigest:LayerFailure'</a>, <a>layerFailure_layerDigest</a>
--   - The layer digest associated with the failure.
newLayerFailure :: LayerFailure

-- | An object that describes the image tag details returned by a
--   DescribeImageTags action.
--   
--   <i>See:</i> <a>newReferencedImageDetail</a> smart constructor.
data ReferencedImageDetail
ReferencedImageDetail' :: Maybe Text -> Maybe Integer -> Maybe Text -> Maybe Text -> Maybe POSIX -> ReferencedImageDetail

-- | Create a value of <a>ReferencedImageDetail</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:imageManifestMediaType:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_imageManifestMediaType</a> - The media type
--   of the image manifest.
--   
--   <a>$sel:imageSizeInBytes:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_imageSizeInBytes</a> - The size, in bytes, of
--   the image in the repository.
--   
--   If the image is a manifest list, this will be the max size of all
--   manifests in the list.
--   
--   Beginning with Docker version 1.9, the Docker client compresses image
--   layers before pushing them to a V2 Docker registry. The output of the
--   <tt>docker images</tt> command shows the uncompressed image size, so
--   it may return a larger image size than the image sizes returned by
--   DescribeImages.
--   
--   <a>$sel:imageDigest:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_imageDigest</a> - The <tt>sha256</tt> digest
--   of the image manifest.
--   
--   <a>$sel:artifactMediaType:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_artifactMediaType</a> - The artifact media
--   type of the image.
--   
--   <a>$sel:imagePushedAt:ReferencedImageDetail'</a>,
--   <a>referencedImageDetail_imagePushedAt</a> - The date and time,
--   expressed in standard JavaScript date format, at which the current
--   image tag was pushed to the repository.
newReferencedImageDetail :: ReferencedImageDetail

-- | The details of a public registry.
--   
--   <i>See:</i> <a>newRegistry</a> smart constructor.
data Registry
Registry' :: Text -> Text -> Text -> Bool -> [RegistryAlias] -> Registry

-- | Create a value of <a>Registry</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryId:Registry'</a>, <a>registry_registryId</a> - The AWS
--   account ID associated with the registry. If you do not specify a
--   registry, the default public registry is assumed.
--   
--   <a>$sel:registryArn:Registry'</a>, <a>registry_registryArn</a> - The
--   Amazon Resource Name (ARN) of the public registry.
--   
--   <a>$sel:registryUri:Registry'</a>, <a>registry_registryUri</a> - The
--   URI of a public registry. The URI contains a universal prefix and the
--   registry alias.
--   
--   <a>$sel:verified:Registry'</a>, <a>registry_verified</a> - Whether the
--   account is verified. This indicates whether the account is an AWS
--   Marketplace vendor. If an account is verified, each public repository
--   will received a verified account badge on the Amazon ECR Public
--   Gallery.
--   
--   <a>$sel:aliases:Registry'</a>, <a>registry_aliases</a> - An array of
--   objects representing the aliases for a public registry.
newRegistry :: Text -> Text -> Text -> Bool -> Registry

-- | An object representing the aliases for a public registry. A public
--   registry is given an alias upon creation but a custom alias can be set
--   using the Amazon ECR console. For more information, see
--   <a>Registries</a> in the <i>Amazon Elastic Container Registry User
--   Guide</i>.
--   
--   <i>See:</i> <a>newRegistryAlias</a> smart constructor.
data RegistryAlias
RegistryAlias' :: Text -> RegistryAliasStatus -> Bool -> Bool -> RegistryAlias

-- | Create a value of <a>RegistryAlias</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:RegistryAlias'</a>, <a>registryAlias_name</a> - The name
--   of the registry alias.
--   
--   <a>$sel:status:RegistryAlias'</a>, <a>registryAlias_status</a> - The
--   status of the registry alias.
--   
--   <a>$sel:primaryRegistryAlias:RegistryAlias'</a>,
--   <a>registryAlias_primaryRegistryAlias</a> - Whether or not the
--   registry alias is the primary alias for the registry. If true, the
--   alias is the primary registry alias and is displayed in both the
--   repository URL and the image URI used in the <tt>docker pull</tt>
--   commands on the Amazon ECR Public Gallery.
--   
--   A registry alias that is not the primary registry alias can be used in
--   the repository URI in a <tt>docker pull</tt> command.
--   
--   <a>$sel:defaultRegistryAlias:RegistryAlias'</a>,
--   <a>registryAlias_defaultRegistryAlias</a> - Whether or not the
--   registry alias is the default alias for the registry. When the first
--   public repository is created, your public registry is assigned a
--   default registry alias.
newRegistryAlias :: Text -> RegistryAliasStatus -> Bool -> Bool -> RegistryAlias

-- | The metadata for a public registry.
--   
--   <i>See:</i> <a>newRegistryCatalogData</a> smart constructor.
data RegistryCatalogData
RegistryCatalogData' :: Maybe Text -> RegistryCatalogData

-- | Create a value of <a>RegistryCatalogData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:displayName:RegistryCatalogData'</a>,
--   <a>registryCatalogData_displayName</a> - The display name for a public
--   registry. This appears on the Amazon ECR Public Gallery.
--   
--   Only accounts that have the verified account badge can have a registry
--   display name.
newRegistryCatalogData :: RegistryCatalogData

-- | An object representing a repository.
--   
--   <i>See:</i> <a>newRepository</a> smart constructor.
data Repository
Repository' :: Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Repository

-- | Create a value of <a>Repository</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:repositoryArn:Repository'</a>, <a>repository_repositoryArn</a>
--   - The Amazon Resource Name (ARN) that identifies the repository. The
--   ARN contains the <tt>arn:aws:ecr</tt> namespace, followed by the
--   region of the repository, AWS account ID of the repository owner,
--   repository namespace, and repository name. For example,
--   <tt>arn:aws:ecr:region:012345678910:repository/test</tt>.
--   
--   <a>$sel:createdAt:Repository'</a>, <a>repository_createdAt</a> - The
--   date and time, in JavaScript date format, when the repository was
--   created.
--   
--   <a>$sel:registryId:Repository'</a>, <a>repository_registryId</a> - The
--   AWS account ID associated with the public registry that contains the
--   repository.
--   
--   <a>$sel:repositoryUri:Repository'</a>, <a>repository_repositoryUri</a>
--   - The URI for the repository. You can use this URI for container image
--   <tt>push</tt> and <tt>pull</tt> operations.
--   
--   <a>$sel:repositoryName:Repository'</a>,
--   <a>repository_repositoryName</a> - The name of the repository.
newRepository :: Repository

-- | The catalog data for a repository. This data is publicly visible in
--   the Amazon ECR Public Gallery.
--   
--   <i>See:</i> <a>newRepositoryCatalogData</a> smart constructor.
data RepositoryCatalogData
RepositoryCatalogData' :: Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe [Text] -> Maybe Text -> RepositoryCatalogData

-- | Create a value of <a>RepositoryCatalogData</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logoUrl:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_logoUrl</a> - The URL containing the logo
--   associated with the repository.
--   
--   <a>$sel:architectures:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_architectures</a> - The architecture tags
--   that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
--   
--   <a>$sel:usageText:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_usageText</a> - The longform usage details of
--   the contents of the repository. The usage text provides context for
--   users of the repository.
--   
--   <a>$sel:marketplaceCertified:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_marketplaceCertified</a> - Whether or not the
--   repository is certified by AWS Marketplace.
--   
--   <a>$sel:aboutText:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_aboutText</a> - The longform description of
--   the contents of the repository. This text appears in the repository
--   details on the Amazon ECR Public Gallery.
--   
--   <a>$sel:operatingSystems:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_operatingSystems</a> - The operating system
--   tags that are associated with the repository.
--   
--   Only supported operating system tags appear publicly in the Amazon ECR
--   Public Gallery. For more information, see RepositoryCatalogDataInput.
--   
--   <a>$sel:description:RepositoryCatalogData'</a>,
--   <a>repositoryCatalogData_description</a> - The short description of
--   the repository.
newRepositoryCatalogData :: RepositoryCatalogData

-- | An object containing the catalog data for a repository. This data is
--   publicly visible in the Amazon ECR Public Gallery.
--   
--   <i>See:</i> <a>newRepositoryCatalogDataInput</a> smart constructor.
data RepositoryCatalogDataInput
RepositoryCatalogDataInput' :: Maybe Base64 -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Text -> RepositoryCatalogDataInput

-- | Create a value of <a>RepositoryCatalogDataInput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logoImageBlob:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_logoImageBlob</a> - The base64-encoded
--   repository logo payload.
--   
--   The repository logo is only publicly visible in the Amazon ECR Public
--   Gallery for verified accounts.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:architectures:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_architectures</a> - The system
--   architecture that the images in the repository are compatible with. On
--   the Amazon ECR Public Gallery, the following supported architectures
--   will appear as badges on the repository and are used as search
--   filters.
--   
--   <ul>
--   <li><pre>Linux</pre></li>
--   <li><pre>Windows</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
--   
--   <a>$sel:usageText:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_usageText</a> - Detailed information on
--   how to use the contents of the repository. It is publicly visible in
--   the Amazon ECR Public Gallery. The usage text provides context,
--   support information, and additional usage details for users of the
--   repository. The text must be in markdown format.
--   
--   <a>$sel:aboutText:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_aboutText</a> - A detailed description
--   of the contents of the repository. It is publicly visible in the
--   Amazon ECR Public Gallery. The text must be in markdown format.
--   
--   <a>$sel:operatingSystems:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_operatingSystems</a> - The operating
--   systems that the images in the repository are compatible with. On the
--   Amazon ECR Public Gallery, the following supported operating systems
--   will appear as badges on the repository and are used as search
--   filters.
--   
--   <ul>
--   <li><pre>ARM</pre></li>
--   <li><pre>ARM 64</pre></li>
--   <li><pre>x86</pre></li>
--   <li><pre>x86-64</pre></li>
--   </ul>
--   
--   If an unsupported tag is added to your repository catalog data, it
--   will be associated with the repository and can be retrieved using the
--   API but will not be discoverable in the Amazon ECR Public Gallery.
--   
--   <a>$sel:description:RepositoryCatalogDataInput'</a>,
--   <a>repositoryCatalogDataInput_description</a> - A short description of
--   the contents of the repository. This text appears in both the image
--   details and also when searching for repositories on the Amazon ECR
--   Public Gallery.
newRepositoryCatalogDataInput :: RepositoryCatalogDataInput

-- | The metadata that you apply to a resource to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. Tag keys can have a maximum character length of
--   128 characters, and tag values can have a maximum length of 256
--   characters.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The optional part of a
--   key-value pair that make up a tag. A <tt>value</tt> acts as a
--   descriptor within a tag category (key).
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - One part of a key-value pair
--   that make up a tag. A <tt>key</tt> is a general label that acts like a
--   category for more specific tag values.
newTag :: Tag
