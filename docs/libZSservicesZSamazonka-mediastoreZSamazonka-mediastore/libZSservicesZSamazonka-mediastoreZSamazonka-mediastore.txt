-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-mediastoreZSamazonka-mediastore
@version 2.0


module Amazonka.MediaStore.Types.ContainerLevelMetrics
newtype ContainerLevelMetrics
ContainerLevelMetrics' :: Text -> ContainerLevelMetrics
[fromContainerLevelMetrics] :: ContainerLevelMetrics -> Text
pattern ContainerLevelMetrics_DISABLED :: ContainerLevelMetrics
pattern ContainerLevelMetrics_ENABLED :: ContainerLevelMetrics
instance Amazonka.Data.XML.ToXML Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Amazonka.Data.XML.FromXML Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Amazonka.Data.Headers.ToHeader Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Amazonka.Data.Log.ToLog Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Amazonka.Data.ByteString.ToByteString Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Amazonka.Data.Text.ToText Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Amazonka.Data.Text.FromText Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Control.DeepSeq.NFData Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance GHC.Generics.Generic Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance GHC.Classes.Ord Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance GHC.Classes.Eq Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance GHC.Read.Read Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics
instance GHC.Show.Show Amazonka.MediaStore.Types.ContainerLevelMetrics.ContainerLevelMetrics


module Amazonka.MediaStore.Types.ContainerStatus
newtype ContainerStatus
ContainerStatus' :: Text -> ContainerStatus
[fromContainerStatus] :: ContainerStatus -> Text
pattern ContainerStatus_ACTIVE :: ContainerStatus
pattern ContainerStatus_CREATING :: ContainerStatus
pattern ContainerStatus_DELETING :: ContainerStatus
instance Amazonka.Data.XML.ToXML Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Amazonka.Data.XML.FromXML Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Amazonka.Data.Log.ToLog Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Amazonka.Data.Text.ToText Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Amazonka.Data.Text.FromText Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Control.DeepSeq.NFData Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance GHC.Generics.Generic Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance GHC.Classes.Ord Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance GHC.Classes.Eq Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance GHC.Read.Read Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus
instance GHC.Show.Show Amazonka.MediaStore.Types.ContainerStatus.ContainerStatus


module Amazonka.MediaStore.Types.Container

-- | This section describes operations that you can perform on an AWS
--   Elemental MediaStore container.
--   
--   <i>See:</i> <a>newContainer</a> smart constructor.
data Container
Container' :: Maybe POSIX -> Maybe ContainerStatus -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Container

-- | Unix timestamp.
[$sel:creationTime:Container'] :: Container -> Maybe POSIX

-- | The status of container creation or deletion. The status is one of the
--   following: <tt>CREATING</tt>, <tt>ACTIVE</tt>, or <tt>DELETING</tt>.
--   While the service is creating the container, the status is
--   <tt>CREATING</tt>. When the endpoint is available, the status changes
--   to <tt>ACTIVE</tt>.
[$sel:status:Container'] :: Container -> Maybe ContainerStatus

-- | The state of access logging on the container. This value is
--   <tt>false</tt> by default, indicating that AWS Elemental MediaStore
--   does not send access logs to Amazon CloudWatch Logs. When you enable
--   access logging on the container, MediaStore changes this value to
--   <tt>true</tt>, indicating that the service delivers access logs for
--   objects stored in that container to CloudWatch Logs.
[$sel:accessLoggingEnabled:Container'] :: Container -> Maybe Bool

-- | The Amazon Resource Name (ARN) of the container. The ARN has the
--   following format:
--   
--   arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;
--   
--   For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
[$sel:arn:Container'] :: Container -> Maybe Text

-- | The name of the container.
[$sel:name:Container'] :: Container -> Maybe Text

-- | The DNS endpoint of the container. Use the endpoint to identify the
--   specific container when sending requests to the data plane. The
--   service assigns this value when the container is created. Once the
--   value has been assigned, it does not change.
[$sel:endpoint:Container'] :: Container -> Maybe Text

-- | Create a value of <a>Container</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:Container'</a>, <a>container_creationTime</a> -
--   Unix timestamp.
--   
--   <a>$sel:status:Container'</a>, <a>container_status</a> - The status of
--   container creation or deletion. The status is one of the following:
--   <tt>CREATING</tt>, <tt>ACTIVE</tt>, or <tt>DELETING</tt>. While the
--   service is creating the container, the status is <tt>CREATING</tt>.
--   When the endpoint is available, the status changes to <tt>ACTIVE</tt>.
--   
--   <a>$sel:accessLoggingEnabled:Container'</a>,
--   <a>container_accessLoggingEnabled</a> - The state of access logging on
--   the container. This value is <tt>false</tt> by default, indicating
--   that AWS Elemental MediaStore does not send access logs to Amazon
--   CloudWatch Logs. When you enable access logging on the container,
--   MediaStore changes this value to <tt>true</tt>, indicating that the
--   service delivers access logs for objects stored in that container to
--   CloudWatch Logs.
--   
--   <a>$sel:arn:Container'</a>, <a>container_arn</a> - The Amazon Resource
--   Name (ARN) of the container. The ARN has the following format:
--   
--   arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;
--   
--   For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
--   
--   <a>$sel:name:Container'</a>, <a>container_name</a> - The name of the
--   container.
--   
--   <a>$sel:endpoint:Container'</a>, <a>container_endpoint</a> - The DNS
--   endpoint of the container. Use the endpoint to identify the specific
--   container when sending requests to the data plane. The service assigns
--   this value when the container is created. Once the value has been
--   assigned, it does not change.
newContainer :: Container

-- | Unix timestamp.
container_creationTime :: Lens' Container (Maybe UTCTime)

-- | The status of container creation or deletion. The status is one of the
--   following: <tt>CREATING</tt>, <tt>ACTIVE</tt>, or <tt>DELETING</tt>.
--   While the service is creating the container, the status is
--   <tt>CREATING</tt>. When the endpoint is available, the status changes
--   to <tt>ACTIVE</tt>.
container_status :: Lens' Container (Maybe ContainerStatus)

-- | The state of access logging on the container. This value is
--   <tt>false</tt> by default, indicating that AWS Elemental MediaStore
--   does not send access logs to Amazon CloudWatch Logs. When you enable
--   access logging on the container, MediaStore changes this value to
--   <tt>true</tt>, indicating that the service delivers access logs for
--   objects stored in that container to CloudWatch Logs.
container_accessLoggingEnabled :: Lens' Container (Maybe Bool)

-- | The Amazon Resource Name (ARN) of the container. The ARN has the
--   following format:
--   
--   arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;
--   
--   For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
container_arn :: Lens' Container (Maybe Text)

-- | The name of the container.
container_name :: Lens' Container (Maybe Text)

-- | The DNS endpoint of the container. Use the endpoint to identify the
--   specific container when sending requests to the data plane. The
--   service assigns this value when the container is created. Once the
--   value has been assigned, it does not change.
container_endpoint :: Lens' Container (Maybe Text)
instance GHC.Generics.Generic Amazonka.MediaStore.Types.Container.Container
instance GHC.Show.Show Amazonka.MediaStore.Types.Container.Container
instance GHC.Read.Read Amazonka.MediaStore.Types.Container.Container
instance GHC.Classes.Eq Amazonka.MediaStore.Types.Container.Container
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MediaStore.Types.Container.Container
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.Types.Container.Container
instance Control.DeepSeq.NFData Amazonka.MediaStore.Types.Container.Container


module Amazonka.MediaStore.Types.MethodName
newtype MethodName
MethodName' :: Text -> MethodName
[fromMethodName] :: MethodName -> Text
pattern MethodName_DELETE :: MethodName
pattern MethodName_GET :: MethodName
pattern MethodName_HEAD :: MethodName
pattern MethodName_PUT :: MethodName
instance Amazonka.Data.XML.ToXML Amazonka.MediaStore.Types.MethodName.MethodName
instance Amazonka.Data.XML.FromXML Amazonka.MediaStore.Types.MethodName.MethodName
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.MediaStore.Types.MethodName.MethodName
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.Types.MethodName.MethodName
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.MediaStore.Types.MethodName.MethodName
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MediaStore.Types.MethodName.MethodName
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.Types.MethodName.MethodName
instance Amazonka.Data.Headers.ToHeader Amazonka.MediaStore.Types.MethodName.MethodName
instance Amazonka.Data.Log.ToLog Amazonka.MediaStore.Types.MethodName.MethodName
instance Amazonka.Data.ByteString.ToByteString Amazonka.MediaStore.Types.MethodName.MethodName
instance Amazonka.Data.Text.ToText Amazonka.MediaStore.Types.MethodName.MethodName
instance Amazonka.Data.Text.FromText Amazonka.MediaStore.Types.MethodName.MethodName
instance Control.DeepSeq.NFData Amazonka.MediaStore.Types.MethodName.MethodName
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.Types.MethodName.MethodName
instance GHC.Generics.Generic Amazonka.MediaStore.Types.MethodName.MethodName
instance GHC.Classes.Ord Amazonka.MediaStore.Types.MethodName.MethodName
instance GHC.Classes.Eq Amazonka.MediaStore.Types.MethodName.MethodName
instance GHC.Read.Read Amazonka.MediaStore.Types.MethodName.MethodName
instance GHC.Show.Show Amazonka.MediaStore.Types.MethodName.MethodName


module Amazonka.MediaStore.Types.CorsRule

-- | A rule for a CORS policy. You can add up to 100 rules to a CORS
--   policy. If more than one rule applies, the service uses the first
--   applicable rule listed.
--   
--   <i>See:</i> <a>newCorsRule</a> smart constructor.
data CorsRule
CorsRule' :: Maybe (NonEmpty MethodName) -> Maybe Natural -> Maybe [Text] -> NonEmpty Text -> [Text] -> CorsRule

-- | Identifies an HTTP method that the origin that is specified in the
--   rule is allowed to execute.
--   
--   Each CORS rule must contain at least one <tt>AllowedMethods</tt> and
--   one <tt>AllowedOrigins</tt> element.
[$sel:allowedMethods:CorsRule'] :: CorsRule -> Maybe (NonEmpty MethodName)

-- | The time in seconds that your browser caches the preflight response
--   for the specified resource.
--   
--   A CORS rule can have only one <tt>MaxAgeSeconds</tt> element.
[$sel:maxAgeSeconds:CorsRule'] :: CorsRule -> Maybe Natural

-- | One or more headers in the response that you want users to be able to
--   access from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   This element is optional for each rule.
[$sel:exposeHeaders:CorsRule'] :: CorsRule -> Maybe [Text]

-- | One or more response headers that you want users to be able to access
--   from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   Each CORS rule must have at least one <tt>AllowedOrigins</tt> element.
--   The string value can include only one wildcard character (*), for
--   example, http://*.example.com. Additionally, you can specify only one
--   wildcard character to allow cross-origin access for all origins.
[$sel:allowedOrigins:CorsRule'] :: CorsRule -> NonEmpty Text

-- | Specifies which headers are allowed in a preflight <tt>OPTIONS</tt>
--   request through the <tt>Access-Control-Request-Headers</tt> header.
--   Each header name that is specified in
--   <tt>Access-Control-Request-Headers</tt> must have a corresponding
--   entry in the rule. Only the headers that were requested are sent back.
--   
--   This element can contain only one wildcard character (*).
[$sel:allowedHeaders:CorsRule'] :: CorsRule -> [Text]

-- | Create a value of <a>CorsRule</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:allowedMethods:CorsRule'</a>, <a>corsRule_allowedMethods</a> -
--   Identifies an HTTP method that the origin that is specified in the
--   rule is allowed to execute.
--   
--   Each CORS rule must contain at least one <tt>AllowedMethods</tt> and
--   one <tt>AllowedOrigins</tt> element.
--   
--   <a>$sel:maxAgeSeconds:CorsRule'</a>, <a>corsRule_maxAgeSeconds</a> -
--   The time in seconds that your browser caches the preflight response
--   for the specified resource.
--   
--   A CORS rule can have only one <tt>MaxAgeSeconds</tt> element.
--   
--   <a>$sel:exposeHeaders:CorsRule'</a>, <a>corsRule_exposeHeaders</a> -
--   One or more headers in the response that you want users to be able to
--   access from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   This element is optional for each rule.
--   
--   <a>$sel:allowedOrigins:CorsRule'</a>, <a>corsRule_allowedOrigins</a> -
--   One or more response headers that you want users to be able to access
--   from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   Each CORS rule must have at least one <tt>AllowedOrigins</tt> element.
--   The string value can include only one wildcard character (*), for
--   example, http://*.example.com. Additionally, you can specify only one
--   wildcard character to allow cross-origin access for all origins.
--   
--   <a>$sel:allowedHeaders:CorsRule'</a>, <a>corsRule_allowedHeaders</a> -
--   Specifies which headers are allowed in a preflight <tt>OPTIONS</tt>
--   request through the <tt>Access-Control-Request-Headers</tt> header.
--   Each header name that is specified in
--   <tt>Access-Control-Request-Headers</tt> must have a corresponding
--   entry in the rule. Only the headers that were requested are sent back.
--   
--   This element can contain only one wildcard character (*).
newCorsRule :: NonEmpty Text -> CorsRule

-- | Identifies an HTTP method that the origin that is specified in the
--   rule is allowed to execute.
--   
--   Each CORS rule must contain at least one <tt>AllowedMethods</tt> and
--   one <tt>AllowedOrigins</tt> element.
corsRule_allowedMethods :: Lens' CorsRule (Maybe (NonEmpty MethodName))

-- | The time in seconds that your browser caches the preflight response
--   for the specified resource.
--   
--   A CORS rule can have only one <tt>MaxAgeSeconds</tt> element.
corsRule_maxAgeSeconds :: Lens' CorsRule (Maybe Natural)

-- | One or more headers in the response that you want users to be able to
--   access from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   This element is optional for each rule.
corsRule_exposeHeaders :: Lens' CorsRule (Maybe [Text])

-- | One or more response headers that you want users to be able to access
--   from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   Each CORS rule must have at least one <tt>AllowedOrigins</tt> element.
--   The string value can include only one wildcard character (*), for
--   example, http://*.example.com. Additionally, you can specify only one
--   wildcard character to allow cross-origin access for all origins.
corsRule_allowedOrigins :: Lens' CorsRule (NonEmpty Text)

-- | Specifies which headers are allowed in a preflight <tt>OPTIONS</tt>
--   request through the <tt>Access-Control-Request-Headers</tt> header.
--   Each header name that is specified in
--   <tt>Access-Control-Request-Headers</tt> must have a corresponding
--   entry in the rule. Only the headers that were requested are sent back.
--   
--   This element can contain only one wildcard character (*).
corsRule_allowedHeaders :: Lens' CorsRule [Text]
instance GHC.Generics.Generic Amazonka.MediaStore.Types.CorsRule.CorsRule
instance GHC.Show.Show Amazonka.MediaStore.Types.CorsRule.CorsRule
instance GHC.Read.Read Amazonka.MediaStore.Types.CorsRule.CorsRule
instance GHC.Classes.Eq Amazonka.MediaStore.Types.CorsRule.CorsRule
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MediaStore.Types.CorsRule.CorsRule
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.Types.CorsRule.CorsRule
instance Control.DeepSeq.NFData Amazonka.MediaStore.Types.CorsRule.CorsRule
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.Types.CorsRule.CorsRule


module Amazonka.MediaStore.Types.MetricPolicyRule

-- | A setting that enables metrics at the object level. Each rule contains
--   an object group and an object group name. If the policy includes the
--   MetricPolicyRules parameter, you must include at least one rule. Each
--   metric policy can include up to five rules by default. You can also
--   <a>request a quota increase</a> to allow up to 300 rules per policy.
--   
--   <i>See:</i> <a>newMetricPolicyRule</a> smart constructor.
data MetricPolicyRule
MetricPolicyRule' :: Text -> Text -> MetricPolicyRule

-- | A path or file name that defines which objects to include in the
--   group. Wildcards (*) are acceptable.
[$sel:objectGroup:MetricPolicyRule'] :: MetricPolicyRule -> Text

-- | A name that allows you to refer to the object group.
[$sel:objectGroupName:MetricPolicyRule'] :: MetricPolicyRule -> Text

-- | Create a value of <a>MetricPolicyRule</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:objectGroup:MetricPolicyRule'</a>,
--   <a>metricPolicyRule_objectGroup</a> - A path or file name that defines
--   which objects to include in the group. Wildcards (*) are acceptable.
--   
--   <a>$sel:objectGroupName:MetricPolicyRule'</a>,
--   <a>metricPolicyRule_objectGroupName</a> - A name that allows you to
--   refer to the object group.
newMetricPolicyRule :: Text -> Text -> MetricPolicyRule

-- | A path or file name that defines which objects to include in the
--   group. Wildcards (*) are acceptable.
metricPolicyRule_objectGroup :: Lens' MetricPolicyRule Text

-- | A name that allows you to refer to the object group.
metricPolicyRule_objectGroupName :: Lens' MetricPolicyRule Text
instance GHC.Generics.Generic Amazonka.MediaStore.Types.MetricPolicyRule.MetricPolicyRule
instance GHC.Show.Show Amazonka.MediaStore.Types.MetricPolicyRule.MetricPolicyRule
instance GHC.Read.Read Amazonka.MediaStore.Types.MetricPolicyRule.MetricPolicyRule
instance GHC.Classes.Eq Amazonka.MediaStore.Types.MetricPolicyRule.MetricPolicyRule
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MediaStore.Types.MetricPolicyRule.MetricPolicyRule
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.Types.MetricPolicyRule.MetricPolicyRule
instance Control.DeepSeq.NFData Amazonka.MediaStore.Types.MetricPolicyRule.MetricPolicyRule
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.Types.MetricPolicyRule.MetricPolicyRule


module Amazonka.MediaStore.Types.MetricPolicy

-- | The metric policy that is associated with the container. A metric
--   policy allows AWS Elemental MediaStore to send metrics to Amazon
--   CloudWatch. In the policy, you must indicate whether you want
--   MediaStore to send container-level metrics. You can also include rules
--   to define groups of objects that you want MediaStore to send
--   object-level metrics for.
--   
--   To view examples of how to construct a metric policy for your use
--   case, see <a>Example Metric Policies</a>.
--   
--   <i>See:</i> <a>newMetricPolicy</a> smart constructor.
data MetricPolicy
MetricPolicy' :: Maybe (NonEmpty MetricPolicyRule) -> ContainerLevelMetrics -> MetricPolicy

-- | A parameter that holds an array of rules that enable metrics at the
--   object level. This parameter is optional, but if you choose to include
--   it, you must also include at least one rule. By default, you can
--   include up to five rules. You can also <a>request a quota increase</a>
--   to allow up to 300 rules per policy.
[$sel:metricPolicyRules:MetricPolicy'] :: MetricPolicy -> Maybe (NonEmpty MetricPolicyRule)

-- | A setting to enable or disable metrics at the container level.
[$sel:containerLevelMetrics:MetricPolicy'] :: MetricPolicy -> ContainerLevelMetrics

-- | Create a value of <a>MetricPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:metricPolicyRules:MetricPolicy'</a>,
--   <a>metricPolicy_metricPolicyRules</a> - A parameter that holds an
--   array of rules that enable metrics at the object level. This parameter
--   is optional, but if you choose to include it, you must also include at
--   least one rule. By default, you can include up to five rules. You can
--   also <a>request a quota increase</a> to allow up to 300 rules per
--   policy.
--   
--   <a>$sel:containerLevelMetrics:MetricPolicy'</a>,
--   <a>metricPolicy_containerLevelMetrics</a> - A setting to enable or
--   disable metrics at the container level.
newMetricPolicy :: ContainerLevelMetrics -> MetricPolicy

-- | A parameter that holds an array of rules that enable metrics at the
--   object level. This parameter is optional, but if you choose to include
--   it, you must also include at least one rule. By default, you can
--   include up to five rules. You can also <a>request a quota increase</a>
--   to allow up to 300 rules per policy.
metricPolicy_metricPolicyRules :: Lens' MetricPolicy (Maybe (NonEmpty MetricPolicyRule))

-- | A setting to enable or disable metrics at the container level.
metricPolicy_containerLevelMetrics :: Lens' MetricPolicy ContainerLevelMetrics
instance GHC.Generics.Generic Amazonka.MediaStore.Types.MetricPolicy.MetricPolicy
instance GHC.Show.Show Amazonka.MediaStore.Types.MetricPolicy.MetricPolicy
instance GHC.Read.Read Amazonka.MediaStore.Types.MetricPolicy.MetricPolicy
instance GHC.Classes.Eq Amazonka.MediaStore.Types.MetricPolicy.MetricPolicy
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MediaStore.Types.MetricPolicy.MetricPolicy
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.Types.MetricPolicy.MetricPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.Types.MetricPolicy.MetricPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.Types.MetricPolicy.MetricPolicy


module Amazonka.MediaStore.Types.Tag

-- | A collection of tags associated with a container. Each tag consists of
--   a key:value pair, which can be anything you define. Typically, the tag
--   key represents a category (such as "environment") and the tag value
--   represents a specific value within that category (such as "test,"
--   "development," or "production"). You can add up to 50 tags to each
--   container. For more information about tagging, including naming and
--   usage conventions, see <a>Tagging Resources in MediaStore</a>.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Text -> Tag

-- | Part of the key:value pair that defines a tag. You can use a tag value
--   to describe a specific value within a category, such as "companyA" or
--   "companyB." Tag values are case-sensitive.
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | Part of the key:value pair that defines a tag. You can use a tag key
--   to describe a category of information, such as "customer." Tag keys
--   are case-sensitive.
[$sel:key:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - Part of the key:value pair
--   that defines a tag. You can use a tag value to describe a specific
--   value within a category, such as "companyA" or "companyB." Tag values
--   are case-sensitive.
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - Part of the key:value pair that
--   defines a tag. You can use a tag key to describe a category of
--   information, such as "customer." Tag keys are case-sensitive.
newTag :: Text -> Tag

-- | Part of the key:value pair that defines a tag. You can use a tag value
--   to describe a specific value within a category, such as "companyA" or
--   "companyB." Tag values are case-sensitive.
tag_value :: Lens' Tag (Maybe Text)

-- | Part of the key:value pair that defines a tag. You can use a tag key
--   to describe a category of information, such as "customer." Tag keys
--   are case-sensitive.
tag_key :: Lens' Tag Text
instance GHC.Generics.Generic Amazonka.MediaStore.Types.Tag.Tag
instance GHC.Show.Show Amazonka.MediaStore.Types.Tag.Tag
instance GHC.Read.Read Amazonka.MediaStore.Types.Tag.Tag
instance GHC.Classes.Eq Amazonka.MediaStore.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.MediaStore.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.Types.Tag.Tag
instance Control.DeepSeq.NFData Amazonka.MediaStore.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.Types.Tag.Tag


module Amazonka.MediaStore.Types

-- | API version <tt>2017-09-01</tt> of the Amazon Elemental MediaStore SDK
--   configuration.
defaultService :: Service

-- | The policy that you specified in the request does not exist.
_PolicyNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The CORS policy that you specified in the request does not exist.
_CorsPolicyNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The container that you specified in the request already exists or is
--   being updated.
_ContainerInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The service is temporarily unavailable.
_InternalServerError :: AsError a => Getting (First ServiceError) a ServiceError

-- | The container that you specified in the request does not exist.
_ContainerNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A service limit has been exceeded.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError
newtype ContainerLevelMetrics
ContainerLevelMetrics' :: Text -> ContainerLevelMetrics
[fromContainerLevelMetrics] :: ContainerLevelMetrics -> Text
pattern ContainerLevelMetrics_DISABLED :: ContainerLevelMetrics
pattern ContainerLevelMetrics_ENABLED :: ContainerLevelMetrics
newtype ContainerStatus
ContainerStatus' :: Text -> ContainerStatus
[fromContainerStatus] :: ContainerStatus -> Text
pattern ContainerStatus_ACTIVE :: ContainerStatus
pattern ContainerStatus_CREATING :: ContainerStatus
pattern ContainerStatus_DELETING :: ContainerStatus
newtype MethodName
MethodName' :: Text -> MethodName
[fromMethodName] :: MethodName -> Text
pattern MethodName_DELETE :: MethodName
pattern MethodName_GET :: MethodName
pattern MethodName_HEAD :: MethodName
pattern MethodName_PUT :: MethodName

-- | This section describes operations that you can perform on an AWS
--   Elemental MediaStore container.
--   
--   <i>See:</i> <a>newContainer</a> smart constructor.
data Container
Container' :: Maybe POSIX -> Maybe ContainerStatus -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Container

-- | Unix timestamp.
[$sel:creationTime:Container'] :: Container -> Maybe POSIX

-- | The status of container creation or deletion. The status is one of the
--   following: <tt>CREATING</tt>, <tt>ACTIVE</tt>, or <tt>DELETING</tt>.
--   While the service is creating the container, the status is
--   <tt>CREATING</tt>. When the endpoint is available, the status changes
--   to <tt>ACTIVE</tt>.
[$sel:status:Container'] :: Container -> Maybe ContainerStatus

-- | The state of access logging on the container. This value is
--   <tt>false</tt> by default, indicating that AWS Elemental MediaStore
--   does not send access logs to Amazon CloudWatch Logs. When you enable
--   access logging on the container, MediaStore changes this value to
--   <tt>true</tt>, indicating that the service delivers access logs for
--   objects stored in that container to CloudWatch Logs.
[$sel:accessLoggingEnabled:Container'] :: Container -> Maybe Bool

-- | The Amazon Resource Name (ARN) of the container. The ARN has the
--   following format:
--   
--   arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;
--   
--   For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
[$sel:arn:Container'] :: Container -> Maybe Text

-- | The name of the container.
[$sel:name:Container'] :: Container -> Maybe Text

-- | The DNS endpoint of the container. Use the endpoint to identify the
--   specific container when sending requests to the data plane. The
--   service assigns this value when the container is created. Once the
--   value has been assigned, it does not change.
[$sel:endpoint:Container'] :: Container -> Maybe Text

-- | Create a value of <a>Container</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:Container'</a>, <a>container_creationTime</a> -
--   Unix timestamp.
--   
--   <a>$sel:status:Container'</a>, <a>container_status</a> - The status of
--   container creation or deletion. The status is one of the following:
--   <tt>CREATING</tt>, <tt>ACTIVE</tt>, or <tt>DELETING</tt>. While the
--   service is creating the container, the status is <tt>CREATING</tt>.
--   When the endpoint is available, the status changes to <tt>ACTIVE</tt>.
--   
--   <a>$sel:accessLoggingEnabled:Container'</a>,
--   <a>container_accessLoggingEnabled</a> - The state of access logging on
--   the container. This value is <tt>false</tt> by default, indicating
--   that AWS Elemental MediaStore does not send access logs to Amazon
--   CloudWatch Logs. When you enable access logging on the container,
--   MediaStore changes this value to <tt>true</tt>, indicating that the
--   service delivers access logs for objects stored in that container to
--   CloudWatch Logs.
--   
--   <a>$sel:arn:Container'</a>, <a>container_arn</a> - The Amazon Resource
--   Name (ARN) of the container. The ARN has the following format:
--   
--   arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;
--   
--   For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
--   
--   <a>$sel:name:Container'</a>, <a>container_name</a> - The name of the
--   container.
--   
--   <a>$sel:endpoint:Container'</a>, <a>container_endpoint</a> - The DNS
--   endpoint of the container. Use the endpoint to identify the specific
--   container when sending requests to the data plane. The service assigns
--   this value when the container is created. Once the value has been
--   assigned, it does not change.
newContainer :: Container

-- | Unix timestamp.
container_creationTime :: Lens' Container (Maybe UTCTime)

-- | The status of container creation or deletion. The status is one of the
--   following: <tt>CREATING</tt>, <tt>ACTIVE</tt>, or <tt>DELETING</tt>.
--   While the service is creating the container, the status is
--   <tt>CREATING</tt>. When the endpoint is available, the status changes
--   to <tt>ACTIVE</tt>.
container_status :: Lens' Container (Maybe ContainerStatus)

-- | The state of access logging on the container. This value is
--   <tt>false</tt> by default, indicating that AWS Elemental MediaStore
--   does not send access logs to Amazon CloudWatch Logs. When you enable
--   access logging on the container, MediaStore changes this value to
--   <tt>true</tt>, indicating that the service delivers access logs for
--   objects stored in that container to CloudWatch Logs.
container_accessLoggingEnabled :: Lens' Container (Maybe Bool)

-- | The Amazon Resource Name (ARN) of the container. The ARN has the
--   following format:
--   
--   arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;
--   
--   For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
container_arn :: Lens' Container (Maybe Text)

-- | The name of the container.
container_name :: Lens' Container (Maybe Text)

-- | The DNS endpoint of the container. Use the endpoint to identify the
--   specific container when sending requests to the data plane. The
--   service assigns this value when the container is created. Once the
--   value has been assigned, it does not change.
container_endpoint :: Lens' Container (Maybe Text)

-- | A rule for a CORS policy. You can add up to 100 rules to a CORS
--   policy. If more than one rule applies, the service uses the first
--   applicable rule listed.
--   
--   <i>See:</i> <a>newCorsRule</a> smart constructor.
data CorsRule
CorsRule' :: Maybe (NonEmpty MethodName) -> Maybe Natural -> Maybe [Text] -> NonEmpty Text -> [Text] -> CorsRule

-- | Identifies an HTTP method that the origin that is specified in the
--   rule is allowed to execute.
--   
--   Each CORS rule must contain at least one <tt>AllowedMethods</tt> and
--   one <tt>AllowedOrigins</tt> element.
[$sel:allowedMethods:CorsRule'] :: CorsRule -> Maybe (NonEmpty MethodName)

-- | The time in seconds that your browser caches the preflight response
--   for the specified resource.
--   
--   A CORS rule can have only one <tt>MaxAgeSeconds</tt> element.
[$sel:maxAgeSeconds:CorsRule'] :: CorsRule -> Maybe Natural

-- | One or more headers in the response that you want users to be able to
--   access from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   This element is optional for each rule.
[$sel:exposeHeaders:CorsRule'] :: CorsRule -> Maybe [Text]

-- | One or more response headers that you want users to be able to access
--   from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   Each CORS rule must have at least one <tt>AllowedOrigins</tt> element.
--   The string value can include only one wildcard character (*), for
--   example, http://*.example.com. Additionally, you can specify only one
--   wildcard character to allow cross-origin access for all origins.
[$sel:allowedOrigins:CorsRule'] :: CorsRule -> NonEmpty Text

-- | Specifies which headers are allowed in a preflight <tt>OPTIONS</tt>
--   request through the <tt>Access-Control-Request-Headers</tt> header.
--   Each header name that is specified in
--   <tt>Access-Control-Request-Headers</tt> must have a corresponding
--   entry in the rule. Only the headers that were requested are sent back.
--   
--   This element can contain only one wildcard character (*).
[$sel:allowedHeaders:CorsRule'] :: CorsRule -> [Text]

-- | Create a value of <a>CorsRule</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:allowedMethods:CorsRule'</a>, <a>corsRule_allowedMethods</a> -
--   Identifies an HTTP method that the origin that is specified in the
--   rule is allowed to execute.
--   
--   Each CORS rule must contain at least one <tt>AllowedMethods</tt> and
--   one <tt>AllowedOrigins</tt> element.
--   
--   <a>$sel:maxAgeSeconds:CorsRule'</a>, <a>corsRule_maxAgeSeconds</a> -
--   The time in seconds that your browser caches the preflight response
--   for the specified resource.
--   
--   A CORS rule can have only one <tt>MaxAgeSeconds</tt> element.
--   
--   <a>$sel:exposeHeaders:CorsRule'</a>, <a>corsRule_exposeHeaders</a> -
--   One or more headers in the response that you want users to be able to
--   access from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   This element is optional for each rule.
--   
--   <a>$sel:allowedOrigins:CorsRule'</a>, <a>corsRule_allowedOrigins</a> -
--   One or more response headers that you want users to be able to access
--   from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   Each CORS rule must have at least one <tt>AllowedOrigins</tt> element.
--   The string value can include only one wildcard character (*), for
--   example, http://*.example.com. Additionally, you can specify only one
--   wildcard character to allow cross-origin access for all origins.
--   
--   <a>$sel:allowedHeaders:CorsRule'</a>, <a>corsRule_allowedHeaders</a> -
--   Specifies which headers are allowed in a preflight <tt>OPTIONS</tt>
--   request through the <tt>Access-Control-Request-Headers</tt> header.
--   Each header name that is specified in
--   <tt>Access-Control-Request-Headers</tt> must have a corresponding
--   entry in the rule. Only the headers that were requested are sent back.
--   
--   This element can contain only one wildcard character (*).
newCorsRule :: NonEmpty Text -> CorsRule

-- | Identifies an HTTP method that the origin that is specified in the
--   rule is allowed to execute.
--   
--   Each CORS rule must contain at least one <tt>AllowedMethods</tt> and
--   one <tt>AllowedOrigins</tt> element.
corsRule_allowedMethods :: Lens' CorsRule (Maybe (NonEmpty MethodName))

-- | The time in seconds that your browser caches the preflight response
--   for the specified resource.
--   
--   A CORS rule can have only one <tt>MaxAgeSeconds</tt> element.
corsRule_maxAgeSeconds :: Lens' CorsRule (Maybe Natural)

-- | One or more headers in the response that you want users to be able to
--   access from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   This element is optional for each rule.
corsRule_exposeHeaders :: Lens' CorsRule (Maybe [Text])

-- | One or more response headers that you want users to be able to access
--   from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   Each CORS rule must have at least one <tt>AllowedOrigins</tt> element.
--   The string value can include only one wildcard character (*), for
--   example, http://*.example.com. Additionally, you can specify only one
--   wildcard character to allow cross-origin access for all origins.
corsRule_allowedOrigins :: Lens' CorsRule (NonEmpty Text)

-- | Specifies which headers are allowed in a preflight <tt>OPTIONS</tt>
--   request through the <tt>Access-Control-Request-Headers</tt> header.
--   Each header name that is specified in
--   <tt>Access-Control-Request-Headers</tt> must have a corresponding
--   entry in the rule. Only the headers that were requested are sent back.
--   
--   This element can contain only one wildcard character (*).
corsRule_allowedHeaders :: Lens' CorsRule [Text]

-- | The metric policy that is associated with the container. A metric
--   policy allows AWS Elemental MediaStore to send metrics to Amazon
--   CloudWatch. In the policy, you must indicate whether you want
--   MediaStore to send container-level metrics. You can also include rules
--   to define groups of objects that you want MediaStore to send
--   object-level metrics for.
--   
--   To view examples of how to construct a metric policy for your use
--   case, see <a>Example Metric Policies</a>.
--   
--   <i>See:</i> <a>newMetricPolicy</a> smart constructor.
data MetricPolicy
MetricPolicy' :: Maybe (NonEmpty MetricPolicyRule) -> ContainerLevelMetrics -> MetricPolicy

-- | A parameter that holds an array of rules that enable metrics at the
--   object level. This parameter is optional, but if you choose to include
--   it, you must also include at least one rule. By default, you can
--   include up to five rules. You can also <a>request a quota increase</a>
--   to allow up to 300 rules per policy.
[$sel:metricPolicyRules:MetricPolicy'] :: MetricPolicy -> Maybe (NonEmpty MetricPolicyRule)

-- | A setting to enable or disable metrics at the container level.
[$sel:containerLevelMetrics:MetricPolicy'] :: MetricPolicy -> ContainerLevelMetrics

-- | Create a value of <a>MetricPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:metricPolicyRules:MetricPolicy'</a>,
--   <a>metricPolicy_metricPolicyRules</a> - A parameter that holds an
--   array of rules that enable metrics at the object level. This parameter
--   is optional, but if you choose to include it, you must also include at
--   least one rule. By default, you can include up to five rules. You can
--   also <a>request a quota increase</a> to allow up to 300 rules per
--   policy.
--   
--   <a>$sel:containerLevelMetrics:MetricPolicy'</a>,
--   <a>metricPolicy_containerLevelMetrics</a> - A setting to enable or
--   disable metrics at the container level.
newMetricPolicy :: ContainerLevelMetrics -> MetricPolicy

-- | A parameter that holds an array of rules that enable metrics at the
--   object level. This parameter is optional, but if you choose to include
--   it, you must also include at least one rule. By default, you can
--   include up to five rules. You can also <a>request a quota increase</a>
--   to allow up to 300 rules per policy.
metricPolicy_metricPolicyRules :: Lens' MetricPolicy (Maybe (NonEmpty MetricPolicyRule))

-- | A setting to enable or disable metrics at the container level.
metricPolicy_containerLevelMetrics :: Lens' MetricPolicy ContainerLevelMetrics

-- | A setting that enables metrics at the object level. Each rule contains
--   an object group and an object group name. If the policy includes the
--   MetricPolicyRules parameter, you must include at least one rule. Each
--   metric policy can include up to five rules by default. You can also
--   <a>request a quota increase</a> to allow up to 300 rules per policy.
--   
--   <i>See:</i> <a>newMetricPolicyRule</a> smart constructor.
data MetricPolicyRule
MetricPolicyRule' :: Text -> Text -> MetricPolicyRule

-- | A path or file name that defines which objects to include in the
--   group. Wildcards (*) are acceptable.
[$sel:objectGroup:MetricPolicyRule'] :: MetricPolicyRule -> Text

-- | A name that allows you to refer to the object group.
[$sel:objectGroupName:MetricPolicyRule'] :: MetricPolicyRule -> Text

-- | Create a value of <a>MetricPolicyRule</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:objectGroup:MetricPolicyRule'</a>,
--   <a>metricPolicyRule_objectGroup</a> - A path or file name that defines
--   which objects to include in the group. Wildcards (*) are acceptable.
--   
--   <a>$sel:objectGroupName:MetricPolicyRule'</a>,
--   <a>metricPolicyRule_objectGroupName</a> - A name that allows you to
--   refer to the object group.
newMetricPolicyRule :: Text -> Text -> MetricPolicyRule

-- | A path or file name that defines which objects to include in the
--   group. Wildcards (*) are acceptable.
metricPolicyRule_objectGroup :: Lens' MetricPolicyRule Text

-- | A name that allows you to refer to the object group.
metricPolicyRule_objectGroupName :: Lens' MetricPolicyRule Text

-- | A collection of tags associated with a container. Each tag consists of
--   a key:value pair, which can be anything you define. Typically, the tag
--   key represents a category (such as "environment") and the tag value
--   represents a specific value within that category (such as "test,"
--   "development," or "production"). You can add up to 50 tags to each
--   container. For more information about tagging, including naming and
--   usage conventions, see <a>Tagging Resources in MediaStore</a>.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Text -> Tag

-- | Part of the key:value pair that defines a tag. You can use a tag value
--   to describe a specific value within a category, such as "companyA" or
--   "companyB." Tag values are case-sensitive.
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | Part of the key:value pair that defines a tag. You can use a tag key
--   to describe a category of information, such as "customer." Tag keys
--   are case-sensitive.
[$sel:key:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - Part of the key:value pair
--   that defines a tag. You can use a tag value to describe a specific
--   value within a category, such as "companyA" or "companyB." Tag values
--   are case-sensitive.
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - Part of the key:value pair that
--   defines a tag. You can use a tag key to describe a category of
--   information, such as "customer." Tag keys are case-sensitive.
newTag :: Text -> Tag

-- | Part of the key:value pair that defines a tag. You can use a tag value
--   to describe a specific value within a category, such as "companyA" or
--   "companyB." Tag values are case-sensitive.
tag_value :: Lens' Tag (Maybe Text)

-- | Part of the key:value pair that defines a tag. You can use a tag key
--   to describe a category of information, such as "customer." Tag keys
--   are case-sensitive.
tag_key :: Lens' Tag Text


-- | Adds tags to the specified AWS Elemental MediaStore container. Tags
--   are key:value pairs that you can associate with AWS resources. For
--   example, the tag key might be "customer" and the tag value might be
--   "companyA." You can specify one or more tags to add to each container.
--   You can add up to 50 tags to each container. For more information
--   about tagging, including naming and usage conventions, see <a>Tagging
--   Resources in MediaStore</a>.
module Amazonka.MediaStore.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> NonEmpty Tag -> TagResource

-- | The Amazon Resource Name (ARN) for the container.
[$sel:resource:TagResource'] :: TagResource -> Text

-- | An array of key:value pairs that you want to add to the container. You
--   need to specify only the tags that you want to add or update. For
--   example, suppose a container already has two tags (customer:CompanyA
--   and priority:High). You want to change the priority tag and also add a
--   third tag (type:Contract). For TagResource, you specify the following
--   tags: priority:Medium, type:Contract. The result is that your
--   container has three tags: customer:CompanyA, priority:Medium, and
--   type:Contract.
[$sel:tags:TagResource'] :: TagResource -> NonEmpty Tag

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resource:TagResource'</a>, <a>tagResource_resource</a> - The
--   Amazon Resource Name (ARN) for the container.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - An array of
--   key:value pairs that you want to add to the container. You need to
--   specify only the tags that you want to add or update. For example,
--   suppose a container already has two tags (customer:CompanyA and
--   priority:High). You want to change the priority tag and also add a
--   third tag (type:Contract). For TagResource, you specify the following
--   tags: priority:Medium, type:Contract. The result is that your
--   container has three tags: customer:CompanyA, priority:Medium, and
--   type:Contract.
newTagResource :: Text -> NonEmpty Tag -> TagResource

-- | The Amazon Resource Name (ARN) for the container.
tagResource_resource :: Lens' TagResource Text

-- | An array of key:value pairs that you want to add to the container. You
--   need to specify only the tags that you want to add or update. For
--   example, suppose a container already has two tags (customer:CompanyA
--   and priority:High). You want to change the priority tag and also add a
--   third tag (type:Contract). For TagResource, you specify the following
--   tags: priority:Medium, type:Contract. The result is that your
--   container has three tags: customer:CompanyA, priority:Medium, and
--   type:Contract.
tagResource_tags :: Lens' TagResource (NonEmpty Tag)

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:TagResourceResponse'] :: TagResourceResponse -> Int

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.TagResource.TagResource
instance GHC.Show.Show Amazonka.MediaStore.TagResource.TagResource
instance GHC.Read.Read Amazonka.MediaStore.TagResource.TagResource
instance GHC.Classes.Eq Amazonka.MediaStore.TagResource.TagResource
instance GHC.Generics.Generic Amazonka.MediaStore.TagResource.TagResourceResponse
instance GHC.Show.Show Amazonka.MediaStore.TagResource.TagResourceResponse
instance GHC.Read.Read Amazonka.MediaStore.TagResource.TagResourceResponse
instance GHC.Classes.Eq Amazonka.MediaStore.TagResource.TagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.MediaStore.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.MediaStore.TagResource.TagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.TagResource.TagResource
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.TagResource.TagResource
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.TagResource.TagResource


-- | Stops access logging on the specified container. When you stop access
--   logging on a container, MediaStore stops sending access logs to Amazon
--   CloudWatch Logs. These access logs are not saved and are not
--   retrievable.
module Amazonka.MediaStore.StopAccessLogging

-- | <i>See:</i> <a>newStopAccessLogging</a> smart constructor.
data StopAccessLogging
StopAccessLogging' :: Text -> StopAccessLogging

-- | The name of the container that you want to stop access logging on.
[$sel:containerName:StopAccessLogging'] :: StopAccessLogging -> Text

-- | Create a value of <a>StopAccessLogging</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:StopAccessLogging'</a>,
--   <a>stopAccessLogging_containerName</a> - The name of the container
--   that you want to stop access logging on.
newStopAccessLogging :: Text -> StopAccessLogging

-- | The name of the container that you want to stop access logging on.
stopAccessLogging_containerName :: Lens' StopAccessLogging Text

-- | <i>See:</i> <a>newStopAccessLoggingResponse</a> smart constructor.
data StopAccessLoggingResponse
StopAccessLoggingResponse' :: Int -> StopAccessLoggingResponse

-- | The response's http status code.
[$sel:httpStatus:StopAccessLoggingResponse'] :: StopAccessLoggingResponse -> Int

-- | Create a value of <a>StopAccessLoggingResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:StopAccessLoggingResponse'</a>,
--   <a>stopAccessLoggingResponse_httpStatus</a> - The response's http
--   status code.
newStopAccessLoggingResponse :: Int -> StopAccessLoggingResponse

-- | The response's http status code.
stopAccessLoggingResponse_httpStatus :: Lens' StopAccessLoggingResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.StopAccessLogging.StopAccessLogging
instance GHC.Show.Show Amazonka.MediaStore.StopAccessLogging.StopAccessLogging
instance GHC.Read.Read Amazonka.MediaStore.StopAccessLogging.StopAccessLogging
instance GHC.Classes.Eq Amazonka.MediaStore.StopAccessLogging.StopAccessLogging
instance GHC.Generics.Generic Amazonka.MediaStore.StopAccessLogging.StopAccessLoggingResponse
instance GHC.Show.Show Amazonka.MediaStore.StopAccessLogging.StopAccessLoggingResponse
instance GHC.Read.Read Amazonka.MediaStore.StopAccessLogging.StopAccessLoggingResponse
instance GHC.Classes.Eq Amazonka.MediaStore.StopAccessLogging.StopAccessLoggingResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.StopAccessLogging.StopAccessLogging
instance Control.DeepSeq.NFData Amazonka.MediaStore.StopAccessLogging.StopAccessLoggingResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.StopAccessLogging.StopAccessLogging
instance Control.DeepSeq.NFData Amazonka.MediaStore.StopAccessLogging.StopAccessLogging
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.StopAccessLogging.StopAccessLogging
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.StopAccessLogging.StopAccessLogging
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.StopAccessLogging.StopAccessLogging
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.StopAccessLogging.StopAccessLogging


-- | Starts access logging on the specified container. When you enable
--   access logging on a container, MediaStore delivers access logs for
--   objects stored in that container to Amazon CloudWatch Logs.
module Amazonka.MediaStore.StartAccessLogging

-- | <i>See:</i> <a>newStartAccessLogging</a> smart constructor.
data StartAccessLogging
StartAccessLogging' :: Text -> StartAccessLogging

-- | The name of the container that you want to start access logging on.
[$sel:containerName:StartAccessLogging'] :: StartAccessLogging -> Text

-- | Create a value of <a>StartAccessLogging</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:StartAccessLogging'</a>,
--   <a>startAccessLogging_containerName</a> - The name of the container
--   that you want to start access logging on.
newStartAccessLogging :: Text -> StartAccessLogging

-- | The name of the container that you want to start access logging on.
startAccessLogging_containerName :: Lens' StartAccessLogging Text

-- | <i>See:</i> <a>newStartAccessLoggingResponse</a> smart constructor.
data StartAccessLoggingResponse
StartAccessLoggingResponse' :: Int -> StartAccessLoggingResponse

-- | The response's http status code.
[$sel:httpStatus:StartAccessLoggingResponse'] :: StartAccessLoggingResponse -> Int

-- | Create a value of <a>StartAccessLoggingResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:StartAccessLoggingResponse'</a>,
--   <a>startAccessLoggingResponse_httpStatus</a> - The response's http
--   status code.
newStartAccessLoggingResponse :: Int -> StartAccessLoggingResponse

-- | The response's http status code.
startAccessLoggingResponse_httpStatus :: Lens' StartAccessLoggingResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.StartAccessLogging.StartAccessLogging
instance GHC.Show.Show Amazonka.MediaStore.StartAccessLogging.StartAccessLogging
instance GHC.Read.Read Amazonka.MediaStore.StartAccessLogging.StartAccessLogging
instance GHC.Classes.Eq Amazonka.MediaStore.StartAccessLogging.StartAccessLogging
instance GHC.Generics.Generic Amazonka.MediaStore.StartAccessLogging.StartAccessLoggingResponse
instance GHC.Show.Show Amazonka.MediaStore.StartAccessLogging.StartAccessLoggingResponse
instance GHC.Read.Read Amazonka.MediaStore.StartAccessLogging.StartAccessLoggingResponse
instance GHC.Classes.Eq Amazonka.MediaStore.StartAccessLogging.StartAccessLoggingResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.StartAccessLogging.StartAccessLogging
instance Control.DeepSeq.NFData Amazonka.MediaStore.StartAccessLogging.StartAccessLoggingResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.StartAccessLogging.StartAccessLogging
instance Control.DeepSeq.NFData Amazonka.MediaStore.StartAccessLogging.StartAccessLogging
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.StartAccessLogging.StartAccessLogging
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.StartAccessLogging.StartAccessLogging
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.StartAccessLogging.StartAccessLogging
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.StartAccessLogging.StartAccessLogging


-- | The metric policy that you want to add to the container. A metric
--   policy allows AWS Elemental MediaStore to send metrics to Amazon
--   CloudWatch. It takes up to 20 minutes for the new policy to take
--   effect.
module Amazonka.MediaStore.PutMetricPolicy

-- | <i>See:</i> <a>newPutMetricPolicy</a> smart constructor.
data PutMetricPolicy
PutMetricPolicy' :: Text -> MetricPolicy -> PutMetricPolicy

-- | The name of the container that you want to add the metric policy to.
[$sel:containerName:PutMetricPolicy'] :: PutMetricPolicy -> Text

-- | The metric policy that you want to associate with the container. In
--   the policy, you must indicate whether you want MediaStore to send
--   container-level metrics. You can also include up to five rules to
--   define groups of objects that you want MediaStore to send object-level
--   metrics for. If you include rules in the policy, construct each rule
--   with both of the following:
--   
--   <ul>
--   <li>An object group that defines which objects to include in the
--   group. The definition can be a path or a file name, but it can't have
--   more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _
--   (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde),
--   / (forward slash), and * (asterisk). Wildcards (*) are
--   acceptable.</li>
--   <li>An object group name that allows you to refer to the object group.
--   The name can't have more than 30 characters. Valid characters are:
--   a-z, A-Z, 0-9, and _ (underscore).</li>
--   </ul>
[$sel:metricPolicy:PutMetricPolicy'] :: PutMetricPolicy -> MetricPolicy

-- | Create a value of <a>PutMetricPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:PutMetricPolicy'</a>,
--   <a>putMetricPolicy_containerName</a> - The name of the container that
--   you want to add the metric policy to.
--   
--   <a>$sel:metricPolicy:PutMetricPolicy'</a>,
--   <a>putMetricPolicy_metricPolicy</a> - The metric policy that you want
--   to associate with the container. In the policy, you must indicate
--   whether you want MediaStore to send container-level metrics. You can
--   also include up to five rules to define groups of objects that you
--   want MediaStore to send object-level metrics for. If you include rules
--   in the policy, construct each rule with both of the following:
--   
--   <ul>
--   <li>An object group that defines which objects to include in the
--   group. The definition can be a path or a file name, but it can't have
--   more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _
--   (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde),
--   / (forward slash), and * (asterisk). Wildcards (*) are
--   acceptable.</li>
--   <li>An object group name that allows you to refer to the object group.
--   The name can't have more than 30 characters. Valid characters are:
--   a-z, A-Z, 0-9, and _ (underscore).</li>
--   </ul>
newPutMetricPolicy :: Text -> MetricPolicy -> PutMetricPolicy

-- | The name of the container that you want to add the metric policy to.
putMetricPolicy_containerName :: Lens' PutMetricPolicy Text

-- | The metric policy that you want to associate with the container. In
--   the policy, you must indicate whether you want MediaStore to send
--   container-level metrics. You can also include up to five rules to
--   define groups of objects that you want MediaStore to send object-level
--   metrics for. If you include rules in the policy, construct each rule
--   with both of the following:
--   
--   <ul>
--   <li>An object group that defines which objects to include in the
--   group. The definition can be a path or a file name, but it can't have
--   more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _
--   (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde),
--   / (forward slash), and * (asterisk). Wildcards (*) are
--   acceptable.</li>
--   <li>An object group name that allows you to refer to the object group.
--   The name can't have more than 30 characters. Valid characters are:
--   a-z, A-Z, 0-9, and _ (underscore).</li>
--   </ul>
putMetricPolicy_metricPolicy :: Lens' PutMetricPolicy MetricPolicy

-- | <i>See:</i> <a>newPutMetricPolicyResponse</a> smart constructor.
data PutMetricPolicyResponse
PutMetricPolicyResponse' :: Int -> PutMetricPolicyResponse

-- | The response's http status code.
[$sel:httpStatus:PutMetricPolicyResponse'] :: PutMetricPolicyResponse -> Int

-- | Create a value of <a>PutMetricPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:PutMetricPolicyResponse'</a>,
--   <a>putMetricPolicyResponse_httpStatus</a> - The response's http status
--   code.
newPutMetricPolicyResponse :: Int -> PutMetricPolicyResponse

-- | The response's http status code.
putMetricPolicyResponse_httpStatus :: Lens' PutMetricPolicyResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicy
instance GHC.Show.Show Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicy
instance GHC.Read.Read Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicy
instance GHC.Classes.Eq Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicy
instance GHC.Generics.Generic Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicyResponse
instance GHC.Show.Show Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicyResponse
instance GHC.Read.Read Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicyResponse
instance GHC.Classes.Eq Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicy
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.PutMetricPolicy.PutMetricPolicy


-- | Writes an object lifecycle policy to a container. If the container
--   already has an object lifecycle policy, the service replaces the
--   existing policy with the new policy. It takes up to 20 minutes for the
--   change to take effect.
--   
--   For information about how to construct an object lifecycle policy, see
--   <a>Components of an Object Lifecycle Policy</a>.
module Amazonka.MediaStore.PutLifecyclePolicy

-- | <i>See:</i> <a>newPutLifecyclePolicy</a> smart constructor.
data PutLifecyclePolicy
PutLifecyclePolicy' :: Text -> Text -> PutLifecyclePolicy

-- | The name of the container that you want to assign the object lifecycle
--   policy to.
[$sel:containerName:PutLifecyclePolicy'] :: PutLifecyclePolicy -> Text

-- | The object lifecycle policy to apply to the container.
[$sel:lifecyclePolicy:PutLifecyclePolicy'] :: PutLifecyclePolicy -> Text

-- | Create a value of <a>PutLifecyclePolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicy_containerName</a> - The name of the container
--   that you want to assign the object lifecycle policy to.
--   
--   <a>$sel:lifecyclePolicy:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicy_lifecyclePolicy</a> - The object lifecycle
--   policy to apply to the container.
newPutLifecyclePolicy :: Text -> Text -> PutLifecyclePolicy

-- | The name of the container that you want to assign the object lifecycle
--   policy to.
putLifecyclePolicy_containerName :: Lens' PutLifecyclePolicy Text

-- | The object lifecycle policy to apply to the container.
putLifecyclePolicy_lifecyclePolicy :: Lens' PutLifecyclePolicy Text

-- | <i>See:</i> <a>newPutLifecyclePolicyResponse</a> smart constructor.
data PutLifecyclePolicyResponse
PutLifecyclePolicyResponse' :: Int -> PutLifecyclePolicyResponse

-- | The response's http status code.
[$sel:httpStatus:PutLifecyclePolicyResponse'] :: PutLifecyclePolicyResponse -> Int

-- | Create a value of <a>PutLifecyclePolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:PutLifecyclePolicyResponse'</a>,
--   <a>putLifecyclePolicyResponse_httpStatus</a> - The response's http
--   status code.
newPutLifecyclePolicyResponse :: Int -> PutLifecyclePolicyResponse

-- | The response's http status code.
putLifecyclePolicyResponse_httpStatus :: Lens' PutLifecyclePolicyResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicy
instance GHC.Show.Show Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicy
instance GHC.Read.Read Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicy
instance GHC.Classes.Eq Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicy
instance GHC.Generics.Generic Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicyResponse
instance GHC.Show.Show Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicyResponse
instance GHC.Read.Read Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicyResponse
instance GHC.Classes.Eq Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicy
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicy
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.PutLifecyclePolicy.PutLifecyclePolicy


-- | Sets the cross-origin resource sharing (CORS) configuration on a
--   container so that the container can service cross-origin requests. For
--   example, you might want to enable a request whose origin is
--   http://www.example.com to access your AWS Elemental MediaStore
--   container at my.example.container.com by using the browser's
--   XMLHttpRequest capability.
--   
--   To enable CORS on a container, you attach a CORS policy to the
--   container. In the CORS policy, you configure rules that identify
--   origins and the HTTP methods that can be executed on your container.
--   The policy can contain up to 398,000 characters. You can add up to 100
--   rules to a CORS policy. If more than one rule applies, the service
--   uses the first applicable rule listed.
--   
--   To learn more about CORS, see <a>Cross-Origin Resource Sharing (CORS)
--   in AWS Elemental MediaStore</a>.
module Amazonka.MediaStore.PutCorsPolicy

-- | <i>See:</i> <a>newPutCorsPolicy</a> smart constructor.
data PutCorsPolicy
PutCorsPolicy' :: Text -> NonEmpty CorsRule -> PutCorsPolicy

-- | The name of the container that you want to assign the CORS policy to.
[$sel:containerName:PutCorsPolicy'] :: PutCorsPolicy -> Text

-- | The CORS policy to apply to the container.
[$sel:corsPolicy:PutCorsPolicy'] :: PutCorsPolicy -> NonEmpty CorsRule

-- | Create a value of <a>PutCorsPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:PutCorsPolicy'</a>,
--   <a>putCorsPolicy_containerName</a> - The name of the container that
--   you want to assign the CORS policy to.
--   
--   <a>$sel:corsPolicy:PutCorsPolicy'</a>, <a>putCorsPolicy_corsPolicy</a>
--   - The CORS policy to apply to the container.
newPutCorsPolicy :: Text -> NonEmpty CorsRule -> PutCorsPolicy

-- | The name of the container that you want to assign the CORS policy to.
putCorsPolicy_containerName :: Lens' PutCorsPolicy Text

-- | The CORS policy to apply to the container.
putCorsPolicy_corsPolicy :: Lens' PutCorsPolicy (NonEmpty CorsRule)

-- | <i>See:</i> <a>newPutCorsPolicyResponse</a> smart constructor.
data PutCorsPolicyResponse
PutCorsPolicyResponse' :: Int -> PutCorsPolicyResponse

-- | The response's http status code.
[$sel:httpStatus:PutCorsPolicyResponse'] :: PutCorsPolicyResponse -> Int

-- | Create a value of <a>PutCorsPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:PutCorsPolicyResponse'</a>,
--   <a>putCorsPolicyResponse_httpStatus</a> - The response's http status
--   code.
newPutCorsPolicyResponse :: Int -> PutCorsPolicyResponse

-- | The response's http status code.
putCorsPolicyResponse_httpStatus :: Lens' PutCorsPolicyResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicy
instance GHC.Show.Show Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicy
instance GHC.Read.Read Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicy
instance GHC.Classes.Eq Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicy
instance GHC.Generics.Generic Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicyResponse
instance GHC.Show.Show Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicyResponse
instance GHC.Read.Read Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicyResponse
instance GHC.Classes.Eq Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicy
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.PutCorsPolicy.PutCorsPolicy


-- | Creates an access policy for the specified container to restrict the
--   users and clients that can access it. For information about the data
--   that is included in an access policy, see the <a>AWS Identity and
--   Access Management User Guide</a>.
--   
--   For this release of the REST API, you can create only one policy for a
--   container. If you enter <tt>PutContainerPolicy</tt> twice, the second
--   command modifies the existing policy.
module Amazonka.MediaStore.PutContainerPolicy

-- | <i>See:</i> <a>newPutContainerPolicy</a> smart constructor.
data PutContainerPolicy
PutContainerPolicy' :: Text -> Text -> PutContainerPolicy

-- | The name of the container.
[$sel:containerName:PutContainerPolicy'] :: PutContainerPolicy -> Text

-- | The contents of the policy, which includes the following:
--   
--   <ul>
--   <li>One <tt>Version</tt> tag</li>
--   <li>One <tt>Statement</tt> tag that contains the standard tags for the
--   policy.</li>
--   </ul>
[$sel:policy:PutContainerPolicy'] :: PutContainerPolicy -> Text

-- | Create a value of <a>PutContainerPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:PutContainerPolicy'</a>,
--   <a>putContainerPolicy_containerName</a> - The name of the container.
--   
--   <a>$sel:policy:PutContainerPolicy'</a>,
--   <a>putContainerPolicy_policy</a> - The contents of the policy, which
--   includes the following:
--   
--   <ul>
--   <li>One <tt>Version</tt> tag</li>
--   <li>One <tt>Statement</tt> tag that contains the standard tags for the
--   policy.</li>
--   </ul>
newPutContainerPolicy :: Text -> Text -> PutContainerPolicy

-- | The name of the container.
putContainerPolicy_containerName :: Lens' PutContainerPolicy Text

-- | The contents of the policy, which includes the following:
--   
--   <ul>
--   <li>One <tt>Version</tt> tag</li>
--   <li>One <tt>Statement</tt> tag that contains the standard tags for the
--   policy.</li>
--   </ul>
putContainerPolicy_policy :: Lens' PutContainerPolicy Text

-- | <i>See:</i> <a>newPutContainerPolicyResponse</a> smart constructor.
data PutContainerPolicyResponse
PutContainerPolicyResponse' :: Int -> PutContainerPolicyResponse

-- | The response's http status code.
[$sel:httpStatus:PutContainerPolicyResponse'] :: PutContainerPolicyResponse -> Int

-- | Create a value of <a>PutContainerPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:PutContainerPolicyResponse'</a>,
--   <a>putContainerPolicyResponse_httpStatus</a> - The response's http
--   status code.
newPutContainerPolicyResponse :: Int -> PutContainerPolicyResponse

-- | The response's http status code.
putContainerPolicyResponse_httpStatus :: Lens' PutContainerPolicyResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicy
instance GHC.Show.Show Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicy
instance GHC.Read.Read Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicy
instance GHC.Classes.Eq Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicy
instance GHC.Generics.Generic Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicyResponse
instance GHC.Show.Show Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicyResponse
instance GHC.Read.Read Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicyResponse
instance GHC.Classes.Eq Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicy
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.PutContainerPolicy.PutContainerPolicy


-- | Returns a list of the tags assigned to the specified container.
module Amazonka.MediaStore.ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | The Amazon Resource Name (ARN) for the container.
[$sel:resource:ListTagsForResource'] :: ListTagsForResource -> Text

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resource:ListTagsForResource'</a>,
--   <a>listTagsForResource_resource</a> - The Amazon Resource Name (ARN)
--   for the container.
newListTagsForResource :: Text -> ListTagsForResource

-- | The Amazon Resource Name (ARN) for the container.
listTagsForResource_resource :: Lens' ListTagsForResource Text

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe (NonEmpty Tag) -> Int -> ListTagsForResourceResponse

-- | An array of key:value pairs that are assigned to the container.
[$sel:tags:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe (NonEmpty Tag)

-- | The response's http status code.
[$sel:httpStatus:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Int

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - An array of key:value pairs
--   that are assigned to the container.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | An array of key:value pairs that are assigned to the container.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe (NonEmpty Tag))

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.ListTagsForResource.ListTagsForResource
instance GHC.Show.Show Amazonka.MediaStore.ListTagsForResource.ListTagsForResource
instance GHC.Read.Read Amazonka.MediaStore.ListTagsForResource.ListTagsForResource
instance GHC.Classes.Eq Amazonka.MediaStore.ListTagsForResource.ListTagsForResource
instance GHC.Generics.Generic Amazonka.MediaStore.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Show.Show Amazonka.MediaStore.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Read.Read Amazonka.MediaStore.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Classes.Eq Amazonka.MediaStore.ListTagsForResource.ListTagsForResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.MediaStore.ListTagsForResource.ListTagsForResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.MediaStore.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.ListTagsForResource.ListTagsForResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.ListTagsForResource.ListTagsForResource


-- | Lists the properties of all containers in AWS Elemental MediaStore.
--   
--   You can query to receive all the containers in one response. Or you
--   can include the <tt>MaxResults</tt> parameter to receive a limited
--   number of containers in each response. In this case, the response
--   includes a token. To get the next set of containers, send the command
--   again, this time with the <tt>NextToken</tt> parameter (with the
--   returned token as its value). The next set of responses appears, with
--   a token if there are still more containers to receive.
--   
--   See also DescribeContainer, which gets the properties of one
--   container.
--   
--   This operation returns paginated results.
module Amazonka.MediaStore.ListContainers

-- | <i>See:</i> <a>newListContainers</a> smart constructor.
data ListContainers
ListContainers' :: Maybe Text -> Maybe Natural -> ListContainers

-- | Only if you used <tt>MaxResults</tt> in the first command, enter the
--   token (which was included in the previous response) to obtain the next
--   set of containers. This token is included in a response only if there
--   actually are more containers to list.
[$sel:nextToken:ListContainers'] :: ListContainers -> Maybe Text

-- | Enter the maximum number of containers in the response. Use from 1 to
--   255 characters.
[$sel:maxResults:ListContainers'] :: ListContainers -> Maybe Natural

-- | Create a value of <a>ListContainers</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListContainers'</a>, <a>listContainers_nextToken</a>
--   - Only if you used <tt>MaxResults</tt> in the first command, enter the
--   token (which was included in the previous response) to obtain the next
--   set of containers. This token is included in a response only if there
--   actually are more containers to list.
--   
--   <a>$sel:maxResults:ListContainers'</a>,
--   <a>listContainers_maxResults</a> - Enter the maximum number of
--   containers in the response. Use from 1 to 255 characters.
newListContainers :: ListContainers

-- | Only if you used <tt>MaxResults</tt> in the first command, enter the
--   token (which was included in the previous response) to obtain the next
--   set of containers. This token is included in a response only if there
--   actually are more containers to list.
listContainers_nextToken :: Lens' ListContainers (Maybe Text)

-- | Enter the maximum number of containers in the response. Use from 1 to
--   255 characters.
listContainers_maxResults :: Lens' ListContainers (Maybe Natural)

-- | <i>See:</i> <a>newListContainersResponse</a> smart constructor.
data ListContainersResponse
ListContainersResponse' :: Maybe Text -> Int -> [Container] -> ListContainersResponse

-- | <tt>NextToken</tt> is the token to use in the next call to
--   <tt>ListContainers</tt>. This token is returned only if you included
--   the <tt>MaxResults</tt> tag in the original command, and only if there
--   are still containers to return.
[$sel:nextToken:ListContainersResponse'] :: ListContainersResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListContainersResponse'] :: ListContainersResponse -> Int

-- | The names of the containers.
[$sel:containers:ListContainersResponse'] :: ListContainersResponse -> [Container]

-- | Create a value of <a>ListContainersResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListContainers'</a>,
--   <a>listContainersResponse_nextToken</a> - <tt>NextToken</tt> is the
--   token to use in the next call to <tt>ListContainers</tt>. This token
--   is returned only if you included the <tt>MaxResults</tt> tag in the
--   original command, and only if there are still containers to return.
--   
--   <a>$sel:httpStatus:ListContainersResponse'</a>,
--   <a>listContainersResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:containers:ListContainersResponse'</a>,
--   <a>listContainersResponse_containers</a> - The names of the
--   containers.
newListContainersResponse :: Int -> ListContainersResponse

-- | <tt>NextToken</tt> is the token to use in the next call to
--   <tt>ListContainers</tt>. This token is returned only if you included
--   the <tt>MaxResults</tt> tag in the original command, and only if there
--   are still containers to return.
listContainersResponse_nextToken :: Lens' ListContainersResponse (Maybe Text)

-- | The response's http status code.
listContainersResponse_httpStatus :: Lens' ListContainersResponse Int

-- | The names of the containers.
listContainersResponse_containers :: Lens' ListContainersResponse [Container]
instance GHC.Generics.Generic Amazonka.MediaStore.ListContainers.ListContainers
instance GHC.Show.Show Amazonka.MediaStore.ListContainers.ListContainers
instance GHC.Read.Read Amazonka.MediaStore.ListContainers.ListContainers
instance GHC.Classes.Eq Amazonka.MediaStore.ListContainers.ListContainers
instance GHC.Generics.Generic Amazonka.MediaStore.ListContainers.ListContainersResponse
instance GHC.Show.Show Amazonka.MediaStore.ListContainers.ListContainersResponse
instance GHC.Read.Read Amazonka.MediaStore.ListContainers.ListContainersResponse
instance GHC.Classes.Eq Amazonka.MediaStore.ListContainers.ListContainersResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.ListContainers.ListContainers
instance Control.DeepSeq.NFData Amazonka.MediaStore.ListContainers.ListContainersResponse
instance Amazonka.Pager.AWSPager Amazonka.MediaStore.ListContainers.ListContainers
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.ListContainers.ListContainers
instance Control.DeepSeq.NFData Amazonka.MediaStore.ListContainers.ListContainers
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.ListContainers.ListContainers
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.ListContainers.ListContainers
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.ListContainers.ListContainers
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.ListContainers.ListContainers


-- | Returns the metric policy for the specified container.
module Amazonka.MediaStore.GetMetricPolicy

-- | <i>See:</i> <a>newGetMetricPolicy</a> smart constructor.
data GetMetricPolicy
GetMetricPolicy' :: Text -> GetMetricPolicy

-- | The name of the container that is associated with the metric policy.
[$sel:containerName:GetMetricPolicy'] :: GetMetricPolicy -> Text

-- | Create a value of <a>GetMetricPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:GetMetricPolicy'</a>,
--   <a>getMetricPolicy_containerName</a> - The name of the container that
--   is associated with the metric policy.
newGetMetricPolicy :: Text -> GetMetricPolicy

-- | The name of the container that is associated with the metric policy.
getMetricPolicy_containerName :: Lens' GetMetricPolicy Text

-- | <i>See:</i> <a>newGetMetricPolicyResponse</a> smart constructor.
data GetMetricPolicyResponse
GetMetricPolicyResponse' :: Int -> MetricPolicy -> GetMetricPolicyResponse

-- | The response's http status code.
[$sel:httpStatus:GetMetricPolicyResponse'] :: GetMetricPolicyResponse -> Int

-- | The metric policy that is associated with the specific container.
[$sel:metricPolicy:GetMetricPolicyResponse'] :: GetMetricPolicyResponse -> MetricPolicy

-- | Create a value of <a>GetMetricPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GetMetricPolicyResponse'</a>,
--   <a>getMetricPolicyResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:metricPolicy:GetMetricPolicyResponse'</a>,
--   <a>getMetricPolicyResponse_metricPolicy</a> - The metric policy that
--   is associated with the specific container.
newGetMetricPolicyResponse :: Int -> MetricPolicy -> GetMetricPolicyResponse

-- | The response's http status code.
getMetricPolicyResponse_httpStatus :: Lens' GetMetricPolicyResponse Int

-- | The metric policy that is associated with the specific container.
getMetricPolicyResponse_metricPolicy :: Lens' GetMetricPolicyResponse MetricPolicy
instance GHC.Generics.Generic Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicy
instance GHC.Show.Show Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicy
instance GHC.Read.Read Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicy
instance GHC.Classes.Eq Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicy
instance GHC.Generics.Generic Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicyResponse
instance GHC.Show.Show Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicyResponse
instance GHC.Read.Read Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicyResponse
instance GHC.Classes.Eq Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicy
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.GetMetricPolicy.GetMetricPolicy


-- | Retrieves the object lifecycle policy that is assigned to a container.
module Amazonka.MediaStore.GetLifecyclePolicy

-- | <i>See:</i> <a>newGetLifecyclePolicy</a> smart constructor.
data GetLifecyclePolicy
GetLifecyclePolicy' :: Text -> GetLifecyclePolicy

-- | The name of the container that the object lifecycle policy is assigned
--   to.
[$sel:containerName:GetLifecyclePolicy'] :: GetLifecyclePolicy -> Text

-- | Create a value of <a>GetLifecyclePolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:GetLifecyclePolicy'</a>,
--   <a>getLifecyclePolicy_containerName</a> - The name of the container
--   that the object lifecycle policy is assigned to.
newGetLifecyclePolicy :: Text -> GetLifecyclePolicy

-- | The name of the container that the object lifecycle policy is assigned
--   to.
getLifecyclePolicy_containerName :: Lens' GetLifecyclePolicy Text

-- | <i>See:</i> <a>newGetLifecyclePolicyResponse</a> smart constructor.
data GetLifecyclePolicyResponse
GetLifecyclePolicyResponse' :: Int -> Text -> GetLifecyclePolicyResponse

-- | The response's http status code.
[$sel:httpStatus:GetLifecyclePolicyResponse'] :: GetLifecyclePolicyResponse -> Int

-- | The object lifecycle policy that is assigned to the container.
[$sel:lifecyclePolicy:GetLifecyclePolicyResponse'] :: GetLifecyclePolicyResponse -> Text

-- | Create a value of <a>GetLifecyclePolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GetLifecyclePolicyResponse'</a>,
--   <a>getLifecyclePolicyResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:lifecyclePolicy:GetLifecyclePolicyResponse'</a>,
--   <a>getLifecyclePolicyResponse_lifecyclePolicy</a> - The object
--   lifecycle policy that is assigned to the container.
newGetLifecyclePolicyResponse :: Int -> Text -> GetLifecyclePolicyResponse

-- | The response's http status code.
getLifecyclePolicyResponse_httpStatus :: Lens' GetLifecyclePolicyResponse Int

-- | The object lifecycle policy that is assigned to the container.
getLifecyclePolicyResponse_lifecyclePolicy :: Lens' GetLifecyclePolicyResponse Text
instance GHC.Generics.Generic Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicy
instance GHC.Show.Show Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicy
instance GHC.Read.Read Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicy
instance GHC.Classes.Eq Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicy
instance GHC.Generics.Generic Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicyResponse
instance GHC.Show.Show Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicyResponse
instance GHC.Read.Read Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicyResponse
instance GHC.Classes.Eq Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicy
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicy
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.GetLifecyclePolicy.GetLifecyclePolicy


-- | Returns the cross-origin resource sharing (CORS) configuration
--   information that is set for the container.
--   
--   To use this operation, you must have permission to perform the
--   <tt>MediaStore:GetCorsPolicy</tt> action. By default, the container
--   owner has this permission and can grant it to others.
module Amazonka.MediaStore.GetCorsPolicy

-- | <i>See:</i> <a>newGetCorsPolicy</a> smart constructor.
data GetCorsPolicy
GetCorsPolicy' :: Text -> GetCorsPolicy

-- | The name of the container that the policy is assigned to.
[$sel:containerName:GetCorsPolicy'] :: GetCorsPolicy -> Text

-- | Create a value of <a>GetCorsPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:GetCorsPolicy'</a>,
--   <a>getCorsPolicy_containerName</a> - The name of the container that
--   the policy is assigned to.
newGetCorsPolicy :: Text -> GetCorsPolicy

-- | The name of the container that the policy is assigned to.
getCorsPolicy_containerName :: Lens' GetCorsPolicy Text

-- | <i>See:</i> <a>newGetCorsPolicyResponse</a> smart constructor.
data GetCorsPolicyResponse
GetCorsPolicyResponse' :: Int -> NonEmpty CorsRule -> GetCorsPolicyResponse

-- | The response's http status code.
[$sel:httpStatus:GetCorsPolicyResponse'] :: GetCorsPolicyResponse -> Int

-- | The CORS policy assigned to the container.
[$sel:corsPolicy:GetCorsPolicyResponse'] :: GetCorsPolicyResponse -> NonEmpty CorsRule

-- | Create a value of <a>GetCorsPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GetCorsPolicyResponse'</a>,
--   <a>getCorsPolicyResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:corsPolicy:GetCorsPolicyResponse'</a>,
--   <a>getCorsPolicyResponse_corsPolicy</a> - The CORS policy assigned to
--   the container.
newGetCorsPolicyResponse :: Int -> NonEmpty CorsRule -> GetCorsPolicyResponse

-- | The response's http status code.
getCorsPolicyResponse_httpStatus :: Lens' GetCorsPolicyResponse Int

-- | The CORS policy assigned to the container.
getCorsPolicyResponse_corsPolicy :: Lens' GetCorsPolicyResponse (NonEmpty CorsRule)
instance GHC.Generics.Generic Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicy
instance GHC.Show.Show Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicy
instance GHC.Read.Read Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicy
instance GHC.Classes.Eq Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicy
instance GHC.Generics.Generic Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicyResponse
instance GHC.Show.Show Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicyResponse
instance GHC.Read.Read Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicyResponse
instance GHC.Classes.Eq Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicy
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.GetCorsPolicy.GetCorsPolicy


-- | Retrieves the access policy for the specified container. For
--   information about the data that is included in an access policy, see
--   the <a>AWS Identity and Access Management User Guide</a>.
module Amazonka.MediaStore.GetContainerPolicy

-- | <i>See:</i> <a>newGetContainerPolicy</a> smart constructor.
data GetContainerPolicy
GetContainerPolicy' :: Text -> GetContainerPolicy

-- | The name of the container.
[$sel:containerName:GetContainerPolicy'] :: GetContainerPolicy -> Text

-- | Create a value of <a>GetContainerPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:GetContainerPolicy'</a>,
--   <a>getContainerPolicy_containerName</a> - The name of the container.
newGetContainerPolicy :: Text -> GetContainerPolicy

-- | The name of the container.
getContainerPolicy_containerName :: Lens' GetContainerPolicy Text

-- | <i>See:</i> <a>newGetContainerPolicyResponse</a> smart constructor.
data GetContainerPolicyResponse
GetContainerPolicyResponse' :: Int -> Text -> GetContainerPolicyResponse

-- | The response's http status code.
[$sel:httpStatus:GetContainerPolicyResponse'] :: GetContainerPolicyResponse -> Int

-- | The contents of the access policy.
[$sel:policy:GetContainerPolicyResponse'] :: GetContainerPolicyResponse -> Text

-- | Create a value of <a>GetContainerPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GetContainerPolicyResponse'</a>,
--   <a>getContainerPolicyResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:policy:GetContainerPolicyResponse'</a>,
--   <a>getContainerPolicyResponse_policy</a> - The contents of the access
--   policy.
newGetContainerPolicyResponse :: Int -> Text -> GetContainerPolicyResponse

-- | The response's http status code.
getContainerPolicyResponse_httpStatus :: Lens' GetContainerPolicyResponse Int

-- | The contents of the access policy.
getContainerPolicyResponse_policy :: Lens' GetContainerPolicyResponse Text
instance GHC.Generics.Generic Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicy
instance GHC.Show.Show Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicy
instance GHC.Read.Read Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicy
instance GHC.Classes.Eq Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicy
instance GHC.Generics.Generic Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicyResponse
instance GHC.Show.Show Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicyResponse
instance GHC.Read.Read Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicyResponse
instance GHC.Classes.Eq Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicy
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.GetContainerPolicy.GetContainerPolicy


-- | Retrieves the properties of the requested container. This request is
--   commonly used to retrieve the endpoint of a container. An endpoint is
--   a value assigned by the service when a new container is created. A
--   container's endpoint does not change after it has been assigned. The
--   <tt>DescribeContainer</tt> request returns a single <tt>Container</tt>
--   object based on <tt>ContainerName</tt>. To return all
--   <tt>Container</tt> objects that are associated with a specified AWS
--   account, use ListContainers.
module Amazonka.MediaStore.DescribeContainer

-- | <i>See:</i> <a>newDescribeContainer</a> smart constructor.
data DescribeContainer
DescribeContainer' :: Maybe Text -> DescribeContainer

-- | The name of the container to query.
[$sel:containerName:DescribeContainer'] :: DescribeContainer -> Maybe Text

-- | Create a value of <a>DescribeContainer</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:DescribeContainer'</a>,
--   <a>describeContainer_containerName</a> - The name of the container to
--   query.
newDescribeContainer :: DescribeContainer

-- | The name of the container to query.
describeContainer_containerName :: Lens' DescribeContainer (Maybe Text)

-- | <i>See:</i> <a>newDescribeContainerResponse</a> smart constructor.
data DescribeContainerResponse
DescribeContainerResponse' :: Maybe Container -> Int -> DescribeContainerResponse

-- | The name of the queried container.
[$sel:container:DescribeContainerResponse'] :: DescribeContainerResponse -> Maybe Container

-- | The response's http status code.
[$sel:httpStatus:DescribeContainerResponse'] :: DescribeContainerResponse -> Int

-- | Create a value of <a>DescribeContainerResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:container:DescribeContainerResponse'</a>,
--   <a>describeContainerResponse_container</a> - The name of the queried
--   container.
--   
--   <a>$sel:httpStatus:DescribeContainerResponse'</a>,
--   <a>describeContainerResponse_httpStatus</a> - The response's http
--   status code.
newDescribeContainerResponse :: Int -> DescribeContainerResponse

-- | The name of the queried container.
describeContainerResponse_container :: Lens' DescribeContainerResponse (Maybe Container)

-- | The response's http status code.
describeContainerResponse_httpStatus :: Lens' DescribeContainerResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.DescribeContainer.DescribeContainer
instance GHC.Show.Show Amazonka.MediaStore.DescribeContainer.DescribeContainer
instance GHC.Read.Read Amazonka.MediaStore.DescribeContainer.DescribeContainer
instance GHC.Classes.Eq Amazonka.MediaStore.DescribeContainer.DescribeContainer
instance GHC.Generics.Generic Amazonka.MediaStore.DescribeContainer.DescribeContainerResponse
instance GHC.Show.Show Amazonka.MediaStore.DescribeContainer.DescribeContainerResponse
instance GHC.Read.Read Amazonka.MediaStore.DescribeContainer.DescribeContainerResponse
instance GHC.Classes.Eq Amazonka.MediaStore.DescribeContainer.DescribeContainerResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.DescribeContainer.DescribeContainer
instance Control.DeepSeq.NFData Amazonka.MediaStore.DescribeContainer.DescribeContainerResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.DescribeContainer.DescribeContainer
instance Control.DeepSeq.NFData Amazonka.MediaStore.DescribeContainer.DescribeContainer
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.DescribeContainer.DescribeContainer
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.DescribeContainer.DescribeContainer
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.DescribeContainer.DescribeContainer
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.DescribeContainer.DescribeContainer


-- | Deletes the metric policy that is associated with the specified
--   container. If there is no metric policy associated with the container,
--   MediaStore doesn't send metrics to CloudWatch.
module Amazonka.MediaStore.DeleteMetricPolicy

-- | <i>See:</i> <a>newDeleteMetricPolicy</a> smart constructor.
data DeleteMetricPolicy
DeleteMetricPolicy' :: Text -> DeleteMetricPolicy

-- | The name of the container that is associated with the metric policy
--   that you want to delete.
[$sel:containerName:DeleteMetricPolicy'] :: DeleteMetricPolicy -> Text

-- | Create a value of <a>DeleteMetricPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:DeleteMetricPolicy'</a>,
--   <a>deleteMetricPolicy_containerName</a> - The name of the container
--   that is associated with the metric policy that you want to delete.
newDeleteMetricPolicy :: Text -> DeleteMetricPolicy

-- | The name of the container that is associated with the metric policy
--   that you want to delete.
deleteMetricPolicy_containerName :: Lens' DeleteMetricPolicy Text

-- | <i>See:</i> <a>newDeleteMetricPolicyResponse</a> smart constructor.
data DeleteMetricPolicyResponse
DeleteMetricPolicyResponse' :: Int -> DeleteMetricPolicyResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteMetricPolicyResponse'] :: DeleteMetricPolicyResponse -> Int

-- | Create a value of <a>DeleteMetricPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteMetricPolicyResponse'</a>,
--   <a>deleteMetricPolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteMetricPolicyResponse :: Int -> DeleteMetricPolicyResponse

-- | The response's http status code.
deleteMetricPolicyResponse_httpStatus :: Lens' DeleteMetricPolicyResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicy
instance GHC.Show.Show Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicy
instance GHC.Read.Read Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicy
instance GHC.Classes.Eq Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicy
instance GHC.Generics.Generic Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicyResponse
instance GHC.Show.Show Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicyResponse
instance GHC.Read.Read Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicyResponse
instance GHC.Classes.Eq Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicy
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.DeleteMetricPolicy.DeleteMetricPolicy


-- | Removes an object lifecycle policy from a container. It takes up to 20
--   minutes for the change to take effect.
module Amazonka.MediaStore.DeleteLifecyclePolicy

-- | <i>See:</i> <a>newDeleteLifecyclePolicy</a> smart constructor.
data DeleteLifecyclePolicy
DeleteLifecyclePolicy' :: Text -> DeleteLifecyclePolicy

-- | The name of the container that holds the object lifecycle policy.
[$sel:containerName:DeleteLifecyclePolicy'] :: DeleteLifecyclePolicy -> Text

-- | Create a value of <a>DeleteLifecyclePolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:DeleteLifecyclePolicy'</a>,
--   <a>deleteLifecyclePolicy_containerName</a> - The name of the container
--   that holds the object lifecycle policy.
newDeleteLifecyclePolicy :: Text -> DeleteLifecyclePolicy

-- | The name of the container that holds the object lifecycle policy.
deleteLifecyclePolicy_containerName :: Lens' DeleteLifecyclePolicy Text

-- | <i>See:</i> <a>newDeleteLifecyclePolicyResponse</a> smart constructor.
data DeleteLifecyclePolicyResponse
DeleteLifecyclePolicyResponse' :: Int -> DeleteLifecyclePolicyResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteLifecyclePolicyResponse'] :: DeleteLifecyclePolicyResponse -> Int

-- | Create a value of <a>DeleteLifecyclePolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteLifecyclePolicyResponse'</a>,
--   <a>deleteLifecyclePolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteLifecyclePolicyResponse :: Int -> DeleteLifecyclePolicyResponse

-- | The response's http status code.
deleteLifecyclePolicyResponse_httpStatus :: Lens' DeleteLifecyclePolicyResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance GHC.Show.Show Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance GHC.Read.Read Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance GHC.Classes.Eq Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance GHC.Generics.Generic Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicyResponse
instance GHC.Show.Show Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicyResponse
instance GHC.Read.Read Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicyResponse
instance GHC.Classes.Eq Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicy
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.DeleteLifecyclePolicy.DeleteLifecyclePolicy


-- | Deletes the cross-origin resource sharing (CORS) configuration
--   information that is set for the container.
--   
--   To use this operation, you must have permission to perform the
--   <tt>MediaStore:DeleteCorsPolicy</tt> action. The container owner has
--   this permission by default and can grant this permission to others.
module Amazonka.MediaStore.DeleteCorsPolicy

-- | <i>See:</i> <a>newDeleteCorsPolicy</a> smart constructor.
data DeleteCorsPolicy
DeleteCorsPolicy' :: Text -> DeleteCorsPolicy

-- | The name of the container to remove the policy from.
[$sel:containerName:DeleteCorsPolicy'] :: DeleteCorsPolicy -> Text

-- | Create a value of <a>DeleteCorsPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:DeleteCorsPolicy'</a>,
--   <a>deleteCorsPolicy_containerName</a> - The name of the container to
--   remove the policy from.
newDeleteCorsPolicy :: Text -> DeleteCorsPolicy

-- | The name of the container to remove the policy from.
deleteCorsPolicy_containerName :: Lens' DeleteCorsPolicy Text

-- | <i>See:</i> <a>newDeleteCorsPolicyResponse</a> smart constructor.
data DeleteCorsPolicyResponse
DeleteCorsPolicyResponse' :: Int -> DeleteCorsPolicyResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteCorsPolicyResponse'] :: DeleteCorsPolicyResponse -> Int

-- | Create a value of <a>DeleteCorsPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteCorsPolicyResponse'</a>,
--   <a>deleteCorsPolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteCorsPolicyResponse :: Int -> DeleteCorsPolicyResponse

-- | The response's http status code.
deleteCorsPolicyResponse_httpStatus :: Lens' DeleteCorsPolicyResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicy
instance GHC.Show.Show Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicy
instance GHC.Read.Read Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicy
instance GHC.Classes.Eq Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicy
instance GHC.Generics.Generic Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicyResponse
instance GHC.Show.Show Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicyResponse
instance GHC.Read.Read Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicyResponse
instance GHC.Classes.Eq Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicy
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.DeleteCorsPolicy.DeleteCorsPolicy


-- | Deletes the access policy that is associated with the specified
--   container.
module Amazonka.MediaStore.DeleteContainerPolicy

-- | <i>See:</i> <a>newDeleteContainerPolicy</a> smart constructor.
data DeleteContainerPolicy
DeleteContainerPolicy' :: Text -> DeleteContainerPolicy

-- | The name of the container that holds the policy.
[$sel:containerName:DeleteContainerPolicy'] :: DeleteContainerPolicy -> Text

-- | Create a value of <a>DeleteContainerPolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:DeleteContainerPolicy'</a>,
--   <a>deleteContainerPolicy_containerName</a> - The name of the container
--   that holds the policy.
newDeleteContainerPolicy :: Text -> DeleteContainerPolicy

-- | The name of the container that holds the policy.
deleteContainerPolicy_containerName :: Lens' DeleteContainerPolicy Text

-- | <i>See:</i> <a>newDeleteContainerPolicyResponse</a> smart constructor.
data DeleteContainerPolicyResponse
DeleteContainerPolicyResponse' :: Int -> DeleteContainerPolicyResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteContainerPolicyResponse'] :: DeleteContainerPolicyResponse -> Int

-- | Create a value of <a>DeleteContainerPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteContainerPolicyResponse'</a>,
--   <a>deleteContainerPolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteContainerPolicyResponse :: Int -> DeleteContainerPolicyResponse

-- | The response's http status code.
deleteContainerPolicyResponse_httpStatus :: Lens' DeleteContainerPolicyResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicy
instance GHC.Show.Show Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicy
instance GHC.Read.Read Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicy
instance GHC.Classes.Eq Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicy
instance GHC.Generics.Generic Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicyResponse
instance GHC.Show.Show Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicyResponse
instance GHC.Read.Read Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicyResponse
instance GHC.Classes.Eq Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicyResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicyResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicy
instance Control.DeepSeq.NFData Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicy
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicy
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicy
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.DeleteContainerPolicy.DeleteContainerPolicy


-- | Deletes the specified container. Before you make a
--   <tt>DeleteContainer</tt> request, delete any objects in the container
--   or in any folders in the container. You can delete only empty
--   containers.
module Amazonka.MediaStore.DeleteContainer

-- | <i>See:</i> <a>newDeleteContainer</a> smart constructor.
data DeleteContainer
DeleteContainer' :: Text -> DeleteContainer

-- | The name of the container to delete.
[$sel:containerName:DeleteContainer'] :: DeleteContainer -> Text

-- | Create a value of <a>DeleteContainer</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:DeleteContainer'</a>,
--   <a>deleteContainer_containerName</a> - The name of the container to
--   delete.
newDeleteContainer :: Text -> DeleteContainer

-- | The name of the container to delete.
deleteContainer_containerName :: Lens' DeleteContainer Text

-- | <i>See:</i> <a>newDeleteContainerResponse</a> smart constructor.
data DeleteContainerResponse
DeleteContainerResponse' :: Int -> DeleteContainerResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteContainerResponse'] :: DeleteContainerResponse -> Int

-- | Create a value of <a>DeleteContainerResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteContainerResponse'</a>,
--   <a>deleteContainerResponse_httpStatus</a> - The response's http status
--   code.
newDeleteContainerResponse :: Int -> DeleteContainerResponse

-- | The response's http status code.
deleteContainerResponse_httpStatus :: Lens' DeleteContainerResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.DeleteContainer.DeleteContainer
instance GHC.Show.Show Amazonka.MediaStore.DeleteContainer.DeleteContainer
instance GHC.Read.Read Amazonka.MediaStore.DeleteContainer.DeleteContainer
instance GHC.Classes.Eq Amazonka.MediaStore.DeleteContainer.DeleteContainer
instance GHC.Generics.Generic Amazonka.MediaStore.DeleteContainer.DeleteContainerResponse
instance GHC.Show.Show Amazonka.MediaStore.DeleteContainer.DeleteContainerResponse
instance GHC.Read.Read Amazonka.MediaStore.DeleteContainer.DeleteContainerResponse
instance GHC.Classes.Eq Amazonka.MediaStore.DeleteContainer.DeleteContainerResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.DeleteContainer.DeleteContainer
instance Control.DeepSeq.NFData Amazonka.MediaStore.DeleteContainer.DeleteContainerResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.DeleteContainer.DeleteContainer
instance Control.DeepSeq.NFData Amazonka.MediaStore.DeleteContainer.DeleteContainer
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.DeleteContainer.DeleteContainer
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.DeleteContainer.DeleteContainer
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.DeleteContainer.DeleteContainer
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.DeleteContainer.DeleteContainer


-- | Creates a storage container to hold objects. A container is similar to
--   a bucket in the Amazon S3 service.
module Amazonka.MediaStore.CreateContainer

-- | <i>See:</i> <a>newCreateContainer</a> smart constructor.
data CreateContainer
CreateContainer' :: Maybe (NonEmpty Tag) -> Text -> CreateContainer

-- | An array of key:value pairs that you define. These values can be
--   anything that you want. Typically, the tag key represents a category
--   (such as "environment") and the tag value represents a specific value
--   within that category (such as "test," "development," or "production").
--   You can add up to 50 tags to each container. For more information
--   about tagging, including naming and usage conventions, see <a>Tagging
--   Resources in MediaStore</a>.
[$sel:tags:CreateContainer'] :: CreateContainer -> Maybe (NonEmpty Tag)

-- | The name for the container. The name must be from 1 to 255 characters.
--   Container names must be unique to your AWS account within a specific
--   region. As an example, you could create a container named
--   <tt>movies</tt> in every region, as long as you don’t have an existing
--   container with that name.
[$sel:containerName:CreateContainer'] :: CreateContainer -> Text

-- | Create a value of <a>CreateContainer</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:CreateContainer'</a>, <a>createContainer_tags</a> - An
--   array of key:value pairs that you define. These values can be anything
--   that you want. Typically, the tag key represents a category (such as
--   "environment") and the tag value represents a specific value within
--   that category (such as "test," "development," or "production"). You
--   can add up to 50 tags to each container. For more information about
--   tagging, including naming and usage conventions, see <a>Tagging
--   Resources in MediaStore</a>.
--   
--   <a>$sel:containerName:CreateContainer'</a>,
--   <a>createContainer_containerName</a> - The name for the container. The
--   name must be from 1 to 255 characters. Container names must be unique
--   to your AWS account within a specific region. As an example, you could
--   create a container named <tt>movies</tt> in every region, as long as
--   you don’t have an existing container with that name.
newCreateContainer :: Text -> CreateContainer

-- | An array of key:value pairs that you define. These values can be
--   anything that you want. Typically, the tag key represents a category
--   (such as "environment") and the tag value represents a specific value
--   within that category (such as "test," "development," or "production").
--   You can add up to 50 tags to each container. For more information
--   about tagging, including naming and usage conventions, see <a>Tagging
--   Resources in MediaStore</a>.
createContainer_tags :: Lens' CreateContainer (Maybe (NonEmpty Tag))

-- | The name for the container. The name must be from 1 to 255 characters.
--   Container names must be unique to your AWS account within a specific
--   region. As an example, you could create a container named
--   <tt>movies</tt> in every region, as long as you don’t have an existing
--   container with that name.
createContainer_containerName :: Lens' CreateContainer Text

-- | <i>See:</i> <a>newCreateContainerResponse</a> smart constructor.
data CreateContainerResponse
CreateContainerResponse' :: Int -> Container -> CreateContainerResponse

-- | The response's http status code.
[$sel:httpStatus:CreateContainerResponse'] :: CreateContainerResponse -> Int

-- | ContainerARN: The Amazon Resource Name (ARN) of the newly created
--   container. The ARN has the following format:
--   arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;. For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
--   
--   ContainerName: The container name as specified in the request.
--   
--   CreationTime: Unix time stamp.
--   
--   Status: The status of container creation or deletion. The status is
--   one of the following: <tt>CREATING</tt>, <tt>ACTIVE</tt>, or
--   <tt>DELETING</tt>. While the service is creating the container, the
--   status is <tt>CREATING</tt>. When an endpoint is available, the status
--   changes to <tt>ACTIVE</tt>.
--   
--   The return value does not include the container's endpoint. To make
--   downstream requests, you must obtain this value by using
--   DescribeContainer or ListContainers.
[$sel:container:CreateContainerResponse'] :: CreateContainerResponse -> Container

-- | Create a value of <a>CreateContainerResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreateContainerResponse'</a>,
--   <a>createContainerResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:container:CreateContainerResponse'</a>,
--   <a>createContainerResponse_container</a> - ContainerARN: The Amazon
--   Resource Name (ARN) of the newly created container. The ARN has the
--   following format: arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;. For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
--   
--   ContainerName: The container name as specified in the request.
--   
--   CreationTime: Unix time stamp.
--   
--   Status: The status of container creation or deletion. The status is
--   one of the following: <tt>CREATING</tt>, <tt>ACTIVE</tt>, or
--   <tt>DELETING</tt>. While the service is creating the container, the
--   status is <tt>CREATING</tt>. When an endpoint is available, the status
--   changes to <tt>ACTIVE</tt>.
--   
--   The return value does not include the container's endpoint. To make
--   downstream requests, you must obtain this value by using
--   DescribeContainer or ListContainers.
newCreateContainerResponse :: Int -> Container -> CreateContainerResponse

-- | The response's http status code.
createContainerResponse_httpStatus :: Lens' CreateContainerResponse Int

-- | ContainerARN: The Amazon Resource Name (ARN) of the newly created
--   container. The ARN has the following format:
--   arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;. For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
--   
--   ContainerName: The container name as specified in the request.
--   
--   CreationTime: Unix time stamp.
--   
--   Status: The status of container creation or deletion. The status is
--   one of the following: <tt>CREATING</tt>, <tt>ACTIVE</tt>, or
--   <tt>DELETING</tt>. While the service is creating the container, the
--   status is <tt>CREATING</tt>. When an endpoint is available, the status
--   changes to <tt>ACTIVE</tt>.
--   
--   The return value does not include the container's endpoint. To make
--   downstream requests, you must obtain this value by using
--   DescribeContainer or ListContainers.
createContainerResponse_container :: Lens' CreateContainerResponse Container
instance GHC.Generics.Generic Amazonka.MediaStore.CreateContainer.CreateContainer
instance GHC.Show.Show Amazonka.MediaStore.CreateContainer.CreateContainer
instance GHC.Read.Read Amazonka.MediaStore.CreateContainer.CreateContainer
instance GHC.Classes.Eq Amazonka.MediaStore.CreateContainer.CreateContainer
instance GHC.Generics.Generic Amazonka.MediaStore.CreateContainer.CreateContainerResponse
instance GHC.Show.Show Amazonka.MediaStore.CreateContainer.CreateContainerResponse
instance GHC.Read.Read Amazonka.MediaStore.CreateContainer.CreateContainerResponse
instance GHC.Classes.Eq Amazonka.MediaStore.CreateContainer.CreateContainerResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.CreateContainer.CreateContainer
instance Control.DeepSeq.NFData Amazonka.MediaStore.CreateContainer.CreateContainerResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.CreateContainer.CreateContainer
instance Control.DeepSeq.NFData Amazonka.MediaStore.CreateContainer.CreateContainer
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.CreateContainer.CreateContainer
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.CreateContainer.CreateContainer
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.CreateContainer.CreateContainer
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.CreateContainer.CreateContainer


-- | Removes tags from the specified container. You can specify one or more
--   tags to remove.
module Amazonka.MediaStore.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | The Amazon Resource Name (ARN) for the container.
[$sel:resource:UntagResource'] :: UntagResource -> Text

-- | A comma-separated list of keys for tags that you want to remove from
--   the container. For example, if your container has two tags
--   (customer:CompanyA and priority:High) and you want to remove one of
--   the tags (priority:High), you specify the key for the tag that you
--   want to remove (priority).
[$sel:tagKeys:UntagResource'] :: UntagResource -> [Text]

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resource:UntagResource'</a>, <a>untagResource_resource</a> -
--   The Amazon Resource Name (ARN) for the container.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - A
--   comma-separated list of keys for tags that you want to remove from the
--   container. For example, if your container has two tags
--   (customer:CompanyA and priority:High) and you want to remove one of
--   the tags (priority:High), you specify the key for the tag that you
--   want to remove (priority).
newUntagResource :: Text -> UntagResource

-- | The Amazon Resource Name (ARN) for the container.
untagResource_resource :: Lens' UntagResource Text

-- | A comma-separated list of keys for tags that you want to remove from
--   the container. For example, if your container has two tags
--   (customer:CompanyA and priority:High) and you want to remove one of
--   the tags (priority:High), you specify the key for the tag that you
--   want to remove (priority).
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:UntagResourceResponse'] :: UntagResourceResponse -> Int

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int
instance GHC.Generics.Generic Amazonka.MediaStore.UntagResource.UntagResource
instance GHC.Show.Show Amazonka.MediaStore.UntagResource.UntagResource
instance GHC.Read.Read Amazonka.MediaStore.UntagResource.UntagResource
instance GHC.Classes.Eq Amazonka.MediaStore.UntagResource.UntagResource
instance GHC.Generics.Generic Amazonka.MediaStore.UntagResource.UntagResourceResponse
instance GHC.Show.Show Amazonka.MediaStore.UntagResource.UntagResourceResponse
instance GHC.Read.Read Amazonka.MediaStore.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Amazonka.MediaStore.UntagResource.UntagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.MediaStore.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.MediaStore.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.MediaStore.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.MediaStore.UntagResource.UntagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.MediaStore.UntagResource.UntagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.MediaStore.UntagResource.UntagResource
instance Amazonka.Data.Path.ToPath Amazonka.MediaStore.UntagResource.UntagResource
instance Amazonka.Data.Query.ToQuery Amazonka.MediaStore.UntagResource.UntagResource


module Amazonka.MediaStore.Lens

-- | The name of the container that you want to stop access logging on.
stopAccessLogging_containerName :: Lens' StopAccessLogging Text

-- | The response's http status code.
stopAccessLoggingResponse_httpStatus :: Lens' StopAccessLoggingResponse Int

-- | The name of the container that you want to assign the object lifecycle
--   policy to.
putLifecyclePolicy_containerName :: Lens' PutLifecyclePolicy Text

-- | The object lifecycle policy to apply to the container.
putLifecyclePolicy_lifecyclePolicy :: Lens' PutLifecyclePolicy Text

-- | The response's http status code.
putLifecyclePolicyResponse_httpStatus :: Lens' PutLifecyclePolicyResponse Int

-- | The name of the container that holds the object lifecycle policy.
deleteLifecyclePolicy_containerName :: Lens' DeleteLifecyclePolicy Text

-- | The response's http status code.
deleteLifecyclePolicyResponse_httpStatus :: Lens' DeleteLifecyclePolicyResponse Int

-- | The Amazon Resource Name (ARN) for the container.
listTagsForResource_resource :: Lens' ListTagsForResource Text

-- | An array of key:value pairs that are assigned to the container.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe (NonEmpty Tag))

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int

-- | An array of key:value pairs that you define. These values can be
--   anything that you want. Typically, the tag key represents a category
--   (such as "environment") and the tag value represents a specific value
--   within that category (such as "test," "development," or "production").
--   You can add up to 50 tags to each container. For more information
--   about tagging, including naming and usage conventions, see <a>Tagging
--   Resources in MediaStore</a>.
createContainer_tags :: Lens' CreateContainer (Maybe (NonEmpty Tag))

-- | The name for the container. The name must be from 1 to 255 characters.
--   Container names must be unique to your AWS account within a specific
--   region. As an example, you could create a container named
--   <tt>movies</tt> in every region, as long as you don’t have an existing
--   container with that name.
createContainer_containerName :: Lens' CreateContainer Text

-- | The response's http status code.
createContainerResponse_httpStatus :: Lens' CreateContainerResponse Int

-- | ContainerARN: The Amazon Resource Name (ARN) of the newly created
--   container. The ARN has the following format:
--   arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;. For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
--   
--   ContainerName: The container name as specified in the request.
--   
--   CreationTime: Unix time stamp.
--   
--   Status: The status of container creation or deletion. The status is
--   one of the following: <tt>CREATING</tt>, <tt>ACTIVE</tt>, or
--   <tt>DELETING</tt>. While the service is creating the container, the
--   status is <tt>CREATING</tt>. When an endpoint is available, the status
--   changes to <tt>ACTIVE</tt>.
--   
--   The return value does not include the container's endpoint. To make
--   downstream requests, you must obtain this value by using
--   DescribeContainer or ListContainers.
createContainerResponse_container :: Lens' CreateContainerResponse Container

-- | Only if you used <tt>MaxResults</tt> in the first command, enter the
--   token (which was included in the previous response) to obtain the next
--   set of containers. This token is included in a response only if there
--   actually are more containers to list.
listContainers_nextToken :: Lens' ListContainers (Maybe Text)

-- | Enter the maximum number of containers in the response. Use from 1 to
--   255 characters.
listContainers_maxResults :: Lens' ListContainers (Maybe Natural)

-- | <tt>NextToken</tt> is the token to use in the next call to
--   <tt>ListContainers</tt>. This token is returned only if you included
--   the <tt>MaxResults</tt> tag in the original command, and only if there
--   are still containers to return.
listContainersResponse_nextToken :: Lens' ListContainersResponse (Maybe Text)

-- | The response's http status code.
listContainersResponse_httpStatus :: Lens' ListContainersResponse Int

-- | The names of the containers.
listContainersResponse_containers :: Lens' ListContainersResponse [Container]

-- | The name of the container to delete.
deleteContainer_containerName :: Lens' DeleteContainer Text

-- | The response's http status code.
deleteContainerResponse_httpStatus :: Lens' DeleteContainerResponse Int

-- | The name of the container that you want to assign the CORS policy to.
putCorsPolicy_containerName :: Lens' PutCorsPolicy Text

-- | The CORS policy to apply to the container.
putCorsPolicy_corsPolicy :: Lens' PutCorsPolicy (NonEmpty CorsRule)

-- | The response's http status code.
putCorsPolicyResponse_httpStatus :: Lens' PutCorsPolicyResponse Int

-- | The name of the container to remove the policy from.
deleteCorsPolicy_containerName :: Lens' DeleteCorsPolicy Text

-- | The response's http status code.
deleteCorsPolicyResponse_httpStatus :: Lens' DeleteCorsPolicyResponse Int

-- | The name of the container that you want to start access logging on.
startAccessLogging_containerName :: Lens' StartAccessLogging Text

-- | The response's http status code.
startAccessLoggingResponse_httpStatus :: Lens' StartAccessLoggingResponse Int

-- | The name of the container to query.
describeContainer_containerName :: Lens' DescribeContainer (Maybe Text)

-- | The name of the queried container.
describeContainerResponse_container :: Lens' DescribeContainerResponse (Maybe Container)

-- | The response's http status code.
describeContainerResponse_httpStatus :: Lens' DescribeContainerResponse Int

-- | The name of the container that is associated with the metric policy.
getMetricPolicy_containerName :: Lens' GetMetricPolicy Text

-- | The response's http status code.
getMetricPolicyResponse_httpStatus :: Lens' GetMetricPolicyResponse Int

-- | The metric policy that is associated with the specific container.
getMetricPolicyResponse_metricPolicy :: Lens' GetMetricPolicyResponse MetricPolicy

-- | The name of the container that is associated with the metric policy
--   that you want to delete.
deleteMetricPolicy_containerName :: Lens' DeleteMetricPolicy Text

-- | The response's http status code.
deleteMetricPolicyResponse_httpStatus :: Lens' DeleteMetricPolicyResponse Int

-- | The name of the container that you want to add the metric policy to.
putMetricPolicy_containerName :: Lens' PutMetricPolicy Text

-- | The metric policy that you want to associate with the container. In
--   the policy, you must indicate whether you want MediaStore to send
--   container-level metrics. You can also include up to five rules to
--   define groups of objects that you want MediaStore to send object-level
--   metrics for. If you include rules in the policy, construct each rule
--   with both of the following:
--   
--   <ul>
--   <li>An object group that defines which objects to include in the
--   group. The definition can be a path or a file name, but it can't have
--   more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _
--   (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde),
--   / (forward slash), and * (asterisk). Wildcards (*) are
--   acceptable.</li>
--   <li>An object group name that allows you to refer to the object group.
--   The name can't have more than 30 characters. Valid characters are:
--   a-z, A-Z, 0-9, and _ (underscore).</li>
--   </ul>
putMetricPolicy_metricPolicy :: Lens' PutMetricPolicy MetricPolicy

-- | The response's http status code.
putMetricPolicyResponse_httpStatus :: Lens' PutMetricPolicyResponse Int

-- | The name of the container that the object lifecycle policy is assigned
--   to.
getLifecyclePolicy_containerName :: Lens' GetLifecyclePolicy Text

-- | The response's http status code.
getLifecyclePolicyResponse_httpStatus :: Lens' GetLifecyclePolicyResponse Int

-- | The object lifecycle policy that is assigned to the container.
getLifecyclePolicyResponse_lifecyclePolicy :: Lens' GetLifecyclePolicyResponse Text

-- | The Amazon Resource Name (ARN) for the container.
tagResource_resource :: Lens' TagResource Text

-- | An array of key:value pairs that you want to add to the container. You
--   need to specify only the tags that you want to add or update. For
--   example, suppose a container already has two tags (customer:CompanyA
--   and priority:High). You want to change the priority tag and also add a
--   third tag (type:Contract). For TagResource, you specify the following
--   tags: priority:Medium, type:Contract. The result is that your
--   container has three tags: customer:CompanyA, priority:Medium, and
--   type:Contract.
tagResource_tags :: Lens' TagResource (NonEmpty Tag)

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int

-- | The name of the container that the policy is assigned to.
getCorsPolicy_containerName :: Lens' GetCorsPolicy Text

-- | The response's http status code.
getCorsPolicyResponse_httpStatus :: Lens' GetCorsPolicyResponse Int

-- | The CORS policy assigned to the container.
getCorsPolicyResponse_corsPolicy :: Lens' GetCorsPolicyResponse (NonEmpty CorsRule)

-- | The Amazon Resource Name (ARN) for the container.
untagResource_resource :: Lens' UntagResource Text

-- | A comma-separated list of keys for tags that you want to remove from
--   the container. For example, if your container has two tags
--   (customer:CompanyA and priority:High) and you want to remove one of
--   the tags (priority:High), you specify the key for the tag that you
--   want to remove (priority).
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int

-- | The name of the container that holds the policy.
deleteContainerPolicy_containerName :: Lens' DeleteContainerPolicy Text

-- | The response's http status code.
deleteContainerPolicyResponse_httpStatus :: Lens' DeleteContainerPolicyResponse Int

-- | The name of the container.
putContainerPolicy_containerName :: Lens' PutContainerPolicy Text

-- | The contents of the policy, which includes the following:
--   
--   <ul>
--   <li>One <tt>Version</tt> tag</li>
--   <li>One <tt>Statement</tt> tag that contains the standard tags for the
--   policy.</li>
--   </ul>
putContainerPolicy_policy :: Lens' PutContainerPolicy Text

-- | The response's http status code.
putContainerPolicyResponse_httpStatus :: Lens' PutContainerPolicyResponse Int

-- | The name of the container.
getContainerPolicy_containerName :: Lens' GetContainerPolicy Text

-- | The response's http status code.
getContainerPolicyResponse_httpStatus :: Lens' GetContainerPolicyResponse Int

-- | The contents of the access policy.
getContainerPolicyResponse_policy :: Lens' GetContainerPolicyResponse Text

-- | Unix timestamp.
container_creationTime :: Lens' Container (Maybe UTCTime)

-- | The status of container creation or deletion. The status is one of the
--   following: <tt>CREATING</tt>, <tt>ACTIVE</tt>, or <tt>DELETING</tt>.
--   While the service is creating the container, the status is
--   <tt>CREATING</tt>. When the endpoint is available, the status changes
--   to <tt>ACTIVE</tt>.
container_status :: Lens' Container (Maybe ContainerStatus)

-- | The state of access logging on the container. This value is
--   <tt>false</tt> by default, indicating that AWS Elemental MediaStore
--   does not send access logs to Amazon CloudWatch Logs. When you enable
--   access logging on the container, MediaStore changes this value to
--   <tt>true</tt>, indicating that the service delivers access logs for
--   objects stored in that container to CloudWatch Logs.
container_accessLoggingEnabled :: Lens' Container (Maybe Bool)

-- | The Amazon Resource Name (ARN) of the container. The ARN has the
--   following format:
--   
--   arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;
--   
--   For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
container_arn :: Lens' Container (Maybe Text)

-- | The name of the container.
container_name :: Lens' Container (Maybe Text)

-- | The DNS endpoint of the container. Use the endpoint to identify the
--   specific container when sending requests to the data plane. The
--   service assigns this value when the container is created. Once the
--   value has been assigned, it does not change.
container_endpoint :: Lens' Container (Maybe Text)

-- | Identifies an HTTP method that the origin that is specified in the
--   rule is allowed to execute.
--   
--   Each CORS rule must contain at least one <tt>AllowedMethods</tt> and
--   one <tt>AllowedOrigins</tt> element.
corsRule_allowedMethods :: Lens' CorsRule (Maybe (NonEmpty MethodName))

-- | The time in seconds that your browser caches the preflight response
--   for the specified resource.
--   
--   A CORS rule can have only one <tt>MaxAgeSeconds</tt> element.
corsRule_maxAgeSeconds :: Lens' CorsRule (Maybe Natural)

-- | One or more headers in the response that you want users to be able to
--   access from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   This element is optional for each rule.
corsRule_exposeHeaders :: Lens' CorsRule (Maybe [Text])

-- | One or more response headers that you want users to be able to access
--   from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   Each CORS rule must have at least one <tt>AllowedOrigins</tt> element.
--   The string value can include only one wildcard character (*), for
--   example, http://*.example.com. Additionally, you can specify only one
--   wildcard character to allow cross-origin access for all origins.
corsRule_allowedOrigins :: Lens' CorsRule (NonEmpty Text)

-- | Specifies which headers are allowed in a preflight <tt>OPTIONS</tt>
--   request through the <tt>Access-Control-Request-Headers</tt> header.
--   Each header name that is specified in
--   <tt>Access-Control-Request-Headers</tt> must have a corresponding
--   entry in the rule. Only the headers that were requested are sent back.
--   
--   This element can contain only one wildcard character (*).
corsRule_allowedHeaders :: Lens' CorsRule [Text]

-- | A parameter that holds an array of rules that enable metrics at the
--   object level. This parameter is optional, but if you choose to include
--   it, you must also include at least one rule. By default, you can
--   include up to five rules. You can also <a>request a quota increase</a>
--   to allow up to 300 rules per policy.
metricPolicy_metricPolicyRules :: Lens' MetricPolicy (Maybe (NonEmpty MetricPolicyRule))

-- | A setting to enable or disable metrics at the container level.
metricPolicy_containerLevelMetrics :: Lens' MetricPolicy ContainerLevelMetrics

-- | A path or file name that defines which objects to include in the
--   group. Wildcards (*) are acceptable.
metricPolicyRule_objectGroup :: Lens' MetricPolicyRule Text

-- | A name that allows you to refer to the object group.
metricPolicyRule_objectGroupName :: Lens' MetricPolicyRule Text

-- | Part of the key:value pair that defines a tag. You can use a tag value
--   to describe a specific value within a category, such as "companyA" or
--   "companyB." Tag values are case-sensitive.
tag_value :: Lens' Tag (Maybe Text)

-- | Part of the key:value pair that defines a tag. You can use a tag key
--   to describe a category of information, such as "customer." Tag keys
--   are case-sensitive.
tag_key :: Lens' Tag Text


module Amazonka.MediaStore.Waiters


-- | Derived from API version <tt>2017-09-01</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   An AWS Elemental MediaStore container is a namespace that holds
--   folders and objects. You use a container endpoint to create, read, and
--   delete objects.
module Amazonka.MediaStore

-- | API version <tt>2017-09-01</tt> of the Amazon Elemental MediaStore SDK
--   configuration.
defaultService :: Service

-- | The policy that you specified in the request does not exist.
_PolicyNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The CORS policy that you specified in the request does not exist.
_CorsPolicyNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The container that you specified in the request already exists or is
--   being updated.
_ContainerInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The service is temporarily unavailable.
_InternalServerError :: AsError a => Getting (First ServiceError) a ServiceError

-- | The container that you specified in the request does not exist.
_ContainerNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A service limit has been exceeded.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newStopAccessLogging</a> smart constructor.
data StopAccessLogging
StopAccessLogging' :: Text -> StopAccessLogging

-- | Create a value of <a>StopAccessLogging</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:StopAccessLogging'</a>,
--   <a>stopAccessLogging_containerName</a> - The name of the container
--   that you want to stop access logging on.
newStopAccessLogging :: Text -> StopAccessLogging

-- | <i>See:</i> <a>newStopAccessLoggingResponse</a> smart constructor.
data StopAccessLoggingResponse
StopAccessLoggingResponse' :: Int -> StopAccessLoggingResponse

-- | Create a value of <a>StopAccessLoggingResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:StopAccessLoggingResponse'</a>,
--   <a>stopAccessLoggingResponse_httpStatus</a> - The response's http
--   status code.
newStopAccessLoggingResponse :: Int -> StopAccessLoggingResponse

-- | <i>See:</i> <a>newPutLifecyclePolicy</a> smart constructor.
data PutLifecyclePolicy
PutLifecyclePolicy' :: Text -> Text -> PutLifecyclePolicy

-- | Create a value of <a>PutLifecyclePolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicy_containerName</a> - The name of the container
--   that you want to assign the object lifecycle policy to.
--   
--   <a>$sel:lifecyclePolicy:PutLifecyclePolicy'</a>,
--   <a>putLifecyclePolicy_lifecyclePolicy</a> - The object lifecycle
--   policy to apply to the container.
newPutLifecyclePolicy :: Text -> Text -> PutLifecyclePolicy

-- | <i>See:</i> <a>newPutLifecyclePolicyResponse</a> smart constructor.
data PutLifecyclePolicyResponse
PutLifecyclePolicyResponse' :: Int -> PutLifecyclePolicyResponse

-- | Create a value of <a>PutLifecyclePolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:PutLifecyclePolicyResponse'</a>,
--   <a>putLifecyclePolicyResponse_httpStatus</a> - The response's http
--   status code.
newPutLifecyclePolicyResponse :: Int -> PutLifecyclePolicyResponse

-- | <i>See:</i> <a>newDeleteLifecyclePolicy</a> smart constructor.
data DeleteLifecyclePolicy
DeleteLifecyclePolicy' :: Text -> DeleteLifecyclePolicy

-- | Create a value of <a>DeleteLifecyclePolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:DeleteLifecyclePolicy'</a>,
--   <a>deleteLifecyclePolicy_containerName</a> - The name of the container
--   that holds the object lifecycle policy.
newDeleteLifecyclePolicy :: Text -> DeleteLifecyclePolicy

-- | <i>See:</i> <a>newDeleteLifecyclePolicyResponse</a> smart constructor.
data DeleteLifecyclePolicyResponse
DeleteLifecyclePolicyResponse' :: Int -> DeleteLifecyclePolicyResponse

-- | Create a value of <a>DeleteLifecyclePolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteLifecyclePolicyResponse'</a>,
--   <a>deleteLifecyclePolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteLifecyclePolicyResponse :: Int -> DeleteLifecyclePolicyResponse

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resource:ListTagsForResource'</a>,
--   <a>listTagsForResource_resource</a> - The Amazon Resource Name (ARN)
--   for the container.
newListTagsForResource :: Text -> ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe (NonEmpty Tag) -> Int -> ListTagsForResourceResponse

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - An array of key:value pairs
--   that are assigned to the container.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | <i>See:</i> <a>newCreateContainer</a> smart constructor.
data CreateContainer
CreateContainer' :: Maybe (NonEmpty Tag) -> Text -> CreateContainer

-- | Create a value of <a>CreateContainer</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:CreateContainer'</a>, <a>createContainer_tags</a> - An
--   array of key:value pairs that you define. These values can be anything
--   that you want. Typically, the tag key represents a category (such as
--   "environment") and the tag value represents a specific value within
--   that category (such as "test," "development," or "production"). You
--   can add up to 50 tags to each container. For more information about
--   tagging, including naming and usage conventions, see <a>Tagging
--   Resources in MediaStore</a>.
--   
--   <a>$sel:containerName:CreateContainer'</a>,
--   <a>createContainer_containerName</a> - The name for the container. The
--   name must be from 1 to 255 characters. Container names must be unique
--   to your AWS account within a specific region. As an example, you could
--   create a container named <tt>movies</tt> in every region, as long as
--   you don’t have an existing container with that name.
newCreateContainer :: Text -> CreateContainer

-- | <i>See:</i> <a>newCreateContainerResponse</a> smart constructor.
data CreateContainerResponse
CreateContainerResponse' :: Int -> Container -> CreateContainerResponse

-- | Create a value of <a>CreateContainerResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CreateContainerResponse'</a>,
--   <a>createContainerResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:container:CreateContainerResponse'</a>,
--   <a>createContainerResponse_container</a> - ContainerARN: The Amazon
--   Resource Name (ARN) of the newly created container. The ARN has the
--   following format: arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;. For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
--   
--   ContainerName: The container name as specified in the request.
--   
--   CreationTime: Unix time stamp.
--   
--   Status: The status of container creation or deletion. The status is
--   one of the following: <tt>CREATING</tt>, <tt>ACTIVE</tt>, or
--   <tt>DELETING</tt>. While the service is creating the container, the
--   status is <tt>CREATING</tt>. When an endpoint is available, the status
--   changes to <tt>ACTIVE</tt>.
--   
--   The return value does not include the container's endpoint. To make
--   downstream requests, you must obtain this value by using
--   DescribeContainer or ListContainers.
newCreateContainerResponse :: Int -> Container -> CreateContainerResponse

-- | <i>See:</i> <a>newListContainers</a> smart constructor.
data ListContainers
ListContainers' :: Maybe Text -> Maybe Natural -> ListContainers

-- | Create a value of <a>ListContainers</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListContainers'</a>, <a>listContainers_nextToken</a>
--   - Only if you used <tt>MaxResults</tt> in the first command, enter the
--   token (which was included in the previous response) to obtain the next
--   set of containers. This token is included in a response only if there
--   actually are more containers to list.
--   
--   <a>$sel:maxResults:ListContainers'</a>,
--   <a>listContainers_maxResults</a> - Enter the maximum number of
--   containers in the response. Use from 1 to 255 characters.
newListContainers :: ListContainers

-- | <i>See:</i> <a>newListContainersResponse</a> smart constructor.
data ListContainersResponse
ListContainersResponse' :: Maybe Text -> Int -> [Container] -> ListContainersResponse

-- | Create a value of <a>ListContainersResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListContainers'</a>,
--   <a>listContainersResponse_nextToken</a> - <tt>NextToken</tt> is the
--   token to use in the next call to <tt>ListContainers</tt>. This token
--   is returned only if you included the <tt>MaxResults</tt> tag in the
--   original command, and only if there are still containers to return.
--   
--   <a>$sel:httpStatus:ListContainersResponse'</a>,
--   <a>listContainersResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:containers:ListContainersResponse'</a>,
--   <a>listContainersResponse_containers</a> - The names of the
--   containers.
newListContainersResponse :: Int -> ListContainersResponse

-- | <i>See:</i> <a>newDeleteContainer</a> smart constructor.
data DeleteContainer
DeleteContainer' :: Text -> DeleteContainer

-- | Create a value of <a>DeleteContainer</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:DeleteContainer'</a>,
--   <a>deleteContainer_containerName</a> - The name of the container to
--   delete.
newDeleteContainer :: Text -> DeleteContainer

-- | <i>See:</i> <a>newDeleteContainerResponse</a> smart constructor.
data DeleteContainerResponse
DeleteContainerResponse' :: Int -> DeleteContainerResponse

-- | Create a value of <a>DeleteContainerResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteContainerResponse'</a>,
--   <a>deleteContainerResponse_httpStatus</a> - The response's http status
--   code.
newDeleteContainerResponse :: Int -> DeleteContainerResponse

-- | <i>See:</i> <a>newPutCorsPolicy</a> smart constructor.
data PutCorsPolicy
PutCorsPolicy' :: Text -> NonEmpty CorsRule -> PutCorsPolicy

-- | Create a value of <a>PutCorsPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:PutCorsPolicy'</a>,
--   <a>putCorsPolicy_containerName</a> - The name of the container that
--   you want to assign the CORS policy to.
--   
--   <a>$sel:corsPolicy:PutCorsPolicy'</a>, <a>putCorsPolicy_corsPolicy</a>
--   - The CORS policy to apply to the container.
newPutCorsPolicy :: Text -> NonEmpty CorsRule -> PutCorsPolicy

-- | <i>See:</i> <a>newPutCorsPolicyResponse</a> smart constructor.
data PutCorsPolicyResponse
PutCorsPolicyResponse' :: Int -> PutCorsPolicyResponse

-- | Create a value of <a>PutCorsPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:PutCorsPolicyResponse'</a>,
--   <a>putCorsPolicyResponse_httpStatus</a> - The response's http status
--   code.
newPutCorsPolicyResponse :: Int -> PutCorsPolicyResponse

-- | <i>See:</i> <a>newDeleteCorsPolicy</a> smart constructor.
data DeleteCorsPolicy
DeleteCorsPolicy' :: Text -> DeleteCorsPolicy

-- | Create a value of <a>DeleteCorsPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:DeleteCorsPolicy'</a>,
--   <a>deleteCorsPolicy_containerName</a> - The name of the container to
--   remove the policy from.
newDeleteCorsPolicy :: Text -> DeleteCorsPolicy

-- | <i>See:</i> <a>newDeleteCorsPolicyResponse</a> smart constructor.
data DeleteCorsPolicyResponse
DeleteCorsPolicyResponse' :: Int -> DeleteCorsPolicyResponse

-- | Create a value of <a>DeleteCorsPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteCorsPolicyResponse'</a>,
--   <a>deleteCorsPolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteCorsPolicyResponse :: Int -> DeleteCorsPolicyResponse

-- | <i>See:</i> <a>newStartAccessLogging</a> smart constructor.
data StartAccessLogging
StartAccessLogging' :: Text -> StartAccessLogging

-- | Create a value of <a>StartAccessLogging</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:StartAccessLogging'</a>,
--   <a>startAccessLogging_containerName</a> - The name of the container
--   that you want to start access logging on.
newStartAccessLogging :: Text -> StartAccessLogging

-- | <i>See:</i> <a>newStartAccessLoggingResponse</a> smart constructor.
data StartAccessLoggingResponse
StartAccessLoggingResponse' :: Int -> StartAccessLoggingResponse

-- | Create a value of <a>StartAccessLoggingResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:StartAccessLoggingResponse'</a>,
--   <a>startAccessLoggingResponse_httpStatus</a> - The response's http
--   status code.
newStartAccessLoggingResponse :: Int -> StartAccessLoggingResponse

-- | <i>See:</i> <a>newDescribeContainer</a> smart constructor.
data DescribeContainer
DescribeContainer' :: Maybe Text -> DescribeContainer

-- | Create a value of <a>DescribeContainer</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:DescribeContainer'</a>,
--   <a>describeContainer_containerName</a> - The name of the container to
--   query.
newDescribeContainer :: DescribeContainer

-- | <i>See:</i> <a>newDescribeContainerResponse</a> smart constructor.
data DescribeContainerResponse
DescribeContainerResponse' :: Maybe Container -> Int -> DescribeContainerResponse

-- | Create a value of <a>DescribeContainerResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:container:DescribeContainerResponse'</a>,
--   <a>describeContainerResponse_container</a> - The name of the queried
--   container.
--   
--   <a>$sel:httpStatus:DescribeContainerResponse'</a>,
--   <a>describeContainerResponse_httpStatus</a> - The response's http
--   status code.
newDescribeContainerResponse :: Int -> DescribeContainerResponse

-- | <i>See:</i> <a>newGetMetricPolicy</a> smart constructor.
data GetMetricPolicy
GetMetricPolicy' :: Text -> GetMetricPolicy

-- | Create a value of <a>GetMetricPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:GetMetricPolicy'</a>,
--   <a>getMetricPolicy_containerName</a> - The name of the container that
--   is associated with the metric policy.
newGetMetricPolicy :: Text -> GetMetricPolicy

-- | <i>See:</i> <a>newGetMetricPolicyResponse</a> smart constructor.
data GetMetricPolicyResponse
GetMetricPolicyResponse' :: Int -> MetricPolicy -> GetMetricPolicyResponse

-- | Create a value of <a>GetMetricPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GetMetricPolicyResponse'</a>,
--   <a>getMetricPolicyResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:metricPolicy:GetMetricPolicyResponse'</a>,
--   <a>getMetricPolicyResponse_metricPolicy</a> - The metric policy that
--   is associated with the specific container.
newGetMetricPolicyResponse :: Int -> MetricPolicy -> GetMetricPolicyResponse

-- | <i>See:</i> <a>newDeleteMetricPolicy</a> smart constructor.
data DeleteMetricPolicy
DeleteMetricPolicy' :: Text -> DeleteMetricPolicy

-- | Create a value of <a>DeleteMetricPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:DeleteMetricPolicy'</a>,
--   <a>deleteMetricPolicy_containerName</a> - The name of the container
--   that is associated with the metric policy that you want to delete.
newDeleteMetricPolicy :: Text -> DeleteMetricPolicy

-- | <i>See:</i> <a>newDeleteMetricPolicyResponse</a> smart constructor.
data DeleteMetricPolicyResponse
DeleteMetricPolicyResponse' :: Int -> DeleteMetricPolicyResponse

-- | Create a value of <a>DeleteMetricPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteMetricPolicyResponse'</a>,
--   <a>deleteMetricPolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteMetricPolicyResponse :: Int -> DeleteMetricPolicyResponse

-- | <i>See:</i> <a>newPutMetricPolicy</a> smart constructor.
data PutMetricPolicy
PutMetricPolicy' :: Text -> MetricPolicy -> PutMetricPolicy

-- | Create a value of <a>PutMetricPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:PutMetricPolicy'</a>,
--   <a>putMetricPolicy_containerName</a> - The name of the container that
--   you want to add the metric policy to.
--   
--   <a>$sel:metricPolicy:PutMetricPolicy'</a>,
--   <a>putMetricPolicy_metricPolicy</a> - The metric policy that you want
--   to associate with the container. In the policy, you must indicate
--   whether you want MediaStore to send container-level metrics. You can
--   also include up to five rules to define groups of objects that you
--   want MediaStore to send object-level metrics for. If you include rules
--   in the policy, construct each rule with both of the following:
--   
--   <ul>
--   <li>An object group that defines which objects to include in the
--   group. The definition can be a path or a file name, but it can't have
--   more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _
--   (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde),
--   / (forward slash), and * (asterisk). Wildcards (*) are
--   acceptable.</li>
--   <li>An object group name that allows you to refer to the object group.
--   The name can't have more than 30 characters. Valid characters are:
--   a-z, A-Z, 0-9, and _ (underscore).</li>
--   </ul>
newPutMetricPolicy :: Text -> MetricPolicy -> PutMetricPolicy

-- | <i>See:</i> <a>newPutMetricPolicyResponse</a> smart constructor.
data PutMetricPolicyResponse
PutMetricPolicyResponse' :: Int -> PutMetricPolicyResponse

-- | Create a value of <a>PutMetricPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:PutMetricPolicyResponse'</a>,
--   <a>putMetricPolicyResponse_httpStatus</a> - The response's http status
--   code.
newPutMetricPolicyResponse :: Int -> PutMetricPolicyResponse

-- | <i>See:</i> <a>newGetLifecyclePolicy</a> smart constructor.
data GetLifecyclePolicy
GetLifecyclePolicy' :: Text -> GetLifecyclePolicy

-- | Create a value of <a>GetLifecyclePolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:GetLifecyclePolicy'</a>,
--   <a>getLifecyclePolicy_containerName</a> - The name of the container
--   that the object lifecycle policy is assigned to.
newGetLifecyclePolicy :: Text -> GetLifecyclePolicy

-- | <i>See:</i> <a>newGetLifecyclePolicyResponse</a> smart constructor.
data GetLifecyclePolicyResponse
GetLifecyclePolicyResponse' :: Int -> Text -> GetLifecyclePolicyResponse

-- | Create a value of <a>GetLifecyclePolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GetLifecyclePolicyResponse'</a>,
--   <a>getLifecyclePolicyResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:lifecyclePolicy:GetLifecyclePolicyResponse'</a>,
--   <a>getLifecyclePolicyResponse_lifecyclePolicy</a> - The object
--   lifecycle policy that is assigned to the container.
newGetLifecyclePolicyResponse :: Int -> Text -> GetLifecyclePolicyResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> NonEmpty Tag -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resource:TagResource'</a>, <a>tagResource_resource</a> - The
--   Amazon Resource Name (ARN) for the container.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - An array of
--   key:value pairs that you want to add to the container. You need to
--   specify only the tags that you want to add or update. For example,
--   suppose a container already has two tags (customer:CompanyA and
--   priority:High). You want to change the priority tag and also add a
--   third tag (type:Contract). For TagResource, you specify the following
--   tags: priority:Medium, type:Contract. The result is that your
--   container has three tags: customer:CompanyA, priority:Medium, and
--   type:Contract.
newTagResource :: Text -> NonEmpty Tag -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | <i>See:</i> <a>newGetCorsPolicy</a> smart constructor.
data GetCorsPolicy
GetCorsPolicy' :: Text -> GetCorsPolicy

-- | Create a value of <a>GetCorsPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:GetCorsPolicy'</a>,
--   <a>getCorsPolicy_containerName</a> - The name of the container that
--   the policy is assigned to.
newGetCorsPolicy :: Text -> GetCorsPolicy

-- | <i>See:</i> <a>newGetCorsPolicyResponse</a> smart constructor.
data GetCorsPolicyResponse
GetCorsPolicyResponse' :: Int -> NonEmpty CorsRule -> GetCorsPolicyResponse

-- | Create a value of <a>GetCorsPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GetCorsPolicyResponse'</a>,
--   <a>getCorsPolicyResponse_httpStatus</a> - The response's http status
--   code.
--   
--   <a>$sel:corsPolicy:GetCorsPolicyResponse'</a>,
--   <a>getCorsPolicyResponse_corsPolicy</a> - The CORS policy assigned to
--   the container.
newGetCorsPolicyResponse :: Int -> NonEmpty CorsRule -> GetCorsPolicyResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resource:UntagResource'</a>, <a>untagResource_resource</a> -
--   The Amazon Resource Name (ARN) for the container.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - A
--   comma-separated list of keys for tags that you want to remove from the
--   container. For example, if your container has two tags
--   (customer:CompanyA and priority:High) and you want to remove one of
--   the tags (priority:High), you specify the key for the tag that you
--   want to remove (priority).
newUntagResource :: Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | <i>See:</i> <a>newDeleteContainerPolicy</a> smart constructor.
data DeleteContainerPolicy
DeleteContainerPolicy' :: Text -> DeleteContainerPolicy

-- | Create a value of <a>DeleteContainerPolicy</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:DeleteContainerPolicy'</a>,
--   <a>deleteContainerPolicy_containerName</a> - The name of the container
--   that holds the policy.
newDeleteContainerPolicy :: Text -> DeleteContainerPolicy

-- | <i>See:</i> <a>newDeleteContainerPolicyResponse</a> smart constructor.
data DeleteContainerPolicyResponse
DeleteContainerPolicyResponse' :: Int -> DeleteContainerPolicyResponse

-- | Create a value of <a>DeleteContainerPolicyResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteContainerPolicyResponse'</a>,
--   <a>deleteContainerPolicyResponse_httpStatus</a> - The response's http
--   status code.
newDeleteContainerPolicyResponse :: Int -> DeleteContainerPolicyResponse

-- | <i>See:</i> <a>newPutContainerPolicy</a> smart constructor.
data PutContainerPolicy
PutContainerPolicy' :: Text -> Text -> PutContainerPolicy

-- | Create a value of <a>PutContainerPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:PutContainerPolicy'</a>,
--   <a>putContainerPolicy_containerName</a> - The name of the container.
--   
--   <a>$sel:policy:PutContainerPolicy'</a>,
--   <a>putContainerPolicy_policy</a> - The contents of the policy, which
--   includes the following:
--   
--   <ul>
--   <li>One <tt>Version</tt> tag</li>
--   <li>One <tt>Statement</tt> tag that contains the standard tags for the
--   policy.</li>
--   </ul>
newPutContainerPolicy :: Text -> Text -> PutContainerPolicy

-- | <i>See:</i> <a>newPutContainerPolicyResponse</a> smart constructor.
data PutContainerPolicyResponse
PutContainerPolicyResponse' :: Int -> PutContainerPolicyResponse

-- | Create a value of <a>PutContainerPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:PutContainerPolicyResponse'</a>,
--   <a>putContainerPolicyResponse_httpStatus</a> - The response's http
--   status code.
newPutContainerPolicyResponse :: Int -> PutContainerPolicyResponse

-- | <i>See:</i> <a>newGetContainerPolicy</a> smart constructor.
data GetContainerPolicy
GetContainerPolicy' :: Text -> GetContainerPolicy

-- | Create a value of <a>GetContainerPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:GetContainerPolicy'</a>,
--   <a>getContainerPolicy_containerName</a> - The name of the container.
newGetContainerPolicy :: Text -> GetContainerPolicy

-- | <i>See:</i> <a>newGetContainerPolicyResponse</a> smart constructor.
data GetContainerPolicyResponse
GetContainerPolicyResponse' :: Int -> Text -> GetContainerPolicyResponse

-- | Create a value of <a>GetContainerPolicyResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:GetContainerPolicyResponse'</a>,
--   <a>getContainerPolicyResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:policy:GetContainerPolicyResponse'</a>,
--   <a>getContainerPolicyResponse_policy</a> - The contents of the access
--   policy.
newGetContainerPolicyResponse :: Int -> Text -> GetContainerPolicyResponse
newtype ContainerLevelMetrics
ContainerLevelMetrics' :: Text -> ContainerLevelMetrics
[fromContainerLevelMetrics] :: ContainerLevelMetrics -> Text
pattern ContainerLevelMetrics_DISABLED :: ContainerLevelMetrics
pattern ContainerLevelMetrics_ENABLED :: ContainerLevelMetrics
newtype ContainerStatus
ContainerStatus' :: Text -> ContainerStatus
[fromContainerStatus] :: ContainerStatus -> Text
pattern ContainerStatus_ACTIVE :: ContainerStatus
pattern ContainerStatus_CREATING :: ContainerStatus
pattern ContainerStatus_DELETING :: ContainerStatus
newtype MethodName
MethodName' :: Text -> MethodName
[fromMethodName] :: MethodName -> Text
pattern MethodName_DELETE :: MethodName
pattern MethodName_GET :: MethodName
pattern MethodName_HEAD :: MethodName
pattern MethodName_PUT :: MethodName

-- | This section describes operations that you can perform on an AWS
--   Elemental MediaStore container.
--   
--   <i>See:</i> <a>newContainer</a> smart constructor.
data Container
Container' :: Maybe POSIX -> Maybe ContainerStatus -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Container

-- | Create a value of <a>Container</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:creationTime:Container'</a>, <a>container_creationTime</a> -
--   Unix timestamp.
--   
--   <a>$sel:status:Container'</a>, <a>container_status</a> - The status of
--   container creation or deletion. The status is one of the following:
--   <tt>CREATING</tt>, <tt>ACTIVE</tt>, or <tt>DELETING</tt>. While the
--   service is creating the container, the status is <tt>CREATING</tt>.
--   When the endpoint is available, the status changes to <tt>ACTIVE</tt>.
--   
--   <a>$sel:accessLoggingEnabled:Container'</a>,
--   <a>container_accessLoggingEnabled</a> - The state of access logging on
--   the container. This value is <tt>false</tt> by default, indicating
--   that AWS Elemental MediaStore does not send access logs to Amazon
--   CloudWatch Logs. When you enable access logging on the container,
--   MediaStore changes this value to <tt>true</tt>, indicating that the
--   service delivers access logs for objects stored in that container to
--   CloudWatch Logs.
--   
--   <a>$sel:arn:Container'</a>, <a>container_arn</a> - The Amazon Resource
--   Name (ARN) of the container. The ARN has the following format:
--   
--   arn:aws:&lt;region&gt;:&lt;account that owns this
--   container&gt;:container/&lt;name of container&gt;
--   
--   For example:
--   arn:aws:mediastore:us-west-2:111122223333:container/movies
--   
--   <a>$sel:name:Container'</a>, <a>container_name</a> - The name of the
--   container.
--   
--   <a>$sel:endpoint:Container'</a>, <a>container_endpoint</a> - The DNS
--   endpoint of the container. Use the endpoint to identify the specific
--   container when sending requests to the data plane. The service assigns
--   this value when the container is created. Once the value has been
--   assigned, it does not change.
newContainer :: Container

-- | A rule for a CORS policy. You can add up to 100 rules to a CORS
--   policy. If more than one rule applies, the service uses the first
--   applicable rule listed.
--   
--   <i>See:</i> <a>newCorsRule</a> smart constructor.
data CorsRule
CorsRule' :: Maybe (NonEmpty MethodName) -> Maybe Natural -> Maybe [Text] -> NonEmpty Text -> [Text] -> CorsRule

-- | Create a value of <a>CorsRule</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:allowedMethods:CorsRule'</a>, <a>corsRule_allowedMethods</a> -
--   Identifies an HTTP method that the origin that is specified in the
--   rule is allowed to execute.
--   
--   Each CORS rule must contain at least one <tt>AllowedMethods</tt> and
--   one <tt>AllowedOrigins</tt> element.
--   
--   <a>$sel:maxAgeSeconds:CorsRule'</a>, <a>corsRule_maxAgeSeconds</a> -
--   The time in seconds that your browser caches the preflight response
--   for the specified resource.
--   
--   A CORS rule can have only one <tt>MaxAgeSeconds</tt> element.
--   
--   <a>$sel:exposeHeaders:CorsRule'</a>, <a>corsRule_exposeHeaders</a> -
--   One or more headers in the response that you want users to be able to
--   access from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   This element is optional for each rule.
--   
--   <a>$sel:allowedOrigins:CorsRule'</a>, <a>corsRule_allowedOrigins</a> -
--   One or more response headers that you want users to be able to access
--   from their applications (for example, from a JavaScript
--   <tt>XMLHttpRequest</tt> object).
--   
--   Each CORS rule must have at least one <tt>AllowedOrigins</tt> element.
--   The string value can include only one wildcard character (*), for
--   example, http://*.example.com. Additionally, you can specify only one
--   wildcard character to allow cross-origin access for all origins.
--   
--   <a>$sel:allowedHeaders:CorsRule'</a>, <a>corsRule_allowedHeaders</a> -
--   Specifies which headers are allowed in a preflight <tt>OPTIONS</tt>
--   request through the <tt>Access-Control-Request-Headers</tt> header.
--   Each header name that is specified in
--   <tt>Access-Control-Request-Headers</tt> must have a corresponding
--   entry in the rule. Only the headers that were requested are sent back.
--   
--   This element can contain only one wildcard character (*).
newCorsRule :: NonEmpty Text -> CorsRule

-- | The metric policy that is associated with the container. A metric
--   policy allows AWS Elemental MediaStore to send metrics to Amazon
--   CloudWatch. In the policy, you must indicate whether you want
--   MediaStore to send container-level metrics. You can also include rules
--   to define groups of objects that you want MediaStore to send
--   object-level metrics for.
--   
--   To view examples of how to construct a metric policy for your use
--   case, see <a>Example Metric Policies</a>.
--   
--   <i>See:</i> <a>newMetricPolicy</a> smart constructor.
data MetricPolicy
MetricPolicy' :: Maybe (NonEmpty MetricPolicyRule) -> ContainerLevelMetrics -> MetricPolicy

-- | Create a value of <a>MetricPolicy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:metricPolicyRules:MetricPolicy'</a>,
--   <a>metricPolicy_metricPolicyRules</a> - A parameter that holds an
--   array of rules that enable metrics at the object level. This parameter
--   is optional, but if you choose to include it, you must also include at
--   least one rule. By default, you can include up to five rules. You can
--   also <a>request a quota increase</a> to allow up to 300 rules per
--   policy.
--   
--   <a>$sel:containerLevelMetrics:MetricPolicy'</a>,
--   <a>metricPolicy_containerLevelMetrics</a> - A setting to enable or
--   disable metrics at the container level.
newMetricPolicy :: ContainerLevelMetrics -> MetricPolicy

-- | A setting that enables metrics at the object level. Each rule contains
--   an object group and an object group name. If the policy includes the
--   MetricPolicyRules parameter, you must include at least one rule. Each
--   metric policy can include up to five rules by default. You can also
--   <a>request a quota increase</a> to allow up to 300 rules per policy.
--   
--   <i>See:</i> <a>newMetricPolicyRule</a> smart constructor.
data MetricPolicyRule
MetricPolicyRule' :: Text -> Text -> MetricPolicyRule

-- | Create a value of <a>MetricPolicyRule</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:objectGroup:MetricPolicyRule'</a>,
--   <a>metricPolicyRule_objectGroup</a> - A path or file name that defines
--   which objects to include in the group. Wildcards (*) are acceptable.
--   
--   <a>$sel:objectGroupName:MetricPolicyRule'</a>,
--   <a>metricPolicyRule_objectGroupName</a> - A name that allows you to
--   refer to the object group.
newMetricPolicyRule :: Text -> Text -> MetricPolicyRule

-- | A collection of tags associated with a container. Each tag consists of
--   a key:value pair, which can be anything you define. Typically, the tag
--   key represents a category (such as "environment") and the tag value
--   represents a specific value within that category (such as "test,"
--   "development," or "production"). You can add up to 50 tags to each
--   container. For more information about tagging, including naming and
--   usage conventions, see <a>Tagging Resources in MediaStore</a>.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - Part of the key:value pair
--   that defines a tag. You can use a tag value to describe a specific
--   value within a category, such as "companyA" or "companyB." Tag values
--   are case-sensitive.
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - Part of the key:value pair that
--   defines a tag. You can use a tag key to describe a category of
--   information, such as "customer." Tag keys are case-sensitive.
newTag :: Text -> Tag
