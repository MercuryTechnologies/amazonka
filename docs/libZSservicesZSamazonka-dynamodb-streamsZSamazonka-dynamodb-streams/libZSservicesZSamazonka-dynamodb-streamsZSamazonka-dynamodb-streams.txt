-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-dynamodb-streamsZSamazonka-dynamodb-streams
@version 2.0


module Network.AWS.DynamoDBStreams.Types.AttributeValue

-- | Represents the data for an attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newAttributeValue</a> smart constructor.
data AttributeValue
AttributeValue' :: Maybe [AttributeValue] -> Maybe [Text] -> Maybe (HashMap Text AttributeValue) -> Maybe Bool -> Maybe Text -> Maybe [Base64] -> Maybe Base64 -> Maybe [Text] -> Maybe Text -> Maybe Bool -> AttributeValue

-- | An attribute of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
[$sel:l:AttributeValue'] :: AttributeValue -> Maybe [AttributeValue]

-- | An attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
[$sel:ns:AttributeValue'] :: AttributeValue -> Maybe [Text]

-- | An attribute of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
[$sel:m:AttributeValue'] :: AttributeValue -> Maybe (HashMap Text AttributeValue)

-- | An attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
[$sel:null:AttributeValue'] :: AttributeValue -> Maybe Bool

-- | An attribute of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
[$sel:n:AttributeValue'] :: AttributeValue -> Maybe Text

-- | An attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
[$sel:bs:AttributeValue'] :: AttributeValue -> Maybe [Base64]

-- | An attribute of type Binary. For example:
--   
--   <pre>
--   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"
--   </pre>
[$sel:b:AttributeValue'] :: AttributeValue -> Maybe Base64

-- | An attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
[$sel:ss:AttributeValue'] :: AttributeValue -> Maybe [Text]

-- | An attribute of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
[$sel:s:AttributeValue'] :: AttributeValue -> Maybe Text

-- | An attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
[$sel:bool:AttributeValue'] :: AttributeValue -> Maybe Bool

-- | Create a value of <a>AttributeValue</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:l:AttributeValue'</a>, <a>attributeValue_l</a> - An attribute
--   of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
--   
--   <a>$sel:ns:AttributeValue'</a>, <a>attributeValue_ns</a> - An
--   attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
--   
--   <a>$sel:m:AttributeValue'</a>, <a>attributeValue_m</a> - An attribute
--   of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
--   
--   <a>$sel:null:AttributeValue'</a>, <a>attributeValue_null</a> - An
--   attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
--   
--   <a>$sel:n:AttributeValue'</a>, <a>attributeValue_n</a> - An attribute
--   of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
--   
--   <a>$sel:bs:AttributeValue'</a>, <a>attributeValue_bs</a> - An
--   attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
--   
--   <a>$sel:b:AttributeValue'</a>, <a>attributeValue_b</a> - An attribute
--   of type Binary. For example:
--   
--   <tt>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</tt>-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:ss:AttributeValue'</a>, <a>attributeValue_ss</a> - An
--   attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
--   
--   <a>$sel:s:AttributeValue'</a>, <a>attributeValue_s</a> - An attribute
--   of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
--   
--   <a>$sel:bool:AttributeValue'</a>, <a>attributeValue_bool</a> - An
--   attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
newAttributeValue :: AttributeValue

-- | An attribute of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
attributeValue_l :: Lens' AttributeValue (Maybe [AttributeValue])

-- | An attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
attributeValue_ns :: Lens' AttributeValue (Maybe [Text])

-- | An attribute of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
attributeValue_m :: Lens' AttributeValue (Maybe (HashMap Text AttributeValue))

-- | An attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
attributeValue_null :: Lens' AttributeValue (Maybe Bool)

-- | An attribute of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
attributeValue_n :: Lens' AttributeValue (Maybe Text)

-- | An attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
attributeValue_bs :: Lens' AttributeValue (Maybe [ByteString])

-- | An attribute of type Binary. For example:
--   
--   <tt>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</tt>-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
attributeValue_b :: Lens' AttributeValue (Maybe ByteString)

-- | An attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
attributeValue_ss :: Lens' AttributeValue (Maybe [Text])

-- | An attribute of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
attributeValue_s :: Lens' AttributeValue (Maybe Text)

-- | An attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
attributeValue_bool :: Lens' AttributeValue (Maybe Bool)
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.AttributeValue.AttributeValue
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.AttributeValue.AttributeValue
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.AttributeValue.AttributeValue
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.AttributeValue.AttributeValue
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.AttributeValue.AttributeValue
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.AttributeValue.AttributeValue
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.AttributeValue.AttributeValue


module Network.AWS.DynamoDBStreams.Types.Identity

-- | Contains details about the type of identity that made the request.
--   
--   <i>See:</i> <a>newIdentity</a> smart constructor.
data Identity
Identity' :: Maybe Text -> Maybe Text -> Identity

-- | A unique identifier for the entity that made the call. For Time To
--   Live, the principalId is "dynamodb.amazonaws.com".
[$sel:principalId:Identity'] :: Identity -> Maybe Text

-- | The type of the identity. For Time To Live, the type is "Service".
[$sel:type':Identity'] :: Identity -> Maybe Text

-- | Create a value of <a>Identity</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:principalId:Identity'</a>, <a>identity_principalId</a> - A
--   unique identifier for the entity that made the call. For Time To Live,
--   the principalId is "dynamodb.amazonaws.com".
--   
--   <a>$sel:type':Identity'</a>, <a>identity_type</a> - The type of the
--   identity. For Time To Live, the type is "Service".
newIdentity :: Identity

-- | A unique identifier for the entity that made the call. For Time To
--   Live, the principalId is "dynamodb.amazonaws.com".
identity_principalId :: Lens' Identity (Maybe Text)

-- | The type of the identity. For Time To Live, the type is "Service".
identity_type :: Lens' Identity (Maybe Text)
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.Identity.Identity
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.Identity.Identity
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.Identity.Identity
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.Identity.Identity
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.Identity.Identity
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.Identity.Identity
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.Identity.Identity


module Network.AWS.DynamoDBStreams.Types.KeyType
newtype KeyType
KeyType' :: Text -> KeyType
[fromKeyType] :: KeyType -> Text
pattern KeyType_HASH :: KeyType
pattern KeyType_RANGE :: KeyType
instance Network.AWS.Data.XML.ToXML Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Network.AWS.Data.XML.FromXML Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Network.AWS.Data.Query.ToQuery Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Network.AWS.Data.Log.ToLog Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Network.AWS.Data.Text.ToText Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Network.AWS.Data.Text.FromText Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance GHC.Classes.Ord Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.KeyType.KeyType
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.KeyType.KeyType


module Network.AWS.DynamoDBStreams.Types.KeySchemaElement

-- | Represents <i>a single element</i> of a key schema. A key schema
--   specifies the attributes that make up the primary key of a table, or
--   the key attributes of an index.
--   
--   A <tt>KeySchemaElement</tt> represents exactly one attribute of the
--   primary key. For example, a simple primary key would be represented by
--   one <tt>KeySchemaElement</tt> (for the partition key). A composite
--   primary key would require one <tt>KeySchemaElement</tt> for the
--   partition key, and another <tt>KeySchemaElement</tt> for the sort key.
--   
--   A <tt>KeySchemaElement</tt> must be a scalar, top-level attribute (not
--   a nested attribute). The data type must be one of String, Number, or
--   Binary. The attribute cannot be nested within a List or a Map.
--   
--   <i>See:</i> <a>newKeySchemaElement</a> smart constructor.
data KeySchemaElement
KeySchemaElement' :: Text -> KeyType -> KeySchemaElement

-- | The name of a key attribute.
[$sel:attributeName:KeySchemaElement'] :: KeySchemaElement -> Text

-- | The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keyType:KeySchemaElement'] :: KeySchemaElement -> KeyType

-- | Create a value of <a>KeySchemaElement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeName:KeySchemaElement'</a>,
--   <a>keySchemaElement_attributeName</a> - The name of a key attribute.
--   
--   <a>$sel:keyType:KeySchemaElement'</a>, <a>keySchemaElement_keyType</a>
--   - The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
newKeySchemaElement :: Text -> KeyType -> KeySchemaElement

-- | The name of a key attribute.
keySchemaElement_attributeName :: Lens' KeySchemaElement Text

-- | The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
keySchemaElement_keyType :: Lens' KeySchemaElement KeyType
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.KeySchemaElement.KeySchemaElement
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.KeySchemaElement.KeySchemaElement
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.KeySchemaElement.KeySchemaElement
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.KeySchemaElement.KeySchemaElement
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.KeySchemaElement.KeySchemaElement
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.KeySchemaElement.KeySchemaElement
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.KeySchemaElement.KeySchemaElement


module Network.AWS.DynamoDBStreams.Types.OperationType
newtype OperationType
OperationType' :: Text -> OperationType
[fromOperationType] :: OperationType -> Text
pattern OperationType_INSERT :: OperationType
pattern OperationType_MODIFY :: OperationType
pattern OperationType_REMOVE :: OperationType
instance Network.AWS.Data.XML.ToXML Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Network.AWS.Data.XML.FromXML Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Network.AWS.Data.Query.ToQuery Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Network.AWS.Data.Log.ToLog Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Network.AWS.Data.Text.ToText Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Network.AWS.Data.Text.FromText Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance GHC.Classes.Ord Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.OperationType.OperationType
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.OperationType.OperationType


module Network.AWS.DynamoDBStreams.Types.SequenceNumberRange

-- | The beginning and ending sequence numbers for the stream records
--   contained within a shard.
--   
--   <i>See:</i> <a>newSequenceNumberRange</a> smart constructor.
data SequenceNumberRange
SequenceNumberRange' :: Maybe Text -> Maybe Text -> SequenceNumberRange

-- | The first sequence number for the stream records contained within a
--   shard. String contains numeric characters only.
[$sel:startingSequenceNumber:SequenceNumberRange'] :: SequenceNumberRange -> Maybe Text

-- | The last sequence number for the stream records contained within a
--   shard. String contains numeric characters only.
[$sel:endingSequenceNumber:SequenceNumberRange'] :: SequenceNumberRange -> Maybe Text

-- | Create a value of <a>SequenceNumberRange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:startingSequenceNumber:SequenceNumberRange'</a>,
--   <a>sequenceNumberRange_startingSequenceNumber</a> - The first sequence
--   number for the stream records contained within a shard. String
--   contains numeric characters only.
--   
--   <a>$sel:endingSequenceNumber:SequenceNumberRange'</a>,
--   <a>sequenceNumberRange_endingSequenceNumber</a> - The last sequence
--   number for the stream records contained within a shard. String
--   contains numeric characters only.
newSequenceNumberRange :: SequenceNumberRange

-- | The first sequence number for the stream records contained within a
--   shard. String contains numeric characters only.
sequenceNumberRange_startingSequenceNumber :: Lens' SequenceNumberRange (Maybe Text)

-- | The last sequence number for the stream records contained within a
--   shard. String contains numeric characters only.
sequenceNumberRange_endingSequenceNumber :: Lens' SequenceNumberRange (Maybe Text)
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.SequenceNumberRange.SequenceNumberRange
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.SequenceNumberRange.SequenceNumberRange
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.SequenceNumberRange.SequenceNumberRange
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.SequenceNumberRange.SequenceNumberRange
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.SequenceNumberRange.SequenceNumberRange
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.SequenceNumberRange.SequenceNumberRange
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.SequenceNumberRange.SequenceNumberRange


module Network.AWS.DynamoDBStreams.Types.Shard

-- | A uniquely identified group of stream records within a stream.
--   
--   <i>See:</i> <a>newShard</a> smart constructor.
data Shard
Shard' :: Maybe Text -> Maybe SequenceNumberRange -> Maybe Text -> Shard

-- | The shard ID of the current shard's parent.
[$sel:parentShardId:Shard'] :: Shard -> Maybe Text

-- | The range of possible sequence numbers for the shard.
[$sel:sequenceNumberRange:Shard'] :: Shard -> Maybe SequenceNumberRange

-- | The system-generated identifier for this shard.
[$sel:shardId:Shard'] :: Shard -> Maybe Text

-- | Create a value of <a>Shard</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:parentShardId:Shard'</a>, <a>shard_parentShardId</a> - The
--   shard ID of the current shard's parent.
--   
--   <a>$sel:sequenceNumberRange:Shard'</a>,
--   <a>shard_sequenceNumberRange</a> - The range of possible sequence
--   numbers for the shard.
--   
--   <a>$sel:shardId:Shard'</a>, <a>shard_shardId</a> - The
--   system-generated identifier for this shard.
newShard :: Shard

-- | The shard ID of the current shard's parent.
shard_parentShardId :: Lens' Shard (Maybe Text)

-- | The range of possible sequence numbers for the shard.
shard_sequenceNumberRange :: Lens' Shard (Maybe SequenceNumberRange)

-- | The system-generated identifier for this shard.
shard_shardId :: Lens' Shard (Maybe Text)
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.Shard.Shard
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.Shard.Shard
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.Shard.Shard
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.Shard.Shard
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.Shard.Shard
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.Shard.Shard
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.Shard.Shard


module Network.AWS.DynamoDBStreams.Types.ShardIteratorType
newtype ShardIteratorType
ShardIteratorType' :: Text -> ShardIteratorType
[fromShardIteratorType] :: ShardIteratorType -> Text
pattern ShardIteratorType_AFTER_SEQUENCE_NUMBER :: ShardIteratorType
pattern ShardIteratorType_AT_SEQUENCE_NUMBER :: ShardIteratorType
pattern ShardIteratorType_LATEST :: ShardIteratorType
pattern ShardIteratorType_TRIM_HORIZON :: ShardIteratorType
instance Network.AWS.Data.XML.ToXML Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Network.AWS.Data.XML.FromXML Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Network.AWS.Data.Query.ToQuery Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Network.AWS.Data.Log.ToLog Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Network.AWS.Data.Text.ToText Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Network.AWS.Data.Text.FromText Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance GHC.Classes.Ord Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.ShardIteratorType.ShardIteratorType


module Network.AWS.DynamoDBStreams.Types.Stream

-- | Represents all of the data describing a particular stream.
--   
--   <i>See:</i> <a>newStream</a> smart constructor.
data Stream
Stream' :: Maybe Text -> Maybe Text -> Maybe Text -> Stream

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
[$sel:streamLabel:Stream'] :: Stream -> Maybe Text

-- | The Amazon Resource Name (ARN) for the stream.
[$sel:streamArn:Stream'] :: Stream -> Maybe Text

-- | The DynamoDB table with which the stream is associated.
[$sel:tableName:Stream'] :: Stream -> Maybe Text

-- | Create a value of <a>Stream</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamLabel:Stream'</a>, <a>stream_streamLabel</a> - A
--   timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
--   
--   <a>$sel:streamArn:Stream'</a>, <a>stream_streamArn</a> - The Amazon
--   Resource Name (ARN) for the stream.
--   
--   <a>$sel:tableName:Stream'</a>, <a>stream_tableName</a> - The DynamoDB
--   table with which the stream is associated.
newStream :: Stream

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
stream_streamLabel :: Lens' Stream (Maybe Text)

-- | The Amazon Resource Name (ARN) for the stream.
stream_streamArn :: Lens' Stream (Maybe Text)

-- | The DynamoDB table with which the stream is associated.
stream_tableName :: Lens' Stream (Maybe Text)
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.Stream.Stream
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.Stream.Stream
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.Stream.Stream
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.Stream.Stream
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.Stream.Stream
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.Stream.Stream
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.Stream.Stream


module Network.AWS.DynamoDBStreams.Types.StreamStatus
newtype StreamStatus
StreamStatus' :: Text -> StreamStatus
[fromStreamStatus] :: StreamStatus -> Text
pattern StreamStatus_DISABLED :: StreamStatus
pattern StreamStatus_DISABLING :: StreamStatus
pattern StreamStatus_ENABLED :: StreamStatus
pattern StreamStatus_ENABLING :: StreamStatus
instance Network.AWS.Data.XML.ToXML Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Network.AWS.Data.XML.FromXML Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Network.AWS.Data.Query.ToQuery Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Network.AWS.Data.Headers.ToHeader Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Network.AWS.Data.Log.ToLog Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Network.AWS.Data.Text.ToText Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Network.AWS.Data.Text.FromText Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance GHC.Classes.Ord Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.StreamStatus.StreamStatus


module Network.AWS.DynamoDBStreams.Types.StreamViewType
newtype StreamViewType
StreamViewType' :: Text -> StreamViewType
[fromStreamViewType] :: StreamViewType -> Text
pattern StreamViewType_KEYS_ONLY :: StreamViewType
pattern StreamViewType_NEW_AND_OLD_IMAGES :: StreamViewType
pattern StreamViewType_NEW_IMAGE :: StreamViewType
pattern StreamViewType_OLD_IMAGE :: StreamViewType
instance Network.AWS.Data.XML.ToXML Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Network.AWS.Data.XML.FromXML Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Network.AWS.Data.Query.ToQuery Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Network.AWS.Data.Log.ToLog Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Network.AWS.Data.Text.ToText Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Network.AWS.Data.Text.FromText Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance GHC.Classes.Ord Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.StreamViewType.StreamViewType


module Network.AWS.DynamoDBStreams.Types.StreamRecord

-- | A description of a single data modification that was performed on an
--   item in a DynamoDB table.
--   
--   <i>See:</i> <a>newStreamRecord</a> smart constructor.
data StreamRecord
StreamRecord' :: Maybe Natural -> Maybe Text -> Maybe POSIX -> Maybe StreamViewType -> Maybe (HashMap Text AttributeValue) -> Maybe (HashMap Text AttributeValue) -> Maybe (HashMap Text AttributeValue) -> StreamRecord

-- | The size of the stream record, in bytes.
[$sel:sizeBytes:StreamRecord'] :: StreamRecord -> Maybe Natural

-- | The sequence number of the stream record.
[$sel:sequenceNumber:StreamRecord'] :: StreamRecord -> Maybe Text

-- | The approximate date and time when the stream record was created, in
--   <a>UNIX epoch time</a> format.
[$sel:approximateCreationDateTime:StreamRecord'] :: StreamRecord -> Maybe POSIX

-- | The type of data from the modified DynamoDB item that was captured in
--   this stream record:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of the modified
--   item.</li>
--   <li><tt>NEW_IMAGE</tt> - the entire item, as it appeared after it was
--   modified.</li>
--   <li><tt>OLD_IMAGE</tt> - the entire item, as it appeared before it was
--   modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old item images
--   of the item.</li>
--   </ul>
[$sel:streamViewType:StreamRecord'] :: StreamRecord -> Maybe StreamViewType

-- | The primary key attribute(s) for the DynamoDB item that was modified.
[$sel:keys:StreamRecord'] :: StreamRecord -> Maybe (HashMap Text AttributeValue)

-- | The item in the DynamoDB table as it appeared before it was modified.
[$sel:oldImage:StreamRecord'] :: StreamRecord -> Maybe (HashMap Text AttributeValue)

-- | The item in the DynamoDB table as it appeared after it was modified.
[$sel:newImage':StreamRecord'] :: StreamRecord -> Maybe (HashMap Text AttributeValue)

-- | Create a value of <a>StreamRecord</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sizeBytes:StreamRecord'</a>, <a>streamRecord_sizeBytes</a> -
--   The size of the stream record, in bytes.
--   
--   <a>$sel:sequenceNumber:StreamRecord'</a>,
--   <a>streamRecord_sequenceNumber</a> - The sequence number of the stream
--   record.
--   
--   <a>$sel:approximateCreationDateTime:StreamRecord'</a>,
--   <a>streamRecord_approximateCreationDateTime</a> - The approximate date
--   and time when the stream record was created, in <a>UNIX epoch time</a>
--   format.
--   
--   <a>$sel:streamViewType:StreamRecord'</a>,
--   <a>streamRecord_streamViewType</a> - The type of data from the
--   modified DynamoDB item that was captured in this stream record:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of the modified
--   item.</li>
--   <li><tt>NEW_IMAGE</tt> - the entire item, as it appeared after it was
--   modified.</li>
--   <li><tt>OLD_IMAGE</tt> - the entire item, as it appeared before it was
--   modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old item images
--   of the item.</li>
--   </ul>
--   
--   <a>$sel:keys:StreamRecord'</a>, <a>streamRecord_keys</a> - The primary
--   key attribute(s) for the DynamoDB item that was modified.
--   
--   <a>$sel:oldImage:StreamRecord'</a>, <a>streamRecord_oldImage</a> - The
--   item in the DynamoDB table as it appeared before it was modified.
--   
--   <a>$sel:newImage':StreamRecord'</a>, <a>streamRecord_newImage</a> -
--   The item in the DynamoDB table as it appeared after it was modified.
newStreamRecord :: StreamRecord

-- | The size of the stream record, in bytes.
streamRecord_sizeBytes :: Lens' StreamRecord (Maybe Natural)

-- | The sequence number of the stream record.
streamRecord_sequenceNumber :: Lens' StreamRecord (Maybe Text)

-- | The approximate date and time when the stream record was created, in
--   <a>UNIX epoch time</a> format.
streamRecord_approximateCreationDateTime :: Lens' StreamRecord (Maybe UTCTime)

-- | The type of data from the modified DynamoDB item that was captured in
--   this stream record:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of the modified
--   item.</li>
--   <li><tt>NEW_IMAGE</tt> - the entire item, as it appeared after it was
--   modified.</li>
--   <li><tt>OLD_IMAGE</tt> - the entire item, as it appeared before it was
--   modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old item images
--   of the item.</li>
--   </ul>
streamRecord_streamViewType :: Lens' StreamRecord (Maybe StreamViewType)

-- | The primary key attribute(s) for the DynamoDB item that was modified.
streamRecord_keys :: Lens' StreamRecord (Maybe (HashMap Text AttributeValue))

-- | The item in the DynamoDB table as it appeared before it was modified.
streamRecord_oldImage :: Lens' StreamRecord (Maybe (HashMap Text AttributeValue))

-- | The item in the DynamoDB table as it appeared after it was modified.
streamRecord_newImage :: Lens' StreamRecord (Maybe (HashMap Text AttributeValue))
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.StreamRecord.StreamRecord
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.StreamRecord.StreamRecord
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.StreamRecord.StreamRecord
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.StreamRecord.StreamRecord
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.StreamRecord.StreamRecord
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.StreamRecord.StreamRecord
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.StreamRecord.StreamRecord


module Network.AWS.DynamoDBStreams.Types.Record

-- | A description of a unique event within a stream.
--   
--   <i>See:</i> <a>newRecord</a> smart constructor.
data Record
Record' :: Maybe Identity -> Maybe Text -> Maybe StreamRecord -> Maybe Text -> Maybe OperationType -> Maybe Text -> Maybe Text -> Record

-- | Items that are deleted by the Time to Live process after expiration
--   have the following fields:
--   
--   <ul>
--   <li>Records[].userIdentity.type"Service"</li>
--   <li>Records[].userIdentity.principalId"dynamodb.amazonaws.com"</li>
--   </ul>
[$sel:userIdentity:Record'] :: Record -> Maybe Identity

-- | The version number of the stream record format. This number is updated
--   whenever the structure of <tt>Record</tt> is modified.
--   
--   Client applications must not assume that <tt>eventVersion</tt> will
--   remain at a particular value, as this number is subject to change at
--   any time. In general, <tt>eventVersion</tt> will only increase as the
--   low-level DynamoDB Streams API evolves.
[$sel:eventVersion:Record'] :: Record -> Maybe Text

-- | The main body of the stream record, containing all of the
--   DynamoDB-specific fields.
[$sel:dynamodb:Record'] :: Record -> Maybe StreamRecord

-- | The region in which the <tt>GetRecords</tt> request was received.
[$sel:awsRegion:Record'] :: Record -> Maybe Text

-- | The type of data modification that was performed on the DynamoDB
--   table:
--   
--   <ul>
--   <li><tt>INSERT</tt> - a new item was added to the table.</li>
--   <li><tt>MODIFY</tt> - one or more of an existing item's attributes
--   were modified.</li>
--   <li><tt>REMOVE</tt> - the item was deleted from the table</li>
--   </ul>
[$sel:eventName:Record'] :: Record -> Maybe OperationType

-- | The AWS service from which the stream record originated. For DynamoDB
--   Streams, this is <tt>aws:dynamodb</tt>.
[$sel:eventSource:Record'] :: Record -> Maybe Text

-- | A globally unique identifier for the event that was recorded in this
--   stream record.
[$sel:eventID:Record'] :: Record -> Maybe Text

-- | Create a value of <a>Record</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:userIdentity:Record'</a>, <a>record_userIdentity</a> - Items
--   that are deleted by the Time to Live process after expiration have the
--   following fields:
--   
--   <ul>
--   <li>Records[].userIdentity.type"Service"</li>
--   <li>Records[].userIdentity.principalId"dynamodb.amazonaws.com"</li>
--   </ul>
--   
--   <a>$sel:eventVersion:Record'</a>, <a>record_eventVersion</a> - The
--   version number of the stream record format. This number is updated
--   whenever the structure of <tt>Record</tt> is modified.
--   
--   Client applications must not assume that <tt>eventVersion</tt> will
--   remain at a particular value, as this number is subject to change at
--   any time. In general, <tt>eventVersion</tt> will only increase as the
--   low-level DynamoDB Streams API evolves.
--   
--   <a>$sel:dynamodb:Record'</a>, <a>record_dynamodb</a> - The main body
--   of the stream record, containing all of the DynamoDB-specific fields.
--   
--   <a>$sel:awsRegion:Record'</a>, <a>record_awsRegion</a> - The region in
--   which the <tt>GetRecords</tt> request was received.
--   
--   <a>$sel:eventName:Record'</a>, <a>record_eventName</a> - The type of
--   data modification that was performed on the DynamoDB table:
--   
--   <ul>
--   <li><tt>INSERT</tt> - a new item was added to the table.</li>
--   <li><tt>MODIFY</tt> - one or more of an existing item's attributes
--   were modified.</li>
--   <li><tt>REMOVE</tt> - the item was deleted from the table</li>
--   </ul>
--   
--   <a>$sel:eventSource:Record'</a>, <a>record_eventSource</a> - The AWS
--   service from which the stream record originated. For DynamoDB Streams,
--   this is <tt>aws:dynamodb</tt>.
--   
--   <a>$sel:eventID:Record'</a>, <a>record_eventID</a> - A globally unique
--   identifier for the event that was recorded in this stream record.
newRecord :: Record

-- | Items that are deleted by the Time to Live process after expiration
--   have the following fields:
--   
--   <ul>
--   <li>Records[].userIdentity.type"Service"</li>
--   <li>Records[].userIdentity.principalId"dynamodb.amazonaws.com"</li>
--   </ul>
record_userIdentity :: Lens' Record (Maybe Identity)

-- | The version number of the stream record format. This number is updated
--   whenever the structure of <tt>Record</tt> is modified.
--   
--   Client applications must not assume that <tt>eventVersion</tt> will
--   remain at a particular value, as this number is subject to change at
--   any time. In general, <tt>eventVersion</tt> will only increase as the
--   low-level DynamoDB Streams API evolves.
record_eventVersion :: Lens' Record (Maybe Text)

-- | The main body of the stream record, containing all of the
--   DynamoDB-specific fields.
record_dynamodb :: Lens' Record (Maybe StreamRecord)

-- | The region in which the <tt>GetRecords</tt> request was received.
record_awsRegion :: Lens' Record (Maybe Text)

-- | The type of data modification that was performed on the DynamoDB
--   table:
--   
--   <ul>
--   <li><tt>INSERT</tt> - a new item was added to the table.</li>
--   <li><tt>MODIFY</tt> - one or more of an existing item's attributes
--   were modified.</li>
--   <li><tt>REMOVE</tt> - the item was deleted from the table</li>
--   </ul>
record_eventName :: Lens' Record (Maybe OperationType)

-- | The AWS service from which the stream record originated. For DynamoDB
--   Streams, this is <tt>aws:dynamodb</tt>.
record_eventSource :: Lens' Record (Maybe Text)

-- | A globally unique identifier for the event that was recorded in this
--   stream record.
record_eventID :: Lens' Record (Maybe Text)
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.Record.Record
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.Record.Record
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.Record.Record
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.Record.Record
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.Record.Record
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.Record.Record
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.Record.Record


module Network.AWS.DynamoDBStreams.Types.StreamDescription

-- | Represents all of the data describing a particular stream.
--   
--   <i>See:</i> <a>newStreamDescription</a> smart constructor.
data StreamDescription
StreamDescription' :: Maybe Text -> Maybe Text -> Maybe StreamStatus -> Maybe (NonEmpty KeySchemaElement) -> Maybe StreamViewType -> Maybe Text -> Maybe [Shard] -> Maybe Text -> Maybe POSIX -> StreamDescription

-- | The shard ID of the item where the operation stopped, inclusive of the
--   previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedShardId</tt> is empty, then the "last page" of
--   results has been processed and there is currently no more data to be
--   retrieved.
--   
--   If <tt>LastEvaluatedShardId</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedShardId</tt> is empty.
[$sel:lastEvaluatedShardId:StreamDescription'] :: StreamDescription -> Maybe Text

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
[$sel:streamLabel:StreamDescription'] :: StreamDescription -> Maybe Text

-- | Indicates the current status of the stream:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Streams is currently being enabled on the
--   DynamoDB table.</li>
--   <li><tt>ENABLED</tt> - the stream is enabled.</li>
--   <li><tt>DISABLING</tt> - Streams is currently being disabled on the
--   DynamoDB table.</li>
--   <li><tt>DISABLED</tt> - the stream is disabled.</li>
--   </ul>
[$sel:streamStatus:StreamDescription'] :: StreamDescription -> Maybe StreamStatus

-- | The key attribute(s) of the stream's DynamoDB table.
[$sel:keySchema:StreamDescription'] :: StreamDescription -> Maybe (NonEmpty KeySchemaElement)

-- | Indicates the format of the records within this stream:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of items that were
--   modified in the DynamoDB table.</li>
--   <li><tt>NEW_IMAGE</tt> - entire items from the table, as they appeared
--   after they were modified.</li>
--   <li><tt>OLD_IMAGE</tt> - entire items from the table, as they appeared
--   before they were modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old images of
--   the items from the table.</li>
--   </ul>
[$sel:streamViewType:StreamDescription'] :: StreamDescription -> Maybe StreamViewType

-- | The Amazon Resource Name (ARN) for the stream.
[$sel:streamArn:StreamDescription'] :: StreamDescription -> Maybe Text

-- | The shards that comprise the stream.
[$sel:shards:StreamDescription'] :: StreamDescription -> Maybe [Shard]

-- | The DynamoDB table with which the stream is associated.
[$sel:tableName:StreamDescription'] :: StreamDescription -> Maybe Text

-- | The date and time when the request to create this stream was issued.
[$sel:creationRequestDateTime:StreamDescription'] :: StreamDescription -> Maybe POSIX

-- | Create a value of <a>StreamDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedShardId:StreamDescription'</a>,
--   <a>streamDescription_lastEvaluatedShardId</a> - The shard ID of the
--   item where the operation stopped, inclusive of the previous result
--   set. Use this value to start a new operation, excluding this value in
--   the new request.
--   
--   If <tt>LastEvaluatedShardId</tt> is empty, then the "last page" of
--   results has been processed and there is currently no more data to be
--   retrieved.
--   
--   If <tt>LastEvaluatedShardId</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedShardId</tt> is empty.
--   
--   <a>$sel:streamLabel:StreamDescription'</a>,
--   <a>streamDescription_streamLabel</a> - A timestamp, in ISO 8601
--   format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
--   
--   <a>$sel:streamStatus:StreamDescription'</a>,
--   <a>streamDescription_streamStatus</a> - Indicates the current status
--   of the stream:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Streams is currently being enabled on the
--   DynamoDB table.</li>
--   <li><tt>ENABLED</tt> - the stream is enabled.</li>
--   <li><tt>DISABLING</tt> - Streams is currently being disabled on the
--   DynamoDB table.</li>
--   <li><tt>DISABLED</tt> - the stream is disabled.</li>
--   </ul>
--   
--   <a>$sel:keySchema:StreamDescription'</a>,
--   <a>streamDescription_keySchema</a> - The key attribute(s) of the
--   stream's DynamoDB table.
--   
--   <a>$sel:streamViewType:StreamDescription'</a>,
--   <a>streamDescription_streamViewType</a> - Indicates the format of the
--   records within this stream:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of items that were
--   modified in the DynamoDB table.</li>
--   <li><tt>NEW_IMAGE</tt> - entire items from the table, as they appeared
--   after they were modified.</li>
--   <li><tt>OLD_IMAGE</tt> - entire items from the table, as they appeared
--   before they were modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old images of
--   the items from the table.</li>
--   </ul>
--   
--   <a>$sel:streamArn:StreamDescription'</a>,
--   <a>streamDescription_streamArn</a> - The Amazon Resource Name (ARN)
--   for the stream.
--   
--   <a>$sel:shards:StreamDescription'</a>, <a>streamDescription_shards</a>
--   - The shards that comprise the stream.
--   
--   <a>$sel:tableName:StreamDescription'</a>,
--   <a>streamDescription_tableName</a> - The DynamoDB table with which the
--   stream is associated.
--   
--   <a>$sel:creationRequestDateTime:StreamDescription'</a>,
--   <a>streamDescription_creationRequestDateTime</a> - The date and time
--   when the request to create this stream was issued.
newStreamDescription :: StreamDescription

-- | The shard ID of the item where the operation stopped, inclusive of the
--   previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedShardId</tt> is empty, then the "last page" of
--   results has been processed and there is currently no more data to be
--   retrieved.
--   
--   If <tt>LastEvaluatedShardId</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedShardId</tt> is empty.
streamDescription_lastEvaluatedShardId :: Lens' StreamDescription (Maybe Text)

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
streamDescription_streamLabel :: Lens' StreamDescription (Maybe Text)

-- | Indicates the current status of the stream:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Streams is currently being enabled on the
--   DynamoDB table.</li>
--   <li><tt>ENABLED</tt> - the stream is enabled.</li>
--   <li><tt>DISABLING</tt> - Streams is currently being disabled on the
--   DynamoDB table.</li>
--   <li><tt>DISABLED</tt> - the stream is disabled.</li>
--   </ul>
streamDescription_streamStatus :: Lens' StreamDescription (Maybe StreamStatus)

-- | The key attribute(s) of the stream's DynamoDB table.
streamDescription_keySchema :: Lens' StreamDescription (Maybe (NonEmpty KeySchemaElement))

-- | Indicates the format of the records within this stream:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of items that were
--   modified in the DynamoDB table.</li>
--   <li><tt>NEW_IMAGE</tt> - entire items from the table, as they appeared
--   after they were modified.</li>
--   <li><tt>OLD_IMAGE</tt> - entire items from the table, as they appeared
--   before they were modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old images of
--   the items from the table.</li>
--   </ul>
streamDescription_streamViewType :: Lens' StreamDescription (Maybe StreamViewType)

-- | The Amazon Resource Name (ARN) for the stream.
streamDescription_streamArn :: Lens' StreamDescription (Maybe Text)

-- | The shards that comprise the stream.
streamDescription_shards :: Lens' StreamDescription (Maybe [Shard])

-- | The DynamoDB table with which the stream is associated.
streamDescription_tableName :: Lens' StreamDescription (Maybe Text)

-- | The date and time when the request to create this stream was issued.
streamDescription_creationRequestDateTime :: Lens' StreamDescription (Maybe UTCTime)
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.Types.StreamDescription.StreamDescription
instance GHC.Show.Show Network.AWS.DynamoDBStreams.Types.StreamDescription.StreamDescription
instance GHC.Read.Read Network.AWS.DynamoDBStreams.Types.StreamDescription.StreamDescription
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.Types.StreamDescription.StreamDescription
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.DynamoDBStreams.Types.StreamDescription.StreamDescription
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.Types.StreamDescription.StreamDescription
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.Types.StreamDescription.StreamDescription


module Network.AWS.DynamoDBStreams.Types

-- | API version <tt>2012-08-10</tt> of the Amazon DynamoDB Streams SDK
--   configuration.
defaultService :: Service

-- | The shard iterator has expired and can no longer be used to retrieve
--   stream records. A shard iterator expires 15 minutes after it is
--   retrieved using the <tt>GetShardIterator</tt> action.
_ExpiredIteratorException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An error occurred on the server side.
_InternalServerError :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation attempted to read past the oldest stream record in a
--   shard.
--   
--   In DynamoDB Streams, there is a 24 hour limit on data retention.
--   Stream records whose age exceeds this limit are subject to removal
--   (trimming) from the stream. You might receive a
--   TrimmedDataAccessException if:
--   
--   <ul>
--   <li>You request a shard iterator with a sequence number older than the
--   trim point (24 hours).</li>
--   <li>You obtain a shard iterator, but before you use the iterator in a
--   <tt>GetRecords</tt> request, a stream record in the shard exceeds the
--   24 hour period and is trimmed. This causes the iterator to access a
--   record that no longer exists.</li>
--   </ul>
_TrimmedDataAccessException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation tried to access a nonexistent table or index. The
--   resource might not be specified correctly, or its status might not be
--   <tt>ACTIVE</tt>.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is no limit to the number of daily on-demand backups that can be
--   taken.
--   
--   Up to 50 simultaneous table operations are allowed per account. These
--   operations include <tt>CreateTable</tt>, <tt>UpdateTable</tt>,
--   <tt>DeleteTable</tt>,<tt>UpdateTimeToLive</tt>,
--   <tt>RestoreTableFromBackup</tt>, and
--   <tt>RestoreTableToPointInTime</tt>.
--   
--   The only exception is when you are creating a table with one or more
--   secondary indexes. You can have up to 25 such requests running at a
--   time; however, if the table or index specifications are complex,
--   DynamoDB might temporarily reduce the number of concurrent operations.
--   
--   There is a soft account quota of 256 tables.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError
newtype KeyType
KeyType' :: Text -> KeyType
[fromKeyType] :: KeyType -> Text
pattern KeyType_HASH :: KeyType
pattern KeyType_RANGE :: KeyType
newtype OperationType
OperationType' :: Text -> OperationType
[fromOperationType] :: OperationType -> Text
pattern OperationType_INSERT :: OperationType
pattern OperationType_MODIFY :: OperationType
pattern OperationType_REMOVE :: OperationType
newtype ShardIteratorType
ShardIteratorType' :: Text -> ShardIteratorType
[fromShardIteratorType] :: ShardIteratorType -> Text
pattern ShardIteratorType_AFTER_SEQUENCE_NUMBER :: ShardIteratorType
pattern ShardIteratorType_AT_SEQUENCE_NUMBER :: ShardIteratorType
pattern ShardIteratorType_LATEST :: ShardIteratorType
pattern ShardIteratorType_TRIM_HORIZON :: ShardIteratorType
newtype StreamStatus
StreamStatus' :: Text -> StreamStatus
[fromStreamStatus] :: StreamStatus -> Text
pattern StreamStatus_DISABLED :: StreamStatus
pattern StreamStatus_DISABLING :: StreamStatus
pattern StreamStatus_ENABLED :: StreamStatus
pattern StreamStatus_ENABLING :: StreamStatus
newtype StreamViewType
StreamViewType' :: Text -> StreamViewType
[fromStreamViewType] :: StreamViewType -> Text
pattern StreamViewType_KEYS_ONLY :: StreamViewType
pattern StreamViewType_NEW_AND_OLD_IMAGES :: StreamViewType
pattern StreamViewType_NEW_IMAGE :: StreamViewType
pattern StreamViewType_OLD_IMAGE :: StreamViewType

-- | Represents the data for an attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newAttributeValue</a> smart constructor.
data AttributeValue
AttributeValue' :: Maybe [AttributeValue] -> Maybe [Text] -> Maybe (HashMap Text AttributeValue) -> Maybe Bool -> Maybe Text -> Maybe [Base64] -> Maybe Base64 -> Maybe [Text] -> Maybe Text -> Maybe Bool -> AttributeValue

-- | An attribute of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
[$sel:l:AttributeValue'] :: AttributeValue -> Maybe [AttributeValue]

-- | An attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
[$sel:ns:AttributeValue'] :: AttributeValue -> Maybe [Text]

-- | An attribute of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
[$sel:m:AttributeValue'] :: AttributeValue -> Maybe (HashMap Text AttributeValue)

-- | An attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
[$sel:null:AttributeValue'] :: AttributeValue -> Maybe Bool

-- | An attribute of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
[$sel:n:AttributeValue'] :: AttributeValue -> Maybe Text

-- | An attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
[$sel:bs:AttributeValue'] :: AttributeValue -> Maybe [Base64]

-- | An attribute of type Binary. For example:
--   
--   <pre>
--   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"
--   </pre>
[$sel:b:AttributeValue'] :: AttributeValue -> Maybe Base64

-- | An attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
[$sel:ss:AttributeValue'] :: AttributeValue -> Maybe [Text]

-- | An attribute of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
[$sel:s:AttributeValue'] :: AttributeValue -> Maybe Text

-- | An attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
[$sel:bool:AttributeValue'] :: AttributeValue -> Maybe Bool

-- | Create a value of <a>AttributeValue</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:l:AttributeValue'</a>, <a>attributeValue_l</a> - An attribute
--   of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
--   
--   <a>$sel:ns:AttributeValue'</a>, <a>attributeValue_ns</a> - An
--   attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
--   
--   <a>$sel:m:AttributeValue'</a>, <a>attributeValue_m</a> - An attribute
--   of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
--   
--   <a>$sel:null:AttributeValue'</a>, <a>attributeValue_null</a> - An
--   attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
--   
--   <a>$sel:n:AttributeValue'</a>, <a>attributeValue_n</a> - An attribute
--   of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
--   
--   <a>$sel:bs:AttributeValue'</a>, <a>attributeValue_bs</a> - An
--   attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
--   
--   <a>$sel:b:AttributeValue'</a>, <a>attributeValue_b</a> - An attribute
--   of type Binary. For example:
--   
--   <tt>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</tt>-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:ss:AttributeValue'</a>, <a>attributeValue_ss</a> - An
--   attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
--   
--   <a>$sel:s:AttributeValue'</a>, <a>attributeValue_s</a> - An attribute
--   of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
--   
--   <a>$sel:bool:AttributeValue'</a>, <a>attributeValue_bool</a> - An
--   attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
newAttributeValue :: AttributeValue

-- | An attribute of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
attributeValue_l :: Lens' AttributeValue (Maybe [AttributeValue])

-- | An attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
attributeValue_ns :: Lens' AttributeValue (Maybe [Text])

-- | An attribute of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
attributeValue_m :: Lens' AttributeValue (Maybe (HashMap Text AttributeValue))

-- | An attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
attributeValue_null :: Lens' AttributeValue (Maybe Bool)

-- | An attribute of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
attributeValue_n :: Lens' AttributeValue (Maybe Text)

-- | An attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
attributeValue_bs :: Lens' AttributeValue (Maybe [ByteString])

-- | An attribute of type Binary. For example:
--   
--   <tt>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</tt>-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
attributeValue_b :: Lens' AttributeValue (Maybe ByteString)

-- | An attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
attributeValue_ss :: Lens' AttributeValue (Maybe [Text])

-- | An attribute of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
attributeValue_s :: Lens' AttributeValue (Maybe Text)

-- | An attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
attributeValue_bool :: Lens' AttributeValue (Maybe Bool)

-- | Contains details about the type of identity that made the request.
--   
--   <i>See:</i> <a>newIdentity</a> smart constructor.
data Identity
Identity' :: Maybe Text -> Maybe Text -> Identity

-- | A unique identifier for the entity that made the call. For Time To
--   Live, the principalId is "dynamodb.amazonaws.com".
[$sel:principalId:Identity'] :: Identity -> Maybe Text

-- | The type of the identity. For Time To Live, the type is "Service".
[$sel:type':Identity'] :: Identity -> Maybe Text

-- | Create a value of <a>Identity</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:principalId:Identity'</a>, <a>identity_principalId</a> - A
--   unique identifier for the entity that made the call. For Time To Live,
--   the principalId is "dynamodb.amazonaws.com".
--   
--   <a>$sel:type':Identity'</a>, <a>identity_type</a> - The type of the
--   identity. For Time To Live, the type is "Service".
newIdentity :: Identity

-- | A unique identifier for the entity that made the call. For Time To
--   Live, the principalId is "dynamodb.amazonaws.com".
identity_principalId :: Lens' Identity (Maybe Text)

-- | The type of the identity. For Time To Live, the type is "Service".
identity_type :: Lens' Identity (Maybe Text)

-- | Represents <i>a single element</i> of a key schema. A key schema
--   specifies the attributes that make up the primary key of a table, or
--   the key attributes of an index.
--   
--   A <tt>KeySchemaElement</tt> represents exactly one attribute of the
--   primary key. For example, a simple primary key would be represented by
--   one <tt>KeySchemaElement</tt> (for the partition key). A composite
--   primary key would require one <tt>KeySchemaElement</tt> for the
--   partition key, and another <tt>KeySchemaElement</tt> for the sort key.
--   
--   A <tt>KeySchemaElement</tt> must be a scalar, top-level attribute (not
--   a nested attribute). The data type must be one of String, Number, or
--   Binary. The attribute cannot be nested within a List or a Map.
--   
--   <i>See:</i> <a>newKeySchemaElement</a> smart constructor.
data KeySchemaElement
KeySchemaElement' :: Text -> KeyType -> KeySchemaElement

-- | The name of a key attribute.
[$sel:attributeName:KeySchemaElement'] :: KeySchemaElement -> Text

-- | The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keyType:KeySchemaElement'] :: KeySchemaElement -> KeyType

-- | Create a value of <a>KeySchemaElement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeName:KeySchemaElement'</a>,
--   <a>keySchemaElement_attributeName</a> - The name of a key attribute.
--   
--   <a>$sel:keyType:KeySchemaElement'</a>, <a>keySchemaElement_keyType</a>
--   - The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
newKeySchemaElement :: Text -> KeyType -> KeySchemaElement

-- | The name of a key attribute.
keySchemaElement_attributeName :: Lens' KeySchemaElement Text

-- | The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
keySchemaElement_keyType :: Lens' KeySchemaElement KeyType

-- | A description of a unique event within a stream.
--   
--   <i>See:</i> <a>newRecord</a> smart constructor.
data Record
Record' :: Maybe Identity -> Maybe Text -> Maybe StreamRecord -> Maybe Text -> Maybe OperationType -> Maybe Text -> Maybe Text -> Record

-- | Items that are deleted by the Time to Live process after expiration
--   have the following fields:
--   
--   <ul>
--   <li>Records[].userIdentity.type"Service"</li>
--   <li>Records[].userIdentity.principalId"dynamodb.amazonaws.com"</li>
--   </ul>
[$sel:userIdentity:Record'] :: Record -> Maybe Identity

-- | The version number of the stream record format. This number is updated
--   whenever the structure of <tt>Record</tt> is modified.
--   
--   Client applications must not assume that <tt>eventVersion</tt> will
--   remain at a particular value, as this number is subject to change at
--   any time. In general, <tt>eventVersion</tt> will only increase as the
--   low-level DynamoDB Streams API evolves.
[$sel:eventVersion:Record'] :: Record -> Maybe Text

-- | The main body of the stream record, containing all of the
--   DynamoDB-specific fields.
[$sel:dynamodb:Record'] :: Record -> Maybe StreamRecord

-- | The region in which the <tt>GetRecords</tt> request was received.
[$sel:awsRegion:Record'] :: Record -> Maybe Text

-- | The type of data modification that was performed on the DynamoDB
--   table:
--   
--   <ul>
--   <li><tt>INSERT</tt> - a new item was added to the table.</li>
--   <li><tt>MODIFY</tt> - one or more of an existing item's attributes
--   were modified.</li>
--   <li><tt>REMOVE</tt> - the item was deleted from the table</li>
--   </ul>
[$sel:eventName:Record'] :: Record -> Maybe OperationType

-- | The AWS service from which the stream record originated. For DynamoDB
--   Streams, this is <tt>aws:dynamodb</tt>.
[$sel:eventSource:Record'] :: Record -> Maybe Text

-- | A globally unique identifier for the event that was recorded in this
--   stream record.
[$sel:eventID:Record'] :: Record -> Maybe Text

-- | Create a value of <a>Record</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:userIdentity:Record'</a>, <a>record_userIdentity</a> - Items
--   that are deleted by the Time to Live process after expiration have the
--   following fields:
--   
--   <ul>
--   <li>Records[].userIdentity.type"Service"</li>
--   <li>Records[].userIdentity.principalId"dynamodb.amazonaws.com"</li>
--   </ul>
--   
--   <a>$sel:eventVersion:Record'</a>, <a>record_eventVersion</a> - The
--   version number of the stream record format. This number is updated
--   whenever the structure of <tt>Record</tt> is modified.
--   
--   Client applications must not assume that <tt>eventVersion</tt> will
--   remain at a particular value, as this number is subject to change at
--   any time. In general, <tt>eventVersion</tt> will only increase as the
--   low-level DynamoDB Streams API evolves.
--   
--   <a>$sel:dynamodb:Record'</a>, <a>record_dynamodb</a> - The main body
--   of the stream record, containing all of the DynamoDB-specific fields.
--   
--   <a>$sel:awsRegion:Record'</a>, <a>record_awsRegion</a> - The region in
--   which the <tt>GetRecords</tt> request was received.
--   
--   <a>$sel:eventName:Record'</a>, <a>record_eventName</a> - The type of
--   data modification that was performed on the DynamoDB table:
--   
--   <ul>
--   <li><tt>INSERT</tt> - a new item was added to the table.</li>
--   <li><tt>MODIFY</tt> - one or more of an existing item's attributes
--   were modified.</li>
--   <li><tt>REMOVE</tt> - the item was deleted from the table</li>
--   </ul>
--   
--   <a>$sel:eventSource:Record'</a>, <a>record_eventSource</a> - The AWS
--   service from which the stream record originated. For DynamoDB Streams,
--   this is <tt>aws:dynamodb</tt>.
--   
--   <a>$sel:eventID:Record'</a>, <a>record_eventID</a> - A globally unique
--   identifier for the event that was recorded in this stream record.
newRecord :: Record

-- | Items that are deleted by the Time to Live process after expiration
--   have the following fields:
--   
--   <ul>
--   <li>Records[].userIdentity.type"Service"</li>
--   <li>Records[].userIdentity.principalId"dynamodb.amazonaws.com"</li>
--   </ul>
record_userIdentity :: Lens' Record (Maybe Identity)

-- | The version number of the stream record format. This number is updated
--   whenever the structure of <tt>Record</tt> is modified.
--   
--   Client applications must not assume that <tt>eventVersion</tt> will
--   remain at a particular value, as this number is subject to change at
--   any time. In general, <tt>eventVersion</tt> will only increase as the
--   low-level DynamoDB Streams API evolves.
record_eventVersion :: Lens' Record (Maybe Text)

-- | The main body of the stream record, containing all of the
--   DynamoDB-specific fields.
record_dynamodb :: Lens' Record (Maybe StreamRecord)

-- | The region in which the <tt>GetRecords</tt> request was received.
record_awsRegion :: Lens' Record (Maybe Text)

-- | The type of data modification that was performed on the DynamoDB
--   table:
--   
--   <ul>
--   <li><tt>INSERT</tt> - a new item was added to the table.</li>
--   <li><tt>MODIFY</tt> - one or more of an existing item's attributes
--   were modified.</li>
--   <li><tt>REMOVE</tt> - the item was deleted from the table</li>
--   </ul>
record_eventName :: Lens' Record (Maybe OperationType)

-- | The AWS service from which the stream record originated. For DynamoDB
--   Streams, this is <tt>aws:dynamodb</tt>.
record_eventSource :: Lens' Record (Maybe Text)

-- | A globally unique identifier for the event that was recorded in this
--   stream record.
record_eventID :: Lens' Record (Maybe Text)

-- | The beginning and ending sequence numbers for the stream records
--   contained within a shard.
--   
--   <i>See:</i> <a>newSequenceNumberRange</a> smart constructor.
data SequenceNumberRange
SequenceNumberRange' :: Maybe Text -> Maybe Text -> SequenceNumberRange

-- | The first sequence number for the stream records contained within a
--   shard. String contains numeric characters only.
[$sel:startingSequenceNumber:SequenceNumberRange'] :: SequenceNumberRange -> Maybe Text

-- | The last sequence number for the stream records contained within a
--   shard. String contains numeric characters only.
[$sel:endingSequenceNumber:SequenceNumberRange'] :: SequenceNumberRange -> Maybe Text

-- | Create a value of <a>SequenceNumberRange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:startingSequenceNumber:SequenceNumberRange'</a>,
--   <a>sequenceNumberRange_startingSequenceNumber</a> - The first sequence
--   number for the stream records contained within a shard. String
--   contains numeric characters only.
--   
--   <a>$sel:endingSequenceNumber:SequenceNumberRange'</a>,
--   <a>sequenceNumberRange_endingSequenceNumber</a> - The last sequence
--   number for the stream records contained within a shard. String
--   contains numeric characters only.
newSequenceNumberRange :: SequenceNumberRange

-- | The first sequence number for the stream records contained within a
--   shard. String contains numeric characters only.
sequenceNumberRange_startingSequenceNumber :: Lens' SequenceNumberRange (Maybe Text)

-- | The last sequence number for the stream records contained within a
--   shard. String contains numeric characters only.
sequenceNumberRange_endingSequenceNumber :: Lens' SequenceNumberRange (Maybe Text)

-- | A uniquely identified group of stream records within a stream.
--   
--   <i>See:</i> <a>newShard</a> smart constructor.
data Shard
Shard' :: Maybe Text -> Maybe SequenceNumberRange -> Maybe Text -> Shard

-- | The shard ID of the current shard's parent.
[$sel:parentShardId:Shard'] :: Shard -> Maybe Text

-- | The range of possible sequence numbers for the shard.
[$sel:sequenceNumberRange:Shard'] :: Shard -> Maybe SequenceNumberRange

-- | The system-generated identifier for this shard.
[$sel:shardId:Shard'] :: Shard -> Maybe Text

-- | Create a value of <a>Shard</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:parentShardId:Shard'</a>, <a>shard_parentShardId</a> - The
--   shard ID of the current shard's parent.
--   
--   <a>$sel:sequenceNumberRange:Shard'</a>,
--   <a>shard_sequenceNumberRange</a> - The range of possible sequence
--   numbers for the shard.
--   
--   <a>$sel:shardId:Shard'</a>, <a>shard_shardId</a> - The
--   system-generated identifier for this shard.
newShard :: Shard

-- | The shard ID of the current shard's parent.
shard_parentShardId :: Lens' Shard (Maybe Text)

-- | The range of possible sequence numbers for the shard.
shard_sequenceNumberRange :: Lens' Shard (Maybe SequenceNumberRange)

-- | The system-generated identifier for this shard.
shard_shardId :: Lens' Shard (Maybe Text)

-- | Represents all of the data describing a particular stream.
--   
--   <i>See:</i> <a>newStream</a> smart constructor.
data Stream
Stream' :: Maybe Text -> Maybe Text -> Maybe Text -> Stream

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
[$sel:streamLabel:Stream'] :: Stream -> Maybe Text

-- | The Amazon Resource Name (ARN) for the stream.
[$sel:streamArn:Stream'] :: Stream -> Maybe Text

-- | The DynamoDB table with which the stream is associated.
[$sel:tableName:Stream'] :: Stream -> Maybe Text

-- | Create a value of <a>Stream</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamLabel:Stream'</a>, <a>stream_streamLabel</a> - A
--   timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
--   
--   <a>$sel:streamArn:Stream'</a>, <a>stream_streamArn</a> - The Amazon
--   Resource Name (ARN) for the stream.
--   
--   <a>$sel:tableName:Stream'</a>, <a>stream_tableName</a> - The DynamoDB
--   table with which the stream is associated.
newStream :: Stream

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
stream_streamLabel :: Lens' Stream (Maybe Text)

-- | The Amazon Resource Name (ARN) for the stream.
stream_streamArn :: Lens' Stream (Maybe Text)

-- | The DynamoDB table with which the stream is associated.
stream_tableName :: Lens' Stream (Maybe Text)

-- | Represents all of the data describing a particular stream.
--   
--   <i>See:</i> <a>newStreamDescription</a> smart constructor.
data StreamDescription
StreamDescription' :: Maybe Text -> Maybe Text -> Maybe StreamStatus -> Maybe (NonEmpty KeySchemaElement) -> Maybe StreamViewType -> Maybe Text -> Maybe [Shard] -> Maybe Text -> Maybe POSIX -> StreamDescription

-- | The shard ID of the item where the operation stopped, inclusive of the
--   previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedShardId</tt> is empty, then the "last page" of
--   results has been processed and there is currently no more data to be
--   retrieved.
--   
--   If <tt>LastEvaluatedShardId</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedShardId</tt> is empty.
[$sel:lastEvaluatedShardId:StreamDescription'] :: StreamDescription -> Maybe Text

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
[$sel:streamLabel:StreamDescription'] :: StreamDescription -> Maybe Text

-- | Indicates the current status of the stream:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Streams is currently being enabled on the
--   DynamoDB table.</li>
--   <li><tt>ENABLED</tt> - the stream is enabled.</li>
--   <li><tt>DISABLING</tt> - Streams is currently being disabled on the
--   DynamoDB table.</li>
--   <li><tt>DISABLED</tt> - the stream is disabled.</li>
--   </ul>
[$sel:streamStatus:StreamDescription'] :: StreamDescription -> Maybe StreamStatus

-- | The key attribute(s) of the stream's DynamoDB table.
[$sel:keySchema:StreamDescription'] :: StreamDescription -> Maybe (NonEmpty KeySchemaElement)

-- | Indicates the format of the records within this stream:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of items that were
--   modified in the DynamoDB table.</li>
--   <li><tt>NEW_IMAGE</tt> - entire items from the table, as they appeared
--   after they were modified.</li>
--   <li><tt>OLD_IMAGE</tt> - entire items from the table, as they appeared
--   before they were modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old images of
--   the items from the table.</li>
--   </ul>
[$sel:streamViewType:StreamDescription'] :: StreamDescription -> Maybe StreamViewType

-- | The Amazon Resource Name (ARN) for the stream.
[$sel:streamArn:StreamDescription'] :: StreamDescription -> Maybe Text

-- | The shards that comprise the stream.
[$sel:shards:StreamDescription'] :: StreamDescription -> Maybe [Shard]

-- | The DynamoDB table with which the stream is associated.
[$sel:tableName:StreamDescription'] :: StreamDescription -> Maybe Text

-- | The date and time when the request to create this stream was issued.
[$sel:creationRequestDateTime:StreamDescription'] :: StreamDescription -> Maybe POSIX

-- | Create a value of <a>StreamDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedShardId:StreamDescription'</a>,
--   <a>streamDescription_lastEvaluatedShardId</a> - The shard ID of the
--   item where the operation stopped, inclusive of the previous result
--   set. Use this value to start a new operation, excluding this value in
--   the new request.
--   
--   If <tt>LastEvaluatedShardId</tt> is empty, then the "last page" of
--   results has been processed and there is currently no more data to be
--   retrieved.
--   
--   If <tt>LastEvaluatedShardId</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedShardId</tt> is empty.
--   
--   <a>$sel:streamLabel:StreamDescription'</a>,
--   <a>streamDescription_streamLabel</a> - A timestamp, in ISO 8601
--   format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
--   
--   <a>$sel:streamStatus:StreamDescription'</a>,
--   <a>streamDescription_streamStatus</a> - Indicates the current status
--   of the stream:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Streams is currently being enabled on the
--   DynamoDB table.</li>
--   <li><tt>ENABLED</tt> - the stream is enabled.</li>
--   <li><tt>DISABLING</tt> - Streams is currently being disabled on the
--   DynamoDB table.</li>
--   <li><tt>DISABLED</tt> - the stream is disabled.</li>
--   </ul>
--   
--   <a>$sel:keySchema:StreamDescription'</a>,
--   <a>streamDescription_keySchema</a> - The key attribute(s) of the
--   stream's DynamoDB table.
--   
--   <a>$sel:streamViewType:StreamDescription'</a>,
--   <a>streamDescription_streamViewType</a> - Indicates the format of the
--   records within this stream:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of items that were
--   modified in the DynamoDB table.</li>
--   <li><tt>NEW_IMAGE</tt> - entire items from the table, as they appeared
--   after they were modified.</li>
--   <li><tt>OLD_IMAGE</tt> - entire items from the table, as they appeared
--   before they were modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old images of
--   the items from the table.</li>
--   </ul>
--   
--   <a>$sel:streamArn:StreamDescription'</a>,
--   <a>streamDescription_streamArn</a> - The Amazon Resource Name (ARN)
--   for the stream.
--   
--   <a>$sel:shards:StreamDescription'</a>, <a>streamDescription_shards</a>
--   - The shards that comprise the stream.
--   
--   <a>$sel:tableName:StreamDescription'</a>,
--   <a>streamDescription_tableName</a> - The DynamoDB table with which the
--   stream is associated.
--   
--   <a>$sel:creationRequestDateTime:StreamDescription'</a>,
--   <a>streamDescription_creationRequestDateTime</a> - The date and time
--   when the request to create this stream was issued.
newStreamDescription :: StreamDescription

-- | The shard ID of the item where the operation stopped, inclusive of the
--   previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedShardId</tt> is empty, then the "last page" of
--   results has been processed and there is currently no more data to be
--   retrieved.
--   
--   If <tt>LastEvaluatedShardId</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedShardId</tt> is empty.
streamDescription_lastEvaluatedShardId :: Lens' StreamDescription (Maybe Text)

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
streamDescription_streamLabel :: Lens' StreamDescription (Maybe Text)

-- | Indicates the current status of the stream:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Streams is currently being enabled on the
--   DynamoDB table.</li>
--   <li><tt>ENABLED</tt> - the stream is enabled.</li>
--   <li><tt>DISABLING</tt> - Streams is currently being disabled on the
--   DynamoDB table.</li>
--   <li><tt>DISABLED</tt> - the stream is disabled.</li>
--   </ul>
streamDescription_streamStatus :: Lens' StreamDescription (Maybe StreamStatus)

-- | The key attribute(s) of the stream's DynamoDB table.
streamDescription_keySchema :: Lens' StreamDescription (Maybe (NonEmpty KeySchemaElement))

-- | Indicates the format of the records within this stream:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of items that were
--   modified in the DynamoDB table.</li>
--   <li><tt>NEW_IMAGE</tt> - entire items from the table, as they appeared
--   after they were modified.</li>
--   <li><tt>OLD_IMAGE</tt> - entire items from the table, as they appeared
--   before they were modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old images of
--   the items from the table.</li>
--   </ul>
streamDescription_streamViewType :: Lens' StreamDescription (Maybe StreamViewType)

-- | The Amazon Resource Name (ARN) for the stream.
streamDescription_streamArn :: Lens' StreamDescription (Maybe Text)

-- | The shards that comprise the stream.
streamDescription_shards :: Lens' StreamDescription (Maybe [Shard])

-- | The DynamoDB table with which the stream is associated.
streamDescription_tableName :: Lens' StreamDescription (Maybe Text)

-- | The date and time when the request to create this stream was issued.
streamDescription_creationRequestDateTime :: Lens' StreamDescription (Maybe UTCTime)

-- | A description of a single data modification that was performed on an
--   item in a DynamoDB table.
--   
--   <i>See:</i> <a>newStreamRecord</a> smart constructor.
data StreamRecord
StreamRecord' :: Maybe Natural -> Maybe Text -> Maybe POSIX -> Maybe StreamViewType -> Maybe (HashMap Text AttributeValue) -> Maybe (HashMap Text AttributeValue) -> Maybe (HashMap Text AttributeValue) -> StreamRecord

-- | The size of the stream record, in bytes.
[$sel:sizeBytes:StreamRecord'] :: StreamRecord -> Maybe Natural

-- | The sequence number of the stream record.
[$sel:sequenceNumber:StreamRecord'] :: StreamRecord -> Maybe Text

-- | The approximate date and time when the stream record was created, in
--   <a>UNIX epoch time</a> format.
[$sel:approximateCreationDateTime:StreamRecord'] :: StreamRecord -> Maybe POSIX

-- | The type of data from the modified DynamoDB item that was captured in
--   this stream record:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of the modified
--   item.</li>
--   <li><tt>NEW_IMAGE</tt> - the entire item, as it appeared after it was
--   modified.</li>
--   <li><tt>OLD_IMAGE</tt> - the entire item, as it appeared before it was
--   modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old item images
--   of the item.</li>
--   </ul>
[$sel:streamViewType:StreamRecord'] :: StreamRecord -> Maybe StreamViewType

-- | The primary key attribute(s) for the DynamoDB item that was modified.
[$sel:keys:StreamRecord'] :: StreamRecord -> Maybe (HashMap Text AttributeValue)

-- | The item in the DynamoDB table as it appeared before it was modified.
[$sel:oldImage:StreamRecord'] :: StreamRecord -> Maybe (HashMap Text AttributeValue)

-- | The item in the DynamoDB table as it appeared after it was modified.
[$sel:newImage':StreamRecord'] :: StreamRecord -> Maybe (HashMap Text AttributeValue)

-- | Create a value of <a>StreamRecord</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sizeBytes:StreamRecord'</a>, <a>streamRecord_sizeBytes</a> -
--   The size of the stream record, in bytes.
--   
--   <a>$sel:sequenceNumber:StreamRecord'</a>,
--   <a>streamRecord_sequenceNumber</a> - The sequence number of the stream
--   record.
--   
--   <a>$sel:approximateCreationDateTime:StreamRecord'</a>,
--   <a>streamRecord_approximateCreationDateTime</a> - The approximate date
--   and time when the stream record was created, in <a>UNIX epoch time</a>
--   format.
--   
--   <a>$sel:streamViewType:StreamRecord'</a>,
--   <a>streamRecord_streamViewType</a> - The type of data from the
--   modified DynamoDB item that was captured in this stream record:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of the modified
--   item.</li>
--   <li><tt>NEW_IMAGE</tt> - the entire item, as it appeared after it was
--   modified.</li>
--   <li><tt>OLD_IMAGE</tt> - the entire item, as it appeared before it was
--   modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old item images
--   of the item.</li>
--   </ul>
--   
--   <a>$sel:keys:StreamRecord'</a>, <a>streamRecord_keys</a> - The primary
--   key attribute(s) for the DynamoDB item that was modified.
--   
--   <a>$sel:oldImage:StreamRecord'</a>, <a>streamRecord_oldImage</a> - The
--   item in the DynamoDB table as it appeared before it was modified.
--   
--   <a>$sel:newImage':StreamRecord'</a>, <a>streamRecord_newImage</a> -
--   The item in the DynamoDB table as it appeared after it was modified.
newStreamRecord :: StreamRecord

-- | The size of the stream record, in bytes.
streamRecord_sizeBytes :: Lens' StreamRecord (Maybe Natural)

-- | The sequence number of the stream record.
streamRecord_sequenceNumber :: Lens' StreamRecord (Maybe Text)

-- | The approximate date and time when the stream record was created, in
--   <a>UNIX epoch time</a> format.
streamRecord_approximateCreationDateTime :: Lens' StreamRecord (Maybe UTCTime)

-- | The type of data from the modified DynamoDB item that was captured in
--   this stream record:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of the modified
--   item.</li>
--   <li><tt>NEW_IMAGE</tt> - the entire item, as it appeared after it was
--   modified.</li>
--   <li><tt>OLD_IMAGE</tt> - the entire item, as it appeared before it was
--   modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old item images
--   of the item.</li>
--   </ul>
streamRecord_streamViewType :: Lens' StreamRecord (Maybe StreamViewType)

-- | The primary key attribute(s) for the DynamoDB item that was modified.
streamRecord_keys :: Lens' StreamRecord (Maybe (HashMap Text AttributeValue))

-- | The item in the DynamoDB table as it appeared before it was modified.
streamRecord_oldImage :: Lens' StreamRecord (Maybe (HashMap Text AttributeValue))

-- | The item in the DynamoDB table as it appeared after it was modified.
streamRecord_newImage :: Lens' StreamRecord (Maybe (HashMap Text AttributeValue))


-- | Returns an array of stream ARNs associated with the current account
--   and endpoint. If the <tt>TableName</tt> parameter is present, then
--   <tt>ListStreams</tt> will return only the streams ARNs for that table.
--   
--   You can call <tt>ListStreams</tt> at a maximum rate of 5 times per
--   second.
module Network.AWS.DynamoDBStreams.ListStreams

-- | Represents the input of a <tt>ListStreams</tt> operation.
--   
--   <i>See:</i> <a>newListStreams</a> smart constructor.
data ListStreams
ListStreams' :: Maybe Text -> Maybe Natural -> Maybe Text -> ListStreams

-- | The ARN (Amazon Resource Name) of the first item that this operation
--   will evaluate. Use the value that was returned for
--   <tt>LastEvaluatedStreamArn</tt> in the previous operation.
[$sel:exclusiveStartStreamArn:ListStreams'] :: ListStreams -> Maybe Text

-- | The maximum number of streams to return. The upper limit is 100.
[$sel:limit:ListStreams'] :: ListStreams -> Maybe Natural

-- | If this parameter is provided, then only the streams associated with
--   this table name are returned.
[$sel:tableName:ListStreams'] :: ListStreams -> Maybe Text

-- | Create a value of <a>ListStreams</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exclusiveStartStreamArn:ListStreams'</a>,
--   <a>listStreams_exclusiveStartStreamArn</a> - The ARN (Amazon Resource
--   Name) of the first item that this operation will evaluate. Use the
--   value that was returned for <tt>LastEvaluatedStreamArn</tt> in the
--   previous operation.
--   
--   <a>$sel:limit:ListStreams'</a>, <a>listStreams_limit</a> - The maximum
--   number of streams to return. The upper limit is 100.
--   
--   <a>$sel:tableName:ListStreams'</a>, <a>listStreams_tableName</a> - If
--   this parameter is provided, then only the streams associated with this
--   table name are returned.
newListStreams :: ListStreams

-- | The ARN (Amazon Resource Name) of the first item that this operation
--   will evaluate. Use the value that was returned for
--   <tt>LastEvaluatedStreamArn</tt> in the previous operation.
listStreams_exclusiveStartStreamArn :: Lens' ListStreams (Maybe Text)

-- | The maximum number of streams to return. The upper limit is 100.
listStreams_limit :: Lens' ListStreams (Maybe Natural)

-- | If this parameter is provided, then only the streams associated with
--   this table name are returned.
listStreams_tableName :: Lens' ListStreams (Maybe Text)

-- | Represents the output of a <tt>ListStreams</tt> operation.
--   
--   <i>See:</i> <a>newListStreamsResponse</a> smart constructor.
data ListStreamsResponse
ListStreamsResponse' :: Maybe Text -> Maybe [Stream] -> Int -> ListStreamsResponse

-- | The stream ARN of the item where the operation stopped, inclusive of
--   the previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedStreamArn</tt> is empty, then the "last page" of
--   results has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedStreamArn</tt> is not empty, it does not
--   necessarily mean that there is more data in the result set. The only
--   way to know when you have reached the end of the result set is when
--   <tt>LastEvaluatedStreamArn</tt> is empty.
[$sel:lastEvaluatedStreamArn:ListStreamsResponse'] :: ListStreamsResponse -> Maybe Text

-- | A list of stream descriptors associated with the current account and
--   endpoint.
[$sel:streams:ListStreamsResponse'] :: ListStreamsResponse -> Maybe [Stream]

-- | The response's http status code.
[$sel:httpStatus:ListStreamsResponse'] :: ListStreamsResponse -> Int

-- | Create a value of <a>ListStreamsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedStreamArn:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_lastEvaluatedStreamArn</a> - The stream ARN of
--   the item where the operation stopped, inclusive of the previous result
--   set. Use this value to start a new operation, excluding this value in
--   the new request.
--   
--   If <tt>LastEvaluatedStreamArn</tt> is empty, then the "last page" of
--   results has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedStreamArn</tt> is not empty, it does not
--   necessarily mean that there is more data in the result set. The only
--   way to know when you have reached the end of the result set is when
--   <tt>LastEvaluatedStreamArn</tt> is empty.
--   
--   <a>$sel:streams:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_streams</a> - A list of stream descriptors
--   associated with the current account and endpoint.
--   
--   <a>$sel:httpStatus:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_httpStatus</a> - The response's http status
--   code.
newListStreamsResponse :: Int -> ListStreamsResponse

-- | The stream ARN of the item where the operation stopped, inclusive of
--   the previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedStreamArn</tt> is empty, then the "last page" of
--   results has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedStreamArn</tt> is not empty, it does not
--   necessarily mean that there is more data in the result set. The only
--   way to know when you have reached the end of the result set is when
--   <tt>LastEvaluatedStreamArn</tt> is empty.
listStreamsResponse_lastEvaluatedStreamArn :: Lens' ListStreamsResponse (Maybe Text)

-- | A list of stream descriptors associated with the current account and
--   endpoint.
listStreamsResponse_streams :: Lens' ListStreamsResponse (Maybe [Stream])

-- | The response's http status code.
listStreamsResponse_httpStatus :: Lens' ListStreamsResponse Int
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.ListStreams.ListStreams
instance GHC.Show.Show Network.AWS.DynamoDBStreams.ListStreams.ListStreams
instance GHC.Read.Read Network.AWS.DynamoDBStreams.ListStreams.ListStreams
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.ListStreams.ListStreams
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.ListStreams.ListStreamsResponse
instance GHC.Show.Show Network.AWS.DynamoDBStreams.ListStreams.ListStreamsResponse
instance GHC.Read.Read Network.AWS.DynamoDBStreams.ListStreams.ListStreamsResponse
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.ListStreams.ListStreamsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.DynamoDBStreams.ListStreams.ListStreams
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.ListStreams.ListStreamsResponse
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.ListStreams.ListStreams
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.ListStreams.ListStreams
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.DynamoDBStreams.ListStreams.ListStreams
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.DynamoDBStreams.ListStreams.ListStreams
instance Network.AWS.Data.Path.ToPath Network.AWS.DynamoDBStreams.ListStreams.ListStreams
instance Network.AWS.Data.Query.ToQuery Network.AWS.DynamoDBStreams.ListStreams.ListStreams


-- | Returns a shard iterator. A shard iterator provides information about
--   how to retrieve the stream records from within a shard. Use the shard
--   iterator in a subsequent <tt>GetRecords</tt> request to read the
--   stream records from the shard.
--   
--   A shard iterator expires 15 minutes after it is returned to the
--   requester.
module Network.AWS.DynamoDBStreams.GetShardIterator

-- | Represents the input of a <tt>GetShardIterator</tt> operation.
--   
--   <i>See:</i> <a>newGetShardIterator</a> smart constructor.
data GetShardIterator
GetShardIterator' :: Maybe Text -> Text -> Text -> ShardIteratorType -> GetShardIterator

-- | The sequence number of a stream record in the shard from which to
--   start reading.
[$sel:sequenceNumber:GetShardIterator'] :: GetShardIterator -> Maybe Text

-- | The Amazon Resource Name (ARN) for the stream.
[$sel:streamArn:GetShardIterator'] :: GetShardIterator -> Text

-- | The identifier of the shard. The iterator will be returned for this
--   shard ID.
[$sel:shardId:GetShardIterator'] :: GetShardIterator -> Text

-- | Determines how the shard iterator is used to start reading stream
--   records from the shard:
--   
--   <ul>
--   <li><tt>AT_SEQUENCE_NUMBER</tt> - Start reading exactly from the
--   position denoted by a specific sequence number.</li>
--   <li><tt>AFTER_SEQUENCE_NUMBER</tt> - Start reading right after the
--   position denoted by a specific sequence number.</li>
--   <li><tt>TRIM_HORIZON</tt> - Start reading at the last (untrimmed)
--   stream record, which is the oldest record in the shard. In DynamoDB
--   Streams, there is a 24 hour limit on data retention. Stream records
--   whose age exceeds this limit are subject to removal (trimming) from
--   the stream.</li>
--   <li><tt>LATEST</tt> - Start reading just after the most recent stream
--   record in the shard, so that you always read the most recent data in
--   the shard.</li>
--   </ul>
[$sel:shardIteratorType:GetShardIterator'] :: GetShardIterator -> ShardIteratorType

-- | Create a value of <a>GetShardIterator</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sequenceNumber:GetShardIterator'</a>,
--   <a>getShardIterator_sequenceNumber</a> - The sequence number of a
--   stream record in the shard from which to start reading.
--   
--   <a>$sel:streamArn:GetShardIterator'</a>,
--   <a>getShardIterator_streamArn</a> - The Amazon Resource Name (ARN) for
--   the stream.
--   
--   <a>$sel:shardId:GetShardIterator'</a>, <a>getShardIterator_shardId</a>
--   - The identifier of the shard. The iterator will be returned for this
--   shard ID.
--   
--   <a>$sel:shardIteratorType:GetShardIterator'</a>,
--   <a>getShardIterator_shardIteratorType</a> - Determines how the shard
--   iterator is used to start reading stream records from the shard:
--   
--   <ul>
--   <li><tt>AT_SEQUENCE_NUMBER</tt> - Start reading exactly from the
--   position denoted by a specific sequence number.</li>
--   <li><tt>AFTER_SEQUENCE_NUMBER</tt> - Start reading right after the
--   position denoted by a specific sequence number.</li>
--   <li><tt>TRIM_HORIZON</tt> - Start reading at the last (untrimmed)
--   stream record, which is the oldest record in the shard. In DynamoDB
--   Streams, there is a 24 hour limit on data retention. Stream records
--   whose age exceeds this limit are subject to removal (trimming) from
--   the stream.</li>
--   <li><tt>LATEST</tt> - Start reading just after the most recent stream
--   record in the shard, so that you always read the most recent data in
--   the shard.</li>
--   </ul>
newGetShardIterator :: Text -> Text -> ShardIteratorType -> GetShardIterator

-- | The sequence number of a stream record in the shard from which to
--   start reading.
getShardIterator_sequenceNumber :: Lens' GetShardIterator (Maybe Text)

-- | The Amazon Resource Name (ARN) for the stream.
getShardIterator_streamArn :: Lens' GetShardIterator Text

-- | The identifier of the shard. The iterator will be returned for this
--   shard ID.
getShardIterator_shardId :: Lens' GetShardIterator Text

-- | Determines how the shard iterator is used to start reading stream
--   records from the shard:
--   
--   <ul>
--   <li><tt>AT_SEQUENCE_NUMBER</tt> - Start reading exactly from the
--   position denoted by a specific sequence number.</li>
--   <li><tt>AFTER_SEQUENCE_NUMBER</tt> - Start reading right after the
--   position denoted by a specific sequence number.</li>
--   <li><tt>TRIM_HORIZON</tt> - Start reading at the last (untrimmed)
--   stream record, which is the oldest record in the shard. In DynamoDB
--   Streams, there is a 24 hour limit on data retention. Stream records
--   whose age exceeds this limit are subject to removal (trimming) from
--   the stream.</li>
--   <li><tt>LATEST</tt> - Start reading just after the most recent stream
--   record in the shard, so that you always read the most recent data in
--   the shard.</li>
--   </ul>
getShardIterator_shardIteratorType :: Lens' GetShardIterator ShardIteratorType

-- | Represents the output of a <tt>GetShardIterator</tt> operation.
--   
--   <i>See:</i> <a>newGetShardIteratorResponse</a> smart constructor.
data GetShardIteratorResponse
GetShardIteratorResponse' :: Maybe Text -> Int -> GetShardIteratorResponse

-- | The position in the shard from which to start reading stream records
--   sequentially. A shard iterator specifies this position using the
--   sequence number of a stream record in a shard.
[$sel:shardIterator:GetShardIteratorResponse'] :: GetShardIteratorResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetShardIteratorResponse'] :: GetShardIteratorResponse -> Int

-- | Create a value of <a>GetShardIteratorResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:shardIterator:GetShardIteratorResponse'</a>,
--   <a>getShardIteratorResponse_shardIterator</a> - The position in the
--   shard from which to start reading stream records sequentially. A shard
--   iterator specifies this position using the sequence number of a stream
--   record in a shard.
--   
--   <a>$sel:httpStatus:GetShardIteratorResponse'</a>,
--   <a>getShardIteratorResponse_httpStatus</a> - The response's http
--   status code.
newGetShardIteratorResponse :: Int -> GetShardIteratorResponse

-- | The position in the shard from which to start reading stream records
--   sequentially. A shard iterator specifies this position using the
--   sequence number of a stream record in a shard.
getShardIteratorResponse_shardIterator :: Lens' GetShardIteratorResponse (Maybe Text)

-- | The response's http status code.
getShardIteratorResponse_httpStatus :: Lens' GetShardIteratorResponse Int
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIterator
instance GHC.Show.Show Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIterator
instance GHC.Read.Read Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIterator
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIterator
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIteratorResponse
instance GHC.Show.Show Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIteratorResponse
instance GHC.Read.Read Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIteratorResponse
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIteratorResponse
instance Network.AWS.Types.AWSRequest Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIterator
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIteratorResponse
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIterator
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIterator
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIterator
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIterator
instance Network.AWS.Data.Path.ToPath Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIterator
instance Network.AWS.Data.Query.ToQuery Network.AWS.DynamoDBStreams.GetShardIterator.GetShardIterator


-- | Retrieves the stream records from a given shard.
--   
--   Specify a shard iterator using the <tt>ShardIterator</tt> parameter.
--   The shard iterator specifies the position in the shard from which you
--   want to start reading stream records sequentially. If there are no
--   stream records available in the portion of the shard that the iterator
--   points to, <tt>GetRecords</tt> returns an empty list. Note that it
--   might take multiple calls to get to a portion of the shard that
--   contains stream records.
--   
--   <tt>GetRecords</tt> can retrieve a maximum of 1 MB of data or 1000
--   stream records, whichever comes first.
module Network.AWS.DynamoDBStreams.GetRecords

-- | Represents the input of a <tt>GetRecords</tt> operation.
--   
--   <i>See:</i> <a>newGetRecords</a> smart constructor.
data GetRecords
GetRecords' :: Maybe Natural -> Text -> GetRecords

-- | The maximum number of records to return from the shard. The upper
--   limit is 1000.
[$sel:limit:GetRecords'] :: GetRecords -> Maybe Natural

-- | A shard iterator that was retrieved from a previous GetShardIterator
--   operation. This iterator can be used to access the stream records in
--   this shard.
[$sel:shardIterator:GetRecords'] :: GetRecords -> Text

-- | Create a value of <a>GetRecords</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:GetRecords'</a>, <a>getRecords_limit</a> - The maximum
--   number of records to return from the shard. The upper limit is 1000.
--   
--   <a>$sel:shardIterator:GetRecords'</a>, <a>getRecords_shardIterator</a>
--   - A shard iterator that was retrieved from a previous GetShardIterator
--   operation. This iterator can be used to access the stream records in
--   this shard.
newGetRecords :: Text -> GetRecords

-- | The maximum number of records to return from the shard. The upper
--   limit is 1000.
getRecords_limit :: Lens' GetRecords (Maybe Natural)

-- | A shard iterator that was retrieved from a previous GetShardIterator
--   operation. This iterator can be used to access the stream records in
--   this shard.
getRecords_shardIterator :: Lens' GetRecords Text

-- | Represents the output of a <tt>GetRecords</tt> operation.
--   
--   <i>See:</i> <a>newGetRecordsResponse</a> smart constructor.
data GetRecordsResponse
GetRecordsResponse' :: Maybe [Record] -> Maybe Text -> Int -> GetRecordsResponse

-- | The stream records from the shard, which were retrieved using the
--   shard iterator.
[$sel:records:GetRecordsResponse'] :: GetRecordsResponse -> Maybe [Record]

-- | The next position in the shard from which to start sequentially
--   reading stream records. If set to <tt>null</tt>, the shard has been
--   closed and the requested iterator will not return any more data.
[$sel:nextShardIterator:GetRecordsResponse'] :: GetRecordsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetRecordsResponse'] :: GetRecordsResponse -> Int

-- | Create a value of <a>GetRecordsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:records:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_records</a> - The stream records from the shard,
--   which were retrieved using the shard iterator.
--   
--   <a>$sel:nextShardIterator:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_nextShardIterator</a> - The next position in the
--   shard from which to start sequentially reading stream records. If set
--   to <tt>null</tt>, the shard has been closed and the requested iterator
--   will not return any more data.
--   
--   <a>$sel:httpStatus:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_httpStatus</a> - The response's http status
--   code.
newGetRecordsResponse :: Int -> GetRecordsResponse

-- | The stream records from the shard, which were retrieved using the
--   shard iterator.
getRecordsResponse_records :: Lens' GetRecordsResponse (Maybe [Record])

-- | The next position in the shard from which to start sequentially
--   reading stream records. If set to <tt>null</tt>, the shard has been
--   closed and the requested iterator will not return any more data.
getRecordsResponse_nextShardIterator :: Lens' GetRecordsResponse (Maybe Text)

-- | The response's http status code.
getRecordsResponse_httpStatus :: Lens' GetRecordsResponse Int
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.GetRecords.GetRecords
instance GHC.Show.Show Network.AWS.DynamoDBStreams.GetRecords.GetRecords
instance GHC.Read.Read Network.AWS.DynamoDBStreams.GetRecords.GetRecords
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.GetRecords.GetRecords
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.GetRecords.GetRecordsResponse
instance GHC.Show.Show Network.AWS.DynamoDBStreams.GetRecords.GetRecordsResponse
instance GHC.Read.Read Network.AWS.DynamoDBStreams.GetRecords.GetRecordsResponse
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.GetRecords.GetRecordsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.DynamoDBStreams.GetRecords.GetRecords
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.GetRecords.GetRecordsResponse
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.GetRecords.GetRecords
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.GetRecords.GetRecords
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.DynamoDBStreams.GetRecords.GetRecords
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.DynamoDBStreams.GetRecords.GetRecords
instance Network.AWS.Data.Path.ToPath Network.AWS.DynamoDBStreams.GetRecords.GetRecords
instance Network.AWS.Data.Query.ToQuery Network.AWS.DynamoDBStreams.GetRecords.GetRecords


-- | Returns information about a stream, including the current status of
--   the stream, its Amazon Resource Name (ARN), the composition of its
--   shards, and its corresponding DynamoDB table.
--   
--   You can call <tt>DescribeStream</tt> at a maximum rate of 10 times per
--   second.
--   
--   Each shard in the stream has a <tt>SequenceNumberRange</tt> associated
--   with it. If the <tt>SequenceNumberRange</tt> has a
--   <tt>StartingSequenceNumber</tt> but no <tt>EndingSequenceNumber</tt>,
--   then the shard is still open (able to receive more stream records). If
--   both <tt>StartingSequenceNumber</tt> and <tt>EndingSequenceNumber</tt>
--   are present, then that shard is closed and can no longer receive more
--   data.
module Network.AWS.DynamoDBStreams.DescribeStream

-- | Represents the input of a <tt>DescribeStream</tt> operation.
--   
--   <i>See:</i> <a>newDescribeStream</a> smart constructor.
data DescribeStream
DescribeStream' :: Maybe Text -> Maybe Natural -> Text -> DescribeStream

-- | The shard ID of the first item that this operation will evaluate. Use
--   the value that was returned for <tt>LastEvaluatedShardId</tt> in the
--   previous operation.
[$sel:exclusiveStartShardId:DescribeStream'] :: DescribeStream -> Maybe Text

-- | The maximum number of shard objects to return. The upper limit is 100.
[$sel:limit:DescribeStream'] :: DescribeStream -> Maybe Natural

-- | The Amazon Resource Name (ARN) for the stream.
[$sel:streamArn:DescribeStream'] :: DescribeStream -> Text

-- | Create a value of <a>DescribeStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exclusiveStartShardId:DescribeStream'</a>,
--   <a>describeStream_exclusiveStartShardId</a> - The shard ID of the
--   first item that this operation will evaluate. Use the value that was
--   returned for <tt>LastEvaluatedShardId</tt> in the previous operation.
--   
--   <a>$sel:limit:DescribeStream'</a>, <a>describeStream_limit</a> - The
--   maximum number of shard objects to return. The upper limit is 100.
--   
--   <a>$sel:streamArn:DescribeStream'</a>, <a>describeStream_streamArn</a>
--   - The Amazon Resource Name (ARN) for the stream.
newDescribeStream :: Text -> DescribeStream

-- | The shard ID of the first item that this operation will evaluate. Use
--   the value that was returned for <tt>LastEvaluatedShardId</tt> in the
--   previous operation.
describeStream_exclusiveStartShardId :: Lens' DescribeStream (Maybe Text)

-- | The maximum number of shard objects to return. The upper limit is 100.
describeStream_limit :: Lens' DescribeStream (Maybe Natural)

-- | The Amazon Resource Name (ARN) for the stream.
describeStream_streamArn :: Lens' DescribeStream Text

-- | Represents the output of a <tt>DescribeStream</tt> operation.
--   
--   <i>See:</i> <a>newDescribeStreamResponse</a> smart constructor.
data DescribeStreamResponse
DescribeStreamResponse' :: Maybe StreamDescription -> Int -> DescribeStreamResponse

-- | A complete description of the stream, including its creation date and
--   time, the DynamoDB table associated with the stream, the shard IDs
--   within the stream, and the beginning and ending sequence numbers of
--   stream records within the shards.
[$sel:streamDescription:DescribeStreamResponse'] :: DescribeStreamResponse -> Maybe StreamDescription

-- | The response's http status code.
[$sel:httpStatus:DescribeStreamResponse'] :: DescribeStreamResponse -> Int

-- | Create a value of <a>DescribeStreamResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamDescription:DescribeStreamResponse'</a>,
--   <a>describeStreamResponse_streamDescription</a> - A complete
--   description of the stream, including its creation date and time, the
--   DynamoDB table associated with the stream, the shard IDs within the
--   stream, and the beginning and ending sequence numbers of stream
--   records within the shards.
--   
--   <a>$sel:httpStatus:DescribeStreamResponse'</a>,
--   <a>describeStreamResponse_httpStatus</a> - The response's http status
--   code.
newDescribeStreamResponse :: Int -> DescribeStreamResponse

-- | A complete description of the stream, including its creation date and
--   time, the DynamoDB table associated with the stream, the shard IDs
--   within the stream, and the beginning and ending sequence numbers of
--   stream records within the shards.
describeStreamResponse_streamDescription :: Lens' DescribeStreamResponse (Maybe StreamDescription)

-- | The response's http status code.
describeStreamResponse_httpStatus :: Lens' DescribeStreamResponse Int
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.DescribeStream.DescribeStream
instance GHC.Show.Show Network.AWS.DynamoDBStreams.DescribeStream.DescribeStream
instance GHC.Read.Read Network.AWS.DynamoDBStreams.DescribeStream.DescribeStream
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.DescribeStream.DescribeStream
instance GHC.Generics.Generic Network.AWS.DynamoDBStreams.DescribeStream.DescribeStreamResponse
instance GHC.Show.Show Network.AWS.DynamoDBStreams.DescribeStream.DescribeStreamResponse
instance GHC.Read.Read Network.AWS.DynamoDBStreams.DescribeStream.DescribeStreamResponse
instance GHC.Classes.Eq Network.AWS.DynamoDBStreams.DescribeStream.DescribeStreamResponse
instance Network.AWS.Types.AWSRequest Network.AWS.DynamoDBStreams.DescribeStream.DescribeStream
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.DescribeStream.DescribeStreamResponse
instance Data.Hashable.Class.Hashable Network.AWS.DynamoDBStreams.DescribeStream.DescribeStream
instance Control.DeepSeq.NFData Network.AWS.DynamoDBStreams.DescribeStream.DescribeStream
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.DynamoDBStreams.DescribeStream.DescribeStream
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.DynamoDBStreams.DescribeStream.DescribeStream
instance Network.AWS.Data.Path.ToPath Network.AWS.DynamoDBStreams.DescribeStream.DescribeStream
instance Network.AWS.Data.Query.ToQuery Network.AWS.DynamoDBStreams.DescribeStream.DescribeStream


module Network.AWS.DynamoDBStreams.Lens

-- | The sequence number of a stream record in the shard from which to
--   start reading.
getShardIterator_sequenceNumber :: Lens' GetShardIterator (Maybe Text)

-- | The Amazon Resource Name (ARN) for the stream.
getShardIterator_streamArn :: Lens' GetShardIterator Text

-- | The identifier of the shard. The iterator will be returned for this
--   shard ID.
getShardIterator_shardId :: Lens' GetShardIterator Text

-- | Determines how the shard iterator is used to start reading stream
--   records from the shard:
--   
--   <ul>
--   <li><tt>AT_SEQUENCE_NUMBER</tt> - Start reading exactly from the
--   position denoted by a specific sequence number.</li>
--   <li><tt>AFTER_SEQUENCE_NUMBER</tt> - Start reading right after the
--   position denoted by a specific sequence number.</li>
--   <li><tt>TRIM_HORIZON</tt> - Start reading at the last (untrimmed)
--   stream record, which is the oldest record in the shard. In DynamoDB
--   Streams, there is a 24 hour limit on data retention. Stream records
--   whose age exceeds this limit are subject to removal (trimming) from
--   the stream.</li>
--   <li><tt>LATEST</tt> - Start reading just after the most recent stream
--   record in the shard, so that you always read the most recent data in
--   the shard.</li>
--   </ul>
getShardIterator_shardIteratorType :: Lens' GetShardIterator ShardIteratorType

-- | The position in the shard from which to start reading stream records
--   sequentially. A shard iterator specifies this position using the
--   sequence number of a stream record in a shard.
getShardIteratorResponse_shardIterator :: Lens' GetShardIteratorResponse (Maybe Text)

-- | The response's http status code.
getShardIteratorResponse_httpStatus :: Lens' GetShardIteratorResponse Int

-- | The maximum number of records to return from the shard. The upper
--   limit is 1000.
getRecords_limit :: Lens' GetRecords (Maybe Natural)

-- | A shard iterator that was retrieved from a previous GetShardIterator
--   operation. This iterator can be used to access the stream records in
--   this shard.
getRecords_shardIterator :: Lens' GetRecords Text

-- | The stream records from the shard, which were retrieved using the
--   shard iterator.
getRecordsResponse_records :: Lens' GetRecordsResponse (Maybe [Record])

-- | The next position in the shard from which to start sequentially
--   reading stream records. If set to <tt>null</tt>, the shard has been
--   closed and the requested iterator will not return any more data.
getRecordsResponse_nextShardIterator :: Lens' GetRecordsResponse (Maybe Text)

-- | The response's http status code.
getRecordsResponse_httpStatus :: Lens' GetRecordsResponse Int

-- | The ARN (Amazon Resource Name) of the first item that this operation
--   will evaluate. Use the value that was returned for
--   <tt>LastEvaluatedStreamArn</tt> in the previous operation.
listStreams_exclusiveStartStreamArn :: Lens' ListStreams (Maybe Text)

-- | The maximum number of streams to return. The upper limit is 100.
listStreams_limit :: Lens' ListStreams (Maybe Natural)

-- | If this parameter is provided, then only the streams associated with
--   this table name are returned.
listStreams_tableName :: Lens' ListStreams (Maybe Text)

-- | The stream ARN of the item where the operation stopped, inclusive of
--   the previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedStreamArn</tt> is empty, then the "last page" of
--   results has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedStreamArn</tt> is not empty, it does not
--   necessarily mean that there is more data in the result set. The only
--   way to know when you have reached the end of the result set is when
--   <tt>LastEvaluatedStreamArn</tt> is empty.
listStreamsResponse_lastEvaluatedStreamArn :: Lens' ListStreamsResponse (Maybe Text)

-- | A list of stream descriptors associated with the current account and
--   endpoint.
listStreamsResponse_streams :: Lens' ListStreamsResponse (Maybe [Stream])

-- | The response's http status code.
listStreamsResponse_httpStatus :: Lens' ListStreamsResponse Int

-- | The shard ID of the first item that this operation will evaluate. Use
--   the value that was returned for <tt>LastEvaluatedShardId</tt> in the
--   previous operation.
describeStream_exclusiveStartShardId :: Lens' DescribeStream (Maybe Text)

-- | The maximum number of shard objects to return. The upper limit is 100.
describeStream_limit :: Lens' DescribeStream (Maybe Natural)

-- | The Amazon Resource Name (ARN) for the stream.
describeStream_streamArn :: Lens' DescribeStream Text

-- | A complete description of the stream, including its creation date and
--   time, the DynamoDB table associated with the stream, the shard IDs
--   within the stream, and the beginning and ending sequence numbers of
--   stream records within the shards.
describeStreamResponse_streamDescription :: Lens' DescribeStreamResponse (Maybe StreamDescription)

-- | The response's http status code.
describeStreamResponse_httpStatus :: Lens' DescribeStreamResponse Int

-- | An attribute of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
attributeValue_l :: Lens' AttributeValue (Maybe [AttributeValue])

-- | An attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
attributeValue_ns :: Lens' AttributeValue (Maybe [Text])

-- | An attribute of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
attributeValue_m :: Lens' AttributeValue (Maybe (HashMap Text AttributeValue))

-- | An attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
attributeValue_null :: Lens' AttributeValue (Maybe Bool)

-- | An attribute of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
attributeValue_n :: Lens' AttributeValue (Maybe Text)

-- | An attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
attributeValue_bs :: Lens' AttributeValue (Maybe [ByteString])

-- | An attribute of type Binary. For example:
--   
--   <tt>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</tt>-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
attributeValue_b :: Lens' AttributeValue (Maybe ByteString)

-- | An attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
attributeValue_ss :: Lens' AttributeValue (Maybe [Text])

-- | An attribute of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
attributeValue_s :: Lens' AttributeValue (Maybe Text)

-- | An attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
attributeValue_bool :: Lens' AttributeValue (Maybe Bool)

-- | A unique identifier for the entity that made the call. For Time To
--   Live, the principalId is "dynamodb.amazonaws.com".
identity_principalId :: Lens' Identity (Maybe Text)

-- | The type of the identity. For Time To Live, the type is "Service".
identity_type :: Lens' Identity (Maybe Text)

-- | The name of a key attribute.
keySchemaElement_attributeName :: Lens' KeySchemaElement Text

-- | The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
keySchemaElement_keyType :: Lens' KeySchemaElement KeyType

-- | Items that are deleted by the Time to Live process after expiration
--   have the following fields:
--   
--   <ul>
--   <li>Records[].userIdentity.type"Service"</li>
--   <li>Records[].userIdentity.principalId"dynamodb.amazonaws.com"</li>
--   </ul>
record_userIdentity :: Lens' Record (Maybe Identity)

-- | The version number of the stream record format. This number is updated
--   whenever the structure of <tt>Record</tt> is modified.
--   
--   Client applications must not assume that <tt>eventVersion</tt> will
--   remain at a particular value, as this number is subject to change at
--   any time. In general, <tt>eventVersion</tt> will only increase as the
--   low-level DynamoDB Streams API evolves.
record_eventVersion :: Lens' Record (Maybe Text)

-- | The main body of the stream record, containing all of the
--   DynamoDB-specific fields.
record_dynamodb :: Lens' Record (Maybe StreamRecord)

-- | The region in which the <tt>GetRecords</tt> request was received.
record_awsRegion :: Lens' Record (Maybe Text)

-- | The type of data modification that was performed on the DynamoDB
--   table:
--   
--   <ul>
--   <li><tt>INSERT</tt> - a new item was added to the table.</li>
--   <li><tt>MODIFY</tt> - one or more of an existing item's attributes
--   were modified.</li>
--   <li><tt>REMOVE</tt> - the item was deleted from the table</li>
--   </ul>
record_eventName :: Lens' Record (Maybe OperationType)

-- | The AWS service from which the stream record originated. For DynamoDB
--   Streams, this is <tt>aws:dynamodb</tt>.
record_eventSource :: Lens' Record (Maybe Text)

-- | A globally unique identifier for the event that was recorded in this
--   stream record.
record_eventID :: Lens' Record (Maybe Text)

-- | The first sequence number for the stream records contained within a
--   shard. String contains numeric characters only.
sequenceNumberRange_startingSequenceNumber :: Lens' SequenceNumberRange (Maybe Text)

-- | The last sequence number for the stream records contained within a
--   shard. String contains numeric characters only.
sequenceNumberRange_endingSequenceNumber :: Lens' SequenceNumberRange (Maybe Text)

-- | The shard ID of the current shard's parent.
shard_parentShardId :: Lens' Shard (Maybe Text)

-- | The range of possible sequence numbers for the shard.
shard_sequenceNumberRange :: Lens' Shard (Maybe SequenceNumberRange)

-- | The system-generated identifier for this shard.
shard_shardId :: Lens' Shard (Maybe Text)

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
stream_streamLabel :: Lens' Stream (Maybe Text)

-- | The Amazon Resource Name (ARN) for the stream.
stream_streamArn :: Lens' Stream (Maybe Text)

-- | The DynamoDB table with which the stream is associated.
stream_tableName :: Lens' Stream (Maybe Text)

-- | The shard ID of the item where the operation stopped, inclusive of the
--   previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedShardId</tt> is empty, then the "last page" of
--   results has been processed and there is currently no more data to be
--   retrieved.
--   
--   If <tt>LastEvaluatedShardId</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedShardId</tt> is empty.
streamDescription_lastEvaluatedShardId :: Lens' StreamDescription (Maybe Text)

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
streamDescription_streamLabel :: Lens' StreamDescription (Maybe Text)

-- | Indicates the current status of the stream:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Streams is currently being enabled on the
--   DynamoDB table.</li>
--   <li><tt>ENABLED</tt> - the stream is enabled.</li>
--   <li><tt>DISABLING</tt> - Streams is currently being disabled on the
--   DynamoDB table.</li>
--   <li><tt>DISABLED</tt> - the stream is disabled.</li>
--   </ul>
streamDescription_streamStatus :: Lens' StreamDescription (Maybe StreamStatus)

-- | The key attribute(s) of the stream's DynamoDB table.
streamDescription_keySchema :: Lens' StreamDescription (Maybe (NonEmpty KeySchemaElement))

-- | Indicates the format of the records within this stream:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of items that were
--   modified in the DynamoDB table.</li>
--   <li><tt>NEW_IMAGE</tt> - entire items from the table, as they appeared
--   after they were modified.</li>
--   <li><tt>OLD_IMAGE</tt> - entire items from the table, as they appeared
--   before they were modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old images of
--   the items from the table.</li>
--   </ul>
streamDescription_streamViewType :: Lens' StreamDescription (Maybe StreamViewType)

-- | The Amazon Resource Name (ARN) for the stream.
streamDescription_streamArn :: Lens' StreamDescription (Maybe Text)

-- | The shards that comprise the stream.
streamDescription_shards :: Lens' StreamDescription (Maybe [Shard])

-- | The DynamoDB table with which the stream is associated.
streamDescription_tableName :: Lens' StreamDescription (Maybe Text)

-- | The date and time when the request to create this stream was issued.
streamDescription_creationRequestDateTime :: Lens' StreamDescription (Maybe UTCTime)

-- | The size of the stream record, in bytes.
streamRecord_sizeBytes :: Lens' StreamRecord (Maybe Natural)

-- | The sequence number of the stream record.
streamRecord_sequenceNumber :: Lens' StreamRecord (Maybe Text)

-- | The approximate date and time when the stream record was created, in
--   <a>UNIX epoch time</a> format.
streamRecord_approximateCreationDateTime :: Lens' StreamRecord (Maybe UTCTime)

-- | The type of data from the modified DynamoDB item that was captured in
--   this stream record:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of the modified
--   item.</li>
--   <li><tt>NEW_IMAGE</tt> - the entire item, as it appeared after it was
--   modified.</li>
--   <li><tt>OLD_IMAGE</tt> - the entire item, as it appeared before it was
--   modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old item images
--   of the item.</li>
--   </ul>
streamRecord_streamViewType :: Lens' StreamRecord (Maybe StreamViewType)

-- | The primary key attribute(s) for the DynamoDB item that was modified.
streamRecord_keys :: Lens' StreamRecord (Maybe (HashMap Text AttributeValue))

-- | The item in the DynamoDB table as it appeared before it was modified.
streamRecord_oldImage :: Lens' StreamRecord (Maybe (HashMap Text AttributeValue))

-- | The item in the DynamoDB table as it appeared after it was modified.
streamRecord_newImage :: Lens' StreamRecord (Maybe (HashMap Text AttributeValue))


module Network.AWS.DynamoDBStreams.Waiters


-- | Derived from API version <tt>2012-08-10</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon DynamoDB
--   
--   Amazon DynamoDB Streams provides API actions for accessing streams and
--   processing stream records. To learn more about application development
--   with Streams, see <a>Capturing Table Activity with DynamoDB
--   Streams</a> in the Amazon DynamoDB Developer Guide.
module Network.AWS.DynamoDBStreams

-- | API version <tt>2012-08-10</tt> of the Amazon DynamoDB Streams SDK
--   configuration.
defaultService :: Service

-- | The shard iterator has expired and can no longer be used to retrieve
--   stream records. A shard iterator expires 15 minutes after it is
--   retrieved using the <tt>GetShardIterator</tt> action.
_ExpiredIteratorException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An error occurred on the server side.
_InternalServerError :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation attempted to read past the oldest stream record in a
--   shard.
--   
--   In DynamoDB Streams, there is a 24 hour limit on data retention.
--   Stream records whose age exceeds this limit are subject to removal
--   (trimming) from the stream. You might receive a
--   TrimmedDataAccessException if:
--   
--   <ul>
--   <li>You request a shard iterator with a sequence number older than the
--   trim point (24 hours).</li>
--   <li>You obtain a shard iterator, but before you use the iterator in a
--   <tt>GetRecords</tt> request, a stream record in the shard exceeds the
--   24 hour period and is trimmed. This causes the iterator to access a
--   record that no longer exists.</li>
--   </ul>
_TrimmedDataAccessException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation tried to access a nonexistent table or index. The
--   resource might not be specified correctly, or its status might not be
--   <tt>ACTIVE</tt>.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is no limit to the number of daily on-demand backups that can be
--   taken.
--   
--   Up to 50 simultaneous table operations are allowed per account. These
--   operations include <tt>CreateTable</tt>, <tt>UpdateTable</tt>,
--   <tt>DeleteTable</tt>,<tt>UpdateTimeToLive</tt>,
--   <tt>RestoreTableFromBackup</tt>, and
--   <tt>RestoreTableToPointInTime</tt>.
--   
--   The only exception is when you are creating a table with one or more
--   secondary indexes. You can have up to 25 such requests running at a
--   time; however, if the table or index specifications are complex,
--   DynamoDB might temporarily reduce the number of concurrent operations.
--   
--   There is a soft account quota of 256 tables.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Represents the input of a <tt>GetShardIterator</tt> operation.
--   
--   <i>See:</i> <a>newGetShardIterator</a> smart constructor.
data GetShardIterator
GetShardIterator' :: Maybe Text -> Text -> Text -> ShardIteratorType -> GetShardIterator

-- | Create a value of <a>GetShardIterator</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sequenceNumber:GetShardIterator'</a>,
--   <a>getShardIterator_sequenceNumber</a> - The sequence number of a
--   stream record in the shard from which to start reading.
--   
--   <a>$sel:streamArn:GetShardIterator'</a>,
--   <a>getShardIterator_streamArn</a> - The Amazon Resource Name (ARN) for
--   the stream.
--   
--   <a>$sel:shardId:GetShardIterator'</a>, <a>getShardIterator_shardId</a>
--   - The identifier of the shard. The iterator will be returned for this
--   shard ID.
--   
--   <a>$sel:shardIteratorType:GetShardIterator'</a>,
--   <a>getShardIterator_shardIteratorType</a> - Determines how the shard
--   iterator is used to start reading stream records from the shard:
--   
--   <ul>
--   <li><tt>AT_SEQUENCE_NUMBER</tt> - Start reading exactly from the
--   position denoted by a specific sequence number.</li>
--   <li><tt>AFTER_SEQUENCE_NUMBER</tt> - Start reading right after the
--   position denoted by a specific sequence number.</li>
--   <li><tt>TRIM_HORIZON</tt> - Start reading at the last (untrimmed)
--   stream record, which is the oldest record in the shard. In DynamoDB
--   Streams, there is a 24 hour limit on data retention. Stream records
--   whose age exceeds this limit are subject to removal (trimming) from
--   the stream.</li>
--   <li><tt>LATEST</tt> - Start reading just after the most recent stream
--   record in the shard, so that you always read the most recent data in
--   the shard.</li>
--   </ul>
newGetShardIterator :: Text -> Text -> ShardIteratorType -> GetShardIterator

-- | Represents the output of a <tt>GetShardIterator</tt> operation.
--   
--   <i>See:</i> <a>newGetShardIteratorResponse</a> smart constructor.
data GetShardIteratorResponse
GetShardIteratorResponse' :: Maybe Text -> Int -> GetShardIteratorResponse

-- | Create a value of <a>GetShardIteratorResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:shardIterator:GetShardIteratorResponse'</a>,
--   <a>getShardIteratorResponse_shardIterator</a> - The position in the
--   shard from which to start reading stream records sequentially. A shard
--   iterator specifies this position using the sequence number of a stream
--   record in a shard.
--   
--   <a>$sel:httpStatus:GetShardIteratorResponse'</a>,
--   <a>getShardIteratorResponse_httpStatus</a> - The response's http
--   status code.
newGetShardIteratorResponse :: Int -> GetShardIteratorResponse

-- | Represents the input of a <tt>GetRecords</tt> operation.
--   
--   <i>See:</i> <a>newGetRecords</a> smart constructor.
data GetRecords
GetRecords' :: Maybe Natural -> Text -> GetRecords

-- | Create a value of <a>GetRecords</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:limit:GetRecords'</a>, <a>getRecords_limit</a> - The maximum
--   number of records to return from the shard. The upper limit is 1000.
--   
--   <a>$sel:shardIterator:GetRecords'</a>, <a>getRecords_shardIterator</a>
--   - A shard iterator that was retrieved from a previous GetShardIterator
--   operation. This iterator can be used to access the stream records in
--   this shard.
newGetRecords :: Text -> GetRecords

-- | Represents the output of a <tt>GetRecords</tt> operation.
--   
--   <i>See:</i> <a>newGetRecordsResponse</a> smart constructor.
data GetRecordsResponse
GetRecordsResponse' :: Maybe [Record] -> Maybe Text -> Int -> GetRecordsResponse

-- | Create a value of <a>GetRecordsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:records:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_records</a> - The stream records from the shard,
--   which were retrieved using the shard iterator.
--   
--   <a>$sel:nextShardIterator:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_nextShardIterator</a> - The next position in the
--   shard from which to start sequentially reading stream records. If set
--   to <tt>null</tt>, the shard has been closed and the requested iterator
--   will not return any more data.
--   
--   <a>$sel:httpStatus:GetRecordsResponse'</a>,
--   <a>getRecordsResponse_httpStatus</a> - The response's http status
--   code.
newGetRecordsResponse :: Int -> GetRecordsResponse

-- | Represents the input of a <tt>ListStreams</tt> operation.
--   
--   <i>See:</i> <a>newListStreams</a> smart constructor.
data ListStreams
ListStreams' :: Maybe Text -> Maybe Natural -> Maybe Text -> ListStreams

-- | Create a value of <a>ListStreams</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exclusiveStartStreamArn:ListStreams'</a>,
--   <a>listStreams_exclusiveStartStreamArn</a> - The ARN (Amazon Resource
--   Name) of the first item that this operation will evaluate. Use the
--   value that was returned for <tt>LastEvaluatedStreamArn</tt> in the
--   previous operation.
--   
--   <a>$sel:limit:ListStreams'</a>, <a>listStreams_limit</a> - The maximum
--   number of streams to return. The upper limit is 100.
--   
--   <a>$sel:tableName:ListStreams'</a>, <a>listStreams_tableName</a> - If
--   this parameter is provided, then only the streams associated with this
--   table name are returned.
newListStreams :: ListStreams

-- | Represents the output of a <tt>ListStreams</tt> operation.
--   
--   <i>See:</i> <a>newListStreamsResponse</a> smart constructor.
data ListStreamsResponse
ListStreamsResponse' :: Maybe Text -> Maybe [Stream] -> Int -> ListStreamsResponse

-- | Create a value of <a>ListStreamsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedStreamArn:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_lastEvaluatedStreamArn</a> - The stream ARN of
--   the item where the operation stopped, inclusive of the previous result
--   set. Use this value to start a new operation, excluding this value in
--   the new request.
--   
--   If <tt>LastEvaluatedStreamArn</tt> is empty, then the "last page" of
--   results has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedStreamArn</tt> is not empty, it does not
--   necessarily mean that there is more data in the result set. The only
--   way to know when you have reached the end of the result set is when
--   <tt>LastEvaluatedStreamArn</tt> is empty.
--   
--   <a>$sel:streams:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_streams</a> - A list of stream descriptors
--   associated with the current account and endpoint.
--   
--   <a>$sel:httpStatus:ListStreamsResponse'</a>,
--   <a>listStreamsResponse_httpStatus</a> - The response's http status
--   code.
newListStreamsResponse :: Int -> ListStreamsResponse

-- | Represents the input of a <tt>DescribeStream</tt> operation.
--   
--   <i>See:</i> <a>newDescribeStream</a> smart constructor.
data DescribeStream
DescribeStream' :: Maybe Text -> Maybe Natural -> Text -> DescribeStream

-- | Create a value of <a>DescribeStream</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exclusiveStartShardId:DescribeStream'</a>,
--   <a>describeStream_exclusiveStartShardId</a> - The shard ID of the
--   first item that this operation will evaluate. Use the value that was
--   returned for <tt>LastEvaluatedShardId</tt> in the previous operation.
--   
--   <a>$sel:limit:DescribeStream'</a>, <a>describeStream_limit</a> - The
--   maximum number of shard objects to return. The upper limit is 100.
--   
--   <a>$sel:streamArn:DescribeStream'</a>, <a>describeStream_streamArn</a>
--   - The Amazon Resource Name (ARN) for the stream.
newDescribeStream :: Text -> DescribeStream

-- | Represents the output of a <tt>DescribeStream</tt> operation.
--   
--   <i>See:</i> <a>newDescribeStreamResponse</a> smart constructor.
data DescribeStreamResponse
DescribeStreamResponse' :: Maybe StreamDescription -> Int -> DescribeStreamResponse

-- | Create a value of <a>DescribeStreamResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamDescription:DescribeStreamResponse'</a>,
--   <a>describeStreamResponse_streamDescription</a> - A complete
--   description of the stream, including its creation date and time, the
--   DynamoDB table associated with the stream, the shard IDs within the
--   stream, and the beginning and ending sequence numbers of stream
--   records within the shards.
--   
--   <a>$sel:httpStatus:DescribeStreamResponse'</a>,
--   <a>describeStreamResponse_httpStatus</a> - The response's http status
--   code.
newDescribeStreamResponse :: Int -> DescribeStreamResponse
newtype KeyType
KeyType' :: Text -> KeyType
[fromKeyType] :: KeyType -> Text
pattern KeyType_HASH :: KeyType
pattern KeyType_RANGE :: KeyType
newtype OperationType
OperationType' :: Text -> OperationType
[fromOperationType] :: OperationType -> Text
pattern OperationType_INSERT :: OperationType
pattern OperationType_MODIFY :: OperationType
pattern OperationType_REMOVE :: OperationType
newtype ShardIteratorType
ShardIteratorType' :: Text -> ShardIteratorType
[fromShardIteratorType] :: ShardIteratorType -> Text
pattern ShardIteratorType_AFTER_SEQUENCE_NUMBER :: ShardIteratorType
pattern ShardIteratorType_AT_SEQUENCE_NUMBER :: ShardIteratorType
pattern ShardIteratorType_LATEST :: ShardIteratorType
pattern ShardIteratorType_TRIM_HORIZON :: ShardIteratorType
newtype StreamStatus
StreamStatus' :: Text -> StreamStatus
[fromStreamStatus] :: StreamStatus -> Text
pattern StreamStatus_DISABLED :: StreamStatus
pattern StreamStatus_DISABLING :: StreamStatus
pattern StreamStatus_ENABLED :: StreamStatus
pattern StreamStatus_ENABLING :: StreamStatus
newtype StreamViewType
StreamViewType' :: Text -> StreamViewType
[fromStreamViewType] :: StreamViewType -> Text
pattern StreamViewType_KEYS_ONLY :: StreamViewType
pattern StreamViewType_NEW_AND_OLD_IMAGES :: StreamViewType
pattern StreamViewType_NEW_IMAGE :: StreamViewType
pattern StreamViewType_OLD_IMAGE :: StreamViewType

-- | Represents the data for an attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newAttributeValue</a> smart constructor.
data AttributeValue
AttributeValue' :: Maybe [AttributeValue] -> Maybe [Text] -> Maybe (HashMap Text AttributeValue) -> Maybe Bool -> Maybe Text -> Maybe [Base64] -> Maybe Base64 -> Maybe [Text] -> Maybe Text -> Maybe Bool -> AttributeValue

-- | Create a value of <a>AttributeValue</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:l:AttributeValue'</a>, <a>attributeValue_l</a> - An attribute
--   of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
--   
--   <a>$sel:ns:AttributeValue'</a>, <a>attributeValue_ns</a> - An
--   attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
--   
--   <a>$sel:m:AttributeValue'</a>, <a>attributeValue_m</a> - An attribute
--   of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
--   
--   <a>$sel:null:AttributeValue'</a>, <a>attributeValue_null</a> - An
--   attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
--   
--   <a>$sel:n:AttributeValue'</a>, <a>attributeValue_n</a> - An attribute
--   of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
--   
--   <a>$sel:bs:AttributeValue'</a>, <a>attributeValue_bs</a> - An
--   attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
--   
--   <a>$sel:b:AttributeValue'</a>, <a>attributeValue_b</a> - An attribute
--   of type Binary. For example:
--   
--   <tt>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</tt>-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:ss:AttributeValue'</a>, <a>attributeValue_ss</a> - An
--   attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
--   
--   <a>$sel:s:AttributeValue'</a>, <a>attributeValue_s</a> - An attribute
--   of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
--   
--   <a>$sel:bool:AttributeValue'</a>, <a>attributeValue_bool</a> - An
--   attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
newAttributeValue :: AttributeValue

-- | Contains details about the type of identity that made the request.
--   
--   <i>See:</i> <a>newIdentity</a> smart constructor.
data Identity
Identity' :: Maybe Text -> Maybe Text -> Identity

-- | Create a value of <a>Identity</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:principalId:Identity'</a>, <a>identity_principalId</a> - A
--   unique identifier for the entity that made the call. For Time To Live,
--   the principalId is "dynamodb.amazonaws.com".
--   
--   <a>$sel:type':Identity'</a>, <a>identity_type</a> - The type of the
--   identity. For Time To Live, the type is "Service".
newIdentity :: Identity

-- | Represents <i>a single element</i> of a key schema. A key schema
--   specifies the attributes that make up the primary key of a table, or
--   the key attributes of an index.
--   
--   A <tt>KeySchemaElement</tt> represents exactly one attribute of the
--   primary key. For example, a simple primary key would be represented by
--   one <tt>KeySchemaElement</tt> (for the partition key). A composite
--   primary key would require one <tt>KeySchemaElement</tt> for the
--   partition key, and another <tt>KeySchemaElement</tt> for the sort key.
--   
--   A <tt>KeySchemaElement</tt> must be a scalar, top-level attribute (not
--   a nested attribute). The data type must be one of String, Number, or
--   Binary. The attribute cannot be nested within a List or a Map.
--   
--   <i>See:</i> <a>newKeySchemaElement</a> smart constructor.
data KeySchemaElement
KeySchemaElement' :: Text -> KeyType -> KeySchemaElement

-- | Create a value of <a>KeySchemaElement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeName:KeySchemaElement'</a>,
--   <a>keySchemaElement_attributeName</a> - The name of a key attribute.
--   
--   <a>$sel:keyType:KeySchemaElement'</a>, <a>keySchemaElement_keyType</a>
--   - The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
newKeySchemaElement :: Text -> KeyType -> KeySchemaElement

-- | A description of a unique event within a stream.
--   
--   <i>See:</i> <a>newRecord</a> smart constructor.
data Record
Record' :: Maybe Identity -> Maybe Text -> Maybe StreamRecord -> Maybe Text -> Maybe OperationType -> Maybe Text -> Maybe Text -> Record

-- | Create a value of <a>Record</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:userIdentity:Record'</a>, <a>record_userIdentity</a> - Items
--   that are deleted by the Time to Live process after expiration have the
--   following fields:
--   
--   <ul>
--   <li>Records[].userIdentity.type"Service"</li>
--   <li>Records[].userIdentity.principalId"dynamodb.amazonaws.com"</li>
--   </ul>
--   
--   <a>$sel:eventVersion:Record'</a>, <a>record_eventVersion</a> - The
--   version number of the stream record format. This number is updated
--   whenever the structure of <tt>Record</tt> is modified.
--   
--   Client applications must not assume that <tt>eventVersion</tt> will
--   remain at a particular value, as this number is subject to change at
--   any time. In general, <tt>eventVersion</tt> will only increase as the
--   low-level DynamoDB Streams API evolves.
--   
--   <a>$sel:dynamodb:Record'</a>, <a>record_dynamodb</a> - The main body
--   of the stream record, containing all of the DynamoDB-specific fields.
--   
--   <a>$sel:awsRegion:Record'</a>, <a>record_awsRegion</a> - The region in
--   which the <tt>GetRecords</tt> request was received.
--   
--   <a>$sel:eventName:Record'</a>, <a>record_eventName</a> - The type of
--   data modification that was performed on the DynamoDB table:
--   
--   <ul>
--   <li><tt>INSERT</tt> - a new item was added to the table.</li>
--   <li><tt>MODIFY</tt> - one or more of an existing item's attributes
--   were modified.</li>
--   <li><tt>REMOVE</tt> - the item was deleted from the table</li>
--   </ul>
--   
--   <a>$sel:eventSource:Record'</a>, <a>record_eventSource</a> - The AWS
--   service from which the stream record originated. For DynamoDB Streams,
--   this is <tt>aws:dynamodb</tt>.
--   
--   <a>$sel:eventID:Record'</a>, <a>record_eventID</a> - A globally unique
--   identifier for the event that was recorded in this stream record.
newRecord :: Record

-- | The beginning and ending sequence numbers for the stream records
--   contained within a shard.
--   
--   <i>See:</i> <a>newSequenceNumberRange</a> smart constructor.
data SequenceNumberRange
SequenceNumberRange' :: Maybe Text -> Maybe Text -> SequenceNumberRange

-- | Create a value of <a>SequenceNumberRange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:startingSequenceNumber:SequenceNumberRange'</a>,
--   <a>sequenceNumberRange_startingSequenceNumber</a> - The first sequence
--   number for the stream records contained within a shard. String
--   contains numeric characters only.
--   
--   <a>$sel:endingSequenceNumber:SequenceNumberRange'</a>,
--   <a>sequenceNumberRange_endingSequenceNumber</a> - The last sequence
--   number for the stream records contained within a shard. String
--   contains numeric characters only.
newSequenceNumberRange :: SequenceNumberRange

-- | A uniquely identified group of stream records within a stream.
--   
--   <i>See:</i> <a>newShard</a> smart constructor.
data Shard
Shard' :: Maybe Text -> Maybe SequenceNumberRange -> Maybe Text -> Shard

-- | Create a value of <a>Shard</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:parentShardId:Shard'</a>, <a>shard_parentShardId</a> - The
--   shard ID of the current shard's parent.
--   
--   <a>$sel:sequenceNumberRange:Shard'</a>,
--   <a>shard_sequenceNumberRange</a> - The range of possible sequence
--   numbers for the shard.
--   
--   <a>$sel:shardId:Shard'</a>, <a>shard_shardId</a> - The
--   system-generated identifier for this shard.
newShard :: Shard

-- | Represents all of the data describing a particular stream.
--   
--   <i>See:</i> <a>newStream</a> smart constructor.
data Stream
Stream' :: Maybe Text -> Maybe Text -> Maybe Text -> Stream

-- | Create a value of <a>Stream</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamLabel:Stream'</a>, <a>stream_streamLabel</a> - A
--   timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
--   
--   <a>$sel:streamArn:Stream'</a>, <a>stream_streamArn</a> - The Amazon
--   Resource Name (ARN) for the stream.
--   
--   <a>$sel:tableName:Stream'</a>, <a>stream_tableName</a> - The DynamoDB
--   table with which the stream is associated.
newStream :: Stream

-- | Represents all of the data describing a particular stream.
--   
--   <i>See:</i> <a>newStreamDescription</a> smart constructor.
data StreamDescription
StreamDescription' :: Maybe Text -> Maybe Text -> Maybe StreamStatus -> Maybe (NonEmpty KeySchemaElement) -> Maybe StreamViewType -> Maybe Text -> Maybe [Shard] -> Maybe Text -> Maybe POSIX -> StreamDescription

-- | Create a value of <a>StreamDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedShardId:StreamDescription'</a>,
--   <a>streamDescription_lastEvaluatedShardId</a> - The shard ID of the
--   item where the operation stopped, inclusive of the previous result
--   set. Use this value to start a new operation, excluding this value in
--   the new request.
--   
--   If <tt>LastEvaluatedShardId</tt> is empty, then the "last page" of
--   results has been processed and there is currently no more data to be
--   retrieved.
--   
--   If <tt>LastEvaluatedShardId</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedShardId</tt> is empty.
--   
--   <a>$sel:streamLabel:StreamDescription'</a>,
--   <a>streamDescription_streamLabel</a> - A timestamp, in ISO 8601
--   format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>the AWS customer ID.</li>
--   <li>the table name</li>
--   <li>the <tt>StreamLabel</tt></li>
--   </ul>
--   
--   <a>$sel:streamStatus:StreamDescription'</a>,
--   <a>streamDescription_streamStatus</a> - Indicates the current status
--   of the stream:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Streams is currently being enabled on the
--   DynamoDB table.</li>
--   <li><tt>ENABLED</tt> - the stream is enabled.</li>
--   <li><tt>DISABLING</tt> - Streams is currently being disabled on the
--   DynamoDB table.</li>
--   <li><tt>DISABLED</tt> - the stream is disabled.</li>
--   </ul>
--   
--   <a>$sel:keySchema:StreamDescription'</a>,
--   <a>streamDescription_keySchema</a> - The key attribute(s) of the
--   stream's DynamoDB table.
--   
--   <a>$sel:streamViewType:StreamDescription'</a>,
--   <a>streamDescription_streamViewType</a> - Indicates the format of the
--   records within this stream:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of items that were
--   modified in the DynamoDB table.</li>
--   <li><tt>NEW_IMAGE</tt> - entire items from the table, as they appeared
--   after they were modified.</li>
--   <li><tt>OLD_IMAGE</tt> - entire items from the table, as they appeared
--   before they were modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old images of
--   the items from the table.</li>
--   </ul>
--   
--   <a>$sel:streamArn:StreamDescription'</a>,
--   <a>streamDescription_streamArn</a> - The Amazon Resource Name (ARN)
--   for the stream.
--   
--   <a>$sel:shards:StreamDescription'</a>, <a>streamDescription_shards</a>
--   - The shards that comprise the stream.
--   
--   <a>$sel:tableName:StreamDescription'</a>,
--   <a>streamDescription_tableName</a> - The DynamoDB table with which the
--   stream is associated.
--   
--   <a>$sel:creationRequestDateTime:StreamDescription'</a>,
--   <a>streamDescription_creationRequestDateTime</a> - The date and time
--   when the request to create this stream was issued.
newStreamDescription :: StreamDescription

-- | A description of a single data modification that was performed on an
--   item in a DynamoDB table.
--   
--   <i>See:</i> <a>newStreamRecord</a> smart constructor.
data StreamRecord
StreamRecord' :: Maybe Natural -> Maybe Text -> Maybe POSIX -> Maybe StreamViewType -> Maybe (HashMap Text AttributeValue) -> Maybe (HashMap Text AttributeValue) -> Maybe (HashMap Text AttributeValue) -> StreamRecord

-- | Create a value of <a>StreamRecord</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sizeBytes:StreamRecord'</a>, <a>streamRecord_sizeBytes</a> -
--   The size of the stream record, in bytes.
--   
--   <a>$sel:sequenceNumber:StreamRecord'</a>,
--   <a>streamRecord_sequenceNumber</a> - The sequence number of the stream
--   record.
--   
--   <a>$sel:approximateCreationDateTime:StreamRecord'</a>,
--   <a>streamRecord_approximateCreationDateTime</a> - The approximate date
--   and time when the stream record was created, in <a>UNIX epoch time</a>
--   format.
--   
--   <a>$sel:streamViewType:StreamRecord'</a>,
--   <a>streamRecord_streamViewType</a> - The type of data from the
--   modified DynamoDB item that was captured in this stream record:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - only the key attributes of the modified
--   item.</li>
--   <li><tt>NEW_IMAGE</tt> - the entire item, as it appeared after it was
--   modified.</li>
--   <li><tt>OLD_IMAGE</tt> - the entire item, as it appeared before it was
--   modified.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - both the new and the old item images
--   of the item.</li>
--   </ul>
--   
--   <a>$sel:keys:StreamRecord'</a>, <a>streamRecord_keys</a> - The primary
--   key attribute(s) for the DynamoDB item that was modified.
--   
--   <a>$sel:oldImage:StreamRecord'</a>, <a>streamRecord_oldImage</a> - The
--   item in the DynamoDB table as it appeared before it was modified.
--   
--   <a>$sel:newImage':StreamRecord'</a>, <a>streamRecord_newImage</a> -
--   The item in the DynamoDB table as it appeared after it was modified.
newStreamRecord :: StreamRecord
