-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-rds-dataZSamazonka-rds-data
@version 2.0


module Network.AWS.RDSData.Types.ArrayValue

-- | Contains an array.
--   
--   <i>See:</i> <a>newArrayValue</a> smart constructor.
data ArrayValue
ArrayValue' :: Maybe [Integer] -> Maybe [Double] -> Maybe [Text] -> Maybe [ArrayValue] -> Maybe [Bool] -> ArrayValue

-- | An array of floating point numbers.
[$sel:longValues:ArrayValue'] :: ArrayValue -> Maybe [Integer]

-- | An array of integers.
[$sel:doubleValues:ArrayValue'] :: ArrayValue -> Maybe [Double]

-- | An array of strings.
[$sel:stringValues:ArrayValue'] :: ArrayValue -> Maybe [Text]

-- | An array of arrays.
[$sel:arrayValues:ArrayValue'] :: ArrayValue -> Maybe [ArrayValue]

-- | An array of Boolean values.
[$sel:booleanValues:ArrayValue'] :: ArrayValue -> Maybe [Bool]

-- | Create a value of <a>ArrayValue</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:longValues:ArrayValue'</a>, <a>arrayValue_longValues</a> - An
--   array of floating point numbers.
--   
--   <a>$sel:doubleValues:ArrayValue'</a>, <a>arrayValue_doubleValues</a> -
--   An array of integers.
--   
--   <a>$sel:stringValues:ArrayValue'</a>, <a>arrayValue_stringValues</a> -
--   An array of strings.
--   
--   <a>$sel:arrayValues:ArrayValue'</a>, <a>arrayValue_arrayValues</a> -
--   An array of arrays.
--   
--   <a>$sel:booleanValues:ArrayValue'</a>, <a>arrayValue_booleanValues</a>
--   - An array of Boolean values.
newArrayValue :: ArrayValue

-- | An array of floating point numbers.
arrayValue_longValues :: Lens' ArrayValue (Maybe [Integer])

-- | An array of integers.
arrayValue_doubleValues :: Lens' ArrayValue (Maybe [Double])

-- | An array of strings.
arrayValue_stringValues :: Lens' ArrayValue (Maybe [Text])

-- | An array of arrays.
arrayValue_arrayValues :: Lens' ArrayValue (Maybe [ArrayValue])

-- | An array of Boolean values.
arrayValue_booleanValues :: Lens' ArrayValue (Maybe [Bool])
instance GHC.Generics.Generic Network.AWS.RDSData.Types.ArrayValue.ArrayValue
instance GHC.Show.Show Network.AWS.RDSData.Types.ArrayValue.ArrayValue
instance GHC.Read.Read Network.AWS.RDSData.Types.ArrayValue.ArrayValue
instance GHC.Classes.Eq Network.AWS.RDSData.Types.ArrayValue.ArrayValue
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RDSData.Types.ArrayValue.ArrayValue
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.Types.ArrayValue.ArrayValue
instance Control.DeepSeq.NFData Network.AWS.RDSData.Types.ArrayValue.ArrayValue
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RDSData.Types.ArrayValue.ArrayValue


module Network.AWS.RDSData.Types.ColumnMetadata

-- | Contains the metadata for a column.
--   
--   <i>See:</i> <a>newColumnMetadata</a> smart constructor.
data ColumnMetadata
ColumnMetadata' :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe Text -> ColumnMetadata

-- | The database-specific data type of the column.
[$sel:typeName:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether the column is case-sensitive.
[$sel:isCaseSensitive:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | A value that indicates whether the column contains currency values.
[$sel:isCurrency:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | The scale value of a decimal number column.
[$sel:scale:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The precision value of a decimal number column.
[$sel:precision:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The name of the schema that owns the table that includes the column.
[$sel:schemaName:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether the column increments automatically.
[$sel:isAutoIncrement:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | The name of the column.
[$sel:name:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | The type of the column.
[$sel:arrayBaseColumnType:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The type of the column.
[$sel:type':ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | A value that indicates whether an integer column is signed.
[$sel:isSigned:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | The label for the column.
[$sel:label:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether the column is nullable.
[$sel:nullable:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The name of the table that includes the column.
[$sel:tableName:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | Create a value of <a>ColumnMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:typeName:ColumnMetadata'</a>, <a>columnMetadata_typeName</a> -
--   The database-specific data type of the column.
--   
--   <a>$sel:isCaseSensitive:ColumnMetadata'</a>,
--   <a>columnMetadata_isCaseSensitive</a> - A value that indicates whether
--   the column is case-sensitive.
--   
--   <a>$sel:isCurrency:ColumnMetadata'</a>,
--   <a>columnMetadata_isCurrency</a> - A value that indicates whether the
--   column contains currency values.
--   
--   <a>$sel:scale:ColumnMetadata'</a>, <a>columnMetadata_scale</a> - The
--   scale value of a decimal number column.
--   
--   <a>$sel:precision:ColumnMetadata'</a>, <a>columnMetadata_precision</a>
--   - The precision value of a decimal number column.
--   
--   <a>$sel:schemaName:ColumnMetadata'</a>,
--   <a>columnMetadata_schemaName</a> - The name of the schema that owns
--   the table that includes the column.
--   
--   <a>$sel:isAutoIncrement:ColumnMetadata'</a>,
--   <a>columnMetadata_isAutoIncrement</a> - A value that indicates whether
--   the column increments automatically.
--   
--   <a>$sel:name:ColumnMetadata'</a>, <a>columnMetadata_name</a> - The
--   name of the column.
--   
--   <a>$sel:arrayBaseColumnType:ColumnMetadata'</a>,
--   <a>columnMetadata_arrayBaseColumnType</a> - The type of the column.
--   
--   <a>$sel:type':ColumnMetadata'</a>, <a>columnMetadata_type</a> - The
--   type of the column.
--   
--   <a>$sel:isSigned:ColumnMetadata'</a>, <a>columnMetadata_isSigned</a> -
--   A value that indicates whether an integer column is signed.
--   
--   <a>$sel:label:ColumnMetadata'</a>, <a>columnMetadata_label</a> - The
--   label for the column.
--   
--   <a>$sel:nullable:ColumnMetadata'</a>, <a>columnMetadata_nullable</a> -
--   A value that indicates whether the column is nullable.
--   
--   <a>$sel:tableName:ColumnMetadata'</a>, <a>columnMetadata_tableName</a>
--   - The name of the table that includes the column.
newColumnMetadata :: ColumnMetadata

-- | The database-specific data type of the column.
columnMetadata_typeName :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column is case-sensitive.
columnMetadata_isCaseSensitive :: Lens' ColumnMetadata (Maybe Bool)

-- | A value that indicates whether the column contains currency values.
columnMetadata_isCurrency :: Lens' ColumnMetadata (Maybe Bool)

-- | The scale value of a decimal number column.
columnMetadata_scale :: Lens' ColumnMetadata (Maybe Int)

-- | The precision value of a decimal number column.
columnMetadata_precision :: Lens' ColumnMetadata (Maybe Int)

-- | The name of the schema that owns the table that includes the column.
columnMetadata_schemaName :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column increments automatically.
columnMetadata_isAutoIncrement :: Lens' ColumnMetadata (Maybe Bool)

-- | The name of the column.
columnMetadata_name :: Lens' ColumnMetadata (Maybe Text)

-- | The type of the column.
columnMetadata_arrayBaseColumnType :: Lens' ColumnMetadata (Maybe Int)

-- | The type of the column.
columnMetadata_type :: Lens' ColumnMetadata (Maybe Int)

-- | A value that indicates whether an integer column is signed.
columnMetadata_isSigned :: Lens' ColumnMetadata (Maybe Bool)

-- | The label for the column.
columnMetadata_label :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column is nullable.
columnMetadata_nullable :: Lens' ColumnMetadata (Maybe Int)

-- | The name of the table that includes the column.
columnMetadata_tableName :: Lens' ColumnMetadata (Maybe Text)
instance GHC.Generics.Generic Network.AWS.RDSData.Types.ColumnMetadata.ColumnMetadata
instance GHC.Show.Show Network.AWS.RDSData.Types.ColumnMetadata.ColumnMetadata
instance GHC.Read.Read Network.AWS.RDSData.Types.ColumnMetadata.ColumnMetadata
instance GHC.Classes.Eq Network.AWS.RDSData.Types.ColumnMetadata.ColumnMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RDSData.Types.ColumnMetadata.ColumnMetadata
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.Types.ColumnMetadata.ColumnMetadata
instance Control.DeepSeq.NFData Network.AWS.RDSData.Types.ColumnMetadata.ColumnMetadata


module Network.AWS.RDSData.Types.DecimalReturnType
newtype DecimalReturnType
DecimalReturnType' :: Text -> DecimalReturnType
[fromDecimalReturnType] :: DecimalReturnType -> Text
pattern DecimalReturnType_DOUBLE_OR_LONG :: DecimalReturnType
pattern DecimalReturnType_STRING :: DecimalReturnType
instance Network.AWS.Data.XML.ToXML Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Network.AWS.Data.XML.FromXML Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Network.AWS.Data.Query.ToQuery Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Network.AWS.Data.Headers.ToHeader Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Network.AWS.Data.Log.ToLog Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Network.AWS.Data.Text.ToText Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Network.AWS.Data.Text.FromText Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Control.DeepSeq.NFData Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance GHC.Generics.Generic Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance GHC.Classes.Ord Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance GHC.Classes.Eq Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance GHC.Read.Read Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType
instance GHC.Show.Show Network.AWS.RDSData.Types.DecimalReturnType.DecimalReturnType


module Network.AWS.RDSData.Types.Field

-- | Contains a value.
--   
--   <i>See:</i> <a>newField</a> smart constructor.
data Field
Field' :: Maybe Double -> Maybe Text -> Maybe Integer -> Maybe Bool -> Maybe ArrayValue -> Maybe Base64 -> Maybe Bool -> Field

-- | A value of double data type.
[$sel:doubleValue:Field'] :: Field -> Maybe Double

-- | A value of string data type.
[$sel:stringValue:Field'] :: Field -> Maybe Text

-- | A value of long data type.
[$sel:longValue:Field'] :: Field -> Maybe Integer

-- | A value of Boolean data type.
[$sel:booleanValue:Field'] :: Field -> Maybe Bool

-- | An array of values.
[$sel:arrayValue:Field'] :: Field -> Maybe ArrayValue

-- | A value of BLOB data type.
[$sel:blobValue:Field'] :: Field -> Maybe Base64

-- | A NULL value.
[$sel:isNull:Field'] :: Field -> Maybe Bool

-- | Create a value of <a>Field</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:doubleValue:Field'</a>, <a>field_doubleValue</a> - A value of
--   double data type.
--   
--   <a>$sel:stringValue:Field'</a>, <a>field_stringValue</a> - A value of
--   string data type.
--   
--   <a>$sel:longValue:Field'</a>, <a>field_longValue</a> - A value of long
--   data type.
--   
--   <a>$sel:booleanValue:Field'</a>, <a>field_booleanValue</a> - A value
--   of Boolean data type.
--   
--   <a>$sel:arrayValue:Field'</a>, <a>field_arrayValue</a> - An array of
--   values.
--   
--   <a>$sel:blobValue:Field'</a>, <a>field_blobValue</a> - A value of BLOB
--   data type.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
--   
--   <a>$sel:isNull:Field'</a>, <a>field_isNull</a> - A NULL value.
newField :: Field

-- | A value of double data type.
field_doubleValue :: Lens' Field (Maybe Double)

-- | A value of string data type.
field_stringValue :: Lens' Field (Maybe Text)

-- | A value of long data type.
field_longValue :: Lens' Field (Maybe Integer)

-- | A value of Boolean data type.
field_booleanValue :: Lens' Field (Maybe Bool)

-- | An array of values.
field_arrayValue :: Lens' Field (Maybe ArrayValue)

-- | A value of BLOB data type.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
field_blobValue :: Lens' Field (Maybe ByteString)

-- | A NULL value.
field_isNull :: Lens' Field (Maybe Bool)
instance GHC.Generics.Generic Network.AWS.RDSData.Types.Field.Field
instance GHC.Show.Show Network.AWS.RDSData.Types.Field.Field
instance GHC.Read.Read Network.AWS.RDSData.Types.Field.Field
instance GHC.Classes.Eq Network.AWS.RDSData.Types.Field.Field
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RDSData.Types.Field.Field
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.Types.Field.Field
instance Control.DeepSeq.NFData Network.AWS.RDSData.Types.Field.Field
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RDSData.Types.Field.Field


module Network.AWS.RDSData.Types.ResultSetOptions

-- | Options that control how the result set is returned.
--   
--   <i>See:</i> <a>newResultSetOptions</a> smart constructor.
data ResultSetOptions
ResultSetOptions' :: Maybe DecimalReturnType -> ResultSetOptions

-- | A value that indicates how a field of <tt>DECIMAL</tt> type is
--   represented in the response. The value of <tt>STRING</tt>, the
--   default, specifies that it is converted to a String value. The value
--   of <tt>DOUBLE_OR_LONG</tt> specifies that it is converted to a Long
--   value if its scale is 0, or to a Double value otherwise.
--   
--   Conversion to Double or Long can result in roundoff errors due to
--   precision loss. We recommend converting to String, especially when
--   working with currency values.
[$sel:decimalReturnType:ResultSetOptions'] :: ResultSetOptions -> Maybe DecimalReturnType

-- | Create a value of <a>ResultSetOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:decimalReturnType:ResultSetOptions'</a>,
--   <a>resultSetOptions_decimalReturnType</a> - A value that indicates how
--   a field of <tt>DECIMAL</tt> type is represented in the response. The
--   value of <tt>STRING</tt>, the default, specifies that it is converted
--   to a String value. The value of <tt>DOUBLE_OR_LONG</tt> specifies that
--   it is converted to a Long value if its scale is 0, or to a Double
--   value otherwise.
--   
--   Conversion to Double or Long can result in roundoff errors due to
--   precision loss. We recommend converting to String, especially when
--   working with currency values.
newResultSetOptions :: ResultSetOptions

-- | A value that indicates how a field of <tt>DECIMAL</tt> type is
--   represented in the response. The value of <tt>STRING</tt>, the
--   default, specifies that it is converted to a String value. The value
--   of <tt>DOUBLE_OR_LONG</tt> specifies that it is converted to a Long
--   value if its scale is 0, or to a Double value otherwise.
--   
--   Conversion to Double or Long can result in roundoff errors due to
--   precision loss. We recommend converting to String, especially when
--   working with currency values.
resultSetOptions_decimalReturnType :: Lens' ResultSetOptions (Maybe DecimalReturnType)
instance GHC.Generics.Generic Network.AWS.RDSData.Types.ResultSetOptions.ResultSetOptions
instance GHC.Show.Show Network.AWS.RDSData.Types.ResultSetOptions.ResultSetOptions
instance GHC.Read.Read Network.AWS.RDSData.Types.ResultSetOptions.ResultSetOptions
instance GHC.Classes.Eq Network.AWS.RDSData.Types.ResultSetOptions.ResultSetOptions
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.Types.ResultSetOptions.ResultSetOptions
instance Control.DeepSeq.NFData Network.AWS.RDSData.Types.ResultSetOptions.ResultSetOptions
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RDSData.Types.ResultSetOptions.ResultSetOptions


module Network.AWS.RDSData.Types.TypeHint
newtype TypeHint
TypeHint' :: Text -> TypeHint
[fromTypeHint] :: TypeHint -> Text
pattern TypeHint_DATE :: TypeHint
pattern TypeHint_DECIMAL :: TypeHint
pattern TypeHint_JSON :: TypeHint
pattern TypeHint_TIME :: TypeHint
pattern TypeHint_TIMESTAMP :: TypeHint
pattern TypeHint_UUID :: TypeHint
instance Network.AWS.Data.XML.ToXML Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Network.AWS.Data.XML.FromXML Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Data.Aeson.Types.ToJSON.ToJSONKey Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Data.Aeson.Types.FromJSON.FromJSONKey Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Network.AWS.Data.Query.ToQuery Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Network.AWS.Data.Headers.ToHeader Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Network.AWS.Data.Log.ToLog Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Network.AWS.Data.ByteString.ToByteString Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Network.AWS.Data.Text.ToText Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Network.AWS.Data.Text.FromText Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Control.DeepSeq.NFData Network.AWS.RDSData.Types.TypeHint.TypeHint
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.Types.TypeHint.TypeHint
instance GHC.Generics.Generic Network.AWS.RDSData.Types.TypeHint.TypeHint
instance GHC.Classes.Ord Network.AWS.RDSData.Types.TypeHint.TypeHint
instance GHC.Classes.Eq Network.AWS.RDSData.Types.TypeHint.TypeHint
instance GHC.Read.Read Network.AWS.RDSData.Types.TypeHint.TypeHint
instance GHC.Show.Show Network.AWS.RDSData.Types.TypeHint.TypeHint


module Network.AWS.RDSData.Types.SqlParameter

-- | A parameter used in a SQL statement.
--   
--   <i>See:</i> <a>newSqlParameter</a> smart constructor.
data SqlParameter
SqlParameter' :: Maybe Field -> Maybe Text -> Maybe TypeHint -> SqlParameter

-- | The value of the parameter.
[$sel:value:SqlParameter'] :: SqlParameter -> Maybe Field

-- | The name of the parameter.
[$sel:name:SqlParameter'] :: SqlParameter -> Maybe Text

-- | A hint that specifies the correct object type for data type mapping.
--   Possible values are as follows:
--   
--   <ul>
--   <li><tt>DATE</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>DATE</tt> type to the database. The
--   accepted format is <tt>YYYY-MM-DD</tt>.</li>
--   <li><tt>DECIMAL</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>DECIMAL</tt> type to the
--   database.</li>
--   <li><tt>JSON</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>JSON</tt> type to the database.</li>
--   <li><tt>TIME</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>TIME</tt> type to the database. The
--   accepted format is <tt>HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>TIMESTAMP</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>TIMESTAMP</tt> type to the database.
--   The accepted format is <tt>YYYY-MM-DD HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>UUID</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>UUID</tt> type to the database.</li>
--   </ul>
[$sel:typeHint:SqlParameter'] :: SqlParameter -> Maybe TypeHint

-- | Create a value of <a>SqlParameter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:SqlParameter'</a>, <a>sqlParameter_value</a> - The value
--   of the parameter.
--   
--   <a>$sel:name:SqlParameter'</a>, <a>sqlParameter_name</a> - The name of
--   the parameter.
--   
--   <a>$sel:typeHint:SqlParameter'</a>, <a>sqlParameter_typeHint</a> - A
--   hint that specifies the correct object type for data type mapping.
--   Possible values are as follows:
--   
--   <ul>
--   <li><tt>DATE</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>DATE</tt> type to the database. The
--   accepted format is <tt>YYYY-MM-DD</tt>.</li>
--   <li><tt>DECIMAL</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>DECIMAL</tt> type to the
--   database.</li>
--   <li><tt>JSON</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>JSON</tt> type to the database.</li>
--   <li><tt>TIME</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>TIME</tt> type to the database. The
--   accepted format is <tt>HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>TIMESTAMP</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>TIMESTAMP</tt> type to the database.
--   The accepted format is <tt>YYYY-MM-DD HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>UUID</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>UUID</tt> type to the database.</li>
--   </ul>
newSqlParameter :: SqlParameter

-- | The value of the parameter.
sqlParameter_value :: Lens' SqlParameter (Maybe Field)

-- | The name of the parameter.
sqlParameter_name :: Lens' SqlParameter (Maybe Text)

-- | A hint that specifies the correct object type for data type mapping.
--   Possible values are as follows:
--   
--   <ul>
--   <li><tt>DATE</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>DATE</tt> type to the database. The
--   accepted format is <tt>YYYY-MM-DD</tt>.</li>
--   <li><tt>DECIMAL</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>DECIMAL</tt> type to the
--   database.</li>
--   <li><tt>JSON</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>JSON</tt> type to the database.</li>
--   <li><tt>TIME</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>TIME</tt> type to the database. The
--   accepted format is <tt>HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>TIMESTAMP</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>TIMESTAMP</tt> type to the database.
--   The accepted format is <tt>YYYY-MM-DD HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>UUID</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>UUID</tt> type to the database.</li>
--   </ul>
sqlParameter_typeHint :: Lens' SqlParameter (Maybe TypeHint)
instance GHC.Generics.Generic Network.AWS.RDSData.Types.SqlParameter.SqlParameter
instance GHC.Show.Show Network.AWS.RDSData.Types.SqlParameter.SqlParameter
instance GHC.Read.Read Network.AWS.RDSData.Types.SqlParameter.SqlParameter
instance GHC.Classes.Eq Network.AWS.RDSData.Types.SqlParameter.SqlParameter
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.Types.SqlParameter.SqlParameter
instance Control.DeepSeq.NFData Network.AWS.RDSData.Types.SqlParameter.SqlParameter
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RDSData.Types.SqlParameter.SqlParameter


module Network.AWS.RDSData.Types.UpdateResult

-- | The response elements represent the results of an update.
--   
--   <i>See:</i> <a>newUpdateResult</a> smart constructor.
data UpdateResult
UpdateResult' :: Maybe [Field] -> UpdateResult

-- | Values for fields generated during the request.
[$sel:generatedFields:UpdateResult'] :: UpdateResult -> Maybe [Field]

-- | Create a value of <a>UpdateResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:generatedFields:UpdateResult'</a>,
--   <a>updateResult_generatedFields</a> - Values for fields generated
--   during the request.
newUpdateResult :: UpdateResult

-- | Values for fields generated during the request.
updateResult_generatedFields :: Lens' UpdateResult (Maybe [Field])
instance GHC.Generics.Generic Network.AWS.RDSData.Types.UpdateResult.UpdateResult
instance GHC.Show.Show Network.AWS.RDSData.Types.UpdateResult.UpdateResult
instance GHC.Read.Read Network.AWS.RDSData.Types.UpdateResult.UpdateResult
instance GHC.Classes.Eq Network.AWS.RDSData.Types.UpdateResult.UpdateResult
instance Data.Aeson.Types.FromJSON.FromJSON Network.AWS.RDSData.Types.UpdateResult.UpdateResult
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.Types.UpdateResult.UpdateResult
instance Control.DeepSeq.NFData Network.AWS.RDSData.Types.UpdateResult.UpdateResult


module Network.AWS.RDSData.Types

-- | API version <tt>2018-08-01</tt> of the Amazon RDS DataService SDK
--   configuration.
defaultService :: Service

-- | The execution of the SQL statement timed out.
_StatementTimeoutException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There are insufficient privileges to make the call.
_ForbiddenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The <tt>resourceArn</tt>, <tt>secretArn</tt>, or
--   <tt>transactionId</tt> value can't be found.
_NotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The service specified by the <tt>resourceArn</tt> parameter is not
--   available.
_ServiceUnavailableError :: AsError a => Getting (First ServiceError) a ServiceError

-- | An internal error occurred.
_InternalServerErrorException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is an error in the call or in a SQL statement.
_BadRequestException :: AsError a => Getting (First ServiceError) a ServiceError
newtype DecimalReturnType
DecimalReturnType' :: Text -> DecimalReturnType
[fromDecimalReturnType] :: DecimalReturnType -> Text
pattern DecimalReturnType_DOUBLE_OR_LONG :: DecimalReturnType
pattern DecimalReturnType_STRING :: DecimalReturnType
newtype TypeHint
TypeHint' :: Text -> TypeHint
[fromTypeHint] :: TypeHint -> Text
pattern TypeHint_DATE :: TypeHint
pattern TypeHint_DECIMAL :: TypeHint
pattern TypeHint_JSON :: TypeHint
pattern TypeHint_TIME :: TypeHint
pattern TypeHint_TIMESTAMP :: TypeHint
pattern TypeHint_UUID :: TypeHint

-- | Contains an array.
--   
--   <i>See:</i> <a>newArrayValue</a> smart constructor.
data ArrayValue
ArrayValue' :: Maybe [Integer] -> Maybe [Double] -> Maybe [Text] -> Maybe [ArrayValue] -> Maybe [Bool] -> ArrayValue

-- | An array of floating point numbers.
[$sel:longValues:ArrayValue'] :: ArrayValue -> Maybe [Integer]

-- | An array of integers.
[$sel:doubleValues:ArrayValue'] :: ArrayValue -> Maybe [Double]

-- | An array of strings.
[$sel:stringValues:ArrayValue'] :: ArrayValue -> Maybe [Text]

-- | An array of arrays.
[$sel:arrayValues:ArrayValue'] :: ArrayValue -> Maybe [ArrayValue]

-- | An array of Boolean values.
[$sel:booleanValues:ArrayValue'] :: ArrayValue -> Maybe [Bool]

-- | Create a value of <a>ArrayValue</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:longValues:ArrayValue'</a>, <a>arrayValue_longValues</a> - An
--   array of floating point numbers.
--   
--   <a>$sel:doubleValues:ArrayValue'</a>, <a>arrayValue_doubleValues</a> -
--   An array of integers.
--   
--   <a>$sel:stringValues:ArrayValue'</a>, <a>arrayValue_stringValues</a> -
--   An array of strings.
--   
--   <a>$sel:arrayValues:ArrayValue'</a>, <a>arrayValue_arrayValues</a> -
--   An array of arrays.
--   
--   <a>$sel:booleanValues:ArrayValue'</a>, <a>arrayValue_booleanValues</a>
--   - An array of Boolean values.
newArrayValue :: ArrayValue

-- | An array of floating point numbers.
arrayValue_longValues :: Lens' ArrayValue (Maybe [Integer])

-- | An array of integers.
arrayValue_doubleValues :: Lens' ArrayValue (Maybe [Double])

-- | An array of strings.
arrayValue_stringValues :: Lens' ArrayValue (Maybe [Text])

-- | An array of arrays.
arrayValue_arrayValues :: Lens' ArrayValue (Maybe [ArrayValue])

-- | An array of Boolean values.
arrayValue_booleanValues :: Lens' ArrayValue (Maybe [Bool])

-- | Contains the metadata for a column.
--   
--   <i>See:</i> <a>newColumnMetadata</a> smart constructor.
data ColumnMetadata
ColumnMetadata' :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe Text -> ColumnMetadata

-- | The database-specific data type of the column.
[$sel:typeName:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether the column is case-sensitive.
[$sel:isCaseSensitive:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | A value that indicates whether the column contains currency values.
[$sel:isCurrency:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | The scale value of a decimal number column.
[$sel:scale:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The precision value of a decimal number column.
[$sel:precision:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The name of the schema that owns the table that includes the column.
[$sel:schemaName:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether the column increments automatically.
[$sel:isAutoIncrement:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | The name of the column.
[$sel:name:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | The type of the column.
[$sel:arrayBaseColumnType:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The type of the column.
[$sel:type':ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | A value that indicates whether an integer column is signed.
[$sel:isSigned:ColumnMetadata'] :: ColumnMetadata -> Maybe Bool

-- | The label for the column.
[$sel:label:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | A value that indicates whether the column is nullable.
[$sel:nullable:ColumnMetadata'] :: ColumnMetadata -> Maybe Int

-- | The name of the table that includes the column.
[$sel:tableName:ColumnMetadata'] :: ColumnMetadata -> Maybe Text

-- | Create a value of <a>ColumnMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:typeName:ColumnMetadata'</a>, <a>columnMetadata_typeName</a> -
--   The database-specific data type of the column.
--   
--   <a>$sel:isCaseSensitive:ColumnMetadata'</a>,
--   <a>columnMetadata_isCaseSensitive</a> - A value that indicates whether
--   the column is case-sensitive.
--   
--   <a>$sel:isCurrency:ColumnMetadata'</a>,
--   <a>columnMetadata_isCurrency</a> - A value that indicates whether the
--   column contains currency values.
--   
--   <a>$sel:scale:ColumnMetadata'</a>, <a>columnMetadata_scale</a> - The
--   scale value of a decimal number column.
--   
--   <a>$sel:precision:ColumnMetadata'</a>, <a>columnMetadata_precision</a>
--   - The precision value of a decimal number column.
--   
--   <a>$sel:schemaName:ColumnMetadata'</a>,
--   <a>columnMetadata_schemaName</a> - The name of the schema that owns
--   the table that includes the column.
--   
--   <a>$sel:isAutoIncrement:ColumnMetadata'</a>,
--   <a>columnMetadata_isAutoIncrement</a> - A value that indicates whether
--   the column increments automatically.
--   
--   <a>$sel:name:ColumnMetadata'</a>, <a>columnMetadata_name</a> - The
--   name of the column.
--   
--   <a>$sel:arrayBaseColumnType:ColumnMetadata'</a>,
--   <a>columnMetadata_arrayBaseColumnType</a> - The type of the column.
--   
--   <a>$sel:type':ColumnMetadata'</a>, <a>columnMetadata_type</a> - The
--   type of the column.
--   
--   <a>$sel:isSigned:ColumnMetadata'</a>, <a>columnMetadata_isSigned</a> -
--   A value that indicates whether an integer column is signed.
--   
--   <a>$sel:label:ColumnMetadata'</a>, <a>columnMetadata_label</a> - The
--   label for the column.
--   
--   <a>$sel:nullable:ColumnMetadata'</a>, <a>columnMetadata_nullable</a> -
--   A value that indicates whether the column is nullable.
--   
--   <a>$sel:tableName:ColumnMetadata'</a>, <a>columnMetadata_tableName</a>
--   - The name of the table that includes the column.
newColumnMetadata :: ColumnMetadata

-- | The database-specific data type of the column.
columnMetadata_typeName :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column is case-sensitive.
columnMetadata_isCaseSensitive :: Lens' ColumnMetadata (Maybe Bool)

-- | A value that indicates whether the column contains currency values.
columnMetadata_isCurrency :: Lens' ColumnMetadata (Maybe Bool)

-- | The scale value of a decimal number column.
columnMetadata_scale :: Lens' ColumnMetadata (Maybe Int)

-- | The precision value of a decimal number column.
columnMetadata_precision :: Lens' ColumnMetadata (Maybe Int)

-- | The name of the schema that owns the table that includes the column.
columnMetadata_schemaName :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column increments automatically.
columnMetadata_isAutoIncrement :: Lens' ColumnMetadata (Maybe Bool)

-- | The name of the column.
columnMetadata_name :: Lens' ColumnMetadata (Maybe Text)

-- | The type of the column.
columnMetadata_arrayBaseColumnType :: Lens' ColumnMetadata (Maybe Int)

-- | The type of the column.
columnMetadata_type :: Lens' ColumnMetadata (Maybe Int)

-- | A value that indicates whether an integer column is signed.
columnMetadata_isSigned :: Lens' ColumnMetadata (Maybe Bool)

-- | The label for the column.
columnMetadata_label :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column is nullable.
columnMetadata_nullable :: Lens' ColumnMetadata (Maybe Int)

-- | The name of the table that includes the column.
columnMetadata_tableName :: Lens' ColumnMetadata (Maybe Text)

-- | Contains a value.
--   
--   <i>See:</i> <a>newField</a> smart constructor.
data Field
Field' :: Maybe Double -> Maybe Text -> Maybe Integer -> Maybe Bool -> Maybe ArrayValue -> Maybe Base64 -> Maybe Bool -> Field

-- | A value of double data type.
[$sel:doubleValue:Field'] :: Field -> Maybe Double

-- | A value of string data type.
[$sel:stringValue:Field'] :: Field -> Maybe Text

-- | A value of long data type.
[$sel:longValue:Field'] :: Field -> Maybe Integer

-- | A value of Boolean data type.
[$sel:booleanValue:Field'] :: Field -> Maybe Bool

-- | An array of values.
[$sel:arrayValue:Field'] :: Field -> Maybe ArrayValue

-- | A value of BLOB data type.
[$sel:blobValue:Field'] :: Field -> Maybe Base64

-- | A NULL value.
[$sel:isNull:Field'] :: Field -> Maybe Bool

-- | Create a value of <a>Field</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:doubleValue:Field'</a>, <a>field_doubleValue</a> - A value of
--   double data type.
--   
--   <a>$sel:stringValue:Field'</a>, <a>field_stringValue</a> - A value of
--   string data type.
--   
--   <a>$sel:longValue:Field'</a>, <a>field_longValue</a> - A value of long
--   data type.
--   
--   <a>$sel:booleanValue:Field'</a>, <a>field_booleanValue</a> - A value
--   of Boolean data type.
--   
--   <a>$sel:arrayValue:Field'</a>, <a>field_arrayValue</a> - An array of
--   values.
--   
--   <a>$sel:blobValue:Field'</a>, <a>field_blobValue</a> - A value of BLOB
--   data type.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
--   
--   <a>$sel:isNull:Field'</a>, <a>field_isNull</a> - A NULL value.
newField :: Field

-- | A value of double data type.
field_doubleValue :: Lens' Field (Maybe Double)

-- | A value of string data type.
field_stringValue :: Lens' Field (Maybe Text)

-- | A value of long data type.
field_longValue :: Lens' Field (Maybe Integer)

-- | A value of Boolean data type.
field_booleanValue :: Lens' Field (Maybe Bool)

-- | An array of values.
field_arrayValue :: Lens' Field (Maybe ArrayValue)

-- | A value of BLOB data type.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
field_blobValue :: Lens' Field (Maybe ByteString)

-- | A NULL value.
field_isNull :: Lens' Field (Maybe Bool)

-- | Options that control how the result set is returned.
--   
--   <i>See:</i> <a>newResultSetOptions</a> smart constructor.
data ResultSetOptions
ResultSetOptions' :: Maybe DecimalReturnType -> ResultSetOptions

-- | A value that indicates how a field of <tt>DECIMAL</tt> type is
--   represented in the response. The value of <tt>STRING</tt>, the
--   default, specifies that it is converted to a String value. The value
--   of <tt>DOUBLE_OR_LONG</tt> specifies that it is converted to a Long
--   value if its scale is 0, or to a Double value otherwise.
--   
--   Conversion to Double or Long can result in roundoff errors due to
--   precision loss. We recommend converting to String, especially when
--   working with currency values.
[$sel:decimalReturnType:ResultSetOptions'] :: ResultSetOptions -> Maybe DecimalReturnType

-- | Create a value of <a>ResultSetOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:decimalReturnType:ResultSetOptions'</a>,
--   <a>resultSetOptions_decimalReturnType</a> - A value that indicates how
--   a field of <tt>DECIMAL</tt> type is represented in the response. The
--   value of <tt>STRING</tt>, the default, specifies that it is converted
--   to a String value. The value of <tt>DOUBLE_OR_LONG</tt> specifies that
--   it is converted to a Long value if its scale is 0, or to a Double
--   value otherwise.
--   
--   Conversion to Double or Long can result in roundoff errors due to
--   precision loss. We recommend converting to String, especially when
--   working with currency values.
newResultSetOptions :: ResultSetOptions

-- | A value that indicates how a field of <tt>DECIMAL</tt> type is
--   represented in the response. The value of <tt>STRING</tt>, the
--   default, specifies that it is converted to a String value. The value
--   of <tt>DOUBLE_OR_LONG</tt> specifies that it is converted to a Long
--   value if its scale is 0, or to a Double value otherwise.
--   
--   Conversion to Double or Long can result in roundoff errors due to
--   precision loss. We recommend converting to String, especially when
--   working with currency values.
resultSetOptions_decimalReturnType :: Lens' ResultSetOptions (Maybe DecimalReturnType)

-- | A parameter used in a SQL statement.
--   
--   <i>See:</i> <a>newSqlParameter</a> smart constructor.
data SqlParameter
SqlParameter' :: Maybe Field -> Maybe Text -> Maybe TypeHint -> SqlParameter

-- | The value of the parameter.
[$sel:value:SqlParameter'] :: SqlParameter -> Maybe Field

-- | The name of the parameter.
[$sel:name:SqlParameter'] :: SqlParameter -> Maybe Text

-- | A hint that specifies the correct object type for data type mapping.
--   Possible values are as follows:
--   
--   <ul>
--   <li><tt>DATE</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>DATE</tt> type to the database. The
--   accepted format is <tt>YYYY-MM-DD</tt>.</li>
--   <li><tt>DECIMAL</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>DECIMAL</tt> type to the
--   database.</li>
--   <li><tt>JSON</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>JSON</tt> type to the database.</li>
--   <li><tt>TIME</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>TIME</tt> type to the database. The
--   accepted format is <tt>HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>TIMESTAMP</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>TIMESTAMP</tt> type to the database.
--   The accepted format is <tt>YYYY-MM-DD HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>UUID</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>UUID</tt> type to the database.</li>
--   </ul>
[$sel:typeHint:SqlParameter'] :: SqlParameter -> Maybe TypeHint

-- | Create a value of <a>SqlParameter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:SqlParameter'</a>, <a>sqlParameter_value</a> - The value
--   of the parameter.
--   
--   <a>$sel:name:SqlParameter'</a>, <a>sqlParameter_name</a> - The name of
--   the parameter.
--   
--   <a>$sel:typeHint:SqlParameter'</a>, <a>sqlParameter_typeHint</a> - A
--   hint that specifies the correct object type for data type mapping.
--   Possible values are as follows:
--   
--   <ul>
--   <li><tt>DATE</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>DATE</tt> type to the database. The
--   accepted format is <tt>YYYY-MM-DD</tt>.</li>
--   <li><tt>DECIMAL</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>DECIMAL</tt> type to the
--   database.</li>
--   <li><tt>JSON</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>JSON</tt> type to the database.</li>
--   <li><tt>TIME</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>TIME</tt> type to the database. The
--   accepted format is <tt>HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>TIMESTAMP</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>TIMESTAMP</tt> type to the database.
--   The accepted format is <tt>YYYY-MM-DD HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>UUID</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>UUID</tt> type to the database.</li>
--   </ul>
newSqlParameter :: SqlParameter

-- | The value of the parameter.
sqlParameter_value :: Lens' SqlParameter (Maybe Field)

-- | The name of the parameter.
sqlParameter_name :: Lens' SqlParameter (Maybe Text)

-- | A hint that specifies the correct object type for data type mapping.
--   Possible values are as follows:
--   
--   <ul>
--   <li><tt>DATE</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>DATE</tt> type to the database. The
--   accepted format is <tt>YYYY-MM-DD</tt>.</li>
--   <li><tt>DECIMAL</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>DECIMAL</tt> type to the
--   database.</li>
--   <li><tt>JSON</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>JSON</tt> type to the database.</li>
--   <li><tt>TIME</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>TIME</tt> type to the database. The
--   accepted format is <tt>HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>TIMESTAMP</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>TIMESTAMP</tt> type to the database.
--   The accepted format is <tt>YYYY-MM-DD HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>UUID</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>UUID</tt> type to the database.</li>
--   </ul>
sqlParameter_typeHint :: Lens' SqlParameter (Maybe TypeHint)

-- | The response elements represent the results of an update.
--   
--   <i>See:</i> <a>newUpdateResult</a> smart constructor.
data UpdateResult
UpdateResult' :: Maybe [Field] -> UpdateResult

-- | Values for fields generated during the request.
[$sel:generatedFields:UpdateResult'] :: UpdateResult -> Maybe [Field]

-- | Create a value of <a>UpdateResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:generatedFields:UpdateResult'</a>,
--   <a>updateResult_generatedFields</a> - Values for fields generated
--   during the request.
newUpdateResult :: UpdateResult

-- | Values for fields generated during the request.
updateResult_generatedFields :: Lens' UpdateResult (Maybe [Field])


-- | Performs a rollback of a transaction. Rolling back a transaction
--   cancels its changes.
module Network.AWS.RDSData.RollbackTransaction

-- | The request parameters represent the input of a request to perform a
--   rollback of a transaction.
--   
--   <i>See:</i> <a>newRollbackTransaction</a> smart constructor.
data RollbackTransaction
RollbackTransaction' :: Text -> Text -> Text -> RollbackTransaction

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
[$sel:resourceArn:RollbackTransaction'] :: RollbackTransaction -> Text

-- | The name or ARN of the secret that enables access to the DB cluster.
[$sel:secretArn:RollbackTransaction'] :: RollbackTransaction -> Text

-- | The identifier of the transaction to roll back.
[$sel:transactionId:RollbackTransaction'] :: RollbackTransaction -> Text

-- | Create a value of <a>RollbackTransaction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:RollbackTransaction'</a>,
--   <a>rollbackTransaction_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the Aurora Serverless DB cluster.
--   
--   <a>$sel:secretArn:RollbackTransaction'</a>,
--   <a>rollbackTransaction_secretArn</a> - The name or ARN of the secret
--   that enables access to the DB cluster.
--   
--   <a>$sel:transactionId:RollbackTransaction'</a>,
--   <a>rollbackTransaction_transactionId</a> - The identifier of the
--   transaction to roll back.
newRollbackTransaction :: Text -> Text -> Text -> RollbackTransaction

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
rollbackTransaction_resourceArn :: Lens' RollbackTransaction Text

-- | The name or ARN of the secret that enables access to the DB cluster.
rollbackTransaction_secretArn :: Lens' RollbackTransaction Text

-- | The identifier of the transaction to roll back.
rollbackTransaction_transactionId :: Lens' RollbackTransaction Text

-- | The response elements represent the output of a request to perform a
--   rollback of a transaction.
--   
--   <i>See:</i> <a>newRollbackTransactionResponse</a> smart constructor.
data RollbackTransactionResponse
RollbackTransactionResponse' :: Maybe Text -> Int -> RollbackTransactionResponse

-- | The status of the rollback operation.
[$sel:transactionStatus:RollbackTransactionResponse'] :: RollbackTransactionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:RollbackTransactionResponse'] :: RollbackTransactionResponse -> Int

-- | Create a value of <a>RollbackTransactionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:transactionStatus:RollbackTransactionResponse'</a>,
--   <a>rollbackTransactionResponse_transactionStatus</a> - The status of
--   the rollback operation.
--   
--   <a>$sel:httpStatus:RollbackTransactionResponse'</a>,
--   <a>rollbackTransactionResponse_httpStatus</a> - The response's http
--   status code.
newRollbackTransactionResponse :: Int -> RollbackTransactionResponse

-- | The status of the rollback operation.
rollbackTransactionResponse_transactionStatus :: Lens' RollbackTransactionResponse (Maybe Text)

-- | The response's http status code.
rollbackTransactionResponse_httpStatus :: Lens' RollbackTransactionResponse Int
instance GHC.Generics.Generic Network.AWS.RDSData.RollbackTransaction.RollbackTransaction
instance GHC.Show.Show Network.AWS.RDSData.RollbackTransaction.RollbackTransaction
instance GHC.Read.Read Network.AWS.RDSData.RollbackTransaction.RollbackTransaction
instance GHC.Classes.Eq Network.AWS.RDSData.RollbackTransaction.RollbackTransaction
instance GHC.Generics.Generic Network.AWS.RDSData.RollbackTransaction.RollbackTransactionResponse
instance GHC.Show.Show Network.AWS.RDSData.RollbackTransaction.RollbackTransactionResponse
instance GHC.Read.Read Network.AWS.RDSData.RollbackTransaction.RollbackTransactionResponse
instance GHC.Classes.Eq Network.AWS.RDSData.RollbackTransaction.RollbackTransactionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RDSData.RollbackTransaction.RollbackTransaction
instance Control.DeepSeq.NFData Network.AWS.RDSData.RollbackTransaction.RollbackTransactionResponse
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.RollbackTransaction.RollbackTransaction
instance Control.DeepSeq.NFData Network.AWS.RDSData.RollbackTransaction.RollbackTransaction
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RDSData.RollbackTransaction.RollbackTransaction
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RDSData.RollbackTransaction.RollbackTransaction
instance Network.AWS.Data.Path.ToPath Network.AWS.RDSData.RollbackTransaction.RollbackTransaction
instance Network.AWS.Data.Query.ToQuery Network.AWS.RDSData.RollbackTransaction.RollbackTransaction


-- | Runs a SQL statement against a database.
--   
--   If a call isn't part of a transaction because it doesn't include the
--   <tt>transactionID</tt> parameter, changes that result from the call
--   are committed automatically.
--   
--   The response size limit is 1 MB. If the call returns more than 1 MB of
--   response data, the call is terminated.
module Network.AWS.RDSData.ExecuteStatement

-- | The request parameters represent the input of a request to run a SQL
--   statement against a database.
--   
--   <i>See:</i> <a>newExecuteStatement</a> smart constructor.
data ExecuteStatement
ExecuteStatement' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe [SqlParameter] -> Maybe Bool -> Maybe ResultSetOptions -> Maybe Bool -> Text -> Text -> Text -> ExecuteStatement

-- | The name of the database.
[$sel:database:ExecuteStatement'] :: ExecuteStatement -> Maybe Text

-- | The identifier of a transaction that was started by using the
--   <tt>BeginTransaction</tt> operation. Specify the transaction ID of the
--   transaction that you want to include the SQL statement in.
--   
--   If the SQL statement is not part of a transaction, don't set this
--   parameter.
[$sel:transactionId:ExecuteStatement'] :: ExecuteStatement -> Maybe Text

-- | The name of the database schema.
--   
--   Currently, the <tt>schema</tt> parameter isn't supported.
[$sel:schema:ExecuteStatement'] :: ExecuteStatement -> Maybe Text

-- | The parameters for the SQL statement.
--   
--   Array parameters are not supported.
[$sel:parameters:ExecuteStatement'] :: ExecuteStatement -> Maybe [SqlParameter]

-- | A value that indicates whether to include metadata in the results.
[$sel:includeResultMetadata:ExecuteStatement'] :: ExecuteStatement -> Maybe Bool

-- | Options that control how the result set is returned.
[$sel:resultSetOptions:ExecuteStatement'] :: ExecuteStatement -> Maybe ResultSetOptions

-- | A value that indicates whether to continue running the statement after
--   the call times out. By default, the statement stops running when the
--   call times out.
--   
--   For DDL statements, we recommend continuing to run the statement after
--   the call times out. When a DDL statement terminates before it is
--   finished running, it can result in errors and possibly corrupted data
--   structures.
[$sel:continueAfterTimeout:ExecuteStatement'] :: ExecuteStatement -> Maybe Bool

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
[$sel:resourceArn:ExecuteStatement'] :: ExecuteStatement -> Text

-- | The name or ARN of the secret that enables access to the DB cluster.
[$sel:secretArn:ExecuteStatement'] :: ExecuteStatement -> Text

-- | The SQL statement to run.
[$sel:sql:ExecuteStatement'] :: ExecuteStatement -> Text

-- | Create a value of <a>ExecuteStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:database:ExecuteStatement'</a>,
--   <a>executeStatement_database</a> - The name of the database.
--   
--   <a>$sel:transactionId:ExecuteStatement'</a>,
--   <a>executeStatement_transactionId</a> - The identifier of a
--   transaction that was started by using the <tt>BeginTransaction</tt>
--   operation. Specify the transaction ID of the transaction that you want
--   to include the SQL statement in.
--   
--   If the SQL statement is not part of a transaction, don't set this
--   parameter.
--   
--   <a>$sel:schema:ExecuteStatement'</a>, <a>executeStatement_schema</a> -
--   The name of the database schema.
--   
--   Currently, the <tt>schema</tt> parameter isn't supported.
--   
--   <a>$sel:parameters:ExecuteStatement'</a>,
--   <a>executeStatement_parameters</a> - The parameters for the SQL
--   statement.
--   
--   Array parameters are not supported.
--   
--   <a>$sel:includeResultMetadata:ExecuteStatement'</a>,
--   <a>executeStatement_includeResultMetadata</a> - A value that indicates
--   whether to include metadata in the results.
--   
--   <a>$sel:resultSetOptions:ExecuteStatement'</a>,
--   <a>executeStatement_resultSetOptions</a> - Options that control how
--   the result set is returned.
--   
--   <a>$sel:continueAfterTimeout:ExecuteStatement'</a>,
--   <a>executeStatement_continueAfterTimeout</a> - A value that indicates
--   whether to continue running the statement after the call times out. By
--   default, the statement stops running when the call times out.
--   
--   For DDL statements, we recommend continuing to run the statement after
--   the call times out. When a DDL statement terminates before it is
--   finished running, it can result in errors and possibly corrupted data
--   structures.
--   
--   <a>$sel:resourceArn:ExecuteStatement'</a>,
--   <a>executeStatement_resourceArn</a> - The Amazon Resource Name (ARN)
--   of the Aurora Serverless DB cluster.
--   
--   <a>$sel:secretArn:ExecuteStatement'</a>,
--   <a>executeStatement_secretArn</a> - The name or ARN of the secret that
--   enables access to the DB cluster.
--   
--   <a>$sel:sql:ExecuteStatement'</a>, <a>executeStatement_sql</a> - The
--   SQL statement to run.
newExecuteStatement :: Text -> Text -> Text -> ExecuteStatement

-- | The name of the database.
executeStatement_database :: Lens' ExecuteStatement (Maybe Text)

-- | The identifier of a transaction that was started by using the
--   <tt>BeginTransaction</tt> operation. Specify the transaction ID of the
--   transaction that you want to include the SQL statement in.
--   
--   If the SQL statement is not part of a transaction, don't set this
--   parameter.
executeStatement_transactionId :: Lens' ExecuteStatement (Maybe Text)

-- | The name of the database schema.
--   
--   Currently, the <tt>schema</tt> parameter isn't supported.
executeStatement_schema :: Lens' ExecuteStatement (Maybe Text)

-- | The parameters for the SQL statement.
--   
--   Array parameters are not supported.
executeStatement_parameters :: Lens' ExecuteStatement (Maybe [SqlParameter])

-- | A value that indicates whether to include metadata in the results.
executeStatement_includeResultMetadata :: Lens' ExecuteStatement (Maybe Bool)

-- | Options that control how the result set is returned.
executeStatement_resultSetOptions :: Lens' ExecuteStatement (Maybe ResultSetOptions)

-- | A value that indicates whether to continue running the statement after
--   the call times out. By default, the statement stops running when the
--   call times out.
--   
--   For DDL statements, we recommend continuing to run the statement after
--   the call times out. When a DDL statement terminates before it is
--   finished running, it can result in errors and possibly corrupted data
--   structures.
executeStatement_continueAfterTimeout :: Lens' ExecuteStatement (Maybe Bool)

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
executeStatement_resourceArn :: Lens' ExecuteStatement Text

-- | The name or ARN of the secret that enables access to the DB cluster.
executeStatement_secretArn :: Lens' ExecuteStatement Text

-- | The SQL statement to run.
executeStatement_sql :: Lens' ExecuteStatement Text

-- | The response elements represent the output of a request to run a SQL
--   statement against a database.
--   
--   <i>See:</i> <a>newExecuteStatementResponse</a> smart constructor.
data ExecuteStatementResponse
ExecuteStatementResponse' :: Maybe [[Field]] -> Maybe [ColumnMetadata] -> Maybe [Field] -> Maybe Integer -> Int -> ExecuteStatementResponse

-- | The records returned by the SQL statement.
[$sel:records:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Maybe [[Field]]

-- | Metadata for the columns included in the results.
[$sel:columnMetadata:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Maybe [ColumnMetadata]

-- | Values for fields generated during the request.
--   
--   <pre>
--   &lt;note&gt; &lt;p&gt;The &lt;code&gt;generatedFields&lt;/code&gt; data isn't supported by Aurora PostgreSQL. To get the values of generated fields, use the &lt;code&gt;RETURNING&lt;/code&gt; clause. For more information, see &lt;a href="https://www.postgresql.org/docs/10/dml-returning.html"&gt;Returning Data From Modified Rows&lt;/a&gt; in the PostgreSQL documentation.&lt;/p&gt; &lt;/note&gt;
--   </pre>
[$sel:generatedFields:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Maybe [Field]

-- | The number of records updated by the request.
[$sel:numberOfRecordsUpdated:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Maybe Integer

-- | The response's http status code.
[$sel:httpStatus:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Int

-- | Create a value of <a>ExecuteStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:records:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_records</a> - The records returned by the
--   SQL statement.
--   
--   <a>$sel:columnMetadata:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_columnMetadata</a> - Metadata for the
--   columns included in the results.
--   
--   <a>$sel:generatedFields:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_generatedFields</a> - Values for fields
--   generated during the request.
--   
--   <pre>
--   &lt;note&gt; &lt;p&gt;The &lt;code&gt;generatedFields&lt;/code&gt; data isn't supported by Aurora PostgreSQL. To get the values of generated fields, use the &lt;code&gt;RETURNING&lt;/code&gt; clause. For more information, see &lt;a href="https://www.postgresql.org/docs/10/dml-returning.html"&gt;Returning Data From Modified Rows&lt;/a&gt; in the PostgreSQL documentation.&lt;/p&gt; &lt;/note&gt;
--   </pre>
--   
--   <a>$sel:numberOfRecordsUpdated:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_numberOfRecordsUpdated</a> - The number of
--   records updated by the request.
--   
--   <a>$sel:httpStatus:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_httpStatus</a> - The response's http
--   status code.
newExecuteStatementResponse :: Int -> ExecuteStatementResponse

-- | The records returned by the SQL statement.
executeStatementResponse_records :: Lens' ExecuteStatementResponse (Maybe [[Field]])

-- | Metadata for the columns included in the results.
executeStatementResponse_columnMetadata :: Lens' ExecuteStatementResponse (Maybe [ColumnMetadata])

-- | Values for fields generated during the request.
--   
--   <pre>
--   &lt;note&gt; &lt;p&gt;The &lt;code&gt;generatedFields&lt;/code&gt; data isn't supported by Aurora PostgreSQL. To get the values of generated fields, use the &lt;code&gt;RETURNING&lt;/code&gt; clause. For more information, see &lt;a href="https://www.postgresql.org/docs/10/dml-returning.html"&gt;Returning Data From Modified Rows&lt;/a&gt; in the PostgreSQL documentation.&lt;/p&gt; &lt;/note&gt;
--   </pre>
executeStatementResponse_generatedFields :: Lens' ExecuteStatementResponse (Maybe [Field])

-- | The number of records updated by the request.
executeStatementResponse_numberOfRecordsUpdated :: Lens' ExecuteStatementResponse (Maybe Integer)

-- | The response's http status code.
executeStatementResponse_httpStatus :: Lens' ExecuteStatementResponse Int
instance GHC.Generics.Generic Network.AWS.RDSData.ExecuteStatement.ExecuteStatement
instance GHC.Show.Show Network.AWS.RDSData.ExecuteStatement.ExecuteStatement
instance GHC.Read.Read Network.AWS.RDSData.ExecuteStatement.ExecuteStatement
instance GHC.Classes.Eq Network.AWS.RDSData.ExecuteStatement.ExecuteStatement
instance GHC.Generics.Generic Network.AWS.RDSData.ExecuteStatement.ExecuteStatementResponse
instance GHC.Show.Show Network.AWS.RDSData.ExecuteStatement.ExecuteStatementResponse
instance GHC.Read.Read Network.AWS.RDSData.ExecuteStatement.ExecuteStatementResponse
instance GHC.Classes.Eq Network.AWS.RDSData.ExecuteStatement.ExecuteStatementResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RDSData.ExecuteStatement.ExecuteStatement
instance Control.DeepSeq.NFData Network.AWS.RDSData.ExecuteStatement.ExecuteStatementResponse
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.ExecuteStatement.ExecuteStatement
instance Control.DeepSeq.NFData Network.AWS.RDSData.ExecuteStatement.ExecuteStatement
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RDSData.ExecuteStatement.ExecuteStatement
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RDSData.ExecuteStatement.ExecuteStatement
instance Network.AWS.Data.Path.ToPath Network.AWS.RDSData.ExecuteStatement.ExecuteStatement
instance Network.AWS.Data.Query.ToQuery Network.AWS.RDSData.ExecuteStatement.ExecuteStatement


-- | Ends a SQL transaction started with the <tt>BeginTransaction</tt>
--   operation and commits the changes.
module Network.AWS.RDSData.CommitTransaction

-- | The request parameters represent the input of a commit transaction
--   request.
--   
--   <i>See:</i> <a>newCommitTransaction</a> smart constructor.
data CommitTransaction
CommitTransaction' :: Text -> Text -> Text -> CommitTransaction

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
[$sel:resourceArn:CommitTransaction'] :: CommitTransaction -> Text

-- | The name or ARN of the secret that enables access to the DB cluster.
[$sel:secretArn:CommitTransaction'] :: CommitTransaction -> Text

-- | The identifier of the transaction to end and commit.
[$sel:transactionId:CommitTransaction'] :: CommitTransaction -> Text

-- | Create a value of <a>CommitTransaction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:CommitTransaction'</a>,
--   <a>commitTransaction_resourceArn</a> - The Amazon Resource Name (ARN)
--   of the Aurora Serverless DB cluster.
--   
--   <a>$sel:secretArn:CommitTransaction'</a>,
--   <a>commitTransaction_secretArn</a> - The name or ARN of the secret
--   that enables access to the DB cluster.
--   
--   <a>$sel:transactionId:CommitTransaction'</a>,
--   <a>commitTransaction_transactionId</a> - The identifier of the
--   transaction to end and commit.
newCommitTransaction :: Text -> Text -> Text -> CommitTransaction

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
commitTransaction_resourceArn :: Lens' CommitTransaction Text

-- | The name or ARN of the secret that enables access to the DB cluster.
commitTransaction_secretArn :: Lens' CommitTransaction Text

-- | The identifier of the transaction to end and commit.
commitTransaction_transactionId :: Lens' CommitTransaction Text

-- | The response elements represent the output of a commit transaction
--   request.
--   
--   <i>See:</i> <a>newCommitTransactionResponse</a> smart constructor.
data CommitTransactionResponse
CommitTransactionResponse' :: Maybe Text -> Int -> CommitTransactionResponse

-- | The status of the commit operation.
[$sel:transactionStatus:CommitTransactionResponse'] :: CommitTransactionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CommitTransactionResponse'] :: CommitTransactionResponse -> Int

-- | Create a value of <a>CommitTransactionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:transactionStatus:CommitTransactionResponse'</a>,
--   <a>commitTransactionResponse_transactionStatus</a> - The status of the
--   commit operation.
--   
--   <a>$sel:httpStatus:CommitTransactionResponse'</a>,
--   <a>commitTransactionResponse_httpStatus</a> - The response's http
--   status code.
newCommitTransactionResponse :: Int -> CommitTransactionResponse

-- | The status of the commit operation.
commitTransactionResponse_transactionStatus :: Lens' CommitTransactionResponse (Maybe Text)

-- | The response's http status code.
commitTransactionResponse_httpStatus :: Lens' CommitTransactionResponse Int
instance GHC.Generics.Generic Network.AWS.RDSData.CommitTransaction.CommitTransaction
instance GHC.Show.Show Network.AWS.RDSData.CommitTransaction.CommitTransaction
instance GHC.Read.Read Network.AWS.RDSData.CommitTransaction.CommitTransaction
instance GHC.Classes.Eq Network.AWS.RDSData.CommitTransaction.CommitTransaction
instance GHC.Generics.Generic Network.AWS.RDSData.CommitTransaction.CommitTransactionResponse
instance GHC.Show.Show Network.AWS.RDSData.CommitTransaction.CommitTransactionResponse
instance GHC.Read.Read Network.AWS.RDSData.CommitTransaction.CommitTransactionResponse
instance GHC.Classes.Eq Network.AWS.RDSData.CommitTransaction.CommitTransactionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RDSData.CommitTransaction.CommitTransaction
instance Control.DeepSeq.NFData Network.AWS.RDSData.CommitTransaction.CommitTransactionResponse
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.CommitTransaction.CommitTransaction
instance Control.DeepSeq.NFData Network.AWS.RDSData.CommitTransaction.CommitTransaction
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RDSData.CommitTransaction.CommitTransaction
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RDSData.CommitTransaction.CommitTransaction
instance Network.AWS.Data.Path.ToPath Network.AWS.RDSData.CommitTransaction.CommitTransaction
instance Network.AWS.Data.Query.ToQuery Network.AWS.RDSData.CommitTransaction.CommitTransaction


-- | Starts a SQL transaction.
--   
--   <pre>
--   &lt;important&gt; &lt;p&gt;A transaction can run for a maximum of 24 hours. A transaction is terminated and rolled back automatically after 24 hours.&lt;/p&gt; &lt;p&gt;A transaction times out if no calls use its transaction ID in three minutes. If a transaction times out before it's committed, it's rolled back automatically.&lt;/p&gt; &lt;p&gt;DDL statements inside a transaction cause an implicit commit. We recommend that you run each DDL statement in a separate &lt;code&gt;ExecuteStatement&lt;/code&gt; call with &lt;code&gt;continueAfterTimeout&lt;/code&gt; enabled.&lt;/p&gt; &lt;/important&gt;
--   </pre>
module Network.AWS.RDSData.BeginTransaction

-- | The request parameters represent the input of a request to start a SQL
--   transaction.
--   
--   <i>See:</i> <a>newBeginTransaction</a> smart constructor.
data BeginTransaction
BeginTransaction' :: Maybe Text -> Maybe Text -> Text -> Text -> BeginTransaction

-- | The name of the database.
[$sel:database:BeginTransaction'] :: BeginTransaction -> Maybe Text

-- | The name of the database schema.
[$sel:schema:BeginTransaction'] :: BeginTransaction -> Maybe Text

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
[$sel:resourceArn:BeginTransaction'] :: BeginTransaction -> Text

-- | The name or ARN of the secret that enables access to the DB cluster.
[$sel:secretArn:BeginTransaction'] :: BeginTransaction -> Text

-- | Create a value of <a>BeginTransaction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:database:BeginTransaction'</a>,
--   <a>beginTransaction_database</a> - The name of the database.
--   
--   <a>$sel:schema:BeginTransaction'</a>, <a>beginTransaction_schema</a> -
--   The name of the database schema.
--   
--   <a>$sel:resourceArn:BeginTransaction'</a>,
--   <a>beginTransaction_resourceArn</a> - The Amazon Resource Name (ARN)
--   of the Aurora Serverless DB cluster.
--   
--   <a>$sel:secretArn:BeginTransaction'</a>,
--   <a>beginTransaction_secretArn</a> - The name or ARN of the secret that
--   enables access to the DB cluster.
newBeginTransaction :: Text -> Text -> BeginTransaction

-- | The name of the database.
beginTransaction_database :: Lens' BeginTransaction (Maybe Text)

-- | The name of the database schema.
beginTransaction_schema :: Lens' BeginTransaction (Maybe Text)

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
beginTransaction_resourceArn :: Lens' BeginTransaction Text

-- | The name or ARN of the secret that enables access to the DB cluster.
beginTransaction_secretArn :: Lens' BeginTransaction Text

-- | The response elements represent the output of a request to start a SQL
--   transaction.
--   
--   <i>See:</i> <a>newBeginTransactionResponse</a> smart constructor.
data BeginTransactionResponse
BeginTransactionResponse' :: Maybe Text -> Int -> BeginTransactionResponse

-- | The transaction ID of the transaction started by the call.
[$sel:transactionId:BeginTransactionResponse'] :: BeginTransactionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:BeginTransactionResponse'] :: BeginTransactionResponse -> Int

-- | Create a value of <a>BeginTransactionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:transactionId:BeginTransactionResponse'</a>,
--   <a>beginTransactionResponse_transactionId</a> - The transaction ID of
--   the transaction started by the call.
--   
--   <a>$sel:httpStatus:BeginTransactionResponse'</a>,
--   <a>beginTransactionResponse_httpStatus</a> - The response's http
--   status code.
newBeginTransactionResponse :: Int -> BeginTransactionResponse

-- | The transaction ID of the transaction started by the call.
beginTransactionResponse_transactionId :: Lens' BeginTransactionResponse (Maybe Text)

-- | The response's http status code.
beginTransactionResponse_httpStatus :: Lens' BeginTransactionResponse Int
instance GHC.Generics.Generic Network.AWS.RDSData.BeginTransaction.BeginTransaction
instance GHC.Show.Show Network.AWS.RDSData.BeginTransaction.BeginTransaction
instance GHC.Read.Read Network.AWS.RDSData.BeginTransaction.BeginTransaction
instance GHC.Classes.Eq Network.AWS.RDSData.BeginTransaction.BeginTransaction
instance GHC.Generics.Generic Network.AWS.RDSData.BeginTransaction.BeginTransactionResponse
instance GHC.Show.Show Network.AWS.RDSData.BeginTransaction.BeginTransactionResponse
instance GHC.Read.Read Network.AWS.RDSData.BeginTransaction.BeginTransactionResponse
instance GHC.Classes.Eq Network.AWS.RDSData.BeginTransaction.BeginTransactionResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RDSData.BeginTransaction.BeginTransaction
instance Control.DeepSeq.NFData Network.AWS.RDSData.BeginTransaction.BeginTransactionResponse
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.BeginTransaction.BeginTransaction
instance Control.DeepSeq.NFData Network.AWS.RDSData.BeginTransaction.BeginTransaction
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RDSData.BeginTransaction.BeginTransaction
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RDSData.BeginTransaction.BeginTransaction
instance Network.AWS.Data.Path.ToPath Network.AWS.RDSData.BeginTransaction.BeginTransaction
instance Network.AWS.Data.Query.ToQuery Network.AWS.RDSData.BeginTransaction.BeginTransaction


-- | Runs a batch SQL statement over an array of data.
--   
--   You can run bulk update and insert operations for multiple records
--   using a DML statement with different parameter sets. Bulk operations
--   can provide a significant performance improvement over individual
--   insert and update operations.
--   
--   If a call isn't part of a transaction because it doesn't include the
--   <tt>transactionID</tt> parameter, changes that result from the call
--   are committed automatically.
module Network.AWS.RDSData.BatchExecuteStatement

-- | The request parameters represent the input of a SQL statement over an
--   array of data.
--   
--   <i>See:</i> <a>newBatchExecuteStatement</a> smart constructor.
data BatchExecuteStatement
BatchExecuteStatement' :: Maybe Text -> Maybe [[SqlParameter]] -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> BatchExecuteStatement

-- | The name of the database.
[$sel:database:BatchExecuteStatement'] :: BatchExecuteStatement -> Maybe Text

-- | The parameter set for the batch operation.
--   
--   The SQL statement is executed as many times as the number of parameter
--   sets provided. To execute a SQL statement with no parameters, use one
--   of the following options:
--   
--   <ul>
--   <li>Specify one or more empty parameter sets.</li>
--   <li>Use the <tt>ExecuteStatement</tt> operation instead of the
--   <tt>BatchExecuteStatement</tt> operation.</li>
--   </ul>
--   
--   Array parameters are not supported.
[$sel:parameterSets:BatchExecuteStatement'] :: BatchExecuteStatement -> Maybe [[SqlParameter]]

-- | The identifier of a transaction that was started by using the
--   <tt>BeginTransaction</tt> operation. Specify the transaction ID of the
--   transaction that you want to include the SQL statement in.
--   
--   If the SQL statement is not part of a transaction, don't set this
--   parameter.
[$sel:transactionId:BatchExecuteStatement'] :: BatchExecuteStatement -> Maybe Text

-- | The name of the database schema.
[$sel:schema:BatchExecuteStatement'] :: BatchExecuteStatement -> Maybe Text

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
[$sel:resourceArn:BatchExecuteStatement'] :: BatchExecuteStatement -> Text

-- | The name or ARN of the secret that enables access to the DB cluster.
[$sel:secretArn:BatchExecuteStatement'] :: BatchExecuteStatement -> Text

-- | The SQL statement to run.
[$sel:sql:BatchExecuteStatement'] :: BatchExecuteStatement -> Text

-- | Create a value of <a>BatchExecuteStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:database:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_database</a> - The name of the database.
--   
--   <a>$sel:parameterSets:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_parameterSets</a> - The parameter set for the
--   batch operation.
--   
--   The SQL statement is executed as many times as the number of parameter
--   sets provided. To execute a SQL statement with no parameters, use one
--   of the following options:
--   
--   <ul>
--   <li>Specify one or more empty parameter sets.</li>
--   <li>Use the <tt>ExecuteStatement</tt> operation instead of the
--   <tt>BatchExecuteStatement</tt> operation.</li>
--   </ul>
--   
--   Array parameters are not supported.
--   
--   <a>$sel:transactionId:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_transactionId</a> - The identifier of a
--   transaction that was started by using the <tt>BeginTransaction</tt>
--   operation. Specify the transaction ID of the transaction that you want
--   to include the SQL statement in.
--   
--   If the SQL statement is not part of a transaction, don't set this
--   parameter.
--   
--   <a>$sel:schema:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_schema</a> - The name of the database schema.
--   
--   <a>$sel:resourceArn:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the Aurora Serverless DB cluster.
--   
--   <a>$sel:secretArn:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_secretArn</a> - The name or ARN of the secret
--   that enables access to the DB cluster.
--   
--   <a>$sel:sql:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_sql</a> - The SQL statement to run.
newBatchExecuteStatement :: Text -> Text -> Text -> BatchExecuteStatement

-- | The name of the database.
batchExecuteStatement_database :: Lens' BatchExecuteStatement (Maybe Text)

-- | The parameter set for the batch operation.
--   
--   The SQL statement is executed as many times as the number of parameter
--   sets provided. To execute a SQL statement with no parameters, use one
--   of the following options:
--   
--   <ul>
--   <li>Specify one or more empty parameter sets.</li>
--   <li>Use the <tt>ExecuteStatement</tt> operation instead of the
--   <tt>BatchExecuteStatement</tt> operation.</li>
--   </ul>
--   
--   Array parameters are not supported.
batchExecuteStatement_parameterSets :: Lens' BatchExecuteStatement (Maybe [[SqlParameter]])

-- | The identifier of a transaction that was started by using the
--   <tt>BeginTransaction</tt> operation. Specify the transaction ID of the
--   transaction that you want to include the SQL statement in.
--   
--   If the SQL statement is not part of a transaction, don't set this
--   parameter.
batchExecuteStatement_transactionId :: Lens' BatchExecuteStatement (Maybe Text)

-- | The name of the database schema.
batchExecuteStatement_schema :: Lens' BatchExecuteStatement (Maybe Text)

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
batchExecuteStatement_resourceArn :: Lens' BatchExecuteStatement Text

-- | The name or ARN of the secret that enables access to the DB cluster.
batchExecuteStatement_secretArn :: Lens' BatchExecuteStatement Text

-- | The SQL statement to run.
batchExecuteStatement_sql :: Lens' BatchExecuteStatement Text

-- | The response elements represent the output of a SQL statement over an
--   array of data.
--   
--   <i>See:</i> <a>newBatchExecuteStatementResponse</a> smart constructor.
data BatchExecuteStatementResponse
BatchExecuteStatementResponse' :: Maybe [UpdateResult] -> Int -> BatchExecuteStatementResponse

-- | The execution results of each batch entry.
[$sel:updateResults:BatchExecuteStatementResponse'] :: BatchExecuteStatementResponse -> Maybe [UpdateResult]

-- | The response's http status code.
[$sel:httpStatus:BatchExecuteStatementResponse'] :: BatchExecuteStatementResponse -> Int

-- | Create a value of <a>BatchExecuteStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateResults:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_updateResults</a> - The execution
--   results of each batch entry.
--   
--   <a>$sel:httpStatus:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_httpStatus</a> - The response's http
--   status code.
newBatchExecuteStatementResponse :: Int -> BatchExecuteStatementResponse

-- | The execution results of each batch entry.
batchExecuteStatementResponse_updateResults :: Lens' BatchExecuteStatementResponse (Maybe [UpdateResult])

-- | The response's http status code.
batchExecuteStatementResponse_httpStatus :: Lens' BatchExecuteStatementResponse Int
instance GHC.Generics.Generic Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatement
instance GHC.Show.Show Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatement
instance GHC.Read.Read Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatement
instance GHC.Classes.Eq Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatement
instance GHC.Generics.Generic Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatementResponse
instance GHC.Show.Show Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatementResponse
instance GHC.Read.Read Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatementResponse
instance GHC.Classes.Eq Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatementResponse
instance Network.AWS.Types.AWSRequest Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatement
instance Control.DeepSeq.NFData Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatementResponse
instance Data.Hashable.Class.Hashable Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatement
instance Control.DeepSeq.NFData Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatement
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatement
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatement
instance Network.AWS.Data.Path.ToPath Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatement
instance Network.AWS.Data.Query.ToQuery Network.AWS.RDSData.BatchExecuteStatement.BatchExecuteStatement


module Network.AWS.RDSData.Lens

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
rollbackTransaction_resourceArn :: Lens' RollbackTransaction Text

-- | The name or ARN of the secret that enables access to the DB cluster.
rollbackTransaction_secretArn :: Lens' RollbackTransaction Text

-- | The identifier of the transaction to roll back.
rollbackTransaction_transactionId :: Lens' RollbackTransaction Text

-- | The status of the rollback operation.
rollbackTransactionResponse_transactionStatus :: Lens' RollbackTransactionResponse (Maybe Text)

-- | The response's http status code.
rollbackTransactionResponse_httpStatus :: Lens' RollbackTransactionResponse Int

-- | The name of the database.
beginTransaction_database :: Lens' BeginTransaction (Maybe Text)

-- | The name of the database schema.
beginTransaction_schema :: Lens' BeginTransaction (Maybe Text)

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
beginTransaction_resourceArn :: Lens' BeginTransaction Text

-- | The name or ARN of the secret that enables access to the DB cluster.
beginTransaction_secretArn :: Lens' BeginTransaction Text

-- | The transaction ID of the transaction started by the call.
beginTransactionResponse_transactionId :: Lens' BeginTransactionResponse (Maybe Text)

-- | The response's http status code.
beginTransactionResponse_httpStatus :: Lens' BeginTransactionResponse Int

-- | The name of the database.
batchExecuteStatement_database :: Lens' BatchExecuteStatement (Maybe Text)

-- | The parameter set for the batch operation.
--   
--   The SQL statement is executed as many times as the number of parameter
--   sets provided. To execute a SQL statement with no parameters, use one
--   of the following options:
--   
--   <ul>
--   <li>Specify one or more empty parameter sets.</li>
--   <li>Use the <tt>ExecuteStatement</tt> operation instead of the
--   <tt>BatchExecuteStatement</tt> operation.</li>
--   </ul>
--   
--   Array parameters are not supported.
batchExecuteStatement_parameterSets :: Lens' BatchExecuteStatement (Maybe [[SqlParameter]])

-- | The identifier of a transaction that was started by using the
--   <tt>BeginTransaction</tt> operation. Specify the transaction ID of the
--   transaction that you want to include the SQL statement in.
--   
--   If the SQL statement is not part of a transaction, don't set this
--   parameter.
batchExecuteStatement_transactionId :: Lens' BatchExecuteStatement (Maybe Text)

-- | The name of the database schema.
batchExecuteStatement_schema :: Lens' BatchExecuteStatement (Maybe Text)

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
batchExecuteStatement_resourceArn :: Lens' BatchExecuteStatement Text

-- | The name or ARN of the secret that enables access to the DB cluster.
batchExecuteStatement_secretArn :: Lens' BatchExecuteStatement Text

-- | The SQL statement to run.
batchExecuteStatement_sql :: Lens' BatchExecuteStatement Text

-- | The execution results of each batch entry.
batchExecuteStatementResponse_updateResults :: Lens' BatchExecuteStatementResponse (Maybe [UpdateResult])

-- | The response's http status code.
batchExecuteStatementResponse_httpStatus :: Lens' BatchExecuteStatementResponse Int

-- | The name of the database.
executeStatement_database :: Lens' ExecuteStatement (Maybe Text)

-- | The identifier of a transaction that was started by using the
--   <tt>BeginTransaction</tt> operation. Specify the transaction ID of the
--   transaction that you want to include the SQL statement in.
--   
--   If the SQL statement is not part of a transaction, don't set this
--   parameter.
executeStatement_transactionId :: Lens' ExecuteStatement (Maybe Text)

-- | The name of the database schema.
--   
--   Currently, the <tt>schema</tt> parameter isn't supported.
executeStatement_schema :: Lens' ExecuteStatement (Maybe Text)

-- | The parameters for the SQL statement.
--   
--   Array parameters are not supported.
executeStatement_parameters :: Lens' ExecuteStatement (Maybe [SqlParameter])

-- | A value that indicates whether to include metadata in the results.
executeStatement_includeResultMetadata :: Lens' ExecuteStatement (Maybe Bool)

-- | Options that control how the result set is returned.
executeStatement_resultSetOptions :: Lens' ExecuteStatement (Maybe ResultSetOptions)

-- | A value that indicates whether to continue running the statement after
--   the call times out. By default, the statement stops running when the
--   call times out.
--   
--   For DDL statements, we recommend continuing to run the statement after
--   the call times out. When a DDL statement terminates before it is
--   finished running, it can result in errors and possibly corrupted data
--   structures.
executeStatement_continueAfterTimeout :: Lens' ExecuteStatement (Maybe Bool)

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
executeStatement_resourceArn :: Lens' ExecuteStatement Text

-- | The name or ARN of the secret that enables access to the DB cluster.
executeStatement_secretArn :: Lens' ExecuteStatement Text

-- | The SQL statement to run.
executeStatement_sql :: Lens' ExecuteStatement Text

-- | The records returned by the SQL statement.
executeStatementResponse_records :: Lens' ExecuteStatementResponse (Maybe [[Field]])

-- | Metadata for the columns included in the results.
executeStatementResponse_columnMetadata :: Lens' ExecuteStatementResponse (Maybe [ColumnMetadata])

-- | Values for fields generated during the request.
--   
--   <pre>
--   &lt;note&gt; &lt;p&gt;The &lt;code&gt;generatedFields&lt;/code&gt; data isn't supported by Aurora PostgreSQL. To get the values of generated fields, use the &lt;code&gt;RETURNING&lt;/code&gt; clause. For more information, see &lt;a href="https://www.postgresql.org/docs/10/dml-returning.html"&gt;Returning Data From Modified Rows&lt;/a&gt; in the PostgreSQL documentation.&lt;/p&gt; &lt;/note&gt;
--   </pre>
executeStatementResponse_generatedFields :: Lens' ExecuteStatementResponse (Maybe [Field])

-- | The number of records updated by the request.
executeStatementResponse_numberOfRecordsUpdated :: Lens' ExecuteStatementResponse (Maybe Integer)

-- | The response's http status code.
executeStatementResponse_httpStatus :: Lens' ExecuteStatementResponse Int

-- | The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
commitTransaction_resourceArn :: Lens' CommitTransaction Text

-- | The name or ARN of the secret that enables access to the DB cluster.
commitTransaction_secretArn :: Lens' CommitTransaction Text

-- | The identifier of the transaction to end and commit.
commitTransaction_transactionId :: Lens' CommitTransaction Text

-- | The status of the commit operation.
commitTransactionResponse_transactionStatus :: Lens' CommitTransactionResponse (Maybe Text)

-- | The response's http status code.
commitTransactionResponse_httpStatus :: Lens' CommitTransactionResponse Int

-- | An array of floating point numbers.
arrayValue_longValues :: Lens' ArrayValue (Maybe [Integer])

-- | An array of integers.
arrayValue_doubleValues :: Lens' ArrayValue (Maybe [Double])

-- | An array of strings.
arrayValue_stringValues :: Lens' ArrayValue (Maybe [Text])

-- | An array of arrays.
arrayValue_arrayValues :: Lens' ArrayValue (Maybe [ArrayValue])

-- | An array of Boolean values.
arrayValue_booleanValues :: Lens' ArrayValue (Maybe [Bool])

-- | The database-specific data type of the column.
columnMetadata_typeName :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column is case-sensitive.
columnMetadata_isCaseSensitive :: Lens' ColumnMetadata (Maybe Bool)

-- | A value that indicates whether the column contains currency values.
columnMetadata_isCurrency :: Lens' ColumnMetadata (Maybe Bool)

-- | The scale value of a decimal number column.
columnMetadata_scale :: Lens' ColumnMetadata (Maybe Int)

-- | The precision value of a decimal number column.
columnMetadata_precision :: Lens' ColumnMetadata (Maybe Int)

-- | The name of the schema that owns the table that includes the column.
columnMetadata_schemaName :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column increments automatically.
columnMetadata_isAutoIncrement :: Lens' ColumnMetadata (Maybe Bool)

-- | The name of the column.
columnMetadata_name :: Lens' ColumnMetadata (Maybe Text)

-- | The type of the column.
columnMetadata_arrayBaseColumnType :: Lens' ColumnMetadata (Maybe Int)

-- | The type of the column.
columnMetadata_type :: Lens' ColumnMetadata (Maybe Int)

-- | A value that indicates whether an integer column is signed.
columnMetadata_isSigned :: Lens' ColumnMetadata (Maybe Bool)

-- | The label for the column.
columnMetadata_label :: Lens' ColumnMetadata (Maybe Text)

-- | A value that indicates whether the column is nullable.
columnMetadata_nullable :: Lens' ColumnMetadata (Maybe Int)

-- | The name of the table that includes the column.
columnMetadata_tableName :: Lens' ColumnMetadata (Maybe Text)

-- | A value of double data type.
field_doubleValue :: Lens' Field (Maybe Double)

-- | A value of string data type.
field_stringValue :: Lens' Field (Maybe Text)

-- | A value of long data type.
field_longValue :: Lens' Field (Maybe Integer)

-- | A value of Boolean data type.
field_booleanValue :: Lens' Field (Maybe Bool)

-- | An array of values.
field_arrayValue :: Lens' Field (Maybe ArrayValue)

-- | A value of BLOB data type.-- -- <i>Note:</i> This <tt>Lens</tt>
--   automatically encodes and decodes Base64 data. -- The underlying
--   isomorphism will encode to Base64 representation during --
--   serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
field_blobValue :: Lens' Field (Maybe ByteString)

-- | A NULL value.
field_isNull :: Lens' Field (Maybe Bool)

-- | A value that indicates how a field of <tt>DECIMAL</tt> type is
--   represented in the response. The value of <tt>STRING</tt>, the
--   default, specifies that it is converted to a String value. The value
--   of <tt>DOUBLE_OR_LONG</tt> specifies that it is converted to a Long
--   value if its scale is 0, or to a Double value otherwise.
--   
--   Conversion to Double or Long can result in roundoff errors due to
--   precision loss. We recommend converting to String, especially when
--   working with currency values.
resultSetOptions_decimalReturnType :: Lens' ResultSetOptions (Maybe DecimalReturnType)

-- | The value of the parameter.
sqlParameter_value :: Lens' SqlParameter (Maybe Field)

-- | The name of the parameter.
sqlParameter_name :: Lens' SqlParameter (Maybe Text)

-- | A hint that specifies the correct object type for data type mapping.
--   Possible values are as follows:
--   
--   <ul>
--   <li><tt>DATE</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>DATE</tt> type to the database. The
--   accepted format is <tt>YYYY-MM-DD</tt>.</li>
--   <li><tt>DECIMAL</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>DECIMAL</tt> type to the
--   database.</li>
--   <li><tt>JSON</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>JSON</tt> type to the database.</li>
--   <li><tt>TIME</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>TIME</tt> type to the database. The
--   accepted format is <tt>HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>TIMESTAMP</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>TIMESTAMP</tt> type to the database.
--   The accepted format is <tt>YYYY-MM-DD HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>UUID</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>UUID</tt> type to the database.</li>
--   </ul>
sqlParameter_typeHint :: Lens' SqlParameter (Maybe TypeHint)

-- | Values for fields generated during the request.
updateResult_generatedFields :: Lens' UpdateResult (Maybe [Field])


module Network.AWS.RDSData.Waiters


-- | Derived from API version <tt>2018-08-01</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon RDS Data Service
--   
--   Amazon RDS provides an HTTP endpoint to run SQL statements on an
--   Amazon Aurora Serverless DB cluster. To run these statements, you work
--   with the Data Service API.
--   
--   For more information about the Data Service API, see <a>Using the Data
--   API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.
module Network.AWS.RDSData

-- | API version <tt>2018-08-01</tt> of the Amazon RDS DataService SDK
--   configuration.
defaultService :: Service

-- | The execution of the SQL statement timed out.
_StatementTimeoutException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There are insufficient privileges to make the call.
_ForbiddenException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The <tt>resourceArn</tt>, <tt>secretArn</tt>, or
--   <tt>transactionId</tt> value can't be found.
_NotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The service specified by the <tt>resourceArn</tt> parameter is not
--   available.
_ServiceUnavailableError :: AsError a => Getting (First ServiceError) a ServiceError

-- | An internal error occurred.
_InternalServerErrorException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is an error in the call or in a SQL statement.
_BadRequestException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request parameters represent the input of a request to perform a
--   rollback of a transaction.
--   
--   <i>See:</i> <a>newRollbackTransaction</a> smart constructor.
data RollbackTransaction
RollbackTransaction' :: Text -> Text -> Text -> RollbackTransaction

-- | Create a value of <a>RollbackTransaction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:RollbackTransaction'</a>,
--   <a>rollbackTransaction_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the Aurora Serverless DB cluster.
--   
--   <a>$sel:secretArn:RollbackTransaction'</a>,
--   <a>rollbackTransaction_secretArn</a> - The name or ARN of the secret
--   that enables access to the DB cluster.
--   
--   <a>$sel:transactionId:RollbackTransaction'</a>,
--   <a>rollbackTransaction_transactionId</a> - The identifier of the
--   transaction to roll back.
newRollbackTransaction :: Text -> Text -> Text -> RollbackTransaction

-- | The response elements represent the output of a request to perform a
--   rollback of a transaction.
--   
--   <i>See:</i> <a>newRollbackTransactionResponse</a> smart constructor.
data RollbackTransactionResponse
RollbackTransactionResponse' :: Maybe Text -> Int -> RollbackTransactionResponse

-- | Create a value of <a>RollbackTransactionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:transactionStatus:RollbackTransactionResponse'</a>,
--   <a>rollbackTransactionResponse_transactionStatus</a> - The status of
--   the rollback operation.
--   
--   <a>$sel:httpStatus:RollbackTransactionResponse'</a>,
--   <a>rollbackTransactionResponse_httpStatus</a> - The response's http
--   status code.
newRollbackTransactionResponse :: Int -> RollbackTransactionResponse

-- | The request parameters represent the input of a request to start a SQL
--   transaction.
--   
--   <i>See:</i> <a>newBeginTransaction</a> smart constructor.
data BeginTransaction
BeginTransaction' :: Maybe Text -> Maybe Text -> Text -> Text -> BeginTransaction

-- | Create a value of <a>BeginTransaction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:database:BeginTransaction'</a>,
--   <a>beginTransaction_database</a> - The name of the database.
--   
--   <a>$sel:schema:BeginTransaction'</a>, <a>beginTransaction_schema</a> -
--   The name of the database schema.
--   
--   <a>$sel:resourceArn:BeginTransaction'</a>,
--   <a>beginTransaction_resourceArn</a> - The Amazon Resource Name (ARN)
--   of the Aurora Serverless DB cluster.
--   
--   <a>$sel:secretArn:BeginTransaction'</a>,
--   <a>beginTransaction_secretArn</a> - The name or ARN of the secret that
--   enables access to the DB cluster.
newBeginTransaction :: Text -> Text -> BeginTransaction

-- | The response elements represent the output of a request to start a SQL
--   transaction.
--   
--   <i>See:</i> <a>newBeginTransactionResponse</a> smart constructor.
data BeginTransactionResponse
BeginTransactionResponse' :: Maybe Text -> Int -> BeginTransactionResponse

-- | Create a value of <a>BeginTransactionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:transactionId:BeginTransactionResponse'</a>,
--   <a>beginTransactionResponse_transactionId</a> - The transaction ID of
--   the transaction started by the call.
--   
--   <a>$sel:httpStatus:BeginTransactionResponse'</a>,
--   <a>beginTransactionResponse_httpStatus</a> - The response's http
--   status code.
newBeginTransactionResponse :: Int -> BeginTransactionResponse

-- | The request parameters represent the input of a SQL statement over an
--   array of data.
--   
--   <i>See:</i> <a>newBatchExecuteStatement</a> smart constructor.
data BatchExecuteStatement
BatchExecuteStatement' :: Maybe Text -> Maybe [[SqlParameter]] -> Maybe Text -> Maybe Text -> Text -> Text -> Text -> BatchExecuteStatement

-- | Create a value of <a>BatchExecuteStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:database:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_database</a> - The name of the database.
--   
--   <a>$sel:parameterSets:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_parameterSets</a> - The parameter set for the
--   batch operation.
--   
--   The SQL statement is executed as many times as the number of parameter
--   sets provided. To execute a SQL statement with no parameters, use one
--   of the following options:
--   
--   <ul>
--   <li>Specify one or more empty parameter sets.</li>
--   <li>Use the <tt>ExecuteStatement</tt> operation instead of the
--   <tt>BatchExecuteStatement</tt> operation.</li>
--   </ul>
--   
--   Array parameters are not supported.
--   
--   <a>$sel:transactionId:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_transactionId</a> - The identifier of a
--   transaction that was started by using the <tt>BeginTransaction</tt>
--   operation. Specify the transaction ID of the transaction that you want
--   to include the SQL statement in.
--   
--   If the SQL statement is not part of a transaction, don't set this
--   parameter.
--   
--   <a>$sel:schema:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_schema</a> - The name of the database schema.
--   
--   <a>$sel:resourceArn:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the Aurora Serverless DB cluster.
--   
--   <a>$sel:secretArn:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_secretArn</a> - The name or ARN of the secret
--   that enables access to the DB cluster.
--   
--   <a>$sel:sql:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_sql</a> - The SQL statement to run.
newBatchExecuteStatement :: Text -> Text -> Text -> BatchExecuteStatement

-- | The response elements represent the output of a SQL statement over an
--   array of data.
--   
--   <i>See:</i> <a>newBatchExecuteStatementResponse</a> smart constructor.
data BatchExecuteStatementResponse
BatchExecuteStatementResponse' :: Maybe [UpdateResult] -> Int -> BatchExecuteStatementResponse

-- | Create a value of <a>BatchExecuteStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:updateResults:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_updateResults</a> - The execution
--   results of each batch entry.
--   
--   <a>$sel:httpStatus:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_httpStatus</a> - The response's http
--   status code.
newBatchExecuteStatementResponse :: Int -> BatchExecuteStatementResponse

-- | The request parameters represent the input of a request to run a SQL
--   statement against a database.
--   
--   <i>See:</i> <a>newExecuteStatement</a> smart constructor.
data ExecuteStatement
ExecuteStatement' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe [SqlParameter] -> Maybe Bool -> Maybe ResultSetOptions -> Maybe Bool -> Text -> Text -> Text -> ExecuteStatement

-- | Create a value of <a>ExecuteStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:database:ExecuteStatement'</a>,
--   <a>executeStatement_database</a> - The name of the database.
--   
--   <a>$sel:transactionId:ExecuteStatement'</a>,
--   <a>executeStatement_transactionId</a> - The identifier of a
--   transaction that was started by using the <tt>BeginTransaction</tt>
--   operation. Specify the transaction ID of the transaction that you want
--   to include the SQL statement in.
--   
--   If the SQL statement is not part of a transaction, don't set this
--   parameter.
--   
--   <a>$sel:schema:ExecuteStatement'</a>, <a>executeStatement_schema</a> -
--   The name of the database schema.
--   
--   Currently, the <tt>schema</tt> parameter isn't supported.
--   
--   <a>$sel:parameters:ExecuteStatement'</a>,
--   <a>executeStatement_parameters</a> - The parameters for the SQL
--   statement.
--   
--   Array parameters are not supported.
--   
--   <a>$sel:includeResultMetadata:ExecuteStatement'</a>,
--   <a>executeStatement_includeResultMetadata</a> - A value that indicates
--   whether to include metadata in the results.
--   
--   <a>$sel:resultSetOptions:ExecuteStatement'</a>,
--   <a>executeStatement_resultSetOptions</a> - Options that control how
--   the result set is returned.
--   
--   <a>$sel:continueAfterTimeout:ExecuteStatement'</a>,
--   <a>executeStatement_continueAfterTimeout</a> - A value that indicates
--   whether to continue running the statement after the call times out. By
--   default, the statement stops running when the call times out.
--   
--   For DDL statements, we recommend continuing to run the statement after
--   the call times out. When a DDL statement terminates before it is
--   finished running, it can result in errors and possibly corrupted data
--   structures.
--   
--   <a>$sel:resourceArn:ExecuteStatement'</a>,
--   <a>executeStatement_resourceArn</a> - The Amazon Resource Name (ARN)
--   of the Aurora Serverless DB cluster.
--   
--   <a>$sel:secretArn:ExecuteStatement'</a>,
--   <a>executeStatement_secretArn</a> - The name or ARN of the secret that
--   enables access to the DB cluster.
--   
--   <a>$sel:sql:ExecuteStatement'</a>, <a>executeStatement_sql</a> - The
--   SQL statement to run.
newExecuteStatement :: Text -> Text -> Text -> ExecuteStatement

-- | The response elements represent the output of a request to run a SQL
--   statement against a database.
--   
--   <i>See:</i> <a>newExecuteStatementResponse</a> smart constructor.
data ExecuteStatementResponse
ExecuteStatementResponse' :: Maybe [[Field]] -> Maybe [ColumnMetadata] -> Maybe [Field] -> Maybe Integer -> Int -> ExecuteStatementResponse

-- | Create a value of <a>ExecuteStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:records:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_records</a> - The records returned by the
--   SQL statement.
--   
--   <a>$sel:columnMetadata:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_columnMetadata</a> - Metadata for the
--   columns included in the results.
--   
--   <a>$sel:generatedFields:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_generatedFields</a> - Values for fields
--   generated during the request.
--   
--   <pre>
--   &lt;note&gt; &lt;p&gt;The &lt;code&gt;generatedFields&lt;/code&gt; data isn't supported by Aurora PostgreSQL. To get the values of generated fields, use the &lt;code&gt;RETURNING&lt;/code&gt; clause. For more information, see &lt;a href="https://www.postgresql.org/docs/10/dml-returning.html"&gt;Returning Data From Modified Rows&lt;/a&gt; in the PostgreSQL documentation.&lt;/p&gt; &lt;/note&gt;
--   </pre>
--   
--   <a>$sel:numberOfRecordsUpdated:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_numberOfRecordsUpdated</a> - The number of
--   records updated by the request.
--   
--   <a>$sel:httpStatus:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_httpStatus</a> - The response's http
--   status code.
newExecuteStatementResponse :: Int -> ExecuteStatementResponse

-- | The request parameters represent the input of a commit transaction
--   request.
--   
--   <i>See:</i> <a>newCommitTransaction</a> smart constructor.
data CommitTransaction
CommitTransaction' :: Text -> Text -> Text -> CommitTransaction

-- | Create a value of <a>CommitTransaction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:CommitTransaction'</a>,
--   <a>commitTransaction_resourceArn</a> - The Amazon Resource Name (ARN)
--   of the Aurora Serverless DB cluster.
--   
--   <a>$sel:secretArn:CommitTransaction'</a>,
--   <a>commitTransaction_secretArn</a> - The name or ARN of the secret
--   that enables access to the DB cluster.
--   
--   <a>$sel:transactionId:CommitTransaction'</a>,
--   <a>commitTransaction_transactionId</a> - The identifier of the
--   transaction to end and commit.
newCommitTransaction :: Text -> Text -> Text -> CommitTransaction

-- | The response elements represent the output of a commit transaction
--   request.
--   
--   <i>See:</i> <a>newCommitTransactionResponse</a> smart constructor.
data CommitTransactionResponse
CommitTransactionResponse' :: Maybe Text -> Int -> CommitTransactionResponse

-- | Create a value of <a>CommitTransactionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:transactionStatus:CommitTransactionResponse'</a>,
--   <a>commitTransactionResponse_transactionStatus</a> - The status of the
--   commit operation.
--   
--   <a>$sel:httpStatus:CommitTransactionResponse'</a>,
--   <a>commitTransactionResponse_httpStatus</a> - The response's http
--   status code.
newCommitTransactionResponse :: Int -> CommitTransactionResponse
newtype DecimalReturnType
DecimalReturnType' :: Text -> DecimalReturnType
[fromDecimalReturnType] :: DecimalReturnType -> Text
pattern DecimalReturnType_DOUBLE_OR_LONG :: DecimalReturnType
pattern DecimalReturnType_STRING :: DecimalReturnType
newtype TypeHint
TypeHint' :: Text -> TypeHint
[fromTypeHint] :: TypeHint -> Text
pattern TypeHint_DATE :: TypeHint
pattern TypeHint_DECIMAL :: TypeHint
pattern TypeHint_JSON :: TypeHint
pattern TypeHint_TIME :: TypeHint
pattern TypeHint_TIMESTAMP :: TypeHint
pattern TypeHint_UUID :: TypeHint

-- | Contains an array.
--   
--   <i>See:</i> <a>newArrayValue</a> smart constructor.
data ArrayValue
ArrayValue' :: Maybe [Integer] -> Maybe [Double] -> Maybe [Text] -> Maybe [ArrayValue] -> Maybe [Bool] -> ArrayValue

-- | Create a value of <a>ArrayValue</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:longValues:ArrayValue'</a>, <a>arrayValue_longValues</a> - An
--   array of floating point numbers.
--   
--   <a>$sel:doubleValues:ArrayValue'</a>, <a>arrayValue_doubleValues</a> -
--   An array of integers.
--   
--   <a>$sel:stringValues:ArrayValue'</a>, <a>arrayValue_stringValues</a> -
--   An array of strings.
--   
--   <a>$sel:arrayValues:ArrayValue'</a>, <a>arrayValue_arrayValues</a> -
--   An array of arrays.
--   
--   <a>$sel:booleanValues:ArrayValue'</a>, <a>arrayValue_booleanValues</a>
--   - An array of Boolean values.
newArrayValue :: ArrayValue

-- | Contains the metadata for a column.
--   
--   <i>See:</i> <a>newColumnMetadata</a> smart constructor.
data ColumnMetadata
ColumnMetadata' :: Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe Text -> ColumnMetadata

-- | Create a value of <a>ColumnMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:typeName:ColumnMetadata'</a>, <a>columnMetadata_typeName</a> -
--   The database-specific data type of the column.
--   
--   <a>$sel:isCaseSensitive:ColumnMetadata'</a>,
--   <a>columnMetadata_isCaseSensitive</a> - A value that indicates whether
--   the column is case-sensitive.
--   
--   <a>$sel:isCurrency:ColumnMetadata'</a>,
--   <a>columnMetadata_isCurrency</a> - A value that indicates whether the
--   column contains currency values.
--   
--   <a>$sel:scale:ColumnMetadata'</a>, <a>columnMetadata_scale</a> - The
--   scale value of a decimal number column.
--   
--   <a>$sel:precision:ColumnMetadata'</a>, <a>columnMetadata_precision</a>
--   - The precision value of a decimal number column.
--   
--   <a>$sel:schemaName:ColumnMetadata'</a>,
--   <a>columnMetadata_schemaName</a> - The name of the schema that owns
--   the table that includes the column.
--   
--   <a>$sel:isAutoIncrement:ColumnMetadata'</a>,
--   <a>columnMetadata_isAutoIncrement</a> - A value that indicates whether
--   the column increments automatically.
--   
--   <a>$sel:name:ColumnMetadata'</a>, <a>columnMetadata_name</a> - The
--   name of the column.
--   
--   <a>$sel:arrayBaseColumnType:ColumnMetadata'</a>,
--   <a>columnMetadata_arrayBaseColumnType</a> - The type of the column.
--   
--   <a>$sel:type':ColumnMetadata'</a>, <a>columnMetadata_type</a> - The
--   type of the column.
--   
--   <a>$sel:isSigned:ColumnMetadata'</a>, <a>columnMetadata_isSigned</a> -
--   A value that indicates whether an integer column is signed.
--   
--   <a>$sel:label:ColumnMetadata'</a>, <a>columnMetadata_label</a> - The
--   label for the column.
--   
--   <a>$sel:nullable:ColumnMetadata'</a>, <a>columnMetadata_nullable</a> -
--   A value that indicates whether the column is nullable.
--   
--   <a>$sel:tableName:ColumnMetadata'</a>, <a>columnMetadata_tableName</a>
--   - The name of the table that includes the column.
newColumnMetadata :: ColumnMetadata

-- | Contains a value.
--   
--   <i>See:</i> <a>newField</a> smart constructor.
data Field
Field' :: Maybe Double -> Maybe Text -> Maybe Integer -> Maybe Bool -> Maybe ArrayValue -> Maybe Base64 -> Maybe Bool -> Field

-- | Create a value of <a>Field</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:doubleValue:Field'</a>, <a>field_doubleValue</a> - A value of
--   double data type.
--   
--   <a>$sel:stringValue:Field'</a>, <a>field_stringValue</a> - A value of
--   string data type.
--   
--   <a>$sel:longValue:Field'</a>, <a>field_longValue</a> - A value of long
--   data type.
--   
--   <a>$sel:booleanValue:Field'</a>, <a>field_booleanValue</a> - A value
--   of Boolean data type.
--   
--   <a>$sel:arrayValue:Field'</a>, <a>field_arrayValue</a> - An array of
--   values.
--   
--   <a>$sel:blobValue:Field'</a>, <a>field_blobValue</a> - A value of BLOB
--   data type.-- -- <i>Note:</i> This <tt>Lens</tt> automatically encodes
--   and decodes Base64 data. -- The underlying isomorphism will encode to
--   Base64 representation during -- serialisation, and decode from Base64
--   representation during deserialisation. -- This <tt>Lens</tt> accepts
--   and returns only raw unencoded data.
--   
--   <a>$sel:isNull:Field'</a>, <a>field_isNull</a> - A NULL value.
newField :: Field

-- | Options that control how the result set is returned.
--   
--   <i>See:</i> <a>newResultSetOptions</a> smart constructor.
data ResultSetOptions
ResultSetOptions' :: Maybe DecimalReturnType -> ResultSetOptions

-- | Create a value of <a>ResultSetOptions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:decimalReturnType:ResultSetOptions'</a>,
--   <a>resultSetOptions_decimalReturnType</a> - A value that indicates how
--   a field of <tt>DECIMAL</tt> type is represented in the response. The
--   value of <tt>STRING</tt>, the default, specifies that it is converted
--   to a String value. The value of <tt>DOUBLE_OR_LONG</tt> specifies that
--   it is converted to a Long value if its scale is 0, or to a Double
--   value otherwise.
--   
--   Conversion to Double or Long can result in roundoff errors due to
--   precision loss. We recommend converting to String, especially when
--   working with currency values.
newResultSetOptions :: ResultSetOptions

-- | A parameter used in a SQL statement.
--   
--   <i>See:</i> <a>newSqlParameter</a> smart constructor.
data SqlParameter
SqlParameter' :: Maybe Field -> Maybe Text -> Maybe TypeHint -> SqlParameter

-- | Create a value of <a>SqlParameter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:SqlParameter'</a>, <a>sqlParameter_value</a> - The value
--   of the parameter.
--   
--   <a>$sel:name:SqlParameter'</a>, <a>sqlParameter_name</a> - The name of
--   the parameter.
--   
--   <a>$sel:typeHint:SqlParameter'</a>, <a>sqlParameter_typeHint</a> - A
--   hint that specifies the correct object type for data type mapping.
--   Possible values are as follows:
--   
--   <ul>
--   <li><tt>DATE</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>DATE</tt> type to the database. The
--   accepted format is <tt>YYYY-MM-DD</tt>.</li>
--   <li><tt>DECIMAL</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>DECIMAL</tt> type to the
--   database.</li>
--   <li><tt>JSON</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>JSON</tt> type to the database.</li>
--   <li><tt>TIME</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>TIME</tt> type to the database. The
--   accepted format is <tt>HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>TIMESTAMP</tt> - The corresponding <tt>String</tt> parameter
--   value is sent as an object of <tt>TIMESTAMP</tt> type to the database.
--   The accepted format is <tt>YYYY-MM-DD HH:MM:SS[.FFF]</tt>.</li>
--   <li><tt>UUID</tt> - The corresponding <tt>String</tt> parameter value
--   is sent as an object of <tt>UUID</tt> type to the database.</li>
--   </ul>
newSqlParameter :: SqlParameter

-- | The response elements represent the results of an update.
--   
--   <i>See:</i> <a>newUpdateResult</a> smart constructor.
data UpdateResult
UpdateResult' :: Maybe [Field] -> UpdateResult

-- | Create a value of <a>UpdateResult</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:generatedFields:UpdateResult'</a>,
--   <a>updateResult_generatedFields</a> - Values for fields generated
--   during the request.
newUpdateResult :: UpdateResult
