-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-license-managerZSamazonka-license-manager
@version 2.0


module Amazonka.LicenseManager.Types.AllowedOperation
newtype AllowedOperation
AllowedOperation' :: Text -> AllowedOperation
[fromAllowedOperation] :: AllowedOperation -> Text
pattern AllowedOperation_CheckInLicense :: AllowedOperation
pattern AllowedOperation_CheckoutBorrowLicense :: AllowedOperation
pattern AllowedOperation_CheckoutLicense :: AllowedOperation
pattern AllowedOperation_CreateGrant :: AllowedOperation
pattern AllowedOperation_CreateToken :: AllowedOperation
pattern AllowedOperation_ExtendConsumptionLicense :: AllowedOperation
pattern AllowedOperation_ListPurchasedLicenses :: AllowedOperation
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance GHC.Read.Read Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation
instance GHC.Show.Show Amazonka.LicenseManager.Types.AllowedOperation.AllowedOperation


module Amazonka.LicenseManager.Types.AutomatedDiscoveryInformation

-- | Describes automated discovery.
--   
--   <i>See:</i> <a>newAutomatedDiscoveryInformation</a> smart constructor.
data AutomatedDiscoveryInformation
AutomatedDiscoveryInformation' :: Maybe POSIX -> AutomatedDiscoveryInformation

-- | Time that automated discovery last ran.
[$sel:lastRunTime:AutomatedDiscoveryInformation'] :: AutomatedDiscoveryInformation -> Maybe POSIX

-- | Create a value of <a>AutomatedDiscoveryInformation</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastRunTime:AutomatedDiscoveryInformation'</a>,
--   <a>automatedDiscoveryInformation_lastRunTime</a> - Time that automated
--   discovery last ran.
newAutomatedDiscoveryInformation :: AutomatedDiscoveryInformation

-- | Time that automated discovery last ran.
automatedDiscoveryInformation_lastRunTime :: Lens' AutomatedDiscoveryInformation (Maybe UTCTime)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.AutomatedDiscoveryInformation.AutomatedDiscoveryInformation
instance GHC.Show.Show Amazonka.LicenseManager.Types.AutomatedDiscoveryInformation.AutomatedDiscoveryInformation
instance GHC.Read.Read Amazonka.LicenseManager.Types.AutomatedDiscoveryInformation.AutomatedDiscoveryInformation
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.AutomatedDiscoveryInformation.AutomatedDiscoveryInformation
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.AutomatedDiscoveryInformation.AutomatedDiscoveryInformation
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.AutomatedDiscoveryInformation.AutomatedDiscoveryInformation
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.AutomatedDiscoveryInformation.AutomatedDiscoveryInformation


module Amazonka.LicenseManager.Types.BorrowConfiguration

-- | Details about a borrow configuration.
--   
--   <i>See:</i> <a>newBorrowConfiguration</a> smart constructor.
data BorrowConfiguration
BorrowConfiguration' :: Bool -> Int -> BorrowConfiguration

-- | Indicates whether early check-ins are allowed.
[$sel:allowEarlyCheckIn:BorrowConfiguration'] :: BorrowConfiguration -> Bool

-- | Maximum time for the borrow configuration, in minutes.
[$sel:maxTimeToLiveInMinutes:BorrowConfiguration'] :: BorrowConfiguration -> Int

-- | Create a value of <a>BorrowConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:allowEarlyCheckIn:BorrowConfiguration'</a>,
--   <a>borrowConfiguration_allowEarlyCheckIn</a> - Indicates whether early
--   check-ins are allowed.
--   
--   <a>$sel:maxTimeToLiveInMinutes:BorrowConfiguration'</a>,
--   <a>borrowConfiguration_maxTimeToLiveInMinutes</a> - Maximum time for
--   the borrow configuration, in minutes.
newBorrowConfiguration :: Bool -> Int -> BorrowConfiguration

-- | Indicates whether early check-ins are allowed.
borrowConfiguration_allowEarlyCheckIn :: Lens' BorrowConfiguration Bool

-- | Maximum time for the borrow configuration, in minutes.
borrowConfiguration_maxTimeToLiveInMinutes :: Lens' BorrowConfiguration Int
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.BorrowConfiguration.BorrowConfiguration
instance GHC.Show.Show Amazonka.LicenseManager.Types.BorrowConfiguration.BorrowConfiguration
instance GHC.Read.Read Amazonka.LicenseManager.Types.BorrowConfiguration.BorrowConfiguration
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.BorrowConfiguration.BorrowConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.BorrowConfiguration.BorrowConfiguration
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.BorrowConfiguration.BorrowConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.BorrowConfiguration.BorrowConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.BorrowConfiguration.BorrowConfiguration


module Amazonka.LicenseManager.Types.CheckoutType
newtype CheckoutType
CheckoutType' :: Text -> CheckoutType
[fromCheckoutType] :: CheckoutType -> Text
pattern CheckoutType_PERPETUAL :: CheckoutType
pattern CheckoutType_PROVISIONAL :: CheckoutType
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance GHC.Read.Read Amazonka.LicenseManager.Types.CheckoutType.CheckoutType
instance GHC.Show.Show Amazonka.LicenseManager.Types.CheckoutType.CheckoutType


module Amazonka.LicenseManager.Types.DatetimeRange

-- | Describes a time range, in ISO8601-UTC format.
--   
--   <i>See:</i> <a>newDatetimeRange</a> smart constructor.
data DatetimeRange
DatetimeRange' :: Maybe Text -> Text -> DatetimeRange

-- | End of the time range.
[$sel:end:DatetimeRange'] :: DatetimeRange -> Maybe Text

-- | Start of the time range.
[$sel:begin:DatetimeRange'] :: DatetimeRange -> Text

-- | Create a value of <a>DatetimeRange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:end:DatetimeRange'</a>, <a>datetimeRange_end</a> - End of the
--   time range.
--   
--   <a>$sel:begin:DatetimeRange'</a>, <a>datetimeRange_begin</a> - Start
--   of the time range.
newDatetimeRange :: Text -> DatetimeRange

-- | End of the time range.
datetimeRange_end :: Lens' DatetimeRange (Maybe Text)

-- | Start of the time range.
datetimeRange_begin :: Lens' DatetimeRange Text
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.DatetimeRange.DatetimeRange
instance GHC.Show.Show Amazonka.LicenseManager.Types.DatetimeRange.DatetimeRange
instance GHC.Read.Read Amazonka.LicenseManager.Types.DatetimeRange.DatetimeRange
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.DatetimeRange.DatetimeRange
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.DatetimeRange.DatetimeRange
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.DatetimeRange.DatetimeRange
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.DatetimeRange.DatetimeRange
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.DatetimeRange.DatetimeRange


module Amazonka.LicenseManager.Types.DigitalSignatureMethod
newtype DigitalSignatureMethod
DigitalSignatureMethod' :: Text -> DigitalSignatureMethod
[fromDigitalSignatureMethod] :: DigitalSignatureMethod -> Text
pattern DigitalSignatureMethod_JWT_PS384 :: DigitalSignatureMethod
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance GHC.Read.Read Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod
instance GHC.Show.Show Amazonka.LicenseManager.Types.DigitalSignatureMethod.DigitalSignatureMethod


module Amazonka.LicenseManager.Types.EntitlementDataUnit
newtype EntitlementDataUnit
EntitlementDataUnit' :: Text -> EntitlementDataUnit
[fromEntitlementDataUnit] :: EntitlementDataUnit -> Text
pattern EntitlementDataUnit_Bits :: EntitlementDataUnit
pattern EntitlementDataUnit_Bits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Bytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Bytes_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Count :: EntitlementDataUnit
pattern EntitlementDataUnit_Count_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Gigabits :: EntitlementDataUnit
pattern EntitlementDataUnit_Gigabits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Gigabytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Gigabytes_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Kilobits :: EntitlementDataUnit
pattern EntitlementDataUnit_Kilobits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Kilobytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Kilobytes_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Megabits :: EntitlementDataUnit
pattern EntitlementDataUnit_Megabits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Megabytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Megabytes_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Microseconds :: EntitlementDataUnit
pattern EntitlementDataUnit_Milliseconds :: EntitlementDataUnit
pattern EntitlementDataUnit_None :: EntitlementDataUnit
pattern EntitlementDataUnit_Percent :: EntitlementDataUnit
pattern EntitlementDataUnit_Seconds :: EntitlementDataUnit
pattern EntitlementDataUnit_Terabits :: EntitlementDataUnit
pattern EntitlementDataUnit_Terabits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Terabytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Terabytes_Second :: EntitlementDataUnit
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance GHC.Read.Read Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit
instance GHC.Show.Show Amazonka.LicenseManager.Types.EntitlementDataUnit.EntitlementDataUnit


module Amazonka.LicenseManager.Types.EntitlementData

-- | Data associated with an entitlement resource.
--   
--   <i>See:</i> <a>newEntitlementData</a> smart constructor.
data EntitlementData
EntitlementData' :: Maybe Text -> Text -> EntitlementDataUnit -> EntitlementData

-- | Entitlement data value.
[$sel:value:EntitlementData'] :: EntitlementData -> Maybe Text

-- | Entitlement data name.
[$sel:name:EntitlementData'] :: EntitlementData -> Text

-- | Entitlement data unit.
[$sel:unit:EntitlementData'] :: EntitlementData -> EntitlementDataUnit

-- | Create a value of <a>EntitlementData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:EntitlementData'</a>, <a>entitlementData_value</a> -
--   Entitlement data value.
--   
--   <a>$sel:name:EntitlementData'</a>, <a>entitlementData_name</a> -
--   Entitlement data name.
--   
--   <a>$sel:unit:EntitlementData'</a>, <a>entitlementData_unit</a> -
--   Entitlement data unit.
newEntitlementData :: Text -> EntitlementDataUnit -> EntitlementData

-- | Entitlement data value.
entitlementData_value :: Lens' EntitlementData (Maybe Text)

-- | Entitlement data name.
entitlementData_name :: Lens' EntitlementData Text

-- | Entitlement data unit.
entitlementData_unit :: Lens' EntitlementData EntitlementDataUnit
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.EntitlementData.EntitlementData
instance GHC.Show.Show Amazonka.LicenseManager.Types.EntitlementData.EntitlementData
instance GHC.Read.Read Amazonka.LicenseManager.Types.EntitlementData.EntitlementData
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.EntitlementData.EntitlementData
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.EntitlementData.EntitlementData
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.EntitlementData.EntitlementData
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.EntitlementData.EntitlementData
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.EntitlementData.EntitlementData


module Amazonka.LicenseManager.Types.EntitlementUnit
newtype EntitlementUnit
EntitlementUnit' :: Text -> EntitlementUnit
[fromEntitlementUnit] :: EntitlementUnit -> Text
pattern EntitlementUnit_Bits :: EntitlementUnit
pattern EntitlementUnit_Bits_Second :: EntitlementUnit
pattern EntitlementUnit_Bytes :: EntitlementUnit
pattern EntitlementUnit_Bytes_Second :: EntitlementUnit
pattern EntitlementUnit_Count :: EntitlementUnit
pattern EntitlementUnit_Count_Second :: EntitlementUnit
pattern EntitlementUnit_Gigabits :: EntitlementUnit
pattern EntitlementUnit_Gigabits_Second :: EntitlementUnit
pattern EntitlementUnit_Gigabytes :: EntitlementUnit
pattern EntitlementUnit_Gigabytes_Second :: EntitlementUnit
pattern EntitlementUnit_Kilobits :: EntitlementUnit
pattern EntitlementUnit_Kilobits_Second :: EntitlementUnit
pattern EntitlementUnit_Kilobytes :: EntitlementUnit
pattern EntitlementUnit_Kilobytes_Second :: EntitlementUnit
pattern EntitlementUnit_Megabits :: EntitlementUnit
pattern EntitlementUnit_Megabits_Second :: EntitlementUnit
pattern EntitlementUnit_Megabytes :: EntitlementUnit
pattern EntitlementUnit_Megabytes_Second :: EntitlementUnit
pattern EntitlementUnit_Microseconds :: EntitlementUnit
pattern EntitlementUnit_Milliseconds :: EntitlementUnit
pattern EntitlementUnit_None :: EntitlementUnit
pattern EntitlementUnit_Percent :: EntitlementUnit
pattern EntitlementUnit_Seconds :: EntitlementUnit
pattern EntitlementUnit_Terabits :: EntitlementUnit
pattern EntitlementUnit_Terabits_Second :: EntitlementUnit
pattern EntitlementUnit_Terabytes :: EntitlementUnit
pattern EntitlementUnit_Terabytes_Second :: EntitlementUnit
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance GHC.Read.Read Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit
instance GHC.Show.Show Amazonka.LicenseManager.Types.EntitlementUnit.EntitlementUnit


module Amazonka.LicenseManager.Types.Entitlement

-- | Describes a resource entitled for use with a license.
--   
--   <i>See:</i> <a>newEntitlement</a> smart constructor.
data Entitlement
Entitlement' :: Maybe Integer -> Maybe Text -> Maybe Bool -> Maybe Bool -> Text -> EntitlementUnit -> Entitlement

-- | Maximum entitlement count. Use if the unit is not None.
[$sel:maxCount:Entitlement'] :: Entitlement -> Maybe Integer

-- | Entitlement resource. Use only if the unit is None.
[$sel:value:Entitlement'] :: Entitlement -> Maybe Text

-- | Indicates whether overages are allowed.
[$sel:overage:Entitlement'] :: Entitlement -> Maybe Bool

-- | Indicates whether check-ins are allowed.
[$sel:allowCheckIn:Entitlement'] :: Entitlement -> Maybe Bool

-- | Entitlement name.
[$sel:name:Entitlement'] :: Entitlement -> Text

-- | Entitlement unit.
[$sel:unit:Entitlement'] :: Entitlement -> EntitlementUnit

-- | Create a value of <a>Entitlement</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:maxCount:Entitlement'</a>, <a>entitlement_maxCount</a> -
--   Maximum entitlement count. Use if the unit is not None.
--   
--   <a>$sel:value:Entitlement'</a>, <a>entitlement_value</a> - Entitlement
--   resource. Use only if the unit is None.
--   
--   <a>$sel:overage:Entitlement'</a>, <a>entitlement_overage</a> -
--   Indicates whether overages are allowed.
--   
--   <a>$sel:allowCheckIn:Entitlement'</a>, <a>entitlement_allowCheckIn</a>
--   - Indicates whether check-ins are allowed.
--   
--   <a>$sel:name:Entitlement'</a>, <a>entitlement_name</a> - Entitlement
--   name.
--   
--   <a>$sel:unit:Entitlement'</a>, <a>entitlement_unit</a> - Entitlement
--   unit.
newEntitlement :: Text -> EntitlementUnit -> Entitlement

-- | Maximum entitlement count. Use if the unit is not None.
entitlement_maxCount :: Lens' Entitlement (Maybe Integer)

-- | Entitlement resource. Use only if the unit is None.
entitlement_value :: Lens' Entitlement (Maybe Text)

-- | Indicates whether overages are allowed.
entitlement_overage :: Lens' Entitlement (Maybe Bool)

-- | Indicates whether check-ins are allowed.
entitlement_allowCheckIn :: Lens' Entitlement (Maybe Bool)

-- | Entitlement name.
entitlement_name :: Lens' Entitlement Text

-- | Entitlement unit.
entitlement_unit :: Lens' Entitlement EntitlementUnit
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.Entitlement.Entitlement
instance GHC.Show.Show Amazonka.LicenseManager.Types.Entitlement.Entitlement
instance GHC.Read.Read Amazonka.LicenseManager.Types.Entitlement.Entitlement
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.Entitlement.Entitlement
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.Entitlement.Entitlement
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.Entitlement.Entitlement
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.Entitlement.Entitlement
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.Entitlement.Entitlement


module Amazonka.LicenseManager.Types.EntitlementUsage

-- | Usage associated with an entitlement resource.
--   
--   <i>See:</i> <a>newEntitlementUsage</a> smart constructor.
data EntitlementUsage
EntitlementUsage' :: Maybe Text -> Text -> Text -> EntitlementDataUnit -> EntitlementUsage

-- | Maximum entitlement usage count.
[$sel:maxCount:EntitlementUsage'] :: EntitlementUsage -> Maybe Text

-- | Entitlement usage name.
[$sel:name:EntitlementUsage'] :: EntitlementUsage -> Text

-- | Resource usage consumed.
[$sel:consumedValue:EntitlementUsage'] :: EntitlementUsage -> Text

-- | Entitlement usage unit.
[$sel:unit:EntitlementUsage'] :: EntitlementUsage -> EntitlementDataUnit

-- | Create a value of <a>EntitlementUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:maxCount:EntitlementUsage'</a>,
--   <a>entitlementUsage_maxCount</a> - Maximum entitlement usage count.
--   
--   <a>$sel:name:EntitlementUsage'</a>, <a>entitlementUsage_name</a> -
--   Entitlement usage name.
--   
--   <a>$sel:consumedValue:EntitlementUsage'</a>,
--   <a>entitlementUsage_consumedValue</a> - Resource usage consumed.
--   
--   <a>$sel:unit:EntitlementUsage'</a>, <a>entitlementUsage_unit</a> -
--   Entitlement usage unit.
newEntitlementUsage :: Text -> Text -> EntitlementDataUnit -> EntitlementUsage

-- | Maximum entitlement usage count.
entitlementUsage_maxCount :: Lens' EntitlementUsage (Maybe Text)

-- | Entitlement usage name.
entitlementUsage_name :: Lens' EntitlementUsage Text

-- | Resource usage consumed.
entitlementUsage_consumedValue :: Lens' EntitlementUsage Text

-- | Entitlement usage unit.
entitlementUsage_unit :: Lens' EntitlementUsage EntitlementDataUnit
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.EntitlementUsage.EntitlementUsage
instance GHC.Show.Show Amazonka.LicenseManager.Types.EntitlementUsage.EntitlementUsage
instance GHC.Read.Read Amazonka.LicenseManager.Types.EntitlementUsage.EntitlementUsage
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.EntitlementUsage.EntitlementUsage
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.EntitlementUsage.EntitlementUsage
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.EntitlementUsage.EntitlementUsage
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.EntitlementUsage.EntitlementUsage


module Amazonka.LicenseManager.Types.Filter

-- | A filter name and value pair that is used to return more specific
--   results from a describe operation. Filters can be used to match a set
--   of resources by specific criteria, such as tags, attributes, or IDs.
--   
--   <i>See:</i> <a>newFilter</a> smart constructor.
data Filter
Filter' :: Maybe [Text] -> Maybe Text -> Filter

-- | Filter values. Filter values are case-sensitive.
[$sel:values:Filter'] :: Filter -> Maybe [Text]

-- | Name of the filter. Filter names are case-sensitive.
[$sel:name:Filter'] :: Filter -> Maybe Text

-- | Create a value of <a>Filter</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:values:Filter'</a>, <a>filter_values</a> - Filter values.
--   Filter values are case-sensitive.
--   
--   <a>$sel:name:Filter'</a>, <a>filter_name</a> - Name of the filter.
--   Filter names are case-sensitive.
newFilter :: Filter

-- | Filter values. Filter values are case-sensitive.
filter_values :: Lens' Filter (Maybe [Text])

-- | Name of the filter. Filter names are case-sensitive.
filter_name :: Lens' Filter (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.Filter.Filter
instance GHC.Show.Show Amazonka.LicenseManager.Types.Filter.Filter
instance GHC.Read.Read Amazonka.LicenseManager.Types.Filter.Filter
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.Filter.Filter
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.Filter.Filter
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.Filter.Filter
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.Filter.Filter


module Amazonka.LicenseManager.Types.GrantStatus
newtype GrantStatus
GrantStatus' :: Text -> GrantStatus
[fromGrantStatus] :: GrantStatus -> Text
pattern GrantStatus_ACTIVE :: GrantStatus
pattern GrantStatus_DELETED :: GrantStatus
pattern GrantStatus_DISABLED :: GrantStatus
pattern GrantStatus_FAILED_WORKFLOW :: GrantStatus
pattern GrantStatus_PENDING_ACCEPT :: GrantStatus
pattern GrantStatus_PENDING_DELETE :: GrantStatus
pattern GrantStatus_PENDING_WORKFLOW :: GrantStatus
pattern GrantStatus_REJECTED :: GrantStatus
pattern GrantStatus_WORKFLOW_COMPLETED :: GrantStatus
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance GHC.Read.Read Amazonka.LicenseManager.Types.GrantStatus.GrantStatus
instance GHC.Show.Show Amazonka.LicenseManager.Types.GrantStatus.GrantStatus


module Amazonka.LicenseManager.Types.Grant

-- | Describes a grant.
--   
--   <i>See:</i> <a>newGrant</a> smart constructor.
data Grant
Grant' :: Maybe Text -> Text -> Text -> Text -> Text -> Text -> Text -> GrantStatus -> Text -> NonEmpty AllowedOperation -> Grant

-- | Grant status reason.
[$sel:statusReason:Grant'] :: Grant -> Maybe Text

-- | Amazon Resource Name (ARN) of the grant.
[$sel:grantArn:Grant'] :: Grant -> Text

-- | Grant name.
[$sel:grantName:Grant'] :: Grant -> Text

-- | Parent ARN.
[$sel:parentArn:Grant'] :: Grant -> Text

-- | License ARN.
[$sel:licenseArn:Grant'] :: Grant -> Text

-- | The grantee principal ARN.
[$sel:granteePrincipalArn:Grant'] :: Grant -> Text

-- | Home Region of the grant.
[$sel:homeRegion:Grant'] :: Grant -> Text

-- | Grant status.
[$sel:grantStatus:Grant'] :: Grant -> GrantStatus

-- | Grant version.
[$sel:version:Grant'] :: Grant -> Text

-- | Granted operations.
[$sel:grantedOperations:Grant'] :: Grant -> NonEmpty AllowedOperation

-- | Create a value of <a>Grant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statusReason:Grant'</a>, <a>grant_statusReason</a> - Grant
--   status reason.
--   
--   <a>$sel:grantArn:Grant'</a>, <a>grant_grantArn</a> - Amazon Resource
--   Name (ARN) of the grant.
--   
--   <a>$sel:grantName:Grant'</a>, <a>grant_grantName</a> - Grant name.
--   
--   <a>$sel:parentArn:Grant'</a>, <a>grant_parentArn</a> - Parent ARN.
--   
--   <a>$sel:licenseArn:Grant'</a>, <a>grant_licenseArn</a> - License ARN.
--   
--   <a>$sel:granteePrincipalArn:Grant'</a>,
--   <a>grant_granteePrincipalArn</a> - The grantee principal ARN.
--   
--   <a>$sel:homeRegion:Grant'</a>, <a>grant_homeRegion</a> - Home Region
--   of the grant.
--   
--   <a>$sel:grantStatus:Grant'</a>, <a>grant_grantStatus</a> - Grant
--   status.
--   
--   <a>$sel:version:Grant'</a>, <a>grant_version</a> - Grant version.
--   
--   <a>$sel:grantedOperations:Grant'</a>, <a>grant_grantedOperations</a> -
--   Granted operations.
newGrant :: Text -> Text -> Text -> Text -> Text -> Text -> GrantStatus -> Text -> NonEmpty AllowedOperation -> Grant

-- | Grant status reason.
grant_statusReason :: Lens' Grant (Maybe Text)

-- | Amazon Resource Name (ARN) of the grant.
grant_grantArn :: Lens' Grant Text

-- | Grant name.
grant_grantName :: Lens' Grant Text

-- | Parent ARN.
grant_parentArn :: Lens' Grant Text

-- | License ARN.
grant_licenseArn :: Lens' Grant Text

-- | The grantee principal ARN.
grant_granteePrincipalArn :: Lens' Grant Text

-- | Home Region of the grant.
grant_homeRegion :: Lens' Grant Text

-- | Grant status.
grant_grantStatus :: Lens' Grant GrantStatus

-- | Grant version.
grant_version :: Lens' Grant Text

-- | Granted operations.
grant_grantedOperations :: Lens' Grant (NonEmpty AllowedOperation)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.Grant.Grant
instance GHC.Show.Show Amazonka.LicenseManager.Types.Grant.Grant
instance GHC.Read.Read Amazonka.LicenseManager.Types.Grant.Grant
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.Grant.Grant
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.Grant.Grant
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.Grant.Grant
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.Grant.Grant


module Amazonka.LicenseManager.Types.InventoryFilterCondition
newtype InventoryFilterCondition
InventoryFilterCondition' :: Text -> InventoryFilterCondition
[fromInventoryFilterCondition] :: InventoryFilterCondition -> Text
pattern InventoryFilterCondition_BEGINS_WITH :: InventoryFilterCondition
pattern InventoryFilterCondition_CONTAINS :: InventoryFilterCondition
pattern InventoryFilterCondition_EQUALS :: InventoryFilterCondition
pattern InventoryFilterCondition_NOT_EQUALS :: InventoryFilterCondition
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance GHC.Read.Read Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition
instance GHC.Show.Show Amazonka.LicenseManager.Types.InventoryFilterCondition.InventoryFilterCondition


module Amazonka.LicenseManager.Types.InventoryFilter

-- | An inventory filter.
--   
--   <i>See:</i> <a>newInventoryFilter</a> smart constructor.
data InventoryFilter
InventoryFilter' :: Maybe Text -> Text -> InventoryFilterCondition -> InventoryFilter

-- | Value of the filter.
[$sel:value:InventoryFilter'] :: InventoryFilter -> Maybe Text

-- | Name of the filter.
[$sel:name:InventoryFilter'] :: InventoryFilter -> Text

-- | Condition of the filter.
[$sel:condition:InventoryFilter'] :: InventoryFilter -> InventoryFilterCondition

-- | Create a value of <a>InventoryFilter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:InventoryFilter'</a>, <a>inventoryFilter_value</a> -
--   Value of the filter.
--   
--   <a>$sel:name:InventoryFilter'</a>, <a>inventoryFilter_name</a> - Name
--   of the filter.
--   
--   <a>$sel:condition:InventoryFilter'</a>,
--   <a>inventoryFilter_condition</a> - Condition of the filter.
newInventoryFilter :: Text -> InventoryFilterCondition -> InventoryFilter

-- | Value of the filter.
inventoryFilter_value :: Lens' InventoryFilter (Maybe Text)

-- | Name of the filter.
inventoryFilter_name :: Lens' InventoryFilter Text

-- | Condition of the filter.
inventoryFilter_condition :: Lens' InventoryFilter InventoryFilterCondition
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.InventoryFilter.InventoryFilter
instance GHC.Show.Show Amazonka.LicenseManager.Types.InventoryFilter.InventoryFilter
instance GHC.Read.Read Amazonka.LicenseManager.Types.InventoryFilter.InventoryFilter
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.InventoryFilter.InventoryFilter
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.InventoryFilter.InventoryFilter
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.InventoryFilter.InventoryFilter
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.InventoryFilter.InventoryFilter


module Amazonka.LicenseManager.Types.Issuer

-- | Details about the issuer of a license.
--   
--   <i>See:</i> <a>newIssuer</a> smart constructor.
data Issuer
Issuer' :: Maybe Text -> Text -> Issuer

-- | Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
[$sel:signKey:Issuer'] :: Issuer -> Maybe Text

-- | Issuer name.
[$sel:name:Issuer'] :: Issuer -> Text

-- | Create a value of <a>Issuer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signKey:Issuer'</a>, <a>issuer_signKey</a> - Asymmetric KMS
--   key from Key Management Service. The KMS key must have a key usage of
--   sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
--   
--   <a>$sel:name:Issuer'</a>, <a>issuer_name</a> - Issuer name.
newIssuer :: Text -> Issuer

-- | Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
issuer_signKey :: Lens' Issuer (Maybe Text)

-- | Issuer name.
issuer_name :: Lens' Issuer Text
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.Issuer.Issuer
instance GHC.Show.Show Amazonka.LicenseManager.Types.Issuer.Issuer
instance GHC.Read.Read Amazonka.LicenseManager.Types.Issuer.Issuer
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.Issuer.Issuer
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.Issuer.Issuer
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.Issuer.Issuer
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.Issuer.Issuer


module Amazonka.LicenseManager.Types.IssuerDetails

-- | Details associated with the issuer of a license.
--   
--   <i>See:</i> <a>newIssuerDetails</a> smart constructor.
data IssuerDetails
IssuerDetails' :: Maybe Text -> Maybe Text -> Maybe Text -> IssuerDetails

-- | Issuer key fingerprint.
[$sel:keyFingerprint:IssuerDetails'] :: IssuerDetails -> Maybe Text

-- | Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
[$sel:signKey:IssuerDetails'] :: IssuerDetails -> Maybe Text

-- | Issuer name.
[$sel:name:IssuerDetails'] :: IssuerDetails -> Maybe Text

-- | Create a value of <a>IssuerDetails</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyFingerprint:IssuerDetails'</a>,
--   <a>issuerDetails_keyFingerprint</a> - Issuer key fingerprint.
--   
--   <a>$sel:signKey:IssuerDetails'</a>, <a>issuerDetails_signKey</a> -
--   Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
--   
--   <a>$sel:name:IssuerDetails'</a>, <a>issuerDetails_name</a> - Issuer
--   name.
newIssuerDetails :: IssuerDetails

-- | Issuer key fingerprint.
issuerDetails_keyFingerprint :: Lens' IssuerDetails (Maybe Text)

-- | Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
issuerDetails_signKey :: Lens' IssuerDetails (Maybe Text)

-- | Issuer name.
issuerDetails_name :: Lens' IssuerDetails (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.IssuerDetails.IssuerDetails
instance GHC.Show.Show Amazonka.LicenseManager.Types.IssuerDetails.IssuerDetails
instance GHC.Read.Read Amazonka.LicenseManager.Types.IssuerDetails.IssuerDetails
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.IssuerDetails.IssuerDetails
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.IssuerDetails.IssuerDetails
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.IssuerDetails.IssuerDetails
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.IssuerDetails.IssuerDetails


module Amazonka.LicenseManager.Types.LicenseConfigurationStatus
newtype LicenseConfigurationStatus
LicenseConfigurationStatus' :: Text -> LicenseConfigurationStatus
[fromLicenseConfigurationStatus] :: LicenseConfigurationStatus -> Text
pattern LicenseConfigurationStatus_AVAILABLE :: LicenseConfigurationStatus
pattern LicenseConfigurationStatus_DISABLED :: LicenseConfigurationStatus
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseConfigurationStatus.LicenseConfigurationStatus


module Amazonka.LicenseManager.Types.LicenseConversionContext

-- | Information about a license type conversion task.
--   
--   <i>See:</i> <a>newLicenseConversionContext</a> smart constructor.
data LicenseConversionContext
LicenseConversionContext' :: Maybe Text -> LicenseConversionContext

-- | The Usage operation value that corresponds to the license type you are
--   converting your resource from. For more information about which
--   platforms correspond to which usage operation values see <a>Sample
--   data: usage operation by platform</a>
[$sel:usageOperation:LicenseConversionContext'] :: LicenseConversionContext -> Maybe Text

-- | Create a value of <a>LicenseConversionContext</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:usageOperation:LicenseConversionContext'</a>,
--   <a>licenseConversionContext_usageOperation</a> - The Usage operation
--   value that corresponds to the license type you are converting your
--   resource from. For more information about which platforms correspond
--   to which usage operation values see <a>Sample data: usage operation by
--   platform</a>
newLicenseConversionContext :: LicenseConversionContext

-- | The Usage operation value that corresponds to the license type you are
--   converting your resource from. For more information about which
--   platforms correspond to which usage operation values see <a>Sample
--   data: usage operation by platform</a>
licenseConversionContext_usageOperation :: Lens' LicenseConversionContext (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseConversionContext.LicenseConversionContext
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseConversionContext.LicenseConversionContext
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseConversionContext.LicenseConversionContext
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseConversionContext.LicenseConversionContext
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseConversionContext.LicenseConversionContext
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseConversionContext.LicenseConversionContext
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseConversionContext.LicenseConversionContext
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.LicenseConversionContext.LicenseConversionContext


module Amazonka.LicenseManager.Types.LicenseConversionTaskStatus
newtype LicenseConversionTaskStatus
LicenseConversionTaskStatus' :: Text -> LicenseConversionTaskStatus
[fromLicenseConversionTaskStatus] :: LicenseConversionTaskStatus -> Text
pattern LicenseConversionTaskStatus_FAILED :: LicenseConversionTaskStatus
pattern LicenseConversionTaskStatus_IN_PROGRESS :: LicenseConversionTaskStatus
pattern LicenseConversionTaskStatus_SUCCEEDED :: LicenseConversionTaskStatus
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseConversionTaskStatus.LicenseConversionTaskStatus


module Amazonka.LicenseManager.Types.LicenseConversionTask

-- | Information about a license type conversion task.
--   
--   <i>See:</i> <a>newLicenseConversionTask</a> smart constructor.
data LicenseConversionTask
LicenseConversionTask' :: Maybe LicenseConversionTaskStatus -> Maybe POSIX -> Maybe LicenseConversionContext -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe POSIX -> Maybe LicenseConversionContext -> LicenseConversionTask

-- | The status of the conversion task.
[$sel:status:LicenseConversionTask'] :: LicenseConversionTask -> Maybe LicenseConversionTaskStatus

-- | The time the conversion task was started at.
[$sel:startTime:LicenseConversionTask'] :: LicenseConversionTask -> Maybe POSIX

-- | Information about the license type this conversion task converted to.
[$sel:destinationLicenseContext:LicenseConversionTask'] :: LicenseConversionTask -> Maybe LicenseConversionContext

-- | The ID of the license type conversion task.
[$sel:licenseConversionTaskId:LicenseConversionTask'] :: LicenseConversionTask -> Maybe Text

-- | The Amazon Resource Name (ARN) of the resource associated with the
--   license type conversion task.
[$sel:resourceArn:LicenseConversionTask'] :: LicenseConversionTask -> Maybe Text

-- | The status message for the conversion task.
[$sel:statusMessage:LicenseConversionTask'] :: LicenseConversionTask -> Maybe Text

-- | The time the conversion task was completed.
[$sel:endTime:LicenseConversionTask'] :: LicenseConversionTask -> Maybe POSIX

-- | The time the usage operation value of the resource was changed.
[$sel:licenseConversionTime:LicenseConversionTask'] :: LicenseConversionTask -> Maybe POSIX

-- | Information about the license type this conversion task converted
--   from.
[$sel:sourceLicenseContext:LicenseConversionTask'] :: LicenseConversionTask -> Maybe LicenseConversionContext

-- | Create a value of <a>LicenseConversionTask</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_status</a> - The status of the conversion
--   task.
--   
--   <a>$sel:startTime:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_startTime</a> - The time the conversion task
--   was started at.
--   
--   <a>$sel:destinationLicenseContext:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_destinationLicenseContext</a> - Information
--   about the license type this conversion task converted to.
--   
--   <a>$sel:licenseConversionTaskId:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_licenseConversionTaskId</a> - The ID of the
--   license type conversion task.
--   
--   <a>$sel:resourceArn:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the resource associated with the license type conversion
--   task.
--   
--   <a>$sel:statusMessage:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_statusMessage</a> - The status message for
--   the conversion task.
--   
--   <a>$sel:endTime:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_endTime</a> - The time the conversion task
--   was completed.
--   
--   <a>$sel:licenseConversionTime:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_licenseConversionTime</a> - The time the
--   usage operation value of the resource was changed.
--   
--   <a>$sel:sourceLicenseContext:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_sourceLicenseContext</a> - Information about
--   the license type this conversion task converted from.
newLicenseConversionTask :: LicenseConversionTask

-- | The status of the conversion task.
licenseConversionTask_status :: Lens' LicenseConversionTask (Maybe LicenseConversionTaskStatus)

-- | The time the conversion task was started at.
licenseConversionTask_startTime :: Lens' LicenseConversionTask (Maybe UTCTime)

-- | Information about the license type this conversion task converted to.
licenseConversionTask_destinationLicenseContext :: Lens' LicenseConversionTask (Maybe LicenseConversionContext)

-- | The ID of the license type conversion task.
licenseConversionTask_licenseConversionTaskId :: Lens' LicenseConversionTask (Maybe Text)

-- | The Amazon Resource Name (ARN) of the resource associated with the
--   license type conversion task.
licenseConversionTask_resourceArn :: Lens' LicenseConversionTask (Maybe Text)

-- | The status message for the conversion task.
licenseConversionTask_statusMessage :: Lens' LicenseConversionTask (Maybe Text)

-- | The time the conversion task was completed.
licenseConversionTask_endTime :: Lens' LicenseConversionTask (Maybe UTCTime)

-- | The time the usage operation value of the resource was changed.
licenseConversionTask_licenseConversionTime :: Lens' LicenseConversionTask (Maybe UTCTime)

-- | Information about the license type this conversion task converted
--   from.
licenseConversionTask_sourceLicenseContext :: Lens' LicenseConversionTask (Maybe LicenseConversionContext)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseConversionTask.LicenseConversionTask
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseConversionTask.LicenseConversionTask
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseConversionTask.LicenseConversionTask
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseConversionTask.LicenseConversionTask
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseConversionTask.LicenseConversionTask
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseConversionTask.LicenseConversionTask
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseConversionTask.LicenseConversionTask


module Amazonka.LicenseManager.Types.LicenseCountingType
newtype LicenseCountingType
LicenseCountingType' :: Text -> LicenseCountingType
[fromLicenseCountingType] :: LicenseCountingType -> Text
pattern LicenseCountingType_Core :: LicenseCountingType
pattern LicenseCountingType_Instance :: LicenseCountingType
pattern LicenseCountingType_Socket :: LicenseCountingType
pattern LicenseCountingType_VCPU :: LicenseCountingType
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseCountingType.LicenseCountingType


module Amazonka.LicenseManager.Types.LicenseDeletionStatus
newtype LicenseDeletionStatus
LicenseDeletionStatus' :: Text -> LicenseDeletionStatus
[fromLicenseDeletionStatus] :: LicenseDeletionStatus -> Text
pattern LicenseDeletionStatus_DELETED :: LicenseDeletionStatus
pattern LicenseDeletionStatus_PENDING_DELETE :: LicenseDeletionStatus
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseDeletionStatus.LicenseDeletionStatus


module Amazonka.LicenseManager.Types.LicenseSpecification

-- | Details for associating a license configuration with a resource.
--   
--   <i>See:</i> <a>newLicenseSpecification</a> smart constructor.
data LicenseSpecification
LicenseSpecification' :: Maybe Text -> Text -> LicenseSpecification

-- | Scope of AMI associations. The possible value is
--   <tt>cross-account</tt>.
[$sel:amiAssociationScope:LicenseSpecification'] :: LicenseSpecification -> Maybe Text

-- | Amazon Resource Name (ARN) of the license configuration.
[$sel:licenseConfigurationArn:LicenseSpecification'] :: LicenseSpecification -> Text

-- | Create a value of <a>LicenseSpecification</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:amiAssociationScope:LicenseSpecification'</a>,
--   <a>licenseSpecification_amiAssociationScope</a> - Scope of AMI
--   associations. The possible value is <tt>cross-account</tt>.
--   
--   <a>$sel:licenseConfigurationArn:LicenseSpecification'</a>,
--   <a>licenseSpecification_licenseConfigurationArn</a> - Amazon Resource
--   Name (ARN) of the license configuration.
newLicenseSpecification :: Text -> LicenseSpecification

-- | Scope of AMI associations. The possible value is
--   <tt>cross-account</tt>.
licenseSpecification_amiAssociationScope :: Lens' LicenseSpecification (Maybe Text)

-- | Amazon Resource Name (ARN) of the license configuration.
licenseSpecification_licenseConfigurationArn :: Lens' LicenseSpecification Text
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseSpecification.LicenseSpecification
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseSpecification.LicenseSpecification
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseSpecification.LicenseSpecification
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseSpecification.LicenseSpecification
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseSpecification.LicenseSpecification
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseSpecification.LicenseSpecification
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseSpecification.LicenseSpecification
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.LicenseSpecification.LicenseSpecification


module Amazonka.LicenseManager.Types.LicenseStatus
newtype LicenseStatus
LicenseStatus' :: Text -> LicenseStatus
[fromLicenseStatus] :: LicenseStatus -> Text
pattern LicenseStatus_AVAILABLE :: LicenseStatus
pattern LicenseStatus_DEACTIVATED :: LicenseStatus
pattern LicenseStatus_DELETED :: LicenseStatus
pattern LicenseStatus_EXPIRED :: LicenseStatus
pattern LicenseStatus_PENDING_AVAILABLE :: LicenseStatus
pattern LicenseStatus_PENDING_DELETE :: LicenseStatus
pattern LicenseStatus_SUSPENDED :: LicenseStatus
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseStatus.LicenseStatus


module Amazonka.LicenseManager.Types.LicenseUsage

-- | Describes the entitlement usage associated with a license.
--   
--   <i>See:</i> <a>newLicenseUsage</a> smart constructor.
data LicenseUsage
LicenseUsage' :: Maybe [EntitlementUsage] -> LicenseUsage

-- | License entitlement usages.
[$sel:entitlementUsages:LicenseUsage'] :: LicenseUsage -> Maybe [EntitlementUsage]

-- | Create a value of <a>LicenseUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:entitlementUsages:LicenseUsage'</a>,
--   <a>licenseUsage_entitlementUsages</a> - License entitlement usages.
newLicenseUsage :: LicenseUsage

-- | License entitlement usages.
licenseUsage_entitlementUsages :: Lens' LicenseUsage (Maybe [EntitlementUsage])
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseUsage.LicenseUsage
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseUsage.LicenseUsage
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseUsage.LicenseUsage
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseUsage.LicenseUsage
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseUsage.LicenseUsage
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseUsage.LicenseUsage
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseUsage.LicenseUsage


module Amazonka.LicenseManager.Types.Metadata

-- | Describes key/value pairs.
--   
--   <i>See:</i> <a>newMetadata</a> smart constructor.
data Metadata
Metadata' :: Maybe Text -> Maybe Text -> Metadata

-- | The value.
[$sel:value:Metadata'] :: Metadata -> Maybe Text

-- | The key name.
[$sel:name:Metadata'] :: Metadata -> Maybe Text

-- | Create a value of <a>Metadata</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Metadata'</a>, <a>metadata_value</a> - The value.
--   
--   <a>$sel:name:Metadata'</a>, <a>metadata_name</a> - The key name.
newMetadata :: Metadata

-- | The value.
metadata_value :: Lens' Metadata (Maybe Text)

-- | The key name.
metadata_name :: Lens' Metadata (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.Metadata.Metadata
instance GHC.Show.Show Amazonka.LicenseManager.Types.Metadata.Metadata
instance GHC.Read.Read Amazonka.LicenseManager.Types.Metadata.Metadata
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.Metadata.Metadata
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.Metadata.Metadata
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.Metadata.Metadata
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.Metadata.Metadata
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.Metadata.Metadata


module Amazonka.LicenseManager.Types.OrganizationConfiguration

-- | Configuration information for Organizations.
--   
--   <i>See:</i> <a>newOrganizationConfiguration</a> smart constructor.
data OrganizationConfiguration
OrganizationConfiguration' :: Bool -> OrganizationConfiguration

-- | Enables Organizations integration.
[$sel:enableIntegration:OrganizationConfiguration'] :: OrganizationConfiguration -> Bool

-- | Create a value of <a>OrganizationConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enableIntegration:OrganizationConfiguration'</a>,
--   <a>organizationConfiguration_enableIntegration</a> - Enables
--   Organizations integration.
newOrganizationConfiguration :: Bool -> OrganizationConfiguration

-- | Enables Organizations integration.
organizationConfiguration_enableIntegration :: Lens' OrganizationConfiguration Bool
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.OrganizationConfiguration.OrganizationConfiguration
instance GHC.Show.Show Amazonka.LicenseManager.Types.OrganizationConfiguration.OrganizationConfiguration
instance GHC.Read.Read Amazonka.LicenseManager.Types.OrganizationConfiguration.OrganizationConfiguration
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.OrganizationConfiguration.OrganizationConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.OrganizationConfiguration.OrganizationConfiguration
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.OrganizationConfiguration.OrganizationConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.OrganizationConfiguration.OrganizationConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.OrganizationConfiguration.OrganizationConfiguration


module Amazonka.LicenseManager.Types.ProductInformationFilter

-- | Describes product information filters.
--   
--   <i>See:</i> <a>newProductInformationFilter</a> smart constructor.
data ProductInformationFilter
ProductInformationFilter' :: Maybe [Text] -> Text -> Text -> ProductInformationFilter

-- | Filter value.
[$sel:productInformationFilterValue:ProductInformationFilter'] :: ProductInformationFilter -> Maybe [Text]

-- | Filter name.
[$sel:productInformationFilterName:ProductInformationFilter'] :: ProductInformationFilter -> Text

-- | Logical operator.
[$sel:productInformationFilterComparator:ProductInformationFilter'] :: ProductInformationFilter -> Text

-- | Create a value of <a>ProductInformationFilter</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:productInformationFilterValue:ProductInformationFilter'</a>,
--   <a>productInformationFilter_productInformationFilterValue</a> - Filter
--   value.
--   
--   <a>$sel:productInformationFilterName:ProductInformationFilter'</a>,
--   <a>productInformationFilter_productInformationFilterName</a> - Filter
--   name.
--   
--   
--   <a>$sel:productInformationFilterComparator:ProductInformationFilter'</a>,
--   <a>productInformationFilter_productInformationFilterComparator</a> -
--   Logical operator.
newProductInformationFilter :: Text -> Text -> ProductInformationFilter

-- | Filter value.
productInformationFilter_productInformationFilterValue :: Lens' ProductInformationFilter (Maybe [Text])

-- | Filter name.
productInformationFilter_productInformationFilterName :: Lens' ProductInformationFilter Text

-- | Logical operator.
productInformationFilter_productInformationFilterComparator :: Lens' ProductInformationFilter Text
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ProductInformationFilter.ProductInformationFilter
instance GHC.Show.Show Amazonka.LicenseManager.Types.ProductInformationFilter.ProductInformationFilter
instance GHC.Read.Read Amazonka.LicenseManager.Types.ProductInformationFilter.ProductInformationFilter
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ProductInformationFilter.ProductInformationFilter
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ProductInformationFilter.ProductInformationFilter
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ProductInformationFilter.ProductInformationFilter
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ProductInformationFilter.ProductInformationFilter
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.ProductInformationFilter.ProductInformationFilter


module Amazonka.LicenseManager.Types.ProductInformation

-- | Describes product information for a license configuration.
--   
--   <i>See:</i> <a>newProductInformation</a> smart constructor.
data ProductInformation
ProductInformation' :: Text -> [ProductInformationFilter] -> ProductInformation

-- | Resource type. The possible values are <tt>SSM_MANAGED</tt> |
--   <tt>RDS</tt>.
[$sel:resourceType:ProductInformation'] :: ProductInformation -> Text

-- | A Product information filter consists of a
--   <tt>ProductInformationFilterComparator</tt> which is a logical
--   operator, a <tt>ProductInformationFilterName</tt> which specifies the
--   type of filter being declared, and a
--   <tt>ProductInformationFilterValue</tt> that specifies the value to
--   filter on.
--   
--   Accepted values for <tt>ProductInformationFilterName</tt> are listed
--   here along with descriptions and valid options for
--   <tt>ProductInformationFilterComparator</tt>.
--   
--   The following filters and are supported when the resource type is
--   <tt>SSM_MANAGED</tt>:
--   
--   <ul>
--   <li><tt>Application Name</tt> - The name of the application. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Publisher</tt> - The publisher of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Version</tt> - The version of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Name</tt> - The name of the platform. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Type</tt> - The platform type. Logical operator is
--   <tt>EQUALS</tt>.</li>
--   <li><tt>Tag:key</tt> - The key of a tag attached to an Amazon Web
--   Services resource you wish to exclude from automated discovery.
--   Logical operator is <tt>NOT_EQUALS</tt>. The key for your tag must be
--   appended to <tt>Tag:</tt> following the example:
--   <tt>Tag:name-of-your-key</tt>. <tt>ProductInformationFilterValue</tt>
--   is optional if you are not using values for the key.</li>
--   <li><tt>AccountId</tt> - The 12-digit ID of an Amazon Web Services
--   account you wish to exclude from automated discovery. Logical operator
--   is <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>License Included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> and <tt>NOT_EQUALS</tt>. Possible values
--   are: <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   </ul>
--   
--   The following filters and logical operators are supported when the
--   resource type is <tt>RDS</tt>:
--   
--   <ul>
--   <li><tt>Engine Edition</tt> - The edition of the database engine.
--   Logical operator is <tt>EQUALS</tt>. Possible values are:
--   <tt>oracle-ee</tt> | <tt>oracle-se</tt> | <tt>oracle-se1</tt> |
--   <tt>oracle-se2</tt>.</li>
--   <li><tt>License Pack</tt> - The license pack. Logical operator is
--   <tt>EQUALS</tt>. Possible values are: <tt>data guard</tt> |
--   <tt>diagnostic pack sqlt</tt> | <tt>tuning pack sqlt</tt> |
--   <tt>ols</tt> | <tt>olap</tt>.</li>
--   </ul>
[$sel:productInformationFilterList:ProductInformation'] :: ProductInformation -> [ProductInformationFilter]

-- | Create a value of <a>ProductInformation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:ProductInformation'</a>,
--   <a>productInformation_resourceType</a> - Resource type. The possible
--   values are <tt>SSM_MANAGED</tt> | <tt>RDS</tt>.
--   
--   <a>$sel:productInformationFilterList:ProductInformation'</a>,
--   <a>productInformation_productInformationFilterList</a> - A Product
--   information filter consists of a
--   <tt>ProductInformationFilterComparator</tt> which is a logical
--   operator, a <tt>ProductInformationFilterName</tt> which specifies the
--   type of filter being declared, and a
--   <tt>ProductInformationFilterValue</tt> that specifies the value to
--   filter on.
--   
--   Accepted values for <tt>ProductInformationFilterName</tt> are listed
--   here along with descriptions and valid options for
--   <tt>ProductInformationFilterComparator</tt>.
--   
--   The following filters and are supported when the resource type is
--   <tt>SSM_MANAGED</tt>:
--   
--   <ul>
--   <li><tt>Application Name</tt> - The name of the application. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Publisher</tt> - The publisher of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Version</tt> - The version of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Name</tt> - The name of the platform. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Type</tt> - The platform type. Logical operator is
--   <tt>EQUALS</tt>.</li>
--   <li><tt>Tag:key</tt> - The key of a tag attached to an Amazon Web
--   Services resource you wish to exclude from automated discovery.
--   Logical operator is <tt>NOT_EQUALS</tt>. The key for your tag must be
--   appended to <tt>Tag:</tt> following the example:
--   <tt>Tag:name-of-your-key</tt>. <tt>ProductInformationFilterValue</tt>
--   is optional if you are not using values for the key.</li>
--   <li><tt>AccountId</tt> - The 12-digit ID of an Amazon Web Services
--   account you wish to exclude from automated discovery. Logical operator
--   is <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>License Included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> and <tt>NOT_EQUALS</tt>. Possible values
--   are: <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   </ul>
--   
--   The following filters and logical operators are supported when the
--   resource type is <tt>RDS</tt>:
--   
--   <ul>
--   <li><tt>Engine Edition</tt> - The edition of the database engine.
--   Logical operator is <tt>EQUALS</tt>. Possible values are:
--   <tt>oracle-ee</tt> | <tt>oracle-se</tt> | <tt>oracle-se1</tt> |
--   <tt>oracle-se2</tt>.</li>
--   <li><tt>License Pack</tt> - The license pack. Logical operator is
--   <tt>EQUALS</tt>. Possible values are: <tt>data guard</tt> |
--   <tt>diagnostic pack sqlt</tt> | <tt>tuning pack sqlt</tt> |
--   <tt>ols</tt> | <tt>olap</tt>.</li>
--   </ul>
newProductInformation :: Text -> ProductInformation

-- | Resource type. The possible values are <tt>SSM_MANAGED</tt> |
--   <tt>RDS</tt>.
productInformation_resourceType :: Lens' ProductInformation Text

-- | A Product information filter consists of a
--   <tt>ProductInformationFilterComparator</tt> which is a logical
--   operator, a <tt>ProductInformationFilterName</tt> which specifies the
--   type of filter being declared, and a
--   <tt>ProductInformationFilterValue</tt> that specifies the value to
--   filter on.
--   
--   Accepted values for <tt>ProductInformationFilterName</tt> are listed
--   here along with descriptions and valid options for
--   <tt>ProductInformationFilterComparator</tt>.
--   
--   The following filters and are supported when the resource type is
--   <tt>SSM_MANAGED</tt>:
--   
--   <ul>
--   <li><tt>Application Name</tt> - The name of the application. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Publisher</tt> - The publisher of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Version</tt> - The version of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Name</tt> - The name of the platform. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Type</tt> - The platform type. Logical operator is
--   <tt>EQUALS</tt>.</li>
--   <li><tt>Tag:key</tt> - The key of a tag attached to an Amazon Web
--   Services resource you wish to exclude from automated discovery.
--   Logical operator is <tt>NOT_EQUALS</tt>. The key for your tag must be
--   appended to <tt>Tag:</tt> following the example:
--   <tt>Tag:name-of-your-key</tt>. <tt>ProductInformationFilterValue</tt>
--   is optional if you are not using values for the key.</li>
--   <li><tt>AccountId</tt> - The 12-digit ID of an Amazon Web Services
--   account you wish to exclude from automated discovery. Logical operator
--   is <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>License Included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> and <tt>NOT_EQUALS</tt>. Possible values
--   are: <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   </ul>
--   
--   The following filters and logical operators are supported when the
--   resource type is <tt>RDS</tt>:
--   
--   <ul>
--   <li><tt>Engine Edition</tt> - The edition of the database engine.
--   Logical operator is <tt>EQUALS</tt>. Possible values are:
--   <tt>oracle-ee</tt> | <tt>oracle-se</tt> | <tt>oracle-se1</tt> |
--   <tt>oracle-se2</tt>.</li>
--   <li><tt>License Pack</tt> - The license pack. Logical operator is
--   <tt>EQUALS</tt>. Possible values are: <tt>data guard</tt> |
--   <tt>diagnostic pack sqlt</tt> | <tt>tuning pack sqlt</tt> |
--   <tt>ols</tt> | <tt>olap</tt>.</li>
--   </ul>
productInformation_productInformationFilterList :: Lens' ProductInformation [ProductInformationFilter]
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ProductInformation.ProductInformation
instance GHC.Show.Show Amazonka.LicenseManager.Types.ProductInformation.ProductInformation
instance GHC.Read.Read Amazonka.LicenseManager.Types.ProductInformation.ProductInformation
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ProductInformation.ProductInformation
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ProductInformation.ProductInformation
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ProductInformation.ProductInformation
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ProductInformation.ProductInformation
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.ProductInformation.ProductInformation


module Amazonka.LicenseManager.Types.ProvisionalConfiguration

-- | Details about a provisional configuration.
--   
--   <i>See:</i> <a>newProvisionalConfiguration</a> smart constructor.
data ProvisionalConfiguration
ProvisionalConfiguration' :: Int -> ProvisionalConfiguration

-- | Maximum time for the provisional configuration, in minutes.
[$sel:maxTimeToLiveInMinutes:ProvisionalConfiguration'] :: ProvisionalConfiguration -> Int

-- | Create a value of <a>ProvisionalConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:maxTimeToLiveInMinutes:ProvisionalConfiguration'</a>,
--   <a>provisionalConfiguration_maxTimeToLiveInMinutes</a> - Maximum time
--   for the provisional configuration, in minutes.
newProvisionalConfiguration :: Int -> ProvisionalConfiguration

-- | Maximum time for the provisional configuration, in minutes.
provisionalConfiguration_maxTimeToLiveInMinutes :: Lens' ProvisionalConfiguration Int
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ProvisionalConfiguration.ProvisionalConfiguration
instance GHC.Show.Show Amazonka.LicenseManager.Types.ProvisionalConfiguration.ProvisionalConfiguration
instance GHC.Read.Read Amazonka.LicenseManager.Types.ProvisionalConfiguration.ProvisionalConfiguration
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ProvisionalConfiguration.ProvisionalConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ProvisionalConfiguration.ProvisionalConfiguration
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ProvisionalConfiguration.ProvisionalConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ProvisionalConfiguration.ProvisionalConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.ProvisionalConfiguration.ProvisionalConfiguration


module Amazonka.LicenseManager.Types.ReceivedStatus
newtype ReceivedStatus
ReceivedStatus' :: Text -> ReceivedStatus
[fromReceivedStatus] :: ReceivedStatus -> Text
pattern ReceivedStatus_ACTIVE :: ReceivedStatus
pattern ReceivedStatus_DELETED :: ReceivedStatus
pattern ReceivedStatus_DISABLED :: ReceivedStatus
pattern ReceivedStatus_FAILED_WORKFLOW :: ReceivedStatus
pattern ReceivedStatus_PENDING_ACCEPT :: ReceivedStatus
pattern ReceivedStatus_PENDING_WORKFLOW :: ReceivedStatus
pattern ReceivedStatus_REJECTED :: ReceivedStatus
pattern ReceivedStatus_WORKFLOW_COMPLETED :: ReceivedStatus
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance GHC.Read.Read Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus
instance GHC.Show.Show Amazonka.LicenseManager.Types.ReceivedStatus.ReceivedStatus


module Amazonka.LicenseManager.Types.ReceivedMetadata

-- | Metadata associated with received licenses and grants.
--   
--   <i>See:</i> <a>newReceivedMetadata</a> smart constructor.
data ReceivedMetadata
ReceivedMetadata' :: Maybe ReceivedStatus -> Maybe (NonEmpty AllowedOperation) -> Maybe Text -> ReceivedMetadata

-- | Received status.
[$sel:receivedStatus:ReceivedMetadata'] :: ReceivedMetadata -> Maybe ReceivedStatus

-- | Allowed operations.
[$sel:allowedOperations:ReceivedMetadata'] :: ReceivedMetadata -> Maybe (NonEmpty AllowedOperation)

-- | Received status reason.
[$sel:receivedStatusReason:ReceivedMetadata'] :: ReceivedMetadata -> Maybe Text

-- | Create a value of <a>ReceivedMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:receivedStatus:ReceivedMetadata'</a>,
--   <a>receivedMetadata_receivedStatus</a> - Received status.
--   
--   <a>$sel:allowedOperations:ReceivedMetadata'</a>,
--   <a>receivedMetadata_allowedOperations</a> - Allowed operations.
--   
--   <a>$sel:receivedStatusReason:ReceivedMetadata'</a>,
--   <a>receivedMetadata_receivedStatusReason</a> - Received status reason.
newReceivedMetadata :: ReceivedMetadata

-- | Received status.
receivedMetadata_receivedStatus :: Lens' ReceivedMetadata (Maybe ReceivedStatus)

-- | Allowed operations.
receivedMetadata_allowedOperations :: Lens' ReceivedMetadata (Maybe (NonEmpty AllowedOperation))

-- | Received status reason.
receivedMetadata_receivedStatusReason :: Lens' ReceivedMetadata (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ReceivedMetadata.ReceivedMetadata
instance GHC.Show.Show Amazonka.LicenseManager.Types.ReceivedMetadata.ReceivedMetadata
instance GHC.Read.Read Amazonka.LicenseManager.Types.ReceivedMetadata.ReceivedMetadata
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ReceivedMetadata.ReceivedMetadata
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ReceivedMetadata.ReceivedMetadata
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ReceivedMetadata.ReceivedMetadata
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ReceivedMetadata.ReceivedMetadata


module Amazonka.LicenseManager.Types.RenewType
newtype RenewType
RenewType' :: Text -> RenewType
[fromRenewType] :: RenewType -> Text
pattern RenewType_Monthly :: RenewType
pattern RenewType_None :: RenewType
pattern RenewType_Weekly :: RenewType
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.RenewType.RenewType
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.RenewType.RenewType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.RenewType.RenewType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.RenewType.RenewType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.RenewType.RenewType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.RenewType.RenewType
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.RenewType.RenewType
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.RenewType.RenewType
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.RenewType.RenewType
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.RenewType.RenewType
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.RenewType.RenewType
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.RenewType.RenewType
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.RenewType.RenewType
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.RenewType.RenewType
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.RenewType.RenewType
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.RenewType.RenewType
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.RenewType.RenewType
instance GHC.Read.Read Amazonka.LicenseManager.Types.RenewType.RenewType
instance GHC.Show.Show Amazonka.LicenseManager.Types.RenewType.RenewType


module Amazonka.LicenseManager.Types.ConsumptionConfiguration

-- | Details about a consumption configuration.
--   
--   <i>See:</i> <a>newConsumptionConfiguration</a> smart constructor.
data ConsumptionConfiguration
ConsumptionConfiguration' :: Maybe BorrowConfiguration -> Maybe ProvisionalConfiguration -> Maybe RenewType -> ConsumptionConfiguration

-- | Details about a borrow configuration.
[$sel:borrowConfiguration:ConsumptionConfiguration'] :: ConsumptionConfiguration -> Maybe BorrowConfiguration

-- | Details about a provisional configuration.
[$sel:provisionalConfiguration:ConsumptionConfiguration'] :: ConsumptionConfiguration -> Maybe ProvisionalConfiguration

-- | Renewal frequency.
[$sel:renewType:ConsumptionConfiguration'] :: ConsumptionConfiguration -> Maybe RenewType

-- | Create a value of <a>ConsumptionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:borrowConfiguration:ConsumptionConfiguration'</a>,
--   <a>consumptionConfiguration_borrowConfiguration</a> - Details about a
--   borrow configuration.
--   
--   <a>$sel:provisionalConfiguration:ConsumptionConfiguration'</a>,
--   <a>consumptionConfiguration_provisionalConfiguration</a> - Details
--   about a provisional configuration.
--   
--   <a>$sel:renewType:ConsumptionConfiguration'</a>,
--   <a>consumptionConfiguration_renewType</a> - Renewal frequency.
newConsumptionConfiguration :: ConsumptionConfiguration

-- | Details about a borrow configuration.
consumptionConfiguration_borrowConfiguration :: Lens' ConsumptionConfiguration (Maybe BorrowConfiguration)

-- | Details about a provisional configuration.
consumptionConfiguration_provisionalConfiguration :: Lens' ConsumptionConfiguration (Maybe ProvisionalConfiguration)

-- | Renewal frequency.
consumptionConfiguration_renewType :: Lens' ConsumptionConfiguration (Maybe RenewType)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ConsumptionConfiguration.ConsumptionConfiguration
instance GHC.Show.Show Amazonka.LicenseManager.Types.ConsumptionConfiguration.ConsumptionConfiguration
instance GHC.Read.Read Amazonka.LicenseManager.Types.ConsumptionConfiguration.ConsumptionConfiguration
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ConsumptionConfiguration.ConsumptionConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ConsumptionConfiguration.ConsumptionConfiguration
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ConsumptionConfiguration.ConsumptionConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ConsumptionConfiguration.ConsumptionConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.ConsumptionConfiguration.ConsumptionConfiguration


module Amazonka.LicenseManager.Types.License

-- | Software license that is managed in License Manager.
--   
--   <i>See:</i> <a>newLicense</a> smart constructor.
data License
License' :: Maybe LicenseStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe [Entitlement] -> Maybe DatetimeRange -> Maybe ConsumptionConfiguration -> Maybe Text -> Maybe IssuerDetails -> Maybe Text -> Maybe [Metadata] -> Maybe Text -> License

-- | License status.
[$sel:status:License'] :: License -> Maybe LicenseStatus

-- | Product name.
[$sel:productName:License'] :: License -> Maybe Text

-- | License name.
[$sel:licenseName:License'] :: License -> Maybe Text

-- | Product SKU.
[$sel:productSKU:License'] :: License -> Maybe Text

-- | Home Region of the license.
[$sel:homeRegion:License'] :: License -> Maybe Text

-- | License version.
[$sel:version:License'] :: License -> Maybe Text

-- | License entitlements.
[$sel:entitlements:License'] :: License -> Maybe [Entitlement]

-- | Date and time range during which the license is valid, in ISO8601-UTC
--   format.
[$sel:validity:License'] :: License -> Maybe DatetimeRange

-- | Configuration for consumption of the license.
[$sel:consumptionConfiguration:License'] :: License -> Maybe ConsumptionConfiguration

-- | License beneficiary.
[$sel:beneficiary:License'] :: License -> Maybe Text

-- | License issuer.
[$sel:issuer:License'] :: License -> Maybe IssuerDetails

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:License'] :: License -> Maybe Text

-- | License metadata.
[$sel:licenseMetadata:License'] :: License -> Maybe [Metadata]

-- | License creation time.
[$sel:createTime:License'] :: License -> Maybe Text

-- | Create a value of <a>License</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:License'</a>, <a>license_status</a> - License status.
--   
--   <a>$sel:productName:License'</a>, <a>license_productName</a> - Product
--   name.
--   
--   <a>$sel:licenseName:License'</a>, <a>license_licenseName</a> - License
--   name.
--   
--   <a>$sel:productSKU:License'</a>, <a>license_productSKU</a> - Product
--   SKU.
--   
--   <a>$sel:homeRegion:License'</a>, <a>license_homeRegion</a> - Home
--   Region of the license.
--   
--   <a>$sel:version:License'</a>, <a>license_version</a> - License
--   version.
--   
--   <a>$sel:entitlements:License'</a>, <a>license_entitlements</a> -
--   License entitlements.
--   
--   <a>$sel:validity:License'</a>, <a>license_validity</a> - Date and time
--   range during which the license is valid, in ISO8601-UTC format.
--   
--   <a>$sel:consumptionConfiguration:License'</a>,
--   <a>license_consumptionConfiguration</a> - Configuration for
--   consumption of the license.
--   
--   <a>$sel:beneficiary:License'</a>, <a>license_beneficiary</a> - License
--   beneficiary.
--   
--   <a>$sel:issuer:License'</a>, <a>license_issuer</a> - License issuer.
--   
--   <a>$sel:licenseArn:License'</a>, <a>license_licenseArn</a> - Amazon
--   Resource Name (ARN) of the license.
--   
--   <a>$sel:licenseMetadata:License'</a>, <a>license_licenseMetadata</a> -
--   License metadata.
--   
--   <a>$sel:createTime:License'</a>, <a>license_createTime</a> - License
--   creation time.
newLicense :: License

-- | License status.
license_status :: Lens' License (Maybe LicenseStatus)

-- | Product name.
license_productName :: Lens' License (Maybe Text)

-- | License name.
license_licenseName :: Lens' License (Maybe Text)

-- | Product SKU.
license_productSKU :: Lens' License (Maybe Text)

-- | Home Region of the license.
license_homeRegion :: Lens' License (Maybe Text)

-- | License version.
license_version :: Lens' License (Maybe Text)

-- | License entitlements.
license_entitlements :: Lens' License (Maybe [Entitlement])

-- | Date and time range during which the license is valid, in ISO8601-UTC
--   format.
license_validity :: Lens' License (Maybe DatetimeRange)

-- | Configuration for consumption of the license.
license_consumptionConfiguration :: Lens' License (Maybe ConsumptionConfiguration)

-- | License beneficiary.
license_beneficiary :: Lens' License (Maybe Text)

-- | License issuer.
license_issuer :: Lens' License (Maybe IssuerDetails)

-- | Amazon Resource Name (ARN) of the license.
license_licenseArn :: Lens' License (Maybe Text)

-- | License metadata.
license_licenseMetadata :: Lens' License (Maybe [Metadata])

-- | License creation time.
license_createTime :: Lens' License (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.License.License
instance GHC.Show.Show Amazonka.LicenseManager.Types.License.License
instance GHC.Read.Read Amazonka.LicenseManager.Types.License.License
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.License.License
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.License.License
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.License.License
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.License.License


module Amazonka.LicenseManager.Types.GrantedLicense

-- | Describes a license that is granted to a grantee.
--   
--   <i>See:</i> <a>newGrantedLicense</a> smart constructor.
data GrantedLicense
GrantedLicense' :: Maybe LicenseStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe ReceivedMetadata -> Maybe Text -> Maybe [Entitlement] -> Maybe DatetimeRange -> Maybe ConsumptionConfiguration -> Maybe Text -> Maybe IssuerDetails -> Maybe Text -> Maybe [Metadata] -> Maybe Text -> GrantedLicense

-- | Granted license status.
[$sel:status:GrantedLicense'] :: GrantedLicense -> Maybe LicenseStatus

-- | Product name.
[$sel:productName:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | License name.
[$sel:licenseName:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | Product SKU.
[$sel:productSKU:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | Home Region of the granted license.
[$sel:homeRegion:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | Granted license received metadata.
[$sel:receivedMetadata:GrantedLicense'] :: GrantedLicense -> Maybe ReceivedMetadata

-- | Version of the granted license.
[$sel:version:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | License entitlements.
[$sel:entitlements:GrantedLicense'] :: GrantedLicense -> Maybe [Entitlement]

-- | Date and time range during which the granted license is valid, in
--   ISO8601-UTC format.
[$sel:validity:GrantedLicense'] :: GrantedLicense -> Maybe DatetimeRange

-- | Configuration for consumption of the license.
[$sel:consumptionConfiguration:GrantedLicense'] :: GrantedLicense -> Maybe ConsumptionConfiguration

-- | Granted license beneficiary.
[$sel:beneficiary:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | Granted license issuer.
[$sel:issuer:GrantedLicense'] :: GrantedLicense -> Maybe IssuerDetails

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | Granted license metadata.
[$sel:licenseMetadata:GrantedLicense'] :: GrantedLicense -> Maybe [Metadata]

-- | Creation time of the granted license.
[$sel:createTime:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | Create a value of <a>GrantedLicense</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:GrantedLicense'</a>, <a>grantedLicense_status</a> -
--   Granted license status.
--   
--   <a>$sel:productName:GrantedLicense'</a>,
--   <a>grantedLicense_productName</a> - Product name.
--   
--   <a>$sel:licenseName:GrantedLicense'</a>,
--   <a>grantedLicense_licenseName</a> - License name.
--   
--   <a>$sel:productSKU:GrantedLicense'</a>,
--   <a>grantedLicense_productSKU</a> - Product SKU.
--   
--   <a>$sel:homeRegion:GrantedLicense'</a>,
--   <a>grantedLicense_homeRegion</a> - Home Region of the granted license.
--   
--   <a>$sel:receivedMetadata:GrantedLicense'</a>,
--   <a>grantedLicense_receivedMetadata</a> - Granted license received
--   metadata.
--   
--   <a>$sel:version:GrantedLicense'</a>, <a>grantedLicense_version</a> -
--   Version of the granted license.
--   
--   <a>$sel:entitlements:GrantedLicense'</a>,
--   <a>grantedLicense_entitlements</a> - License entitlements.
--   
--   <a>$sel:validity:GrantedLicense'</a>, <a>grantedLicense_validity</a> -
--   Date and time range during which the granted license is valid, in
--   ISO8601-UTC format.
--   
--   <a>$sel:consumptionConfiguration:GrantedLicense'</a>,
--   <a>grantedLicense_consumptionConfiguration</a> - Configuration for
--   consumption of the license.
--   
--   <a>$sel:beneficiary:GrantedLicense'</a>,
--   <a>grantedLicense_beneficiary</a> - Granted license beneficiary.
--   
--   <a>$sel:issuer:GrantedLicense'</a>, <a>grantedLicense_issuer</a> -
--   Granted license issuer.
--   
--   <a>$sel:licenseArn:GrantedLicense'</a>,
--   <a>grantedLicense_licenseArn</a> - Amazon Resource Name (ARN) of the
--   license.
--   
--   <a>$sel:licenseMetadata:GrantedLicense'</a>,
--   <a>grantedLicense_licenseMetadata</a> - Granted license metadata.
--   
--   <a>$sel:createTime:GrantedLicense'</a>,
--   <a>grantedLicense_createTime</a> - Creation time of the granted
--   license.
newGrantedLicense :: GrantedLicense

-- | Granted license status.
grantedLicense_status :: Lens' GrantedLicense (Maybe LicenseStatus)

-- | Product name.
grantedLicense_productName :: Lens' GrantedLicense (Maybe Text)

-- | License name.
grantedLicense_licenseName :: Lens' GrantedLicense (Maybe Text)

-- | Product SKU.
grantedLicense_productSKU :: Lens' GrantedLicense (Maybe Text)

-- | Home Region of the granted license.
grantedLicense_homeRegion :: Lens' GrantedLicense (Maybe Text)

-- | Granted license received metadata.
grantedLicense_receivedMetadata :: Lens' GrantedLicense (Maybe ReceivedMetadata)

-- | Version of the granted license.
grantedLicense_version :: Lens' GrantedLicense (Maybe Text)

-- | License entitlements.
grantedLicense_entitlements :: Lens' GrantedLicense (Maybe [Entitlement])

-- | Date and time range during which the granted license is valid, in
--   ISO8601-UTC format.
grantedLicense_validity :: Lens' GrantedLicense (Maybe DatetimeRange)

-- | Configuration for consumption of the license.
grantedLicense_consumptionConfiguration :: Lens' GrantedLicense (Maybe ConsumptionConfiguration)

-- | Granted license beneficiary.
grantedLicense_beneficiary :: Lens' GrantedLicense (Maybe Text)

-- | Granted license issuer.
grantedLicense_issuer :: Lens' GrantedLicense (Maybe IssuerDetails)

-- | Amazon Resource Name (ARN) of the license.
grantedLicense_licenseArn :: Lens' GrantedLicense (Maybe Text)

-- | Granted license metadata.
grantedLicense_licenseMetadata :: Lens' GrantedLicense (Maybe [Metadata])

-- | Creation time of the granted license.
grantedLicense_createTime :: Lens' GrantedLicense (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.GrantedLicense.GrantedLicense
instance GHC.Show.Show Amazonka.LicenseManager.Types.GrantedLicense.GrantedLicense
instance GHC.Read.Read Amazonka.LicenseManager.Types.GrantedLicense.GrantedLicense
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.GrantedLicense.GrantedLicense
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.GrantedLicense.GrantedLicense
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.GrantedLicense.GrantedLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.GrantedLicense.GrantedLicense


module Amazonka.LicenseManager.Types.ReportContext

-- | Details of the license configuration that this generator reports on.
--   
--   <i>See:</i> <a>newReportContext</a> smart constructor.
data ReportContext
ReportContext' :: [Text] -> ReportContext

-- | Amazon Resource Name (ARN) of the license configuration that this
--   generator reports on.
[$sel:licenseConfigurationArns:ReportContext'] :: ReportContext -> [Text]

-- | Create a value of <a>ReportContext</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseConfigurationArns:ReportContext'</a>,
--   <a>reportContext_licenseConfigurationArns</a> - Amazon Resource Name
--   (ARN) of the license configuration that this generator reports on.
newReportContext :: ReportContext

-- | Amazon Resource Name (ARN) of the license configuration that this
--   generator reports on.
reportContext_licenseConfigurationArns :: Lens' ReportContext [Text]
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ReportContext.ReportContext
instance GHC.Show.Show Amazonka.LicenseManager.Types.ReportContext.ReportContext
instance GHC.Read.Read Amazonka.LicenseManager.Types.ReportContext.ReportContext
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ReportContext.ReportContext
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ReportContext.ReportContext
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ReportContext.ReportContext
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ReportContext.ReportContext
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.ReportContext.ReportContext


module Amazonka.LicenseManager.Types.ReportFrequencyType
newtype ReportFrequencyType
ReportFrequencyType' :: Text -> ReportFrequencyType
[fromReportFrequencyType] :: ReportFrequencyType -> Text
pattern ReportFrequencyType_DAY :: ReportFrequencyType
pattern ReportFrequencyType_MONTH :: ReportFrequencyType
pattern ReportFrequencyType_WEEK :: ReportFrequencyType
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance GHC.Read.Read Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType
instance GHC.Show.Show Amazonka.LicenseManager.Types.ReportFrequencyType.ReportFrequencyType


module Amazonka.LicenseManager.Types.ReportFrequency

-- | Details about how frequently reports are generated.
--   
--   <i>See:</i> <a>newReportFrequency</a> smart constructor.
data ReportFrequency
ReportFrequency' :: Maybe ReportFrequencyType -> Maybe Int -> ReportFrequency

-- | Time period between each report. The period can be daily, weekly, or
--   monthly.
[$sel:period:ReportFrequency'] :: ReportFrequency -> Maybe ReportFrequencyType

-- | Number of times within the frequency period that a report is
--   generated. The only supported value is <tt>1</tt>.
[$sel:value:ReportFrequency'] :: ReportFrequency -> Maybe Int

-- | Create a value of <a>ReportFrequency</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:period:ReportFrequency'</a>, <a>reportFrequency_period</a> -
--   Time period between each report. The period can be daily, weekly, or
--   monthly.
--   
--   <a>$sel:value:ReportFrequency'</a>, <a>reportFrequency_value</a> -
--   Number of times within the frequency period that a report is
--   generated. The only supported value is <tt>1</tt>.
newReportFrequency :: ReportFrequency

-- | Time period between each report. The period can be daily, weekly, or
--   monthly.
reportFrequency_period :: Lens' ReportFrequency (Maybe ReportFrequencyType)

-- | Number of times within the frequency period that a report is
--   generated. The only supported value is <tt>1</tt>.
reportFrequency_value :: Lens' ReportFrequency (Maybe Int)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ReportFrequency.ReportFrequency
instance GHC.Show.Show Amazonka.LicenseManager.Types.ReportFrequency.ReportFrequency
instance GHC.Read.Read Amazonka.LicenseManager.Types.ReportFrequency.ReportFrequency
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ReportFrequency.ReportFrequency
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ReportFrequency.ReportFrequency
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ReportFrequency.ReportFrequency
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ReportFrequency.ReportFrequency
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.ReportFrequency.ReportFrequency


module Amazonka.LicenseManager.Types.ReportType
newtype ReportType
ReportType' :: Text -> ReportType
[fromReportType] :: ReportType -> Text
pattern ReportType_LicenseConfigurationSummaryReport :: ReportType
pattern ReportType_LicenseConfigurationUsageReport :: ReportType
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.ReportType.ReportType
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.ReportType.ReportType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.ReportType.ReportType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.ReportType.ReportType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.ReportType.ReportType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ReportType.ReportType
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.ReportType.ReportType
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.ReportType.ReportType
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.ReportType.ReportType
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.ReportType.ReportType
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.ReportType.ReportType
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.ReportType.ReportType
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ReportType.ReportType
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ReportType.ReportType
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ReportType.ReportType
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.ReportType.ReportType
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ReportType.ReportType
instance GHC.Read.Read Amazonka.LicenseManager.Types.ReportType.ReportType
instance GHC.Show.Show Amazonka.LicenseManager.Types.ReportType.ReportType


module Amazonka.LicenseManager.Types.ResourceType
newtype ResourceType
ResourceType' :: Text -> ResourceType
[fromResourceType] :: ResourceType -> Text
pattern ResourceType_EC2_AMI :: ResourceType
pattern ResourceType_EC2_HOST :: ResourceType
pattern ResourceType_EC2_INSTANCE :: ResourceType
pattern ResourceType_RDS :: ResourceType
pattern ResourceType_SYSTEMS_MANAGER_MANAGED_INSTANCE :: ResourceType
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance GHC.Read.Read Amazonka.LicenseManager.Types.ResourceType.ResourceType
instance GHC.Show.Show Amazonka.LicenseManager.Types.ResourceType.ResourceType


module Amazonka.LicenseManager.Types.ResourceInventory

-- | Details about a resource.
--   
--   <i>See:</i> <a>newResourceInventory</a> smart constructor.
data ResourceInventory
ResourceInventory' :: Maybe Text -> Maybe Text -> Maybe ResourceType -> Maybe Text -> Maybe Text -> Maybe Text -> ResourceInventory

-- | Platform of the resource.
[$sel:platform:ResourceInventory'] :: ResourceInventory -> Maybe Text

-- | ID of the resource.
[$sel:resourceId:ResourceInventory'] :: ResourceInventory -> Maybe Text

-- | Type of resource.
[$sel:resourceType:ResourceInventory'] :: ResourceInventory -> Maybe ResourceType

-- | Platform version of the resource in the inventory.
[$sel:platformVersion:ResourceInventory'] :: ResourceInventory -> Maybe Text

-- | Amazon Resource Name (ARN) of the resource.
[$sel:resourceArn:ResourceInventory'] :: ResourceInventory -> Maybe Text

-- | ID of the account that owns the resource.
[$sel:resourceOwningAccountId:ResourceInventory'] :: ResourceInventory -> Maybe Text

-- | Create a value of <a>ResourceInventory</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:platform:ResourceInventory'</a>,
--   <a>resourceInventory_platform</a> - Platform of the resource.
--   
--   <a>$sel:resourceId:ResourceInventory'</a>,
--   <a>resourceInventory_resourceId</a> - ID of the resource.
--   
--   <a>$sel:resourceType:ResourceInventory'</a>,
--   <a>resourceInventory_resourceType</a> - Type of resource.
--   
--   <a>$sel:platformVersion:ResourceInventory'</a>,
--   <a>resourceInventory_platformVersion</a> - Platform version of the
--   resource in the inventory.
--   
--   <a>$sel:resourceArn:ResourceInventory'</a>,
--   <a>resourceInventory_resourceArn</a> - Amazon Resource Name (ARN) of
--   the resource.
--   
--   <a>$sel:resourceOwningAccountId:ResourceInventory'</a>,
--   <a>resourceInventory_resourceOwningAccountId</a> - ID of the account
--   that owns the resource.
newResourceInventory :: ResourceInventory

-- | Platform of the resource.
resourceInventory_platform :: Lens' ResourceInventory (Maybe Text)

-- | ID of the resource.
resourceInventory_resourceId :: Lens' ResourceInventory (Maybe Text)

-- | Type of resource.
resourceInventory_resourceType :: Lens' ResourceInventory (Maybe ResourceType)

-- | Platform version of the resource in the inventory.
resourceInventory_platformVersion :: Lens' ResourceInventory (Maybe Text)

-- | Amazon Resource Name (ARN) of the resource.
resourceInventory_resourceArn :: Lens' ResourceInventory (Maybe Text)

-- | ID of the account that owns the resource.
resourceInventory_resourceOwningAccountId :: Lens' ResourceInventory (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ResourceInventory.ResourceInventory
instance GHC.Show.Show Amazonka.LicenseManager.Types.ResourceInventory.ResourceInventory
instance GHC.Read.Read Amazonka.LicenseManager.Types.ResourceInventory.ResourceInventory
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ResourceInventory.ResourceInventory
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ResourceInventory.ResourceInventory
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ResourceInventory.ResourceInventory
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ResourceInventory.ResourceInventory


module Amazonka.LicenseManager.Types.ManagedResourceSummary

-- | Summary information about a managed resource.
--   
--   <i>See:</i> <a>newManagedResourceSummary</a> smart constructor.
data ManagedResourceSummary
ManagedResourceSummary' :: Maybe Integer -> Maybe ResourceType -> ManagedResourceSummary

-- | Number of resources associated with licenses.
[$sel:associationCount:ManagedResourceSummary'] :: ManagedResourceSummary -> Maybe Integer

-- | Type of resource associated with a license.
[$sel:resourceType:ManagedResourceSummary'] :: ManagedResourceSummary -> Maybe ResourceType

-- | Create a value of <a>ManagedResourceSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:associationCount:ManagedResourceSummary'</a>,
--   <a>managedResourceSummary_associationCount</a> - Number of resources
--   associated with licenses.
--   
--   <a>$sel:resourceType:ManagedResourceSummary'</a>,
--   <a>managedResourceSummary_resourceType</a> - Type of resource
--   associated with a license.
newManagedResourceSummary :: ManagedResourceSummary

-- | Number of resources associated with licenses.
managedResourceSummary_associationCount :: Lens' ManagedResourceSummary (Maybe Integer)

-- | Type of resource associated with a license.
managedResourceSummary_resourceType :: Lens' ManagedResourceSummary (Maybe ResourceType)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ManagedResourceSummary.ManagedResourceSummary
instance GHC.Show.Show Amazonka.LicenseManager.Types.ManagedResourceSummary.ManagedResourceSummary
instance GHC.Read.Read Amazonka.LicenseManager.Types.ManagedResourceSummary.ManagedResourceSummary
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ManagedResourceSummary.ManagedResourceSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ManagedResourceSummary.ManagedResourceSummary
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ManagedResourceSummary.ManagedResourceSummary
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ManagedResourceSummary.ManagedResourceSummary


module Amazonka.LicenseManager.Types.LicenseOperationFailure

-- | Describes the failure of a license operation.
--   
--   <i>See:</i> <a>newLicenseOperationFailure</a> smart constructor.
data LicenseOperationFailure
LicenseOperationFailure' :: Maybe ResourceType -> Maybe Text -> Maybe Text -> Maybe [Metadata] -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> LicenseOperationFailure

-- | Resource type.
[$sel:resourceType:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe ResourceType

-- | The requester is "License Manager Automated Discovery".
[$sel:operationRequestedBy:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe Text

-- | Amazon Resource Name (ARN) of the resource.
[$sel:resourceArn:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe Text

-- | Reserved.
[$sel:metadataList:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe [Metadata]

-- | Name of the operation.
[$sel:operationName:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe Text

-- | Failure time.
[$sel:failureTime:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe POSIX

-- | Error message.
[$sel:errorMessage:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe Text

-- | ID of the Amazon Web Services account that owns the resource.
[$sel:resourceOwnerId:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe Text

-- | Create a value of <a>LicenseOperationFailure</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_resourceType</a> - Resource type.
--   
--   <a>$sel:operationRequestedBy:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_operationRequestedBy</a> - The requester is
--   "License Manager Automated Discovery".
--   
--   <a>$sel:resourceArn:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_resourceArn</a> - Amazon Resource Name
--   (ARN) of the resource.
--   
--   <a>$sel:metadataList:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_metadataList</a> - Reserved.
--   
--   <a>$sel:operationName:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_operationName</a> - Name of the operation.
--   
--   <a>$sel:failureTime:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_failureTime</a> - Failure time.
--   
--   <a>$sel:errorMessage:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_errorMessage</a> - Error message.
--   
--   <a>$sel:resourceOwnerId:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_resourceOwnerId</a> - ID of the Amazon Web
--   Services account that owns the resource.
newLicenseOperationFailure :: LicenseOperationFailure

-- | Resource type.
licenseOperationFailure_resourceType :: Lens' LicenseOperationFailure (Maybe ResourceType)

-- | The requester is "License Manager Automated Discovery".
licenseOperationFailure_operationRequestedBy :: Lens' LicenseOperationFailure (Maybe Text)

-- | Amazon Resource Name (ARN) of the resource.
licenseOperationFailure_resourceArn :: Lens' LicenseOperationFailure (Maybe Text)

-- | Reserved.
licenseOperationFailure_metadataList :: Lens' LicenseOperationFailure (Maybe [Metadata])

-- | Name of the operation.
licenseOperationFailure_operationName :: Lens' LicenseOperationFailure (Maybe Text)

-- | Failure time.
licenseOperationFailure_failureTime :: Lens' LicenseOperationFailure (Maybe UTCTime)

-- | Error message.
licenseOperationFailure_errorMessage :: Lens' LicenseOperationFailure (Maybe Text)

-- | ID of the Amazon Web Services account that owns the resource.
licenseOperationFailure_resourceOwnerId :: Lens' LicenseOperationFailure (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseOperationFailure.LicenseOperationFailure
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseOperationFailure.LicenseOperationFailure
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseOperationFailure.LicenseOperationFailure
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseOperationFailure.LicenseOperationFailure
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseOperationFailure.LicenseOperationFailure
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseOperationFailure.LicenseOperationFailure
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseOperationFailure.LicenseOperationFailure


module Amazonka.LicenseManager.Types.LicenseConfigurationUsage

-- | Details about the usage of a resource associated with a license
--   configuration.
--   
--   <i>See:</i> <a>newLicenseConfigurationUsage</a> smart constructor.
data LicenseConfigurationUsage
LicenseConfigurationUsage' :: Maybe ResourceType -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Integer -> Maybe Text -> LicenseConfigurationUsage

-- | Type of resource.
[$sel:resourceType:LicenseConfigurationUsage'] :: LicenseConfigurationUsage -> Maybe ResourceType

-- | Status of the resource.
[$sel:resourceStatus:LicenseConfigurationUsage'] :: LicenseConfigurationUsage -> Maybe Text

-- | Time when the license configuration was initially associated with the
--   resource.
[$sel:associationTime:LicenseConfigurationUsage'] :: LicenseConfigurationUsage -> Maybe POSIX

-- | Amazon Resource Name (ARN) of the resource.
[$sel:resourceArn:LicenseConfigurationUsage'] :: LicenseConfigurationUsage -> Maybe Text

-- | Number of licenses consumed by the resource.
[$sel:consumedLicenses:LicenseConfigurationUsage'] :: LicenseConfigurationUsage -> Maybe Integer

-- | ID of the account that owns the resource.
[$sel:resourceOwnerId:LicenseConfigurationUsage'] :: LicenseConfigurationUsage -> Maybe Text

-- | Create a value of <a>LicenseConfigurationUsage</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_resourceType</a> - Type of resource.
--   
--   <a>$sel:resourceStatus:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_resourceStatus</a> - Status of the
--   resource.
--   
--   <a>$sel:associationTime:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_associationTime</a> - Time when the
--   license configuration was initially associated with the resource.
--   
--   <a>$sel:resourceArn:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_resourceArn</a> - Amazon Resource Name
--   (ARN) of the resource.
--   
--   <a>$sel:consumedLicenses:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_consumedLicenses</a> - Number of licenses
--   consumed by the resource.
--   
--   <a>$sel:resourceOwnerId:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_resourceOwnerId</a> - ID of the account
--   that owns the resource.
newLicenseConfigurationUsage :: LicenseConfigurationUsage

-- | Type of resource.
licenseConfigurationUsage_resourceType :: Lens' LicenseConfigurationUsage (Maybe ResourceType)

-- | Status of the resource.
licenseConfigurationUsage_resourceStatus :: Lens' LicenseConfigurationUsage (Maybe Text)

-- | Time when the license configuration was initially associated with the
--   resource.
licenseConfigurationUsage_associationTime :: Lens' LicenseConfigurationUsage (Maybe UTCTime)

-- | Amazon Resource Name (ARN) of the resource.
licenseConfigurationUsage_resourceArn :: Lens' LicenseConfigurationUsage (Maybe Text)

-- | Number of licenses consumed by the resource.
licenseConfigurationUsage_consumedLicenses :: Lens' LicenseConfigurationUsage (Maybe Integer)

-- | ID of the account that owns the resource.
licenseConfigurationUsage_resourceOwnerId :: Lens' LicenseConfigurationUsage (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseConfigurationUsage.LicenseConfigurationUsage
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseConfigurationUsage.LicenseConfigurationUsage
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseConfigurationUsage.LicenseConfigurationUsage
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseConfigurationUsage.LicenseConfigurationUsage
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseConfigurationUsage.LicenseConfigurationUsage
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseConfigurationUsage.LicenseConfigurationUsage
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseConfigurationUsage.LicenseConfigurationUsage


module Amazonka.LicenseManager.Types.LicenseConfigurationAssociation

-- | Describes an association with a license configuration.
--   
--   <i>See:</i> <a>newLicenseConfigurationAssociation</a> smart
--   constructor.
data LicenseConfigurationAssociation
LicenseConfigurationAssociation' :: Maybe ResourceType -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> LicenseConfigurationAssociation

-- | Type of server resource.
[$sel:resourceType:LicenseConfigurationAssociation'] :: LicenseConfigurationAssociation -> Maybe ResourceType

-- | Scope of AMI associations. The possible value is
--   <tt>cross-account</tt>.
[$sel:amiAssociationScope:LicenseConfigurationAssociation'] :: LicenseConfigurationAssociation -> Maybe Text

-- | Time when the license configuration was associated with the resource.
[$sel:associationTime:LicenseConfigurationAssociation'] :: LicenseConfigurationAssociation -> Maybe POSIX

-- | Amazon Resource Name (ARN) of the resource.
[$sel:resourceArn:LicenseConfigurationAssociation'] :: LicenseConfigurationAssociation -> Maybe Text

-- | ID of the Amazon Web Services account that owns the resource consuming
--   licenses.
[$sel:resourceOwnerId:LicenseConfigurationAssociation'] :: LicenseConfigurationAssociation -> Maybe Text

-- | Create a value of <a>LicenseConfigurationAssociation</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_resourceType</a> - Type of server
--   resource.
--   
--   <a>$sel:amiAssociationScope:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_amiAssociationScope</a> - Scope of
--   AMI associations. The possible value is <tt>cross-account</tt>.
--   
--   <a>$sel:associationTime:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_associationTime</a> - Time when the
--   license configuration was associated with the resource.
--   
--   <a>$sel:resourceArn:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_resourceArn</a> - Amazon Resource
--   Name (ARN) of the resource.
--   
--   <a>$sel:resourceOwnerId:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_resourceOwnerId</a> - ID of the
--   Amazon Web Services account that owns the resource consuming licenses.
newLicenseConfigurationAssociation :: LicenseConfigurationAssociation

-- | Type of server resource.
licenseConfigurationAssociation_resourceType :: Lens' LicenseConfigurationAssociation (Maybe ResourceType)

-- | Scope of AMI associations. The possible value is
--   <tt>cross-account</tt>.
licenseConfigurationAssociation_amiAssociationScope :: Lens' LicenseConfigurationAssociation (Maybe Text)

-- | Time when the license configuration was associated with the resource.
licenseConfigurationAssociation_associationTime :: Lens' LicenseConfigurationAssociation (Maybe UTCTime)

-- | Amazon Resource Name (ARN) of the resource.
licenseConfigurationAssociation_resourceArn :: Lens' LicenseConfigurationAssociation (Maybe Text)

-- | ID of the Amazon Web Services account that owns the resource consuming
--   licenses.
licenseConfigurationAssociation_resourceOwnerId :: Lens' LicenseConfigurationAssociation (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseConfigurationAssociation.LicenseConfigurationAssociation
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseConfigurationAssociation.LicenseConfigurationAssociation
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseConfigurationAssociation.LicenseConfigurationAssociation
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseConfigurationAssociation.LicenseConfigurationAssociation
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseConfigurationAssociation.LicenseConfigurationAssociation
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseConfigurationAssociation.LicenseConfigurationAssociation
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseConfigurationAssociation.LicenseConfigurationAssociation


module Amazonka.LicenseManager.Types.ConsumedLicenseSummary

-- | Details about license consumption.
--   
--   <i>See:</i> <a>newConsumedLicenseSummary</a> smart constructor.
data ConsumedLicenseSummary
ConsumedLicenseSummary' :: Maybe ResourceType -> Maybe Integer -> ConsumedLicenseSummary

-- | Resource type of the resource consuming a license.
[$sel:resourceType:ConsumedLicenseSummary'] :: ConsumedLicenseSummary -> Maybe ResourceType

-- | Number of licenses consumed by the resource.
[$sel:consumedLicenses:ConsumedLicenseSummary'] :: ConsumedLicenseSummary -> Maybe Integer

-- | Create a value of <a>ConsumedLicenseSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:ConsumedLicenseSummary'</a>,
--   <a>consumedLicenseSummary_resourceType</a> - Resource type of the
--   resource consuming a license.
--   
--   <a>$sel:consumedLicenses:ConsumedLicenseSummary'</a>,
--   <a>consumedLicenseSummary_consumedLicenses</a> - Number of licenses
--   consumed by the resource.
newConsumedLicenseSummary :: ConsumedLicenseSummary

-- | Resource type of the resource consuming a license.
consumedLicenseSummary_resourceType :: Lens' ConsumedLicenseSummary (Maybe ResourceType)

-- | Number of licenses consumed by the resource.
consumedLicenseSummary_consumedLicenses :: Lens' ConsumedLicenseSummary (Maybe Integer)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ConsumedLicenseSummary.ConsumedLicenseSummary
instance GHC.Show.Show Amazonka.LicenseManager.Types.ConsumedLicenseSummary.ConsumedLicenseSummary
instance GHC.Read.Read Amazonka.LicenseManager.Types.ConsumedLicenseSummary.ConsumedLicenseSummary
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ConsumedLicenseSummary.ConsumedLicenseSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ConsumedLicenseSummary.ConsumedLicenseSummary
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ConsumedLicenseSummary.ConsumedLicenseSummary
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ConsumedLicenseSummary.ConsumedLicenseSummary


module Amazonka.LicenseManager.Types.LicenseConfiguration

-- | A license configuration is an abstraction of a customer license
--   agreement that can be consumed and enforced by License Manager.
--   Components include specifications for the license type (licensing by
--   instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy,
--   Dedicated Instance, Dedicated Host, or all of these), host affinity
--   (how long a VM must be associated with a host), and the number of
--   licenses purchased and used.
--   
--   <i>See:</i> <a>newLicenseConfiguration</a> smart constructor.
data LicenseConfiguration
LicenseConfiguration' :: Maybe Text -> Maybe Text -> Maybe [ConsumedLicenseSummary] -> Maybe Integer -> Maybe [ManagedResourceSummary] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [ProductInformation] -> Maybe LicenseCountingType -> Maybe AutomatedDiscoveryInformation -> Maybe Integer -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Text -> LicenseConfiguration

-- | Status of the license configuration.
[$sel:status:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Text

-- | Account ID of the license configuration's owner.
[$sel:ownerAccountId:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Text

-- | Summaries for licenses consumed by various resources.
[$sel:consumedLicenseSummaryList:LicenseConfiguration'] :: LicenseConfiguration -> Maybe [ConsumedLicenseSummary]

-- | Number of licenses managed by the license configuration.
[$sel:licenseCount:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Integer

-- | Summaries for managed resources.
[$sel:managedResourceSummaryList:LicenseConfiguration'] :: LicenseConfiguration -> Maybe [ManagedResourceSummary]

-- | Name of the license configuration.
[$sel:name:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Text

-- | Number of available licenses as a hard limit.
[$sel:licenseCountHardLimit:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Bool

-- | When true, disassociates a resource when software is uninstalled.
[$sel:disassociateWhenNotFound:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Bool

-- | Product information.
[$sel:productInformationList:LicenseConfiguration'] :: LicenseConfiguration -> Maybe [ProductInformation]

-- | Dimension to use to track the license inventory.
[$sel:licenseCountingType:LicenseConfiguration'] :: LicenseConfiguration -> Maybe LicenseCountingType

-- | Automated discovery information.
[$sel:automatedDiscoveryInformation:LicenseConfiguration'] :: LicenseConfiguration -> Maybe AutomatedDiscoveryInformation

-- | Number of licenses consumed.
[$sel:consumedLicenses:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Integer

-- | License rules.
[$sel:licenseRules:LicenseConfiguration'] :: LicenseConfiguration -> Maybe [Text]

-- | Unique ID of the license configuration.
[$sel:licenseConfigurationId:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Text

-- | Description of the license configuration.
[$sel:description:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Text

-- | Amazon Resource Name (ARN) of the license configuration.
[$sel:licenseConfigurationArn:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Text

-- | Create a value of <a>LicenseConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_status</a> - Status of the license
--   configuration.
--   
--   <a>$sel:ownerAccountId:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_ownerAccountId</a> - Account ID of the license
--   configuration's owner.
--   
--   <a>$sel:consumedLicenseSummaryList:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_consumedLicenseSummaryList</a> - Summaries for
--   licenses consumed by various resources.
--   
--   <a>$sel:licenseCount:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseCount</a> - Number of licenses managed
--   by the license configuration.
--   
--   <a>$sel:managedResourceSummaryList:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_managedResourceSummaryList</a> - Summaries for
--   managed resources.
--   
--   <a>$sel:name:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_name</a> - Name of the license configuration.
--   
--   <a>$sel:licenseCountHardLimit:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseCountHardLimit</a> - Number of
--   available licenses as a hard limit.
--   
--   <a>$sel:disassociateWhenNotFound:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_disassociateWhenNotFound</a> - When true,
--   disassociates a resource when software is uninstalled.
--   
--   <a>$sel:productInformationList:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_productInformationList</a> - Product
--   information.
--   
--   <a>$sel:licenseCountingType:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseCountingType</a> - Dimension to use to
--   track the license inventory.
--   
--   <a>$sel:automatedDiscoveryInformation:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_automatedDiscoveryInformation</a> - Automated
--   discovery information.
--   
--   <a>$sel:consumedLicenses:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_consumedLicenses</a> - Number of licenses
--   consumed.
--   
--   <a>$sel:licenseRules:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseRules</a> - License rules.
--   
--   <a>$sel:licenseConfigurationId:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseConfigurationId</a> - Unique ID of the
--   license configuration.
--   
--   <a>$sel:description:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_description</a> - Description of the license
--   configuration.
--   
--   <a>$sel:licenseConfigurationArn:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseConfigurationArn</a> - Amazon Resource
--   Name (ARN) of the license configuration.
newLicenseConfiguration :: LicenseConfiguration

-- | Status of the license configuration.
licenseConfiguration_status :: Lens' LicenseConfiguration (Maybe Text)

-- | Account ID of the license configuration's owner.
licenseConfiguration_ownerAccountId :: Lens' LicenseConfiguration (Maybe Text)

-- | Summaries for licenses consumed by various resources.
licenseConfiguration_consumedLicenseSummaryList :: Lens' LicenseConfiguration (Maybe [ConsumedLicenseSummary])

-- | Number of licenses managed by the license configuration.
licenseConfiguration_licenseCount :: Lens' LicenseConfiguration (Maybe Integer)

-- | Summaries for managed resources.
licenseConfiguration_managedResourceSummaryList :: Lens' LicenseConfiguration (Maybe [ManagedResourceSummary])

-- | Name of the license configuration.
licenseConfiguration_name :: Lens' LicenseConfiguration (Maybe Text)

-- | Number of available licenses as a hard limit.
licenseConfiguration_licenseCountHardLimit :: Lens' LicenseConfiguration (Maybe Bool)

-- | When true, disassociates a resource when software is uninstalled.
licenseConfiguration_disassociateWhenNotFound :: Lens' LicenseConfiguration (Maybe Bool)

-- | Product information.
licenseConfiguration_productInformationList :: Lens' LicenseConfiguration (Maybe [ProductInformation])

-- | Dimension to use to track the license inventory.
licenseConfiguration_licenseCountingType :: Lens' LicenseConfiguration (Maybe LicenseCountingType)

-- | Automated discovery information.
licenseConfiguration_automatedDiscoveryInformation :: Lens' LicenseConfiguration (Maybe AutomatedDiscoveryInformation)

-- | Number of licenses consumed.
licenseConfiguration_consumedLicenses :: Lens' LicenseConfiguration (Maybe Integer)

-- | License rules.
licenseConfiguration_licenseRules :: Lens' LicenseConfiguration (Maybe [Text])

-- | Unique ID of the license configuration.
licenseConfiguration_licenseConfigurationId :: Lens' LicenseConfiguration (Maybe Text)

-- | Description of the license configuration.
licenseConfiguration_description :: Lens' LicenseConfiguration (Maybe Text)

-- | Amazon Resource Name (ARN) of the license configuration.
licenseConfiguration_licenseConfigurationArn :: Lens' LicenseConfiguration (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.LicenseConfiguration.LicenseConfiguration
instance GHC.Show.Show Amazonka.LicenseManager.Types.LicenseConfiguration.LicenseConfiguration
instance GHC.Read.Read Amazonka.LicenseManager.Types.LicenseConfiguration.LicenseConfiguration
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.LicenseConfiguration.LicenseConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.LicenseConfiguration.LicenseConfiguration
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.LicenseConfiguration.LicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.LicenseConfiguration.LicenseConfiguration


module Amazonka.LicenseManager.Types.S3Location

-- | Details of the S3 bucket that report generator reports are published
--   to.
--   
--   <i>See:</i> <a>newS3Location</a> smart constructor.
data S3Location
S3Location' :: Maybe Text -> Maybe Text -> S3Location

-- | Name of the S3 bucket reports are published to.
[$sel:bucket:S3Location'] :: S3Location -> Maybe Text

-- | Prefix of the S3 bucket reports are published to.
[$sel:keyPrefix:S3Location'] :: S3Location -> Maybe Text

-- | Create a value of <a>S3Location</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bucket:S3Location'</a>, <a>s3Location_bucket</a> - Name of the
--   S3 bucket reports are published to.
--   
--   <a>$sel:keyPrefix:S3Location'</a>, <a>s3Location_keyPrefix</a> -
--   Prefix of the S3 bucket reports are published to.
newS3Location :: S3Location

-- | Name of the S3 bucket reports are published to.
s3Location_bucket :: Lens' S3Location (Maybe Text)

-- | Prefix of the S3 bucket reports are published to.
s3Location_keyPrefix :: Lens' S3Location (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.S3Location.S3Location
instance GHC.Show.Show Amazonka.LicenseManager.Types.S3Location.S3Location
instance GHC.Read.Read Amazonka.LicenseManager.Types.S3Location.S3Location
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.S3Location.S3Location
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.S3Location.S3Location
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.S3Location.S3Location
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.S3Location.S3Location


module Amazonka.LicenseManager.Types.Tag

-- | Details about a tag for a license configuration.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | Tag value.
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | Tag key.
[$sel:key:Tag'] :: Tag -> Maybe Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - Tag value.
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - Tag key.
newTag :: Tag

-- | Tag value.
tag_value :: Lens' Tag (Maybe Text)

-- | Tag key.
tag_key :: Lens' Tag (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.Tag.Tag
instance GHC.Show.Show Amazonka.LicenseManager.Types.Tag.Tag
instance GHC.Read.Read Amazonka.LicenseManager.Types.Tag.Tag
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.Tag.Tag
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.Tag.Tag


module Amazonka.LicenseManager.Types.ReportGenerator

-- | Describe the details of a report generator.
--   
--   <i>See:</i> <a>newReportGenerator</a> smart constructor.
data ReportGenerator
ReportGenerator' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe ReportFrequency -> Maybe S3Location -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe [ReportType] -> Maybe Text -> Maybe [Tag] -> Maybe ReportContext -> ReportGenerator

-- | Time the last report was generated at.
[$sel:lastReportGenerationTime:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Failure message for the last report generation attempt.
[$sel:lastRunFailureReason:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Status of the last report generation attempt.
[$sel:lastRunStatus:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Name of the report generator.
[$sel:reportGeneratorName:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Details about how frequently reports are generated.
[$sel:reportFrequency:ReportGenerator'] :: ReportGenerator -> Maybe ReportFrequency

-- | Details of the S3 bucket that report generator reports are published
--   to.
[$sel:s3Location:ReportGenerator'] :: ReportGenerator -> Maybe S3Location

-- | Amazon Resource Name (ARN) of the report generator.
[$sel:licenseManagerReportGeneratorArn:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | The Amazon Web Services account ID used to create the report
--   generator.
[$sel:reportCreatorAccount:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Description of the report generator.
[$sel:description:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Type of reports that are generated.
[$sel:reportType:ReportGenerator'] :: ReportGenerator -> Maybe [ReportType]

-- | Time the report was created.
[$sel:createTime:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Tags associated with the report generator.
[$sel:tags:ReportGenerator'] :: ReportGenerator -> Maybe [Tag]

-- | License configuration type for this generator.
[$sel:reportContext:ReportGenerator'] :: ReportGenerator -> Maybe ReportContext

-- | Create a value of <a>ReportGenerator</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastReportGenerationTime:ReportGenerator'</a>,
--   <a>reportGenerator_lastReportGenerationTime</a> - Time the last report
--   was generated at.
--   
--   <a>$sel:lastRunFailureReason:ReportGenerator'</a>,
--   <a>reportGenerator_lastRunFailureReason</a> - Failure message for the
--   last report generation attempt.
--   
--   <a>$sel:lastRunStatus:ReportGenerator'</a>,
--   <a>reportGenerator_lastRunStatus</a> - Status of the last report
--   generation attempt.
--   
--   <a>$sel:reportGeneratorName:ReportGenerator'</a>,
--   <a>reportGenerator_reportGeneratorName</a> - Name of the report
--   generator.
--   
--   <a>$sel:reportFrequency:ReportGenerator'</a>,
--   <a>reportGenerator_reportFrequency</a> - Details about how frequently
--   reports are generated.
--   
--   <a>$sel:s3Location:ReportGenerator'</a>,
--   <a>reportGenerator_s3Location</a> - Details of the S3 bucket that
--   report generator reports are published to.
--   
--   <a>$sel:licenseManagerReportGeneratorArn:ReportGenerator'</a>,
--   <a>reportGenerator_licenseManagerReportGeneratorArn</a> - Amazon
--   Resource Name (ARN) of the report generator.
--   
--   <a>$sel:reportCreatorAccount:ReportGenerator'</a>,
--   <a>reportGenerator_reportCreatorAccount</a> - The Amazon Web Services
--   account ID used to create the report generator.
--   
--   <a>$sel:description:ReportGenerator'</a>,
--   <a>reportGenerator_description</a> - Description of the report
--   generator.
--   
--   <a>$sel:reportType:ReportGenerator'</a>,
--   <a>reportGenerator_reportType</a> - Type of reports that are
--   generated.
--   
--   <a>$sel:createTime:ReportGenerator'</a>,
--   <a>reportGenerator_createTime</a> - Time the report was created.
--   
--   <a>$sel:tags:ReportGenerator'</a>, <a>reportGenerator_tags</a> - Tags
--   associated with the report generator.
--   
--   <a>$sel:reportContext:ReportGenerator'</a>,
--   <a>reportGenerator_reportContext</a> - License configuration type for
--   this generator.
newReportGenerator :: ReportGenerator

-- | Time the last report was generated at.
reportGenerator_lastReportGenerationTime :: Lens' ReportGenerator (Maybe Text)

-- | Failure message for the last report generation attempt.
reportGenerator_lastRunFailureReason :: Lens' ReportGenerator (Maybe Text)

-- | Status of the last report generation attempt.
reportGenerator_lastRunStatus :: Lens' ReportGenerator (Maybe Text)

-- | Name of the report generator.
reportGenerator_reportGeneratorName :: Lens' ReportGenerator (Maybe Text)

-- | Details about how frequently reports are generated.
reportGenerator_reportFrequency :: Lens' ReportGenerator (Maybe ReportFrequency)

-- | Details of the S3 bucket that report generator reports are published
--   to.
reportGenerator_s3Location :: Lens' ReportGenerator (Maybe S3Location)

-- | Amazon Resource Name (ARN) of the report generator.
reportGenerator_licenseManagerReportGeneratorArn :: Lens' ReportGenerator (Maybe Text)

-- | The Amazon Web Services account ID used to create the report
--   generator.
reportGenerator_reportCreatorAccount :: Lens' ReportGenerator (Maybe Text)

-- | Description of the report generator.
reportGenerator_description :: Lens' ReportGenerator (Maybe Text)

-- | Type of reports that are generated.
reportGenerator_reportType :: Lens' ReportGenerator (Maybe [ReportType])

-- | Time the report was created.
reportGenerator_createTime :: Lens' ReportGenerator (Maybe Text)

-- | Tags associated with the report generator.
reportGenerator_tags :: Lens' ReportGenerator (Maybe [Tag])

-- | License configuration type for this generator.
reportGenerator_reportContext :: Lens' ReportGenerator (Maybe ReportContext)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.ReportGenerator.ReportGenerator
instance GHC.Show.Show Amazonka.LicenseManager.Types.ReportGenerator.ReportGenerator
instance GHC.Read.Read Amazonka.LicenseManager.Types.ReportGenerator.ReportGenerator
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.ReportGenerator.ReportGenerator
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.ReportGenerator.ReportGenerator
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.ReportGenerator.ReportGenerator
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.ReportGenerator.ReportGenerator


module Amazonka.LicenseManager.Types.TokenData

-- | Describes a token.
--   
--   <i>See:</i> <a>newTokenData</a> smart constructor.
data TokenData
TokenData' :: Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Text -> TokenData

-- | Token status. The possible values are <tt>AVAILABLE</tt> and
--   <tt>DELETED</tt>.
[$sel:status:TokenData'] :: TokenData -> Maybe Text

-- | Token ID.
[$sel:tokenId:TokenData'] :: TokenData -> Maybe Text

-- | Data specified by the caller.
[$sel:tokenProperties:TokenData'] :: TokenData -> Maybe [Text]

-- | Amazon Resource Names (ARN) of the roles included in the token.
[$sel:roleArns:TokenData'] :: TokenData -> Maybe [Text]

-- | Type of token generated. The supported value is
--   <tt>REFRESH_TOKEN</tt>.
[$sel:tokenType:TokenData'] :: TokenData -> Maybe Text

-- | Token expiration time, in ISO8601-UTC format.
[$sel:expirationTime:TokenData'] :: TokenData -> Maybe Text

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:TokenData'] :: TokenData -> Maybe Text

-- | Create a value of <a>TokenData</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:TokenData'</a>, <a>tokenData_status</a> - Token status.
--   The possible values are <tt>AVAILABLE</tt> and <tt>DELETED</tt>.
--   
--   <a>$sel:tokenId:TokenData'</a>, <a>tokenData_tokenId</a> - Token ID.
--   
--   <a>$sel:tokenProperties:TokenData'</a>,
--   <a>tokenData_tokenProperties</a> - Data specified by the caller.
--   
--   <a>$sel:roleArns:TokenData'</a>, <a>tokenData_roleArns</a> - Amazon
--   Resource Names (ARN) of the roles included in the token.
--   
--   <a>$sel:tokenType:TokenData'</a>, <a>tokenData_tokenType</a> - Type of
--   token generated. The supported value is <tt>REFRESH_TOKEN</tt>.
--   
--   <a>$sel:expirationTime:TokenData'</a>, <a>tokenData_expirationTime</a>
--   - Token expiration time, in ISO8601-UTC format.
--   
--   <a>$sel:licenseArn:TokenData'</a>, <a>tokenData_licenseArn</a> -
--   Amazon Resource Name (ARN) of the license.
newTokenData :: TokenData

-- | Token status. The possible values are <tt>AVAILABLE</tt> and
--   <tt>DELETED</tt>.
tokenData_status :: Lens' TokenData (Maybe Text)

-- | Token ID.
tokenData_tokenId :: Lens' TokenData (Maybe Text)

-- | Data specified by the caller.
tokenData_tokenProperties :: Lens' TokenData (Maybe [Text])

-- | Amazon Resource Names (ARN) of the roles included in the token.
tokenData_roleArns :: Lens' TokenData (Maybe [Text])

-- | Type of token generated. The supported value is
--   <tt>REFRESH_TOKEN</tt>.
tokenData_tokenType :: Lens' TokenData (Maybe Text)

-- | Token expiration time, in ISO8601-UTC format.
tokenData_expirationTime :: Lens' TokenData (Maybe Text)

-- | Amazon Resource Name (ARN) of the license.
tokenData_licenseArn :: Lens' TokenData (Maybe Text)
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.TokenData.TokenData
instance GHC.Show.Show Amazonka.LicenseManager.Types.TokenData.TokenData
instance GHC.Read.Read Amazonka.LicenseManager.Types.TokenData.TokenData
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.TokenData.TokenData
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.TokenData.TokenData
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.TokenData.TokenData
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.TokenData.TokenData


module Amazonka.LicenseManager.Types.TokenType
newtype TokenType
TokenType' :: Text -> TokenType
[fromTokenType] :: TokenType -> Text
pattern TokenType_REFRESH_TOKEN :: TokenType
instance Amazonka.Data.XML.ToXML Amazonka.LicenseManager.Types.TokenType.TokenType
instance Amazonka.Data.XML.FromXML Amazonka.LicenseManager.Types.TokenType.TokenType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.LicenseManager.Types.TokenType.TokenType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.Types.TokenType.TokenType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.LicenseManager.Types.TokenType.TokenType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.LicenseManager.Types.TokenType.TokenType
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.Types.TokenType.TokenType
instance Amazonka.Data.Headers.ToHeader Amazonka.LicenseManager.Types.TokenType.TokenType
instance Amazonka.Data.Log.ToLog Amazonka.LicenseManager.Types.TokenType.TokenType
instance Amazonka.Data.ByteString.ToByteString Amazonka.LicenseManager.Types.TokenType.TokenType
instance Amazonka.Data.Text.ToText Amazonka.LicenseManager.Types.TokenType.TokenType
instance Amazonka.Data.Text.FromText Amazonka.LicenseManager.Types.TokenType.TokenType
instance Control.DeepSeq.NFData Amazonka.LicenseManager.Types.TokenType.TokenType
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.Types.TokenType.TokenType
instance GHC.Generics.Generic Amazonka.LicenseManager.Types.TokenType.TokenType
instance GHC.Classes.Ord Amazonka.LicenseManager.Types.TokenType.TokenType
instance GHC.Classes.Eq Amazonka.LicenseManager.Types.TokenType.TokenType
instance GHC.Read.Read Amazonka.LicenseManager.Types.TokenType.TokenType
instance GHC.Show.Show Amazonka.LicenseManager.Types.TokenType.TokenType


module Amazonka.LicenseManager.Types

-- | API version <tt>2018-08-01</tt> of the Amazon License Manager SDK
--   configuration.
defaultService :: Service

-- | There are no entitlements found for this license, or the entitlement
--   maximum count is reached.
_NoEntitlementsAllowedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The provided input is not valid. Try your request again.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Access to resource denied.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your resource limits have been exceeded.
_ResourceLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | License Manager cannot allocate a license to a resource because of its
--   state.
--   
--   For example, you cannot allocate a license to an instance in the
--   process of shutting down.
_InvalidResourceStateException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Too many requests have been submitted. Try again after a brief wait.
_RateLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A dependency required to run the API is missing.
_FailedDependencyException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There was a conflict processing the request. Try your request again.
_ConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request uses too many filters or too many filter values.
_FilterLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | One or more parameter values are not valid.
_InvalidParameterValueException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The Amazon Web Services user account does not have permission to
--   perform the action. Check the IAM policy associated with this account.
_AuthorizationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | This is not the correct Region for the resource. Try again.
_RedirectException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The server experienced an internal error. Try again.
_ServerInternalException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The entitlement is not allowed.
_EntitlementNotAllowedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The digital signature method is unsupported. Try your request again.
_UnsupportedDigitalSignatureMethodException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The resource cannot be found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You do not have enough licenses available to support a new resource
--   launch.
_LicenseUsageException :: AsError a => Getting (First ServiceError) a ServiceError
newtype AllowedOperation
AllowedOperation' :: Text -> AllowedOperation
[fromAllowedOperation] :: AllowedOperation -> Text
pattern AllowedOperation_CheckInLicense :: AllowedOperation
pattern AllowedOperation_CheckoutBorrowLicense :: AllowedOperation
pattern AllowedOperation_CheckoutLicense :: AllowedOperation
pattern AllowedOperation_CreateGrant :: AllowedOperation
pattern AllowedOperation_CreateToken :: AllowedOperation
pattern AllowedOperation_ExtendConsumptionLicense :: AllowedOperation
pattern AllowedOperation_ListPurchasedLicenses :: AllowedOperation
newtype CheckoutType
CheckoutType' :: Text -> CheckoutType
[fromCheckoutType] :: CheckoutType -> Text
pattern CheckoutType_PERPETUAL :: CheckoutType
pattern CheckoutType_PROVISIONAL :: CheckoutType
newtype DigitalSignatureMethod
DigitalSignatureMethod' :: Text -> DigitalSignatureMethod
[fromDigitalSignatureMethod] :: DigitalSignatureMethod -> Text
pattern DigitalSignatureMethod_JWT_PS384 :: DigitalSignatureMethod
newtype EntitlementDataUnit
EntitlementDataUnit' :: Text -> EntitlementDataUnit
[fromEntitlementDataUnit] :: EntitlementDataUnit -> Text
pattern EntitlementDataUnit_Bits :: EntitlementDataUnit
pattern EntitlementDataUnit_Bits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Bytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Bytes_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Count :: EntitlementDataUnit
pattern EntitlementDataUnit_Count_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Gigabits :: EntitlementDataUnit
pattern EntitlementDataUnit_Gigabits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Gigabytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Gigabytes_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Kilobits :: EntitlementDataUnit
pattern EntitlementDataUnit_Kilobits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Kilobytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Kilobytes_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Megabits :: EntitlementDataUnit
pattern EntitlementDataUnit_Megabits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Megabytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Megabytes_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Microseconds :: EntitlementDataUnit
pattern EntitlementDataUnit_Milliseconds :: EntitlementDataUnit
pattern EntitlementDataUnit_None :: EntitlementDataUnit
pattern EntitlementDataUnit_Percent :: EntitlementDataUnit
pattern EntitlementDataUnit_Seconds :: EntitlementDataUnit
pattern EntitlementDataUnit_Terabits :: EntitlementDataUnit
pattern EntitlementDataUnit_Terabits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Terabytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Terabytes_Second :: EntitlementDataUnit
newtype EntitlementUnit
EntitlementUnit' :: Text -> EntitlementUnit
[fromEntitlementUnit] :: EntitlementUnit -> Text
pattern EntitlementUnit_Bits :: EntitlementUnit
pattern EntitlementUnit_Bits_Second :: EntitlementUnit
pattern EntitlementUnit_Bytes :: EntitlementUnit
pattern EntitlementUnit_Bytes_Second :: EntitlementUnit
pattern EntitlementUnit_Count :: EntitlementUnit
pattern EntitlementUnit_Count_Second :: EntitlementUnit
pattern EntitlementUnit_Gigabits :: EntitlementUnit
pattern EntitlementUnit_Gigabits_Second :: EntitlementUnit
pattern EntitlementUnit_Gigabytes :: EntitlementUnit
pattern EntitlementUnit_Gigabytes_Second :: EntitlementUnit
pattern EntitlementUnit_Kilobits :: EntitlementUnit
pattern EntitlementUnit_Kilobits_Second :: EntitlementUnit
pattern EntitlementUnit_Kilobytes :: EntitlementUnit
pattern EntitlementUnit_Kilobytes_Second :: EntitlementUnit
pattern EntitlementUnit_Megabits :: EntitlementUnit
pattern EntitlementUnit_Megabits_Second :: EntitlementUnit
pattern EntitlementUnit_Megabytes :: EntitlementUnit
pattern EntitlementUnit_Megabytes_Second :: EntitlementUnit
pattern EntitlementUnit_Microseconds :: EntitlementUnit
pattern EntitlementUnit_Milliseconds :: EntitlementUnit
pattern EntitlementUnit_None :: EntitlementUnit
pattern EntitlementUnit_Percent :: EntitlementUnit
pattern EntitlementUnit_Seconds :: EntitlementUnit
pattern EntitlementUnit_Terabits :: EntitlementUnit
pattern EntitlementUnit_Terabits_Second :: EntitlementUnit
pattern EntitlementUnit_Terabytes :: EntitlementUnit
pattern EntitlementUnit_Terabytes_Second :: EntitlementUnit
newtype GrantStatus
GrantStatus' :: Text -> GrantStatus
[fromGrantStatus] :: GrantStatus -> Text
pattern GrantStatus_ACTIVE :: GrantStatus
pattern GrantStatus_DELETED :: GrantStatus
pattern GrantStatus_DISABLED :: GrantStatus
pattern GrantStatus_FAILED_WORKFLOW :: GrantStatus
pattern GrantStatus_PENDING_ACCEPT :: GrantStatus
pattern GrantStatus_PENDING_DELETE :: GrantStatus
pattern GrantStatus_PENDING_WORKFLOW :: GrantStatus
pattern GrantStatus_REJECTED :: GrantStatus
pattern GrantStatus_WORKFLOW_COMPLETED :: GrantStatus
newtype InventoryFilterCondition
InventoryFilterCondition' :: Text -> InventoryFilterCondition
[fromInventoryFilterCondition] :: InventoryFilterCondition -> Text
pattern InventoryFilterCondition_BEGINS_WITH :: InventoryFilterCondition
pattern InventoryFilterCondition_CONTAINS :: InventoryFilterCondition
pattern InventoryFilterCondition_EQUALS :: InventoryFilterCondition
pattern InventoryFilterCondition_NOT_EQUALS :: InventoryFilterCondition
newtype LicenseConfigurationStatus
LicenseConfigurationStatus' :: Text -> LicenseConfigurationStatus
[fromLicenseConfigurationStatus] :: LicenseConfigurationStatus -> Text
pattern LicenseConfigurationStatus_AVAILABLE :: LicenseConfigurationStatus
pattern LicenseConfigurationStatus_DISABLED :: LicenseConfigurationStatus
newtype LicenseConversionTaskStatus
LicenseConversionTaskStatus' :: Text -> LicenseConversionTaskStatus
[fromLicenseConversionTaskStatus] :: LicenseConversionTaskStatus -> Text
pattern LicenseConversionTaskStatus_FAILED :: LicenseConversionTaskStatus
pattern LicenseConversionTaskStatus_IN_PROGRESS :: LicenseConversionTaskStatus
pattern LicenseConversionTaskStatus_SUCCEEDED :: LicenseConversionTaskStatus
newtype LicenseCountingType
LicenseCountingType' :: Text -> LicenseCountingType
[fromLicenseCountingType] :: LicenseCountingType -> Text
pattern LicenseCountingType_Core :: LicenseCountingType
pattern LicenseCountingType_Instance :: LicenseCountingType
pattern LicenseCountingType_Socket :: LicenseCountingType
pattern LicenseCountingType_VCPU :: LicenseCountingType
newtype LicenseDeletionStatus
LicenseDeletionStatus' :: Text -> LicenseDeletionStatus
[fromLicenseDeletionStatus] :: LicenseDeletionStatus -> Text
pattern LicenseDeletionStatus_DELETED :: LicenseDeletionStatus
pattern LicenseDeletionStatus_PENDING_DELETE :: LicenseDeletionStatus
newtype LicenseStatus
LicenseStatus' :: Text -> LicenseStatus
[fromLicenseStatus] :: LicenseStatus -> Text
pattern LicenseStatus_AVAILABLE :: LicenseStatus
pattern LicenseStatus_DEACTIVATED :: LicenseStatus
pattern LicenseStatus_DELETED :: LicenseStatus
pattern LicenseStatus_EXPIRED :: LicenseStatus
pattern LicenseStatus_PENDING_AVAILABLE :: LicenseStatus
pattern LicenseStatus_PENDING_DELETE :: LicenseStatus
pattern LicenseStatus_SUSPENDED :: LicenseStatus
newtype ReceivedStatus
ReceivedStatus' :: Text -> ReceivedStatus
[fromReceivedStatus] :: ReceivedStatus -> Text
pattern ReceivedStatus_ACTIVE :: ReceivedStatus
pattern ReceivedStatus_DELETED :: ReceivedStatus
pattern ReceivedStatus_DISABLED :: ReceivedStatus
pattern ReceivedStatus_FAILED_WORKFLOW :: ReceivedStatus
pattern ReceivedStatus_PENDING_ACCEPT :: ReceivedStatus
pattern ReceivedStatus_PENDING_WORKFLOW :: ReceivedStatus
pattern ReceivedStatus_REJECTED :: ReceivedStatus
pattern ReceivedStatus_WORKFLOW_COMPLETED :: ReceivedStatus
newtype RenewType
RenewType' :: Text -> RenewType
[fromRenewType] :: RenewType -> Text
pattern RenewType_Monthly :: RenewType
pattern RenewType_None :: RenewType
pattern RenewType_Weekly :: RenewType
newtype ReportFrequencyType
ReportFrequencyType' :: Text -> ReportFrequencyType
[fromReportFrequencyType] :: ReportFrequencyType -> Text
pattern ReportFrequencyType_DAY :: ReportFrequencyType
pattern ReportFrequencyType_MONTH :: ReportFrequencyType
pattern ReportFrequencyType_WEEK :: ReportFrequencyType
newtype ReportType
ReportType' :: Text -> ReportType
[fromReportType] :: ReportType -> Text
pattern ReportType_LicenseConfigurationSummaryReport :: ReportType
pattern ReportType_LicenseConfigurationUsageReport :: ReportType
newtype ResourceType
ResourceType' :: Text -> ResourceType
[fromResourceType] :: ResourceType -> Text
pattern ResourceType_EC2_AMI :: ResourceType
pattern ResourceType_EC2_HOST :: ResourceType
pattern ResourceType_EC2_INSTANCE :: ResourceType
pattern ResourceType_RDS :: ResourceType
pattern ResourceType_SYSTEMS_MANAGER_MANAGED_INSTANCE :: ResourceType
newtype TokenType
TokenType' :: Text -> TokenType
[fromTokenType] :: TokenType -> Text
pattern TokenType_REFRESH_TOKEN :: TokenType

-- | Describes automated discovery.
--   
--   <i>See:</i> <a>newAutomatedDiscoveryInformation</a> smart constructor.
data AutomatedDiscoveryInformation
AutomatedDiscoveryInformation' :: Maybe POSIX -> AutomatedDiscoveryInformation

-- | Time that automated discovery last ran.
[$sel:lastRunTime:AutomatedDiscoveryInformation'] :: AutomatedDiscoveryInformation -> Maybe POSIX

-- | Create a value of <a>AutomatedDiscoveryInformation</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastRunTime:AutomatedDiscoveryInformation'</a>,
--   <a>automatedDiscoveryInformation_lastRunTime</a> - Time that automated
--   discovery last ran.
newAutomatedDiscoveryInformation :: AutomatedDiscoveryInformation

-- | Time that automated discovery last ran.
automatedDiscoveryInformation_lastRunTime :: Lens' AutomatedDiscoveryInformation (Maybe UTCTime)

-- | Details about a borrow configuration.
--   
--   <i>See:</i> <a>newBorrowConfiguration</a> smart constructor.
data BorrowConfiguration
BorrowConfiguration' :: Bool -> Int -> BorrowConfiguration

-- | Indicates whether early check-ins are allowed.
[$sel:allowEarlyCheckIn:BorrowConfiguration'] :: BorrowConfiguration -> Bool

-- | Maximum time for the borrow configuration, in minutes.
[$sel:maxTimeToLiveInMinutes:BorrowConfiguration'] :: BorrowConfiguration -> Int

-- | Create a value of <a>BorrowConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:allowEarlyCheckIn:BorrowConfiguration'</a>,
--   <a>borrowConfiguration_allowEarlyCheckIn</a> - Indicates whether early
--   check-ins are allowed.
--   
--   <a>$sel:maxTimeToLiveInMinutes:BorrowConfiguration'</a>,
--   <a>borrowConfiguration_maxTimeToLiveInMinutes</a> - Maximum time for
--   the borrow configuration, in minutes.
newBorrowConfiguration :: Bool -> Int -> BorrowConfiguration

-- | Indicates whether early check-ins are allowed.
borrowConfiguration_allowEarlyCheckIn :: Lens' BorrowConfiguration Bool

-- | Maximum time for the borrow configuration, in minutes.
borrowConfiguration_maxTimeToLiveInMinutes :: Lens' BorrowConfiguration Int

-- | Details about license consumption.
--   
--   <i>See:</i> <a>newConsumedLicenseSummary</a> smart constructor.
data ConsumedLicenseSummary
ConsumedLicenseSummary' :: Maybe ResourceType -> Maybe Integer -> ConsumedLicenseSummary

-- | Resource type of the resource consuming a license.
[$sel:resourceType:ConsumedLicenseSummary'] :: ConsumedLicenseSummary -> Maybe ResourceType

-- | Number of licenses consumed by the resource.
[$sel:consumedLicenses:ConsumedLicenseSummary'] :: ConsumedLicenseSummary -> Maybe Integer

-- | Create a value of <a>ConsumedLicenseSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:ConsumedLicenseSummary'</a>,
--   <a>consumedLicenseSummary_resourceType</a> - Resource type of the
--   resource consuming a license.
--   
--   <a>$sel:consumedLicenses:ConsumedLicenseSummary'</a>,
--   <a>consumedLicenseSummary_consumedLicenses</a> - Number of licenses
--   consumed by the resource.
newConsumedLicenseSummary :: ConsumedLicenseSummary

-- | Resource type of the resource consuming a license.
consumedLicenseSummary_resourceType :: Lens' ConsumedLicenseSummary (Maybe ResourceType)

-- | Number of licenses consumed by the resource.
consumedLicenseSummary_consumedLicenses :: Lens' ConsumedLicenseSummary (Maybe Integer)

-- | Details about a consumption configuration.
--   
--   <i>See:</i> <a>newConsumptionConfiguration</a> smart constructor.
data ConsumptionConfiguration
ConsumptionConfiguration' :: Maybe BorrowConfiguration -> Maybe ProvisionalConfiguration -> Maybe RenewType -> ConsumptionConfiguration

-- | Details about a borrow configuration.
[$sel:borrowConfiguration:ConsumptionConfiguration'] :: ConsumptionConfiguration -> Maybe BorrowConfiguration

-- | Details about a provisional configuration.
[$sel:provisionalConfiguration:ConsumptionConfiguration'] :: ConsumptionConfiguration -> Maybe ProvisionalConfiguration

-- | Renewal frequency.
[$sel:renewType:ConsumptionConfiguration'] :: ConsumptionConfiguration -> Maybe RenewType

-- | Create a value of <a>ConsumptionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:borrowConfiguration:ConsumptionConfiguration'</a>,
--   <a>consumptionConfiguration_borrowConfiguration</a> - Details about a
--   borrow configuration.
--   
--   <a>$sel:provisionalConfiguration:ConsumptionConfiguration'</a>,
--   <a>consumptionConfiguration_provisionalConfiguration</a> - Details
--   about a provisional configuration.
--   
--   <a>$sel:renewType:ConsumptionConfiguration'</a>,
--   <a>consumptionConfiguration_renewType</a> - Renewal frequency.
newConsumptionConfiguration :: ConsumptionConfiguration

-- | Details about a borrow configuration.
consumptionConfiguration_borrowConfiguration :: Lens' ConsumptionConfiguration (Maybe BorrowConfiguration)

-- | Details about a provisional configuration.
consumptionConfiguration_provisionalConfiguration :: Lens' ConsumptionConfiguration (Maybe ProvisionalConfiguration)

-- | Renewal frequency.
consumptionConfiguration_renewType :: Lens' ConsumptionConfiguration (Maybe RenewType)

-- | Describes a time range, in ISO8601-UTC format.
--   
--   <i>See:</i> <a>newDatetimeRange</a> smart constructor.
data DatetimeRange
DatetimeRange' :: Maybe Text -> Text -> DatetimeRange

-- | End of the time range.
[$sel:end:DatetimeRange'] :: DatetimeRange -> Maybe Text

-- | Start of the time range.
[$sel:begin:DatetimeRange'] :: DatetimeRange -> Text

-- | Create a value of <a>DatetimeRange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:end:DatetimeRange'</a>, <a>datetimeRange_end</a> - End of the
--   time range.
--   
--   <a>$sel:begin:DatetimeRange'</a>, <a>datetimeRange_begin</a> - Start
--   of the time range.
newDatetimeRange :: Text -> DatetimeRange

-- | End of the time range.
datetimeRange_end :: Lens' DatetimeRange (Maybe Text)

-- | Start of the time range.
datetimeRange_begin :: Lens' DatetimeRange Text

-- | Describes a resource entitled for use with a license.
--   
--   <i>See:</i> <a>newEntitlement</a> smart constructor.
data Entitlement
Entitlement' :: Maybe Integer -> Maybe Text -> Maybe Bool -> Maybe Bool -> Text -> EntitlementUnit -> Entitlement

-- | Maximum entitlement count. Use if the unit is not None.
[$sel:maxCount:Entitlement'] :: Entitlement -> Maybe Integer

-- | Entitlement resource. Use only if the unit is None.
[$sel:value:Entitlement'] :: Entitlement -> Maybe Text

-- | Indicates whether overages are allowed.
[$sel:overage:Entitlement'] :: Entitlement -> Maybe Bool

-- | Indicates whether check-ins are allowed.
[$sel:allowCheckIn:Entitlement'] :: Entitlement -> Maybe Bool

-- | Entitlement name.
[$sel:name:Entitlement'] :: Entitlement -> Text

-- | Entitlement unit.
[$sel:unit:Entitlement'] :: Entitlement -> EntitlementUnit

-- | Create a value of <a>Entitlement</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:maxCount:Entitlement'</a>, <a>entitlement_maxCount</a> -
--   Maximum entitlement count. Use if the unit is not None.
--   
--   <a>$sel:value:Entitlement'</a>, <a>entitlement_value</a> - Entitlement
--   resource. Use only if the unit is None.
--   
--   <a>$sel:overage:Entitlement'</a>, <a>entitlement_overage</a> -
--   Indicates whether overages are allowed.
--   
--   <a>$sel:allowCheckIn:Entitlement'</a>, <a>entitlement_allowCheckIn</a>
--   - Indicates whether check-ins are allowed.
--   
--   <a>$sel:name:Entitlement'</a>, <a>entitlement_name</a> - Entitlement
--   name.
--   
--   <a>$sel:unit:Entitlement'</a>, <a>entitlement_unit</a> - Entitlement
--   unit.
newEntitlement :: Text -> EntitlementUnit -> Entitlement

-- | Maximum entitlement count. Use if the unit is not None.
entitlement_maxCount :: Lens' Entitlement (Maybe Integer)

-- | Entitlement resource. Use only if the unit is None.
entitlement_value :: Lens' Entitlement (Maybe Text)

-- | Indicates whether overages are allowed.
entitlement_overage :: Lens' Entitlement (Maybe Bool)

-- | Indicates whether check-ins are allowed.
entitlement_allowCheckIn :: Lens' Entitlement (Maybe Bool)

-- | Entitlement name.
entitlement_name :: Lens' Entitlement Text

-- | Entitlement unit.
entitlement_unit :: Lens' Entitlement EntitlementUnit

-- | Data associated with an entitlement resource.
--   
--   <i>See:</i> <a>newEntitlementData</a> smart constructor.
data EntitlementData
EntitlementData' :: Maybe Text -> Text -> EntitlementDataUnit -> EntitlementData

-- | Entitlement data value.
[$sel:value:EntitlementData'] :: EntitlementData -> Maybe Text

-- | Entitlement data name.
[$sel:name:EntitlementData'] :: EntitlementData -> Text

-- | Entitlement data unit.
[$sel:unit:EntitlementData'] :: EntitlementData -> EntitlementDataUnit

-- | Create a value of <a>EntitlementData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:EntitlementData'</a>, <a>entitlementData_value</a> -
--   Entitlement data value.
--   
--   <a>$sel:name:EntitlementData'</a>, <a>entitlementData_name</a> -
--   Entitlement data name.
--   
--   <a>$sel:unit:EntitlementData'</a>, <a>entitlementData_unit</a> -
--   Entitlement data unit.
newEntitlementData :: Text -> EntitlementDataUnit -> EntitlementData

-- | Entitlement data value.
entitlementData_value :: Lens' EntitlementData (Maybe Text)

-- | Entitlement data name.
entitlementData_name :: Lens' EntitlementData Text

-- | Entitlement data unit.
entitlementData_unit :: Lens' EntitlementData EntitlementDataUnit

-- | Usage associated with an entitlement resource.
--   
--   <i>See:</i> <a>newEntitlementUsage</a> smart constructor.
data EntitlementUsage
EntitlementUsage' :: Maybe Text -> Text -> Text -> EntitlementDataUnit -> EntitlementUsage

-- | Maximum entitlement usage count.
[$sel:maxCount:EntitlementUsage'] :: EntitlementUsage -> Maybe Text

-- | Entitlement usage name.
[$sel:name:EntitlementUsage'] :: EntitlementUsage -> Text

-- | Resource usage consumed.
[$sel:consumedValue:EntitlementUsage'] :: EntitlementUsage -> Text

-- | Entitlement usage unit.
[$sel:unit:EntitlementUsage'] :: EntitlementUsage -> EntitlementDataUnit

-- | Create a value of <a>EntitlementUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:maxCount:EntitlementUsage'</a>,
--   <a>entitlementUsage_maxCount</a> - Maximum entitlement usage count.
--   
--   <a>$sel:name:EntitlementUsage'</a>, <a>entitlementUsage_name</a> -
--   Entitlement usage name.
--   
--   <a>$sel:consumedValue:EntitlementUsage'</a>,
--   <a>entitlementUsage_consumedValue</a> - Resource usage consumed.
--   
--   <a>$sel:unit:EntitlementUsage'</a>, <a>entitlementUsage_unit</a> -
--   Entitlement usage unit.
newEntitlementUsage :: Text -> Text -> EntitlementDataUnit -> EntitlementUsage

-- | Maximum entitlement usage count.
entitlementUsage_maxCount :: Lens' EntitlementUsage (Maybe Text)

-- | Entitlement usage name.
entitlementUsage_name :: Lens' EntitlementUsage Text

-- | Resource usage consumed.
entitlementUsage_consumedValue :: Lens' EntitlementUsage Text

-- | Entitlement usage unit.
entitlementUsage_unit :: Lens' EntitlementUsage EntitlementDataUnit

-- | A filter name and value pair that is used to return more specific
--   results from a describe operation. Filters can be used to match a set
--   of resources by specific criteria, such as tags, attributes, or IDs.
--   
--   <i>See:</i> <a>newFilter</a> smart constructor.
data Filter
Filter' :: Maybe [Text] -> Maybe Text -> Filter

-- | Filter values. Filter values are case-sensitive.
[$sel:values:Filter'] :: Filter -> Maybe [Text]

-- | Name of the filter. Filter names are case-sensitive.
[$sel:name:Filter'] :: Filter -> Maybe Text

-- | Create a value of <a>Filter</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:values:Filter'</a>, <a>filter_values</a> - Filter values.
--   Filter values are case-sensitive.
--   
--   <a>$sel:name:Filter'</a>, <a>filter_name</a> - Name of the filter.
--   Filter names are case-sensitive.
newFilter :: Filter

-- | Filter values. Filter values are case-sensitive.
filter_values :: Lens' Filter (Maybe [Text])

-- | Name of the filter. Filter names are case-sensitive.
filter_name :: Lens' Filter (Maybe Text)

-- | Describes a grant.
--   
--   <i>See:</i> <a>newGrant</a> smart constructor.
data Grant
Grant' :: Maybe Text -> Text -> Text -> Text -> Text -> Text -> Text -> GrantStatus -> Text -> NonEmpty AllowedOperation -> Grant

-- | Grant status reason.
[$sel:statusReason:Grant'] :: Grant -> Maybe Text

-- | Amazon Resource Name (ARN) of the grant.
[$sel:grantArn:Grant'] :: Grant -> Text

-- | Grant name.
[$sel:grantName:Grant'] :: Grant -> Text

-- | Parent ARN.
[$sel:parentArn:Grant'] :: Grant -> Text

-- | License ARN.
[$sel:licenseArn:Grant'] :: Grant -> Text

-- | The grantee principal ARN.
[$sel:granteePrincipalArn:Grant'] :: Grant -> Text

-- | Home Region of the grant.
[$sel:homeRegion:Grant'] :: Grant -> Text

-- | Grant status.
[$sel:grantStatus:Grant'] :: Grant -> GrantStatus

-- | Grant version.
[$sel:version:Grant'] :: Grant -> Text

-- | Granted operations.
[$sel:grantedOperations:Grant'] :: Grant -> NonEmpty AllowedOperation

-- | Create a value of <a>Grant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statusReason:Grant'</a>, <a>grant_statusReason</a> - Grant
--   status reason.
--   
--   <a>$sel:grantArn:Grant'</a>, <a>grant_grantArn</a> - Amazon Resource
--   Name (ARN) of the grant.
--   
--   <a>$sel:grantName:Grant'</a>, <a>grant_grantName</a> - Grant name.
--   
--   <a>$sel:parentArn:Grant'</a>, <a>grant_parentArn</a> - Parent ARN.
--   
--   <a>$sel:licenseArn:Grant'</a>, <a>grant_licenseArn</a> - License ARN.
--   
--   <a>$sel:granteePrincipalArn:Grant'</a>,
--   <a>grant_granteePrincipalArn</a> - The grantee principal ARN.
--   
--   <a>$sel:homeRegion:Grant'</a>, <a>grant_homeRegion</a> - Home Region
--   of the grant.
--   
--   <a>$sel:grantStatus:Grant'</a>, <a>grant_grantStatus</a> - Grant
--   status.
--   
--   <a>$sel:version:Grant'</a>, <a>grant_version</a> - Grant version.
--   
--   <a>$sel:grantedOperations:Grant'</a>, <a>grant_grantedOperations</a> -
--   Granted operations.
newGrant :: Text -> Text -> Text -> Text -> Text -> Text -> GrantStatus -> Text -> NonEmpty AllowedOperation -> Grant

-- | Grant status reason.
grant_statusReason :: Lens' Grant (Maybe Text)

-- | Amazon Resource Name (ARN) of the grant.
grant_grantArn :: Lens' Grant Text

-- | Grant name.
grant_grantName :: Lens' Grant Text

-- | Parent ARN.
grant_parentArn :: Lens' Grant Text

-- | License ARN.
grant_licenseArn :: Lens' Grant Text

-- | The grantee principal ARN.
grant_granteePrincipalArn :: Lens' Grant Text

-- | Home Region of the grant.
grant_homeRegion :: Lens' Grant Text

-- | Grant status.
grant_grantStatus :: Lens' Grant GrantStatus

-- | Grant version.
grant_version :: Lens' Grant Text

-- | Granted operations.
grant_grantedOperations :: Lens' Grant (NonEmpty AllowedOperation)

-- | Describes a license that is granted to a grantee.
--   
--   <i>See:</i> <a>newGrantedLicense</a> smart constructor.
data GrantedLicense
GrantedLicense' :: Maybe LicenseStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe ReceivedMetadata -> Maybe Text -> Maybe [Entitlement] -> Maybe DatetimeRange -> Maybe ConsumptionConfiguration -> Maybe Text -> Maybe IssuerDetails -> Maybe Text -> Maybe [Metadata] -> Maybe Text -> GrantedLicense

-- | Granted license status.
[$sel:status:GrantedLicense'] :: GrantedLicense -> Maybe LicenseStatus

-- | Product name.
[$sel:productName:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | License name.
[$sel:licenseName:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | Product SKU.
[$sel:productSKU:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | Home Region of the granted license.
[$sel:homeRegion:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | Granted license received metadata.
[$sel:receivedMetadata:GrantedLicense'] :: GrantedLicense -> Maybe ReceivedMetadata

-- | Version of the granted license.
[$sel:version:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | License entitlements.
[$sel:entitlements:GrantedLicense'] :: GrantedLicense -> Maybe [Entitlement]

-- | Date and time range during which the granted license is valid, in
--   ISO8601-UTC format.
[$sel:validity:GrantedLicense'] :: GrantedLicense -> Maybe DatetimeRange

-- | Configuration for consumption of the license.
[$sel:consumptionConfiguration:GrantedLicense'] :: GrantedLicense -> Maybe ConsumptionConfiguration

-- | Granted license beneficiary.
[$sel:beneficiary:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | Granted license issuer.
[$sel:issuer:GrantedLicense'] :: GrantedLicense -> Maybe IssuerDetails

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | Granted license metadata.
[$sel:licenseMetadata:GrantedLicense'] :: GrantedLicense -> Maybe [Metadata]

-- | Creation time of the granted license.
[$sel:createTime:GrantedLicense'] :: GrantedLicense -> Maybe Text

-- | Create a value of <a>GrantedLicense</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:GrantedLicense'</a>, <a>grantedLicense_status</a> -
--   Granted license status.
--   
--   <a>$sel:productName:GrantedLicense'</a>,
--   <a>grantedLicense_productName</a> - Product name.
--   
--   <a>$sel:licenseName:GrantedLicense'</a>,
--   <a>grantedLicense_licenseName</a> - License name.
--   
--   <a>$sel:productSKU:GrantedLicense'</a>,
--   <a>grantedLicense_productSKU</a> - Product SKU.
--   
--   <a>$sel:homeRegion:GrantedLicense'</a>,
--   <a>grantedLicense_homeRegion</a> - Home Region of the granted license.
--   
--   <a>$sel:receivedMetadata:GrantedLicense'</a>,
--   <a>grantedLicense_receivedMetadata</a> - Granted license received
--   metadata.
--   
--   <a>$sel:version:GrantedLicense'</a>, <a>grantedLicense_version</a> -
--   Version of the granted license.
--   
--   <a>$sel:entitlements:GrantedLicense'</a>,
--   <a>grantedLicense_entitlements</a> - License entitlements.
--   
--   <a>$sel:validity:GrantedLicense'</a>, <a>grantedLicense_validity</a> -
--   Date and time range during which the granted license is valid, in
--   ISO8601-UTC format.
--   
--   <a>$sel:consumptionConfiguration:GrantedLicense'</a>,
--   <a>grantedLicense_consumptionConfiguration</a> - Configuration for
--   consumption of the license.
--   
--   <a>$sel:beneficiary:GrantedLicense'</a>,
--   <a>grantedLicense_beneficiary</a> - Granted license beneficiary.
--   
--   <a>$sel:issuer:GrantedLicense'</a>, <a>grantedLicense_issuer</a> -
--   Granted license issuer.
--   
--   <a>$sel:licenseArn:GrantedLicense'</a>,
--   <a>grantedLicense_licenseArn</a> - Amazon Resource Name (ARN) of the
--   license.
--   
--   <a>$sel:licenseMetadata:GrantedLicense'</a>,
--   <a>grantedLicense_licenseMetadata</a> - Granted license metadata.
--   
--   <a>$sel:createTime:GrantedLicense'</a>,
--   <a>grantedLicense_createTime</a> - Creation time of the granted
--   license.
newGrantedLicense :: GrantedLicense

-- | Granted license status.
grantedLicense_status :: Lens' GrantedLicense (Maybe LicenseStatus)

-- | Product name.
grantedLicense_productName :: Lens' GrantedLicense (Maybe Text)

-- | License name.
grantedLicense_licenseName :: Lens' GrantedLicense (Maybe Text)

-- | Product SKU.
grantedLicense_productSKU :: Lens' GrantedLicense (Maybe Text)

-- | Home Region of the granted license.
grantedLicense_homeRegion :: Lens' GrantedLicense (Maybe Text)

-- | Granted license received metadata.
grantedLicense_receivedMetadata :: Lens' GrantedLicense (Maybe ReceivedMetadata)

-- | Version of the granted license.
grantedLicense_version :: Lens' GrantedLicense (Maybe Text)

-- | License entitlements.
grantedLicense_entitlements :: Lens' GrantedLicense (Maybe [Entitlement])

-- | Date and time range during which the granted license is valid, in
--   ISO8601-UTC format.
grantedLicense_validity :: Lens' GrantedLicense (Maybe DatetimeRange)

-- | Configuration for consumption of the license.
grantedLicense_consumptionConfiguration :: Lens' GrantedLicense (Maybe ConsumptionConfiguration)

-- | Granted license beneficiary.
grantedLicense_beneficiary :: Lens' GrantedLicense (Maybe Text)

-- | Granted license issuer.
grantedLicense_issuer :: Lens' GrantedLicense (Maybe IssuerDetails)

-- | Amazon Resource Name (ARN) of the license.
grantedLicense_licenseArn :: Lens' GrantedLicense (Maybe Text)

-- | Granted license metadata.
grantedLicense_licenseMetadata :: Lens' GrantedLicense (Maybe [Metadata])

-- | Creation time of the granted license.
grantedLicense_createTime :: Lens' GrantedLicense (Maybe Text)

-- | An inventory filter.
--   
--   <i>See:</i> <a>newInventoryFilter</a> smart constructor.
data InventoryFilter
InventoryFilter' :: Maybe Text -> Text -> InventoryFilterCondition -> InventoryFilter

-- | Value of the filter.
[$sel:value:InventoryFilter'] :: InventoryFilter -> Maybe Text

-- | Name of the filter.
[$sel:name:InventoryFilter'] :: InventoryFilter -> Text

-- | Condition of the filter.
[$sel:condition:InventoryFilter'] :: InventoryFilter -> InventoryFilterCondition

-- | Create a value of <a>InventoryFilter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:InventoryFilter'</a>, <a>inventoryFilter_value</a> -
--   Value of the filter.
--   
--   <a>$sel:name:InventoryFilter'</a>, <a>inventoryFilter_name</a> - Name
--   of the filter.
--   
--   <a>$sel:condition:InventoryFilter'</a>,
--   <a>inventoryFilter_condition</a> - Condition of the filter.
newInventoryFilter :: Text -> InventoryFilterCondition -> InventoryFilter

-- | Value of the filter.
inventoryFilter_value :: Lens' InventoryFilter (Maybe Text)

-- | Name of the filter.
inventoryFilter_name :: Lens' InventoryFilter Text

-- | Condition of the filter.
inventoryFilter_condition :: Lens' InventoryFilter InventoryFilterCondition

-- | Details about the issuer of a license.
--   
--   <i>See:</i> <a>newIssuer</a> smart constructor.
data Issuer
Issuer' :: Maybe Text -> Text -> Issuer

-- | Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
[$sel:signKey:Issuer'] :: Issuer -> Maybe Text

-- | Issuer name.
[$sel:name:Issuer'] :: Issuer -> Text

-- | Create a value of <a>Issuer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signKey:Issuer'</a>, <a>issuer_signKey</a> - Asymmetric KMS
--   key from Key Management Service. The KMS key must have a key usage of
--   sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
--   
--   <a>$sel:name:Issuer'</a>, <a>issuer_name</a> - Issuer name.
newIssuer :: Text -> Issuer

-- | Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
issuer_signKey :: Lens' Issuer (Maybe Text)

-- | Issuer name.
issuer_name :: Lens' Issuer Text

-- | Details associated with the issuer of a license.
--   
--   <i>See:</i> <a>newIssuerDetails</a> smart constructor.
data IssuerDetails
IssuerDetails' :: Maybe Text -> Maybe Text -> Maybe Text -> IssuerDetails

-- | Issuer key fingerprint.
[$sel:keyFingerprint:IssuerDetails'] :: IssuerDetails -> Maybe Text

-- | Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
[$sel:signKey:IssuerDetails'] :: IssuerDetails -> Maybe Text

-- | Issuer name.
[$sel:name:IssuerDetails'] :: IssuerDetails -> Maybe Text

-- | Create a value of <a>IssuerDetails</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyFingerprint:IssuerDetails'</a>,
--   <a>issuerDetails_keyFingerprint</a> - Issuer key fingerprint.
--   
--   <a>$sel:signKey:IssuerDetails'</a>, <a>issuerDetails_signKey</a> -
--   Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
--   
--   <a>$sel:name:IssuerDetails'</a>, <a>issuerDetails_name</a> - Issuer
--   name.
newIssuerDetails :: IssuerDetails

-- | Issuer key fingerprint.
issuerDetails_keyFingerprint :: Lens' IssuerDetails (Maybe Text)

-- | Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
issuerDetails_signKey :: Lens' IssuerDetails (Maybe Text)

-- | Issuer name.
issuerDetails_name :: Lens' IssuerDetails (Maybe Text)

-- | Software license that is managed in License Manager.
--   
--   <i>See:</i> <a>newLicense</a> smart constructor.
data License
License' :: Maybe LicenseStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe [Entitlement] -> Maybe DatetimeRange -> Maybe ConsumptionConfiguration -> Maybe Text -> Maybe IssuerDetails -> Maybe Text -> Maybe [Metadata] -> Maybe Text -> License

-- | License status.
[$sel:status:License'] :: License -> Maybe LicenseStatus

-- | Product name.
[$sel:productName:License'] :: License -> Maybe Text

-- | License name.
[$sel:licenseName:License'] :: License -> Maybe Text

-- | Product SKU.
[$sel:productSKU:License'] :: License -> Maybe Text

-- | Home Region of the license.
[$sel:homeRegion:License'] :: License -> Maybe Text

-- | License version.
[$sel:version:License'] :: License -> Maybe Text

-- | License entitlements.
[$sel:entitlements:License'] :: License -> Maybe [Entitlement]

-- | Date and time range during which the license is valid, in ISO8601-UTC
--   format.
[$sel:validity:License'] :: License -> Maybe DatetimeRange

-- | Configuration for consumption of the license.
[$sel:consumptionConfiguration:License'] :: License -> Maybe ConsumptionConfiguration

-- | License beneficiary.
[$sel:beneficiary:License'] :: License -> Maybe Text

-- | License issuer.
[$sel:issuer:License'] :: License -> Maybe IssuerDetails

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:License'] :: License -> Maybe Text

-- | License metadata.
[$sel:licenseMetadata:License'] :: License -> Maybe [Metadata]

-- | License creation time.
[$sel:createTime:License'] :: License -> Maybe Text

-- | Create a value of <a>License</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:License'</a>, <a>license_status</a> - License status.
--   
--   <a>$sel:productName:License'</a>, <a>license_productName</a> - Product
--   name.
--   
--   <a>$sel:licenseName:License'</a>, <a>license_licenseName</a> - License
--   name.
--   
--   <a>$sel:productSKU:License'</a>, <a>license_productSKU</a> - Product
--   SKU.
--   
--   <a>$sel:homeRegion:License'</a>, <a>license_homeRegion</a> - Home
--   Region of the license.
--   
--   <a>$sel:version:License'</a>, <a>license_version</a> - License
--   version.
--   
--   <a>$sel:entitlements:License'</a>, <a>license_entitlements</a> -
--   License entitlements.
--   
--   <a>$sel:validity:License'</a>, <a>license_validity</a> - Date and time
--   range during which the license is valid, in ISO8601-UTC format.
--   
--   <a>$sel:consumptionConfiguration:License'</a>,
--   <a>license_consumptionConfiguration</a> - Configuration for
--   consumption of the license.
--   
--   <a>$sel:beneficiary:License'</a>, <a>license_beneficiary</a> - License
--   beneficiary.
--   
--   <a>$sel:issuer:License'</a>, <a>license_issuer</a> - License issuer.
--   
--   <a>$sel:licenseArn:License'</a>, <a>license_licenseArn</a> - Amazon
--   Resource Name (ARN) of the license.
--   
--   <a>$sel:licenseMetadata:License'</a>, <a>license_licenseMetadata</a> -
--   License metadata.
--   
--   <a>$sel:createTime:License'</a>, <a>license_createTime</a> - License
--   creation time.
newLicense :: License

-- | License status.
license_status :: Lens' License (Maybe LicenseStatus)

-- | Product name.
license_productName :: Lens' License (Maybe Text)

-- | License name.
license_licenseName :: Lens' License (Maybe Text)

-- | Product SKU.
license_productSKU :: Lens' License (Maybe Text)

-- | Home Region of the license.
license_homeRegion :: Lens' License (Maybe Text)

-- | License version.
license_version :: Lens' License (Maybe Text)

-- | License entitlements.
license_entitlements :: Lens' License (Maybe [Entitlement])

-- | Date and time range during which the license is valid, in ISO8601-UTC
--   format.
license_validity :: Lens' License (Maybe DatetimeRange)

-- | Configuration for consumption of the license.
license_consumptionConfiguration :: Lens' License (Maybe ConsumptionConfiguration)

-- | License beneficiary.
license_beneficiary :: Lens' License (Maybe Text)

-- | License issuer.
license_issuer :: Lens' License (Maybe IssuerDetails)

-- | Amazon Resource Name (ARN) of the license.
license_licenseArn :: Lens' License (Maybe Text)

-- | License metadata.
license_licenseMetadata :: Lens' License (Maybe [Metadata])

-- | License creation time.
license_createTime :: Lens' License (Maybe Text)

-- | A license configuration is an abstraction of a customer license
--   agreement that can be consumed and enforced by License Manager.
--   Components include specifications for the license type (licensing by
--   instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy,
--   Dedicated Instance, Dedicated Host, or all of these), host affinity
--   (how long a VM must be associated with a host), and the number of
--   licenses purchased and used.
--   
--   <i>See:</i> <a>newLicenseConfiguration</a> smart constructor.
data LicenseConfiguration
LicenseConfiguration' :: Maybe Text -> Maybe Text -> Maybe [ConsumedLicenseSummary] -> Maybe Integer -> Maybe [ManagedResourceSummary] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [ProductInformation] -> Maybe LicenseCountingType -> Maybe AutomatedDiscoveryInformation -> Maybe Integer -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Text -> LicenseConfiguration

-- | Status of the license configuration.
[$sel:status:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Text

-- | Account ID of the license configuration's owner.
[$sel:ownerAccountId:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Text

-- | Summaries for licenses consumed by various resources.
[$sel:consumedLicenseSummaryList:LicenseConfiguration'] :: LicenseConfiguration -> Maybe [ConsumedLicenseSummary]

-- | Number of licenses managed by the license configuration.
[$sel:licenseCount:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Integer

-- | Summaries for managed resources.
[$sel:managedResourceSummaryList:LicenseConfiguration'] :: LicenseConfiguration -> Maybe [ManagedResourceSummary]

-- | Name of the license configuration.
[$sel:name:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Text

-- | Number of available licenses as a hard limit.
[$sel:licenseCountHardLimit:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Bool

-- | When true, disassociates a resource when software is uninstalled.
[$sel:disassociateWhenNotFound:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Bool

-- | Product information.
[$sel:productInformationList:LicenseConfiguration'] :: LicenseConfiguration -> Maybe [ProductInformation]

-- | Dimension to use to track the license inventory.
[$sel:licenseCountingType:LicenseConfiguration'] :: LicenseConfiguration -> Maybe LicenseCountingType

-- | Automated discovery information.
[$sel:automatedDiscoveryInformation:LicenseConfiguration'] :: LicenseConfiguration -> Maybe AutomatedDiscoveryInformation

-- | Number of licenses consumed.
[$sel:consumedLicenses:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Integer

-- | License rules.
[$sel:licenseRules:LicenseConfiguration'] :: LicenseConfiguration -> Maybe [Text]

-- | Unique ID of the license configuration.
[$sel:licenseConfigurationId:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Text

-- | Description of the license configuration.
[$sel:description:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Text

-- | Amazon Resource Name (ARN) of the license configuration.
[$sel:licenseConfigurationArn:LicenseConfiguration'] :: LicenseConfiguration -> Maybe Text

-- | Create a value of <a>LicenseConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_status</a> - Status of the license
--   configuration.
--   
--   <a>$sel:ownerAccountId:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_ownerAccountId</a> - Account ID of the license
--   configuration's owner.
--   
--   <a>$sel:consumedLicenseSummaryList:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_consumedLicenseSummaryList</a> - Summaries for
--   licenses consumed by various resources.
--   
--   <a>$sel:licenseCount:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseCount</a> - Number of licenses managed
--   by the license configuration.
--   
--   <a>$sel:managedResourceSummaryList:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_managedResourceSummaryList</a> - Summaries for
--   managed resources.
--   
--   <a>$sel:name:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_name</a> - Name of the license configuration.
--   
--   <a>$sel:licenseCountHardLimit:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseCountHardLimit</a> - Number of
--   available licenses as a hard limit.
--   
--   <a>$sel:disassociateWhenNotFound:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_disassociateWhenNotFound</a> - When true,
--   disassociates a resource when software is uninstalled.
--   
--   <a>$sel:productInformationList:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_productInformationList</a> - Product
--   information.
--   
--   <a>$sel:licenseCountingType:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseCountingType</a> - Dimension to use to
--   track the license inventory.
--   
--   <a>$sel:automatedDiscoveryInformation:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_automatedDiscoveryInformation</a> - Automated
--   discovery information.
--   
--   <a>$sel:consumedLicenses:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_consumedLicenses</a> - Number of licenses
--   consumed.
--   
--   <a>$sel:licenseRules:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseRules</a> - License rules.
--   
--   <a>$sel:licenseConfigurationId:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseConfigurationId</a> - Unique ID of the
--   license configuration.
--   
--   <a>$sel:description:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_description</a> - Description of the license
--   configuration.
--   
--   <a>$sel:licenseConfigurationArn:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseConfigurationArn</a> - Amazon Resource
--   Name (ARN) of the license configuration.
newLicenseConfiguration :: LicenseConfiguration

-- | Status of the license configuration.
licenseConfiguration_status :: Lens' LicenseConfiguration (Maybe Text)

-- | Account ID of the license configuration's owner.
licenseConfiguration_ownerAccountId :: Lens' LicenseConfiguration (Maybe Text)

-- | Summaries for licenses consumed by various resources.
licenseConfiguration_consumedLicenseSummaryList :: Lens' LicenseConfiguration (Maybe [ConsumedLicenseSummary])

-- | Number of licenses managed by the license configuration.
licenseConfiguration_licenseCount :: Lens' LicenseConfiguration (Maybe Integer)

-- | Summaries for managed resources.
licenseConfiguration_managedResourceSummaryList :: Lens' LicenseConfiguration (Maybe [ManagedResourceSummary])

-- | Name of the license configuration.
licenseConfiguration_name :: Lens' LicenseConfiguration (Maybe Text)

-- | Number of available licenses as a hard limit.
licenseConfiguration_licenseCountHardLimit :: Lens' LicenseConfiguration (Maybe Bool)

-- | When true, disassociates a resource when software is uninstalled.
licenseConfiguration_disassociateWhenNotFound :: Lens' LicenseConfiguration (Maybe Bool)

-- | Product information.
licenseConfiguration_productInformationList :: Lens' LicenseConfiguration (Maybe [ProductInformation])

-- | Dimension to use to track the license inventory.
licenseConfiguration_licenseCountingType :: Lens' LicenseConfiguration (Maybe LicenseCountingType)

-- | Automated discovery information.
licenseConfiguration_automatedDiscoveryInformation :: Lens' LicenseConfiguration (Maybe AutomatedDiscoveryInformation)

-- | Number of licenses consumed.
licenseConfiguration_consumedLicenses :: Lens' LicenseConfiguration (Maybe Integer)

-- | License rules.
licenseConfiguration_licenseRules :: Lens' LicenseConfiguration (Maybe [Text])

-- | Unique ID of the license configuration.
licenseConfiguration_licenseConfigurationId :: Lens' LicenseConfiguration (Maybe Text)

-- | Description of the license configuration.
licenseConfiguration_description :: Lens' LicenseConfiguration (Maybe Text)

-- | Amazon Resource Name (ARN) of the license configuration.
licenseConfiguration_licenseConfigurationArn :: Lens' LicenseConfiguration (Maybe Text)

-- | Describes an association with a license configuration.
--   
--   <i>See:</i> <a>newLicenseConfigurationAssociation</a> smart
--   constructor.
data LicenseConfigurationAssociation
LicenseConfigurationAssociation' :: Maybe ResourceType -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> LicenseConfigurationAssociation

-- | Type of server resource.
[$sel:resourceType:LicenseConfigurationAssociation'] :: LicenseConfigurationAssociation -> Maybe ResourceType

-- | Scope of AMI associations. The possible value is
--   <tt>cross-account</tt>.
[$sel:amiAssociationScope:LicenseConfigurationAssociation'] :: LicenseConfigurationAssociation -> Maybe Text

-- | Time when the license configuration was associated with the resource.
[$sel:associationTime:LicenseConfigurationAssociation'] :: LicenseConfigurationAssociation -> Maybe POSIX

-- | Amazon Resource Name (ARN) of the resource.
[$sel:resourceArn:LicenseConfigurationAssociation'] :: LicenseConfigurationAssociation -> Maybe Text

-- | ID of the Amazon Web Services account that owns the resource consuming
--   licenses.
[$sel:resourceOwnerId:LicenseConfigurationAssociation'] :: LicenseConfigurationAssociation -> Maybe Text

-- | Create a value of <a>LicenseConfigurationAssociation</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_resourceType</a> - Type of server
--   resource.
--   
--   <a>$sel:amiAssociationScope:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_amiAssociationScope</a> - Scope of
--   AMI associations. The possible value is <tt>cross-account</tt>.
--   
--   <a>$sel:associationTime:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_associationTime</a> - Time when the
--   license configuration was associated with the resource.
--   
--   <a>$sel:resourceArn:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_resourceArn</a> - Amazon Resource
--   Name (ARN) of the resource.
--   
--   <a>$sel:resourceOwnerId:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_resourceOwnerId</a> - ID of the
--   Amazon Web Services account that owns the resource consuming licenses.
newLicenseConfigurationAssociation :: LicenseConfigurationAssociation

-- | Type of server resource.
licenseConfigurationAssociation_resourceType :: Lens' LicenseConfigurationAssociation (Maybe ResourceType)

-- | Scope of AMI associations. The possible value is
--   <tt>cross-account</tt>.
licenseConfigurationAssociation_amiAssociationScope :: Lens' LicenseConfigurationAssociation (Maybe Text)

-- | Time when the license configuration was associated with the resource.
licenseConfigurationAssociation_associationTime :: Lens' LicenseConfigurationAssociation (Maybe UTCTime)

-- | Amazon Resource Name (ARN) of the resource.
licenseConfigurationAssociation_resourceArn :: Lens' LicenseConfigurationAssociation (Maybe Text)

-- | ID of the Amazon Web Services account that owns the resource consuming
--   licenses.
licenseConfigurationAssociation_resourceOwnerId :: Lens' LicenseConfigurationAssociation (Maybe Text)

-- | Details about the usage of a resource associated with a license
--   configuration.
--   
--   <i>See:</i> <a>newLicenseConfigurationUsage</a> smart constructor.
data LicenseConfigurationUsage
LicenseConfigurationUsage' :: Maybe ResourceType -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Integer -> Maybe Text -> LicenseConfigurationUsage

-- | Type of resource.
[$sel:resourceType:LicenseConfigurationUsage'] :: LicenseConfigurationUsage -> Maybe ResourceType

-- | Status of the resource.
[$sel:resourceStatus:LicenseConfigurationUsage'] :: LicenseConfigurationUsage -> Maybe Text

-- | Time when the license configuration was initially associated with the
--   resource.
[$sel:associationTime:LicenseConfigurationUsage'] :: LicenseConfigurationUsage -> Maybe POSIX

-- | Amazon Resource Name (ARN) of the resource.
[$sel:resourceArn:LicenseConfigurationUsage'] :: LicenseConfigurationUsage -> Maybe Text

-- | Number of licenses consumed by the resource.
[$sel:consumedLicenses:LicenseConfigurationUsage'] :: LicenseConfigurationUsage -> Maybe Integer

-- | ID of the account that owns the resource.
[$sel:resourceOwnerId:LicenseConfigurationUsage'] :: LicenseConfigurationUsage -> Maybe Text

-- | Create a value of <a>LicenseConfigurationUsage</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_resourceType</a> - Type of resource.
--   
--   <a>$sel:resourceStatus:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_resourceStatus</a> - Status of the
--   resource.
--   
--   <a>$sel:associationTime:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_associationTime</a> - Time when the
--   license configuration was initially associated with the resource.
--   
--   <a>$sel:resourceArn:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_resourceArn</a> - Amazon Resource Name
--   (ARN) of the resource.
--   
--   <a>$sel:consumedLicenses:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_consumedLicenses</a> - Number of licenses
--   consumed by the resource.
--   
--   <a>$sel:resourceOwnerId:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_resourceOwnerId</a> - ID of the account
--   that owns the resource.
newLicenseConfigurationUsage :: LicenseConfigurationUsage

-- | Type of resource.
licenseConfigurationUsage_resourceType :: Lens' LicenseConfigurationUsage (Maybe ResourceType)

-- | Status of the resource.
licenseConfigurationUsage_resourceStatus :: Lens' LicenseConfigurationUsage (Maybe Text)

-- | Time when the license configuration was initially associated with the
--   resource.
licenseConfigurationUsage_associationTime :: Lens' LicenseConfigurationUsage (Maybe UTCTime)

-- | Amazon Resource Name (ARN) of the resource.
licenseConfigurationUsage_resourceArn :: Lens' LicenseConfigurationUsage (Maybe Text)

-- | Number of licenses consumed by the resource.
licenseConfigurationUsage_consumedLicenses :: Lens' LicenseConfigurationUsage (Maybe Integer)

-- | ID of the account that owns the resource.
licenseConfigurationUsage_resourceOwnerId :: Lens' LicenseConfigurationUsage (Maybe Text)

-- | Information about a license type conversion task.
--   
--   <i>See:</i> <a>newLicenseConversionContext</a> smart constructor.
data LicenseConversionContext
LicenseConversionContext' :: Maybe Text -> LicenseConversionContext

-- | The Usage operation value that corresponds to the license type you are
--   converting your resource from. For more information about which
--   platforms correspond to which usage operation values see <a>Sample
--   data: usage operation by platform</a>
[$sel:usageOperation:LicenseConversionContext'] :: LicenseConversionContext -> Maybe Text

-- | Create a value of <a>LicenseConversionContext</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:usageOperation:LicenseConversionContext'</a>,
--   <a>licenseConversionContext_usageOperation</a> - The Usage operation
--   value that corresponds to the license type you are converting your
--   resource from. For more information about which platforms correspond
--   to which usage operation values see <a>Sample data: usage operation by
--   platform</a>
newLicenseConversionContext :: LicenseConversionContext

-- | The Usage operation value that corresponds to the license type you are
--   converting your resource from. For more information about which
--   platforms correspond to which usage operation values see <a>Sample
--   data: usage operation by platform</a>
licenseConversionContext_usageOperation :: Lens' LicenseConversionContext (Maybe Text)

-- | Information about a license type conversion task.
--   
--   <i>See:</i> <a>newLicenseConversionTask</a> smart constructor.
data LicenseConversionTask
LicenseConversionTask' :: Maybe LicenseConversionTaskStatus -> Maybe POSIX -> Maybe LicenseConversionContext -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe POSIX -> Maybe LicenseConversionContext -> LicenseConversionTask

-- | The status of the conversion task.
[$sel:status:LicenseConversionTask'] :: LicenseConversionTask -> Maybe LicenseConversionTaskStatus

-- | The time the conversion task was started at.
[$sel:startTime:LicenseConversionTask'] :: LicenseConversionTask -> Maybe POSIX

-- | Information about the license type this conversion task converted to.
[$sel:destinationLicenseContext:LicenseConversionTask'] :: LicenseConversionTask -> Maybe LicenseConversionContext

-- | The ID of the license type conversion task.
[$sel:licenseConversionTaskId:LicenseConversionTask'] :: LicenseConversionTask -> Maybe Text

-- | The Amazon Resource Name (ARN) of the resource associated with the
--   license type conversion task.
[$sel:resourceArn:LicenseConversionTask'] :: LicenseConversionTask -> Maybe Text

-- | The status message for the conversion task.
[$sel:statusMessage:LicenseConversionTask'] :: LicenseConversionTask -> Maybe Text

-- | The time the conversion task was completed.
[$sel:endTime:LicenseConversionTask'] :: LicenseConversionTask -> Maybe POSIX

-- | The time the usage operation value of the resource was changed.
[$sel:licenseConversionTime:LicenseConversionTask'] :: LicenseConversionTask -> Maybe POSIX

-- | Information about the license type this conversion task converted
--   from.
[$sel:sourceLicenseContext:LicenseConversionTask'] :: LicenseConversionTask -> Maybe LicenseConversionContext

-- | Create a value of <a>LicenseConversionTask</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_status</a> - The status of the conversion
--   task.
--   
--   <a>$sel:startTime:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_startTime</a> - The time the conversion task
--   was started at.
--   
--   <a>$sel:destinationLicenseContext:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_destinationLicenseContext</a> - Information
--   about the license type this conversion task converted to.
--   
--   <a>$sel:licenseConversionTaskId:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_licenseConversionTaskId</a> - The ID of the
--   license type conversion task.
--   
--   <a>$sel:resourceArn:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the resource associated with the license type conversion
--   task.
--   
--   <a>$sel:statusMessage:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_statusMessage</a> - The status message for
--   the conversion task.
--   
--   <a>$sel:endTime:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_endTime</a> - The time the conversion task
--   was completed.
--   
--   <a>$sel:licenseConversionTime:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_licenseConversionTime</a> - The time the
--   usage operation value of the resource was changed.
--   
--   <a>$sel:sourceLicenseContext:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_sourceLicenseContext</a> - Information about
--   the license type this conversion task converted from.
newLicenseConversionTask :: LicenseConversionTask

-- | The status of the conversion task.
licenseConversionTask_status :: Lens' LicenseConversionTask (Maybe LicenseConversionTaskStatus)

-- | The time the conversion task was started at.
licenseConversionTask_startTime :: Lens' LicenseConversionTask (Maybe UTCTime)

-- | Information about the license type this conversion task converted to.
licenseConversionTask_destinationLicenseContext :: Lens' LicenseConversionTask (Maybe LicenseConversionContext)

-- | The ID of the license type conversion task.
licenseConversionTask_licenseConversionTaskId :: Lens' LicenseConversionTask (Maybe Text)

-- | The Amazon Resource Name (ARN) of the resource associated with the
--   license type conversion task.
licenseConversionTask_resourceArn :: Lens' LicenseConversionTask (Maybe Text)

-- | The status message for the conversion task.
licenseConversionTask_statusMessage :: Lens' LicenseConversionTask (Maybe Text)

-- | The time the conversion task was completed.
licenseConversionTask_endTime :: Lens' LicenseConversionTask (Maybe UTCTime)

-- | The time the usage operation value of the resource was changed.
licenseConversionTask_licenseConversionTime :: Lens' LicenseConversionTask (Maybe UTCTime)

-- | Information about the license type this conversion task converted
--   from.
licenseConversionTask_sourceLicenseContext :: Lens' LicenseConversionTask (Maybe LicenseConversionContext)

-- | Describes the failure of a license operation.
--   
--   <i>See:</i> <a>newLicenseOperationFailure</a> smart constructor.
data LicenseOperationFailure
LicenseOperationFailure' :: Maybe ResourceType -> Maybe Text -> Maybe Text -> Maybe [Metadata] -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> LicenseOperationFailure

-- | Resource type.
[$sel:resourceType:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe ResourceType

-- | The requester is "License Manager Automated Discovery".
[$sel:operationRequestedBy:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe Text

-- | Amazon Resource Name (ARN) of the resource.
[$sel:resourceArn:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe Text

-- | Reserved.
[$sel:metadataList:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe [Metadata]

-- | Name of the operation.
[$sel:operationName:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe Text

-- | Failure time.
[$sel:failureTime:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe POSIX

-- | Error message.
[$sel:errorMessage:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe Text

-- | ID of the Amazon Web Services account that owns the resource.
[$sel:resourceOwnerId:LicenseOperationFailure'] :: LicenseOperationFailure -> Maybe Text

-- | Create a value of <a>LicenseOperationFailure</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_resourceType</a> - Resource type.
--   
--   <a>$sel:operationRequestedBy:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_operationRequestedBy</a> - The requester is
--   "License Manager Automated Discovery".
--   
--   <a>$sel:resourceArn:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_resourceArn</a> - Amazon Resource Name
--   (ARN) of the resource.
--   
--   <a>$sel:metadataList:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_metadataList</a> - Reserved.
--   
--   <a>$sel:operationName:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_operationName</a> - Name of the operation.
--   
--   <a>$sel:failureTime:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_failureTime</a> - Failure time.
--   
--   <a>$sel:errorMessage:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_errorMessage</a> - Error message.
--   
--   <a>$sel:resourceOwnerId:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_resourceOwnerId</a> - ID of the Amazon Web
--   Services account that owns the resource.
newLicenseOperationFailure :: LicenseOperationFailure

-- | Resource type.
licenseOperationFailure_resourceType :: Lens' LicenseOperationFailure (Maybe ResourceType)

-- | The requester is "License Manager Automated Discovery".
licenseOperationFailure_operationRequestedBy :: Lens' LicenseOperationFailure (Maybe Text)

-- | Amazon Resource Name (ARN) of the resource.
licenseOperationFailure_resourceArn :: Lens' LicenseOperationFailure (Maybe Text)

-- | Reserved.
licenseOperationFailure_metadataList :: Lens' LicenseOperationFailure (Maybe [Metadata])

-- | Name of the operation.
licenseOperationFailure_operationName :: Lens' LicenseOperationFailure (Maybe Text)

-- | Failure time.
licenseOperationFailure_failureTime :: Lens' LicenseOperationFailure (Maybe UTCTime)

-- | Error message.
licenseOperationFailure_errorMessage :: Lens' LicenseOperationFailure (Maybe Text)

-- | ID of the Amazon Web Services account that owns the resource.
licenseOperationFailure_resourceOwnerId :: Lens' LicenseOperationFailure (Maybe Text)

-- | Details for associating a license configuration with a resource.
--   
--   <i>See:</i> <a>newLicenseSpecification</a> smart constructor.
data LicenseSpecification
LicenseSpecification' :: Maybe Text -> Text -> LicenseSpecification

-- | Scope of AMI associations. The possible value is
--   <tt>cross-account</tt>.
[$sel:amiAssociationScope:LicenseSpecification'] :: LicenseSpecification -> Maybe Text

-- | Amazon Resource Name (ARN) of the license configuration.
[$sel:licenseConfigurationArn:LicenseSpecification'] :: LicenseSpecification -> Text

-- | Create a value of <a>LicenseSpecification</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:amiAssociationScope:LicenseSpecification'</a>,
--   <a>licenseSpecification_amiAssociationScope</a> - Scope of AMI
--   associations. The possible value is <tt>cross-account</tt>.
--   
--   <a>$sel:licenseConfigurationArn:LicenseSpecification'</a>,
--   <a>licenseSpecification_licenseConfigurationArn</a> - Amazon Resource
--   Name (ARN) of the license configuration.
newLicenseSpecification :: Text -> LicenseSpecification

-- | Scope of AMI associations. The possible value is
--   <tt>cross-account</tt>.
licenseSpecification_amiAssociationScope :: Lens' LicenseSpecification (Maybe Text)

-- | Amazon Resource Name (ARN) of the license configuration.
licenseSpecification_licenseConfigurationArn :: Lens' LicenseSpecification Text

-- | Describes the entitlement usage associated with a license.
--   
--   <i>See:</i> <a>newLicenseUsage</a> smart constructor.
data LicenseUsage
LicenseUsage' :: Maybe [EntitlementUsage] -> LicenseUsage

-- | License entitlement usages.
[$sel:entitlementUsages:LicenseUsage'] :: LicenseUsage -> Maybe [EntitlementUsage]

-- | Create a value of <a>LicenseUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:entitlementUsages:LicenseUsage'</a>,
--   <a>licenseUsage_entitlementUsages</a> - License entitlement usages.
newLicenseUsage :: LicenseUsage

-- | License entitlement usages.
licenseUsage_entitlementUsages :: Lens' LicenseUsage (Maybe [EntitlementUsage])

-- | Summary information about a managed resource.
--   
--   <i>See:</i> <a>newManagedResourceSummary</a> smart constructor.
data ManagedResourceSummary
ManagedResourceSummary' :: Maybe Integer -> Maybe ResourceType -> ManagedResourceSummary

-- | Number of resources associated with licenses.
[$sel:associationCount:ManagedResourceSummary'] :: ManagedResourceSummary -> Maybe Integer

-- | Type of resource associated with a license.
[$sel:resourceType:ManagedResourceSummary'] :: ManagedResourceSummary -> Maybe ResourceType

-- | Create a value of <a>ManagedResourceSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:associationCount:ManagedResourceSummary'</a>,
--   <a>managedResourceSummary_associationCount</a> - Number of resources
--   associated with licenses.
--   
--   <a>$sel:resourceType:ManagedResourceSummary'</a>,
--   <a>managedResourceSummary_resourceType</a> - Type of resource
--   associated with a license.
newManagedResourceSummary :: ManagedResourceSummary

-- | Number of resources associated with licenses.
managedResourceSummary_associationCount :: Lens' ManagedResourceSummary (Maybe Integer)

-- | Type of resource associated with a license.
managedResourceSummary_resourceType :: Lens' ManagedResourceSummary (Maybe ResourceType)

-- | Describes key/value pairs.
--   
--   <i>See:</i> <a>newMetadata</a> smart constructor.
data Metadata
Metadata' :: Maybe Text -> Maybe Text -> Metadata

-- | The value.
[$sel:value:Metadata'] :: Metadata -> Maybe Text

-- | The key name.
[$sel:name:Metadata'] :: Metadata -> Maybe Text

-- | Create a value of <a>Metadata</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Metadata'</a>, <a>metadata_value</a> - The value.
--   
--   <a>$sel:name:Metadata'</a>, <a>metadata_name</a> - The key name.
newMetadata :: Metadata

-- | The value.
metadata_value :: Lens' Metadata (Maybe Text)

-- | The key name.
metadata_name :: Lens' Metadata (Maybe Text)

-- | Configuration information for Organizations.
--   
--   <i>See:</i> <a>newOrganizationConfiguration</a> smart constructor.
data OrganizationConfiguration
OrganizationConfiguration' :: Bool -> OrganizationConfiguration

-- | Enables Organizations integration.
[$sel:enableIntegration:OrganizationConfiguration'] :: OrganizationConfiguration -> Bool

-- | Create a value of <a>OrganizationConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enableIntegration:OrganizationConfiguration'</a>,
--   <a>organizationConfiguration_enableIntegration</a> - Enables
--   Organizations integration.
newOrganizationConfiguration :: Bool -> OrganizationConfiguration

-- | Enables Organizations integration.
organizationConfiguration_enableIntegration :: Lens' OrganizationConfiguration Bool

-- | Describes product information for a license configuration.
--   
--   <i>See:</i> <a>newProductInformation</a> smart constructor.
data ProductInformation
ProductInformation' :: Text -> [ProductInformationFilter] -> ProductInformation

-- | Resource type. The possible values are <tt>SSM_MANAGED</tt> |
--   <tt>RDS</tt>.
[$sel:resourceType:ProductInformation'] :: ProductInformation -> Text

-- | A Product information filter consists of a
--   <tt>ProductInformationFilterComparator</tt> which is a logical
--   operator, a <tt>ProductInformationFilterName</tt> which specifies the
--   type of filter being declared, and a
--   <tt>ProductInformationFilterValue</tt> that specifies the value to
--   filter on.
--   
--   Accepted values for <tt>ProductInformationFilterName</tt> are listed
--   here along with descriptions and valid options for
--   <tt>ProductInformationFilterComparator</tt>.
--   
--   The following filters and are supported when the resource type is
--   <tt>SSM_MANAGED</tt>:
--   
--   <ul>
--   <li><tt>Application Name</tt> - The name of the application. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Publisher</tt> - The publisher of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Version</tt> - The version of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Name</tt> - The name of the platform. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Type</tt> - The platform type. Logical operator is
--   <tt>EQUALS</tt>.</li>
--   <li><tt>Tag:key</tt> - The key of a tag attached to an Amazon Web
--   Services resource you wish to exclude from automated discovery.
--   Logical operator is <tt>NOT_EQUALS</tt>. The key for your tag must be
--   appended to <tt>Tag:</tt> following the example:
--   <tt>Tag:name-of-your-key</tt>. <tt>ProductInformationFilterValue</tt>
--   is optional if you are not using values for the key.</li>
--   <li><tt>AccountId</tt> - The 12-digit ID of an Amazon Web Services
--   account you wish to exclude from automated discovery. Logical operator
--   is <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>License Included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> and <tt>NOT_EQUALS</tt>. Possible values
--   are: <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   </ul>
--   
--   The following filters and logical operators are supported when the
--   resource type is <tt>RDS</tt>:
--   
--   <ul>
--   <li><tt>Engine Edition</tt> - The edition of the database engine.
--   Logical operator is <tt>EQUALS</tt>. Possible values are:
--   <tt>oracle-ee</tt> | <tt>oracle-se</tt> | <tt>oracle-se1</tt> |
--   <tt>oracle-se2</tt>.</li>
--   <li><tt>License Pack</tt> - The license pack. Logical operator is
--   <tt>EQUALS</tt>. Possible values are: <tt>data guard</tt> |
--   <tt>diagnostic pack sqlt</tt> | <tt>tuning pack sqlt</tt> |
--   <tt>ols</tt> | <tt>olap</tt>.</li>
--   </ul>
[$sel:productInformationFilterList:ProductInformation'] :: ProductInformation -> [ProductInformationFilter]

-- | Create a value of <a>ProductInformation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:ProductInformation'</a>,
--   <a>productInformation_resourceType</a> - Resource type. The possible
--   values are <tt>SSM_MANAGED</tt> | <tt>RDS</tt>.
--   
--   <a>$sel:productInformationFilterList:ProductInformation'</a>,
--   <a>productInformation_productInformationFilterList</a> - A Product
--   information filter consists of a
--   <tt>ProductInformationFilterComparator</tt> which is a logical
--   operator, a <tt>ProductInformationFilterName</tt> which specifies the
--   type of filter being declared, and a
--   <tt>ProductInformationFilterValue</tt> that specifies the value to
--   filter on.
--   
--   Accepted values for <tt>ProductInformationFilterName</tt> are listed
--   here along with descriptions and valid options for
--   <tt>ProductInformationFilterComparator</tt>.
--   
--   The following filters and are supported when the resource type is
--   <tt>SSM_MANAGED</tt>:
--   
--   <ul>
--   <li><tt>Application Name</tt> - The name of the application. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Publisher</tt> - The publisher of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Version</tt> - The version of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Name</tt> - The name of the platform. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Type</tt> - The platform type. Logical operator is
--   <tt>EQUALS</tt>.</li>
--   <li><tt>Tag:key</tt> - The key of a tag attached to an Amazon Web
--   Services resource you wish to exclude from automated discovery.
--   Logical operator is <tt>NOT_EQUALS</tt>. The key for your tag must be
--   appended to <tt>Tag:</tt> following the example:
--   <tt>Tag:name-of-your-key</tt>. <tt>ProductInformationFilterValue</tt>
--   is optional if you are not using values for the key.</li>
--   <li><tt>AccountId</tt> - The 12-digit ID of an Amazon Web Services
--   account you wish to exclude from automated discovery. Logical operator
--   is <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>License Included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> and <tt>NOT_EQUALS</tt>. Possible values
--   are: <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   </ul>
--   
--   The following filters and logical operators are supported when the
--   resource type is <tt>RDS</tt>:
--   
--   <ul>
--   <li><tt>Engine Edition</tt> - The edition of the database engine.
--   Logical operator is <tt>EQUALS</tt>. Possible values are:
--   <tt>oracle-ee</tt> | <tt>oracle-se</tt> | <tt>oracle-se1</tt> |
--   <tt>oracle-se2</tt>.</li>
--   <li><tt>License Pack</tt> - The license pack. Logical operator is
--   <tt>EQUALS</tt>. Possible values are: <tt>data guard</tt> |
--   <tt>diagnostic pack sqlt</tt> | <tt>tuning pack sqlt</tt> |
--   <tt>ols</tt> | <tt>olap</tt>.</li>
--   </ul>
newProductInformation :: Text -> ProductInformation

-- | Resource type. The possible values are <tt>SSM_MANAGED</tt> |
--   <tt>RDS</tt>.
productInformation_resourceType :: Lens' ProductInformation Text

-- | A Product information filter consists of a
--   <tt>ProductInformationFilterComparator</tt> which is a logical
--   operator, a <tt>ProductInformationFilterName</tt> which specifies the
--   type of filter being declared, and a
--   <tt>ProductInformationFilterValue</tt> that specifies the value to
--   filter on.
--   
--   Accepted values for <tt>ProductInformationFilterName</tt> are listed
--   here along with descriptions and valid options for
--   <tt>ProductInformationFilterComparator</tt>.
--   
--   The following filters and are supported when the resource type is
--   <tt>SSM_MANAGED</tt>:
--   
--   <ul>
--   <li><tt>Application Name</tt> - The name of the application. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Publisher</tt> - The publisher of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Version</tt> - The version of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Name</tt> - The name of the platform. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Type</tt> - The platform type. Logical operator is
--   <tt>EQUALS</tt>.</li>
--   <li><tt>Tag:key</tt> - The key of a tag attached to an Amazon Web
--   Services resource you wish to exclude from automated discovery.
--   Logical operator is <tt>NOT_EQUALS</tt>. The key for your tag must be
--   appended to <tt>Tag:</tt> following the example:
--   <tt>Tag:name-of-your-key</tt>. <tt>ProductInformationFilterValue</tt>
--   is optional if you are not using values for the key.</li>
--   <li><tt>AccountId</tt> - The 12-digit ID of an Amazon Web Services
--   account you wish to exclude from automated discovery. Logical operator
--   is <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>License Included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> and <tt>NOT_EQUALS</tt>. Possible values
--   are: <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   </ul>
--   
--   The following filters and logical operators are supported when the
--   resource type is <tt>RDS</tt>:
--   
--   <ul>
--   <li><tt>Engine Edition</tt> - The edition of the database engine.
--   Logical operator is <tt>EQUALS</tt>. Possible values are:
--   <tt>oracle-ee</tt> | <tt>oracle-se</tt> | <tt>oracle-se1</tt> |
--   <tt>oracle-se2</tt>.</li>
--   <li><tt>License Pack</tt> - The license pack. Logical operator is
--   <tt>EQUALS</tt>. Possible values are: <tt>data guard</tt> |
--   <tt>diagnostic pack sqlt</tt> | <tt>tuning pack sqlt</tt> |
--   <tt>ols</tt> | <tt>olap</tt>.</li>
--   </ul>
productInformation_productInformationFilterList :: Lens' ProductInformation [ProductInformationFilter]

-- | Describes product information filters.
--   
--   <i>See:</i> <a>newProductInformationFilter</a> smart constructor.
data ProductInformationFilter
ProductInformationFilter' :: Maybe [Text] -> Text -> Text -> ProductInformationFilter

-- | Filter value.
[$sel:productInformationFilterValue:ProductInformationFilter'] :: ProductInformationFilter -> Maybe [Text]

-- | Filter name.
[$sel:productInformationFilterName:ProductInformationFilter'] :: ProductInformationFilter -> Text

-- | Logical operator.
[$sel:productInformationFilterComparator:ProductInformationFilter'] :: ProductInformationFilter -> Text

-- | Create a value of <a>ProductInformationFilter</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:productInformationFilterValue:ProductInformationFilter'</a>,
--   <a>productInformationFilter_productInformationFilterValue</a> - Filter
--   value.
--   
--   <a>$sel:productInformationFilterName:ProductInformationFilter'</a>,
--   <a>productInformationFilter_productInformationFilterName</a> - Filter
--   name.
--   
--   
--   <a>$sel:productInformationFilterComparator:ProductInformationFilter'</a>,
--   <a>productInformationFilter_productInformationFilterComparator</a> -
--   Logical operator.
newProductInformationFilter :: Text -> Text -> ProductInformationFilter

-- | Filter value.
productInformationFilter_productInformationFilterValue :: Lens' ProductInformationFilter (Maybe [Text])

-- | Filter name.
productInformationFilter_productInformationFilterName :: Lens' ProductInformationFilter Text

-- | Logical operator.
productInformationFilter_productInformationFilterComparator :: Lens' ProductInformationFilter Text

-- | Details about a provisional configuration.
--   
--   <i>See:</i> <a>newProvisionalConfiguration</a> smart constructor.
data ProvisionalConfiguration
ProvisionalConfiguration' :: Int -> ProvisionalConfiguration

-- | Maximum time for the provisional configuration, in minutes.
[$sel:maxTimeToLiveInMinutes:ProvisionalConfiguration'] :: ProvisionalConfiguration -> Int

-- | Create a value of <a>ProvisionalConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:maxTimeToLiveInMinutes:ProvisionalConfiguration'</a>,
--   <a>provisionalConfiguration_maxTimeToLiveInMinutes</a> - Maximum time
--   for the provisional configuration, in minutes.
newProvisionalConfiguration :: Int -> ProvisionalConfiguration

-- | Maximum time for the provisional configuration, in minutes.
provisionalConfiguration_maxTimeToLiveInMinutes :: Lens' ProvisionalConfiguration Int

-- | Metadata associated with received licenses and grants.
--   
--   <i>See:</i> <a>newReceivedMetadata</a> smart constructor.
data ReceivedMetadata
ReceivedMetadata' :: Maybe ReceivedStatus -> Maybe (NonEmpty AllowedOperation) -> Maybe Text -> ReceivedMetadata

-- | Received status.
[$sel:receivedStatus:ReceivedMetadata'] :: ReceivedMetadata -> Maybe ReceivedStatus

-- | Allowed operations.
[$sel:allowedOperations:ReceivedMetadata'] :: ReceivedMetadata -> Maybe (NonEmpty AllowedOperation)

-- | Received status reason.
[$sel:receivedStatusReason:ReceivedMetadata'] :: ReceivedMetadata -> Maybe Text

-- | Create a value of <a>ReceivedMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:receivedStatus:ReceivedMetadata'</a>,
--   <a>receivedMetadata_receivedStatus</a> - Received status.
--   
--   <a>$sel:allowedOperations:ReceivedMetadata'</a>,
--   <a>receivedMetadata_allowedOperations</a> - Allowed operations.
--   
--   <a>$sel:receivedStatusReason:ReceivedMetadata'</a>,
--   <a>receivedMetadata_receivedStatusReason</a> - Received status reason.
newReceivedMetadata :: ReceivedMetadata

-- | Received status.
receivedMetadata_receivedStatus :: Lens' ReceivedMetadata (Maybe ReceivedStatus)

-- | Allowed operations.
receivedMetadata_allowedOperations :: Lens' ReceivedMetadata (Maybe (NonEmpty AllowedOperation))

-- | Received status reason.
receivedMetadata_receivedStatusReason :: Lens' ReceivedMetadata (Maybe Text)

-- | Details of the license configuration that this generator reports on.
--   
--   <i>See:</i> <a>newReportContext</a> smart constructor.
data ReportContext
ReportContext' :: [Text] -> ReportContext

-- | Amazon Resource Name (ARN) of the license configuration that this
--   generator reports on.
[$sel:licenseConfigurationArns:ReportContext'] :: ReportContext -> [Text]

-- | Create a value of <a>ReportContext</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseConfigurationArns:ReportContext'</a>,
--   <a>reportContext_licenseConfigurationArns</a> - Amazon Resource Name
--   (ARN) of the license configuration that this generator reports on.
newReportContext :: ReportContext

-- | Amazon Resource Name (ARN) of the license configuration that this
--   generator reports on.
reportContext_licenseConfigurationArns :: Lens' ReportContext [Text]

-- | Details about how frequently reports are generated.
--   
--   <i>See:</i> <a>newReportFrequency</a> smart constructor.
data ReportFrequency
ReportFrequency' :: Maybe ReportFrequencyType -> Maybe Int -> ReportFrequency

-- | Time period between each report. The period can be daily, weekly, or
--   monthly.
[$sel:period:ReportFrequency'] :: ReportFrequency -> Maybe ReportFrequencyType

-- | Number of times within the frequency period that a report is
--   generated. The only supported value is <tt>1</tt>.
[$sel:value:ReportFrequency'] :: ReportFrequency -> Maybe Int

-- | Create a value of <a>ReportFrequency</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:period:ReportFrequency'</a>, <a>reportFrequency_period</a> -
--   Time period between each report. The period can be daily, weekly, or
--   monthly.
--   
--   <a>$sel:value:ReportFrequency'</a>, <a>reportFrequency_value</a> -
--   Number of times within the frequency period that a report is
--   generated. The only supported value is <tt>1</tt>.
newReportFrequency :: ReportFrequency

-- | Time period between each report. The period can be daily, weekly, or
--   monthly.
reportFrequency_period :: Lens' ReportFrequency (Maybe ReportFrequencyType)

-- | Number of times within the frequency period that a report is
--   generated. The only supported value is <tt>1</tt>.
reportFrequency_value :: Lens' ReportFrequency (Maybe Int)

-- | Describe the details of a report generator.
--   
--   <i>See:</i> <a>newReportGenerator</a> smart constructor.
data ReportGenerator
ReportGenerator' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe ReportFrequency -> Maybe S3Location -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe [ReportType] -> Maybe Text -> Maybe [Tag] -> Maybe ReportContext -> ReportGenerator

-- | Time the last report was generated at.
[$sel:lastReportGenerationTime:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Failure message for the last report generation attempt.
[$sel:lastRunFailureReason:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Status of the last report generation attempt.
[$sel:lastRunStatus:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Name of the report generator.
[$sel:reportGeneratorName:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Details about how frequently reports are generated.
[$sel:reportFrequency:ReportGenerator'] :: ReportGenerator -> Maybe ReportFrequency

-- | Details of the S3 bucket that report generator reports are published
--   to.
[$sel:s3Location:ReportGenerator'] :: ReportGenerator -> Maybe S3Location

-- | Amazon Resource Name (ARN) of the report generator.
[$sel:licenseManagerReportGeneratorArn:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | The Amazon Web Services account ID used to create the report
--   generator.
[$sel:reportCreatorAccount:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Description of the report generator.
[$sel:description:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Type of reports that are generated.
[$sel:reportType:ReportGenerator'] :: ReportGenerator -> Maybe [ReportType]

-- | Time the report was created.
[$sel:createTime:ReportGenerator'] :: ReportGenerator -> Maybe Text

-- | Tags associated with the report generator.
[$sel:tags:ReportGenerator'] :: ReportGenerator -> Maybe [Tag]

-- | License configuration type for this generator.
[$sel:reportContext:ReportGenerator'] :: ReportGenerator -> Maybe ReportContext

-- | Create a value of <a>ReportGenerator</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastReportGenerationTime:ReportGenerator'</a>,
--   <a>reportGenerator_lastReportGenerationTime</a> - Time the last report
--   was generated at.
--   
--   <a>$sel:lastRunFailureReason:ReportGenerator'</a>,
--   <a>reportGenerator_lastRunFailureReason</a> - Failure message for the
--   last report generation attempt.
--   
--   <a>$sel:lastRunStatus:ReportGenerator'</a>,
--   <a>reportGenerator_lastRunStatus</a> - Status of the last report
--   generation attempt.
--   
--   <a>$sel:reportGeneratorName:ReportGenerator'</a>,
--   <a>reportGenerator_reportGeneratorName</a> - Name of the report
--   generator.
--   
--   <a>$sel:reportFrequency:ReportGenerator'</a>,
--   <a>reportGenerator_reportFrequency</a> - Details about how frequently
--   reports are generated.
--   
--   <a>$sel:s3Location:ReportGenerator'</a>,
--   <a>reportGenerator_s3Location</a> - Details of the S3 bucket that
--   report generator reports are published to.
--   
--   <a>$sel:licenseManagerReportGeneratorArn:ReportGenerator'</a>,
--   <a>reportGenerator_licenseManagerReportGeneratorArn</a> - Amazon
--   Resource Name (ARN) of the report generator.
--   
--   <a>$sel:reportCreatorAccount:ReportGenerator'</a>,
--   <a>reportGenerator_reportCreatorAccount</a> - The Amazon Web Services
--   account ID used to create the report generator.
--   
--   <a>$sel:description:ReportGenerator'</a>,
--   <a>reportGenerator_description</a> - Description of the report
--   generator.
--   
--   <a>$sel:reportType:ReportGenerator'</a>,
--   <a>reportGenerator_reportType</a> - Type of reports that are
--   generated.
--   
--   <a>$sel:createTime:ReportGenerator'</a>,
--   <a>reportGenerator_createTime</a> - Time the report was created.
--   
--   <a>$sel:tags:ReportGenerator'</a>, <a>reportGenerator_tags</a> - Tags
--   associated with the report generator.
--   
--   <a>$sel:reportContext:ReportGenerator'</a>,
--   <a>reportGenerator_reportContext</a> - License configuration type for
--   this generator.
newReportGenerator :: ReportGenerator

-- | Time the last report was generated at.
reportGenerator_lastReportGenerationTime :: Lens' ReportGenerator (Maybe Text)

-- | Failure message for the last report generation attempt.
reportGenerator_lastRunFailureReason :: Lens' ReportGenerator (Maybe Text)

-- | Status of the last report generation attempt.
reportGenerator_lastRunStatus :: Lens' ReportGenerator (Maybe Text)

-- | Name of the report generator.
reportGenerator_reportGeneratorName :: Lens' ReportGenerator (Maybe Text)

-- | Details about how frequently reports are generated.
reportGenerator_reportFrequency :: Lens' ReportGenerator (Maybe ReportFrequency)

-- | Details of the S3 bucket that report generator reports are published
--   to.
reportGenerator_s3Location :: Lens' ReportGenerator (Maybe S3Location)

-- | Amazon Resource Name (ARN) of the report generator.
reportGenerator_licenseManagerReportGeneratorArn :: Lens' ReportGenerator (Maybe Text)

-- | The Amazon Web Services account ID used to create the report
--   generator.
reportGenerator_reportCreatorAccount :: Lens' ReportGenerator (Maybe Text)

-- | Description of the report generator.
reportGenerator_description :: Lens' ReportGenerator (Maybe Text)

-- | Type of reports that are generated.
reportGenerator_reportType :: Lens' ReportGenerator (Maybe [ReportType])

-- | Time the report was created.
reportGenerator_createTime :: Lens' ReportGenerator (Maybe Text)

-- | Tags associated with the report generator.
reportGenerator_tags :: Lens' ReportGenerator (Maybe [Tag])

-- | License configuration type for this generator.
reportGenerator_reportContext :: Lens' ReportGenerator (Maybe ReportContext)

-- | Details about a resource.
--   
--   <i>See:</i> <a>newResourceInventory</a> smart constructor.
data ResourceInventory
ResourceInventory' :: Maybe Text -> Maybe Text -> Maybe ResourceType -> Maybe Text -> Maybe Text -> Maybe Text -> ResourceInventory

-- | Platform of the resource.
[$sel:platform:ResourceInventory'] :: ResourceInventory -> Maybe Text

-- | ID of the resource.
[$sel:resourceId:ResourceInventory'] :: ResourceInventory -> Maybe Text

-- | Type of resource.
[$sel:resourceType:ResourceInventory'] :: ResourceInventory -> Maybe ResourceType

-- | Platform version of the resource in the inventory.
[$sel:platformVersion:ResourceInventory'] :: ResourceInventory -> Maybe Text

-- | Amazon Resource Name (ARN) of the resource.
[$sel:resourceArn:ResourceInventory'] :: ResourceInventory -> Maybe Text

-- | ID of the account that owns the resource.
[$sel:resourceOwningAccountId:ResourceInventory'] :: ResourceInventory -> Maybe Text

-- | Create a value of <a>ResourceInventory</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:platform:ResourceInventory'</a>,
--   <a>resourceInventory_platform</a> - Platform of the resource.
--   
--   <a>$sel:resourceId:ResourceInventory'</a>,
--   <a>resourceInventory_resourceId</a> - ID of the resource.
--   
--   <a>$sel:resourceType:ResourceInventory'</a>,
--   <a>resourceInventory_resourceType</a> - Type of resource.
--   
--   <a>$sel:platformVersion:ResourceInventory'</a>,
--   <a>resourceInventory_platformVersion</a> - Platform version of the
--   resource in the inventory.
--   
--   <a>$sel:resourceArn:ResourceInventory'</a>,
--   <a>resourceInventory_resourceArn</a> - Amazon Resource Name (ARN) of
--   the resource.
--   
--   <a>$sel:resourceOwningAccountId:ResourceInventory'</a>,
--   <a>resourceInventory_resourceOwningAccountId</a> - ID of the account
--   that owns the resource.
newResourceInventory :: ResourceInventory

-- | Platform of the resource.
resourceInventory_platform :: Lens' ResourceInventory (Maybe Text)

-- | ID of the resource.
resourceInventory_resourceId :: Lens' ResourceInventory (Maybe Text)

-- | Type of resource.
resourceInventory_resourceType :: Lens' ResourceInventory (Maybe ResourceType)

-- | Platform version of the resource in the inventory.
resourceInventory_platformVersion :: Lens' ResourceInventory (Maybe Text)

-- | Amazon Resource Name (ARN) of the resource.
resourceInventory_resourceArn :: Lens' ResourceInventory (Maybe Text)

-- | ID of the account that owns the resource.
resourceInventory_resourceOwningAccountId :: Lens' ResourceInventory (Maybe Text)

-- | Details of the S3 bucket that report generator reports are published
--   to.
--   
--   <i>See:</i> <a>newS3Location</a> smart constructor.
data S3Location
S3Location' :: Maybe Text -> Maybe Text -> S3Location

-- | Name of the S3 bucket reports are published to.
[$sel:bucket:S3Location'] :: S3Location -> Maybe Text

-- | Prefix of the S3 bucket reports are published to.
[$sel:keyPrefix:S3Location'] :: S3Location -> Maybe Text

-- | Create a value of <a>S3Location</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bucket:S3Location'</a>, <a>s3Location_bucket</a> - Name of the
--   S3 bucket reports are published to.
--   
--   <a>$sel:keyPrefix:S3Location'</a>, <a>s3Location_keyPrefix</a> -
--   Prefix of the S3 bucket reports are published to.
newS3Location :: S3Location

-- | Name of the S3 bucket reports are published to.
s3Location_bucket :: Lens' S3Location (Maybe Text)

-- | Prefix of the S3 bucket reports are published to.
s3Location_keyPrefix :: Lens' S3Location (Maybe Text)

-- | Details about a tag for a license configuration.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | Tag value.
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | Tag key.
[$sel:key:Tag'] :: Tag -> Maybe Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - Tag value.
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - Tag key.
newTag :: Tag

-- | Tag value.
tag_value :: Lens' Tag (Maybe Text)

-- | Tag key.
tag_key :: Lens' Tag (Maybe Text)

-- | Describes a token.
--   
--   <i>See:</i> <a>newTokenData</a> smart constructor.
data TokenData
TokenData' :: Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Text -> TokenData

-- | Token status. The possible values are <tt>AVAILABLE</tt> and
--   <tt>DELETED</tt>.
[$sel:status:TokenData'] :: TokenData -> Maybe Text

-- | Token ID.
[$sel:tokenId:TokenData'] :: TokenData -> Maybe Text

-- | Data specified by the caller.
[$sel:tokenProperties:TokenData'] :: TokenData -> Maybe [Text]

-- | Amazon Resource Names (ARN) of the roles included in the token.
[$sel:roleArns:TokenData'] :: TokenData -> Maybe [Text]

-- | Type of token generated. The supported value is
--   <tt>REFRESH_TOKEN</tt>.
[$sel:tokenType:TokenData'] :: TokenData -> Maybe Text

-- | Token expiration time, in ISO8601-UTC format.
[$sel:expirationTime:TokenData'] :: TokenData -> Maybe Text

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:TokenData'] :: TokenData -> Maybe Text

-- | Create a value of <a>TokenData</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:TokenData'</a>, <a>tokenData_status</a> - Token status.
--   The possible values are <tt>AVAILABLE</tt> and <tt>DELETED</tt>.
--   
--   <a>$sel:tokenId:TokenData'</a>, <a>tokenData_tokenId</a> - Token ID.
--   
--   <a>$sel:tokenProperties:TokenData'</a>,
--   <a>tokenData_tokenProperties</a> - Data specified by the caller.
--   
--   <a>$sel:roleArns:TokenData'</a>, <a>tokenData_roleArns</a> - Amazon
--   Resource Names (ARN) of the roles included in the token.
--   
--   <a>$sel:tokenType:TokenData'</a>, <a>tokenData_tokenType</a> - Type of
--   token generated. The supported value is <tt>REFRESH_TOKEN</tt>.
--   
--   <a>$sel:expirationTime:TokenData'</a>, <a>tokenData_expirationTime</a>
--   - Token expiration time, in ISO8601-UTC format.
--   
--   <a>$sel:licenseArn:TokenData'</a>, <a>tokenData_licenseArn</a> -
--   Amazon Resource Name (ARN) of the license.
newTokenData :: TokenData

-- | Token status. The possible values are <tt>AVAILABLE</tt> and
--   <tt>DELETED</tt>.
tokenData_status :: Lens' TokenData (Maybe Text)

-- | Token ID.
tokenData_tokenId :: Lens' TokenData (Maybe Text)

-- | Data specified by the caller.
tokenData_tokenProperties :: Lens' TokenData (Maybe [Text])

-- | Amazon Resource Names (ARN) of the roles included in the token.
tokenData_roleArns :: Lens' TokenData (Maybe [Text])

-- | Type of token generated. The supported value is
--   <tt>REFRESH_TOKEN</tt>.
tokenData_tokenType :: Lens' TokenData (Maybe Text)

-- | Token expiration time, in ISO8601-UTC format.
tokenData_expirationTime :: Lens' TokenData (Maybe Text)

-- | Amazon Resource Name (ARN) of the license.
tokenData_licenseArn :: Lens' TokenData (Maybe Text)


-- | Adds the specified tags to the specified license configuration.
module Amazonka.LicenseManager.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | Amazon Resource Name (ARN) of the license configuration.
[$sel:resourceArn:TagResource'] :: TagResource -> Text

-- | One or more tags.
[$sel:tags:TagResource'] :: TagResource -> [Tag]

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   Amazon Resource Name (ARN) of the license configuration.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - One or more
--   tags.
newTagResource :: Text -> TagResource

-- | Amazon Resource Name (ARN) of the license configuration.
tagResource_resourceArn :: Lens' TagResource Text

-- | One or more tags.
tagResource_tags :: Lens' TagResource [Tag]

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:TagResourceResponse'] :: TagResourceResponse -> Int

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.TagResource.TagResource
instance GHC.Show.Show Amazonka.LicenseManager.TagResource.TagResource
instance GHC.Read.Read Amazonka.LicenseManager.TagResource.TagResource
instance GHC.Classes.Eq Amazonka.LicenseManager.TagResource.TagResource
instance GHC.Generics.Generic Amazonka.LicenseManager.TagResource.TagResourceResponse
instance GHC.Show.Show Amazonka.LicenseManager.TagResource.TagResourceResponse
instance GHC.Read.Read Amazonka.LicenseManager.TagResource.TagResourceResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.TagResource.TagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.LicenseManager.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.LicenseManager.TagResource.TagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.TagResource.TagResource
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.TagResource.TagResource
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.TagResource.TagResource


-- | Rejects the specified grant.
module Amazonka.LicenseManager.RejectGrant

-- | <i>See:</i> <a>newRejectGrant</a> smart constructor.
data RejectGrant
RejectGrant' :: Text -> RejectGrant

-- | Amazon Resource Name (ARN) of the grant.
[$sel:grantArn:RejectGrant'] :: RejectGrant -> Text

-- | Create a value of <a>RejectGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantArn:RejectGrant'</a>, <a>rejectGrant_grantArn</a> -
--   Amazon Resource Name (ARN) of the grant.
newRejectGrant :: Text -> RejectGrant

-- | Amazon Resource Name (ARN) of the grant.
rejectGrant_grantArn :: Lens' RejectGrant Text

-- | <i>See:</i> <a>newRejectGrantResponse</a> smart constructor.
data RejectGrantResponse
RejectGrantResponse' :: Maybe GrantStatus -> Maybe Text -> Maybe Text -> Int -> RejectGrantResponse

-- | Grant status.
[$sel:status:RejectGrantResponse'] :: RejectGrantResponse -> Maybe GrantStatus

-- | Grant version.
[$sel:version:RejectGrantResponse'] :: RejectGrantResponse -> Maybe Text

-- | Grant ARN.
[$sel:grantArn:RejectGrantResponse'] :: RejectGrantResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:RejectGrantResponse'] :: RejectGrantResponse -> Int

-- | Create a value of <a>RejectGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:RejectGrantResponse'</a>,
--   <a>rejectGrantResponse_status</a> - Grant status.
--   
--   <a>$sel:version:RejectGrantResponse'</a>,
--   <a>rejectGrantResponse_version</a> - Grant version.
--   
--   <a>$sel:grantArn:RejectGrant'</a>, <a>rejectGrantResponse_grantArn</a>
--   - Grant ARN.
--   
--   <a>$sel:httpStatus:RejectGrantResponse'</a>,
--   <a>rejectGrantResponse_httpStatus</a> - The response's http status
--   code.
newRejectGrantResponse :: Int -> RejectGrantResponse

-- | Grant status.
rejectGrantResponse_status :: Lens' RejectGrantResponse (Maybe GrantStatus)

-- | Grant version.
rejectGrantResponse_version :: Lens' RejectGrantResponse (Maybe Text)

-- | Grant ARN.
rejectGrantResponse_grantArn :: Lens' RejectGrantResponse (Maybe Text)

-- | The response's http status code.
rejectGrantResponse_httpStatus :: Lens' RejectGrantResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.RejectGrant.RejectGrant
instance GHC.Show.Show Amazonka.LicenseManager.RejectGrant.RejectGrant
instance GHC.Read.Read Amazonka.LicenseManager.RejectGrant.RejectGrant
instance GHC.Classes.Eq Amazonka.LicenseManager.RejectGrant.RejectGrant
instance GHC.Generics.Generic Amazonka.LicenseManager.RejectGrant.RejectGrantResponse
instance GHC.Show.Show Amazonka.LicenseManager.RejectGrant.RejectGrantResponse
instance GHC.Read.Read Amazonka.LicenseManager.RejectGrant.RejectGrantResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.RejectGrant.RejectGrantResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.RejectGrant.RejectGrant
instance Control.DeepSeq.NFData Amazonka.LicenseManager.RejectGrant.RejectGrantResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.RejectGrant.RejectGrant
instance Control.DeepSeq.NFData Amazonka.LicenseManager.RejectGrant.RejectGrant
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.RejectGrant.RejectGrant
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.RejectGrant.RejectGrant
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.RejectGrant.RejectGrant
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.RejectGrant.RejectGrant


-- | Lists all license usage records for a license configuration,
--   displaying license consumption details by resource at a selected point
--   in time. Use this action to audit the current license consumption for
--   any license inventory and configuration.
--   
--   This operation returns paginated results.
module Amazonka.LicenseManager.ListUsageForLicenseConfiguration

-- | <i>See:</i> <a>newListUsageForLicenseConfiguration</a> smart
--   constructor.
data ListUsageForLicenseConfiguration
ListUsageForLicenseConfiguration' :: Maybe [Filter] -> Maybe Text -> Maybe Int -> Text -> ListUsageForLicenseConfiguration

-- | Filters to scope the results. The following filters and logical
--   operators are supported:
--   
--   <ul>
--   <li><tt>resourceArn</tt> - The ARN of the license configuration
--   resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>resourceType</tt> - The resource type (<tt>EC2_INSTANCE</tt> |
--   <tt>EC2_HOST</tt> | <tt>EC2_AMI</tt> |
--   <tt>SYSTEMS_MANAGER_MANAGED_INSTANCE</tt>). Logical operators are
--   <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>resourceAccount</tt> - The ID of the account that owns the
--   resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   </ul>
[$sel:filters:ListUsageForLicenseConfiguration'] :: ListUsageForLicenseConfiguration -> Maybe [Filter]

-- | Token for the next set of results.
[$sel:nextToken:ListUsageForLicenseConfiguration'] :: ListUsageForLicenseConfiguration -> Maybe Text

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListUsageForLicenseConfiguration'] :: ListUsageForLicenseConfiguration -> Maybe Int

-- | Amazon Resource Name (ARN) of the license configuration.
[$sel:licenseConfigurationArn:ListUsageForLicenseConfiguration'] :: ListUsageForLicenseConfiguration -> Text

-- | Create a value of <a>ListUsageForLicenseConfiguration</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListUsageForLicenseConfiguration'</a>,
--   <a>listUsageForLicenseConfiguration_filters</a> - Filters to scope the
--   results. The following filters and logical operators are supported:
--   
--   <ul>
--   <li><tt>resourceArn</tt> - The ARN of the license configuration
--   resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>resourceType</tt> - The resource type (<tt>EC2_INSTANCE</tt> |
--   <tt>EC2_HOST</tt> | <tt>EC2_AMI</tt> |
--   <tt>SYSTEMS_MANAGER_MANAGED_INSTANCE</tt>). Logical operators are
--   <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>resourceAccount</tt> - The ID of the account that owns the
--   resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   </ul>
--   
--   <a>$sel:nextToken:ListUsageForLicenseConfiguration'</a>,
--   <a>listUsageForLicenseConfiguration_nextToken</a> - Token for the next
--   set of results.
--   
--   <a>$sel:maxResults:ListUsageForLicenseConfiguration'</a>,
--   <a>listUsageForLicenseConfiguration_maxResults</a> - Maximum number of
--   results to return in a single call.
--   
--   <a>$sel:licenseConfigurationArn:ListUsageForLicenseConfiguration'</a>,
--   <a>listUsageForLicenseConfiguration_licenseConfigurationArn</a> -
--   Amazon Resource Name (ARN) of the license configuration.
newListUsageForLicenseConfiguration :: Text -> ListUsageForLicenseConfiguration

-- | Filters to scope the results. The following filters and logical
--   operators are supported:
--   
--   <ul>
--   <li><tt>resourceArn</tt> - The ARN of the license configuration
--   resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>resourceType</tt> - The resource type (<tt>EC2_INSTANCE</tt> |
--   <tt>EC2_HOST</tt> | <tt>EC2_AMI</tt> |
--   <tt>SYSTEMS_MANAGER_MANAGED_INSTANCE</tt>). Logical operators are
--   <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>resourceAccount</tt> - The ID of the account that owns the
--   resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   </ul>
listUsageForLicenseConfiguration_filters :: Lens' ListUsageForLicenseConfiguration (Maybe [Filter])

-- | Token for the next set of results.
listUsageForLicenseConfiguration_nextToken :: Lens' ListUsageForLicenseConfiguration (Maybe Text)

-- | Maximum number of results to return in a single call.
listUsageForLicenseConfiguration_maxResults :: Lens' ListUsageForLicenseConfiguration (Maybe Int)

-- | Amazon Resource Name (ARN) of the license configuration.
listUsageForLicenseConfiguration_licenseConfigurationArn :: Lens' ListUsageForLicenseConfiguration Text

-- | <i>See:</i> <a>newListUsageForLicenseConfigurationResponse</a> smart
--   constructor.
data ListUsageForLicenseConfigurationResponse
ListUsageForLicenseConfigurationResponse' :: Maybe Text -> Maybe [LicenseConfigurationUsage] -> Int -> ListUsageForLicenseConfigurationResponse

-- | Token for the next set of results.
[$sel:nextToken:ListUsageForLicenseConfigurationResponse'] :: ListUsageForLicenseConfigurationResponse -> Maybe Text

-- | Information about the license configurations.
[$sel:licenseConfigurationUsageList:ListUsageForLicenseConfigurationResponse'] :: ListUsageForLicenseConfigurationResponse -> Maybe [LicenseConfigurationUsage]

-- | The response's http status code.
[$sel:httpStatus:ListUsageForLicenseConfigurationResponse'] :: ListUsageForLicenseConfigurationResponse -> Int

-- | Create a value of <a>ListUsageForLicenseConfigurationResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListUsageForLicenseConfiguration'</a>,
--   <a>listUsageForLicenseConfigurationResponse_nextToken</a> - Token for
--   the next set of results.
--   
--   
--   <a>$sel:licenseConfigurationUsageList:ListUsageForLicenseConfigurationResponse'</a>,
--   <a>listUsageForLicenseConfigurationResponse_licenseConfigurationUsageList</a>
--   - Information about the license configurations.
--   
--   <a>$sel:httpStatus:ListUsageForLicenseConfigurationResponse'</a>,
--   <a>listUsageForLicenseConfigurationResponse_httpStatus</a> - The
--   response's http status code.
newListUsageForLicenseConfigurationResponse :: Int -> ListUsageForLicenseConfigurationResponse

-- | Token for the next set of results.
listUsageForLicenseConfigurationResponse_nextToken :: Lens' ListUsageForLicenseConfigurationResponse (Maybe Text)

-- | Information about the license configurations.
listUsageForLicenseConfigurationResponse_licenseConfigurationUsageList :: Lens' ListUsageForLicenseConfigurationResponse (Maybe [LicenseConfigurationUsage])

-- | The response's http status code.
listUsageForLicenseConfigurationResponse_httpStatus :: Lens' ListUsageForLicenseConfigurationResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfiguration
instance GHC.Show.Show Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfiguration
instance GHC.Read.Read Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfiguration
instance GHC.Classes.Eq Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfiguration
instance GHC.Generics.Generic Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfigurationResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfigurationResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfigurationResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfigurationResponse
instance Amazonka.Pager.AWSPager Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfiguration
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListUsageForLicenseConfiguration.ListUsageForLicenseConfiguration


-- | Lists your tokens.
module Amazonka.LicenseManager.ListTokens

-- | <i>See:</i> <a>newListTokens</a> smart constructor.
data ListTokens
ListTokens' :: Maybe [Text] -> Maybe [Filter] -> Maybe Text -> Maybe Natural -> ListTokens

-- | Token IDs.
[$sel:tokenIds:ListTokens'] :: ListTokens -> Maybe [Text]

-- | Filters to scope the results. The following filter is supported:
--   
--   <ul>
--   <li><pre>LicenseArns</pre></li>
--   </ul>
[$sel:filters:ListTokens'] :: ListTokens -> Maybe [Filter]

-- | Token for the next set of results.
[$sel:nextToken:ListTokens'] :: ListTokens -> Maybe Text

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListTokens'] :: ListTokens -> Maybe Natural

-- | Create a value of <a>ListTokens</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tokenIds:ListTokens'</a>, <a>listTokens_tokenIds</a> - Token
--   IDs.
--   
--   <a>$sel:filters:ListTokens'</a>, <a>listTokens_filters</a> - Filters
--   to scope the results. The following filter is supported:
--   
--   <ul>
--   <li><pre>LicenseArns</pre></li>
--   </ul>
--   
--   <a>$sel:nextToken:ListTokens'</a>, <a>listTokens_nextToken</a> - Token
--   for the next set of results.
--   
--   <a>$sel:maxResults:ListTokens'</a>, <a>listTokens_maxResults</a> -
--   Maximum number of results to return in a single call.
newListTokens :: ListTokens

-- | Token IDs.
listTokens_tokenIds :: Lens' ListTokens (Maybe [Text])

-- | Filters to scope the results. The following filter is supported:
--   
--   <ul>
--   <li><pre>LicenseArns</pre></li>
--   </ul>
listTokens_filters :: Lens' ListTokens (Maybe [Filter])

-- | Token for the next set of results.
listTokens_nextToken :: Lens' ListTokens (Maybe Text)

-- | Maximum number of results to return in a single call.
listTokens_maxResults :: Lens' ListTokens (Maybe Natural)

-- | <i>See:</i> <a>newListTokensResponse</a> smart constructor.
data ListTokensResponse
ListTokensResponse' :: Maybe [TokenData] -> Maybe Text -> Int -> ListTokensResponse

-- | Received token details.
[$sel:tokens:ListTokensResponse'] :: ListTokensResponse -> Maybe [TokenData]

-- | Token for the next set of results.
[$sel:nextToken:ListTokensResponse'] :: ListTokensResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListTokensResponse'] :: ListTokensResponse -> Int

-- | Create a value of <a>ListTokensResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tokens:ListTokensResponse'</a>,
--   <a>listTokensResponse_tokens</a> - Received token details.
--   
--   <a>$sel:nextToken:ListTokens'</a>, <a>listTokensResponse_nextToken</a>
--   - Token for the next set of results.
--   
--   <a>$sel:httpStatus:ListTokensResponse'</a>,
--   <a>listTokensResponse_httpStatus</a> - The response's http status
--   code.
newListTokensResponse :: Int -> ListTokensResponse

-- | Received token details.
listTokensResponse_tokens :: Lens' ListTokensResponse (Maybe [TokenData])

-- | Token for the next set of results.
listTokensResponse_nextToken :: Lens' ListTokensResponse (Maybe Text)

-- | The response's http status code.
listTokensResponse_httpStatus :: Lens' ListTokensResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListTokens.ListTokens
instance GHC.Show.Show Amazonka.LicenseManager.ListTokens.ListTokens
instance GHC.Read.Read Amazonka.LicenseManager.ListTokens.ListTokens
instance GHC.Classes.Eq Amazonka.LicenseManager.ListTokens.ListTokens
instance GHC.Generics.Generic Amazonka.LicenseManager.ListTokens.ListTokensResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListTokens.ListTokensResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListTokens.ListTokensResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListTokens.ListTokensResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListTokens.ListTokens
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListTokens.ListTokensResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListTokens.ListTokens
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListTokens.ListTokens
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListTokens.ListTokens
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListTokens.ListTokens
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListTokens.ListTokens
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListTokens.ListTokens


-- | Lists the tags for the specified license configuration.
module Amazonka.LicenseManager.ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | Amazon Resource Name (ARN) of the license configuration.
[$sel:resourceArn:ListTagsForResource'] :: ListTagsForResource -> Text

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - Amazon Resource Name (ARN) of
--   the license configuration.
newListTagsForResource :: Text -> ListTagsForResource

-- | Amazon Resource Name (ARN) of the license configuration.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe [Tag] -> Int -> ListTagsForResourceResponse

-- | Information about the tags.
[$sel:tags:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe [Tag]

-- | The response's http status code.
[$sel:httpStatus:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Int

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - Information about the tags.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | Information about the tags.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListTagsForResource.ListTagsForResource
instance GHC.Show.Show Amazonka.LicenseManager.ListTagsForResource.ListTagsForResource
instance GHC.Read.Read Amazonka.LicenseManager.ListTagsForResource.ListTagsForResource
instance GHC.Classes.Eq Amazonka.LicenseManager.ListTagsForResource.ListTagsForResource
instance GHC.Generics.Generic Amazonka.LicenseManager.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListTagsForResource.ListTagsForResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListTagsForResource.ListTagsForResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListTagsForResource.ListTagsForResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListTagsForResource.ListTagsForResource


-- | Lists resources managed using Systems Manager inventory.
--   
--   This operation returns paginated results.
module Amazonka.LicenseManager.ListResourceInventory

-- | <i>See:</i> <a>newListResourceInventory</a> smart constructor.
data ListResourceInventory
ListResourceInventory' :: Maybe [InventoryFilter] -> Maybe Text -> Maybe Int -> ListResourceInventory

-- | Filters to scope the results. The following filters and logical
--   operators are supported:
--   
--   <ul>
--   <li><tt>account_id</tt> - The ID of the Amazon Web Services account
--   that owns the resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>application_name</tt> - The name of the application. Logical
--   operators are <tt>EQUALS</tt> | <tt>BEGINS_WITH</tt>.</li>
--   <li><tt>license_included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>. Possible values
--   are <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   <li><tt>platform</tt> - The platform of the resource. Logical
--   operators are <tt>EQUALS</tt> | <tt>BEGINS_WITH</tt>.</li>
--   <li><tt>resource_id</tt> - The ID of the resource. Logical operators
--   are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>tag:&lt;key&gt;</tt> - The key/value combination of a tag
--   assigned to the resource. Logical operators are <tt>EQUALS</tt>
--   (single account) or <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt> (cross
--   account).</li>
--   </ul>
[$sel:filters:ListResourceInventory'] :: ListResourceInventory -> Maybe [InventoryFilter]

-- | Token for the next set of results.
[$sel:nextToken:ListResourceInventory'] :: ListResourceInventory -> Maybe Text

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListResourceInventory'] :: ListResourceInventory -> Maybe Int

-- | Create a value of <a>ListResourceInventory</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListResourceInventory'</a>,
--   <a>listResourceInventory_filters</a> - Filters to scope the results.
--   The following filters and logical operators are supported:
--   
--   <ul>
--   <li><tt>account_id</tt> - The ID of the Amazon Web Services account
--   that owns the resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>application_name</tt> - The name of the application. Logical
--   operators are <tt>EQUALS</tt> | <tt>BEGINS_WITH</tt>.</li>
--   <li><tt>license_included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>. Possible values
--   are <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   <li><tt>platform</tt> - The platform of the resource. Logical
--   operators are <tt>EQUALS</tt> | <tt>BEGINS_WITH</tt>.</li>
--   <li><tt>resource_id</tt> - The ID of the resource. Logical operators
--   are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>tag:&lt;key&gt;</tt> - The key/value combination of a tag
--   assigned to the resource. Logical operators are <tt>EQUALS</tt>
--   (single account) or <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt> (cross
--   account).</li>
--   </ul>
--   
--   <a>$sel:nextToken:ListResourceInventory'</a>,
--   <a>listResourceInventory_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:maxResults:ListResourceInventory'</a>,
--   <a>listResourceInventory_maxResults</a> - Maximum number of results to
--   return in a single call.
newListResourceInventory :: ListResourceInventory

-- | Filters to scope the results. The following filters and logical
--   operators are supported:
--   
--   <ul>
--   <li><tt>account_id</tt> - The ID of the Amazon Web Services account
--   that owns the resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>application_name</tt> - The name of the application. Logical
--   operators are <tt>EQUALS</tt> | <tt>BEGINS_WITH</tt>.</li>
--   <li><tt>license_included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>. Possible values
--   are <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   <li><tt>platform</tt> - The platform of the resource. Logical
--   operators are <tt>EQUALS</tt> | <tt>BEGINS_WITH</tt>.</li>
--   <li><tt>resource_id</tt> - The ID of the resource. Logical operators
--   are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>tag:&lt;key&gt;</tt> - The key/value combination of a tag
--   assigned to the resource. Logical operators are <tt>EQUALS</tt>
--   (single account) or <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt> (cross
--   account).</li>
--   </ul>
listResourceInventory_filters :: Lens' ListResourceInventory (Maybe [InventoryFilter])

-- | Token for the next set of results.
listResourceInventory_nextToken :: Lens' ListResourceInventory (Maybe Text)

-- | Maximum number of results to return in a single call.
listResourceInventory_maxResults :: Lens' ListResourceInventory (Maybe Int)

-- | <i>See:</i> <a>newListResourceInventoryResponse</a> smart constructor.
data ListResourceInventoryResponse
ListResourceInventoryResponse' :: Maybe [ResourceInventory] -> Maybe Text -> Int -> ListResourceInventoryResponse

-- | Information about the resources.
[$sel:resourceInventoryList:ListResourceInventoryResponse'] :: ListResourceInventoryResponse -> Maybe [ResourceInventory]

-- | Token for the next set of results.
[$sel:nextToken:ListResourceInventoryResponse'] :: ListResourceInventoryResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListResourceInventoryResponse'] :: ListResourceInventoryResponse -> Int

-- | Create a value of <a>ListResourceInventoryResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceInventoryList:ListResourceInventoryResponse'</a>,
--   <a>listResourceInventoryResponse_resourceInventoryList</a> -
--   Information about the resources.
--   
--   <a>$sel:nextToken:ListResourceInventory'</a>,
--   <a>listResourceInventoryResponse_nextToken</a> - Token for the next
--   set of results.
--   
--   <a>$sel:httpStatus:ListResourceInventoryResponse'</a>,
--   <a>listResourceInventoryResponse_httpStatus</a> - The response's http
--   status code.
newListResourceInventoryResponse :: Int -> ListResourceInventoryResponse

-- | Information about the resources.
listResourceInventoryResponse_resourceInventoryList :: Lens' ListResourceInventoryResponse (Maybe [ResourceInventory])

-- | Token for the next set of results.
listResourceInventoryResponse_nextToken :: Lens' ListResourceInventoryResponse (Maybe Text)

-- | The response's http status code.
listResourceInventoryResponse_httpStatus :: Lens' ListResourceInventoryResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListResourceInventory.ListResourceInventory
instance GHC.Show.Show Amazonka.LicenseManager.ListResourceInventory.ListResourceInventory
instance GHC.Read.Read Amazonka.LicenseManager.ListResourceInventory.ListResourceInventory
instance GHC.Classes.Eq Amazonka.LicenseManager.ListResourceInventory.ListResourceInventory
instance GHC.Generics.Generic Amazonka.LicenseManager.ListResourceInventory.ListResourceInventoryResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListResourceInventory.ListResourceInventoryResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListResourceInventory.ListResourceInventoryResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListResourceInventory.ListResourceInventoryResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListResourceInventory.ListResourceInventory
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListResourceInventory.ListResourceInventoryResponse
instance Amazonka.Pager.AWSPager Amazonka.LicenseManager.ListResourceInventory.ListResourceInventory
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListResourceInventory.ListResourceInventory
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListResourceInventory.ListResourceInventory
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListResourceInventory.ListResourceInventory
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListResourceInventory.ListResourceInventory
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListResourceInventory.ListResourceInventory
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListResourceInventory.ListResourceInventory


-- | Lists received licenses.
module Amazonka.LicenseManager.ListReceivedLicenses

-- | <i>See:</i> <a>newListReceivedLicenses</a> smart constructor.
data ListReceivedLicenses
ListReceivedLicenses' :: Maybe [Filter] -> Maybe Text -> Maybe [Text] -> Maybe Natural -> ListReceivedLicenses

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>Status</pre></li>
--   <li><pre>Fingerprint</pre></li>
--   <li><pre>IssuerName</pre></li>
--   <li><pre>Beneficiary</pre></li>
--   </ul>
[$sel:filters:ListReceivedLicenses'] :: ListReceivedLicenses -> Maybe [Filter]

-- | Token for the next set of results.
[$sel:nextToken:ListReceivedLicenses'] :: ListReceivedLicenses -> Maybe Text

-- | Amazon Resource Names (ARNs) of the licenses.
[$sel:licenseArns:ListReceivedLicenses'] :: ListReceivedLicenses -> Maybe [Text]

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListReceivedLicenses'] :: ListReceivedLicenses -> Maybe Natural

-- | Create a value of <a>ListReceivedLicenses</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListReceivedLicenses'</a>,
--   <a>listReceivedLicenses_filters</a> - Filters to scope the results.
--   The following filters are supported:
--   
--   <ul>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>Status</pre></li>
--   <li><pre>Fingerprint</pre></li>
--   <li><pre>IssuerName</pre></li>
--   <li><pre>Beneficiary</pre></li>
--   </ul>
--   
--   <a>$sel:nextToken:ListReceivedLicenses'</a>,
--   <a>listReceivedLicenses_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:licenseArns:ListReceivedLicenses'</a>,
--   <a>listReceivedLicenses_licenseArns</a> - Amazon Resource Names (ARNs)
--   of the licenses.
--   
--   <a>$sel:maxResults:ListReceivedLicenses'</a>,
--   <a>listReceivedLicenses_maxResults</a> - Maximum number of results to
--   return in a single call.
newListReceivedLicenses :: ListReceivedLicenses

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>Status</pre></li>
--   <li><pre>Fingerprint</pre></li>
--   <li><pre>IssuerName</pre></li>
--   <li><pre>Beneficiary</pre></li>
--   </ul>
listReceivedLicenses_filters :: Lens' ListReceivedLicenses (Maybe [Filter])

-- | Token for the next set of results.
listReceivedLicenses_nextToken :: Lens' ListReceivedLicenses (Maybe Text)

-- | Amazon Resource Names (ARNs) of the licenses.
listReceivedLicenses_licenseArns :: Lens' ListReceivedLicenses (Maybe [Text])

-- | Maximum number of results to return in a single call.
listReceivedLicenses_maxResults :: Lens' ListReceivedLicenses (Maybe Natural)

-- | <i>See:</i> <a>newListReceivedLicensesResponse</a> smart constructor.
data ListReceivedLicensesResponse
ListReceivedLicensesResponse' :: Maybe Text -> Maybe [GrantedLicense] -> Int -> ListReceivedLicensesResponse

-- | Token for the next set of results.
[$sel:nextToken:ListReceivedLicensesResponse'] :: ListReceivedLicensesResponse -> Maybe Text

-- | Received license details.
[$sel:licenses:ListReceivedLicensesResponse'] :: ListReceivedLicensesResponse -> Maybe [GrantedLicense]

-- | The response's http status code.
[$sel:httpStatus:ListReceivedLicensesResponse'] :: ListReceivedLicensesResponse -> Int

-- | Create a value of <a>ListReceivedLicensesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListReceivedLicenses'</a>,
--   <a>listReceivedLicensesResponse_nextToken</a> - Token for the next set
--   of results.
--   
--   <a>$sel:licenses:ListReceivedLicensesResponse'</a>,
--   <a>listReceivedLicensesResponse_licenses</a> - Received license
--   details.
--   
--   <a>$sel:httpStatus:ListReceivedLicensesResponse'</a>,
--   <a>listReceivedLicensesResponse_httpStatus</a> - The response's http
--   status code.
newListReceivedLicensesResponse :: Int -> ListReceivedLicensesResponse

-- | Token for the next set of results.
listReceivedLicensesResponse_nextToken :: Lens' ListReceivedLicensesResponse (Maybe Text)

-- | Received license details.
listReceivedLicensesResponse_licenses :: Lens' ListReceivedLicensesResponse (Maybe [GrantedLicense])

-- | The response's http status code.
listReceivedLicensesResponse_httpStatus :: Lens' ListReceivedLicensesResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicenses
instance GHC.Show.Show Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicenses
instance GHC.Read.Read Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicenses
instance GHC.Classes.Eq Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicenses
instance GHC.Generics.Generic Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicensesResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicensesResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicensesResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicensesResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicenses
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicensesResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicenses
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicenses
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicenses
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicenses
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicenses
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListReceivedLicenses.ListReceivedLicenses


-- | Lists grants that are received but not accepted.
module Amazonka.LicenseManager.ListReceivedGrants

-- | <i>See:</i> <a>newListReceivedGrants</a> smart constructor.
data ListReceivedGrants
ListReceivedGrants' :: Maybe [Filter] -> Maybe Text -> Maybe [Text] -> Maybe Natural -> ListReceivedGrants

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>LicenseIssuerName</pre></li>
--   <li><pre>LicenseArn</pre></li>
--   <li><pre>GrantStatus</pre></li>
--   <li><pre>GranterAccountId</pre></li>
--   </ul>
[$sel:filters:ListReceivedGrants'] :: ListReceivedGrants -> Maybe [Filter]

-- | Token for the next set of results.
[$sel:nextToken:ListReceivedGrants'] :: ListReceivedGrants -> Maybe Text

-- | Amazon Resource Names (ARNs) of the grants.
[$sel:grantArns:ListReceivedGrants'] :: ListReceivedGrants -> Maybe [Text]

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListReceivedGrants'] :: ListReceivedGrants -> Maybe Natural

-- | Create a value of <a>ListReceivedGrants</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListReceivedGrants'</a>,
--   <a>listReceivedGrants_filters</a> - Filters to scope the results. The
--   following filters are supported:
--   
--   <ul>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>LicenseIssuerName</pre></li>
--   <li><pre>LicenseArn</pre></li>
--   <li><pre>GrantStatus</pre></li>
--   <li><pre>GranterAccountId</pre></li>
--   </ul>
--   
--   <a>$sel:nextToken:ListReceivedGrants'</a>,
--   <a>listReceivedGrants_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:grantArns:ListReceivedGrants'</a>,
--   <a>listReceivedGrants_grantArns</a> - Amazon Resource Names (ARNs) of
--   the grants.
--   
--   <a>$sel:maxResults:ListReceivedGrants'</a>,
--   <a>listReceivedGrants_maxResults</a> - Maximum number of results to
--   return in a single call.
newListReceivedGrants :: ListReceivedGrants

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>LicenseIssuerName</pre></li>
--   <li><pre>LicenseArn</pre></li>
--   <li><pre>GrantStatus</pre></li>
--   <li><pre>GranterAccountId</pre></li>
--   </ul>
listReceivedGrants_filters :: Lens' ListReceivedGrants (Maybe [Filter])

-- | Token for the next set of results.
listReceivedGrants_nextToken :: Lens' ListReceivedGrants (Maybe Text)

-- | Amazon Resource Names (ARNs) of the grants.
listReceivedGrants_grantArns :: Lens' ListReceivedGrants (Maybe [Text])

-- | Maximum number of results to return in a single call.
listReceivedGrants_maxResults :: Lens' ListReceivedGrants (Maybe Natural)

-- | <i>See:</i> <a>newListReceivedGrantsResponse</a> smart constructor.
data ListReceivedGrantsResponse
ListReceivedGrantsResponse' :: Maybe [Grant] -> Maybe Text -> Int -> ListReceivedGrantsResponse

-- | Received grant details.
[$sel:grants:ListReceivedGrantsResponse'] :: ListReceivedGrantsResponse -> Maybe [Grant]

-- | Token for the next set of results.
[$sel:nextToken:ListReceivedGrantsResponse'] :: ListReceivedGrantsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListReceivedGrantsResponse'] :: ListReceivedGrantsResponse -> Int

-- | Create a value of <a>ListReceivedGrantsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grants:ListReceivedGrantsResponse'</a>,
--   <a>listReceivedGrantsResponse_grants</a> - Received grant details.
--   
--   <a>$sel:nextToken:ListReceivedGrants'</a>,
--   <a>listReceivedGrantsResponse_nextToken</a> - Token for the next set
--   of results.
--   
--   <a>$sel:httpStatus:ListReceivedGrantsResponse'</a>,
--   <a>listReceivedGrantsResponse_httpStatus</a> - The response's http
--   status code.
newListReceivedGrantsResponse :: Int -> ListReceivedGrantsResponse

-- | Received grant details.
listReceivedGrantsResponse_grants :: Lens' ListReceivedGrantsResponse (Maybe [Grant])

-- | Token for the next set of results.
listReceivedGrantsResponse_nextToken :: Lens' ListReceivedGrantsResponse (Maybe Text)

-- | The response's http status code.
listReceivedGrantsResponse_httpStatus :: Lens' ListReceivedGrantsResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrants
instance GHC.Show.Show Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrants
instance GHC.Read.Read Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrants
instance GHC.Classes.Eq Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrants
instance GHC.Generics.Generic Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrantsResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrantsResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrantsResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrantsResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrants
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrantsResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrants
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrants
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrants
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrants
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrants
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListReceivedGrants.ListReceivedGrants


-- | Lists the licenses for your account.
module Amazonka.LicenseManager.ListLicenses

-- | <i>See:</i> <a>newListLicenses</a> smart constructor.
data ListLicenses
ListLicenses' :: Maybe [Filter] -> Maybe Text -> Maybe [Text] -> Maybe Natural -> ListLicenses

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>Beneficiary</pre></li>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>Fingerprint</pre></li>
--   <li><pre>Status</pre></li>
--   </ul>
[$sel:filters:ListLicenses'] :: ListLicenses -> Maybe [Filter]

-- | Token for the next set of results.
[$sel:nextToken:ListLicenses'] :: ListLicenses -> Maybe Text

-- | Amazon Resource Names (ARNs) of the licenses.
[$sel:licenseArns:ListLicenses'] :: ListLicenses -> Maybe [Text]

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListLicenses'] :: ListLicenses -> Maybe Natural

-- | Create a value of <a>ListLicenses</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListLicenses'</a>, <a>listLicenses_filters</a> -
--   Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>Beneficiary</pre></li>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>Fingerprint</pre></li>
--   <li><pre>Status</pre></li>
--   </ul>
--   
--   <a>$sel:nextToken:ListLicenses'</a>, <a>listLicenses_nextToken</a> -
--   Token for the next set of results.
--   
--   <a>$sel:licenseArns:ListLicenses'</a>, <a>listLicenses_licenseArns</a>
--   - Amazon Resource Names (ARNs) of the licenses.
--   
--   <a>$sel:maxResults:ListLicenses'</a>, <a>listLicenses_maxResults</a> -
--   Maximum number of results to return in a single call.
newListLicenses :: ListLicenses

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>Beneficiary</pre></li>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>Fingerprint</pre></li>
--   <li><pre>Status</pre></li>
--   </ul>
listLicenses_filters :: Lens' ListLicenses (Maybe [Filter])

-- | Token for the next set of results.
listLicenses_nextToken :: Lens' ListLicenses (Maybe Text)

-- | Amazon Resource Names (ARNs) of the licenses.
listLicenses_licenseArns :: Lens' ListLicenses (Maybe [Text])

-- | Maximum number of results to return in a single call.
listLicenses_maxResults :: Lens' ListLicenses (Maybe Natural)

-- | <i>See:</i> <a>newListLicensesResponse</a> smart constructor.
data ListLicensesResponse
ListLicensesResponse' :: Maybe Text -> Maybe [License] -> Int -> ListLicensesResponse

-- | Token for the next set of results.
[$sel:nextToken:ListLicensesResponse'] :: ListLicensesResponse -> Maybe Text

-- | License details.
[$sel:licenses:ListLicensesResponse'] :: ListLicensesResponse -> Maybe [License]

-- | The response's http status code.
[$sel:httpStatus:ListLicensesResponse'] :: ListLicensesResponse -> Int

-- | Create a value of <a>ListLicensesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListLicenses'</a>,
--   <a>listLicensesResponse_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:licenses:ListLicensesResponse'</a>,
--   <a>listLicensesResponse_licenses</a> - License details.
--   
--   <a>$sel:httpStatus:ListLicensesResponse'</a>,
--   <a>listLicensesResponse_httpStatus</a> - The response's http status
--   code.
newListLicensesResponse :: Int -> ListLicensesResponse

-- | Token for the next set of results.
listLicensesResponse_nextToken :: Lens' ListLicensesResponse (Maybe Text)

-- | License details.
listLicensesResponse_licenses :: Lens' ListLicensesResponse (Maybe [License])

-- | The response's http status code.
listLicensesResponse_httpStatus :: Lens' ListLicensesResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListLicenses.ListLicenses
instance GHC.Show.Show Amazonka.LicenseManager.ListLicenses.ListLicenses
instance GHC.Read.Read Amazonka.LicenseManager.ListLicenses.ListLicenses
instance GHC.Classes.Eq Amazonka.LicenseManager.ListLicenses.ListLicenses
instance GHC.Generics.Generic Amazonka.LicenseManager.ListLicenses.ListLicensesResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListLicenses.ListLicensesResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListLicenses.ListLicensesResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListLicenses.ListLicensesResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListLicenses.ListLicenses
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListLicenses.ListLicensesResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListLicenses.ListLicenses
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListLicenses.ListLicenses
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListLicenses.ListLicenses
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListLicenses.ListLicenses
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListLicenses.ListLicenses
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListLicenses.ListLicenses


-- | Lists all versions of the specified license.
module Amazonka.LicenseManager.ListLicenseVersions

-- | <i>See:</i> <a>newListLicenseVersions</a> smart constructor.
data ListLicenseVersions
ListLicenseVersions' :: Maybe Text -> Maybe Natural -> Text -> ListLicenseVersions

-- | Token for the next set of results.
[$sel:nextToken:ListLicenseVersions'] :: ListLicenseVersions -> Maybe Text

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListLicenseVersions'] :: ListLicenseVersions -> Maybe Natural

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:ListLicenseVersions'] :: ListLicenseVersions -> Text

-- | Create a value of <a>ListLicenseVersions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListLicenseVersions'</a>,
--   <a>listLicenseVersions_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:maxResults:ListLicenseVersions'</a>,
--   <a>listLicenseVersions_maxResults</a> - Maximum number of results to
--   return in a single call.
--   
--   <a>$sel:licenseArn:ListLicenseVersions'</a>,
--   <a>listLicenseVersions_licenseArn</a> - Amazon Resource Name (ARN) of
--   the license.
newListLicenseVersions :: Text -> ListLicenseVersions

-- | Token for the next set of results.
listLicenseVersions_nextToken :: Lens' ListLicenseVersions (Maybe Text)

-- | Maximum number of results to return in a single call.
listLicenseVersions_maxResults :: Lens' ListLicenseVersions (Maybe Natural)

-- | Amazon Resource Name (ARN) of the license.
listLicenseVersions_licenseArn :: Lens' ListLicenseVersions Text

-- | <i>See:</i> <a>newListLicenseVersionsResponse</a> smart constructor.
data ListLicenseVersionsResponse
ListLicenseVersionsResponse' :: Maybe Text -> Maybe [License] -> Int -> ListLicenseVersionsResponse

-- | Token for the next set of results.
[$sel:nextToken:ListLicenseVersionsResponse'] :: ListLicenseVersionsResponse -> Maybe Text

-- | License details.
[$sel:licenses:ListLicenseVersionsResponse'] :: ListLicenseVersionsResponse -> Maybe [License]

-- | The response's http status code.
[$sel:httpStatus:ListLicenseVersionsResponse'] :: ListLicenseVersionsResponse -> Int

-- | Create a value of <a>ListLicenseVersionsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListLicenseVersions'</a>,
--   <a>listLicenseVersionsResponse_nextToken</a> - Token for the next set
--   of results.
--   
--   <a>$sel:licenses:ListLicenseVersionsResponse'</a>,
--   <a>listLicenseVersionsResponse_licenses</a> - License details.
--   
--   <a>$sel:httpStatus:ListLicenseVersionsResponse'</a>,
--   <a>listLicenseVersionsResponse_httpStatus</a> - The response's http
--   status code.
newListLicenseVersionsResponse :: Int -> ListLicenseVersionsResponse

-- | Token for the next set of results.
listLicenseVersionsResponse_nextToken :: Lens' ListLicenseVersionsResponse (Maybe Text)

-- | License details.
listLicenseVersionsResponse_licenses :: Lens' ListLicenseVersionsResponse (Maybe [License])

-- | The response's http status code.
listLicenseVersionsResponse_httpStatus :: Lens' ListLicenseVersionsResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersions
instance GHC.Show.Show Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersions
instance GHC.Read.Read Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersions
instance GHC.Classes.Eq Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersions
instance GHC.Generics.Generic Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersionsResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersionsResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersionsResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersionsResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersions
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersionsResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersions
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersions
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersions
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersions
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersions
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListLicenseVersions.ListLicenseVersions


-- | Describes the license configurations for the specified resource.
--   
--   This operation returns paginated results.
module Amazonka.LicenseManager.ListLicenseSpecificationsForResource

-- | <i>See:</i> <a>newListLicenseSpecificationsForResource</a> smart
--   constructor.
data ListLicenseSpecificationsForResource
ListLicenseSpecificationsForResource' :: Maybe Text -> Maybe Int -> Text -> ListLicenseSpecificationsForResource

-- | Token for the next set of results.
[$sel:nextToken:ListLicenseSpecificationsForResource'] :: ListLicenseSpecificationsForResource -> Maybe Text

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListLicenseSpecificationsForResource'] :: ListLicenseSpecificationsForResource -> Maybe Int

-- | Amazon Resource Name (ARN) of a resource that has an associated
--   license configuration.
[$sel:resourceArn:ListLicenseSpecificationsForResource'] :: ListLicenseSpecificationsForResource -> Text

-- | Create a value of <a>ListLicenseSpecificationsForResource</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListLicenseSpecificationsForResource'</a>,
--   <a>listLicenseSpecificationsForResource_nextToken</a> - Token for the
--   next set of results.
--   
--   <a>$sel:maxResults:ListLicenseSpecificationsForResource'</a>,
--   <a>listLicenseSpecificationsForResource_maxResults</a> - Maximum
--   number of results to return in a single call.
--   
--   <a>$sel:resourceArn:ListLicenseSpecificationsForResource'</a>,
--   <a>listLicenseSpecificationsForResource_resourceArn</a> - Amazon
--   Resource Name (ARN) of a resource that has an associated license
--   configuration.
newListLicenseSpecificationsForResource :: Text -> ListLicenseSpecificationsForResource

-- | Token for the next set of results.
listLicenseSpecificationsForResource_nextToken :: Lens' ListLicenseSpecificationsForResource (Maybe Text)

-- | Maximum number of results to return in a single call.
listLicenseSpecificationsForResource_maxResults :: Lens' ListLicenseSpecificationsForResource (Maybe Int)

-- | Amazon Resource Name (ARN) of a resource that has an associated
--   license configuration.
listLicenseSpecificationsForResource_resourceArn :: Lens' ListLicenseSpecificationsForResource Text

-- | <i>See:</i> <a>newListLicenseSpecificationsForResourceResponse</a>
--   smart constructor.
data ListLicenseSpecificationsForResourceResponse
ListLicenseSpecificationsForResourceResponse' :: Maybe [LicenseSpecification] -> Maybe Text -> Int -> ListLicenseSpecificationsForResourceResponse

-- | License configurations associated with a resource.
[$sel:licenseSpecifications:ListLicenseSpecificationsForResourceResponse'] :: ListLicenseSpecificationsForResourceResponse -> Maybe [LicenseSpecification]

-- | Token for the next set of results.
[$sel:nextToken:ListLicenseSpecificationsForResourceResponse'] :: ListLicenseSpecificationsForResourceResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListLicenseSpecificationsForResourceResponse'] :: ListLicenseSpecificationsForResourceResponse -> Int

-- | Create a value of <a>ListLicenseSpecificationsForResourceResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseSpecifications:ListLicenseSpecificationsForResourceResponse'</a>,
--   <a>listLicenseSpecificationsForResourceResponse_licenseSpecifications</a>
--   - License configurations associated with a resource.
--   
--   <a>$sel:nextToken:ListLicenseSpecificationsForResource'</a>,
--   <a>listLicenseSpecificationsForResourceResponse_nextToken</a> - Token
--   for the next set of results.
--   
--   <a>$sel:httpStatus:ListLicenseSpecificationsForResourceResponse'</a>,
--   <a>listLicenseSpecificationsForResourceResponse_httpStatus</a> - The
--   response's http status code.
newListLicenseSpecificationsForResourceResponse :: Int -> ListLicenseSpecificationsForResourceResponse

-- | License configurations associated with a resource.
listLicenseSpecificationsForResourceResponse_licenseSpecifications :: Lens' ListLicenseSpecificationsForResourceResponse (Maybe [LicenseSpecification])

-- | Token for the next set of results.
listLicenseSpecificationsForResourceResponse_nextToken :: Lens' ListLicenseSpecificationsForResourceResponse (Maybe Text)

-- | The response's http status code.
listLicenseSpecificationsForResourceResponse_httpStatus :: Lens' ListLicenseSpecificationsForResourceResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResource
instance GHC.Show.Show Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResource
instance GHC.Read.Read Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResource
instance GHC.Classes.Eq Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResource
instance GHC.Generics.Generic Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResourceResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResourceResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResourceResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResource
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResourceResponse
instance Amazonka.Pager.AWSPager Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResource
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResource
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResource
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResource
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListLicenseSpecificationsForResource.ListLicenseSpecificationsForResource


-- | Lists the report generators for your account.
module Amazonka.LicenseManager.ListLicenseManagerReportGenerators

-- | <i>See:</i> <a>newListLicenseManagerReportGenerators</a> smart
--   constructor.
data ListLicenseManagerReportGenerators
ListLicenseManagerReportGenerators' :: Maybe [Filter] -> Maybe Text -> Maybe Natural -> ListLicenseManagerReportGenerators

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>LicenseConfigurationArn</pre></li>
--   </ul>
[$sel:filters:ListLicenseManagerReportGenerators'] :: ListLicenseManagerReportGenerators -> Maybe [Filter]

-- | Token for the next set of results.
[$sel:nextToken:ListLicenseManagerReportGenerators'] :: ListLicenseManagerReportGenerators -> Maybe Text

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListLicenseManagerReportGenerators'] :: ListLicenseManagerReportGenerators -> Maybe Natural

-- | Create a value of <a>ListLicenseManagerReportGenerators</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListLicenseManagerReportGenerators'</a>,
--   <a>listLicenseManagerReportGenerators_filters</a> - Filters to scope
--   the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>LicenseConfigurationArn</pre></li>
--   </ul>
--   
--   <a>$sel:nextToken:ListLicenseManagerReportGenerators'</a>,
--   <a>listLicenseManagerReportGenerators_nextToken</a> - Token for the
--   next set of results.
--   
--   <a>$sel:maxResults:ListLicenseManagerReportGenerators'</a>,
--   <a>listLicenseManagerReportGenerators_maxResults</a> - Maximum number
--   of results to return in a single call.
newListLicenseManagerReportGenerators :: ListLicenseManagerReportGenerators

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>LicenseConfigurationArn</pre></li>
--   </ul>
listLicenseManagerReportGenerators_filters :: Lens' ListLicenseManagerReportGenerators (Maybe [Filter])

-- | Token for the next set of results.
listLicenseManagerReportGenerators_nextToken :: Lens' ListLicenseManagerReportGenerators (Maybe Text)

-- | Maximum number of results to return in a single call.
listLicenseManagerReportGenerators_maxResults :: Lens' ListLicenseManagerReportGenerators (Maybe Natural)

-- | <i>See:</i> <a>newListLicenseManagerReportGeneratorsResponse</a> smart
--   constructor.
data ListLicenseManagerReportGeneratorsResponse
ListLicenseManagerReportGeneratorsResponse' :: Maybe Text -> Maybe [ReportGenerator] -> Int -> ListLicenseManagerReportGeneratorsResponse

-- | Token for the next set of results.
[$sel:nextToken:ListLicenseManagerReportGeneratorsResponse'] :: ListLicenseManagerReportGeneratorsResponse -> Maybe Text

-- | A report generator that creates periodic reports about your license
--   configurations.
[$sel:reportGenerators:ListLicenseManagerReportGeneratorsResponse'] :: ListLicenseManagerReportGeneratorsResponse -> Maybe [ReportGenerator]

-- | The response's http status code.
[$sel:httpStatus:ListLicenseManagerReportGeneratorsResponse'] :: ListLicenseManagerReportGeneratorsResponse -> Int

-- | Create a value of <a>ListLicenseManagerReportGeneratorsResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListLicenseManagerReportGenerators'</a>,
--   <a>listLicenseManagerReportGeneratorsResponse_nextToken</a> - Token
--   for the next set of results.
--   
--   
--   <a>$sel:reportGenerators:ListLicenseManagerReportGeneratorsResponse'</a>,
--   <a>listLicenseManagerReportGeneratorsResponse_reportGenerators</a> - A
--   report generator that creates periodic reports about your license
--   configurations.
--   
--   <a>$sel:httpStatus:ListLicenseManagerReportGeneratorsResponse'</a>,
--   <a>listLicenseManagerReportGeneratorsResponse_httpStatus</a> - The
--   response's http status code.
newListLicenseManagerReportGeneratorsResponse :: Int -> ListLicenseManagerReportGeneratorsResponse

-- | Token for the next set of results.
listLicenseManagerReportGeneratorsResponse_nextToken :: Lens' ListLicenseManagerReportGeneratorsResponse (Maybe Text)

-- | A report generator that creates periodic reports about your license
--   configurations.
listLicenseManagerReportGeneratorsResponse_reportGenerators :: Lens' ListLicenseManagerReportGeneratorsResponse (Maybe [ReportGenerator])

-- | The response's http status code.
listLicenseManagerReportGeneratorsResponse_httpStatus :: Lens' ListLicenseManagerReportGeneratorsResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGenerators
instance GHC.Show.Show Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGenerators
instance GHC.Read.Read Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGenerators
instance GHC.Classes.Eq Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGenerators
instance GHC.Generics.Generic Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGeneratorsResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGeneratorsResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGeneratorsResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGeneratorsResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGenerators
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGeneratorsResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGenerators
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGenerators
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGenerators
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGenerators
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGenerators
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListLicenseManagerReportGenerators.ListLicenseManagerReportGenerators


-- | Lists the license type conversion tasks for your account.
module Amazonka.LicenseManager.ListLicenseConversionTasks

-- | <i>See:</i> <a>newListLicenseConversionTasks</a> smart constructor.
data ListLicenseConversionTasks
ListLicenseConversionTasks' :: Maybe [Filter] -> Maybe Text -> Maybe Int -> ListLicenseConversionTasks

-- | Filters to scope the results. Valid filters are <tt>ResourceArns</tt>
--   and <tt>Status</tt>.
[$sel:filters:ListLicenseConversionTasks'] :: ListLicenseConversionTasks -> Maybe [Filter]

-- | Token for the next set of results.
[$sel:nextToken:ListLicenseConversionTasks'] :: ListLicenseConversionTasks -> Maybe Text

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListLicenseConversionTasks'] :: ListLicenseConversionTasks -> Maybe Int

-- | Create a value of <a>ListLicenseConversionTasks</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListLicenseConversionTasks'</a>,
--   <a>listLicenseConversionTasks_filters</a> - Filters to scope the
--   results. Valid filters are <tt>ResourceArns</tt> and <tt>Status</tt>.
--   
--   <a>$sel:nextToken:ListLicenseConversionTasks'</a>,
--   <a>listLicenseConversionTasks_nextToken</a> - Token for the next set
--   of results.
--   
--   <a>$sel:maxResults:ListLicenseConversionTasks'</a>,
--   <a>listLicenseConversionTasks_maxResults</a> - Maximum number of
--   results to return in a single call.
newListLicenseConversionTasks :: ListLicenseConversionTasks

-- | Filters to scope the results. Valid filters are <tt>ResourceArns</tt>
--   and <tt>Status</tt>.
listLicenseConversionTasks_filters :: Lens' ListLicenseConversionTasks (Maybe [Filter])

-- | Token for the next set of results.
listLicenseConversionTasks_nextToken :: Lens' ListLicenseConversionTasks (Maybe Text)

-- | Maximum number of results to return in a single call.
listLicenseConversionTasks_maxResults :: Lens' ListLicenseConversionTasks (Maybe Int)

-- | <i>See:</i> <a>newListLicenseConversionTasksResponse</a> smart
--   constructor.
data ListLicenseConversionTasksResponse
ListLicenseConversionTasksResponse' :: Maybe [LicenseConversionTask] -> Maybe Text -> Int -> ListLicenseConversionTasksResponse

-- | Information about the license configuration tasks for your account.
[$sel:licenseConversionTasks:ListLicenseConversionTasksResponse'] :: ListLicenseConversionTasksResponse -> Maybe [LicenseConversionTask]

-- | Token for the next set of results.
[$sel:nextToken:ListLicenseConversionTasksResponse'] :: ListLicenseConversionTasksResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListLicenseConversionTasksResponse'] :: ListLicenseConversionTasksResponse -> Int

-- | Create a value of <a>ListLicenseConversionTasksResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseConversionTasks:ListLicenseConversionTasksResponse'</a>,
--   <a>listLicenseConversionTasksResponse_licenseConversionTasks</a> -
--   Information about the license configuration tasks for your account.
--   
--   <a>$sel:nextToken:ListLicenseConversionTasks'</a>,
--   <a>listLicenseConversionTasksResponse_nextToken</a> - Token for the
--   next set of results.
--   
--   <a>$sel:httpStatus:ListLicenseConversionTasksResponse'</a>,
--   <a>listLicenseConversionTasksResponse_httpStatus</a> - The response's
--   http status code.
newListLicenseConversionTasksResponse :: Int -> ListLicenseConversionTasksResponse

-- | Information about the license configuration tasks for your account.
listLicenseConversionTasksResponse_licenseConversionTasks :: Lens' ListLicenseConversionTasksResponse (Maybe [LicenseConversionTask])

-- | Token for the next set of results.
listLicenseConversionTasksResponse_nextToken :: Lens' ListLicenseConversionTasksResponse (Maybe Text)

-- | The response's http status code.
listLicenseConversionTasksResponse_httpStatus :: Lens' ListLicenseConversionTasksResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasks
instance GHC.Show.Show Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasks
instance GHC.Read.Read Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasks
instance GHC.Classes.Eq Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasks
instance GHC.Generics.Generic Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasksResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasksResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasksResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasksResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasks
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasksResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasks
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasks
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasks
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasks
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasks
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListLicenseConversionTasks.ListLicenseConversionTasks


-- | Lists the license configurations for your account.
--   
--   This operation returns paginated results.
module Amazonka.LicenseManager.ListLicenseConfigurations

-- | <i>See:</i> <a>newListLicenseConfigurations</a> smart constructor.
data ListLicenseConfigurations
ListLicenseConfigurations' :: Maybe [Filter] -> Maybe Text -> Maybe [Text] -> Maybe Int -> ListLicenseConfigurations

-- | Filters to scope the results. The following filters and logical
--   operators are supported:
--   
--   <ul>
--   <li><tt>licenseCountingType</tt> - The dimension for which licenses
--   are counted. Possible values are <tt>vCPU</tt> | <tt>Instance</tt> |
--   <tt>Core</tt> | <tt>Socket</tt>. Logical operators are <tt>EQUALS</tt>
--   | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>enforceLicenseCount</tt> - A Boolean value that indicates
--   whether hard license enforcement is used. Logical operators are
--   <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>usagelimitExceeded</tt> - A Boolean value that indicates
--   whether the available licenses have been exceeded. Logical operators
--   are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   </ul>
[$sel:filters:ListLicenseConfigurations'] :: ListLicenseConfigurations -> Maybe [Filter]

-- | Token for the next set of results.
[$sel:nextToken:ListLicenseConfigurations'] :: ListLicenseConfigurations -> Maybe Text

-- | Amazon Resource Names (ARN) of the license configurations.
[$sel:licenseConfigurationArns:ListLicenseConfigurations'] :: ListLicenseConfigurations -> Maybe [Text]

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListLicenseConfigurations'] :: ListLicenseConfigurations -> Maybe Int

-- | Create a value of <a>ListLicenseConfigurations</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListLicenseConfigurations'</a>,
--   <a>listLicenseConfigurations_filters</a> - Filters to scope the
--   results. The following filters and logical operators are supported:
--   
--   <ul>
--   <li><tt>licenseCountingType</tt> - The dimension for which licenses
--   are counted. Possible values are <tt>vCPU</tt> | <tt>Instance</tt> |
--   <tt>Core</tt> | <tt>Socket</tt>. Logical operators are <tt>EQUALS</tt>
--   | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>enforceLicenseCount</tt> - A Boolean value that indicates
--   whether hard license enforcement is used. Logical operators are
--   <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>usagelimitExceeded</tt> - A Boolean value that indicates
--   whether the available licenses have been exceeded. Logical operators
--   are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   </ul>
--   
--   <a>$sel:nextToken:ListLicenseConfigurations'</a>,
--   <a>listLicenseConfigurations_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:licenseConfigurationArns:ListLicenseConfigurations'</a>,
--   <a>listLicenseConfigurations_licenseConfigurationArns</a> - Amazon
--   Resource Names (ARN) of the license configurations.
--   
--   <a>$sel:maxResults:ListLicenseConfigurations'</a>,
--   <a>listLicenseConfigurations_maxResults</a> - Maximum number of
--   results to return in a single call.
newListLicenseConfigurations :: ListLicenseConfigurations

-- | Filters to scope the results. The following filters and logical
--   operators are supported:
--   
--   <ul>
--   <li><tt>licenseCountingType</tt> - The dimension for which licenses
--   are counted. Possible values are <tt>vCPU</tt> | <tt>Instance</tt> |
--   <tt>Core</tt> | <tt>Socket</tt>. Logical operators are <tt>EQUALS</tt>
--   | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>enforceLicenseCount</tt> - A Boolean value that indicates
--   whether hard license enforcement is used. Logical operators are
--   <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>usagelimitExceeded</tt> - A Boolean value that indicates
--   whether the available licenses have been exceeded. Logical operators
--   are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   </ul>
listLicenseConfigurations_filters :: Lens' ListLicenseConfigurations (Maybe [Filter])

-- | Token for the next set of results.
listLicenseConfigurations_nextToken :: Lens' ListLicenseConfigurations (Maybe Text)

-- | Amazon Resource Names (ARN) of the license configurations.
listLicenseConfigurations_licenseConfigurationArns :: Lens' ListLicenseConfigurations (Maybe [Text])

-- | Maximum number of results to return in a single call.
listLicenseConfigurations_maxResults :: Lens' ListLicenseConfigurations (Maybe Int)

-- | <i>See:</i> <a>newListLicenseConfigurationsResponse</a> smart
--   constructor.
data ListLicenseConfigurationsResponse
ListLicenseConfigurationsResponse' :: Maybe Text -> Maybe [LicenseConfiguration] -> Int -> ListLicenseConfigurationsResponse

-- | Token for the next set of results.
[$sel:nextToken:ListLicenseConfigurationsResponse'] :: ListLicenseConfigurationsResponse -> Maybe Text

-- | Information about the license configurations.
[$sel:licenseConfigurations:ListLicenseConfigurationsResponse'] :: ListLicenseConfigurationsResponse -> Maybe [LicenseConfiguration]

-- | The response's http status code.
[$sel:httpStatus:ListLicenseConfigurationsResponse'] :: ListLicenseConfigurationsResponse -> Int

-- | Create a value of <a>ListLicenseConfigurationsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListLicenseConfigurations'</a>,
--   <a>listLicenseConfigurationsResponse_nextToken</a> - Token for the
--   next set of results.
--   
--   <a>$sel:licenseConfigurations:ListLicenseConfigurationsResponse'</a>,
--   <a>listLicenseConfigurationsResponse_licenseConfigurations</a> -
--   Information about the license configurations.
--   
--   <a>$sel:httpStatus:ListLicenseConfigurationsResponse'</a>,
--   <a>listLicenseConfigurationsResponse_httpStatus</a> - The response's
--   http status code.
newListLicenseConfigurationsResponse :: Int -> ListLicenseConfigurationsResponse

-- | Token for the next set of results.
listLicenseConfigurationsResponse_nextToken :: Lens' ListLicenseConfigurationsResponse (Maybe Text)

-- | Information about the license configurations.
listLicenseConfigurationsResponse_licenseConfigurations :: Lens' ListLicenseConfigurationsResponse (Maybe [LicenseConfiguration])

-- | The response's http status code.
listLicenseConfigurationsResponse_httpStatus :: Lens' ListLicenseConfigurationsResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurations
instance GHC.Show.Show Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurations
instance GHC.Read.Read Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurations
instance GHC.Classes.Eq Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurations
instance GHC.Generics.Generic Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurationsResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurationsResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurationsResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurationsResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurations
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurationsResponse
instance Amazonka.Pager.AWSPager Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurations
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurations
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurations
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurations
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurations
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurations
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListLicenseConfigurations.ListLicenseConfigurations


-- | Lists the license configuration operations that failed.
module Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations

-- | <i>See:</i> <a>newListFailuresForLicenseConfigurationOperations</a>
--   smart constructor.
data ListFailuresForLicenseConfigurationOperations
ListFailuresForLicenseConfigurationOperations' :: Maybe Text -> Maybe Int -> Text -> ListFailuresForLicenseConfigurationOperations

-- | Token for the next set of results.
[$sel:nextToken:ListFailuresForLicenseConfigurationOperations'] :: ListFailuresForLicenseConfigurationOperations -> Maybe Text

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListFailuresForLicenseConfigurationOperations'] :: ListFailuresForLicenseConfigurationOperations -> Maybe Int

-- | Amazon Resource Name of the license configuration.
[$sel:licenseConfigurationArn:ListFailuresForLicenseConfigurationOperations'] :: ListFailuresForLicenseConfigurationOperations -> Text

-- | Create a value of <a>ListFailuresForLicenseConfigurationOperations</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFailuresForLicenseConfigurationOperations'</a>,
--   <a>listFailuresForLicenseConfigurationOperations_nextToken</a> - Token
--   for the next set of results.
--   
--   <a>$sel:maxResults:ListFailuresForLicenseConfigurationOperations'</a>,
--   <a>listFailuresForLicenseConfigurationOperations_maxResults</a> -
--   Maximum number of results to return in a single call.
--   
--   
--   <a>$sel:licenseConfigurationArn:ListFailuresForLicenseConfigurationOperations'</a>,
--   <a>listFailuresForLicenseConfigurationOperations_licenseConfigurationArn</a>
--   - Amazon Resource Name of the license configuration.
newListFailuresForLicenseConfigurationOperations :: Text -> ListFailuresForLicenseConfigurationOperations

-- | Token for the next set of results.
listFailuresForLicenseConfigurationOperations_nextToken :: Lens' ListFailuresForLicenseConfigurationOperations (Maybe Text)

-- | Maximum number of results to return in a single call.
listFailuresForLicenseConfigurationOperations_maxResults :: Lens' ListFailuresForLicenseConfigurationOperations (Maybe Int)

-- | Amazon Resource Name of the license configuration.
listFailuresForLicenseConfigurationOperations_licenseConfigurationArn :: Lens' ListFailuresForLicenseConfigurationOperations Text

-- | <i>See:</i>
--   <a>newListFailuresForLicenseConfigurationOperationsResponse</a> smart
--   constructor.
data ListFailuresForLicenseConfigurationOperationsResponse
ListFailuresForLicenseConfigurationOperationsResponse' :: Maybe Text -> Maybe [LicenseOperationFailure] -> Int -> ListFailuresForLicenseConfigurationOperationsResponse

-- | Token for the next set of results.
[$sel:nextToken:ListFailuresForLicenseConfigurationOperationsResponse'] :: ListFailuresForLicenseConfigurationOperationsResponse -> Maybe Text

-- | License configuration operations that failed.
[$sel:licenseOperationFailureList:ListFailuresForLicenseConfigurationOperationsResponse'] :: ListFailuresForLicenseConfigurationOperationsResponse -> Maybe [LicenseOperationFailure]

-- | The response's http status code.
[$sel:httpStatus:ListFailuresForLicenseConfigurationOperationsResponse'] :: ListFailuresForLicenseConfigurationOperationsResponse -> Int

-- | Create a value of
--   <a>ListFailuresForLicenseConfigurationOperationsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFailuresForLicenseConfigurationOperations'</a>,
--   <a>listFailuresForLicenseConfigurationOperationsResponse_nextToken</a>
--   - Token for the next set of results.
--   
--   
--   <a>$sel:licenseOperationFailureList:ListFailuresForLicenseConfigurationOperationsResponse'</a>,
--   <a>listFailuresForLicenseConfigurationOperationsResponse_licenseOperationFailureList</a>
--   - License configuration operations that failed.
--   
--   
--   <a>$sel:httpStatus:ListFailuresForLicenseConfigurationOperationsResponse'</a>,
--   <a>listFailuresForLicenseConfigurationOperationsResponse_httpStatus</a>
--   - The response's http status code.
newListFailuresForLicenseConfigurationOperationsResponse :: Int -> ListFailuresForLicenseConfigurationOperationsResponse

-- | Token for the next set of results.
listFailuresForLicenseConfigurationOperationsResponse_nextToken :: Lens' ListFailuresForLicenseConfigurationOperationsResponse (Maybe Text)

-- | License configuration operations that failed.
listFailuresForLicenseConfigurationOperationsResponse_licenseOperationFailureList :: Lens' ListFailuresForLicenseConfigurationOperationsResponse (Maybe [LicenseOperationFailure])

-- | The response's http status code.
listFailuresForLicenseConfigurationOperationsResponse_httpStatus :: Lens' ListFailuresForLicenseConfigurationOperationsResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperations
instance GHC.Show.Show Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperations
instance GHC.Read.Read Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperations
instance GHC.Classes.Eq Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperations
instance GHC.Generics.Generic Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperationsResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperationsResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperationsResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperationsResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperations
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperationsResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperations
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperations
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperations
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperations
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperations
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListFailuresForLicenseConfigurationOperations.ListFailuresForLicenseConfigurationOperations


-- | Lists the grants distributed for the specified license.
module Amazonka.LicenseManager.ListDistributedGrants

-- | <i>See:</i> <a>newListDistributedGrants</a> smart constructor.
data ListDistributedGrants
ListDistributedGrants' :: Maybe [Filter] -> Maybe Text -> Maybe [Text] -> Maybe Natural -> ListDistributedGrants

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>LicenseArn</pre></li>
--   <li><pre>GrantStatus</pre></li>
--   <li><pre>GranteePrincipalARN</pre></li>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>LicenseIssuerName</pre></li>
--   </ul>
[$sel:filters:ListDistributedGrants'] :: ListDistributedGrants -> Maybe [Filter]

-- | Token for the next set of results.
[$sel:nextToken:ListDistributedGrants'] :: ListDistributedGrants -> Maybe Text

-- | Amazon Resource Names (ARNs) of the grants.
[$sel:grantArns:ListDistributedGrants'] :: ListDistributedGrants -> Maybe [Text]

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListDistributedGrants'] :: ListDistributedGrants -> Maybe Natural

-- | Create a value of <a>ListDistributedGrants</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListDistributedGrants'</a>,
--   <a>listDistributedGrants_filters</a> - Filters to scope the results.
--   The following filters are supported:
--   
--   <ul>
--   <li><pre>LicenseArn</pre></li>
--   <li><pre>GrantStatus</pre></li>
--   <li><pre>GranteePrincipalARN</pre></li>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>LicenseIssuerName</pre></li>
--   </ul>
--   
--   <a>$sel:nextToken:ListDistributedGrants'</a>,
--   <a>listDistributedGrants_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:grantArns:ListDistributedGrants'</a>,
--   <a>listDistributedGrants_grantArns</a> - Amazon Resource Names (ARNs)
--   of the grants.
--   
--   <a>$sel:maxResults:ListDistributedGrants'</a>,
--   <a>listDistributedGrants_maxResults</a> - Maximum number of results to
--   return in a single call.
newListDistributedGrants :: ListDistributedGrants

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>LicenseArn</pre></li>
--   <li><pre>GrantStatus</pre></li>
--   <li><pre>GranteePrincipalARN</pre></li>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>LicenseIssuerName</pre></li>
--   </ul>
listDistributedGrants_filters :: Lens' ListDistributedGrants (Maybe [Filter])

-- | Token for the next set of results.
listDistributedGrants_nextToken :: Lens' ListDistributedGrants (Maybe Text)

-- | Amazon Resource Names (ARNs) of the grants.
listDistributedGrants_grantArns :: Lens' ListDistributedGrants (Maybe [Text])

-- | Maximum number of results to return in a single call.
listDistributedGrants_maxResults :: Lens' ListDistributedGrants (Maybe Natural)

-- | <i>See:</i> <a>newListDistributedGrantsResponse</a> smart constructor.
data ListDistributedGrantsResponse
ListDistributedGrantsResponse' :: Maybe [Grant] -> Maybe Text -> Int -> ListDistributedGrantsResponse

-- | Distributed grant details.
[$sel:grants:ListDistributedGrantsResponse'] :: ListDistributedGrantsResponse -> Maybe [Grant]

-- | Token for the next set of results.
[$sel:nextToken:ListDistributedGrantsResponse'] :: ListDistributedGrantsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListDistributedGrantsResponse'] :: ListDistributedGrantsResponse -> Int

-- | Create a value of <a>ListDistributedGrantsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grants:ListDistributedGrantsResponse'</a>,
--   <a>listDistributedGrantsResponse_grants</a> - Distributed grant
--   details.
--   
--   <a>$sel:nextToken:ListDistributedGrants'</a>,
--   <a>listDistributedGrantsResponse_nextToken</a> - Token for the next
--   set of results.
--   
--   <a>$sel:httpStatus:ListDistributedGrantsResponse'</a>,
--   <a>listDistributedGrantsResponse_httpStatus</a> - The response's http
--   status code.
newListDistributedGrantsResponse :: Int -> ListDistributedGrantsResponse

-- | Distributed grant details.
listDistributedGrantsResponse_grants :: Lens' ListDistributedGrantsResponse (Maybe [Grant])

-- | Token for the next set of results.
listDistributedGrantsResponse_nextToken :: Lens' ListDistributedGrantsResponse (Maybe Text)

-- | The response's http status code.
listDistributedGrantsResponse_httpStatus :: Lens' ListDistributedGrantsResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrants
instance GHC.Show.Show Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrants
instance GHC.Read.Read Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrants
instance GHC.Classes.Eq Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrants
instance GHC.Generics.Generic Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrantsResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrantsResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrantsResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrantsResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrants
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrantsResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrants
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrants
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrants
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrants
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrants
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListDistributedGrants.ListDistributedGrants


-- | Lists the resource associations for the specified license
--   configuration.
--   
--   Resource associations need not consume licenses from a license
--   configuration. For example, an AMI or a stopped instance might not
--   consume a license (depending on the license rules).
--   
--   This operation returns paginated results.
module Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration

-- | <i>See:</i> <a>newListAssociationsForLicenseConfiguration</a> smart
--   constructor.
data ListAssociationsForLicenseConfiguration
ListAssociationsForLicenseConfiguration' :: Maybe Text -> Maybe Int -> Text -> ListAssociationsForLicenseConfiguration

-- | Token for the next set of results.
[$sel:nextToken:ListAssociationsForLicenseConfiguration'] :: ListAssociationsForLicenseConfiguration -> Maybe Text

-- | Maximum number of results to return in a single call.
[$sel:maxResults:ListAssociationsForLicenseConfiguration'] :: ListAssociationsForLicenseConfiguration -> Maybe Int

-- | Amazon Resource Name (ARN) of a license configuration.
[$sel:licenseConfigurationArn:ListAssociationsForLicenseConfiguration'] :: ListAssociationsForLicenseConfiguration -> Text

-- | Create a value of <a>ListAssociationsForLicenseConfiguration</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListAssociationsForLicenseConfiguration'</a>,
--   <a>listAssociationsForLicenseConfiguration_nextToken</a> - Token for
--   the next set of results.
--   
--   <a>$sel:maxResults:ListAssociationsForLicenseConfiguration'</a>,
--   <a>listAssociationsForLicenseConfiguration_maxResults</a> - Maximum
--   number of results to return in a single call.
--   
--   
--   <a>$sel:licenseConfigurationArn:ListAssociationsForLicenseConfiguration'</a>,
--   <a>listAssociationsForLicenseConfiguration_licenseConfigurationArn</a>
--   - Amazon Resource Name (ARN) of a license configuration.
newListAssociationsForLicenseConfiguration :: Text -> ListAssociationsForLicenseConfiguration

-- | Token for the next set of results.
listAssociationsForLicenseConfiguration_nextToken :: Lens' ListAssociationsForLicenseConfiguration (Maybe Text)

-- | Maximum number of results to return in a single call.
listAssociationsForLicenseConfiguration_maxResults :: Lens' ListAssociationsForLicenseConfiguration (Maybe Int)

-- | Amazon Resource Name (ARN) of a license configuration.
listAssociationsForLicenseConfiguration_licenseConfigurationArn :: Lens' ListAssociationsForLicenseConfiguration Text

-- | <i>See:</i> <a>newListAssociationsForLicenseConfigurationResponse</a>
--   smart constructor.
data ListAssociationsForLicenseConfigurationResponse
ListAssociationsForLicenseConfigurationResponse' :: Maybe [LicenseConfigurationAssociation] -> Maybe Text -> Int -> ListAssociationsForLicenseConfigurationResponse

-- | Information about the associations for the license configuration.
[$sel:licenseConfigurationAssociations:ListAssociationsForLicenseConfigurationResponse'] :: ListAssociationsForLicenseConfigurationResponse -> Maybe [LicenseConfigurationAssociation]

-- | Token for the next set of results.
[$sel:nextToken:ListAssociationsForLicenseConfigurationResponse'] :: ListAssociationsForLicenseConfigurationResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListAssociationsForLicenseConfigurationResponse'] :: ListAssociationsForLicenseConfigurationResponse -> Int

-- | Create a value of
--   <a>ListAssociationsForLicenseConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseConfigurationAssociations:ListAssociationsForLicenseConfigurationResponse'</a>,
--   <a>listAssociationsForLicenseConfigurationResponse_licenseConfigurationAssociations</a>
--   - Information about the associations for the license configuration.
--   
--   <a>$sel:nextToken:ListAssociationsForLicenseConfiguration'</a>,
--   <a>listAssociationsForLicenseConfigurationResponse_nextToken</a> -
--   Token for the next set of results.
--   
--   
--   <a>$sel:httpStatus:ListAssociationsForLicenseConfigurationResponse'</a>,
--   <a>listAssociationsForLicenseConfigurationResponse_httpStatus</a> -
--   The response's http status code.
newListAssociationsForLicenseConfigurationResponse :: Int -> ListAssociationsForLicenseConfigurationResponse

-- | Information about the associations for the license configuration.
listAssociationsForLicenseConfigurationResponse_licenseConfigurationAssociations :: Lens' ListAssociationsForLicenseConfigurationResponse (Maybe [LicenseConfigurationAssociation])

-- | Token for the next set of results.
listAssociationsForLicenseConfigurationResponse_nextToken :: Lens' ListAssociationsForLicenseConfigurationResponse (Maybe Text)

-- | The response's http status code.
listAssociationsForLicenseConfigurationResponse_httpStatus :: Lens' ListAssociationsForLicenseConfigurationResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfiguration
instance GHC.Show.Show Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfiguration
instance GHC.Read.Read Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfiguration
instance GHC.Classes.Eq Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfiguration
instance GHC.Generics.Generic Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfigurationResponse
instance GHC.Show.Show Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfigurationResponse
instance GHC.Read.Read Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfigurationResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfigurationResponse
instance Amazonka.Pager.AWSPager Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfiguration
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ListAssociationsForLicenseConfiguration.ListAssociationsForLicenseConfiguration


-- | Gets the License Manager settings for the current Region.
module Amazonka.LicenseManager.GetServiceSettings

-- | <i>See:</i> <a>newGetServiceSettings</a> smart constructor.
data GetServiceSettings
GetServiceSettings' :: GetServiceSettings

-- | Create a value of <a>GetServiceSettings</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newGetServiceSettings :: GetServiceSettings

-- | <i>See:</i> <a>newGetServiceSettingsResponse</a> smart constructor.
data GetServiceSettingsResponse
GetServiceSettingsResponse' :: Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe OrganizationConfiguration -> Int -> GetServiceSettingsResponse

-- | Indicates whether cross-account discovery is enabled.
[$sel:enableCrossAccountsDiscovery:GetServiceSettingsResponse'] :: GetServiceSettingsResponse -> Maybe Bool

-- | SNS topic configured to receive notifications from License Manager.
[$sel:snsTopicArn:GetServiceSettingsResponse'] :: GetServiceSettingsResponse -> Maybe Text

-- | Amazon Resource Name (ARN) of the resource share. The License Manager
--   management account provides member accounts with access to this share.
[$sel:licenseManagerResourceShareArn:GetServiceSettingsResponse'] :: GetServiceSettingsResponse -> Maybe Text

-- | Regional S3 bucket path for storing reports, license trail event data,
--   discovery data, and so on.
[$sel:s3BucketArn:GetServiceSettingsResponse'] :: GetServiceSettingsResponse -> Maybe Text

-- | Indicates whether Organizations is integrated with License Manager for
--   cross-account discovery.
[$sel:organizationConfiguration:GetServiceSettingsResponse'] :: GetServiceSettingsResponse -> Maybe OrganizationConfiguration

-- | The response's http status code.
[$sel:httpStatus:GetServiceSettingsResponse'] :: GetServiceSettingsResponse -> Int

-- | Create a value of <a>GetServiceSettingsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enableCrossAccountsDiscovery:GetServiceSettingsResponse'</a>,
--   <a>getServiceSettingsResponse_enableCrossAccountsDiscovery</a> -
--   Indicates whether cross-account discovery is enabled.
--   
--   <a>$sel:snsTopicArn:GetServiceSettingsResponse'</a>,
--   <a>getServiceSettingsResponse_snsTopicArn</a> - SNS topic configured
--   to receive notifications from License Manager.
--   
--   
--   <a>$sel:licenseManagerResourceShareArn:GetServiceSettingsResponse'</a>,
--   <a>getServiceSettingsResponse_licenseManagerResourceShareArn</a> -
--   Amazon Resource Name (ARN) of the resource share. The License Manager
--   management account provides member accounts with access to this share.
--   
--   <a>$sel:s3BucketArn:GetServiceSettingsResponse'</a>,
--   <a>getServiceSettingsResponse_s3BucketArn</a> - Regional S3 bucket
--   path for storing reports, license trail event data, discovery data,
--   and so on.
--   
--   <a>$sel:organizationConfiguration:GetServiceSettingsResponse'</a>,
--   <a>getServiceSettingsResponse_organizationConfiguration</a> -
--   Indicates whether Organizations is integrated with License Manager for
--   cross-account discovery.
--   
--   <a>$sel:httpStatus:GetServiceSettingsResponse'</a>,
--   <a>getServiceSettingsResponse_httpStatus</a> - The response's http
--   status code.
newGetServiceSettingsResponse :: Int -> GetServiceSettingsResponse

-- | Indicates whether cross-account discovery is enabled.
getServiceSettingsResponse_enableCrossAccountsDiscovery :: Lens' GetServiceSettingsResponse (Maybe Bool)

-- | SNS topic configured to receive notifications from License Manager.
getServiceSettingsResponse_snsTopicArn :: Lens' GetServiceSettingsResponse (Maybe Text)

-- | Amazon Resource Name (ARN) of the resource share. The License Manager
--   management account provides member accounts with access to this share.
getServiceSettingsResponse_licenseManagerResourceShareArn :: Lens' GetServiceSettingsResponse (Maybe Text)

-- | Regional S3 bucket path for storing reports, license trail event data,
--   discovery data, and so on.
getServiceSettingsResponse_s3BucketArn :: Lens' GetServiceSettingsResponse (Maybe Text)

-- | Indicates whether Organizations is integrated with License Manager for
--   cross-account discovery.
getServiceSettingsResponse_organizationConfiguration :: Lens' GetServiceSettingsResponse (Maybe OrganizationConfiguration)

-- | The response's http status code.
getServiceSettingsResponse_httpStatus :: Lens' GetServiceSettingsResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.GetServiceSettings.GetServiceSettings
instance GHC.Show.Show Amazonka.LicenseManager.GetServiceSettings.GetServiceSettings
instance GHC.Read.Read Amazonka.LicenseManager.GetServiceSettings.GetServiceSettings
instance GHC.Classes.Eq Amazonka.LicenseManager.GetServiceSettings.GetServiceSettings
instance GHC.Generics.Generic Amazonka.LicenseManager.GetServiceSettings.GetServiceSettingsResponse
instance GHC.Show.Show Amazonka.LicenseManager.GetServiceSettings.GetServiceSettingsResponse
instance GHC.Read.Read Amazonka.LicenseManager.GetServiceSettings.GetServiceSettingsResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.GetServiceSettings.GetServiceSettingsResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.GetServiceSettings.GetServiceSettings
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetServiceSettings.GetServiceSettingsResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.GetServiceSettings.GetServiceSettings
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetServiceSettings.GetServiceSettings
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.GetServiceSettings.GetServiceSettings
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.GetServiceSettings.GetServiceSettings
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.GetServiceSettings.GetServiceSettings
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.GetServiceSettings.GetServiceSettings


-- | Gets detailed information about the usage of the specified license.
module Amazonka.LicenseManager.GetLicenseUsage

-- | <i>See:</i> <a>newGetLicenseUsage</a> smart constructor.
data GetLicenseUsage
GetLicenseUsage' :: Text -> GetLicenseUsage

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:GetLicenseUsage'] :: GetLicenseUsage -> Text

-- | Create a value of <a>GetLicenseUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseArn:GetLicenseUsage'</a>,
--   <a>getLicenseUsage_licenseArn</a> - Amazon Resource Name (ARN) of the
--   license.
newGetLicenseUsage :: Text -> GetLicenseUsage

-- | Amazon Resource Name (ARN) of the license.
getLicenseUsage_licenseArn :: Lens' GetLicenseUsage Text

-- | <i>See:</i> <a>newGetLicenseUsageResponse</a> smart constructor.
data GetLicenseUsageResponse
GetLicenseUsageResponse' :: Maybe LicenseUsage -> Int -> GetLicenseUsageResponse

-- | License usage details.
[$sel:licenseUsage:GetLicenseUsageResponse'] :: GetLicenseUsageResponse -> Maybe LicenseUsage

-- | The response's http status code.
[$sel:httpStatus:GetLicenseUsageResponse'] :: GetLicenseUsageResponse -> Int

-- | Create a value of <a>GetLicenseUsageResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseUsage:GetLicenseUsageResponse'</a>,
--   <a>getLicenseUsageResponse_licenseUsage</a> - License usage details.
--   
--   <a>$sel:httpStatus:GetLicenseUsageResponse'</a>,
--   <a>getLicenseUsageResponse_httpStatus</a> - The response's http status
--   code.
newGetLicenseUsageResponse :: Int -> GetLicenseUsageResponse

-- | License usage details.
getLicenseUsageResponse_licenseUsage :: Lens' GetLicenseUsageResponse (Maybe LicenseUsage)

-- | The response's http status code.
getLicenseUsageResponse_httpStatus :: Lens' GetLicenseUsageResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsage
instance GHC.Show.Show Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsage
instance GHC.Read.Read Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsage
instance GHC.Classes.Eq Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsage
instance GHC.Generics.Generic Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsageResponse
instance GHC.Show.Show Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsageResponse
instance GHC.Read.Read Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsageResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsageResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsage
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsageResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsage
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsage
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsage
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsage
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsage
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.GetLicenseUsage.GetLicenseUsage


-- | Gets information about the specified report generator.
module Amazonka.LicenseManager.GetLicenseManagerReportGenerator

-- | <i>See:</i> <a>newGetLicenseManagerReportGenerator</a> smart
--   constructor.
data GetLicenseManagerReportGenerator
GetLicenseManagerReportGenerator' :: Text -> GetLicenseManagerReportGenerator

-- | Amazon Resource Name (ARN) of the report generator.
[$sel:licenseManagerReportGeneratorArn:GetLicenseManagerReportGenerator'] :: GetLicenseManagerReportGenerator -> Text

-- | Create a value of <a>GetLicenseManagerReportGenerator</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseManagerReportGeneratorArn:GetLicenseManagerReportGenerator'</a>,
--   <a>getLicenseManagerReportGenerator_licenseManagerReportGeneratorArn</a>
--   - Amazon Resource Name (ARN) of the report generator.
newGetLicenseManagerReportGenerator :: Text -> GetLicenseManagerReportGenerator

-- | Amazon Resource Name (ARN) of the report generator.
getLicenseManagerReportGenerator_licenseManagerReportGeneratorArn :: Lens' GetLicenseManagerReportGenerator Text

-- | <i>See:</i> <a>newGetLicenseManagerReportGeneratorResponse</a> smart
--   constructor.
data GetLicenseManagerReportGeneratorResponse
GetLicenseManagerReportGeneratorResponse' :: Maybe ReportGenerator -> Int -> GetLicenseManagerReportGeneratorResponse

-- | A report generator that creates periodic reports about your license
--   configurations.
[$sel:reportGenerator:GetLicenseManagerReportGeneratorResponse'] :: GetLicenseManagerReportGeneratorResponse -> Maybe ReportGenerator

-- | The response's http status code.
[$sel:httpStatus:GetLicenseManagerReportGeneratorResponse'] :: GetLicenseManagerReportGeneratorResponse -> Int

-- | Create a value of <a>GetLicenseManagerReportGeneratorResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:reportGenerator:GetLicenseManagerReportGeneratorResponse'</a>,
--   <a>getLicenseManagerReportGeneratorResponse_reportGenerator</a> - A
--   report generator that creates periodic reports about your license
--   configurations.
--   
--   <a>$sel:httpStatus:GetLicenseManagerReportGeneratorResponse'</a>,
--   <a>getLicenseManagerReportGeneratorResponse_httpStatus</a> - The
--   response's http status code.
newGetLicenseManagerReportGeneratorResponse :: Int -> GetLicenseManagerReportGeneratorResponse

-- | A report generator that creates periodic reports about your license
--   configurations.
getLicenseManagerReportGeneratorResponse_reportGenerator :: Lens' GetLicenseManagerReportGeneratorResponse (Maybe ReportGenerator)

-- | The response's http status code.
getLicenseManagerReportGeneratorResponse_httpStatus :: Lens' GetLicenseManagerReportGeneratorResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGenerator
instance GHC.Show.Show Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGenerator
instance GHC.Read.Read Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGenerator
instance GHC.Classes.Eq Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGenerator
instance GHC.Generics.Generic Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGeneratorResponse
instance GHC.Show.Show Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGeneratorResponse
instance GHC.Read.Read Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGeneratorResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGeneratorResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGenerator
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGeneratorResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGenerator
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGenerator
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGenerator
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGenerator
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGenerator
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.GetLicenseManagerReportGenerator.GetLicenseManagerReportGenerator


-- | Gets information about the specified license type conversion task.
module Amazonka.LicenseManager.GetLicenseConversionTask

-- | <i>See:</i> <a>newGetLicenseConversionTask</a> smart constructor.
data GetLicenseConversionTask
GetLicenseConversionTask' :: Text -> GetLicenseConversionTask

-- | ID of the license type conversion task to retrieve information on.
[$sel:licenseConversionTaskId:GetLicenseConversionTask'] :: GetLicenseConversionTask -> Text

-- | Create a value of <a>GetLicenseConversionTask</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseConversionTaskId:GetLicenseConversionTask'</a>,
--   <a>getLicenseConversionTask_licenseConversionTaskId</a> - ID of the
--   license type conversion task to retrieve information on.
newGetLicenseConversionTask :: Text -> GetLicenseConversionTask

-- | ID of the license type conversion task to retrieve information on.
getLicenseConversionTask_licenseConversionTaskId :: Lens' GetLicenseConversionTask Text

-- | <i>See:</i> <a>newGetLicenseConversionTaskResponse</a> smart
--   constructor.
data GetLicenseConversionTaskResponse
GetLicenseConversionTaskResponse' :: Maybe LicenseConversionTaskStatus -> Maybe POSIX -> Maybe LicenseConversionContext -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe POSIX -> Maybe LicenseConversionContext -> Int -> GetLicenseConversionTaskResponse

-- | Status of the license type conversion task.
[$sel:status:GetLicenseConversionTaskResponse'] :: GetLicenseConversionTaskResponse -> Maybe LicenseConversionTaskStatus

-- | Time at which the license type conversion task was started .
[$sel:startTime:GetLicenseConversionTaskResponse'] :: GetLicenseConversionTaskResponse -> Maybe POSIX

-- | Information about the license type converted to.
[$sel:destinationLicenseContext:GetLicenseConversionTaskResponse'] :: GetLicenseConversionTaskResponse -> Maybe LicenseConversionContext

-- | ID of the license type conversion task.
[$sel:licenseConversionTaskId:GetLicenseConversionTaskResponse'] :: GetLicenseConversionTaskResponse -> Maybe Text

-- | Amazon Resource Names (ARN) of the resources the license conversion
--   task is associated with.
[$sel:resourceArn:GetLicenseConversionTaskResponse'] :: GetLicenseConversionTaskResponse -> Maybe Text

-- | The status message for the conversion task.
[$sel:statusMessage:GetLicenseConversionTaskResponse'] :: GetLicenseConversionTaskResponse -> Maybe Text

-- | Time at which the license type conversion task was completed.
[$sel:endTime:GetLicenseConversionTaskResponse'] :: GetLicenseConversionTaskResponse -> Maybe POSIX

-- | Amount of time to complete the license type conversion.
[$sel:licenseConversionTime:GetLicenseConversionTaskResponse'] :: GetLicenseConversionTaskResponse -> Maybe POSIX

-- | Information about the license type converted from.
[$sel:sourceLicenseContext:GetLicenseConversionTaskResponse'] :: GetLicenseConversionTaskResponse -> Maybe LicenseConversionContext

-- | The response's http status code.
[$sel:httpStatus:GetLicenseConversionTaskResponse'] :: GetLicenseConversionTaskResponse -> Int

-- | Create a value of <a>GetLicenseConversionTaskResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_status</a> - Status of the license
--   type conversion task.
--   
--   <a>$sel:startTime:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_startTime</a> - Time at which the
--   license type conversion task was started .
--   
--   
--   <a>$sel:destinationLicenseContext:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_destinationLicenseContext</a> -
--   Information about the license type converted to.
--   
--   <a>$sel:licenseConversionTaskId:GetLicenseConversionTask'</a>,
--   <a>getLicenseConversionTaskResponse_licenseConversionTaskId</a> - ID
--   of the license type conversion task.
--   
--   <a>$sel:resourceArn:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_resourceArn</a> - Amazon Resource
--   Names (ARN) of the resources the license conversion task is associated
--   with.
--   
--   <a>$sel:statusMessage:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_statusMessage</a> - The status
--   message for the conversion task.
--   
--   <a>$sel:endTime:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_endTime</a> - Time at which the
--   license type conversion task was completed.
--   
--   <a>$sel:licenseConversionTime:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_licenseConversionTime</a> - Amount
--   of time to complete the license type conversion.
--   
--   <a>$sel:sourceLicenseContext:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_sourceLicenseContext</a> -
--   Information about the license type converted from.
--   
--   <a>$sel:httpStatus:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_httpStatus</a> - The response's
--   http status code.
newGetLicenseConversionTaskResponse :: Int -> GetLicenseConversionTaskResponse

-- | Status of the license type conversion task.
getLicenseConversionTaskResponse_status :: Lens' GetLicenseConversionTaskResponse (Maybe LicenseConversionTaskStatus)

-- | Time at which the license type conversion task was started .
getLicenseConversionTaskResponse_startTime :: Lens' GetLicenseConversionTaskResponse (Maybe UTCTime)

-- | Information about the license type converted to.
getLicenseConversionTaskResponse_destinationLicenseContext :: Lens' GetLicenseConversionTaskResponse (Maybe LicenseConversionContext)

-- | ID of the license type conversion task.
getLicenseConversionTaskResponse_licenseConversionTaskId :: Lens' GetLicenseConversionTaskResponse (Maybe Text)

-- | Amazon Resource Names (ARN) of the resources the license conversion
--   task is associated with.
getLicenseConversionTaskResponse_resourceArn :: Lens' GetLicenseConversionTaskResponse (Maybe Text)

-- | The status message for the conversion task.
getLicenseConversionTaskResponse_statusMessage :: Lens' GetLicenseConversionTaskResponse (Maybe Text)

-- | Time at which the license type conversion task was completed.
getLicenseConversionTaskResponse_endTime :: Lens' GetLicenseConversionTaskResponse (Maybe UTCTime)

-- | Amount of time to complete the license type conversion.
getLicenseConversionTaskResponse_licenseConversionTime :: Lens' GetLicenseConversionTaskResponse (Maybe UTCTime)

-- | Information about the license type converted from.
getLicenseConversionTaskResponse_sourceLicenseContext :: Lens' GetLicenseConversionTaskResponse (Maybe LicenseConversionContext)

-- | The response's http status code.
getLicenseConversionTaskResponse_httpStatus :: Lens' GetLicenseConversionTaskResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTask
instance GHC.Show.Show Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTask
instance GHC.Read.Read Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTask
instance GHC.Classes.Eq Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTask
instance GHC.Generics.Generic Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTaskResponse
instance GHC.Show.Show Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTaskResponse
instance GHC.Read.Read Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTaskResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTaskResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTask
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTaskResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTask
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTask
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTask
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTask
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTask
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.GetLicenseConversionTask.GetLicenseConversionTask


-- | Gets detailed information about the specified license configuration.
module Amazonka.LicenseManager.GetLicenseConfiguration

-- | <i>See:</i> <a>newGetLicenseConfiguration</a> smart constructor.
data GetLicenseConfiguration
GetLicenseConfiguration' :: Text -> GetLicenseConfiguration

-- | Amazon Resource Name (ARN) of the license configuration.
[$sel:licenseConfigurationArn:GetLicenseConfiguration'] :: GetLicenseConfiguration -> Text

-- | Create a value of <a>GetLicenseConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseConfigurationArn:GetLicenseConfiguration'</a>,
--   <a>getLicenseConfiguration_licenseConfigurationArn</a> - Amazon
--   Resource Name (ARN) of the license configuration.
newGetLicenseConfiguration :: Text -> GetLicenseConfiguration

-- | Amazon Resource Name (ARN) of the license configuration.
getLicenseConfiguration_licenseConfigurationArn :: Lens' GetLicenseConfiguration Text

-- | <i>See:</i> <a>newGetLicenseConfigurationResponse</a> smart
--   constructor.
data GetLicenseConfigurationResponse
GetLicenseConfigurationResponse' :: Maybe Text -> Maybe Text -> Maybe [ConsumedLicenseSummary] -> Maybe Integer -> Maybe [ManagedResourceSummary] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [ProductInformation] -> Maybe LicenseCountingType -> Maybe AutomatedDiscoveryInformation -> Maybe Integer -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe [Tag] -> Int -> GetLicenseConfigurationResponse

-- | License configuration status.
[$sel:status:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe Text

-- | Account ID of the owner of the license configuration.
[$sel:ownerAccountId:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe Text

-- | Summaries of the licenses consumed by resources.
[$sel:consumedLicenseSummaryList:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe [ConsumedLicenseSummary]

-- | Number of available licenses.
[$sel:licenseCount:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe Integer

-- | Summaries of the managed resources.
[$sel:managedResourceSummaryList:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe [ManagedResourceSummary]

-- | Name of the license configuration.
[$sel:name:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe Text

-- | Sets the number of available licenses as a hard limit.
[$sel:licenseCountHardLimit:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe Bool

-- | When true, disassociates a resource when software is uninstalled.
[$sel:disassociateWhenNotFound:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe Bool

-- | Product information.
[$sel:productInformationList:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe [ProductInformation]

-- | Dimension for which the licenses are counted.
[$sel:licenseCountingType:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe LicenseCountingType

-- | Automated discovery information.
[$sel:automatedDiscoveryInformation:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe AutomatedDiscoveryInformation

-- | Number of licenses assigned to resources.
[$sel:consumedLicenses:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe Integer

-- | License rules.
[$sel:licenseRules:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe [Text]

-- | Unique ID for the license configuration.
[$sel:licenseConfigurationId:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe Text

-- | Description of the license configuration.
[$sel:description:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe Text

-- | Amazon Resource Name (ARN) of the license configuration.
[$sel:licenseConfigurationArn:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe Text

-- | Tags for the license configuration.
[$sel:tags:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Maybe [Tag]

-- | The response's http status code.
[$sel:httpStatus:GetLicenseConfigurationResponse'] :: GetLicenseConfigurationResponse -> Int

-- | Create a value of <a>GetLicenseConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_status</a> - License configuration
--   status.
--   
--   <a>$sel:ownerAccountId:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_ownerAccountId</a> - Account ID of
--   the owner of the license configuration.
--   
--   
--   <a>$sel:consumedLicenseSummaryList:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_consumedLicenseSummaryList</a> -
--   Summaries of the licenses consumed by resources.
--   
--   <a>$sel:licenseCount:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_licenseCount</a> - Number of
--   available licenses.
--   
--   
--   <a>$sel:managedResourceSummaryList:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_managedResourceSummaryList</a> -
--   Summaries of the managed resources.
--   
--   <a>$sel:name:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_name</a> - Name of the license
--   configuration.
--   
--   <a>$sel:licenseCountHardLimit:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_licenseCountHardLimit</a> - Sets
--   the number of available licenses as a hard limit.
--   
--   <a>$sel:disassociateWhenNotFound:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_disassociateWhenNotFound</a> - When
--   true, disassociates a resource when software is uninstalled.
--   
--   <a>$sel:productInformationList:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_productInformationList</a> -
--   Product information.
--   
--   <a>$sel:licenseCountingType:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_licenseCountingType</a> - Dimension
--   for which the licenses are counted.
--   
--   
--   <a>$sel:automatedDiscoveryInformation:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_automatedDiscoveryInformation</a> -
--   Automated discovery information.
--   
--   <a>$sel:consumedLicenses:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_consumedLicenses</a> - Number of
--   licenses assigned to resources.
--   
--   <a>$sel:licenseRules:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_licenseRules</a> - License rules.
--   
--   <a>$sel:licenseConfigurationId:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_licenseConfigurationId</a> - Unique
--   ID for the license configuration.
--   
--   <a>$sel:description:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_description</a> - Description of
--   the license configuration.
--   
--   <a>$sel:licenseConfigurationArn:GetLicenseConfiguration'</a>,
--   <a>getLicenseConfigurationResponse_licenseConfigurationArn</a> -
--   Amazon Resource Name (ARN) of the license configuration.
--   
--   <a>$sel:tags:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_tags</a> - Tags for the license
--   configuration.
--   
--   <a>$sel:httpStatus:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newGetLicenseConfigurationResponse :: Int -> GetLicenseConfigurationResponse

-- | License configuration status.
getLicenseConfigurationResponse_status :: Lens' GetLicenseConfigurationResponse (Maybe Text)

-- | Account ID of the owner of the license configuration.
getLicenseConfigurationResponse_ownerAccountId :: Lens' GetLicenseConfigurationResponse (Maybe Text)

-- | Summaries of the licenses consumed by resources.
getLicenseConfigurationResponse_consumedLicenseSummaryList :: Lens' GetLicenseConfigurationResponse (Maybe [ConsumedLicenseSummary])

-- | Number of available licenses.
getLicenseConfigurationResponse_licenseCount :: Lens' GetLicenseConfigurationResponse (Maybe Integer)

-- | Summaries of the managed resources.
getLicenseConfigurationResponse_managedResourceSummaryList :: Lens' GetLicenseConfigurationResponse (Maybe [ManagedResourceSummary])

-- | Name of the license configuration.
getLicenseConfigurationResponse_name :: Lens' GetLicenseConfigurationResponse (Maybe Text)

-- | Sets the number of available licenses as a hard limit.
getLicenseConfigurationResponse_licenseCountHardLimit :: Lens' GetLicenseConfigurationResponse (Maybe Bool)

-- | When true, disassociates a resource when software is uninstalled.
getLicenseConfigurationResponse_disassociateWhenNotFound :: Lens' GetLicenseConfigurationResponse (Maybe Bool)

-- | Product information.
getLicenseConfigurationResponse_productInformationList :: Lens' GetLicenseConfigurationResponse (Maybe [ProductInformation])

-- | Dimension for which the licenses are counted.
getLicenseConfigurationResponse_licenseCountingType :: Lens' GetLicenseConfigurationResponse (Maybe LicenseCountingType)

-- | Automated discovery information.
getLicenseConfigurationResponse_automatedDiscoveryInformation :: Lens' GetLicenseConfigurationResponse (Maybe AutomatedDiscoveryInformation)

-- | Number of licenses assigned to resources.
getLicenseConfigurationResponse_consumedLicenses :: Lens' GetLicenseConfigurationResponse (Maybe Integer)

-- | License rules.
getLicenseConfigurationResponse_licenseRules :: Lens' GetLicenseConfigurationResponse (Maybe [Text])

-- | Unique ID for the license configuration.
getLicenseConfigurationResponse_licenseConfigurationId :: Lens' GetLicenseConfigurationResponse (Maybe Text)

-- | Description of the license configuration.
getLicenseConfigurationResponse_description :: Lens' GetLicenseConfigurationResponse (Maybe Text)

-- | Amazon Resource Name (ARN) of the license configuration.
getLicenseConfigurationResponse_licenseConfigurationArn :: Lens' GetLicenseConfigurationResponse (Maybe Text)

-- | Tags for the license configuration.
getLicenseConfigurationResponse_tags :: Lens' GetLicenseConfigurationResponse (Maybe [Tag])

-- | The response's http status code.
getLicenseConfigurationResponse_httpStatus :: Lens' GetLicenseConfigurationResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfiguration
instance GHC.Show.Show Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfiguration
instance GHC.Read.Read Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfiguration
instance GHC.Classes.Eq Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfiguration
instance GHC.Generics.Generic Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfigurationResponse
instance GHC.Show.Show Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfigurationResponse
instance GHC.Read.Read Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfigurationResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfigurationResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.GetLicenseConfiguration.GetLicenseConfiguration


-- | Gets detailed information about the specified license.
module Amazonka.LicenseManager.GetLicense

-- | <i>See:</i> <a>newGetLicense</a> smart constructor.
data GetLicense
GetLicense' :: Maybe Text -> Text -> GetLicense

-- | License version.
[$sel:version:GetLicense'] :: GetLicense -> Maybe Text

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:GetLicense'] :: GetLicense -> Text

-- | Create a value of <a>GetLicense</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:version:GetLicense'</a>, <a>getLicense_version</a> - License
--   version.
--   
--   <a>$sel:licenseArn:GetLicense'</a>, <a>getLicense_licenseArn</a> -
--   Amazon Resource Name (ARN) of the license.
newGetLicense :: Text -> GetLicense

-- | License version.
getLicense_version :: Lens' GetLicense (Maybe Text)

-- | Amazon Resource Name (ARN) of the license.
getLicense_licenseArn :: Lens' GetLicense Text

-- | <i>See:</i> <a>newGetLicenseResponse</a> smart constructor.
data GetLicenseResponse
GetLicenseResponse' :: Maybe License -> Int -> GetLicenseResponse

-- | License details.
[$sel:license:GetLicenseResponse'] :: GetLicenseResponse -> Maybe License

-- | The response's http status code.
[$sel:httpStatus:GetLicenseResponse'] :: GetLicenseResponse -> Int

-- | Create a value of <a>GetLicenseResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:license:GetLicenseResponse'</a>,
--   <a>getLicenseResponse_license</a> - License details.
--   
--   <a>$sel:httpStatus:GetLicenseResponse'</a>,
--   <a>getLicenseResponse_httpStatus</a> - The response's http status
--   code.
newGetLicenseResponse :: Int -> GetLicenseResponse

-- | License details.
getLicenseResponse_license :: Lens' GetLicenseResponse (Maybe License)

-- | The response's http status code.
getLicenseResponse_httpStatus :: Lens' GetLicenseResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.GetLicense.GetLicense
instance GHC.Show.Show Amazonka.LicenseManager.GetLicense.GetLicense
instance GHC.Read.Read Amazonka.LicenseManager.GetLicense.GetLicense
instance GHC.Classes.Eq Amazonka.LicenseManager.GetLicense.GetLicense
instance GHC.Generics.Generic Amazonka.LicenseManager.GetLicense.GetLicenseResponse
instance GHC.Show.Show Amazonka.LicenseManager.GetLicense.GetLicenseResponse
instance GHC.Read.Read Amazonka.LicenseManager.GetLicense.GetLicenseResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.GetLicense.GetLicenseResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.GetLicense.GetLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetLicense.GetLicenseResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.GetLicense.GetLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetLicense.GetLicense
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.GetLicense.GetLicense
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.GetLicense.GetLicense
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.GetLicense.GetLicense
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.GetLicense.GetLicense


-- | Gets detailed information about the specified grant.
module Amazonka.LicenseManager.GetGrant

-- | <i>See:</i> <a>newGetGrant</a> smart constructor.
data GetGrant
GetGrant' :: Maybe Text -> Text -> GetGrant

-- | Grant version.
[$sel:version:GetGrant'] :: GetGrant -> Maybe Text

-- | Amazon Resource Name (ARN) of the grant.
[$sel:grantArn:GetGrant'] :: GetGrant -> Text

-- | Create a value of <a>GetGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:version:GetGrant'</a>, <a>getGrant_version</a> - Grant
--   version.
--   
--   <a>$sel:grantArn:GetGrant'</a>, <a>getGrant_grantArn</a> - Amazon
--   Resource Name (ARN) of the grant.
newGetGrant :: Text -> GetGrant

-- | Grant version.
getGrant_version :: Lens' GetGrant (Maybe Text)

-- | Amazon Resource Name (ARN) of the grant.
getGrant_grantArn :: Lens' GetGrant Text

-- | <i>See:</i> <a>newGetGrantResponse</a> smart constructor.
data GetGrantResponse
GetGrantResponse' :: Maybe Grant -> Int -> GetGrantResponse

-- | Grant details.
[$sel:grant:GetGrantResponse'] :: GetGrantResponse -> Maybe Grant

-- | The response's http status code.
[$sel:httpStatus:GetGrantResponse'] :: GetGrantResponse -> Int

-- | Create a value of <a>GetGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grant:GetGrantResponse'</a>, <a>getGrantResponse_grant</a> -
--   Grant details.
--   
--   <a>$sel:httpStatus:GetGrantResponse'</a>,
--   <a>getGrantResponse_httpStatus</a> - The response's http status code.
newGetGrantResponse :: Int -> GetGrantResponse

-- | Grant details.
getGrantResponse_grant :: Lens' GetGrantResponse (Maybe Grant)

-- | The response's http status code.
getGrantResponse_httpStatus :: Lens' GetGrantResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.GetGrant.GetGrant
instance GHC.Show.Show Amazonka.LicenseManager.GetGrant.GetGrant
instance GHC.Read.Read Amazonka.LicenseManager.GetGrant.GetGrant
instance GHC.Classes.Eq Amazonka.LicenseManager.GetGrant.GetGrant
instance GHC.Generics.Generic Amazonka.LicenseManager.GetGrant.GetGrantResponse
instance GHC.Show.Show Amazonka.LicenseManager.GetGrant.GetGrantResponse
instance GHC.Read.Read Amazonka.LicenseManager.GetGrant.GetGrantResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.GetGrant.GetGrantResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.GetGrant.GetGrant
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetGrant.GetGrantResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.GetGrant.GetGrant
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetGrant.GetGrant
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.GetGrant.GetGrant
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.GetGrant.GetGrant
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.GetGrant.GetGrant
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.GetGrant.GetGrant


-- | Gets a temporary access token to use with AssumeRoleWithWebIdentity.
--   Access tokens are valid for one hour.
module Amazonka.LicenseManager.GetAccessToken

-- | <i>See:</i> <a>newGetAccessToken</a> smart constructor.
data GetAccessToken
GetAccessToken' :: Maybe [Text] -> Text -> GetAccessToken

-- | Token properties to validate against those present in the JWT token.
[$sel:tokenProperties:GetAccessToken'] :: GetAccessToken -> Maybe [Text]

-- | Refresh token, encoded as a JWT token.
[$sel:token:GetAccessToken'] :: GetAccessToken -> Text

-- | Create a value of <a>GetAccessToken</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tokenProperties:GetAccessToken'</a>,
--   <a>getAccessToken_tokenProperties</a> - Token properties to validate
--   against those present in the JWT token.
--   
--   <a>$sel:token:GetAccessToken'</a>, <a>getAccessToken_token</a> -
--   Refresh token, encoded as a JWT token.
newGetAccessToken :: Text -> GetAccessToken

-- | Token properties to validate against those present in the JWT token.
getAccessToken_tokenProperties :: Lens' GetAccessToken (Maybe [Text])

-- | Refresh token, encoded as a JWT token.
getAccessToken_token :: Lens' GetAccessToken Text

-- | <i>See:</i> <a>newGetAccessTokenResponse</a> smart constructor.
data GetAccessTokenResponse
GetAccessTokenResponse' :: Maybe Text -> Int -> GetAccessTokenResponse

-- | Temporary access token.
[$sel:accessToken:GetAccessTokenResponse'] :: GetAccessTokenResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:GetAccessTokenResponse'] :: GetAccessTokenResponse -> Int

-- | Create a value of <a>GetAccessTokenResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:accessToken:GetAccessTokenResponse'</a>,
--   <a>getAccessTokenResponse_accessToken</a> - Temporary access token.
--   
--   <a>$sel:httpStatus:GetAccessTokenResponse'</a>,
--   <a>getAccessTokenResponse_httpStatus</a> - The response's http status
--   code.
newGetAccessTokenResponse :: Int -> GetAccessTokenResponse

-- | Temporary access token.
getAccessTokenResponse_accessToken :: Lens' GetAccessTokenResponse (Maybe Text)

-- | The response's http status code.
getAccessTokenResponse_httpStatus :: Lens' GetAccessTokenResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.GetAccessToken.GetAccessToken
instance GHC.Show.Show Amazonka.LicenseManager.GetAccessToken.GetAccessToken
instance GHC.Read.Read Amazonka.LicenseManager.GetAccessToken.GetAccessToken
instance GHC.Classes.Eq Amazonka.LicenseManager.GetAccessToken.GetAccessToken
instance GHC.Generics.Generic Amazonka.LicenseManager.GetAccessToken.GetAccessTokenResponse
instance GHC.Show.Show Amazonka.LicenseManager.GetAccessToken.GetAccessTokenResponse
instance GHC.Read.Read Amazonka.LicenseManager.GetAccessToken.GetAccessTokenResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.GetAccessToken.GetAccessTokenResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.GetAccessToken.GetAccessToken
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetAccessToken.GetAccessTokenResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.GetAccessToken.GetAccessToken
instance Control.DeepSeq.NFData Amazonka.LicenseManager.GetAccessToken.GetAccessToken
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.GetAccessToken.GetAccessToken
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.GetAccessToken.GetAccessToken
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.GetAccessToken.GetAccessToken
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.GetAccessToken.GetAccessToken


-- | Extends the expiration date for license consumption.
module Amazonka.LicenseManager.ExtendLicenseConsumption

-- | <i>See:</i> <a>newExtendLicenseConsumption</a> smart constructor.
data ExtendLicenseConsumption
ExtendLicenseConsumption' :: Maybe Bool -> Text -> ExtendLicenseConsumption

-- | Checks whether you have the required permissions for the action,
--   without actually making the request. Provides an error response if you
--   do not have the required permissions.
[$sel:dryRun:ExtendLicenseConsumption'] :: ExtendLicenseConsumption -> Maybe Bool

-- | License consumption token.
[$sel:licenseConsumptionToken:ExtendLicenseConsumption'] :: ExtendLicenseConsumption -> Text

-- | Create a value of <a>ExtendLicenseConsumption</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dryRun:ExtendLicenseConsumption'</a>,
--   <a>extendLicenseConsumption_dryRun</a> - Checks whether you have the
--   required permissions for the action, without actually making the
--   request. Provides an error response if you do not have the required
--   permissions.
--   
--   <a>$sel:licenseConsumptionToken:ExtendLicenseConsumption'</a>,
--   <a>extendLicenseConsumption_licenseConsumptionToken</a> - License
--   consumption token.
newExtendLicenseConsumption :: Text -> ExtendLicenseConsumption

-- | Checks whether you have the required permissions for the action,
--   without actually making the request. Provides an error response if you
--   do not have the required permissions.
extendLicenseConsumption_dryRun :: Lens' ExtendLicenseConsumption (Maybe Bool)

-- | License consumption token.
extendLicenseConsumption_licenseConsumptionToken :: Lens' ExtendLicenseConsumption Text

-- | <i>See:</i> <a>newExtendLicenseConsumptionResponse</a> smart
--   constructor.
data ExtendLicenseConsumptionResponse
ExtendLicenseConsumptionResponse' :: Maybe Text -> Maybe Text -> Int -> ExtendLicenseConsumptionResponse

-- | Date and time at which the license consumption expires.
[$sel:expiration:ExtendLicenseConsumptionResponse'] :: ExtendLicenseConsumptionResponse -> Maybe Text

-- | License consumption token.
[$sel:licenseConsumptionToken:ExtendLicenseConsumptionResponse'] :: ExtendLicenseConsumptionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ExtendLicenseConsumptionResponse'] :: ExtendLicenseConsumptionResponse -> Int

-- | Create a value of <a>ExtendLicenseConsumptionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expiration:ExtendLicenseConsumptionResponse'</a>,
--   <a>extendLicenseConsumptionResponse_expiration</a> - Date and time at
--   which the license consumption expires.
--   
--   <a>$sel:licenseConsumptionToken:ExtendLicenseConsumption'</a>,
--   <a>extendLicenseConsumptionResponse_licenseConsumptionToken</a> -
--   License consumption token.
--   
--   <a>$sel:httpStatus:ExtendLicenseConsumptionResponse'</a>,
--   <a>extendLicenseConsumptionResponse_httpStatus</a> - The response's
--   http status code.
newExtendLicenseConsumptionResponse :: Int -> ExtendLicenseConsumptionResponse

-- | Date and time at which the license consumption expires.
extendLicenseConsumptionResponse_expiration :: Lens' ExtendLicenseConsumptionResponse (Maybe Text)

-- | License consumption token.
extendLicenseConsumptionResponse_licenseConsumptionToken :: Lens' ExtendLicenseConsumptionResponse (Maybe Text)

-- | The response's http status code.
extendLicenseConsumptionResponse_httpStatus :: Lens' ExtendLicenseConsumptionResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumption
instance GHC.Show.Show Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumption
instance GHC.Read.Read Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumption
instance GHC.Classes.Eq Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumption
instance GHC.Generics.Generic Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumptionResponse
instance GHC.Show.Show Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumptionResponse
instance GHC.Read.Read Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumptionResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumptionResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumption
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumptionResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumption
instance Control.DeepSeq.NFData Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumption
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumption
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumption
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumption
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.ExtendLicenseConsumption.ExtendLicenseConsumption


-- | Deletes the specified token. Must be called in the license home
--   Region.
module Amazonka.LicenseManager.DeleteToken

-- | <i>See:</i> <a>newDeleteToken</a> smart constructor.
data DeleteToken
DeleteToken' :: Text -> DeleteToken

-- | Token ID.
[$sel:tokenId:DeleteToken'] :: DeleteToken -> Text

-- | Create a value of <a>DeleteToken</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tokenId:DeleteToken'</a>, <a>deleteToken_tokenId</a> - Token
--   ID.
newDeleteToken :: Text -> DeleteToken

-- | Token ID.
deleteToken_tokenId :: Lens' DeleteToken Text

-- | <i>See:</i> <a>newDeleteTokenResponse</a> smart constructor.
data DeleteTokenResponse
DeleteTokenResponse' :: Int -> DeleteTokenResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteTokenResponse'] :: DeleteTokenResponse -> Int

-- | Create a value of <a>DeleteTokenResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteTokenResponse'</a>,
--   <a>deleteTokenResponse_httpStatus</a> - The response's http status
--   code.
newDeleteTokenResponse :: Int -> DeleteTokenResponse

-- | The response's http status code.
deleteTokenResponse_httpStatus :: Lens' DeleteTokenResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.DeleteToken.DeleteToken
instance GHC.Show.Show Amazonka.LicenseManager.DeleteToken.DeleteToken
instance GHC.Read.Read Amazonka.LicenseManager.DeleteToken.DeleteToken
instance GHC.Classes.Eq Amazonka.LicenseManager.DeleteToken.DeleteToken
instance GHC.Generics.Generic Amazonka.LicenseManager.DeleteToken.DeleteTokenResponse
instance GHC.Show.Show Amazonka.LicenseManager.DeleteToken.DeleteTokenResponse
instance GHC.Read.Read Amazonka.LicenseManager.DeleteToken.DeleteTokenResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.DeleteToken.DeleteTokenResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.DeleteToken.DeleteToken
instance Control.DeepSeq.NFData Amazonka.LicenseManager.DeleteToken.DeleteTokenResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.DeleteToken.DeleteToken
instance Control.DeepSeq.NFData Amazonka.LicenseManager.DeleteToken.DeleteToken
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.DeleteToken.DeleteToken
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.DeleteToken.DeleteToken
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.DeleteToken.DeleteToken
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.DeleteToken.DeleteToken


-- | Deletes the specified report generator.
--   
--   This action deletes the report generator, which stops it from
--   generating future reports. The action cannot be reversed. It has no
--   effect on the previous reports from this generator.
module Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator

-- | <i>See:</i> <a>newDeleteLicenseManagerReportGenerator</a> smart
--   constructor.
data DeleteLicenseManagerReportGenerator
DeleteLicenseManagerReportGenerator' :: Text -> DeleteLicenseManagerReportGenerator

-- | Amazon Resource Name (ARN) of the report generator to be deleted.
[$sel:licenseManagerReportGeneratorArn:DeleteLicenseManagerReportGenerator'] :: DeleteLicenseManagerReportGenerator -> Text

-- | Create a value of <a>DeleteLicenseManagerReportGenerator</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseManagerReportGeneratorArn:DeleteLicenseManagerReportGenerator'</a>,
--   <a>deleteLicenseManagerReportGenerator_licenseManagerReportGeneratorArn</a>
--   - Amazon Resource Name (ARN) of the report generator to be deleted.
newDeleteLicenseManagerReportGenerator :: Text -> DeleteLicenseManagerReportGenerator

-- | Amazon Resource Name (ARN) of the report generator to be deleted.
deleteLicenseManagerReportGenerator_licenseManagerReportGeneratorArn :: Lens' DeleteLicenseManagerReportGenerator Text

-- | <i>See:</i> <a>newDeleteLicenseManagerReportGeneratorResponse</a>
--   smart constructor.
data DeleteLicenseManagerReportGeneratorResponse
DeleteLicenseManagerReportGeneratorResponse' :: Int -> DeleteLicenseManagerReportGeneratorResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteLicenseManagerReportGeneratorResponse'] :: DeleteLicenseManagerReportGeneratorResponse -> Int

-- | Create a value of <a>DeleteLicenseManagerReportGeneratorResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteLicenseManagerReportGeneratorResponse'</a>,
--   <a>deleteLicenseManagerReportGeneratorResponse_httpStatus</a> - The
--   response's http status code.
newDeleteLicenseManagerReportGeneratorResponse :: Int -> DeleteLicenseManagerReportGeneratorResponse

-- | The response's http status code.
deleteLicenseManagerReportGeneratorResponse_httpStatus :: Lens' DeleteLicenseManagerReportGeneratorResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGenerator
instance GHC.Show.Show Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGenerator
instance GHC.Read.Read Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGenerator
instance GHC.Classes.Eq Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGenerator
instance GHC.Generics.Generic Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGeneratorResponse
instance GHC.Show.Show Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGeneratorResponse
instance GHC.Read.Read Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGeneratorResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGeneratorResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGenerator
instance Control.DeepSeq.NFData Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGeneratorResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGenerator
instance Control.DeepSeq.NFData Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGenerator
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGenerator
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGenerator
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGenerator
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.DeleteLicenseManagerReportGenerator.DeleteLicenseManagerReportGenerator


-- | Deletes the specified license configuration.
--   
--   You cannot delete a license configuration that is in use.
module Amazonka.LicenseManager.DeleteLicenseConfiguration

-- | <i>See:</i> <a>newDeleteLicenseConfiguration</a> smart constructor.
data DeleteLicenseConfiguration
DeleteLicenseConfiguration' :: Text -> DeleteLicenseConfiguration

-- | ID of the license configuration.
[$sel:licenseConfigurationArn:DeleteLicenseConfiguration'] :: DeleteLicenseConfiguration -> Text

-- | Create a value of <a>DeleteLicenseConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseConfigurationArn:DeleteLicenseConfiguration'</a>,
--   <a>deleteLicenseConfiguration_licenseConfigurationArn</a> - ID of the
--   license configuration.
newDeleteLicenseConfiguration :: Text -> DeleteLicenseConfiguration

-- | ID of the license configuration.
deleteLicenseConfiguration_licenseConfigurationArn :: Lens' DeleteLicenseConfiguration Text

-- | <i>See:</i> <a>newDeleteLicenseConfigurationResponse</a> smart
--   constructor.
data DeleteLicenseConfigurationResponse
DeleteLicenseConfigurationResponse' :: Int -> DeleteLicenseConfigurationResponse

-- | The response's http status code.
[$sel:httpStatus:DeleteLicenseConfigurationResponse'] :: DeleteLicenseConfigurationResponse -> Int

-- | Create a value of <a>DeleteLicenseConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteLicenseConfigurationResponse'</a>,
--   <a>deleteLicenseConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newDeleteLicenseConfigurationResponse :: Int -> DeleteLicenseConfigurationResponse

-- | The response's http status code.
deleteLicenseConfigurationResponse_httpStatus :: Lens' DeleteLicenseConfigurationResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfiguration
instance GHC.Show.Show Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfiguration
instance GHC.Read.Read Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfiguration
instance GHC.Classes.Eq Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfiguration
instance GHC.Generics.Generic Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfigurationResponse
instance GHC.Show.Show Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfigurationResponse
instance GHC.Read.Read Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfigurationResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfigurationResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.DeleteLicenseConfiguration.DeleteLicenseConfiguration


-- | Deletes the specified license.
module Amazonka.LicenseManager.DeleteLicense

-- | <i>See:</i> <a>newDeleteLicense</a> smart constructor.
data DeleteLicense
DeleteLicense' :: Text -> Text -> DeleteLicense

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:DeleteLicense'] :: DeleteLicense -> Text

-- | Current version of the license.
[$sel:sourceVersion:DeleteLicense'] :: DeleteLicense -> Text

-- | Create a value of <a>DeleteLicense</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseArn:DeleteLicense'</a>, <a>deleteLicense_licenseArn</a>
--   - Amazon Resource Name (ARN) of the license.
--   
--   <a>$sel:sourceVersion:DeleteLicense'</a>,
--   <a>deleteLicense_sourceVersion</a> - Current version of the license.
newDeleteLicense :: Text -> Text -> DeleteLicense

-- | Amazon Resource Name (ARN) of the license.
deleteLicense_licenseArn :: Lens' DeleteLicense Text

-- | Current version of the license.
deleteLicense_sourceVersion :: Lens' DeleteLicense Text

-- | <i>See:</i> <a>newDeleteLicenseResponse</a> smart constructor.
data DeleteLicenseResponse
DeleteLicenseResponse' :: Maybe LicenseDeletionStatus -> Maybe Text -> Int -> DeleteLicenseResponse

-- | License status.
[$sel:status:DeleteLicenseResponse'] :: DeleteLicenseResponse -> Maybe LicenseDeletionStatus

-- | Date when the license is deleted.
[$sel:deletionDate:DeleteLicenseResponse'] :: DeleteLicenseResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DeleteLicenseResponse'] :: DeleteLicenseResponse -> Int

-- | Create a value of <a>DeleteLicenseResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:DeleteLicenseResponse'</a>,
--   <a>deleteLicenseResponse_status</a> - License status.
--   
--   <a>$sel:deletionDate:DeleteLicenseResponse'</a>,
--   <a>deleteLicenseResponse_deletionDate</a> - Date when the license is
--   deleted.
--   
--   <a>$sel:httpStatus:DeleteLicenseResponse'</a>,
--   <a>deleteLicenseResponse_httpStatus</a> - The response's http status
--   code.
newDeleteLicenseResponse :: Int -> DeleteLicenseResponse

-- | License status.
deleteLicenseResponse_status :: Lens' DeleteLicenseResponse (Maybe LicenseDeletionStatus)

-- | Date when the license is deleted.
deleteLicenseResponse_deletionDate :: Lens' DeleteLicenseResponse (Maybe Text)

-- | The response's http status code.
deleteLicenseResponse_httpStatus :: Lens' DeleteLicenseResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.DeleteLicense.DeleteLicense
instance GHC.Show.Show Amazonka.LicenseManager.DeleteLicense.DeleteLicense
instance GHC.Read.Read Amazonka.LicenseManager.DeleteLicense.DeleteLicense
instance GHC.Classes.Eq Amazonka.LicenseManager.DeleteLicense.DeleteLicense
instance GHC.Generics.Generic Amazonka.LicenseManager.DeleteLicense.DeleteLicenseResponse
instance GHC.Show.Show Amazonka.LicenseManager.DeleteLicense.DeleteLicenseResponse
instance GHC.Read.Read Amazonka.LicenseManager.DeleteLicense.DeleteLicenseResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.DeleteLicense.DeleteLicenseResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.DeleteLicense.DeleteLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.DeleteLicense.DeleteLicenseResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.DeleteLicense.DeleteLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.DeleteLicense.DeleteLicense
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.DeleteLicense.DeleteLicense
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.DeleteLicense.DeleteLicense
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.DeleteLicense.DeleteLicense
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.DeleteLicense.DeleteLicense


-- | Deletes the specified grant.
module Amazonka.LicenseManager.DeleteGrant

-- | <i>See:</i> <a>newDeleteGrant</a> smart constructor.
data DeleteGrant
DeleteGrant' :: Maybe Text -> Text -> Text -> DeleteGrant

-- | The Status reason for the delete request.
[$sel:statusReason:DeleteGrant'] :: DeleteGrant -> Maybe Text

-- | Amazon Resource Name (ARN) of the grant.
[$sel:grantArn:DeleteGrant'] :: DeleteGrant -> Text

-- | Current version of the grant.
[$sel:version:DeleteGrant'] :: DeleteGrant -> Text

-- | Create a value of <a>DeleteGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statusReason:DeleteGrant'</a>, <a>deleteGrant_statusReason</a>
--   - The Status reason for the delete request.
--   
--   <a>$sel:grantArn:DeleteGrant'</a>, <a>deleteGrant_grantArn</a> -
--   Amazon Resource Name (ARN) of the grant.
--   
--   <a>$sel:version:DeleteGrant'</a>, <a>deleteGrant_version</a> - Current
--   version of the grant.
newDeleteGrant :: Text -> Text -> DeleteGrant

-- | The Status reason for the delete request.
deleteGrant_statusReason :: Lens' DeleteGrant (Maybe Text)

-- | Amazon Resource Name (ARN) of the grant.
deleteGrant_grantArn :: Lens' DeleteGrant Text

-- | Current version of the grant.
deleteGrant_version :: Lens' DeleteGrant Text

-- | <i>See:</i> <a>newDeleteGrantResponse</a> smart constructor.
data DeleteGrantResponse
DeleteGrantResponse' :: Maybe GrantStatus -> Maybe Text -> Maybe Text -> Int -> DeleteGrantResponse

-- | Grant status.
[$sel:status:DeleteGrantResponse'] :: DeleteGrantResponse -> Maybe GrantStatus

-- | Grant version.
[$sel:version:DeleteGrantResponse'] :: DeleteGrantResponse -> Maybe Text

-- | Grant ARN.
[$sel:grantArn:DeleteGrantResponse'] :: DeleteGrantResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DeleteGrantResponse'] :: DeleteGrantResponse -> Int

-- | Create a value of <a>DeleteGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:DeleteGrantResponse'</a>,
--   <a>deleteGrantResponse_status</a> - Grant status.
--   
--   <a>$sel:version:DeleteGrant'</a>, <a>deleteGrantResponse_version</a> -
--   Grant version.
--   
--   <a>$sel:grantArn:DeleteGrant'</a>, <a>deleteGrantResponse_grantArn</a>
--   - Grant ARN.
--   
--   <a>$sel:httpStatus:DeleteGrantResponse'</a>,
--   <a>deleteGrantResponse_httpStatus</a> - The response's http status
--   code.
newDeleteGrantResponse :: Int -> DeleteGrantResponse

-- | Grant status.
deleteGrantResponse_status :: Lens' DeleteGrantResponse (Maybe GrantStatus)

-- | Grant version.
deleteGrantResponse_version :: Lens' DeleteGrantResponse (Maybe Text)

-- | Grant ARN.
deleteGrantResponse_grantArn :: Lens' DeleteGrantResponse (Maybe Text)

-- | The response's http status code.
deleteGrantResponse_httpStatus :: Lens' DeleteGrantResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.DeleteGrant.DeleteGrant
instance GHC.Show.Show Amazonka.LicenseManager.DeleteGrant.DeleteGrant
instance GHC.Read.Read Amazonka.LicenseManager.DeleteGrant.DeleteGrant
instance GHC.Classes.Eq Amazonka.LicenseManager.DeleteGrant.DeleteGrant
instance GHC.Generics.Generic Amazonka.LicenseManager.DeleteGrant.DeleteGrantResponse
instance GHC.Show.Show Amazonka.LicenseManager.DeleteGrant.DeleteGrantResponse
instance GHC.Read.Read Amazonka.LicenseManager.DeleteGrant.DeleteGrantResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.DeleteGrant.DeleteGrantResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.DeleteGrant.DeleteGrant
instance Control.DeepSeq.NFData Amazonka.LicenseManager.DeleteGrant.DeleteGrantResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.DeleteGrant.DeleteGrant
instance Control.DeepSeq.NFData Amazonka.LicenseManager.DeleteGrant.DeleteGrant
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.DeleteGrant.DeleteGrant
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.DeleteGrant.DeleteGrant
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.DeleteGrant.DeleteGrant
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.DeleteGrant.DeleteGrant


-- | Creates a long-lived token.
--   
--   A refresh token is a JWT token used to get an access token. With an
--   access token, you can call AssumeRoleWithWebIdentity to get role
--   credentials that you can use to call License Manager to manage the
--   specified license.
module Amazonka.LicenseManager.CreateToken

-- | <i>See:</i> <a>newCreateToken</a> smart constructor.
data CreateToken
CreateToken' :: Maybe [Text] -> Maybe [Text] -> Maybe Int -> Text -> Text -> CreateToken

-- | Data specified by the caller to be included in the JWT token. The data
--   is mapped to the amr claim of the JWT token.
[$sel:tokenProperties:CreateToken'] :: CreateToken -> Maybe [Text]

-- | Amazon Resource Name (ARN) of the IAM roles to embed in the token.
--   License Manager does not check whether the roles are in use.
[$sel:roleArns:CreateToken'] :: CreateToken -> Maybe [Text]

-- | Token expiration, in days, counted from token creation. The default is
--   365 days.
[$sel:expirationInDays:CreateToken'] :: CreateToken -> Maybe Int

-- | Amazon Resource Name (ARN) of the license. The ARN is mapped to the
--   aud claim of the JWT token.
[$sel:licenseArn:CreateToken'] :: CreateToken -> Text

-- | Idempotency token, valid for 10 minutes.
[$sel:clientToken:CreateToken'] :: CreateToken -> Text

-- | Create a value of <a>CreateToken</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tokenProperties:CreateToken'</a>,
--   <a>createToken_tokenProperties</a> - Data specified by the caller to
--   be included in the JWT token. The data is mapped to the amr claim of
--   the JWT token.
--   
--   <a>$sel:roleArns:CreateToken'</a>, <a>createToken_roleArns</a> -
--   Amazon Resource Name (ARN) of the IAM roles to embed in the token.
--   License Manager does not check whether the roles are in use.
--   
--   <a>$sel:expirationInDays:CreateToken'</a>,
--   <a>createToken_expirationInDays</a> - Token expiration, in days,
--   counted from token creation. The default is 365 days.
--   
--   <a>$sel:licenseArn:CreateToken'</a>, <a>createToken_licenseArn</a> -
--   Amazon Resource Name (ARN) of the license. The ARN is mapped to the
--   aud claim of the JWT token.
--   
--   <a>$sel:clientToken:CreateToken'</a>, <a>createToken_clientToken</a> -
--   Idempotency token, valid for 10 minutes.
newCreateToken :: Text -> Text -> CreateToken

-- | Data specified by the caller to be included in the JWT token. The data
--   is mapped to the amr claim of the JWT token.
createToken_tokenProperties :: Lens' CreateToken (Maybe [Text])

-- | Amazon Resource Name (ARN) of the IAM roles to embed in the token.
--   License Manager does not check whether the roles are in use.
createToken_roleArns :: Lens' CreateToken (Maybe [Text])

-- | Token expiration, in days, counted from token creation. The default is
--   365 days.
createToken_expirationInDays :: Lens' CreateToken (Maybe Int)

-- | Amazon Resource Name (ARN) of the license. The ARN is mapped to the
--   aud claim of the JWT token.
createToken_licenseArn :: Lens' CreateToken Text

-- | Idempotency token, valid for 10 minutes.
createToken_clientToken :: Lens' CreateToken Text

-- | <i>See:</i> <a>newCreateTokenResponse</a> smart constructor.
data CreateTokenResponse
CreateTokenResponse' :: Maybe Text -> Maybe Text -> Maybe TokenType -> Int -> CreateTokenResponse

-- | Refresh token, encoded as a JWT token.
[$sel:token:CreateTokenResponse'] :: CreateTokenResponse -> Maybe Text

-- | Token ID.
[$sel:tokenId:CreateTokenResponse'] :: CreateTokenResponse -> Maybe Text

-- | Token type.
[$sel:tokenType:CreateTokenResponse'] :: CreateTokenResponse -> Maybe TokenType

-- | The response's http status code.
[$sel:httpStatus:CreateTokenResponse'] :: CreateTokenResponse -> Int

-- | Create a value of <a>CreateTokenResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:token:CreateTokenResponse'</a>,
--   <a>createTokenResponse_token</a> - Refresh token, encoded as a JWT
--   token.
--   
--   <a>$sel:tokenId:CreateTokenResponse'</a>,
--   <a>createTokenResponse_tokenId</a> - Token ID.
--   
--   <a>$sel:tokenType:CreateTokenResponse'</a>,
--   <a>createTokenResponse_tokenType</a> - Token type.
--   
--   <a>$sel:httpStatus:CreateTokenResponse'</a>,
--   <a>createTokenResponse_httpStatus</a> - The response's http status
--   code.
newCreateTokenResponse :: Int -> CreateTokenResponse

-- | Refresh token, encoded as a JWT token.
createTokenResponse_token :: Lens' CreateTokenResponse (Maybe Text)

-- | Token ID.
createTokenResponse_tokenId :: Lens' CreateTokenResponse (Maybe Text)

-- | Token type.
createTokenResponse_tokenType :: Lens' CreateTokenResponse (Maybe TokenType)

-- | The response's http status code.
createTokenResponse_httpStatus :: Lens' CreateTokenResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateToken.CreateToken
instance GHC.Show.Show Amazonka.LicenseManager.CreateToken.CreateToken
instance GHC.Read.Read Amazonka.LicenseManager.CreateToken.CreateToken
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateToken.CreateToken
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateToken.CreateTokenResponse
instance GHC.Show.Show Amazonka.LicenseManager.CreateToken.CreateTokenResponse
instance GHC.Read.Read Amazonka.LicenseManager.CreateToken.CreateTokenResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateToken.CreateTokenResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.CreateToken.CreateToken
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateToken.CreateTokenResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.CreateToken.CreateToken
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateToken.CreateToken
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.CreateToken.CreateToken
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.CreateToken.CreateToken
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.CreateToken.CreateToken
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.CreateToken.CreateToken


-- | Creates a new version of the specified license.
module Amazonka.LicenseManager.CreateLicenseVersion

-- | <i>See:</i> <a>newCreateLicenseVersion</a> smart constructor.
data CreateLicenseVersion
CreateLicenseVersion' :: Maybe Text -> Maybe [Metadata] -> Text -> Text -> Text -> Issuer -> Text -> DatetimeRange -> [Entitlement] -> ConsumptionConfiguration -> LicenseStatus -> Text -> CreateLicenseVersion

-- | Current version of the license.
[$sel:sourceVersion:CreateLicenseVersion'] :: CreateLicenseVersion -> Maybe Text

-- | Information about the license.
[$sel:licenseMetadata:CreateLicenseVersion'] :: CreateLicenseVersion -> Maybe [Metadata]

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:CreateLicenseVersion'] :: CreateLicenseVersion -> Text

-- | License name.
[$sel:licenseName:CreateLicenseVersion'] :: CreateLicenseVersion -> Text

-- | Product name.
[$sel:productName:CreateLicenseVersion'] :: CreateLicenseVersion -> Text

-- | License issuer.
[$sel:issuer:CreateLicenseVersion'] :: CreateLicenseVersion -> Issuer

-- | Home Region of the license.
[$sel:homeRegion:CreateLicenseVersion'] :: CreateLicenseVersion -> Text

-- | Date and time range during which the license is valid, in ISO8601-UTC
--   format.
[$sel:validity:CreateLicenseVersion'] :: CreateLicenseVersion -> DatetimeRange

-- | License entitlements.
[$sel:entitlements:CreateLicenseVersion'] :: CreateLicenseVersion -> [Entitlement]

-- | Configuration for consumption of the license. Choose a provisional
--   configuration for workloads running with continuous connectivity.
--   Choose a borrow configuration for workloads with offline usage.
[$sel:consumptionConfiguration:CreateLicenseVersion'] :: CreateLicenseVersion -> ConsumptionConfiguration

-- | License status.
[$sel:status:CreateLicenseVersion'] :: CreateLicenseVersion -> LicenseStatus

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
[$sel:clientToken:CreateLicenseVersion'] :: CreateLicenseVersion -> Text

-- | Create a value of <a>CreateLicenseVersion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourceVersion:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_sourceVersion</a> - Current version of the
--   license.
--   
--   <a>$sel:licenseMetadata:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_licenseMetadata</a> - Information about the
--   license.
--   
--   <a>$sel:licenseArn:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_licenseArn</a> - Amazon Resource Name (ARN) of
--   the license.
--   
--   <a>$sel:licenseName:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_licenseName</a> - License name.
--   
--   <a>$sel:productName:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_productName</a> - Product name.
--   
--   <a>$sel:issuer:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_issuer</a> - License issuer.
--   
--   <a>$sel:homeRegion:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_homeRegion</a> - Home Region of the license.
--   
--   <a>$sel:validity:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_validity</a> - Date and time range during
--   which the license is valid, in ISO8601-UTC format.
--   
--   <a>$sel:entitlements:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_entitlements</a> - License entitlements.
--   
--   <a>$sel:consumptionConfiguration:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_consumptionConfiguration</a> - Configuration
--   for consumption of the license. Choose a provisional configuration for
--   workloads running with continuous connectivity. Choose a borrow
--   configuration for workloads with offline usage.
--   
--   <a>$sel:status:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_status</a> - License status.
--   
--   <a>$sel:clientToken:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_clientToken</a> - Unique, case-sensitive
--   identifier that you provide to ensure the idempotency of the request.
newCreateLicenseVersion :: Text -> Text -> Text -> Issuer -> Text -> DatetimeRange -> ConsumptionConfiguration -> LicenseStatus -> Text -> CreateLicenseVersion

-- | Current version of the license.
createLicenseVersion_sourceVersion :: Lens' CreateLicenseVersion (Maybe Text)

-- | Information about the license.
createLicenseVersion_licenseMetadata :: Lens' CreateLicenseVersion (Maybe [Metadata])

-- | Amazon Resource Name (ARN) of the license.
createLicenseVersion_licenseArn :: Lens' CreateLicenseVersion Text

-- | License name.
createLicenseVersion_licenseName :: Lens' CreateLicenseVersion Text

-- | Product name.
createLicenseVersion_productName :: Lens' CreateLicenseVersion Text

-- | License issuer.
createLicenseVersion_issuer :: Lens' CreateLicenseVersion Issuer

-- | Home Region of the license.
createLicenseVersion_homeRegion :: Lens' CreateLicenseVersion Text

-- | Date and time range during which the license is valid, in ISO8601-UTC
--   format.
createLicenseVersion_validity :: Lens' CreateLicenseVersion DatetimeRange

-- | License entitlements.
createLicenseVersion_entitlements :: Lens' CreateLicenseVersion [Entitlement]

-- | Configuration for consumption of the license. Choose a provisional
--   configuration for workloads running with continuous connectivity.
--   Choose a borrow configuration for workloads with offline usage.
createLicenseVersion_consumptionConfiguration :: Lens' CreateLicenseVersion ConsumptionConfiguration

-- | License status.
createLicenseVersion_status :: Lens' CreateLicenseVersion LicenseStatus

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
createLicenseVersion_clientToken :: Lens' CreateLicenseVersion Text

-- | <i>See:</i> <a>newCreateLicenseVersionResponse</a> smart constructor.
data CreateLicenseVersionResponse
CreateLicenseVersionResponse' :: Maybe LicenseStatus -> Maybe Text -> Maybe Text -> Int -> CreateLicenseVersionResponse

-- | License status.
[$sel:status:CreateLicenseVersionResponse'] :: CreateLicenseVersionResponse -> Maybe LicenseStatus

-- | New version of the license.
[$sel:version:CreateLicenseVersionResponse'] :: CreateLicenseVersionResponse -> Maybe Text

-- | License ARN.
[$sel:licenseArn:CreateLicenseVersionResponse'] :: CreateLicenseVersionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateLicenseVersionResponse'] :: CreateLicenseVersionResponse -> Int

-- | Create a value of <a>CreateLicenseVersionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CreateLicenseVersion'</a>,
--   <a>createLicenseVersionResponse_status</a> - License status.
--   
--   <a>$sel:version:CreateLicenseVersionResponse'</a>,
--   <a>createLicenseVersionResponse_version</a> - New version of the
--   license.
--   
--   <a>$sel:licenseArn:CreateLicenseVersion'</a>,
--   <a>createLicenseVersionResponse_licenseArn</a> - License ARN.
--   
--   <a>$sel:httpStatus:CreateLicenseVersionResponse'</a>,
--   <a>createLicenseVersionResponse_httpStatus</a> - The response's http
--   status code.
newCreateLicenseVersionResponse :: Int -> CreateLicenseVersionResponse

-- | License status.
createLicenseVersionResponse_status :: Lens' CreateLicenseVersionResponse (Maybe LicenseStatus)

-- | New version of the license.
createLicenseVersionResponse_version :: Lens' CreateLicenseVersionResponse (Maybe Text)

-- | License ARN.
createLicenseVersionResponse_licenseArn :: Lens' CreateLicenseVersionResponse (Maybe Text)

-- | The response's http status code.
createLicenseVersionResponse_httpStatus :: Lens' CreateLicenseVersionResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersion
instance GHC.Show.Show Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersion
instance GHC.Read.Read Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersion
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersion
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersionResponse
instance GHC.Show.Show Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersionResponse
instance GHC.Read.Read Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersionResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersionResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersion
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersionResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersion
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersion
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersion
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersion
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersion
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.CreateLicenseVersion.CreateLicenseVersion


-- | Creates a report generator.
module Amazonka.LicenseManager.CreateLicenseManagerReportGenerator

-- | <i>See:</i> <a>newCreateLicenseManagerReportGenerator</a> smart
--   constructor.
data CreateLicenseManagerReportGenerator
CreateLicenseManagerReportGenerator' :: Maybe Text -> Maybe [Tag] -> Text -> [ReportType] -> ReportContext -> ReportFrequency -> Text -> CreateLicenseManagerReportGenerator

-- | Description of the report generator.
[$sel:description:CreateLicenseManagerReportGenerator'] :: CreateLicenseManagerReportGenerator -> Maybe Text

-- | Tags to add to the report generator.
[$sel:tags:CreateLicenseManagerReportGenerator'] :: CreateLicenseManagerReportGenerator -> Maybe [Tag]

-- | Name of the report generator.
[$sel:reportGeneratorName:CreateLicenseManagerReportGenerator'] :: CreateLicenseManagerReportGenerator -> Text

-- | Type of reports to generate. The following report types an be
--   generated:
--   
--   <ul>
--   <li>License configuration report - Reports the number and details of
--   consumed licenses for a license configuration.</li>
--   <li>Resource report - Reports the tracked licenses and resource
--   consumption for a license configuration.</li>
--   </ul>
[$sel:type':CreateLicenseManagerReportGenerator'] :: CreateLicenseManagerReportGenerator -> [ReportType]

-- | Defines the type of license configuration the report generator tracks.
[$sel:reportContext:CreateLicenseManagerReportGenerator'] :: CreateLicenseManagerReportGenerator -> ReportContext

-- | Frequency by which reports are generated. Reports can be generated
--   daily, monthly, or weekly.
[$sel:reportFrequency:CreateLicenseManagerReportGenerator'] :: CreateLicenseManagerReportGenerator -> ReportFrequency

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
[$sel:clientToken:CreateLicenseManagerReportGenerator'] :: CreateLicenseManagerReportGenerator -> Text

-- | Create a value of <a>CreateLicenseManagerReportGenerator</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_description</a> - Description
--   of the report generator.
--   
--   <a>$sel:tags:CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_tags</a> - Tags to add to the
--   report generator.
--   
--   <a>$sel:reportGeneratorName:CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_reportGeneratorName</a> - Name
--   of the report generator.
--   
--   <a>$sel:type':CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_type</a> - Type of reports to
--   generate. The following report types an be generated:
--   
--   <ul>
--   <li>License configuration report - Reports the number and details of
--   consumed licenses for a license configuration.</li>
--   <li>Resource report - Reports the tracked licenses and resource
--   consumption for a license configuration.</li>
--   </ul>
--   
--   <a>$sel:reportContext:CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_reportContext</a> - Defines the
--   type of license configuration the report generator tracks.
--   
--   <a>$sel:reportFrequency:CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_reportFrequency</a> - Frequency
--   by which reports are generated. Reports can be generated daily,
--   monthly, or weekly.
--   
--   <a>$sel:clientToken:CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_clientToken</a> - Unique,
--   case-sensitive identifier that you provide to ensure the idempotency
--   of the request.
newCreateLicenseManagerReportGenerator :: Text -> ReportContext -> ReportFrequency -> Text -> CreateLicenseManagerReportGenerator

-- | Description of the report generator.
createLicenseManagerReportGenerator_description :: Lens' CreateLicenseManagerReportGenerator (Maybe Text)

-- | Tags to add to the report generator.
createLicenseManagerReportGenerator_tags :: Lens' CreateLicenseManagerReportGenerator (Maybe [Tag])

-- | Name of the report generator.
createLicenseManagerReportGenerator_reportGeneratorName :: Lens' CreateLicenseManagerReportGenerator Text

-- | Type of reports to generate. The following report types an be
--   generated:
--   
--   <ul>
--   <li>License configuration report - Reports the number and details of
--   consumed licenses for a license configuration.</li>
--   <li>Resource report - Reports the tracked licenses and resource
--   consumption for a license configuration.</li>
--   </ul>
createLicenseManagerReportGenerator_type :: Lens' CreateLicenseManagerReportGenerator [ReportType]

-- | Defines the type of license configuration the report generator tracks.
createLicenseManagerReportGenerator_reportContext :: Lens' CreateLicenseManagerReportGenerator ReportContext

-- | Frequency by which reports are generated. Reports can be generated
--   daily, monthly, or weekly.
createLicenseManagerReportGenerator_reportFrequency :: Lens' CreateLicenseManagerReportGenerator ReportFrequency

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
createLicenseManagerReportGenerator_clientToken :: Lens' CreateLicenseManagerReportGenerator Text

-- | <i>See:</i> <a>newCreateLicenseManagerReportGeneratorResponse</a>
--   smart constructor.
data CreateLicenseManagerReportGeneratorResponse
CreateLicenseManagerReportGeneratorResponse' :: Maybe Text -> Int -> CreateLicenseManagerReportGeneratorResponse

-- | The Amazon Resource Name (ARN) of the new report generator.
[$sel:licenseManagerReportGeneratorArn:CreateLicenseManagerReportGeneratorResponse'] :: CreateLicenseManagerReportGeneratorResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateLicenseManagerReportGeneratorResponse'] :: CreateLicenseManagerReportGeneratorResponse -> Int

-- | Create a value of <a>CreateLicenseManagerReportGeneratorResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseManagerReportGeneratorArn:CreateLicenseManagerReportGeneratorResponse'</a>,
--   <a>createLicenseManagerReportGeneratorResponse_licenseManagerReportGeneratorArn</a>
--   - The Amazon Resource Name (ARN) of the new report generator.
--   
--   <a>$sel:httpStatus:CreateLicenseManagerReportGeneratorResponse'</a>,
--   <a>createLicenseManagerReportGeneratorResponse_httpStatus</a> - The
--   response's http status code.
newCreateLicenseManagerReportGeneratorResponse :: Int -> CreateLicenseManagerReportGeneratorResponse

-- | The Amazon Resource Name (ARN) of the new report generator.
createLicenseManagerReportGeneratorResponse_licenseManagerReportGeneratorArn :: Lens' CreateLicenseManagerReportGeneratorResponse (Maybe Text)

-- | The response's http status code.
createLicenseManagerReportGeneratorResponse_httpStatus :: Lens' CreateLicenseManagerReportGeneratorResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGenerator
instance GHC.Show.Show Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGenerator
instance GHC.Read.Read Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGenerator
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGenerator
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGeneratorResponse
instance GHC.Show.Show Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGeneratorResponse
instance GHC.Read.Read Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGeneratorResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGeneratorResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGenerator
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGeneratorResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGenerator
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGenerator
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGenerator
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGenerator
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGenerator
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.CreateLicenseManagerReportGenerator.CreateLicenseManagerReportGenerator


-- | Creates a new license conversion task.
module Amazonka.LicenseManager.CreateLicenseConversionTaskForResource

-- | <i>See:</i> <a>newCreateLicenseConversionTaskForResource</a> smart
--   constructor.
data CreateLicenseConversionTaskForResource
CreateLicenseConversionTaskForResource' :: Text -> LicenseConversionContext -> LicenseConversionContext -> CreateLicenseConversionTaskForResource

-- | Amazon Resource Name (ARN) of the resource you are converting the
--   license type for.
[$sel:resourceArn:CreateLicenseConversionTaskForResource'] :: CreateLicenseConversionTaskForResource -> Text

-- | Information that identifies the license type you are converting from.
--   For the structure of the source license, see <a>Convert a license type
--   using the AWS CLI</a> in the <i>License Manager User Guide</i>.
[$sel:sourceLicenseContext:CreateLicenseConversionTaskForResource'] :: CreateLicenseConversionTaskForResource -> LicenseConversionContext

-- | Information that identifies the license type you are converting to.
--   For the structure of the destination license, see <a>Convert a license
--   type using the AWS CLI</a> in the <i>License Manager User Guide</i>.
[$sel:destinationLicenseContext:CreateLicenseConversionTaskForResource'] :: CreateLicenseConversionTaskForResource -> LicenseConversionContext

-- | Create a value of <a>CreateLicenseConversionTaskForResource</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:CreateLicenseConversionTaskForResource'</a>,
--   <a>createLicenseConversionTaskForResource_resourceArn</a> - Amazon
--   Resource Name (ARN) of the resource you are converting the license
--   type for.
--   
--   
--   <a>$sel:sourceLicenseContext:CreateLicenseConversionTaskForResource'</a>,
--   <a>createLicenseConversionTaskForResource_sourceLicenseContext</a> -
--   Information that identifies the license type you are converting from.
--   For the structure of the source license, see <a>Convert a license type
--   using the AWS CLI</a> in the <i>License Manager User Guide</i>.
--   
--   
--   <a>$sel:destinationLicenseContext:CreateLicenseConversionTaskForResource'</a>,
--   <a>createLicenseConversionTaskForResource_destinationLicenseContext</a>
--   - Information that identifies the license type you are converting to.
--   For the structure of the destination license, see <a>Convert a license
--   type using the AWS CLI</a> in the <i>License Manager User Guide</i>.
newCreateLicenseConversionTaskForResource :: Text -> LicenseConversionContext -> LicenseConversionContext -> CreateLicenseConversionTaskForResource

-- | Amazon Resource Name (ARN) of the resource you are converting the
--   license type for.
createLicenseConversionTaskForResource_resourceArn :: Lens' CreateLicenseConversionTaskForResource Text

-- | Information that identifies the license type you are converting from.
--   For the structure of the source license, see <a>Convert a license type
--   using the AWS CLI</a> in the <i>License Manager User Guide</i>.
createLicenseConversionTaskForResource_sourceLicenseContext :: Lens' CreateLicenseConversionTaskForResource LicenseConversionContext

-- | Information that identifies the license type you are converting to.
--   For the structure of the destination license, see <a>Convert a license
--   type using the AWS CLI</a> in the <i>License Manager User Guide</i>.
createLicenseConversionTaskForResource_destinationLicenseContext :: Lens' CreateLicenseConversionTaskForResource LicenseConversionContext

-- | <i>See:</i> <a>newCreateLicenseConversionTaskForResourceResponse</a>
--   smart constructor.
data CreateLicenseConversionTaskForResourceResponse
CreateLicenseConversionTaskForResourceResponse' :: Maybe Text -> Int -> CreateLicenseConversionTaskForResourceResponse

-- | The ID of the created license type conversion task.
[$sel:licenseConversionTaskId:CreateLicenseConversionTaskForResourceResponse'] :: CreateLicenseConversionTaskForResourceResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateLicenseConversionTaskForResourceResponse'] :: CreateLicenseConversionTaskForResourceResponse -> Int

-- | Create a value of
--   <a>CreateLicenseConversionTaskForResourceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseConversionTaskId:CreateLicenseConversionTaskForResourceResponse'</a>,
--   <a>createLicenseConversionTaskForResourceResponse_licenseConversionTaskId</a>
--   - The ID of the created license type conversion task.
--   
--   
--   <a>$sel:httpStatus:CreateLicenseConversionTaskForResourceResponse'</a>,
--   <a>createLicenseConversionTaskForResourceResponse_httpStatus</a> - The
--   response's http status code.
newCreateLicenseConversionTaskForResourceResponse :: Int -> CreateLicenseConversionTaskForResourceResponse

-- | The ID of the created license type conversion task.
createLicenseConversionTaskForResourceResponse_licenseConversionTaskId :: Lens' CreateLicenseConversionTaskForResourceResponse (Maybe Text)

-- | The response's http status code.
createLicenseConversionTaskForResourceResponse_httpStatus :: Lens' CreateLicenseConversionTaskForResourceResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResource
instance GHC.Show.Show Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResource
instance GHC.Read.Read Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResource
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResource
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResourceResponse
instance GHC.Show.Show Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResourceResponse
instance GHC.Read.Read Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResourceResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResource
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResource
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResource
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResource
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.CreateLicenseConversionTaskForResource.CreateLicenseConversionTaskForResource


-- | Creates a license configuration.
--   
--   A license configuration is an abstraction of a customer license
--   agreement that can be consumed and enforced by License Manager.
--   Components include specifications for the license type (licensing by
--   instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy,
--   Dedicated Instance, Dedicated Host, or all of these), license affinity
--   to host (how long a license must be associated with a host), and the
--   number of licenses purchased and used.
module Amazonka.LicenseManager.CreateLicenseConfiguration

-- | <i>See:</i> <a>newCreateLicenseConfiguration</a> smart constructor.
data CreateLicenseConfiguration
CreateLicenseConfiguration' :: Maybe Integer -> Maybe Bool -> Maybe Bool -> Maybe [ProductInformation] -> Maybe [Text] -> Maybe Text -> Maybe [Tag] -> Text -> LicenseCountingType -> CreateLicenseConfiguration

-- | Number of licenses managed by the license configuration.
[$sel:licenseCount:CreateLicenseConfiguration'] :: CreateLicenseConfiguration -> Maybe Integer

-- | Indicates whether hard or soft license enforcement is used. Exceeding
--   a hard limit blocks the launch of new instances.
[$sel:licenseCountHardLimit:CreateLicenseConfiguration'] :: CreateLicenseConfiguration -> Maybe Bool

-- | When true, disassociates a resource when software is uninstalled.
[$sel:disassociateWhenNotFound:CreateLicenseConfiguration'] :: CreateLicenseConfiguration -> Maybe Bool

-- | Product information.
[$sel:productInformationList:CreateLicenseConfiguration'] :: CreateLicenseConfiguration -> Maybe [ProductInformation]

-- | License rules. The syntax is #name=value (for example,
--   #allowedTenancy=EC2-DedicatedHost). The available rules vary by
--   dimension, as follows.
--   
--   <ul>
--   <li><tt>Cores</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>licenseAffinityToHost</tt> | <tt>maximumCores</tt> |
--   <tt>minimumCores</tt></li>
--   <li><tt>Instances</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>maximumCores</tt> | <tt>minimumCores</tt> |
--   <tt>maximumSockets</tt> | <tt>minimumSockets</tt> |
--   <tt>maximumVcpus</tt> | <tt>minimumVcpus</tt></li>
--   <li><tt>Sockets</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>licenseAffinityToHost</tt> | <tt>maximumSockets</tt> |
--   <tt>minimumSockets</tt></li>
--   <li><tt>vCPUs</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>honorVcpuOptimization</tt> | <tt>maximumVcpus</tt> |
--   <tt>minimumVcpus</tt></li>
--   </ul>
--   
--   The unit for <tt>licenseAffinityToHost</tt> is days and the range is 1
--   to 180. The possible values for <tt>allowedTenancy</tt> are
--   <tt>EC2-Default</tt>, <tt>EC2-DedicatedHost</tt>, and
--   <tt>EC2-DedicatedInstance</tt>. The possible values for
--   <tt>honorVcpuOptimization</tt> are <tt>True</tt> and <tt>False</tt>.
[$sel:licenseRules:CreateLicenseConfiguration'] :: CreateLicenseConfiguration -> Maybe [Text]

-- | Description of the license configuration.
[$sel:description:CreateLicenseConfiguration'] :: CreateLicenseConfiguration -> Maybe Text

-- | Tags to add to the license configuration.
[$sel:tags:CreateLicenseConfiguration'] :: CreateLicenseConfiguration -> Maybe [Tag]

-- | Name of the license configuration.
[$sel:name:CreateLicenseConfiguration'] :: CreateLicenseConfiguration -> Text

-- | Dimension used to track the license inventory.
[$sel:licenseCountingType:CreateLicenseConfiguration'] :: CreateLicenseConfiguration -> LicenseCountingType

-- | Create a value of <a>CreateLicenseConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseCount:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_licenseCount</a> - Number of licenses
--   managed by the license configuration.
--   
--   <a>$sel:licenseCountHardLimit:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_licenseCountHardLimit</a> - Indicates
--   whether hard or soft license enforcement is used. Exceeding a hard
--   limit blocks the launch of new instances.
--   
--   <a>$sel:disassociateWhenNotFound:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_disassociateWhenNotFound</a> - When
--   true, disassociates a resource when software is uninstalled.
--   
--   <a>$sel:productInformationList:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_productInformationList</a> - Product
--   information.
--   
--   <a>$sel:licenseRules:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_licenseRules</a> - License rules. The
--   syntax is #name=value (for example,
--   #allowedTenancy=EC2-DedicatedHost). The available rules vary by
--   dimension, as follows.
--   
--   <ul>
--   <li><tt>Cores</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>licenseAffinityToHost</tt> | <tt>maximumCores</tt> |
--   <tt>minimumCores</tt></li>
--   <li><tt>Instances</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>maximumCores</tt> | <tt>minimumCores</tt> |
--   <tt>maximumSockets</tt> | <tt>minimumSockets</tt> |
--   <tt>maximumVcpus</tt> | <tt>minimumVcpus</tt></li>
--   <li><tt>Sockets</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>licenseAffinityToHost</tt> | <tt>maximumSockets</tt> |
--   <tt>minimumSockets</tt></li>
--   <li><tt>vCPUs</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>honorVcpuOptimization</tt> | <tt>maximumVcpus</tt> |
--   <tt>minimumVcpus</tt></li>
--   </ul>
--   
--   The unit for <tt>licenseAffinityToHost</tt> is days and the range is 1
--   to 180. The possible values for <tt>allowedTenancy</tt> are
--   <tt>EC2-Default</tt>, <tt>EC2-DedicatedHost</tt>, and
--   <tt>EC2-DedicatedInstance</tt>. The possible values for
--   <tt>honorVcpuOptimization</tt> are <tt>True</tt> and <tt>False</tt>.
--   
--   <a>$sel:description:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_description</a> - Description of the
--   license configuration.
--   
--   <a>$sel:tags:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_tags</a> - Tags to add to the license
--   configuration.
--   
--   <a>$sel:name:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_name</a> - Name of the license
--   configuration.
--   
--   <a>$sel:licenseCountingType:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_licenseCountingType</a> - Dimension used
--   to track the license inventory.
newCreateLicenseConfiguration :: Text -> LicenseCountingType -> CreateLicenseConfiguration

-- | Number of licenses managed by the license configuration.
createLicenseConfiguration_licenseCount :: Lens' CreateLicenseConfiguration (Maybe Integer)

-- | Indicates whether hard or soft license enforcement is used. Exceeding
--   a hard limit blocks the launch of new instances.
createLicenseConfiguration_licenseCountHardLimit :: Lens' CreateLicenseConfiguration (Maybe Bool)

-- | When true, disassociates a resource when software is uninstalled.
createLicenseConfiguration_disassociateWhenNotFound :: Lens' CreateLicenseConfiguration (Maybe Bool)

-- | Product information.
createLicenseConfiguration_productInformationList :: Lens' CreateLicenseConfiguration (Maybe [ProductInformation])

-- | License rules. The syntax is #name=value (for example,
--   #allowedTenancy=EC2-DedicatedHost). The available rules vary by
--   dimension, as follows.
--   
--   <ul>
--   <li><tt>Cores</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>licenseAffinityToHost</tt> | <tt>maximumCores</tt> |
--   <tt>minimumCores</tt></li>
--   <li><tt>Instances</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>maximumCores</tt> | <tt>minimumCores</tt> |
--   <tt>maximumSockets</tt> | <tt>minimumSockets</tt> |
--   <tt>maximumVcpus</tt> | <tt>minimumVcpus</tt></li>
--   <li><tt>Sockets</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>licenseAffinityToHost</tt> | <tt>maximumSockets</tt> |
--   <tt>minimumSockets</tt></li>
--   <li><tt>vCPUs</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>honorVcpuOptimization</tt> | <tt>maximumVcpus</tt> |
--   <tt>minimumVcpus</tt></li>
--   </ul>
--   
--   The unit for <tt>licenseAffinityToHost</tt> is days and the range is 1
--   to 180. The possible values for <tt>allowedTenancy</tt> are
--   <tt>EC2-Default</tt>, <tt>EC2-DedicatedHost</tt>, and
--   <tt>EC2-DedicatedInstance</tt>. The possible values for
--   <tt>honorVcpuOptimization</tt> are <tt>True</tt> and <tt>False</tt>.
createLicenseConfiguration_licenseRules :: Lens' CreateLicenseConfiguration (Maybe [Text])

-- | Description of the license configuration.
createLicenseConfiguration_description :: Lens' CreateLicenseConfiguration (Maybe Text)

-- | Tags to add to the license configuration.
createLicenseConfiguration_tags :: Lens' CreateLicenseConfiguration (Maybe [Tag])

-- | Name of the license configuration.
createLicenseConfiguration_name :: Lens' CreateLicenseConfiguration Text

-- | Dimension used to track the license inventory.
createLicenseConfiguration_licenseCountingType :: Lens' CreateLicenseConfiguration LicenseCountingType

-- | <i>See:</i> <a>newCreateLicenseConfigurationResponse</a> smart
--   constructor.
data CreateLicenseConfigurationResponse
CreateLicenseConfigurationResponse' :: Maybe Text -> Int -> CreateLicenseConfigurationResponse

-- | Amazon Resource Name (ARN) of the license configuration.
[$sel:licenseConfigurationArn:CreateLicenseConfigurationResponse'] :: CreateLicenseConfigurationResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateLicenseConfigurationResponse'] :: CreateLicenseConfigurationResponse -> Int

-- | Create a value of <a>CreateLicenseConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseConfigurationArn:CreateLicenseConfigurationResponse'</a>,
--   <a>createLicenseConfigurationResponse_licenseConfigurationArn</a> -
--   Amazon Resource Name (ARN) of the license configuration.
--   
--   <a>$sel:httpStatus:CreateLicenseConfigurationResponse'</a>,
--   <a>createLicenseConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newCreateLicenseConfigurationResponse :: Int -> CreateLicenseConfigurationResponse

-- | Amazon Resource Name (ARN) of the license configuration.
createLicenseConfigurationResponse_licenseConfigurationArn :: Lens' CreateLicenseConfigurationResponse (Maybe Text)

-- | The response's http status code.
createLicenseConfigurationResponse_httpStatus :: Lens' CreateLicenseConfigurationResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfiguration
instance GHC.Show.Show Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfiguration
instance GHC.Read.Read Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfiguration
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfiguration
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfigurationResponse
instance GHC.Show.Show Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfigurationResponse
instance GHC.Read.Read Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfigurationResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfigurationResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.CreateLicenseConfiguration.CreateLicenseConfiguration


-- | Creates a license.
module Amazonka.LicenseManager.CreateLicense

-- | <i>See:</i> <a>newCreateLicense</a> smart constructor.
data CreateLicense
CreateLicense' :: Maybe [Metadata] -> Text -> Text -> Text -> Issuer -> Text -> DatetimeRange -> [Entitlement] -> Text -> ConsumptionConfiguration -> Text -> CreateLicense

-- | Information about the license.
[$sel:licenseMetadata:CreateLicense'] :: CreateLicense -> Maybe [Metadata]

-- | License name.
[$sel:licenseName:CreateLicense'] :: CreateLicense -> Text

-- | Product name.
[$sel:productName:CreateLicense'] :: CreateLicense -> Text

-- | Product SKU.
[$sel:productSKU:CreateLicense'] :: CreateLicense -> Text

-- | License issuer.
[$sel:issuer:CreateLicense'] :: CreateLicense -> Issuer

-- | Home Region for the license.
[$sel:homeRegion:CreateLicense'] :: CreateLicense -> Text

-- | Date and time range during which the license is valid, in ISO8601-UTC
--   format.
[$sel:validity:CreateLicense'] :: CreateLicense -> DatetimeRange

-- | License entitlements.
[$sel:entitlements:CreateLicense'] :: CreateLicense -> [Entitlement]

-- | License beneficiary.
[$sel:beneficiary:CreateLicense'] :: CreateLicense -> Text

-- | Configuration for consumption of the license. Choose a provisional
--   configuration for workloads running with continuous connectivity.
--   Choose a borrow configuration for workloads with offline usage.
[$sel:consumptionConfiguration:CreateLicense'] :: CreateLicense -> ConsumptionConfiguration

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
[$sel:clientToken:CreateLicense'] :: CreateLicense -> Text

-- | Create a value of <a>CreateLicense</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseMetadata:CreateLicense'</a>,
--   <a>createLicense_licenseMetadata</a> - Information about the license.
--   
--   <a>$sel:licenseName:CreateLicense'</a>,
--   <a>createLicense_licenseName</a> - License name.
--   
--   <a>$sel:productName:CreateLicense'</a>,
--   <a>createLicense_productName</a> - Product name.
--   
--   <a>$sel:productSKU:CreateLicense'</a>, <a>createLicense_productSKU</a>
--   - Product SKU.
--   
--   <a>$sel:issuer:CreateLicense'</a>, <a>createLicense_issuer</a> -
--   License issuer.
--   
--   <a>$sel:homeRegion:CreateLicense'</a>, <a>createLicense_homeRegion</a>
--   - Home Region for the license.
--   
--   <a>$sel:validity:CreateLicense'</a>, <a>createLicense_validity</a> -
--   Date and time range during which the license is valid, in ISO8601-UTC
--   format.
--   
--   <a>$sel:entitlements:CreateLicense'</a>,
--   <a>createLicense_entitlements</a> - License entitlements.
--   
--   <a>$sel:beneficiary:CreateLicense'</a>,
--   <a>createLicense_beneficiary</a> - License beneficiary.
--   
--   <a>$sel:consumptionConfiguration:CreateLicense'</a>,
--   <a>createLicense_consumptionConfiguration</a> - Configuration for
--   consumption of the license. Choose a provisional configuration for
--   workloads running with continuous connectivity. Choose a borrow
--   configuration for workloads with offline usage.
--   
--   <a>$sel:clientToken:CreateLicense'</a>,
--   <a>createLicense_clientToken</a> - Unique, case-sensitive identifier
--   that you provide to ensure the idempotency of the request.
newCreateLicense :: Text -> Text -> Text -> Issuer -> Text -> DatetimeRange -> Text -> ConsumptionConfiguration -> Text -> CreateLicense

-- | Information about the license.
createLicense_licenseMetadata :: Lens' CreateLicense (Maybe [Metadata])

-- | License name.
createLicense_licenseName :: Lens' CreateLicense Text

-- | Product name.
createLicense_productName :: Lens' CreateLicense Text

-- | Product SKU.
createLicense_productSKU :: Lens' CreateLicense Text

-- | License issuer.
createLicense_issuer :: Lens' CreateLicense Issuer

-- | Home Region for the license.
createLicense_homeRegion :: Lens' CreateLicense Text

-- | Date and time range during which the license is valid, in ISO8601-UTC
--   format.
createLicense_validity :: Lens' CreateLicense DatetimeRange

-- | License entitlements.
createLicense_entitlements :: Lens' CreateLicense [Entitlement]

-- | License beneficiary.
createLicense_beneficiary :: Lens' CreateLicense Text

-- | Configuration for consumption of the license. Choose a provisional
--   configuration for workloads running with continuous connectivity.
--   Choose a borrow configuration for workloads with offline usage.
createLicense_consumptionConfiguration :: Lens' CreateLicense ConsumptionConfiguration

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
createLicense_clientToken :: Lens' CreateLicense Text

-- | <i>See:</i> <a>newCreateLicenseResponse</a> smart constructor.
data CreateLicenseResponse
CreateLicenseResponse' :: Maybe LicenseStatus -> Maybe Text -> Maybe Text -> Int -> CreateLicenseResponse

-- | License status.
[$sel:status:CreateLicenseResponse'] :: CreateLicenseResponse -> Maybe LicenseStatus

-- | License version.
[$sel:version:CreateLicenseResponse'] :: CreateLicenseResponse -> Maybe Text

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:CreateLicenseResponse'] :: CreateLicenseResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateLicenseResponse'] :: CreateLicenseResponse -> Int

-- | Create a value of <a>CreateLicenseResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CreateLicenseResponse'</a>,
--   <a>createLicenseResponse_status</a> - License status.
--   
--   <a>$sel:version:CreateLicenseResponse'</a>,
--   <a>createLicenseResponse_version</a> - License version.
--   
--   <a>$sel:licenseArn:CreateLicenseResponse'</a>,
--   <a>createLicenseResponse_licenseArn</a> - Amazon Resource Name (ARN)
--   of the license.
--   
--   <a>$sel:httpStatus:CreateLicenseResponse'</a>,
--   <a>createLicenseResponse_httpStatus</a> - The response's http status
--   code.
newCreateLicenseResponse :: Int -> CreateLicenseResponse

-- | License status.
createLicenseResponse_status :: Lens' CreateLicenseResponse (Maybe LicenseStatus)

-- | License version.
createLicenseResponse_version :: Lens' CreateLicenseResponse (Maybe Text)

-- | Amazon Resource Name (ARN) of the license.
createLicenseResponse_licenseArn :: Lens' CreateLicenseResponse (Maybe Text)

-- | The response's http status code.
createLicenseResponse_httpStatus :: Lens' CreateLicenseResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateLicense.CreateLicense
instance GHC.Show.Show Amazonka.LicenseManager.CreateLicense.CreateLicense
instance GHC.Read.Read Amazonka.LicenseManager.CreateLicense.CreateLicense
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateLicense.CreateLicense
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateLicense.CreateLicenseResponse
instance GHC.Show.Show Amazonka.LicenseManager.CreateLicense.CreateLicenseResponse
instance GHC.Read.Read Amazonka.LicenseManager.CreateLicense.CreateLicenseResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateLicense.CreateLicenseResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.CreateLicense.CreateLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateLicense.CreateLicenseResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.CreateLicense.CreateLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateLicense.CreateLicense
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.CreateLicense.CreateLicense
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.CreateLicense.CreateLicense
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.CreateLicense.CreateLicense
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.CreateLicense.CreateLicense


-- | Creates a new version of the specified grant.
module Amazonka.LicenseManager.CreateGrantVersion

-- | <i>See:</i> <a>newCreateGrantVersion</a> smart constructor.
data CreateGrantVersion
CreateGrantVersion' :: Maybe GrantStatus -> Maybe (NonEmpty AllowedOperation) -> Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> CreateGrantVersion

-- | Grant status.
[$sel:status:CreateGrantVersion'] :: CreateGrantVersion -> Maybe GrantStatus

-- | Allowed operations for the grant.
[$sel:allowedOperations:CreateGrantVersion'] :: CreateGrantVersion -> Maybe (NonEmpty AllowedOperation)

-- | Grant name.
[$sel:grantName:CreateGrantVersion'] :: CreateGrantVersion -> Maybe Text

-- | Current version of the grant.
[$sel:sourceVersion:CreateGrantVersion'] :: CreateGrantVersion -> Maybe Text

-- | Grant status reason.
[$sel:statusReason:CreateGrantVersion'] :: CreateGrantVersion -> Maybe Text

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
[$sel:clientToken:CreateGrantVersion'] :: CreateGrantVersion -> Text

-- | Amazon Resource Name (ARN) of the grant.
[$sel:grantArn:CreateGrantVersion'] :: CreateGrantVersion -> Text

-- | Create a value of <a>CreateGrantVersion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CreateGrantVersion'</a>,
--   <a>createGrantVersion_status</a> - Grant status.
--   
--   <a>$sel:allowedOperations:CreateGrantVersion'</a>,
--   <a>createGrantVersion_allowedOperations</a> - Allowed operations for
--   the grant.
--   
--   <a>$sel:grantName:CreateGrantVersion'</a>,
--   <a>createGrantVersion_grantName</a> - Grant name.
--   
--   <a>$sel:sourceVersion:CreateGrantVersion'</a>,
--   <a>createGrantVersion_sourceVersion</a> - Current version of the
--   grant.
--   
--   <a>$sel:statusReason:CreateGrantVersion'</a>,
--   <a>createGrantVersion_statusReason</a> - Grant status reason.
--   
--   <a>$sel:clientToken:CreateGrantVersion'</a>,
--   <a>createGrantVersion_clientToken</a> - Unique, case-sensitive
--   identifier that you provide to ensure the idempotency of the request.
--   
--   <a>$sel:grantArn:CreateGrantVersion'</a>,
--   <a>createGrantVersion_grantArn</a> - Amazon Resource Name (ARN) of the
--   grant.
newCreateGrantVersion :: Text -> Text -> CreateGrantVersion

-- | Grant status.
createGrantVersion_status :: Lens' CreateGrantVersion (Maybe GrantStatus)

-- | Allowed operations for the grant.
createGrantVersion_allowedOperations :: Lens' CreateGrantVersion (Maybe (NonEmpty AllowedOperation))

-- | Grant name.
createGrantVersion_grantName :: Lens' CreateGrantVersion (Maybe Text)

-- | Current version of the grant.
createGrantVersion_sourceVersion :: Lens' CreateGrantVersion (Maybe Text)

-- | Grant status reason.
createGrantVersion_statusReason :: Lens' CreateGrantVersion (Maybe Text)

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
createGrantVersion_clientToken :: Lens' CreateGrantVersion Text

-- | Amazon Resource Name (ARN) of the grant.
createGrantVersion_grantArn :: Lens' CreateGrantVersion Text

-- | <i>See:</i> <a>newCreateGrantVersionResponse</a> smart constructor.
data CreateGrantVersionResponse
CreateGrantVersionResponse' :: Maybe GrantStatus -> Maybe Text -> Maybe Text -> Int -> CreateGrantVersionResponse

-- | Grant status.
[$sel:status:CreateGrantVersionResponse'] :: CreateGrantVersionResponse -> Maybe GrantStatus

-- | New version of the grant.
[$sel:version:CreateGrantVersionResponse'] :: CreateGrantVersionResponse -> Maybe Text

-- | Grant ARN.
[$sel:grantArn:CreateGrantVersionResponse'] :: CreateGrantVersionResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateGrantVersionResponse'] :: CreateGrantVersionResponse -> Int

-- | Create a value of <a>CreateGrantVersionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CreateGrantVersion'</a>,
--   <a>createGrantVersionResponse_status</a> - Grant status.
--   
--   <a>$sel:version:CreateGrantVersionResponse'</a>,
--   <a>createGrantVersionResponse_version</a> - New version of the grant.
--   
--   <a>$sel:grantArn:CreateGrantVersion'</a>,
--   <a>createGrantVersionResponse_grantArn</a> - Grant ARN.
--   
--   <a>$sel:httpStatus:CreateGrantVersionResponse'</a>,
--   <a>createGrantVersionResponse_httpStatus</a> - The response's http
--   status code.
newCreateGrantVersionResponse :: Int -> CreateGrantVersionResponse

-- | Grant status.
createGrantVersionResponse_status :: Lens' CreateGrantVersionResponse (Maybe GrantStatus)

-- | New version of the grant.
createGrantVersionResponse_version :: Lens' CreateGrantVersionResponse (Maybe Text)

-- | Grant ARN.
createGrantVersionResponse_grantArn :: Lens' CreateGrantVersionResponse (Maybe Text)

-- | The response's http status code.
createGrantVersionResponse_httpStatus :: Lens' CreateGrantVersionResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersion
instance GHC.Show.Show Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersion
instance GHC.Read.Read Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersion
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersion
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersionResponse
instance GHC.Show.Show Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersionResponse
instance GHC.Read.Read Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersionResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersionResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersion
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersionResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersion
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersion
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersion
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersion
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersion
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.CreateGrantVersion.CreateGrantVersion


-- | Creates a grant for the specified license. A grant shares the use of
--   license entitlements with specific Amazon Web Services accounts.
module Amazonka.LicenseManager.CreateGrant

-- | <i>See:</i> <a>newCreateGrant</a> smart constructor.
data CreateGrant
CreateGrant' :: Text -> Text -> Text -> NonEmpty Text -> Text -> NonEmpty AllowedOperation -> CreateGrant

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
[$sel:clientToken:CreateGrant'] :: CreateGrant -> Text

-- | Grant name.
[$sel:grantName:CreateGrant'] :: CreateGrant -> Text

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:CreateGrant'] :: CreateGrant -> Text

-- | The grant principals.
[$sel:principals:CreateGrant'] :: CreateGrant -> NonEmpty Text

-- | Home Region of the grant.
[$sel:homeRegion:CreateGrant'] :: CreateGrant -> Text

-- | Allowed operations for the grant.
[$sel:allowedOperations:CreateGrant'] :: CreateGrant -> NonEmpty AllowedOperation

-- | Create a value of <a>CreateGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:CreateGrant'</a>, <a>createGrant_clientToken</a> -
--   Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
--   
--   <a>$sel:grantName:CreateGrant'</a>, <a>createGrant_grantName</a> -
--   Grant name.
--   
--   <a>$sel:licenseArn:CreateGrant'</a>, <a>createGrant_licenseArn</a> -
--   Amazon Resource Name (ARN) of the license.
--   
--   <a>$sel:principals:CreateGrant'</a>, <a>createGrant_principals</a> -
--   The grant principals.
--   
--   <a>$sel:homeRegion:CreateGrant'</a>, <a>createGrant_homeRegion</a> -
--   Home Region of the grant.
--   
--   <a>$sel:allowedOperations:CreateGrant'</a>,
--   <a>createGrant_allowedOperations</a> - Allowed operations for the
--   grant.
newCreateGrant :: Text -> Text -> Text -> NonEmpty Text -> Text -> NonEmpty AllowedOperation -> CreateGrant

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
createGrant_clientToken :: Lens' CreateGrant Text

-- | Grant name.
createGrant_grantName :: Lens' CreateGrant Text

-- | Amazon Resource Name (ARN) of the license.
createGrant_licenseArn :: Lens' CreateGrant Text

-- | The grant principals.
createGrant_principals :: Lens' CreateGrant (NonEmpty Text)

-- | Home Region of the grant.
createGrant_homeRegion :: Lens' CreateGrant Text

-- | Allowed operations for the grant.
createGrant_allowedOperations :: Lens' CreateGrant (NonEmpty AllowedOperation)

-- | <i>See:</i> <a>newCreateGrantResponse</a> smart constructor.
data CreateGrantResponse
CreateGrantResponse' :: Maybe GrantStatus -> Maybe Text -> Maybe Text -> Int -> CreateGrantResponse

-- | Grant status.
[$sel:status:CreateGrantResponse'] :: CreateGrantResponse -> Maybe GrantStatus

-- | Grant version.
[$sel:version:CreateGrantResponse'] :: CreateGrantResponse -> Maybe Text

-- | Grant ARN.
[$sel:grantArn:CreateGrantResponse'] :: CreateGrantResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CreateGrantResponse'] :: CreateGrantResponse -> Int

-- | Create a value of <a>CreateGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CreateGrantResponse'</a>,
--   <a>createGrantResponse_status</a> - Grant status.
--   
--   <a>$sel:version:CreateGrantResponse'</a>,
--   <a>createGrantResponse_version</a> - Grant version.
--   
--   <a>$sel:grantArn:CreateGrantResponse'</a>,
--   <a>createGrantResponse_grantArn</a> - Grant ARN.
--   
--   <a>$sel:httpStatus:CreateGrantResponse'</a>,
--   <a>createGrantResponse_httpStatus</a> - The response's http status
--   code.
newCreateGrantResponse :: Int -> CreateGrantResponse

-- | Grant status.
createGrantResponse_status :: Lens' CreateGrantResponse (Maybe GrantStatus)

-- | Grant version.
createGrantResponse_version :: Lens' CreateGrantResponse (Maybe Text)

-- | Grant ARN.
createGrantResponse_grantArn :: Lens' CreateGrantResponse (Maybe Text)

-- | The response's http status code.
createGrantResponse_httpStatus :: Lens' CreateGrantResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateGrant.CreateGrant
instance GHC.Show.Show Amazonka.LicenseManager.CreateGrant.CreateGrant
instance GHC.Read.Read Amazonka.LicenseManager.CreateGrant.CreateGrant
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateGrant.CreateGrant
instance GHC.Generics.Generic Amazonka.LicenseManager.CreateGrant.CreateGrantResponse
instance GHC.Show.Show Amazonka.LicenseManager.CreateGrant.CreateGrantResponse
instance GHC.Read.Read Amazonka.LicenseManager.CreateGrant.CreateGrantResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.CreateGrant.CreateGrantResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.CreateGrant.CreateGrant
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateGrant.CreateGrantResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.CreateGrant.CreateGrant
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CreateGrant.CreateGrant
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.CreateGrant.CreateGrant
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.CreateGrant.CreateGrant
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.CreateGrant.CreateGrant
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.CreateGrant.CreateGrant


-- | Checks out the specified license.
module Amazonka.LicenseManager.CheckoutLicense

-- | <i>See:</i> <a>newCheckoutLicense</a> smart constructor.
data CheckoutLicense
CheckoutLicense' :: Maybe Text -> Maybe Text -> Text -> CheckoutType -> Text -> [EntitlementData] -> Text -> CheckoutLicense

-- | Node ID.
[$sel:nodeId:CheckoutLicense'] :: CheckoutLicense -> Maybe Text

-- | License beneficiary.
[$sel:beneficiary:CheckoutLicense'] :: CheckoutLicense -> Maybe Text

-- | Product SKU.
[$sel:productSKU:CheckoutLicense'] :: CheckoutLicense -> Text

-- | Checkout type.
[$sel:checkoutType:CheckoutLicense'] :: CheckoutLicense -> CheckoutType

-- | Key fingerprint identifying the license.
[$sel:keyFingerprint:CheckoutLicense'] :: CheckoutLicense -> Text

-- | License entitlements.
[$sel:entitlements:CheckoutLicense'] :: CheckoutLicense -> [EntitlementData]

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
[$sel:clientToken:CheckoutLicense'] :: CheckoutLicense -> Text

-- | Create a value of <a>CheckoutLicense</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nodeId:CheckoutLicense'</a>, <a>checkoutLicense_nodeId</a> -
--   Node ID.
--   
--   <a>$sel:beneficiary:CheckoutLicense'</a>,
--   <a>checkoutLicense_beneficiary</a> - License beneficiary.
--   
--   <a>$sel:productSKU:CheckoutLicense'</a>,
--   <a>checkoutLicense_productSKU</a> - Product SKU.
--   
--   <a>$sel:checkoutType:CheckoutLicense'</a>,
--   <a>checkoutLicense_checkoutType</a> - Checkout type.
--   
--   <a>$sel:keyFingerprint:CheckoutLicense'</a>,
--   <a>checkoutLicense_keyFingerprint</a> - Key fingerprint identifying
--   the license.
--   
--   <a>$sel:entitlements:CheckoutLicense'</a>,
--   <a>checkoutLicense_entitlements</a> - License entitlements.
--   
--   <a>$sel:clientToken:CheckoutLicense'</a>,
--   <a>checkoutLicense_clientToken</a> - Unique, case-sensitive identifier
--   that you provide to ensure the idempotency of the request.
newCheckoutLicense :: Text -> CheckoutType -> Text -> Text -> CheckoutLicense

-- | Node ID.
checkoutLicense_nodeId :: Lens' CheckoutLicense (Maybe Text)

-- | License beneficiary.
checkoutLicense_beneficiary :: Lens' CheckoutLicense (Maybe Text)

-- | Product SKU.
checkoutLicense_productSKU :: Lens' CheckoutLicense Text

-- | Checkout type.
checkoutLicense_checkoutType :: Lens' CheckoutLicense CheckoutType

-- | Key fingerprint identifying the license.
checkoutLicense_keyFingerprint :: Lens' CheckoutLicense Text

-- | License entitlements.
checkoutLicense_entitlements :: Lens' CheckoutLicense [EntitlementData]

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
checkoutLicense_clientToken :: Lens' CheckoutLicense Text

-- | <i>See:</i> <a>newCheckoutLicenseResponse</a> smart constructor.
data CheckoutLicenseResponse
CheckoutLicenseResponse' :: Maybe [EntitlementData] -> Maybe CheckoutType -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> CheckoutLicenseResponse

-- | Allowed license entitlements.
[$sel:entitlementsAllowed:CheckoutLicenseResponse'] :: CheckoutLicenseResponse -> Maybe [EntitlementData]

-- | Checkout type.
[$sel:checkoutType:CheckoutLicenseResponse'] :: CheckoutLicenseResponse -> Maybe CheckoutType

-- | Date and time at which the license checkout expires.
[$sel:expiration:CheckoutLicenseResponse'] :: CheckoutLicenseResponse -> Maybe Text

-- | Signed token.
[$sel:signedToken:CheckoutLicenseResponse'] :: CheckoutLicenseResponse -> Maybe Text

-- | License consumption token.
[$sel:licenseConsumptionToken:CheckoutLicenseResponse'] :: CheckoutLicenseResponse -> Maybe Text

-- | Node ID.
[$sel:nodeId:CheckoutLicenseResponse'] :: CheckoutLicenseResponse -> Maybe Text

-- | Date and time at which the license checkout is issued.
[$sel:issuedAt:CheckoutLicenseResponse'] :: CheckoutLicenseResponse -> Maybe Text

-- | Amazon Resource Name (ARN) of the checkout license.
[$sel:licenseArn:CheckoutLicenseResponse'] :: CheckoutLicenseResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CheckoutLicenseResponse'] :: CheckoutLicenseResponse -> Int

-- | Create a value of <a>CheckoutLicenseResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:entitlementsAllowed:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_entitlementsAllowed</a> - Allowed license
--   entitlements.
--   
--   <a>$sel:checkoutType:CheckoutLicense'</a>,
--   <a>checkoutLicenseResponse_checkoutType</a> - Checkout type.
--   
--   <a>$sel:expiration:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_expiration</a> - Date and time at which the
--   license checkout expires.
--   
--   <a>$sel:signedToken:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_signedToken</a> - Signed token.
--   
--   <a>$sel:licenseConsumptionToken:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_licenseConsumptionToken</a> - License
--   consumption token.
--   
--   <a>$sel:nodeId:CheckoutLicense'</a>,
--   <a>checkoutLicenseResponse_nodeId</a> - Node ID.
--   
--   <a>$sel:issuedAt:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_issuedAt</a> - Date and time at which the
--   license checkout is issued.
--   
--   <a>$sel:licenseArn:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_licenseArn</a> - Amazon Resource Name (ARN)
--   of the checkout license.
--   
--   <a>$sel:httpStatus:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_httpStatus</a> - The response's http status
--   code.
newCheckoutLicenseResponse :: Int -> CheckoutLicenseResponse

-- | Allowed license entitlements.
checkoutLicenseResponse_entitlementsAllowed :: Lens' CheckoutLicenseResponse (Maybe [EntitlementData])

-- | Checkout type.
checkoutLicenseResponse_checkoutType :: Lens' CheckoutLicenseResponse (Maybe CheckoutType)

-- | Date and time at which the license checkout expires.
checkoutLicenseResponse_expiration :: Lens' CheckoutLicenseResponse (Maybe Text)

-- | Signed token.
checkoutLicenseResponse_signedToken :: Lens' CheckoutLicenseResponse (Maybe Text)

-- | License consumption token.
checkoutLicenseResponse_licenseConsumptionToken :: Lens' CheckoutLicenseResponse (Maybe Text)

-- | Node ID.
checkoutLicenseResponse_nodeId :: Lens' CheckoutLicenseResponse (Maybe Text)

-- | Date and time at which the license checkout is issued.
checkoutLicenseResponse_issuedAt :: Lens' CheckoutLicenseResponse (Maybe Text)

-- | Amazon Resource Name (ARN) of the checkout license.
checkoutLicenseResponse_licenseArn :: Lens' CheckoutLicenseResponse (Maybe Text)

-- | The response's http status code.
checkoutLicenseResponse_httpStatus :: Lens' CheckoutLicenseResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.CheckoutLicense.CheckoutLicense
instance GHC.Show.Show Amazonka.LicenseManager.CheckoutLicense.CheckoutLicense
instance GHC.Read.Read Amazonka.LicenseManager.CheckoutLicense.CheckoutLicense
instance GHC.Classes.Eq Amazonka.LicenseManager.CheckoutLicense.CheckoutLicense
instance GHC.Generics.Generic Amazonka.LicenseManager.CheckoutLicense.CheckoutLicenseResponse
instance GHC.Show.Show Amazonka.LicenseManager.CheckoutLicense.CheckoutLicenseResponse
instance GHC.Read.Read Amazonka.LicenseManager.CheckoutLicense.CheckoutLicenseResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.CheckoutLicense.CheckoutLicenseResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.CheckoutLicense.CheckoutLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CheckoutLicense.CheckoutLicenseResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.CheckoutLicense.CheckoutLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CheckoutLicense.CheckoutLicense
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.CheckoutLicense.CheckoutLicense
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.CheckoutLicense.CheckoutLicense
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.CheckoutLicense.CheckoutLicense
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.CheckoutLicense.CheckoutLicense


-- | Checks out the specified license for offline use.
module Amazonka.LicenseManager.CheckoutBorrowLicense

-- | <i>See:</i> <a>newCheckoutBorrowLicense</a> smart constructor.
data CheckoutBorrowLicense
CheckoutBorrowLicense' :: Maybe [Metadata] -> Maybe Text -> Text -> [EntitlementData] -> DigitalSignatureMethod -> Text -> CheckoutBorrowLicense

-- | Information about constraints.
[$sel:checkoutMetadata:CheckoutBorrowLicense'] :: CheckoutBorrowLicense -> Maybe [Metadata]

-- | Node ID.
[$sel:nodeId:CheckoutBorrowLicense'] :: CheckoutBorrowLicense -> Maybe Text

-- | Amazon Resource Name (ARN) of the license. The license must use the
--   borrow consumption configuration.
[$sel:licenseArn:CheckoutBorrowLicense'] :: CheckoutBorrowLicense -> Text

-- | License entitlements. Partial checkouts are not supported.
[$sel:entitlements:CheckoutBorrowLicense'] :: CheckoutBorrowLicense -> [EntitlementData]

-- | Digital signature method. The possible value is JSON Web Signature
--   (JWS) algorithm PS384. For more information, see <a>RFC 7518 Digital
--   Signature with RSASSA-PSS</a>.
[$sel:digitalSignatureMethod:CheckoutBorrowLicense'] :: CheckoutBorrowLicense -> DigitalSignatureMethod

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
[$sel:clientToken:CheckoutBorrowLicense'] :: CheckoutBorrowLicense -> Text

-- | Create a value of <a>CheckoutBorrowLicense</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:checkoutMetadata:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicense_checkoutMetadata</a> - Information about
--   constraints.
--   
--   <a>$sel:nodeId:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicense_nodeId</a> - Node ID.
--   
--   <a>$sel:licenseArn:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicense_licenseArn</a> - Amazon Resource Name (ARN)
--   of the license. The license must use the borrow consumption
--   configuration.
--   
--   <a>$sel:entitlements:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicense_entitlements</a> - License entitlements.
--   Partial checkouts are not supported.
--   
--   <a>$sel:digitalSignatureMethod:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicense_digitalSignatureMethod</a> - Digital
--   signature method. The possible value is JSON Web Signature (JWS)
--   algorithm PS384. For more information, see <a>RFC 7518 Digital
--   Signature with RSASSA-PSS</a>.
--   
--   <a>$sel:clientToken:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicense_clientToken</a> - Unique, case-sensitive
--   identifier that you provide to ensure the idempotency of the request.
newCheckoutBorrowLicense :: Text -> DigitalSignatureMethod -> Text -> CheckoutBorrowLicense

-- | Information about constraints.
checkoutBorrowLicense_checkoutMetadata :: Lens' CheckoutBorrowLicense (Maybe [Metadata])

-- | Node ID.
checkoutBorrowLicense_nodeId :: Lens' CheckoutBorrowLicense (Maybe Text)

-- | Amazon Resource Name (ARN) of the license. The license must use the
--   borrow consumption configuration.
checkoutBorrowLicense_licenseArn :: Lens' CheckoutBorrowLicense Text

-- | License entitlements. Partial checkouts are not supported.
checkoutBorrowLicense_entitlements :: Lens' CheckoutBorrowLicense [EntitlementData]

-- | Digital signature method. The possible value is JSON Web Signature
--   (JWS) algorithm PS384. For more information, see <a>RFC 7518 Digital
--   Signature with RSASSA-PSS</a>.
checkoutBorrowLicense_digitalSignatureMethod :: Lens' CheckoutBorrowLicense DigitalSignatureMethod

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
checkoutBorrowLicense_clientToken :: Lens' CheckoutBorrowLicense Text

-- | <i>See:</i> <a>newCheckoutBorrowLicenseResponse</a> smart constructor.
data CheckoutBorrowLicenseResponse
CheckoutBorrowLicenseResponse' :: Maybe [EntitlementData] -> Maybe [Metadata] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> CheckoutBorrowLicenseResponse

-- | Allowed license entitlements.
[$sel:entitlementsAllowed:CheckoutBorrowLicenseResponse'] :: CheckoutBorrowLicenseResponse -> Maybe [EntitlementData]

-- | Information about constraints.
[$sel:checkoutMetadata:CheckoutBorrowLicenseResponse'] :: CheckoutBorrowLicenseResponse -> Maybe [Metadata]

-- | Date and time at which the license checkout expires.
[$sel:expiration:CheckoutBorrowLicenseResponse'] :: CheckoutBorrowLicenseResponse -> Maybe Text

-- | Signed token.
[$sel:signedToken:CheckoutBorrowLicenseResponse'] :: CheckoutBorrowLicenseResponse -> Maybe Text

-- | License consumption token.
[$sel:licenseConsumptionToken:CheckoutBorrowLicenseResponse'] :: CheckoutBorrowLicenseResponse -> Maybe Text

-- | Node ID.
[$sel:nodeId:CheckoutBorrowLicenseResponse'] :: CheckoutBorrowLicenseResponse -> Maybe Text

-- | Date and time at which the license checkout is issued.
[$sel:issuedAt:CheckoutBorrowLicenseResponse'] :: CheckoutBorrowLicenseResponse -> Maybe Text

-- | Amazon Resource Name (ARN) of the license.
[$sel:licenseArn:CheckoutBorrowLicenseResponse'] :: CheckoutBorrowLicenseResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:CheckoutBorrowLicenseResponse'] :: CheckoutBorrowLicenseResponse -> Int

-- | Create a value of <a>CheckoutBorrowLicenseResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:entitlementsAllowed:CheckoutBorrowLicenseResponse'</a>,
--   <a>checkoutBorrowLicenseResponse_entitlementsAllowed</a> - Allowed
--   license entitlements.
--   
--   <a>$sel:checkoutMetadata:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicenseResponse_checkoutMetadata</a> - Information
--   about constraints.
--   
--   <a>$sel:expiration:CheckoutBorrowLicenseResponse'</a>,
--   <a>checkoutBorrowLicenseResponse_expiration</a> - Date and time at
--   which the license checkout expires.
--   
--   <a>$sel:signedToken:CheckoutBorrowLicenseResponse'</a>,
--   <a>checkoutBorrowLicenseResponse_signedToken</a> - Signed token.
--   
--   <a>$sel:licenseConsumptionToken:CheckoutBorrowLicenseResponse'</a>,
--   <a>checkoutBorrowLicenseResponse_licenseConsumptionToken</a> - License
--   consumption token.
--   
--   <a>$sel:nodeId:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicenseResponse_nodeId</a> - Node ID.
--   
--   <a>$sel:issuedAt:CheckoutBorrowLicenseResponse'</a>,
--   <a>checkoutBorrowLicenseResponse_issuedAt</a> - Date and time at which
--   the license checkout is issued.
--   
--   <a>$sel:licenseArn:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicenseResponse_licenseArn</a> - Amazon Resource Name
--   (ARN) of the license.
--   
--   <a>$sel:httpStatus:CheckoutBorrowLicenseResponse'</a>,
--   <a>checkoutBorrowLicenseResponse_httpStatus</a> - The response's http
--   status code.
newCheckoutBorrowLicenseResponse :: Int -> CheckoutBorrowLicenseResponse

-- | Allowed license entitlements.
checkoutBorrowLicenseResponse_entitlementsAllowed :: Lens' CheckoutBorrowLicenseResponse (Maybe [EntitlementData])

-- | Information about constraints.
checkoutBorrowLicenseResponse_checkoutMetadata :: Lens' CheckoutBorrowLicenseResponse (Maybe [Metadata])

-- | Date and time at which the license checkout expires.
checkoutBorrowLicenseResponse_expiration :: Lens' CheckoutBorrowLicenseResponse (Maybe Text)

-- | Signed token.
checkoutBorrowLicenseResponse_signedToken :: Lens' CheckoutBorrowLicenseResponse (Maybe Text)

-- | License consumption token.
checkoutBorrowLicenseResponse_licenseConsumptionToken :: Lens' CheckoutBorrowLicenseResponse (Maybe Text)

-- | Node ID.
checkoutBorrowLicenseResponse_nodeId :: Lens' CheckoutBorrowLicenseResponse (Maybe Text)

-- | Date and time at which the license checkout is issued.
checkoutBorrowLicenseResponse_issuedAt :: Lens' CheckoutBorrowLicenseResponse (Maybe Text)

-- | Amazon Resource Name (ARN) of the license.
checkoutBorrowLicenseResponse_licenseArn :: Lens' CheckoutBorrowLicenseResponse (Maybe Text)

-- | The response's http status code.
checkoutBorrowLicenseResponse_httpStatus :: Lens' CheckoutBorrowLicenseResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicense
instance GHC.Show.Show Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicense
instance GHC.Read.Read Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicense
instance GHC.Classes.Eq Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicense
instance GHC.Generics.Generic Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicenseResponse
instance GHC.Show.Show Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicenseResponse
instance GHC.Read.Read Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicenseResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicenseResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicenseResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicense
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicense
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicense
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicense
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.CheckoutBorrowLicense.CheckoutBorrowLicense


-- | Checks in the specified license. Check in a license when it is no
--   longer in use.
module Amazonka.LicenseManager.CheckInLicense

-- | <i>See:</i> <a>newCheckInLicense</a> smart constructor.
data CheckInLicense
CheckInLicense' :: Maybe Text -> Text -> CheckInLicense

-- | License beneficiary.
[$sel:beneficiary:CheckInLicense'] :: CheckInLicense -> Maybe Text

-- | License consumption token.
[$sel:licenseConsumptionToken:CheckInLicense'] :: CheckInLicense -> Text

-- | Create a value of <a>CheckInLicense</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:beneficiary:CheckInLicense'</a>,
--   <a>checkInLicense_beneficiary</a> - License beneficiary.
--   
--   <a>$sel:licenseConsumptionToken:CheckInLicense'</a>,
--   <a>checkInLicense_licenseConsumptionToken</a> - License consumption
--   token.
newCheckInLicense :: Text -> CheckInLicense

-- | License beneficiary.
checkInLicense_beneficiary :: Lens' CheckInLicense (Maybe Text)

-- | License consumption token.
checkInLicense_licenseConsumptionToken :: Lens' CheckInLicense Text

-- | <i>See:</i> <a>newCheckInLicenseResponse</a> smart constructor.
data CheckInLicenseResponse
CheckInLicenseResponse' :: Int -> CheckInLicenseResponse

-- | The response's http status code.
[$sel:httpStatus:CheckInLicenseResponse'] :: CheckInLicenseResponse -> Int

-- | Create a value of <a>CheckInLicenseResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CheckInLicenseResponse'</a>,
--   <a>checkInLicenseResponse_httpStatus</a> - The response's http status
--   code.
newCheckInLicenseResponse :: Int -> CheckInLicenseResponse

-- | The response's http status code.
checkInLicenseResponse_httpStatus :: Lens' CheckInLicenseResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.CheckInLicense.CheckInLicense
instance GHC.Show.Show Amazonka.LicenseManager.CheckInLicense.CheckInLicense
instance GHC.Read.Read Amazonka.LicenseManager.CheckInLicense.CheckInLicense
instance GHC.Classes.Eq Amazonka.LicenseManager.CheckInLicense.CheckInLicense
instance GHC.Generics.Generic Amazonka.LicenseManager.CheckInLicense.CheckInLicenseResponse
instance GHC.Show.Show Amazonka.LicenseManager.CheckInLicense.CheckInLicenseResponse
instance GHC.Read.Read Amazonka.LicenseManager.CheckInLicense.CheckInLicenseResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.CheckInLicense.CheckInLicenseResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.CheckInLicense.CheckInLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CheckInLicense.CheckInLicenseResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.CheckInLicense.CheckInLicense
instance Control.DeepSeq.NFData Amazonka.LicenseManager.CheckInLicense.CheckInLicense
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.CheckInLicense.CheckInLicense
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.CheckInLicense.CheckInLicense
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.CheckInLicense.CheckInLicense
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.CheckInLicense.CheckInLicense


-- | Accepts the specified grant.
module Amazonka.LicenseManager.AcceptGrant

-- | <i>See:</i> <a>newAcceptGrant</a> smart constructor.
data AcceptGrant
AcceptGrant' :: Text -> AcceptGrant

-- | Amazon Resource Name (ARN) of the grant.
[$sel:grantArn:AcceptGrant'] :: AcceptGrant -> Text

-- | Create a value of <a>AcceptGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantArn:AcceptGrant'</a>, <a>acceptGrant_grantArn</a> -
--   Amazon Resource Name (ARN) of the grant.
newAcceptGrant :: Text -> AcceptGrant

-- | Amazon Resource Name (ARN) of the grant.
acceptGrant_grantArn :: Lens' AcceptGrant Text

-- | <i>See:</i> <a>newAcceptGrantResponse</a> smart constructor.
data AcceptGrantResponse
AcceptGrantResponse' :: Maybe GrantStatus -> Maybe Text -> Maybe Text -> Int -> AcceptGrantResponse

-- | Grant status.
[$sel:status:AcceptGrantResponse'] :: AcceptGrantResponse -> Maybe GrantStatus

-- | Grant version.
[$sel:version:AcceptGrantResponse'] :: AcceptGrantResponse -> Maybe Text

-- | Grant ARN.
[$sel:grantArn:AcceptGrantResponse'] :: AcceptGrantResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:AcceptGrantResponse'] :: AcceptGrantResponse -> Int

-- | Create a value of <a>AcceptGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:AcceptGrantResponse'</a>,
--   <a>acceptGrantResponse_status</a> - Grant status.
--   
--   <a>$sel:version:AcceptGrantResponse'</a>,
--   <a>acceptGrantResponse_version</a> - Grant version.
--   
--   <a>$sel:grantArn:AcceptGrant'</a>, <a>acceptGrantResponse_grantArn</a>
--   - Grant ARN.
--   
--   <a>$sel:httpStatus:AcceptGrantResponse'</a>,
--   <a>acceptGrantResponse_httpStatus</a> - The response's http status
--   code.
newAcceptGrantResponse :: Int -> AcceptGrantResponse

-- | Grant status.
acceptGrantResponse_status :: Lens' AcceptGrantResponse (Maybe GrantStatus)

-- | Grant version.
acceptGrantResponse_version :: Lens' AcceptGrantResponse (Maybe Text)

-- | Grant ARN.
acceptGrantResponse_grantArn :: Lens' AcceptGrantResponse (Maybe Text)

-- | The response's http status code.
acceptGrantResponse_httpStatus :: Lens' AcceptGrantResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.AcceptGrant.AcceptGrant
instance GHC.Show.Show Amazonka.LicenseManager.AcceptGrant.AcceptGrant
instance GHC.Read.Read Amazonka.LicenseManager.AcceptGrant.AcceptGrant
instance GHC.Classes.Eq Amazonka.LicenseManager.AcceptGrant.AcceptGrant
instance GHC.Generics.Generic Amazonka.LicenseManager.AcceptGrant.AcceptGrantResponse
instance GHC.Show.Show Amazonka.LicenseManager.AcceptGrant.AcceptGrantResponse
instance GHC.Read.Read Amazonka.LicenseManager.AcceptGrant.AcceptGrantResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.AcceptGrant.AcceptGrantResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.AcceptGrant.AcceptGrant
instance Control.DeepSeq.NFData Amazonka.LicenseManager.AcceptGrant.AcceptGrantResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.AcceptGrant.AcceptGrant
instance Control.DeepSeq.NFData Amazonka.LicenseManager.AcceptGrant.AcceptGrant
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.AcceptGrant.AcceptGrant
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.AcceptGrant.AcceptGrant
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.AcceptGrant.AcceptGrant
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.AcceptGrant.AcceptGrant


-- | Removes the specified tags from the specified license configuration.
module Amazonka.LicenseManager.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | Amazon Resource Name (ARN) of the license configuration.
[$sel:resourceArn:UntagResource'] :: UntagResource -> Text

-- | Keys identifying the tags to remove.
[$sel:tagKeys:UntagResource'] :: UntagResource -> [Text]

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - Amazon Resource Name (ARN) of the
--   license configuration.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> -
--   Keys identifying the tags to remove.
newUntagResource :: Text -> UntagResource

-- | Amazon Resource Name (ARN) of the license configuration.
untagResource_resourceArn :: Lens' UntagResource Text

-- | Keys identifying the tags to remove.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:UntagResourceResponse'] :: UntagResourceResponse -> Int

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.UntagResource.UntagResource
instance GHC.Show.Show Amazonka.LicenseManager.UntagResource.UntagResource
instance GHC.Read.Read Amazonka.LicenseManager.UntagResource.UntagResource
instance GHC.Classes.Eq Amazonka.LicenseManager.UntagResource.UntagResource
instance GHC.Generics.Generic Amazonka.LicenseManager.UntagResource.UntagResourceResponse
instance GHC.Show.Show Amazonka.LicenseManager.UntagResource.UntagResourceResponse
instance GHC.Read.Read Amazonka.LicenseManager.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.UntagResource.UntagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.LicenseManager.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.LicenseManager.UntagResource.UntagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.UntagResource.UntagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.UntagResource.UntagResource
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.UntagResource.UntagResource
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.UntagResource.UntagResource


-- | Modifies the attributes of an existing license configuration.
module Amazonka.LicenseManager.UpdateLicenseConfiguration

-- | <i>See:</i> <a>newUpdateLicenseConfiguration</a> smart constructor.
data UpdateLicenseConfiguration
UpdateLicenseConfiguration' :: Maybe Integer -> Maybe Text -> Maybe LicenseConfigurationStatus -> Maybe Bool -> Maybe Bool -> Maybe [ProductInformation] -> Maybe [Text] -> Maybe Text -> Text -> UpdateLicenseConfiguration

-- | New number of licenses managed by the license configuration.
[$sel:licenseCount:UpdateLicenseConfiguration'] :: UpdateLicenseConfiguration -> Maybe Integer

-- | New name of the license configuration.
[$sel:name:UpdateLicenseConfiguration'] :: UpdateLicenseConfiguration -> Maybe Text

-- | New status of the license configuration.
[$sel:licenseConfigurationStatus:UpdateLicenseConfiguration'] :: UpdateLicenseConfiguration -> Maybe LicenseConfigurationStatus

-- | New hard limit of the number of available licenses.
[$sel:licenseCountHardLimit:UpdateLicenseConfiguration'] :: UpdateLicenseConfiguration -> Maybe Bool

-- | When true, disassociates a resource when software is uninstalled.
[$sel:disassociateWhenNotFound:UpdateLicenseConfiguration'] :: UpdateLicenseConfiguration -> Maybe Bool

-- | New product information.
[$sel:productInformationList:UpdateLicenseConfiguration'] :: UpdateLicenseConfiguration -> Maybe [ProductInformation]

-- | New license rule. The only rule that you can add after you create a
--   license configuration is licenseAffinityToHost.
[$sel:licenseRules:UpdateLicenseConfiguration'] :: UpdateLicenseConfiguration -> Maybe [Text]

-- | New description of the license configuration.
[$sel:description:UpdateLicenseConfiguration'] :: UpdateLicenseConfiguration -> Maybe Text

-- | Amazon Resource Name (ARN) of the license configuration.
[$sel:licenseConfigurationArn:UpdateLicenseConfiguration'] :: UpdateLicenseConfiguration -> Text

-- | Create a value of <a>UpdateLicenseConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseCount:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_licenseCount</a> - New number of
--   licenses managed by the license configuration.
--   
--   <a>$sel:name:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_name</a> - New name of the license
--   configuration.
--   
--   <a>$sel:licenseConfigurationStatus:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_licenseConfigurationStatus</a> - New
--   status of the license configuration.
--   
--   <a>$sel:licenseCountHardLimit:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_licenseCountHardLimit</a> - New hard
--   limit of the number of available licenses.
--   
--   <a>$sel:disassociateWhenNotFound:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_disassociateWhenNotFound</a> - When
--   true, disassociates a resource when software is uninstalled.
--   
--   <a>$sel:productInformationList:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_productInformationList</a> - New product
--   information.
--   
--   <a>$sel:licenseRules:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_licenseRules</a> - New license rule. The
--   only rule that you can add after you create a license configuration is
--   licenseAffinityToHost.
--   
--   <a>$sel:description:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_description</a> - New description of the
--   license configuration.
--   
--   <a>$sel:licenseConfigurationArn:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_licenseConfigurationArn</a> - Amazon
--   Resource Name (ARN) of the license configuration.
newUpdateLicenseConfiguration :: Text -> UpdateLicenseConfiguration

-- | New number of licenses managed by the license configuration.
updateLicenseConfiguration_licenseCount :: Lens' UpdateLicenseConfiguration (Maybe Integer)

-- | New name of the license configuration.
updateLicenseConfiguration_name :: Lens' UpdateLicenseConfiguration (Maybe Text)

-- | New status of the license configuration.
updateLicenseConfiguration_licenseConfigurationStatus :: Lens' UpdateLicenseConfiguration (Maybe LicenseConfigurationStatus)

-- | New hard limit of the number of available licenses.
updateLicenseConfiguration_licenseCountHardLimit :: Lens' UpdateLicenseConfiguration (Maybe Bool)

-- | When true, disassociates a resource when software is uninstalled.
updateLicenseConfiguration_disassociateWhenNotFound :: Lens' UpdateLicenseConfiguration (Maybe Bool)

-- | New product information.
updateLicenseConfiguration_productInformationList :: Lens' UpdateLicenseConfiguration (Maybe [ProductInformation])

-- | New license rule. The only rule that you can add after you create a
--   license configuration is licenseAffinityToHost.
updateLicenseConfiguration_licenseRules :: Lens' UpdateLicenseConfiguration (Maybe [Text])

-- | New description of the license configuration.
updateLicenseConfiguration_description :: Lens' UpdateLicenseConfiguration (Maybe Text)

-- | Amazon Resource Name (ARN) of the license configuration.
updateLicenseConfiguration_licenseConfigurationArn :: Lens' UpdateLicenseConfiguration Text

-- | <i>See:</i> <a>newUpdateLicenseConfigurationResponse</a> smart
--   constructor.
data UpdateLicenseConfigurationResponse
UpdateLicenseConfigurationResponse' :: Int -> UpdateLicenseConfigurationResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateLicenseConfigurationResponse'] :: UpdateLicenseConfigurationResponse -> Int

-- | Create a value of <a>UpdateLicenseConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateLicenseConfigurationResponse'</a>,
--   <a>updateLicenseConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newUpdateLicenseConfigurationResponse :: Int -> UpdateLicenseConfigurationResponse

-- | The response's http status code.
updateLicenseConfigurationResponse_httpStatus :: Lens' UpdateLicenseConfigurationResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfiguration
instance GHC.Show.Show Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfiguration
instance GHC.Read.Read Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfiguration
instance GHC.Classes.Eq Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfiguration
instance GHC.Generics.Generic Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfigurationResponse
instance GHC.Show.Show Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfigurationResponse
instance GHC.Read.Read Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfigurationResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfigurationResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfigurationResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfiguration
instance Control.DeepSeq.NFData Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfiguration
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfiguration
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfiguration
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.UpdateLicenseConfiguration.UpdateLicenseConfiguration


-- | Updates a report generator.
--   
--   After you make changes to a report generator, it starts generating new
--   reports within 60 minutes of being updated.
module Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator

-- | <i>See:</i> <a>newUpdateLicenseManagerReportGenerator</a> smart
--   constructor.
data UpdateLicenseManagerReportGenerator
UpdateLicenseManagerReportGenerator' :: Maybe Text -> Text -> Text -> [ReportType] -> ReportContext -> ReportFrequency -> Text -> UpdateLicenseManagerReportGenerator

-- | Description of the report generator.
[$sel:description:UpdateLicenseManagerReportGenerator'] :: UpdateLicenseManagerReportGenerator -> Maybe Text

-- | Amazon Resource Name (ARN) of the report generator to update.
[$sel:licenseManagerReportGeneratorArn:UpdateLicenseManagerReportGenerator'] :: UpdateLicenseManagerReportGenerator -> Text

-- | Name of the report generator.
[$sel:reportGeneratorName:UpdateLicenseManagerReportGenerator'] :: UpdateLicenseManagerReportGenerator -> Text

-- | Type of reports to generate. The following report types are supported:
--   
--   <ul>
--   <li>License configuration report - Reports the number and details of
--   consumed licenses for a license configuration.</li>
--   <li>Resource report - Reports the tracked licenses and resource
--   consumption for a license configuration.</li>
--   </ul>
[$sel:type':UpdateLicenseManagerReportGenerator'] :: UpdateLicenseManagerReportGenerator -> [ReportType]

-- | The report context.
[$sel:reportContext:UpdateLicenseManagerReportGenerator'] :: UpdateLicenseManagerReportGenerator -> ReportContext

-- | Frequency by which reports are generated.
[$sel:reportFrequency:UpdateLicenseManagerReportGenerator'] :: UpdateLicenseManagerReportGenerator -> ReportFrequency

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
[$sel:clientToken:UpdateLicenseManagerReportGenerator'] :: UpdateLicenseManagerReportGenerator -> Text

-- | Create a value of <a>UpdateLicenseManagerReportGenerator</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_description</a> - Description
--   of the report generator.
--   
--   
--   <a>$sel:licenseManagerReportGeneratorArn:UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_licenseManagerReportGeneratorArn</a>
--   - Amazon Resource Name (ARN) of the report generator to update.
--   
--   <a>$sel:reportGeneratorName:UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_reportGeneratorName</a> - Name
--   of the report generator.
--   
--   <a>$sel:type':UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_type</a> - Type of reports to
--   generate. The following report types are supported:
--   
--   <ul>
--   <li>License configuration report - Reports the number and details of
--   consumed licenses for a license configuration.</li>
--   <li>Resource report - Reports the tracked licenses and resource
--   consumption for a license configuration.</li>
--   </ul>
--   
--   <a>$sel:reportContext:UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_reportContext</a> - The report
--   context.
--   
--   <a>$sel:reportFrequency:UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_reportFrequency</a> - Frequency
--   by which reports are generated.
--   
--   <a>$sel:clientToken:UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_clientToken</a> - Unique,
--   case-sensitive identifier that you provide to ensure the idempotency
--   of the request.
newUpdateLicenseManagerReportGenerator :: Text -> Text -> ReportContext -> ReportFrequency -> Text -> UpdateLicenseManagerReportGenerator

-- | Description of the report generator.
updateLicenseManagerReportGenerator_description :: Lens' UpdateLicenseManagerReportGenerator (Maybe Text)

-- | Amazon Resource Name (ARN) of the report generator to update.
updateLicenseManagerReportGenerator_licenseManagerReportGeneratorArn :: Lens' UpdateLicenseManagerReportGenerator Text

-- | Name of the report generator.
updateLicenseManagerReportGenerator_reportGeneratorName :: Lens' UpdateLicenseManagerReportGenerator Text

-- | Type of reports to generate. The following report types are supported:
--   
--   <ul>
--   <li>License configuration report - Reports the number and details of
--   consumed licenses for a license configuration.</li>
--   <li>Resource report - Reports the tracked licenses and resource
--   consumption for a license configuration.</li>
--   </ul>
updateLicenseManagerReportGenerator_type :: Lens' UpdateLicenseManagerReportGenerator [ReportType]

-- | The report context.
updateLicenseManagerReportGenerator_reportContext :: Lens' UpdateLicenseManagerReportGenerator ReportContext

-- | Frequency by which reports are generated.
updateLicenseManagerReportGenerator_reportFrequency :: Lens' UpdateLicenseManagerReportGenerator ReportFrequency

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
updateLicenseManagerReportGenerator_clientToken :: Lens' UpdateLicenseManagerReportGenerator Text

-- | <i>See:</i> <a>newUpdateLicenseManagerReportGeneratorResponse</a>
--   smart constructor.
data UpdateLicenseManagerReportGeneratorResponse
UpdateLicenseManagerReportGeneratorResponse' :: Int -> UpdateLicenseManagerReportGeneratorResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateLicenseManagerReportGeneratorResponse'] :: UpdateLicenseManagerReportGeneratorResponse -> Int

-- | Create a value of <a>UpdateLicenseManagerReportGeneratorResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateLicenseManagerReportGeneratorResponse'</a>,
--   <a>updateLicenseManagerReportGeneratorResponse_httpStatus</a> - The
--   response's http status code.
newUpdateLicenseManagerReportGeneratorResponse :: Int -> UpdateLicenseManagerReportGeneratorResponse

-- | The response's http status code.
updateLicenseManagerReportGeneratorResponse_httpStatus :: Lens' UpdateLicenseManagerReportGeneratorResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGenerator
instance GHC.Show.Show Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGenerator
instance GHC.Read.Read Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGenerator
instance GHC.Classes.Eq Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGenerator
instance GHC.Generics.Generic Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGeneratorResponse
instance GHC.Show.Show Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGeneratorResponse
instance GHC.Read.Read Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGeneratorResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGeneratorResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGenerator
instance Control.DeepSeq.NFData Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGeneratorResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGenerator
instance Control.DeepSeq.NFData Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGenerator
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGenerator
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGenerator
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGenerator
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.UpdateLicenseManagerReportGenerator.UpdateLicenseManagerReportGenerator


-- | Adds or removes the specified license configurations for the specified
--   Amazon Web Services resource.
--   
--   You can update the license specifications of AMIs, instances, and
--   hosts. You cannot update the license specifications for launch
--   templates and CloudFormation templates, as they send license
--   configurations to the operation that creates the resource.
module Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource

-- | <i>See:</i> <a>newUpdateLicenseSpecificationsForResource</a> smart
--   constructor.
data UpdateLicenseSpecificationsForResource
UpdateLicenseSpecificationsForResource' :: Maybe [LicenseSpecification] -> Maybe [LicenseSpecification] -> Text -> UpdateLicenseSpecificationsForResource

-- | ARNs of the license configurations to add.
[$sel:addLicenseSpecifications:UpdateLicenseSpecificationsForResource'] :: UpdateLicenseSpecificationsForResource -> Maybe [LicenseSpecification]

-- | ARNs of the license configurations to remove.
[$sel:removeLicenseSpecifications:UpdateLicenseSpecificationsForResource'] :: UpdateLicenseSpecificationsForResource -> Maybe [LicenseSpecification]

-- | Amazon Resource Name (ARN) of the Amazon Web Services resource.
[$sel:resourceArn:UpdateLicenseSpecificationsForResource'] :: UpdateLicenseSpecificationsForResource -> Text

-- | Create a value of <a>UpdateLicenseSpecificationsForResource</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:addLicenseSpecifications:UpdateLicenseSpecificationsForResource'</a>,
--   <a>updateLicenseSpecificationsForResource_addLicenseSpecifications</a>
--   - ARNs of the license configurations to add.
--   
--   
--   <a>$sel:removeLicenseSpecifications:UpdateLicenseSpecificationsForResource'</a>,
--   <a>updateLicenseSpecificationsForResource_removeLicenseSpecifications</a>
--   - ARNs of the license configurations to remove.
--   
--   <a>$sel:resourceArn:UpdateLicenseSpecificationsForResource'</a>,
--   <a>updateLicenseSpecificationsForResource_resourceArn</a> - Amazon
--   Resource Name (ARN) of the Amazon Web Services resource.
newUpdateLicenseSpecificationsForResource :: Text -> UpdateLicenseSpecificationsForResource

-- | ARNs of the license configurations to add.
updateLicenseSpecificationsForResource_addLicenseSpecifications :: Lens' UpdateLicenseSpecificationsForResource (Maybe [LicenseSpecification])

-- | ARNs of the license configurations to remove.
updateLicenseSpecificationsForResource_removeLicenseSpecifications :: Lens' UpdateLicenseSpecificationsForResource (Maybe [LicenseSpecification])

-- | Amazon Resource Name (ARN) of the Amazon Web Services resource.
updateLicenseSpecificationsForResource_resourceArn :: Lens' UpdateLicenseSpecificationsForResource Text

-- | <i>See:</i> <a>newUpdateLicenseSpecificationsForResourceResponse</a>
--   smart constructor.
data UpdateLicenseSpecificationsForResourceResponse
UpdateLicenseSpecificationsForResourceResponse' :: Int -> UpdateLicenseSpecificationsForResourceResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateLicenseSpecificationsForResourceResponse'] :: UpdateLicenseSpecificationsForResourceResponse -> Int

-- | Create a value of
--   <a>UpdateLicenseSpecificationsForResourceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:httpStatus:UpdateLicenseSpecificationsForResourceResponse'</a>,
--   <a>updateLicenseSpecificationsForResourceResponse_httpStatus</a> - The
--   response's http status code.
newUpdateLicenseSpecificationsForResourceResponse :: Int -> UpdateLicenseSpecificationsForResourceResponse

-- | The response's http status code.
updateLicenseSpecificationsForResourceResponse_httpStatus :: Lens' UpdateLicenseSpecificationsForResourceResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResource
instance GHC.Show.Show Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResource
instance GHC.Read.Read Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResource
instance GHC.Classes.Eq Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResource
instance GHC.Generics.Generic Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResourceResponse
instance GHC.Show.Show Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResourceResponse
instance GHC.Read.Read Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResourceResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResource
instance Control.DeepSeq.NFData Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResource
instance Control.DeepSeq.NFData Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResource
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResource
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.UpdateLicenseSpecificationsForResource.UpdateLicenseSpecificationsForResource


-- | Updates License Manager settings for the current Region.
module Amazonka.LicenseManager.UpdateServiceSettings

-- | <i>See:</i> <a>newUpdateServiceSettings</a> smart constructor.
data UpdateServiceSettings
UpdateServiceSettings' :: Maybe Bool -> Maybe Text -> Maybe Text -> Maybe OrganizationConfiguration -> UpdateServiceSettings

-- | Activates cross-account discovery.
[$sel:enableCrossAccountsDiscovery:UpdateServiceSettings'] :: UpdateServiceSettings -> Maybe Bool

-- | Amazon Resource Name (ARN) of the Amazon SNS topic used for License
--   Manager alerts.
[$sel:snsTopicArn:UpdateServiceSettings'] :: UpdateServiceSettings -> Maybe Text

-- | Amazon Resource Name (ARN) of the Amazon S3 bucket where the License
--   Manager information is stored.
[$sel:s3BucketArn:UpdateServiceSettings'] :: UpdateServiceSettings -> Maybe Text

-- | Enables integration with Organizations for cross-account discovery.
[$sel:organizationConfiguration:UpdateServiceSettings'] :: UpdateServiceSettings -> Maybe OrganizationConfiguration

-- | Create a value of <a>UpdateServiceSettings</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enableCrossAccountsDiscovery:UpdateServiceSettings'</a>,
--   <a>updateServiceSettings_enableCrossAccountsDiscovery</a> - Activates
--   cross-account discovery.
--   
--   <a>$sel:snsTopicArn:UpdateServiceSettings'</a>,
--   <a>updateServiceSettings_snsTopicArn</a> - Amazon Resource Name (ARN)
--   of the Amazon SNS topic used for License Manager alerts.
--   
--   <a>$sel:s3BucketArn:UpdateServiceSettings'</a>,
--   <a>updateServiceSettings_s3BucketArn</a> - Amazon Resource Name (ARN)
--   of the Amazon S3 bucket where the License Manager information is
--   stored.
--   
--   <a>$sel:organizationConfiguration:UpdateServiceSettings'</a>,
--   <a>updateServiceSettings_organizationConfiguration</a> - Enables
--   integration with Organizations for cross-account discovery.
newUpdateServiceSettings :: UpdateServiceSettings

-- | Activates cross-account discovery.
updateServiceSettings_enableCrossAccountsDiscovery :: Lens' UpdateServiceSettings (Maybe Bool)

-- | Amazon Resource Name (ARN) of the Amazon SNS topic used for License
--   Manager alerts.
updateServiceSettings_snsTopicArn :: Lens' UpdateServiceSettings (Maybe Text)

-- | Amazon Resource Name (ARN) of the Amazon S3 bucket where the License
--   Manager information is stored.
updateServiceSettings_s3BucketArn :: Lens' UpdateServiceSettings (Maybe Text)

-- | Enables integration with Organizations for cross-account discovery.
updateServiceSettings_organizationConfiguration :: Lens' UpdateServiceSettings (Maybe OrganizationConfiguration)

-- | <i>See:</i> <a>newUpdateServiceSettingsResponse</a> smart constructor.
data UpdateServiceSettingsResponse
UpdateServiceSettingsResponse' :: Int -> UpdateServiceSettingsResponse

-- | The response's http status code.
[$sel:httpStatus:UpdateServiceSettingsResponse'] :: UpdateServiceSettingsResponse -> Int

-- | Create a value of <a>UpdateServiceSettingsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateServiceSettingsResponse'</a>,
--   <a>updateServiceSettingsResponse_httpStatus</a> - The response's http
--   status code.
newUpdateServiceSettingsResponse :: Int -> UpdateServiceSettingsResponse

-- | The response's http status code.
updateServiceSettingsResponse_httpStatus :: Lens' UpdateServiceSettingsResponse Int
instance GHC.Generics.Generic Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettings
instance GHC.Show.Show Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettings
instance GHC.Read.Read Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettings
instance GHC.Classes.Eq Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettings
instance GHC.Generics.Generic Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettingsResponse
instance GHC.Show.Show Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettingsResponse
instance GHC.Read.Read Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettingsResponse
instance GHC.Classes.Eq Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettingsResponse
instance Amazonka.Types.AWSRequest Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettings
instance Control.DeepSeq.NFData Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettingsResponse
instance Data.Hashable.Class.Hashable Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettings
instance Control.DeepSeq.NFData Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettings
instance Amazonka.Data.Headers.ToHeaders Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettings
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettings
instance Amazonka.Data.Path.ToPath Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettings
instance Amazonka.Data.Query.ToQuery Amazonka.LicenseManager.UpdateServiceSettings.UpdateServiceSettings


module Amazonka.LicenseManager.Lens

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>LicenseConfigurationArn</pre></li>
--   </ul>
listLicenseManagerReportGenerators_filters :: Lens' ListLicenseManagerReportGenerators (Maybe [Filter])

-- | Token for the next set of results.
listLicenseManagerReportGenerators_nextToken :: Lens' ListLicenseManagerReportGenerators (Maybe Text)

-- | Maximum number of results to return in a single call.
listLicenseManagerReportGenerators_maxResults :: Lens' ListLicenseManagerReportGenerators (Maybe Natural)

-- | Token for the next set of results.
listLicenseManagerReportGeneratorsResponse_nextToken :: Lens' ListLicenseManagerReportGeneratorsResponse (Maybe Text)

-- | A report generator that creates periodic reports about your license
--   configurations.
listLicenseManagerReportGeneratorsResponse_reportGenerators :: Lens' ListLicenseManagerReportGeneratorsResponse (Maybe [ReportGenerator])

-- | The response's http status code.
listLicenseManagerReportGeneratorsResponse_httpStatus :: Lens' ListLicenseManagerReportGeneratorsResponse Int

-- | Amazon Resource Name (ARN) of the report generator to be deleted.
deleteLicenseManagerReportGenerator_licenseManagerReportGeneratorArn :: Lens' DeleteLicenseManagerReportGenerator Text

-- | The response's http status code.
deleteLicenseManagerReportGeneratorResponse_httpStatus :: Lens' DeleteLicenseManagerReportGeneratorResponse Int

-- | Description of the report generator.
updateLicenseManagerReportGenerator_description :: Lens' UpdateLicenseManagerReportGenerator (Maybe Text)

-- | Amazon Resource Name (ARN) of the report generator to update.
updateLicenseManagerReportGenerator_licenseManagerReportGeneratorArn :: Lens' UpdateLicenseManagerReportGenerator Text

-- | Name of the report generator.
updateLicenseManagerReportGenerator_reportGeneratorName :: Lens' UpdateLicenseManagerReportGenerator Text

-- | Type of reports to generate. The following report types are supported:
--   
--   <ul>
--   <li>License configuration report - Reports the number and details of
--   consumed licenses for a license configuration.</li>
--   <li>Resource report - Reports the tracked licenses and resource
--   consumption for a license configuration.</li>
--   </ul>
updateLicenseManagerReportGenerator_type :: Lens' UpdateLicenseManagerReportGenerator [ReportType]

-- | The report context.
updateLicenseManagerReportGenerator_reportContext :: Lens' UpdateLicenseManagerReportGenerator ReportContext

-- | Frequency by which reports are generated.
updateLicenseManagerReportGenerator_reportFrequency :: Lens' UpdateLicenseManagerReportGenerator ReportFrequency

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
updateLicenseManagerReportGenerator_clientToken :: Lens' UpdateLicenseManagerReportGenerator Text

-- | The response's http status code.
updateLicenseManagerReportGeneratorResponse_httpStatus :: Lens' UpdateLicenseManagerReportGeneratorResponse Int

-- | Filters to scope the results. The following filters and logical
--   operators are supported:
--   
--   <ul>
--   <li><tt>resourceArn</tt> - The ARN of the license configuration
--   resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>resourceType</tt> - The resource type (<tt>EC2_INSTANCE</tt> |
--   <tt>EC2_HOST</tt> | <tt>EC2_AMI</tt> |
--   <tt>SYSTEMS_MANAGER_MANAGED_INSTANCE</tt>). Logical operators are
--   <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>resourceAccount</tt> - The ID of the account that owns the
--   resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   </ul>
listUsageForLicenseConfiguration_filters :: Lens' ListUsageForLicenseConfiguration (Maybe [Filter])

-- | Token for the next set of results.
listUsageForLicenseConfiguration_nextToken :: Lens' ListUsageForLicenseConfiguration (Maybe Text)

-- | Maximum number of results to return in a single call.
listUsageForLicenseConfiguration_maxResults :: Lens' ListUsageForLicenseConfiguration (Maybe Int)

-- | Amazon Resource Name (ARN) of the license configuration.
listUsageForLicenseConfiguration_licenseConfigurationArn :: Lens' ListUsageForLicenseConfiguration Text

-- | Token for the next set of results.
listUsageForLicenseConfigurationResponse_nextToken :: Lens' ListUsageForLicenseConfigurationResponse (Maybe Text)

-- | Information about the license configurations.
listUsageForLicenseConfigurationResponse_licenseConfigurationUsageList :: Lens' ListUsageForLicenseConfigurationResponse (Maybe [LicenseConfigurationUsage])

-- | The response's http status code.
listUsageForLicenseConfigurationResponse_httpStatus :: Lens' ListUsageForLicenseConfigurationResponse Int

-- | Number of licenses managed by the license configuration.
createLicenseConfiguration_licenseCount :: Lens' CreateLicenseConfiguration (Maybe Integer)

-- | Indicates whether hard or soft license enforcement is used. Exceeding
--   a hard limit blocks the launch of new instances.
createLicenseConfiguration_licenseCountHardLimit :: Lens' CreateLicenseConfiguration (Maybe Bool)

-- | When true, disassociates a resource when software is uninstalled.
createLicenseConfiguration_disassociateWhenNotFound :: Lens' CreateLicenseConfiguration (Maybe Bool)

-- | Product information.
createLicenseConfiguration_productInformationList :: Lens' CreateLicenseConfiguration (Maybe [ProductInformation])

-- | License rules. The syntax is #name=value (for example,
--   #allowedTenancy=EC2-DedicatedHost). The available rules vary by
--   dimension, as follows.
--   
--   <ul>
--   <li><tt>Cores</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>licenseAffinityToHost</tt> | <tt>maximumCores</tt> |
--   <tt>minimumCores</tt></li>
--   <li><tt>Instances</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>maximumCores</tt> | <tt>minimumCores</tt> |
--   <tt>maximumSockets</tt> | <tt>minimumSockets</tt> |
--   <tt>maximumVcpus</tt> | <tt>minimumVcpus</tt></li>
--   <li><tt>Sockets</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>licenseAffinityToHost</tt> | <tt>maximumSockets</tt> |
--   <tt>minimumSockets</tt></li>
--   <li><tt>vCPUs</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>honorVcpuOptimization</tt> | <tt>maximumVcpus</tt> |
--   <tt>minimumVcpus</tt></li>
--   </ul>
--   
--   The unit for <tt>licenseAffinityToHost</tt> is days and the range is 1
--   to 180. The possible values for <tt>allowedTenancy</tt> are
--   <tt>EC2-Default</tt>, <tt>EC2-DedicatedHost</tt>, and
--   <tt>EC2-DedicatedInstance</tt>. The possible values for
--   <tt>honorVcpuOptimization</tt> are <tt>True</tt> and <tt>False</tt>.
createLicenseConfiguration_licenseRules :: Lens' CreateLicenseConfiguration (Maybe [Text])

-- | Description of the license configuration.
createLicenseConfiguration_description :: Lens' CreateLicenseConfiguration (Maybe Text)

-- | Tags to add to the license configuration.
createLicenseConfiguration_tags :: Lens' CreateLicenseConfiguration (Maybe [Tag])

-- | Name of the license configuration.
createLicenseConfiguration_name :: Lens' CreateLicenseConfiguration Text

-- | Dimension used to track the license inventory.
createLicenseConfiguration_licenseCountingType :: Lens' CreateLicenseConfiguration LicenseCountingType

-- | Amazon Resource Name (ARN) of the license configuration.
createLicenseConfigurationResponse_licenseConfigurationArn :: Lens' CreateLicenseConfigurationResponse (Maybe Text)

-- | The response's http status code.
createLicenseConfigurationResponse_httpStatus :: Lens' CreateLicenseConfigurationResponse Int

-- | Information about the license.
createLicense_licenseMetadata :: Lens' CreateLicense (Maybe [Metadata])

-- | License name.
createLicense_licenseName :: Lens' CreateLicense Text

-- | Product name.
createLicense_productName :: Lens' CreateLicense Text

-- | Product SKU.
createLicense_productSKU :: Lens' CreateLicense Text

-- | License issuer.
createLicense_issuer :: Lens' CreateLicense Issuer

-- | Home Region for the license.
createLicense_homeRegion :: Lens' CreateLicense Text

-- | Date and time range during which the license is valid, in ISO8601-UTC
--   format.
createLicense_validity :: Lens' CreateLicense DatetimeRange

-- | License entitlements.
createLicense_entitlements :: Lens' CreateLicense [Entitlement]

-- | License beneficiary.
createLicense_beneficiary :: Lens' CreateLicense Text

-- | Configuration for consumption of the license. Choose a provisional
--   configuration for workloads running with continuous connectivity.
--   Choose a borrow configuration for workloads with offline usage.
createLicense_consumptionConfiguration :: Lens' CreateLicense ConsumptionConfiguration

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
createLicense_clientToken :: Lens' CreateLicense Text

-- | License status.
createLicenseResponse_status :: Lens' CreateLicenseResponse (Maybe LicenseStatus)

-- | License version.
createLicenseResponse_version :: Lens' CreateLicenseResponse (Maybe Text)

-- | Amazon Resource Name (ARN) of the license.
createLicenseResponse_licenseArn :: Lens' CreateLicenseResponse (Maybe Text)

-- | The response's http status code.
createLicenseResponse_httpStatus :: Lens' CreateLicenseResponse Int

-- | Filters to scope the results. Valid filters are <tt>ResourceArns</tt>
--   and <tt>Status</tt>.
listLicenseConversionTasks_filters :: Lens' ListLicenseConversionTasks (Maybe [Filter])

-- | Token for the next set of results.
listLicenseConversionTasks_nextToken :: Lens' ListLicenseConversionTasks (Maybe Text)

-- | Maximum number of results to return in a single call.
listLicenseConversionTasks_maxResults :: Lens' ListLicenseConversionTasks (Maybe Int)

-- | Information about the license configuration tasks for your account.
listLicenseConversionTasksResponse_licenseConversionTasks :: Lens' ListLicenseConversionTasksResponse (Maybe [LicenseConversionTask])

-- | Token for the next set of results.
listLicenseConversionTasksResponse_nextToken :: Lens' ListLicenseConversionTasksResponse (Maybe Text)

-- | The response's http status code.
listLicenseConversionTasksResponse_httpStatus :: Lens' ListLicenseConversionTasksResponse Int

-- | Filters to scope the results. The following filters and logical
--   operators are supported:
--   
--   <ul>
--   <li><tt>account_id</tt> - The ID of the Amazon Web Services account
--   that owns the resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>application_name</tt> - The name of the application. Logical
--   operators are <tt>EQUALS</tt> | <tt>BEGINS_WITH</tt>.</li>
--   <li><tt>license_included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>. Possible values
--   are <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   <li><tt>platform</tt> - The platform of the resource. Logical
--   operators are <tt>EQUALS</tt> | <tt>BEGINS_WITH</tt>.</li>
--   <li><tt>resource_id</tt> - The ID of the resource. Logical operators
--   are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>tag:&lt;key&gt;</tt> - The key/value combination of a tag
--   assigned to the resource. Logical operators are <tt>EQUALS</tt>
--   (single account) or <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt> (cross
--   account).</li>
--   </ul>
listResourceInventory_filters :: Lens' ListResourceInventory (Maybe [InventoryFilter])

-- | Token for the next set of results.
listResourceInventory_nextToken :: Lens' ListResourceInventory (Maybe Text)

-- | Maximum number of results to return in a single call.
listResourceInventory_maxResults :: Lens' ListResourceInventory (Maybe Int)

-- | Information about the resources.
listResourceInventoryResponse_resourceInventoryList :: Lens' ListResourceInventoryResponse (Maybe [ResourceInventory])

-- | Token for the next set of results.
listResourceInventoryResponse_nextToken :: Lens' ListResourceInventoryResponse (Maybe Text)

-- | The response's http status code.
listResourceInventoryResponse_httpStatus :: Lens' ListResourceInventoryResponse Int

-- | Token ID.
deleteToken_tokenId :: Lens' DeleteToken Text

-- | The response's http status code.
deleteTokenResponse_httpStatus :: Lens' DeleteTokenResponse Int

-- | ID of the license configuration.
deleteLicenseConfiguration_licenseConfigurationArn :: Lens' DeleteLicenseConfiguration Text

-- | The response's http status code.
deleteLicenseConfigurationResponse_httpStatus :: Lens' DeleteLicenseConfigurationResponse Int

-- | New number of licenses managed by the license configuration.
updateLicenseConfiguration_licenseCount :: Lens' UpdateLicenseConfiguration (Maybe Integer)

-- | New name of the license configuration.
updateLicenseConfiguration_name :: Lens' UpdateLicenseConfiguration (Maybe Text)

-- | New status of the license configuration.
updateLicenseConfiguration_licenseConfigurationStatus :: Lens' UpdateLicenseConfiguration (Maybe LicenseConfigurationStatus)

-- | New hard limit of the number of available licenses.
updateLicenseConfiguration_licenseCountHardLimit :: Lens' UpdateLicenseConfiguration (Maybe Bool)

-- | When true, disassociates a resource when software is uninstalled.
updateLicenseConfiguration_disassociateWhenNotFound :: Lens' UpdateLicenseConfiguration (Maybe Bool)

-- | New product information.
updateLicenseConfiguration_productInformationList :: Lens' UpdateLicenseConfiguration (Maybe [ProductInformation])

-- | New license rule. The only rule that you can add after you create a
--   license configuration is licenseAffinityToHost.
updateLicenseConfiguration_licenseRules :: Lens' UpdateLicenseConfiguration (Maybe [Text])

-- | New description of the license configuration.
updateLicenseConfiguration_description :: Lens' UpdateLicenseConfiguration (Maybe Text)

-- | Amazon Resource Name (ARN) of the license configuration.
updateLicenseConfiguration_licenseConfigurationArn :: Lens' UpdateLicenseConfiguration Text

-- | The response's http status code.
updateLicenseConfigurationResponse_httpStatus :: Lens' UpdateLicenseConfigurationResponse Int

-- | License beneficiary.
checkInLicense_beneficiary :: Lens' CheckInLicense (Maybe Text)

-- | License consumption token.
checkInLicense_licenseConsumptionToken :: Lens' CheckInLicense Text

-- | The response's http status code.
checkInLicenseResponse_httpStatus :: Lens' CheckInLicenseResponse Int

-- | Token IDs.
listTokens_tokenIds :: Lens' ListTokens (Maybe [Text])

-- | Filters to scope the results. The following filter is supported:
--   
--   <ul>
--   <li><pre>LicenseArns</pre></li>
--   </ul>
listTokens_filters :: Lens' ListTokens (Maybe [Filter])

-- | Token for the next set of results.
listTokens_nextToken :: Lens' ListTokens (Maybe Text)

-- | Maximum number of results to return in a single call.
listTokens_maxResults :: Lens' ListTokens (Maybe Natural)

-- | Received token details.
listTokensResponse_tokens :: Lens' ListTokensResponse (Maybe [TokenData])

-- | Token for the next set of results.
listTokensResponse_nextToken :: Lens' ListTokensResponse (Maybe Text)

-- | The response's http status code.
listTokensResponse_httpStatus :: Lens' ListTokensResponse Int

-- | Amazon Resource Name (ARN) of the license configuration.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | Information about the tags.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
createGrant_clientToken :: Lens' CreateGrant Text

-- | Grant name.
createGrant_grantName :: Lens' CreateGrant Text

-- | Amazon Resource Name (ARN) of the license.
createGrant_licenseArn :: Lens' CreateGrant Text

-- | The grant principals.
createGrant_principals :: Lens' CreateGrant (NonEmpty Text)

-- | Home Region of the grant.
createGrant_homeRegion :: Lens' CreateGrant Text

-- | Allowed operations for the grant.
createGrant_allowedOperations :: Lens' CreateGrant (NonEmpty AllowedOperation)

-- | Grant status.
createGrantResponse_status :: Lens' CreateGrantResponse (Maybe GrantStatus)

-- | Grant version.
createGrantResponse_version :: Lens' CreateGrantResponse (Maybe Text)

-- | Grant ARN.
createGrantResponse_grantArn :: Lens' CreateGrantResponse (Maybe Text)

-- | The response's http status code.
createGrantResponse_httpStatus :: Lens' CreateGrantResponse Int

-- | ARNs of the license configurations to add.
updateLicenseSpecificationsForResource_addLicenseSpecifications :: Lens' UpdateLicenseSpecificationsForResource (Maybe [LicenseSpecification])

-- | ARNs of the license configurations to remove.
updateLicenseSpecificationsForResource_removeLicenseSpecifications :: Lens' UpdateLicenseSpecificationsForResource (Maybe [LicenseSpecification])

-- | Amazon Resource Name (ARN) of the Amazon Web Services resource.
updateLicenseSpecificationsForResource_resourceArn :: Lens' UpdateLicenseSpecificationsForResource Text

-- | The response's http status code.
updateLicenseSpecificationsForResourceResponse_httpStatus :: Lens' UpdateLicenseSpecificationsForResourceResponse Int

-- | Current version of the license.
createLicenseVersion_sourceVersion :: Lens' CreateLicenseVersion (Maybe Text)

-- | Information about the license.
createLicenseVersion_licenseMetadata :: Lens' CreateLicenseVersion (Maybe [Metadata])

-- | Amazon Resource Name (ARN) of the license.
createLicenseVersion_licenseArn :: Lens' CreateLicenseVersion Text

-- | License name.
createLicenseVersion_licenseName :: Lens' CreateLicenseVersion Text

-- | Product name.
createLicenseVersion_productName :: Lens' CreateLicenseVersion Text

-- | License issuer.
createLicenseVersion_issuer :: Lens' CreateLicenseVersion Issuer

-- | Home Region of the license.
createLicenseVersion_homeRegion :: Lens' CreateLicenseVersion Text

-- | Date and time range during which the license is valid, in ISO8601-UTC
--   format.
createLicenseVersion_validity :: Lens' CreateLicenseVersion DatetimeRange

-- | License entitlements.
createLicenseVersion_entitlements :: Lens' CreateLicenseVersion [Entitlement]

-- | Configuration for consumption of the license. Choose a provisional
--   configuration for workloads running with continuous connectivity.
--   Choose a borrow configuration for workloads with offline usage.
createLicenseVersion_consumptionConfiguration :: Lens' CreateLicenseVersion ConsumptionConfiguration

-- | License status.
createLicenseVersion_status :: Lens' CreateLicenseVersion LicenseStatus

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
createLicenseVersion_clientToken :: Lens' CreateLicenseVersion Text

-- | License status.
createLicenseVersionResponse_status :: Lens' CreateLicenseVersionResponse (Maybe LicenseStatus)

-- | New version of the license.
createLicenseVersionResponse_version :: Lens' CreateLicenseVersionResponse (Maybe Text)

-- | License ARN.
createLicenseVersionResponse_licenseArn :: Lens' CreateLicenseVersionResponse (Maybe Text)

-- | The response's http status code.
createLicenseVersionResponse_httpStatus :: Lens' CreateLicenseVersionResponse Int

-- | License version.
getLicense_version :: Lens' GetLicense (Maybe Text)

-- | Amazon Resource Name (ARN) of the license.
getLicense_licenseArn :: Lens' GetLicense Text

-- | License details.
getLicenseResponse_license :: Lens' GetLicenseResponse (Maybe License)

-- | The response's http status code.
getLicenseResponse_httpStatus :: Lens' GetLicenseResponse Int

-- | Amazon Resource Name (ARN) of the license configuration.
getLicenseConfiguration_licenseConfigurationArn :: Lens' GetLicenseConfiguration Text

-- | License configuration status.
getLicenseConfigurationResponse_status :: Lens' GetLicenseConfigurationResponse (Maybe Text)

-- | Account ID of the owner of the license configuration.
getLicenseConfigurationResponse_ownerAccountId :: Lens' GetLicenseConfigurationResponse (Maybe Text)

-- | Summaries of the licenses consumed by resources.
getLicenseConfigurationResponse_consumedLicenseSummaryList :: Lens' GetLicenseConfigurationResponse (Maybe [ConsumedLicenseSummary])

-- | Number of available licenses.
getLicenseConfigurationResponse_licenseCount :: Lens' GetLicenseConfigurationResponse (Maybe Integer)

-- | Summaries of the managed resources.
getLicenseConfigurationResponse_managedResourceSummaryList :: Lens' GetLicenseConfigurationResponse (Maybe [ManagedResourceSummary])

-- | Name of the license configuration.
getLicenseConfigurationResponse_name :: Lens' GetLicenseConfigurationResponse (Maybe Text)

-- | Sets the number of available licenses as a hard limit.
getLicenseConfigurationResponse_licenseCountHardLimit :: Lens' GetLicenseConfigurationResponse (Maybe Bool)

-- | When true, disassociates a resource when software is uninstalled.
getLicenseConfigurationResponse_disassociateWhenNotFound :: Lens' GetLicenseConfigurationResponse (Maybe Bool)

-- | Product information.
getLicenseConfigurationResponse_productInformationList :: Lens' GetLicenseConfigurationResponse (Maybe [ProductInformation])

-- | Dimension for which the licenses are counted.
getLicenseConfigurationResponse_licenseCountingType :: Lens' GetLicenseConfigurationResponse (Maybe LicenseCountingType)

-- | Automated discovery information.
getLicenseConfigurationResponse_automatedDiscoveryInformation :: Lens' GetLicenseConfigurationResponse (Maybe AutomatedDiscoveryInformation)

-- | Number of licenses assigned to resources.
getLicenseConfigurationResponse_consumedLicenses :: Lens' GetLicenseConfigurationResponse (Maybe Integer)

-- | License rules.
getLicenseConfigurationResponse_licenseRules :: Lens' GetLicenseConfigurationResponse (Maybe [Text])

-- | Unique ID for the license configuration.
getLicenseConfigurationResponse_licenseConfigurationId :: Lens' GetLicenseConfigurationResponse (Maybe Text)

-- | Description of the license configuration.
getLicenseConfigurationResponse_description :: Lens' GetLicenseConfigurationResponse (Maybe Text)

-- | Amazon Resource Name (ARN) of the license configuration.
getLicenseConfigurationResponse_licenseConfigurationArn :: Lens' GetLicenseConfigurationResponse (Maybe Text)

-- | Tags for the license configuration.
getLicenseConfigurationResponse_tags :: Lens' GetLicenseConfigurationResponse (Maybe [Tag])

-- | The response's http status code.
getLicenseConfigurationResponse_httpStatus :: Lens' GetLicenseConfigurationResponse Int

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>LicenseIssuerName</pre></li>
--   <li><pre>LicenseArn</pre></li>
--   <li><pre>GrantStatus</pre></li>
--   <li><pre>GranterAccountId</pre></li>
--   </ul>
listReceivedGrants_filters :: Lens' ListReceivedGrants (Maybe [Filter])

-- | Token for the next set of results.
listReceivedGrants_nextToken :: Lens' ListReceivedGrants (Maybe Text)

-- | Amazon Resource Names (ARNs) of the grants.
listReceivedGrants_grantArns :: Lens' ListReceivedGrants (Maybe [Text])

-- | Maximum number of results to return in a single call.
listReceivedGrants_maxResults :: Lens' ListReceivedGrants (Maybe Natural)

-- | Received grant details.
listReceivedGrantsResponse_grants :: Lens' ListReceivedGrantsResponse (Maybe [Grant])

-- | Token for the next set of results.
listReceivedGrantsResponse_nextToken :: Lens' ListReceivedGrantsResponse (Maybe Text)

-- | The response's http status code.
listReceivedGrantsResponse_httpStatus :: Lens' ListReceivedGrantsResponse Int

-- | ID of the license type conversion task to retrieve information on.
getLicenseConversionTask_licenseConversionTaskId :: Lens' GetLicenseConversionTask Text

-- | Status of the license type conversion task.
getLicenseConversionTaskResponse_status :: Lens' GetLicenseConversionTaskResponse (Maybe LicenseConversionTaskStatus)

-- | Time at which the license type conversion task was started .
getLicenseConversionTaskResponse_startTime :: Lens' GetLicenseConversionTaskResponse (Maybe UTCTime)

-- | Information about the license type converted to.
getLicenseConversionTaskResponse_destinationLicenseContext :: Lens' GetLicenseConversionTaskResponse (Maybe LicenseConversionContext)

-- | ID of the license type conversion task.
getLicenseConversionTaskResponse_licenseConversionTaskId :: Lens' GetLicenseConversionTaskResponse (Maybe Text)

-- | Amazon Resource Names (ARN) of the resources the license conversion
--   task is associated with.
getLicenseConversionTaskResponse_resourceArn :: Lens' GetLicenseConversionTaskResponse (Maybe Text)

-- | The status message for the conversion task.
getLicenseConversionTaskResponse_statusMessage :: Lens' GetLicenseConversionTaskResponse (Maybe Text)

-- | Time at which the license type conversion task was completed.
getLicenseConversionTaskResponse_endTime :: Lens' GetLicenseConversionTaskResponse (Maybe UTCTime)

-- | Amount of time to complete the license type conversion.
getLicenseConversionTaskResponse_licenseConversionTime :: Lens' GetLicenseConversionTaskResponse (Maybe UTCTime)

-- | Information about the license type converted from.
getLicenseConversionTaskResponse_sourceLicenseContext :: Lens' GetLicenseConversionTaskResponse (Maybe LicenseConversionContext)

-- | The response's http status code.
getLicenseConversionTaskResponse_httpStatus :: Lens' GetLicenseConversionTaskResponse Int

-- | Amazon Resource Name (ARN) of the license.
getLicenseUsage_licenseArn :: Lens' GetLicenseUsage Text

-- | License usage details.
getLicenseUsageResponse_licenseUsage :: Lens' GetLicenseUsageResponse (Maybe LicenseUsage)

-- | The response's http status code.
getLicenseUsageResponse_httpStatus :: Lens' GetLicenseUsageResponse Int

-- | Checks whether you have the required permissions for the action,
--   without actually making the request. Provides an error response if you
--   do not have the required permissions.
extendLicenseConsumption_dryRun :: Lens' ExtendLicenseConsumption (Maybe Bool)

-- | License consumption token.
extendLicenseConsumption_licenseConsumptionToken :: Lens' ExtendLicenseConsumption Text

-- | Date and time at which the license consumption expires.
extendLicenseConsumptionResponse_expiration :: Lens' ExtendLicenseConsumptionResponse (Maybe Text)

-- | License consumption token.
extendLicenseConsumptionResponse_licenseConsumptionToken :: Lens' ExtendLicenseConsumptionResponse (Maybe Text)

-- | The response's http status code.
extendLicenseConsumptionResponse_httpStatus :: Lens' ExtendLicenseConsumptionResponse Int

-- | Grant version.
getGrant_version :: Lens' GetGrant (Maybe Text)

-- | Amazon Resource Name (ARN) of the grant.
getGrant_grantArn :: Lens' GetGrant Text

-- | Grant details.
getGrantResponse_grant :: Lens' GetGrantResponse (Maybe Grant)

-- | The response's http status code.
getGrantResponse_httpStatus :: Lens' GetGrantResponse Int

-- | Node ID.
checkoutLicense_nodeId :: Lens' CheckoutLicense (Maybe Text)

-- | License beneficiary.
checkoutLicense_beneficiary :: Lens' CheckoutLicense (Maybe Text)

-- | Product SKU.
checkoutLicense_productSKU :: Lens' CheckoutLicense Text

-- | Checkout type.
checkoutLicense_checkoutType :: Lens' CheckoutLicense CheckoutType

-- | Key fingerprint identifying the license.
checkoutLicense_keyFingerprint :: Lens' CheckoutLicense Text

-- | License entitlements.
checkoutLicense_entitlements :: Lens' CheckoutLicense [EntitlementData]

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
checkoutLicense_clientToken :: Lens' CheckoutLicense Text

-- | Allowed license entitlements.
checkoutLicenseResponse_entitlementsAllowed :: Lens' CheckoutLicenseResponse (Maybe [EntitlementData])

-- | Checkout type.
checkoutLicenseResponse_checkoutType :: Lens' CheckoutLicenseResponse (Maybe CheckoutType)

-- | Date and time at which the license checkout expires.
checkoutLicenseResponse_expiration :: Lens' CheckoutLicenseResponse (Maybe Text)

-- | Signed token.
checkoutLicenseResponse_signedToken :: Lens' CheckoutLicenseResponse (Maybe Text)

-- | License consumption token.
checkoutLicenseResponse_licenseConsumptionToken :: Lens' CheckoutLicenseResponse (Maybe Text)

-- | Node ID.
checkoutLicenseResponse_nodeId :: Lens' CheckoutLicenseResponse (Maybe Text)

-- | Date and time at which the license checkout is issued.
checkoutLicenseResponse_issuedAt :: Lens' CheckoutLicenseResponse (Maybe Text)

-- | Amazon Resource Name (ARN) of the checkout license.
checkoutLicenseResponse_licenseArn :: Lens' CheckoutLicenseResponse (Maybe Text)

-- | The response's http status code.
checkoutLicenseResponse_httpStatus :: Lens' CheckoutLicenseResponse Int

-- | Amazon Resource Name (ARN) of the resource you are converting the
--   license type for.
createLicenseConversionTaskForResource_resourceArn :: Lens' CreateLicenseConversionTaskForResource Text

-- | Information that identifies the license type you are converting from.
--   For the structure of the source license, see <a>Convert a license type
--   using the AWS CLI</a> in the <i>License Manager User Guide</i>.
createLicenseConversionTaskForResource_sourceLicenseContext :: Lens' CreateLicenseConversionTaskForResource LicenseConversionContext

-- | Information that identifies the license type you are converting to.
--   For the structure of the destination license, see <a>Convert a license
--   type using the AWS CLI</a> in the <i>License Manager User Guide</i>.
createLicenseConversionTaskForResource_destinationLicenseContext :: Lens' CreateLicenseConversionTaskForResource LicenseConversionContext

-- | The ID of the created license type conversion task.
createLicenseConversionTaskForResourceResponse_licenseConversionTaskId :: Lens' CreateLicenseConversionTaskForResourceResponse (Maybe Text)

-- | The response's http status code.
createLicenseConversionTaskForResourceResponse_httpStatus :: Lens' CreateLicenseConversionTaskForResourceResponse Int

-- | Amazon Resource Name (ARN) of the grant.
acceptGrant_grantArn :: Lens' AcceptGrant Text

-- | Grant status.
acceptGrantResponse_status :: Lens' AcceptGrantResponse (Maybe GrantStatus)

-- | Grant version.
acceptGrantResponse_version :: Lens' AcceptGrantResponse (Maybe Text)

-- | Grant ARN.
acceptGrantResponse_grantArn :: Lens' AcceptGrantResponse (Maybe Text)

-- | The response's http status code.
acceptGrantResponse_httpStatus :: Lens' AcceptGrantResponse Int

-- | Token for the next set of results.
listLicenseSpecificationsForResource_nextToken :: Lens' ListLicenseSpecificationsForResource (Maybe Text)

-- | Maximum number of results to return in a single call.
listLicenseSpecificationsForResource_maxResults :: Lens' ListLicenseSpecificationsForResource (Maybe Int)

-- | Amazon Resource Name (ARN) of a resource that has an associated
--   license configuration.
listLicenseSpecificationsForResource_resourceArn :: Lens' ListLicenseSpecificationsForResource Text

-- | License configurations associated with a resource.
listLicenseSpecificationsForResourceResponse_licenseSpecifications :: Lens' ListLicenseSpecificationsForResourceResponse (Maybe [LicenseSpecification])

-- | Token for the next set of results.
listLicenseSpecificationsForResourceResponse_nextToken :: Lens' ListLicenseSpecificationsForResourceResponse (Maybe Text)

-- | The response's http status code.
listLicenseSpecificationsForResourceResponse_httpStatus :: Lens' ListLicenseSpecificationsForResourceResponse Int

-- | Information about constraints.
checkoutBorrowLicense_checkoutMetadata :: Lens' CheckoutBorrowLicense (Maybe [Metadata])

-- | Node ID.
checkoutBorrowLicense_nodeId :: Lens' CheckoutBorrowLicense (Maybe Text)

-- | Amazon Resource Name (ARN) of the license. The license must use the
--   borrow consumption configuration.
checkoutBorrowLicense_licenseArn :: Lens' CheckoutBorrowLicense Text

-- | License entitlements. Partial checkouts are not supported.
checkoutBorrowLicense_entitlements :: Lens' CheckoutBorrowLicense [EntitlementData]

-- | Digital signature method. The possible value is JSON Web Signature
--   (JWS) algorithm PS384. For more information, see <a>RFC 7518 Digital
--   Signature with RSASSA-PSS</a>.
checkoutBorrowLicense_digitalSignatureMethod :: Lens' CheckoutBorrowLicense DigitalSignatureMethod

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
checkoutBorrowLicense_clientToken :: Lens' CheckoutBorrowLicense Text

-- | Allowed license entitlements.
checkoutBorrowLicenseResponse_entitlementsAllowed :: Lens' CheckoutBorrowLicenseResponse (Maybe [EntitlementData])

-- | Information about constraints.
checkoutBorrowLicenseResponse_checkoutMetadata :: Lens' CheckoutBorrowLicenseResponse (Maybe [Metadata])

-- | Date and time at which the license checkout expires.
checkoutBorrowLicenseResponse_expiration :: Lens' CheckoutBorrowLicenseResponse (Maybe Text)

-- | Signed token.
checkoutBorrowLicenseResponse_signedToken :: Lens' CheckoutBorrowLicenseResponse (Maybe Text)

-- | License consumption token.
checkoutBorrowLicenseResponse_licenseConsumptionToken :: Lens' CheckoutBorrowLicenseResponse (Maybe Text)

-- | Node ID.
checkoutBorrowLicenseResponse_nodeId :: Lens' CheckoutBorrowLicenseResponse (Maybe Text)

-- | Date and time at which the license checkout is issued.
checkoutBorrowLicenseResponse_issuedAt :: Lens' CheckoutBorrowLicenseResponse (Maybe Text)

-- | Amazon Resource Name (ARN) of the license.
checkoutBorrowLicenseResponse_licenseArn :: Lens' CheckoutBorrowLicenseResponse (Maybe Text)

-- | The response's http status code.
checkoutBorrowLicenseResponse_httpStatus :: Lens' CheckoutBorrowLicenseResponse Int

-- | Indicates whether cross-account discovery is enabled.
getServiceSettingsResponse_enableCrossAccountsDiscovery :: Lens' GetServiceSettingsResponse (Maybe Bool)

-- | SNS topic configured to receive notifications from License Manager.
getServiceSettingsResponse_snsTopicArn :: Lens' GetServiceSettingsResponse (Maybe Text)

-- | Amazon Resource Name (ARN) of the resource share. The License Manager
--   management account provides member accounts with access to this share.
getServiceSettingsResponse_licenseManagerResourceShareArn :: Lens' GetServiceSettingsResponse (Maybe Text)

-- | Regional S3 bucket path for storing reports, license trail event data,
--   discovery data, and so on.
getServiceSettingsResponse_s3BucketArn :: Lens' GetServiceSettingsResponse (Maybe Text)

-- | Indicates whether Organizations is integrated with License Manager for
--   cross-account discovery.
getServiceSettingsResponse_organizationConfiguration :: Lens' GetServiceSettingsResponse (Maybe OrganizationConfiguration)

-- | The response's http status code.
getServiceSettingsResponse_httpStatus :: Lens' GetServiceSettingsResponse Int

-- | Amazon Resource Name (ARN) of the grant.
rejectGrant_grantArn :: Lens' RejectGrant Text

-- | Grant status.
rejectGrantResponse_status :: Lens' RejectGrantResponse (Maybe GrantStatus)

-- | Grant version.
rejectGrantResponse_version :: Lens' RejectGrantResponse (Maybe Text)

-- | Grant ARN.
rejectGrantResponse_grantArn :: Lens' RejectGrantResponse (Maybe Text)

-- | The response's http status code.
rejectGrantResponse_httpStatus :: Lens' RejectGrantResponse Int

-- | Activates cross-account discovery.
updateServiceSettings_enableCrossAccountsDiscovery :: Lens' UpdateServiceSettings (Maybe Bool)

-- | Amazon Resource Name (ARN) of the Amazon SNS topic used for License
--   Manager alerts.
updateServiceSettings_snsTopicArn :: Lens' UpdateServiceSettings (Maybe Text)

-- | Amazon Resource Name (ARN) of the Amazon S3 bucket where the License
--   Manager information is stored.
updateServiceSettings_s3BucketArn :: Lens' UpdateServiceSettings (Maybe Text)

-- | Enables integration with Organizations for cross-account discovery.
updateServiceSettings_organizationConfiguration :: Lens' UpdateServiceSettings (Maybe OrganizationConfiguration)

-- | The response's http status code.
updateServiceSettingsResponse_httpStatus :: Lens' UpdateServiceSettingsResponse Int

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>LicenseArn</pre></li>
--   <li><pre>GrantStatus</pre></li>
--   <li><pre>GranteePrincipalARN</pre></li>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>LicenseIssuerName</pre></li>
--   </ul>
listDistributedGrants_filters :: Lens' ListDistributedGrants (Maybe [Filter])

-- | Token for the next set of results.
listDistributedGrants_nextToken :: Lens' ListDistributedGrants (Maybe Text)

-- | Amazon Resource Names (ARNs) of the grants.
listDistributedGrants_grantArns :: Lens' ListDistributedGrants (Maybe [Text])

-- | Maximum number of results to return in a single call.
listDistributedGrants_maxResults :: Lens' ListDistributedGrants (Maybe Natural)

-- | Distributed grant details.
listDistributedGrantsResponse_grants :: Lens' ListDistributedGrantsResponse (Maybe [Grant])

-- | Token for the next set of results.
listDistributedGrantsResponse_nextToken :: Lens' ListDistributedGrantsResponse (Maybe Text)

-- | The response's http status code.
listDistributedGrantsResponse_httpStatus :: Lens' ListDistributedGrantsResponse Int

-- | Token for the next set of results.
listFailuresForLicenseConfigurationOperations_nextToken :: Lens' ListFailuresForLicenseConfigurationOperations (Maybe Text)

-- | Maximum number of results to return in a single call.
listFailuresForLicenseConfigurationOperations_maxResults :: Lens' ListFailuresForLicenseConfigurationOperations (Maybe Int)

-- | Amazon Resource Name of the license configuration.
listFailuresForLicenseConfigurationOperations_licenseConfigurationArn :: Lens' ListFailuresForLicenseConfigurationOperations Text

-- | Token for the next set of results.
listFailuresForLicenseConfigurationOperationsResponse_nextToken :: Lens' ListFailuresForLicenseConfigurationOperationsResponse (Maybe Text)

-- | License configuration operations that failed.
listFailuresForLicenseConfigurationOperationsResponse_licenseOperationFailureList :: Lens' ListFailuresForLicenseConfigurationOperationsResponse (Maybe [LicenseOperationFailure])

-- | The response's http status code.
listFailuresForLicenseConfigurationOperationsResponse_httpStatus :: Lens' ListFailuresForLicenseConfigurationOperationsResponse Int

-- | The Status reason for the delete request.
deleteGrant_statusReason :: Lens' DeleteGrant (Maybe Text)

-- | Amazon Resource Name (ARN) of the grant.
deleteGrant_grantArn :: Lens' DeleteGrant Text

-- | Current version of the grant.
deleteGrant_version :: Lens' DeleteGrant Text

-- | Grant status.
deleteGrantResponse_status :: Lens' DeleteGrantResponse (Maybe GrantStatus)

-- | Grant version.
deleteGrantResponse_version :: Lens' DeleteGrantResponse (Maybe Text)

-- | Grant ARN.
deleteGrantResponse_grantArn :: Lens' DeleteGrantResponse (Maybe Text)

-- | The response's http status code.
deleteGrantResponse_httpStatus :: Lens' DeleteGrantResponse Int

-- | Data specified by the caller to be included in the JWT token. The data
--   is mapped to the amr claim of the JWT token.
createToken_tokenProperties :: Lens' CreateToken (Maybe [Text])

-- | Amazon Resource Name (ARN) of the IAM roles to embed in the token.
--   License Manager does not check whether the roles are in use.
createToken_roleArns :: Lens' CreateToken (Maybe [Text])

-- | Token expiration, in days, counted from token creation. The default is
--   365 days.
createToken_expirationInDays :: Lens' CreateToken (Maybe Int)

-- | Amazon Resource Name (ARN) of the license. The ARN is mapped to the
--   aud claim of the JWT token.
createToken_licenseArn :: Lens' CreateToken Text

-- | Idempotency token, valid for 10 minutes.
createToken_clientToken :: Lens' CreateToken Text

-- | Refresh token, encoded as a JWT token.
createTokenResponse_token :: Lens' CreateTokenResponse (Maybe Text)

-- | Token ID.
createTokenResponse_tokenId :: Lens' CreateTokenResponse (Maybe Text)

-- | Token type.
createTokenResponse_tokenType :: Lens' CreateTokenResponse (Maybe TokenType)

-- | The response's http status code.
createTokenResponse_httpStatus :: Lens' CreateTokenResponse Int

-- | Amazon Resource Name (ARN) of the license.
deleteLicense_licenseArn :: Lens' DeleteLicense Text

-- | Current version of the license.
deleteLicense_sourceVersion :: Lens' DeleteLicense Text

-- | License status.
deleteLicenseResponse_status :: Lens' DeleteLicenseResponse (Maybe LicenseDeletionStatus)

-- | Date when the license is deleted.
deleteLicenseResponse_deletionDate :: Lens' DeleteLicenseResponse (Maybe Text)

-- | The response's http status code.
deleteLicenseResponse_httpStatus :: Lens' DeleteLicenseResponse Int

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>Beneficiary</pre></li>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>Fingerprint</pre></li>
--   <li><pre>Status</pre></li>
--   </ul>
listLicenses_filters :: Lens' ListLicenses (Maybe [Filter])

-- | Token for the next set of results.
listLicenses_nextToken :: Lens' ListLicenses (Maybe Text)

-- | Amazon Resource Names (ARNs) of the licenses.
listLicenses_licenseArns :: Lens' ListLicenses (Maybe [Text])

-- | Maximum number of results to return in a single call.
listLicenses_maxResults :: Lens' ListLicenses (Maybe Natural)

-- | Token for the next set of results.
listLicensesResponse_nextToken :: Lens' ListLicensesResponse (Maybe Text)

-- | License details.
listLicensesResponse_licenses :: Lens' ListLicensesResponse (Maybe [License])

-- | The response's http status code.
listLicensesResponse_httpStatus :: Lens' ListLicensesResponse Int

-- | Filters to scope the results. The following filters and logical
--   operators are supported:
--   
--   <ul>
--   <li><tt>licenseCountingType</tt> - The dimension for which licenses
--   are counted. Possible values are <tt>vCPU</tt> | <tt>Instance</tt> |
--   <tt>Core</tt> | <tt>Socket</tt>. Logical operators are <tt>EQUALS</tt>
--   | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>enforceLicenseCount</tt> - A Boolean value that indicates
--   whether hard license enforcement is used. Logical operators are
--   <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>usagelimitExceeded</tt> - A Boolean value that indicates
--   whether the available licenses have been exceeded. Logical operators
--   are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   </ul>
listLicenseConfigurations_filters :: Lens' ListLicenseConfigurations (Maybe [Filter])

-- | Token for the next set of results.
listLicenseConfigurations_nextToken :: Lens' ListLicenseConfigurations (Maybe Text)

-- | Amazon Resource Names (ARN) of the license configurations.
listLicenseConfigurations_licenseConfigurationArns :: Lens' ListLicenseConfigurations (Maybe [Text])

-- | Maximum number of results to return in a single call.
listLicenseConfigurations_maxResults :: Lens' ListLicenseConfigurations (Maybe Int)

-- | Token for the next set of results.
listLicenseConfigurationsResponse_nextToken :: Lens' ListLicenseConfigurationsResponse (Maybe Text)

-- | Information about the license configurations.
listLicenseConfigurationsResponse_licenseConfigurations :: Lens' ListLicenseConfigurationsResponse (Maybe [LicenseConfiguration])

-- | The response's http status code.
listLicenseConfigurationsResponse_httpStatus :: Lens' ListLicenseConfigurationsResponse Int

-- | Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>Status</pre></li>
--   <li><pre>Fingerprint</pre></li>
--   <li><pre>IssuerName</pre></li>
--   <li><pre>Beneficiary</pre></li>
--   </ul>
listReceivedLicenses_filters :: Lens' ListReceivedLicenses (Maybe [Filter])

-- | Token for the next set of results.
listReceivedLicenses_nextToken :: Lens' ListReceivedLicenses (Maybe Text)

-- | Amazon Resource Names (ARNs) of the licenses.
listReceivedLicenses_licenseArns :: Lens' ListReceivedLicenses (Maybe [Text])

-- | Maximum number of results to return in a single call.
listReceivedLicenses_maxResults :: Lens' ListReceivedLicenses (Maybe Natural)

-- | Token for the next set of results.
listReceivedLicensesResponse_nextToken :: Lens' ListReceivedLicensesResponse (Maybe Text)

-- | Received license details.
listReceivedLicensesResponse_licenses :: Lens' ListReceivedLicensesResponse (Maybe [GrantedLicense])

-- | The response's http status code.
listReceivedLicensesResponse_httpStatus :: Lens' ListReceivedLicensesResponse Int

-- | Grant status.
createGrantVersion_status :: Lens' CreateGrantVersion (Maybe GrantStatus)

-- | Allowed operations for the grant.
createGrantVersion_allowedOperations :: Lens' CreateGrantVersion (Maybe (NonEmpty AllowedOperation))

-- | Grant name.
createGrantVersion_grantName :: Lens' CreateGrantVersion (Maybe Text)

-- | Current version of the grant.
createGrantVersion_sourceVersion :: Lens' CreateGrantVersion (Maybe Text)

-- | Grant status reason.
createGrantVersion_statusReason :: Lens' CreateGrantVersion (Maybe Text)

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
createGrantVersion_clientToken :: Lens' CreateGrantVersion Text

-- | Amazon Resource Name (ARN) of the grant.
createGrantVersion_grantArn :: Lens' CreateGrantVersion Text

-- | Grant status.
createGrantVersionResponse_status :: Lens' CreateGrantVersionResponse (Maybe GrantStatus)

-- | New version of the grant.
createGrantVersionResponse_version :: Lens' CreateGrantVersionResponse (Maybe Text)

-- | Grant ARN.
createGrantVersionResponse_grantArn :: Lens' CreateGrantVersionResponse (Maybe Text)

-- | The response's http status code.
createGrantVersionResponse_httpStatus :: Lens' CreateGrantVersionResponse Int

-- | Token for the next set of results.
listAssociationsForLicenseConfiguration_nextToken :: Lens' ListAssociationsForLicenseConfiguration (Maybe Text)

-- | Maximum number of results to return in a single call.
listAssociationsForLicenseConfiguration_maxResults :: Lens' ListAssociationsForLicenseConfiguration (Maybe Int)

-- | Amazon Resource Name (ARN) of a license configuration.
listAssociationsForLicenseConfiguration_licenseConfigurationArn :: Lens' ListAssociationsForLicenseConfiguration Text

-- | Information about the associations for the license configuration.
listAssociationsForLicenseConfigurationResponse_licenseConfigurationAssociations :: Lens' ListAssociationsForLicenseConfigurationResponse (Maybe [LicenseConfigurationAssociation])

-- | Token for the next set of results.
listAssociationsForLicenseConfigurationResponse_nextToken :: Lens' ListAssociationsForLicenseConfigurationResponse (Maybe Text)

-- | The response's http status code.
listAssociationsForLicenseConfigurationResponse_httpStatus :: Lens' ListAssociationsForLicenseConfigurationResponse Int

-- | Amazon Resource Name (ARN) of the license configuration.
tagResource_resourceArn :: Lens' TagResource Text

-- | One or more tags.
tagResource_tags :: Lens' TagResource [Tag]

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int

-- | Token for the next set of results.
listLicenseVersions_nextToken :: Lens' ListLicenseVersions (Maybe Text)

-- | Maximum number of results to return in a single call.
listLicenseVersions_maxResults :: Lens' ListLicenseVersions (Maybe Natural)

-- | Amazon Resource Name (ARN) of the license.
listLicenseVersions_licenseArn :: Lens' ListLicenseVersions Text

-- | Token for the next set of results.
listLicenseVersionsResponse_nextToken :: Lens' ListLicenseVersionsResponse (Maybe Text)

-- | License details.
listLicenseVersionsResponse_licenses :: Lens' ListLicenseVersionsResponse (Maybe [License])

-- | The response's http status code.
listLicenseVersionsResponse_httpStatus :: Lens' ListLicenseVersionsResponse Int

-- | Amazon Resource Name (ARN) of the license configuration.
untagResource_resourceArn :: Lens' UntagResource Text

-- | Keys identifying the tags to remove.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int

-- | Amazon Resource Name (ARN) of the report generator.
getLicenseManagerReportGenerator_licenseManagerReportGeneratorArn :: Lens' GetLicenseManagerReportGenerator Text

-- | A report generator that creates periodic reports about your license
--   configurations.
getLicenseManagerReportGeneratorResponse_reportGenerator :: Lens' GetLicenseManagerReportGeneratorResponse (Maybe ReportGenerator)

-- | The response's http status code.
getLicenseManagerReportGeneratorResponse_httpStatus :: Lens' GetLicenseManagerReportGeneratorResponse Int

-- | Token properties to validate against those present in the JWT token.
getAccessToken_tokenProperties :: Lens' GetAccessToken (Maybe [Text])

-- | Refresh token, encoded as a JWT token.
getAccessToken_token :: Lens' GetAccessToken Text

-- | Temporary access token.
getAccessTokenResponse_accessToken :: Lens' GetAccessTokenResponse (Maybe Text)

-- | The response's http status code.
getAccessTokenResponse_httpStatus :: Lens' GetAccessTokenResponse Int

-- | Description of the report generator.
createLicenseManagerReportGenerator_description :: Lens' CreateLicenseManagerReportGenerator (Maybe Text)

-- | Tags to add to the report generator.
createLicenseManagerReportGenerator_tags :: Lens' CreateLicenseManagerReportGenerator (Maybe [Tag])

-- | Name of the report generator.
createLicenseManagerReportGenerator_reportGeneratorName :: Lens' CreateLicenseManagerReportGenerator Text

-- | Type of reports to generate. The following report types an be
--   generated:
--   
--   <ul>
--   <li>License configuration report - Reports the number and details of
--   consumed licenses for a license configuration.</li>
--   <li>Resource report - Reports the tracked licenses and resource
--   consumption for a license configuration.</li>
--   </ul>
createLicenseManagerReportGenerator_type :: Lens' CreateLicenseManagerReportGenerator [ReportType]

-- | Defines the type of license configuration the report generator tracks.
createLicenseManagerReportGenerator_reportContext :: Lens' CreateLicenseManagerReportGenerator ReportContext

-- | Frequency by which reports are generated. Reports can be generated
--   daily, monthly, or weekly.
createLicenseManagerReportGenerator_reportFrequency :: Lens' CreateLicenseManagerReportGenerator ReportFrequency

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
createLicenseManagerReportGenerator_clientToken :: Lens' CreateLicenseManagerReportGenerator Text

-- | The Amazon Resource Name (ARN) of the new report generator.
createLicenseManagerReportGeneratorResponse_licenseManagerReportGeneratorArn :: Lens' CreateLicenseManagerReportGeneratorResponse (Maybe Text)

-- | The response's http status code.
createLicenseManagerReportGeneratorResponse_httpStatus :: Lens' CreateLicenseManagerReportGeneratorResponse Int

-- | Time that automated discovery last ran.
automatedDiscoveryInformation_lastRunTime :: Lens' AutomatedDiscoveryInformation (Maybe UTCTime)

-- | Indicates whether early check-ins are allowed.
borrowConfiguration_allowEarlyCheckIn :: Lens' BorrowConfiguration Bool

-- | Maximum time for the borrow configuration, in minutes.
borrowConfiguration_maxTimeToLiveInMinutes :: Lens' BorrowConfiguration Int

-- | Resource type of the resource consuming a license.
consumedLicenseSummary_resourceType :: Lens' ConsumedLicenseSummary (Maybe ResourceType)

-- | Number of licenses consumed by the resource.
consumedLicenseSummary_consumedLicenses :: Lens' ConsumedLicenseSummary (Maybe Integer)

-- | Details about a borrow configuration.
consumptionConfiguration_borrowConfiguration :: Lens' ConsumptionConfiguration (Maybe BorrowConfiguration)

-- | Details about a provisional configuration.
consumptionConfiguration_provisionalConfiguration :: Lens' ConsumptionConfiguration (Maybe ProvisionalConfiguration)

-- | Renewal frequency.
consumptionConfiguration_renewType :: Lens' ConsumptionConfiguration (Maybe RenewType)

-- | End of the time range.
datetimeRange_end :: Lens' DatetimeRange (Maybe Text)

-- | Start of the time range.
datetimeRange_begin :: Lens' DatetimeRange Text

-- | Maximum entitlement count. Use if the unit is not None.
entitlement_maxCount :: Lens' Entitlement (Maybe Integer)

-- | Entitlement resource. Use only if the unit is None.
entitlement_value :: Lens' Entitlement (Maybe Text)

-- | Indicates whether overages are allowed.
entitlement_overage :: Lens' Entitlement (Maybe Bool)

-- | Indicates whether check-ins are allowed.
entitlement_allowCheckIn :: Lens' Entitlement (Maybe Bool)

-- | Entitlement name.
entitlement_name :: Lens' Entitlement Text

-- | Entitlement unit.
entitlement_unit :: Lens' Entitlement EntitlementUnit

-- | Entitlement data value.
entitlementData_value :: Lens' EntitlementData (Maybe Text)

-- | Entitlement data name.
entitlementData_name :: Lens' EntitlementData Text

-- | Entitlement data unit.
entitlementData_unit :: Lens' EntitlementData EntitlementDataUnit

-- | Maximum entitlement usage count.
entitlementUsage_maxCount :: Lens' EntitlementUsage (Maybe Text)

-- | Entitlement usage name.
entitlementUsage_name :: Lens' EntitlementUsage Text

-- | Resource usage consumed.
entitlementUsage_consumedValue :: Lens' EntitlementUsage Text

-- | Entitlement usage unit.
entitlementUsage_unit :: Lens' EntitlementUsage EntitlementDataUnit

-- | Filter values. Filter values are case-sensitive.
filter_values :: Lens' Filter (Maybe [Text])

-- | Name of the filter. Filter names are case-sensitive.
filter_name :: Lens' Filter (Maybe Text)

-- | Grant status reason.
grant_statusReason :: Lens' Grant (Maybe Text)

-- | Amazon Resource Name (ARN) of the grant.
grant_grantArn :: Lens' Grant Text

-- | Grant name.
grant_grantName :: Lens' Grant Text

-- | Parent ARN.
grant_parentArn :: Lens' Grant Text

-- | License ARN.
grant_licenseArn :: Lens' Grant Text

-- | The grantee principal ARN.
grant_granteePrincipalArn :: Lens' Grant Text

-- | Home Region of the grant.
grant_homeRegion :: Lens' Grant Text

-- | Grant status.
grant_grantStatus :: Lens' Grant GrantStatus

-- | Grant version.
grant_version :: Lens' Grant Text

-- | Granted operations.
grant_grantedOperations :: Lens' Grant (NonEmpty AllowedOperation)

-- | Granted license status.
grantedLicense_status :: Lens' GrantedLicense (Maybe LicenseStatus)

-- | Product name.
grantedLicense_productName :: Lens' GrantedLicense (Maybe Text)

-- | License name.
grantedLicense_licenseName :: Lens' GrantedLicense (Maybe Text)

-- | Product SKU.
grantedLicense_productSKU :: Lens' GrantedLicense (Maybe Text)

-- | Home Region of the granted license.
grantedLicense_homeRegion :: Lens' GrantedLicense (Maybe Text)

-- | Granted license received metadata.
grantedLicense_receivedMetadata :: Lens' GrantedLicense (Maybe ReceivedMetadata)

-- | Version of the granted license.
grantedLicense_version :: Lens' GrantedLicense (Maybe Text)

-- | License entitlements.
grantedLicense_entitlements :: Lens' GrantedLicense (Maybe [Entitlement])

-- | Date and time range during which the granted license is valid, in
--   ISO8601-UTC format.
grantedLicense_validity :: Lens' GrantedLicense (Maybe DatetimeRange)

-- | Configuration for consumption of the license.
grantedLicense_consumptionConfiguration :: Lens' GrantedLicense (Maybe ConsumptionConfiguration)

-- | Granted license beneficiary.
grantedLicense_beneficiary :: Lens' GrantedLicense (Maybe Text)

-- | Granted license issuer.
grantedLicense_issuer :: Lens' GrantedLicense (Maybe IssuerDetails)

-- | Amazon Resource Name (ARN) of the license.
grantedLicense_licenseArn :: Lens' GrantedLicense (Maybe Text)

-- | Granted license metadata.
grantedLicense_licenseMetadata :: Lens' GrantedLicense (Maybe [Metadata])

-- | Creation time of the granted license.
grantedLicense_createTime :: Lens' GrantedLicense (Maybe Text)

-- | Value of the filter.
inventoryFilter_value :: Lens' InventoryFilter (Maybe Text)

-- | Name of the filter.
inventoryFilter_name :: Lens' InventoryFilter Text

-- | Condition of the filter.
inventoryFilter_condition :: Lens' InventoryFilter InventoryFilterCondition

-- | Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
issuer_signKey :: Lens' Issuer (Maybe Text)

-- | Issuer name.
issuer_name :: Lens' Issuer Text

-- | Issuer key fingerprint.
issuerDetails_keyFingerprint :: Lens' IssuerDetails (Maybe Text)

-- | Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
issuerDetails_signKey :: Lens' IssuerDetails (Maybe Text)

-- | Issuer name.
issuerDetails_name :: Lens' IssuerDetails (Maybe Text)

-- | License status.
license_status :: Lens' License (Maybe LicenseStatus)

-- | Product name.
license_productName :: Lens' License (Maybe Text)

-- | License name.
license_licenseName :: Lens' License (Maybe Text)

-- | Product SKU.
license_productSKU :: Lens' License (Maybe Text)

-- | Home Region of the license.
license_homeRegion :: Lens' License (Maybe Text)

-- | License version.
license_version :: Lens' License (Maybe Text)

-- | License entitlements.
license_entitlements :: Lens' License (Maybe [Entitlement])

-- | Date and time range during which the license is valid, in ISO8601-UTC
--   format.
license_validity :: Lens' License (Maybe DatetimeRange)

-- | Configuration for consumption of the license.
license_consumptionConfiguration :: Lens' License (Maybe ConsumptionConfiguration)

-- | License beneficiary.
license_beneficiary :: Lens' License (Maybe Text)

-- | License issuer.
license_issuer :: Lens' License (Maybe IssuerDetails)

-- | Amazon Resource Name (ARN) of the license.
license_licenseArn :: Lens' License (Maybe Text)

-- | License metadata.
license_licenseMetadata :: Lens' License (Maybe [Metadata])

-- | License creation time.
license_createTime :: Lens' License (Maybe Text)

-- | Status of the license configuration.
licenseConfiguration_status :: Lens' LicenseConfiguration (Maybe Text)

-- | Account ID of the license configuration's owner.
licenseConfiguration_ownerAccountId :: Lens' LicenseConfiguration (Maybe Text)

-- | Summaries for licenses consumed by various resources.
licenseConfiguration_consumedLicenseSummaryList :: Lens' LicenseConfiguration (Maybe [ConsumedLicenseSummary])

-- | Number of licenses managed by the license configuration.
licenseConfiguration_licenseCount :: Lens' LicenseConfiguration (Maybe Integer)

-- | Summaries for managed resources.
licenseConfiguration_managedResourceSummaryList :: Lens' LicenseConfiguration (Maybe [ManagedResourceSummary])

-- | Name of the license configuration.
licenseConfiguration_name :: Lens' LicenseConfiguration (Maybe Text)

-- | Number of available licenses as a hard limit.
licenseConfiguration_licenseCountHardLimit :: Lens' LicenseConfiguration (Maybe Bool)

-- | When true, disassociates a resource when software is uninstalled.
licenseConfiguration_disassociateWhenNotFound :: Lens' LicenseConfiguration (Maybe Bool)

-- | Product information.
licenseConfiguration_productInformationList :: Lens' LicenseConfiguration (Maybe [ProductInformation])

-- | Dimension to use to track the license inventory.
licenseConfiguration_licenseCountingType :: Lens' LicenseConfiguration (Maybe LicenseCountingType)

-- | Automated discovery information.
licenseConfiguration_automatedDiscoveryInformation :: Lens' LicenseConfiguration (Maybe AutomatedDiscoveryInformation)

-- | Number of licenses consumed.
licenseConfiguration_consumedLicenses :: Lens' LicenseConfiguration (Maybe Integer)

-- | License rules.
licenseConfiguration_licenseRules :: Lens' LicenseConfiguration (Maybe [Text])

-- | Unique ID of the license configuration.
licenseConfiguration_licenseConfigurationId :: Lens' LicenseConfiguration (Maybe Text)

-- | Description of the license configuration.
licenseConfiguration_description :: Lens' LicenseConfiguration (Maybe Text)

-- | Amazon Resource Name (ARN) of the license configuration.
licenseConfiguration_licenseConfigurationArn :: Lens' LicenseConfiguration (Maybe Text)

-- | Type of server resource.
licenseConfigurationAssociation_resourceType :: Lens' LicenseConfigurationAssociation (Maybe ResourceType)

-- | Scope of AMI associations. The possible value is
--   <tt>cross-account</tt>.
licenseConfigurationAssociation_amiAssociationScope :: Lens' LicenseConfigurationAssociation (Maybe Text)

-- | Time when the license configuration was associated with the resource.
licenseConfigurationAssociation_associationTime :: Lens' LicenseConfigurationAssociation (Maybe UTCTime)

-- | Amazon Resource Name (ARN) of the resource.
licenseConfigurationAssociation_resourceArn :: Lens' LicenseConfigurationAssociation (Maybe Text)

-- | ID of the Amazon Web Services account that owns the resource consuming
--   licenses.
licenseConfigurationAssociation_resourceOwnerId :: Lens' LicenseConfigurationAssociation (Maybe Text)

-- | Type of resource.
licenseConfigurationUsage_resourceType :: Lens' LicenseConfigurationUsage (Maybe ResourceType)

-- | Status of the resource.
licenseConfigurationUsage_resourceStatus :: Lens' LicenseConfigurationUsage (Maybe Text)

-- | Time when the license configuration was initially associated with the
--   resource.
licenseConfigurationUsage_associationTime :: Lens' LicenseConfigurationUsage (Maybe UTCTime)

-- | Amazon Resource Name (ARN) of the resource.
licenseConfigurationUsage_resourceArn :: Lens' LicenseConfigurationUsage (Maybe Text)

-- | Number of licenses consumed by the resource.
licenseConfigurationUsage_consumedLicenses :: Lens' LicenseConfigurationUsage (Maybe Integer)

-- | ID of the account that owns the resource.
licenseConfigurationUsage_resourceOwnerId :: Lens' LicenseConfigurationUsage (Maybe Text)

-- | The Usage operation value that corresponds to the license type you are
--   converting your resource from. For more information about which
--   platforms correspond to which usage operation values see <a>Sample
--   data: usage operation by platform</a>
licenseConversionContext_usageOperation :: Lens' LicenseConversionContext (Maybe Text)

-- | The status of the conversion task.
licenseConversionTask_status :: Lens' LicenseConversionTask (Maybe LicenseConversionTaskStatus)

-- | The time the conversion task was started at.
licenseConversionTask_startTime :: Lens' LicenseConversionTask (Maybe UTCTime)

-- | Information about the license type this conversion task converted to.
licenseConversionTask_destinationLicenseContext :: Lens' LicenseConversionTask (Maybe LicenseConversionContext)

-- | The ID of the license type conversion task.
licenseConversionTask_licenseConversionTaskId :: Lens' LicenseConversionTask (Maybe Text)

-- | The Amazon Resource Name (ARN) of the resource associated with the
--   license type conversion task.
licenseConversionTask_resourceArn :: Lens' LicenseConversionTask (Maybe Text)

-- | The status message for the conversion task.
licenseConversionTask_statusMessage :: Lens' LicenseConversionTask (Maybe Text)

-- | The time the conversion task was completed.
licenseConversionTask_endTime :: Lens' LicenseConversionTask (Maybe UTCTime)

-- | The time the usage operation value of the resource was changed.
licenseConversionTask_licenseConversionTime :: Lens' LicenseConversionTask (Maybe UTCTime)

-- | Information about the license type this conversion task converted
--   from.
licenseConversionTask_sourceLicenseContext :: Lens' LicenseConversionTask (Maybe LicenseConversionContext)

-- | Resource type.
licenseOperationFailure_resourceType :: Lens' LicenseOperationFailure (Maybe ResourceType)

-- | The requester is "License Manager Automated Discovery".
licenseOperationFailure_operationRequestedBy :: Lens' LicenseOperationFailure (Maybe Text)

-- | Amazon Resource Name (ARN) of the resource.
licenseOperationFailure_resourceArn :: Lens' LicenseOperationFailure (Maybe Text)

-- | Reserved.
licenseOperationFailure_metadataList :: Lens' LicenseOperationFailure (Maybe [Metadata])

-- | Name of the operation.
licenseOperationFailure_operationName :: Lens' LicenseOperationFailure (Maybe Text)

-- | Failure time.
licenseOperationFailure_failureTime :: Lens' LicenseOperationFailure (Maybe UTCTime)

-- | Error message.
licenseOperationFailure_errorMessage :: Lens' LicenseOperationFailure (Maybe Text)

-- | ID of the Amazon Web Services account that owns the resource.
licenseOperationFailure_resourceOwnerId :: Lens' LicenseOperationFailure (Maybe Text)

-- | Scope of AMI associations. The possible value is
--   <tt>cross-account</tt>.
licenseSpecification_amiAssociationScope :: Lens' LicenseSpecification (Maybe Text)

-- | Amazon Resource Name (ARN) of the license configuration.
licenseSpecification_licenseConfigurationArn :: Lens' LicenseSpecification Text

-- | License entitlement usages.
licenseUsage_entitlementUsages :: Lens' LicenseUsage (Maybe [EntitlementUsage])

-- | Number of resources associated with licenses.
managedResourceSummary_associationCount :: Lens' ManagedResourceSummary (Maybe Integer)

-- | Type of resource associated with a license.
managedResourceSummary_resourceType :: Lens' ManagedResourceSummary (Maybe ResourceType)

-- | The value.
metadata_value :: Lens' Metadata (Maybe Text)

-- | The key name.
metadata_name :: Lens' Metadata (Maybe Text)

-- | Enables Organizations integration.
organizationConfiguration_enableIntegration :: Lens' OrganizationConfiguration Bool

-- | Resource type. The possible values are <tt>SSM_MANAGED</tt> |
--   <tt>RDS</tt>.
productInformation_resourceType :: Lens' ProductInformation Text

-- | A Product information filter consists of a
--   <tt>ProductInformationFilterComparator</tt> which is a logical
--   operator, a <tt>ProductInformationFilterName</tt> which specifies the
--   type of filter being declared, and a
--   <tt>ProductInformationFilterValue</tt> that specifies the value to
--   filter on.
--   
--   Accepted values for <tt>ProductInformationFilterName</tt> are listed
--   here along with descriptions and valid options for
--   <tt>ProductInformationFilterComparator</tt>.
--   
--   The following filters and are supported when the resource type is
--   <tt>SSM_MANAGED</tt>:
--   
--   <ul>
--   <li><tt>Application Name</tt> - The name of the application. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Publisher</tt> - The publisher of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Version</tt> - The version of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Name</tt> - The name of the platform. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Type</tt> - The platform type. Logical operator is
--   <tt>EQUALS</tt>.</li>
--   <li><tt>Tag:key</tt> - The key of a tag attached to an Amazon Web
--   Services resource you wish to exclude from automated discovery.
--   Logical operator is <tt>NOT_EQUALS</tt>. The key for your tag must be
--   appended to <tt>Tag:</tt> following the example:
--   <tt>Tag:name-of-your-key</tt>. <tt>ProductInformationFilterValue</tt>
--   is optional if you are not using values for the key.</li>
--   <li><tt>AccountId</tt> - The 12-digit ID of an Amazon Web Services
--   account you wish to exclude from automated discovery. Logical operator
--   is <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>License Included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> and <tt>NOT_EQUALS</tt>. Possible values
--   are: <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   </ul>
--   
--   The following filters and logical operators are supported when the
--   resource type is <tt>RDS</tt>:
--   
--   <ul>
--   <li><tt>Engine Edition</tt> - The edition of the database engine.
--   Logical operator is <tt>EQUALS</tt>. Possible values are:
--   <tt>oracle-ee</tt> | <tt>oracle-se</tt> | <tt>oracle-se1</tt> |
--   <tt>oracle-se2</tt>.</li>
--   <li><tt>License Pack</tt> - The license pack. Logical operator is
--   <tt>EQUALS</tt>. Possible values are: <tt>data guard</tt> |
--   <tt>diagnostic pack sqlt</tt> | <tt>tuning pack sqlt</tt> |
--   <tt>ols</tt> | <tt>olap</tt>.</li>
--   </ul>
productInformation_productInformationFilterList :: Lens' ProductInformation [ProductInformationFilter]

-- | Filter value.
productInformationFilter_productInformationFilterValue :: Lens' ProductInformationFilter (Maybe [Text])

-- | Filter name.
productInformationFilter_productInformationFilterName :: Lens' ProductInformationFilter Text

-- | Logical operator.
productInformationFilter_productInformationFilterComparator :: Lens' ProductInformationFilter Text

-- | Maximum time for the provisional configuration, in minutes.
provisionalConfiguration_maxTimeToLiveInMinutes :: Lens' ProvisionalConfiguration Int

-- | Received status.
receivedMetadata_receivedStatus :: Lens' ReceivedMetadata (Maybe ReceivedStatus)

-- | Allowed operations.
receivedMetadata_allowedOperations :: Lens' ReceivedMetadata (Maybe (NonEmpty AllowedOperation))

-- | Received status reason.
receivedMetadata_receivedStatusReason :: Lens' ReceivedMetadata (Maybe Text)

-- | Amazon Resource Name (ARN) of the license configuration that this
--   generator reports on.
reportContext_licenseConfigurationArns :: Lens' ReportContext [Text]

-- | Time period between each report. The period can be daily, weekly, or
--   monthly.
reportFrequency_period :: Lens' ReportFrequency (Maybe ReportFrequencyType)

-- | Number of times within the frequency period that a report is
--   generated. The only supported value is <tt>1</tt>.
reportFrequency_value :: Lens' ReportFrequency (Maybe Int)

-- | Time the last report was generated at.
reportGenerator_lastReportGenerationTime :: Lens' ReportGenerator (Maybe Text)

-- | Failure message for the last report generation attempt.
reportGenerator_lastRunFailureReason :: Lens' ReportGenerator (Maybe Text)

-- | Status of the last report generation attempt.
reportGenerator_lastRunStatus :: Lens' ReportGenerator (Maybe Text)

-- | Name of the report generator.
reportGenerator_reportGeneratorName :: Lens' ReportGenerator (Maybe Text)

-- | Details about how frequently reports are generated.
reportGenerator_reportFrequency :: Lens' ReportGenerator (Maybe ReportFrequency)

-- | Details of the S3 bucket that report generator reports are published
--   to.
reportGenerator_s3Location :: Lens' ReportGenerator (Maybe S3Location)

-- | Amazon Resource Name (ARN) of the report generator.
reportGenerator_licenseManagerReportGeneratorArn :: Lens' ReportGenerator (Maybe Text)

-- | The Amazon Web Services account ID used to create the report
--   generator.
reportGenerator_reportCreatorAccount :: Lens' ReportGenerator (Maybe Text)

-- | Description of the report generator.
reportGenerator_description :: Lens' ReportGenerator (Maybe Text)

-- | Type of reports that are generated.
reportGenerator_reportType :: Lens' ReportGenerator (Maybe [ReportType])

-- | Time the report was created.
reportGenerator_createTime :: Lens' ReportGenerator (Maybe Text)

-- | Tags associated with the report generator.
reportGenerator_tags :: Lens' ReportGenerator (Maybe [Tag])

-- | License configuration type for this generator.
reportGenerator_reportContext :: Lens' ReportGenerator (Maybe ReportContext)

-- | Platform of the resource.
resourceInventory_platform :: Lens' ResourceInventory (Maybe Text)

-- | ID of the resource.
resourceInventory_resourceId :: Lens' ResourceInventory (Maybe Text)

-- | Type of resource.
resourceInventory_resourceType :: Lens' ResourceInventory (Maybe ResourceType)

-- | Platform version of the resource in the inventory.
resourceInventory_platformVersion :: Lens' ResourceInventory (Maybe Text)

-- | Amazon Resource Name (ARN) of the resource.
resourceInventory_resourceArn :: Lens' ResourceInventory (Maybe Text)

-- | ID of the account that owns the resource.
resourceInventory_resourceOwningAccountId :: Lens' ResourceInventory (Maybe Text)

-- | Name of the S3 bucket reports are published to.
s3Location_bucket :: Lens' S3Location (Maybe Text)

-- | Prefix of the S3 bucket reports are published to.
s3Location_keyPrefix :: Lens' S3Location (Maybe Text)

-- | Tag value.
tag_value :: Lens' Tag (Maybe Text)

-- | Tag key.
tag_key :: Lens' Tag (Maybe Text)

-- | Token status. The possible values are <tt>AVAILABLE</tt> and
--   <tt>DELETED</tt>.
tokenData_status :: Lens' TokenData (Maybe Text)

-- | Token ID.
tokenData_tokenId :: Lens' TokenData (Maybe Text)

-- | Data specified by the caller.
tokenData_tokenProperties :: Lens' TokenData (Maybe [Text])

-- | Amazon Resource Names (ARN) of the roles included in the token.
tokenData_roleArns :: Lens' TokenData (Maybe [Text])

-- | Type of token generated. The supported value is
--   <tt>REFRESH_TOKEN</tt>.
tokenData_tokenType :: Lens' TokenData (Maybe Text)

-- | Token expiration time, in ISO8601-UTC format.
tokenData_expirationTime :: Lens' TokenData (Maybe Text)

-- | Amazon Resource Name (ARN) of the license.
tokenData_licenseArn :: Lens' TokenData (Maybe Text)


module Amazonka.LicenseManager.Waiters


-- | Derived from API version <tt>2018-08-01</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   License Manager makes it easier to manage licenses from software
--   vendors across multiple Amazon Web Services accounts and on-premises
--   servers.
module Amazonka.LicenseManager

-- | API version <tt>2018-08-01</tt> of the Amazon License Manager SDK
--   configuration.
defaultService :: Service

-- | There are no entitlements found for this license, or the entitlement
--   maximum count is reached.
_NoEntitlementsAllowedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The provided input is not valid. Try your request again.
_ValidationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Access to resource denied.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your resource limits have been exceeded.
_ResourceLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | License Manager cannot allocate a license to a resource because of its
--   state.
--   
--   For example, you cannot allocate a license to an instance in the
--   process of shutting down.
_InvalidResourceStateException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Too many requests have been submitted. Try again after a brief wait.
_RateLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A dependency required to run the API is missing.
_FailedDependencyException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There was a conflict processing the request. Try your request again.
_ConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The request uses too many filters or too many filter values.
_FilterLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | One or more parameter values are not valid.
_InvalidParameterValueException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The Amazon Web Services user account does not have permission to
--   perform the action. Check the IAM policy associated with this account.
_AuthorizationException :: AsError a => Getting (First ServiceError) a ServiceError

-- | This is not the correct Region for the resource. Try again.
_RedirectException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The server experienced an internal error. Try again.
_ServerInternalException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The entitlement is not allowed.
_EntitlementNotAllowedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The digital signature method is unsupported. Try your request again.
_UnsupportedDigitalSignatureMethodException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The resource cannot be found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You do not have enough licenses available to support a new resource
--   launch.
_LicenseUsageException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newListLicenseManagerReportGenerators</a> smart
--   constructor.
data ListLicenseManagerReportGenerators
ListLicenseManagerReportGenerators' :: Maybe [Filter] -> Maybe Text -> Maybe Natural -> ListLicenseManagerReportGenerators

-- | Create a value of <a>ListLicenseManagerReportGenerators</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListLicenseManagerReportGenerators'</a>,
--   <a>listLicenseManagerReportGenerators_filters</a> - Filters to scope
--   the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>LicenseConfigurationArn</pre></li>
--   </ul>
--   
--   <a>$sel:nextToken:ListLicenseManagerReportGenerators'</a>,
--   <a>listLicenseManagerReportGenerators_nextToken</a> - Token for the
--   next set of results.
--   
--   <a>$sel:maxResults:ListLicenseManagerReportGenerators'</a>,
--   <a>listLicenseManagerReportGenerators_maxResults</a> - Maximum number
--   of results to return in a single call.
newListLicenseManagerReportGenerators :: ListLicenseManagerReportGenerators

-- | <i>See:</i> <a>newListLicenseManagerReportGeneratorsResponse</a> smart
--   constructor.
data ListLicenseManagerReportGeneratorsResponse
ListLicenseManagerReportGeneratorsResponse' :: Maybe Text -> Maybe [ReportGenerator] -> Int -> ListLicenseManagerReportGeneratorsResponse

-- | Create a value of <a>ListLicenseManagerReportGeneratorsResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListLicenseManagerReportGenerators'</a>,
--   <a>listLicenseManagerReportGeneratorsResponse_nextToken</a> - Token
--   for the next set of results.
--   
--   
--   <a>$sel:reportGenerators:ListLicenseManagerReportGeneratorsResponse'</a>,
--   <a>listLicenseManagerReportGeneratorsResponse_reportGenerators</a> - A
--   report generator that creates periodic reports about your license
--   configurations.
--   
--   <a>$sel:httpStatus:ListLicenseManagerReportGeneratorsResponse'</a>,
--   <a>listLicenseManagerReportGeneratorsResponse_httpStatus</a> - The
--   response's http status code.
newListLicenseManagerReportGeneratorsResponse :: Int -> ListLicenseManagerReportGeneratorsResponse

-- | <i>See:</i> <a>newDeleteLicenseManagerReportGenerator</a> smart
--   constructor.
data DeleteLicenseManagerReportGenerator
DeleteLicenseManagerReportGenerator' :: Text -> DeleteLicenseManagerReportGenerator

-- | Create a value of <a>DeleteLicenseManagerReportGenerator</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseManagerReportGeneratorArn:DeleteLicenseManagerReportGenerator'</a>,
--   <a>deleteLicenseManagerReportGenerator_licenseManagerReportGeneratorArn</a>
--   - Amazon Resource Name (ARN) of the report generator to be deleted.
newDeleteLicenseManagerReportGenerator :: Text -> DeleteLicenseManagerReportGenerator

-- | <i>See:</i> <a>newDeleteLicenseManagerReportGeneratorResponse</a>
--   smart constructor.
data DeleteLicenseManagerReportGeneratorResponse
DeleteLicenseManagerReportGeneratorResponse' :: Int -> DeleteLicenseManagerReportGeneratorResponse

-- | Create a value of <a>DeleteLicenseManagerReportGeneratorResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteLicenseManagerReportGeneratorResponse'</a>,
--   <a>deleteLicenseManagerReportGeneratorResponse_httpStatus</a> - The
--   response's http status code.
newDeleteLicenseManagerReportGeneratorResponse :: Int -> DeleteLicenseManagerReportGeneratorResponse

-- | <i>See:</i> <a>newUpdateLicenseManagerReportGenerator</a> smart
--   constructor.
data UpdateLicenseManagerReportGenerator
UpdateLicenseManagerReportGenerator' :: Maybe Text -> Text -> Text -> [ReportType] -> ReportContext -> ReportFrequency -> Text -> UpdateLicenseManagerReportGenerator

-- | Create a value of <a>UpdateLicenseManagerReportGenerator</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_description</a> - Description
--   of the report generator.
--   
--   
--   <a>$sel:licenseManagerReportGeneratorArn:UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_licenseManagerReportGeneratorArn</a>
--   - Amazon Resource Name (ARN) of the report generator to update.
--   
--   <a>$sel:reportGeneratorName:UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_reportGeneratorName</a> - Name
--   of the report generator.
--   
--   <a>$sel:type':UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_type</a> - Type of reports to
--   generate. The following report types are supported:
--   
--   <ul>
--   <li>License configuration report - Reports the number and details of
--   consumed licenses for a license configuration.</li>
--   <li>Resource report - Reports the tracked licenses and resource
--   consumption for a license configuration.</li>
--   </ul>
--   
--   <a>$sel:reportContext:UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_reportContext</a> - The report
--   context.
--   
--   <a>$sel:reportFrequency:UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_reportFrequency</a> - Frequency
--   by which reports are generated.
--   
--   <a>$sel:clientToken:UpdateLicenseManagerReportGenerator'</a>,
--   <a>updateLicenseManagerReportGenerator_clientToken</a> - Unique,
--   case-sensitive identifier that you provide to ensure the idempotency
--   of the request.
newUpdateLicenseManagerReportGenerator :: Text -> Text -> ReportContext -> ReportFrequency -> Text -> UpdateLicenseManagerReportGenerator

-- | <i>See:</i> <a>newUpdateLicenseManagerReportGeneratorResponse</a>
--   smart constructor.
data UpdateLicenseManagerReportGeneratorResponse
UpdateLicenseManagerReportGeneratorResponse' :: Int -> UpdateLicenseManagerReportGeneratorResponse

-- | Create a value of <a>UpdateLicenseManagerReportGeneratorResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateLicenseManagerReportGeneratorResponse'</a>,
--   <a>updateLicenseManagerReportGeneratorResponse_httpStatus</a> - The
--   response's http status code.
newUpdateLicenseManagerReportGeneratorResponse :: Int -> UpdateLicenseManagerReportGeneratorResponse

-- | <i>See:</i> <a>newListUsageForLicenseConfiguration</a> smart
--   constructor.
data ListUsageForLicenseConfiguration
ListUsageForLicenseConfiguration' :: Maybe [Filter] -> Maybe Text -> Maybe Int -> Text -> ListUsageForLicenseConfiguration

-- | Create a value of <a>ListUsageForLicenseConfiguration</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListUsageForLicenseConfiguration'</a>,
--   <a>listUsageForLicenseConfiguration_filters</a> - Filters to scope the
--   results. The following filters and logical operators are supported:
--   
--   <ul>
--   <li><tt>resourceArn</tt> - The ARN of the license configuration
--   resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>resourceType</tt> - The resource type (<tt>EC2_INSTANCE</tt> |
--   <tt>EC2_HOST</tt> | <tt>EC2_AMI</tt> |
--   <tt>SYSTEMS_MANAGER_MANAGED_INSTANCE</tt>). Logical operators are
--   <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>resourceAccount</tt> - The ID of the account that owns the
--   resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   </ul>
--   
--   <a>$sel:nextToken:ListUsageForLicenseConfiguration'</a>,
--   <a>listUsageForLicenseConfiguration_nextToken</a> - Token for the next
--   set of results.
--   
--   <a>$sel:maxResults:ListUsageForLicenseConfiguration'</a>,
--   <a>listUsageForLicenseConfiguration_maxResults</a> - Maximum number of
--   results to return in a single call.
--   
--   <a>$sel:licenseConfigurationArn:ListUsageForLicenseConfiguration'</a>,
--   <a>listUsageForLicenseConfiguration_licenseConfigurationArn</a> -
--   Amazon Resource Name (ARN) of the license configuration.
newListUsageForLicenseConfiguration :: Text -> ListUsageForLicenseConfiguration

-- | <i>See:</i> <a>newListUsageForLicenseConfigurationResponse</a> smart
--   constructor.
data ListUsageForLicenseConfigurationResponse
ListUsageForLicenseConfigurationResponse' :: Maybe Text -> Maybe [LicenseConfigurationUsage] -> Int -> ListUsageForLicenseConfigurationResponse

-- | Create a value of <a>ListUsageForLicenseConfigurationResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListUsageForLicenseConfiguration'</a>,
--   <a>listUsageForLicenseConfigurationResponse_nextToken</a> - Token for
--   the next set of results.
--   
--   
--   <a>$sel:licenseConfigurationUsageList:ListUsageForLicenseConfigurationResponse'</a>,
--   <a>listUsageForLicenseConfigurationResponse_licenseConfigurationUsageList</a>
--   - Information about the license configurations.
--   
--   <a>$sel:httpStatus:ListUsageForLicenseConfigurationResponse'</a>,
--   <a>listUsageForLicenseConfigurationResponse_httpStatus</a> - The
--   response's http status code.
newListUsageForLicenseConfigurationResponse :: Int -> ListUsageForLicenseConfigurationResponse

-- | <i>See:</i> <a>newCreateLicenseConfiguration</a> smart constructor.
data CreateLicenseConfiguration
CreateLicenseConfiguration' :: Maybe Integer -> Maybe Bool -> Maybe Bool -> Maybe [ProductInformation] -> Maybe [Text] -> Maybe Text -> Maybe [Tag] -> Text -> LicenseCountingType -> CreateLicenseConfiguration

-- | Create a value of <a>CreateLicenseConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseCount:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_licenseCount</a> - Number of licenses
--   managed by the license configuration.
--   
--   <a>$sel:licenseCountHardLimit:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_licenseCountHardLimit</a> - Indicates
--   whether hard or soft license enforcement is used. Exceeding a hard
--   limit blocks the launch of new instances.
--   
--   <a>$sel:disassociateWhenNotFound:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_disassociateWhenNotFound</a> - When
--   true, disassociates a resource when software is uninstalled.
--   
--   <a>$sel:productInformationList:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_productInformationList</a> - Product
--   information.
--   
--   <a>$sel:licenseRules:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_licenseRules</a> - License rules. The
--   syntax is #name=value (for example,
--   #allowedTenancy=EC2-DedicatedHost). The available rules vary by
--   dimension, as follows.
--   
--   <ul>
--   <li><tt>Cores</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>licenseAffinityToHost</tt> | <tt>maximumCores</tt> |
--   <tt>minimumCores</tt></li>
--   <li><tt>Instances</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>maximumCores</tt> | <tt>minimumCores</tt> |
--   <tt>maximumSockets</tt> | <tt>minimumSockets</tt> |
--   <tt>maximumVcpus</tt> | <tt>minimumVcpus</tt></li>
--   <li><tt>Sockets</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>licenseAffinityToHost</tt> | <tt>maximumSockets</tt> |
--   <tt>minimumSockets</tt></li>
--   <li><tt>vCPUs</tt> dimension: <tt>allowedTenancy</tt> |
--   <tt>honorVcpuOptimization</tt> | <tt>maximumVcpus</tt> |
--   <tt>minimumVcpus</tt></li>
--   </ul>
--   
--   The unit for <tt>licenseAffinityToHost</tt> is days and the range is 1
--   to 180. The possible values for <tt>allowedTenancy</tt> are
--   <tt>EC2-Default</tt>, <tt>EC2-DedicatedHost</tt>, and
--   <tt>EC2-DedicatedInstance</tt>. The possible values for
--   <tt>honorVcpuOptimization</tt> are <tt>True</tt> and <tt>False</tt>.
--   
--   <a>$sel:description:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_description</a> - Description of the
--   license configuration.
--   
--   <a>$sel:tags:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_tags</a> - Tags to add to the license
--   configuration.
--   
--   <a>$sel:name:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_name</a> - Name of the license
--   configuration.
--   
--   <a>$sel:licenseCountingType:CreateLicenseConfiguration'</a>,
--   <a>createLicenseConfiguration_licenseCountingType</a> - Dimension used
--   to track the license inventory.
newCreateLicenseConfiguration :: Text -> LicenseCountingType -> CreateLicenseConfiguration

-- | <i>See:</i> <a>newCreateLicenseConfigurationResponse</a> smart
--   constructor.
data CreateLicenseConfigurationResponse
CreateLicenseConfigurationResponse' :: Maybe Text -> Int -> CreateLicenseConfigurationResponse

-- | Create a value of <a>CreateLicenseConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseConfigurationArn:CreateLicenseConfigurationResponse'</a>,
--   <a>createLicenseConfigurationResponse_licenseConfigurationArn</a> -
--   Amazon Resource Name (ARN) of the license configuration.
--   
--   <a>$sel:httpStatus:CreateLicenseConfigurationResponse'</a>,
--   <a>createLicenseConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newCreateLicenseConfigurationResponse :: Int -> CreateLicenseConfigurationResponse

-- | <i>See:</i> <a>newCreateLicense</a> smart constructor.
data CreateLicense
CreateLicense' :: Maybe [Metadata] -> Text -> Text -> Text -> Issuer -> Text -> DatetimeRange -> [Entitlement] -> Text -> ConsumptionConfiguration -> Text -> CreateLicense

-- | Create a value of <a>CreateLicense</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseMetadata:CreateLicense'</a>,
--   <a>createLicense_licenseMetadata</a> - Information about the license.
--   
--   <a>$sel:licenseName:CreateLicense'</a>,
--   <a>createLicense_licenseName</a> - License name.
--   
--   <a>$sel:productName:CreateLicense'</a>,
--   <a>createLicense_productName</a> - Product name.
--   
--   <a>$sel:productSKU:CreateLicense'</a>, <a>createLicense_productSKU</a>
--   - Product SKU.
--   
--   <a>$sel:issuer:CreateLicense'</a>, <a>createLicense_issuer</a> -
--   License issuer.
--   
--   <a>$sel:homeRegion:CreateLicense'</a>, <a>createLicense_homeRegion</a>
--   - Home Region for the license.
--   
--   <a>$sel:validity:CreateLicense'</a>, <a>createLicense_validity</a> -
--   Date and time range during which the license is valid, in ISO8601-UTC
--   format.
--   
--   <a>$sel:entitlements:CreateLicense'</a>,
--   <a>createLicense_entitlements</a> - License entitlements.
--   
--   <a>$sel:beneficiary:CreateLicense'</a>,
--   <a>createLicense_beneficiary</a> - License beneficiary.
--   
--   <a>$sel:consumptionConfiguration:CreateLicense'</a>,
--   <a>createLicense_consumptionConfiguration</a> - Configuration for
--   consumption of the license. Choose a provisional configuration for
--   workloads running with continuous connectivity. Choose a borrow
--   configuration for workloads with offline usage.
--   
--   <a>$sel:clientToken:CreateLicense'</a>,
--   <a>createLicense_clientToken</a> - Unique, case-sensitive identifier
--   that you provide to ensure the idempotency of the request.
newCreateLicense :: Text -> Text -> Text -> Issuer -> Text -> DatetimeRange -> Text -> ConsumptionConfiguration -> Text -> CreateLicense

-- | <i>See:</i> <a>newCreateLicenseResponse</a> smart constructor.
data CreateLicenseResponse
CreateLicenseResponse' :: Maybe LicenseStatus -> Maybe Text -> Maybe Text -> Int -> CreateLicenseResponse

-- | Create a value of <a>CreateLicenseResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CreateLicenseResponse'</a>,
--   <a>createLicenseResponse_status</a> - License status.
--   
--   <a>$sel:version:CreateLicenseResponse'</a>,
--   <a>createLicenseResponse_version</a> - License version.
--   
--   <a>$sel:licenseArn:CreateLicenseResponse'</a>,
--   <a>createLicenseResponse_licenseArn</a> - Amazon Resource Name (ARN)
--   of the license.
--   
--   <a>$sel:httpStatus:CreateLicenseResponse'</a>,
--   <a>createLicenseResponse_httpStatus</a> - The response's http status
--   code.
newCreateLicenseResponse :: Int -> CreateLicenseResponse

-- | <i>See:</i> <a>newListLicenseConversionTasks</a> smart constructor.
data ListLicenseConversionTasks
ListLicenseConversionTasks' :: Maybe [Filter] -> Maybe Text -> Maybe Int -> ListLicenseConversionTasks

-- | Create a value of <a>ListLicenseConversionTasks</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListLicenseConversionTasks'</a>,
--   <a>listLicenseConversionTasks_filters</a> - Filters to scope the
--   results. Valid filters are <tt>ResourceArns</tt> and <tt>Status</tt>.
--   
--   <a>$sel:nextToken:ListLicenseConversionTasks'</a>,
--   <a>listLicenseConversionTasks_nextToken</a> - Token for the next set
--   of results.
--   
--   <a>$sel:maxResults:ListLicenseConversionTasks'</a>,
--   <a>listLicenseConversionTasks_maxResults</a> - Maximum number of
--   results to return in a single call.
newListLicenseConversionTasks :: ListLicenseConversionTasks

-- | <i>See:</i> <a>newListLicenseConversionTasksResponse</a> smart
--   constructor.
data ListLicenseConversionTasksResponse
ListLicenseConversionTasksResponse' :: Maybe [LicenseConversionTask] -> Maybe Text -> Int -> ListLicenseConversionTasksResponse

-- | Create a value of <a>ListLicenseConversionTasksResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseConversionTasks:ListLicenseConversionTasksResponse'</a>,
--   <a>listLicenseConversionTasksResponse_licenseConversionTasks</a> -
--   Information about the license configuration tasks for your account.
--   
--   <a>$sel:nextToken:ListLicenseConversionTasks'</a>,
--   <a>listLicenseConversionTasksResponse_nextToken</a> - Token for the
--   next set of results.
--   
--   <a>$sel:httpStatus:ListLicenseConversionTasksResponse'</a>,
--   <a>listLicenseConversionTasksResponse_httpStatus</a> - The response's
--   http status code.
newListLicenseConversionTasksResponse :: Int -> ListLicenseConversionTasksResponse

-- | <i>See:</i> <a>newListResourceInventory</a> smart constructor.
data ListResourceInventory
ListResourceInventory' :: Maybe [InventoryFilter] -> Maybe Text -> Maybe Int -> ListResourceInventory

-- | Create a value of <a>ListResourceInventory</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListResourceInventory'</a>,
--   <a>listResourceInventory_filters</a> - Filters to scope the results.
--   The following filters and logical operators are supported:
--   
--   <ul>
--   <li><tt>account_id</tt> - The ID of the Amazon Web Services account
--   that owns the resource. Logical operators are <tt>EQUALS</tt> |
--   <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>application_name</tt> - The name of the application. Logical
--   operators are <tt>EQUALS</tt> | <tt>BEGINS_WITH</tt>.</li>
--   <li><tt>license_included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>. Possible values
--   are <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   <li><tt>platform</tt> - The platform of the resource. Logical
--   operators are <tt>EQUALS</tt> | <tt>BEGINS_WITH</tt>.</li>
--   <li><tt>resource_id</tt> - The ID of the resource. Logical operators
--   are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>tag:&lt;key&gt;</tt> - The key/value combination of a tag
--   assigned to the resource. Logical operators are <tt>EQUALS</tt>
--   (single account) or <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt> (cross
--   account).</li>
--   </ul>
--   
--   <a>$sel:nextToken:ListResourceInventory'</a>,
--   <a>listResourceInventory_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:maxResults:ListResourceInventory'</a>,
--   <a>listResourceInventory_maxResults</a> - Maximum number of results to
--   return in a single call.
newListResourceInventory :: ListResourceInventory

-- | <i>See:</i> <a>newListResourceInventoryResponse</a> smart constructor.
data ListResourceInventoryResponse
ListResourceInventoryResponse' :: Maybe [ResourceInventory] -> Maybe Text -> Int -> ListResourceInventoryResponse

-- | Create a value of <a>ListResourceInventoryResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceInventoryList:ListResourceInventoryResponse'</a>,
--   <a>listResourceInventoryResponse_resourceInventoryList</a> -
--   Information about the resources.
--   
--   <a>$sel:nextToken:ListResourceInventory'</a>,
--   <a>listResourceInventoryResponse_nextToken</a> - Token for the next
--   set of results.
--   
--   <a>$sel:httpStatus:ListResourceInventoryResponse'</a>,
--   <a>listResourceInventoryResponse_httpStatus</a> - The response's http
--   status code.
newListResourceInventoryResponse :: Int -> ListResourceInventoryResponse

-- | <i>See:</i> <a>newDeleteToken</a> smart constructor.
data DeleteToken
DeleteToken' :: Text -> DeleteToken

-- | Create a value of <a>DeleteToken</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tokenId:DeleteToken'</a>, <a>deleteToken_tokenId</a> - Token
--   ID.
newDeleteToken :: Text -> DeleteToken

-- | <i>See:</i> <a>newDeleteTokenResponse</a> smart constructor.
data DeleteTokenResponse
DeleteTokenResponse' :: Int -> DeleteTokenResponse

-- | Create a value of <a>DeleteTokenResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteTokenResponse'</a>,
--   <a>deleteTokenResponse_httpStatus</a> - The response's http status
--   code.
newDeleteTokenResponse :: Int -> DeleteTokenResponse

-- | <i>See:</i> <a>newDeleteLicenseConfiguration</a> smart constructor.
data DeleteLicenseConfiguration
DeleteLicenseConfiguration' :: Text -> DeleteLicenseConfiguration

-- | Create a value of <a>DeleteLicenseConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseConfigurationArn:DeleteLicenseConfiguration'</a>,
--   <a>deleteLicenseConfiguration_licenseConfigurationArn</a> - ID of the
--   license configuration.
newDeleteLicenseConfiguration :: Text -> DeleteLicenseConfiguration

-- | <i>See:</i> <a>newDeleteLicenseConfigurationResponse</a> smart
--   constructor.
data DeleteLicenseConfigurationResponse
DeleteLicenseConfigurationResponse' :: Int -> DeleteLicenseConfigurationResponse

-- | Create a value of <a>DeleteLicenseConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DeleteLicenseConfigurationResponse'</a>,
--   <a>deleteLicenseConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newDeleteLicenseConfigurationResponse :: Int -> DeleteLicenseConfigurationResponse

-- | <i>See:</i> <a>newUpdateLicenseConfiguration</a> smart constructor.
data UpdateLicenseConfiguration
UpdateLicenseConfiguration' :: Maybe Integer -> Maybe Text -> Maybe LicenseConfigurationStatus -> Maybe Bool -> Maybe Bool -> Maybe [ProductInformation] -> Maybe [Text] -> Maybe Text -> Text -> UpdateLicenseConfiguration

-- | Create a value of <a>UpdateLicenseConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseCount:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_licenseCount</a> - New number of
--   licenses managed by the license configuration.
--   
--   <a>$sel:name:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_name</a> - New name of the license
--   configuration.
--   
--   <a>$sel:licenseConfigurationStatus:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_licenseConfigurationStatus</a> - New
--   status of the license configuration.
--   
--   <a>$sel:licenseCountHardLimit:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_licenseCountHardLimit</a> - New hard
--   limit of the number of available licenses.
--   
--   <a>$sel:disassociateWhenNotFound:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_disassociateWhenNotFound</a> - When
--   true, disassociates a resource when software is uninstalled.
--   
--   <a>$sel:productInformationList:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_productInformationList</a> - New product
--   information.
--   
--   <a>$sel:licenseRules:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_licenseRules</a> - New license rule. The
--   only rule that you can add after you create a license configuration is
--   licenseAffinityToHost.
--   
--   <a>$sel:description:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_description</a> - New description of the
--   license configuration.
--   
--   <a>$sel:licenseConfigurationArn:UpdateLicenseConfiguration'</a>,
--   <a>updateLicenseConfiguration_licenseConfigurationArn</a> - Amazon
--   Resource Name (ARN) of the license configuration.
newUpdateLicenseConfiguration :: Text -> UpdateLicenseConfiguration

-- | <i>See:</i> <a>newUpdateLicenseConfigurationResponse</a> smart
--   constructor.
data UpdateLicenseConfigurationResponse
UpdateLicenseConfigurationResponse' :: Int -> UpdateLicenseConfigurationResponse

-- | Create a value of <a>UpdateLicenseConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateLicenseConfigurationResponse'</a>,
--   <a>updateLicenseConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newUpdateLicenseConfigurationResponse :: Int -> UpdateLicenseConfigurationResponse

-- | <i>See:</i> <a>newCheckInLicense</a> smart constructor.
data CheckInLicense
CheckInLicense' :: Maybe Text -> Text -> CheckInLicense

-- | Create a value of <a>CheckInLicense</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:beneficiary:CheckInLicense'</a>,
--   <a>checkInLicense_beneficiary</a> - License beneficiary.
--   
--   <a>$sel:licenseConsumptionToken:CheckInLicense'</a>,
--   <a>checkInLicense_licenseConsumptionToken</a> - License consumption
--   token.
newCheckInLicense :: Text -> CheckInLicense

-- | <i>See:</i> <a>newCheckInLicenseResponse</a> smart constructor.
data CheckInLicenseResponse
CheckInLicenseResponse' :: Int -> CheckInLicenseResponse

-- | Create a value of <a>CheckInLicenseResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:CheckInLicenseResponse'</a>,
--   <a>checkInLicenseResponse_httpStatus</a> - The response's http status
--   code.
newCheckInLicenseResponse :: Int -> CheckInLicenseResponse

-- | <i>See:</i> <a>newListTokens</a> smart constructor.
data ListTokens
ListTokens' :: Maybe [Text] -> Maybe [Filter] -> Maybe Text -> Maybe Natural -> ListTokens

-- | Create a value of <a>ListTokens</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tokenIds:ListTokens'</a>, <a>listTokens_tokenIds</a> - Token
--   IDs.
--   
--   <a>$sel:filters:ListTokens'</a>, <a>listTokens_filters</a> - Filters
--   to scope the results. The following filter is supported:
--   
--   <ul>
--   <li><pre>LicenseArns</pre></li>
--   </ul>
--   
--   <a>$sel:nextToken:ListTokens'</a>, <a>listTokens_nextToken</a> - Token
--   for the next set of results.
--   
--   <a>$sel:maxResults:ListTokens'</a>, <a>listTokens_maxResults</a> -
--   Maximum number of results to return in a single call.
newListTokens :: ListTokens

-- | <i>See:</i> <a>newListTokensResponse</a> smart constructor.
data ListTokensResponse
ListTokensResponse' :: Maybe [TokenData] -> Maybe Text -> Int -> ListTokensResponse

-- | Create a value of <a>ListTokensResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tokens:ListTokensResponse'</a>,
--   <a>listTokensResponse_tokens</a> - Received token details.
--   
--   <a>$sel:nextToken:ListTokens'</a>, <a>listTokensResponse_nextToken</a>
--   - Token for the next set of results.
--   
--   <a>$sel:httpStatus:ListTokensResponse'</a>,
--   <a>listTokensResponse_httpStatus</a> - The response's http status
--   code.
newListTokensResponse :: Int -> ListTokensResponse

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - Amazon Resource Name (ARN) of
--   the license configuration.
newListTagsForResource :: Text -> ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe [Tag] -> Int -> ListTagsForResourceResponse

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - Information about the tags.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | <i>See:</i> <a>newCreateGrant</a> smart constructor.
data CreateGrant
CreateGrant' :: Text -> Text -> Text -> NonEmpty Text -> Text -> NonEmpty AllowedOperation -> CreateGrant

-- | Create a value of <a>CreateGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:CreateGrant'</a>, <a>createGrant_clientToken</a> -
--   Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request.
--   
--   <a>$sel:grantName:CreateGrant'</a>, <a>createGrant_grantName</a> -
--   Grant name.
--   
--   <a>$sel:licenseArn:CreateGrant'</a>, <a>createGrant_licenseArn</a> -
--   Amazon Resource Name (ARN) of the license.
--   
--   <a>$sel:principals:CreateGrant'</a>, <a>createGrant_principals</a> -
--   The grant principals.
--   
--   <a>$sel:homeRegion:CreateGrant'</a>, <a>createGrant_homeRegion</a> -
--   Home Region of the grant.
--   
--   <a>$sel:allowedOperations:CreateGrant'</a>,
--   <a>createGrant_allowedOperations</a> - Allowed operations for the
--   grant.
newCreateGrant :: Text -> Text -> Text -> NonEmpty Text -> Text -> NonEmpty AllowedOperation -> CreateGrant

-- | <i>See:</i> <a>newCreateGrantResponse</a> smart constructor.
data CreateGrantResponse
CreateGrantResponse' :: Maybe GrantStatus -> Maybe Text -> Maybe Text -> Int -> CreateGrantResponse

-- | Create a value of <a>CreateGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CreateGrantResponse'</a>,
--   <a>createGrantResponse_status</a> - Grant status.
--   
--   <a>$sel:version:CreateGrantResponse'</a>,
--   <a>createGrantResponse_version</a> - Grant version.
--   
--   <a>$sel:grantArn:CreateGrantResponse'</a>,
--   <a>createGrantResponse_grantArn</a> - Grant ARN.
--   
--   <a>$sel:httpStatus:CreateGrantResponse'</a>,
--   <a>createGrantResponse_httpStatus</a> - The response's http status
--   code.
newCreateGrantResponse :: Int -> CreateGrantResponse

-- | <i>See:</i> <a>newUpdateLicenseSpecificationsForResource</a> smart
--   constructor.
data UpdateLicenseSpecificationsForResource
UpdateLicenseSpecificationsForResource' :: Maybe [LicenseSpecification] -> Maybe [LicenseSpecification] -> Text -> UpdateLicenseSpecificationsForResource

-- | Create a value of <a>UpdateLicenseSpecificationsForResource</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:addLicenseSpecifications:UpdateLicenseSpecificationsForResource'</a>,
--   <a>updateLicenseSpecificationsForResource_addLicenseSpecifications</a>
--   - ARNs of the license configurations to add.
--   
--   
--   <a>$sel:removeLicenseSpecifications:UpdateLicenseSpecificationsForResource'</a>,
--   <a>updateLicenseSpecificationsForResource_removeLicenseSpecifications</a>
--   - ARNs of the license configurations to remove.
--   
--   <a>$sel:resourceArn:UpdateLicenseSpecificationsForResource'</a>,
--   <a>updateLicenseSpecificationsForResource_resourceArn</a> - Amazon
--   Resource Name (ARN) of the Amazon Web Services resource.
newUpdateLicenseSpecificationsForResource :: Text -> UpdateLicenseSpecificationsForResource

-- | <i>See:</i> <a>newUpdateLicenseSpecificationsForResourceResponse</a>
--   smart constructor.
data UpdateLicenseSpecificationsForResourceResponse
UpdateLicenseSpecificationsForResourceResponse' :: Int -> UpdateLicenseSpecificationsForResourceResponse

-- | Create a value of
--   <a>UpdateLicenseSpecificationsForResourceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:httpStatus:UpdateLicenseSpecificationsForResourceResponse'</a>,
--   <a>updateLicenseSpecificationsForResourceResponse_httpStatus</a> - The
--   response's http status code.
newUpdateLicenseSpecificationsForResourceResponse :: Int -> UpdateLicenseSpecificationsForResourceResponse

-- | <i>See:</i> <a>newCreateLicenseVersion</a> smart constructor.
data CreateLicenseVersion
CreateLicenseVersion' :: Maybe Text -> Maybe [Metadata] -> Text -> Text -> Text -> Issuer -> Text -> DatetimeRange -> [Entitlement] -> ConsumptionConfiguration -> LicenseStatus -> Text -> CreateLicenseVersion

-- | Create a value of <a>CreateLicenseVersion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourceVersion:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_sourceVersion</a> - Current version of the
--   license.
--   
--   <a>$sel:licenseMetadata:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_licenseMetadata</a> - Information about the
--   license.
--   
--   <a>$sel:licenseArn:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_licenseArn</a> - Amazon Resource Name (ARN) of
--   the license.
--   
--   <a>$sel:licenseName:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_licenseName</a> - License name.
--   
--   <a>$sel:productName:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_productName</a> - Product name.
--   
--   <a>$sel:issuer:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_issuer</a> - License issuer.
--   
--   <a>$sel:homeRegion:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_homeRegion</a> - Home Region of the license.
--   
--   <a>$sel:validity:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_validity</a> - Date and time range during
--   which the license is valid, in ISO8601-UTC format.
--   
--   <a>$sel:entitlements:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_entitlements</a> - License entitlements.
--   
--   <a>$sel:consumptionConfiguration:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_consumptionConfiguration</a> - Configuration
--   for consumption of the license. Choose a provisional configuration for
--   workloads running with continuous connectivity. Choose a borrow
--   configuration for workloads with offline usage.
--   
--   <a>$sel:status:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_status</a> - License status.
--   
--   <a>$sel:clientToken:CreateLicenseVersion'</a>,
--   <a>createLicenseVersion_clientToken</a> - Unique, case-sensitive
--   identifier that you provide to ensure the idempotency of the request.
newCreateLicenseVersion :: Text -> Text -> Text -> Issuer -> Text -> DatetimeRange -> ConsumptionConfiguration -> LicenseStatus -> Text -> CreateLicenseVersion

-- | <i>See:</i> <a>newCreateLicenseVersionResponse</a> smart constructor.
data CreateLicenseVersionResponse
CreateLicenseVersionResponse' :: Maybe LicenseStatus -> Maybe Text -> Maybe Text -> Int -> CreateLicenseVersionResponse

-- | Create a value of <a>CreateLicenseVersionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CreateLicenseVersion'</a>,
--   <a>createLicenseVersionResponse_status</a> - License status.
--   
--   <a>$sel:version:CreateLicenseVersionResponse'</a>,
--   <a>createLicenseVersionResponse_version</a> - New version of the
--   license.
--   
--   <a>$sel:licenseArn:CreateLicenseVersion'</a>,
--   <a>createLicenseVersionResponse_licenseArn</a> - License ARN.
--   
--   <a>$sel:httpStatus:CreateLicenseVersionResponse'</a>,
--   <a>createLicenseVersionResponse_httpStatus</a> - The response's http
--   status code.
newCreateLicenseVersionResponse :: Int -> CreateLicenseVersionResponse

-- | <i>See:</i> <a>newGetLicense</a> smart constructor.
data GetLicense
GetLicense' :: Maybe Text -> Text -> GetLicense

-- | Create a value of <a>GetLicense</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:version:GetLicense'</a>, <a>getLicense_version</a> - License
--   version.
--   
--   <a>$sel:licenseArn:GetLicense'</a>, <a>getLicense_licenseArn</a> -
--   Amazon Resource Name (ARN) of the license.
newGetLicense :: Text -> GetLicense

-- | <i>See:</i> <a>newGetLicenseResponse</a> smart constructor.
data GetLicenseResponse
GetLicenseResponse' :: Maybe License -> Int -> GetLicenseResponse

-- | Create a value of <a>GetLicenseResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:license:GetLicenseResponse'</a>,
--   <a>getLicenseResponse_license</a> - License details.
--   
--   <a>$sel:httpStatus:GetLicenseResponse'</a>,
--   <a>getLicenseResponse_httpStatus</a> - The response's http status
--   code.
newGetLicenseResponse :: Int -> GetLicenseResponse

-- | <i>See:</i> <a>newGetLicenseConfiguration</a> smart constructor.
data GetLicenseConfiguration
GetLicenseConfiguration' :: Text -> GetLicenseConfiguration

-- | Create a value of <a>GetLicenseConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseConfigurationArn:GetLicenseConfiguration'</a>,
--   <a>getLicenseConfiguration_licenseConfigurationArn</a> - Amazon
--   Resource Name (ARN) of the license configuration.
newGetLicenseConfiguration :: Text -> GetLicenseConfiguration

-- | <i>See:</i> <a>newGetLicenseConfigurationResponse</a> smart
--   constructor.
data GetLicenseConfigurationResponse
GetLicenseConfigurationResponse' :: Maybe Text -> Maybe Text -> Maybe [ConsumedLicenseSummary] -> Maybe Integer -> Maybe [ManagedResourceSummary] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [ProductInformation] -> Maybe LicenseCountingType -> Maybe AutomatedDiscoveryInformation -> Maybe Integer -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe [Tag] -> Int -> GetLicenseConfigurationResponse

-- | Create a value of <a>GetLicenseConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_status</a> - License configuration
--   status.
--   
--   <a>$sel:ownerAccountId:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_ownerAccountId</a> - Account ID of
--   the owner of the license configuration.
--   
--   
--   <a>$sel:consumedLicenseSummaryList:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_consumedLicenseSummaryList</a> -
--   Summaries of the licenses consumed by resources.
--   
--   <a>$sel:licenseCount:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_licenseCount</a> - Number of
--   available licenses.
--   
--   
--   <a>$sel:managedResourceSummaryList:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_managedResourceSummaryList</a> -
--   Summaries of the managed resources.
--   
--   <a>$sel:name:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_name</a> - Name of the license
--   configuration.
--   
--   <a>$sel:licenseCountHardLimit:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_licenseCountHardLimit</a> - Sets
--   the number of available licenses as a hard limit.
--   
--   <a>$sel:disassociateWhenNotFound:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_disassociateWhenNotFound</a> - When
--   true, disassociates a resource when software is uninstalled.
--   
--   <a>$sel:productInformationList:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_productInformationList</a> -
--   Product information.
--   
--   <a>$sel:licenseCountingType:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_licenseCountingType</a> - Dimension
--   for which the licenses are counted.
--   
--   
--   <a>$sel:automatedDiscoveryInformation:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_automatedDiscoveryInformation</a> -
--   Automated discovery information.
--   
--   <a>$sel:consumedLicenses:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_consumedLicenses</a> - Number of
--   licenses assigned to resources.
--   
--   <a>$sel:licenseRules:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_licenseRules</a> - License rules.
--   
--   <a>$sel:licenseConfigurationId:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_licenseConfigurationId</a> - Unique
--   ID for the license configuration.
--   
--   <a>$sel:description:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_description</a> - Description of
--   the license configuration.
--   
--   <a>$sel:licenseConfigurationArn:GetLicenseConfiguration'</a>,
--   <a>getLicenseConfigurationResponse_licenseConfigurationArn</a> -
--   Amazon Resource Name (ARN) of the license configuration.
--   
--   <a>$sel:tags:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_tags</a> - Tags for the license
--   configuration.
--   
--   <a>$sel:httpStatus:GetLicenseConfigurationResponse'</a>,
--   <a>getLicenseConfigurationResponse_httpStatus</a> - The response's
--   http status code.
newGetLicenseConfigurationResponse :: Int -> GetLicenseConfigurationResponse

-- | <i>See:</i> <a>newListReceivedGrants</a> smart constructor.
data ListReceivedGrants
ListReceivedGrants' :: Maybe [Filter] -> Maybe Text -> Maybe [Text] -> Maybe Natural -> ListReceivedGrants

-- | Create a value of <a>ListReceivedGrants</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListReceivedGrants'</a>,
--   <a>listReceivedGrants_filters</a> - Filters to scope the results. The
--   following filters are supported:
--   
--   <ul>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>LicenseIssuerName</pre></li>
--   <li><pre>LicenseArn</pre></li>
--   <li><pre>GrantStatus</pre></li>
--   <li><pre>GranterAccountId</pre></li>
--   </ul>
--   
--   <a>$sel:nextToken:ListReceivedGrants'</a>,
--   <a>listReceivedGrants_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:grantArns:ListReceivedGrants'</a>,
--   <a>listReceivedGrants_grantArns</a> - Amazon Resource Names (ARNs) of
--   the grants.
--   
--   <a>$sel:maxResults:ListReceivedGrants'</a>,
--   <a>listReceivedGrants_maxResults</a> - Maximum number of results to
--   return in a single call.
newListReceivedGrants :: ListReceivedGrants

-- | <i>See:</i> <a>newListReceivedGrantsResponse</a> smart constructor.
data ListReceivedGrantsResponse
ListReceivedGrantsResponse' :: Maybe [Grant] -> Maybe Text -> Int -> ListReceivedGrantsResponse

-- | Create a value of <a>ListReceivedGrantsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grants:ListReceivedGrantsResponse'</a>,
--   <a>listReceivedGrantsResponse_grants</a> - Received grant details.
--   
--   <a>$sel:nextToken:ListReceivedGrants'</a>,
--   <a>listReceivedGrantsResponse_nextToken</a> - Token for the next set
--   of results.
--   
--   <a>$sel:httpStatus:ListReceivedGrantsResponse'</a>,
--   <a>listReceivedGrantsResponse_httpStatus</a> - The response's http
--   status code.
newListReceivedGrantsResponse :: Int -> ListReceivedGrantsResponse

-- | <i>See:</i> <a>newGetLicenseConversionTask</a> smart constructor.
data GetLicenseConversionTask
GetLicenseConversionTask' :: Text -> GetLicenseConversionTask

-- | Create a value of <a>GetLicenseConversionTask</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseConversionTaskId:GetLicenseConversionTask'</a>,
--   <a>getLicenseConversionTask_licenseConversionTaskId</a> - ID of the
--   license type conversion task to retrieve information on.
newGetLicenseConversionTask :: Text -> GetLicenseConversionTask

-- | <i>See:</i> <a>newGetLicenseConversionTaskResponse</a> smart
--   constructor.
data GetLicenseConversionTaskResponse
GetLicenseConversionTaskResponse' :: Maybe LicenseConversionTaskStatus -> Maybe POSIX -> Maybe LicenseConversionContext -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe POSIX -> Maybe LicenseConversionContext -> Int -> GetLicenseConversionTaskResponse

-- | Create a value of <a>GetLicenseConversionTaskResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_status</a> - Status of the license
--   type conversion task.
--   
--   <a>$sel:startTime:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_startTime</a> - Time at which the
--   license type conversion task was started .
--   
--   
--   <a>$sel:destinationLicenseContext:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_destinationLicenseContext</a> -
--   Information about the license type converted to.
--   
--   <a>$sel:licenseConversionTaskId:GetLicenseConversionTask'</a>,
--   <a>getLicenseConversionTaskResponse_licenseConversionTaskId</a> - ID
--   of the license type conversion task.
--   
--   <a>$sel:resourceArn:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_resourceArn</a> - Amazon Resource
--   Names (ARN) of the resources the license conversion task is associated
--   with.
--   
--   <a>$sel:statusMessage:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_statusMessage</a> - The status
--   message for the conversion task.
--   
--   <a>$sel:endTime:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_endTime</a> - Time at which the
--   license type conversion task was completed.
--   
--   <a>$sel:licenseConversionTime:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_licenseConversionTime</a> - Amount
--   of time to complete the license type conversion.
--   
--   <a>$sel:sourceLicenseContext:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_sourceLicenseContext</a> -
--   Information about the license type converted from.
--   
--   <a>$sel:httpStatus:GetLicenseConversionTaskResponse'</a>,
--   <a>getLicenseConversionTaskResponse_httpStatus</a> - The response's
--   http status code.
newGetLicenseConversionTaskResponse :: Int -> GetLicenseConversionTaskResponse

-- | <i>See:</i> <a>newGetLicenseUsage</a> smart constructor.
data GetLicenseUsage
GetLicenseUsage' :: Text -> GetLicenseUsage

-- | Create a value of <a>GetLicenseUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseArn:GetLicenseUsage'</a>,
--   <a>getLicenseUsage_licenseArn</a> - Amazon Resource Name (ARN) of the
--   license.
newGetLicenseUsage :: Text -> GetLicenseUsage

-- | <i>See:</i> <a>newGetLicenseUsageResponse</a> smart constructor.
data GetLicenseUsageResponse
GetLicenseUsageResponse' :: Maybe LicenseUsage -> Int -> GetLicenseUsageResponse

-- | Create a value of <a>GetLicenseUsageResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseUsage:GetLicenseUsageResponse'</a>,
--   <a>getLicenseUsageResponse_licenseUsage</a> - License usage details.
--   
--   <a>$sel:httpStatus:GetLicenseUsageResponse'</a>,
--   <a>getLicenseUsageResponse_httpStatus</a> - The response's http status
--   code.
newGetLicenseUsageResponse :: Int -> GetLicenseUsageResponse

-- | <i>See:</i> <a>newExtendLicenseConsumption</a> smart constructor.
data ExtendLicenseConsumption
ExtendLicenseConsumption' :: Maybe Bool -> Text -> ExtendLicenseConsumption

-- | Create a value of <a>ExtendLicenseConsumption</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dryRun:ExtendLicenseConsumption'</a>,
--   <a>extendLicenseConsumption_dryRun</a> - Checks whether you have the
--   required permissions for the action, without actually making the
--   request. Provides an error response if you do not have the required
--   permissions.
--   
--   <a>$sel:licenseConsumptionToken:ExtendLicenseConsumption'</a>,
--   <a>extendLicenseConsumption_licenseConsumptionToken</a> - License
--   consumption token.
newExtendLicenseConsumption :: Text -> ExtendLicenseConsumption

-- | <i>See:</i> <a>newExtendLicenseConsumptionResponse</a> smart
--   constructor.
data ExtendLicenseConsumptionResponse
ExtendLicenseConsumptionResponse' :: Maybe Text -> Maybe Text -> Int -> ExtendLicenseConsumptionResponse

-- | Create a value of <a>ExtendLicenseConsumptionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expiration:ExtendLicenseConsumptionResponse'</a>,
--   <a>extendLicenseConsumptionResponse_expiration</a> - Date and time at
--   which the license consumption expires.
--   
--   <a>$sel:licenseConsumptionToken:ExtendLicenseConsumption'</a>,
--   <a>extendLicenseConsumptionResponse_licenseConsumptionToken</a> -
--   License consumption token.
--   
--   <a>$sel:httpStatus:ExtendLicenseConsumptionResponse'</a>,
--   <a>extendLicenseConsumptionResponse_httpStatus</a> - The response's
--   http status code.
newExtendLicenseConsumptionResponse :: Int -> ExtendLicenseConsumptionResponse

-- | <i>See:</i> <a>newGetGrant</a> smart constructor.
data GetGrant
GetGrant' :: Maybe Text -> Text -> GetGrant

-- | Create a value of <a>GetGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:version:GetGrant'</a>, <a>getGrant_version</a> - Grant
--   version.
--   
--   <a>$sel:grantArn:GetGrant'</a>, <a>getGrant_grantArn</a> - Amazon
--   Resource Name (ARN) of the grant.
newGetGrant :: Text -> GetGrant

-- | <i>See:</i> <a>newGetGrantResponse</a> smart constructor.
data GetGrantResponse
GetGrantResponse' :: Maybe Grant -> Int -> GetGrantResponse

-- | Create a value of <a>GetGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grant:GetGrantResponse'</a>, <a>getGrantResponse_grant</a> -
--   Grant details.
--   
--   <a>$sel:httpStatus:GetGrantResponse'</a>,
--   <a>getGrantResponse_httpStatus</a> - The response's http status code.
newGetGrantResponse :: Int -> GetGrantResponse

-- | <i>See:</i> <a>newCheckoutLicense</a> smart constructor.
data CheckoutLicense
CheckoutLicense' :: Maybe Text -> Maybe Text -> Text -> CheckoutType -> Text -> [EntitlementData] -> Text -> CheckoutLicense

-- | Create a value of <a>CheckoutLicense</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nodeId:CheckoutLicense'</a>, <a>checkoutLicense_nodeId</a> -
--   Node ID.
--   
--   <a>$sel:beneficiary:CheckoutLicense'</a>,
--   <a>checkoutLicense_beneficiary</a> - License beneficiary.
--   
--   <a>$sel:productSKU:CheckoutLicense'</a>,
--   <a>checkoutLicense_productSKU</a> - Product SKU.
--   
--   <a>$sel:checkoutType:CheckoutLicense'</a>,
--   <a>checkoutLicense_checkoutType</a> - Checkout type.
--   
--   <a>$sel:keyFingerprint:CheckoutLicense'</a>,
--   <a>checkoutLicense_keyFingerprint</a> - Key fingerprint identifying
--   the license.
--   
--   <a>$sel:entitlements:CheckoutLicense'</a>,
--   <a>checkoutLicense_entitlements</a> - License entitlements.
--   
--   <a>$sel:clientToken:CheckoutLicense'</a>,
--   <a>checkoutLicense_clientToken</a> - Unique, case-sensitive identifier
--   that you provide to ensure the idempotency of the request.
newCheckoutLicense :: Text -> CheckoutType -> Text -> Text -> CheckoutLicense

-- | <i>See:</i> <a>newCheckoutLicenseResponse</a> smart constructor.
data CheckoutLicenseResponse
CheckoutLicenseResponse' :: Maybe [EntitlementData] -> Maybe CheckoutType -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> CheckoutLicenseResponse

-- | Create a value of <a>CheckoutLicenseResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:entitlementsAllowed:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_entitlementsAllowed</a> - Allowed license
--   entitlements.
--   
--   <a>$sel:checkoutType:CheckoutLicense'</a>,
--   <a>checkoutLicenseResponse_checkoutType</a> - Checkout type.
--   
--   <a>$sel:expiration:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_expiration</a> - Date and time at which the
--   license checkout expires.
--   
--   <a>$sel:signedToken:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_signedToken</a> - Signed token.
--   
--   <a>$sel:licenseConsumptionToken:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_licenseConsumptionToken</a> - License
--   consumption token.
--   
--   <a>$sel:nodeId:CheckoutLicense'</a>,
--   <a>checkoutLicenseResponse_nodeId</a> - Node ID.
--   
--   <a>$sel:issuedAt:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_issuedAt</a> - Date and time at which the
--   license checkout is issued.
--   
--   <a>$sel:licenseArn:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_licenseArn</a> - Amazon Resource Name (ARN)
--   of the checkout license.
--   
--   <a>$sel:httpStatus:CheckoutLicenseResponse'</a>,
--   <a>checkoutLicenseResponse_httpStatus</a> - The response's http status
--   code.
newCheckoutLicenseResponse :: Int -> CheckoutLicenseResponse

-- | <i>See:</i> <a>newCreateLicenseConversionTaskForResource</a> smart
--   constructor.
data CreateLicenseConversionTaskForResource
CreateLicenseConversionTaskForResource' :: Text -> LicenseConversionContext -> LicenseConversionContext -> CreateLicenseConversionTaskForResource

-- | Create a value of <a>CreateLicenseConversionTaskForResource</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:CreateLicenseConversionTaskForResource'</a>,
--   <a>createLicenseConversionTaskForResource_resourceArn</a> - Amazon
--   Resource Name (ARN) of the resource you are converting the license
--   type for.
--   
--   
--   <a>$sel:sourceLicenseContext:CreateLicenseConversionTaskForResource'</a>,
--   <a>createLicenseConversionTaskForResource_sourceLicenseContext</a> -
--   Information that identifies the license type you are converting from.
--   For the structure of the source license, see <a>Convert a license type
--   using the AWS CLI</a> in the <i>License Manager User Guide</i>.
--   
--   
--   <a>$sel:destinationLicenseContext:CreateLicenseConversionTaskForResource'</a>,
--   <a>createLicenseConversionTaskForResource_destinationLicenseContext</a>
--   - Information that identifies the license type you are converting to.
--   For the structure of the destination license, see <a>Convert a license
--   type using the AWS CLI</a> in the <i>License Manager User Guide</i>.
newCreateLicenseConversionTaskForResource :: Text -> LicenseConversionContext -> LicenseConversionContext -> CreateLicenseConversionTaskForResource

-- | <i>See:</i> <a>newCreateLicenseConversionTaskForResourceResponse</a>
--   smart constructor.
data CreateLicenseConversionTaskForResourceResponse
CreateLicenseConversionTaskForResourceResponse' :: Maybe Text -> Int -> CreateLicenseConversionTaskForResourceResponse

-- | Create a value of
--   <a>CreateLicenseConversionTaskForResourceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseConversionTaskId:CreateLicenseConversionTaskForResourceResponse'</a>,
--   <a>createLicenseConversionTaskForResourceResponse_licenseConversionTaskId</a>
--   - The ID of the created license type conversion task.
--   
--   
--   <a>$sel:httpStatus:CreateLicenseConversionTaskForResourceResponse'</a>,
--   <a>createLicenseConversionTaskForResourceResponse_httpStatus</a> - The
--   response's http status code.
newCreateLicenseConversionTaskForResourceResponse :: Int -> CreateLicenseConversionTaskForResourceResponse

-- | <i>See:</i> <a>newAcceptGrant</a> smart constructor.
data AcceptGrant
AcceptGrant' :: Text -> AcceptGrant

-- | Create a value of <a>AcceptGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantArn:AcceptGrant'</a>, <a>acceptGrant_grantArn</a> -
--   Amazon Resource Name (ARN) of the grant.
newAcceptGrant :: Text -> AcceptGrant

-- | <i>See:</i> <a>newAcceptGrantResponse</a> smart constructor.
data AcceptGrantResponse
AcceptGrantResponse' :: Maybe GrantStatus -> Maybe Text -> Maybe Text -> Int -> AcceptGrantResponse

-- | Create a value of <a>AcceptGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:AcceptGrantResponse'</a>,
--   <a>acceptGrantResponse_status</a> - Grant status.
--   
--   <a>$sel:version:AcceptGrantResponse'</a>,
--   <a>acceptGrantResponse_version</a> - Grant version.
--   
--   <a>$sel:grantArn:AcceptGrant'</a>, <a>acceptGrantResponse_grantArn</a>
--   - Grant ARN.
--   
--   <a>$sel:httpStatus:AcceptGrantResponse'</a>,
--   <a>acceptGrantResponse_httpStatus</a> - The response's http status
--   code.
newAcceptGrantResponse :: Int -> AcceptGrantResponse

-- | <i>See:</i> <a>newListLicenseSpecificationsForResource</a> smart
--   constructor.
data ListLicenseSpecificationsForResource
ListLicenseSpecificationsForResource' :: Maybe Text -> Maybe Int -> Text -> ListLicenseSpecificationsForResource

-- | Create a value of <a>ListLicenseSpecificationsForResource</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListLicenseSpecificationsForResource'</a>,
--   <a>listLicenseSpecificationsForResource_nextToken</a> - Token for the
--   next set of results.
--   
--   <a>$sel:maxResults:ListLicenseSpecificationsForResource'</a>,
--   <a>listLicenseSpecificationsForResource_maxResults</a> - Maximum
--   number of results to return in a single call.
--   
--   <a>$sel:resourceArn:ListLicenseSpecificationsForResource'</a>,
--   <a>listLicenseSpecificationsForResource_resourceArn</a> - Amazon
--   Resource Name (ARN) of a resource that has an associated license
--   configuration.
newListLicenseSpecificationsForResource :: Text -> ListLicenseSpecificationsForResource

-- | <i>See:</i> <a>newListLicenseSpecificationsForResourceResponse</a>
--   smart constructor.
data ListLicenseSpecificationsForResourceResponse
ListLicenseSpecificationsForResourceResponse' :: Maybe [LicenseSpecification] -> Maybe Text -> Int -> ListLicenseSpecificationsForResourceResponse

-- | Create a value of <a>ListLicenseSpecificationsForResourceResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseSpecifications:ListLicenseSpecificationsForResourceResponse'</a>,
--   <a>listLicenseSpecificationsForResourceResponse_licenseSpecifications</a>
--   - License configurations associated with a resource.
--   
--   <a>$sel:nextToken:ListLicenseSpecificationsForResource'</a>,
--   <a>listLicenseSpecificationsForResourceResponse_nextToken</a> - Token
--   for the next set of results.
--   
--   <a>$sel:httpStatus:ListLicenseSpecificationsForResourceResponse'</a>,
--   <a>listLicenseSpecificationsForResourceResponse_httpStatus</a> - The
--   response's http status code.
newListLicenseSpecificationsForResourceResponse :: Int -> ListLicenseSpecificationsForResourceResponse

-- | <i>See:</i> <a>newCheckoutBorrowLicense</a> smart constructor.
data CheckoutBorrowLicense
CheckoutBorrowLicense' :: Maybe [Metadata] -> Maybe Text -> Text -> [EntitlementData] -> DigitalSignatureMethod -> Text -> CheckoutBorrowLicense

-- | Create a value of <a>CheckoutBorrowLicense</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:checkoutMetadata:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicense_checkoutMetadata</a> - Information about
--   constraints.
--   
--   <a>$sel:nodeId:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicense_nodeId</a> - Node ID.
--   
--   <a>$sel:licenseArn:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicense_licenseArn</a> - Amazon Resource Name (ARN)
--   of the license. The license must use the borrow consumption
--   configuration.
--   
--   <a>$sel:entitlements:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicense_entitlements</a> - License entitlements.
--   Partial checkouts are not supported.
--   
--   <a>$sel:digitalSignatureMethod:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicense_digitalSignatureMethod</a> - Digital
--   signature method. The possible value is JSON Web Signature (JWS)
--   algorithm PS384. For more information, see <a>RFC 7518 Digital
--   Signature with RSASSA-PSS</a>.
--   
--   <a>$sel:clientToken:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicense_clientToken</a> - Unique, case-sensitive
--   identifier that you provide to ensure the idempotency of the request.
newCheckoutBorrowLicense :: Text -> DigitalSignatureMethod -> Text -> CheckoutBorrowLicense

-- | <i>See:</i> <a>newCheckoutBorrowLicenseResponse</a> smart constructor.
data CheckoutBorrowLicenseResponse
CheckoutBorrowLicenseResponse' :: Maybe [EntitlementData] -> Maybe [Metadata] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Int -> CheckoutBorrowLicenseResponse

-- | Create a value of <a>CheckoutBorrowLicenseResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:entitlementsAllowed:CheckoutBorrowLicenseResponse'</a>,
--   <a>checkoutBorrowLicenseResponse_entitlementsAllowed</a> - Allowed
--   license entitlements.
--   
--   <a>$sel:checkoutMetadata:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicenseResponse_checkoutMetadata</a> - Information
--   about constraints.
--   
--   <a>$sel:expiration:CheckoutBorrowLicenseResponse'</a>,
--   <a>checkoutBorrowLicenseResponse_expiration</a> - Date and time at
--   which the license checkout expires.
--   
--   <a>$sel:signedToken:CheckoutBorrowLicenseResponse'</a>,
--   <a>checkoutBorrowLicenseResponse_signedToken</a> - Signed token.
--   
--   <a>$sel:licenseConsumptionToken:CheckoutBorrowLicenseResponse'</a>,
--   <a>checkoutBorrowLicenseResponse_licenseConsumptionToken</a> - License
--   consumption token.
--   
--   <a>$sel:nodeId:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicenseResponse_nodeId</a> - Node ID.
--   
--   <a>$sel:issuedAt:CheckoutBorrowLicenseResponse'</a>,
--   <a>checkoutBorrowLicenseResponse_issuedAt</a> - Date and time at which
--   the license checkout is issued.
--   
--   <a>$sel:licenseArn:CheckoutBorrowLicense'</a>,
--   <a>checkoutBorrowLicenseResponse_licenseArn</a> - Amazon Resource Name
--   (ARN) of the license.
--   
--   <a>$sel:httpStatus:CheckoutBorrowLicenseResponse'</a>,
--   <a>checkoutBorrowLicenseResponse_httpStatus</a> - The response's http
--   status code.
newCheckoutBorrowLicenseResponse :: Int -> CheckoutBorrowLicenseResponse

-- | <i>See:</i> <a>newGetServiceSettings</a> smart constructor.
data GetServiceSettings
GetServiceSettings' :: GetServiceSettings

-- | Create a value of <a>GetServiceSettings</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newGetServiceSettings :: GetServiceSettings

-- | <i>See:</i> <a>newGetServiceSettingsResponse</a> smart constructor.
data GetServiceSettingsResponse
GetServiceSettingsResponse' :: Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe OrganizationConfiguration -> Int -> GetServiceSettingsResponse

-- | Create a value of <a>GetServiceSettingsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enableCrossAccountsDiscovery:GetServiceSettingsResponse'</a>,
--   <a>getServiceSettingsResponse_enableCrossAccountsDiscovery</a> -
--   Indicates whether cross-account discovery is enabled.
--   
--   <a>$sel:snsTopicArn:GetServiceSettingsResponse'</a>,
--   <a>getServiceSettingsResponse_snsTopicArn</a> - SNS topic configured
--   to receive notifications from License Manager.
--   
--   
--   <a>$sel:licenseManagerResourceShareArn:GetServiceSettingsResponse'</a>,
--   <a>getServiceSettingsResponse_licenseManagerResourceShareArn</a> -
--   Amazon Resource Name (ARN) of the resource share. The License Manager
--   management account provides member accounts with access to this share.
--   
--   <a>$sel:s3BucketArn:GetServiceSettingsResponse'</a>,
--   <a>getServiceSettingsResponse_s3BucketArn</a> - Regional S3 bucket
--   path for storing reports, license trail event data, discovery data,
--   and so on.
--   
--   <a>$sel:organizationConfiguration:GetServiceSettingsResponse'</a>,
--   <a>getServiceSettingsResponse_organizationConfiguration</a> -
--   Indicates whether Organizations is integrated with License Manager for
--   cross-account discovery.
--   
--   <a>$sel:httpStatus:GetServiceSettingsResponse'</a>,
--   <a>getServiceSettingsResponse_httpStatus</a> - The response's http
--   status code.
newGetServiceSettingsResponse :: Int -> GetServiceSettingsResponse

-- | <i>See:</i> <a>newRejectGrant</a> smart constructor.
data RejectGrant
RejectGrant' :: Text -> RejectGrant

-- | Create a value of <a>RejectGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grantArn:RejectGrant'</a>, <a>rejectGrant_grantArn</a> -
--   Amazon Resource Name (ARN) of the grant.
newRejectGrant :: Text -> RejectGrant

-- | <i>See:</i> <a>newRejectGrantResponse</a> smart constructor.
data RejectGrantResponse
RejectGrantResponse' :: Maybe GrantStatus -> Maybe Text -> Maybe Text -> Int -> RejectGrantResponse

-- | Create a value of <a>RejectGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:RejectGrantResponse'</a>,
--   <a>rejectGrantResponse_status</a> - Grant status.
--   
--   <a>$sel:version:RejectGrantResponse'</a>,
--   <a>rejectGrantResponse_version</a> - Grant version.
--   
--   <a>$sel:grantArn:RejectGrant'</a>, <a>rejectGrantResponse_grantArn</a>
--   - Grant ARN.
--   
--   <a>$sel:httpStatus:RejectGrantResponse'</a>,
--   <a>rejectGrantResponse_httpStatus</a> - The response's http status
--   code.
newRejectGrantResponse :: Int -> RejectGrantResponse

-- | <i>See:</i> <a>newUpdateServiceSettings</a> smart constructor.
data UpdateServiceSettings
UpdateServiceSettings' :: Maybe Bool -> Maybe Text -> Maybe Text -> Maybe OrganizationConfiguration -> UpdateServiceSettings

-- | Create a value of <a>UpdateServiceSettings</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enableCrossAccountsDiscovery:UpdateServiceSettings'</a>,
--   <a>updateServiceSettings_enableCrossAccountsDiscovery</a> - Activates
--   cross-account discovery.
--   
--   <a>$sel:snsTopicArn:UpdateServiceSettings'</a>,
--   <a>updateServiceSettings_snsTopicArn</a> - Amazon Resource Name (ARN)
--   of the Amazon SNS topic used for License Manager alerts.
--   
--   <a>$sel:s3BucketArn:UpdateServiceSettings'</a>,
--   <a>updateServiceSettings_s3BucketArn</a> - Amazon Resource Name (ARN)
--   of the Amazon S3 bucket where the License Manager information is
--   stored.
--   
--   <a>$sel:organizationConfiguration:UpdateServiceSettings'</a>,
--   <a>updateServiceSettings_organizationConfiguration</a> - Enables
--   integration with Organizations for cross-account discovery.
newUpdateServiceSettings :: UpdateServiceSettings

-- | <i>See:</i> <a>newUpdateServiceSettingsResponse</a> smart constructor.
data UpdateServiceSettingsResponse
UpdateServiceSettingsResponse' :: Int -> UpdateServiceSettingsResponse

-- | Create a value of <a>UpdateServiceSettingsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UpdateServiceSettingsResponse'</a>,
--   <a>updateServiceSettingsResponse_httpStatus</a> - The response's http
--   status code.
newUpdateServiceSettingsResponse :: Int -> UpdateServiceSettingsResponse

-- | <i>See:</i> <a>newListDistributedGrants</a> smart constructor.
data ListDistributedGrants
ListDistributedGrants' :: Maybe [Filter] -> Maybe Text -> Maybe [Text] -> Maybe Natural -> ListDistributedGrants

-- | Create a value of <a>ListDistributedGrants</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListDistributedGrants'</a>,
--   <a>listDistributedGrants_filters</a> - Filters to scope the results.
--   The following filters are supported:
--   
--   <ul>
--   <li><pre>LicenseArn</pre></li>
--   <li><pre>GrantStatus</pre></li>
--   <li><pre>GranteePrincipalARN</pre></li>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>LicenseIssuerName</pre></li>
--   </ul>
--   
--   <a>$sel:nextToken:ListDistributedGrants'</a>,
--   <a>listDistributedGrants_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:grantArns:ListDistributedGrants'</a>,
--   <a>listDistributedGrants_grantArns</a> - Amazon Resource Names (ARNs)
--   of the grants.
--   
--   <a>$sel:maxResults:ListDistributedGrants'</a>,
--   <a>listDistributedGrants_maxResults</a> - Maximum number of results to
--   return in a single call.
newListDistributedGrants :: ListDistributedGrants

-- | <i>See:</i> <a>newListDistributedGrantsResponse</a> smart constructor.
data ListDistributedGrantsResponse
ListDistributedGrantsResponse' :: Maybe [Grant] -> Maybe Text -> Int -> ListDistributedGrantsResponse

-- | Create a value of <a>ListDistributedGrantsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:grants:ListDistributedGrantsResponse'</a>,
--   <a>listDistributedGrantsResponse_grants</a> - Distributed grant
--   details.
--   
--   <a>$sel:nextToken:ListDistributedGrants'</a>,
--   <a>listDistributedGrantsResponse_nextToken</a> - Token for the next
--   set of results.
--   
--   <a>$sel:httpStatus:ListDistributedGrantsResponse'</a>,
--   <a>listDistributedGrantsResponse_httpStatus</a> - The response's http
--   status code.
newListDistributedGrantsResponse :: Int -> ListDistributedGrantsResponse

-- | <i>See:</i> <a>newListFailuresForLicenseConfigurationOperations</a>
--   smart constructor.
data ListFailuresForLicenseConfigurationOperations
ListFailuresForLicenseConfigurationOperations' :: Maybe Text -> Maybe Int -> Text -> ListFailuresForLicenseConfigurationOperations

-- | Create a value of <a>ListFailuresForLicenseConfigurationOperations</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFailuresForLicenseConfigurationOperations'</a>,
--   <a>listFailuresForLicenseConfigurationOperations_nextToken</a> - Token
--   for the next set of results.
--   
--   <a>$sel:maxResults:ListFailuresForLicenseConfigurationOperations'</a>,
--   <a>listFailuresForLicenseConfigurationOperations_maxResults</a> -
--   Maximum number of results to return in a single call.
--   
--   
--   <a>$sel:licenseConfigurationArn:ListFailuresForLicenseConfigurationOperations'</a>,
--   <a>listFailuresForLicenseConfigurationOperations_licenseConfigurationArn</a>
--   - Amazon Resource Name of the license configuration.
newListFailuresForLicenseConfigurationOperations :: Text -> ListFailuresForLicenseConfigurationOperations

-- | <i>See:</i>
--   <a>newListFailuresForLicenseConfigurationOperationsResponse</a> smart
--   constructor.
data ListFailuresForLicenseConfigurationOperationsResponse
ListFailuresForLicenseConfigurationOperationsResponse' :: Maybe Text -> Maybe [LicenseOperationFailure] -> Int -> ListFailuresForLicenseConfigurationOperationsResponse

-- | Create a value of
--   <a>ListFailuresForLicenseConfigurationOperationsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListFailuresForLicenseConfigurationOperations'</a>,
--   <a>listFailuresForLicenseConfigurationOperationsResponse_nextToken</a>
--   - Token for the next set of results.
--   
--   
--   <a>$sel:licenseOperationFailureList:ListFailuresForLicenseConfigurationOperationsResponse'</a>,
--   <a>listFailuresForLicenseConfigurationOperationsResponse_licenseOperationFailureList</a>
--   - License configuration operations that failed.
--   
--   
--   <a>$sel:httpStatus:ListFailuresForLicenseConfigurationOperationsResponse'</a>,
--   <a>listFailuresForLicenseConfigurationOperationsResponse_httpStatus</a>
--   - The response's http status code.
newListFailuresForLicenseConfigurationOperationsResponse :: Int -> ListFailuresForLicenseConfigurationOperationsResponse

-- | <i>See:</i> <a>newDeleteGrant</a> smart constructor.
data DeleteGrant
DeleteGrant' :: Maybe Text -> Text -> Text -> DeleteGrant

-- | Create a value of <a>DeleteGrant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statusReason:DeleteGrant'</a>, <a>deleteGrant_statusReason</a>
--   - The Status reason for the delete request.
--   
--   <a>$sel:grantArn:DeleteGrant'</a>, <a>deleteGrant_grantArn</a> -
--   Amazon Resource Name (ARN) of the grant.
--   
--   <a>$sel:version:DeleteGrant'</a>, <a>deleteGrant_version</a> - Current
--   version of the grant.
newDeleteGrant :: Text -> Text -> DeleteGrant

-- | <i>See:</i> <a>newDeleteGrantResponse</a> smart constructor.
data DeleteGrantResponse
DeleteGrantResponse' :: Maybe GrantStatus -> Maybe Text -> Maybe Text -> Int -> DeleteGrantResponse

-- | Create a value of <a>DeleteGrantResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:DeleteGrantResponse'</a>,
--   <a>deleteGrantResponse_status</a> - Grant status.
--   
--   <a>$sel:version:DeleteGrant'</a>, <a>deleteGrantResponse_version</a> -
--   Grant version.
--   
--   <a>$sel:grantArn:DeleteGrant'</a>, <a>deleteGrantResponse_grantArn</a>
--   - Grant ARN.
--   
--   <a>$sel:httpStatus:DeleteGrantResponse'</a>,
--   <a>deleteGrantResponse_httpStatus</a> - The response's http status
--   code.
newDeleteGrantResponse :: Int -> DeleteGrantResponse

-- | <i>See:</i> <a>newCreateToken</a> smart constructor.
data CreateToken
CreateToken' :: Maybe [Text] -> Maybe [Text] -> Maybe Int -> Text -> Text -> CreateToken

-- | Create a value of <a>CreateToken</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tokenProperties:CreateToken'</a>,
--   <a>createToken_tokenProperties</a> - Data specified by the caller to
--   be included in the JWT token. The data is mapped to the amr claim of
--   the JWT token.
--   
--   <a>$sel:roleArns:CreateToken'</a>, <a>createToken_roleArns</a> -
--   Amazon Resource Name (ARN) of the IAM roles to embed in the token.
--   License Manager does not check whether the roles are in use.
--   
--   <a>$sel:expirationInDays:CreateToken'</a>,
--   <a>createToken_expirationInDays</a> - Token expiration, in days,
--   counted from token creation. The default is 365 days.
--   
--   <a>$sel:licenseArn:CreateToken'</a>, <a>createToken_licenseArn</a> -
--   Amazon Resource Name (ARN) of the license. The ARN is mapped to the
--   aud claim of the JWT token.
--   
--   <a>$sel:clientToken:CreateToken'</a>, <a>createToken_clientToken</a> -
--   Idempotency token, valid for 10 minutes.
newCreateToken :: Text -> Text -> CreateToken

-- | <i>See:</i> <a>newCreateTokenResponse</a> smart constructor.
data CreateTokenResponse
CreateTokenResponse' :: Maybe Text -> Maybe Text -> Maybe TokenType -> Int -> CreateTokenResponse

-- | Create a value of <a>CreateTokenResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:token:CreateTokenResponse'</a>,
--   <a>createTokenResponse_token</a> - Refresh token, encoded as a JWT
--   token.
--   
--   <a>$sel:tokenId:CreateTokenResponse'</a>,
--   <a>createTokenResponse_tokenId</a> - Token ID.
--   
--   <a>$sel:tokenType:CreateTokenResponse'</a>,
--   <a>createTokenResponse_tokenType</a> - Token type.
--   
--   <a>$sel:httpStatus:CreateTokenResponse'</a>,
--   <a>createTokenResponse_httpStatus</a> - The response's http status
--   code.
newCreateTokenResponse :: Int -> CreateTokenResponse

-- | <i>See:</i> <a>newDeleteLicense</a> smart constructor.
data DeleteLicense
DeleteLicense' :: Text -> Text -> DeleteLicense

-- | Create a value of <a>DeleteLicense</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseArn:DeleteLicense'</a>, <a>deleteLicense_licenseArn</a>
--   - Amazon Resource Name (ARN) of the license.
--   
--   <a>$sel:sourceVersion:DeleteLicense'</a>,
--   <a>deleteLicense_sourceVersion</a> - Current version of the license.
newDeleteLicense :: Text -> Text -> DeleteLicense

-- | <i>See:</i> <a>newDeleteLicenseResponse</a> smart constructor.
data DeleteLicenseResponse
DeleteLicenseResponse' :: Maybe LicenseDeletionStatus -> Maybe Text -> Int -> DeleteLicenseResponse

-- | Create a value of <a>DeleteLicenseResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:DeleteLicenseResponse'</a>,
--   <a>deleteLicenseResponse_status</a> - License status.
--   
--   <a>$sel:deletionDate:DeleteLicenseResponse'</a>,
--   <a>deleteLicenseResponse_deletionDate</a> - Date when the license is
--   deleted.
--   
--   <a>$sel:httpStatus:DeleteLicenseResponse'</a>,
--   <a>deleteLicenseResponse_httpStatus</a> - The response's http status
--   code.
newDeleteLicenseResponse :: Int -> DeleteLicenseResponse

-- | <i>See:</i> <a>newListLicenses</a> smart constructor.
data ListLicenses
ListLicenses' :: Maybe [Filter] -> Maybe Text -> Maybe [Text] -> Maybe Natural -> ListLicenses

-- | Create a value of <a>ListLicenses</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListLicenses'</a>, <a>listLicenses_filters</a> -
--   Filters to scope the results. The following filters are supported:
--   
--   <ul>
--   <li><pre>Beneficiary</pre></li>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>Fingerprint</pre></li>
--   <li><pre>Status</pre></li>
--   </ul>
--   
--   <a>$sel:nextToken:ListLicenses'</a>, <a>listLicenses_nextToken</a> -
--   Token for the next set of results.
--   
--   <a>$sel:licenseArns:ListLicenses'</a>, <a>listLicenses_licenseArns</a>
--   - Amazon Resource Names (ARNs) of the licenses.
--   
--   <a>$sel:maxResults:ListLicenses'</a>, <a>listLicenses_maxResults</a> -
--   Maximum number of results to return in a single call.
newListLicenses :: ListLicenses

-- | <i>See:</i> <a>newListLicensesResponse</a> smart constructor.
data ListLicensesResponse
ListLicensesResponse' :: Maybe Text -> Maybe [License] -> Int -> ListLicensesResponse

-- | Create a value of <a>ListLicensesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListLicenses'</a>,
--   <a>listLicensesResponse_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:licenses:ListLicensesResponse'</a>,
--   <a>listLicensesResponse_licenses</a> - License details.
--   
--   <a>$sel:httpStatus:ListLicensesResponse'</a>,
--   <a>listLicensesResponse_httpStatus</a> - The response's http status
--   code.
newListLicensesResponse :: Int -> ListLicensesResponse

-- | <i>See:</i> <a>newListLicenseConfigurations</a> smart constructor.
data ListLicenseConfigurations
ListLicenseConfigurations' :: Maybe [Filter] -> Maybe Text -> Maybe [Text] -> Maybe Int -> ListLicenseConfigurations

-- | Create a value of <a>ListLicenseConfigurations</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListLicenseConfigurations'</a>,
--   <a>listLicenseConfigurations_filters</a> - Filters to scope the
--   results. The following filters and logical operators are supported:
--   
--   <ul>
--   <li><tt>licenseCountingType</tt> - The dimension for which licenses
--   are counted. Possible values are <tt>vCPU</tt> | <tt>Instance</tt> |
--   <tt>Core</tt> | <tt>Socket</tt>. Logical operators are <tt>EQUALS</tt>
--   | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>enforceLicenseCount</tt> - A Boolean value that indicates
--   whether hard license enforcement is used. Logical operators are
--   <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>usagelimitExceeded</tt> - A Boolean value that indicates
--   whether the available licenses have been exceeded. Logical operators
--   are <tt>EQUALS</tt> | <tt>NOT_EQUALS</tt>.</li>
--   </ul>
--   
--   <a>$sel:nextToken:ListLicenseConfigurations'</a>,
--   <a>listLicenseConfigurations_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:licenseConfigurationArns:ListLicenseConfigurations'</a>,
--   <a>listLicenseConfigurations_licenseConfigurationArns</a> - Amazon
--   Resource Names (ARN) of the license configurations.
--   
--   <a>$sel:maxResults:ListLicenseConfigurations'</a>,
--   <a>listLicenseConfigurations_maxResults</a> - Maximum number of
--   results to return in a single call.
newListLicenseConfigurations :: ListLicenseConfigurations

-- | <i>See:</i> <a>newListLicenseConfigurationsResponse</a> smart
--   constructor.
data ListLicenseConfigurationsResponse
ListLicenseConfigurationsResponse' :: Maybe Text -> Maybe [LicenseConfiguration] -> Int -> ListLicenseConfigurationsResponse

-- | Create a value of <a>ListLicenseConfigurationsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListLicenseConfigurations'</a>,
--   <a>listLicenseConfigurationsResponse_nextToken</a> - Token for the
--   next set of results.
--   
--   <a>$sel:licenseConfigurations:ListLicenseConfigurationsResponse'</a>,
--   <a>listLicenseConfigurationsResponse_licenseConfigurations</a> -
--   Information about the license configurations.
--   
--   <a>$sel:httpStatus:ListLicenseConfigurationsResponse'</a>,
--   <a>listLicenseConfigurationsResponse_httpStatus</a> - The response's
--   http status code.
newListLicenseConfigurationsResponse :: Int -> ListLicenseConfigurationsResponse

-- | <i>See:</i> <a>newListReceivedLicenses</a> smart constructor.
data ListReceivedLicenses
ListReceivedLicenses' :: Maybe [Filter] -> Maybe Text -> Maybe [Text] -> Maybe Natural -> ListReceivedLicenses

-- | Create a value of <a>ListReceivedLicenses</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:filters:ListReceivedLicenses'</a>,
--   <a>listReceivedLicenses_filters</a> - Filters to scope the results.
--   The following filters are supported:
--   
--   <ul>
--   <li><pre>ProductSKU</pre></li>
--   <li><pre>Status</pre></li>
--   <li><pre>Fingerprint</pre></li>
--   <li><pre>IssuerName</pre></li>
--   <li><pre>Beneficiary</pre></li>
--   </ul>
--   
--   <a>$sel:nextToken:ListReceivedLicenses'</a>,
--   <a>listReceivedLicenses_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:licenseArns:ListReceivedLicenses'</a>,
--   <a>listReceivedLicenses_licenseArns</a> - Amazon Resource Names (ARNs)
--   of the licenses.
--   
--   <a>$sel:maxResults:ListReceivedLicenses'</a>,
--   <a>listReceivedLicenses_maxResults</a> - Maximum number of results to
--   return in a single call.
newListReceivedLicenses :: ListReceivedLicenses

-- | <i>See:</i> <a>newListReceivedLicensesResponse</a> smart constructor.
data ListReceivedLicensesResponse
ListReceivedLicensesResponse' :: Maybe Text -> Maybe [GrantedLicense] -> Int -> ListReceivedLicensesResponse

-- | Create a value of <a>ListReceivedLicensesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListReceivedLicenses'</a>,
--   <a>listReceivedLicensesResponse_nextToken</a> - Token for the next set
--   of results.
--   
--   <a>$sel:licenses:ListReceivedLicensesResponse'</a>,
--   <a>listReceivedLicensesResponse_licenses</a> - Received license
--   details.
--   
--   <a>$sel:httpStatus:ListReceivedLicensesResponse'</a>,
--   <a>listReceivedLicensesResponse_httpStatus</a> - The response's http
--   status code.
newListReceivedLicensesResponse :: Int -> ListReceivedLicensesResponse

-- | <i>See:</i> <a>newCreateGrantVersion</a> smart constructor.
data CreateGrantVersion
CreateGrantVersion' :: Maybe GrantStatus -> Maybe (NonEmpty AllowedOperation) -> Maybe Text -> Maybe Text -> Maybe Text -> Text -> Text -> CreateGrantVersion

-- | Create a value of <a>CreateGrantVersion</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CreateGrantVersion'</a>,
--   <a>createGrantVersion_status</a> - Grant status.
--   
--   <a>$sel:allowedOperations:CreateGrantVersion'</a>,
--   <a>createGrantVersion_allowedOperations</a> - Allowed operations for
--   the grant.
--   
--   <a>$sel:grantName:CreateGrantVersion'</a>,
--   <a>createGrantVersion_grantName</a> - Grant name.
--   
--   <a>$sel:sourceVersion:CreateGrantVersion'</a>,
--   <a>createGrantVersion_sourceVersion</a> - Current version of the
--   grant.
--   
--   <a>$sel:statusReason:CreateGrantVersion'</a>,
--   <a>createGrantVersion_statusReason</a> - Grant status reason.
--   
--   <a>$sel:clientToken:CreateGrantVersion'</a>,
--   <a>createGrantVersion_clientToken</a> - Unique, case-sensitive
--   identifier that you provide to ensure the idempotency of the request.
--   
--   <a>$sel:grantArn:CreateGrantVersion'</a>,
--   <a>createGrantVersion_grantArn</a> - Amazon Resource Name (ARN) of the
--   grant.
newCreateGrantVersion :: Text -> Text -> CreateGrantVersion

-- | <i>See:</i> <a>newCreateGrantVersionResponse</a> smart constructor.
data CreateGrantVersionResponse
CreateGrantVersionResponse' :: Maybe GrantStatus -> Maybe Text -> Maybe Text -> Int -> CreateGrantVersionResponse

-- | Create a value of <a>CreateGrantVersionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CreateGrantVersion'</a>,
--   <a>createGrantVersionResponse_status</a> - Grant status.
--   
--   <a>$sel:version:CreateGrantVersionResponse'</a>,
--   <a>createGrantVersionResponse_version</a> - New version of the grant.
--   
--   <a>$sel:grantArn:CreateGrantVersion'</a>,
--   <a>createGrantVersionResponse_grantArn</a> - Grant ARN.
--   
--   <a>$sel:httpStatus:CreateGrantVersionResponse'</a>,
--   <a>createGrantVersionResponse_httpStatus</a> - The response's http
--   status code.
newCreateGrantVersionResponse :: Int -> CreateGrantVersionResponse

-- | <i>See:</i> <a>newListAssociationsForLicenseConfiguration</a> smart
--   constructor.
data ListAssociationsForLicenseConfiguration
ListAssociationsForLicenseConfiguration' :: Maybe Text -> Maybe Int -> Text -> ListAssociationsForLicenseConfiguration

-- | Create a value of <a>ListAssociationsForLicenseConfiguration</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListAssociationsForLicenseConfiguration'</a>,
--   <a>listAssociationsForLicenseConfiguration_nextToken</a> - Token for
--   the next set of results.
--   
--   <a>$sel:maxResults:ListAssociationsForLicenseConfiguration'</a>,
--   <a>listAssociationsForLicenseConfiguration_maxResults</a> - Maximum
--   number of results to return in a single call.
--   
--   
--   <a>$sel:licenseConfigurationArn:ListAssociationsForLicenseConfiguration'</a>,
--   <a>listAssociationsForLicenseConfiguration_licenseConfigurationArn</a>
--   - Amazon Resource Name (ARN) of a license configuration.
newListAssociationsForLicenseConfiguration :: Text -> ListAssociationsForLicenseConfiguration

-- | <i>See:</i> <a>newListAssociationsForLicenseConfigurationResponse</a>
--   smart constructor.
data ListAssociationsForLicenseConfigurationResponse
ListAssociationsForLicenseConfigurationResponse' :: Maybe [LicenseConfigurationAssociation] -> Maybe Text -> Int -> ListAssociationsForLicenseConfigurationResponse

-- | Create a value of
--   <a>ListAssociationsForLicenseConfigurationResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseConfigurationAssociations:ListAssociationsForLicenseConfigurationResponse'</a>,
--   <a>listAssociationsForLicenseConfigurationResponse_licenseConfigurationAssociations</a>
--   - Information about the associations for the license configuration.
--   
--   <a>$sel:nextToken:ListAssociationsForLicenseConfiguration'</a>,
--   <a>listAssociationsForLicenseConfigurationResponse_nextToken</a> -
--   Token for the next set of results.
--   
--   
--   <a>$sel:httpStatus:ListAssociationsForLicenseConfigurationResponse'</a>,
--   <a>listAssociationsForLicenseConfigurationResponse_httpStatus</a> -
--   The response's http status code.
newListAssociationsForLicenseConfigurationResponse :: Int -> ListAssociationsForLicenseConfigurationResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   Amazon Resource Name (ARN) of the license configuration.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - One or more
--   tags.
newTagResource :: Text -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | <i>See:</i> <a>newListLicenseVersions</a> smart constructor.
data ListLicenseVersions
ListLicenseVersions' :: Maybe Text -> Maybe Natural -> Text -> ListLicenseVersions

-- | Create a value of <a>ListLicenseVersions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListLicenseVersions'</a>,
--   <a>listLicenseVersions_nextToken</a> - Token for the next set of
--   results.
--   
--   <a>$sel:maxResults:ListLicenseVersions'</a>,
--   <a>listLicenseVersions_maxResults</a> - Maximum number of results to
--   return in a single call.
--   
--   <a>$sel:licenseArn:ListLicenseVersions'</a>,
--   <a>listLicenseVersions_licenseArn</a> - Amazon Resource Name (ARN) of
--   the license.
newListLicenseVersions :: Text -> ListLicenseVersions

-- | <i>See:</i> <a>newListLicenseVersionsResponse</a> smart constructor.
data ListLicenseVersionsResponse
ListLicenseVersionsResponse' :: Maybe Text -> Maybe [License] -> Int -> ListLicenseVersionsResponse

-- | Create a value of <a>ListLicenseVersionsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListLicenseVersions'</a>,
--   <a>listLicenseVersionsResponse_nextToken</a> - Token for the next set
--   of results.
--   
--   <a>$sel:licenses:ListLicenseVersionsResponse'</a>,
--   <a>listLicenseVersionsResponse_licenses</a> - License details.
--   
--   <a>$sel:httpStatus:ListLicenseVersionsResponse'</a>,
--   <a>listLicenseVersionsResponse_httpStatus</a> - The response's http
--   status code.
newListLicenseVersionsResponse :: Int -> ListLicenseVersionsResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - Amazon Resource Name (ARN) of the
--   license configuration.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> -
--   Keys identifying the tags to remove.
newUntagResource :: Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | <i>See:</i> <a>newGetLicenseManagerReportGenerator</a> smart
--   constructor.
data GetLicenseManagerReportGenerator
GetLicenseManagerReportGenerator' :: Text -> GetLicenseManagerReportGenerator

-- | Create a value of <a>GetLicenseManagerReportGenerator</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseManagerReportGeneratorArn:GetLicenseManagerReportGenerator'</a>,
--   <a>getLicenseManagerReportGenerator_licenseManagerReportGeneratorArn</a>
--   - Amazon Resource Name (ARN) of the report generator.
newGetLicenseManagerReportGenerator :: Text -> GetLicenseManagerReportGenerator

-- | <i>See:</i> <a>newGetLicenseManagerReportGeneratorResponse</a> smart
--   constructor.
data GetLicenseManagerReportGeneratorResponse
GetLicenseManagerReportGeneratorResponse' :: Maybe ReportGenerator -> Int -> GetLicenseManagerReportGeneratorResponse

-- | Create a value of <a>GetLicenseManagerReportGeneratorResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:reportGenerator:GetLicenseManagerReportGeneratorResponse'</a>,
--   <a>getLicenseManagerReportGeneratorResponse_reportGenerator</a> - A
--   report generator that creates periodic reports about your license
--   configurations.
--   
--   <a>$sel:httpStatus:GetLicenseManagerReportGeneratorResponse'</a>,
--   <a>getLicenseManagerReportGeneratorResponse_httpStatus</a> - The
--   response's http status code.
newGetLicenseManagerReportGeneratorResponse :: Int -> GetLicenseManagerReportGeneratorResponse

-- | <i>See:</i> <a>newGetAccessToken</a> smart constructor.
data GetAccessToken
GetAccessToken' :: Maybe [Text] -> Text -> GetAccessToken

-- | Create a value of <a>GetAccessToken</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tokenProperties:GetAccessToken'</a>,
--   <a>getAccessToken_tokenProperties</a> - Token properties to validate
--   against those present in the JWT token.
--   
--   <a>$sel:token:GetAccessToken'</a>, <a>getAccessToken_token</a> -
--   Refresh token, encoded as a JWT token.
newGetAccessToken :: Text -> GetAccessToken

-- | <i>See:</i> <a>newGetAccessTokenResponse</a> smart constructor.
data GetAccessTokenResponse
GetAccessTokenResponse' :: Maybe Text -> Int -> GetAccessTokenResponse

-- | Create a value of <a>GetAccessTokenResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:accessToken:GetAccessTokenResponse'</a>,
--   <a>getAccessTokenResponse_accessToken</a> - Temporary access token.
--   
--   <a>$sel:httpStatus:GetAccessTokenResponse'</a>,
--   <a>getAccessTokenResponse_httpStatus</a> - The response's http status
--   code.
newGetAccessTokenResponse :: Int -> GetAccessTokenResponse

-- | <i>See:</i> <a>newCreateLicenseManagerReportGenerator</a> smart
--   constructor.
data CreateLicenseManagerReportGenerator
CreateLicenseManagerReportGenerator' :: Maybe Text -> Maybe [Tag] -> Text -> [ReportType] -> ReportContext -> ReportFrequency -> Text -> CreateLicenseManagerReportGenerator

-- | Create a value of <a>CreateLicenseManagerReportGenerator</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:description:CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_description</a> - Description
--   of the report generator.
--   
--   <a>$sel:tags:CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_tags</a> - Tags to add to the
--   report generator.
--   
--   <a>$sel:reportGeneratorName:CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_reportGeneratorName</a> - Name
--   of the report generator.
--   
--   <a>$sel:type':CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_type</a> - Type of reports to
--   generate. The following report types an be generated:
--   
--   <ul>
--   <li>License configuration report - Reports the number and details of
--   consumed licenses for a license configuration.</li>
--   <li>Resource report - Reports the tracked licenses and resource
--   consumption for a license configuration.</li>
--   </ul>
--   
--   <a>$sel:reportContext:CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_reportContext</a> - Defines the
--   type of license configuration the report generator tracks.
--   
--   <a>$sel:reportFrequency:CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_reportFrequency</a> - Frequency
--   by which reports are generated. Reports can be generated daily,
--   monthly, or weekly.
--   
--   <a>$sel:clientToken:CreateLicenseManagerReportGenerator'</a>,
--   <a>createLicenseManagerReportGenerator_clientToken</a> - Unique,
--   case-sensitive identifier that you provide to ensure the idempotency
--   of the request.
newCreateLicenseManagerReportGenerator :: Text -> ReportContext -> ReportFrequency -> Text -> CreateLicenseManagerReportGenerator

-- | <i>See:</i> <a>newCreateLicenseManagerReportGeneratorResponse</a>
--   smart constructor.
data CreateLicenseManagerReportGeneratorResponse
CreateLicenseManagerReportGeneratorResponse' :: Maybe Text -> Int -> CreateLicenseManagerReportGeneratorResponse

-- | Create a value of <a>CreateLicenseManagerReportGeneratorResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:licenseManagerReportGeneratorArn:CreateLicenseManagerReportGeneratorResponse'</a>,
--   <a>createLicenseManagerReportGeneratorResponse_licenseManagerReportGeneratorArn</a>
--   - The Amazon Resource Name (ARN) of the new report generator.
--   
--   <a>$sel:httpStatus:CreateLicenseManagerReportGeneratorResponse'</a>,
--   <a>createLicenseManagerReportGeneratorResponse_httpStatus</a> - The
--   response's http status code.
newCreateLicenseManagerReportGeneratorResponse :: Int -> CreateLicenseManagerReportGeneratorResponse
newtype AllowedOperation
AllowedOperation' :: Text -> AllowedOperation
[fromAllowedOperation] :: AllowedOperation -> Text
pattern AllowedOperation_CheckInLicense :: AllowedOperation
pattern AllowedOperation_CheckoutBorrowLicense :: AllowedOperation
pattern AllowedOperation_CheckoutLicense :: AllowedOperation
pattern AllowedOperation_CreateGrant :: AllowedOperation
pattern AllowedOperation_CreateToken :: AllowedOperation
pattern AllowedOperation_ExtendConsumptionLicense :: AllowedOperation
pattern AllowedOperation_ListPurchasedLicenses :: AllowedOperation
newtype CheckoutType
CheckoutType' :: Text -> CheckoutType
[fromCheckoutType] :: CheckoutType -> Text
pattern CheckoutType_PERPETUAL :: CheckoutType
pattern CheckoutType_PROVISIONAL :: CheckoutType
newtype DigitalSignatureMethod
DigitalSignatureMethod' :: Text -> DigitalSignatureMethod
[fromDigitalSignatureMethod] :: DigitalSignatureMethod -> Text
pattern DigitalSignatureMethod_JWT_PS384 :: DigitalSignatureMethod
newtype EntitlementDataUnit
EntitlementDataUnit' :: Text -> EntitlementDataUnit
[fromEntitlementDataUnit] :: EntitlementDataUnit -> Text
pattern EntitlementDataUnit_Bits :: EntitlementDataUnit
pattern EntitlementDataUnit_Bits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Bytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Bytes_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Count :: EntitlementDataUnit
pattern EntitlementDataUnit_Count_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Gigabits :: EntitlementDataUnit
pattern EntitlementDataUnit_Gigabits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Gigabytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Gigabytes_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Kilobits :: EntitlementDataUnit
pattern EntitlementDataUnit_Kilobits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Kilobytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Kilobytes_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Megabits :: EntitlementDataUnit
pattern EntitlementDataUnit_Megabits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Megabytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Megabytes_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Microseconds :: EntitlementDataUnit
pattern EntitlementDataUnit_Milliseconds :: EntitlementDataUnit
pattern EntitlementDataUnit_None :: EntitlementDataUnit
pattern EntitlementDataUnit_Percent :: EntitlementDataUnit
pattern EntitlementDataUnit_Seconds :: EntitlementDataUnit
pattern EntitlementDataUnit_Terabits :: EntitlementDataUnit
pattern EntitlementDataUnit_Terabits_Second :: EntitlementDataUnit
pattern EntitlementDataUnit_Terabytes :: EntitlementDataUnit
pattern EntitlementDataUnit_Terabytes_Second :: EntitlementDataUnit
newtype EntitlementUnit
EntitlementUnit' :: Text -> EntitlementUnit
[fromEntitlementUnit] :: EntitlementUnit -> Text
pattern EntitlementUnit_Bits :: EntitlementUnit
pattern EntitlementUnit_Bits_Second :: EntitlementUnit
pattern EntitlementUnit_Bytes :: EntitlementUnit
pattern EntitlementUnit_Bytes_Second :: EntitlementUnit
pattern EntitlementUnit_Count :: EntitlementUnit
pattern EntitlementUnit_Count_Second :: EntitlementUnit
pattern EntitlementUnit_Gigabits :: EntitlementUnit
pattern EntitlementUnit_Gigabits_Second :: EntitlementUnit
pattern EntitlementUnit_Gigabytes :: EntitlementUnit
pattern EntitlementUnit_Gigabytes_Second :: EntitlementUnit
pattern EntitlementUnit_Kilobits :: EntitlementUnit
pattern EntitlementUnit_Kilobits_Second :: EntitlementUnit
pattern EntitlementUnit_Kilobytes :: EntitlementUnit
pattern EntitlementUnit_Kilobytes_Second :: EntitlementUnit
pattern EntitlementUnit_Megabits :: EntitlementUnit
pattern EntitlementUnit_Megabits_Second :: EntitlementUnit
pattern EntitlementUnit_Megabytes :: EntitlementUnit
pattern EntitlementUnit_Megabytes_Second :: EntitlementUnit
pattern EntitlementUnit_Microseconds :: EntitlementUnit
pattern EntitlementUnit_Milliseconds :: EntitlementUnit
pattern EntitlementUnit_None :: EntitlementUnit
pattern EntitlementUnit_Percent :: EntitlementUnit
pattern EntitlementUnit_Seconds :: EntitlementUnit
pattern EntitlementUnit_Terabits :: EntitlementUnit
pattern EntitlementUnit_Terabits_Second :: EntitlementUnit
pattern EntitlementUnit_Terabytes :: EntitlementUnit
pattern EntitlementUnit_Terabytes_Second :: EntitlementUnit
newtype GrantStatus
GrantStatus' :: Text -> GrantStatus
[fromGrantStatus] :: GrantStatus -> Text
pattern GrantStatus_ACTIVE :: GrantStatus
pattern GrantStatus_DELETED :: GrantStatus
pattern GrantStatus_DISABLED :: GrantStatus
pattern GrantStatus_FAILED_WORKFLOW :: GrantStatus
pattern GrantStatus_PENDING_ACCEPT :: GrantStatus
pattern GrantStatus_PENDING_DELETE :: GrantStatus
pattern GrantStatus_PENDING_WORKFLOW :: GrantStatus
pattern GrantStatus_REJECTED :: GrantStatus
pattern GrantStatus_WORKFLOW_COMPLETED :: GrantStatus
newtype InventoryFilterCondition
InventoryFilterCondition' :: Text -> InventoryFilterCondition
[fromInventoryFilterCondition] :: InventoryFilterCondition -> Text
pattern InventoryFilterCondition_BEGINS_WITH :: InventoryFilterCondition
pattern InventoryFilterCondition_CONTAINS :: InventoryFilterCondition
pattern InventoryFilterCondition_EQUALS :: InventoryFilterCondition
pattern InventoryFilterCondition_NOT_EQUALS :: InventoryFilterCondition
newtype LicenseConfigurationStatus
LicenseConfigurationStatus' :: Text -> LicenseConfigurationStatus
[fromLicenseConfigurationStatus] :: LicenseConfigurationStatus -> Text
pattern LicenseConfigurationStatus_AVAILABLE :: LicenseConfigurationStatus
pattern LicenseConfigurationStatus_DISABLED :: LicenseConfigurationStatus
newtype LicenseConversionTaskStatus
LicenseConversionTaskStatus' :: Text -> LicenseConversionTaskStatus
[fromLicenseConversionTaskStatus] :: LicenseConversionTaskStatus -> Text
pattern LicenseConversionTaskStatus_FAILED :: LicenseConversionTaskStatus
pattern LicenseConversionTaskStatus_IN_PROGRESS :: LicenseConversionTaskStatus
pattern LicenseConversionTaskStatus_SUCCEEDED :: LicenseConversionTaskStatus
newtype LicenseCountingType
LicenseCountingType' :: Text -> LicenseCountingType
[fromLicenseCountingType] :: LicenseCountingType -> Text
pattern LicenseCountingType_Core :: LicenseCountingType
pattern LicenseCountingType_Instance :: LicenseCountingType
pattern LicenseCountingType_Socket :: LicenseCountingType
pattern LicenseCountingType_VCPU :: LicenseCountingType
newtype LicenseDeletionStatus
LicenseDeletionStatus' :: Text -> LicenseDeletionStatus
[fromLicenseDeletionStatus] :: LicenseDeletionStatus -> Text
pattern LicenseDeletionStatus_DELETED :: LicenseDeletionStatus
pattern LicenseDeletionStatus_PENDING_DELETE :: LicenseDeletionStatus
newtype LicenseStatus
LicenseStatus' :: Text -> LicenseStatus
[fromLicenseStatus] :: LicenseStatus -> Text
pattern LicenseStatus_AVAILABLE :: LicenseStatus
pattern LicenseStatus_DEACTIVATED :: LicenseStatus
pattern LicenseStatus_DELETED :: LicenseStatus
pattern LicenseStatus_EXPIRED :: LicenseStatus
pattern LicenseStatus_PENDING_AVAILABLE :: LicenseStatus
pattern LicenseStatus_PENDING_DELETE :: LicenseStatus
pattern LicenseStatus_SUSPENDED :: LicenseStatus
newtype ReceivedStatus
ReceivedStatus' :: Text -> ReceivedStatus
[fromReceivedStatus] :: ReceivedStatus -> Text
pattern ReceivedStatus_ACTIVE :: ReceivedStatus
pattern ReceivedStatus_DELETED :: ReceivedStatus
pattern ReceivedStatus_DISABLED :: ReceivedStatus
pattern ReceivedStatus_FAILED_WORKFLOW :: ReceivedStatus
pattern ReceivedStatus_PENDING_ACCEPT :: ReceivedStatus
pattern ReceivedStatus_PENDING_WORKFLOW :: ReceivedStatus
pattern ReceivedStatus_REJECTED :: ReceivedStatus
pattern ReceivedStatus_WORKFLOW_COMPLETED :: ReceivedStatus
newtype RenewType
RenewType' :: Text -> RenewType
[fromRenewType] :: RenewType -> Text
pattern RenewType_Monthly :: RenewType
pattern RenewType_None :: RenewType
pattern RenewType_Weekly :: RenewType
newtype ReportFrequencyType
ReportFrequencyType' :: Text -> ReportFrequencyType
[fromReportFrequencyType] :: ReportFrequencyType -> Text
pattern ReportFrequencyType_DAY :: ReportFrequencyType
pattern ReportFrequencyType_MONTH :: ReportFrequencyType
pattern ReportFrequencyType_WEEK :: ReportFrequencyType
newtype ReportType
ReportType' :: Text -> ReportType
[fromReportType] :: ReportType -> Text
pattern ReportType_LicenseConfigurationSummaryReport :: ReportType
pattern ReportType_LicenseConfigurationUsageReport :: ReportType
newtype ResourceType
ResourceType' :: Text -> ResourceType
[fromResourceType] :: ResourceType -> Text
pattern ResourceType_EC2_AMI :: ResourceType
pattern ResourceType_EC2_HOST :: ResourceType
pattern ResourceType_EC2_INSTANCE :: ResourceType
pattern ResourceType_RDS :: ResourceType
pattern ResourceType_SYSTEMS_MANAGER_MANAGED_INSTANCE :: ResourceType
newtype TokenType
TokenType' :: Text -> TokenType
[fromTokenType] :: TokenType -> Text
pattern TokenType_REFRESH_TOKEN :: TokenType

-- | Describes automated discovery.
--   
--   <i>See:</i> <a>newAutomatedDiscoveryInformation</a> smart constructor.
data AutomatedDiscoveryInformation
AutomatedDiscoveryInformation' :: Maybe POSIX -> AutomatedDiscoveryInformation

-- | Create a value of <a>AutomatedDiscoveryInformation</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastRunTime:AutomatedDiscoveryInformation'</a>,
--   <a>automatedDiscoveryInformation_lastRunTime</a> - Time that automated
--   discovery last ran.
newAutomatedDiscoveryInformation :: AutomatedDiscoveryInformation

-- | Details about a borrow configuration.
--   
--   <i>See:</i> <a>newBorrowConfiguration</a> smart constructor.
data BorrowConfiguration
BorrowConfiguration' :: Bool -> Int -> BorrowConfiguration

-- | Create a value of <a>BorrowConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:allowEarlyCheckIn:BorrowConfiguration'</a>,
--   <a>borrowConfiguration_allowEarlyCheckIn</a> - Indicates whether early
--   check-ins are allowed.
--   
--   <a>$sel:maxTimeToLiveInMinutes:BorrowConfiguration'</a>,
--   <a>borrowConfiguration_maxTimeToLiveInMinutes</a> - Maximum time for
--   the borrow configuration, in minutes.
newBorrowConfiguration :: Bool -> Int -> BorrowConfiguration

-- | Details about license consumption.
--   
--   <i>See:</i> <a>newConsumedLicenseSummary</a> smart constructor.
data ConsumedLicenseSummary
ConsumedLicenseSummary' :: Maybe ResourceType -> Maybe Integer -> ConsumedLicenseSummary

-- | Create a value of <a>ConsumedLicenseSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:ConsumedLicenseSummary'</a>,
--   <a>consumedLicenseSummary_resourceType</a> - Resource type of the
--   resource consuming a license.
--   
--   <a>$sel:consumedLicenses:ConsumedLicenseSummary'</a>,
--   <a>consumedLicenseSummary_consumedLicenses</a> - Number of licenses
--   consumed by the resource.
newConsumedLicenseSummary :: ConsumedLicenseSummary

-- | Details about a consumption configuration.
--   
--   <i>See:</i> <a>newConsumptionConfiguration</a> smart constructor.
data ConsumptionConfiguration
ConsumptionConfiguration' :: Maybe BorrowConfiguration -> Maybe ProvisionalConfiguration -> Maybe RenewType -> ConsumptionConfiguration

-- | Create a value of <a>ConsumptionConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:borrowConfiguration:ConsumptionConfiguration'</a>,
--   <a>consumptionConfiguration_borrowConfiguration</a> - Details about a
--   borrow configuration.
--   
--   <a>$sel:provisionalConfiguration:ConsumptionConfiguration'</a>,
--   <a>consumptionConfiguration_provisionalConfiguration</a> - Details
--   about a provisional configuration.
--   
--   <a>$sel:renewType:ConsumptionConfiguration'</a>,
--   <a>consumptionConfiguration_renewType</a> - Renewal frequency.
newConsumptionConfiguration :: ConsumptionConfiguration

-- | Describes a time range, in ISO8601-UTC format.
--   
--   <i>See:</i> <a>newDatetimeRange</a> smart constructor.
data DatetimeRange
DatetimeRange' :: Maybe Text -> Text -> DatetimeRange

-- | Create a value of <a>DatetimeRange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:end:DatetimeRange'</a>, <a>datetimeRange_end</a> - End of the
--   time range.
--   
--   <a>$sel:begin:DatetimeRange'</a>, <a>datetimeRange_begin</a> - Start
--   of the time range.
newDatetimeRange :: Text -> DatetimeRange

-- | Describes a resource entitled for use with a license.
--   
--   <i>See:</i> <a>newEntitlement</a> smart constructor.
data Entitlement
Entitlement' :: Maybe Integer -> Maybe Text -> Maybe Bool -> Maybe Bool -> Text -> EntitlementUnit -> Entitlement

-- | Create a value of <a>Entitlement</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:maxCount:Entitlement'</a>, <a>entitlement_maxCount</a> -
--   Maximum entitlement count. Use if the unit is not None.
--   
--   <a>$sel:value:Entitlement'</a>, <a>entitlement_value</a> - Entitlement
--   resource. Use only if the unit is None.
--   
--   <a>$sel:overage:Entitlement'</a>, <a>entitlement_overage</a> -
--   Indicates whether overages are allowed.
--   
--   <a>$sel:allowCheckIn:Entitlement'</a>, <a>entitlement_allowCheckIn</a>
--   - Indicates whether check-ins are allowed.
--   
--   <a>$sel:name:Entitlement'</a>, <a>entitlement_name</a> - Entitlement
--   name.
--   
--   <a>$sel:unit:Entitlement'</a>, <a>entitlement_unit</a> - Entitlement
--   unit.
newEntitlement :: Text -> EntitlementUnit -> Entitlement

-- | Data associated with an entitlement resource.
--   
--   <i>See:</i> <a>newEntitlementData</a> smart constructor.
data EntitlementData
EntitlementData' :: Maybe Text -> Text -> EntitlementDataUnit -> EntitlementData

-- | Create a value of <a>EntitlementData</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:EntitlementData'</a>, <a>entitlementData_value</a> -
--   Entitlement data value.
--   
--   <a>$sel:name:EntitlementData'</a>, <a>entitlementData_name</a> -
--   Entitlement data name.
--   
--   <a>$sel:unit:EntitlementData'</a>, <a>entitlementData_unit</a> -
--   Entitlement data unit.
newEntitlementData :: Text -> EntitlementDataUnit -> EntitlementData

-- | Usage associated with an entitlement resource.
--   
--   <i>See:</i> <a>newEntitlementUsage</a> smart constructor.
data EntitlementUsage
EntitlementUsage' :: Maybe Text -> Text -> Text -> EntitlementDataUnit -> EntitlementUsage

-- | Create a value of <a>EntitlementUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:maxCount:EntitlementUsage'</a>,
--   <a>entitlementUsage_maxCount</a> - Maximum entitlement usage count.
--   
--   <a>$sel:name:EntitlementUsage'</a>, <a>entitlementUsage_name</a> -
--   Entitlement usage name.
--   
--   <a>$sel:consumedValue:EntitlementUsage'</a>,
--   <a>entitlementUsage_consumedValue</a> - Resource usage consumed.
--   
--   <a>$sel:unit:EntitlementUsage'</a>, <a>entitlementUsage_unit</a> -
--   Entitlement usage unit.
newEntitlementUsage :: Text -> Text -> EntitlementDataUnit -> EntitlementUsage

-- | A filter name and value pair that is used to return more specific
--   results from a describe operation. Filters can be used to match a set
--   of resources by specific criteria, such as tags, attributes, or IDs.
--   
--   <i>See:</i> <a>newFilter</a> smart constructor.
data Filter
Filter' :: Maybe [Text] -> Maybe Text -> Filter

-- | Create a value of <a>Filter</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:values:Filter'</a>, <a>filter_values</a> - Filter values.
--   Filter values are case-sensitive.
--   
--   <a>$sel:name:Filter'</a>, <a>filter_name</a> - Name of the filter.
--   Filter names are case-sensitive.
newFilter :: Filter

-- | Describes a grant.
--   
--   <i>See:</i> <a>newGrant</a> smart constructor.
data Grant
Grant' :: Maybe Text -> Text -> Text -> Text -> Text -> Text -> Text -> GrantStatus -> Text -> NonEmpty AllowedOperation -> Grant

-- | Create a value of <a>Grant</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statusReason:Grant'</a>, <a>grant_statusReason</a> - Grant
--   status reason.
--   
--   <a>$sel:grantArn:Grant'</a>, <a>grant_grantArn</a> - Amazon Resource
--   Name (ARN) of the grant.
--   
--   <a>$sel:grantName:Grant'</a>, <a>grant_grantName</a> - Grant name.
--   
--   <a>$sel:parentArn:Grant'</a>, <a>grant_parentArn</a> - Parent ARN.
--   
--   <a>$sel:licenseArn:Grant'</a>, <a>grant_licenseArn</a> - License ARN.
--   
--   <a>$sel:granteePrincipalArn:Grant'</a>,
--   <a>grant_granteePrincipalArn</a> - The grantee principal ARN.
--   
--   <a>$sel:homeRegion:Grant'</a>, <a>grant_homeRegion</a> - Home Region
--   of the grant.
--   
--   <a>$sel:grantStatus:Grant'</a>, <a>grant_grantStatus</a> - Grant
--   status.
--   
--   <a>$sel:version:Grant'</a>, <a>grant_version</a> - Grant version.
--   
--   <a>$sel:grantedOperations:Grant'</a>, <a>grant_grantedOperations</a> -
--   Granted operations.
newGrant :: Text -> Text -> Text -> Text -> Text -> Text -> GrantStatus -> Text -> NonEmpty AllowedOperation -> Grant

-- | Describes a license that is granted to a grantee.
--   
--   <i>See:</i> <a>newGrantedLicense</a> smart constructor.
data GrantedLicense
GrantedLicense' :: Maybe LicenseStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe ReceivedMetadata -> Maybe Text -> Maybe [Entitlement] -> Maybe DatetimeRange -> Maybe ConsumptionConfiguration -> Maybe Text -> Maybe IssuerDetails -> Maybe Text -> Maybe [Metadata] -> Maybe Text -> GrantedLicense

-- | Create a value of <a>GrantedLicense</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:GrantedLicense'</a>, <a>grantedLicense_status</a> -
--   Granted license status.
--   
--   <a>$sel:productName:GrantedLicense'</a>,
--   <a>grantedLicense_productName</a> - Product name.
--   
--   <a>$sel:licenseName:GrantedLicense'</a>,
--   <a>grantedLicense_licenseName</a> - License name.
--   
--   <a>$sel:productSKU:GrantedLicense'</a>,
--   <a>grantedLicense_productSKU</a> - Product SKU.
--   
--   <a>$sel:homeRegion:GrantedLicense'</a>,
--   <a>grantedLicense_homeRegion</a> - Home Region of the granted license.
--   
--   <a>$sel:receivedMetadata:GrantedLicense'</a>,
--   <a>grantedLicense_receivedMetadata</a> - Granted license received
--   metadata.
--   
--   <a>$sel:version:GrantedLicense'</a>, <a>grantedLicense_version</a> -
--   Version of the granted license.
--   
--   <a>$sel:entitlements:GrantedLicense'</a>,
--   <a>grantedLicense_entitlements</a> - License entitlements.
--   
--   <a>$sel:validity:GrantedLicense'</a>, <a>grantedLicense_validity</a> -
--   Date and time range during which the granted license is valid, in
--   ISO8601-UTC format.
--   
--   <a>$sel:consumptionConfiguration:GrantedLicense'</a>,
--   <a>grantedLicense_consumptionConfiguration</a> - Configuration for
--   consumption of the license.
--   
--   <a>$sel:beneficiary:GrantedLicense'</a>,
--   <a>grantedLicense_beneficiary</a> - Granted license beneficiary.
--   
--   <a>$sel:issuer:GrantedLicense'</a>, <a>grantedLicense_issuer</a> -
--   Granted license issuer.
--   
--   <a>$sel:licenseArn:GrantedLicense'</a>,
--   <a>grantedLicense_licenseArn</a> - Amazon Resource Name (ARN) of the
--   license.
--   
--   <a>$sel:licenseMetadata:GrantedLicense'</a>,
--   <a>grantedLicense_licenseMetadata</a> - Granted license metadata.
--   
--   <a>$sel:createTime:GrantedLicense'</a>,
--   <a>grantedLicense_createTime</a> - Creation time of the granted
--   license.
newGrantedLicense :: GrantedLicense

-- | An inventory filter.
--   
--   <i>See:</i> <a>newInventoryFilter</a> smart constructor.
data InventoryFilter
InventoryFilter' :: Maybe Text -> Text -> InventoryFilterCondition -> InventoryFilter

-- | Create a value of <a>InventoryFilter</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:InventoryFilter'</a>, <a>inventoryFilter_value</a> -
--   Value of the filter.
--   
--   <a>$sel:name:InventoryFilter'</a>, <a>inventoryFilter_name</a> - Name
--   of the filter.
--   
--   <a>$sel:condition:InventoryFilter'</a>,
--   <a>inventoryFilter_condition</a> - Condition of the filter.
newInventoryFilter :: Text -> InventoryFilterCondition -> InventoryFilter

-- | Details about the issuer of a license.
--   
--   <i>See:</i> <a>newIssuer</a> smart constructor.
data Issuer
Issuer' :: Maybe Text -> Text -> Issuer

-- | Create a value of <a>Issuer</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:signKey:Issuer'</a>, <a>issuer_signKey</a> - Asymmetric KMS
--   key from Key Management Service. The KMS key must have a key usage of
--   sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
--   
--   <a>$sel:name:Issuer'</a>, <a>issuer_name</a> - Issuer name.
newIssuer :: Text -> Issuer

-- | Details associated with the issuer of a license.
--   
--   <i>See:</i> <a>newIssuerDetails</a> smart constructor.
data IssuerDetails
IssuerDetails' :: Maybe Text -> Maybe Text -> Maybe Text -> IssuerDetails

-- | Create a value of <a>IssuerDetails</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyFingerprint:IssuerDetails'</a>,
--   <a>issuerDetails_keyFingerprint</a> - Issuer key fingerprint.
--   
--   <a>$sel:signKey:IssuerDetails'</a>, <a>issuerDetails_signKey</a> -
--   Asymmetric KMS key from Key Management Service. The KMS key must have
--   a key usage of sign and verify, and support the RSASSA-PSS SHA-256
--   signing algorithm.
--   
--   <a>$sel:name:IssuerDetails'</a>, <a>issuerDetails_name</a> - Issuer
--   name.
newIssuerDetails :: IssuerDetails

-- | Software license that is managed in License Manager.
--   
--   <i>See:</i> <a>newLicense</a> smart constructor.
data License
License' :: Maybe LicenseStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe [Entitlement] -> Maybe DatetimeRange -> Maybe ConsumptionConfiguration -> Maybe Text -> Maybe IssuerDetails -> Maybe Text -> Maybe [Metadata] -> Maybe Text -> License

-- | Create a value of <a>License</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:License'</a>, <a>license_status</a> - License status.
--   
--   <a>$sel:productName:License'</a>, <a>license_productName</a> - Product
--   name.
--   
--   <a>$sel:licenseName:License'</a>, <a>license_licenseName</a> - License
--   name.
--   
--   <a>$sel:productSKU:License'</a>, <a>license_productSKU</a> - Product
--   SKU.
--   
--   <a>$sel:homeRegion:License'</a>, <a>license_homeRegion</a> - Home
--   Region of the license.
--   
--   <a>$sel:version:License'</a>, <a>license_version</a> - License
--   version.
--   
--   <a>$sel:entitlements:License'</a>, <a>license_entitlements</a> -
--   License entitlements.
--   
--   <a>$sel:validity:License'</a>, <a>license_validity</a> - Date and time
--   range during which the license is valid, in ISO8601-UTC format.
--   
--   <a>$sel:consumptionConfiguration:License'</a>,
--   <a>license_consumptionConfiguration</a> - Configuration for
--   consumption of the license.
--   
--   <a>$sel:beneficiary:License'</a>, <a>license_beneficiary</a> - License
--   beneficiary.
--   
--   <a>$sel:issuer:License'</a>, <a>license_issuer</a> - License issuer.
--   
--   <a>$sel:licenseArn:License'</a>, <a>license_licenseArn</a> - Amazon
--   Resource Name (ARN) of the license.
--   
--   <a>$sel:licenseMetadata:License'</a>, <a>license_licenseMetadata</a> -
--   License metadata.
--   
--   <a>$sel:createTime:License'</a>, <a>license_createTime</a> - License
--   creation time.
newLicense :: License

-- | A license configuration is an abstraction of a customer license
--   agreement that can be consumed and enforced by License Manager.
--   Components include specifications for the license type (licensing by
--   instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy,
--   Dedicated Instance, Dedicated Host, or all of these), host affinity
--   (how long a VM must be associated with a host), and the number of
--   licenses purchased and used.
--   
--   <i>See:</i> <a>newLicenseConfiguration</a> smart constructor.
data LicenseConfiguration
LicenseConfiguration' :: Maybe Text -> Maybe Text -> Maybe [ConsumedLicenseSummary] -> Maybe Integer -> Maybe [ManagedResourceSummary] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [ProductInformation] -> Maybe LicenseCountingType -> Maybe AutomatedDiscoveryInformation -> Maybe Integer -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Text -> LicenseConfiguration

-- | Create a value of <a>LicenseConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_status</a> - Status of the license
--   configuration.
--   
--   <a>$sel:ownerAccountId:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_ownerAccountId</a> - Account ID of the license
--   configuration's owner.
--   
--   <a>$sel:consumedLicenseSummaryList:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_consumedLicenseSummaryList</a> - Summaries for
--   licenses consumed by various resources.
--   
--   <a>$sel:licenseCount:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseCount</a> - Number of licenses managed
--   by the license configuration.
--   
--   <a>$sel:managedResourceSummaryList:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_managedResourceSummaryList</a> - Summaries for
--   managed resources.
--   
--   <a>$sel:name:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_name</a> - Name of the license configuration.
--   
--   <a>$sel:licenseCountHardLimit:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseCountHardLimit</a> - Number of
--   available licenses as a hard limit.
--   
--   <a>$sel:disassociateWhenNotFound:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_disassociateWhenNotFound</a> - When true,
--   disassociates a resource when software is uninstalled.
--   
--   <a>$sel:productInformationList:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_productInformationList</a> - Product
--   information.
--   
--   <a>$sel:licenseCountingType:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseCountingType</a> - Dimension to use to
--   track the license inventory.
--   
--   <a>$sel:automatedDiscoveryInformation:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_automatedDiscoveryInformation</a> - Automated
--   discovery information.
--   
--   <a>$sel:consumedLicenses:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_consumedLicenses</a> - Number of licenses
--   consumed.
--   
--   <a>$sel:licenseRules:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseRules</a> - License rules.
--   
--   <a>$sel:licenseConfigurationId:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseConfigurationId</a> - Unique ID of the
--   license configuration.
--   
--   <a>$sel:description:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_description</a> - Description of the license
--   configuration.
--   
--   <a>$sel:licenseConfigurationArn:LicenseConfiguration'</a>,
--   <a>licenseConfiguration_licenseConfigurationArn</a> - Amazon Resource
--   Name (ARN) of the license configuration.
newLicenseConfiguration :: LicenseConfiguration

-- | Describes an association with a license configuration.
--   
--   <i>See:</i> <a>newLicenseConfigurationAssociation</a> smart
--   constructor.
data LicenseConfigurationAssociation
LicenseConfigurationAssociation' :: Maybe ResourceType -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> LicenseConfigurationAssociation

-- | Create a value of <a>LicenseConfigurationAssociation</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_resourceType</a> - Type of server
--   resource.
--   
--   <a>$sel:amiAssociationScope:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_amiAssociationScope</a> - Scope of
--   AMI associations. The possible value is <tt>cross-account</tt>.
--   
--   <a>$sel:associationTime:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_associationTime</a> - Time when the
--   license configuration was associated with the resource.
--   
--   <a>$sel:resourceArn:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_resourceArn</a> - Amazon Resource
--   Name (ARN) of the resource.
--   
--   <a>$sel:resourceOwnerId:LicenseConfigurationAssociation'</a>,
--   <a>licenseConfigurationAssociation_resourceOwnerId</a> - ID of the
--   Amazon Web Services account that owns the resource consuming licenses.
newLicenseConfigurationAssociation :: LicenseConfigurationAssociation

-- | Details about the usage of a resource associated with a license
--   configuration.
--   
--   <i>See:</i> <a>newLicenseConfigurationUsage</a> smart constructor.
data LicenseConfigurationUsage
LicenseConfigurationUsage' :: Maybe ResourceType -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Integer -> Maybe Text -> LicenseConfigurationUsage

-- | Create a value of <a>LicenseConfigurationUsage</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_resourceType</a> - Type of resource.
--   
--   <a>$sel:resourceStatus:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_resourceStatus</a> - Status of the
--   resource.
--   
--   <a>$sel:associationTime:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_associationTime</a> - Time when the
--   license configuration was initially associated with the resource.
--   
--   <a>$sel:resourceArn:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_resourceArn</a> - Amazon Resource Name
--   (ARN) of the resource.
--   
--   <a>$sel:consumedLicenses:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_consumedLicenses</a> - Number of licenses
--   consumed by the resource.
--   
--   <a>$sel:resourceOwnerId:LicenseConfigurationUsage'</a>,
--   <a>licenseConfigurationUsage_resourceOwnerId</a> - ID of the account
--   that owns the resource.
newLicenseConfigurationUsage :: LicenseConfigurationUsage

-- | Information about a license type conversion task.
--   
--   <i>See:</i> <a>newLicenseConversionContext</a> smart constructor.
data LicenseConversionContext
LicenseConversionContext' :: Maybe Text -> LicenseConversionContext

-- | Create a value of <a>LicenseConversionContext</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:usageOperation:LicenseConversionContext'</a>,
--   <a>licenseConversionContext_usageOperation</a> - The Usage operation
--   value that corresponds to the license type you are converting your
--   resource from. For more information about which platforms correspond
--   to which usage operation values see <a>Sample data: usage operation by
--   platform</a>
newLicenseConversionContext :: LicenseConversionContext

-- | Information about a license type conversion task.
--   
--   <i>See:</i> <a>newLicenseConversionTask</a> smart constructor.
data LicenseConversionTask
LicenseConversionTask' :: Maybe LicenseConversionTaskStatus -> Maybe POSIX -> Maybe LicenseConversionContext -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe POSIX -> Maybe LicenseConversionContext -> LicenseConversionTask

-- | Create a value of <a>LicenseConversionTask</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_status</a> - The status of the conversion
--   task.
--   
--   <a>$sel:startTime:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_startTime</a> - The time the conversion task
--   was started at.
--   
--   <a>$sel:destinationLicenseContext:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_destinationLicenseContext</a> - Information
--   about the license type this conversion task converted to.
--   
--   <a>$sel:licenseConversionTaskId:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_licenseConversionTaskId</a> - The ID of the
--   license type conversion task.
--   
--   <a>$sel:resourceArn:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_resourceArn</a> - The Amazon Resource Name
--   (ARN) of the resource associated with the license type conversion
--   task.
--   
--   <a>$sel:statusMessage:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_statusMessage</a> - The status message for
--   the conversion task.
--   
--   <a>$sel:endTime:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_endTime</a> - The time the conversion task
--   was completed.
--   
--   <a>$sel:licenseConversionTime:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_licenseConversionTime</a> - The time the
--   usage operation value of the resource was changed.
--   
--   <a>$sel:sourceLicenseContext:LicenseConversionTask'</a>,
--   <a>licenseConversionTask_sourceLicenseContext</a> - Information about
--   the license type this conversion task converted from.
newLicenseConversionTask :: LicenseConversionTask

-- | Describes the failure of a license operation.
--   
--   <i>See:</i> <a>newLicenseOperationFailure</a> smart constructor.
data LicenseOperationFailure
LicenseOperationFailure' :: Maybe ResourceType -> Maybe Text -> Maybe Text -> Maybe [Metadata] -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Text -> LicenseOperationFailure

-- | Create a value of <a>LicenseOperationFailure</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_resourceType</a> - Resource type.
--   
--   <a>$sel:operationRequestedBy:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_operationRequestedBy</a> - The requester is
--   "License Manager Automated Discovery".
--   
--   <a>$sel:resourceArn:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_resourceArn</a> - Amazon Resource Name
--   (ARN) of the resource.
--   
--   <a>$sel:metadataList:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_metadataList</a> - Reserved.
--   
--   <a>$sel:operationName:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_operationName</a> - Name of the operation.
--   
--   <a>$sel:failureTime:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_failureTime</a> - Failure time.
--   
--   <a>$sel:errorMessage:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_errorMessage</a> - Error message.
--   
--   <a>$sel:resourceOwnerId:LicenseOperationFailure'</a>,
--   <a>licenseOperationFailure_resourceOwnerId</a> - ID of the Amazon Web
--   Services account that owns the resource.
newLicenseOperationFailure :: LicenseOperationFailure

-- | Details for associating a license configuration with a resource.
--   
--   <i>See:</i> <a>newLicenseSpecification</a> smart constructor.
data LicenseSpecification
LicenseSpecification' :: Maybe Text -> Text -> LicenseSpecification

-- | Create a value of <a>LicenseSpecification</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:amiAssociationScope:LicenseSpecification'</a>,
--   <a>licenseSpecification_amiAssociationScope</a> - Scope of AMI
--   associations. The possible value is <tt>cross-account</tt>.
--   
--   <a>$sel:licenseConfigurationArn:LicenseSpecification'</a>,
--   <a>licenseSpecification_licenseConfigurationArn</a> - Amazon Resource
--   Name (ARN) of the license configuration.
newLicenseSpecification :: Text -> LicenseSpecification

-- | Describes the entitlement usage associated with a license.
--   
--   <i>See:</i> <a>newLicenseUsage</a> smart constructor.
data LicenseUsage
LicenseUsage' :: Maybe [EntitlementUsage] -> LicenseUsage

-- | Create a value of <a>LicenseUsage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:entitlementUsages:LicenseUsage'</a>,
--   <a>licenseUsage_entitlementUsages</a> - License entitlement usages.
newLicenseUsage :: LicenseUsage

-- | Summary information about a managed resource.
--   
--   <i>See:</i> <a>newManagedResourceSummary</a> smart constructor.
data ManagedResourceSummary
ManagedResourceSummary' :: Maybe Integer -> Maybe ResourceType -> ManagedResourceSummary

-- | Create a value of <a>ManagedResourceSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:associationCount:ManagedResourceSummary'</a>,
--   <a>managedResourceSummary_associationCount</a> - Number of resources
--   associated with licenses.
--   
--   <a>$sel:resourceType:ManagedResourceSummary'</a>,
--   <a>managedResourceSummary_resourceType</a> - Type of resource
--   associated with a license.
newManagedResourceSummary :: ManagedResourceSummary

-- | Describes key/value pairs.
--   
--   <i>See:</i> <a>newMetadata</a> smart constructor.
data Metadata
Metadata' :: Maybe Text -> Maybe Text -> Metadata

-- | Create a value of <a>Metadata</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Metadata'</a>, <a>metadata_value</a> - The value.
--   
--   <a>$sel:name:Metadata'</a>, <a>metadata_name</a> - The key name.
newMetadata :: Metadata

-- | Configuration information for Organizations.
--   
--   <i>See:</i> <a>newOrganizationConfiguration</a> smart constructor.
data OrganizationConfiguration
OrganizationConfiguration' :: Bool -> OrganizationConfiguration

-- | Create a value of <a>OrganizationConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enableIntegration:OrganizationConfiguration'</a>,
--   <a>organizationConfiguration_enableIntegration</a> - Enables
--   Organizations integration.
newOrganizationConfiguration :: Bool -> OrganizationConfiguration

-- | Describes product information for a license configuration.
--   
--   <i>See:</i> <a>newProductInformation</a> smart constructor.
data ProductInformation
ProductInformation' :: Text -> [ProductInformationFilter] -> ProductInformation

-- | Create a value of <a>ProductInformation</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceType:ProductInformation'</a>,
--   <a>productInformation_resourceType</a> - Resource type. The possible
--   values are <tt>SSM_MANAGED</tt> | <tt>RDS</tt>.
--   
--   <a>$sel:productInformationFilterList:ProductInformation'</a>,
--   <a>productInformation_productInformationFilterList</a> - A Product
--   information filter consists of a
--   <tt>ProductInformationFilterComparator</tt> which is a logical
--   operator, a <tt>ProductInformationFilterName</tt> which specifies the
--   type of filter being declared, and a
--   <tt>ProductInformationFilterValue</tt> that specifies the value to
--   filter on.
--   
--   Accepted values for <tt>ProductInformationFilterName</tt> are listed
--   here along with descriptions and valid options for
--   <tt>ProductInformationFilterComparator</tt>.
--   
--   The following filters and are supported when the resource type is
--   <tt>SSM_MANAGED</tt>:
--   
--   <ul>
--   <li><tt>Application Name</tt> - The name of the application. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Publisher</tt> - The publisher of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Application Version</tt> - The version of the application.
--   Logical operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Name</tt> - The name of the platform. Logical
--   operator is <tt>EQUALS</tt>.</li>
--   <li><tt>Platform Type</tt> - The platform type. Logical operator is
--   <tt>EQUALS</tt>.</li>
--   <li><tt>Tag:key</tt> - The key of a tag attached to an Amazon Web
--   Services resource you wish to exclude from automated discovery.
--   Logical operator is <tt>NOT_EQUALS</tt>. The key for your tag must be
--   appended to <tt>Tag:</tt> following the example:
--   <tt>Tag:name-of-your-key</tt>. <tt>ProductInformationFilterValue</tt>
--   is optional if you are not using values for the key.</li>
--   <li><tt>AccountId</tt> - The 12-digit ID of an Amazon Web Services
--   account you wish to exclude from automated discovery. Logical operator
--   is <tt>NOT_EQUALS</tt>.</li>
--   <li><tt>License Included</tt> - The type of license included. Logical
--   operators are <tt>EQUALS</tt> and <tt>NOT_EQUALS</tt>. Possible values
--   are: <tt>sql-server-enterprise</tt> | <tt>sql-server-standard</tt> |
--   <tt>sql-server-web</tt> | <tt>windows-server-datacenter</tt>.</li>
--   </ul>
--   
--   The following filters and logical operators are supported when the
--   resource type is <tt>RDS</tt>:
--   
--   <ul>
--   <li><tt>Engine Edition</tt> - The edition of the database engine.
--   Logical operator is <tt>EQUALS</tt>. Possible values are:
--   <tt>oracle-ee</tt> | <tt>oracle-se</tt> | <tt>oracle-se1</tt> |
--   <tt>oracle-se2</tt>.</li>
--   <li><tt>License Pack</tt> - The license pack. Logical operator is
--   <tt>EQUALS</tt>. Possible values are: <tt>data guard</tt> |
--   <tt>diagnostic pack sqlt</tt> | <tt>tuning pack sqlt</tt> |
--   <tt>ols</tt> | <tt>olap</tt>.</li>
--   </ul>
newProductInformation :: Text -> ProductInformation

-- | Describes product information filters.
--   
--   <i>See:</i> <a>newProductInformationFilter</a> smart constructor.
data ProductInformationFilter
ProductInformationFilter' :: Maybe [Text] -> Text -> Text -> ProductInformationFilter

-- | Create a value of <a>ProductInformationFilter</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:productInformationFilterValue:ProductInformationFilter'</a>,
--   <a>productInformationFilter_productInformationFilterValue</a> - Filter
--   value.
--   
--   <a>$sel:productInformationFilterName:ProductInformationFilter'</a>,
--   <a>productInformationFilter_productInformationFilterName</a> - Filter
--   name.
--   
--   
--   <a>$sel:productInformationFilterComparator:ProductInformationFilter'</a>,
--   <a>productInformationFilter_productInformationFilterComparator</a> -
--   Logical operator.
newProductInformationFilter :: Text -> Text -> ProductInformationFilter

-- | Details about a provisional configuration.
--   
--   <i>See:</i> <a>newProvisionalConfiguration</a> smart constructor.
data ProvisionalConfiguration
ProvisionalConfiguration' :: Int -> ProvisionalConfiguration

-- | Create a value of <a>ProvisionalConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:maxTimeToLiveInMinutes:ProvisionalConfiguration'</a>,
--   <a>provisionalConfiguration_maxTimeToLiveInMinutes</a> - Maximum time
--   for the provisional configuration, in minutes.
newProvisionalConfiguration :: Int -> ProvisionalConfiguration

-- | Metadata associated with received licenses and grants.
--   
--   <i>See:</i> <a>newReceivedMetadata</a> smart constructor.
data ReceivedMetadata
ReceivedMetadata' :: Maybe ReceivedStatus -> Maybe (NonEmpty AllowedOperation) -> Maybe Text -> ReceivedMetadata

-- | Create a value of <a>ReceivedMetadata</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:receivedStatus:ReceivedMetadata'</a>,
--   <a>receivedMetadata_receivedStatus</a> - Received status.
--   
--   <a>$sel:allowedOperations:ReceivedMetadata'</a>,
--   <a>receivedMetadata_allowedOperations</a> - Allowed operations.
--   
--   <a>$sel:receivedStatusReason:ReceivedMetadata'</a>,
--   <a>receivedMetadata_receivedStatusReason</a> - Received status reason.
newReceivedMetadata :: ReceivedMetadata

-- | Details of the license configuration that this generator reports on.
--   
--   <i>See:</i> <a>newReportContext</a> smart constructor.
data ReportContext
ReportContext' :: [Text] -> ReportContext

-- | Create a value of <a>ReportContext</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:licenseConfigurationArns:ReportContext'</a>,
--   <a>reportContext_licenseConfigurationArns</a> - Amazon Resource Name
--   (ARN) of the license configuration that this generator reports on.
newReportContext :: ReportContext

-- | Details about how frequently reports are generated.
--   
--   <i>See:</i> <a>newReportFrequency</a> smart constructor.
data ReportFrequency
ReportFrequency' :: Maybe ReportFrequencyType -> Maybe Int -> ReportFrequency

-- | Create a value of <a>ReportFrequency</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:period:ReportFrequency'</a>, <a>reportFrequency_period</a> -
--   Time period between each report. The period can be daily, weekly, or
--   monthly.
--   
--   <a>$sel:value:ReportFrequency'</a>, <a>reportFrequency_value</a> -
--   Number of times within the frequency period that a report is
--   generated. The only supported value is <tt>1</tt>.
newReportFrequency :: ReportFrequency

-- | Describe the details of a report generator.
--   
--   <i>See:</i> <a>newReportGenerator</a> smart constructor.
data ReportGenerator
ReportGenerator' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe ReportFrequency -> Maybe S3Location -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe [ReportType] -> Maybe Text -> Maybe [Tag] -> Maybe ReportContext -> ReportGenerator

-- | Create a value of <a>ReportGenerator</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastReportGenerationTime:ReportGenerator'</a>,
--   <a>reportGenerator_lastReportGenerationTime</a> - Time the last report
--   was generated at.
--   
--   <a>$sel:lastRunFailureReason:ReportGenerator'</a>,
--   <a>reportGenerator_lastRunFailureReason</a> - Failure message for the
--   last report generation attempt.
--   
--   <a>$sel:lastRunStatus:ReportGenerator'</a>,
--   <a>reportGenerator_lastRunStatus</a> - Status of the last report
--   generation attempt.
--   
--   <a>$sel:reportGeneratorName:ReportGenerator'</a>,
--   <a>reportGenerator_reportGeneratorName</a> - Name of the report
--   generator.
--   
--   <a>$sel:reportFrequency:ReportGenerator'</a>,
--   <a>reportGenerator_reportFrequency</a> - Details about how frequently
--   reports are generated.
--   
--   <a>$sel:s3Location:ReportGenerator'</a>,
--   <a>reportGenerator_s3Location</a> - Details of the S3 bucket that
--   report generator reports are published to.
--   
--   <a>$sel:licenseManagerReportGeneratorArn:ReportGenerator'</a>,
--   <a>reportGenerator_licenseManagerReportGeneratorArn</a> - Amazon
--   Resource Name (ARN) of the report generator.
--   
--   <a>$sel:reportCreatorAccount:ReportGenerator'</a>,
--   <a>reportGenerator_reportCreatorAccount</a> - The Amazon Web Services
--   account ID used to create the report generator.
--   
--   <a>$sel:description:ReportGenerator'</a>,
--   <a>reportGenerator_description</a> - Description of the report
--   generator.
--   
--   <a>$sel:reportType:ReportGenerator'</a>,
--   <a>reportGenerator_reportType</a> - Type of reports that are
--   generated.
--   
--   <a>$sel:createTime:ReportGenerator'</a>,
--   <a>reportGenerator_createTime</a> - Time the report was created.
--   
--   <a>$sel:tags:ReportGenerator'</a>, <a>reportGenerator_tags</a> - Tags
--   associated with the report generator.
--   
--   <a>$sel:reportContext:ReportGenerator'</a>,
--   <a>reportGenerator_reportContext</a> - License configuration type for
--   this generator.
newReportGenerator :: ReportGenerator

-- | Details about a resource.
--   
--   <i>See:</i> <a>newResourceInventory</a> smart constructor.
data ResourceInventory
ResourceInventory' :: Maybe Text -> Maybe Text -> Maybe ResourceType -> Maybe Text -> Maybe Text -> Maybe Text -> ResourceInventory

-- | Create a value of <a>ResourceInventory</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:platform:ResourceInventory'</a>,
--   <a>resourceInventory_platform</a> - Platform of the resource.
--   
--   <a>$sel:resourceId:ResourceInventory'</a>,
--   <a>resourceInventory_resourceId</a> - ID of the resource.
--   
--   <a>$sel:resourceType:ResourceInventory'</a>,
--   <a>resourceInventory_resourceType</a> - Type of resource.
--   
--   <a>$sel:platformVersion:ResourceInventory'</a>,
--   <a>resourceInventory_platformVersion</a> - Platform version of the
--   resource in the inventory.
--   
--   <a>$sel:resourceArn:ResourceInventory'</a>,
--   <a>resourceInventory_resourceArn</a> - Amazon Resource Name (ARN) of
--   the resource.
--   
--   <a>$sel:resourceOwningAccountId:ResourceInventory'</a>,
--   <a>resourceInventory_resourceOwningAccountId</a> - ID of the account
--   that owns the resource.
newResourceInventory :: ResourceInventory

-- | Details of the S3 bucket that report generator reports are published
--   to.
--   
--   <i>See:</i> <a>newS3Location</a> smart constructor.
data S3Location
S3Location' :: Maybe Text -> Maybe Text -> S3Location

-- | Create a value of <a>S3Location</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bucket:S3Location'</a>, <a>s3Location_bucket</a> - Name of the
--   S3 bucket reports are published to.
--   
--   <a>$sel:keyPrefix:S3Location'</a>, <a>s3Location_keyPrefix</a> -
--   Prefix of the S3 bucket reports are published to.
newS3Location :: S3Location

-- | Details about a tag for a license configuration.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - Tag value.
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - Tag key.
newTag :: Tag

-- | Describes a token.
--   
--   <i>See:</i> <a>newTokenData</a> smart constructor.
data TokenData
TokenData' :: Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Text -> TokenData

-- | Create a value of <a>TokenData</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:TokenData'</a>, <a>tokenData_status</a> - Token status.
--   The possible values are <tt>AVAILABLE</tt> and <tt>DELETED</tt>.
--   
--   <a>$sel:tokenId:TokenData'</a>, <a>tokenData_tokenId</a> - Token ID.
--   
--   <a>$sel:tokenProperties:TokenData'</a>,
--   <a>tokenData_tokenProperties</a> - Data specified by the caller.
--   
--   <a>$sel:roleArns:TokenData'</a>, <a>tokenData_roleArns</a> - Amazon
--   Resource Names (ARN) of the roles included in the token.
--   
--   <a>$sel:tokenType:TokenData'</a>, <a>tokenData_tokenType</a> - Type of
--   token generated. The supported value is <tt>REFRESH_TOKEN</tt>.
--   
--   <a>$sel:expirationTime:TokenData'</a>, <a>tokenData_expirationTime</a>
--   - Token expiration time, in ISO8601-UTC format.
--   
--   <a>$sel:licenseArn:TokenData'</a>, <a>tokenData_licenseArn</a> -
--   Amazon Resource Name (ARN) of the license.
newTokenData :: TokenData
