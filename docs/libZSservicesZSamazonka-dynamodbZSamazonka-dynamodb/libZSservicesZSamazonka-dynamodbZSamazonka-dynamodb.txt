-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-dynamodbZSamazonka-dynamodb
@version 2.0


module Amazonka.DynamoDB.Types.ArchivalSummary

-- | Contains details of a table archival operation.
--   
--   <i>See:</i> <a>newArchivalSummary</a> smart constructor.
data ArchivalSummary
ArchivalSummary' :: Maybe Text -> Maybe POSIX -> Maybe Text -> ArchivalSummary

-- | The reason DynamoDB archived the table. Currently, the only possible
--   value is:
--   
--   <ul>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The table was
--   archived due to the table's AWS KMS key being inaccessible for more
--   than seven days. An On-Demand backup was created at the archival
--   time.</li>
--   </ul>
[$sel:archivalReason:ArchivalSummary'] :: ArchivalSummary -> Maybe Text

-- | The date and time when table archival was initiated by DynamoDB, in
--   UNIX epoch time format.
[$sel:archivalDateTime:ArchivalSummary'] :: ArchivalSummary -> Maybe POSIX

-- | The Amazon Resource Name (ARN) of the backup the table was archived
--   to, when applicable in the archival reason. If you wish to restore
--   this backup to the same table name, you will need to delete the
--   original table.
[$sel:archivalBackupArn:ArchivalSummary'] :: ArchivalSummary -> Maybe Text

-- | Create a value of <a>ArchivalSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:archivalReason:ArchivalSummary'</a>,
--   <a>archivalSummary_archivalReason</a> - The reason DynamoDB archived
--   the table. Currently, the only possible value is:
--   
--   <ul>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The table was
--   archived due to the table's AWS KMS key being inaccessible for more
--   than seven days. An On-Demand backup was created at the archival
--   time.</li>
--   </ul>
--   
--   <a>$sel:archivalDateTime:ArchivalSummary'</a>,
--   <a>archivalSummary_archivalDateTime</a> - The date and time when table
--   archival was initiated by DynamoDB, in UNIX epoch time format.
--   
--   <a>$sel:archivalBackupArn:ArchivalSummary'</a>,
--   <a>archivalSummary_archivalBackupArn</a> - The Amazon Resource Name
--   (ARN) of the backup the table was archived to, when applicable in the
--   archival reason. If you wish to restore this backup to the same table
--   name, you will need to delete the original table.
newArchivalSummary :: ArchivalSummary

-- | The reason DynamoDB archived the table. Currently, the only possible
--   value is:
--   
--   <ul>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The table was
--   archived due to the table's AWS KMS key being inaccessible for more
--   than seven days. An On-Demand backup was created at the archival
--   time.</li>
--   </ul>
archivalSummary_archivalReason :: Lens' ArchivalSummary (Maybe Text)

-- | The date and time when table archival was initiated by DynamoDB, in
--   UNIX epoch time format.
archivalSummary_archivalDateTime :: Lens' ArchivalSummary (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the backup the table was archived
--   to, when applicable in the archival reason. If you wish to restore
--   this backup to the same table name, you will need to delete the
--   original table.
archivalSummary_archivalBackupArn :: Lens' ArchivalSummary (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ArchivalSummary.ArchivalSummary
instance GHC.Show.Show Amazonka.DynamoDB.Types.ArchivalSummary.ArchivalSummary
instance GHC.Read.Read Amazonka.DynamoDB.Types.ArchivalSummary.ArchivalSummary
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ArchivalSummary.ArchivalSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ArchivalSummary.ArchivalSummary
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ArchivalSummary.ArchivalSummary
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ArchivalSummary.ArchivalSummary


module Amazonka.DynamoDB.Types.AttributeAction
newtype AttributeAction
AttributeAction' :: Text -> AttributeAction
[fromAttributeAction] :: AttributeAction -> Text
pattern AttributeAction_ADD :: AttributeAction
pattern AttributeAction_DELETE :: AttributeAction
pattern AttributeAction_PUT :: AttributeAction
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance GHC.Read.Read Amazonka.DynamoDB.Types.AttributeAction.AttributeAction
instance GHC.Show.Show Amazonka.DynamoDB.Types.AttributeAction.AttributeAction


module Amazonka.DynamoDB.Types.AttributeValue

-- | Represents the data for an attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newAttributeValue</a> smart constructor.
data AttributeValue
AttributeValue' :: Maybe [AttributeValue] -> Maybe [Text] -> Maybe (HashMap Text AttributeValue) -> Maybe Bool -> Maybe Text -> Maybe [Base64] -> Maybe Base64 -> Maybe [Text] -> Maybe Text -> Maybe Bool -> AttributeValue

-- | An attribute of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
[$sel:l:AttributeValue'] :: AttributeValue -> Maybe [AttributeValue]

-- | An attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
[$sel:ns:AttributeValue'] :: AttributeValue -> Maybe [Text]

-- | An attribute of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
[$sel:m:AttributeValue'] :: AttributeValue -> Maybe (HashMap Text AttributeValue)

-- | An attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
[$sel:null:AttributeValue'] :: AttributeValue -> Maybe Bool

-- | An attribute of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
[$sel:n:AttributeValue'] :: AttributeValue -> Maybe Text

-- | An attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
[$sel:bs:AttributeValue'] :: AttributeValue -> Maybe [Base64]

-- | An attribute of type Binary. For example:
--   
--   <pre>
--   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"
--   </pre>
[$sel:b:AttributeValue'] :: AttributeValue -> Maybe Base64

-- | An attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
[$sel:ss:AttributeValue'] :: AttributeValue -> Maybe [Text]

-- | An attribute of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
[$sel:s:AttributeValue'] :: AttributeValue -> Maybe Text

-- | An attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
[$sel:bool:AttributeValue'] :: AttributeValue -> Maybe Bool

-- | Create a value of <a>AttributeValue</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:l:AttributeValue'</a>, <a>attributeValue_l</a> - An attribute
--   of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
--   
--   <a>$sel:ns:AttributeValue'</a>, <a>attributeValue_ns</a> - An
--   attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
--   
--   <a>$sel:m:AttributeValue'</a>, <a>attributeValue_m</a> - An attribute
--   of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
--   
--   <a>$sel:null:AttributeValue'</a>, <a>attributeValue_null</a> - An
--   attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
--   
--   <a>$sel:n:AttributeValue'</a>, <a>attributeValue_n</a> - An attribute
--   of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
--   
--   <a>$sel:bs:AttributeValue'</a>, <a>attributeValue_bs</a> - An
--   attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
--   
--   <a>$sel:b:AttributeValue'</a>, <a>attributeValue_b</a> - An attribute
--   of type Binary. For example:
--   
--   <tt>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</tt>-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:ss:AttributeValue'</a>, <a>attributeValue_ss</a> - An
--   attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
--   
--   <a>$sel:s:AttributeValue'</a>, <a>attributeValue_s</a> - An attribute
--   of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
--   
--   <a>$sel:bool:AttributeValue'</a>, <a>attributeValue_bool</a> - An
--   attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
newAttributeValue :: AttributeValue

-- | An attribute of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
attributeValue_l :: Lens' AttributeValue (Maybe [AttributeValue])

-- | An attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
attributeValue_ns :: Lens' AttributeValue (Maybe [Text])

-- | An attribute of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
attributeValue_m :: Lens' AttributeValue (Maybe (HashMap Text AttributeValue))

-- | An attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
attributeValue_null :: Lens' AttributeValue (Maybe Bool)

-- | An attribute of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
attributeValue_n :: Lens' AttributeValue (Maybe Text)

-- | An attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
attributeValue_bs :: Lens' AttributeValue (Maybe [ByteString])

-- | An attribute of type Binary. For example:
--   
--   <tt>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</tt>-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
attributeValue_b :: Lens' AttributeValue (Maybe ByteString)

-- | An attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
attributeValue_ss :: Lens' AttributeValue (Maybe [Text])

-- | An attribute of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
attributeValue_s :: Lens' AttributeValue (Maybe Text)

-- | An attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
attributeValue_bool :: Lens' AttributeValue (Maybe Bool)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.AttributeValue.AttributeValue
instance GHC.Show.Show Amazonka.DynamoDB.Types.AttributeValue.AttributeValue
instance GHC.Read.Read Amazonka.DynamoDB.Types.AttributeValue.AttributeValue
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.AttributeValue.AttributeValue
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.AttributeValue.AttributeValue
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.AttributeValue.AttributeValue
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.AttributeValue.AttributeValue
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.AttributeValue.AttributeValue


module Amazonka.DynamoDB.Types.AttributeValueUpdate

-- | For the <tt>UpdateItem</tt> operation, represents the attributes to be
--   modified, the action to perform on each, and the new value for each.
--   
--   You cannot use <tt>UpdateItem</tt> to update any primary key
--   attributes. Instead, you will need to delete the item, and then use
--   <tt>PutItem</tt> to create a new item with new attributes.
--   
--   Attribute values cannot be null; string and binary type attributes
--   must have lengths greater than zero; and set type attributes must not
--   be empty. Requests with empty values will be rejected with a
--   <tt>ValidationException</tt> exception.
--   
--   <i>See:</i> <a>newAttributeValueUpdate</a> smart constructor.
data AttributeValueUpdate
AttributeValueUpdate' :: Maybe AttributeValue -> Maybe AttributeAction -> AttributeValueUpdate

-- | Represents the data for an attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:value:AttributeValueUpdate'] :: AttributeValueUpdate -> Maybe AttributeValue

-- | Specifies how to perform the update. Valid values are <tt>PUT</tt>
--   (default), <tt>DELETE</tt>, and <tt>ADD</tt>. The behavior depends on
--   whether the specified primary key already exists in the table.
--   
--   <b>If an item with the specified <i>Key</i> is found in the table:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - Adds the specified attribute to the item. If the
--   attribute already exists, it is replaced by the new value.</li>
--   <li><tt>DELETE</tt> - If no value is specified, the attribute and its
--   value are removed from the item. The data type of the specified value
--   must match the existing value's data type.If a <i>set</i> of values is
--   specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specified <tt>[a,c]</tt>, then the final
--   attribute value would be <tt>[b]</tt>. Specifying an empty set is an
--   error.</li>
--   <li><tt>ADD</tt> - If the attribute does not already exist, then the
--   attribute and its values are added to the item. If the attribute does
--   exist, then the behavior of <tt>ADD</tt> depends on the data type of
--   the attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then the <tt>Value</tt> is
--   mathematically added to the existing attribute. If <tt>Value</tt> is a
--   negative number, then it is subtracted from the existing attribute.If
--   you use <tt>ADD</tt> to increment or decrement a number value for an
--   item that doesn't exist before the update, DynamoDB uses 0 as the
--   initial value.In addition, if you use <tt>ADD</tt> to update an
--   existing item, and intend to increment or decrement an attribute value
--   which does not yet exist, DynamoDB uses <tt>0</tt> as the initial
--   value. For example, suppose that the item you want to update does not
--   yet have an attribute named <i>itemcount</i>, but you decide to
--   <tt>ADD</tt> the number <tt>3</tt> to this attribute anyway, even
--   though it currently does not exist. DynamoDB will create the
--   <i>itemcount</i> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <i>itemcount</i> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set, and if the
--   <tt>Value</tt> is also a set, then the <tt>Value</tt> is added to the
--   existing set. (This is a <i>set</i> operation, not mathematical
--   addition.) For example, if the attribute value was the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value would be <tt>[1,2,3]</tt>. An error
--   occurs if an Add action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings. The same holds true for number sets and binary
--   sets.</li></ul>This action is only valid for an existing attribute
--   whose data type is number or is a set. Do not use <tt>ADD</tt> for any
--   other data types.</li>
--   </ul>
--   
--   <b>If no item with the specified <i>Key</i> is found:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - DynamoDB creates a new item with the specified
--   primary key, and then adds the attribute.</li>
--   <li><tt>DELETE</tt> - Nothing happens; there is no attribute to
--   delete.</li>
--   <li><tt>ADD</tt> - DynamoDB creates an item with the supplied primary
--   key and number (or set of numbers) for the attribute value. The only
--   data types allowed are number and number set; no other data types can
--   be specified.</li>
--   </ul>
[$sel:action:AttributeValueUpdate'] :: AttributeValueUpdate -> Maybe AttributeAction

-- | Create a value of <a>AttributeValueUpdate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:AttributeValueUpdate'</a>,
--   <a>attributeValueUpdate_value</a> - Represents the data for an
--   attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:action:AttributeValueUpdate'</a>,
--   <a>attributeValueUpdate_action</a> - Specifies how to perform the
--   update. Valid values are <tt>PUT</tt> (default), <tt>DELETE</tt>, and
--   <tt>ADD</tt>. The behavior depends on whether the specified primary
--   key already exists in the table.
--   
--   <b>If an item with the specified <i>Key</i> is found in the table:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - Adds the specified attribute to the item. If the
--   attribute already exists, it is replaced by the new value.</li>
--   <li><tt>DELETE</tt> - If no value is specified, the attribute and its
--   value are removed from the item. The data type of the specified value
--   must match the existing value's data type.If a <i>set</i> of values is
--   specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specified <tt>[a,c]</tt>, then the final
--   attribute value would be <tt>[b]</tt>. Specifying an empty set is an
--   error.</li>
--   <li><tt>ADD</tt> - If the attribute does not already exist, then the
--   attribute and its values are added to the item. If the attribute does
--   exist, then the behavior of <tt>ADD</tt> depends on the data type of
--   the attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then the <tt>Value</tt> is
--   mathematically added to the existing attribute. If <tt>Value</tt> is a
--   negative number, then it is subtracted from the existing attribute.If
--   you use <tt>ADD</tt> to increment or decrement a number value for an
--   item that doesn't exist before the update, DynamoDB uses 0 as the
--   initial value.In addition, if you use <tt>ADD</tt> to update an
--   existing item, and intend to increment or decrement an attribute value
--   which does not yet exist, DynamoDB uses <tt>0</tt> as the initial
--   value. For example, suppose that the item you want to update does not
--   yet have an attribute named <i>itemcount</i>, but you decide to
--   <tt>ADD</tt> the number <tt>3</tt> to this attribute anyway, even
--   though it currently does not exist. DynamoDB will create the
--   <i>itemcount</i> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <i>itemcount</i> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set, and if the
--   <tt>Value</tt> is also a set, then the <tt>Value</tt> is added to the
--   existing set. (This is a <i>set</i> operation, not mathematical
--   addition.) For example, if the attribute value was the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value would be <tt>[1,2,3]</tt>. An error
--   occurs if an Add action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings. The same holds true for number sets and binary
--   sets.</li></ul>This action is only valid for an existing attribute
--   whose data type is number or is a set. Do not use <tt>ADD</tt> for any
--   other data types.</li>
--   </ul>
--   
--   <b>If no item with the specified <i>Key</i> is found:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - DynamoDB creates a new item with the specified
--   primary key, and then adds the attribute.</li>
--   <li><tt>DELETE</tt> - Nothing happens; there is no attribute to
--   delete.</li>
--   <li><tt>ADD</tt> - DynamoDB creates an item with the supplied primary
--   key and number (or set of numbers) for the attribute value. The only
--   data types allowed are number and number set; no other data types can
--   be specified.</li>
--   </ul>
newAttributeValueUpdate :: AttributeValueUpdate

-- | Represents the data for an attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
attributeValueUpdate_value :: Lens' AttributeValueUpdate (Maybe AttributeValue)

-- | Specifies how to perform the update. Valid values are <tt>PUT</tt>
--   (default), <tt>DELETE</tt>, and <tt>ADD</tt>. The behavior depends on
--   whether the specified primary key already exists in the table.
--   
--   <b>If an item with the specified <i>Key</i> is found in the table:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - Adds the specified attribute to the item. If the
--   attribute already exists, it is replaced by the new value.</li>
--   <li><tt>DELETE</tt> - If no value is specified, the attribute and its
--   value are removed from the item. The data type of the specified value
--   must match the existing value's data type.If a <i>set</i> of values is
--   specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specified <tt>[a,c]</tt>, then the final
--   attribute value would be <tt>[b]</tt>. Specifying an empty set is an
--   error.</li>
--   <li><tt>ADD</tt> - If the attribute does not already exist, then the
--   attribute and its values are added to the item. If the attribute does
--   exist, then the behavior of <tt>ADD</tt> depends on the data type of
--   the attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then the <tt>Value</tt> is
--   mathematically added to the existing attribute. If <tt>Value</tt> is a
--   negative number, then it is subtracted from the existing attribute.If
--   you use <tt>ADD</tt> to increment or decrement a number value for an
--   item that doesn't exist before the update, DynamoDB uses 0 as the
--   initial value.In addition, if you use <tt>ADD</tt> to update an
--   existing item, and intend to increment or decrement an attribute value
--   which does not yet exist, DynamoDB uses <tt>0</tt> as the initial
--   value. For example, suppose that the item you want to update does not
--   yet have an attribute named <i>itemcount</i>, but you decide to
--   <tt>ADD</tt> the number <tt>3</tt> to this attribute anyway, even
--   though it currently does not exist. DynamoDB will create the
--   <i>itemcount</i> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <i>itemcount</i> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set, and if the
--   <tt>Value</tt> is also a set, then the <tt>Value</tt> is added to the
--   existing set. (This is a <i>set</i> operation, not mathematical
--   addition.) For example, if the attribute value was the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value would be <tt>[1,2,3]</tt>. An error
--   occurs if an Add action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings. The same holds true for number sets and binary
--   sets.</li></ul>This action is only valid for an existing attribute
--   whose data type is number or is a set. Do not use <tt>ADD</tt> for any
--   other data types.</li>
--   </ul>
--   
--   <b>If no item with the specified <i>Key</i> is found:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - DynamoDB creates a new item with the specified
--   primary key, and then adds the attribute.</li>
--   <li><tt>DELETE</tt> - Nothing happens; there is no attribute to
--   delete.</li>
--   <li><tt>ADD</tt> - DynamoDB creates an item with the supplied primary
--   key and number (or set of numbers) for the attribute value. The only
--   data types allowed are number and number set; no other data types can
--   be specified.</li>
--   </ul>
attributeValueUpdate_action :: Lens' AttributeValueUpdate (Maybe AttributeAction)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.AttributeValueUpdate.AttributeValueUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.AttributeValueUpdate.AttributeValueUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.AttributeValueUpdate.AttributeValueUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.AttributeValueUpdate.AttributeValueUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.AttributeValueUpdate.AttributeValueUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.AttributeValueUpdate.AttributeValueUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.AttributeValueUpdate.AttributeValueUpdate


module Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationDescription

-- | Represents the properties of a target tracking scaling policy.
--   
--   <i>See:</i>
--   <a>newAutoScalingTargetTrackingScalingPolicyConfigurationDescription</a>
--   smart constructor.
data AutoScalingTargetTrackingScalingPolicyConfigurationDescription
AutoScalingTargetTrackingScalingPolicyConfigurationDescription' :: Maybe Int -> Maybe Bool -> Maybe Int -> Double -> AutoScalingTargetTrackingScalingPolicyConfigurationDescription

-- | The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
[$sel:scaleInCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'] :: AutoScalingTargetTrackingScalingPolicyConfigurationDescription -> Maybe Int

-- | Indicates whether scale in by the target tracking policy is disabled.
--   If the value is true, scale in is disabled and the target tracking
--   policy won't remove capacity from the scalable resource. Otherwise,
--   scale in is enabled and the target tracking policy can remove capacity
--   from the scalable resource. The default value is false.
[$sel:disableScaleIn:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'] :: AutoScalingTargetTrackingScalingPolicyConfigurationDescription -> Maybe Bool

-- | The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
[$sel:scaleOutCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'] :: AutoScalingTargetTrackingScalingPolicyConfigurationDescription -> Maybe Int

-- | The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
[$sel:targetValue:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'] :: AutoScalingTargetTrackingScalingPolicyConfigurationDescription -> Double

-- | Create a value of
--   <a>AutoScalingTargetTrackingScalingPolicyConfigurationDescription</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:scaleInCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationDescription_scaleInCooldown</a>
--   - The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
--   
--   
--   <a>$sel:disableScaleIn:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationDescription_disableScaleIn</a>
--   - Indicates whether scale in by the target tracking policy is
--   disabled. If the value is true, scale in is disabled and the target
--   tracking policy won't remove capacity from the scalable resource.
--   Otherwise, scale in is enabled and the target tracking policy can
--   remove capacity from the scalable resource. The default value is
--   false.
--   
--   
--   <a>$sel:scaleOutCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationDescription_scaleOutCooldown</a>
--   - The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
--   
--   
--   <a>$sel:targetValue:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationDescription_targetValue</a>
--   - The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
newAutoScalingTargetTrackingScalingPolicyConfigurationDescription :: Double -> AutoScalingTargetTrackingScalingPolicyConfigurationDescription

-- | The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
autoScalingTargetTrackingScalingPolicyConfigurationDescription_scaleInCooldown :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationDescription (Maybe Int)

-- | Indicates whether scale in by the target tracking policy is disabled.
--   If the value is true, scale in is disabled and the target tracking
--   policy won't remove capacity from the scalable resource. Otherwise,
--   scale in is enabled and the target tracking policy can remove capacity
--   from the scalable resource. The default value is false.
autoScalingTargetTrackingScalingPolicyConfigurationDescription_disableScaleIn :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationDescription (Maybe Bool)

-- | The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
autoScalingTargetTrackingScalingPolicyConfigurationDescription_scaleOutCooldown :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationDescription (Maybe Int)

-- | The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
autoScalingTargetTrackingScalingPolicyConfigurationDescription_targetValue :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationDescription Double
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationDescription.AutoScalingTargetTrackingScalingPolicyConfigurationDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationDescription.AutoScalingTargetTrackingScalingPolicyConfigurationDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationDescription.AutoScalingTargetTrackingScalingPolicyConfigurationDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationDescription.AutoScalingTargetTrackingScalingPolicyConfigurationDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationDescription.AutoScalingTargetTrackingScalingPolicyConfigurationDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationDescription.AutoScalingTargetTrackingScalingPolicyConfigurationDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationDescription.AutoScalingTargetTrackingScalingPolicyConfigurationDescription


module Amazonka.DynamoDB.Types.AutoScalingPolicyDescription

-- | Represents the properties of the scaling policy.
--   
--   <i>See:</i> <a>newAutoScalingPolicyDescription</a> smart constructor.
data AutoScalingPolicyDescription
AutoScalingPolicyDescription' :: Maybe Text -> Maybe AutoScalingTargetTrackingScalingPolicyConfigurationDescription -> AutoScalingPolicyDescription

-- | The name of the scaling policy.
[$sel:policyName:AutoScalingPolicyDescription'] :: AutoScalingPolicyDescription -> Maybe Text

-- | Represents a target tracking scaling policy configuration.
[$sel:targetTrackingScalingPolicyConfiguration:AutoScalingPolicyDescription'] :: AutoScalingPolicyDescription -> Maybe AutoScalingTargetTrackingScalingPolicyConfigurationDescription

-- | Create a value of <a>AutoScalingPolicyDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:policyName:AutoScalingPolicyDescription'</a>,
--   <a>autoScalingPolicyDescription_policyName</a> - The name of the
--   scaling policy.
--   
--   
--   <a>$sel:targetTrackingScalingPolicyConfiguration:AutoScalingPolicyDescription'</a>,
--   <a>autoScalingPolicyDescription_targetTrackingScalingPolicyConfiguration</a>
--   - Represents a target tracking scaling policy configuration.
newAutoScalingPolicyDescription :: AutoScalingPolicyDescription

-- | The name of the scaling policy.
autoScalingPolicyDescription_policyName :: Lens' AutoScalingPolicyDescription (Maybe Text)

-- | Represents a target tracking scaling policy configuration.
autoScalingPolicyDescription_targetTrackingScalingPolicyConfiguration :: Lens' AutoScalingPolicyDescription (Maybe AutoScalingTargetTrackingScalingPolicyConfigurationDescription)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.AutoScalingPolicyDescription.AutoScalingPolicyDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.AutoScalingPolicyDescription.AutoScalingPolicyDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.AutoScalingPolicyDescription.AutoScalingPolicyDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.AutoScalingPolicyDescription.AutoScalingPolicyDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.AutoScalingPolicyDescription.AutoScalingPolicyDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.AutoScalingPolicyDescription.AutoScalingPolicyDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.AutoScalingPolicyDescription.AutoScalingPolicyDescription


module Amazonka.DynamoDB.Types.AutoScalingSettingsDescription

-- | Represents the auto scaling settings for a global table or global
--   secondary index.
--   
--   <i>See:</i> <a>newAutoScalingSettingsDescription</a> smart
--   constructor.
data AutoScalingSettingsDescription
AutoScalingSettingsDescription' :: Maybe Bool -> Maybe Natural -> Maybe Natural -> Maybe [AutoScalingPolicyDescription] -> Maybe Text -> AutoScalingSettingsDescription

-- | Disabled auto scaling for this global table or global secondary index.
[$sel:autoScalingDisabled:AutoScalingSettingsDescription'] :: AutoScalingSettingsDescription -> Maybe Bool

-- | The minimum capacity units that a global table or global secondary
--   index should be scaled down to.
[$sel:minimumUnits:AutoScalingSettingsDescription'] :: AutoScalingSettingsDescription -> Maybe Natural

-- | The maximum capacity units that a global table or global secondary
--   index should be scaled up to.
[$sel:maximumUnits:AutoScalingSettingsDescription'] :: AutoScalingSettingsDescription -> Maybe Natural

-- | Information about the scaling policies.
[$sel:scalingPolicies:AutoScalingSettingsDescription'] :: AutoScalingSettingsDescription -> Maybe [AutoScalingPolicyDescription]

-- | Role ARN used for configuring the auto scaling policy.
[$sel:autoScalingRoleArn:AutoScalingSettingsDescription'] :: AutoScalingSettingsDescription -> Maybe Text

-- | Create a value of <a>AutoScalingSettingsDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:autoScalingDisabled:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_autoScalingDisabled</a> - Disabled
--   auto scaling for this global table or global secondary index.
--   
--   <a>$sel:minimumUnits:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_minimumUnits</a> - The minimum
--   capacity units that a global table or global secondary index should be
--   scaled down to.
--   
--   <a>$sel:maximumUnits:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_maximumUnits</a> - The maximum
--   capacity units that a global table or global secondary index should be
--   scaled up to.
--   
--   <a>$sel:scalingPolicies:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_scalingPolicies</a> - Information
--   about the scaling policies.
--   
--   <a>$sel:autoScalingRoleArn:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_autoScalingRoleArn</a> - Role ARN
--   used for configuring the auto scaling policy.
newAutoScalingSettingsDescription :: AutoScalingSettingsDescription

-- | Disabled auto scaling for this global table or global secondary index.
autoScalingSettingsDescription_autoScalingDisabled :: Lens' AutoScalingSettingsDescription (Maybe Bool)

-- | The minimum capacity units that a global table or global secondary
--   index should be scaled down to.
autoScalingSettingsDescription_minimumUnits :: Lens' AutoScalingSettingsDescription (Maybe Natural)

-- | The maximum capacity units that a global table or global secondary
--   index should be scaled up to.
autoScalingSettingsDescription_maximumUnits :: Lens' AutoScalingSettingsDescription (Maybe Natural)

-- | Information about the scaling policies.
autoScalingSettingsDescription_scalingPolicies :: Lens' AutoScalingSettingsDescription (Maybe [AutoScalingPolicyDescription])

-- | Role ARN used for configuring the auto scaling policy.
autoScalingSettingsDescription_autoScalingRoleArn :: Lens' AutoScalingSettingsDescription (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.AutoScalingSettingsDescription.AutoScalingSettingsDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.AutoScalingSettingsDescription.AutoScalingSettingsDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.AutoScalingSettingsDescription.AutoScalingSettingsDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.AutoScalingSettingsDescription.AutoScalingSettingsDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.AutoScalingSettingsDescription.AutoScalingSettingsDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.AutoScalingSettingsDescription.AutoScalingSettingsDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.AutoScalingSettingsDescription.AutoScalingSettingsDescription


module Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

-- | Represents the settings of a target tracking scaling policy that will
--   be modified.
--   
--   <i>See:</i>
--   <a>newAutoScalingTargetTrackingScalingPolicyConfigurationUpdate</a>
--   smart constructor.
data AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
AutoScalingTargetTrackingScalingPolicyConfigurationUpdate' :: Maybe Int -> Maybe Bool -> Maybe Int -> Double -> AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

-- | The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
[$sel:scaleInCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'] :: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> Maybe Int

-- | Indicates whether scale in by the target tracking policy is disabled.
--   If the value is true, scale in is disabled and the target tracking
--   policy won't remove capacity from the scalable resource. Otherwise,
--   scale in is enabled and the target tracking policy can remove capacity
--   from the scalable resource. The default value is false.
[$sel:disableScaleIn:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'] :: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> Maybe Bool

-- | The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
[$sel:scaleOutCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'] :: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> Maybe Int

-- | The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
[$sel:targetValue:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'] :: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> Double

-- | Create a value of
--   <a>AutoScalingTargetTrackingScalingPolicyConfigurationUpdate</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:scaleInCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationUpdate_scaleInCooldown</a>
--   - The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
--   
--   
--   <a>$sel:disableScaleIn:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationUpdate_disableScaleIn</a>
--   - Indicates whether scale in by the target tracking policy is
--   disabled. If the value is true, scale in is disabled and the target
--   tracking policy won't remove capacity from the scalable resource.
--   Otherwise, scale in is enabled and the target tracking policy can
--   remove capacity from the scalable resource. The default value is
--   false.
--   
--   
--   <a>$sel:scaleOutCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationUpdate_scaleOutCooldown</a>
--   - The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
--   
--   
--   <a>$sel:targetValue:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationUpdate_targetValue</a>
--   - The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
newAutoScalingTargetTrackingScalingPolicyConfigurationUpdate :: Double -> AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

-- | The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
autoScalingTargetTrackingScalingPolicyConfigurationUpdate_scaleInCooldown :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationUpdate (Maybe Int)

-- | Indicates whether scale in by the target tracking policy is disabled.
--   If the value is true, scale in is disabled and the target tracking
--   policy won't remove capacity from the scalable resource. Otherwise,
--   scale in is enabled and the target tracking policy can remove capacity
--   from the scalable resource. The default value is false.
autoScalingTargetTrackingScalingPolicyConfigurationUpdate_disableScaleIn :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationUpdate (Maybe Bool)

-- | The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
autoScalingTargetTrackingScalingPolicyConfigurationUpdate_scaleOutCooldown :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationUpdate (Maybe Int)

-- | The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
autoScalingTargetTrackingScalingPolicyConfigurationUpdate_targetValue :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationUpdate Double
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate.AutoScalingTargetTrackingScalingPolicyConfigurationUpdate


module Amazonka.DynamoDB.Types.AutoScalingPolicyUpdate

-- | Represents the auto scaling policy to be modified.
--   
--   <i>See:</i> <a>newAutoScalingPolicyUpdate</a> smart constructor.
data AutoScalingPolicyUpdate
AutoScalingPolicyUpdate' :: Maybe Text -> AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> AutoScalingPolicyUpdate

-- | The name of the scaling policy.
[$sel:policyName:AutoScalingPolicyUpdate'] :: AutoScalingPolicyUpdate -> Maybe Text

-- | Represents a target tracking scaling policy configuration.
[$sel:targetTrackingScalingPolicyConfiguration:AutoScalingPolicyUpdate'] :: AutoScalingPolicyUpdate -> AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

-- | Create a value of <a>AutoScalingPolicyUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:policyName:AutoScalingPolicyUpdate'</a>,
--   <a>autoScalingPolicyUpdate_policyName</a> - The name of the scaling
--   policy.
--   
--   
--   <a>$sel:targetTrackingScalingPolicyConfiguration:AutoScalingPolicyUpdate'</a>,
--   <a>autoScalingPolicyUpdate_targetTrackingScalingPolicyConfiguration</a>
--   - Represents a target tracking scaling policy configuration.
newAutoScalingPolicyUpdate :: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> AutoScalingPolicyUpdate

-- | The name of the scaling policy.
autoScalingPolicyUpdate_policyName :: Lens' AutoScalingPolicyUpdate (Maybe Text)

-- | Represents a target tracking scaling policy configuration.
autoScalingPolicyUpdate_targetTrackingScalingPolicyConfiguration :: Lens' AutoScalingPolicyUpdate AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.AutoScalingPolicyUpdate.AutoScalingPolicyUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.AutoScalingPolicyUpdate.AutoScalingPolicyUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.AutoScalingPolicyUpdate.AutoScalingPolicyUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.AutoScalingPolicyUpdate.AutoScalingPolicyUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.AutoScalingPolicyUpdate.AutoScalingPolicyUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.AutoScalingPolicyUpdate.AutoScalingPolicyUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.AutoScalingPolicyUpdate.AutoScalingPolicyUpdate


module Amazonka.DynamoDB.Types.AutoScalingSettingsUpdate

-- | Represents the auto scaling settings to be modified for a global table
--   or global secondary index.
--   
--   <i>See:</i> <a>newAutoScalingSettingsUpdate</a> smart constructor.
data AutoScalingSettingsUpdate
AutoScalingSettingsUpdate' :: Maybe Bool -> Maybe Natural -> Maybe AutoScalingPolicyUpdate -> Maybe Natural -> Maybe Text -> AutoScalingSettingsUpdate

-- | Disabled auto scaling for this global table or global secondary index.
[$sel:autoScalingDisabled:AutoScalingSettingsUpdate'] :: AutoScalingSettingsUpdate -> Maybe Bool

-- | The minimum capacity units that a global table or global secondary
--   index should be scaled down to.
[$sel:minimumUnits:AutoScalingSettingsUpdate'] :: AutoScalingSettingsUpdate -> Maybe Natural

-- | The scaling policy to apply for scaling target global table or global
--   secondary index capacity units.
[$sel:scalingPolicyUpdate:AutoScalingSettingsUpdate'] :: AutoScalingSettingsUpdate -> Maybe AutoScalingPolicyUpdate

-- | The maximum capacity units that a global table or global secondary
--   index should be scaled up to.
[$sel:maximumUnits:AutoScalingSettingsUpdate'] :: AutoScalingSettingsUpdate -> Maybe Natural

-- | Role ARN used for configuring auto scaling policy.
[$sel:autoScalingRoleArn:AutoScalingSettingsUpdate'] :: AutoScalingSettingsUpdate -> Maybe Text

-- | Create a value of <a>AutoScalingSettingsUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:autoScalingDisabled:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_autoScalingDisabled</a> - Disabled auto
--   scaling for this global table or global secondary index.
--   
--   <a>$sel:minimumUnits:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_minimumUnits</a> - The minimum capacity
--   units that a global table or global secondary index should be scaled
--   down to.
--   
--   <a>$sel:scalingPolicyUpdate:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_scalingPolicyUpdate</a> - The scaling
--   policy to apply for scaling target global table or global secondary
--   index capacity units.
--   
--   <a>$sel:maximumUnits:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_maximumUnits</a> - The maximum capacity
--   units that a global table or global secondary index should be scaled
--   up to.
--   
--   <a>$sel:autoScalingRoleArn:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_autoScalingRoleArn</a> - Role ARN used
--   for configuring auto scaling policy.
newAutoScalingSettingsUpdate :: AutoScalingSettingsUpdate

-- | Disabled auto scaling for this global table or global secondary index.
autoScalingSettingsUpdate_autoScalingDisabled :: Lens' AutoScalingSettingsUpdate (Maybe Bool)

-- | The minimum capacity units that a global table or global secondary
--   index should be scaled down to.
autoScalingSettingsUpdate_minimumUnits :: Lens' AutoScalingSettingsUpdate (Maybe Natural)

-- | The scaling policy to apply for scaling target global table or global
--   secondary index capacity units.
autoScalingSettingsUpdate_scalingPolicyUpdate :: Lens' AutoScalingSettingsUpdate (Maybe AutoScalingPolicyUpdate)

-- | The maximum capacity units that a global table or global secondary
--   index should be scaled up to.
autoScalingSettingsUpdate_maximumUnits :: Lens' AutoScalingSettingsUpdate (Maybe Natural)

-- | Role ARN used for configuring auto scaling policy.
autoScalingSettingsUpdate_autoScalingRoleArn :: Lens' AutoScalingSettingsUpdate (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.AutoScalingSettingsUpdate.AutoScalingSettingsUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.AutoScalingSettingsUpdate.AutoScalingSettingsUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.AutoScalingSettingsUpdate.AutoScalingSettingsUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.AutoScalingSettingsUpdate.AutoScalingSettingsUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.AutoScalingSettingsUpdate.AutoScalingSettingsUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.AutoScalingSettingsUpdate.AutoScalingSettingsUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.AutoScalingSettingsUpdate.AutoScalingSettingsUpdate


module Amazonka.DynamoDB.Types.BackupStatus
newtype BackupStatus
BackupStatus' :: Text -> BackupStatus
[fromBackupStatus] :: BackupStatus -> Text
pattern BackupStatus_AVAILABLE :: BackupStatus
pattern BackupStatus_CREATING :: BackupStatus
pattern BackupStatus_DELETED :: BackupStatus
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance GHC.Read.Read Amazonka.DynamoDB.Types.BackupStatus.BackupStatus
instance GHC.Show.Show Amazonka.DynamoDB.Types.BackupStatus.BackupStatus


module Amazonka.DynamoDB.Types.BackupType
newtype BackupType
BackupType' :: Text -> BackupType
[fromBackupType] :: BackupType -> Text
pattern BackupType_AWS_BACKUP :: BackupType
pattern BackupType_SYSTEM :: BackupType
pattern BackupType_USER :: BackupType
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.BackupType.BackupType
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.BackupType.BackupType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.BackupType.BackupType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.BackupType.BackupType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.BackupType.BackupType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.BackupType.BackupType
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.BackupType.BackupType
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.BackupType.BackupType
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.BackupType.BackupType
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.BackupType.BackupType
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.BackupType.BackupType
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.BackupType.BackupType
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.BackupType.BackupType
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.BackupType.BackupType
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.BackupType.BackupType
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.BackupType.BackupType
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.BackupType.BackupType
instance GHC.Read.Read Amazonka.DynamoDB.Types.BackupType.BackupType
instance GHC.Show.Show Amazonka.DynamoDB.Types.BackupType.BackupType


module Amazonka.DynamoDB.Types.BackupSummary

-- | Contains details for the backup.
--   
--   <i>See:</i> <a>newBackupSummary</a> smart constructor.
data BackupSummary
BackupSummary' :: Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe BackupStatus -> Maybe Natural -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe BackupType -> Maybe Text -> BackupSummary

-- | Time at which the automatic on-demand backup created by DynamoDB will
--   expire. This <tt>SYSTEM</tt> on-demand backup expires automatically 35
--   days after its creation.
[$sel:backupExpiryDateTime:BackupSummary'] :: BackupSummary -> Maybe POSIX

-- | ARN associated with the table.
[$sel:tableArn:BackupSummary'] :: BackupSummary -> Maybe Text

-- | Name of the specified backup.
[$sel:backupName:BackupSummary'] :: BackupSummary -> Maybe Text

-- | Backup can be in one of the following states: CREATING, ACTIVE,
--   DELETED.
[$sel:backupStatus:BackupSummary'] :: BackupSummary -> Maybe BackupStatus

-- | Size of the backup in bytes.
[$sel:backupSizeBytes:BackupSummary'] :: BackupSummary -> Maybe Natural

-- | ARN associated with the backup.
[$sel:backupArn:BackupSummary'] :: BackupSummary -> Maybe Text

-- | Unique identifier for the table.
[$sel:tableId:BackupSummary'] :: BackupSummary -> Maybe Text

-- | Time at which the backup was created.
[$sel:backupCreationDateTime:BackupSummary'] :: BackupSummary -> Maybe POSIX

-- | BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
[$sel:backupType:BackupSummary'] :: BackupSummary -> Maybe BackupType

-- | Name of the table.
[$sel:tableName:BackupSummary'] :: BackupSummary -> Maybe Text

-- | Create a value of <a>BackupSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupExpiryDateTime:BackupSummary'</a>,
--   <a>backupSummary_backupExpiryDateTime</a> - Time at which the
--   automatic on-demand backup created by DynamoDB will expire. This
--   <tt>SYSTEM</tt> on-demand backup expires automatically 35 days after
--   its creation.
--   
--   <a>$sel:tableArn:BackupSummary'</a>, <a>backupSummary_tableArn</a> -
--   ARN associated with the table.
--   
--   <a>$sel:backupName:BackupSummary'</a>, <a>backupSummary_backupName</a>
--   - Name of the specified backup.
--   
--   <a>$sel:backupStatus:BackupSummary'</a>,
--   <a>backupSummary_backupStatus</a> - Backup can be in one of the
--   following states: CREATING, ACTIVE, DELETED.
--   
--   <a>$sel:backupSizeBytes:BackupSummary'</a>,
--   <a>backupSummary_backupSizeBytes</a> - Size of the backup in bytes.
--   
--   <a>$sel:backupArn:BackupSummary'</a>, <a>backupSummary_backupArn</a> -
--   ARN associated with the backup.
--   
--   <a>$sel:tableId:BackupSummary'</a>, <a>backupSummary_tableId</a> -
--   Unique identifier for the table.
--   
--   <a>$sel:backupCreationDateTime:BackupSummary'</a>,
--   <a>backupSummary_backupCreationDateTime</a> - Time at which the backup
--   was created.
--   
--   <a>$sel:backupType:BackupSummary'</a>, <a>backupSummary_backupType</a>
--   - BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
--   
--   <a>$sel:tableName:BackupSummary'</a>, <a>backupSummary_tableName</a> -
--   Name of the table.
newBackupSummary :: BackupSummary

-- | Time at which the automatic on-demand backup created by DynamoDB will
--   expire. This <tt>SYSTEM</tt> on-demand backup expires automatically 35
--   days after its creation.
backupSummary_backupExpiryDateTime :: Lens' BackupSummary (Maybe UTCTime)

-- | ARN associated with the table.
backupSummary_tableArn :: Lens' BackupSummary (Maybe Text)

-- | Name of the specified backup.
backupSummary_backupName :: Lens' BackupSummary (Maybe Text)

-- | Backup can be in one of the following states: CREATING, ACTIVE,
--   DELETED.
backupSummary_backupStatus :: Lens' BackupSummary (Maybe BackupStatus)

-- | Size of the backup in bytes.
backupSummary_backupSizeBytes :: Lens' BackupSummary (Maybe Natural)

-- | ARN associated with the backup.
backupSummary_backupArn :: Lens' BackupSummary (Maybe Text)

-- | Unique identifier for the table.
backupSummary_tableId :: Lens' BackupSummary (Maybe Text)

-- | Time at which the backup was created.
backupSummary_backupCreationDateTime :: Lens' BackupSummary (Maybe UTCTime)

-- | BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
backupSummary_backupType :: Lens' BackupSummary (Maybe BackupType)

-- | Name of the table.
backupSummary_tableName :: Lens' BackupSummary (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.BackupSummary.BackupSummary
instance GHC.Show.Show Amazonka.DynamoDB.Types.BackupSummary.BackupSummary
instance GHC.Read.Read Amazonka.DynamoDB.Types.BackupSummary.BackupSummary
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.BackupSummary.BackupSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.BackupSummary.BackupSummary
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.BackupSummary.BackupSummary
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.BackupSummary.BackupSummary


module Amazonka.DynamoDB.Types.BackupDetails

-- | Contains the details of the backup created for the table.
--   
--   <i>See:</i> <a>newBackupDetails</a> smart constructor.
data BackupDetails
BackupDetails' :: Maybe POSIX -> Maybe Natural -> Text -> Text -> BackupStatus -> BackupType -> POSIX -> BackupDetails

-- | Time at which the automatic on-demand backup created by DynamoDB will
--   expire. This <tt>SYSTEM</tt> on-demand backup expires automatically 35
--   days after its creation.
[$sel:backupExpiryDateTime:BackupDetails'] :: BackupDetails -> Maybe POSIX

-- | Size of the backup in bytes.
[$sel:backupSizeBytes:BackupDetails'] :: BackupDetails -> Maybe Natural

-- | ARN associated with the backup.
[$sel:backupArn:BackupDetails'] :: BackupDetails -> Text

-- | Name of the requested backup.
[$sel:backupName:BackupDetails'] :: BackupDetails -> Text

-- | Backup can be in one of the following states: CREATING, ACTIVE,
--   DELETED.
[$sel:backupStatus:BackupDetails'] :: BackupDetails -> BackupStatus

-- | BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
[$sel:backupType:BackupDetails'] :: BackupDetails -> BackupType

-- | Time at which the backup was created. This is the request time of the
--   backup.
[$sel:backupCreationDateTime:BackupDetails'] :: BackupDetails -> POSIX

-- | Create a value of <a>BackupDetails</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupExpiryDateTime:BackupDetails'</a>,
--   <a>backupDetails_backupExpiryDateTime</a> - Time at which the
--   automatic on-demand backup created by DynamoDB will expire. This
--   <tt>SYSTEM</tt> on-demand backup expires automatically 35 days after
--   its creation.
--   
--   <a>$sel:backupSizeBytes:BackupDetails'</a>,
--   <a>backupDetails_backupSizeBytes</a> - Size of the backup in bytes.
--   
--   <a>$sel:backupArn:BackupDetails'</a>, <a>backupDetails_backupArn</a> -
--   ARN associated with the backup.
--   
--   <a>$sel:backupName:BackupDetails'</a>, <a>backupDetails_backupName</a>
--   - Name of the requested backup.
--   
--   <a>$sel:backupStatus:BackupDetails'</a>,
--   <a>backupDetails_backupStatus</a> - Backup can be in one of the
--   following states: CREATING, ACTIVE, DELETED.
--   
--   <a>$sel:backupType:BackupDetails'</a>, <a>backupDetails_backupType</a>
--   - BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
--   
--   <a>$sel:backupCreationDateTime:BackupDetails'</a>,
--   <a>backupDetails_backupCreationDateTime</a> - Time at which the backup
--   was created. This is the request time of the backup.
newBackupDetails :: Text -> Text -> BackupStatus -> BackupType -> UTCTime -> BackupDetails

-- | Time at which the automatic on-demand backup created by DynamoDB will
--   expire. This <tt>SYSTEM</tt> on-demand backup expires automatically 35
--   days after its creation.
backupDetails_backupExpiryDateTime :: Lens' BackupDetails (Maybe UTCTime)

-- | Size of the backup in bytes.
backupDetails_backupSizeBytes :: Lens' BackupDetails (Maybe Natural)

-- | ARN associated with the backup.
backupDetails_backupArn :: Lens' BackupDetails Text

-- | Name of the requested backup.
backupDetails_backupName :: Lens' BackupDetails Text

-- | Backup can be in one of the following states: CREATING, ACTIVE,
--   DELETED.
backupDetails_backupStatus :: Lens' BackupDetails BackupStatus

-- | BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
backupDetails_backupType :: Lens' BackupDetails BackupType

-- | Time at which the backup was created. This is the request time of the
--   backup.
backupDetails_backupCreationDateTime :: Lens' BackupDetails UTCTime
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.BackupDetails.BackupDetails
instance GHC.Show.Show Amazonka.DynamoDB.Types.BackupDetails.BackupDetails
instance GHC.Read.Read Amazonka.DynamoDB.Types.BackupDetails.BackupDetails
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.BackupDetails.BackupDetails
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.BackupDetails.BackupDetails
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.BackupDetails.BackupDetails
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.BackupDetails.BackupDetails


module Amazonka.DynamoDB.Types.BackupTypeFilter
newtype BackupTypeFilter
BackupTypeFilter' :: Text -> BackupTypeFilter
[fromBackupTypeFilter] :: BackupTypeFilter -> Text
pattern BackupTypeFilter_ALL :: BackupTypeFilter
pattern BackupTypeFilter_AWS_BACKUP :: BackupTypeFilter
pattern BackupTypeFilter_SYSTEM :: BackupTypeFilter
pattern BackupTypeFilter_USER :: BackupTypeFilter
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance GHC.Read.Read Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter
instance GHC.Show.Show Amazonka.DynamoDB.Types.BackupTypeFilter.BackupTypeFilter


module Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum
newtype BatchStatementErrorCodeEnum
BatchStatementErrorCodeEnum' :: Text -> BatchStatementErrorCodeEnum
[fromBatchStatementErrorCodeEnum] :: BatchStatementErrorCodeEnum -> Text
pattern BatchStatementErrorCodeEnum_AccessDenied :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ConditionalCheckFailed :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_DuplicateItem :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_InternalServerError :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ItemCollectionSizeLimitExceeded :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ProvisionedThroughputExceeded :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_RequestLimitExceeded :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ResourceNotFound :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ThrottlingError :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_TransactionConflict :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ValidationError :: BatchStatementErrorCodeEnum
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance GHC.Read.Read Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum
instance GHC.Show.Show Amazonka.DynamoDB.Types.BatchStatementErrorCodeEnum.BatchStatementErrorCodeEnum


module Amazonka.DynamoDB.Types.BatchStatementError

-- | An error associated with a statement in a PartiQL batch that was run.
--   
--   <i>See:</i> <a>newBatchStatementError</a> smart constructor.
data BatchStatementError
BatchStatementError' :: Maybe BatchStatementErrorCodeEnum -> Maybe Text -> BatchStatementError

-- | The error code associated with the failed PartiQL batch statement.
[$sel:code:BatchStatementError'] :: BatchStatementError -> Maybe BatchStatementErrorCodeEnum

-- | The error message associated with the PartiQL batch resposne.
[$sel:message:BatchStatementError'] :: BatchStatementError -> Maybe Text

-- | Create a value of <a>BatchStatementError</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:code:BatchStatementError'</a>, <a>batchStatementError_code</a>
--   - The error code associated with the failed PartiQL batch statement.
--   
--   <a>$sel:message:BatchStatementError'</a>,
--   <a>batchStatementError_message</a> - The error message associated with
--   the PartiQL batch resposne.
newBatchStatementError :: BatchStatementError

-- | The error code associated with the failed PartiQL batch statement.
batchStatementError_code :: Lens' BatchStatementError (Maybe BatchStatementErrorCodeEnum)

-- | The error message associated with the PartiQL batch resposne.
batchStatementError_message :: Lens' BatchStatementError (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.BatchStatementError.BatchStatementError
instance GHC.Show.Show Amazonka.DynamoDB.Types.BatchStatementError.BatchStatementError
instance GHC.Read.Read Amazonka.DynamoDB.Types.BatchStatementError.BatchStatementError
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.BatchStatementError.BatchStatementError
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.BatchStatementError.BatchStatementError
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.BatchStatementError.BatchStatementError
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.BatchStatementError.BatchStatementError


module Amazonka.DynamoDB.Types.BatchStatementRequest

-- | A PartiQL batch statement request.
--   
--   <i>See:</i> <a>newBatchStatementRequest</a> smart constructor.
data BatchStatementRequest
BatchStatementRequest' :: Maybe Bool -> Maybe (NonEmpty AttributeValue) -> Text -> BatchStatementRequest

-- | The read consistency of the PartiQL batch request.
[$sel:consistentRead:BatchStatementRequest'] :: BatchStatementRequest -> Maybe Bool

-- | The parameters associated with a PartiQL statement in the batch
--   request.
[$sel:parameters:BatchStatementRequest'] :: BatchStatementRequest -> Maybe (NonEmpty AttributeValue)

-- | A valid PartiQL statement.
[$sel:statement:BatchStatementRequest'] :: BatchStatementRequest -> Text

-- | Create a value of <a>BatchStatementRequest</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consistentRead:BatchStatementRequest'</a>,
--   <a>batchStatementRequest_consistentRead</a> - The read consistency of
--   the PartiQL batch request.
--   
--   <a>$sel:parameters:BatchStatementRequest'</a>,
--   <a>batchStatementRequest_parameters</a> - The parameters associated
--   with a PartiQL statement in the batch request.
--   
--   <a>$sel:statement:BatchStatementRequest'</a>,
--   <a>batchStatementRequest_statement</a> - A valid PartiQL statement.
newBatchStatementRequest :: Text -> BatchStatementRequest

-- | The read consistency of the PartiQL batch request.
batchStatementRequest_consistentRead :: Lens' BatchStatementRequest (Maybe Bool)

-- | The parameters associated with a PartiQL statement in the batch
--   request.
batchStatementRequest_parameters :: Lens' BatchStatementRequest (Maybe (NonEmpty AttributeValue))

-- | A valid PartiQL statement.
batchStatementRequest_statement :: Lens' BatchStatementRequest Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.BatchStatementRequest.BatchStatementRequest
instance GHC.Show.Show Amazonka.DynamoDB.Types.BatchStatementRequest.BatchStatementRequest
instance GHC.Read.Read Amazonka.DynamoDB.Types.BatchStatementRequest.BatchStatementRequest
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.BatchStatementRequest.BatchStatementRequest
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.BatchStatementRequest.BatchStatementRequest
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.BatchStatementRequest.BatchStatementRequest
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.BatchStatementRequest.BatchStatementRequest


module Amazonka.DynamoDB.Types.BatchStatementResponse

-- | A PartiQL batch statement response..
--   
--   <i>See:</i> <a>newBatchStatementResponse</a> smart constructor.
data BatchStatementResponse
BatchStatementResponse' :: Maybe BatchStatementError -> Maybe (HashMap Text AttributeValue) -> Maybe Text -> BatchStatementResponse

-- | The error associated with a failed PartiQL batch statement.
[$sel:error:BatchStatementResponse'] :: BatchStatementResponse -> Maybe BatchStatementError

-- | A DynamoDB item associated with a BatchStatementResponse
[$sel:item:BatchStatementResponse'] :: BatchStatementResponse -> Maybe (HashMap Text AttributeValue)

-- | The table name associated with a failed PartiQL batch statement.
[$sel:tableName:BatchStatementResponse'] :: BatchStatementResponse -> Maybe Text

-- | Create a value of <a>BatchStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:error:BatchStatementResponse'</a>,
--   <a>batchStatementResponse_error</a> - The error associated with a
--   failed PartiQL batch statement.
--   
--   <a>$sel:item:BatchStatementResponse'</a>,
--   <a>batchStatementResponse_item</a> - A DynamoDB item associated with a
--   BatchStatementResponse
--   
--   <a>$sel:tableName:BatchStatementResponse'</a>,
--   <a>batchStatementResponse_tableName</a> - The table name associated
--   with a failed PartiQL batch statement.
newBatchStatementResponse :: BatchStatementResponse

-- | The error associated with a failed PartiQL batch statement.
batchStatementResponse_error :: Lens' BatchStatementResponse (Maybe BatchStatementError)

-- | A DynamoDB item associated with a BatchStatementResponse
batchStatementResponse_item :: Lens' BatchStatementResponse (Maybe (HashMap Text AttributeValue))

-- | The table name associated with a failed PartiQL batch statement.
batchStatementResponse_tableName :: Lens' BatchStatementResponse (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.BatchStatementResponse.BatchStatementResponse
instance GHC.Show.Show Amazonka.DynamoDB.Types.BatchStatementResponse.BatchStatementResponse
instance GHC.Read.Read Amazonka.DynamoDB.Types.BatchStatementResponse.BatchStatementResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.BatchStatementResponse.BatchStatementResponse
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.BatchStatementResponse.BatchStatementResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.BatchStatementResponse.BatchStatementResponse
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.BatchStatementResponse.BatchStatementResponse


module Amazonka.DynamoDB.Types.BillingMode
newtype BillingMode
BillingMode' :: Text -> BillingMode
[fromBillingMode] :: BillingMode -> Text
pattern BillingMode_PAY_PER_REQUEST :: BillingMode
pattern BillingMode_PROVISIONED :: BillingMode
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance GHC.Read.Read Amazonka.DynamoDB.Types.BillingMode.BillingMode
instance GHC.Show.Show Amazonka.DynamoDB.Types.BillingMode.BillingMode


module Amazonka.DynamoDB.Types.BillingModeSummary

-- | Contains the details for the read/write capacity mode.
--   
--   <i>See:</i> <a>newBillingModeSummary</a> smart constructor.
data BillingModeSummary
BillingModeSummary' :: Maybe POSIX -> Maybe BillingMode -> BillingModeSummary

-- | Represents the time when <tt>PAY_PER_REQUEST</tt> was last set as the
--   read/write capacity mode.
[$sel:lastUpdateToPayPerRequestDateTime:BillingModeSummary'] :: BillingModeSummary -> Maybe POSIX

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
[$sel:billingMode:BillingModeSummary'] :: BillingModeSummary -> Maybe BillingMode

-- | Create a value of <a>BillingModeSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastUpdateToPayPerRequestDateTime:BillingModeSummary'</a>,
--   <a>billingModeSummary_lastUpdateToPayPerRequestDateTime</a> -
--   Represents the time when <tt>PAY_PER_REQUEST</tt> was last set as the
--   read/write capacity mode.
--   
--   <a>$sel:billingMode:BillingModeSummary'</a>,
--   <a>billingModeSummary_billingMode</a> - Controls how you are charged
--   for read and write throughput and how you manage capacity. This
--   setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
newBillingModeSummary :: BillingModeSummary

-- | Represents the time when <tt>PAY_PER_REQUEST</tt> was last set as the
--   read/write capacity mode.
billingModeSummary_lastUpdateToPayPerRequestDateTime :: Lens' BillingModeSummary (Maybe UTCTime)

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
billingModeSummary_billingMode :: Lens' BillingModeSummary (Maybe BillingMode)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.BillingModeSummary.BillingModeSummary
instance GHC.Show.Show Amazonka.DynamoDB.Types.BillingModeSummary.BillingModeSummary
instance GHC.Read.Read Amazonka.DynamoDB.Types.BillingModeSummary.BillingModeSummary
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.BillingModeSummary.BillingModeSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.BillingModeSummary.BillingModeSummary
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.BillingModeSummary.BillingModeSummary
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.BillingModeSummary.BillingModeSummary


module Amazonka.DynamoDB.Types.Capacity

-- | Represents the amount of provisioned throughput capacity consumed on a
--   table or an index.
--   
--   <i>See:</i> <a>newCapacity</a> smart constructor.
data Capacity
Capacity' :: Maybe Double -> Maybe Double -> Maybe Double -> Capacity

-- | The total number of read capacity units consumed on a table or an
--   index.
[$sel:readCapacityUnits:Capacity'] :: Capacity -> Maybe Double

-- | The total number of capacity units consumed on a table or an index.
[$sel:capacityUnits:Capacity'] :: Capacity -> Maybe Double

-- | The total number of write capacity units consumed on a table or an
--   index.
[$sel:writeCapacityUnits:Capacity'] :: Capacity -> Maybe Double

-- | Create a value of <a>Capacity</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:Capacity'</a>,
--   <a>capacity_readCapacityUnits</a> - The total number of read capacity
--   units consumed on a table or an index.
--   
--   <a>$sel:capacityUnits:Capacity'</a>, <a>capacity_capacityUnits</a> -
--   The total number of capacity units consumed on a table or an index.
--   
--   <a>$sel:writeCapacityUnits:Capacity'</a>,
--   <a>capacity_writeCapacityUnits</a> - The total number of write
--   capacity units consumed on a table or an index.
newCapacity :: Capacity

-- | The total number of read capacity units consumed on a table or an
--   index.
capacity_readCapacityUnits :: Lens' Capacity (Maybe Double)

-- | The total number of capacity units consumed on a table or an index.
capacity_capacityUnits :: Lens' Capacity (Maybe Double)

-- | The total number of write capacity units consumed on a table or an
--   index.
capacity_writeCapacityUnits :: Lens' Capacity (Maybe Double)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.Capacity.Capacity
instance GHC.Show.Show Amazonka.DynamoDB.Types.Capacity.Capacity
instance GHC.Read.Read Amazonka.DynamoDB.Types.Capacity.Capacity
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.Capacity.Capacity
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.Capacity.Capacity
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.Capacity.Capacity
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.Capacity.Capacity


module Amazonka.DynamoDB.Types.ComparisonOperator
newtype ComparisonOperator
ComparisonOperator' :: Text -> ComparisonOperator
[fromComparisonOperator] :: ComparisonOperator -> Text
pattern ComparisonOperator_BEGINS_WITH :: ComparisonOperator
pattern ComparisonOperator_BETWEEN :: ComparisonOperator
pattern ComparisonOperator_CONTAINS :: ComparisonOperator
pattern ComparisonOperator_EQ :: ComparisonOperator
pattern ComparisonOperator_GE :: ComparisonOperator
pattern ComparisonOperator_GT :: ComparisonOperator
pattern ComparisonOperator_IN :: ComparisonOperator
pattern ComparisonOperator_LE :: ComparisonOperator
pattern ComparisonOperator_LT :: ComparisonOperator
pattern ComparisonOperator_NE :: ComparisonOperator
pattern ComparisonOperator_NOT_CONTAINS :: ComparisonOperator
pattern ComparisonOperator_NOT_NULL :: ComparisonOperator
pattern ComparisonOperator_NULL :: ComparisonOperator
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance GHC.Read.Read Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator
instance GHC.Show.Show Amazonka.DynamoDB.Types.ComparisonOperator.ComparisonOperator


module Amazonka.DynamoDB.Types.Condition

-- | Represents the selection criteria for a <tt>Query</tt> or
--   <tt>Scan</tt> operation:
--   
--   <ul>
--   <li>For a <tt>Query</tt> operation, <tt>Condition</tt> is used for
--   specifying the <tt>KeyConditions</tt> to use when querying a table or
--   an index. For <tt>KeyConditions</tt>, only the following comparison
--   operators are supported:<pre>EQ | LE | LT | GE | GT | BEGINS_WITH |
--   BETWEEN</pre><tt>Condition</tt> is also used in a
--   <tt>QueryFilter</tt>, which evaluates the query results and returns
--   only the desired values.</li>
--   <li>For a <tt>Scan</tt> operation, <tt>Condition</tt> is used in a
--   <tt>ScanFilter</tt>, which evaluates the scan results and returns only
--   the desired values.</li>
--   </ul>
--   
--   <i>See:</i> <a>newCondition</a> smart constructor.
data Condition
Condition' :: Maybe [AttributeValue] -> ComparisonOperator -> Condition

-- | One or more values to evaluate against the supplied attribute. The
--   number of values in the list depends on the
--   <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
[$sel:attributeValueList:Condition'] :: Condition -> Maybe [AttributeValue]

-- | A comparator for evaluating attributes. For example, equals, greater
--   than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
--   
--   For usage examples of <tt>AttributeValueList</tt> and
--   <tt>ComparisonOperator</tt>, see <a>Legacy Conditional Parameters</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:comparisonOperator:Condition'] :: Condition -> ComparisonOperator

-- | Create a value of <a>Condition</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeValueList:Condition'</a>,
--   <a>condition_attributeValueList</a> - One or more values to evaluate
--   against the supplied attribute. The number of values in the list
--   depends on the <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   <a>$sel:comparisonOperator:Condition'</a>,
--   <a>condition_comparisonOperator</a> - A comparator for evaluating
--   attributes. For example, equals, greater than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
--   
--   For usage examples of <tt>AttributeValueList</tt> and
--   <tt>ComparisonOperator</tt>, see <a>Legacy Conditional Parameters</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.
newCondition :: ComparisonOperator -> Condition

-- | One or more values to evaluate against the supplied attribute. The
--   number of values in the list depends on the
--   <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
condition_attributeValueList :: Lens' Condition (Maybe [AttributeValue])

-- | A comparator for evaluating attributes. For example, equals, greater
--   than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
--   
--   For usage examples of <tt>AttributeValueList</tt> and
--   <tt>ComparisonOperator</tt>, see <a>Legacy Conditional Parameters</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.
condition_comparisonOperator :: Lens' Condition ComparisonOperator
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.Condition.Condition
instance GHC.Show.Show Amazonka.DynamoDB.Types.Condition.Condition
instance GHC.Read.Read Amazonka.DynamoDB.Types.Condition.Condition
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.Condition.Condition
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.Condition.Condition
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.Condition.Condition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.Condition.Condition


module Amazonka.DynamoDB.Types.ConditionalOperator
newtype ConditionalOperator
ConditionalOperator' :: Text -> ConditionalOperator
[fromConditionalOperator] :: ConditionalOperator -> Text
pattern ConditionalOperator_AND :: ConditionalOperator
pattern ConditionalOperator_OR :: ConditionalOperator
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance GHC.Read.Read Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator
instance GHC.Show.Show Amazonka.DynamoDB.Types.ConditionalOperator.ConditionalOperator


module Amazonka.DynamoDB.Types.ConsumedCapacity

-- | The capacity units consumed by an operation. The data returned
--   includes the total provisioned throughput consumed, along with
--   statistics for the table and any indexes involved in the operation.
--   <tt>ConsumedCapacity</tt> is only returned if the request asked for
--   it. For more information, see <a>Provisioned Throughput</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>See:</i> <a>newConsumedCapacity</a> smart constructor.
data ConsumedCapacity
ConsumedCapacity' :: Maybe Double -> Maybe (HashMap Text Capacity) -> Maybe Double -> Maybe Double -> Maybe (HashMap Text Capacity) -> Maybe Capacity -> Maybe Text -> ConsumedCapacity

-- | The total number of read capacity units consumed by the operation.
[$sel:readCapacityUnits:ConsumedCapacity'] :: ConsumedCapacity -> Maybe Double

-- | The amount of throughput consumed on each global index affected by the
--   operation.
[$sel:globalSecondaryIndexes:ConsumedCapacity'] :: ConsumedCapacity -> Maybe (HashMap Text Capacity)

-- | The total number of capacity units consumed by the operation.
[$sel:capacityUnits:ConsumedCapacity'] :: ConsumedCapacity -> Maybe Double

-- | The total number of write capacity units consumed by the operation.
[$sel:writeCapacityUnits:ConsumedCapacity'] :: ConsumedCapacity -> Maybe Double

-- | The amount of throughput consumed on each local index affected by the
--   operation.
[$sel:localSecondaryIndexes:ConsumedCapacity'] :: ConsumedCapacity -> Maybe (HashMap Text Capacity)

-- | The amount of throughput consumed on the table affected by the
--   operation.
[$sel:table:ConsumedCapacity'] :: ConsumedCapacity -> Maybe Capacity

-- | The name of the table that was affected by the operation.
[$sel:tableName:ConsumedCapacity'] :: ConsumedCapacity -> Maybe Text

-- | Create a value of <a>ConsumedCapacity</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:ConsumedCapacity'</a>,
--   <a>consumedCapacity_readCapacityUnits</a> - The total number of read
--   capacity units consumed by the operation.
--   
--   <a>$sel:globalSecondaryIndexes:ConsumedCapacity'</a>,
--   <a>consumedCapacity_globalSecondaryIndexes</a> - The amount of
--   throughput consumed on each global index affected by the operation.
--   
--   <a>$sel:capacityUnits:ConsumedCapacity'</a>,
--   <a>consumedCapacity_capacityUnits</a> - The total number of capacity
--   units consumed by the operation.
--   
--   <a>$sel:writeCapacityUnits:ConsumedCapacity'</a>,
--   <a>consumedCapacity_writeCapacityUnits</a> - The total number of write
--   capacity units consumed by the operation.
--   
--   <a>$sel:localSecondaryIndexes:ConsumedCapacity'</a>,
--   <a>consumedCapacity_localSecondaryIndexes</a> - The amount of
--   throughput consumed on each local index affected by the operation.
--   
--   <a>$sel:table:ConsumedCapacity'</a>, <a>consumedCapacity_table</a> -
--   The amount of throughput consumed on the table affected by the
--   operation.
--   
--   <a>$sel:tableName:ConsumedCapacity'</a>,
--   <a>consumedCapacity_tableName</a> - The name of the table that was
--   affected by the operation.
newConsumedCapacity :: ConsumedCapacity

-- | The total number of read capacity units consumed by the operation.
consumedCapacity_readCapacityUnits :: Lens' ConsumedCapacity (Maybe Double)

-- | The amount of throughput consumed on each global index affected by the
--   operation.
consumedCapacity_globalSecondaryIndexes :: Lens' ConsumedCapacity (Maybe (HashMap Text Capacity))

-- | The total number of capacity units consumed by the operation.
consumedCapacity_capacityUnits :: Lens' ConsumedCapacity (Maybe Double)

-- | The total number of write capacity units consumed by the operation.
consumedCapacity_writeCapacityUnits :: Lens' ConsumedCapacity (Maybe Double)

-- | The amount of throughput consumed on each local index affected by the
--   operation.
consumedCapacity_localSecondaryIndexes :: Lens' ConsumedCapacity (Maybe (HashMap Text Capacity))

-- | The amount of throughput consumed on the table affected by the
--   operation.
consumedCapacity_table :: Lens' ConsumedCapacity (Maybe Capacity)

-- | The name of the table that was affected by the operation.
consumedCapacity_tableName :: Lens' ConsumedCapacity (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ConsumedCapacity.ConsumedCapacity
instance GHC.Show.Show Amazonka.DynamoDB.Types.ConsumedCapacity.ConsumedCapacity
instance GHC.Read.Read Amazonka.DynamoDB.Types.ConsumedCapacity.ConsumedCapacity
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ConsumedCapacity.ConsumedCapacity
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ConsumedCapacity.ConsumedCapacity
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ConsumedCapacity.ConsumedCapacity
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ConsumedCapacity.ConsumedCapacity


module Amazonka.DynamoDB.Types.ContinuousBackupsStatus
newtype ContinuousBackupsStatus
ContinuousBackupsStatus' :: Text -> ContinuousBackupsStatus
[fromContinuousBackupsStatus] :: ContinuousBackupsStatus -> Text
pattern ContinuousBackupsStatus_DISABLED :: ContinuousBackupsStatus
pattern ContinuousBackupsStatus_ENABLED :: ContinuousBackupsStatus
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance GHC.Read.Read Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus
instance GHC.Show.Show Amazonka.DynamoDB.Types.ContinuousBackupsStatus.ContinuousBackupsStatus


module Amazonka.DynamoDB.Types.ContributorInsightsAction
newtype ContributorInsightsAction
ContributorInsightsAction' :: Text -> ContributorInsightsAction
[fromContributorInsightsAction] :: ContributorInsightsAction -> Text
pattern ContributorInsightsAction_DISABLE :: ContributorInsightsAction
pattern ContributorInsightsAction_ENABLE :: ContributorInsightsAction
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance GHC.Read.Read Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction
instance GHC.Show.Show Amazonka.DynamoDB.Types.ContributorInsightsAction.ContributorInsightsAction


module Amazonka.DynamoDB.Types.ContributorInsightsStatus
newtype ContributorInsightsStatus
ContributorInsightsStatus' :: Text -> ContributorInsightsStatus
[fromContributorInsightsStatus] :: ContributorInsightsStatus -> Text
pattern ContributorInsightsStatus_DISABLED :: ContributorInsightsStatus
pattern ContributorInsightsStatus_DISABLING :: ContributorInsightsStatus
pattern ContributorInsightsStatus_ENABLED :: ContributorInsightsStatus
pattern ContributorInsightsStatus_ENABLING :: ContributorInsightsStatus
pattern ContributorInsightsStatus_FAILED :: ContributorInsightsStatus
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance GHC.Read.Read Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus
instance GHC.Show.Show Amazonka.DynamoDB.Types.ContributorInsightsStatus.ContributorInsightsStatus


module Amazonka.DynamoDB.Types.ContributorInsightsSummary

-- | Represents a Contributor Insights summary entry.
--   
--   <i>See:</i> <a>newContributorInsightsSummary</a> smart constructor.
data ContributorInsightsSummary
ContributorInsightsSummary' :: Maybe ContributorInsightsStatus -> Maybe Text -> Maybe Text -> ContributorInsightsSummary

-- | Describes the current status for contributor insights for the given
--   table and index, if applicable.
[$sel:contributorInsightsStatus:ContributorInsightsSummary'] :: ContributorInsightsSummary -> Maybe ContributorInsightsStatus

-- | Name of the table associated with the summary.
[$sel:tableName:ContributorInsightsSummary'] :: ContributorInsightsSummary -> Maybe Text

-- | Name of the index associated with the summary, if any.
[$sel:indexName:ContributorInsightsSummary'] :: ContributorInsightsSummary -> Maybe Text

-- | Create a value of <a>ContributorInsightsSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:contributorInsightsStatus:ContributorInsightsSummary'</a>,
--   <a>contributorInsightsSummary_contributorInsightsStatus</a> -
--   Describes the current status for contributor insights for the given
--   table and index, if applicable.
--   
--   <a>$sel:tableName:ContributorInsightsSummary'</a>,
--   <a>contributorInsightsSummary_tableName</a> - Name of the table
--   associated with the summary.
--   
--   <a>$sel:indexName:ContributorInsightsSummary'</a>,
--   <a>contributorInsightsSummary_indexName</a> - Name of the index
--   associated with the summary, if any.
newContributorInsightsSummary :: ContributorInsightsSummary

-- | Describes the current status for contributor insights for the given
--   table and index, if applicable.
contributorInsightsSummary_contributorInsightsStatus :: Lens' ContributorInsightsSummary (Maybe ContributorInsightsStatus)

-- | Name of the table associated with the summary.
contributorInsightsSummary_tableName :: Lens' ContributorInsightsSummary (Maybe Text)

-- | Name of the index associated with the summary, if any.
contributorInsightsSummary_indexName :: Lens' ContributorInsightsSummary (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ContributorInsightsSummary.ContributorInsightsSummary
instance GHC.Show.Show Amazonka.DynamoDB.Types.ContributorInsightsSummary.ContributorInsightsSummary
instance GHC.Read.Read Amazonka.DynamoDB.Types.ContributorInsightsSummary.ContributorInsightsSummary
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ContributorInsightsSummary.ContributorInsightsSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ContributorInsightsSummary.ContributorInsightsSummary
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ContributorInsightsSummary.ContributorInsightsSummary
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ContributorInsightsSummary.ContributorInsightsSummary


module Amazonka.DynamoDB.Types.CreateReplicaAction

-- | Represents a replica to be added.
--   
--   <i>See:</i> <a>newCreateReplicaAction</a> smart constructor.
data CreateReplicaAction
CreateReplicaAction' :: Text -> CreateReplicaAction

-- | The Region of the replica to be added.
[$sel:regionName:CreateReplicaAction'] :: CreateReplicaAction -> Text

-- | Create a value of <a>CreateReplicaAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:CreateReplicaAction'</a>,
--   <a>createReplicaAction_regionName</a> - The Region of the replica to
--   be added.
newCreateReplicaAction :: Text -> CreateReplicaAction

-- | The Region of the replica to be added.
createReplicaAction_regionName :: Lens' CreateReplicaAction Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.CreateReplicaAction.CreateReplicaAction
instance GHC.Show.Show Amazonka.DynamoDB.Types.CreateReplicaAction.CreateReplicaAction
instance GHC.Read.Read Amazonka.DynamoDB.Types.CreateReplicaAction.CreateReplicaAction
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.CreateReplicaAction.CreateReplicaAction
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.CreateReplicaAction.CreateReplicaAction
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.CreateReplicaAction.CreateReplicaAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.CreateReplicaAction.CreateReplicaAction


module Amazonka.DynamoDB.Types.DeleteGlobalSecondaryIndexAction

-- | Represents a global secondary index to be deleted from an existing
--   table.
--   
--   <i>See:</i> <a>newDeleteGlobalSecondaryIndexAction</a> smart
--   constructor.
data DeleteGlobalSecondaryIndexAction
DeleteGlobalSecondaryIndexAction' :: Text -> DeleteGlobalSecondaryIndexAction

-- | The name of the global secondary index to be deleted.
[$sel:indexName:DeleteGlobalSecondaryIndexAction'] :: DeleteGlobalSecondaryIndexAction -> Text

-- | Create a value of <a>DeleteGlobalSecondaryIndexAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:DeleteGlobalSecondaryIndexAction'</a>,
--   <a>deleteGlobalSecondaryIndexAction_indexName</a> - The name of the
--   global secondary index to be deleted.
newDeleteGlobalSecondaryIndexAction :: Text -> DeleteGlobalSecondaryIndexAction

-- | The name of the global secondary index to be deleted.
deleteGlobalSecondaryIndexAction_indexName :: Lens' DeleteGlobalSecondaryIndexAction Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.DeleteGlobalSecondaryIndexAction.DeleteGlobalSecondaryIndexAction
instance GHC.Show.Show Amazonka.DynamoDB.Types.DeleteGlobalSecondaryIndexAction.DeleteGlobalSecondaryIndexAction
instance GHC.Read.Read Amazonka.DynamoDB.Types.DeleteGlobalSecondaryIndexAction.DeleteGlobalSecondaryIndexAction
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.DeleteGlobalSecondaryIndexAction.DeleteGlobalSecondaryIndexAction
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.DeleteGlobalSecondaryIndexAction.DeleteGlobalSecondaryIndexAction
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.DeleteGlobalSecondaryIndexAction.DeleteGlobalSecondaryIndexAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.DeleteGlobalSecondaryIndexAction.DeleteGlobalSecondaryIndexAction


module Amazonka.DynamoDB.Types.DeleteReplicaAction

-- | Represents a replica to be removed.
--   
--   <i>See:</i> <a>newDeleteReplicaAction</a> smart constructor.
data DeleteReplicaAction
DeleteReplicaAction' :: Text -> DeleteReplicaAction

-- | The Region of the replica to be removed.
[$sel:regionName:DeleteReplicaAction'] :: DeleteReplicaAction -> Text

-- | Create a value of <a>DeleteReplicaAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:DeleteReplicaAction'</a>,
--   <a>deleteReplicaAction_regionName</a> - The Region of the replica to
--   be removed.
newDeleteReplicaAction :: Text -> DeleteReplicaAction

-- | The Region of the replica to be removed.
deleteReplicaAction_regionName :: Lens' DeleteReplicaAction Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.DeleteReplicaAction.DeleteReplicaAction
instance GHC.Show.Show Amazonka.DynamoDB.Types.DeleteReplicaAction.DeleteReplicaAction
instance GHC.Read.Read Amazonka.DynamoDB.Types.DeleteReplicaAction.DeleteReplicaAction
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.DeleteReplicaAction.DeleteReplicaAction
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.DeleteReplicaAction.DeleteReplicaAction
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.DeleteReplicaAction.DeleteReplicaAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.DeleteReplicaAction.DeleteReplicaAction


module Amazonka.DynamoDB.Types.DeleteReplicationGroupMemberAction

-- | Represents a replica to be deleted.
--   
--   <i>See:</i> <a>newDeleteReplicationGroupMemberAction</a> smart
--   constructor.
data DeleteReplicationGroupMemberAction
DeleteReplicationGroupMemberAction' :: Text -> DeleteReplicationGroupMemberAction

-- | The Region where the replica exists.
[$sel:regionName:DeleteReplicationGroupMemberAction'] :: DeleteReplicationGroupMemberAction -> Text

-- | Create a value of <a>DeleteReplicationGroupMemberAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:DeleteReplicationGroupMemberAction'</a>,
--   <a>deleteReplicationGroupMemberAction_regionName</a> - The Region
--   where the replica exists.
newDeleteReplicationGroupMemberAction :: Text -> DeleteReplicationGroupMemberAction

-- | The Region where the replica exists.
deleteReplicationGroupMemberAction_regionName :: Lens' DeleteReplicationGroupMemberAction Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.DeleteReplicationGroupMemberAction.DeleteReplicationGroupMemberAction
instance GHC.Show.Show Amazonka.DynamoDB.Types.DeleteReplicationGroupMemberAction.DeleteReplicationGroupMemberAction
instance GHC.Read.Read Amazonka.DynamoDB.Types.DeleteReplicationGroupMemberAction.DeleteReplicationGroupMemberAction
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.DeleteReplicationGroupMemberAction.DeleteReplicationGroupMemberAction
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.DeleteReplicationGroupMemberAction.DeleteReplicationGroupMemberAction
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.DeleteReplicationGroupMemberAction.DeleteReplicationGroupMemberAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.DeleteReplicationGroupMemberAction.DeleteReplicationGroupMemberAction


module Amazonka.DynamoDB.Types.DeleteRequest

-- | Represents a request to perform a <tt>DeleteItem</tt> operation on an
--   item.
--   
--   <i>See:</i> <a>newDeleteRequest</a> smart constructor.
data DeleteRequest
DeleteRequest' :: HashMap Text AttributeValue -> DeleteRequest

-- | A map of attribute name to attribute values, representing the primary
--   key of the item to delete. All of the table's primary key attributes
--   must be specified, and their data types must match those of the
--   table's key schema.
[$sel:key:DeleteRequest'] :: DeleteRequest -> HashMap Text AttributeValue

-- | Create a value of <a>DeleteRequest</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:DeleteRequest'</a>, <a>deleteRequest_key</a> - A map of
--   attribute name to attribute values, representing the primary key of
--   the item to delete. All of the table's primary key attributes must be
--   specified, and their data types must match those of the table's key
--   schema.
newDeleteRequest :: DeleteRequest

-- | A map of attribute name to attribute values, representing the primary
--   key of the item to delete. All of the table's primary key attributes
--   must be specified, and their data types must match those of the
--   table's key schema.
deleteRequest_key :: Lens' DeleteRequest (HashMap Text AttributeValue)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.DeleteRequest.DeleteRequest
instance GHC.Show.Show Amazonka.DynamoDB.Types.DeleteRequest.DeleteRequest
instance GHC.Read.Read Amazonka.DynamoDB.Types.DeleteRequest.DeleteRequest
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.DeleteRequest.DeleteRequest
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.DeleteRequest.DeleteRequest
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.DeleteRequest.DeleteRequest
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.DeleteRequest.DeleteRequest
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.DeleteRequest.DeleteRequest


module Amazonka.DynamoDB.Types.DestinationStatus
newtype DestinationStatus
DestinationStatus' :: Text -> DestinationStatus
[fromDestinationStatus] :: DestinationStatus -> Text
pattern DestinationStatus_ACTIVE :: DestinationStatus
pattern DestinationStatus_DISABLED :: DestinationStatus
pattern DestinationStatus_DISABLING :: DestinationStatus
pattern DestinationStatus_ENABLE_FAILED :: DestinationStatus
pattern DestinationStatus_ENABLING :: DestinationStatus
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance GHC.Read.Read Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus
instance GHC.Show.Show Amazonka.DynamoDB.Types.DestinationStatus.DestinationStatus


module Amazonka.DynamoDB.Types.Endpoint

-- | An endpoint information details.
--   
--   <i>See:</i> <a>newEndpoint</a> smart constructor.
data Endpoint
Endpoint' :: Text -> Integer -> Endpoint

-- | IP address of the endpoint.
[$sel:address:Endpoint'] :: Endpoint -> Text

-- | Endpoint cache time to live (TTL) value.
[$sel:cachePeriodInMinutes:Endpoint'] :: Endpoint -> Integer

-- | Create a value of <a>Endpoint</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:address:Endpoint'</a>, <a>endpoint_address</a> - IP address of
--   the endpoint.
--   
--   <a>$sel:cachePeriodInMinutes:Endpoint'</a>,
--   <a>endpoint_cachePeriodInMinutes</a> - Endpoint cache time to live
--   (TTL) value.
newEndpoint :: Text -> Integer -> Endpoint

-- | IP address of the endpoint.
endpoint_address :: Lens' Endpoint Text

-- | Endpoint cache time to live (TTL) value.
endpoint_cachePeriodInMinutes :: Lens' Endpoint Integer
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.Endpoint.Endpoint
instance GHC.Show.Show Amazonka.DynamoDB.Types.Endpoint.Endpoint
instance GHC.Read.Read Amazonka.DynamoDB.Types.Endpoint.Endpoint
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.Endpoint.Endpoint
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.Endpoint.Endpoint
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.Endpoint.Endpoint
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.Endpoint.Endpoint


module Amazonka.DynamoDB.Types.ExpectedAttributeValue

-- | Represents a condition to be compared with an attribute value. This
--   condition can be used with <tt>DeleteItem</tt>, <tt>PutItem</tt>, or
--   <tt>UpdateItem</tt> operations; if the comparison evaluates to true,
--   the operation succeeds; if not, the operation fails. You can use
--   <tt>ExpectedAttributeValue</tt> in one of two different ways:
--   
--   <ul>
--   <li>Use <tt>AttributeValueList</tt> to specify one or more values to
--   compare against an attribute. Use <tt>ComparisonOperator</tt> to
--   specify how you want to perform the comparison. If the comparison
--   evaluates to true, then the conditional operation succeeds.</li>
--   <li>Use <tt>Value</tt> to specify a value that DynamoDB will compare
--   against an attribute. If the values match, then
--   <tt>ExpectedAttributeValue</tt> evaluates to true and the conditional
--   operation succeeds. Optionally, you can also set <tt>Exists</tt> to
--   false, indicating that you <i>do not</i> expect to find the attribute
--   value in the table. In this case, the conditional operation succeeds
--   only if the comparison evaluates to false.</li>
--   </ul>
--   
--   <tt>Value</tt> and <tt>Exists</tt> are incompatible with
--   <tt>AttributeValueList</tt> and <tt>ComparisonOperator</tt>. Note that
--   if you use both sets of parameters at once, DynamoDB will return a
--   <tt>ValidationException</tt> exception.
--   
--   <i>See:</i> <a>newExpectedAttributeValue</a> smart constructor.
data ExpectedAttributeValue
ExpectedAttributeValue' :: Maybe [AttributeValue] -> Maybe Bool -> Maybe AttributeValue -> Maybe ComparisonOperator -> ExpectedAttributeValue

-- | One or more values to evaluate against the supplied attribute. The
--   number of values in the list depends on the
--   <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   For information on specifying data types in JSON, see <a>JSON Data
--   Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:attributeValueList:ExpectedAttributeValue'] :: ExpectedAttributeValue -> Maybe [AttributeValue]

-- | Causes DynamoDB to evaluate the value before attempting a conditional
--   operation:
--   
--   <ul>
--   <li>If <tt>Exists</tt> is <tt>true</tt>, DynamoDB will check to see if
--   that attribute value already exists in the table. If it is found, then
--   the operation succeeds. If it is not found, the operation fails with a
--   <tt>ConditionCheckFailedException</tt>.</li>
--   <li>If <tt>Exists</tt> is <tt>false</tt>, DynamoDB assumes that the
--   attribute value does not exist in the table. If in fact the value does
--   not exist, then the assumption is valid and the operation succeeds. If
--   the value is found, despite the assumption that it does not exist, the
--   operation fails with a <tt>ConditionCheckFailedException</tt>.</li>
--   </ul>
--   
--   The default setting for <tt>Exists</tt> is <tt>true</tt>. If you
--   supply a <tt>Value</tt> all by itself, DynamoDB assumes the attribute
--   exists: You don't have to set <tt>Exists</tt> to <tt>true</tt>,
--   because it is implied.
--   
--   DynamoDB returns a <tt>ValidationException</tt> if:
--   
--   <ul>
--   <li><tt>Exists</tt> is <tt>true</tt> but there is no <tt>Value</tt> to
--   check. (You expect a value to exist, but don't specify what that value
--   is.)</li>
--   <li><tt>Exists</tt> is <tt>false</tt> but you also provide a
--   <tt>Value</tt>. (You cannot expect an attribute to have a value, while
--   also expecting it not to exist.)</li>
--   </ul>
[$sel:exists:ExpectedAttributeValue'] :: ExpectedAttributeValue -> Maybe Bool

-- | Represents the data for the expected attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:value:ExpectedAttributeValue'] :: ExpectedAttributeValue -> Maybe AttributeValue

-- | A comparator for evaluating attributes in the
--   <tt>AttributeValueList</tt>. For example, equals, greater than, less
--   than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
[$sel:comparisonOperator:ExpectedAttributeValue'] :: ExpectedAttributeValue -> Maybe ComparisonOperator

-- | Create a value of <a>ExpectedAttributeValue</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeValueList:ExpectedAttributeValue'</a>,
--   <a>expectedAttributeValue_attributeValueList</a> - One or more values
--   to evaluate against the supplied attribute. The number of values in
--   the list depends on the <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   For information on specifying data types in JSON, see <a>JSON Data
--   Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:exists:ExpectedAttributeValue'</a>,
--   <a>expectedAttributeValue_exists</a> - Causes DynamoDB to evaluate the
--   value before attempting a conditional operation:
--   
--   <ul>
--   <li>If <tt>Exists</tt> is <tt>true</tt>, DynamoDB will check to see if
--   that attribute value already exists in the table. If it is found, then
--   the operation succeeds. If it is not found, the operation fails with a
--   <tt>ConditionCheckFailedException</tt>.</li>
--   <li>If <tt>Exists</tt> is <tt>false</tt>, DynamoDB assumes that the
--   attribute value does not exist in the table. If in fact the value does
--   not exist, then the assumption is valid and the operation succeeds. If
--   the value is found, despite the assumption that it does not exist, the
--   operation fails with a <tt>ConditionCheckFailedException</tt>.</li>
--   </ul>
--   
--   The default setting for <tt>Exists</tt> is <tt>true</tt>. If you
--   supply a <tt>Value</tt> all by itself, DynamoDB assumes the attribute
--   exists: You don't have to set <tt>Exists</tt> to <tt>true</tt>,
--   because it is implied.
--   
--   DynamoDB returns a <tt>ValidationException</tt> if:
--   
--   <ul>
--   <li><tt>Exists</tt> is <tt>true</tt> but there is no <tt>Value</tt> to
--   check. (You expect a value to exist, but don't specify what that value
--   is.)</li>
--   <li><tt>Exists</tt> is <tt>false</tt> but you also provide a
--   <tt>Value</tt>. (You cannot expect an attribute to have a value, while
--   also expecting it not to exist.)</li>
--   </ul>
--   
--   <a>$sel:value:ExpectedAttributeValue'</a>,
--   <a>expectedAttributeValue_value</a> - Represents the data for the
--   expected attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:comparisonOperator:ExpectedAttributeValue'</a>,
--   <a>expectedAttributeValue_comparisonOperator</a> - A comparator for
--   evaluating attributes in the <tt>AttributeValueList</tt>. For example,
--   equals, greater than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
newExpectedAttributeValue :: ExpectedAttributeValue

-- | One or more values to evaluate against the supplied attribute. The
--   number of values in the list depends on the
--   <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   For information on specifying data types in JSON, see <a>JSON Data
--   Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.
expectedAttributeValue_attributeValueList :: Lens' ExpectedAttributeValue (Maybe [AttributeValue])

-- | Causes DynamoDB to evaluate the value before attempting a conditional
--   operation:
--   
--   <ul>
--   <li>If <tt>Exists</tt> is <tt>true</tt>, DynamoDB will check to see if
--   that attribute value already exists in the table. If it is found, then
--   the operation succeeds. If it is not found, the operation fails with a
--   <tt>ConditionCheckFailedException</tt>.</li>
--   <li>If <tt>Exists</tt> is <tt>false</tt>, DynamoDB assumes that the
--   attribute value does not exist in the table. If in fact the value does
--   not exist, then the assumption is valid and the operation succeeds. If
--   the value is found, despite the assumption that it does not exist, the
--   operation fails with a <tt>ConditionCheckFailedException</tt>.</li>
--   </ul>
--   
--   The default setting for <tt>Exists</tt> is <tt>true</tt>. If you
--   supply a <tt>Value</tt> all by itself, DynamoDB assumes the attribute
--   exists: You don't have to set <tt>Exists</tt> to <tt>true</tt>,
--   because it is implied.
--   
--   DynamoDB returns a <tt>ValidationException</tt> if:
--   
--   <ul>
--   <li><tt>Exists</tt> is <tt>true</tt> but there is no <tt>Value</tt> to
--   check. (You expect a value to exist, but don't specify what that value
--   is.)</li>
--   <li><tt>Exists</tt> is <tt>false</tt> but you also provide a
--   <tt>Value</tt>. (You cannot expect an attribute to have a value, while
--   also expecting it not to exist.)</li>
--   </ul>
expectedAttributeValue_exists :: Lens' ExpectedAttributeValue (Maybe Bool)

-- | Represents the data for the expected attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
expectedAttributeValue_value :: Lens' ExpectedAttributeValue (Maybe AttributeValue)

-- | A comparator for evaluating attributes in the
--   <tt>AttributeValueList</tt>. For example, equals, greater than, less
--   than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
expectedAttributeValue_comparisonOperator :: Lens' ExpectedAttributeValue (Maybe ComparisonOperator)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ExpectedAttributeValue.ExpectedAttributeValue
instance GHC.Show.Show Amazonka.DynamoDB.Types.ExpectedAttributeValue.ExpectedAttributeValue
instance GHC.Read.Read Amazonka.DynamoDB.Types.ExpectedAttributeValue.ExpectedAttributeValue
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ExpectedAttributeValue.ExpectedAttributeValue
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ExpectedAttributeValue.ExpectedAttributeValue
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ExpectedAttributeValue.ExpectedAttributeValue
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ExpectedAttributeValue.ExpectedAttributeValue


module Amazonka.DynamoDB.Types.ExportFormat
newtype ExportFormat
ExportFormat' :: Text -> ExportFormat
[fromExportFormat] :: ExportFormat -> Text
pattern ExportFormat_DYNAMODB_JSON :: ExportFormat
pattern ExportFormat_ION :: ExportFormat
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance GHC.Read.Read Amazonka.DynamoDB.Types.ExportFormat.ExportFormat
instance GHC.Show.Show Amazonka.DynamoDB.Types.ExportFormat.ExportFormat


module Amazonka.DynamoDB.Types.ExportStatus
newtype ExportStatus
ExportStatus' :: Text -> ExportStatus
[fromExportStatus] :: ExportStatus -> Text
pattern ExportStatus_COMPLETED :: ExportStatus
pattern ExportStatus_FAILED :: ExportStatus
pattern ExportStatus_IN_PROGRESS :: ExportStatus
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance GHC.Read.Read Amazonka.DynamoDB.Types.ExportStatus.ExportStatus
instance GHC.Show.Show Amazonka.DynamoDB.Types.ExportStatus.ExportStatus


module Amazonka.DynamoDB.Types.ExportSummary

-- | Summary information about an export task.
--   
--   <i>See:</i> <a>newExportSummary</a> smart constructor.
data ExportSummary
ExportSummary' :: Maybe ExportStatus -> Maybe Text -> ExportSummary

-- | Export can be in one of the following states: IN_PROGRESS, COMPLETED,
--   or FAILED.
[$sel:exportStatus:ExportSummary'] :: ExportSummary -> Maybe ExportStatus

-- | The Amazon Resource Name (ARN) of the export.
[$sel:exportArn:ExportSummary'] :: ExportSummary -> Maybe Text

-- | Create a value of <a>ExportSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exportStatus:ExportSummary'</a>,
--   <a>exportSummary_exportStatus</a> - Export can be in one of the
--   following states: IN_PROGRESS, COMPLETED, or FAILED.
--   
--   <a>$sel:exportArn:ExportSummary'</a>, <a>exportSummary_exportArn</a> -
--   The Amazon Resource Name (ARN) of the export.
newExportSummary :: ExportSummary

-- | Export can be in one of the following states: IN_PROGRESS, COMPLETED,
--   or FAILED.
exportSummary_exportStatus :: Lens' ExportSummary (Maybe ExportStatus)

-- | The Amazon Resource Name (ARN) of the export.
exportSummary_exportArn :: Lens' ExportSummary (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ExportSummary.ExportSummary
instance GHC.Show.Show Amazonka.DynamoDB.Types.ExportSummary.ExportSummary
instance GHC.Read.Read Amazonka.DynamoDB.Types.ExportSummary.ExportSummary
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ExportSummary.ExportSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ExportSummary.ExportSummary
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ExportSummary.ExportSummary
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ExportSummary.ExportSummary


module Amazonka.DynamoDB.Types.FailureException

-- | Represents a failure a contributor insights operation.
--   
--   <i>See:</i> <a>newFailureException</a> smart constructor.
data FailureException
FailureException' :: Maybe Text -> Maybe Text -> FailureException

-- | Exception name.
[$sel:exceptionName:FailureException'] :: FailureException -> Maybe Text

-- | Description of the failure.
[$sel:exceptionDescription:FailureException'] :: FailureException -> Maybe Text

-- | Create a value of <a>FailureException</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exceptionName:FailureException'</a>,
--   <a>failureException_exceptionName</a> - Exception name.
--   
--   <a>$sel:exceptionDescription:FailureException'</a>,
--   <a>failureException_exceptionDescription</a> - Description of the
--   failure.
newFailureException :: FailureException

-- | Exception name.
failureException_exceptionName :: Lens' FailureException (Maybe Text)

-- | Description of the failure.
failureException_exceptionDescription :: Lens' FailureException (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.FailureException.FailureException
instance GHC.Show.Show Amazonka.DynamoDB.Types.FailureException.FailureException
instance GHC.Read.Read Amazonka.DynamoDB.Types.FailureException.FailureException
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.FailureException.FailureException
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.FailureException.FailureException
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.FailureException.FailureException
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.FailureException.FailureException


module Amazonka.DynamoDB.Types.Get

-- | Specifies an item and related attribute values to retrieve in a
--   <tt>TransactGetItem</tt> object.
--   
--   <i>See:</i> <a>newGet</a> smart constructor.
data Get
Get' :: Maybe Text -> Maybe (HashMap Text Text) -> HashMap Text AttributeValue -> Text -> Get

-- | A string that identifies one or more attributes of the specified item
--   to retrieve from the table. The attributes in the expression must be
--   separated by commas. If no attribute names are specified, then all
--   attributes of the specified item are returned. If any of the requested
--   attributes are not found, they do not appear in the result.
[$sel:projectionExpression:Get'] :: Get -> Maybe Text

-- | One or more substitution tokens for attribute names in the
--   ProjectionExpression parameter.
[$sel:expressionAttributeNames:Get'] :: Get -> Maybe (HashMap Text Text)

-- | A map of attribute names to <tt>AttributeValue</tt> objects that
--   specifies the primary key of the item to retrieve.
[$sel:key:Get'] :: Get -> HashMap Text AttributeValue

-- | The name of the table from which to retrieve the specified item.
[$sel:tableName:Get'] :: Get -> Text

-- | Create a value of <a>Get</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionExpression:Get'</a>, <a>get_projectionExpression</a>
--   - A string that identifies one or more attributes of the specified
--   item to retrieve from the table. The attributes in the expression must
--   be separated by commas. If no attribute names are specified, then all
--   attributes of the specified item are returned. If any of the requested
--   attributes are not found, they do not appear in the result.
--   
--   <a>$sel:expressionAttributeNames:Get'</a>,
--   <a>get_expressionAttributeNames</a> - One or more substitution tokens
--   for attribute names in the ProjectionExpression parameter.
--   
--   <a>$sel:key:Get'</a>, <a>get_key</a> - A map of attribute names to
--   <tt>AttributeValue</tt> objects that specifies the primary key of the
--   item to retrieve.
--   
--   <a>$sel:tableName:Get'</a>, <a>get_tableName</a> - The name of the
--   table from which to retrieve the specified item.
newGet :: Text -> Get

-- | A string that identifies one or more attributes of the specified item
--   to retrieve from the table. The attributes in the expression must be
--   separated by commas. If no attribute names are specified, then all
--   attributes of the specified item are returned. If any of the requested
--   attributes are not found, they do not appear in the result.
get_projectionExpression :: Lens' Get (Maybe Text)

-- | One or more substitution tokens for attribute names in the
--   ProjectionExpression parameter.
get_expressionAttributeNames :: Lens' Get (Maybe (HashMap Text Text))

-- | A map of attribute names to <tt>AttributeValue</tt> objects that
--   specifies the primary key of the item to retrieve.
get_key :: Lens' Get (HashMap Text AttributeValue)

-- | The name of the table from which to retrieve the specified item.
get_tableName :: Lens' Get Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.Get.Get
instance GHC.Show.Show Amazonka.DynamoDB.Types.Get.Get
instance GHC.Read.Read Amazonka.DynamoDB.Types.Get.Get
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.Get.Get
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.Get.Get
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.Get.Get
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.Get.Get


module Amazonka.DynamoDB.Types.GlobalSecondaryIndexAutoScalingUpdate

-- | Represents the auto scaling settings of a global secondary index for a
--   global table that will be modified.
--   
--   <i>See:</i> <a>newGlobalSecondaryIndexAutoScalingUpdate</a> smart
--   constructor.
data GlobalSecondaryIndexAutoScalingUpdate
GlobalSecondaryIndexAutoScalingUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe Text -> GlobalSecondaryIndexAutoScalingUpdate
[$sel:provisionedWriteCapacityAutoScalingUpdate:GlobalSecondaryIndexAutoScalingUpdate'] :: GlobalSecondaryIndexAutoScalingUpdate -> Maybe AutoScalingSettingsUpdate

-- | The name of the global secondary index.
[$sel:indexName:GlobalSecondaryIndexAutoScalingUpdate'] :: GlobalSecondaryIndexAutoScalingUpdate -> Maybe Text

-- | Create a value of <a>GlobalSecondaryIndexAutoScalingUpdate</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingUpdate:GlobalSecondaryIndexAutoScalingUpdate'</a>,
--   <a>globalSecondaryIndexAutoScalingUpdate_provisionedWriteCapacityAutoScalingUpdate</a>
--   - Undocumented member.
--   
--   <a>$sel:indexName:GlobalSecondaryIndexAutoScalingUpdate'</a>,
--   <a>globalSecondaryIndexAutoScalingUpdate_indexName</a> - The name of
--   the global secondary index.
newGlobalSecondaryIndexAutoScalingUpdate :: GlobalSecondaryIndexAutoScalingUpdate

-- | Undocumented member.
globalSecondaryIndexAutoScalingUpdate_provisionedWriteCapacityAutoScalingUpdate :: Lens' GlobalSecondaryIndexAutoScalingUpdate (Maybe AutoScalingSettingsUpdate)

-- | The name of the global secondary index.
globalSecondaryIndexAutoScalingUpdate_indexName :: Lens' GlobalSecondaryIndexAutoScalingUpdate (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.GlobalSecondaryIndexAutoScalingUpdate.GlobalSecondaryIndexAutoScalingUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.GlobalSecondaryIndexAutoScalingUpdate.GlobalSecondaryIndexAutoScalingUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.GlobalSecondaryIndexAutoScalingUpdate.GlobalSecondaryIndexAutoScalingUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.GlobalSecondaryIndexAutoScalingUpdate.GlobalSecondaryIndexAutoScalingUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.GlobalSecondaryIndexAutoScalingUpdate.GlobalSecondaryIndexAutoScalingUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.GlobalSecondaryIndexAutoScalingUpdate.GlobalSecondaryIndexAutoScalingUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.GlobalSecondaryIndexAutoScalingUpdate.GlobalSecondaryIndexAutoScalingUpdate


module Amazonka.DynamoDB.Types.GlobalTableGlobalSecondaryIndexSettingsUpdate

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
--   
--   <i>See:</i> <a>newGlobalTableGlobalSecondaryIndexSettingsUpdate</a>
--   smart constructor.
data GlobalTableGlobalSecondaryIndexSettingsUpdate
GlobalTableGlobalSecondaryIndexSettingsUpdate' :: Maybe Natural -> Maybe AutoScalingSettingsUpdate -> Text -> GlobalTableGlobalSecondaryIndexSettingsUpdate

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
[$sel:provisionedWriteCapacityUnits:GlobalTableGlobalSecondaryIndexSettingsUpdate'] :: GlobalTableGlobalSecondaryIndexSettingsUpdate -> Maybe Natural

-- | Auto scaling settings for managing a global secondary index's write
--   capacity units.
[$sel:provisionedWriteCapacityAutoScalingSettingsUpdate:GlobalTableGlobalSecondaryIndexSettingsUpdate'] :: GlobalTableGlobalSecondaryIndexSettingsUpdate -> Maybe AutoScalingSettingsUpdate

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
[$sel:indexName:GlobalTableGlobalSecondaryIndexSettingsUpdate'] :: GlobalTableGlobalSecondaryIndexSettingsUpdate -> Text

-- | Create a value of <a>GlobalTableGlobalSecondaryIndexSettingsUpdate</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedWriteCapacityUnits:GlobalTableGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>globalTableGlobalSecondaryIndexSettingsUpdate_provisionedWriteCapacityUnits</a>
--   - The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingSettingsUpdate:GlobalTableGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>globalTableGlobalSecondaryIndexSettingsUpdate_provisionedWriteCapacityAutoScalingSettingsUpdate</a>
--   - Auto scaling settings for managing a global secondary index's write
--   capacity units.
--   
--   <a>$sel:indexName:GlobalTableGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>globalTableGlobalSecondaryIndexSettingsUpdate_indexName</a> - The
--   name of the global secondary index. The name must be unique among all
--   other indexes on this table.
newGlobalTableGlobalSecondaryIndexSettingsUpdate :: Text -> GlobalTableGlobalSecondaryIndexSettingsUpdate

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
globalTableGlobalSecondaryIndexSettingsUpdate_provisionedWriteCapacityUnits :: Lens' GlobalTableGlobalSecondaryIndexSettingsUpdate (Maybe Natural)

-- | Auto scaling settings for managing a global secondary index's write
--   capacity units.
globalTableGlobalSecondaryIndexSettingsUpdate_provisionedWriteCapacityAutoScalingSettingsUpdate :: Lens' GlobalTableGlobalSecondaryIndexSettingsUpdate (Maybe AutoScalingSettingsUpdate)

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
globalTableGlobalSecondaryIndexSettingsUpdate_indexName :: Lens' GlobalTableGlobalSecondaryIndexSettingsUpdate Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.GlobalTableGlobalSecondaryIndexSettingsUpdate.GlobalTableGlobalSecondaryIndexSettingsUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.GlobalTableGlobalSecondaryIndexSettingsUpdate.GlobalTableGlobalSecondaryIndexSettingsUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.GlobalTableGlobalSecondaryIndexSettingsUpdate.GlobalTableGlobalSecondaryIndexSettingsUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.GlobalTableGlobalSecondaryIndexSettingsUpdate.GlobalTableGlobalSecondaryIndexSettingsUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.GlobalTableGlobalSecondaryIndexSettingsUpdate.GlobalTableGlobalSecondaryIndexSettingsUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.GlobalTableGlobalSecondaryIndexSettingsUpdate.GlobalTableGlobalSecondaryIndexSettingsUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.GlobalTableGlobalSecondaryIndexSettingsUpdate.GlobalTableGlobalSecondaryIndexSettingsUpdate


module Amazonka.DynamoDB.Types.GlobalTableStatus
newtype GlobalTableStatus
GlobalTableStatus' :: Text -> GlobalTableStatus
[fromGlobalTableStatus] :: GlobalTableStatus -> Text
pattern GlobalTableStatus_ACTIVE :: GlobalTableStatus
pattern GlobalTableStatus_CREATING :: GlobalTableStatus
pattern GlobalTableStatus_DELETING :: GlobalTableStatus
pattern GlobalTableStatus_UPDATING :: GlobalTableStatus
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance GHC.Read.Read Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus
instance GHC.Show.Show Amazonka.DynamoDB.Types.GlobalTableStatus.GlobalTableStatus


module Amazonka.DynamoDB.Types.IndexStatus
newtype IndexStatus
IndexStatus' :: Text -> IndexStatus
[fromIndexStatus] :: IndexStatus -> Text
pattern IndexStatus_ACTIVE :: IndexStatus
pattern IndexStatus_CREATING :: IndexStatus
pattern IndexStatus_DELETING :: IndexStatus
pattern IndexStatus_UPDATING :: IndexStatus
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance GHC.Read.Read Amazonka.DynamoDB.Types.IndexStatus.IndexStatus
instance GHC.Show.Show Amazonka.DynamoDB.Types.IndexStatus.IndexStatus


module Amazonka.DynamoDB.Types.ItemCollectionMetrics

-- | Information about item collections, if any, that were affected by the
--   operation. <tt>ItemCollectionMetrics</tt> is only returned if the
--   request asked for it. If the table does not have any local secondary
--   indexes, this information is not returned in the response.
--   
--   <i>See:</i> <a>newItemCollectionMetrics</a> smart constructor.
data ItemCollectionMetrics
ItemCollectionMetrics' :: Maybe (HashMap Text AttributeValue) -> Maybe [Double] -> ItemCollectionMetrics

-- | The partition key value of the item collection. This value is the same
--   as the partition key value of the item.
[$sel:itemCollectionKey:ItemCollectionMetrics'] :: ItemCollectionMetrics -> Maybe (HashMap Text AttributeValue)

-- | An estimate of item collection size, in gigabytes. This value is a
--   two-element array containing a lower bound and an upper bound for the
--   estimate. The estimate includes the size of all the items in the
--   table, plus the size of all attributes projected into all of the local
--   secondary indexes on that table. Use this estimate to measure whether
--   a local secondary index is approaching its size limit.
--   
--   The estimate is subject to change over time; therefore, do not rely on
--   the precision or accuracy of the estimate.
[$sel:sizeEstimateRangeGB:ItemCollectionMetrics'] :: ItemCollectionMetrics -> Maybe [Double]

-- | Create a value of <a>ItemCollectionMetrics</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionKey:ItemCollectionMetrics'</a>,
--   <a>itemCollectionMetrics_itemCollectionKey</a> - The partition key
--   value of the item collection. This value is the same as the partition
--   key value of the item.
--   
--   <a>$sel:sizeEstimateRangeGB:ItemCollectionMetrics'</a>,
--   <a>itemCollectionMetrics_sizeEstimateRangeGB</a> - An estimate of item
--   collection size, in gigabytes. This value is a two-element array
--   containing a lower bound and an upper bound for the estimate. The
--   estimate includes the size of all the items in the table, plus the
--   size of all attributes projected into all of the local secondary
--   indexes on that table. Use this estimate to measure whether a local
--   secondary index is approaching its size limit.
--   
--   The estimate is subject to change over time; therefore, do not rely on
--   the precision or accuracy of the estimate.
newItemCollectionMetrics :: ItemCollectionMetrics

-- | The partition key value of the item collection. This value is the same
--   as the partition key value of the item.
itemCollectionMetrics_itemCollectionKey :: Lens' ItemCollectionMetrics (Maybe (HashMap Text AttributeValue))

-- | An estimate of item collection size, in gigabytes. This value is a
--   two-element array containing a lower bound and an upper bound for the
--   estimate. The estimate includes the size of all the items in the
--   table, plus the size of all attributes projected into all of the local
--   secondary indexes on that table. Use this estimate to measure whether
--   a local secondary index is approaching its size limit.
--   
--   The estimate is subject to change over time; therefore, do not rely on
--   the precision or accuracy of the estimate.
itemCollectionMetrics_sizeEstimateRangeGB :: Lens' ItemCollectionMetrics (Maybe [Double])
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ItemCollectionMetrics.ItemCollectionMetrics
instance GHC.Show.Show Amazonka.DynamoDB.Types.ItemCollectionMetrics.ItemCollectionMetrics
instance GHC.Read.Read Amazonka.DynamoDB.Types.ItemCollectionMetrics.ItemCollectionMetrics
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ItemCollectionMetrics.ItemCollectionMetrics
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ItemCollectionMetrics.ItemCollectionMetrics
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ItemCollectionMetrics.ItemCollectionMetrics
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ItemCollectionMetrics.ItemCollectionMetrics


module Amazonka.DynamoDB.Types.ItemResponse

-- | Details for the requested item.
--   
--   <i>See:</i> <a>newItemResponse</a> smart constructor.
data ItemResponse
ItemResponse' :: Maybe (HashMap Text AttributeValue) -> ItemResponse

-- | Map of attribute data consisting of the data type and attribute value.
[$sel:item:ItemResponse'] :: ItemResponse -> Maybe (HashMap Text AttributeValue)

-- | Create a value of <a>ItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:item:ItemResponse'</a>, <a>itemResponse_item</a> - Map of
--   attribute data consisting of the data type and attribute value.
newItemResponse :: ItemResponse

-- | Map of attribute data consisting of the data type and attribute value.
itemResponse_item :: Lens' ItemResponse (Maybe (HashMap Text AttributeValue))
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ItemResponse.ItemResponse
instance GHC.Show.Show Amazonka.DynamoDB.Types.ItemResponse.ItemResponse
instance GHC.Read.Read Amazonka.DynamoDB.Types.ItemResponse.ItemResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ItemResponse.ItemResponse
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ItemResponse.ItemResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ItemResponse.ItemResponse
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ItemResponse.ItemResponse


module Amazonka.DynamoDB.Types.KeyType
newtype KeyType
KeyType' :: Text -> KeyType
[fromKeyType] :: KeyType -> Text
pattern KeyType_HASH :: KeyType
pattern KeyType_RANGE :: KeyType
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.KeyType.KeyType
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.KeyType.KeyType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.KeyType.KeyType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.KeyType.KeyType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.KeyType.KeyType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.KeyType.KeyType
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.KeyType.KeyType
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.KeyType.KeyType
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.KeyType.KeyType
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.KeyType.KeyType
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.KeyType.KeyType
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.KeyType.KeyType
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.KeyType.KeyType
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.KeyType.KeyType
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.KeyType.KeyType
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.KeyType.KeyType
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.KeyType.KeyType
instance GHC.Read.Read Amazonka.DynamoDB.Types.KeyType.KeyType
instance GHC.Show.Show Amazonka.DynamoDB.Types.KeyType.KeyType


module Amazonka.DynamoDB.Types.KeySchemaElement

-- | Represents <i>a single element</i> of a key schema. A key schema
--   specifies the attributes that make up the primary key of a table, or
--   the key attributes of an index.
--   
--   A <tt>KeySchemaElement</tt> represents exactly one attribute of the
--   primary key. For example, a simple primary key would be represented by
--   one <tt>KeySchemaElement</tt> (for the partition key). A composite
--   primary key would require one <tt>KeySchemaElement</tt> for the
--   partition key, and another <tt>KeySchemaElement</tt> for the sort key.
--   
--   A <tt>KeySchemaElement</tt> must be a scalar, top-level attribute (not
--   a nested attribute). The data type must be one of String, Number, or
--   Binary. The attribute cannot be nested within a List or a Map.
--   
--   <i>See:</i> <a>newKeySchemaElement</a> smart constructor.
data KeySchemaElement
KeySchemaElement' :: Text -> KeyType -> KeySchemaElement

-- | The name of a key attribute.
[$sel:attributeName:KeySchemaElement'] :: KeySchemaElement -> Text

-- | The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keyType:KeySchemaElement'] :: KeySchemaElement -> KeyType

-- | Create a value of <a>KeySchemaElement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeName:KeySchemaElement'</a>,
--   <a>keySchemaElement_attributeName</a> - The name of a key attribute.
--   
--   <a>$sel:keyType:KeySchemaElement'</a>, <a>keySchemaElement_keyType</a>
--   - The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
newKeySchemaElement :: Text -> KeyType -> KeySchemaElement

-- | The name of a key attribute.
keySchemaElement_attributeName :: Lens' KeySchemaElement Text

-- | The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
keySchemaElement_keyType :: Lens' KeySchemaElement KeyType
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.KeySchemaElement.KeySchemaElement
instance GHC.Show.Show Amazonka.DynamoDB.Types.KeySchemaElement.KeySchemaElement
instance GHC.Read.Read Amazonka.DynamoDB.Types.KeySchemaElement.KeySchemaElement
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.KeySchemaElement.KeySchemaElement
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.KeySchemaElement.KeySchemaElement
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.KeySchemaElement.KeySchemaElement
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.KeySchemaElement.KeySchemaElement
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.KeySchemaElement.KeySchemaElement


module Amazonka.DynamoDB.Types.KeysAndAttributes

-- | Represents a set of primary keys and, for each key, the attributes to
--   retrieve from the table.
--   
--   For each primary key, you must provide <i>all</i> of the key
--   attributes. For example, with a simple primary key, you only need to
--   provide the partition key. For a composite primary key, you must
--   provide <i>both</i> the partition key and the sort key.
--   
--   <i>See:</i> <a>newKeysAndAttributes</a> smart constructor.
data KeysAndAttributes
KeysAndAttributes' :: Maybe Text -> Maybe (NonEmpty Text) -> Maybe (HashMap Text Text) -> Maybe Bool -> NonEmpty (HashMap Text AttributeValue) -> KeysAndAttributes

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the <tt>ProjectionExpression</tt>
--   must be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:projectionExpression:KeysAndAttributes'] :: KeysAndAttributes -> Maybe Text

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>Legacy Conditional Parameters</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:attributesToGet:KeysAndAttributes'] :: KeysAndAttributes -> Maybe (NonEmpty Text)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Accessing
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:expressionAttributeNames:KeysAndAttributes'] :: KeysAndAttributes -> Maybe (HashMap Text Text)

-- | The consistency of a read operation. If set to <tt>true</tt>, then a
--   strongly consistent read is used; otherwise, an eventually consistent
--   read is used.
[$sel:consistentRead:KeysAndAttributes'] :: KeysAndAttributes -> Maybe Bool

-- | The primary key attribute values that define the items and the
--   attributes associated with the items.
[$sel:keys:KeysAndAttributes'] :: KeysAndAttributes -> NonEmpty (HashMap Text AttributeValue)

-- | Create a value of <a>KeysAndAttributes</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionExpression:KeysAndAttributes'</a>,
--   <a>keysAndAttributes_projectionExpression</a> - A string that
--   identifies one or more attributes to retrieve from the table. These
--   attributes can include scalars, sets, or elements of a JSON document.
--   The attributes in the <tt>ProjectionExpression</tt> must be separated
--   by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributesToGet:KeysAndAttributes'</a>,
--   <a>keysAndAttributes_attributesToGet</a> - This is a legacy parameter.
--   Use <tt>ProjectionExpression</tt> instead. For more information, see
--   <a>Legacy Conditional Parameters</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:expressionAttributeNames:KeysAndAttributes'</a>,
--   <a>keysAndAttributes_expressionAttributeNames</a> - One or more
--   substitution tokens for attribute names in an expression. The
--   following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Accessing
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:consistentRead:KeysAndAttributes'</a>,
--   <a>keysAndAttributes_consistentRead</a> - The consistency of a read
--   operation. If set to <tt>true</tt>, then a strongly consistent read is
--   used; otherwise, an eventually consistent read is used.
--   
--   <a>$sel:keys:KeysAndAttributes'</a>, <a>keysAndAttributes_keys</a> -
--   The primary key attribute values that define the items and the
--   attributes associated with the items.
newKeysAndAttributes :: NonEmpty (HashMap Text AttributeValue) -> KeysAndAttributes

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the <tt>ProjectionExpression</tt>
--   must be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
keysAndAttributes_projectionExpression :: Lens' KeysAndAttributes (Maybe Text)

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>Legacy Conditional Parameters</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
keysAndAttributes_attributesToGet :: Lens' KeysAndAttributes (Maybe (NonEmpty Text))

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Accessing
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
keysAndAttributes_expressionAttributeNames :: Lens' KeysAndAttributes (Maybe (HashMap Text Text))

-- | The consistency of a read operation. If set to <tt>true</tt>, then a
--   strongly consistent read is used; otherwise, an eventually consistent
--   read is used.
keysAndAttributes_consistentRead :: Lens' KeysAndAttributes (Maybe Bool)

-- | The primary key attribute values that define the items and the
--   attributes associated with the items.
keysAndAttributes_keys :: Lens' KeysAndAttributes (NonEmpty (HashMap Text AttributeValue))
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.KeysAndAttributes.KeysAndAttributes
instance GHC.Show.Show Amazonka.DynamoDB.Types.KeysAndAttributes.KeysAndAttributes
instance GHC.Read.Read Amazonka.DynamoDB.Types.KeysAndAttributes.KeysAndAttributes
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.KeysAndAttributes.KeysAndAttributes
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.KeysAndAttributes.KeysAndAttributes
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.KeysAndAttributes.KeysAndAttributes
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.KeysAndAttributes.KeysAndAttributes
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.KeysAndAttributes.KeysAndAttributes


module Amazonka.DynamoDB.Types.KinesisDataStreamDestination

-- | Describes a Kinesis data stream destination.
--   
--   <i>See:</i> <a>newKinesisDataStreamDestination</a> smart constructor.
data KinesisDataStreamDestination
KinesisDataStreamDestination' :: Maybe DestinationStatus -> Maybe Text -> Maybe Text -> KinesisDataStreamDestination

-- | The current status of replication.
[$sel:destinationStatus:KinesisDataStreamDestination'] :: KinesisDataStreamDestination -> Maybe DestinationStatus

-- | The ARN for a specific Kinesis data stream.
[$sel:streamArn:KinesisDataStreamDestination'] :: KinesisDataStreamDestination -> Maybe Text

-- | The human-readable string that corresponds to the replica status.
[$sel:destinationStatusDescription:KinesisDataStreamDestination'] :: KinesisDataStreamDestination -> Maybe Text

-- | Create a value of <a>KinesisDataStreamDestination</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:destinationStatus:KinesisDataStreamDestination'</a>,
--   <a>kinesisDataStreamDestination_destinationStatus</a> - The current
--   status of replication.
--   
--   <a>$sel:streamArn:KinesisDataStreamDestination'</a>,
--   <a>kinesisDataStreamDestination_streamArn</a> - The ARN for a specific
--   Kinesis data stream.
--   
--   
--   <a>$sel:destinationStatusDescription:KinesisDataStreamDestination'</a>,
--   <a>kinesisDataStreamDestination_destinationStatusDescription</a> - The
--   human-readable string that corresponds to the replica status.
newKinesisDataStreamDestination :: KinesisDataStreamDestination

-- | The current status of replication.
kinesisDataStreamDestination_destinationStatus :: Lens' KinesisDataStreamDestination (Maybe DestinationStatus)

-- | The ARN for a specific Kinesis data stream.
kinesisDataStreamDestination_streamArn :: Lens' KinesisDataStreamDestination (Maybe Text)

-- | The human-readable string that corresponds to the replica status.
kinesisDataStreamDestination_destinationStatusDescription :: Lens' KinesisDataStreamDestination (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.KinesisDataStreamDestination.KinesisDataStreamDestination
instance GHC.Show.Show Amazonka.DynamoDB.Types.KinesisDataStreamDestination.KinesisDataStreamDestination
instance GHC.Read.Read Amazonka.DynamoDB.Types.KinesisDataStreamDestination.KinesisDataStreamDestination
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.KinesisDataStreamDestination.KinesisDataStreamDestination
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.KinesisDataStreamDestination.KinesisDataStreamDestination
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.KinesisDataStreamDestination.KinesisDataStreamDestination
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.KinesisDataStreamDestination.KinesisDataStreamDestination


module Amazonka.DynamoDB.Types.KinesisStreamingDestinationInput

-- | <i>See:</i> <a>newKinesisStreamingDestinationInput</a> smart
--   constructor.
data KinesisStreamingDestinationInput
KinesisStreamingDestinationInput' :: Text -> Text -> KinesisStreamingDestinationInput

-- | The name of the DynamoDB table.
[$sel:tableName:KinesisStreamingDestinationInput'] :: KinesisStreamingDestinationInput -> Text

-- | The ARN for a Kinesis data stream.
[$sel:streamArn:KinesisStreamingDestinationInput'] :: KinesisStreamingDestinationInput -> Text

-- | Create a value of <a>KinesisStreamingDestinationInput</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:KinesisStreamingDestinationInput'</a>,
--   <a>kinesisStreamingDestinationInput_tableName</a> - The name of the
--   DynamoDB table.
--   
--   <a>$sel:streamArn:KinesisStreamingDestinationInput'</a>,
--   <a>kinesisStreamingDestinationInput_streamArn</a> - The ARN for a
--   Kinesis data stream.
newKinesisStreamingDestinationInput :: Text -> Text -> KinesisStreamingDestinationInput

-- | The name of the DynamoDB table.
kinesisStreamingDestinationInput_tableName :: Lens' KinesisStreamingDestinationInput Text

-- | The ARN for a Kinesis data stream.
kinesisStreamingDestinationInput_streamArn :: Lens' KinesisStreamingDestinationInput Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.KinesisStreamingDestinationInput.KinesisStreamingDestinationInput
instance GHC.Show.Show Amazonka.DynamoDB.Types.KinesisStreamingDestinationInput.KinesisStreamingDestinationInput
instance GHC.Read.Read Amazonka.DynamoDB.Types.KinesisStreamingDestinationInput.KinesisStreamingDestinationInput
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.KinesisStreamingDestinationInput.KinesisStreamingDestinationInput
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.KinesisStreamingDestinationInput.KinesisStreamingDestinationInput
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.KinesisStreamingDestinationInput.KinesisStreamingDestinationInput
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.KinesisStreamingDestinationInput.KinesisStreamingDestinationInput


module Amazonka.DynamoDB.Types.KinesisStreamingDestinationOutput

-- | <i>See:</i> <a>newKinesisStreamingDestinationOutput</a> smart
--   constructor.
data KinesisStreamingDestinationOutput
KinesisStreamingDestinationOutput' :: Maybe DestinationStatus -> Maybe Text -> Maybe Text -> KinesisStreamingDestinationOutput

-- | The current status of the replication.
[$sel:destinationStatus:KinesisStreamingDestinationOutput'] :: KinesisStreamingDestinationOutput -> Maybe DestinationStatus

-- | The ARN for the specific Kinesis data stream.
[$sel:streamArn:KinesisStreamingDestinationOutput'] :: KinesisStreamingDestinationOutput -> Maybe Text

-- | The name of the table being modified.
[$sel:tableName:KinesisStreamingDestinationOutput'] :: KinesisStreamingDestinationOutput -> Maybe Text

-- | Create a value of <a>KinesisStreamingDestinationOutput</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:destinationStatus:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_destinationStatus</a> - The
--   current status of the replication.
--   
--   <a>$sel:streamArn:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_streamArn</a> - The ARN for the
--   specific Kinesis data stream.
--   
--   <a>$sel:tableName:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_tableName</a> - The name of the
--   table being modified.
newKinesisStreamingDestinationOutput :: KinesisStreamingDestinationOutput

-- | The current status of the replication.
kinesisStreamingDestinationOutput_destinationStatus :: Lens' KinesisStreamingDestinationOutput (Maybe DestinationStatus)

-- | The ARN for the specific Kinesis data stream.
kinesisStreamingDestinationOutput_streamArn :: Lens' KinesisStreamingDestinationOutput (Maybe Text)

-- | The name of the table being modified.
kinesisStreamingDestinationOutput_tableName :: Lens' KinesisStreamingDestinationOutput (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.KinesisStreamingDestinationOutput.KinesisStreamingDestinationOutput
instance GHC.Show.Show Amazonka.DynamoDB.Types.KinesisStreamingDestinationOutput.KinesisStreamingDestinationOutput
instance GHC.Read.Read Amazonka.DynamoDB.Types.KinesisStreamingDestinationOutput.KinesisStreamingDestinationOutput
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.KinesisStreamingDestinationOutput.KinesisStreamingDestinationOutput
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.KinesisStreamingDestinationOutput.KinesisStreamingDestinationOutput
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.KinesisStreamingDestinationOutput.KinesisStreamingDestinationOutput
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.KinesisStreamingDestinationOutput.KinesisStreamingDestinationOutput


module Amazonka.DynamoDB.Types.ParameterizedStatement

-- | Represents a PartiQL statment that uses parameters.
--   
--   <i>See:</i> <a>newParameterizedStatement</a> smart constructor.
data ParameterizedStatement
ParameterizedStatement' :: Maybe (NonEmpty AttributeValue) -> Text -> ParameterizedStatement

-- | The parameter values.
[$sel:parameters:ParameterizedStatement'] :: ParameterizedStatement -> Maybe (NonEmpty AttributeValue)

-- | A PartiQL statment that uses parameters.
[$sel:statement:ParameterizedStatement'] :: ParameterizedStatement -> Text

-- | Create a value of <a>ParameterizedStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:parameters:ParameterizedStatement'</a>,
--   <a>parameterizedStatement_parameters</a> - The parameter values.
--   
--   <a>$sel:statement:ParameterizedStatement'</a>,
--   <a>parameterizedStatement_statement</a> - A PartiQL statment that uses
--   parameters.
newParameterizedStatement :: Text -> ParameterizedStatement

-- | The parameter values.
parameterizedStatement_parameters :: Lens' ParameterizedStatement (Maybe (NonEmpty AttributeValue))

-- | A PartiQL statment that uses parameters.
parameterizedStatement_statement :: Lens' ParameterizedStatement Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ParameterizedStatement.ParameterizedStatement
instance GHC.Show.Show Amazonka.DynamoDB.Types.ParameterizedStatement.ParameterizedStatement
instance GHC.Read.Read Amazonka.DynamoDB.Types.ParameterizedStatement.ParameterizedStatement
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ParameterizedStatement.ParameterizedStatement
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ParameterizedStatement.ParameterizedStatement
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ParameterizedStatement.ParameterizedStatement
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ParameterizedStatement.ParameterizedStatement


module Amazonka.DynamoDB.Types.PointInTimeRecoverySpecification

-- | Represents the settings used to enable point in time recovery.
--   
--   <i>See:</i> <a>newPointInTimeRecoverySpecification</a> smart
--   constructor.
data PointInTimeRecoverySpecification
PointInTimeRecoverySpecification' :: Bool -> PointInTimeRecoverySpecification

-- | Indicates whether point in time recovery is enabled (true) or disabled
--   (false) on the table.
[$sel:pointInTimeRecoveryEnabled:PointInTimeRecoverySpecification'] :: PointInTimeRecoverySpecification -> Bool

-- | Create a value of <a>PointInTimeRecoverySpecification</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:pointInTimeRecoveryEnabled:PointInTimeRecoverySpecification'</a>,
--   <a>pointInTimeRecoverySpecification_pointInTimeRecoveryEnabled</a> -
--   Indicates whether point in time recovery is enabled (true) or disabled
--   (false) on the table.
newPointInTimeRecoverySpecification :: Bool -> PointInTimeRecoverySpecification

-- | Indicates whether point in time recovery is enabled (true) or disabled
--   (false) on the table.
pointInTimeRecoverySpecification_pointInTimeRecoveryEnabled :: Lens' PointInTimeRecoverySpecification Bool
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.PointInTimeRecoverySpecification.PointInTimeRecoverySpecification
instance GHC.Show.Show Amazonka.DynamoDB.Types.PointInTimeRecoverySpecification.PointInTimeRecoverySpecification
instance GHC.Read.Read Amazonka.DynamoDB.Types.PointInTimeRecoverySpecification.PointInTimeRecoverySpecification
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.PointInTimeRecoverySpecification.PointInTimeRecoverySpecification
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.PointInTimeRecoverySpecification.PointInTimeRecoverySpecification
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.PointInTimeRecoverySpecification.PointInTimeRecoverySpecification
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.PointInTimeRecoverySpecification.PointInTimeRecoverySpecification


module Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus
newtype PointInTimeRecoveryStatus
PointInTimeRecoveryStatus' :: Text -> PointInTimeRecoveryStatus
[fromPointInTimeRecoveryStatus] :: PointInTimeRecoveryStatus -> Text
pattern PointInTimeRecoveryStatus_DISABLED :: PointInTimeRecoveryStatus
pattern PointInTimeRecoveryStatus_ENABLED :: PointInTimeRecoveryStatus
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance GHC.Read.Read Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus
instance GHC.Show.Show Amazonka.DynamoDB.Types.PointInTimeRecoveryStatus.PointInTimeRecoveryStatus


module Amazonka.DynamoDB.Types.PointInTimeRecoveryDescription

-- | The description of the point in time settings applied to the table.
--   
--   <i>See:</i> <a>newPointInTimeRecoveryDescription</a> smart
--   constructor.
data PointInTimeRecoveryDescription
PointInTimeRecoveryDescription' :: Maybe PointInTimeRecoveryStatus -> Maybe POSIX -> Maybe POSIX -> PointInTimeRecoveryDescription

-- | The current state of point in time recovery:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Point in time recovery is being enabled.</li>
--   <li><tt>ENABLED</tt> - Point in time recovery is enabled.</li>
--   <li><tt>DISABLED</tt> - Point in time recovery is disabled.</li>
--   </ul>
[$sel:pointInTimeRecoveryStatus:PointInTimeRecoveryDescription'] :: PointInTimeRecoveryDescription -> Maybe PointInTimeRecoveryStatus

-- | Specifies the earliest point in time you can restore your table to.
--   You can restore your table to any point in time during the last 35
--   days.
[$sel:earliestRestorableDateTime:PointInTimeRecoveryDescription'] :: PointInTimeRecoveryDescription -> Maybe POSIX

-- | <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time.
[$sel:latestRestorableDateTime:PointInTimeRecoveryDescription'] :: PointInTimeRecoveryDescription -> Maybe POSIX

-- | Create a value of <a>PointInTimeRecoveryDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pointInTimeRecoveryStatus:PointInTimeRecoveryDescription'</a>,
--   <a>pointInTimeRecoveryDescription_pointInTimeRecoveryStatus</a> - The
--   current state of point in time recovery:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Point in time recovery is being enabled.</li>
--   <li><tt>ENABLED</tt> - Point in time recovery is enabled.</li>
--   <li><tt>DISABLED</tt> - Point in time recovery is disabled.</li>
--   </ul>
--   
--   
--   <a>$sel:earliestRestorableDateTime:PointInTimeRecoveryDescription'</a>,
--   <a>pointInTimeRecoveryDescription_earliestRestorableDateTime</a> -
--   Specifies the earliest point in time you can restore your table to.
--   You can restore your table to any point in time during the last 35
--   days.
--   
--   <a>$sel:latestRestorableDateTime:PointInTimeRecoveryDescription'</a>,
--   <a>pointInTimeRecoveryDescription_latestRestorableDateTime</a> -
--   <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time.
newPointInTimeRecoveryDescription :: PointInTimeRecoveryDescription

-- | The current state of point in time recovery:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Point in time recovery is being enabled.</li>
--   <li><tt>ENABLED</tt> - Point in time recovery is enabled.</li>
--   <li><tt>DISABLED</tt> - Point in time recovery is disabled.</li>
--   </ul>
pointInTimeRecoveryDescription_pointInTimeRecoveryStatus :: Lens' PointInTimeRecoveryDescription (Maybe PointInTimeRecoveryStatus)

-- | Specifies the earliest point in time you can restore your table to.
--   You can restore your table to any point in time during the last 35
--   days.
pointInTimeRecoveryDescription_earliestRestorableDateTime :: Lens' PointInTimeRecoveryDescription (Maybe UTCTime)

-- | <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time.
pointInTimeRecoveryDescription_latestRestorableDateTime :: Lens' PointInTimeRecoveryDescription (Maybe UTCTime)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.PointInTimeRecoveryDescription.PointInTimeRecoveryDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.PointInTimeRecoveryDescription.PointInTimeRecoveryDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.PointInTimeRecoveryDescription.PointInTimeRecoveryDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.PointInTimeRecoveryDescription.PointInTimeRecoveryDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.PointInTimeRecoveryDescription.PointInTimeRecoveryDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.PointInTimeRecoveryDescription.PointInTimeRecoveryDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.PointInTimeRecoveryDescription.PointInTimeRecoveryDescription


module Amazonka.DynamoDB.Types.ContinuousBackupsDescription

-- | Represents the continuous backups and point in time recovery settings
--   on the table.
--   
--   <i>See:</i> <a>newContinuousBackupsDescription</a> smart constructor.
data ContinuousBackupsDescription
ContinuousBackupsDescription' :: Maybe PointInTimeRecoveryDescription -> ContinuousBackupsStatus -> ContinuousBackupsDescription

-- | The description of the point in time recovery settings applied to the
--   table.
[$sel:pointInTimeRecoveryDescription:ContinuousBackupsDescription'] :: ContinuousBackupsDescription -> Maybe PointInTimeRecoveryDescription

-- | <tt>ContinuousBackupsStatus</tt> can be one of the following states:
--   ENABLED, DISABLED
[$sel:continuousBackupsStatus:ContinuousBackupsDescription'] :: ContinuousBackupsDescription -> ContinuousBackupsStatus

-- | Create a value of <a>ContinuousBackupsDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:pointInTimeRecoveryDescription:ContinuousBackupsDescription'</a>,
--   <a>continuousBackupsDescription_pointInTimeRecoveryDescription</a> -
--   The description of the point in time recovery settings applied to the
--   table.
--   
--   <a>$sel:continuousBackupsStatus:ContinuousBackupsDescription'</a>,
--   <a>continuousBackupsDescription_continuousBackupsStatus</a> -
--   <tt>ContinuousBackupsStatus</tt> can be one of the following states:
--   ENABLED, DISABLED
newContinuousBackupsDescription :: ContinuousBackupsStatus -> ContinuousBackupsDescription

-- | The description of the point in time recovery settings applied to the
--   table.
continuousBackupsDescription_pointInTimeRecoveryDescription :: Lens' ContinuousBackupsDescription (Maybe PointInTimeRecoveryDescription)

-- | <tt>ContinuousBackupsStatus</tt> can be one of the following states:
--   ENABLED, DISABLED
continuousBackupsDescription_continuousBackupsStatus :: Lens' ContinuousBackupsDescription ContinuousBackupsStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ContinuousBackupsDescription.ContinuousBackupsDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.ContinuousBackupsDescription.ContinuousBackupsDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.ContinuousBackupsDescription.ContinuousBackupsDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ContinuousBackupsDescription.ContinuousBackupsDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ContinuousBackupsDescription.ContinuousBackupsDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ContinuousBackupsDescription.ContinuousBackupsDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ContinuousBackupsDescription.ContinuousBackupsDescription


module Amazonka.DynamoDB.Types.ProjectionType
newtype ProjectionType
ProjectionType' :: Text -> ProjectionType
[fromProjectionType] :: ProjectionType -> Text
pattern ProjectionType_ALL :: ProjectionType
pattern ProjectionType_INCLUDE :: ProjectionType
pattern ProjectionType_KEYS_ONLY :: ProjectionType
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance GHC.Read.Read Amazonka.DynamoDB.Types.ProjectionType.ProjectionType
instance GHC.Show.Show Amazonka.DynamoDB.Types.ProjectionType.ProjectionType


module Amazonka.DynamoDB.Types.Projection

-- | Represents attributes that are copied (projected) from the table into
--   an index. These are in addition to the primary key attributes and
--   index key attributes, which are automatically projected.
--   
--   <i>See:</i> <a>newProjection</a> smart constructor.
data Projection
Projection' :: Maybe ProjectionType -> Maybe (NonEmpty Text) -> Projection

-- | The set of attributes that are projected into the index:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.</li>
--   <li><tt>INCLUDE</tt> - In addition to the attributes described in
--   <tt>KEYS_ONLY</tt>, the secondary index will include other non-key
--   attributes that you specify.</li>
--   <li><tt>ALL</tt> - All of the table attributes are projected into the
--   index.</li>
--   </ul>
[$sel:projectionType:Projection'] :: Projection -> Maybe ProjectionType

-- | Represents the non-key attribute names which will be projected into
--   the index.
--   
--   For local secondary indexes, the total count of
--   <tt>NonKeyAttributes</tt> summed across all of the local secondary
--   indexes, must not exceed 20. If you project the same attribute into
--   two different indexes, this counts as two distinct attributes when
--   determining the total.
[$sel:nonKeyAttributes:Projection'] :: Projection -> Maybe (NonEmpty Text)

-- | Create a value of <a>Projection</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionType:Projection'</a>,
--   <a>projection_projectionType</a> - The set of attributes that are
--   projected into the index:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.</li>
--   <li><tt>INCLUDE</tt> - In addition to the attributes described in
--   <tt>KEYS_ONLY</tt>, the secondary index will include other non-key
--   attributes that you specify.</li>
--   <li><tt>ALL</tt> - All of the table attributes are projected into the
--   index.</li>
--   </ul>
--   
--   <a>$sel:nonKeyAttributes:Projection'</a>,
--   <a>projection_nonKeyAttributes</a> - Represents the non-key attribute
--   names which will be projected into the index.
--   
--   For local secondary indexes, the total count of
--   <tt>NonKeyAttributes</tt> summed across all of the local secondary
--   indexes, must not exceed 20. If you project the same attribute into
--   two different indexes, this counts as two distinct attributes when
--   determining the total.
newProjection :: Projection

-- | The set of attributes that are projected into the index:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.</li>
--   <li><tt>INCLUDE</tt> - In addition to the attributes described in
--   <tt>KEYS_ONLY</tt>, the secondary index will include other non-key
--   attributes that you specify.</li>
--   <li><tt>ALL</tt> - All of the table attributes are projected into the
--   index.</li>
--   </ul>
projection_projectionType :: Lens' Projection (Maybe ProjectionType)

-- | Represents the non-key attribute names which will be projected into
--   the index.
--   
--   For local secondary indexes, the total count of
--   <tt>NonKeyAttributes</tt> summed across all of the local secondary
--   indexes, must not exceed 20. If you project the same attribute into
--   two different indexes, this counts as two distinct attributes when
--   determining the total.
projection_nonKeyAttributes :: Lens' Projection (Maybe (NonEmpty Text))
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.Projection.Projection
instance GHC.Show.Show Amazonka.DynamoDB.Types.Projection.Projection
instance GHC.Read.Read Amazonka.DynamoDB.Types.Projection.Projection
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.Projection.Projection
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.Projection.Projection
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.Projection.Projection
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.Projection.Projection
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.Projection.Projection


module Amazonka.DynamoDB.Types.LocalSecondaryIndexInfo

-- | Represents the properties of a local secondary index for the table
--   when the backup was created.
--   
--   <i>See:</i> <a>newLocalSecondaryIndexInfo</a> smart constructor.
data LocalSecondaryIndexInfo
LocalSecondaryIndexInfo' :: Maybe (NonEmpty KeySchemaElement) -> Maybe Projection -> Maybe Text -> LocalSecondaryIndexInfo

-- | The complete key schema for a local secondary index, which consists of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keySchema:LocalSecondaryIndexInfo'] :: LocalSecondaryIndexInfo -> Maybe (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
[$sel:projection:LocalSecondaryIndexInfo'] :: LocalSecondaryIndexInfo -> Maybe Projection

-- | Represents the name of the local secondary index.
[$sel:indexName:LocalSecondaryIndexInfo'] :: LocalSecondaryIndexInfo -> Maybe Text

-- | Create a value of <a>LocalSecondaryIndexInfo</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keySchema:LocalSecondaryIndexInfo'</a>,
--   <a>localSecondaryIndexInfo_keySchema</a> - The complete key schema for
--   a local secondary index, which consists of one or more pairs of
--   attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:LocalSecondaryIndexInfo'</a>,
--   <a>localSecondaryIndexInfo_projection</a> - Represents attributes that
--   are copied (projected) from the table into the global secondary index.
--   These are in addition to the primary key attributes and index key
--   attributes, which are automatically projected.
--   
--   <a>$sel:indexName:LocalSecondaryIndexInfo'</a>,
--   <a>localSecondaryIndexInfo_indexName</a> - Represents the name of the
--   local secondary index.
newLocalSecondaryIndexInfo :: LocalSecondaryIndexInfo

-- | The complete key schema for a local secondary index, which consists of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
localSecondaryIndexInfo_keySchema :: Lens' LocalSecondaryIndexInfo (Maybe (NonEmpty KeySchemaElement))

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
localSecondaryIndexInfo_projection :: Lens' LocalSecondaryIndexInfo (Maybe Projection)

-- | Represents the name of the local secondary index.
localSecondaryIndexInfo_indexName :: Lens' LocalSecondaryIndexInfo (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.LocalSecondaryIndexInfo.LocalSecondaryIndexInfo
instance GHC.Show.Show Amazonka.DynamoDB.Types.LocalSecondaryIndexInfo.LocalSecondaryIndexInfo
instance GHC.Read.Read Amazonka.DynamoDB.Types.LocalSecondaryIndexInfo.LocalSecondaryIndexInfo
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.LocalSecondaryIndexInfo.LocalSecondaryIndexInfo
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.LocalSecondaryIndexInfo.LocalSecondaryIndexInfo
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.LocalSecondaryIndexInfo.LocalSecondaryIndexInfo
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.LocalSecondaryIndexInfo.LocalSecondaryIndexInfo


module Amazonka.DynamoDB.Types.LocalSecondaryIndexDescription

-- | Represents the properties of a local secondary index.
--   
--   <i>See:</i> <a>newLocalSecondaryIndexDescription</a> smart
--   constructor.
data LocalSecondaryIndexDescription
LocalSecondaryIndexDescription' :: Maybe Integer -> Maybe Text -> Maybe (NonEmpty KeySchemaElement) -> Maybe Projection -> Maybe Integer -> Maybe Text -> LocalSecondaryIndexDescription

-- | The total size of the specified index, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
[$sel:indexSizeBytes:LocalSecondaryIndexDescription'] :: LocalSecondaryIndexDescription -> Maybe Integer

-- | The Amazon Resource Name (ARN) that uniquely identifies the index.
[$sel:indexArn:LocalSecondaryIndexDescription'] :: LocalSecondaryIndexDescription -> Maybe Text

-- | The complete key schema for the local secondary index, consisting of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keySchema:LocalSecondaryIndexDescription'] :: LocalSecondaryIndexDescription -> Maybe (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
[$sel:projection:LocalSecondaryIndexDescription'] :: LocalSecondaryIndexDescription -> Maybe Projection

-- | The number of items in the specified index. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
[$sel:itemCount:LocalSecondaryIndexDescription'] :: LocalSecondaryIndexDescription -> Maybe Integer

-- | Represents the name of the local secondary index.
[$sel:indexName:LocalSecondaryIndexDescription'] :: LocalSecondaryIndexDescription -> Maybe Text

-- | Create a value of <a>LocalSecondaryIndexDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexSizeBytes:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_indexSizeBytes</a> - The total size
--   of the specified index, in bytes. DynamoDB updates this value
--   approximately every six hours. Recent changes might not be reflected
--   in this value.
--   
--   <a>$sel:indexArn:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_indexArn</a> - The Amazon Resource
--   Name (ARN) that uniquely identifies the index.
--   
--   <a>$sel:keySchema:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_keySchema</a> - The complete key
--   schema for the local secondary index, consisting of one or more pairs
--   of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_projection</a> - Represents
--   attributes that are copied (projected) from the table into the global
--   secondary index. These are in addition to the primary key attributes
--   and index key attributes, which are automatically projected.
--   
--   <a>$sel:itemCount:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_itemCount</a> - The number of items
--   in the specified index. DynamoDB updates this value approximately
--   every six hours. Recent changes might not be reflected in this value.
--   
--   <a>$sel:indexName:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_indexName</a> - Represents the name
--   of the local secondary index.
newLocalSecondaryIndexDescription :: LocalSecondaryIndexDescription

-- | The total size of the specified index, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
localSecondaryIndexDescription_indexSizeBytes :: Lens' LocalSecondaryIndexDescription (Maybe Integer)

-- | The Amazon Resource Name (ARN) that uniquely identifies the index.
localSecondaryIndexDescription_indexArn :: Lens' LocalSecondaryIndexDescription (Maybe Text)

-- | The complete key schema for the local secondary index, consisting of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
localSecondaryIndexDescription_keySchema :: Lens' LocalSecondaryIndexDescription (Maybe (NonEmpty KeySchemaElement))

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
localSecondaryIndexDescription_projection :: Lens' LocalSecondaryIndexDescription (Maybe Projection)

-- | The number of items in the specified index. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
localSecondaryIndexDescription_itemCount :: Lens' LocalSecondaryIndexDescription (Maybe Integer)

-- | Represents the name of the local secondary index.
localSecondaryIndexDescription_indexName :: Lens' LocalSecondaryIndexDescription (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.LocalSecondaryIndexDescription.LocalSecondaryIndexDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.LocalSecondaryIndexDescription.LocalSecondaryIndexDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.LocalSecondaryIndexDescription.LocalSecondaryIndexDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.LocalSecondaryIndexDescription.LocalSecondaryIndexDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.LocalSecondaryIndexDescription.LocalSecondaryIndexDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.LocalSecondaryIndexDescription.LocalSecondaryIndexDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.LocalSecondaryIndexDescription.LocalSecondaryIndexDescription


module Amazonka.DynamoDB.Types.LocalSecondaryIndex

-- | Represents the properties of a local secondary index.
--   
--   <i>See:</i> <a>newLocalSecondaryIndex</a> smart constructor.
data LocalSecondaryIndex
LocalSecondaryIndex' :: Text -> NonEmpty KeySchemaElement -> Projection -> LocalSecondaryIndex

-- | The name of the local secondary index. The name must be unique among
--   all other indexes on this table.
[$sel:indexName:LocalSecondaryIndex'] :: LocalSecondaryIndex -> Text

-- | The complete key schema for the local secondary index, consisting of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keySchema:LocalSecondaryIndex'] :: LocalSecondaryIndex -> NonEmpty KeySchemaElement

-- | Represents attributes that are copied (projected) from the table into
--   the local secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
[$sel:projection:LocalSecondaryIndex'] :: LocalSecondaryIndex -> Projection

-- | Create a value of <a>LocalSecondaryIndex</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:LocalSecondaryIndex'</a>,
--   <a>localSecondaryIndex_indexName</a> - The name of the local secondary
--   index. The name must be unique among all other indexes on this table.
--   
--   <a>$sel:keySchema:LocalSecondaryIndex'</a>,
--   <a>localSecondaryIndex_keySchema</a> - The complete key schema for the
--   local secondary index, consisting of one or more pairs of attribute
--   names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:LocalSecondaryIndex'</a>,
--   <a>localSecondaryIndex_projection</a> - Represents attributes that are
--   copied (projected) from the table into the local secondary index.
--   These are in addition to the primary key attributes and index key
--   attributes, which are automatically projected.
newLocalSecondaryIndex :: Text -> NonEmpty KeySchemaElement -> Projection -> LocalSecondaryIndex

-- | The name of the local secondary index. The name must be unique among
--   all other indexes on this table.
localSecondaryIndex_indexName :: Lens' LocalSecondaryIndex Text

-- | The complete key schema for the local secondary index, consisting of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
localSecondaryIndex_keySchema :: Lens' LocalSecondaryIndex (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the local secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
localSecondaryIndex_projection :: Lens' LocalSecondaryIndex Projection
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.LocalSecondaryIndex.LocalSecondaryIndex
instance GHC.Show.Show Amazonka.DynamoDB.Types.LocalSecondaryIndex.LocalSecondaryIndex
instance GHC.Read.Read Amazonka.DynamoDB.Types.LocalSecondaryIndex.LocalSecondaryIndex
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.LocalSecondaryIndex.LocalSecondaryIndex
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.LocalSecondaryIndex.LocalSecondaryIndex
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.LocalSecondaryIndex.LocalSecondaryIndex
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.LocalSecondaryIndex.LocalSecondaryIndex


module Amazonka.DynamoDB.Types.ProvisionedThroughput

-- | Represents the provisioned throughput settings for a specified table
--   or index. The settings can be modified using the <tt>UpdateTable</tt>
--   operation.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newProvisionedThroughput</a> smart constructor.
data ProvisionedThroughput
ProvisionedThroughput' :: Natural -> Natural -> ProvisionedThroughput

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
[$sel:readCapacityUnits:ProvisionedThroughput'] :: ProvisionedThroughput -> Natural

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
[$sel:writeCapacityUnits:ProvisionedThroughput'] :: ProvisionedThroughput -> Natural

-- | Create a value of <a>ProvisionedThroughput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:ProvisionedThroughput'</a>,
--   <a>provisionedThroughput_readCapacityUnits</a> - The maximum number of
--   strongly consistent reads consumed per second before DynamoDB returns
--   a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
--   
--   <a>$sel:writeCapacityUnits:ProvisionedThroughput'</a>,
--   <a>provisionedThroughput_writeCapacityUnits</a> - The maximum number
--   of writes consumed per second before DynamoDB returns a
--   <tt>ThrottlingException</tt>. For more information, see <a>Specifying
--   Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
newProvisionedThroughput :: Natural -> Natural -> ProvisionedThroughput

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
provisionedThroughput_readCapacityUnits :: Lens' ProvisionedThroughput Natural

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
provisionedThroughput_writeCapacityUnits :: Lens' ProvisionedThroughput Natural
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ProvisionedThroughput.ProvisionedThroughput
instance GHC.Show.Show Amazonka.DynamoDB.Types.ProvisionedThroughput.ProvisionedThroughput
instance GHC.Read.Read Amazonka.DynamoDB.Types.ProvisionedThroughput.ProvisionedThroughput
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ProvisionedThroughput.ProvisionedThroughput
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ProvisionedThroughput.ProvisionedThroughput
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ProvisionedThroughput.ProvisionedThroughput
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ProvisionedThroughput.ProvisionedThroughput
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ProvisionedThroughput.ProvisionedThroughput


module Amazonka.DynamoDB.Types.GlobalSecondaryIndexInfo

-- | Represents the properties of a global secondary index for the table
--   when the backup was created.
--   
--   <i>See:</i> <a>newGlobalSecondaryIndexInfo</a> smart constructor.
data GlobalSecondaryIndexInfo
GlobalSecondaryIndexInfo' :: Maybe ProvisionedThroughput -> Maybe (NonEmpty KeySchemaElement) -> Maybe Projection -> Maybe Text -> GlobalSecondaryIndexInfo

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
[$sel:provisionedThroughput:GlobalSecondaryIndexInfo'] :: GlobalSecondaryIndexInfo -> Maybe ProvisionedThroughput

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keySchema:GlobalSecondaryIndexInfo'] :: GlobalSecondaryIndexInfo -> Maybe (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
[$sel:projection:GlobalSecondaryIndexInfo'] :: GlobalSecondaryIndexInfo -> Maybe Projection

-- | The name of the global secondary index.
[$sel:indexName:GlobalSecondaryIndexInfo'] :: GlobalSecondaryIndexInfo -> Maybe Text

-- | Create a value of <a>GlobalSecondaryIndexInfo</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:provisionedThroughput:GlobalSecondaryIndexInfo'</a>,
--   <a>globalSecondaryIndexInfo_provisionedThroughput</a> - Represents the
--   provisioned throughput settings for the specified global secondary
--   index.
--   
--   <a>$sel:keySchema:GlobalSecondaryIndexInfo'</a>,
--   <a>globalSecondaryIndexInfo_keySchema</a> - The complete key schema
--   for a global secondary index, which consists of one or more pairs of
--   attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:GlobalSecondaryIndexInfo'</a>,
--   <a>globalSecondaryIndexInfo_projection</a> - Represents attributes
--   that are copied (projected) from the table into the global secondary
--   index. These are in addition to the primary key attributes and index
--   key attributes, which are automatically projected.
--   
--   <a>$sel:indexName:GlobalSecondaryIndexInfo'</a>,
--   <a>globalSecondaryIndexInfo_indexName</a> - The name of the global
--   secondary index.
newGlobalSecondaryIndexInfo :: GlobalSecondaryIndexInfo

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
globalSecondaryIndexInfo_provisionedThroughput :: Lens' GlobalSecondaryIndexInfo (Maybe ProvisionedThroughput)

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
globalSecondaryIndexInfo_keySchema :: Lens' GlobalSecondaryIndexInfo (Maybe (NonEmpty KeySchemaElement))

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
globalSecondaryIndexInfo_projection :: Lens' GlobalSecondaryIndexInfo (Maybe Projection)

-- | The name of the global secondary index.
globalSecondaryIndexInfo_indexName :: Lens' GlobalSecondaryIndexInfo (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.GlobalSecondaryIndexInfo.GlobalSecondaryIndexInfo
instance GHC.Show.Show Amazonka.DynamoDB.Types.GlobalSecondaryIndexInfo.GlobalSecondaryIndexInfo
instance GHC.Read.Read Amazonka.DynamoDB.Types.GlobalSecondaryIndexInfo.GlobalSecondaryIndexInfo
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.GlobalSecondaryIndexInfo.GlobalSecondaryIndexInfo
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.GlobalSecondaryIndexInfo.GlobalSecondaryIndexInfo
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.GlobalSecondaryIndexInfo.GlobalSecondaryIndexInfo
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.GlobalSecondaryIndexInfo.GlobalSecondaryIndexInfo


module Amazonka.DynamoDB.Types.GlobalSecondaryIndex

-- | Represents the properties of a global secondary index.
--   
--   <i>See:</i> <a>newGlobalSecondaryIndex</a> smart constructor.
data GlobalSecondaryIndex
GlobalSecondaryIndex' :: Maybe ProvisionedThroughput -> Text -> NonEmpty KeySchemaElement -> Projection -> GlobalSecondaryIndex

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:provisionedThroughput:GlobalSecondaryIndex'] :: GlobalSecondaryIndex -> Maybe ProvisionedThroughput

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
[$sel:indexName:GlobalSecondaryIndex'] :: GlobalSecondaryIndex -> Text

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keySchema:GlobalSecondaryIndex'] :: GlobalSecondaryIndex -> NonEmpty KeySchemaElement

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
[$sel:projection:GlobalSecondaryIndex'] :: GlobalSecondaryIndex -> Projection

-- | Create a value of <a>GlobalSecondaryIndex</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:provisionedThroughput:GlobalSecondaryIndex'</a>,
--   <a>globalSecondaryIndex_provisionedThroughput</a> - Represents the
--   provisioned throughput settings for the specified global secondary
--   index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:indexName:GlobalSecondaryIndex'</a>,
--   <a>globalSecondaryIndex_indexName</a> - The name of the global
--   secondary index. The name must be unique among all other indexes on
--   this table.
--   
--   <a>$sel:keySchema:GlobalSecondaryIndex'</a>,
--   <a>globalSecondaryIndex_keySchema</a> - The complete key schema for a
--   global secondary index, which consists of one or more pairs of
--   attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:GlobalSecondaryIndex'</a>,
--   <a>globalSecondaryIndex_projection</a> - Represents attributes that
--   are copied (projected) from the table into the global secondary index.
--   These are in addition to the primary key attributes and index key
--   attributes, which are automatically projected.
newGlobalSecondaryIndex :: Text -> NonEmpty KeySchemaElement -> Projection -> GlobalSecondaryIndex

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
globalSecondaryIndex_provisionedThroughput :: Lens' GlobalSecondaryIndex (Maybe ProvisionedThroughput)

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
globalSecondaryIndex_indexName :: Lens' GlobalSecondaryIndex Text

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
globalSecondaryIndex_keySchema :: Lens' GlobalSecondaryIndex (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
globalSecondaryIndex_projection :: Lens' GlobalSecondaryIndex Projection
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.GlobalSecondaryIndex.GlobalSecondaryIndex
instance GHC.Show.Show Amazonka.DynamoDB.Types.GlobalSecondaryIndex.GlobalSecondaryIndex
instance GHC.Read.Read Amazonka.DynamoDB.Types.GlobalSecondaryIndex.GlobalSecondaryIndex
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.GlobalSecondaryIndex.GlobalSecondaryIndex
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.GlobalSecondaryIndex.GlobalSecondaryIndex
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.GlobalSecondaryIndex.GlobalSecondaryIndex
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.GlobalSecondaryIndex.GlobalSecondaryIndex


module Amazonka.DynamoDB.Types.CreateGlobalSecondaryIndexAction

-- | Represents a new global secondary index to be added to an existing
--   table.
--   
--   <i>See:</i> <a>newCreateGlobalSecondaryIndexAction</a> smart
--   constructor.
data CreateGlobalSecondaryIndexAction
CreateGlobalSecondaryIndexAction' :: Maybe ProvisionedThroughput -> Text -> NonEmpty KeySchemaElement -> Projection -> CreateGlobalSecondaryIndexAction

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:provisionedThroughput:CreateGlobalSecondaryIndexAction'] :: CreateGlobalSecondaryIndexAction -> Maybe ProvisionedThroughput

-- | The name of the global secondary index to be created.
[$sel:indexName:CreateGlobalSecondaryIndexAction'] :: CreateGlobalSecondaryIndexAction -> Text

-- | The key schema for the global secondary index.
[$sel:keySchema:CreateGlobalSecondaryIndexAction'] :: CreateGlobalSecondaryIndexAction -> NonEmpty KeySchemaElement

-- | Represents attributes that are copied (projected) from the table into
--   an index. These are in addition to the primary key attributes and
--   index key attributes, which are automatically projected.
[$sel:projection:CreateGlobalSecondaryIndexAction'] :: CreateGlobalSecondaryIndexAction -> Projection

-- | Create a value of <a>CreateGlobalSecondaryIndexAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:provisionedThroughput:CreateGlobalSecondaryIndexAction'</a>,
--   <a>createGlobalSecondaryIndexAction_provisionedThroughput</a> -
--   Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:indexName:CreateGlobalSecondaryIndexAction'</a>,
--   <a>createGlobalSecondaryIndexAction_indexName</a> - The name of the
--   global secondary index to be created.
--   
--   <a>$sel:keySchema:CreateGlobalSecondaryIndexAction'</a>,
--   <a>createGlobalSecondaryIndexAction_keySchema</a> - The key schema for
--   the global secondary index.
--   
--   <a>$sel:projection:CreateGlobalSecondaryIndexAction'</a>,
--   <a>createGlobalSecondaryIndexAction_projection</a> - Represents
--   attributes that are copied (projected) from the table into an index.
--   These are in addition to the primary key attributes and index key
--   attributes, which are automatically projected.
newCreateGlobalSecondaryIndexAction :: Text -> NonEmpty KeySchemaElement -> Projection -> CreateGlobalSecondaryIndexAction

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
createGlobalSecondaryIndexAction_provisionedThroughput :: Lens' CreateGlobalSecondaryIndexAction (Maybe ProvisionedThroughput)

-- | The name of the global secondary index to be created.
createGlobalSecondaryIndexAction_indexName :: Lens' CreateGlobalSecondaryIndexAction Text

-- | The key schema for the global secondary index.
createGlobalSecondaryIndexAction_keySchema :: Lens' CreateGlobalSecondaryIndexAction (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   an index. These are in addition to the primary key attributes and
--   index key attributes, which are automatically projected.
createGlobalSecondaryIndexAction_projection :: Lens' CreateGlobalSecondaryIndexAction Projection
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.CreateGlobalSecondaryIndexAction.CreateGlobalSecondaryIndexAction
instance GHC.Show.Show Amazonka.DynamoDB.Types.CreateGlobalSecondaryIndexAction.CreateGlobalSecondaryIndexAction
instance GHC.Read.Read Amazonka.DynamoDB.Types.CreateGlobalSecondaryIndexAction.CreateGlobalSecondaryIndexAction
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.CreateGlobalSecondaryIndexAction.CreateGlobalSecondaryIndexAction
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.CreateGlobalSecondaryIndexAction.CreateGlobalSecondaryIndexAction
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.CreateGlobalSecondaryIndexAction.CreateGlobalSecondaryIndexAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.CreateGlobalSecondaryIndexAction.CreateGlobalSecondaryIndexAction


module Amazonka.DynamoDB.Types.ProvisionedThroughputDescription

-- | Represents the provisioned throughput settings for the table,
--   consisting of read and write capacity units, along with data about
--   increases and decreases.
--   
--   <i>See:</i> <a>newProvisionedThroughputDescription</a> smart
--   constructor.
data ProvisionedThroughputDescription
ProvisionedThroughputDescription' :: Maybe Natural -> Maybe POSIX -> Maybe Natural -> Maybe Natural -> Maybe POSIX -> ProvisionedThroughputDescription

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. Eventually
--   consistent reads require less effort than strongly consistent reads,
--   so a setting of 50 <tt>ReadCapacityUnits</tt> per second provides 100
--   eventually consistent <tt>ReadCapacityUnits</tt> per second.
[$sel:readCapacityUnits:ProvisionedThroughputDescription'] :: ProvisionedThroughputDescription -> Maybe Natural

-- | The date and time of the last provisioned throughput decrease for this
--   table.
[$sel:lastDecreaseDateTime:ProvisionedThroughputDescription'] :: ProvisionedThroughputDescription -> Maybe POSIX

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
[$sel:writeCapacityUnits:ProvisionedThroughputDescription'] :: ProvisionedThroughputDescription -> Maybe Natural

-- | The number of provisioned throughput decreases for this table during
--   this UTC calendar day. For current maximums on provisioned throughput
--   decreases, see <a>Service, Account, and Table Quotas</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:numberOfDecreasesToday:ProvisionedThroughputDescription'] :: ProvisionedThroughputDescription -> Maybe Natural

-- | The date and time of the last provisioned throughput increase for this
--   table.
[$sel:lastIncreaseDateTime:ProvisionedThroughputDescription'] :: ProvisionedThroughputDescription -> Maybe POSIX

-- | Create a value of <a>ProvisionedThroughputDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_readCapacityUnits</a> - The
--   maximum number of strongly consistent reads consumed per second before
--   DynamoDB returns a <tt>ThrottlingException</tt>. Eventually consistent
--   reads require less effort than strongly consistent reads, so a setting
--   of 50 <tt>ReadCapacityUnits</tt> per second provides 100 eventually
--   consistent <tt>ReadCapacityUnits</tt> per second.
--   
--   <a>$sel:lastDecreaseDateTime:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_lastDecreaseDateTime</a> - The
--   date and time of the last provisioned throughput decrease for this
--   table.
--   
--   <a>$sel:writeCapacityUnits:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_writeCapacityUnits</a> - The
--   maximum number of writes consumed per second before DynamoDB returns a
--   <tt>ThrottlingException</tt>.
--   
--   <a>$sel:numberOfDecreasesToday:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_numberOfDecreasesToday</a> - The
--   number of provisioned throughput decreases for this table during this
--   UTC calendar day. For current maximums on provisioned throughput
--   decreases, see <a>Service, Account, and Table Quotas</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:lastIncreaseDateTime:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_lastIncreaseDateTime</a> - The
--   date and time of the last provisioned throughput increase for this
--   table.
newProvisionedThroughputDescription :: ProvisionedThroughputDescription

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. Eventually
--   consistent reads require less effort than strongly consistent reads,
--   so a setting of 50 <tt>ReadCapacityUnits</tt> per second provides 100
--   eventually consistent <tt>ReadCapacityUnits</tt> per second.
provisionedThroughputDescription_readCapacityUnits :: Lens' ProvisionedThroughputDescription (Maybe Natural)

-- | The date and time of the last provisioned throughput decrease for this
--   table.
provisionedThroughputDescription_lastDecreaseDateTime :: Lens' ProvisionedThroughputDescription (Maybe UTCTime)

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
provisionedThroughputDescription_writeCapacityUnits :: Lens' ProvisionedThroughputDescription (Maybe Natural)

-- | The number of provisioned throughput decreases for this table during
--   this UTC calendar day. For current maximums on provisioned throughput
--   decreases, see <a>Service, Account, and Table Quotas</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
provisionedThroughputDescription_numberOfDecreasesToday :: Lens' ProvisionedThroughputDescription (Maybe Natural)

-- | The date and time of the last provisioned throughput increase for this
--   table.
provisionedThroughputDescription_lastIncreaseDateTime :: Lens' ProvisionedThroughputDescription (Maybe UTCTime)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ProvisionedThroughputDescription.ProvisionedThroughputDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.ProvisionedThroughputDescription.ProvisionedThroughputDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.ProvisionedThroughputDescription.ProvisionedThroughputDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ProvisionedThroughputDescription.ProvisionedThroughputDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ProvisionedThroughputDescription.ProvisionedThroughputDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ProvisionedThroughputDescription.ProvisionedThroughputDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ProvisionedThroughputDescription.ProvisionedThroughputDescription


module Amazonka.DynamoDB.Types.GlobalSecondaryIndexDescription

-- | Represents the properties of a global secondary index.
--   
--   <i>See:</i> <a>newGlobalSecondaryIndexDescription</a> smart
--   constructor.
data GlobalSecondaryIndexDescription
GlobalSecondaryIndexDescription' :: Maybe Bool -> Maybe Integer -> Maybe IndexStatus -> Maybe ProvisionedThroughputDescription -> Maybe Text -> Maybe (NonEmpty KeySchemaElement) -> Maybe Projection -> Maybe Integer -> Maybe Text -> GlobalSecondaryIndexDescription

-- | Indicates whether the index is currently backfilling.
--   <i>Backfilling</i> is the process of reading items from the table and
--   determining whether they can be added to the index. (Not all items
--   will qualify: For example, a partition key cannot have any duplicate
--   values.) If an item can be added to the index, DynamoDB will do so.
--   After all items have been processed, the backfilling operation is
--   complete and <tt>Backfilling</tt> is false.
--   
--   You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false.
--   
--   For indexes that were created during a <tt>CreateTable</tt> operation,
--   the <tt>Backfilling</tt> attribute does not appear in the
--   <tt>DescribeTable</tt> output.
[$sel:backfilling:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe Bool

-- | The total size of the specified index, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
[$sel:indexSizeBytes:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe Integer

-- | The current state of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
[$sel:indexStatus:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe IndexStatus

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:provisionedThroughput:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe ProvisionedThroughputDescription

-- | The Amazon Resource Name (ARN) that uniquely identifies the index.
[$sel:indexArn:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe Text

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keySchema:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
[$sel:projection:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe Projection

-- | The number of items in the specified index. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
[$sel:itemCount:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe Integer

-- | The name of the global secondary index.
[$sel:indexName:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe Text

-- | Create a value of <a>GlobalSecondaryIndexDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backfilling:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_backfilling</a> - Indicates whether
--   the index is currently backfilling. <i>Backfilling</i> is the process
--   of reading items from the table and determining whether they can be
--   added to the index. (Not all items will qualify: For example, a
--   partition key cannot have any duplicate values.) If an item can be
--   added to the index, DynamoDB will do so. After all items have been
--   processed, the backfilling operation is complete and
--   <tt>Backfilling</tt> is false.
--   
--   You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false.
--   
--   For indexes that were created during a <tt>CreateTable</tt> operation,
--   the <tt>Backfilling</tt> attribute does not appear in the
--   <tt>DescribeTable</tt> output.
--   
--   <a>$sel:indexSizeBytes:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_indexSizeBytes</a> - The total size
--   of the specified index, in bytes. DynamoDB updates this value
--   approximately every six hours. Recent changes might not be reflected
--   in this value.
--   
--   <a>$sel:indexStatus:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_indexStatus</a> - The current state
--   of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
--   
--   <a>$sel:provisionedThroughput:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_provisionedThroughput</a> -
--   Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:indexArn:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_indexArn</a> - The Amazon Resource
--   Name (ARN) that uniquely identifies the index.
--   
--   <a>$sel:keySchema:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_keySchema</a> - The complete key
--   schema for a global secondary index, which consists of one or more
--   pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_projection</a> - Represents
--   attributes that are copied (projected) from the table into the global
--   secondary index. These are in addition to the primary key attributes
--   and index key attributes, which are automatically projected.
--   
--   <a>$sel:itemCount:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_itemCount</a> - The number of items
--   in the specified index. DynamoDB updates this value approximately
--   every six hours. Recent changes might not be reflected in this value.
--   
--   <a>$sel:indexName:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_indexName</a> - The name of the
--   global secondary index.
newGlobalSecondaryIndexDescription :: GlobalSecondaryIndexDescription

-- | Indicates whether the index is currently backfilling.
--   <i>Backfilling</i> is the process of reading items from the table and
--   determining whether they can be added to the index. (Not all items
--   will qualify: For example, a partition key cannot have any duplicate
--   values.) If an item can be added to the index, DynamoDB will do so.
--   After all items have been processed, the backfilling operation is
--   complete and <tt>Backfilling</tt> is false.
--   
--   You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false.
--   
--   For indexes that were created during a <tt>CreateTable</tt> operation,
--   the <tt>Backfilling</tt> attribute does not appear in the
--   <tt>DescribeTable</tt> output.
globalSecondaryIndexDescription_backfilling :: Lens' GlobalSecondaryIndexDescription (Maybe Bool)

-- | The total size of the specified index, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
globalSecondaryIndexDescription_indexSizeBytes :: Lens' GlobalSecondaryIndexDescription (Maybe Integer)

-- | The current state of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
globalSecondaryIndexDescription_indexStatus :: Lens' GlobalSecondaryIndexDescription (Maybe IndexStatus)

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
globalSecondaryIndexDescription_provisionedThroughput :: Lens' GlobalSecondaryIndexDescription (Maybe ProvisionedThroughputDescription)

-- | The Amazon Resource Name (ARN) that uniquely identifies the index.
globalSecondaryIndexDescription_indexArn :: Lens' GlobalSecondaryIndexDescription (Maybe Text)

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
globalSecondaryIndexDescription_keySchema :: Lens' GlobalSecondaryIndexDescription (Maybe (NonEmpty KeySchemaElement))

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
globalSecondaryIndexDescription_projection :: Lens' GlobalSecondaryIndexDescription (Maybe Projection)

-- | The number of items in the specified index. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
globalSecondaryIndexDescription_itemCount :: Lens' GlobalSecondaryIndexDescription (Maybe Integer)

-- | The name of the global secondary index.
globalSecondaryIndexDescription_indexName :: Lens' GlobalSecondaryIndexDescription (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.GlobalSecondaryIndexDescription.GlobalSecondaryIndexDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.GlobalSecondaryIndexDescription.GlobalSecondaryIndexDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.GlobalSecondaryIndexDescription.GlobalSecondaryIndexDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.GlobalSecondaryIndexDescription.GlobalSecondaryIndexDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.GlobalSecondaryIndexDescription.GlobalSecondaryIndexDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.GlobalSecondaryIndexDescription.GlobalSecondaryIndexDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.GlobalSecondaryIndexDescription.GlobalSecondaryIndexDescription


module Amazonka.DynamoDB.Types.ProvisionedThroughputOverride

-- | Replica-specific provisioned throughput settings. If not specified,
--   uses the source table's provisioned throughput settings.
--   
--   <i>See:</i> <a>newProvisionedThroughputOverride</a> smart constructor.
data ProvisionedThroughputOverride
ProvisionedThroughputOverride' :: Maybe Natural -> ProvisionedThroughputOverride

-- | Replica-specific read capacity units. If not specified, uses the
--   source table's read capacity settings.
[$sel:readCapacityUnits:ProvisionedThroughputOverride'] :: ProvisionedThroughputOverride -> Maybe Natural

-- | Create a value of <a>ProvisionedThroughputOverride</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:ProvisionedThroughputOverride'</a>,
--   <a>provisionedThroughputOverride_readCapacityUnits</a> -
--   Replica-specific read capacity units. If not specified, uses the
--   source table's read capacity settings.
newProvisionedThroughputOverride :: ProvisionedThroughputOverride

-- | Replica-specific read capacity units. If not specified, uses the
--   source table's read capacity settings.
provisionedThroughputOverride_readCapacityUnits :: Lens' ProvisionedThroughputOverride (Maybe Natural)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ProvisionedThroughputOverride.ProvisionedThroughputOverride
instance GHC.Show.Show Amazonka.DynamoDB.Types.ProvisionedThroughputOverride.ProvisionedThroughputOverride
instance GHC.Read.Read Amazonka.DynamoDB.Types.ProvisionedThroughputOverride.ProvisionedThroughputOverride
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ProvisionedThroughputOverride.ProvisionedThroughputOverride
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ProvisionedThroughputOverride.ProvisionedThroughputOverride
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ProvisionedThroughputOverride.ProvisionedThroughputOverride
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ProvisionedThroughputOverride.ProvisionedThroughputOverride
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ProvisionedThroughputOverride.ProvisionedThroughputOverride


module Amazonka.DynamoDB.Types.PutRequest

-- | Represents a request to perform a <tt>PutItem</tt> operation on an
--   item.
--   
--   <i>See:</i> <a>newPutRequest</a> smart constructor.
data PutRequest
PutRequest' :: HashMap Text AttributeValue -> PutRequest

-- | A map of attribute name to attribute values, representing the primary
--   key of an item to be processed by <tt>PutItem</tt>. All of the table's
--   primary key attributes must be specified, and their data types must
--   match those of the table's key schema. If any attributes are present
--   in the item that are part of an index key schema for the table, their
--   types must match the index key schema.
[$sel:item:PutRequest'] :: PutRequest -> HashMap Text AttributeValue

-- | Create a value of <a>PutRequest</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:item:PutRequest'</a>, <a>putRequest_item</a> - A map of
--   attribute name to attribute values, representing the primary key of an
--   item to be processed by <tt>PutItem</tt>. All of the table's primary
--   key attributes must be specified, and their data types must match
--   those of the table's key schema. If any attributes are present in the
--   item that are part of an index key schema for the table, their types
--   must match the index key schema.
newPutRequest :: PutRequest

-- | A map of attribute name to attribute values, representing the primary
--   key of an item to be processed by <tt>PutItem</tt>. All of the table's
--   primary key attributes must be specified, and their data types must
--   match those of the table's key schema. If any attributes are present
--   in the item that are part of an index key schema for the table, their
--   types must match the index key schema.
putRequest_item :: Lens' PutRequest (HashMap Text AttributeValue)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.PutRequest.PutRequest
instance GHC.Show.Show Amazonka.DynamoDB.Types.PutRequest.PutRequest
instance GHC.Read.Read Amazonka.DynamoDB.Types.PutRequest.PutRequest
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.PutRequest.PutRequest
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.PutRequest.PutRequest
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.PutRequest.PutRequest
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.PutRequest.PutRequest
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.PutRequest.PutRequest


module Amazonka.DynamoDB.Types.Replica

-- | Represents the properties of a replica.
--   
--   <i>See:</i> <a>newReplica</a> smart constructor.
data Replica
Replica' :: Maybe Text -> Replica

-- | The Region where the replica needs to be created.
[$sel:regionName:Replica'] :: Replica -> Maybe Text

-- | Create a value of <a>Replica</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:Replica'</a>, <a>replica_regionName</a> - The
--   Region where the replica needs to be created.
newReplica :: Replica

-- | The Region where the replica needs to be created.
replica_regionName :: Lens' Replica (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.Replica.Replica
instance GHC.Show.Show Amazonka.DynamoDB.Types.Replica.Replica
instance GHC.Read.Read Amazonka.DynamoDB.Types.Replica.Replica
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.Replica.Replica
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.Replica.Replica
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.Replica.Replica
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.Replica.Replica
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.Replica.Replica


module Amazonka.DynamoDB.Types.GlobalTable

-- | Represents the properties of a global table.
--   
--   <i>See:</i> <a>newGlobalTable</a> smart constructor.
data GlobalTable
GlobalTable' :: Maybe Text -> Maybe [Replica] -> GlobalTable

-- | The global table name.
[$sel:globalTableName:GlobalTable'] :: GlobalTable -> Maybe Text

-- | The Regions where the global table has replicas.
[$sel:replicationGroup:GlobalTable'] :: GlobalTable -> Maybe [Replica]

-- | Create a value of <a>GlobalTable</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableName:GlobalTable'</a>,
--   <a>globalTable_globalTableName</a> - The global table name.
--   
--   <a>$sel:replicationGroup:GlobalTable'</a>,
--   <a>globalTable_replicationGroup</a> - The Regions where the global
--   table has replicas.
newGlobalTable :: GlobalTable

-- | The global table name.
globalTable_globalTableName :: Lens' GlobalTable (Maybe Text)

-- | The Regions where the global table has replicas.
globalTable_replicationGroup :: Lens' GlobalTable (Maybe [Replica])
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.GlobalTable.GlobalTable
instance GHC.Show.Show Amazonka.DynamoDB.Types.GlobalTable.GlobalTable
instance GHC.Read.Read Amazonka.DynamoDB.Types.GlobalTable.GlobalTable
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.GlobalTable.GlobalTable
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.GlobalTable.GlobalTable
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.GlobalTable.GlobalTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.GlobalTable.GlobalTable


module Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndex

-- | Represents the properties of a replica global secondary index.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndex</a> smart constructor.
data ReplicaGlobalSecondaryIndex
ReplicaGlobalSecondaryIndex' :: Maybe ProvisionedThroughputOverride -> Text -> ReplicaGlobalSecondaryIndex

-- | Replica table GSI-specific provisioned throughput. If not specified,
--   uses the source table GSI's read capacity settings.
[$sel:provisionedThroughputOverride:ReplicaGlobalSecondaryIndex'] :: ReplicaGlobalSecondaryIndex -> Maybe ProvisionedThroughputOverride

-- | The name of the global secondary index.
[$sel:indexName:ReplicaGlobalSecondaryIndex'] :: ReplicaGlobalSecondaryIndex -> Text

-- | Create a value of <a>ReplicaGlobalSecondaryIndex</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedThroughputOverride:ReplicaGlobalSecondaryIndex'</a>,
--   <a>replicaGlobalSecondaryIndex_provisionedThroughputOverride</a> -
--   Replica table GSI-specific provisioned throughput. If not specified,
--   uses the source table GSI's read capacity settings.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndex'</a>,
--   <a>replicaGlobalSecondaryIndex_indexName</a> - The name of the global
--   secondary index.
newReplicaGlobalSecondaryIndex :: Text -> ReplicaGlobalSecondaryIndex

-- | Replica table GSI-specific provisioned throughput. If not specified,
--   uses the source table GSI's read capacity settings.
replicaGlobalSecondaryIndex_provisionedThroughputOverride :: Lens' ReplicaGlobalSecondaryIndex (Maybe ProvisionedThroughputOverride)

-- | The name of the global secondary index.
replicaGlobalSecondaryIndex_indexName :: Lens' ReplicaGlobalSecondaryIndex Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndex.ReplicaGlobalSecondaryIndex
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndex.ReplicaGlobalSecondaryIndex
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndex.ReplicaGlobalSecondaryIndex
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndex.ReplicaGlobalSecondaryIndex
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndex.ReplicaGlobalSecondaryIndex
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndex.ReplicaGlobalSecondaryIndex
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndex.ReplicaGlobalSecondaryIndex


module Amazonka.DynamoDB.Types.CreateReplicationGroupMemberAction

-- | Represents a replica to be created.
--   
--   <i>See:</i> <a>newCreateReplicationGroupMemberAction</a> smart
--   constructor.
data CreateReplicationGroupMemberAction
CreateReplicationGroupMemberAction' :: Maybe Text -> Maybe ProvisionedThroughputOverride -> Maybe (NonEmpty ReplicaGlobalSecondaryIndex) -> Text -> CreateReplicationGroupMemberAction

-- | The AWS KMS customer master key (CMK) that should be used for AWS KMS
--   encryption in the new replica. To specify a CMK, use its key ID,
--   Amazon Resource Name (ARN), alias name, or alias ARN. Note that you
--   should only provide this parameter if the key is different from the
--   default DynamoDB KMS master key alias/aws/dynamodb.
[$sel:kmsMasterKeyId:CreateReplicationGroupMemberAction'] :: CreateReplicationGroupMemberAction -> Maybe Text

-- | Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
[$sel:provisionedThroughputOverride:CreateReplicationGroupMemberAction'] :: CreateReplicationGroupMemberAction -> Maybe ProvisionedThroughputOverride

-- | Replica-specific global secondary index settings.
[$sel:globalSecondaryIndexes:CreateReplicationGroupMemberAction'] :: CreateReplicationGroupMemberAction -> Maybe (NonEmpty ReplicaGlobalSecondaryIndex)

-- | The Region where the new replica will be created.
[$sel:regionName:CreateReplicationGroupMemberAction'] :: CreateReplicationGroupMemberAction -> Text

-- | Create a value of <a>CreateReplicationGroupMemberAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsMasterKeyId:CreateReplicationGroupMemberAction'</a>,
--   <a>createReplicationGroupMemberAction_kmsMasterKeyId</a> - The AWS KMS
--   customer master key (CMK) that should be used for AWS KMS encryption
--   in the new replica. To specify a CMK, use its key ID, Amazon Resource
--   Name (ARN), alias name, or alias ARN. Note that you should only
--   provide this parameter if the key is different from the default
--   DynamoDB KMS master key alias/aws/dynamodb.
--   
--   
--   <a>$sel:provisionedThroughputOverride:CreateReplicationGroupMemberAction'</a>,
--   <a>createReplicationGroupMemberAction_provisionedThroughputOverride</a>
--   - Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
--   
--   
--   <a>$sel:globalSecondaryIndexes:CreateReplicationGroupMemberAction'</a>,
--   <a>createReplicationGroupMemberAction_globalSecondaryIndexes</a> -
--   Replica-specific global secondary index settings.
--   
--   <a>$sel:regionName:CreateReplicationGroupMemberAction'</a>,
--   <a>createReplicationGroupMemberAction_regionName</a> - The Region
--   where the new replica will be created.
newCreateReplicationGroupMemberAction :: Text -> CreateReplicationGroupMemberAction

-- | The AWS KMS customer master key (CMK) that should be used for AWS KMS
--   encryption in the new replica. To specify a CMK, use its key ID,
--   Amazon Resource Name (ARN), alias name, or alias ARN. Note that you
--   should only provide this parameter if the key is different from the
--   default DynamoDB KMS master key alias/aws/dynamodb.
createReplicationGroupMemberAction_kmsMasterKeyId :: Lens' CreateReplicationGroupMemberAction (Maybe Text)

-- | Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
createReplicationGroupMemberAction_provisionedThroughputOverride :: Lens' CreateReplicationGroupMemberAction (Maybe ProvisionedThroughputOverride)

-- | Replica-specific global secondary index settings.
createReplicationGroupMemberAction_globalSecondaryIndexes :: Lens' CreateReplicationGroupMemberAction (Maybe (NonEmpty ReplicaGlobalSecondaryIndex))

-- | The Region where the new replica will be created.
createReplicationGroupMemberAction_regionName :: Lens' CreateReplicationGroupMemberAction Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.CreateReplicationGroupMemberAction.CreateReplicationGroupMemberAction
instance GHC.Show.Show Amazonka.DynamoDB.Types.CreateReplicationGroupMemberAction.CreateReplicationGroupMemberAction
instance GHC.Read.Read Amazonka.DynamoDB.Types.CreateReplicationGroupMemberAction.CreateReplicationGroupMemberAction
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.CreateReplicationGroupMemberAction.CreateReplicationGroupMemberAction
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.CreateReplicationGroupMemberAction.CreateReplicationGroupMemberAction
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.CreateReplicationGroupMemberAction.CreateReplicationGroupMemberAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.CreateReplicationGroupMemberAction.CreateReplicationGroupMemberAction


module Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingDescription

-- | Represents the auto scaling configuration for a replica global
--   secondary index.
--   
--   <i>See:</i>
--   <a>newReplicaGlobalSecondaryIndexAutoScalingDescription</a> smart
--   constructor.
data ReplicaGlobalSecondaryIndexAutoScalingDescription
ReplicaGlobalSecondaryIndexAutoScalingDescription' :: Maybe IndexStatus -> Maybe AutoScalingSettingsDescription -> Maybe AutoScalingSettingsDescription -> Maybe Text -> ReplicaGlobalSecondaryIndexAutoScalingDescription

-- | The current state of the replica global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
[$sel:indexStatus:ReplicaGlobalSecondaryIndexAutoScalingDescription'] :: ReplicaGlobalSecondaryIndexAutoScalingDescription -> Maybe IndexStatus
[$sel:provisionedWriteCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexAutoScalingDescription'] :: ReplicaGlobalSecondaryIndexAutoScalingDescription -> Maybe AutoScalingSettingsDescription
[$sel:provisionedReadCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexAutoScalingDescription'] :: ReplicaGlobalSecondaryIndexAutoScalingDescription -> Maybe AutoScalingSettingsDescription

-- | The name of the global secondary index.
[$sel:indexName:ReplicaGlobalSecondaryIndexAutoScalingDescription'] :: ReplicaGlobalSecondaryIndexAutoScalingDescription -> Maybe Text

-- | Create a value of
--   <a>ReplicaGlobalSecondaryIndexAutoScalingDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:indexStatus:ReplicaGlobalSecondaryIndexAutoScalingDescription'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingDescription_indexStatus</a> -
--   The current state of the replica global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexAutoScalingDescription'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingDescription_provisionedWriteCapacityAutoScalingSettings</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:provisionedReadCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexAutoScalingDescription'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingDescription_provisionedReadCapacityAutoScalingSettings</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexAutoScalingDescription'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingDescription_indexName</a> -
--   The name of the global secondary index.
newReplicaGlobalSecondaryIndexAutoScalingDescription :: ReplicaGlobalSecondaryIndexAutoScalingDescription

-- | The current state of the replica global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
replicaGlobalSecondaryIndexAutoScalingDescription_indexStatus :: Lens' ReplicaGlobalSecondaryIndexAutoScalingDescription (Maybe IndexStatus)

-- | Undocumented member.
replicaGlobalSecondaryIndexAutoScalingDescription_provisionedWriteCapacityAutoScalingSettings :: Lens' ReplicaGlobalSecondaryIndexAutoScalingDescription (Maybe AutoScalingSettingsDescription)

-- | Undocumented member.
replicaGlobalSecondaryIndexAutoScalingDescription_provisionedReadCapacityAutoScalingSettings :: Lens' ReplicaGlobalSecondaryIndexAutoScalingDescription (Maybe AutoScalingSettingsDescription)

-- | The name of the global secondary index.
replicaGlobalSecondaryIndexAutoScalingDescription_indexName :: Lens' ReplicaGlobalSecondaryIndexAutoScalingDescription (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingDescription.ReplicaGlobalSecondaryIndexAutoScalingDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingDescription.ReplicaGlobalSecondaryIndexAutoScalingDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingDescription.ReplicaGlobalSecondaryIndexAutoScalingDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingDescription.ReplicaGlobalSecondaryIndexAutoScalingDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingDescription.ReplicaGlobalSecondaryIndexAutoScalingDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingDescription.ReplicaGlobalSecondaryIndexAutoScalingDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingDescription.ReplicaGlobalSecondaryIndexAutoScalingDescription


module Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingUpdate

-- | Represents the auto scaling settings of a global secondary index for a
--   replica that will be modified.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndexAutoScalingUpdate</a>
--   smart constructor.
data ReplicaGlobalSecondaryIndexAutoScalingUpdate
ReplicaGlobalSecondaryIndexAutoScalingUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe Text -> ReplicaGlobalSecondaryIndexAutoScalingUpdate
[$sel:provisionedReadCapacityAutoScalingUpdate:ReplicaGlobalSecondaryIndexAutoScalingUpdate'] :: ReplicaGlobalSecondaryIndexAutoScalingUpdate -> Maybe AutoScalingSettingsUpdate

-- | The name of the global secondary index.
[$sel:indexName:ReplicaGlobalSecondaryIndexAutoScalingUpdate'] :: ReplicaGlobalSecondaryIndexAutoScalingUpdate -> Maybe Text

-- | Create a value of <a>ReplicaGlobalSecondaryIndexAutoScalingUpdate</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedReadCapacityAutoScalingUpdate:ReplicaGlobalSecondaryIndexAutoScalingUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingUpdate_provisionedReadCapacityAutoScalingUpdate</a>
--   - Undocumented member.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexAutoScalingUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingUpdate_indexName</a> - The
--   name of the global secondary index.
newReplicaGlobalSecondaryIndexAutoScalingUpdate :: ReplicaGlobalSecondaryIndexAutoScalingUpdate

-- | Undocumented member.
replicaGlobalSecondaryIndexAutoScalingUpdate_provisionedReadCapacityAutoScalingUpdate :: Lens' ReplicaGlobalSecondaryIndexAutoScalingUpdate (Maybe AutoScalingSettingsUpdate)

-- | The name of the global secondary index.
replicaGlobalSecondaryIndexAutoScalingUpdate_indexName :: Lens' ReplicaGlobalSecondaryIndexAutoScalingUpdate (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingUpdate.ReplicaGlobalSecondaryIndexAutoScalingUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingUpdate.ReplicaGlobalSecondaryIndexAutoScalingUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingUpdate.ReplicaGlobalSecondaryIndexAutoScalingUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingUpdate.ReplicaGlobalSecondaryIndexAutoScalingUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingUpdate.ReplicaGlobalSecondaryIndexAutoScalingUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingUpdate.ReplicaGlobalSecondaryIndexAutoScalingUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexAutoScalingUpdate.ReplicaGlobalSecondaryIndexAutoScalingUpdate


module Amazonka.DynamoDB.Types.ReplicaAutoScalingUpdate

-- | Represents the auto scaling settings of a replica that will be
--   modified.
--   
--   <i>See:</i> <a>newReplicaAutoScalingUpdate</a> smart constructor.
data ReplicaAutoScalingUpdate
ReplicaAutoScalingUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe [ReplicaGlobalSecondaryIndexAutoScalingUpdate] -> Text -> ReplicaAutoScalingUpdate
[$sel:replicaProvisionedReadCapacityAutoScalingUpdate:ReplicaAutoScalingUpdate'] :: ReplicaAutoScalingUpdate -> Maybe AutoScalingSettingsUpdate

-- | Represents the auto scaling settings of global secondary indexes that
--   will be modified.
[$sel:replicaGlobalSecondaryIndexUpdates:ReplicaAutoScalingUpdate'] :: ReplicaAutoScalingUpdate -> Maybe [ReplicaGlobalSecondaryIndexAutoScalingUpdate]

-- | The Region where the replica exists.
[$sel:regionName:ReplicaAutoScalingUpdate'] :: ReplicaAutoScalingUpdate -> Text

-- | Create a value of <a>ReplicaAutoScalingUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityAutoScalingUpdate:ReplicaAutoScalingUpdate'</a>,
--   <a>replicaAutoScalingUpdate_replicaProvisionedReadCapacityAutoScalingUpdate</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:replicaGlobalSecondaryIndexUpdates:ReplicaAutoScalingUpdate'</a>,
--   <a>replicaAutoScalingUpdate_replicaGlobalSecondaryIndexUpdates</a> -
--   Represents the auto scaling settings of global secondary indexes that
--   will be modified.
--   
--   <a>$sel:regionName:ReplicaAutoScalingUpdate'</a>,
--   <a>replicaAutoScalingUpdate_regionName</a> - The Region where the
--   replica exists.
newReplicaAutoScalingUpdate :: Text -> ReplicaAutoScalingUpdate

-- | Undocumented member.
replicaAutoScalingUpdate_replicaProvisionedReadCapacityAutoScalingUpdate :: Lens' ReplicaAutoScalingUpdate (Maybe AutoScalingSettingsUpdate)

-- | Represents the auto scaling settings of global secondary indexes that
--   will be modified.
replicaAutoScalingUpdate_replicaGlobalSecondaryIndexUpdates :: Lens' ReplicaAutoScalingUpdate (Maybe [ReplicaGlobalSecondaryIndexAutoScalingUpdate])

-- | The Region where the replica exists.
replicaAutoScalingUpdate_regionName :: Lens' ReplicaAutoScalingUpdate Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaAutoScalingUpdate.ReplicaAutoScalingUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaAutoScalingUpdate.ReplicaAutoScalingUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaAutoScalingUpdate.ReplicaAutoScalingUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaAutoScalingUpdate.ReplicaAutoScalingUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaAutoScalingUpdate.ReplicaAutoScalingUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaAutoScalingUpdate.ReplicaAutoScalingUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ReplicaAutoScalingUpdate.ReplicaAutoScalingUpdate


module Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexDescription

-- | Represents the properties of a replica global secondary index.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndexDescription</a> smart
--   constructor.
data ReplicaGlobalSecondaryIndexDescription
ReplicaGlobalSecondaryIndexDescription' :: Maybe ProvisionedThroughputOverride -> Maybe Text -> ReplicaGlobalSecondaryIndexDescription

-- | If not described, uses the source table GSI's read capacity settings.
[$sel:provisionedThroughputOverride:ReplicaGlobalSecondaryIndexDescription'] :: ReplicaGlobalSecondaryIndexDescription -> Maybe ProvisionedThroughputOverride

-- | The name of the global secondary index.
[$sel:indexName:ReplicaGlobalSecondaryIndexDescription'] :: ReplicaGlobalSecondaryIndexDescription -> Maybe Text

-- | Create a value of <a>ReplicaGlobalSecondaryIndexDescription</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedThroughputOverride:ReplicaGlobalSecondaryIndexDescription'</a>,
--   <a>replicaGlobalSecondaryIndexDescription_provisionedThroughputOverride</a>
--   - If not described, uses the source table GSI's read capacity
--   settings.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexDescription'</a>,
--   <a>replicaGlobalSecondaryIndexDescription_indexName</a> - The name of
--   the global secondary index.
newReplicaGlobalSecondaryIndexDescription :: ReplicaGlobalSecondaryIndexDescription

-- | If not described, uses the source table GSI's read capacity settings.
replicaGlobalSecondaryIndexDescription_provisionedThroughputOverride :: Lens' ReplicaGlobalSecondaryIndexDescription (Maybe ProvisionedThroughputOverride)

-- | The name of the global secondary index.
replicaGlobalSecondaryIndexDescription_indexName :: Lens' ReplicaGlobalSecondaryIndexDescription (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexDescription.ReplicaGlobalSecondaryIndexDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexDescription.ReplicaGlobalSecondaryIndexDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexDescription.ReplicaGlobalSecondaryIndexDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexDescription.ReplicaGlobalSecondaryIndexDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexDescription.ReplicaGlobalSecondaryIndexDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexDescription.ReplicaGlobalSecondaryIndexDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexDescription.ReplicaGlobalSecondaryIndexDescription


module Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsDescription

-- | Represents the properties of a global secondary index.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndexSettingsDescription</a>
--   smart constructor.
data ReplicaGlobalSecondaryIndexSettingsDescription
ReplicaGlobalSecondaryIndexSettingsDescription' :: Maybe IndexStatus -> Maybe Natural -> Maybe Natural -> Maybe AutoScalingSettingsDescription -> Maybe AutoScalingSettingsDescription -> Text -> ReplicaGlobalSecondaryIndexSettingsDescription

-- | The current status of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global secondary index is being
--   created.</li>
--   <li><tt>UPDATING</tt> - The global secondary index is being
--   updated.</li>
--   <li><tt>DELETING</tt> - The global secondary index is being
--   deleted.</li>
--   <li><tt>ACTIVE</tt> - The global secondary index is ready for
--   use.</li>
--   </ul>
[$sel:indexStatus:ReplicaGlobalSecondaryIndexSettingsDescription'] :: ReplicaGlobalSecondaryIndexSettingsDescription -> Maybe IndexStatus

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
[$sel:provisionedReadCapacityUnits:ReplicaGlobalSecondaryIndexSettingsDescription'] :: ReplicaGlobalSecondaryIndexSettingsDescription -> Maybe Natural

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
[$sel:provisionedWriteCapacityUnits:ReplicaGlobalSecondaryIndexSettingsDescription'] :: ReplicaGlobalSecondaryIndexSettingsDescription -> Maybe Natural

-- | Auto scaling settings for a global secondary index replica's write
--   capacity units.
[$sel:provisionedWriteCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexSettingsDescription'] :: ReplicaGlobalSecondaryIndexSettingsDescription -> Maybe AutoScalingSettingsDescription

-- | Auto scaling settings for a global secondary index replica's read
--   capacity units.
[$sel:provisionedReadCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexSettingsDescription'] :: ReplicaGlobalSecondaryIndexSettingsDescription -> Maybe AutoScalingSettingsDescription

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
[$sel:indexName:ReplicaGlobalSecondaryIndexSettingsDescription'] :: ReplicaGlobalSecondaryIndexSettingsDescription -> Text

-- | Create a value of
--   <a>ReplicaGlobalSecondaryIndexSettingsDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:indexStatus:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_indexStatus</a> -
--   The current status of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global secondary index is being
--   created.</li>
--   <li><tt>UPDATING</tt> - The global secondary index is being
--   updated.</li>
--   <li><tt>DELETING</tt> - The global secondary index is being
--   deleted.</li>
--   <li><tt>ACTIVE</tt> - The global secondary index is ready for
--   use.</li>
--   </ul>
--   
--   
--   <a>$sel:provisionedReadCapacityUnits:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_provisionedReadCapacityUnits</a>
--   - The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
--   
--   
--   <a>$sel:provisionedWriteCapacityUnits:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_provisionedWriteCapacityUnits</a>
--   - The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_provisionedWriteCapacityAutoScalingSettings</a>
--   - Auto scaling settings for a global secondary index replica's write
--   capacity units.
--   
--   
--   <a>$sel:provisionedReadCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_provisionedReadCapacityAutoScalingSettings</a>
--   - Auto scaling settings for a global secondary index replica's read
--   capacity units.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_indexName</a> - The
--   name of the global secondary index. The name must be unique among all
--   other indexes on this table.
newReplicaGlobalSecondaryIndexSettingsDescription :: Text -> ReplicaGlobalSecondaryIndexSettingsDescription

-- | The current status of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global secondary index is being
--   created.</li>
--   <li><tt>UPDATING</tt> - The global secondary index is being
--   updated.</li>
--   <li><tt>DELETING</tt> - The global secondary index is being
--   deleted.</li>
--   <li><tt>ACTIVE</tt> - The global secondary index is ready for
--   use.</li>
--   </ul>
replicaGlobalSecondaryIndexSettingsDescription_indexStatus :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe IndexStatus)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
replicaGlobalSecondaryIndexSettingsDescription_provisionedReadCapacityUnits :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe Natural)

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
replicaGlobalSecondaryIndexSettingsDescription_provisionedWriteCapacityUnits :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe Natural)

-- | Auto scaling settings for a global secondary index replica's write
--   capacity units.
replicaGlobalSecondaryIndexSettingsDescription_provisionedWriteCapacityAutoScalingSettings :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe AutoScalingSettingsDescription)

-- | Auto scaling settings for a global secondary index replica's read
--   capacity units.
replicaGlobalSecondaryIndexSettingsDescription_provisionedReadCapacityAutoScalingSettings :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe AutoScalingSettingsDescription)

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
replicaGlobalSecondaryIndexSettingsDescription_indexName :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsDescription.ReplicaGlobalSecondaryIndexSettingsDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsDescription.ReplicaGlobalSecondaryIndexSettingsDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsDescription.ReplicaGlobalSecondaryIndexSettingsDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsDescription.ReplicaGlobalSecondaryIndexSettingsDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsDescription.ReplicaGlobalSecondaryIndexSettingsDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsDescription.ReplicaGlobalSecondaryIndexSettingsDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsDescription.ReplicaGlobalSecondaryIndexSettingsDescription


module Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsUpdate

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndexSettingsUpdate</a> smart
--   constructor.
data ReplicaGlobalSecondaryIndexSettingsUpdate
ReplicaGlobalSecondaryIndexSettingsUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe Natural -> Text -> ReplicaGlobalSecondaryIndexSettingsUpdate

-- | Auto scaling settings for managing a global secondary index replica's
--   read capacity units.
[$sel:provisionedReadCapacityAutoScalingSettingsUpdate:ReplicaGlobalSecondaryIndexSettingsUpdate'] :: ReplicaGlobalSecondaryIndexSettingsUpdate -> Maybe AutoScalingSettingsUpdate

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
[$sel:provisionedReadCapacityUnits:ReplicaGlobalSecondaryIndexSettingsUpdate'] :: ReplicaGlobalSecondaryIndexSettingsUpdate -> Maybe Natural

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
[$sel:indexName:ReplicaGlobalSecondaryIndexSettingsUpdate'] :: ReplicaGlobalSecondaryIndexSettingsUpdate -> Text

-- | Create a value of <a>ReplicaGlobalSecondaryIndexSettingsUpdate</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedReadCapacityAutoScalingSettingsUpdate:ReplicaGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsUpdate_provisionedReadCapacityAutoScalingSettingsUpdate</a>
--   - Auto scaling settings for managing a global secondary index
--   replica's read capacity units.
--   
--   
--   <a>$sel:provisionedReadCapacityUnits:ReplicaGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsUpdate_provisionedReadCapacityUnits</a>
--   - The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsUpdate_indexName</a> - The name
--   of the global secondary index. The name must be unique among all other
--   indexes on this table.
newReplicaGlobalSecondaryIndexSettingsUpdate :: Text -> ReplicaGlobalSecondaryIndexSettingsUpdate

-- | Auto scaling settings for managing a global secondary index replica's
--   read capacity units.
replicaGlobalSecondaryIndexSettingsUpdate_provisionedReadCapacityAutoScalingSettingsUpdate :: Lens' ReplicaGlobalSecondaryIndexSettingsUpdate (Maybe AutoScalingSettingsUpdate)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
replicaGlobalSecondaryIndexSettingsUpdate_provisionedReadCapacityUnits :: Lens' ReplicaGlobalSecondaryIndexSettingsUpdate (Maybe Natural)

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
replicaGlobalSecondaryIndexSettingsUpdate_indexName :: Lens' ReplicaGlobalSecondaryIndexSettingsUpdate Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsUpdate.ReplicaGlobalSecondaryIndexSettingsUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsUpdate.ReplicaGlobalSecondaryIndexSettingsUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsUpdate.ReplicaGlobalSecondaryIndexSettingsUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsUpdate.ReplicaGlobalSecondaryIndexSettingsUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsUpdate.ReplicaGlobalSecondaryIndexSettingsUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsUpdate.ReplicaGlobalSecondaryIndexSettingsUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ReplicaGlobalSecondaryIndexSettingsUpdate.ReplicaGlobalSecondaryIndexSettingsUpdate


module Amazonka.DynamoDB.Types.ReplicaSettingsUpdate

-- | Represents the settings for a global table in a Region that will be
--   modified.
--   
--   <i>See:</i> <a>newReplicaSettingsUpdate</a> smart constructor.
data ReplicaSettingsUpdate
ReplicaSettingsUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe Natural -> Maybe (NonEmpty ReplicaGlobalSecondaryIndexSettingsUpdate) -> Text -> ReplicaSettingsUpdate

-- | Auto scaling settings for managing a global table replica's read
--   capacity units.
[$sel:replicaProvisionedReadCapacityAutoScalingSettingsUpdate:ReplicaSettingsUpdate'] :: ReplicaSettingsUpdate -> Maybe AutoScalingSettingsUpdate

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:replicaProvisionedReadCapacityUnits:ReplicaSettingsUpdate'] :: ReplicaSettingsUpdate -> Maybe Natural

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
[$sel:replicaGlobalSecondaryIndexSettingsUpdate:ReplicaSettingsUpdate'] :: ReplicaSettingsUpdate -> Maybe (NonEmpty ReplicaGlobalSecondaryIndexSettingsUpdate)

-- | The Region of the replica to be added.
[$sel:regionName:ReplicaSettingsUpdate'] :: ReplicaSettingsUpdate -> Text

-- | Create a value of <a>ReplicaSettingsUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityAutoScalingSettingsUpdate:ReplicaSettingsUpdate'</a>,
--   <a>replicaSettingsUpdate_replicaProvisionedReadCapacityAutoScalingSettingsUpdate</a>
--   - Auto scaling settings for managing a global table replica's read
--   capacity units.
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityUnits:ReplicaSettingsUpdate'</a>,
--   <a>replicaSettingsUpdate_replicaProvisionedReadCapacityUnits</a> - The
--   maximum number of strongly consistent reads consumed per second before
--   DynamoDB returns a <tt>ThrottlingException</tt>. For more information,
--   see <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   
--   <a>$sel:replicaGlobalSecondaryIndexSettingsUpdate:ReplicaSettingsUpdate'</a>,
--   <a>replicaSettingsUpdate_replicaGlobalSecondaryIndexSettingsUpdate</a>
--   - Represents the settings of a global secondary index for a global
--   table that will be modified.
--   
--   <a>$sel:regionName:ReplicaSettingsUpdate'</a>,
--   <a>replicaSettingsUpdate_regionName</a> - The Region of the replica to
--   be added.
newReplicaSettingsUpdate :: Text -> ReplicaSettingsUpdate

-- | Auto scaling settings for managing a global table replica's read
--   capacity units.
replicaSettingsUpdate_replicaProvisionedReadCapacityAutoScalingSettingsUpdate :: Lens' ReplicaSettingsUpdate (Maybe AutoScalingSettingsUpdate)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
replicaSettingsUpdate_replicaProvisionedReadCapacityUnits :: Lens' ReplicaSettingsUpdate (Maybe Natural)

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
replicaSettingsUpdate_replicaGlobalSecondaryIndexSettingsUpdate :: Lens' ReplicaSettingsUpdate (Maybe (NonEmpty ReplicaGlobalSecondaryIndexSettingsUpdate))

-- | The Region of the replica to be added.
replicaSettingsUpdate_regionName :: Lens' ReplicaSettingsUpdate Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaSettingsUpdate.ReplicaSettingsUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaSettingsUpdate.ReplicaSettingsUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaSettingsUpdate.ReplicaSettingsUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaSettingsUpdate.ReplicaSettingsUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaSettingsUpdate.ReplicaSettingsUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaSettingsUpdate.ReplicaSettingsUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ReplicaSettingsUpdate.ReplicaSettingsUpdate


module Amazonka.DynamoDB.Types.ReplicaStatus
newtype ReplicaStatus
ReplicaStatus' :: Text -> ReplicaStatus
[fromReplicaStatus] :: ReplicaStatus -> Text
pattern ReplicaStatus_ACTIVE :: ReplicaStatus
pattern ReplicaStatus_CREATING :: ReplicaStatus
pattern ReplicaStatus_CREATION_FAILED :: ReplicaStatus
pattern ReplicaStatus_DELETING :: ReplicaStatus
pattern ReplicaStatus_INACCESSIBLE_ENCRYPTION_CREDENTIALS :: ReplicaStatus
pattern ReplicaStatus_REGION_DISABLED :: ReplicaStatus
pattern ReplicaStatus_UPDATING :: ReplicaStatus
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaStatus.ReplicaStatus


module Amazonka.DynamoDB.Types.ReplicaSettingsDescription

-- | Represents the properties of a replica.
--   
--   <i>See:</i> <a>newReplicaSettingsDescription</a> smart constructor.
data ReplicaSettingsDescription
ReplicaSettingsDescription' :: Maybe ReplicaStatus -> Maybe Natural -> Maybe Natural -> Maybe BillingModeSummary -> Maybe [ReplicaGlobalSecondaryIndexSettingsDescription] -> Maybe AutoScalingSettingsDescription -> Maybe AutoScalingSettingsDescription -> Text -> ReplicaSettingsDescription

-- | The current state of the Region:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The Region is being created.</li>
--   <li><tt>UPDATING</tt> - The Region is being updated.</li>
--   <li><tt>DELETING</tt> - The Region is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The Region is ready for use.</li>
--   </ul>
[$sel:replicaStatus:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe ReplicaStatus

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:replicaProvisionedReadCapacityUnits:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe Natural

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:replicaProvisionedWriteCapacityUnits:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe Natural

-- | The read/write capacity mode of the replica.
[$sel:replicaBillingModeSummary:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe BillingModeSummary

-- | Replica global secondary index settings for the global table.
[$sel:replicaGlobalSecondaryIndexSettings:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe [ReplicaGlobalSecondaryIndexSettingsDescription]

-- | Auto scaling settings for a global table replica's write capacity
--   units.
[$sel:replicaProvisionedWriteCapacityAutoScalingSettings:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe AutoScalingSettingsDescription

-- | Auto scaling settings for a global table replica's read capacity
--   units.
[$sel:replicaProvisionedReadCapacityAutoScalingSettings:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe AutoScalingSettingsDescription

-- | The Region name of the replica.
[$sel:regionName:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Text

-- | Create a value of <a>ReplicaSettingsDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaStatus:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaStatus</a> - The current state of
--   the Region:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The Region is being created.</li>
--   <li><tt>UPDATING</tt> - The Region is being updated.</li>
--   <li><tt>DELETING</tt> - The Region is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The Region is ready for use.</li>
--   </ul>
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityUnits:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaProvisionedReadCapacityUnits</a>
--   - The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   
--   <a>$sel:replicaProvisionedWriteCapacityUnits:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaProvisionedWriteCapacityUnits</a>
--   - The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:replicaBillingModeSummary:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaBillingModeSummary</a> - The
--   read/write capacity mode of the replica.
--   
--   
--   <a>$sel:replicaGlobalSecondaryIndexSettings:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaGlobalSecondaryIndexSettings</a>
--   - Replica global secondary index settings for the global table.
--   
--   
--   <a>$sel:replicaProvisionedWriteCapacityAutoScalingSettings:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaProvisionedWriteCapacityAutoScalingSettings</a>
--   - Auto scaling settings for a global table replica's write capacity
--   units.
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityAutoScalingSettings:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaProvisionedReadCapacityAutoScalingSettings</a>
--   - Auto scaling settings for a global table replica's read capacity
--   units.
--   
--   <a>$sel:regionName:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_regionName</a> - The Region name of the
--   replica.
newReplicaSettingsDescription :: Text -> ReplicaSettingsDescription

-- | The current state of the Region:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The Region is being created.</li>
--   <li><tt>UPDATING</tt> - The Region is being updated.</li>
--   <li><tt>DELETING</tt> - The Region is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The Region is ready for use.</li>
--   </ul>
replicaSettingsDescription_replicaStatus :: Lens' ReplicaSettingsDescription (Maybe ReplicaStatus)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
replicaSettingsDescription_replicaProvisionedReadCapacityUnits :: Lens' ReplicaSettingsDescription (Maybe Natural)

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
replicaSettingsDescription_replicaProvisionedWriteCapacityUnits :: Lens' ReplicaSettingsDescription (Maybe Natural)

-- | The read/write capacity mode of the replica.
replicaSettingsDescription_replicaBillingModeSummary :: Lens' ReplicaSettingsDescription (Maybe BillingModeSummary)

-- | Replica global secondary index settings for the global table.
replicaSettingsDescription_replicaGlobalSecondaryIndexSettings :: Lens' ReplicaSettingsDescription (Maybe [ReplicaGlobalSecondaryIndexSettingsDescription])

-- | Auto scaling settings for a global table replica's write capacity
--   units.
replicaSettingsDescription_replicaProvisionedWriteCapacityAutoScalingSettings :: Lens' ReplicaSettingsDescription (Maybe AutoScalingSettingsDescription)

-- | Auto scaling settings for a global table replica's read capacity
--   units.
replicaSettingsDescription_replicaProvisionedReadCapacityAutoScalingSettings :: Lens' ReplicaSettingsDescription (Maybe AutoScalingSettingsDescription)

-- | The Region name of the replica.
replicaSettingsDescription_regionName :: Lens' ReplicaSettingsDescription Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaSettingsDescription.ReplicaSettingsDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaSettingsDescription.ReplicaSettingsDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaSettingsDescription.ReplicaSettingsDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaSettingsDescription.ReplicaSettingsDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ReplicaSettingsDescription.ReplicaSettingsDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaSettingsDescription.ReplicaSettingsDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaSettingsDescription.ReplicaSettingsDescription


module Amazonka.DynamoDB.Types.ReplicaDescription

-- | Contains the details of the replica.
--   
--   <i>See:</i> <a>newReplicaDescription</a> smart constructor.
data ReplicaDescription
ReplicaDescription' :: Maybe ReplicaStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe ProvisionedThroughputOverride -> Maybe [ReplicaGlobalSecondaryIndexDescription] -> ReplicaDescription

-- | The current state of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   <li><tt>REGION_DISABLED</tt> - The replica is inaccessible because the
--   AWS Region has been disabled.If the AWS Region remains inaccessible
--   for more than 20 hours, DynamoDB will remove this replica from the
--   replication group. The replica will not be deleted and replication
--   will stop from and to this region.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS </tt> - The AWS KMS key
--   used to encrypt the table is inaccessible.If the AWS KMS key remains
--   inaccessible for more than 20 hours, DynamoDB will remove this replica
--   from the replication group. The replica will not be deleted and
--   replication will stop from and to this region.</li>
--   </ul>
[$sel:replicaStatus:ReplicaDescription'] :: ReplicaDescription -> Maybe ReplicaStatus

-- | The name of the Region.
[$sel:regionName:ReplicaDescription'] :: ReplicaDescription -> Maybe Text

-- | Specifies the progress of a Create, Update, or Delete action on the
--   replica as a percentage.
[$sel:replicaStatusPercentProgress:ReplicaDescription'] :: ReplicaDescription -> Maybe Text

-- | Detailed information about the replica status.
[$sel:replicaStatusDescription:ReplicaDescription'] :: ReplicaDescription -> Maybe Text

-- | The time at which the replica was first detected as inaccessible. To
--   determine cause of inaccessibility check the <tt>ReplicaStatus</tt>
--   property.
[$sel:replicaInaccessibleDateTime:ReplicaDescription'] :: ReplicaDescription -> Maybe POSIX

-- | The AWS KMS customer master key (CMK) of the replica that will be used
--   for AWS KMS encryption.
[$sel:kmsMasterKeyId:ReplicaDescription'] :: ReplicaDescription -> Maybe Text

-- | Replica-specific provisioned throughput. If not described, uses the
--   source table's provisioned throughput settings.
[$sel:provisionedThroughputOverride:ReplicaDescription'] :: ReplicaDescription -> Maybe ProvisionedThroughputOverride

-- | Replica-specific global secondary index settings.
[$sel:globalSecondaryIndexes:ReplicaDescription'] :: ReplicaDescription -> Maybe [ReplicaGlobalSecondaryIndexDescription]

-- | Create a value of <a>ReplicaDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaStatus:ReplicaDescription'</a>,
--   <a>replicaDescription_replicaStatus</a> - The current state of the
--   replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   <li><tt>REGION_DISABLED</tt> - The replica is inaccessible because the
--   AWS Region has been disabled.If the AWS Region remains inaccessible
--   for more than 20 hours, DynamoDB will remove this replica from the
--   replication group. The replica will not be deleted and replication
--   will stop from and to this region.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS </tt> - The AWS KMS key
--   used to encrypt the table is inaccessible.If the AWS KMS key remains
--   inaccessible for more than 20 hours, DynamoDB will remove this replica
--   from the replication group. The replica will not be deleted and
--   replication will stop from and to this region.</li>
--   </ul>
--   
--   <a>$sel:regionName:ReplicaDescription'</a>,
--   <a>replicaDescription_regionName</a> - The name of the Region.
--   
--   <a>$sel:replicaStatusPercentProgress:ReplicaDescription'</a>,
--   <a>replicaDescription_replicaStatusPercentProgress</a> - Specifies the
--   progress of a Create, Update, or Delete action on the replica as a
--   percentage.
--   
--   <a>$sel:replicaStatusDescription:ReplicaDescription'</a>,
--   <a>replicaDescription_replicaStatusDescription</a> - Detailed
--   information about the replica status.
--   
--   <a>$sel:replicaInaccessibleDateTime:ReplicaDescription'</a>,
--   <a>replicaDescription_replicaInaccessibleDateTime</a> - The time at
--   which the replica was first detected as inaccessible. To determine
--   cause of inaccessibility check the <tt>ReplicaStatus</tt> property.
--   
--   <a>$sel:kmsMasterKeyId:ReplicaDescription'</a>,
--   <a>replicaDescription_kmsMasterKeyId</a> - The AWS KMS customer master
--   key (CMK) of the replica that will be used for AWS KMS encryption.
--   
--   <a>$sel:provisionedThroughputOverride:ReplicaDescription'</a>,
--   <a>replicaDescription_provisionedThroughputOverride</a> -
--   Replica-specific provisioned throughput. If not described, uses the
--   source table's provisioned throughput settings.
--   
--   <a>$sel:globalSecondaryIndexes:ReplicaDescription'</a>,
--   <a>replicaDescription_globalSecondaryIndexes</a> - Replica-specific
--   global secondary index settings.
newReplicaDescription :: ReplicaDescription

-- | The current state of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   <li><tt>REGION_DISABLED</tt> - The replica is inaccessible because the
--   AWS Region has been disabled.If the AWS Region remains inaccessible
--   for more than 20 hours, DynamoDB will remove this replica from the
--   replication group. The replica will not be deleted and replication
--   will stop from and to this region.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS </tt> - The AWS KMS key
--   used to encrypt the table is inaccessible.If the AWS KMS key remains
--   inaccessible for more than 20 hours, DynamoDB will remove this replica
--   from the replication group. The replica will not be deleted and
--   replication will stop from and to this region.</li>
--   </ul>
replicaDescription_replicaStatus :: Lens' ReplicaDescription (Maybe ReplicaStatus)

-- | The name of the Region.
replicaDescription_regionName :: Lens' ReplicaDescription (Maybe Text)

-- | Specifies the progress of a Create, Update, or Delete action on the
--   replica as a percentage.
replicaDescription_replicaStatusPercentProgress :: Lens' ReplicaDescription (Maybe Text)

-- | Detailed information about the replica status.
replicaDescription_replicaStatusDescription :: Lens' ReplicaDescription (Maybe Text)

-- | The time at which the replica was first detected as inaccessible. To
--   determine cause of inaccessibility check the <tt>ReplicaStatus</tt>
--   property.
replicaDescription_replicaInaccessibleDateTime :: Lens' ReplicaDescription (Maybe UTCTime)

-- | The AWS KMS customer master key (CMK) of the replica that will be used
--   for AWS KMS encryption.
replicaDescription_kmsMasterKeyId :: Lens' ReplicaDescription (Maybe Text)

-- | Replica-specific provisioned throughput. If not described, uses the
--   source table's provisioned throughput settings.
replicaDescription_provisionedThroughputOverride :: Lens' ReplicaDescription (Maybe ProvisionedThroughputOverride)

-- | Replica-specific global secondary index settings.
replicaDescription_globalSecondaryIndexes :: Lens' ReplicaDescription (Maybe [ReplicaGlobalSecondaryIndexDescription])
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaDescription.ReplicaDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaDescription.ReplicaDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaDescription.ReplicaDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaDescription.ReplicaDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ReplicaDescription.ReplicaDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaDescription.ReplicaDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaDescription.ReplicaDescription


module Amazonka.DynamoDB.Types.GlobalTableDescription

-- | Contains details about the global table.
--   
--   <i>See:</i> <a>newGlobalTableDescription</a> smart constructor.
data GlobalTableDescription
GlobalTableDescription' :: Maybe GlobalTableStatus -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe [ReplicaDescription] -> GlobalTableDescription

-- | The current state of the global table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global table is being created.</li>
--   <li><tt>UPDATING</tt> - The global table is being updated.</li>
--   <li><tt>DELETING</tt> - The global table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The global table is ready for use.</li>
--   </ul>
[$sel:globalTableStatus:GlobalTableDescription'] :: GlobalTableDescription -> Maybe GlobalTableStatus

-- | The global table name.
[$sel:globalTableName:GlobalTableDescription'] :: GlobalTableDescription -> Maybe Text

-- | The unique identifier of the global table.
[$sel:globalTableArn:GlobalTableDescription'] :: GlobalTableDescription -> Maybe Text

-- | The creation time of the global table.
[$sel:creationDateTime:GlobalTableDescription'] :: GlobalTableDescription -> Maybe POSIX

-- | The Regions where the global table has replicas.
[$sel:replicationGroup:GlobalTableDescription'] :: GlobalTableDescription -> Maybe [ReplicaDescription]

-- | Create a value of <a>GlobalTableDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableStatus:GlobalTableDescription'</a>,
--   <a>globalTableDescription_globalTableStatus</a> - The current state of
--   the global table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global table is being created.</li>
--   <li><tt>UPDATING</tt> - The global table is being updated.</li>
--   <li><tt>DELETING</tt> - The global table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The global table is ready for use.</li>
--   </ul>
--   
--   <a>$sel:globalTableName:GlobalTableDescription'</a>,
--   <a>globalTableDescription_globalTableName</a> - The global table name.
--   
--   <a>$sel:globalTableArn:GlobalTableDescription'</a>,
--   <a>globalTableDescription_globalTableArn</a> - The unique identifier
--   of the global table.
--   
--   <a>$sel:creationDateTime:GlobalTableDescription'</a>,
--   <a>globalTableDescription_creationDateTime</a> - The creation time of
--   the global table.
--   
--   <a>$sel:replicationGroup:GlobalTableDescription'</a>,
--   <a>globalTableDescription_replicationGroup</a> - The Regions where the
--   global table has replicas.
newGlobalTableDescription :: GlobalTableDescription

-- | The current state of the global table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global table is being created.</li>
--   <li><tt>UPDATING</tt> - The global table is being updated.</li>
--   <li><tt>DELETING</tt> - The global table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The global table is ready for use.</li>
--   </ul>
globalTableDescription_globalTableStatus :: Lens' GlobalTableDescription (Maybe GlobalTableStatus)

-- | The global table name.
globalTableDescription_globalTableName :: Lens' GlobalTableDescription (Maybe Text)

-- | The unique identifier of the global table.
globalTableDescription_globalTableArn :: Lens' GlobalTableDescription (Maybe Text)

-- | The creation time of the global table.
globalTableDescription_creationDateTime :: Lens' GlobalTableDescription (Maybe UTCTime)

-- | The Regions where the global table has replicas.
globalTableDescription_replicationGroup :: Lens' GlobalTableDescription (Maybe [ReplicaDescription])
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.GlobalTableDescription.GlobalTableDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.GlobalTableDescription.GlobalTableDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.GlobalTableDescription.GlobalTableDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.GlobalTableDescription.GlobalTableDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.GlobalTableDescription.GlobalTableDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.GlobalTableDescription.GlobalTableDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.GlobalTableDescription.GlobalTableDescription


module Amazonka.DynamoDB.Types.ReplicaAutoScalingDescription

-- | Represents the auto scaling settings of the replica.
--   
--   <i>See:</i> <a>newReplicaAutoScalingDescription</a> smart constructor.
data ReplicaAutoScalingDescription
ReplicaAutoScalingDescription' :: Maybe ReplicaStatus -> Maybe Text -> Maybe [ReplicaGlobalSecondaryIndexAutoScalingDescription] -> Maybe AutoScalingSettingsDescription -> Maybe AutoScalingSettingsDescription -> ReplicaAutoScalingDescription

-- | The current state of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   </ul>
[$sel:replicaStatus:ReplicaAutoScalingDescription'] :: ReplicaAutoScalingDescription -> Maybe ReplicaStatus

-- | The Region where the replica exists.
[$sel:regionName:ReplicaAutoScalingDescription'] :: ReplicaAutoScalingDescription -> Maybe Text

-- | Replica-specific global secondary index auto scaling settings.
[$sel:globalSecondaryIndexes:ReplicaAutoScalingDescription'] :: ReplicaAutoScalingDescription -> Maybe [ReplicaGlobalSecondaryIndexAutoScalingDescription]
[$sel:replicaProvisionedWriteCapacityAutoScalingSettings:ReplicaAutoScalingDescription'] :: ReplicaAutoScalingDescription -> Maybe AutoScalingSettingsDescription
[$sel:replicaProvisionedReadCapacityAutoScalingSettings:ReplicaAutoScalingDescription'] :: ReplicaAutoScalingDescription -> Maybe AutoScalingSettingsDescription

-- | Create a value of <a>ReplicaAutoScalingDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaStatus:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_replicaStatus</a> - The current state
--   of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   </ul>
--   
--   <a>$sel:regionName:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_regionName</a> - The Region where the
--   replica exists.
--   
--   <a>$sel:globalSecondaryIndexes:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_globalSecondaryIndexes</a> -
--   Replica-specific global secondary index auto scaling settings.
--   
--   
--   <a>$sel:replicaProvisionedWriteCapacityAutoScalingSettings:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_replicaProvisionedWriteCapacityAutoScalingSettings</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityAutoScalingSettings:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_replicaProvisionedReadCapacityAutoScalingSettings</a>
--   - Undocumented member.
newReplicaAutoScalingDescription :: ReplicaAutoScalingDescription

-- | The current state of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   </ul>
replicaAutoScalingDescription_replicaStatus :: Lens' ReplicaAutoScalingDescription (Maybe ReplicaStatus)

-- | The Region where the replica exists.
replicaAutoScalingDescription_regionName :: Lens' ReplicaAutoScalingDescription (Maybe Text)

-- | Replica-specific global secondary index auto scaling settings.
replicaAutoScalingDescription_globalSecondaryIndexes :: Lens' ReplicaAutoScalingDescription (Maybe [ReplicaGlobalSecondaryIndexAutoScalingDescription])

-- | Undocumented member.
replicaAutoScalingDescription_replicaProvisionedWriteCapacityAutoScalingSettings :: Lens' ReplicaAutoScalingDescription (Maybe AutoScalingSettingsDescription)

-- | Undocumented member.
replicaAutoScalingDescription_replicaProvisionedReadCapacityAutoScalingSettings :: Lens' ReplicaAutoScalingDescription (Maybe AutoScalingSettingsDescription)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaAutoScalingDescription.ReplicaAutoScalingDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaAutoScalingDescription.ReplicaAutoScalingDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaAutoScalingDescription.ReplicaAutoScalingDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaAutoScalingDescription.ReplicaAutoScalingDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ReplicaAutoScalingDescription.ReplicaAutoScalingDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaAutoScalingDescription.ReplicaAutoScalingDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaAutoScalingDescription.ReplicaAutoScalingDescription


module Amazonka.DynamoDB.Types.ReplicaUpdate

-- | Represents one of the following:
--   
--   <ul>
--   <li>A new replica to be added to an existing global table.</li>
--   <li>New parameters for an existing replica.</li>
--   <li>An existing replica to be removed from an existing global
--   table.</li>
--   </ul>
--   
--   <i>See:</i> <a>newReplicaUpdate</a> smart constructor.
data ReplicaUpdate
ReplicaUpdate' :: Maybe CreateReplicaAction -> Maybe DeleteReplicaAction -> ReplicaUpdate

-- | The parameters required for creating a replica on an existing global
--   table.
[$sel:create:ReplicaUpdate'] :: ReplicaUpdate -> Maybe CreateReplicaAction

-- | The name of the existing replica to be removed.
[$sel:delete':ReplicaUpdate'] :: ReplicaUpdate -> Maybe DeleteReplicaAction

-- | Create a value of <a>ReplicaUpdate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:create:ReplicaUpdate'</a>, <a>replicaUpdate_create</a> - The
--   parameters required for creating a replica on an existing global
--   table.
--   
--   <a>$sel:delete':ReplicaUpdate'</a>, <a>replicaUpdate_delete</a> - The
--   name of the existing replica to be removed.
newReplicaUpdate :: ReplicaUpdate

-- | The parameters required for creating a replica on an existing global
--   table.
replicaUpdate_create :: Lens' ReplicaUpdate (Maybe CreateReplicaAction)

-- | The name of the existing replica to be removed.
replicaUpdate_delete :: Lens' ReplicaUpdate (Maybe DeleteReplicaAction)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicaUpdate.ReplicaUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicaUpdate.ReplicaUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicaUpdate.ReplicaUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicaUpdate.ReplicaUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicaUpdate.ReplicaUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicaUpdate.ReplicaUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ReplicaUpdate.ReplicaUpdate


module Amazonka.DynamoDB.Types.RestoreSummary

-- | Contains details for the restore.
--   
--   <i>See:</i> <a>newRestoreSummary</a> smart constructor.
data RestoreSummary
RestoreSummary' :: Maybe Text -> Maybe Text -> POSIX -> Bool -> RestoreSummary

-- | The ARN of the source table of the backup that is being restored.
[$sel:sourceTableArn:RestoreSummary'] :: RestoreSummary -> Maybe Text

-- | The Amazon Resource Name (ARN) of the backup from which the table was
--   restored.
[$sel:sourceBackupArn:RestoreSummary'] :: RestoreSummary -> Maybe Text

-- | Point in time or source backup time.
[$sel:restoreDateTime:RestoreSummary'] :: RestoreSummary -> POSIX

-- | Indicates if a restore is in progress or not.
[$sel:restoreInProgress:RestoreSummary'] :: RestoreSummary -> Bool

-- | Create a value of <a>RestoreSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourceTableArn:RestoreSummary'</a>,
--   <a>restoreSummary_sourceTableArn</a> - The ARN of the source table of
--   the backup that is being restored.
--   
--   <a>$sel:sourceBackupArn:RestoreSummary'</a>,
--   <a>restoreSummary_sourceBackupArn</a> - The Amazon Resource Name (ARN)
--   of the backup from which the table was restored.
--   
--   <a>$sel:restoreDateTime:RestoreSummary'</a>,
--   <a>restoreSummary_restoreDateTime</a> - Point in time or source backup
--   time.
--   
--   <a>$sel:restoreInProgress:RestoreSummary'</a>,
--   <a>restoreSummary_restoreInProgress</a> - Indicates if a restore is in
--   progress or not.
newRestoreSummary :: UTCTime -> Bool -> RestoreSummary

-- | The ARN of the source table of the backup that is being restored.
restoreSummary_sourceTableArn :: Lens' RestoreSummary (Maybe Text)

-- | The Amazon Resource Name (ARN) of the backup from which the table was
--   restored.
restoreSummary_sourceBackupArn :: Lens' RestoreSummary (Maybe Text)

-- | Point in time or source backup time.
restoreSummary_restoreDateTime :: Lens' RestoreSummary UTCTime

-- | Indicates if a restore is in progress or not.
restoreSummary_restoreInProgress :: Lens' RestoreSummary Bool
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.RestoreSummary.RestoreSummary
instance GHC.Show.Show Amazonka.DynamoDB.Types.RestoreSummary.RestoreSummary
instance GHC.Read.Read Amazonka.DynamoDB.Types.RestoreSummary.RestoreSummary
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.RestoreSummary.RestoreSummary
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.RestoreSummary.RestoreSummary
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.RestoreSummary.RestoreSummary
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.RestoreSummary.RestoreSummary


module Amazonka.DynamoDB.Types.ReturnConsumedCapacity

-- | Determines the level of detail about provisioned throughput
--   consumption that is returned in the response:
--   
--   <ul>
--   <li><tt>INDEXES</tt> - The response includes the aggregate
--   <tt>ConsumedCapacity</tt> for the operation, together with
--   <tt>ConsumedCapacity</tt> for each table and secondary index that was
--   accessed.Note that some operations, such as <tt>GetItem</tt> and
--   <tt>BatchGetItem</tt>, do not access any indexes at all. In these
--   cases, specifying <tt>INDEXES</tt> will only return
--   <tt>ConsumedCapacity</tt> information for table(s).</li>
--   <li><tt>TOTAL</tt> - The response includes only the aggregate
--   <tt>ConsumedCapacity</tt> for the operation.</li>
--   <li><tt>NONE</tt> - No <tt>ConsumedCapacity</tt> details are included
--   in the response.</li>
--   </ul>
newtype ReturnConsumedCapacity
ReturnConsumedCapacity' :: Text -> ReturnConsumedCapacity
[fromReturnConsumedCapacity] :: ReturnConsumedCapacity -> Text
pattern ReturnConsumedCapacity_INDEXES :: ReturnConsumedCapacity
pattern ReturnConsumedCapacity_NONE :: ReturnConsumedCapacity
pattern ReturnConsumedCapacity_TOTAL :: ReturnConsumedCapacity
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReturnConsumedCapacity.ReturnConsumedCapacity


module Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics
newtype ReturnItemCollectionMetrics
ReturnItemCollectionMetrics' :: Text -> ReturnItemCollectionMetrics
[fromReturnItemCollectionMetrics] :: ReturnItemCollectionMetrics -> Text
pattern ReturnItemCollectionMetrics_NONE :: ReturnItemCollectionMetrics
pattern ReturnItemCollectionMetrics_SIZE :: ReturnItemCollectionMetrics
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReturnItemCollectionMetrics.ReturnItemCollectionMetrics


module Amazonka.DynamoDB.Types.ReturnValue
newtype ReturnValue
ReturnValue' :: Text -> ReturnValue
[fromReturnValue] :: ReturnValue -> Text
pattern ReturnValue_ALL_NEW :: ReturnValue
pattern ReturnValue_ALL_OLD :: ReturnValue
pattern ReturnValue_NONE :: ReturnValue
pattern ReturnValue_UPDATED_NEW :: ReturnValue
pattern ReturnValue_UPDATED_OLD :: ReturnValue
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReturnValue.ReturnValue
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReturnValue.ReturnValue


module Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure
newtype ReturnValuesOnConditionCheckFailure
ReturnValuesOnConditionCheckFailure' :: Text -> ReturnValuesOnConditionCheckFailure
[fromReturnValuesOnConditionCheckFailure] :: ReturnValuesOnConditionCheckFailure -> Text
pattern ReturnValuesOnConditionCheckFailure_ALL_OLD :: ReturnValuesOnConditionCheckFailure
pattern ReturnValuesOnConditionCheckFailure_NONE :: ReturnValuesOnConditionCheckFailure
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReturnValuesOnConditionCheckFailure.ReturnValuesOnConditionCheckFailure


module Amazonka.DynamoDB.Types.Put

-- | Represents a request to perform a <tt>PutItem</tt> operation.
--   
--   <i>See:</i> <a>newPut</a> smart constructor.
data Put
Put' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnValuesOnConditionCheckFailure -> Maybe Text -> HashMap Text AttributeValue -> Text -> Put

-- | One or more substitution tokens for attribute names in an expression.
[$sel:expressionAttributeNames:Put'] :: Put -> Maybe (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
[$sel:expressionAttributeValues:Put'] :: Put -> Maybe (HashMap Text AttributeValue)

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Put</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
[$sel:returnValuesOnConditionCheckFailure:Put'] :: Put -> Maybe ReturnValuesOnConditionCheckFailure

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
[$sel:conditionExpression:Put'] :: Put -> Maybe Text

-- | A map of attribute name to attribute values, representing the primary
--   key of the item to be written by <tt>PutItem</tt>. All of the table's
--   primary key attributes must be specified, and their data types must
--   match those of the table's key schema. If any attributes are present
--   in the item that are part of an index key schema for the table, their
--   types must match the index key schema.
[$sel:item:Put'] :: Put -> HashMap Text AttributeValue

-- | Name of the table in which to write the item.
[$sel:tableName:Put'] :: Put -> Text

-- | Create a value of <a>Put</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:Put'</a>,
--   <a>put_expressionAttributeNames</a> - One or more substitution tokens
--   for attribute names in an expression.
--   
--   <a>$sel:expressionAttributeValues:Put'</a>,
--   <a>put_expressionAttributeValues</a> - One or more values that can be
--   substituted in an expression.
--   
--   <a>$sel:returnValuesOnConditionCheckFailure:Put'</a>,
--   <a>put_returnValuesOnConditionCheckFailure</a> - Use
--   <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Put</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
--   
--   <a>$sel:conditionExpression:Put'</a>, <a>put_conditionExpression</a> -
--   A condition that must be satisfied in order for a conditional update
--   to succeed.
--   
--   <a>$sel:item:Put'</a>, <a>put_item</a> - A map of attribute name to
--   attribute values, representing the primary key of the item to be
--   written by <tt>PutItem</tt>. All of the table's primary key attributes
--   must be specified, and their data types must match those of the
--   table's key schema. If any attributes are present in the item that are
--   part of an index key schema for the table, their types must match the
--   index key schema.
--   
--   <a>$sel:tableName:Put'</a>, <a>put_tableName</a> - Name of the table
--   in which to write the item.
newPut :: Text -> Put

-- | One or more substitution tokens for attribute names in an expression.
put_expressionAttributeNames :: Lens' Put (Maybe (HashMap Text Text))

-- | One or more values that can be substituted in an expression.
put_expressionAttributeValues :: Lens' Put (Maybe (HashMap Text AttributeValue))

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Put</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
put_returnValuesOnConditionCheckFailure :: Lens' Put (Maybe ReturnValuesOnConditionCheckFailure)

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
put_conditionExpression :: Lens' Put (Maybe Text)

-- | A map of attribute name to attribute values, representing the primary
--   key of the item to be written by <tt>PutItem</tt>. All of the table's
--   primary key attributes must be specified, and their data types must
--   match those of the table's key schema. If any attributes are present
--   in the item that are part of an index key schema for the table, their
--   types must match the index key schema.
put_item :: Lens' Put (HashMap Text AttributeValue)

-- | Name of the table in which to write the item.
put_tableName :: Lens' Put Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.Put.Put
instance GHC.Show.Show Amazonka.DynamoDB.Types.Put.Put
instance GHC.Read.Read Amazonka.DynamoDB.Types.Put.Put
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.Put.Put
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.Put.Put
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.Put.Put
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.Put.Put


module Amazonka.DynamoDB.Types.Delete

-- | Represents a request to perform a <tt>DeleteItem</tt> operation.
--   
--   <i>See:</i> <a>newDelete</a> smart constructor.
data Delete
Delete' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnValuesOnConditionCheckFailure -> Maybe Text -> HashMap Text AttributeValue -> Text -> Delete

-- | One or more substitution tokens for attribute names in an expression.
[$sel:expressionAttributeNames:Delete'] :: Delete -> Maybe (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
[$sel:expressionAttributeValues:Delete'] :: Delete -> Maybe (HashMap Text AttributeValue)

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Delete</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
[$sel:returnValuesOnConditionCheckFailure:Delete'] :: Delete -> Maybe ReturnValuesOnConditionCheckFailure

-- | A condition that must be satisfied in order for a conditional delete
--   to succeed.
[$sel:conditionExpression:Delete'] :: Delete -> Maybe Text

-- | The primary key of the item to be deleted. Each element consists of an
--   attribute name and a value for that attribute.
[$sel:key:Delete'] :: Delete -> HashMap Text AttributeValue

-- | Name of the table in which the item to be deleted resides.
[$sel:tableName:Delete'] :: Delete -> Text

-- | Create a value of <a>Delete</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:Delete'</a>,
--   <a>delete_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression.
--   
--   <a>$sel:expressionAttributeValues:Delete'</a>,
--   <a>delete_expressionAttributeValues</a> - One or more values that can
--   be substituted in an expression.
--   
--   <a>$sel:returnValuesOnConditionCheckFailure:Delete'</a>,
--   <a>delete_returnValuesOnConditionCheckFailure</a> - Use
--   <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Delete</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
--   
--   <a>$sel:conditionExpression:Delete'</a>,
--   <a>delete_conditionExpression</a> - A condition that must be satisfied
--   in order for a conditional delete to succeed.
--   
--   <a>$sel:key:Delete'</a>, <a>delete_key</a> - The primary key of the
--   item to be deleted. Each element consists of an attribute name and a
--   value for that attribute.
--   
--   <a>$sel:tableName:Delete'</a>, <a>delete_tableName</a> - Name of the
--   table in which the item to be deleted resides.
newDelete :: Text -> Delete

-- | One or more substitution tokens for attribute names in an expression.
delete_expressionAttributeNames :: Lens' Delete (Maybe (HashMap Text Text))

-- | One or more values that can be substituted in an expression.
delete_expressionAttributeValues :: Lens' Delete (Maybe (HashMap Text AttributeValue))

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Delete</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
delete_returnValuesOnConditionCheckFailure :: Lens' Delete (Maybe ReturnValuesOnConditionCheckFailure)

-- | A condition that must be satisfied in order for a conditional delete
--   to succeed.
delete_conditionExpression :: Lens' Delete (Maybe Text)

-- | The primary key of the item to be deleted. Each element consists of an
--   attribute name and a value for that attribute.
delete_key :: Lens' Delete (HashMap Text AttributeValue)

-- | Name of the table in which the item to be deleted resides.
delete_tableName :: Lens' Delete Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.Delete.Delete
instance GHC.Show.Show Amazonka.DynamoDB.Types.Delete.Delete
instance GHC.Read.Read Amazonka.DynamoDB.Types.Delete.Delete
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.Delete.Delete
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.Delete.Delete
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.Delete.Delete
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.Delete.Delete


module Amazonka.DynamoDB.Types.ConditionCheck

-- | Represents a request to perform a check that an item exists or to
--   check the condition of specific attributes of the item.
--   
--   <i>See:</i> <a>newConditionCheck</a> smart constructor.
data ConditionCheck
ConditionCheck' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnValuesOnConditionCheckFailure -> HashMap Text AttributeValue -> Text -> Text -> ConditionCheck

-- | One or more substitution tokens for attribute names in an expression.
[$sel:expressionAttributeNames:ConditionCheck'] :: ConditionCheck -> Maybe (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
[$sel:expressionAttributeValues:ConditionCheck'] :: ConditionCheck -> Maybe (HashMap Text AttributeValue)

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>ConditionCheck</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
[$sel:returnValuesOnConditionCheckFailure:ConditionCheck'] :: ConditionCheck -> Maybe ReturnValuesOnConditionCheckFailure

-- | The primary key of the item to be checked. Each element consists of an
--   attribute name and a value for that attribute.
[$sel:key:ConditionCheck'] :: ConditionCheck -> HashMap Text AttributeValue

-- | Name of the table for the check item request.
[$sel:tableName:ConditionCheck'] :: ConditionCheck -> Text

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
[$sel:conditionExpression:ConditionCheck'] :: ConditionCheck -> Text

-- | Create a value of <a>ConditionCheck</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:ConditionCheck'</a>,
--   <a>conditionCheck_expressionAttributeNames</a> - One or more
--   substitution tokens for attribute names in an expression.
--   
--   <a>$sel:expressionAttributeValues:ConditionCheck'</a>,
--   <a>conditionCheck_expressionAttributeValues</a> - One or more values
--   that can be substituted in an expression.
--   
--   <a>$sel:returnValuesOnConditionCheckFailure:ConditionCheck'</a>,
--   <a>conditionCheck_returnValuesOnConditionCheckFailure</a> - Use
--   <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>ConditionCheck</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
--   
--   <a>$sel:key:ConditionCheck'</a>, <a>conditionCheck_key</a> - The
--   primary key of the item to be checked. Each element consists of an
--   attribute name and a value for that attribute.
--   
--   <a>$sel:tableName:ConditionCheck'</a>, <a>conditionCheck_tableName</a>
--   - Name of the table for the check item request.
--   
--   <a>$sel:conditionExpression:ConditionCheck'</a>,
--   <a>conditionCheck_conditionExpression</a> - A condition that must be
--   satisfied in order for a conditional update to succeed.
newConditionCheck :: Text -> Text -> ConditionCheck

-- | One or more substitution tokens for attribute names in an expression.
conditionCheck_expressionAttributeNames :: Lens' ConditionCheck (Maybe (HashMap Text Text))

-- | One or more values that can be substituted in an expression.
conditionCheck_expressionAttributeValues :: Lens' ConditionCheck (Maybe (HashMap Text AttributeValue))

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>ConditionCheck</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
conditionCheck_returnValuesOnConditionCheckFailure :: Lens' ConditionCheck (Maybe ReturnValuesOnConditionCheckFailure)

-- | The primary key of the item to be checked. Each element consists of an
--   attribute name and a value for that attribute.
conditionCheck_key :: Lens' ConditionCheck (HashMap Text AttributeValue)

-- | Name of the table for the check item request.
conditionCheck_tableName :: Lens' ConditionCheck Text

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
conditionCheck_conditionExpression :: Lens' ConditionCheck Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ConditionCheck.ConditionCheck
instance GHC.Show.Show Amazonka.DynamoDB.Types.ConditionCheck.ConditionCheck
instance GHC.Read.Read Amazonka.DynamoDB.Types.ConditionCheck.ConditionCheck
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ConditionCheck.ConditionCheck
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ConditionCheck.ConditionCheck
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ConditionCheck.ConditionCheck
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ConditionCheck.ConditionCheck


module Amazonka.DynamoDB.Types.S3SseAlgorithm
newtype S3SseAlgorithm
S3SseAlgorithm' :: Text -> S3SseAlgorithm
[fromS3SseAlgorithm] :: S3SseAlgorithm -> Text
pattern S3SseAlgorithm_AES256 :: S3SseAlgorithm
pattern S3SseAlgorithm_KMS :: S3SseAlgorithm
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance GHC.Read.Read Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm
instance GHC.Show.Show Amazonka.DynamoDB.Types.S3SseAlgorithm.S3SseAlgorithm


module Amazonka.DynamoDB.Types.ExportDescription

-- | Represents the properties of the exported table.
--   
--   <i>See:</i> <a>newExportDescription</a> smart constructor.
data ExportDescription
ExportDescription' :: Maybe Text -> Maybe ExportFormat -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe ExportStatus -> Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> Maybe POSIX -> Maybe S3SseAlgorithm -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> ExportDescription

-- | The ID of the AWS account that owns the bucket containing the export.
[$sel:s3BucketOwner:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The format of the exported data. Valid values for
--   <tt>ExportFormat</tt> are <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
[$sel:exportFormat:ExportDescription'] :: ExportDescription -> Maybe ExportFormat

-- | The ID of the AWS KMS managed key used to encrypt the S3 bucket where
--   export data is stored (if applicable).
[$sel:s3SseKmsKeyId:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The client token that was provided for the export task. A client token
--   makes calls to <tt>ExportTableToPointInTimeInput</tt> idempotent,
--   meaning that multiple identical calls have the same effect as one
--   single call.
[$sel:clientToken:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The time at which the export task began.
[$sel:startTime:ExportDescription'] :: ExportDescription -> Maybe POSIX

-- | Status code for the result of the failed export.
[$sel:failureCode:ExportDescription'] :: ExportDescription -> Maybe Text

-- | Export can be in one of the following states: IN_PROGRESS, COMPLETED,
--   or FAILED.
[$sel:exportStatus:ExportDescription'] :: ExportDescription -> Maybe ExportStatus

-- | Export failure reason description.
[$sel:failureMessage:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The Amazon Resource Name (ARN) of the table that was exported.
[$sel:tableArn:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The billable size of the table export.
[$sel:billedSizeBytes:ExportDescription'] :: ExportDescription -> Maybe Natural

-- | The Amazon Resource Name (ARN) of the table export.
[$sel:exportArn:ExportDescription'] :: ExportDescription -> Maybe Text

-- | Point in time from which table data was exported.
[$sel:exportTime:ExportDescription'] :: ExportDescription -> Maybe POSIX

-- | Type of encryption used on the bucket where export data is stored.
--   Valid values for <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
[$sel:s3SseAlgorithm:ExportDescription'] :: ExportDescription -> Maybe S3SseAlgorithm

-- | The time at which the export task completed.
[$sel:endTime:ExportDescription'] :: ExportDescription -> Maybe POSIX

-- | The Amazon S3 bucket prefix used as the file name and path of the
--   exported snapshot.
[$sel:s3Prefix:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The name of the manifest file for the export task.
[$sel:exportManifest:ExportDescription'] :: ExportDescription -> Maybe Text

-- | Unique ID of the table that was exported.
[$sel:tableId:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The number of items exported.
[$sel:itemCount:ExportDescription'] :: ExportDescription -> Maybe Natural

-- | The name of the Amazon S3 bucket containing the export.
[$sel:s3Bucket:ExportDescription'] :: ExportDescription -> Maybe Text

-- | Create a value of <a>ExportDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:s3BucketOwner:ExportDescription'</a>,
--   <a>exportDescription_s3BucketOwner</a> - The ID of the AWS account
--   that owns the bucket containing the export.
--   
--   <a>$sel:exportFormat:ExportDescription'</a>,
--   <a>exportDescription_exportFormat</a> - The format of the exported
--   data. Valid values for <tt>ExportFormat</tt> are
--   <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
--   
--   <a>$sel:s3SseKmsKeyId:ExportDescription'</a>,
--   <a>exportDescription_s3SseKmsKeyId</a> - The ID of the AWS KMS managed
--   key used to encrypt the S3 bucket where export data is stored (if
--   applicable).
--   
--   <a>$sel:clientToken:ExportDescription'</a>,
--   <a>exportDescription_clientToken</a> - The client token that was
--   provided for the export task. A client token makes calls to
--   <tt>ExportTableToPointInTimeInput</tt> idempotent, meaning that
--   multiple identical calls have the same effect as one single call.
--   
--   <a>$sel:startTime:ExportDescription'</a>,
--   <a>exportDescription_startTime</a> - The time at which the export task
--   began.
--   
--   <a>$sel:failureCode:ExportDescription'</a>,
--   <a>exportDescription_failureCode</a> - Status code for the result of
--   the failed export.
--   
--   <a>$sel:exportStatus:ExportDescription'</a>,
--   <a>exportDescription_exportStatus</a> - Export can be in one of the
--   following states: IN_PROGRESS, COMPLETED, or FAILED.
--   
--   <a>$sel:failureMessage:ExportDescription'</a>,
--   <a>exportDescription_failureMessage</a> - Export failure reason
--   description.
--   
--   <a>$sel:tableArn:ExportDescription'</a>,
--   <a>exportDescription_tableArn</a> - The Amazon Resource Name (ARN) of
--   the table that was exported.
--   
--   <a>$sel:billedSizeBytes:ExportDescription'</a>,
--   <a>exportDescription_billedSizeBytes</a> - The billable size of the
--   table export.
--   
--   <a>$sel:exportArn:ExportDescription'</a>,
--   <a>exportDescription_exportArn</a> - The Amazon Resource Name (ARN) of
--   the table export.
--   
--   <a>$sel:exportTime:ExportDescription'</a>,
--   <a>exportDescription_exportTime</a> - Point in time from which table
--   data was exported.
--   
--   <a>$sel:s3SseAlgorithm:ExportDescription'</a>,
--   <a>exportDescription_s3SseAlgorithm</a> - Type of encryption used on
--   the bucket where export data is stored. Valid values for
--   <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
--   
--   <a>$sel:endTime:ExportDescription'</a>,
--   <a>exportDescription_endTime</a> - The time at which the export task
--   completed.
--   
--   <a>$sel:s3Prefix:ExportDescription'</a>,
--   <a>exportDescription_s3Prefix</a> - The Amazon S3 bucket prefix used
--   as the file name and path of the exported snapshot.
--   
--   <a>$sel:exportManifest:ExportDescription'</a>,
--   <a>exportDescription_exportManifest</a> - The name of the manifest
--   file for the export task.
--   
--   <a>$sel:tableId:ExportDescription'</a>,
--   <a>exportDescription_tableId</a> - Unique ID of the table that was
--   exported.
--   
--   <a>$sel:itemCount:ExportDescription'</a>,
--   <a>exportDescription_itemCount</a> - The number of items exported.
--   
--   <a>$sel:s3Bucket:ExportDescription'</a>,
--   <a>exportDescription_s3Bucket</a> - The name of the Amazon S3 bucket
--   containing the export.
newExportDescription :: ExportDescription

-- | The ID of the AWS account that owns the bucket containing the export.
exportDescription_s3BucketOwner :: Lens' ExportDescription (Maybe Text)

-- | The format of the exported data. Valid values for
--   <tt>ExportFormat</tt> are <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
exportDescription_exportFormat :: Lens' ExportDescription (Maybe ExportFormat)

-- | The ID of the AWS KMS managed key used to encrypt the S3 bucket where
--   export data is stored (if applicable).
exportDescription_s3SseKmsKeyId :: Lens' ExportDescription (Maybe Text)

-- | The client token that was provided for the export task. A client token
--   makes calls to <tt>ExportTableToPointInTimeInput</tt> idempotent,
--   meaning that multiple identical calls have the same effect as one
--   single call.
exportDescription_clientToken :: Lens' ExportDescription (Maybe Text)

-- | The time at which the export task began.
exportDescription_startTime :: Lens' ExportDescription (Maybe UTCTime)

-- | Status code for the result of the failed export.
exportDescription_failureCode :: Lens' ExportDescription (Maybe Text)

-- | Export can be in one of the following states: IN_PROGRESS, COMPLETED,
--   or FAILED.
exportDescription_exportStatus :: Lens' ExportDescription (Maybe ExportStatus)

-- | Export failure reason description.
exportDescription_failureMessage :: Lens' ExportDescription (Maybe Text)

-- | The Amazon Resource Name (ARN) of the table that was exported.
exportDescription_tableArn :: Lens' ExportDescription (Maybe Text)

-- | The billable size of the table export.
exportDescription_billedSizeBytes :: Lens' ExportDescription (Maybe Natural)

-- | The Amazon Resource Name (ARN) of the table export.
exportDescription_exportArn :: Lens' ExportDescription (Maybe Text)

-- | Point in time from which table data was exported.
exportDescription_exportTime :: Lens' ExportDescription (Maybe UTCTime)

-- | Type of encryption used on the bucket where export data is stored.
--   Valid values for <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
exportDescription_s3SseAlgorithm :: Lens' ExportDescription (Maybe S3SseAlgorithm)

-- | The time at which the export task completed.
exportDescription_endTime :: Lens' ExportDescription (Maybe UTCTime)

-- | The Amazon S3 bucket prefix used as the file name and path of the
--   exported snapshot.
exportDescription_s3Prefix :: Lens' ExportDescription (Maybe Text)

-- | The name of the manifest file for the export task.
exportDescription_exportManifest :: Lens' ExportDescription (Maybe Text)

-- | Unique ID of the table that was exported.
exportDescription_tableId :: Lens' ExportDescription (Maybe Text)

-- | The number of items exported.
exportDescription_itemCount :: Lens' ExportDescription (Maybe Natural)

-- | The name of the Amazon S3 bucket containing the export.
exportDescription_s3Bucket :: Lens' ExportDescription (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ExportDescription.ExportDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.ExportDescription.ExportDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.ExportDescription.ExportDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ExportDescription.ExportDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ExportDescription.ExportDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ExportDescription.ExportDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ExportDescription.ExportDescription


module Amazonka.DynamoDB.Types.SSEStatus
newtype SSEStatus
SSEStatus' :: Text -> SSEStatus
[fromSSEStatus] :: SSEStatus -> Text
pattern SSEStatus_DISABLED :: SSEStatus
pattern SSEStatus_DISABLING :: SSEStatus
pattern SSEStatus_ENABLED :: SSEStatus
pattern SSEStatus_ENABLING :: SSEStatus
pattern SSEStatus_UPDATING :: SSEStatus
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance GHC.Read.Read Amazonka.DynamoDB.Types.SSEStatus.SSEStatus
instance GHC.Show.Show Amazonka.DynamoDB.Types.SSEStatus.SSEStatus


module Amazonka.DynamoDB.Types.SSEType
newtype SSEType
SSEType' :: Text -> SSEType
[fromSSEType] :: SSEType -> Text
pattern SSEType_AES256 :: SSEType
pattern SSEType_KMS :: SSEType
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.SSEType.SSEType
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.SSEType.SSEType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.SSEType.SSEType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.SSEType.SSEType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.SSEType.SSEType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.SSEType.SSEType
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.SSEType.SSEType
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.SSEType.SSEType
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.SSEType.SSEType
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.SSEType.SSEType
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.SSEType.SSEType
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.SSEType.SSEType
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.SSEType.SSEType
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.SSEType.SSEType
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.SSEType.SSEType
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.SSEType.SSEType
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.SSEType.SSEType
instance GHC.Read.Read Amazonka.DynamoDB.Types.SSEType.SSEType
instance GHC.Show.Show Amazonka.DynamoDB.Types.SSEType.SSEType


module Amazonka.DynamoDB.Types.SSESpecification

-- | Represents the settings used to enable server-side encryption.
--   
--   <i>See:</i> <a>newSSESpecification</a> smart constructor.
data SSESpecification
SSESpecification' :: Maybe Bool -> Maybe Text -> Maybe SSEType -> SSESpecification

-- | Indicates whether server-side encryption is done using an AWS managed
--   CMK or an AWS owned CMK. If enabled (true), server-side encryption
--   type is set to <tt>KMS</tt> and an AWS managed CMK is used (AWS KMS
--   charges apply). If disabled (false) or not specified, server-side
--   encryption is set to AWS owned CMK.
[$sel:enabled:SSESpecification'] :: SSESpecification -> Maybe Bool

-- | The AWS KMS customer master key (CMK) that should be used for the AWS
--   KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name
--   (ARN), alias name, or alias ARN. Note that you should only provide
--   this parameter if the key is different from the default DynamoDB
--   customer master key alias/aws/dynamodb.
[$sel:kmsMasterKeyId:SSESpecification'] :: SSESpecification -> Maybe Text

-- | Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
[$sel:sSEType:SSESpecification'] :: SSESpecification -> Maybe SSEType

-- | Create a value of <a>SSESpecification</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enabled:SSESpecification'</a>, <a>sSESpecification_enabled</a>
--   - Indicates whether server-side encryption is done using an AWS
--   managed CMK or an AWS owned CMK. If enabled (true), server-side
--   encryption type is set to <tt>KMS</tt> and an AWS managed CMK is used
--   (AWS KMS charges apply). If disabled (false) or not specified,
--   server-side encryption is set to AWS owned CMK.
--   
--   <a>$sel:kmsMasterKeyId:SSESpecification'</a>,
--   <a>sSESpecification_kmsMasterKeyId</a> - The AWS KMS customer master
--   key (CMK) that should be used for the AWS KMS encryption. To specify a
--   CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias
--   ARN. Note that you should only provide this parameter if the key is
--   different from the default DynamoDB customer master key
--   alias/aws/dynamodb.
--   
--   <a>$sel:sSEType:SSESpecification'</a>, <a>sSESpecification_sSEType</a>
--   - Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
newSSESpecification :: SSESpecification

-- | Indicates whether server-side encryption is done using an AWS managed
--   CMK or an AWS owned CMK. If enabled (true), server-side encryption
--   type is set to <tt>KMS</tt> and an AWS managed CMK is used (AWS KMS
--   charges apply). If disabled (false) or not specified, server-side
--   encryption is set to AWS owned CMK.
sSESpecification_enabled :: Lens' SSESpecification (Maybe Bool)

-- | The AWS KMS customer master key (CMK) that should be used for the AWS
--   KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name
--   (ARN), alias name, or alias ARN. Note that you should only provide
--   this parameter if the key is different from the default DynamoDB
--   customer master key alias/aws/dynamodb.
sSESpecification_kmsMasterKeyId :: Lens' SSESpecification (Maybe Text)

-- | Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
sSESpecification_sSEType :: Lens' SSESpecification (Maybe SSEType)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.SSESpecification.SSESpecification
instance GHC.Show.Show Amazonka.DynamoDB.Types.SSESpecification.SSESpecification
instance GHC.Read.Read Amazonka.DynamoDB.Types.SSESpecification.SSESpecification
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.SSESpecification.SSESpecification
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.SSESpecification.SSESpecification
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.SSESpecification.SSESpecification
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.SSESpecification.SSESpecification


module Amazonka.DynamoDB.Types.SSEDescription

-- | The description of the server-side encryption status on the specified
--   table.
--   
--   <i>See:</i> <a>newSSEDescription</a> smart constructor.
data SSEDescription
SSEDescription' :: Maybe SSEStatus -> Maybe POSIX -> Maybe SSEType -> Maybe Text -> SSEDescription

-- | Represents the current state of server-side encryption. The only
--   supported values are:
--   
--   <ul>
--   <li><tt>ENABLED</tt> - Server-side encryption is enabled.</li>
--   <li><tt>UPDATING</tt> - Server-side encryption is being updated.</li>
--   </ul>
[$sel:status:SSEDescription'] :: SSEDescription -> Maybe SSEStatus

-- | Indicates the time, in UNIX epoch date format, when DynamoDB detected
--   that the table's AWS KMS key was inaccessible. This attribute will
--   automatically be cleared when DynamoDB detects that the table's AWS
--   KMS key is accessible again. DynamoDB will initiate the table archival
--   process when table's AWS KMS key remains inaccessible for more than
--   seven days from this date.
[$sel:inaccessibleEncryptionDateTime:SSEDescription'] :: SSEDescription -> Maybe POSIX

-- | Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
[$sel:sSEType:SSEDescription'] :: SSEDescription -> Maybe SSEType

-- | The AWS KMS customer master key (CMK) ARN used for the AWS KMS
--   encryption.
[$sel:kmsMasterKeyArn:SSEDescription'] :: SSEDescription -> Maybe Text

-- | Create a value of <a>SSEDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:SSEDescription'</a>, <a>sSEDescription_status</a> -
--   Represents the current state of server-side encryption. The only
--   supported values are:
--   
--   <ul>
--   <li><tt>ENABLED</tt> - Server-side encryption is enabled.</li>
--   <li><tt>UPDATING</tt> - Server-side encryption is being updated.</li>
--   </ul>
--   
--   <a>$sel:inaccessibleEncryptionDateTime:SSEDescription'</a>,
--   <a>sSEDescription_inaccessibleEncryptionDateTime</a> - Indicates the
--   time, in UNIX epoch date format, when DynamoDB detected that the
--   table's AWS KMS key was inaccessible. This attribute will
--   automatically be cleared when DynamoDB detects that the table's AWS
--   KMS key is accessible again. DynamoDB will initiate the table archival
--   process when table's AWS KMS key remains inaccessible for more than
--   seven days from this date.
--   
--   <a>$sel:sSEType:SSEDescription'</a>, <a>sSEDescription_sSEType</a> -
--   Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
--   
--   <a>$sel:kmsMasterKeyArn:SSEDescription'</a>,
--   <a>sSEDescription_kmsMasterKeyArn</a> - The AWS KMS customer master
--   key (CMK) ARN used for the AWS KMS encryption.
newSSEDescription :: SSEDescription

-- | Represents the current state of server-side encryption. The only
--   supported values are:
--   
--   <ul>
--   <li><tt>ENABLED</tt> - Server-side encryption is enabled.</li>
--   <li><tt>UPDATING</tt> - Server-side encryption is being updated.</li>
--   </ul>
sSEDescription_status :: Lens' SSEDescription (Maybe SSEStatus)

-- | Indicates the time, in UNIX epoch date format, when DynamoDB detected
--   that the table's AWS KMS key was inaccessible. This attribute will
--   automatically be cleared when DynamoDB detects that the table's AWS
--   KMS key is accessible again. DynamoDB will initiate the table archival
--   process when table's AWS KMS key remains inaccessible for more than
--   seven days from this date.
sSEDescription_inaccessibleEncryptionDateTime :: Lens' SSEDescription (Maybe UTCTime)

-- | Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
sSEDescription_sSEType :: Lens' SSEDescription (Maybe SSEType)

-- | The AWS KMS customer master key (CMK) ARN used for the AWS KMS
--   encryption.
sSEDescription_kmsMasterKeyArn :: Lens' SSEDescription (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.SSEDescription.SSEDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.SSEDescription.SSEDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.SSEDescription.SSEDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.SSEDescription.SSEDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.SSEDescription.SSEDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.SSEDescription.SSEDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.SSEDescription.SSEDescription


module Amazonka.DynamoDB.Types.ScalarAttributeType
newtype ScalarAttributeType
ScalarAttributeType' :: Text -> ScalarAttributeType
[fromScalarAttributeType] :: ScalarAttributeType -> Text
pattern ScalarAttributeType_B :: ScalarAttributeType
pattern ScalarAttributeType_N :: ScalarAttributeType
pattern ScalarAttributeType_S :: ScalarAttributeType
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance GHC.Read.Read Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType
instance GHC.Show.Show Amazonka.DynamoDB.Types.ScalarAttributeType.ScalarAttributeType


module Amazonka.DynamoDB.Types.AttributeDefinition

-- | Represents an attribute for describing the key schema for the table
--   and indexes.
--   
--   <i>See:</i> <a>newAttributeDefinition</a> smart constructor.
data AttributeDefinition
AttributeDefinition' :: Text -> ScalarAttributeType -> AttributeDefinition

-- | A name for the attribute.
[$sel:attributeName:AttributeDefinition'] :: AttributeDefinition -> Text

-- | The data type for the attribute, where:
--   
--   <ul>
--   <li><tt>S</tt> - the attribute is of type String</li>
--   <li><tt>N</tt> - the attribute is of type Number</li>
--   <li><tt>B</tt> - the attribute is of type Binary</li>
--   </ul>
[$sel:attributeType:AttributeDefinition'] :: AttributeDefinition -> ScalarAttributeType

-- | Create a value of <a>AttributeDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeName:AttributeDefinition'</a>,
--   <a>attributeDefinition_attributeName</a> - A name for the attribute.
--   
--   <a>$sel:attributeType:AttributeDefinition'</a>,
--   <a>attributeDefinition_attributeType</a> - The data type for the
--   attribute, where:
--   
--   <ul>
--   <li><tt>S</tt> - the attribute is of type String</li>
--   <li><tt>N</tt> - the attribute is of type Number</li>
--   <li><tt>B</tt> - the attribute is of type Binary</li>
--   </ul>
newAttributeDefinition :: Text -> ScalarAttributeType -> AttributeDefinition

-- | A name for the attribute.
attributeDefinition_attributeName :: Lens' AttributeDefinition Text

-- | The data type for the attribute, where:
--   
--   <ul>
--   <li><tt>S</tt> - the attribute is of type String</li>
--   <li><tt>N</tt> - the attribute is of type Number</li>
--   <li><tt>B</tt> - the attribute is of type Binary</li>
--   </ul>
attributeDefinition_attributeType :: Lens' AttributeDefinition ScalarAttributeType
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.AttributeDefinition.AttributeDefinition
instance GHC.Show.Show Amazonka.DynamoDB.Types.AttributeDefinition.AttributeDefinition
instance GHC.Read.Read Amazonka.DynamoDB.Types.AttributeDefinition.AttributeDefinition
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.AttributeDefinition.AttributeDefinition
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.AttributeDefinition.AttributeDefinition
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.AttributeDefinition.AttributeDefinition
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.AttributeDefinition.AttributeDefinition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.AttributeDefinition.AttributeDefinition


module Amazonka.DynamoDB.Types.Select
newtype Select
Select' :: Text -> Select
[fromSelect] :: Select -> Text
pattern Select_ALL_ATTRIBUTES :: Select
pattern Select_ALL_PROJECTED_ATTRIBUTES :: Select
pattern Select_COUNT :: Select
pattern Select_SPECIFIC_ATTRIBUTES :: Select
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.Select.Select
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.Select.Select
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.Select.Select
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.Select.Select
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.Select.Select
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.Select.Select
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.Select.Select
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.Select.Select
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.Select.Select
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.Select.Select
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.Select.Select
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.Select.Select
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.Select.Select
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.Select.Select
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.Select.Select
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.Select.Select
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.Select.Select
instance GHC.Read.Read Amazonka.DynamoDB.Types.Select.Select
instance GHC.Show.Show Amazonka.DynamoDB.Types.Select.Select


module Amazonka.DynamoDB.Types.SourceTableDetails

-- | Contains the details of the table when the backup was created.
--   
--   <i>See:</i> <a>newSourceTableDetails</a> smart constructor.
data SourceTableDetails
SourceTableDetails' :: Maybe Integer -> Maybe Text -> Maybe BillingMode -> Maybe Natural -> Text -> Text -> NonEmpty KeySchemaElement -> POSIX -> ProvisionedThroughput -> SourceTableDetails

-- | Size of the table in bytes. Note that this is an approximate value.
[$sel:tableSizeBytes:SourceTableDetails'] :: SourceTableDetails -> Maybe Integer

-- | ARN of the table for which backup was created.
[$sel:tableArn:SourceTableDetails'] :: SourceTableDetails -> Maybe Text

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
[$sel:billingMode:SourceTableDetails'] :: SourceTableDetails -> Maybe BillingMode

-- | Number of items in the table. Note that this is an approximate value.
[$sel:itemCount:SourceTableDetails'] :: SourceTableDetails -> Maybe Natural

-- | The name of the table for which the backup was created.
[$sel:tableName:SourceTableDetails'] :: SourceTableDetails -> Text

-- | Unique identifier for the table for which the backup was created.
[$sel:tableId:SourceTableDetails'] :: SourceTableDetails -> Text

-- | Schema of the table.
[$sel:keySchema:SourceTableDetails'] :: SourceTableDetails -> NonEmpty KeySchemaElement

-- | Time when the source table was created.
[$sel:tableCreationDateTime:SourceTableDetails'] :: SourceTableDetails -> POSIX

-- | Read IOPs and Write IOPS on the table when the backup was created.
[$sel:provisionedThroughput:SourceTableDetails'] :: SourceTableDetails -> ProvisionedThroughput

-- | Create a value of <a>SourceTableDetails</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableSizeBytes:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableSizeBytes</a> - Size of the table in bytes.
--   Note that this is an approximate value.
--   
--   <a>$sel:tableArn:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableArn</a> - ARN of the table for which backup
--   was created.
--   
--   <a>$sel:billingMode:SourceTableDetails'</a>,
--   <a>sourceTableDetails_billingMode</a> - Controls how you are charged
--   for read and write throughput and how you manage capacity. This
--   setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
--   
--   <a>$sel:itemCount:SourceTableDetails'</a>,
--   <a>sourceTableDetails_itemCount</a> - Number of items in the table.
--   Note that this is an approximate value.
--   
--   <a>$sel:tableName:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableName</a> - The name of the table for which
--   the backup was created.
--   
--   <a>$sel:tableId:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableId</a> - Unique identifier for the table
--   for which the backup was created.
--   
--   <a>$sel:keySchema:SourceTableDetails'</a>,
--   <a>sourceTableDetails_keySchema</a> - Schema of the table.
--   
--   <a>$sel:tableCreationDateTime:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableCreationDateTime</a> - Time when the source
--   table was created.
--   
--   <a>$sel:provisionedThroughput:SourceTableDetails'</a>,
--   <a>sourceTableDetails_provisionedThroughput</a> - Read IOPs and Write
--   IOPS on the table when the backup was created.
newSourceTableDetails :: Text -> Text -> NonEmpty KeySchemaElement -> UTCTime -> ProvisionedThroughput -> SourceTableDetails

-- | Size of the table in bytes. Note that this is an approximate value.
sourceTableDetails_tableSizeBytes :: Lens' SourceTableDetails (Maybe Integer)

-- | ARN of the table for which backup was created.
sourceTableDetails_tableArn :: Lens' SourceTableDetails (Maybe Text)

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
sourceTableDetails_billingMode :: Lens' SourceTableDetails (Maybe BillingMode)

-- | Number of items in the table. Note that this is an approximate value.
sourceTableDetails_itemCount :: Lens' SourceTableDetails (Maybe Natural)

-- | The name of the table for which the backup was created.
sourceTableDetails_tableName :: Lens' SourceTableDetails Text

-- | Unique identifier for the table for which the backup was created.
sourceTableDetails_tableId :: Lens' SourceTableDetails Text

-- | Schema of the table.
sourceTableDetails_keySchema :: Lens' SourceTableDetails (NonEmpty KeySchemaElement)

-- | Time when the source table was created.
sourceTableDetails_tableCreationDateTime :: Lens' SourceTableDetails UTCTime

-- | Read IOPs and Write IOPS on the table when the backup was created.
sourceTableDetails_provisionedThroughput :: Lens' SourceTableDetails ProvisionedThroughput
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.SourceTableDetails.SourceTableDetails
instance GHC.Show.Show Amazonka.DynamoDB.Types.SourceTableDetails.SourceTableDetails
instance GHC.Read.Read Amazonka.DynamoDB.Types.SourceTableDetails.SourceTableDetails
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.SourceTableDetails.SourceTableDetails
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.SourceTableDetails.SourceTableDetails
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.SourceTableDetails.SourceTableDetails
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.SourceTableDetails.SourceTableDetails


module Amazonka.DynamoDB.Types.StreamViewType
newtype StreamViewType
StreamViewType' :: Text -> StreamViewType
[fromStreamViewType] :: StreamViewType -> Text
pattern StreamViewType_KEYS_ONLY :: StreamViewType
pattern StreamViewType_NEW_AND_OLD_IMAGES :: StreamViewType
pattern StreamViewType_NEW_IMAGE :: StreamViewType
pattern StreamViewType_OLD_IMAGE :: StreamViewType
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance GHC.Read.Read Amazonka.DynamoDB.Types.StreamViewType.StreamViewType
instance GHC.Show.Show Amazonka.DynamoDB.Types.StreamViewType.StreamViewType


module Amazonka.DynamoDB.Types.StreamSpecification

-- | Represents the DynamoDB Streams configuration for a table in DynamoDB.
--   
--   <i>See:</i> <a>newStreamSpecification</a> smart constructor.
data StreamSpecification
StreamSpecification' :: Maybe StreamViewType -> Bool -> StreamSpecification

-- | When an item in the table is modified, <tt>StreamViewType</tt>
--   determines what information is written to the stream for this table.
--   Valid values for <tt>StreamViewType</tt> are:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the key attributes of the modified item
--   are written to the stream.</li>
--   <li><tt>NEW_IMAGE</tt> - The entire item, as it appears after it was
--   modified, is written to the stream.</li>
--   <li><tt>OLD_IMAGE</tt> - The entire item, as it appeared before it was
--   modified, is written to the stream.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old item images
--   of the item are written to the stream.</li>
--   </ul>
[$sel:streamViewType:StreamSpecification'] :: StreamSpecification -> Maybe StreamViewType

-- | Indicates whether DynamoDB Streams is enabled (true) or disabled
--   (false) on the table.
[$sel:streamEnabled:StreamSpecification'] :: StreamSpecification -> Bool

-- | Create a value of <a>StreamSpecification</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamViewType:StreamSpecification'</a>,
--   <a>streamSpecification_streamViewType</a> - When an item in the table
--   is modified, <tt>StreamViewType</tt> determines what information is
--   written to the stream for this table. Valid values for
--   <tt>StreamViewType</tt> are:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the key attributes of the modified item
--   are written to the stream.</li>
--   <li><tt>NEW_IMAGE</tt> - The entire item, as it appears after it was
--   modified, is written to the stream.</li>
--   <li><tt>OLD_IMAGE</tt> - The entire item, as it appeared before it was
--   modified, is written to the stream.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old item images
--   of the item are written to the stream.</li>
--   </ul>
--   
--   <a>$sel:streamEnabled:StreamSpecification'</a>,
--   <a>streamSpecification_streamEnabled</a> - Indicates whether DynamoDB
--   Streams is enabled (true) or disabled (false) on the table.
newStreamSpecification :: Bool -> StreamSpecification

-- | When an item in the table is modified, <tt>StreamViewType</tt>
--   determines what information is written to the stream for this table.
--   Valid values for <tt>StreamViewType</tt> are:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the key attributes of the modified item
--   are written to the stream.</li>
--   <li><tt>NEW_IMAGE</tt> - The entire item, as it appears after it was
--   modified, is written to the stream.</li>
--   <li><tt>OLD_IMAGE</tt> - The entire item, as it appeared before it was
--   modified, is written to the stream.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old item images
--   of the item are written to the stream.</li>
--   </ul>
streamSpecification_streamViewType :: Lens' StreamSpecification (Maybe StreamViewType)

-- | Indicates whether DynamoDB Streams is enabled (true) or disabled
--   (false) on the table.
streamSpecification_streamEnabled :: Lens' StreamSpecification Bool
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.StreamSpecification.StreamSpecification
instance GHC.Show.Show Amazonka.DynamoDB.Types.StreamSpecification.StreamSpecification
instance GHC.Read.Read Amazonka.DynamoDB.Types.StreamSpecification.StreamSpecification
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.StreamSpecification.StreamSpecification
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.StreamSpecification.StreamSpecification
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.StreamSpecification.StreamSpecification
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.StreamSpecification.StreamSpecification
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.StreamSpecification.StreamSpecification


module Amazonka.DynamoDB.Types.TableStatus
newtype TableStatus
TableStatus' :: Text -> TableStatus
[fromTableStatus] :: TableStatus -> Text
pattern TableStatus_ACTIVE :: TableStatus
pattern TableStatus_ARCHIVED :: TableStatus
pattern TableStatus_ARCHIVING :: TableStatus
pattern TableStatus_CREATING :: TableStatus
pattern TableStatus_DELETING :: TableStatus
pattern TableStatus_INACCESSIBLE_ENCRYPTION_CREDENTIALS :: TableStatus
pattern TableStatus_UPDATING :: TableStatus
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance GHC.Read.Read Amazonka.DynamoDB.Types.TableStatus.TableStatus
instance GHC.Show.Show Amazonka.DynamoDB.Types.TableStatus.TableStatus


module Amazonka.DynamoDB.Types.TableDescription

-- | Represents the properties of a table.
--   
--   <i>See:</i> <a>newTableDescription</a> smart constructor.
data TableDescription
TableDescription' :: Maybe RestoreSummary -> Maybe Text -> Maybe Integer -> Maybe [AttributeDefinition] -> Maybe Text -> Maybe ProvisionedThroughputDescription -> Maybe TableStatus -> Maybe Text -> Maybe (NonEmpty KeySchemaElement) -> Maybe [GlobalSecondaryIndexDescription] -> Maybe Text -> Maybe BillingModeSummary -> Maybe [LocalSecondaryIndexDescription] -> Maybe POSIX -> Maybe SSEDescription -> Maybe Text -> Maybe [ReplicaDescription] -> Maybe Integer -> Maybe ArchivalSummary -> Maybe Text -> Maybe StreamSpecification -> TableDescription

-- | Contains details for the restore.
[$sel:restoreSummary:TableDescription'] :: TableDescription -> Maybe RestoreSummary

-- | Represents the version of <a>global tables</a> in use, if the table is
--   replicated across AWS Regions.
[$sel:globalTableVersion:TableDescription'] :: TableDescription -> Maybe Text

-- | The total size of the specified table, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
[$sel:tableSizeBytes:TableDescription'] :: TableDescription -> Maybe Integer

-- | An array of <tt>AttributeDefinition</tt> objects. Each of these
--   objects describes one attribute in the table and index key schema.
--   
--   Each <tt>AttributeDefinition</tt> object in this array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>AttributeType</tt> - The data type for the attribute.</li>
--   </ul>
[$sel:attributeDefinitions:TableDescription'] :: TableDescription -> Maybe [AttributeDefinition]

-- | The Amazon Resource Name (ARN) that uniquely identifies the latest
--   stream for this table.
[$sel:latestStreamArn:TableDescription'] :: TableDescription -> Maybe Text

-- | The provisioned throughput settings for the table, consisting of read
--   and write capacity units, along with data about increases and
--   decreases.
[$sel:provisionedThroughput:TableDescription'] :: TableDescription -> Maybe ProvisionedThroughputDescription

-- | The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The AWS KMS key
--   used to encrypt the table in inaccessible. Table operations may fail
--   due to failure to use the AWS KMS key. DynamoDB will initiate the
--   table archival process when a table's AWS KMS key remains inaccessible
--   for more than seven days.</li>
--   <li><tt>ARCHIVING</tt> - The table is being archived. Operations are
--   not allowed until archival is complete.</li>
--   <li><tt>ARCHIVED</tt> - The table has been archived. See the
--   ArchivalReason for more information.</li>
--   </ul>
[$sel:tableStatus:TableDescription'] :: TableDescription -> Maybe TableStatus

-- | The Amazon Resource Name (ARN) that uniquely identifies the table.
[$sel:tableArn:TableDescription'] :: TableDescription -> Maybe Text

-- | The primary key structure for the table. Each
--   <tt>KeySchemaElement</tt> consists of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>KeyType</tt> - The role of the attribute:<ul><li><tt>HASH</tt>
--   - partition key</li><li><tt>RANGE</tt> - sort key</li></ul>The
--   partition key of an item is also known as its <i>hash attribute</i>.
--   The term "hash attribute" derives from DynamoDB's usage of an internal
--   hash function to evenly distribute data items across partitions, based
--   on their partition key values.The sort key of an item is also known as
--   its <i>range attribute</i>. The term "range attribute" derives from
--   the way DynamoDB stores items with the same partition key physically
--   close together, in sorted order by the sort key value.</li>
--   </ul>
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:keySchema:TableDescription'] :: TableDescription -> Maybe (NonEmpty KeySchemaElement)

-- | The global secondary indexes, if any, on the table. Each index is
--   scoped to a given partition key value. Each element is composed of:
--   
--   <ul>
--   <li><tt>Backfilling</tt> - If true, then the index is currently in the
--   backfilling phase. Backfilling occurs only when a new global secondary
--   index is added to the table. It is the process by which DynamoDB
--   populates the new index with data from the table. (This attribute does
--   not appear for indexes that were created during a <tt>CreateTable</tt>
--   operation.)You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false. (This attribute does not appear for
--   indexes that were created during a <tt>CreateTable</tt>
--   operation.)</li>
--   <li><tt>IndexName</tt> - The name of the global secondary index.</li>
--   <li><tt>IndexSizeBytes</tt> - The total size of the global secondary
--   index, in bytes. DynamoDB updates this value approximately every six
--   hours. Recent changes might not be reflected in this value.</li>
--   <li><tt>IndexStatus</tt> - The current status of the global secondary
--   index:<ul><li><tt>CREATING</tt> - The index is being
--   created.</li><li><tt>UPDATING</tt> - The index is being
--   updated.</li><li><tt>DELETING</tt> - The index is being
--   deleted.</li><li><tt>ACTIVE</tt> - The index is ready for
--   use.</li></ul></li>
--   <li><tt>ItemCount</tt> - The number of items in the global secondary
--   index. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - In addition
--   to the attributes described in <tt>KEYS_ONLY</tt>, the secondary index
--   will include other non-key attributes that you
--   specify.</li><li><tt>ALL</tt> - All of the table attributes are
--   projected into the index.</li></ul></li><li><tt>NonKeyAttributes</tt>
--   - A list of one or more non-key attribute names that are projected
--   into the secondary index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units, along with data about increases and decreases.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
[$sel:globalSecondaryIndexes:TableDescription'] :: TableDescription -> Maybe [GlobalSecondaryIndexDescription]

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>AWS customer ID</li>
--   <li>Table name</li>
--   <li><pre>StreamLabel</pre></li>
--   </ul>
[$sel:latestStreamLabel:TableDescription'] :: TableDescription -> Maybe Text

-- | Contains the details for the read/write capacity mode.
[$sel:billingModeSummary:TableDescription'] :: TableDescription -> Maybe BillingModeSummary

-- | Represents one or more local secondary indexes on the table. Each
--   index is scoped to a given partition key value. Tables with one or
--   more local secondary indexes are subject to an item collection size
--   limit, where the amount of data within a given item collection cannot
--   exceed 10 GB. Each element is composed of:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>IndexSizeBytes</tt> - Represents the total size of the index,
--   in bytes. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>ItemCount</tt> - Represents the number of items in the index.
--   DynamoDB updates this value approximately every six hours. Recent
--   changes might not be reflected in this value.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
[$sel:localSecondaryIndexes:TableDescription'] :: TableDescription -> Maybe [LocalSecondaryIndexDescription]

-- | The date and time when the table was created, in <a>UNIX epoch
--   time</a> format.
[$sel:creationDateTime:TableDescription'] :: TableDescription -> Maybe POSIX

-- | The description of the server-side encryption status on the specified
--   table.
[$sel:sSEDescription:TableDescription'] :: TableDescription -> Maybe SSEDescription

-- | Unique identifier for the table for which the backup was created.
[$sel:tableId:TableDescription'] :: TableDescription -> Maybe Text

-- | Represents replicas of the table.
[$sel:replicas:TableDescription'] :: TableDescription -> Maybe [ReplicaDescription]

-- | The number of items in the specified table. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
[$sel:itemCount:TableDescription'] :: TableDescription -> Maybe Integer

-- | Contains information about the table archive.
[$sel:archivalSummary:TableDescription'] :: TableDescription -> Maybe ArchivalSummary

-- | The name of the table.
[$sel:tableName:TableDescription'] :: TableDescription -> Maybe Text

-- | The current DynamoDB Streams configuration for the table.
[$sel:streamSpecification:TableDescription'] :: TableDescription -> Maybe StreamSpecification

-- | Create a value of <a>TableDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:restoreSummary:TableDescription'</a>,
--   <a>tableDescription_restoreSummary</a> - Contains details for the
--   restore.
--   
--   <a>$sel:globalTableVersion:TableDescription'</a>,
--   <a>tableDescription_globalTableVersion</a> - Represents the version of
--   <a>global tables</a> in use, if the table is replicated across AWS
--   Regions.
--   
--   <a>$sel:tableSizeBytes:TableDescription'</a>,
--   <a>tableDescription_tableSizeBytes</a> - The total size of the
--   specified table, in bytes. DynamoDB updates this value approximately
--   every six hours. Recent changes might not be reflected in this value.
--   
--   <a>$sel:attributeDefinitions:TableDescription'</a>,
--   <a>tableDescription_attributeDefinitions</a> - An array of
--   <tt>AttributeDefinition</tt> objects. Each of these objects describes
--   one attribute in the table and index key schema.
--   
--   Each <tt>AttributeDefinition</tt> object in this array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>AttributeType</tt> - The data type for the attribute.</li>
--   </ul>
--   
--   <a>$sel:latestStreamArn:TableDescription'</a>,
--   <a>tableDescription_latestStreamArn</a> - The Amazon Resource Name
--   (ARN) that uniquely identifies the latest stream for this table.
--   
--   <a>$sel:provisionedThroughput:TableDescription'</a>,
--   <a>tableDescription_provisionedThroughput</a> - The provisioned
--   throughput settings for the table, consisting of read and write
--   capacity units, along with data about increases and decreases.
--   
--   <a>$sel:tableStatus:TableDescription'</a>,
--   <a>tableDescription_tableStatus</a> - The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The AWS KMS key
--   used to encrypt the table in inaccessible. Table operations may fail
--   due to failure to use the AWS KMS key. DynamoDB will initiate the
--   table archival process when a table's AWS KMS key remains inaccessible
--   for more than seven days.</li>
--   <li><tt>ARCHIVING</tt> - The table is being archived. Operations are
--   not allowed until archival is complete.</li>
--   <li><tt>ARCHIVED</tt> - The table has been archived. See the
--   ArchivalReason for more information.</li>
--   </ul>
--   
--   <a>$sel:tableArn:TableDescription'</a>,
--   <a>tableDescription_tableArn</a> - The Amazon Resource Name (ARN) that
--   uniquely identifies the table.
--   
--   <a>$sel:keySchema:TableDescription'</a>,
--   <a>tableDescription_keySchema</a> - The primary key structure for the
--   table. Each <tt>KeySchemaElement</tt> consists of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>KeyType</tt> - The role of the attribute:<ul><li><tt>HASH</tt>
--   - partition key</li><li><tt>RANGE</tt> - sort key</li></ul>The
--   partition key of an item is also known as its <i>hash attribute</i>.
--   The term "hash attribute" derives from DynamoDB's usage of an internal
--   hash function to evenly distribute data items across partitions, based
--   on their partition key values.The sort key of an item is also known as
--   its <i>range attribute</i>. The term "range attribute" derives from
--   the way DynamoDB stores items with the same partition key physically
--   close together, in sorted order by the sort key value.</li>
--   </ul>
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:globalSecondaryIndexes:TableDescription'</a>,
--   <a>tableDescription_globalSecondaryIndexes</a> - The global secondary
--   indexes, if any, on the table. Each index is scoped to a given
--   partition key value. Each element is composed of:
--   
--   <ul>
--   <li><tt>Backfilling</tt> - If true, then the index is currently in the
--   backfilling phase. Backfilling occurs only when a new global secondary
--   index is added to the table. It is the process by which DynamoDB
--   populates the new index with data from the table. (This attribute does
--   not appear for indexes that were created during a <tt>CreateTable</tt>
--   operation.)You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false. (This attribute does not appear for
--   indexes that were created during a <tt>CreateTable</tt>
--   operation.)</li>
--   <li><tt>IndexName</tt> - The name of the global secondary index.</li>
--   <li><tt>IndexSizeBytes</tt> - The total size of the global secondary
--   index, in bytes. DynamoDB updates this value approximately every six
--   hours. Recent changes might not be reflected in this value.</li>
--   <li><tt>IndexStatus</tt> - The current status of the global secondary
--   index:<ul><li><tt>CREATING</tt> - The index is being
--   created.</li><li><tt>UPDATING</tt> - The index is being
--   updated.</li><li><tt>DELETING</tt> - The index is being
--   deleted.</li><li><tt>ACTIVE</tt> - The index is ready for
--   use.</li></ul></li>
--   <li><tt>ItemCount</tt> - The number of items in the global secondary
--   index. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - In addition
--   to the attributes described in <tt>KEYS_ONLY</tt>, the secondary index
--   will include other non-key attributes that you
--   specify.</li><li><tt>ALL</tt> - All of the table attributes are
--   projected into the index.</li></ul></li><li><tt>NonKeyAttributes</tt>
--   - A list of one or more non-key attribute names that are projected
--   into the secondary index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units, along with data about increases and decreases.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
--   
--   <a>$sel:latestStreamLabel:TableDescription'</a>,
--   <a>tableDescription_latestStreamLabel</a> - A timestamp, in ISO 8601
--   format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>AWS customer ID</li>
--   <li>Table name</li>
--   <li><pre>StreamLabel</pre></li>
--   </ul>
--   
--   <a>$sel:billingModeSummary:TableDescription'</a>,
--   <a>tableDescription_billingModeSummary</a> - Contains the details for
--   the read/write capacity mode.
--   
--   <a>$sel:localSecondaryIndexes:TableDescription'</a>,
--   <a>tableDescription_localSecondaryIndexes</a> - Represents one or more
--   local secondary indexes on the table. Each index is scoped to a given
--   partition key value. Tables with one or more local secondary indexes
--   are subject to an item collection size limit, where the amount of data
--   within a given item collection cannot exceed 10 GB. Each element is
--   composed of:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>IndexSizeBytes</tt> - Represents the total size of the index,
--   in bytes. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>ItemCount</tt> - Represents the number of items in the index.
--   DynamoDB updates this value approximately every six hours. Recent
--   changes might not be reflected in this value.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
--   
--   <a>$sel:creationDateTime:TableDescription'</a>,
--   <a>tableDescription_creationDateTime</a> - The date and time when the
--   table was created, in <a>UNIX epoch time</a> format.
--   
--   <a>$sel:sSEDescription:TableDescription'</a>,
--   <a>tableDescription_sSEDescription</a> - The description of the
--   server-side encryption status on the specified table.
--   
--   <a>$sel:tableId:TableDescription'</a>, <a>tableDescription_tableId</a>
--   - Unique identifier for the table for which the backup was created.
--   
--   <a>$sel:replicas:TableDescription'</a>,
--   <a>tableDescription_replicas</a> - Represents replicas of the table.
--   
--   <a>$sel:itemCount:TableDescription'</a>,
--   <a>tableDescription_itemCount</a> - The number of items in the
--   specified table. DynamoDB updates this value approximately every six
--   hours. Recent changes might not be reflected in this value.
--   
--   <a>$sel:archivalSummary:TableDescription'</a>,
--   <a>tableDescription_archivalSummary</a> - Contains information about
--   the table archive.
--   
--   <a>$sel:tableName:TableDescription'</a>,
--   <a>tableDescription_tableName</a> - The name of the table.
--   
--   <a>$sel:streamSpecification:TableDescription'</a>,
--   <a>tableDescription_streamSpecification</a> - The current DynamoDB
--   Streams configuration for the table.
newTableDescription :: TableDescription

-- | Contains details for the restore.
tableDescription_restoreSummary :: Lens' TableDescription (Maybe RestoreSummary)

-- | Represents the version of <a>global tables</a> in use, if the table is
--   replicated across AWS Regions.
tableDescription_globalTableVersion :: Lens' TableDescription (Maybe Text)

-- | The total size of the specified table, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
tableDescription_tableSizeBytes :: Lens' TableDescription (Maybe Integer)

-- | An array of <tt>AttributeDefinition</tt> objects. Each of these
--   objects describes one attribute in the table and index key schema.
--   
--   Each <tt>AttributeDefinition</tt> object in this array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>AttributeType</tt> - The data type for the attribute.</li>
--   </ul>
tableDescription_attributeDefinitions :: Lens' TableDescription (Maybe [AttributeDefinition])

-- | The Amazon Resource Name (ARN) that uniquely identifies the latest
--   stream for this table.
tableDescription_latestStreamArn :: Lens' TableDescription (Maybe Text)

-- | The provisioned throughput settings for the table, consisting of read
--   and write capacity units, along with data about increases and
--   decreases.
tableDescription_provisionedThroughput :: Lens' TableDescription (Maybe ProvisionedThroughputDescription)

-- | The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The AWS KMS key
--   used to encrypt the table in inaccessible. Table operations may fail
--   due to failure to use the AWS KMS key. DynamoDB will initiate the
--   table archival process when a table's AWS KMS key remains inaccessible
--   for more than seven days.</li>
--   <li><tt>ARCHIVING</tt> - The table is being archived. Operations are
--   not allowed until archival is complete.</li>
--   <li><tt>ARCHIVED</tt> - The table has been archived. See the
--   ArchivalReason for more information.</li>
--   </ul>
tableDescription_tableStatus :: Lens' TableDescription (Maybe TableStatus)

-- | The Amazon Resource Name (ARN) that uniquely identifies the table.
tableDescription_tableArn :: Lens' TableDescription (Maybe Text)

-- | The primary key structure for the table. Each
--   <tt>KeySchemaElement</tt> consists of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>KeyType</tt> - The role of the attribute:<ul><li><tt>HASH</tt>
--   - partition key</li><li><tt>RANGE</tt> - sort key</li></ul>The
--   partition key of an item is also known as its <i>hash attribute</i>.
--   The term "hash attribute" derives from DynamoDB's usage of an internal
--   hash function to evenly distribute data items across partitions, based
--   on their partition key values.The sort key of an item is also known as
--   its <i>range attribute</i>. The term "range attribute" derives from
--   the way DynamoDB stores items with the same partition key physically
--   close together, in sorted order by the sort key value.</li>
--   </ul>
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
tableDescription_keySchema :: Lens' TableDescription (Maybe (NonEmpty KeySchemaElement))

-- | The global secondary indexes, if any, on the table. Each index is
--   scoped to a given partition key value. Each element is composed of:
--   
--   <ul>
--   <li><tt>Backfilling</tt> - If true, then the index is currently in the
--   backfilling phase. Backfilling occurs only when a new global secondary
--   index is added to the table. It is the process by which DynamoDB
--   populates the new index with data from the table. (This attribute does
--   not appear for indexes that were created during a <tt>CreateTable</tt>
--   operation.)You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false. (This attribute does not appear for
--   indexes that were created during a <tt>CreateTable</tt>
--   operation.)</li>
--   <li><tt>IndexName</tt> - The name of the global secondary index.</li>
--   <li><tt>IndexSizeBytes</tt> - The total size of the global secondary
--   index, in bytes. DynamoDB updates this value approximately every six
--   hours. Recent changes might not be reflected in this value.</li>
--   <li><tt>IndexStatus</tt> - The current status of the global secondary
--   index:<ul><li><tt>CREATING</tt> - The index is being
--   created.</li><li><tt>UPDATING</tt> - The index is being
--   updated.</li><li><tt>DELETING</tt> - The index is being
--   deleted.</li><li><tt>ACTIVE</tt> - The index is ready for
--   use.</li></ul></li>
--   <li><tt>ItemCount</tt> - The number of items in the global secondary
--   index. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - In addition
--   to the attributes described in <tt>KEYS_ONLY</tt>, the secondary index
--   will include other non-key attributes that you
--   specify.</li><li><tt>ALL</tt> - All of the table attributes are
--   projected into the index.</li></ul></li><li><tt>NonKeyAttributes</tt>
--   - A list of one or more non-key attribute names that are projected
--   into the secondary index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units, along with data about increases and decreases.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
tableDescription_globalSecondaryIndexes :: Lens' TableDescription (Maybe [GlobalSecondaryIndexDescription])

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>AWS customer ID</li>
--   <li>Table name</li>
--   <li><pre>StreamLabel</pre></li>
--   </ul>
tableDescription_latestStreamLabel :: Lens' TableDescription (Maybe Text)

-- | Contains the details for the read/write capacity mode.
tableDescription_billingModeSummary :: Lens' TableDescription (Maybe BillingModeSummary)

-- | Represents one or more local secondary indexes on the table. Each
--   index is scoped to a given partition key value. Tables with one or
--   more local secondary indexes are subject to an item collection size
--   limit, where the amount of data within a given item collection cannot
--   exceed 10 GB. Each element is composed of:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>IndexSizeBytes</tt> - Represents the total size of the index,
--   in bytes. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>ItemCount</tt> - Represents the number of items in the index.
--   DynamoDB updates this value approximately every six hours. Recent
--   changes might not be reflected in this value.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
tableDescription_localSecondaryIndexes :: Lens' TableDescription (Maybe [LocalSecondaryIndexDescription])

-- | The date and time when the table was created, in <a>UNIX epoch
--   time</a> format.
tableDescription_creationDateTime :: Lens' TableDescription (Maybe UTCTime)

-- | The description of the server-side encryption status on the specified
--   table.
tableDescription_sSEDescription :: Lens' TableDescription (Maybe SSEDescription)

-- | Unique identifier for the table for which the backup was created.
tableDescription_tableId :: Lens' TableDescription (Maybe Text)

-- | Represents replicas of the table.
tableDescription_replicas :: Lens' TableDescription (Maybe [ReplicaDescription])

-- | The number of items in the specified table. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
tableDescription_itemCount :: Lens' TableDescription (Maybe Integer)

-- | Contains information about the table archive.
tableDescription_archivalSummary :: Lens' TableDescription (Maybe ArchivalSummary)

-- | The name of the table.
tableDescription_tableName :: Lens' TableDescription (Maybe Text)

-- | The current DynamoDB Streams configuration for the table.
tableDescription_streamSpecification :: Lens' TableDescription (Maybe StreamSpecification)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.TableDescription.TableDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.TableDescription.TableDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.TableDescription.TableDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.TableDescription.TableDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.TableDescription.TableDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.TableDescription.TableDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.TableDescription.TableDescription


module Amazonka.DynamoDB.Types.TableAutoScalingDescription

-- | Represents the auto scaling configuration for a global table.
--   
--   <i>See:</i> <a>newTableAutoScalingDescription</a> smart constructor.
data TableAutoScalingDescription
TableAutoScalingDescription' :: Maybe TableStatus -> Maybe [ReplicaAutoScalingDescription] -> Maybe Text -> TableAutoScalingDescription

-- | The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   </ul>
[$sel:tableStatus:TableAutoScalingDescription'] :: TableAutoScalingDescription -> Maybe TableStatus

-- | Represents replicas of the global table.
[$sel:replicas:TableAutoScalingDescription'] :: TableAutoScalingDescription -> Maybe [ReplicaAutoScalingDescription]

-- | The name of the table.
[$sel:tableName:TableAutoScalingDescription'] :: TableAutoScalingDescription -> Maybe Text

-- | Create a value of <a>TableAutoScalingDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableStatus:TableAutoScalingDescription'</a>,
--   <a>tableAutoScalingDescription_tableStatus</a> - The current state of
--   the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   </ul>
--   
--   <a>$sel:replicas:TableAutoScalingDescription'</a>,
--   <a>tableAutoScalingDescription_replicas</a> - Represents replicas of
--   the global table.
--   
--   <a>$sel:tableName:TableAutoScalingDescription'</a>,
--   <a>tableAutoScalingDescription_tableName</a> - The name of the table.
newTableAutoScalingDescription :: TableAutoScalingDescription

-- | The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   </ul>
tableAutoScalingDescription_tableStatus :: Lens' TableAutoScalingDescription (Maybe TableStatus)

-- | Represents replicas of the global table.
tableAutoScalingDescription_replicas :: Lens' TableAutoScalingDescription (Maybe [ReplicaAutoScalingDescription])

-- | The name of the table.
tableAutoScalingDescription_tableName :: Lens' TableAutoScalingDescription (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.TableAutoScalingDescription.TableAutoScalingDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.TableAutoScalingDescription.TableAutoScalingDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.TableAutoScalingDescription.TableAutoScalingDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.TableAutoScalingDescription.TableAutoScalingDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.TableAutoScalingDescription.TableAutoScalingDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.TableAutoScalingDescription.TableAutoScalingDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.TableAutoScalingDescription.TableAutoScalingDescription


module Amazonka.DynamoDB.Types.Tag

-- | Describes a tag. A tag is a key-value pair. You can add up to 50 tags
--   to a single DynamoDB table.
--   
--   AWS-assigned tag names and values are automatically assigned the
--   <tt>aws:</tt> prefix, which the user cannot assign. AWS-assigned tag
--   names do not count towards the tag limit of 50. User-assigned tag
--   names have the prefix <tt>user:</tt> in the Cost Allocation Report.
--   You cannot backdate the application of a tag.
--   
--   For an overview on tagging DynamoDB resources, see <a>Tagging for
--   DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | The key of the tag. Tag keys are case sensitive. Each DynamoDB table
--   can only have up to one tag with the same key. If you try to add an
--   existing tag (same key), the existing tag value will be updated to the
--   new value.
[$sel:key:Tag'] :: Tag -> Text

-- | The value of the tag. Tag values are case-sensitive and can be null.
[$sel:value:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The key of the tag. Tag keys
--   are case sensitive. Each DynamoDB table can only have up to one tag
--   with the same key. If you try to add an existing tag (same key), the
--   existing tag value will be updated to the new value.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The value of the tag. Tag
--   values are case-sensitive and can be null.
newTag :: Text -> Text -> Tag

-- | The key of the tag. Tag keys are case sensitive. Each DynamoDB table
--   can only have up to one tag with the same key. If you try to add an
--   existing tag (same key), the existing tag value will be updated to the
--   new value.
tag_key :: Lens' Tag Text

-- | The value of the tag. Tag values are case-sensitive and can be null.
tag_value :: Lens' Tag Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.Tag.Tag
instance GHC.Show.Show Amazonka.DynamoDB.Types.Tag.Tag
instance GHC.Read.Read Amazonka.DynamoDB.Types.Tag.Tag
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.Tag.Tag
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.Tag.Tag


module Amazonka.DynamoDB.Types.TimeToLiveSpecification

-- | Represents the settings used to enable or disable Time to Live (TTL)
--   for the specified table.
--   
--   <i>See:</i> <a>newTimeToLiveSpecification</a> smart constructor.
data TimeToLiveSpecification
TimeToLiveSpecification' :: Bool -> Text -> TimeToLiveSpecification

-- | Indicates whether TTL is to be enabled (true) or disabled (false) on
--   the table.
[$sel:enabled:TimeToLiveSpecification'] :: TimeToLiveSpecification -> Bool

-- | The name of the TTL attribute used to store the expiration time for
--   items in the table.
[$sel:attributeName:TimeToLiveSpecification'] :: TimeToLiveSpecification -> Text

-- | Create a value of <a>TimeToLiveSpecification</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enabled:TimeToLiveSpecification'</a>,
--   <a>timeToLiveSpecification_enabled</a> - Indicates whether TTL is to
--   be enabled (true) or disabled (false) on the table.
--   
--   <a>$sel:attributeName:TimeToLiveSpecification'</a>,
--   <a>timeToLiveSpecification_attributeName</a> - The name of the TTL
--   attribute used to store the expiration time for items in the table.
newTimeToLiveSpecification :: Bool -> Text -> TimeToLiveSpecification

-- | Indicates whether TTL is to be enabled (true) or disabled (false) on
--   the table.
timeToLiveSpecification_enabled :: Lens' TimeToLiveSpecification Bool

-- | The name of the TTL attribute used to store the expiration time for
--   items in the table.
timeToLiveSpecification_attributeName :: Lens' TimeToLiveSpecification Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.TimeToLiveSpecification.TimeToLiveSpecification
instance GHC.Show.Show Amazonka.DynamoDB.Types.TimeToLiveSpecification.TimeToLiveSpecification
instance GHC.Read.Read Amazonka.DynamoDB.Types.TimeToLiveSpecification.TimeToLiveSpecification
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.TimeToLiveSpecification.TimeToLiveSpecification
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.TimeToLiveSpecification.TimeToLiveSpecification
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.TimeToLiveSpecification.TimeToLiveSpecification
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.TimeToLiveSpecification.TimeToLiveSpecification
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.TimeToLiveSpecification.TimeToLiveSpecification


module Amazonka.DynamoDB.Types.TimeToLiveStatus
newtype TimeToLiveStatus
TimeToLiveStatus' :: Text -> TimeToLiveStatus
[fromTimeToLiveStatus] :: TimeToLiveStatus -> Text
pattern TimeToLiveStatus_DISABLED :: TimeToLiveStatus
pattern TimeToLiveStatus_DISABLING :: TimeToLiveStatus
pattern TimeToLiveStatus_ENABLED :: TimeToLiveStatus
pattern TimeToLiveStatus_ENABLING :: TimeToLiveStatus
instance Amazonka.Data.XML.ToXML Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Amazonka.Data.XML.FromXML Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Amazonka.Data.Log.ToLog Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Amazonka.Data.Text.ToText Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Amazonka.Data.Text.FromText Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance GHC.Classes.Ord Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance GHC.Read.Read Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus
instance GHC.Show.Show Amazonka.DynamoDB.Types.TimeToLiveStatus.TimeToLiveStatus


module Amazonka.DynamoDB.Types.TimeToLiveDescription

-- | The description of the Time to Live (TTL) status on the specified
--   table.
--   
--   <i>See:</i> <a>newTimeToLiveDescription</a> smart constructor.
data TimeToLiveDescription
TimeToLiveDescription' :: Maybe TimeToLiveStatus -> Maybe Text -> TimeToLiveDescription

-- | The TTL status for the table.
[$sel:timeToLiveStatus:TimeToLiveDescription'] :: TimeToLiveDescription -> Maybe TimeToLiveStatus

-- | The name of the TTL attribute for items in the table.
[$sel:attributeName:TimeToLiveDescription'] :: TimeToLiveDescription -> Maybe Text

-- | Create a value of <a>TimeToLiveDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeToLiveStatus:TimeToLiveDescription'</a>,
--   <a>timeToLiveDescription_timeToLiveStatus</a> - The TTL status for the
--   table.
--   
--   <a>$sel:attributeName:TimeToLiveDescription'</a>,
--   <a>timeToLiveDescription_attributeName</a> - The name of the TTL
--   attribute for items in the table.
newTimeToLiveDescription :: TimeToLiveDescription

-- | The TTL status for the table.
timeToLiveDescription_timeToLiveStatus :: Lens' TimeToLiveDescription (Maybe TimeToLiveStatus)

-- | The name of the TTL attribute for items in the table.
timeToLiveDescription_attributeName :: Lens' TimeToLiveDescription (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.TimeToLiveDescription.TimeToLiveDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.TimeToLiveDescription.TimeToLiveDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.TimeToLiveDescription.TimeToLiveDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.TimeToLiveDescription.TimeToLiveDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.TimeToLiveDescription.TimeToLiveDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.TimeToLiveDescription.TimeToLiveDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.TimeToLiveDescription.TimeToLiveDescription


module Amazonka.DynamoDB.Types.SourceTableFeatureDetails

-- | Contains the details of the features enabled on the table when the
--   backup was created. For example, LSIs, GSIs, streams, TTL.
--   
--   <i>See:</i> <a>newSourceTableFeatureDetails</a> smart constructor.
data SourceTableFeatureDetails
SourceTableFeatureDetails' :: Maybe StreamSpecification -> Maybe [GlobalSecondaryIndexInfo] -> Maybe [LocalSecondaryIndexInfo] -> Maybe SSEDescription -> Maybe TimeToLiveDescription -> SourceTableFeatureDetails

-- | Stream settings on the table when the backup was created.
[$sel:streamDescription:SourceTableFeatureDetails'] :: SourceTableFeatureDetails -> Maybe StreamSpecification

-- | Represents the GSI properties for the table when the backup was
--   created. It includes the IndexName, KeySchema, Projection, and
--   ProvisionedThroughput for the GSIs on the table at the time of backup.
[$sel:globalSecondaryIndexes:SourceTableFeatureDetails'] :: SourceTableFeatureDetails -> Maybe [GlobalSecondaryIndexInfo]

-- | Represents the LSI properties for the table when the backup was
--   created. It includes the IndexName, KeySchema and Projection for the
--   LSIs on the table at the time of backup.
[$sel:localSecondaryIndexes:SourceTableFeatureDetails'] :: SourceTableFeatureDetails -> Maybe [LocalSecondaryIndexInfo]

-- | The description of the server-side encryption status on the table when
--   the backup was created.
[$sel:sSEDescription:SourceTableFeatureDetails'] :: SourceTableFeatureDetails -> Maybe SSEDescription

-- | Time to Live settings on the table when the backup was created.
[$sel:timeToLiveDescription:SourceTableFeatureDetails'] :: SourceTableFeatureDetails -> Maybe TimeToLiveDescription

-- | Create a value of <a>SourceTableFeatureDetails</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamDescription:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_streamDescription</a> - Stream settings
--   on the table when the backup was created.
--   
--   <a>$sel:globalSecondaryIndexes:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_globalSecondaryIndexes</a> - Represents
--   the GSI properties for the table when the backup was created. It
--   includes the IndexName, KeySchema, Projection, and
--   ProvisionedThroughput for the GSIs on the table at the time of backup.
--   
--   <a>$sel:localSecondaryIndexes:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_localSecondaryIndexes</a> - Represents
--   the LSI properties for the table when the backup was created. It
--   includes the IndexName, KeySchema and Projection for the LSIs on the
--   table at the time of backup.
--   
--   <a>$sel:sSEDescription:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_sSEDescription</a> - The description of
--   the server-side encryption status on the table when the backup was
--   created.
--   
--   <a>$sel:timeToLiveDescription:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_timeToLiveDescription</a> - Time to Live
--   settings on the table when the backup was created.
newSourceTableFeatureDetails :: SourceTableFeatureDetails

-- | Stream settings on the table when the backup was created.
sourceTableFeatureDetails_streamDescription :: Lens' SourceTableFeatureDetails (Maybe StreamSpecification)

-- | Represents the GSI properties for the table when the backup was
--   created. It includes the IndexName, KeySchema, Projection, and
--   ProvisionedThroughput for the GSIs on the table at the time of backup.
sourceTableFeatureDetails_globalSecondaryIndexes :: Lens' SourceTableFeatureDetails (Maybe [GlobalSecondaryIndexInfo])

-- | Represents the LSI properties for the table when the backup was
--   created. It includes the IndexName, KeySchema and Projection for the
--   LSIs on the table at the time of backup.
sourceTableFeatureDetails_localSecondaryIndexes :: Lens' SourceTableFeatureDetails (Maybe [LocalSecondaryIndexInfo])

-- | The description of the server-side encryption status on the table when
--   the backup was created.
sourceTableFeatureDetails_sSEDescription :: Lens' SourceTableFeatureDetails (Maybe SSEDescription)

-- | Time to Live settings on the table when the backup was created.
sourceTableFeatureDetails_timeToLiveDescription :: Lens' SourceTableFeatureDetails (Maybe TimeToLiveDescription)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.SourceTableFeatureDetails.SourceTableFeatureDetails
instance GHC.Show.Show Amazonka.DynamoDB.Types.SourceTableFeatureDetails.SourceTableFeatureDetails
instance GHC.Read.Read Amazonka.DynamoDB.Types.SourceTableFeatureDetails.SourceTableFeatureDetails
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.SourceTableFeatureDetails.SourceTableFeatureDetails
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.SourceTableFeatureDetails.SourceTableFeatureDetails
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.SourceTableFeatureDetails.SourceTableFeatureDetails
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.SourceTableFeatureDetails.SourceTableFeatureDetails


module Amazonka.DynamoDB.Types.BackupDescription

-- | Contains the description of the backup created for the table.
--   
--   <i>See:</i> <a>newBackupDescription</a> smart constructor.
data BackupDescription
BackupDescription' :: Maybe BackupDetails -> Maybe SourceTableDetails -> Maybe SourceTableFeatureDetails -> BackupDescription

-- | Contains the details of the backup created for the table.
[$sel:backupDetails:BackupDescription'] :: BackupDescription -> Maybe BackupDetails

-- | Contains the details of the table when the backup was created.
[$sel:sourceTableDetails:BackupDescription'] :: BackupDescription -> Maybe SourceTableDetails

-- | Contains the details of the features enabled on the table when the
--   backup was created. For example, LSIs, GSIs, streams, TTL.
[$sel:sourceTableFeatureDetails:BackupDescription'] :: BackupDescription -> Maybe SourceTableFeatureDetails

-- | Create a value of <a>BackupDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupDetails:BackupDescription'</a>,
--   <a>backupDescription_backupDetails</a> - Contains the details of the
--   backup created for the table.
--   
--   <a>$sel:sourceTableDetails:BackupDescription'</a>,
--   <a>backupDescription_sourceTableDetails</a> - Contains the details of
--   the table when the backup was created.
--   
--   <a>$sel:sourceTableFeatureDetails:BackupDescription'</a>,
--   <a>backupDescription_sourceTableFeatureDetails</a> - Contains the
--   details of the features enabled on the table when the backup was
--   created. For example, LSIs, GSIs, streams, TTL.
newBackupDescription :: BackupDescription

-- | Contains the details of the backup created for the table.
backupDescription_backupDetails :: Lens' BackupDescription (Maybe BackupDetails)

-- | Contains the details of the table when the backup was created.
backupDescription_sourceTableDetails :: Lens' BackupDescription (Maybe SourceTableDetails)

-- | Contains the details of the features enabled on the table when the
--   backup was created. For example, LSIs, GSIs, streams, TTL.
backupDescription_sourceTableFeatureDetails :: Lens' BackupDescription (Maybe SourceTableFeatureDetails)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.BackupDescription.BackupDescription
instance GHC.Show.Show Amazonka.DynamoDB.Types.BackupDescription.BackupDescription
instance GHC.Read.Read Amazonka.DynamoDB.Types.BackupDescription.BackupDescription
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.BackupDescription.BackupDescription
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.BackupDescription.BackupDescription
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.BackupDescription.BackupDescription
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.BackupDescription.BackupDescription


module Amazonka.DynamoDB.Types.TransactGetItem

-- | Specifies an item to be retrieved as part of the transaction.
--   
--   <i>See:</i> <a>newTransactGetItem</a> smart constructor.
data TransactGetItem
TransactGetItem' :: Get -> TransactGetItem

-- | Contains the primary key that identifies the item to get, together
--   with the name of the table that contains the item, and optionally the
--   specific attributes of the item to retrieve.
[$sel:get':TransactGetItem'] :: TransactGetItem -> Get

-- | Create a value of <a>TransactGetItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:get':TransactGetItem'</a>, <a>transactGetItem_get</a> -
--   Contains the primary key that identifies the item to get, together
--   with the name of the table that contains the item, and optionally the
--   specific attributes of the item to retrieve.
newTransactGetItem :: Get -> TransactGetItem

-- | Contains the primary key that identifies the item to get, together
--   with the name of the table that contains the item, and optionally the
--   specific attributes of the item to retrieve.
transactGetItem_get :: Lens' TransactGetItem Get
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.TransactGetItem.TransactGetItem
instance GHC.Show.Show Amazonka.DynamoDB.Types.TransactGetItem.TransactGetItem
instance GHC.Read.Read Amazonka.DynamoDB.Types.TransactGetItem.TransactGetItem
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.TransactGetItem.TransactGetItem
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.TransactGetItem.TransactGetItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.TransactGetItem.TransactGetItem
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.TransactGetItem.TransactGetItem


module Amazonka.DynamoDB.Types.Update

-- | Represents a request to perform an <tt>UpdateItem</tt> operation.
--   
--   <i>See:</i> <a>newUpdate</a> smart constructor.
data Update
Update' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnValuesOnConditionCheckFailure -> Maybe Text -> HashMap Text AttributeValue -> Text -> Text -> Update

-- | One or more substitution tokens for attribute names in an expression.
[$sel:expressionAttributeNames:Update'] :: Update -> Maybe (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
[$sel:expressionAttributeValues:Update'] :: Update -> Maybe (HashMap Text AttributeValue)

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Update</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE, ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.
[$sel:returnValuesOnConditionCheckFailure:Update'] :: Update -> Maybe ReturnValuesOnConditionCheckFailure

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
[$sel:conditionExpression:Update'] :: Update -> Maybe Text

-- | The primary key of the item to be updated. Each element consists of an
--   attribute name and a value for that attribute.
[$sel:key:Update'] :: Update -> HashMap Text AttributeValue

-- | An expression that defines one or more attributes to be updated, the
--   action to be performed on them, and new value(s) for them.
[$sel:updateExpression:Update'] :: Update -> Text

-- | Name of the table for the <tt>UpdateItem</tt> request.
[$sel:tableName:Update'] :: Update -> Text

-- | Create a value of <a>Update</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:Update'</a>,
--   <a>update_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression.
--   
--   <a>$sel:expressionAttributeValues:Update'</a>,
--   <a>update_expressionAttributeValues</a> - One or more values that can
--   be substituted in an expression.
--   
--   <a>$sel:returnValuesOnConditionCheckFailure:Update'</a>,
--   <a>update_returnValuesOnConditionCheckFailure</a> - Use
--   <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Update</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE, ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.
--   
--   <a>$sel:conditionExpression:Update'</a>,
--   <a>update_conditionExpression</a> - A condition that must be satisfied
--   in order for a conditional update to succeed.
--   
--   <a>$sel:key:Update'</a>, <a>update_key</a> - The primary key of the
--   item to be updated. Each element consists of an attribute name and a
--   value for that attribute.
--   
--   <a>$sel:updateExpression:Update'</a>, <a>update_updateExpression</a> -
--   An expression that defines one or more attributes to be updated, the
--   action to be performed on them, and new value(s) for them.
--   
--   <a>$sel:tableName:Update'</a>, <a>update_tableName</a> - Name of the
--   table for the <tt>UpdateItem</tt> request.
newUpdate :: Text -> Text -> Update

-- | One or more substitution tokens for attribute names in an expression.
update_expressionAttributeNames :: Lens' Update (Maybe (HashMap Text Text))

-- | One or more values that can be substituted in an expression.
update_expressionAttributeValues :: Lens' Update (Maybe (HashMap Text AttributeValue))

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Update</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE, ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.
update_returnValuesOnConditionCheckFailure :: Lens' Update (Maybe ReturnValuesOnConditionCheckFailure)

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
update_conditionExpression :: Lens' Update (Maybe Text)

-- | The primary key of the item to be updated. Each element consists of an
--   attribute name and a value for that attribute.
update_key :: Lens' Update (HashMap Text AttributeValue)

-- | An expression that defines one or more attributes to be updated, the
--   action to be performed on them, and new value(s) for them.
update_updateExpression :: Lens' Update Text

-- | Name of the table for the <tt>UpdateItem</tt> request.
update_tableName :: Lens' Update Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.Update.Update
instance GHC.Show.Show Amazonka.DynamoDB.Types.Update.Update
instance GHC.Read.Read Amazonka.DynamoDB.Types.Update.Update
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.Update.Update
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.Update.Update
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.Update.Update
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.Update.Update


module Amazonka.DynamoDB.Types.TransactWriteItem

-- | A list of requests that can perform update, put, delete, or check
--   operations on multiple items in one or more tables atomically.
--   
--   <i>See:</i> <a>newTransactWriteItem</a> smart constructor.
data TransactWriteItem
TransactWriteItem' :: Maybe ConditionCheck -> Maybe Put -> Maybe Delete -> Maybe Update -> TransactWriteItem

-- | A request to perform a check item operation.
[$sel:conditionCheck:TransactWriteItem'] :: TransactWriteItem -> Maybe ConditionCheck

-- | A request to perform a <tt>PutItem</tt> operation.
[$sel:put:TransactWriteItem'] :: TransactWriteItem -> Maybe Put

-- | A request to perform a <tt>DeleteItem</tt> operation.
[$sel:delete':TransactWriteItem'] :: TransactWriteItem -> Maybe Delete

-- | A request to perform an <tt>UpdateItem</tt> operation.
[$sel:update:TransactWriteItem'] :: TransactWriteItem -> Maybe Update

-- | Create a value of <a>TransactWriteItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:conditionCheck:TransactWriteItem'</a>,
--   <a>transactWriteItem_conditionCheck</a> - A request to perform a check
--   item operation.
--   
--   <a>$sel:put:TransactWriteItem'</a>, <a>transactWriteItem_put</a> - A
--   request to perform a <tt>PutItem</tt> operation.
--   
--   <a>$sel:delete':TransactWriteItem'</a>,
--   <a>transactWriteItem_delete</a> - A request to perform a
--   <tt>DeleteItem</tt> operation.
--   
--   <a>$sel:update:TransactWriteItem'</a>, <a>transactWriteItem_update</a>
--   - A request to perform an <tt>UpdateItem</tt> operation.
newTransactWriteItem :: TransactWriteItem

-- | A request to perform a check item operation.
transactWriteItem_conditionCheck :: Lens' TransactWriteItem (Maybe ConditionCheck)

-- | A request to perform a <tt>PutItem</tt> operation.
transactWriteItem_put :: Lens' TransactWriteItem (Maybe Put)

-- | A request to perform a <tt>DeleteItem</tt> operation.
transactWriteItem_delete :: Lens' TransactWriteItem (Maybe Delete)

-- | A request to perform an <tt>UpdateItem</tt> operation.
transactWriteItem_update :: Lens' TransactWriteItem (Maybe Update)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.TransactWriteItem.TransactWriteItem
instance GHC.Show.Show Amazonka.DynamoDB.Types.TransactWriteItem.TransactWriteItem
instance GHC.Read.Read Amazonka.DynamoDB.Types.TransactWriteItem.TransactWriteItem
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.TransactWriteItem.TransactWriteItem
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.TransactWriteItem.TransactWriteItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.TransactWriteItem.TransactWriteItem
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.TransactWriteItem.TransactWriteItem


module Amazonka.DynamoDB.Types.UpdateGlobalSecondaryIndexAction

-- | Represents the new provisioned throughput settings to be applied to a
--   global secondary index.
--   
--   <i>See:</i> <a>newUpdateGlobalSecondaryIndexAction</a> smart
--   constructor.
data UpdateGlobalSecondaryIndexAction
UpdateGlobalSecondaryIndexAction' :: Text -> ProvisionedThroughput -> UpdateGlobalSecondaryIndexAction

-- | The name of the global secondary index to be updated.
[$sel:indexName:UpdateGlobalSecondaryIndexAction'] :: UpdateGlobalSecondaryIndexAction -> Text

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:provisionedThroughput:UpdateGlobalSecondaryIndexAction'] :: UpdateGlobalSecondaryIndexAction -> ProvisionedThroughput

-- | Create a value of <a>UpdateGlobalSecondaryIndexAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:UpdateGlobalSecondaryIndexAction'</a>,
--   <a>updateGlobalSecondaryIndexAction_indexName</a> - The name of the
--   global secondary index to be updated.
--   
--   <a>$sel:provisionedThroughput:UpdateGlobalSecondaryIndexAction'</a>,
--   <a>updateGlobalSecondaryIndexAction_provisionedThroughput</a> -
--   Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
newUpdateGlobalSecondaryIndexAction :: Text -> ProvisionedThroughput -> UpdateGlobalSecondaryIndexAction

-- | The name of the global secondary index to be updated.
updateGlobalSecondaryIndexAction_indexName :: Lens' UpdateGlobalSecondaryIndexAction Text

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
updateGlobalSecondaryIndexAction_provisionedThroughput :: Lens' UpdateGlobalSecondaryIndexAction ProvisionedThroughput
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.UpdateGlobalSecondaryIndexAction.UpdateGlobalSecondaryIndexAction
instance GHC.Show.Show Amazonka.DynamoDB.Types.UpdateGlobalSecondaryIndexAction.UpdateGlobalSecondaryIndexAction
instance GHC.Read.Read Amazonka.DynamoDB.Types.UpdateGlobalSecondaryIndexAction.UpdateGlobalSecondaryIndexAction
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.UpdateGlobalSecondaryIndexAction.UpdateGlobalSecondaryIndexAction
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.UpdateGlobalSecondaryIndexAction.UpdateGlobalSecondaryIndexAction
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.UpdateGlobalSecondaryIndexAction.UpdateGlobalSecondaryIndexAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.UpdateGlobalSecondaryIndexAction.UpdateGlobalSecondaryIndexAction


module Amazonka.DynamoDB.Types.GlobalSecondaryIndexUpdate

-- | Represents one of the following:
--   
--   <ul>
--   <li>A new global secondary index to be added to an existing
--   table.</li>
--   <li>New provisioned throughput parameters for an existing global
--   secondary index.</li>
--   <li>An existing global secondary index to be removed from an existing
--   table.</li>
--   </ul>
--   
--   <i>See:</i> <a>newGlobalSecondaryIndexUpdate</a> smart constructor.
data GlobalSecondaryIndexUpdate
GlobalSecondaryIndexUpdate' :: Maybe CreateGlobalSecondaryIndexAction -> Maybe DeleteGlobalSecondaryIndexAction -> Maybe UpdateGlobalSecondaryIndexAction -> GlobalSecondaryIndexUpdate

-- | The parameters required for creating a global secondary index on an
--   existing table:
--   
--   <ul>
--   <li><pre>IndexName</pre></li>
--   <li><pre>KeySchema</pre></li>
--   <li><pre>AttributeDefinitions</pre></li>
--   <li><pre>Projection</pre></li>
--   <li><pre>ProvisionedThroughput</pre></li>
--   </ul>
[$sel:create:GlobalSecondaryIndexUpdate'] :: GlobalSecondaryIndexUpdate -> Maybe CreateGlobalSecondaryIndexAction

-- | The name of an existing global secondary index to be removed.
[$sel:delete':GlobalSecondaryIndexUpdate'] :: GlobalSecondaryIndexUpdate -> Maybe DeleteGlobalSecondaryIndexAction

-- | The name of an existing global secondary index, along with new
--   provisioned throughput settings to be applied to that index.
[$sel:update:GlobalSecondaryIndexUpdate'] :: GlobalSecondaryIndexUpdate -> Maybe UpdateGlobalSecondaryIndexAction

-- | Create a value of <a>GlobalSecondaryIndexUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:create:GlobalSecondaryIndexUpdate'</a>,
--   <a>globalSecondaryIndexUpdate_create</a> - The parameters required for
--   creating a global secondary index on an existing table:
--   
--   <ul>
--   <li><pre>IndexName</pre></li>
--   <li><pre>KeySchema</pre></li>
--   <li><pre>AttributeDefinitions</pre></li>
--   <li><pre>Projection</pre></li>
--   <li><pre>ProvisionedThroughput</pre></li>
--   </ul>
--   
--   <a>$sel:delete':GlobalSecondaryIndexUpdate'</a>,
--   <a>globalSecondaryIndexUpdate_delete</a> - The name of an existing
--   global secondary index to be removed.
--   
--   <a>$sel:update:GlobalSecondaryIndexUpdate'</a>,
--   <a>globalSecondaryIndexUpdate_update</a> - The name of an existing
--   global secondary index, along with new provisioned throughput settings
--   to be applied to that index.
newGlobalSecondaryIndexUpdate :: GlobalSecondaryIndexUpdate

-- | The parameters required for creating a global secondary index on an
--   existing table:
--   
--   <ul>
--   <li><pre>IndexName</pre></li>
--   <li><pre>KeySchema</pre></li>
--   <li><pre>AttributeDefinitions</pre></li>
--   <li><pre>Projection</pre></li>
--   <li><pre>ProvisionedThroughput</pre></li>
--   </ul>
globalSecondaryIndexUpdate_create :: Lens' GlobalSecondaryIndexUpdate (Maybe CreateGlobalSecondaryIndexAction)

-- | The name of an existing global secondary index to be removed.
globalSecondaryIndexUpdate_delete :: Lens' GlobalSecondaryIndexUpdate (Maybe DeleteGlobalSecondaryIndexAction)

-- | The name of an existing global secondary index, along with new
--   provisioned throughput settings to be applied to that index.
globalSecondaryIndexUpdate_update :: Lens' GlobalSecondaryIndexUpdate (Maybe UpdateGlobalSecondaryIndexAction)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.GlobalSecondaryIndexUpdate.GlobalSecondaryIndexUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.GlobalSecondaryIndexUpdate.GlobalSecondaryIndexUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.GlobalSecondaryIndexUpdate.GlobalSecondaryIndexUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.GlobalSecondaryIndexUpdate.GlobalSecondaryIndexUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.GlobalSecondaryIndexUpdate.GlobalSecondaryIndexUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.GlobalSecondaryIndexUpdate.GlobalSecondaryIndexUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.GlobalSecondaryIndexUpdate.GlobalSecondaryIndexUpdate


module Amazonka.DynamoDB.Types.UpdateReplicationGroupMemberAction

-- | Represents a replica to be modified.
--   
--   <i>See:</i> <a>newUpdateReplicationGroupMemberAction</a> smart
--   constructor.
data UpdateReplicationGroupMemberAction
UpdateReplicationGroupMemberAction' :: Maybe Text -> Maybe ProvisionedThroughputOverride -> Maybe (NonEmpty ReplicaGlobalSecondaryIndex) -> Text -> UpdateReplicationGroupMemberAction

-- | The AWS KMS customer master key (CMK) of the replica that should be
--   used for AWS KMS encryption. To specify a CMK, use its key ID, Amazon
--   Resource Name (ARN), alias name, or alias ARN. Note that you should
--   only provide this parameter if the key is different from the default
--   DynamoDB KMS master key alias/aws/dynamodb.
[$sel:kmsMasterKeyId:UpdateReplicationGroupMemberAction'] :: UpdateReplicationGroupMemberAction -> Maybe Text

-- | Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
[$sel:provisionedThroughputOverride:UpdateReplicationGroupMemberAction'] :: UpdateReplicationGroupMemberAction -> Maybe ProvisionedThroughputOverride

-- | Replica-specific global secondary index settings.
[$sel:globalSecondaryIndexes:UpdateReplicationGroupMemberAction'] :: UpdateReplicationGroupMemberAction -> Maybe (NonEmpty ReplicaGlobalSecondaryIndex)

-- | The Region where the replica exists.
[$sel:regionName:UpdateReplicationGroupMemberAction'] :: UpdateReplicationGroupMemberAction -> Text

-- | Create a value of <a>UpdateReplicationGroupMemberAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsMasterKeyId:UpdateReplicationGroupMemberAction'</a>,
--   <a>updateReplicationGroupMemberAction_kmsMasterKeyId</a> - The AWS KMS
--   customer master key (CMK) of the replica that should be used for AWS
--   KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name
--   (ARN), alias name, or alias ARN. Note that you should only provide
--   this parameter if the key is different from the default DynamoDB KMS
--   master key alias/aws/dynamodb.
--   
--   
--   <a>$sel:provisionedThroughputOverride:UpdateReplicationGroupMemberAction'</a>,
--   <a>updateReplicationGroupMemberAction_provisionedThroughputOverride</a>
--   - Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
--   
--   
--   <a>$sel:globalSecondaryIndexes:UpdateReplicationGroupMemberAction'</a>,
--   <a>updateReplicationGroupMemberAction_globalSecondaryIndexes</a> -
--   Replica-specific global secondary index settings.
--   
--   <a>$sel:regionName:UpdateReplicationGroupMemberAction'</a>,
--   <a>updateReplicationGroupMemberAction_regionName</a> - The Region
--   where the replica exists.
newUpdateReplicationGroupMemberAction :: Text -> UpdateReplicationGroupMemberAction

-- | The AWS KMS customer master key (CMK) of the replica that should be
--   used for AWS KMS encryption. To specify a CMK, use its key ID, Amazon
--   Resource Name (ARN), alias name, or alias ARN. Note that you should
--   only provide this parameter if the key is different from the default
--   DynamoDB KMS master key alias/aws/dynamodb.
updateReplicationGroupMemberAction_kmsMasterKeyId :: Lens' UpdateReplicationGroupMemberAction (Maybe Text)

-- | Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
updateReplicationGroupMemberAction_provisionedThroughputOverride :: Lens' UpdateReplicationGroupMemberAction (Maybe ProvisionedThroughputOverride)

-- | Replica-specific global secondary index settings.
updateReplicationGroupMemberAction_globalSecondaryIndexes :: Lens' UpdateReplicationGroupMemberAction (Maybe (NonEmpty ReplicaGlobalSecondaryIndex))

-- | The Region where the replica exists.
updateReplicationGroupMemberAction_regionName :: Lens' UpdateReplicationGroupMemberAction Text
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.UpdateReplicationGroupMemberAction.UpdateReplicationGroupMemberAction
instance GHC.Show.Show Amazonka.DynamoDB.Types.UpdateReplicationGroupMemberAction.UpdateReplicationGroupMemberAction
instance GHC.Read.Read Amazonka.DynamoDB.Types.UpdateReplicationGroupMemberAction.UpdateReplicationGroupMemberAction
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.UpdateReplicationGroupMemberAction.UpdateReplicationGroupMemberAction
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.UpdateReplicationGroupMemberAction.UpdateReplicationGroupMemberAction
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.UpdateReplicationGroupMemberAction.UpdateReplicationGroupMemberAction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.UpdateReplicationGroupMemberAction.UpdateReplicationGroupMemberAction


module Amazonka.DynamoDB.Types.ReplicationGroupUpdate

-- | Represents one of the following:
--   
--   <ul>
--   <li>A new replica to be added to an existing regional table or global
--   table. This request invokes the <tt>CreateTableReplica</tt> action in
--   the destination Region.</li>
--   <li>New parameters for an existing replica. This request invokes the
--   <tt>UpdateTable</tt> action in the destination Region.</li>
--   <li>An existing replica to be deleted. The request invokes the
--   <tt>DeleteTableReplica</tt> action in the destination Region, deleting
--   the replica and all if its items in the destination Region.</li>
--   </ul>
--   
--   <i>See:</i> <a>newReplicationGroupUpdate</a> smart constructor.
data ReplicationGroupUpdate
ReplicationGroupUpdate' :: Maybe CreateReplicationGroupMemberAction -> Maybe DeleteReplicationGroupMemberAction -> Maybe UpdateReplicationGroupMemberAction -> ReplicationGroupUpdate

-- | The parameters required for creating a replica for the table.
[$sel:create:ReplicationGroupUpdate'] :: ReplicationGroupUpdate -> Maybe CreateReplicationGroupMemberAction

-- | The parameters required for deleting a replica for the table.
[$sel:delete':ReplicationGroupUpdate'] :: ReplicationGroupUpdate -> Maybe DeleteReplicationGroupMemberAction

-- | The parameters required for updating a replica for the table.
[$sel:update:ReplicationGroupUpdate'] :: ReplicationGroupUpdate -> Maybe UpdateReplicationGroupMemberAction

-- | Create a value of <a>ReplicationGroupUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:create:ReplicationGroupUpdate'</a>,
--   <a>replicationGroupUpdate_create</a> - The parameters required for
--   creating a replica for the table.
--   
--   <a>$sel:delete':ReplicationGroupUpdate'</a>,
--   <a>replicationGroupUpdate_delete</a> - The parameters required for
--   deleting a replica for the table.
--   
--   <a>$sel:update:ReplicationGroupUpdate'</a>,
--   <a>replicationGroupUpdate_update</a> - The parameters required for
--   updating a replica for the table.
newReplicationGroupUpdate :: ReplicationGroupUpdate

-- | The parameters required for creating a replica for the table.
replicationGroupUpdate_create :: Lens' ReplicationGroupUpdate (Maybe CreateReplicationGroupMemberAction)

-- | The parameters required for deleting a replica for the table.
replicationGroupUpdate_delete :: Lens' ReplicationGroupUpdate (Maybe DeleteReplicationGroupMemberAction)

-- | The parameters required for updating a replica for the table.
replicationGroupUpdate_update :: Lens' ReplicationGroupUpdate (Maybe UpdateReplicationGroupMemberAction)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.ReplicationGroupUpdate.ReplicationGroupUpdate
instance GHC.Show.Show Amazonka.DynamoDB.Types.ReplicationGroupUpdate.ReplicationGroupUpdate
instance GHC.Read.Read Amazonka.DynamoDB.Types.ReplicationGroupUpdate.ReplicationGroupUpdate
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.ReplicationGroupUpdate.ReplicationGroupUpdate
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.ReplicationGroupUpdate.ReplicationGroupUpdate
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.ReplicationGroupUpdate.ReplicationGroupUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.ReplicationGroupUpdate.ReplicationGroupUpdate


module Amazonka.DynamoDB.Types.WriteRequest

-- | Represents an operation to perform - either <tt>DeleteItem</tt> or
--   <tt>PutItem</tt>. You can only request one of these operations, not
--   both, in a single <tt>WriteRequest</tt>. If you do need to perform
--   both of these operations, you need to provide two separate
--   <tt>WriteRequest</tt> objects.
--   
--   <i>See:</i> <a>newWriteRequest</a> smart constructor.
data WriteRequest
WriteRequest' :: Maybe DeleteRequest -> Maybe PutRequest -> WriteRequest

-- | A request to perform a <tt>DeleteItem</tt> operation.
[$sel:deleteRequest:WriteRequest'] :: WriteRequest -> Maybe DeleteRequest

-- | A request to perform a <tt>PutItem</tt> operation.
[$sel:putRequest:WriteRequest'] :: WriteRequest -> Maybe PutRequest

-- | Create a value of <a>WriteRequest</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deleteRequest:WriteRequest'</a>,
--   <a>writeRequest_deleteRequest</a> - A request to perform a
--   <tt>DeleteItem</tt> operation.
--   
--   <a>$sel:putRequest:WriteRequest'</a>, <a>writeRequest_putRequest</a> -
--   A request to perform a <tt>PutItem</tt> operation.
newWriteRequest :: WriteRequest

-- | A request to perform a <tt>DeleteItem</tt> operation.
writeRequest_deleteRequest :: Lens' WriteRequest (Maybe DeleteRequest)

-- | A request to perform a <tt>PutItem</tt> operation.
writeRequest_putRequest :: Lens' WriteRequest (Maybe PutRequest)
instance GHC.Generics.Generic Amazonka.DynamoDB.Types.WriteRequest.WriteRequest
instance GHC.Show.Show Amazonka.DynamoDB.Types.WriteRequest.WriteRequest
instance GHC.Read.Read Amazonka.DynamoDB.Types.WriteRequest.WriteRequest
instance GHC.Classes.Eq Amazonka.DynamoDB.Types.WriteRequest.WriteRequest
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.DynamoDB.Types.WriteRequest.WriteRequest
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Types.WriteRequest.WriteRequest
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Types.WriteRequest.WriteRequest
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Types.WriteRequest.WriteRequest


module Amazonka.DynamoDB.Types

-- | API version <tt>2012-08-10</tt> of the Amazon DynamoDB SDK
--   configuration.
defaultService :: Service

-- | The specified <tt>ExportTime</tt> is outside of the point in time
--   recovery window.
_InvalidExportTimeException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Backup not found for the given BackupARN.
_BackupNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A target table with the specified name is either being created or
--   deleted.
_TableInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There was a conflict when writing to the specified S3 bucket.
_ExportConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Backups have not yet been enabled for this table.
_ContinuousBackupsUnavailableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your request rate is too high. The AWS SDKs for DynamoDB automatically
--   retry requests that receive this exception. Your request is eventually
--   successful, unless your retry queue is too large to finish. Reduce the
--   frequency of requests and use exponential backoff. For more
--   information, go to <a>Error Retries and Exponential Backoff</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
_ProvisionedThroughputExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified global table does not exist.
_GlobalTableNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The transaction with the given request token is already in progress.
_TransactionInProgressException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The entire transaction request was canceled.
--   
--   DynamoDB cancels a <tt>TransactWriteItems</tt> request under the
--   following circumstances:
--   
--   <ul>
--   <li>A condition in one of the condition expressions is not met.</li>
--   <li>A table in the <tt>TransactWriteItems</tt> request is in a
--   different account or region.</li>
--   <li>More than one action in the <tt>TransactWriteItems</tt> operation
--   targets the same item.</li>
--   <li>There is insufficient provisioned capacity for the transaction to
--   be completed.</li>
--   <li>An item size becomes too large (larger than 400 KB), or a local
--   secondary index (LSI) becomes too large, or a similar validation error
--   occurs because of changes made by the transaction.</li>
--   <li>There is a user error, such as an invalid data format.</li>
--   </ul>
--   
--   DynamoDB cancels a <tt>TransactGetItems</tt> request under the
--   following circumstances:
--   
--   <ul>
--   <li>There is an ongoing <tt>TransactGetItems</tt> operation that
--   conflicts with a concurrent <tt>PutItem</tt>, <tt>UpdateItem</tt>,
--   <tt>DeleteItem</tt> or <tt>TransactWriteItems</tt> request. In this
--   case the <tt>TransactGetItems</tt> operation fails with a
--   <tt>TransactionCanceledException</tt>.</li>
--   <li>A table in the <tt>TransactGetItems</tt> request is in a different
--   account or region.</li>
--   <li>There is insufficient provisioned capacity for the transaction to
--   be completed.</li>
--   <li>There is a user error, such as an invalid data format.</li>
--   </ul>
--   
--   If using Java, DynamoDB lists the cancellation reasons on the
--   <tt>CancellationReasons</tt> property. This property is not set for
--   other languages. Transaction cancellation reasons are ordered in the
--   order of requested items, if an item has no error it will have
--   <tt>NONE</tt> code and <tt>Null</tt> message.
--   
--   Cancellation reason codes and possible error messages:
--   
--   <ul>
--   <li>No Errors:<ul><li>Code: <tt>NONE</tt></li><li>Message:
--   <tt>null</tt></li></ul></li>
--   <li>Conditional Check Failed:<ul><li>Code:
--   <tt>ConditionalCheckFailed</tt></li><li>Message: The conditional
--   request failed.</li></ul></li>
--   <li>Item Collection Size Limit Exceeded:<ul><li>Code:
--   <tt>ItemCollectionSizeLimitExceeded</tt></li><li>Message: Collection
--   size exceeded.</li></ul></li>
--   <li>Transaction Conflict:<ul><li>Code:
--   <tt>TransactionConflict</tt></li><li>Message: Transaction is ongoing
--   for the item.</li></ul></li>
--   <li>Provisioned Throughput Exceeded:<ul><li>Code:
--   <tt>ProvisionedThroughputExceeded</tt></li><li>Messages:<ul><li>The
--   level of configured provisioned throughput for the table was exceeded.
--   Consider increasing your provisioning level with the UpdateTable
--   API.This Message is received when provisioned throughput is exceeded
--   is on a provisioned DynamoDB table.</li><li>The level of configured
--   provisioned throughput for one or more global secondary indexes of the
--   table was exceeded. Consider increasing your provisioning level for
--   the under-provisioned global secondary indexes with the UpdateTable
--   API.This message is returned when provisioned throughput is exceeded
--   is on a provisioned GSI.</li></ul></li></ul></li>
--   <li>Throttling Error:<ul><li>Code:
--   <tt>ThrottlingError</tt></li><li>Messages:<ul><li>Throughput exceeds
--   the current capacity of your table or index. DynamoDB is automatically
--   scaling your table or index so please try again shortly. If exceptions
--   persist, check if you have a hot key:
--   https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html.This
--   message is returned when writes get throttled on an On-Demand table as
--   DynamoDB is automatically scaling the table.</li><li>Throughput
--   exceeds the current capacity for one or more global secondary indexes.
--   DynamoDB is automatically scaling your index so please try again
--   shortly.This message is returned when when writes get throttled on an
--   On-Demand GSI as DynamoDB is automatically scaling the
--   GSI.</li></ul></li></ul></li>
--   <li>Validation Error:<ul><li>Code:
--   <tt>ValidationError</tt></li><li>Messages:<ul><li>One or more
--   parameter values were invalid.</li><li>The update expression attempted
--   to update the secondary index key beyond allowed size
--   limits.</li><li>The update expression attempted to update the
--   secondary index key to unsupported type.</li><li>An operand in the
--   update expression has an incorrect data type.</li><li>Item size to
--   update has exceeded the maximum allowed size.</li><li>Number overflow.
--   Attempting to store a number with magnitude larger than supported
--   range.</li><li>Type mismatch for attribute to update.</li><li>Nesting
--   Levels have exceeded supported limits.</li><li>The document path
--   provided in the update expression is invalid for update.</li><li>The
--   provided expression refers to an attribute that does not exist in the
--   item.</li></ul></li></ul></li>
--   </ul>
_TransactionCanceledException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A condition specified in the operation could not be evaluated.
_ConditionalCheckFailedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified global table already exists.
_GlobalTableAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified replica is no longer part of the global table.
_ReplicaNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A target table with the specified name already exists.
_TableAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Throughput exceeds the current throughput quota for your account.
--   Please contact AWS Support at <a>AWS Support</a> to request a quota
--   increase.
_RequestLimitExceeded :: AsError a => Getting (First ServiceError) a ServiceError

-- | An item collection is too large. This exception is only returned for
--   tables that have one or more local secondary indexes.
_ItemCollectionSizeLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An error occurred on the server side.
_InternalServerError :: AsError a => Getting (First ServiceError) a ServiceError

-- | A source table with the name <tt>TableName</tt> does not currently
--   exist within the subscriber's account.
_TableNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation tried to access a nonexistent index.
_IndexNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Operation was rejected because there is an ongoing transaction for the
--   item.
_TransactionConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is another ongoing conflicting backup control plane operation on
--   the table. The backup is either being created, deleted or restored to
--   a table.
_BackupInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There was an attempt to insert an item with the same primary key as an
--   item that already exists in the DynamoDB table.
_DuplicateItemException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified export was not found.
_ExportNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Point in time recovery has not yet been enabled for this source table.
_PointInTimeRecoveryUnavailableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | DynamoDB rejected the request because you retried a request with a
--   different payload but with an idempotent token that was already used.
_IdempotentParameterMismatchException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An invalid restore time was specified. RestoreDateTime must be between
--   EarliestRestorableDateTime and LatestRestorableDateTime.
_InvalidRestoreTimeException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation tried to access a nonexistent table or index. The
--   resource might not be specified correctly, or its status might not be
--   <tt>ACTIVE</tt>.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified replica is already part of the global table.
_ReplicaAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is no limit to the number of daily on-demand backups that can be
--   taken.
--   
--   Up to 50 simultaneous table operations are allowed per account. These
--   operations include <tt>CreateTable</tt>, <tt>UpdateTable</tt>,
--   <tt>DeleteTable</tt>,<tt>UpdateTimeToLive</tt>,
--   <tt>RestoreTableFromBackup</tt>, and
--   <tt>RestoreTableToPointInTime</tt>.
--   
--   The only exception is when you are creating a table with one or more
--   secondary indexes. You can have up to 25 such requests running at a
--   time; however, if the table or index specifications are complex,
--   DynamoDB might temporarily reduce the number of concurrent operations.
--   
--   There is a soft account quota of 256 tables.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation conflicts with the resource's availability. For example,
--   you attempted to recreate an existing table, or tried to delete a
--   table currently in the <tt>CREATING</tt> state.
_ResourceInUseException :: AsError a => Getting (First ServiceError) a ServiceError
newtype AttributeAction
AttributeAction' :: Text -> AttributeAction
[fromAttributeAction] :: AttributeAction -> Text
pattern AttributeAction_ADD :: AttributeAction
pattern AttributeAction_DELETE :: AttributeAction
pattern AttributeAction_PUT :: AttributeAction
newtype BackupStatus
BackupStatus' :: Text -> BackupStatus
[fromBackupStatus] :: BackupStatus -> Text
pattern BackupStatus_AVAILABLE :: BackupStatus
pattern BackupStatus_CREATING :: BackupStatus
pattern BackupStatus_DELETED :: BackupStatus
newtype BackupType
BackupType' :: Text -> BackupType
[fromBackupType] :: BackupType -> Text
pattern BackupType_AWS_BACKUP :: BackupType
pattern BackupType_SYSTEM :: BackupType
pattern BackupType_USER :: BackupType
newtype BackupTypeFilter
BackupTypeFilter' :: Text -> BackupTypeFilter
[fromBackupTypeFilter] :: BackupTypeFilter -> Text
pattern BackupTypeFilter_ALL :: BackupTypeFilter
pattern BackupTypeFilter_AWS_BACKUP :: BackupTypeFilter
pattern BackupTypeFilter_SYSTEM :: BackupTypeFilter
pattern BackupTypeFilter_USER :: BackupTypeFilter
newtype BatchStatementErrorCodeEnum
BatchStatementErrorCodeEnum' :: Text -> BatchStatementErrorCodeEnum
[fromBatchStatementErrorCodeEnum] :: BatchStatementErrorCodeEnum -> Text
pattern BatchStatementErrorCodeEnum_AccessDenied :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ConditionalCheckFailed :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_DuplicateItem :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_InternalServerError :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ItemCollectionSizeLimitExceeded :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ProvisionedThroughputExceeded :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_RequestLimitExceeded :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ResourceNotFound :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ThrottlingError :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_TransactionConflict :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ValidationError :: BatchStatementErrorCodeEnum
newtype BillingMode
BillingMode' :: Text -> BillingMode
[fromBillingMode] :: BillingMode -> Text
pattern BillingMode_PAY_PER_REQUEST :: BillingMode
pattern BillingMode_PROVISIONED :: BillingMode
newtype ComparisonOperator
ComparisonOperator' :: Text -> ComparisonOperator
[fromComparisonOperator] :: ComparisonOperator -> Text
pattern ComparisonOperator_BEGINS_WITH :: ComparisonOperator
pattern ComparisonOperator_BETWEEN :: ComparisonOperator
pattern ComparisonOperator_CONTAINS :: ComparisonOperator
pattern ComparisonOperator_EQ :: ComparisonOperator
pattern ComparisonOperator_GE :: ComparisonOperator
pattern ComparisonOperator_GT :: ComparisonOperator
pattern ComparisonOperator_IN :: ComparisonOperator
pattern ComparisonOperator_LE :: ComparisonOperator
pattern ComparisonOperator_LT :: ComparisonOperator
pattern ComparisonOperator_NE :: ComparisonOperator
pattern ComparisonOperator_NOT_CONTAINS :: ComparisonOperator
pattern ComparisonOperator_NOT_NULL :: ComparisonOperator
pattern ComparisonOperator_NULL :: ComparisonOperator
newtype ConditionalOperator
ConditionalOperator' :: Text -> ConditionalOperator
[fromConditionalOperator] :: ConditionalOperator -> Text
pattern ConditionalOperator_AND :: ConditionalOperator
pattern ConditionalOperator_OR :: ConditionalOperator
newtype ContinuousBackupsStatus
ContinuousBackupsStatus' :: Text -> ContinuousBackupsStatus
[fromContinuousBackupsStatus] :: ContinuousBackupsStatus -> Text
pattern ContinuousBackupsStatus_DISABLED :: ContinuousBackupsStatus
pattern ContinuousBackupsStatus_ENABLED :: ContinuousBackupsStatus
newtype ContributorInsightsAction
ContributorInsightsAction' :: Text -> ContributorInsightsAction
[fromContributorInsightsAction] :: ContributorInsightsAction -> Text
pattern ContributorInsightsAction_DISABLE :: ContributorInsightsAction
pattern ContributorInsightsAction_ENABLE :: ContributorInsightsAction
newtype ContributorInsightsStatus
ContributorInsightsStatus' :: Text -> ContributorInsightsStatus
[fromContributorInsightsStatus] :: ContributorInsightsStatus -> Text
pattern ContributorInsightsStatus_DISABLED :: ContributorInsightsStatus
pattern ContributorInsightsStatus_DISABLING :: ContributorInsightsStatus
pattern ContributorInsightsStatus_ENABLED :: ContributorInsightsStatus
pattern ContributorInsightsStatus_ENABLING :: ContributorInsightsStatus
pattern ContributorInsightsStatus_FAILED :: ContributorInsightsStatus
newtype DestinationStatus
DestinationStatus' :: Text -> DestinationStatus
[fromDestinationStatus] :: DestinationStatus -> Text
pattern DestinationStatus_ACTIVE :: DestinationStatus
pattern DestinationStatus_DISABLED :: DestinationStatus
pattern DestinationStatus_DISABLING :: DestinationStatus
pattern DestinationStatus_ENABLE_FAILED :: DestinationStatus
pattern DestinationStatus_ENABLING :: DestinationStatus
newtype ExportFormat
ExportFormat' :: Text -> ExportFormat
[fromExportFormat] :: ExportFormat -> Text
pattern ExportFormat_DYNAMODB_JSON :: ExportFormat
pattern ExportFormat_ION :: ExportFormat
newtype ExportStatus
ExportStatus' :: Text -> ExportStatus
[fromExportStatus] :: ExportStatus -> Text
pattern ExportStatus_COMPLETED :: ExportStatus
pattern ExportStatus_FAILED :: ExportStatus
pattern ExportStatus_IN_PROGRESS :: ExportStatus
newtype GlobalTableStatus
GlobalTableStatus' :: Text -> GlobalTableStatus
[fromGlobalTableStatus] :: GlobalTableStatus -> Text
pattern GlobalTableStatus_ACTIVE :: GlobalTableStatus
pattern GlobalTableStatus_CREATING :: GlobalTableStatus
pattern GlobalTableStatus_DELETING :: GlobalTableStatus
pattern GlobalTableStatus_UPDATING :: GlobalTableStatus
newtype IndexStatus
IndexStatus' :: Text -> IndexStatus
[fromIndexStatus] :: IndexStatus -> Text
pattern IndexStatus_ACTIVE :: IndexStatus
pattern IndexStatus_CREATING :: IndexStatus
pattern IndexStatus_DELETING :: IndexStatus
pattern IndexStatus_UPDATING :: IndexStatus
newtype KeyType
KeyType' :: Text -> KeyType
[fromKeyType] :: KeyType -> Text
pattern KeyType_HASH :: KeyType
pattern KeyType_RANGE :: KeyType
newtype PointInTimeRecoveryStatus
PointInTimeRecoveryStatus' :: Text -> PointInTimeRecoveryStatus
[fromPointInTimeRecoveryStatus] :: PointInTimeRecoveryStatus -> Text
pattern PointInTimeRecoveryStatus_DISABLED :: PointInTimeRecoveryStatus
pattern PointInTimeRecoveryStatus_ENABLED :: PointInTimeRecoveryStatus
newtype ProjectionType
ProjectionType' :: Text -> ProjectionType
[fromProjectionType] :: ProjectionType -> Text
pattern ProjectionType_ALL :: ProjectionType
pattern ProjectionType_INCLUDE :: ProjectionType
pattern ProjectionType_KEYS_ONLY :: ProjectionType
newtype ReplicaStatus
ReplicaStatus' :: Text -> ReplicaStatus
[fromReplicaStatus] :: ReplicaStatus -> Text
pattern ReplicaStatus_ACTIVE :: ReplicaStatus
pattern ReplicaStatus_CREATING :: ReplicaStatus
pattern ReplicaStatus_CREATION_FAILED :: ReplicaStatus
pattern ReplicaStatus_DELETING :: ReplicaStatus
pattern ReplicaStatus_INACCESSIBLE_ENCRYPTION_CREDENTIALS :: ReplicaStatus
pattern ReplicaStatus_REGION_DISABLED :: ReplicaStatus
pattern ReplicaStatus_UPDATING :: ReplicaStatus

-- | Determines the level of detail about provisioned throughput
--   consumption that is returned in the response:
--   
--   <ul>
--   <li><tt>INDEXES</tt> - The response includes the aggregate
--   <tt>ConsumedCapacity</tt> for the operation, together with
--   <tt>ConsumedCapacity</tt> for each table and secondary index that was
--   accessed.Note that some operations, such as <tt>GetItem</tt> and
--   <tt>BatchGetItem</tt>, do not access any indexes at all. In these
--   cases, specifying <tt>INDEXES</tt> will only return
--   <tt>ConsumedCapacity</tt> information for table(s).</li>
--   <li><tt>TOTAL</tt> - The response includes only the aggregate
--   <tt>ConsumedCapacity</tt> for the operation.</li>
--   <li><tt>NONE</tt> - No <tt>ConsumedCapacity</tt> details are included
--   in the response.</li>
--   </ul>
newtype ReturnConsumedCapacity
ReturnConsumedCapacity' :: Text -> ReturnConsumedCapacity
[fromReturnConsumedCapacity] :: ReturnConsumedCapacity -> Text
pattern ReturnConsumedCapacity_INDEXES :: ReturnConsumedCapacity
pattern ReturnConsumedCapacity_NONE :: ReturnConsumedCapacity
pattern ReturnConsumedCapacity_TOTAL :: ReturnConsumedCapacity
newtype ReturnItemCollectionMetrics
ReturnItemCollectionMetrics' :: Text -> ReturnItemCollectionMetrics
[fromReturnItemCollectionMetrics] :: ReturnItemCollectionMetrics -> Text
pattern ReturnItemCollectionMetrics_NONE :: ReturnItemCollectionMetrics
pattern ReturnItemCollectionMetrics_SIZE :: ReturnItemCollectionMetrics
newtype ReturnValue
ReturnValue' :: Text -> ReturnValue
[fromReturnValue] :: ReturnValue -> Text
pattern ReturnValue_ALL_NEW :: ReturnValue
pattern ReturnValue_ALL_OLD :: ReturnValue
pattern ReturnValue_NONE :: ReturnValue
pattern ReturnValue_UPDATED_NEW :: ReturnValue
pattern ReturnValue_UPDATED_OLD :: ReturnValue
newtype ReturnValuesOnConditionCheckFailure
ReturnValuesOnConditionCheckFailure' :: Text -> ReturnValuesOnConditionCheckFailure
[fromReturnValuesOnConditionCheckFailure] :: ReturnValuesOnConditionCheckFailure -> Text
pattern ReturnValuesOnConditionCheckFailure_ALL_OLD :: ReturnValuesOnConditionCheckFailure
pattern ReturnValuesOnConditionCheckFailure_NONE :: ReturnValuesOnConditionCheckFailure
newtype S3SseAlgorithm
S3SseAlgorithm' :: Text -> S3SseAlgorithm
[fromS3SseAlgorithm] :: S3SseAlgorithm -> Text
pattern S3SseAlgorithm_AES256 :: S3SseAlgorithm
pattern S3SseAlgorithm_KMS :: S3SseAlgorithm
newtype SSEStatus
SSEStatus' :: Text -> SSEStatus
[fromSSEStatus] :: SSEStatus -> Text
pattern SSEStatus_DISABLED :: SSEStatus
pattern SSEStatus_DISABLING :: SSEStatus
pattern SSEStatus_ENABLED :: SSEStatus
pattern SSEStatus_ENABLING :: SSEStatus
pattern SSEStatus_UPDATING :: SSEStatus
newtype SSEType
SSEType' :: Text -> SSEType
[fromSSEType] :: SSEType -> Text
pattern SSEType_AES256 :: SSEType
pattern SSEType_KMS :: SSEType
newtype ScalarAttributeType
ScalarAttributeType' :: Text -> ScalarAttributeType
[fromScalarAttributeType] :: ScalarAttributeType -> Text
pattern ScalarAttributeType_B :: ScalarAttributeType
pattern ScalarAttributeType_N :: ScalarAttributeType
pattern ScalarAttributeType_S :: ScalarAttributeType
newtype Select
Select' :: Text -> Select
[fromSelect] :: Select -> Text
pattern Select_ALL_ATTRIBUTES :: Select
pattern Select_ALL_PROJECTED_ATTRIBUTES :: Select
pattern Select_COUNT :: Select
pattern Select_SPECIFIC_ATTRIBUTES :: Select
newtype StreamViewType
StreamViewType' :: Text -> StreamViewType
[fromStreamViewType] :: StreamViewType -> Text
pattern StreamViewType_KEYS_ONLY :: StreamViewType
pattern StreamViewType_NEW_AND_OLD_IMAGES :: StreamViewType
pattern StreamViewType_NEW_IMAGE :: StreamViewType
pattern StreamViewType_OLD_IMAGE :: StreamViewType
newtype TableStatus
TableStatus' :: Text -> TableStatus
[fromTableStatus] :: TableStatus -> Text
pattern TableStatus_ACTIVE :: TableStatus
pattern TableStatus_ARCHIVED :: TableStatus
pattern TableStatus_ARCHIVING :: TableStatus
pattern TableStatus_CREATING :: TableStatus
pattern TableStatus_DELETING :: TableStatus
pattern TableStatus_INACCESSIBLE_ENCRYPTION_CREDENTIALS :: TableStatus
pattern TableStatus_UPDATING :: TableStatus
newtype TimeToLiveStatus
TimeToLiveStatus' :: Text -> TimeToLiveStatus
[fromTimeToLiveStatus] :: TimeToLiveStatus -> Text
pattern TimeToLiveStatus_DISABLED :: TimeToLiveStatus
pattern TimeToLiveStatus_DISABLING :: TimeToLiveStatus
pattern TimeToLiveStatus_ENABLED :: TimeToLiveStatus
pattern TimeToLiveStatus_ENABLING :: TimeToLiveStatus

-- | Contains details of a table archival operation.
--   
--   <i>See:</i> <a>newArchivalSummary</a> smart constructor.
data ArchivalSummary
ArchivalSummary' :: Maybe Text -> Maybe POSIX -> Maybe Text -> ArchivalSummary

-- | The reason DynamoDB archived the table. Currently, the only possible
--   value is:
--   
--   <ul>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The table was
--   archived due to the table's AWS KMS key being inaccessible for more
--   than seven days. An On-Demand backup was created at the archival
--   time.</li>
--   </ul>
[$sel:archivalReason:ArchivalSummary'] :: ArchivalSummary -> Maybe Text

-- | The date and time when table archival was initiated by DynamoDB, in
--   UNIX epoch time format.
[$sel:archivalDateTime:ArchivalSummary'] :: ArchivalSummary -> Maybe POSIX

-- | The Amazon Resource Name (ARN) of the backup the table was archived
--   to, when applicable in the archival reason. If you wish to restore
--   this backup to the same table name, you will need to delete the
--   original table.
[$sel:archivalBackupArn:ArchivalSummary'] :: ArchivalSummary -> Maybe Text

-- | Create a value of <a>ArchivalSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:archivalReason:ArchivalSummary'</a>,
--   <a>archivalSummary_archivalReason</a> - The reason DynamoDB archived
--   the table. Currently, the only possible value is:
--   
--   <ul>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The table was
--   archived due to the table's AWS KMS key being inaccessible for more
--   than seven days. An On-Demand backup was created at the archival
--   time.</li>
--   </ul>
--   
--   <a>$sel:archivalDateTime:ArchivalSummary'</a>,
--   <a>archivalSummary_archivalDateTime</a> - The date and time when table
--   archival was initiated by DynamoDB, in UNIX epoch time format.
--   
--   <a>$sel:archivalBackupArn:ArchivalSummary'</a>,
--   <a>archivalSummary_archivalBackupArn</a> - The Amazon Resource Name
--   (ARN) of the backup the table was archived to, when applicable in the
--   archival reason. If you wish to restore this backup to the same table
--   name, you will need to delete the original table.
newArchivalSummary :: ArchivalSummary

-- | The reason DynamoDB archived the table. Currently, the only possible
--   value is:
--   
--   <ul>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The table was
--   archived due to the table's AWS KMS key being inaccessible for more
--   than seven days. An On-Demand backup was created at the archival
--   time.</li>
--   </ul>
archivalSummary_archivalReason :: Lens' ArchivalSummary (Maybe Text)

-- | The date and time when table archival was initiated by DynamoDB, in
--   UNIX epoch time format.
archivalSummary_archivalDateTime :: Lens' ArchivalSummary (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the backup the table was archived
--   to, when applicable in the archival reason. If you wish to restore
--   this backup to the same table name, you will need to delete the
--   original table.
archivalSummary_archivalBackupArn :: Lens' ArchivalSummary (Maybe Text)

-- | Represents an attribute for describing the key schema for the table
--   and indexes.
--   
--   <i>See:</i> <a>newAttributeDefinition</a> smart constructor.
data AttributeDefinition
AttributeDefinition' :: Text -> ScalarAttributeType -> AttributeDefinition

-- | A name for the attribute.
[$sel:attributeName:AttributeDefinition'] :: AttributeDefinition -> Text

-- | The data type for the attribute, where:
--   
--   <ul>
--   <li><tt>S</tt> - the attribute is of type String</li>
--   <li><tt>N</tt> - the attribute is of type Number</li>
--   <li><tt>B</tt> - the attribute is of type Binary</li>
--   </ul>
[$sel:attributeType:AttributeDefinition'] :: AttributeDefinition -> ScalarAttributeType

-- | Create a value of <a>AttributeDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeName:AttributeDefinition'</a>,
--   <a>attributeDefinition_attributeName</a> - A name for the attribute.
--   
--   <a>$sel:attributeType:AttributeDefinition'</a>,
--   <a>attributeDefinition_attributeType</a> - The data type for the
--   attribute, where:
--   
--   <ul>
--   <li><tt>S</tt> - the attribute is of type String</li>
--   <li><tt>N</tt> - the attribute is of type Number</li>
--   <li><tt>B</tt> - the attribute is of type Binary</li>
--   </ul>
newAttributeDefinition :: Text -> ScalarAttributeType -> AttributeDefinition

-- | A name for the attribute.
attributeDefinition_attributeName :: Lens' AttributeDefinition Text

-- | The data type for the attribute, where:
--   
--   <ul>
--   <li><tt>S</tt> - the attribute is of type String</li>
--   <li><tt>N</tt> - the attribute is of type Number</li>
--   <li><tt>B</tt> - the attribute is of type Binary</li>
--   </ul>
attributeDefinition_attributeType :: Lens' AttributeDefinition ScalarAttributeType

-- | Represents the data for an attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newAttributeValue</a> smart constructor.
data AttributeValue
AttributeValue' :: Maybe [AttributeValue] -> Maybe [Text] -> Maybe (HashMap Text AttributeValue) -> Maybe Bool -> Maybe Text -> Maybe [Base64] -> Maybe Base64 -> Maybe [Text] -> Maybe Text -> Maybe Bool -> AttributeValue

-- | An attribute of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
[$sel:l:AttributeValue'] :: AttributeValue -> Maybe [AttributeValue]

-- | An attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
[$sel:ns:AttributeValue'] :: AttributeValue -> Maybe [Text]

-- | An attribute of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
[$sel:m:AttributeValue'] :: AttributeValue -> Maybe (HashMap Text AttributeValue)

-- | An attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
[$sel:null:AttributeValue'] :: AttributeValue -> Maybe Bool

-- | An attribute of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
[$sel:n:AttributeValue'] :: AttributeValue -> Maybe Text

-- | An attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
[$sel:bs:AttributeValue'] :: AttributeValue -> Maybe [Base64]

-- | An attribute of type Binary. For example:
--   
--   <pre>
--   "B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"
--   </pre>
[$sel:b:AttributeValue'] :: AttributeValue -> Maybe Base64

-- | An attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
[$sel:ss:AttributeValue'] :: AttributeValue -> Maybe [Text]

-- | An attribute of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
[$sel:s:AttributeValue'] :: AttributeValue -> Maybe Text

-- | An attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
[$sel:bool:AttributeValue'] :: AttributeValue -> Maybe Bool

-- | Create a value of <a>AttributeValue</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:l:AttributeValue'</a>, <a>attributeValue_l</a> - An attribute
--   of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
--   
--   <a>$sel:ns:AttributeValue'</a>, <a>attributeValue_ns</a> - An
--   attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
--   
--   <a>$sel:m:AttributeValue'</a>, <a>attributeValue_m</a> - An attribute
--   of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
--   
--   <a>$sel:null:AttributeValue'</a>, <a>attributeValue_null</a> - An
--   attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
--   
--   <a>$sel:n:AttributeValue'</a>, <a>attributeValue_n</a> - An attribute
--   of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
--   
--   <a>$sel:bs:AttributeValue'</a>, <a>attributeValue_bs</a> - An
--   attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
--   
--   <a>$sel:b:AttributeValue'</a>, <a>attributeValue_b</a> - An attribute
--   of type Binary. For example:
--   
--   <tt>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</tt>-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:ss:AttributeValue'</a>, <a>attributeValue_ss</a> - An
--   attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
--   
--   <a>$sel:s:AttributeValue'</a>, <a>attributeValue_s</a> - An attribute
--   of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
--   
--   <a>$sel:bool:AttributeValue'</a>, <a>attributeValue_bool</a> - An
--   attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
newAttributeValue :: AttributeValue

-- | An attribute of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
attributeValue_l :: Lens' AttributeValue (Maybe [AttributeValue])

-- | An attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
attributeValue_ns :: Lens' AttributeValue (Maybe [Text])

-- | An attribute of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
attributeValue_m :: Lens' AttributeValue (Maybe (HashMap Text AttributeValue))

-- | An attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
attributeValue_null :: Lens' AttributeValue (Maybe Bool)

-- | An attribute of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
attributeValue_n :: Lens' AttributeValue (Maybe Text)

-- | An attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
attributeValue_bs :: Lens' AttributeValue (Maybe [ByteString])

-- | An attribute of type Binary. For example:
--   
--   <tt>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</tt>-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
attributeValue_b :: Lens' AttributeValue (Maybe ByteString)

-- | An attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
attributeValue_ss :: Lens' AttributeValue (Maybe [Text])

-- | An attribute of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
attributeValue_s :: Lens' AttributeValue (Maybe Text)

-- | An attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
attributeValue_bool :: Lens' AttributeValue (Maybe Bool)

-- | For the <tt>UpdateItem</tt> operation, represents the attributes to be
--   modified, the action to perform on each, and the new value for each.
--   
--   You cannot use <tt>UpdateItem</tt> to update any primary key
--   attributes. Instead, you will need to delete the item, and then use
--   <tt>PutItem</tt> to create a new item with new attributes.
--   
--   Attribute values cannot be null; string and binary type attributes
--   must have lengths greater than zero; and set type attributes must not
--   be empty. Requests with empty values will be rejected with a
--   <tt>ValidationException</tt> exception.
--   
--   <i>See:</i> <a>newAttributeValueUpdate</a> smart constructor.
data AttributeValueUpdate
AttributeValueUpdate' :: Maybe AttributeValue -> Maybe AttributeAction -> AttributeValueUpdate

-- | Represents the data for an attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:value:AttributeValueUpdate'] :: AttributeValueUpdate -> Maybe AttributeValue

-- | Specifies how to perform the update. Valid values are <tt>PUT</tt>
--   (default), <tt>DELETE</tt>, and <tt>ADD</tt>. The behavior depends on
--   whether the specified primary key already exists in the table.
--   
--   <b>If an item with the specified <i>Key</i> is found in the table:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - Adds the specified attribute to the item. If the
--   attribute already exists, it is replaced by the new value.</li>
--   <li><tt>DELETE</tt> - If no value is specified, the attribute and its
--   value are removed from the item. The data type of the specified value
--   must match the existing value's data type.If a <i>set</i> of values is
--   specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specified <tt>[a,c]</tt>, then the final
--   attribute value would be <tt>[b]</tt>. Specifying an empty set is an
--   error.</li>
--   <li><tt>ADD</tt> - If the attribute does not already exist, then the
--   attribute and its values are added to the item. If the attribute does
--   exist, then the behavior of <tt>ADD</tt> depends on the data type of
--   the attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then the <tt>Value</tt> is
--   mathematically added to the existing attribute. If <tt>Value</tt> is a
--   negative number, then it is subtracted from the existing attribute.If
--   you use <tt>ADD</tt> to increment or decrement a number value for an
--   item that doesn't exist before the update, DynamoDB uses 0 as the
--   initial value.In addition, if you use <tt>ADD</tt> to update an
--   existing item, and intend to increment or decrement an attribute value
--   which does not yet exist, DynamoDB uses <tt>0</tt> as the initial
--   value. For example, suppose that the item you want to update does not
--   yet have an attribute named <i>itemcount</i>, but you decide to
--   <tt>ADD</tt> the number <tt>3</tt> to this attribute anyway, even
--   though it currently does not exist. DynamoDB will create the
--   <i>itemcount</i> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <i>itemcount</i> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set, and if the
--   <tt>Value</tt> is also a set, then the <tt>Value</tt> is added to the
--   existing set. (This is a <i>set</i> operation, not mathematical
--   addition.) For example, if the attribute value was the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value would be <tt>[1,2,3]</tt>. An error
--   occurs if an Add action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings. The same holds true for number sets and binary
--   sets.</li></ul>This action is only valid for an existing attribute
--   whose data type is number or is a set. Do not use <tt>ADD</tt> for any
--   other data types.</li>
--   </ul>
--   
--   <b>If no item with the specified <i>Key</i> is found:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - DynamoDB creates a new item with the specified
--   primary key, and then adds the attribute.</li>
--   <li><tt>DELETE</tt> - Nothing happens; there is no attribute to
--   delete.</li>
--   <li><tt>ADD</tt> - DynamoDB creates an item with the supplied primary
--   key and number (or set of numbers) for the attribute value. The only
--   data types allowed are number and number set; no other data types can
--   be specified.</li>
--   </ul>
[$sel:action:AttributeValueUpdate'] :: AttributeValueUpdate -> Maybe AttributeAction

-- | Create a value of <a>AttributeValueUpdate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:AttributeValueUpdate'</a>,
--   <a>attributeValueUpdate_value</a> - Represents the data for an
--   attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:action:AttributeValueUpdate'</a>,
--   <a>attributeValueUpdate_action</a> - Specifies how to perform the
--   update. Valid values are <tt>PUT</tt> (default), <tt>DELETE</tt>, and
--   <tt>ADD</tt>. The behavior depends on whether the specified primary
--   key already exists in the table.
--   
--   <b>If an item with the specified <i>Key</i> is found in the table:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - Adds the specified attribute to the item. If the
--   attribute already exists, it is replaced by the new value.</li>
--   <li><tt>DELETE</tt> - If no value is specified, the attribute and its
--   value are removed from the item. The data type of the specified value
--   must match the existing value's data type.If a <i>set</i> of values is
--   specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specified <tt>[a,c]</tt>, then the final
--   attribute value would be <tt>[b]</tt>. Specifying an empty set is an
--   error.</li>
--   <li><tt>ADD</tt> - If the attribute does not already exist, then the
--   attribute and its values are added to the item. If the attribute does
--   exist, then the behavior of <tt>ADD</tt> depends on the data type of
--   the attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then the <tt>Value</tt> is
--   mathematically added to the existing attribute. If <tt>Value</tt> is a
--   negative number, then it is subtracted from the existing attribute.If
--   you use <tt>ADD</tt> to increment or decrement a number value for an
--   item that doesn't exist before the update, DynamoDB uses 0 as the
--   initial value.In addition, if you use <tt>ADD</tt> to update an
--   existing item, and intend to increment or decrement an attribute value
--   which does not yet exist, DynamoDB uses <tt>0</tt> as the initial
--   value. For example, suppose that the item you want to update does not
--   yet have an attribute named <i>itemcount</i>, but you decide to
--   <tt>ADD</tt> the number <tt>3</tt> to this attribute anyway, even
--   though it currently does not exist. DynamoDB will create the
--   <i>itemcount</i> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <i>itemcount</i> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set, and if the
--   <tt>Value</tt> is also a set, then the <tt>Value</tt> is added to the
--   existing set. (This is a <i>set</i> operation, not mathematical
--   addition.) For example, if the attribute value was the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value would be <tt>[1,2,3]</tt>. An error
--   occurs if an Add action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings. The same holds true for number sets and binary
--   sets.</li></ul>This action is only valid for an existing attribute
--   whose data type is number or is a set. Do not use <tt>ADD</tt> for any
--   other data types.</li>
--   </ul>
--   
--   <b>If no item with the specified <i>Key</i> is found:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - DynamoDB creates a new item with the specified
--   primary key, and then adds the attribute.</li>
--   <li><tt>DELETE</tt> - Nothing happens; there is no attribute to
--   delete.</li>
--   <li><tt>ADD</tt> - DynamoDB creates an item with the supplied primary
--   key and number (or set of numbers) for the attribute value. The only
--   data types allowed are number and number set; no other data types can
--   be specified.</li>
--   </ul>
newAttributeValueUpdate :: AttributeValueUpdate

-- | Represents the data for an attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
attributeValueUpdate_value :: Lens' AttributeValueUpdate (Maybe AttributeValue)

-- | Specifies how to perform the update. Valid values are <tt>PUT</tt>
--   (default), <tt>DELETE</tt>, and <tt>ADD</tt>. The behavior depends on
--   whether the specified primary key already exists in the table.
--   
--   <b>If an item with the specified <i>Key</i> is found in the table:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - Adds the specified attribute to the item. If the
--   attribute already exists, it is replaced by the new value.</li>
--   <li><tt>DELETE</tt> - If no value is specified, the attribute and its
--   value are removed from the item. The data type of the specified value
--   must match the existing value's data type.If a <i>set</i> of values is
--   specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specified <tt>[a,c]</tt>, then the final
--   attribute value would be <tt>[b]</tt>. Specifying an empty set is an
--   error.</li>
--   <li><tt>ADD</tt> - If the attribute does not already exist, then the
--   attribute and its values are added to the item. If the attribute does
--   exist, then the behavior of <tt>ADD</tt> depends on the data type of
--   the attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then the <tt>Value</tt> is
--   mathematically added to the existing attribute. If <tt>Value</tt> is a
--   negative number, then it is subtracted from the existing attribute.If
--   you use <tt>ADD</tt> to increment or decrement a number value for an
--   item that doesn't exist before the update, DynamoDB uses 0 as the
--   initial value.In addition, if you use <tt>ADD</tt> to update an
--   existing item, and intend to increment or decrement an attribute value
--   which does not yet exist, DynamoDB uses <tt>0</tt> as the initial
--   value. For example, suppose that the item you want to update does not
--   yet have an attribute named <i>itemcount</i>, but you decide to
--   <tt>ADD</tt> the number <tt>3</tt> to this attribute anyway, even
--   though it currently does not exist. DynamoDB will create the
--   <i>itemcount</i> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <i>itemcount</i> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set, and if the
--   <tt>Value</tt> is also a set, then the <tt>Value</tt> is added to the
--   existing set. (This is a <i>set</i> operation, not mathematical
--   addition.) For example, if the attribute value was the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value would be <tt>[1,2,3]</tt>. An error
--   occurs if an Add action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings. The same holds true for number sets and binary
--   sets.</li></ul>This action is only valid for an existing attribute
--   whose data type is number or is a set. Do not use <tt>ADD</tt> for any
--   other data types.</li>
--   </ul>
--   
--   <b>If no item with the specified <i>Key</i> is found:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - DynamoDB creates a new item with the specified
--   primary key, and then adds the attribute.</li>
--   <li><tt>DELETE</tt> - Nothing happens; there is no attribute to
--   delete.</li>
--   <li><tt>ADD</tt> - DynamoDB creates an item with the supplied primary
--   key and number (or set of numbers) for the attribute value. The only
--   data types allowed are number and number set; no other data types can
--   be specified.</li>
--   </ul>
attributeValueUpdate_action :: Lens' AttributeValueUpdate (Maybe AttributeAction)

-- | Represents the properties of the scaling policy.
--   
--   <i>See:</i> <a>newAutoScalingPolicyDescription</a> smart constructor.
data AutoScalingPolicyDescription
AutoScalingPolicyDescription' :: Maybe Text -> Maybe AutoScalingTargetTrackingScalingPolicyConfigurationDescription -> AutoScalingPolicyDescription

-- | The name of the scaling policy.
[$sel:policyName:AutoScalingPolicyDescription'] :: AutoScalingPolicyDescription -> Maybe Text

-- | Represents a target tracking scaling policy configuration.
[$sel:targetTrackingScalingPolicyConfiguration:AutoScalingPolicyDescription'] :: AutoScalingPolicyDescription -> Maybe AutoScalingTargetTrackingScalingPolicyConfigurationDescription

-- | Create a value of <a>AutoScalingPolicyDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:policyName:AutoScalingPolicyDescription'</a>,
--   <a>autoScalingPolicyDescription_policyName</a> - The name of the
--   scaling policy.
--   
--   
--   <a>$sel:targetTrackingScalingPolicyConfiguration:AutoScalingPolicyDescription'</a>,
--   <a>autoScalingPolicyDescription_targetTrackingScalingPolicyConfiguration</a>
--   - Represents a target tracking scaling policy configuration.
newAutoScalingPolicyDescription :: AutoScalingPolicyDescription

-- | The name of the scaling policy.
autoScalingPolicyDescription_policyName :: Lens' AutoScalingPolicyDescription (Maybe Text)

-- | Represents a target tracking scaling policy configuration.
autoScalingPolicyDescription_targetTrackingScalingPolicyConfiguration :: Lens' AutoScalingPolicyDescription (Maybe AutoScalingTargetTrackingScalingPolicyConfigurationDescription)

-- | Represents the auto scaling policy to be modified.
--   
--   <i>See:</i> <a>newAutoScalingPolicyUpdate</a> smart constructor.
data AutoScalingPolicyUpdate
AutoScalingPolicyUpdate' :: Maybe Text -> AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> AutoScalingPolicyUpdate

-- | The name of the scaling policy.
[$sel:policyName:AutoScalingPolicyUpdate'] :: AutoScalingPolicyUpdate -> Maybe Text

-- | Represents a target tracking scaling policy configuration.
[$sel:targetTrackingScalingPolicyConfiguration:AutoScalingPolicyUpdate'] :: AutoScalingPolicyUpdate -> AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

-- | Create a value of <a>AutoScalingPolicyUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:policyName:AutoScalingPolicyUpdate'</a>,
--   <a>autoScalingPolicyUpdate_policyName</a> - The name of the scaling
--   policy.
--   
--   
--   <a>$sel:targetTrackingScalingPolicyConfiguration:AutoScalingPolicyUpdate'</a>,
--   <a>autoScalingPolicyUpdate_targetTrackingScalingPolicyConfiguration</a>
--   - Represents a target tracking scaling policy configuration.
newAutoScalingPolicyUpdate :: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> AutoScalingPolicyUpdate

-- | The name of the scaling policy.
autoScalingPolicyUpdate_policyName :: Lens' AutoScalingPolicyUpdate (Maybe Text)

-- | Represents a target tracking scaling policy configuration.
autoScalingPolicyUpdate_targetTrackingScalingPolicyConfiguration :: Lens' AutoScalingPolicyUpdate AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

-- | Represents the auto scaling settings for a global table or global
--   secondary index.
--   
--   <i>See:</i> <a>newAutoScalingSettingsDescription</a> smart
--   constructor.
data AutoScalingSettingsDescription
AutoScalingSettingsDescription' :: Maybe Bool -> Maybe Natural -> Maybe Natural -> Maybe [AutoScalingPolicyDescription] -> Maybe Text -> AutoScalingSettingsDescription

-- | Disabled auto scaling for this global table or global secondary index.
[$sel:autoScalingDisabled:AutoScalingSettingsDescription'] :: AutoScalingSettingsDescription -> Maybe Bool

-- | The minimum capacity units that a global table or global secondary
--   index should be scaled down to.
[$sel:minimumUnits:AutoScalingSettingsDescription'] :: AutoScalingSettingsDescription -> Maybe Natural

-- | The maximum capacity units that a global table or global secondary
--   index should be scaled up to.
[$sel:maximumUnits:AutoScalingSettingsDescription'] :: AutoScalingSettingsDescription -> Maybe Natural

-- | Information about the scaling policies.
[$sel:scalingPolicies:AutoScalingSettingsDescription'] :: AutoScalingSettingsDescription -> Maybe [AutoScalingPolicyDescription]

-- | Role ARN used for configuring the auto scaling policy.
[$sel:autoScalingRoleArn:AutoScalingSettingsDescription'] :: AutoScalingSettingsDescription -> Maybe Text

-- | Create a value of <a>AutoScalingSettingsDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:autoScalingDisabled:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_autoScalingDisabled</a> - Disabled
--   auto scaling for this global table or global secondary index.
--   
--   <a>$sel:minimumUnits:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_minimumUnits</a> - The minimum
--   capacity units that a global table or global secondary index should be
--   scaled down to.
--   
--   <a>$sel:maximumUnits:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_maximumUnits</a> - The maximum
--   capacity units that a global table or global secondary index should be
--   scaled up to.
--   
--   <a>$sel:scalingPolicies:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_scalingPolicies</a> - Information
--   about the scaling policies.
--   
--   <a>$sel:autoScalingRoleArn:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_autoScalingRoleArn</a> - Role ARN
--   used for configuring the auto scaling policy.
newAutoScalingSettingsDescription :: AutoScalingSettingsDescription

-- | Disabled auto scaling for this global table or global secondary index.
autoScalingSettingsDescription_autoScalingDisabled :: Lens' AutoScalingSettingsDescription (Maybe Bool)

-- | The minimum capacity units that a global table or global secondary
--   index should be scaled down to.
autoScalingSettingsDescription_minimumUnits :: Lens' AutoScalingSettingsDescription (Maybe Natural)

-- | The maximum capacity units that a global table or global secondary
--   index should be scaled up to.
autoScalingSettingsDescription_maximumUnits :: Lens' AutoScalingSettingsDescription (Maybe Natural)

-- | Information about the scaling policies.
autoScalingSettingsDescription_scalingPolicies :: Lens' AutoScalingSettingsDescription (Maybe [AutoScalingPolicyDescription])

-- | Role ARN used for configuring the auto scaling policy.
autoScalingSettingsDescription_autoScalingRoleArn :: Lens' AutoScalingSettingsDescription (Maybe Text)

-- | Represents the auto scaling settings to be modified for a global table
--   or global secondary index.
--   
--   <i>See:</i> <a>newAutoScalingSettingsUpdate</a> smart constructor.
data AutoScalingSettingsUpdate
AutoScalingSettingsUpdate' :: Maybe Bool -> Maybe Natural -> Maybe AutoScalingPolicyUpdate -> Maybe Natural -> Maybe Text -> AutoScalingSettingsUpdate

-- | Disabled auto scaling for this global table or global secondary index.
[$sel:autoScalingDisabled:AutoScalingSettingsUpdate'] :: AutoScalingSettingsUpdate -> Maybe Bool

-- | The minimum capacity units that a global table or global secondary
--   index should be scaled down to.
[$sel:minimumUnits:AutoScalingSettingsUpdate'] :: AutoScalingSettingsUpdate -> Maybe Natural

-- | The scaling policy to apply for scaling target global table or global
--   secondary index capacity units.
[$sel:scalingPolicyUpdate:AutoScalingSettingsUpdate'] :: AutoScalingSettingsUpdate -> Maybe AutoScalingPolicyUpdate

-- | The maximum capacity units that a global table or global secondary
--   index should be scaled up to.
[$sel:maximumUnits:AutoScalingSettingsUpdate'] :: AutoScalingSettingsUpdate -> Maybe Natural

-- | Role ARN used for configuring auto scaling policy.
[$sel:autoScalingRoleArn:AutoScalingSettingsUpdate'] :: AutoScalingSettingsUpdate -> Maybe Text

-- | Create a value of <a>AutoScalingSettingsUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:autoScalingDisabled:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_autoScalingDisabled</a> - Disabled auto
--   scaling for this global table or global secondary index.
--   
--   <a>$sel:minimumUnits:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_minimumUnits</a> - The minimum capacity
--   units that a global table or global secondary index should be scaled
--   down to.
--   
--   <a>$sel:scalingPolicyUpdate:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_scalingPolicyUpdate</a> - The scaling
--   policy to apply for scaling target global table or global secondary
--   index capacity units.
--   
--   <a>$sel:maximumUnits:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_maximumUnits</a> - The maximum capacity
--   units that a global table or global secondary index should be scaled
--   up to.
--   
--   <a>$sel:autoScalingRoleArn:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_autoScalingRoleArn</a> - Role ARN used
--   for configuring auto scaling policy.
newAutoScalingSettingsUpdate :: AutoScalingSettingsUpdate

-- | Disabled auto scaling for this global table or global secondary index.
autoScalingSettingsUpdate_autoScalingDisabled :: Lens' AutoScalingSettingsUpdate (Maybe Bool)

-- | The minimum capacity units that a global table or global secondary
--   index should be scaled down to.
autoScalingSettingsUpdate_minimumUnits :: Lens' AutoScalingSettingsUpdate (Maybe Natural)

-- | The scaling policy to apply for scaling target global table or global
--   secondary index capacity units.
autoScalingSettingsUpdate_scalingPolicyUpdate :: Lens' AutoScalingSettingsUpdate (Maybe AutoScalingPolicyUpdate)

-- | The maximum capacity units that a global table or global secondary
--   index should be scaled up to.
autoScalingSettingsUpdate_maximumUnits :: Lens' AutoScalingSettingsUpdate (Maybe Natural)

-- | Role ARN used for configuring auto scaling policy.
autoScalingSettingsUpdate_autoScalingRoleArn :: Lens' AutoScalingSettingsUpdate (Maybe Text)

-- | Represents the properties of a target tracking scaling policy.
--   
--   <i>See:</i>
--   <a>newAutoScalingTargetTrackingScalingPolicyConfigurationDescription</a>
--   smart constructor.
data AutoScalingTargetTrackingScalingPolicyConfigurationDescription
AutoScalingTargetTrackingScalingPolicyConfigurationDescription' :: Maybe Int -> Maybe Bool -> Maybe Int -> Double -> AutoScalingTargetTrackingScalingPolicyConfigurationDescription

-- | The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
[$sel:scaleInCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'] :: AutoScalingTargetTrackingScalingPolicyConfigurationDescription -> Maybe Int

-- | Indicates whether scale in by the target tracking policy is disabled.
--   If the value is true, scale in is disabled and the target tracking
--   policy won't remove capacity from the scalable resource. Otherwise,
--   scale in is enabled and the target tracking policy can remove capacity
--   from the scalable resource. The default value is false.
[$sel:disableScaleIn:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'] :: AutoScalingTargetTrackingScalingPolicyConfigurationDescription -> Maybe Bool

-- | The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
[$sel:scaleOutCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'] :: AutoScalingTargetTrackingScalingPolicyConfigurationDescription -> Maybe Int

-- | The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
[$sel:targetValue:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'] :: AutoScalingTargetTrackingScalingPolicyConfigurationDescription -> Double

-- | Create a value of
--   <a>AutoScalingTargetTrackingScalingPolicyConfigurationDescription</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:scaleInCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationDescription_scaleInCooldown</a>
--   - The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
--   
--   
--   <a>$sel:disableScaleIn:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationDescription_disableScaleIn</a>
--   - Indicates whether scale in by the target tracking policy is
--   disabled. If the value is true, scale in is disabled and the target
--   tracking policy won't remove capacity from the scalable resource.
--   Otherwise, scale in is enabled and the target tracking policy can
--   remove capacity from the scalable resource. The default value is
--   false.
--   
--   
--   <a>$sel:scaleOutCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationDescription_scaleOutCooldown</a>
--   - The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
--   
--   
--   <a>$sel:targetValue:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationDescription_targetValue</a>
--   - The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
newAutoScalingTargetTrackingScalingPolicyConfigurationDescription :: Double -> AutoScalingTargetTrackingScalingPolicyConfigurationDescription

-- | The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
autoScalingTargetTrackingScalingPolicyConfigurationDescription_scaleInCooldown :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationDescription (Maybe Int)

-- | Indicates whether scale in by the target tracking policy is disabled.
--   If the value is true, scale in is disabled and the target tracking
--   policy won't remove capacity from the scalable resource. Otherwise,
--   scale in is enabled and the target tracking policy can remove capacity
--   from the scalable resource. The default value is false.
autoScalingTargetTrackingScalingPolicyConfigurationDescription_disableScaleIn :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationDescription (Maybe Bool)

-- | The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
autoScalingTargetTrackingScalingPolicyConfigurationDescription_scaleOutCooldown :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationDescription (Maybe Int)

-- | The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
autoScalingTargetTrackingScalingPolicyConfigurationDescription_targetValue :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationDescription Double

-- | Represents the settings of a target tracking scaling policy that will
--   be modified.
--   
--   <i>See:</i>
--   <a>newAutoScalingTargetTrackingScalingPolicyConfigurationUpdate</a>
--   smart constructor.
data AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
AutoScalingTargetTrackingScalingPolicyConfigurationUpdate' :: Maybe Int -> Maybe Bool -> Maybe Int -> Double -> AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

-- | The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
[$sel:scaleInCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'] :: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> Maybe Int

-- | Indicates whether scale in by the target tracking policy is disabled.
--   If the value is true, scale in is disabled and the target tracking
--   policy won't remove capacity from the scalable resource. Otherwise,
--   scale in is enabled and the target tracking policy can remove capacity
--   from the scalable resource. The default value is false.
[$sel:disableScaleIn:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'] :: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> Maybe Bool

-- | The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
[$sel:scaleOutCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'] :: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> Maybe Int

-- | The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
[$sel:targetValue:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'] :: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> Double

-- | Create a value of
--   <a>AutoScalingTargetTrackingScalingPolicyConfigurationUpdate</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:scaleInCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationUpdate_scaleInCooldown</a>
--   - The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
--   
--   
--   <a>$sel:disableScaleIn:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationUpdate_disableScaleIn</a>
--   - Indicates whether scale in by the target tracking policy is
--   disabled. If the value is true, scale in is disabled and the target
--   tracking policy won't remove capacity from the scalable resource.
--   Otherwise, scale in is enabled and the target tracking policy can
--   remove capacity from the scalable resource. The default value is
--   false.
--   
--   
--   <a>$sel:scaleOutCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationUpdate_scaleOutCooldown</a>
--   - The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
--   
--   
--   <a>$sel:targetValue:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationUpdate_targetValue</a>
--   - The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
newAutoScalingTargetTrackingScalingPolicyConfigurationUpdate :: Double -> AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

-- | The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
autoScalingTargetTrackingScalingPolicyConfigurationUpdate_scaleInCooldown :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationUpdate (Maybe Int)

-- | Indicates whether scale in by the target tracking policy is disabled.
--   If the value is true, scale in is disabled and the target tracking
--   policy won't remove capacity from the scalable resource. Otherwise,
--   scale in is enabled and the target tracking policy can remove capacity
--   from the scalable resource. The default value is false.
autoScalingTargetTrackingScalingPolicyConfigurationUpdate_disableScaleIn :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationUpdate (Maybe Bool)

-- | The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
autoScalingTargetTrackingScalingPolicyConfigurationUpdate_scaleOutCooldown :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationUpdate (Maybe Int)

-- | The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
autoScalingTargetTrackingScalingPolicyConfigurationUpdate_targetValue :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationUpdate Double

-- | Contains the description of the backup created for the table.
--   
--   <i>See:</i> <a>newBackupDescription</a> smart constructor.
data BackupDescription
BackupDescription' :: Maybe BackupDetails -> Maybe SourceTableDetails -> Maybe SourceTableFeatureDetails -> BackupDescription

-- | Contains the details of the backup created for the table.
[$sel:backupDetails:BackupDescription'] :: BackupDescription -> Maybe BackupDetails

-- | Contains the details of the table when the backup was created.
[$sel:sourceTableDetails:BackupDescription'] :: BackupDescription -> Maybe SourceTableDetails

-- | Contains the details of the features enabled on the table when the
--   backup was created. For example, LSIs, GSIs, streams, TTL.
[$sel:sourceTableFeatureDetails:BackupDescription'] :: BackupDescription -> Maybe SourceTableFeatureDetails

-- | Create a value of <a>BackupDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupDetails:BackupDescription'</a>,
--   <a>backupDescription_backupDetails</a> - Contains the details of the
--   backup created for the table.
--   
--   <a>$sel:sourceTableDetails:BackupDescription'</a>,
--   <a>backupDescription_sourceTableDetails</a> - Contains the details of
--   the table when the backup was created.
--   
--   <a>$sel:sourceTableFeatureDetails:BackupDescription'</a>,
--   <a>backupDescription_sourceTableFeatureDetails</a> - Contains the
--   details of the features enabled on the table when the backup was
--   created. For example, LSIs, GSIs, streams, TTL.
newBackupDescription :: BackupDescription

-- | Contains the details of the backup created for the table.
backupDescription_backupDetails :: Lens' BackupDescription (Maybe BackupDetails)

-- | Contains the details of the table when the backup was created.
backupDescription_sourceTableDetails :: Lens' BackupDescription (Maybe SourceTableDetails)

-- | Contains the details of the features enabled on the table when the
--   backup was created. For example, LSIs, GSIs, streams, TTL.
backupDescription_sourceTableFeatureDetails :: Lens' BackupDescription (Maybe SourceTableFeatureDetails)

-- | Contains the details of the backup created for the table.
--   
--   <i>See:</i> <a>newBackupDetails</a> smart constructor.
data BackupDetails
BackupDetails' :: Maybe POSIX -> Maybe Natural -> Text -> Text -> BackupStatus -> BackupType -> POSIX -> BackupDetails

-- | Time at which the automatic on-demand backup created by DynamoDB will
--   expire. This <tt>SYSTEM</tt> on-demand backup expires automatically 35
--   days after its creation.
[$sel:backupExpiryDateTime:BackupDetails'] :: BackupDetails -> Maybe POSIX

-- | Size of the backup in bytes.
[$sel:backupSizeBytes:BackupDetails'] :: BackupDetails -> Maybe Natural

-- | ARN associated with the backup.
[$sel:backupArn:BackupDetails'] :: BackupDetails -> Text

-- | Name of the requested backup.
[$sel:backupName:BackupDetails'] :: BackupDetails -> Text

-- | Backup can be in one of the following states: CREATING, ACTIVE,
--   DELETED.
[$sel:backupStatus:BackupDetails'] :: BackupDetails -> BackupStatus

-- | BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
[$sel:backupType:BackupDetails'] :: BackupDetails -> BackupType

-- | Time at which the backup was created. This is the request time of the
--   backup.
[$sel:backupCreationDateTime:BackupDetails'] :: BackupDetails -> POSIX

-- | Create a value of <a>BackupDetails</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupExpiryDateTime:BackupDetails'</a>,
--   <a>backupDetails_backupExpiryDateTime</a> - Time at which the
--   automatic on-demand backup created by DynamoDB will expire. This
--   <tt>SYSTEM</tt> on-demand backup expires automatically 35 days after
--   its creation.
--   
--   <a>$sel:backupSizeBytes:BackupDetails'</a>,
--   <a>backupDetails_backupSizeBytes</a> - Size of the backup in bytes.
--   
--   <a>$sel:backupArn:BackupDetails'</a>, <a>backupDetails_backupArn</a> -
--   ARN associated with the backup.
--   
--   <a>$sel:backupName:BackupDetails'</a>, <a>backupDetails_backupName</a>
--   - Name of the requested backup.
--   
--   <a>$sel:backupStatus:BackupDetails'</a>,
--   <a>backupDetails_backupStatus</a> - Backup can be in one of the
--   following states: CREATING, ACTIVE, DELETED.
--   
--   <a>$sel:backupType:BackupDetails'</a>, <a>backupDetails_backupType</a>
--   - BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
--   
--   <a>$sel:backupCreationDateTime:BackupDetails'</a>,
--   <a>backupDetails_backupCreationDateTime</a> - Time at which the backup
--   was created. This is the request time of the backup.
newBackupDetails :: Text -> Text -> BackupStatus -> BackupType -> UTCTime -> BackupDetails

-- | Time at which the automatic on-demand backup created by DynamoDB will
--   expire. This <tt>SYSTEM</tt> on-demand backup expires automatically 35
--   days after its creation.
backupDetails_backupExpiryDateTime :: Lens' BackupDetails (Maybe UTCTime)

-- | Size of the backup in bytes.
backupDetails_backupSizeBytes :: Lens' BackupDetails (Maybe Natural)

-- | ARN associated with the backup.
backupDetails_backupArn :: Lens' BackupDetails Text

-- | Name of the requested backup.
backupDetails_backupName :: Lens' BackupDetails Text

-- | Backup can be in one of the following states: CREATING, ACTIVE,
--   DELETED.
backupDetails_backupStatus :: Lens' BackupDetails BackupStatus

-- | BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
backupDetails_backupType :: Lens' BackupDetails BackupType

-- | Time at which the backup was created. This is the request time of the
--   backup.
backupDetails_backupCreationDateTime :: Lens' BackupDetails UTCTime

-- | Contains details for the backup.
--   
--   <i>See:</i> <a>newBackupSummary</a> smart constructor.
data BackupSummary
BackupSummary' :: Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe BackupStatus -> Maybe Natural -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe BackupType -> Maybe Text -> BackupSummary

-- | Time at which the automatic on-demand backup created by DynamoDB will
--   expire. This <tt>SYSTEM</tt> on-demand backup expires automatically 35
--   days after its creation.
[$sel:backupExpiryDateTime:BackupSummary'] :: BackupSummary -> Maybe POSIX

-- | ARN associated with the table.
[$sel:tableArn:BackupSummary'] :: BackupSummary -> Maybe Text

-- | Name of the specified backup.
[$sel:backupName:BackupSummary'] :: BackupSummary -> Maybe Text

-- | Backup can be in one of the following states: CREATING, ACTIVE,
--   DELETED.
[$sel:backupStatus:BackupSummary'] :: BackupSummary -> Maybe BackupStatus

-- | Size of the backup in bytes.
[$sel:backupSizeBytes:BackupSummary'] :: BackupSummary -> Maybe Natural

-- | ARN associated with the backup.
[$sel:backupArn:BackupSummary'] :: BackupSummary -> Maybe Text

-- | Unique identifier for the table.
[$sel:tableId:BackupSummary'] :: BackupSummary -> Maybe Text

-- | Time at which the backup was created.
[$sel:backupCreationDateTime:BackupSummary'] :: BackupSummary -> Maybe POSIX

-- | BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
[$sel:backupType:BackupSummary'] :: BackupSummary -> Maybe BackupType

-- | Name of the table.
[$sel:tableName:BackupSummary'] :: BackupSummary -> Maybe Text

-- | Create a value of <a>BackupSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupExpiryDateTime:BackupSummary'</a>,
--   <a>backupSummary_backupExpiryDateTime</a> - Time at which the
--   automatic on-demand backup created by DynamoDB will expire. This
--   <tt>SYSTEM</tt> on-demand backup expires automatically 35 days after
--   its creation.
--   
--   <a>$sel:tableArn:BackupSummary'</a>, <a>backupSummary_tableArn</a> -
--   ARN associated with the table.
--   
--   <a>$sel:backupName:BackupSummary'</a>, <a>backupSummary_backupName</a>
--   - Name of the specified backup.
--   
--   <a>$sel:backupStatus:BackupSummary'</a>,
--   <a>backupSummary_backupStatus</a> - Backup can be in one of the
--   following states: CREATING, ACTIVE, DELETED.
--   
--   <a>$sel:backupSizeBytes:BackupSummary'</a>,
--   <a>backupSummary_backupSizeBytes</a> - Size of the backup in bytes.
--   
--   <a>$sel:backupArn:BackupSummary'</a>, <a>backupSummary_backupArn</a> -
--   ARN associated with the backup.
--   
--   <a>$sel:tableId:BackupSummary'</a>, <a>backupSummary_tableId</a> -
--   Unique identifier for the table.
--   
--   <a>$sel:backupCreationDateTime:BackupSummary'</a>,
--   <a>backupSummary_backupCreationDateTime</a> - Time at which the backup
--   was created.
--   
--   <a>$sel:backupType:BackupSummary'</a>, <a>backupSummary_backupType</a>
--   - BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
--   
--   <a>$sel:tableName:BackupSummary'</a>, <a>backupSummary_tableName</a> -
--   Name of the table.
newBackupSummary :: BackupSummary

-- | Time at which the automatic on-demand backup created by DynamoDB will
--   expire. This <tt>SYSTEM</tt> on-demand backup expires automatically 35
--   days after its creation.
backupSummary_backupExpiryDateTime :: Lens' BackupSummary (Maybe UTCTime)

-- | ARN associated with the table.
backupSummary_tableArn :: Lens' BackupSummary (Maybe Text)

-- | Name of the specified backup.
backupSummary_backupName :: Lens' BackupSummary (Maybe Text)

-- | Backup can be in one of the following states: CREATING, ACTIVE,
--   DELETED.
backupSummary_backupStatus :: Lens' BackupSummary (Maybe BackupStatus)

-- | Size of the backup in bytes.
backupSummary_backupSizeBytes :: Lens' BackupSummary (Maybe Natural)

-- | ARN associated with the backup.
backupSummary_backupArn :: Lens' BackupSummary (Maybe Text)

-- | Unique identifier for the table.
backupSummary_tableId :: Lens' BackupSummary (Maybe Text)

-- | Time at which the backup was created.
backupSummary_backupCreationDateTime :: Lens' BackupSummary (Maybe UTCTime)

-- | BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
backupSummary_backupType :: Lens' BackupSummary (Maybe BackupType)

-- | Name of the table.
backupSummary_tableName :: Lens' BackupSummary (Maybe Text)

-- | An error associated with a statement in a PartiQL batch that was run.
--   
--   <i>See:</i> <a>newBatchStatementError</a> smart constructor.
data BatchStatementError
BatchStatementError' :: Maybe BatchStatementErrorCodeEnum -> Maybe Text -> BatchStatementError

-- | The error code associated with the failed PartiQL batch statement.
[$sel:code:BatchStatementError'] :: BatchStatementError -> Maybe BatchStatementErrorCodeEnum

-- | The error message associated with the PartiQL batch resposne.
[$sel:message:BatchStatementError'] :: BatchStatementError -> Maybe Text

-- | Create a value of <a>BatchStatementError</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:code:BatchStatementError'</a>, <a>batchStatementError_code</a>
--   - The error code associated with the failed PartiQL batch statement.
--   
--   <a>$sel:message:BatchStatementError'</a>,
--   <a>batchStatementError_message</a> - The error message associated with
--   the PartiQL batch resposne.
newBatchStatementError :: BatchStatementError

-- | The error code associated with the failed PartiQL batch statement.
batchStatementError_code :: Lens' BatchStatementError (Maybe BatchStatementErrorCodeEnum)

-- | The error message associated with the PartiQL batch resposne.
batchStatementError_message :: Lens' BatchStatementError (Maybe Text)

-- | A PartiQL batch statement request.
--   
--   <i>See:</i> <a>newBatchStatementRequest</a> smart constructor.
data BatchStatementRequest
BatchStatementRequest' :: Maybe Bool -> Maybe (NonEmpty AttributeValue) -> Text -> BatchStatementRequest

-- | The read consistency of the PartiQL batch request.
[$sel:consistentRead:BatchStatementRequest'] :: BatchStatementRequest -> Maybe Bool

-- | The parameters associated with a PartiQL statement in the batch
--   request.
[$sel:parameters:BatchStatementRequest'] :: BatchStatementRequest -> Maybe (NonEmpty AttributeValue)

-- | A valid PartiQL statement.
[$sel:statement:BatchStatementRequest'] :: BatchStatementRequest -> Text

-- | Create a value of <a>BatchStatementRequest</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consistentRead:BatchStatementRequest'</a>,
--   <a>batchStatementRequest_consistentRead</a> - The read consistency of
--   the PartiQL batch request.
--   
--   <a>$sel:parameters:BatchStatementRequest'</a>,
--   <a>batchStatementRequest_parameters</a> - The parameters associated
--   with a PartiQL statement in the batch request.
--   
--   <a>$sel:statement:BatchStatementRequest'</a>,
--   <a>batchStatementRequest_statement</a> - A valid PartiQL statement.
newBatchStatementRequest :: Text -> BatchStatementRequest

-- | The read consistency of the PartiQL batch request.
batchStatementRequest_consistentRead :: Lens' BatchStatementRequest (Maybe Bool)

-- | The parameters associated with a PartiQL statement in the batch
--   request.
batchStatementRequest_parameters :: Lens' BatchStatementRequest (Maybe (NonEmpty AttributeValue))

-- | A valid PartiQL statement.
batchStatementRequest_statement :: Lens' BatchStatementRequest Text

-- | A PartiQL batch statement response..
--   
--   <i>See:</i> <a>newBatchStatementResponse</a> smart constructor.
data BatchStatementResponse
BatchStatementResponse' :: Maybe BatchStatementError -> Maybe (HashMap Text AttributeValue) -> Maybe Text -> BatchStatementResponse

-- | The error associated with a failed PartiQL batch statement.
[$sel:error:BatchStatementResponse'] :: BatchStatementResponse -> Maybe BatchStatementError

-- | A DynamoDB item associated with a BatchStatementResponse
[$sel:item:BatchStatementResponse'] :: BatchStatementResponse -> Maybe (HashMap Text AttributeValue)

-- | The table name associated with a failed PartiQL batch statement.
[$sel:tableName:BatchStatementResponse'] :: BatchStatementResponse -> Maybe Text

-- | Create a value of <a>BatchStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:error:BatchStatementResponse'</a>,
--   <a>batchStatementResponse_error</a> - The error associated with a
--   failed PartiQL batch statement.
--   
--   <a>$sel:item:BatchStatementResponse'</a>,
--   <a>batchStatementResponse_item</a> - A DynamoDB item associated with a
--   BatchStatementResponse
--   
--   <a>$sel:tableName:BatchStatementResponse'</a>,
--   <a>batchStatementResponse_tableName</a> - The table name associated
--   with a failed PartiQL batch statement.
newBatchStatementResponse :: BatchStatementResponse

-- | The error associated with a failed PartiQL batch statement.
batchStatementResponse_error :: Lens' BatchStatementResponse (Maybe BatchStatementError)

-- | A DynamoDB item associated with a BatchStatementResponse
batchStatementResponse_item :: Lens' BatchStatementResponse (Maybe (HashMap Text AttributeValue))

-- | The table name associated with a failed PartiQL batch statement.
batchStatementResponse_tableName :: Lens' BatchStatementResponse (Maybe Text)

-- | Contains the details for the read/write capacity mode.
--   
--   <i>See:</i> <a>newBillingModeSummary</a> smart constructor.
data BillingModeSummary
BillingModeSummary' :: Maybe POSIX -> Maybe BillingMode -> BillingModeSummary

-- | Represents the time when <tt>PAY_PER_REQUEST</tt> was last set as the
--   read/write capacity mode.
[$sel:lastUpdateToPayPerRequestDateTime:BillingModeSummary'] :: BillingModeSummary -> Maybe POSIX

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
[$sel:billingMode:BillingModeSummary'] :: BillingModeSummary -> Maybe BillingMode

-- | Create a value of <a>BillingModeSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastUpdateToPayPerRequestDateTime:BillingModeSummary'</a>,
--   <a>billingModeSummary_lastUpdateToPayPerRequestDateTime</a> -
--   Represents the time when <tt>PAY_PER_REQUEST</tt> was last set as the
--   read/write capacity mode.
--   
--   <a>$sel:billingMode:BillingModeSummary'</a>,
--   <a>billingModeSummary_billingMode</a> - Controls how you are charged
--   for read and write throughput and how you manage capacity. This
--   setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
newBillingModeSummary :: BillingModeSummary

-- | Represents the time when <tt>PAY_PER_REQUEST</tt> was last set as the
--   read/write capacity mode.
billingModeSummary_lastUpdateToPayPerRequestDateTime :: Lens' BillingModeSummary (Maybe UTCTime)

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
billingModeSummary_billingMode :: Lens' BillingModeSummary (Maybe BillingMode)

-- | Represents the amount of provisioned throughput capacity consumed on a
--   table or an index.
--   
--   <i>See:</i> <a>newCapacity</a> smart constructor.
data Capacity
Capacity' :: Maybe Double -> Maybe Double -> Maybe Double -> Capacity

-- | The total number of read capacity units consumed on a table or an
--   index.
[$sel:readCapacityUnits:Capacity'] :: Capacity -> Maybe Double

-- | The total number of capacity units consumed on a table or an index.
[$sel:capacityUnits:Capacity'] :: Capacity -> Maybe Double

-- | The total number of write capacity units consumed on a table or an
--   index.
[$sel:writeCapacityUnits:Capacity'] :: Capacity -> Maybe Double

-- | Create a value of <a>Capacity</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:Capacity'</a>,
--   <a>capacity_readCapacityUnits</a> - The total number of read capacity
--   units consumed on a table or an index.
--   
--   <a>$sel:capacityUnits:Capacity'</a>, <a>capacity_capacityUnits</a> -
--   The total number of capacity units consumed on a table or an index.
--   
--   <a>$sel:writeCapacityUnits:Capacity'</a>,
--   <a>capacity_writeCapacityUnits</a> - The total number of write
--   capacity units consumed on a table or an index.
newCapacity :: Capacity

-- | The total number of read capacity units consumed on a table or an
--   index.
capacity_readCapacityUnits :: Lens' Capacity (Maybe Double)

-- | The total number of capacity units consumed on a table or an index.
capacity_capacityUnits :: Lens' Capacity (Maybe Double)

-- | The total number of write capacity units consumed on a table or an
--   index.
capacity_writeCapacityUnits :: Lens' Capacity (Maybe Double)

-- | Represents the selection criteria for a <tt>Query</tt> or
--   <tt>Scan</tt> operation:
--   
--   <ul>
--   <li>For a <tt>Query</tt> operation, <tt>Condition</tt> is used for
--   specifying the <tt>KeyConditions</tt> to use when querying a table or
--   an index. For <tt>KeyConditions</tt>, only the following comparison
--   operators are supported:<pre>EQ | LE | LT | GE | GT | BEGINS_WITH |
--   BETWEEN</pre><tt>Condition</tt> is also used in a
--   <tt>QueryFilter</tt>, which evaluates the query results and returns
--   only the desired values.</li>
--   <li>For a <tt>Scan</tt> operation, <tt>Condition</tt> is used in a
--   <tt>ScanFilter</tt>, which evaluates the scan results and returns only
--   the desired values.</li>
--   </ul>
--   
--   <i>See:</i> <a>newCondition</a> smart constructor.
data Condition
Condition' :: Maybe [AttributeValue] -> ComparisonOperator -> Condition

-- | One or more values to evaluate against the supplied attribute. The
--   number of values in the list depends on the
--   <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
[$sel:attributeValueList:Condition'] :: Condition -> Maybe [AttributeValue]

-- | A comparator for evaluating attributes. For example, equals, greater
--   than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
--   
--   For usage examples of <tt>AttributeValueList</tt> and
--   <tt>ComparisonOperator</tt>, see <a>Legacy Conditional Parameters</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:comparisonOperator:Condition'] :: Condition -> ComparisonOperator

-- | Create a value of <a>Condition</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeValueList:Condition'</a>,
--   <a>condition_attributeValueList</a> - One or more values to evaluate
--   against the supplied attribute. The number of values in the list
--   depends on the <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   <a>$sel:comparisonOperator:Condition'</a>,
--   <a>condition_comparisonOperator</a> - A comparator for evaluating
--   attributes. For example, equals, greater than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
--   
--   For usage examples of <tt>AttributeValueList</tt> and
--   <tt>ComparisonOperator</tt>, see <a>Legacy Conditional Parameters</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.
newCondition :: ComparisonOperator -> Condition

-- | One or more values to evaluate against the supplied attribute. The
--   number of values in the list depends on the
--   <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
condition_attributeValueList :: Lens' Condition (Maybe [AttributeValue])

-- | A comparator for evaluating attributes. For example, equals, greater
--   than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
--   
--   For usage examples of <tt>AttributeValueList</tt> and
--   <tt>ComparisonOperator</tt>, see <a>Legacy Conditional Parameters</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.
condition_comparisonOperator :: Lens' Condition ComparisonOperator

-- | Represents a request to perform a check that an item exists or to
--   check the condition of specific attributes of the item.
--   
--   <i>See:</i> <a>newConditionCheck</a> smart constructor.
data ConditionCheck
ConditionCheck' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnValuesOnConditionCheckFailure -> HashMap Text AttributeValue -> Text -> Text -> ConditionCheck

-- | One or more substitution tokens for attribute names in an expression.
[$sel:expressionAttributeNames:ConditionCheck'] :: ConditionCheck -> Maybe (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
[$sel:expressionAttributeValues:ConditionCheck'] :: ConditionCheck -> Maybe (HashMap Text AttributeValue)

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>ConditionCheck</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
[$sel:returnValuesOnConditionCheckFailure:ConditionCheck'] :: ConditionCheck -> Maybe ReturnValuesOnConditionCheckFailure

-- | The primary key of the item to be checked. Each element consists of an
--   attribute name and a value for that attribute.
[$sel:key:ConditionCheck'] :: ConditionCheck -> HashMap Text AttributeValue

-- | Name of the table for the check item request.
[$sel:tableName:ConditionCheck'] :: ConditionCheck -> Text

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
[$sel:conditionExpression:ConditionCheck'] :: ConditionCheck -> Text

-- | Create a value of <a>ConditionCheck</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:ConditionCheck'</a>,
--   <a>conditionCheck_expressionAttributeNames</a> - One or more
--   substitution tokens for attribute names in an expression.
--   
--   <a>$sel:expressionAttributeValues:ConditionCheck'</a>,
--   <a>conditionCheck_expressionAttributeValues</a> - One or more values
--   that can be substituted in an expression.
--   
--   <a>$sel:returnValuesOnConditionCheckFailure:ConditionCheck'</a>,
--   <a>conditionCheck_returnValuesOnConditionCheckFailure</a> - Use
--   <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>ConditionCheck</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
--   
--   <a>$sel:key:ConditionCheck'</a>, <a>conditionCheck_key</a> - The
--   primary key of the item to be checked. Each element consists of an
--   attribute name and a value for that attribute.
--   
--   <a>$sel:tableName:ConditionCheck'</a>, <a>conditionCheck_tableName</a>
--   - Name of the table for the check item request.
--   
--   <a>$sel:conditionExpression:ConditionCheck'</a>,
--   <a>conditionCheck_conditionExpression</a> - A condition that must be
--   satisfied in order for a conditional update to succeed.
newConditionCheck :: Text -> Text -> ConditionCheck

-- | One or more substitution tokens for attribute names in an expression.
conditionCheck_expressionAttributeNames :: Lens' ConditionCheck (Maybe (HashMap Text Text))

-- | One or more values that can be substituted in an expression.
conditionCheck_expressionAttributeValues :: Lens' ConditionCheck (Maybe (HashMap Text AttributeValue))

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>ConditionCheck</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
conditionCheck_returnValuesOnConditionCheckFailure :: Lens' ConditionCheck (Maybe ReturnValuesOnConditionCheckFailure)

-- | The primary key of the item to be checked. Each element consists of an
--   attribute name and a value for that attribute.
conditionCheck_key :: Lens' ConditionCheck (HashMap Text AttributeValue)

-- | Name of the table for the check item request.
conditionCheck_tableName :: Lens' ConditionCheck Text

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
conditionCheck_conditionExpression :: Lens' ConditionCheck Text

-- | The capacity units consumed by an operation. The data returned
--   includes the total provisioned throughput consumed, along with
--   statistics for the table and any indexes involved in the operation.
--   <tt>ConsumedCapacity</tt> is only returned if the request asked for
--   it. For more information, see <a>Provisioned Throughput</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>See:</i> <a>newConsumedCapacity</a> smart constructor.
data ConsumedCapacity
ConsumedCapacity' :: Maybe Double -> Maybe (HashMap Text Capacity) -> Maybe Double -> Maybe Double -> Maybe (HashMap Text Capacity) -> Maybe Capacity -> Maybe Text -> ConsumedCapacity

-- | The total number of read capacity units consumed by the operation.
[$sel:readCapacityUnits:ConsumedCapacity'] :: ConsumedCapacity -> Maybe Double

-- | The amount of throughput consumed on each global index affected by the
--   operation.
[$sel:globalSecondaryIndexes:ConsumedCapacity'] :: ConsumedCapacity -> Maybe (HashMap Text Capacity)

-- | The total number of capacity units consumed by the operation.
[$sel:capacityUnits:ConsumedCapacity'] :: ConsumedCapacity -> Maybe Double

-- | The total number of write capacity units consumed by the operation.
[$sel:writeCapacityUnits:ConsumedCapacity'] :: ConsumedCapacity -> Maybe Double

-- | The amount of throughput consumed on each local index affected by the
--   operation.
[$sel:localSecondaryIndexes:ConsumedCapacity'] :: ConsumedCapacity -> Maybe (HashMap Text Capacity)

-- | The amount of throughput consumed on the table affected by the
--   operation.
[$sel:table:ConsumedCapacity'] :: ConsumedCapacity -> Maybe Capacity

-- | The name of the table that was affected by the operation.
[$sel:tableName:ConsumedCapacity'] :: ConsumedCapacity -> Maybe Text

-- | Create a value of <a>ConsumedCapacity</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:ConsumedCapacity'</a>,
--   <a>consumedCapacity_readCapacityUnits</a> - The total number of read
--   capacity units consumed by the operation.
--   
--   <a>$sel:globalSecondaryIndexes:ConsumedCapacity'</a>,
--   <a>consumedCapacity_globalSecondaryIndexes</a> - The amount of
--   throughput consumed on each global index affected by the operation.
--   
--   <a>$sel:capacityUnits:ConsumedCapacity'</a>,
--   <a>consumedCapacity_capacityUnits</a> - The total number of capacity
--   units consumed by the operation.
--   
--   <a>$sel:writeCapacityUnits:ConsumedCapacity'</a>,
--   <a>consumedCapacity_writeCapacityUnits</a> - The total number of write
--   capacity units consumed by the operation.
--   
--   <a>$sel:localSecondaryIndexes:ConsumedCapacity'</a>,
--   <a>consumedCapacity_localSecondaryIndexes</a> - The amount of
--   throughput consumed on each local index affected by the operation.
--   
--   <a>$sel:table:ConsumedCapacity'</a>, <a>consumedCapacity_table</a> -
--   The amount of throughput consumed on the table affected by the
--   operation.
--   
--   <a>$sel:tableName:ConsumedCapacity'</a>,
--   <a>consumedCapacity_tableName</a> - The name of the table that was
--   affected by the operation.
newConsumedCapacity :: ConsumedCapacity

-- | The total number of read capacity units consumed by the operation.
consumedCapacity_readCapacityUnits :: Lens' ConsumedCapacity (Maybe Double)

-- | The amount of throughput consumed on each global index affected by the
--   operation.
consumedCapacity_globalSecondaryIndexes :: Lens' ConsumedCapacity (Maybe (HashMap Text Capacity))

-- | The total number of capacity units consumed by the operation.
consumedCapacity_capacityUnits :: Lens' ConsumedCapacity (Maybe Double)

-- | The total number of write capacity units consumed by the operation.
consumedCapacity_writeCapacityUnits :: Lens' ConsumedCapacity (Maybe Double)

-- | The amount of throughput consumed on each local index affected by the
--   operation.
consumedCapacity_localSecondaryIndexes :: Lens' ConsumedCapacity (Maybe (HashMap Text Capacity))

-- | The amount of throughput consumed on the table affected by the
--   operation.
consumedCapacity_table :: Lens' ConsumedCapacity (Maybe Capacity)

-- | The name of the table that was affected by the operation.
consumedCapacity_tableName :: Lens' ConsumedCapacity (Maybe Text)

-- | Represents the continuous backups and point in time recovery settings
--   on the table.
--   
--   <i>See:</i> <a>newContinuousBackupsDescription</a> smart constructor.
data ContinuousBackupsDescription
ContinuousBackupsDescription' :: Maybe PointInTimeRecoveryDescription -> ContinuousBackupsStatus -> ContinuousBackupsDescription

-- | The description of the point in time recovery settings applied to the
--   table.
[$sel:pointInTimeRecoveryDescription:ContinuousBackupsDescription'] :: ContinuousBackupsDescription -> Maybe PointInTimeRecoveryDescription

-- | <tt>ContinuousBackupsStatus</tt> can be one of the following states:
--   ENABLED, DISABLED
[$sel:continuousBackupsStatus:ContinuousBackupsDescription'] :: ContinuousBackupsDescription -> ContinuousBackupsStatus

-- | Create a value of <a>ContinuousBackupsDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:pointInTimeRecoveryDescription:ContinuousBackupsDescription'</a>,
--   <a>continuousBackupsDescription_pointInTimeRecoveryDescription</a> -
--   The description of the point in time recovery settings applied to the
--   table.
--   
--   <a>$sel:continuousBackupsStatus:ContinuousBackupsDescription'</a>,
--   <a>continuousBackupsDescription_continuousBackupsStatus</a> -
--   <tt>ContinuousBackupsStatus</tt> can be one of the following states:
--   ENABLED, DISABLED
newContinuousBackupsDescription :: ContinuousBackupsStatus -> ContinuousBackupsDescription

-- | The description of the point in time recovery settings applied to the
--   table.
continuousBackupsDescription_pointInTimeRecoveryDescription :: Lens' ContinuousBackupsDescription (Maybe PointInTimeRecoveryDescription)

-- | <tt>ContinuousBackupsStatus</tt> can be one of the following states:
--   ENABLED, DISABLED
continuousBackupsDescription_continuousBackupsStatus :: Lens' ContinuousBackupsDescription ContinuousBackupsStatus

-- | Represents a Contributor Insights summary entry.
--   
--   <i>See:</i> <a>newContributorInsightsSummary</a> smart constructor.
data ContributorInsightsSummary
ContributorInsightsSummary' :: Maybe ContributorInsightsStatus -> Maybe Text -> Maybe Text -> ContributorInsightsSummary

-- | Describes the current status for contributor insights for the given
--   table and index, if applicable.
[$sel:contributorInsightsStatus:ContributorInsightsSummary'] :: ContributorInsightsSummary -> Maybe ContributorInsightsStatus

-- | Name of the table associated with the summary.
[$sel:tableName:ContributorInsightsSummary'] :: ContributorInsightsSummary -> Maybe Text

-- | Name of the index associated with the summary, if any.
[$sel:indexName:ContributorInsightsSummary'] :: ContributorInsightsSummary -> Maybe Text

-- | Create a value of <a>ContributorInsightsSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:contributorInsightsStatus:ContributorInsightsSummary'</a>,
--   <a>contributorInsightsSummary_contributorInsightsStatus</a> -
--   Describes the current status for contributor insights for the given
--   table and index, if applicable.
--   
--   <a>$sel:tableName:ContributorInsightsSummary'</a>,
--   <a>contributorInsightsSummary_tableName</a> - Name of the table
--   associated with the summary.
--   
--   <a>$sel:indexName:ContributorInsightsSummary'</a>,
--   <a>contributorInsightsSummary_indexName</a> - Name of the index
--   associated with the summary, if any.
newContributorInsightsSummary :: ContributorInsightsSummary

-- | Describes the current status for contributor insights for the given
--   table and index, if applicable.
contributorInsightsSummary_contributorInsightsStatus :: Lens' ContributorInsightsSummary (Maybe ContributorInsightsStatus)

-- | Name of the table associated with the summary.
contributorInsightsSummary_tableName :: Lens' ContributorInsightsSummary (Maybe Text)

-- | Name of the index associated with the summary, if any.
contributorInsightsSummary_indexName :: Lens' ContributorInsightsSummary (Maybe Text)

-- | Represents a new global secondary index to be added to an existing
--   table.
--   
--   <i>See:</i> <a>newCreateGlobalSecondaryIndexAction</a> smart
--   constructor.
data CreateGlobalSecondaryIndexAction
CreateGlobalSecondaryIndexAction' :: Maybe ProvisionedThroughput -> Text -> NonEmpty KeySchemaElement -> Projection -> CreateGlobalSecondaryIndexAction

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:provisionedThroughput:CreateGlobalSecondaryIndexAction'] :: CreateGlobalSecondaryIndexAction -> Maybe ProvisionedThroughput

-- | The name of the global secondary index to be created.
[$sel:indexName:CreateGlobalSecondaryIndexAction'] :: CreateGlobalSecondaryIndexAction -> Text

-- | The key schema for the global secondary index.
[$sel:keySchema:CreateGlobalSecondaryIndexAction'] :: CreateGlobalSecondaryIndexAction -> NonEmpty KeySchemaElement

-- | Represents attributes that are copied (projected) from the table into
--   an index. These are in addition to the primary key attributes and
--   index key attributes, which are automatically projected.
[$sel:projection:CreateGlobalSecondaryIndexAction'] :: CreateGlobalSecondaryIndexAction -> Projection

-- | Create a value of <a>CreateGlobalSecondaryIndexAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:provisionedThroughput:CreateGlobalSecondaryIndexAction'</a>,
--   <a>createGlobalSecondaryIndexAction_provisionedThroughput</a> -
--   Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:indexName:CreateGlobalSecondaryIndexAction'</a>,
--   <a>createGlobalSecondaryIndexAction_indexName</a> - The name of the
--   global secondary index to be created.
--   
--   <a>$sel:keySchema:CreateGlobalSecondaryIndexAction'</a>,
--   <a>createGlobalSecondaryIndexAction_keySchema</a> - The key schema for
--   the global secondary index.
--   
--   <a>$sel:projection:CreateGlobalSecondaryIndexAction'</a>,
--   <a>createGlobalSecondaryIndexAction_projection</a> - Represents
--   attributes that are copied (projected) from the table into an index.
--   These are in addition to the primary key attributes and index key
--   attributes, which are automatically projected.
newCreateGlobalSecondaryIndexAction :: Text -> NonEmpty KeySchemaElement -> Projection -> CreateGlobalSecondaryIndexAction

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
createGlobalSecondaryIndexAction_provisionedThroughput :: Lens' CreateGlobalSecondaryIndexAction (Maybe ProvisionedThroughput)

-- | The name of the global secondary index to be created.
createGlobalSecondaryIndexAction_indexName :: Lens' CreateGlobalSecondaryIndexAction Text

-- | The key schema for the global secondary index.
createGlobalSecondaryIndexAction_keySchema :: Lens' CreateGlobalSecondaryIndexAction (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   an index. These are in addition to the primary key attributes and
--   index key attributes, which are automatically projected.
createGlobalSecondaryIndexAction_projection :: Lens' CreateGlobalSecondaryIndexAction Projection

-- | Represents a replica to be added.
--   
--   <i>See:</i> <a>newCreateReplicaAction</a> smart constructor.
data CreateReplicaAction
CreateReplicaAction' :: Text -> CreateReplicaAction

-- | The Region of the replica to be added.
[$sel:regionName:CreateReplicaAction'] :: CreateReplicaAction -> Text

-- | Create a value of <a>CreateReplicaAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:CreateReplicaAction'</a>,
--   <a>createReplicaAction_regionName</a> - The Region of the replica to
--   be added.
newCreateReplicaAction :: Text -> CreateReplicaAction

-- | The Region of the replica to be added.
createReplicaAction_regionName :: Lens' CreateReplicaAction Text

-- | Represents a replica to be created.
--   
--   <i>See:</i> <a>newCreateReplicationGroupMemberAction</a> smart
--   constructor.
data CreateReplicationGroupMemberAction
CreateReplicationGroupMemberAction' :: Maybe Text -> Maybe ProvisionedThroughputOverride -> Maybe (NonEmpty ReplicaGlobalSecondaryIndex) -> Text -> CreateReplicationGroupMemberAction

-- | The AWS KMS customer master key (CMK) that should be used for AWS KMS
--   encryption in the new replica. To specify a CMK, use its key ID,
--   Amazon Resource Name (ARN), alias name, or alias ARN. Note that you
--   should only provide this parameter if the key is different from the
--   default DynamoDB KMS master key alias/aws/dynamodb.
[$sel:kmsMasterKeyId:CreateReplicationGroupMemberAction'] :: CreateReplicationGroupMemberAction -> Maybe Text

-- | Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
[$sel:provisionedThroughputOverride:CreateReplicationGroupMemberAction'] :: CreateReplicationGroupMemberAction -> Maybe ProvisionedThroughputOverride

-- | Replica-specific global secondary index settings.
[$sel:globalSecondaryIndexes:CreateReplicationGroupMemberAction'] :: CreateReplicationGroupMemberAction -> Maybe (NonEmpty ReplicaGlobalSecondaryIndex)

-- | The Region where the new replica will be created.
[$sel:regionName:CreateReplicationGroupMemberAction'] :: CreateReplicationGroupMemberAction -> Text

-- | Create a value of <a>CreateReplicationGroupMemberAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsMasterKeyId:CreateReplicationGroupMemberAction'</a>,
--   <a>createReplicationGroupMemberAction_kmsMasterKeyId</a> - The AWS KMS
--   customer master key (CMK) that should be used for AWS KMS encryption
--   in the new replica. To specify a CMK, use its key ID, Amazon Resource
--   Name (ARN), alias name, or alias ARN. Note that you should only
--   provide this parameter if the key is different from the default
--   DynamoDB KMS master key alias/aws/dynamodb.
--   
--   
--   <a>$sel:provisionedThroughputOverride:CreateReplicationGroupMemberAction'</a>,
--   <a>createReplicationGroupMemberAction_provisionedThroughputOverride</a>
--   - Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
--   
--   
--   <a>$sel:globalSecondaryIndexes:CreateReplicationGroupMemberAction'</a>,
--   <a>createReplicationGroupMemberAction_globalSecondaryIndexes</a> -
--   Replica-specific global secondary index settings.
--   
--   <a>$sel:regionName:CreateReplicationGroupMemberAction'</a>,
--   <a>createReplicationGroupMemberAction_regionName</a> - The Region
--   where the new replica will be created.
newCreateReplicationGroupMemberAction :: Text -> CreateReplicationGroupMemberAction

-- | The AWS KMS customer master key (CMK) that should be used for AWS KMS
--   encryption in the new replica. To specify a CMK, use its key ID,
--   Amazon Resource Name (ARN), alias name, or alias ARN. Note that you
--   should only provide this parameter if the key is different from the
--   default DynamoDB KMS master key alias/aws/dynamodb.
createReplicationGroupMemberAction_kmsMasterKeyId :: Lens' CreateReplicationGroupMemberAction (Maybe Text)

-- | Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
createReplicationGroupMemberAction_provisionedThroughputOverride :: Lens' CreateReplicationGroupMemberAction (Maybe ProvisionedThroughputOverride)

-- | Replica-specific global secondary index settings.
createReplicationGroupMemberAction_globalSecondaryIndexes :: Lens' CreateReplicationGroupMemberAction (Maybe (NonEmpty ReplicaGlobalSecondaryIndex))

-- | The Region where the new replica will be created.
createReplicationGroupMemberAction_regionName :: Lens' CreateReplicationGroupMemberAction Text

-- | Represents a request to perform a <tt>DeleteItem</tt> operation.
--   
--   <i>See:</i> <a>newDelete</a> smart constructor.
data Delete
Delete' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnValuesOnConditionCheckFailure -> Maybe Text -> HashMap Text AttributeValue -> Text -> Delete

-- | One or more substitution tokens for attribute names in an expression.
[$sel:expressionAttributeNames:Delete'] :: Delete -> Maybe (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
[$sel:expressionAttributeValues:Delete'] :: Delete -> Maybe (HashMap Text AttributeValue)

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Delete</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
[$sel:returnValuesOnConditionCheckFailure:Delete'] :: Delete -> Maybe ReturnValuesOnConditionCheckFailure

-- | A condition that must be satisfied in order for a conditional delete
--   to succeed.
[$sel:conditionExpression:Delete'] :: Delete -> Maybe Text

-- | The primary key of the item to be deleted. Each element consists of an
--   attribute name and a value for that attribute.
[$sel:key:Delete'] :: Delete -> HashMap Text AttributeValue

-- | Name of the table in which the item to be deleted resides.
[$sel:tableName:Delete'] :: Delete -> Text

-- | Create a value of <a>Delete</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:Delete'</a>,
--   <a>delete_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression.
--   
--   <a>$sel:expressionAttributeValues:Delete'</a>,
--   <a>delete_expressionAttributeValues</a> - One or more values that can
--   be substituted in an expression.
--   
--   <a>$sel:returnValuesOnConditionCheckFailure:Delete'</a>,
--   <a>delete_returnValuesOnConditionCheckFailure</a> - Use
--   <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Delete</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
--   
--   <a>$sel:conditionExpression:Delete'</a>,
--   <a>delete_conditionExpression</a> - A condition that must be satisfied
--   in order for a conditional delete to succeed.
--   
--   <a>$sel:key:Delete'</a>, <a>delete_key</a> - The primary key of the
--   item to be deleted. Each element consists of an attribute name and a
--   value for that attribute.
--   
--   <a>$sel:tableName:Delete'</a>, <a>delete_tableName</a> - Name of the
--   table in which the item to be deleted resides.
newDelete :: Text -> Delete

-- | One or more substitution tokens for attribute names in an expression.
delete_expressionAttributeNames :: Lens' Delete (Maybe (HashMap Text Text))

-- | One or more values that can be substituted in an expression.
delete_expressionAttributeValues :: Lens' Delete (Maybe (HashMap Text AttributeValue))

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Delete</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
delete_returnValuesOnConditionCheckFailure :: Lens' Delete (Maybe ReturnValuesOnConditionCheckFailure)

-- | A condition that must be satisfied in order for a conditional delete
--   to succeed.
delete_conditionExpression :: Lens' Delete (Maybe Text)

-- | The primary key of the item to be deleted. Each element consists of an
--   attribute name and a value for that attribute.
delete_key :: Lens' Delete (HashMap Text AttributeValue)

-- | Name of the table in which the item to be deleted resides.
delete_tableName :: Lens' Delete Text

-- | Represents a global secondary index to be deleted from an existing
--   table.
--   
--   <i>See:</i> <a>newDeleteGlobalSecondaryIndexAction</a> smart
--   constructor.
data DeleteGlobalSecondaryIndexAction
DeleteGlobalSecondaryIndexAction' :: Text -> DeleteGlobalSecondaryIndexAction

-- | The name of the global secondary index to be deleted.
[$sel:indexName:DeleteGlobalSecondaryIndexAction'] :: DeleteGlobalSecondaryIndexAction -> Text

-- | Create a value of <a>DeleteGlobalSecondaryIndexAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:DeleteGlobalSecondaryIndexAction'</a>,
--   <a>deleteGlobalSecondaryIndexAction_indexName</a> - The name of the
--   global secondary index to be deleted.
newDeleteGlobalSecondaryIndexAction :: Text -> DeleteGlobalSecondaryIndexAction

-- | The name of the global secondary index to be deleted.
deleteGlobalSecondaryIndexAction_indexName :: Lens' DeleteGlobalSecondaryIndexAction Text

-- | Represents a replica to be removed.
--   
--   <i>See:</i> <a>newDeleteReplicaAction</a> smart constructor.
data DeleteReplicaAction
DeleteReplicaAction' :: Text -> DeleteReplicaAction

-- | The Region of the replica to be removed.
[$sel:regionName:DeleteReplicaAction'] :: DeleteReplicaAction -> Text

-- | Create a value of <a>DeleteReplicaAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:DeleteReplicaAction'</a>,
--   <a>deleteReplicaAction_regionName</a> - The Region of the replica to
--   be removed.
newDeleteReplicaAction :: Text -> DeleteReplicaAction

-- | The Region of the replica to be removed.
deleteReplicaAction_regionName :: Lens' DeleteReplicaAction Text

-- | Represents a replica to be deleted.
--   
--   <i>See:</i> <a>newDeleteReplicationGroupMemberAction</a> smart
--   constructor.
data DeleteReplicationGroupMemberAction
DeleteReplicationGroupMemberAction' :: Text -> DeleteReplicationGroupMemberAction

-- | The Region where the replica exists.
[$sel:regionName:DeleteReplicationGroupMemberAction'] :: DeleteReplicationGroupMemberAction -> Text

-- | Create a value of <a>DeleteReplicationGroupMemberAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:DeleteReplicationGroupMemberAction'</a>,
--   <a>deleteReplicationGroupMemberAction_regionName</a> - The Region
--   where the replica exists.
newDeleteReplicationGroupMemberAction :: Text -> DeleteReplicationGroupMemberAction

-- | The Region where the replica exists.
deleteReplicationGroupMemberAction_regionName :: Lens' DeleteReplicationGroupMemberAction Text

-- | Represents a request to perform a <tt>DeleteItem</tt> operation on an
--   item.
--   
--   <i>See:</i> <a>newDeleteRequest</a> smart constructor.
data DeleteRequest
DeleteRequest' :: HashMap Text AttributeValue -> DeleteRequest

-- | A map of attribute name to attribute values, representing the primary
--   key of the item to delete. All of the table's primary key attributes
--   must be specified, and their data types must match those of the
--   table's key schema.
[$sel:key:DeleteRequest'] :: DeleteRequest -> HashMap Text AttributeValue

-- | Create a value of <a>DeleteRequest</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:DeleteRequest'</a>, <a>deleteRequest_key</a> - A map of
--   attribute name to attribute values, representing the primary key of
--   the item to delete. All of the table's primary key attributes must be
--   specified, and their data types must match those of the table's key
--   schema.
newDeleteRequest :: DeleteRequest

-- | A map of attribute name to attribute values, representing the primary
--   key of the item to delete. All of the table's primary key attributes
--   must be specified, and their data types must match those of the
--   table's key schema.
deleteRequest_key :: Lens' DeleteRequest (HashMap Text AttributeValue)

-- | An endpoint information details.
--   
--   <i>See:</i> <a>newEndpoint</a> smart constructor.
data Endpoint
Endpoint' :: Text -> Integer -> Endpoint

-- | IP address of the endpoint.
[$sel:address:Endpoint'] :: Endpoint -> Text

-- | Endpoint cache time to live (TTL) value.
[$sel:cachePeriodInMinutes:Endpoint'] :: Endpoint -> Integer

-- | Create a value of <a>Endpoint</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:address:Endpoint'</a>, <a>endpoint_address</a> - IP address of
--   the endpoint.
--   
--   <a>$sel:cachePeriodInMinutes:Endpoint'</a>,
--   <a>endpoint_cachePeriodInMinutes</a> - Endpoint cache time to live
--   (TTL) value.
newEndpoint :: Text -> Integer -> Endpoint

-- | IP address of the endpoint.
endpoint_address :: Lens' Endpoint Text

-- | Endpoint cache time to live (TTL) value.
endpoint_cachePeriodInMinutes :: Lens' Endpoint Integer

-- | Represents a condition to be compared with an attribute value. This
--   condition can be used with <tt>DeleteItem</tt>, <tt>PutItem</tt>, or
--   <tt>UpdateItem</tt> operations; if the comparison evaluates to true,
--   the operation succeeds; if not, the operation fails. You can use
--   <tt>ExpectedAttributeValue</tt> in one of two different ways:
--   
--   <ul>
--   <li>Use <tt>AttributeValueList</tt> to specify one or more values to
--   compare against an attribute. Use <tt>ComparisonOperator</tt> to
--   specify how you want to perform the comparison. If the comparison
--   evaluates to true, then the conditional operation succeeds.</li>
--   <li>Use <tt>Value</tt> to specify a value that DynamoDB will compare
--   against an attribute. If the values match, then
--   <tt>ExpectedAttributeValue</tt> evaluates to true and the conditional
--   operation succeeds. Optionally, you can also set <tt>Exists</tt> to
--   false, indicating that you <i>do not</i> expect to find the attribute
--   value in the table. In this case, the conditional operation succeeds
--   only if the comparison evaluates to false.</li>
--   </ul>
--   
--   <tt>Value</tt> and <tt>Exists</tt> are incompatible with
--   <tt>AttributeValueList</tt> and <tt>ComparisonOperator</tt>. Note that
--   if you use both sets of parameters at once, DynamoDB will return a
--   <tt>ValidationException</tt> exception.
--   
--   <i>See:</i> <a>newExpectedAttributeValue</a> smart constructor.
data ExpectedAttributeValue
ExpectedAttributeValue' :: Maybe [AttributeValue] -> Maybe Bool -> Maybe AttributeValue -> Maybe ComparisonOperator -> ExpectedAttributeValue

-- | One or more values to evaluate against the supplied attribute. The
--   number of values in the list depends on the
--   <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   For information on specifying data types in JSON, see <a>JSON Data
--   Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:attributeValueList:ExpectedAttributeValue'] :: ExpectedAttributeValue -> Maybe [AttributeValue]

-- | Causes DynamoDB to evaluate the value before attempting a conditional
--   operation:
--   
--   <ul>
--   <li>If <tt>Exists</tt> is <tt>true</tt>, DynamoDB will check to see if
--   that attribute value already exists in the table. If it is found, then
--   the operation succeeds. If it is not found, the operation fails with a
--   <tt>ConditionCheckFailedException</tt>.</li>
--   <li>If <tt>Exists</tt> is <tt>false</tt>, DynamoDB assumes that the
--   attribute value does not exist in the table. If in fact the value does
--   not exist, then the assumption is valid and the operation succeeds. If
--   the value is found, despite the assumption that it does not exist, the
--   operation fails with a <tt>ConditionCheckFailedException</tt>.</li>
--   </ul>
--   
--   The default setting for <tt>Exists</tt> is <tt>true</tt>. If you
--   supply a <tt>Value</tt> all by itself, DynamoDB assumes the attribute
--   exists: You don't have to set <tt>Exists</tt> to <tt>true</tt>,
--   because it is implied.
--   
--   DynamoDB returns a <tt>ValidationException</tt> if:
--   
--   <ul>
--   <li><tt>Exists</tt> is <tt>true</tt> but there is no <tt>Value</tt> to
--   check. (You expect a value to exist, but don't specify what that value
--   is.)</li>
--   <li><tt>Exists</tt> is <tt>false</tt> but you also provide a
--   <tt>Value</tt>. (You cannot expect an attribute to have a value, while
--   also expecting it not to exist.)</li>
--   </ul>
[$sel:exists:ExpectedAttributeValue'] :: ExpectedAttributeValue -> Maybe Bool

-- | Represents the data for the expected attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:value:ExpectedAttributeValue'] :: ExpectedAttributeValue -> Maybe AttributeValue

-- | A comparator for evaluating attributes in the
--   <tt>AttributeValueList</tt>. For example, equals, greater than, less
--   than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
[$sel:comparisonOperator:ExpectedAttributeValue'] :: ExpectedAttributeValue -> Maybe ComparisonOperator

-- | Create a value of <a>ExpectedAttributeValue</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeValueList:ExpectedAttributeValue'</a>,
--   <a>expectedAttributeValue_attributeValueList</a> - One or more values
--   to evaluate against the supplied attribute. The number of values in
--   the list depends on the <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   For information on specifying data types in JSON, see <a>JSON Data
--   Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:exists:ExpectedAttributeValue'</a>,
--   <a>expectedAttributeValue_exists</a> - Causes DynamoDB to evaluate the
--   value before attempting a conditional operation:
--   
--   <ul>
--   <li>If <tt>Exists</tt> is <tt>true</tt>, DynamoDB will check to see if
--   that attribute value already exists in the table. If it is found, then
--   the operation succeeds. If it is not found, the operation fails with a
--   <tt>ConditionCheckFailedException</tt>.</li>
--   <li>If <tt>Exists</tt> is <tt>false</tt>, DynamoDB assumes that the
--   attribute value does not exist in the table. If in fact the value does
--   not exist, then the assumption is valid and the operation succeeds. If
--   the value is found, despite the assumption that it does not exist, the
--   operation fails with a <tt>ConditionCheckFailedException</tt>.</li>
--   </ul>
--   
--   The default setting for <tt>Exists</tt> is <tt>true</tt>. If you
--   supply a <tt>Value</tt> all by itself, DynamoDB assumes the attribute
--   exists: You don't have to set <tt>Exists</tt> to <tt>true</tt>,
--   because it is implied.
--   
--   DynamoDB returns a <tt>ValidationException</tt> if:
--   
--   <ul>
--   <li><tt>Exists</tt> is <tt>true</tt> but there is no <tt>Value</tt> to
--   check. (You expect a value to exist, but don't specify what that value
--   is.)</li>
--   <li><tt>Exists</tt> is <tt>false</tt> but you also provide a
--   <tt>Value</tt>. (You cannot expect an attribute to have a value, while
--   also expecting it not to exist.)</li>
--   </ul>
--   
--   <a>$sel:value:ExpectedAttributeValue'</a>,
--   <a>expectedAttributeValue_value</a> - Represents the data for the
--   expected attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:comparisonOperator:ExpectedAttributeValue'</a>,
--   <a>expectedAttributeValue_comparisonOperator</a> - A comparator for
--   evaluating attributes in the <tt>AttributeValueList</tt>. For example,
--   equals, greater than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
newExpectedAttributeValue :: ExpectedAttributeValue

-- | One or more values to evaluate against the supplied attribute. The
--   number of values in the list depends on the
--   <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   For information on specifying data types in JSON, see <a>JSON Data
--   Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.
expectedAttributeValue_attributeValueList :: Lens' ExpectedAttributeValue (Maybe [AttributeValue])

-- | Causes DynamoDB to evaluate the value before attempting a conditional
--   operation:
--   
--   <ul>
--   <li>If <tt>Exists</tt> is <tt>true</tt>, DynamoDB will check to see if
--   that attribute value already exists in the table. If it is found, then
--   the operation succeeds. If it is not found, the operation fails with a
--   <tt>ConditionCheckFailedException</tt>.</li>
--   <li>If <tt>Exists</tt> is <tt>false</tt>, DynamoDB assumes that the
--   attribute value does not exist in the table. If in fact the value does
--   not exist, then the assumption is valid and the operation succeeds. If
--   the value is found, despite the assumption that it does not exist, the
--   operation fails with a <tt>ConditionCheckFailedException</tt>.</li>
--   </ul>
--   
--   The default setting for <tt>Exists</tt> is <tt>true</tt>. If you
--   supply a <tt>Value</tt> all by itself, DynamoDB assumes the attribute
--   exists: You don't have to set <tt>Exists</tt> to <tt>true</tt>,
--   because it is implied.
--   
--   DynamoDB returns a <tt>ValidationException</tt> if:
--   
--   <ul>
--   <li><tt>Exists</tt> is <tt>true</tt> but there is no <tt>Value</tt> to
--   check. (You expect a value to exist, but don't specify what that value
--   is.)</li>
--   <li><tt>Exists</tt> is <tt>false</tt> but you also provide a
--   <tt>Value</tt>. (You cannot expect an attribute to have a value, while
--   also expecting it not to exist.)</li>
--   </ul>
expectedAttributeValue_exists :: Lens' ExpectedAttributeValue (Maybe Bool)

-- | Represents the data for the expected attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
expectedAttributeValue_value :: Lens' ExpectedAttributeValue (Maybe AttributeValue)

-- | A comparator for evaluating attributes in the
--   <tt>AttributeValueList</tt>. For example, equals, greater than, less
--   than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
expectedAttributeValue_comparisonOperator :: Lens' ExpectedAttributeValue (Maybe ComparisonOperator)

-- | Represents the properties of the exported table.
--   
--   <i>See:</i> <a>newExportDescription</a> smart constructor.
data ExportDescription
ExportDescription' :: Maybe Text -> Maybe ExportFormat -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe ExportStatus -> Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> Maybe POSIX -> Maybe S3SseAlgorithm -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> ExportDescription

-- | The ID of the AWS account that owns the bucket containing the export.
[$sel:s3BucketOwner:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The format of the exported data. Valid values for
--   <tt>ExportFormat</tt> are <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
[$sel:exportFormat:ExportDescription'] :: ExportDescription -> Maybe ExportFormat

-- | The ID of the AWS KMS managed key used to encrypt the S3 bucket where
--   export data is stored (if applicable).
[$sel:s3SseKmsKeyId:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The client token that was provided for the export task. A client token
--   makes calls to <tt>ExportTableToPointInTimeInput</tt> idempotent,
--   meaning that multiple identical calls have the same effect as one
--   single call.
[$sel:clientToken:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The time at which the export task began.
[$sel:startTime:ExportDescription'] :: ExportDescription -> Maybe POSIX

-- | Status code for the result of the failed export.
[$sel:failureCode:ExportDescription'] :: ExportDescription -> Maybe Text

-- | Export can be in one of the following states: IN_PROGRESS, COMPLETED,
--   or FAILED.
[$sel:exportStatus:ExportDescription'] :: ExportDescription -> Maybe ExportStatus

-- | Export failure reason description.
[$sel:failureMessage:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The Amazon Resource Name (ARN) of the table that was exported.
[$sel:tableArn:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The billable size of the table export.
[$sel:billedSizeBytes:ExportDescription'] :: ExportDescription -> Maybe Natural

-- | The Amazon Resource Name (ARN) of the table export.
[$sel:exportArn:ExportDescription'] :: ExportDescription -> Maybe Text

-- | Point in time from which table data was exported.
[$sel:exportTime:ExportDescription'] :: ExportDescription -> Maybe POSIX

-- | Type of encryption used on the bucket where export data is stored.
--   Valid values for <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
[$sel:s3SseAlgorithm:ExportDescription'] :: ExportDescription -> Maybe S3SseAlgorithm

-- | The time at which the export task completed.
[$sel:endTime:ExportDescription'] :: ExportDescription -> Maybe POSIX

-- | The Amazon S3 bucket prefix used as the file name and path of the
--   exported snapshot.
[$sel:s3Prefix:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The name of the manifest file for the export task.
[$sel:exportManifest:ExportDescription'] :: ExportDescription -> Maybe Text

-- | Unique ID of the table that was exported.
[$sel:tableId:ExportDescription'] :: ExportDescription -> Maybe Text

-- | The number of items exported.
[$sel:itemCount:ExportDescription'] :: ExportDescription -> Maybe Natural

-- | The name of the Amazon S3 bucket containing the export.
[$sel:s3Bucket:ExportDescription'] :: ExportDescription -> Maybe Text

-- | Create a value of <a>ExportDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:s3BucketOwner:ExportDescription'</a>,
--   <a>exportDescription_s3BucketOwner</a> - The ID of the AWS account
--   that owns the bucket containing the export.
--   
--   <a>$sel:exportFormat:ExportDescription'</a>,
--   <a>exportDescription_exportFormat</a> - The format of the exported
--   data. Valid values for <tt>ExportFormat</tt> are
--   <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
--   
--   <a>$sel:s3SseKmsKeyId:ExportDescription'</a>,
--   <a>exportDescription_s3SseKmsKeyId</a> - The ID of the AWS KMS managed
--   key used to encrypt the S3 bucket where export data is stored (if
--   applicable).
--   
--   <a>$sel:clientToken:ExportDescription'</a>,
--   <a>exportDescription_clientToken</a> - The client token that was
--   provided for the export task. A client token makes calls to
--   <tt>ExportTableToPointInTimeInput</tt> idempotent, meaning that
--   multiple identical calls have the same effect as one single call.
--   
--   <a>$sel:startTime:ExportDescription'</a>,
--   <a>exportDescription_startTime</a> - The time at which the export task
--   began.
--   
--   <a>$sel:failureCode:ExportDescription'</a>,
--   <a>exportDescription_failureCode</a> - Status code for the result of
--   the failed export.
--   
--   <a>$sel:exportStatus:ExportDescription'</a>,
--   <a>exportDescription_exportStatus</a> - Export can be in one of the
--   following states: IN_PROGRESS, COMPLETED, or FAILED.
--   
--   <a>$sel:failureMessage:ExportDescription'</a>,
--   <a>exportDescription_failureMessage</a> - Export failure reason
--   description.
--   
--   <a>$sel:tableArn:ExportDescription'</a>,
--   <a>exportDescription_tableArn</a> - The Amazon Resource Name (ARN) of
--   the table that was exported.
--   
--   <a>$sel:billedSizeBytes:ExportDescription'</a>,
--   <a>exportDescription_billedSizeBytes</a> - The billable size of the
--   table export.
--   
--   <a>$sel:exportArn:ExportDescription'</a>,
--   <a>exportDescription_exportArn</a> - The Amazon Resource Name (ARN) of
--   the table export.
--   
--   <a>$sel:exportTime:ExportDescription'</a>,
--   <a>exportDescription_exportTime</a> - Point in time from which table
--   data was exported.
--   
--   <a>$sel:s3SseAlgorithm:ExportDescription'</a>,
--   <a>exportDescription_s3SseAlgorithm</a> - Type of encryption used on
--   the bucket where export data is stored. Valid values for
--   <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
--   
--   <a>$sel:endTime:ExportDescription'</a>,
--   <a>exportDescription_endTime</a> - The time at which the export task
--   completed.
--   
--   <a>$sel:s3Prefix:ExportDescription'</a>,
--   <a>exportDescription_s3Prefix</a> - The Amazon S3 bucket prefix used
--   as the file name and path of the exported snapshot.
--   
--   <a>$sel:exportManifest:ExportDescription'</a>,
--   <a>exportDescription_exportManifest</a> - The name of the manifest
--   file for the export task.
--   
--   <a>$sel:tableId:ExportDescription'</a>,
--   <a>exportDescription_tableId</a> - Unique ID of the table that was
--   exported.
--   
--   <a>$sel:itemCount:ExportDescription'</a>,
--   <a>exportDescription_itemCount</a> - The number of items exported.
--   
--   <a>$sel:s3Bucket:ExportDescription'</a>,
--   <a>exportDescription_s3Bucket</a> - The name of the Amazon S3 bucket
--   containing the export.
newExportDescription :: ExportDescription

-- | The ID of the AWS account that owns the bucket containing the export.
exportDescription_s3BucketOwner :: Lens' ExportDescription (Maybe Text)

-- | The format of the exported data. Valid values for
--   <tt>ExportFormat</tt> are <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
exportDescription_exportFormat :: Lens' ExportDescription (Maybe ExportFormat)

-- | The ID of the AWS KMS managed key used to encrypt the S3 bucket where
--   export data is stored (if applicable).
exportDescription_s3SseKmsKeyId :: Lens' ExportDescription (Maybe Text)

-- | The client token that was provided for the export task. A client token
--   makes calls to <tt>ExportTableToPointInTimeInput</tt> idempotent,
--   meaning that multiple identical calls have the same effect as one
--   single call.
exportDescription_clientToken :: Lens' ExportDescription (Maybe Text)

-- | The time at which the export task began.
exportDescription_startTime :: Lens' ExportDescription (Maybe UTCTime)

-- | Status code for the result of the failed export.
exportDescription_failureCode :: Lens' ExportDescription (Maybe Text)

-- | Export can be in one of the following states: IN_PROGRESS, COMPLETED,
--   or FAILED.
exportDescription_exportStatus :: Lens' ExportDescription (Maybe ExportStatus)

-- | Export failure reason description.
exportDescription_failureMessage :: Lens' ExportDescription (Maybe Text)

-- | The Amazon Resource Name (ARN) of the table that was exported.
exportDescription_tableArn :: Lens' ExportDescription (Maybe Text)

-- | The billable size of the table export.
exportDescription_billedSizeBytes :: Lens' ExportDescription (Maybe Natural)

-- | The Amazon Resource Name (ARN) of the table export.
exportDescription_exportArn :: Lens' ExportDescription (Maybe Text)

-- | Point in time from which table data was exported.
exportDescription_exportTime :: Lens' ExportDescription (Maybe UTCTime)

-- | Type of encryption used on the bucket where export data is stored.
--   Valid values for <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
exportDescription_s3SseAlgorithm :: Lens' ExportDescription (Maybe S3SseAlgorithm)

-- | The time at which the export task completed.
exportDescription_endTime :: Lens' ExportDescription (Maybe UTCTime)

-- | The Amazon S3 bucket prefix used as the file name and path of the
--   exported snapshot.
exportDescription_s3Prefix :: Lens' ExportDescription (Maybe Text)

-- | The name of the manifest file for the export task.
exportDescription_exportManifest :: Lens' ExportDescription (Maybe Text)

-- | Unique ID of the table that was exported.
exportDescription_tableId :: Lens' ExportDescription (Maybe Text)

-- | The number of items exported.
exportDescription_itemCount :: Lens' ExportDescription (Maybe Natural)

-- | The name of the Amazon S3 bucket containing the export.
exportDescription_s3Bucket :: Lens' ExportDescription (Maybe Text)

-- | Summary information about an export task.
--   
--   <i>See:</i> <a>newExportSummary</a> smart constructor.
data ExportSummary
ExportSummary' :: Maybe ExportStatus -> Maybe Text -> ExportSummary

-- | Export can be in one of the following states: IN_PROGRESS, COMPLETED,
--   or FAILED.
[$sel:exportStatus:ExportSummary'] :: ExportSummary -> Maybe ExportStatus

-- | The Amazon Resource Name (ARN) of the export.
[$sel:exportArn:ExportSummary'] :: ExportSummary -> Maybe Text

-- | Create a value of <a>ExportSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exportStatus:ExportSummary'</a>,
--   <a>exportSummary_exportStatus</a> - Export can be in one of the
--   following states: IN_PROGRESS, COMPLETED, or FAILED.
--   
--   <a>$sel:exportArn:ExportSummary'</a>, <a>exportSummary_exportArn</a> -
--   The Amazon Resource Name (ARN) of the export.
newExportSummary :: ExportSummary

-- | Export can be in one of the following states: IN_PROGRESS, COMPLETED,
--   or FAILED.
exportSummary_exportStatus :: Lens' ExportSummary (Maybe ExportStatus)

-- | The Amazon Resource Name (ARN) of the export.
exportSummary_exportArn :: Lens' ExportSummary (Maybe Text)

-- | Represents a failure a contributor insights operation.
--   
--   <i>See:</i> <a>newFailureException</a> smart constructor.
data FailureException
FailureException' :: Maybe Text -> Maybe Text -> FailureException

-- | Exception name.
[$sel:exceptionName:FailureException'] :: FailureException -> Maybe Text

-- | Description of the failure.
[$sel:exceptionDescription:FailureException'] :: FailureException -> Maybe Text

-- | Create a value of <a>FailureException</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exceptionName:FailureException'</a>,
--   <a>failureException_exceptionName</a> - Exception name.
--   
--   <a>$sel:exceptionDescription:FailureException'</a>,
--   <a>failureException_exceptionDescription</a> - Description of the
--   failure.
newFailureException :: FailureException

-- | Exception name.
failureException_exceptionName :: Lens' FailureException (Maybe Text)

-- | Description of the failure.
failureException_exceptionDescription :: Lens' FailureException (Maybe Text)

-- | Specifies an item and related attribute values to retrieve in a
--   <tt>TransactGetItem</tt> object.
--   
--   <i>See:</i> <a>newGet</a> smart constructor.
data Get
Get' :: Maybe Text -> Maybe (HashMap Text Text) -> HashMap Text AttributeValue -> Text -> Get

-- | A string that identifies one or more attributes of the specified item
--   to retrieve from the table. The attributes in the expression must be
--   separated by commas. If no attribute names are specified, then all
--   attributes of the specified item are returned. If any of the requested
--   attributes are not found, they do not appear in the result.
[$sel:projectionExpression:Get'] :: Get -> Maybe Text

-- | One or more substitution tokens for attribute names in the
--   ProjectionExpression parameter.
[$sel:expressionAttributeNames:Get'] :: Get -> Maybe (HashMap Text Text)

-- | A map of attribute names to <tt>AttributeValue</tt> objects that
--   specifies the primary key of the item to retrieve.
[$sel:key:Get'] :: Get -> HashMap Text AttributeValue

-- | The name of the table from which to retrieve the specified item.
[$sel:tableName:Get'] :: Get -> Text

-- | Create a value of <a>Get</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionExpression:Get'</a>, <a>get_projectionExpression</a>
--   - A string that identifies one or more attributes of the specified
--   item to retrieve from the table. The attributes in the expression must
--   be separated by commas. If no attribute names are specified, then all
--   attributes of the specified item are returned. If any of the requested
--   attributes are not found, they do not appear in the result.
--   
--   <a>$sel:expressionAttributeNames:Get'</a>,
--   <a>get_expressionAttributeNames</a> - One or more substitution tokens
--   for attribute names in the ProjectionExpression parameter.
--   
--   <a>$sel:key:Get'</a>, <a>get_key</a> - A map of attribute names to
--   <tt>AttributeValue</tt> objects that specifies the primary key of the
--   item to retrieve.
--   
--   <a>$sel:tableName:Get'</a>, <a>get_tableName</a> - The name of the
--   table from which to retrieve the specified item.
newGet :: Text -> Get

-- | A string that identifies one or more attributes of the specified item
--   to retrieve from the table. The attributes in the expression must be
--   separated by commas. If no attribute names are specified, then all
--   attributes of the specified item are returned. If any of the requested
--   attributes are not found, they do not appear in the result.
get_projectionExpression :: Lens' Get (Maybe Text)

-- | One or more substitution tokens for attribute names in the
--   ProjectionExpression parameter.
get_expressionAttributeNames :: Lens' Get (Maybe (HashMap Text Text))

-- | A map of attribute names to <tt>AttributeValue</tt> objects that
--   specifies the primary key of the item to retrieve.
get_key :: Lens' Get (HashMap Text AttributeValue)

-- | The name of the table from which to retrieve the specified item.
get_tableName :: Lens' Get Text

-- | Represents the properties of a global secondary index.
--   
--   <i>See:</i> <a>newGlobalSecondaryIndex</a> smart constructor.
data GlobalSecondaryIndex
GlobalSecondaryIndex' :: Maybe ProvisionedThroughput -> Text -> NonEmpty KeySchemaElement -> Projection -> GlobalSecondaryIndex

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:provisionedThroughput:GlobalSecondaryIndex'] :: GlobalSecondaryIndex -> Maybe ProvisionedThroughput

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
[$sel:indexName:GlobalSecondaryIndex'] :: GlobalSecondaryIndex -> Text

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keySchema:GlobalSecondaryIndex'] :: GlobalSecondaryIndex -> NonEmpty KeySchemaElement

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
[$sel:projection:GlobalSecondaryIndex'] :: GlobalSecondaryIndex -> Projection

-- | Create a value of <a>GlobalSecondaryIndex</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:provisionedThroughput:GlobalSecondaryIndex'</a>,
--   <a>globalSecondaryIndex_provisionedThroughput</a> - Represents the
--   provisioned throughput settings for the specified global secondary
--   index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:indexName:GlobalSecondaryIndex'</a>,
--   <a>globalSecondaryIndex_indexName</a> - The name of the global
--   secondary index. The name must be unique among all other indexes on
--   this table.
--   
--   <a>$sel:keySchema:GlobalSecondaryIndex'</a>,
--   <a>globalSecondaryIndex_keySchema</a> - The complete key schema for a
--   global secondary index, which consists of one or more pairs of
--   attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:GlobalSecondaryIndex'</a>,
--   <a>globalSecondaryIndex_projection</a> - Represents attributes that
--   are copied (projected) from the table into the global secondary index.
--   These are in addition to the primary key attributes and index key
--   attributes, which are automatically projected.
newGlobalSecondaryIndex :: Text -> NonEmpty KeySchemaElement -> Projection -> GlobalSecondaryIndex

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
globalSecondaryIndex_provisionedThroughput :: Lens' GlobalSecondaryIndex (Maybe ProvisionedThroughput)

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
globalSecondaryIndex_indexName :: Lens' GlobalSecondaryIndex Text

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
globalSecondaryIndex_keySchema :: Lens' GlobalSecondaryIndex (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
globalSecondaryIndex_projection :: Lens' GlobalSecondaryIndex Projection

-- | Represents the auto scaling settings of a global secondary index for a
--   global table that will be modified.
--   
--   <i>See:</i> <a>newGlobalSecondaryIndexAutoScalingUpdate</a> smart
--   constructor.
data GlobalSecondaryIndexAutoScalingUpdate
GlobalSecondaryIndexAutoScalingUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe Text -> GlobalSecondaryIndexAutoScalingUpdate
[$sel:provisionedWriteCapacityAutoScalingUpdate:GlobalSecondaryIndexAutoScalingUpdate'] :: GlobalSecondaryIndexAutoScalingUpdate -> Maybe AutoScalingSettingsUpdate

-- | The name of the global secondary index.
[$sel:indexName:GlobalSecondaryIndexAutoScalingUpdate'] :: GlobalSecondaryIndexAutoScalingUpdate -> Maybe Text

-- | Create a value of <a>GlobalSecondaryIndexAutoScalingUpdate</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingUpdate:GlobalSecondaryIndexAutoScalingUpdate'</a>,
--   <a>globalSecondaryIndexAutoScalingUpdate_provisionedWriteCapacityAutoScalingUpdate</a>
--   - Undocumented member.
--   
--   <a>$sel:indexName:GlobalSecondaryIndexAutoScalingUpdate'</a>,
--   <a>globalSecondaryIndexAutoScalingUpdate_indexName</a> - The name of
--   the global secondary index.
newGlobalSecondaryIndexAutoScalingUpdate :: GlobalSecondaryIndexAutoScalingUpdate

-- | Undocumented member.
globalSecondaryIndexAutoScalingUpdate_provisionedWriteCapacityAutoScalingUpdate :: Lens' GlobalSecondaryIndexAutoScalingUpdate (Maybe AutoScalingSettingsUpdate)

-- | The name of the global secondary index.
globalSecondaryIndexAutoScalingUpdate_indexName :: Lens' GlobalSecondaryIndexAutoScalingUpdate (Maybe Text)

-- | Represents the properties of a global secondary index.
--   
--   <i>See:</i> <a>newGlobalSecondaryIndexDescription</a> smart
--   constructor.
data GlobalSecondaryIndexDescription
GlobalSecondaryIndexDescription' :: Maybe Bool -> Maybe Integer -> Maybe IndexStatus -> Maybe ProvisionedThroughputDescription -> Maybe Text -> Maybe (NonEmpty KeySchemaElement) -> Maybe Projection -> Maybe Integer -> Maybe Text -> GlobalSecondaryIndexDescription

-- | Indicates whether the index is currently backfilling.
--   <i>Backfilling</i> is the process of reading items from the table and
--   determining whether they can be added to the index. (Not all items
--   will qualify: For example, a partition key cannot have any duplicate
--   values.) If an item can be added to the index, DynamoDB will do so.
--   After all items have been processed, the backfilling operation is
--   complete and <tt>Backfilling</tt> is false.
--   
--   You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false.
--   
--   For indexes that were created during a <tt>CreateTable</tt> operation,
--   the <tt>Backfilling</tt> attribute does not appear in the
--   <tt>DescribeTable</tt> output.
[$sel:backfilling:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe Bool

-- | The total size of the specified index, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
[$sel:indexSizeBytes:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe Integer

-- | The current state of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
[$sel:indexStatus:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe IndexStatus

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:provisionedThroughput:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe ProvisionedThroughputDescription

-- | The Amazon Resource Name (ARN) that uniquely identifies the index.
[$sel:indexArn:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe Text

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keySchema:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
[$sel:projection:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe Projection

-- | The number of items in the specified index. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
[$sel:itemCount:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe Integer

-- | The name of the global secondary index.
[$sel:indexName:GlobalSecondaryIndexDescription'] :: GlobalSecondaryIndexDescription -> Maybe Text

-- | Create a value of <a>GlobalSecondaryIndexDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backfilling:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_backfilling</a> - Indicates whether
--   the index is currently backfilling. <i>Backfilling</i> is the process
--   of reading items from the table and determining whether they can be
--   added to the index. (Not all items will qualify: For example, a
--   partition key cannot have any duplicate values.) If an item can be
--   added to the index, DynamoDB will do so. After all items have been
--   processed, the backfilling operation is complete and
--   <tt>Backfilling</tt> is false.
--   
--   You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false.
--   
--   For indexes that were created during a <tt>CreateTable</tt> operation,
--   the <tt>Backfilling</tt> attribute does not appear in the
--   <tt>DescribeTable</tt> output.
--   
--   <a>$sel:indexSizeBytes:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_indexSizeBytes</a> - The total size
--   of the specified index, in bytes. DynamoDB updates this value
--   approximately every six hours. Recent changes might not be reflected
--   in this value.
--   
--   <a>$sel:indexStatus:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_indexStatus</a> - The current state
--   of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
--   
--   <a>$sel:provisionedThroughput:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_provisionedThroughput</a> -
--   Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:indexArn:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_indexArn</a> - The Amazon Resource
--   Name (ARN) that uniquely identifies the index.
--   
--   <a>$sel:keySchema:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_keySchema</a> - The complete key
--   schema for a global secondary index, which consists of one or more
--   pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_projection</a> - Represents
--   attributes that are copied (projected) from the table into the global
--   secondary index. These are in addition to the primary key attributes
--   and index key attributes, which are automatically projected.
--   
--   <a>$sel:itemCount:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_itemCount</a> - The number of items
--   in the specified index. DynamoDB updates this value approximately
--   every six hours. Recent changes might not be reflected in this value.
--   
--   <a>$sel:indexName:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_indexName</a> - The name of the
--   global secondary index.
newGlobalSecondaryIndexDescription :: GlobalSecondaryIndexDescription

-- | Indicates whether the index is currently backfilling.
--   <i>Backfilling</i> is the process of reading items from the table and
--   determining whether they can be added to the index. (Not all items
--   will qualify: For example, a partition key cannot have any duplicate
--   values.) If an item can be added to the index, DynamoDB will do so.
--   After all items have been processed, the backfilling operation is
--   complete and <tt>Backfilling</tt> is false.
--   
--   You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false.
--   
--   For indexes that were created during a <tt>CreateTable</tt> operation,
--   the <tt>Backfilling</tt> attribute does not appear in the
--   <tt>DescribeTable</tt> output.
globalSecondaryIndexDescription_backfilling :: Lens' GlobalSecondaryIndexDescription (Maybe Bool)

-- | The total size of the specified index, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
globalSecondaryIndexDescription_indexSizeBytes :: Lens' GlobalSecondaryIndexDescription (Maybe Integer)

-- | The current state of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
globalSecondaryIndexDescription_indexStatus :: Lens' GlobalSecondaryIndexDescription (Maybe IndexStatus)

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
globalSecondaryIndexDescription_provisionedThroughput :: Lens' GlobalSecondaryIndexDescription (Maybe ProvisionedThroughputDescription)

-- | The Amazon Resource Name (ARN) that uniquely identifies the index.
globalSecondaryIndexDescription_indexArn :: Lens' GlobalSecondaryIndexDescription (Maybe Text)

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
globalSecondaryIndexDescription_keySchema :: Lens' GlobalSecondaryIndexDescription (Maybe (NonEmpty KeySchemaElement))

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
globalSecondaryIndexDescription_projection :: Lens' GlobalSecondaryIndexDescription (Maybe Projection)

-- | The number of items in the specified index. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
globalSecondaryIndexDescription_itemCount :: Lens' GlobalSecondaryIndexDescription (Maybe Integer)

-- | The name of the global secondary index.
globalSecondaryIndexDescription_indexName :: Lens' GlobalSecondaryIndexDescription (Maybe Text)

-- | Represents the properties of a global secondary index for the table
--   when the backup was created.
--   
--   <i>See:</i> <a>newGlobalSecondaryIndexInfo</a> smart constructor.
data GlobalSecondaryIndexInfo
GlobalSecondaryIndexInfo' :: Maybe ProvisionedThroughput -> Maybe (NonEmpty KeySchemaElement) -> Maybe Projection -> Maybe Text -> GlobalSecondaryIndexInfo

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
[$sel:provisionedThroughput:GlobalSecondaryIndexInfo'] :: GlobalSecondaryIndexInfo -> Maybe ProvisionedThroughput

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keySchema:GlobalSecondaryIndexInfo'] :: GlobalSecondaryIndexInfo -> Maybe (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
[$sel:projection:GlobalSecondaryIndexInfo'] :: GlobalSecondaryIndexInfo -> Maybe Projection

-- | The name of the global secondary index.
[$sel:indexName:GlobalSecondaryIndexInfo'] :: GlobalSecondaryIndexInfo -> Maybe Text

-- | Create a value of <a>GlobalSecondaryIndexInfo</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:provisionedThroughput:GlobalSecondaryIndexInfo'</a>,
--   <a>globalSecondaryIndexInfo_provisionedThroughput</a> - Represents the
--   provisioned throughput settings for the specified global secondary
--   index.
--   
--   <a>$sel:keySchema:GlobalSecondaryIndexInfo'</a>,
--   <a>globalSecondaryIndexInfo_keySchema</a> - The complete key schema
--   for a global secondary index, which consists of one or more pairs of
--   attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:GlobalSecondaryIndexInfo'</a>,
--   <a>globalSecondaryIndexInfo_projection</a> - Represents attributes
--   that are copied (projected) from the table into the global secondary
--   index. These are in addition to the primary key attributes and index
--   key attributes, which are automatically projected.
--   
--   <a>$sel:indexName:GlobalSecondaryIndexInfo'</a>,
--   <a>globalSecondaryIndexInfo_indexName</a> - The name of the global
--   secondary index.
newGlobalSecondaryIndexInfo :: GlobalSecondaryIndexInfo

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
globalSecondaryIndexInfo_provisionedThroughput :: Lens' GlobalSecondaryIndexInfo (Maybe ProvisionedThroughput)

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
globalSecondaryIndexInfo_keySchema :: Lens' GlobalSecondaryIndexInfo (Maybe (NonEmpty KeySchemaElement))

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
globalSecondaryIndexInfo_projection :: Lens' GlobalSecondaryIndexInfo (Maybe Projection)

-- | The name of the global secondary index.
globalSecondaryIndexInfo_indexName :: Lens' GlobalSecondaryIndexInfo (Maybe Text)

-- | Represents one of the following:
--   
--   <ul>
--   <li>A new global secondary index to be added to an existing
--   table.</li>
--   <li>New provisioned throughput parameters for an existing global
--   secondary index.</li>
--   <li>An existing global secondary index to be removed from an existing
--   table.</li>
--   </ul>
--   
--   <i>See:</i> <a>newGlobalSecondaryIndexUpdate</a> smart constructor.
data GlobalSecondaryIndexUpdate
GlobalSecondaryIndexUpdate' :: Maybe CreateGlobalSecondaryIndexAction -> Maybe DeleteGlobalSecondaryIndexAction -> Maybe UpdateGlobalSecondaryIndexAction -> GlobalSecondaryIndexUpdate

-- | The parameters required for creating a global secondary index on an
--   existing table:
--   
--   <ul>
--   <li><pre>IndexName</pre></li>
--   <li><pre>KeySchema</pre></li>
--   <li><pre>AttributeDefinitions</pre></li>
--   <li><pre>Projection</pre></li>
--   <li><pre>ProvisionedThroughput</pre></li>
--   </ul>
[$sel:create:GlobalSecondaryIndexUpdate'] :: GlobalSecondaryIndexUpdate -> Maybe CreateGlobalSecondaryIndexAction

-- | The name of an existing global secondary index to be removed.
[$sel:delete':GlobalSecondaryIndexUpdate'] :: GlobalSecondaryIndexUpdate -> Maybe DeleteGlobalSecondaryIndexAction

-- | The name of an existing global secondary index, along with new
--   provisioned throughput settings to be applied to that index.
[$sel:update:GlobalSecondaryIndexUpdate'] :: GlobalSecondaryIndexUpdate -> Maybe UpdateGlobalSecondaryIndexAction

-- | Create a value of <a>GlobalSecondaryIndexUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:create:GlobalSecondaryIndexUpdate'</a>,
--   <a>globalSecondaryIndexUpdate_create</a> - The parameters required for
--   creating a global secondary index on an existing table:
--   
--   <ul>
--   <li><pre>IndexName</pre></li>
--   <li><pre>KeySchema</pre></li>
--   <li><pre>AttributeDefinitions</pre></li>
--   <li><pre>Projection</pre></li>
--   <li><pre>ProvisionedThroughput</pre></li>
--   </ul>
--   
--   <a>$sel:delete':GlobalSecondaryIndexUpdate'</a>,
--   <a>globalSecondaryIndexUpdate_delete</a> - The name of an existing
--   global secondary index to be removed.
--   
--   <a>$sel:update:GlobalSecondaryIndexUpdate'</a>,
--   <a>globalSecondaryIndexUpdate_update</a> - The name of an existing
--   global secondary index, along with new provisioned throughput settings
--   to be applied to that index.
newGlobalSecondaryIndexUpdate :: GlobalSecondaryIndexUpdate

-- | The parameters required for creating a global secondary index on an
--   existing table:
--   
--   <ul>
--   <li><pre>IndexName</pre></li>
--   <li><pre>KeySchema</pre></li>
--   <li><pre>AttributeDefinitions</pre></li>
--   <li><pre>Projection</pre></li>
--   <li><pre>ProvisionedThroughput</pre></li>
--   </ul>
globalSecondaryIndexUpdate_create :: Lens' GlobalSecondaryIndexUpdate (Maybe CreateGlobalSecondaryIndexAction)

-- | The name of an existing global secondary index to be removed.
globalSecondaryIndexUpdate_delete :: Lens' GlobalSecondaryIndexUpdate (Maybe DeleteGlobalSecondaryIndexAction)

-- | The name of an existing global secondary index, along with new
--   provisioned throughput settings to be applied to that index.
globalSecondaryIndexUpdate_update :: Lens' GlobalSecondaryIndexUpdate (Maybe UpdateGlobalSecondaryIndexAction)

-- | Represents the properties of a global table.
--   
--   <i>See:</i> <a>newGlobalTable</a> smart constructor.
data GlobalTable
GlobalTable' :: Maybe Text -> Maybe [Replica] -> GlobalTable

-- | The global table name.
[$sel:globalTableName:GlobalTable'] :: GlobalTable -> Maybe Text

-- | The Regions where the global table has replicas.
[$sel:replicationGroup:GlobalTable'] :: GlobalTable -> Maybe [Replica]

-- | Create a value of <a>GlobalTable</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableName:GlobalTable'</a>,
--   <a>globalTable_globalTableName</a> - The global table name.
--   
--   <a>$sel:replicationGroup:GlobalTable'</a>,
--   <a>globalTable_replicationGroup</a> - The Regions where the global
--   table has replicas.
newGlobalTable :: GlobalTable

-- | The global table name.
globalTable_globalTableName :: Lens' GlobalTable (Maybe Text)

-- | The Regions where the global table has replicas.
globalTable_replicationGroup :: Lens' GlobalTable (Maybe [Replica])

-- | Contains details about the global table.
--   
--   <i>See:</i> <a>newGlobalTableDescription</a> smart constructor.
data GlobalTableDescription
GlobalTableDescription' :: Maybe GlobalTableStatus -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe [ReplicaDescription] -> GlobalTableDescription

-- | The current state of the global table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global table is being created.</li>
--   <li><tt>UPDATING</tt> - The global table is being updated.</li>
--   <li><tt>DELETING</tt> - The global table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The global table is ready for use.</li>
--   </ul>
[$sel:globalTableStatus:GlobalTableDescription'] :: GlobalTableDescription -> Maybe GlobalTableStatus

-- | The global table name.
[$sel:globalTableName:GlobalTableDescription'] :: GlobalTableDescription -> Maybe Text

-- | The unique identifier of the global table.
[$sel:globalTableArn:GlobalTableDescription'] :: GlobalTableDescription -> Maybe Text

-- | The creation time of the global table.
[$sel:creationDateTime:GlobalTableDescription'] :: GlobalTableDescription -> Maybe POSIX

-- | The Regions where the global table has replicas.
[$sel:replicationGroup:GlobalTableDescription'] :: GlobalTableDescription -> Maybe [ReplicaDescription]

-- | Create a value of <a>GlobalTableDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableStatus:GlobalTableDescription'</a>,
--   <a>globalTableDescription_globalTableStatus</a> - The current state of
--   the global table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global table is being created.</li>
--   <li><tt>UPDATING</tt> - The global table is being updated.</li>
--   <li><tt>DELETING</tt> - The global table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The global table is ready for use.</li>
--   </ul>
--   
--   <a>$sel:globalTableName:GlobalTableDescription'</a>,
--   <a>globalTableDescription_globalTableName</a> - The global table name.
--   
--   <a>$sel:globalTableArn:GlobalTableDescription'</a>,
--   <a>globalTableDescription_globalTableArn</a> - The unique identifier
--   of the global table.
--   
--   <a>$sel:creationDateTime:GlobalTableDescription'</a>,
--   <a>globalTableDescription_creationDateTime</a> - The creation time of
--   the global table.
--   
--   <a>$sel:replicationGroup:GlobalTableDescription'</a>,
--   <a>globalTableDescription_replicationGroup</a> - The Regions where the
--   global table has replicas.
newGlobalTableDescription :: GlobalTableDescription

-- | The current state of the global table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global table is being created.</li>
--   <li><tt>UPDATING</tt> - The global table is being updated.</li>
--   <li><tt>DELETING</tt> - The global table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The global table is ready for use.</li>
--   </ul>
globalTableDescription_globalTableStatus :: Lens' GlobalTableDescription (Maybe GlobalTableStatus)

-- | The global table name.
globalTableDescription_globalTableName :: Lens' GlobalTableDescription (Maybe Text)

-- | The unique identifier of the global table.
globalTableDescription_globalTableArn :: Lens' GlobalTableDescription (Maybe Text)

-- | The creation time of the global table.
globalTableDescription_creationDateTime :: Lens' GlobalTableDescription (Maybe UTCTime)

-- | The Regions where the global table has replicas.
globalTableDescription_replicationGroup :: Lens' GlobalTableDescription (Maybe [ReplicaDescription])

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
--   
--   <i>See:</i> <a>newGlobalTableGlobalSecondaryIndexSettingsUpdate</a>
--   smart constructor.
data GlobalTableGlobalSecondaryIndexSettingsUpdate
GlobalTableGlobalSecondaryIndexSettingsUpdate' :: Maybe Natural -> Maybe AutoScalingSettingsUpdate -> Text -> GlobalTableGlobalSecondaryIndexSettingsUpdate

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
[$sel:provisionedWriteCapacityUnits:GlobalTableGlobalSecondaryIndexSettingsUpdate'] :: GlobalTableGlobalSecondaryIndexSettingsUpdate -> Maybe Natural

-- | Auto scaling settings for managing a global secondary index's write
--   capacity units.
[$sel:provisionedWriteCapacityAutoScalingSettingsUpdate:GlobalTableGlobalSecondaryIndexSettingsUpdate'] :: GlobalTableGlobalSecondaryIndexSettingsUpdate -> Maybe AutoScalingSettingsUpdate

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
[$sel:indexName:GlobalTableGlobalSecondaryIndexSettingsUpdate'] :: GlobalTableGlobalSecondaryIndexSettingsUpdate -> Text

-- | Create a value of <a>GlobalTableGlobalSecondaryIndexSettingsUpdate</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedWriteCapacityUnits:GlobalTableGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>globalTableGlobalSecondaryIndexSettingsUpdate_provisionedWriteCapacityUnits</a>
--   - The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingSettingsUpdate:GlobalTableGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>globalTableGlobalSecondaryIndexSettingsUpdate_provisionedWriteCapacityAutoScalingSettingsUpdate</a>
--   - Auto scaling settings for managing a global secondary index's write
--   capacity units.
--   
--   <a>$sel:indexName:GlobalTableGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>globalTableGlobalSecondaryIndexSettingsUpdate_indexName</a> - The
--   name of the global secondary index. The name must be unique among all
--   other indexes on this table.
newGlobalTableGlobalSecondaryIndexSettingsUpdate :: Text -> GlobalTableGlobalSecondaryIndexSettingsUpdate

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
globalTableGlobalSecondaryIndexSettingsUpdate_provisionedWriteCapacityUnits :: Lens' GlobalTableGlobalSecondaryIndexSettingsUpdate (Maybe Natural)

-- | Auto scaling settings for managing a global secondary index's write
--   capacity units.
globalTableGlobalSecondaryIndexSettingsUpdate_provisionedWriteCapacityAutoScalingSettingsUpdate :: Lens' GlobalTableGlobalSecondaryIndexSettingsUpdate (Maybe AutoScalingSettingsUpdate)

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
globalTableGlobalSecondaryIndexSettingsUpdate_indexName :: Lens' GlobalTableGlobalSecondaryIndexSettingsUpdate Text

-- | Information about item collections, if any, that were affected by the
--   operation. <tt>ItemCollectionMetrics</tt> is only returned if the
--   request asked for it. If the table does not have any local secondary
--   indexes, this information is not returned in the response.
--   
--   <i>See:</i> <a>newItemCollectionMetrics</a> smart constructor.
data ItemCollectionMetrics
ItemCollectionMetrics' :: Maybe (HashMap Text AttributeValue) -> Maybe [Double] -> ItemCollectionMetrics

-- | The partition key value of the item collection. This value is the same
--   as the partition key value of the item.
[$sel:itemCollectionKey:ItemCollectionMetrics'] :: ItemCollectionMetrics -> Maybe (HashMap Text AttributeValue)

-- | An estimate of item collection size, in gigabytes. This value is a
--   two-element array containing a lower bound and an upper bound for the
--   estimate. The estimate includes the size of all the items in the
--   table, plus the size of all attributes projected into all of the local
--   secondary indexes on that table. Use this estimate to measure whether
--   a local secondary index is approaching its size limit.
--   
--   The estimate is subject to change over time; therefore, do not rely on
--   the precision or accuracy of the estimate.
[$sel:sizeEstimateRangeGB:ItemCollectionMetrics'] :: ItemCollectionMetrics -> Maybe [Double]

-- | Create a value of <a>ItemCollectionMetrics</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionKey:ItemCollectionMetrics'</a>,
--   <a>itemCollectionMetrics_itemCollectionKey</a> - The partition key
--   value of the item collection. This value is the same as the partition
--   key value of the item.
--   
--   <a>$sel:sizeEstimateRangeGB:ItemCollectionMetrics'</a>,
--   <a>itemCollectionMetrics_sizeEstimateRangeGB</a> - An estimate of item
--   collection size, in gigabytes. This value is a two-element array
--   containing a lower bound and an upper bound for the estimate. The
--   estimate includes the size of all the items in the table, plus the
--   size of all attributes projected into all of the local secondary
--   indexes on that table. Use this estimate to measure whether a local
--   secondary index is approaching its size limit.
--   
--   The estimate is subject to change over time; therefore, do not rely on
--   the precision or accuracy of the estimate.
newItemCollectionMetrics :: ItemCollectionMetrics

-- | The partition key value of the item collection. This value is the same
--   as the partition key value of the item.
itemCollectionMetrics_itemCollectionKey :: Lens' ItemCollectionMetrics (Maybe (HashMap Text AttributeValue))

-- | An estimate of item collection size, in gigabytes. This value is a
--   two-element array containing a lower bound and an upper bound for the
--   estimate. The estimate includes the size of all the items in the
--   table, plus the size of all attributes projected into all of the local
--   secondary indexes on that table. Use this estimate to measure whether
--   a local secondary index is approaching its size limit.
--   
--   The estimate is subject to change over time; therefore, do not rely on
--   the precision or accuracy of the estimate.
itemCollectionMetrics_sizeEstimateRangeGB :: Lens' ItemCollectionMetrics (Maybe [Double])

-- | Details for the requested item.
--   
--   <i>See:</i> <a>newItemResponse</a> smart constructor.
data ItemResponse
ItemResponse' :: Maybe (HashMap Text AttributeValue) -> ItemResponse

-- | Map of attribute data consisting of the data type and attribute value.
[$sel:item:ItemResponse'] :: ItemResponse -> Maybe (HashMap Text AttributeValue)

-- | Create a value of <a>ItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:item:ItemResponse'</a>, <a>itemResponse_item</a> - Map of
--   attribute data consisting of the data type and attribute value.
newItemResponse :: ItemResponse

-- | Map of attribute data consisting of the data type and attribute value.
itemResponse_item :: Lens' ItemResponse (Maybe (HashMap Text AttributeValue))

-- | Represents <i>a single element</i> of a key schema. A key schema
--   specifies the attributes that make up the primary key of a table, or
--   the key attributes of an index.
--   
--   A <tt>KeySchemaElement</tt> represents exactly one attribute of the
--   primary key. For example, a simple primary key would be represented by
--   one <tt>KeySchemaElement</tt> (for the partition key). A composite
--   primary key would require one <tt>KeySchemaElement</tt> for the
--   partition key, and another <tt>KeySchemaElement</tt> for the sort key.
--   
--   A <tt>KeySchemaElement</tt> must be a scalar, top-level attribute (not
--   a nested attribute). The data type must be one of String, Number, or
--   Binary. The attribute cannot be nested within a List or a Map.
--   
--   <i>See:</i> <a>newKeySchemaElement</a> smart constructor.
data KeySchemaElement
KeySchemaElement' :: Text -> KeyType -> KeySchemaElement

-- | The name of a key attribute.
[$sel:attributeName:KeySchemaElement'] :: KeySchemaElement -> Text

-- | The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keyType:KeySchemaElement'] :: KeySchemaElement -> KeyType

-- | Create a value of <a>KeySchemaElement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeName:KeySchemaElement'</a>,
--   <a>keySchemaElement_attributeName</a> - The name of a key attribute.
--   
--   <a>$sel:keyType:KeySchemaElement'</a>, <a>keySchemaElement_keyType</a>
--   - The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
newKeySchemaElement :: Text -> KeyType -> KeySchemaElement

-- | The name of a key attribute.
keySchemaElement_attributeName :: Lens' KeySchemaElement Text

-- | The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
keySchemaElement_keyType :: Lens' KeySchemaElement KeyType

-- | Represents a set of primary keys and, for each key, the attributes to
--   retrieve from the table.
--   
--   For each primary key, you must provide <i>all</i> of the key
--   attributes. For example, with a simple primary key, you only need to
--   provide the partition key. For a composite primary key, you must
--   provide <i>both</i> the partition key and the sort key.
--   
--   <i>See:</i> <a>newKeysAndAttributes</a> smart constructor.
data KeysAndAttributes
KeysAndAttributes' :: Maybe Text -> Maybe (NonEmpty Text) -> Maybe (HashMap Text Text) -> Maybe Bool -> NonEmpty (HashMap Text AttributeValue) -> KeysAndAttributes

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the <tt>ProjectionExpression</tt>
--   must be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:projectionExpression:KeysAndAttributes'] :: KeysAndAttributes -> Maybe Text

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>Legacy Conditional Parameters</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:attributesToGet:KeysAndAttributes'] :: KeysAndAttributes -> Maybe (NonEmpty Text)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Accessing
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:expressionAttributeNames:KeysAndAttributes'] :: KeysAndAttributes -> Maybe (HashMap Text Text)

-- | The consistency of a read operation. If set to <tt>true</tt>, then a
--   strongly consistent read is used; otherwise, an eventually consistent
--   read is used.
[$sel:consistentRead:KeysAndAttributes'] :: KeysAndAttributes -> Maybe Bool

-- | The primary key attribute values that define the items and the
--   attributes associated with the items.
[$sel:keys:KeysAndAttributes'] :: KeysAndAttributes -> NonEmpty (HashMap Text AttributeValue)

-- | Create a value of <a>KeysAndAttributes</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionExpression:KeysAndAttributes'</a>,
--   <a>keysAndAttributes_projectionExpression</a> - A string that
--   identifies one or more attributes to retrieve from the table. These
--   attributes can include scalars, sets, or elements of a JSON document.
--   The attributes in the <tt>ProjectionExpression</tt> must be separated
--   by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributesToGet:KeysAndAttributes'</a>,
--   <a>keysAndAttributes_attributesToGet</a> - This is a legacy parameter.
--   Use <tt>ProjectionExpression</tt> instead. For more information, see
--   <a>Legacy Conditional Parameters</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:expressionAttributeNames:KeysAndAttributes'</a>,
--   <a>keysAndAttributes_expressionAttributeNames</a> - One or more
--   substitution tokens for attribute names in an expression. The
--   following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Accessing
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:consistentRead:KeysAndAttributes'</a>,
--   <a>keysAndAttributes_consistentRead</a> - The consistency of a read
--   operation. If set to <tt>true</tt>, then a strongly consistent read is
--   used; otherwise, an eventually consistent read is used.
--   
--   <a>$sel:keys:KeysAndAttributes'</a>, <a>keysAndAttributes_keys</a> -
--   The primary key attribute values that define the items and the
--   attributes associated with the items.
newKeysAndAttributes :: NonEmpty (HashMap Text AttributeValue) -> KeysAndAttributes

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the <tt>ProjectionExpression</tt>
--   must be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
keysAndAttributes_projectionExpression :: Lens' KeysAndAttributes (Maybe Text)

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>Legacy Conditional Parameters</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
keysAndAttributes_attributesToGet :: Lens' KeysAndAttributes (Maybe (NonEmpty Text))

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Accessing
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
keysAndAttributes_expressionAttributeNames :: Lens' KeysAndAttributes (Maybe (HashMap Text Text))

-- | The consistency of a read operation. If set to <tt>true</tt>, then a
--   strongly consistent read is used; otherwise, an eventually consistent
--   read is used.
keysAndAttributes_consistentRead :: Lens' KeysAndAttributes (Maybe Bool)

-- | The primary key attribute values that define the items and the
--   attributes associated with the items.
keysAndAttributes_keys :: Lens' KeysAndAttributes (NonEmpty (HashMap Text AttributeValue))

-- | Describes a Kinesis data stream destination.
--   
--   <i>See:</i> <a>newKinesisDataStreamDestination</a> smart constructor.
data KinesisDataStreamDestination
KinesisDataStreamDestination' :: Maybe DestinationStatus -> Maybe Text -> Maybe Text -> KinesisDataStreamDestination

-- | The current status of replication.
[$sel:destinationStatus:KinesisDataStreamDestination'] :: KinesisDataStreamDestination -> Maybe DestinationStatus

-- | The ARN for a specific Kinesis data stream.
[$sel:streamArn:KinesisDataStreamDestination'] :: KinesisDataStreamDestination -> Maybe Text

-- | The human-readable string that corresponds to the replica status.
[$sel:destinationStatusDescription:KinesisDataStreamDestination'] :: KinesisDataStreamDestination -> Maybe Text

-- | Create a value of <a>KinesisDataStreamDestination</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:destinationStatus:KinesisDataStreamDestination'</a>,
--   <a>kinesisDataStreamDestination_destinationStatus</a> - The current
--   status of replication.
--   
--   <a>$sel:streamArn:KinesisDataStreamDestination'</a>,
--   <a>kinesisDataStreamDestination_streamArn</a> - The ARN for a specific
--   Kinesis data stream.
--   
--   
--   <a>$sel:destinationStatusDescription:KinesisDataStreamDestination'</a>,
--   <a>kinesisDataStreamDestination_destinationStatusDescription</a> - The
--   human-readable string that corresponds to the replica status.
newKinesisDataStreamDestination :: KinesisDataStreamDestination

-- | The current status of replication.
kinesisDataStreamDestination_destinationStatus :: Lens' KinesisDataStreamDestination (Maybe DestinationStatus)

-- | The ARN for a specific Kinesis data stream.
kinesisDataStreamDestination_streamArn :: Lens' KinesisDataStreamDestination (Maybe Text)

-- | The human-readable string that corresponds to the replica status.
kinesisDataStreamDestination_destinationStatusDescription :: Lens' KinesisDataStreamDestination (Maybe Text)

-- | <i>See:</i> <a>newKinesisStreamingDestinationInput</a> smart
--   constructor.
data KinesisStreamingDestinationInput
KinesisStreamingDestinationInput' :: Text -> Text -> KinesisStreamingDestinationInput

-- | The name of the DynamoDB table.
[$sel:tableName:KinesisStreamingDestinationInput'] :: KinesisStreamingDestinationInput -> Text

-- | The ARN for a Kinesis data stream.
[$sel:streamArn:KinesisStreamingDestinationInput'] :: KinesisStreamingDestinationInput -> Text

-- | Create a value of <a>KinesisStreamingDestinationInput</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:KinesisStreamingDestinationInput'</a>,
--   <a>kinesisStreamingDestinationInput_tableName</a> - The name of the
--   DynamoDB table.
--   
--   <a>$sel:streamArn:KinesisStreamingDestinationInput'</a>,
--   <a>kinesisStreamingDestinationInput_streamArn</a> - The ARN for a
--   Kinesis data stream.
newKinesisStreamingDestinationInput :: Text -> Text -> KinesisStreamingDestinationInput

-- | The name of the DynamoDB table.
kinesisStreamingDestinationInput_tableName :: Lens' KinesisStreamingDestinationInput Text

-- | The ARN for a Kinesis data stream.
kinesisStreamingDestinationInput_streamArn :: Lens' KinesisStreamingDestinationInput Text

-- | <i>See:</i> <a>newKinesisStreamingDestinationOutput</a> smart
--   constructor.
data KinesisStreamingDestinationOutput
KinesisStreamingDestinationOutput' :: Maybe DestinationStatus -> Maybe Text -> Maybe Text -> KinesisStreamingDestinationOutput

-- | The current status of the replication.
[$sel:destinationStatus:KinesisStreamingDestinationOutput'] :: KinesisStreamingDestinationOutput -> Maybe DestinationStatus

-- | The ARN for the specific Kinesis data stream.
[$sel:streamArn:KinesisStreamingDestinationOutput'] :: KinesisStreamingDestinationOutput -> Maybe Text

-- | The name of the table being modified.
[$sel:tableName:KinesisStreamingDestinationOutput'] :: KinesisStreamingDestinationOutput -> Maybe Text

-- | Create a value of <a>KinesisStreamingDestinationOutput</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:destinationStatus:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_destinationStatus</a> - The
--   current status of the replication.
--   
--   <a>$sel:streamArn:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_streamArn</a> - The ARN for the
--   specific Kinesis data stream.
--   
--   <a>$sel:tableName:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_tableName</a> - The name of the
--   table being modified.
newKinesisStreamingDestinationOutput :: KinesisStreamingDestinationOutput

-- | The current status of the replication.
kinesisStreamingDestinationOutput_destinationStatus :: Lens' KinesisStreamingDestinationOutput (Maybe DestinationStatus)

-- | The ARN for the specific Kinesis data stream.
kinesisStreamingDestinationOutput_streamArn :: Lens' KinesisStreamingDestinationOutput (Maybe Text)

-- | The name of the table being modified.
kinesisStreamingDestinationOutput_tableName :: Lens' KinesisStreamingDestinationOutput (Maybe Text)

-- | Represents the properties of a local secondary index.
--   
--   <i>See:</i> <a>newLocalSecondaryIndex</a> smart constructor.
data LocalSecondaryIndex
LocalSecondaryIndex' :: Text -> NonEmpty KeySchemaElement -> Projection -> LocalSecondaryIndex

-- | The name of the local secondary index. The name must be unique among
--   all other indexes on this table.
[$sel:indexName:LocalSecondaryIndex'] :: LocalSecondaryIndex -> Text

-- | The complete key schema for the local secondary index, consisting of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keySchema:LocalSecondaryIndex'] :: LocalSecondaryIndex -> NonEmpty KeySchemaElement

-- | Represents attributes that are copied (projected) from the table into
--   the local secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
[$sel:projection:LocalSecondaryIndex'] :: LocalSecondaryIndex -> Projection

-- | Create a value of <a>LocalSecondaryIndex</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:LocalSecondaryIndex'</a>,
--   <a>localSecondaryIndex_indexName</a> - The name of the local secondary
--   index. The name must be unique among all other indexes on this table.
--   
--   <a>$sel:keySchema:LocalSecondaryIndex'</a>,
--   <a>localSecondaryIndex_keySchema</a> - The complete key schema for the
--   local secondary index, consisting of one or more pairs of attribute
--   names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:LocalSecondaryIndex'</a>,
--   <a>localSecondaryIndex_projection</a> - Represents attributes that are
--   copied (projected) from the table into the local secondary index.
--   These are in addition to the primary key attributes and index key
--   attributes, which are automatically projected.
newLocalSecondaryIndex :: Text -> NonEmpty KeySchemaElement -> Projection -> LocalSecondaryIndex

-- | The name of the local secondary index. The name must be unique among
--   all other indexes on this table.
localSecondaryIndex_indexName :: Lens' LocalSecondaryIndex Text

-- | The complete key schema for the local secondary index, consisting of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
localSecondaryIndex_keySchema :: Lens' LocalSecondaryIndex (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the local secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
localSecondaryIndex_projection :: Lens' LocalSecondaryIndex Projection

-- | Represents the properties of a local secondary index.
--   
--   <i>See:</i> <a>newLocalSecondaryIndexDescription</a> smart
--   constructor.
data LocalSecondaryIndexDescription
LocalSecondaryIndexDescription' :: Maybe Integer -> Maybe Text -> Maybe (NonEmpty KeySchemaElement) -> Maybe Projection -> Maybe Integer -> Maybe Text -> LocalSecondaryIndexDescription

-- | The total size of the specified index, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
[$sel:indexSizeBytes:LocalSecondaryIndexDescription'] :: LocalSecondaryIndexDescription -> Maybe Integer

-- | The Amazon Resource Name (ARN) that uniquely identifies the index.
[$sel:indexArn:LocalSecondaryIndexDescription'] :: LocalSecondaryIndexDescription -> Maybe Text

-- | The complete key schema for the local secondary index, consisting of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keySchema:LocalSecondaryIndexDescription'] :: LocalSecondaryIndexDescription -> Maybe (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
[$sel:projection:LocalSecondaryIndexDescription'] :: LocalSecondaryIndexDescription -> Maybe Projection

-- | The number of items in the specified index. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
[$sel:itemCount:LocalSecondaryIndexDescription'] :: LocalSecondaryIndexDescription -> Maybe Integer

-- | Represents the name of the local secondary index.
[$sel:indexName:LocalSecondaryIndexDescription'] :: LocalSecondaryIndexDescription -> Maybe Text

-- | Create a value of <a>LocalSecondaryIndexDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexSizeBytes:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_indexSizeBytes</a> - The total size
--   of the specified index, in bytes. DynamoDB updates this value
--   approximately every six hours. Recent changes might not be reflected
--   in this value.
--   
--   <a>$sel:indexArn:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_indexArn</a> - The Amazon Resource
--   Name (ARN) that uniquely identifies the index.
--   
--   <a>$sel:keySchema:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_keySchema</a> - The complete key
--   schema for the local secondary index, consisting of one or more pairs
--   of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_projection</a> - Represents
--   attributes that are copied (projected) from the table into the global
--   secondary index. These are in addition to the primary key attributes
--   and index key attributes, which are automatically projected.
--   
--   <a>$sel:itemCount:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_itemCount</a> - The number of items
--   in the specified index. DynamoDB updates this value approximately
--   every six hours. Recent changes might not be reflected in this value.
--   
--   <a>$sel:indexName:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_indexName</a> - Represents the name
--   of the local secondary index.
newLocalSecondaryIndexDescription :: LocalSecondaryIndexDescription

-- | The total size of the specified index, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
localSecondaryIndexDescription_indexSizeBytes :: Lens' LocalSecondaryIndexDescription (Maybe Integer)

-- | The Amazon Resource Name (ARN) that uniquely identifies the index.
localSecondaryIndexDescription_indexArn :: Lens' LocalSecondaryIndexDescription (Maybe Text)

-- | The complete key schema for the local secondary index, consisting of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
localSecondaryIndexDescription_keySchema :: Lens' LocalSecondaryIndexDescription (Maybe (NonEmpty KeySchemaElement))

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
localSecondaryIndexDescription_projection :: Lens' LocalSecondaryIndexDescription (Maybe Projection)

-- | The number of items in the specified index. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
localSecondaryIndexDescription_itemCount :: Lens' LocalSecondaryIndexDescription (Maybe Integer)

-- | Represents the name of the local secondary index.
localSecondaryIndexDescription_indexName :: Lens' LocalSecondaryIndexDescription (Maybe Text)

-- | Represents the properties of a local secondary index for the table
--   when the backup was created.
--   
--   <i>See:</i> <a>newLocalSecondaryIndexInfo</a> smart constructor.
data LocalSecondaryIndexInfo
LocalSecondaryIndexInfo' :: Maybe (NonEmpty KeySchemaElement) -> Maybe Projection -> Maybe Text -> LocalSecondaryIndexInfo

-- | The complete key schema for a local secondary index, which consists of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
[$sel:keySchema:LocalSecondaryIndexInfo'] :: LocalSecondaryIndexInfo -> Maybe (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
[$sel:projection:LocalSecondaryIndexInfo'] :: LocalSecondaryIndexInfo -> Maybe Projection

-- | Represents the name of the local secondary index.
[$sel:indexName:LocalSecondaryIndexInfo'] :: LocalSecondaryIndexInfo -> Maybe Text

-- | Create a value of <a>LocalSecondaryIndexInfo</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keySchema:LocalSecondaryIndexInfo'</a>,
--   <a>localSecondaryIndexInfo_keySchema</a> - The complete key schema for
--   a local secondary index, which consists of one or more pairs of
--   attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:LocalSecondaryIndexInfo'</a>,
--   <a>localSecondaryIndexInfo_projection</a> - Represents attributes that
--   are copied (projected) from the table into the global secondary index.
--   These are in addition to the primary key attributes and index key
--   attributes, which are automatically projected.
--   
--   <a>$sel:indexName:LocalSecondaryIndexInfo'</a>,
--   <a>localSecondaryIndexInfo_indexName</a> - Represents the name of the
--   local secondary index.
newLocalSecondaryIndexInfo :: LocalSecondaryIndexInfo

-- | The complete key schema for a local secondary index, which consists of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
localSecondaryIndexInfo_keySchema :: Lens' LocalSecondaryIndexInfo (Maybe (NonEmpty KeySchemaElement))

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
localSecondaryIndexInfo_projection :: Lens' LocalSecondaryIndexInfo (Maybe Projection)

-- | Represents the name of the local secondary index.
localSecondaryIndexInfo_indexName :: Lens' LocalSecondaryIndexInfo (Maybe Text)

-- | Represents a PartiQL statment that uses parameters.
--   
--   <i>See:</i> <a>newParameterizedStatement</a> smart constructor.
data ParameterizedStatement
ParameterizedStatement' :: Maybe (NonEmpty AttributeValue) -> Text -> ParameterizedStatement

-- | The parameter values.
[$sel:parameters:ParameterizedStatement'] :: ParameterizedStatement -> Maybe (NonEmpty AttributeValue)

-- | A PartiQL statment that uses parameters.
[$sel:statement:ParameterizedStatement'] :: ParameterizedStatement -> Text

-- | Create a value of <a>ParameterizedStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:parameters:ParameterizedStatement'</a>,
--   <a>parameterizedStatement_parameters</a> - The parameter values.
--   
--   <a>$sel:statement:ParameterizedStatement'</a>,
--   <a>parameterizedStatement_statement</a> - A PartiQL statment that uses
--   parameters.
newParameterizedStatement :: Text -> ParameterizedStatement

-- | The parameter values.
parameterizedStatement_parameters :: Lens' ParameterizedStatement (Maybe (NonEmpty AttributeValue))

-- | A PartiQL statment that uses parameters.
parameterizedStatement_statement :: Lens' ParameterizedStatement Text

-- | The description of the point in time settings applied to the table.
--   
--   <i>See:</i> <a>newPointInTimeRecoveryDescription</a> smart
--   constructor.
data PointInTimeRecoveryDescription
PointInTimeRecoveryDescription' :: Maybe PointInTimeRecoveryStatus -> Maybe POSIX -> Maybe POSIX -> PointInTimeRecoveryDescription

-- | The current state of point in time recovery:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Point in time recovery is being enabled.</li>
--   <li><tt>ENABLED</tt> - Point in time recovery is enabled.</li>
--   <li><tt>DISABLED</tt> - Point in time recovery is disabled.</li>
--   </ul>
[$sel:pointInTimeRecoveryStatus:PointInTimeRecoveryDescription'] :: PointInTimeRecoveryDescription -> Maybe PointInTimeRecoveryStatus

-- | Specifies the earliest point in time you can restore your table to.
--   You can restore your table to any point in time during the last 35
--   days.
[$sel:earliestRestorableDateTime:PointInTimeRecoveryDescription'] :: PointInTimeRecoveryDescription -> Maybe POSIX

-- | <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time.
[$sel:latestRestorableDateTime:PointInTimeRecoveryDescription'] :: PointInTimeRecoveryDescription -> Maybe POSIX

-- | Create a value of <a>PointInTimeRecoveryDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pointInTimeRecoveryStatus:PointInTimeRecoveryDescription'</a>,
--   <a>pointInTimeRecoveryDescription_pointInTimeRecoveryStatus</a> - The
--   current state of point in time recovery:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Point in time recovery is being enabled.</li>
--   <li><tt>ENABLED</tt> - Point in time recovery is enabled.</li>
--   <li><tt>DISABLED</tt> - Point in time recovery is disabled.</li>
--   </ul>
--   
--   
--   <a>$sel:earliestRestorableDateTime:PointInTimeRecoveryDescription'</a>,
--   <a>pointInTimeRecoveryDescription_earliestRestorableDateTime</a> -
--   Specifies the earliest point in time you can restore your table to.
--   You can restore your table to any point in time during the last 35
--   days.
--   
--   <a>$sel:latestRestorableDateTime:PointInTimeRecoveryDescription'</a>,
--   <a>pointInTimeRecoveryDescription_latestRestorableDateTime</a> -
--   <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time.
newPointInTimeRecoveryDescription :: PointInTimeRecoveryDescription

-- | The current state of point in time recovery:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Point in time recovery is being enabled.</li>
--   <li><tt>ENABLED</tt> - Point in time recovery is enabled.</li>
--   <li><tt>DISABLED</tt> - Point in time recovery is disabled.</li>
--   </ul>
pointInTimeRecoveryDescription_pointInTimeRecoveryStatus :: Lens' PointInTimeRecoveryDescription (Maybe PointInTimeRecoveryStatus)

-- | Specifies the earliest point in time you can restore your table to.
--   You can restore your table to any point in time during the last 35
--   days.
pointInTimeRecoveryDescription_earliestRestorableDateTime :: Lens' PointInTimeRecoveryDescription (Maybe UTCTime)

-- | <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time.
pointInTimeRecoveryDescription_latestRestorableDateTime :: Lens' PointInTimeRecoveryDescription (Maybe UTCTime)

-- | Represents the settings used to enable point in time recovery.
--   
--   <i>See:</i> <a>newPointInTimeRecoverySpecification</a> smart
--   constructor.
data PointInTimeRecoverySpecification
PointInTimeRecoverySpecification' :: Bool -> PointInTimeRecoverySpecification

-- | Indicates whether point in time recovery is enabled (true) or disabled
--   (false) on the table.
[$sel:pointInTimeRecoveryEnabled:PointInTimeRecoverySpecification'] :: PointInTimeRecoverySpecification -> Bool

-- | Create a value of <a>PointInTimeRecoverySpecification</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:pointInTimeRecoveryEnabled:PointInTimeRecoverySpecification'</a>,
--   <a>pointInTimeRecoverySpecification_pointInTimeRecoveryEnabled</a> -
--   Indicates whether point in time recovery is enabled (true) or disabled
--   (false) on the table.
newPointInTimeRecoverySpecification :: Bool -> PointInTimeRecoverySpecification

-- | Indicates whether point in time recovery is enabled (true) or disabled
--   (false) on the table.
pointInTimeRecoverySpecification_pointInTimeRecoveryEnabled :: Lens' PointInTimeRecoverySpecification Bool

-- | Represents attributes that are copied (projected) from the table into
--   an index. These are in addition to the primary key attributes and
--   index key attributes, which are automatically projected.
--   
--   <i>See:</i> <a>newProjection</a> smart constructor.
data Projection
Projection' :: Maybe ProjectionType -> Maybe (NonEmpty Text) -> Projection

-- | The set of attributes that are projected into the index:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.</li>
--   <li><tt>INCLUDE</tt> - In addition to the attributes described in
--   <tt>KEYS_ONLY</tt>, the secondary index will include other non-key
--   attributes that you specify.</li>
--   <li><tt>ALL</tt> - All of the table attributes are projected into the
--   index.</li>
--   </ul>
[$sel:projectionType:Projection'] :: Projection -> Maybe ProjectionType

-- | Represents the non-key attribute names which will be projected into
--   the index.
--   
--   For local secondary indexes, the total count of
--   <tt>NonKeyAttributes</tt> summed across all of the local secondary
--   indexes, must not exceed 20. If you project the same attribute into
--   two different indexes, this counts as two distinct attributes when
--   determining the total.
[$sel:nonKeyAttributes:Projection'] :: Projection -> Maybe (NonEmpty Text)

-- | Create a value of <a>Projection</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionType:Projection'</a>,
--   <a>projection_projectionType</a> - The set of attributes that are
--   projected into the index:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.</li>
--   <li><tt>INCLUDE</tt> - In addition to the attributes described in
--   <tt>KEYS_ONLY</tt>, the secondary index will include other non-key
--   attributes that you specify.</li>
--   <li><tt>ALL</tt> - All of the table attributes are projected into the
--   index.</li>
--   </ul>
--   
--   <a>$sel:nonKeyAttributes:Projection'</a>,
--   <a>projection_nonKeyAttributes</a> - Represents the non-key attribute
--   names which will be projected into the index.
--   
--   For local secondary indexes, the total count of
--   <tt>NonKeyAttributes</tt> summed across all of the local secondary
--   indexes, must not exceed 20. If you project the same attribute into
--   two different indexes, this counts as two distinct attributes when
--   determining the total.
newProjection :: Projection

-- | The set of attributes that are projected into the index:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.</li>
--   <li><tt>INCLUDE</tt> - In addition to the attributes described in
--   <tt>KEYS_ONLY</tt>, the secondary index will include other non-key
--   attributes that you specify.</li>
--   <li><tt>ALL</tt> - All of the table attributes are projected into the
--   index.</li>
--   </ul>
projection_projectionType :: Lens' Projection (Maybe ProjectionType)

-- | Represents the non-key attribute names which will be projected into
--   the index.
--   
--   For local secondary indexes, the total count of
--   <tt>NonKeyAttributes</tt> summed across all of the local secondary
--   indexes, must not exceed 20. If you project the same attribute into
--   two different indexes, this counts as two distinct attributes when
--   determining the total.
projection_nonKeyAttributes :: Lens' Projection (Maybe (NonEmpty Text))

-- | Represents the provisioned throughput settings for a specified table
--   or index. The settings can be modified using the <tt>UpdateTable</tt>
--   operation.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newProvisionedThroughput</a> smart constructor.
data ProvisionedThroughput
ProvisionedThroughput' :: Natural -> Natural -> ProvisionedThroughput

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
[$sel:readCapacityUnits:ProvisionedThroughput'] :: ProvisionedThroughput -> Natural

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
[$sel:writeCapacityUnits:ProvisionedThroughput'] :: ProvisionedThroughput -> Natural

-- | Create a value of <a>ProvisionedThroughput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:ProvisionedThroughput'</a>,
--   <a>provisionedThroughput_readCapacityUnits</a> - The maximum number of
--   strongly consistent reads consumed per second before DynamoDB returns
--   a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
--   
--   <a>$sel:writeCapacityUnits:ProvisionedThroughput'</a>,
--   <a>provisionedThroughput_writeCapacityUnits</a> - The maximum number
--   of writes consumed per second before DynamoDB returns a
--   <tt>ThrottlingException</tt>. For more information, see <a>Specifying
--   Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
newProvisionedThroughput :: Natural -> Natural -> ProvisionedThroughput

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
provisionedThroughput_readCapacityUnits :: Lens' ProvisionedThroughput Natural

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
provisionedThroughput_writeCapacityUnits :: Lens' ProvisionedThroughput Natural

-- | Represents the provisioned throughput settings for the table,
--   consisting of read and write capacity units, along with data about
--   increases and decreases.
--   
--   <i>See:</i> <a>newProvisionedThroughputDescription</a> smart
--   constructor.
data ProvisionedThroughputDescription
ProvisionedThroughputDescription' :: Maybe Natural -> Maybe POSIX -> Maybe Natural -> Maybe Natural -> Maybe POSIX -> ProvisionedThroughputDescription

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. Eventually
--   consistent reads require less effort than strongly consistent reads,
--   so a setting of 50 <tt>ReadCapacityUnits</tt> per second provides 100
--   eventually consistent <tt>ReadCapacityUnits</tt> per second.
[$sel:readCapacityUnits:ProvisionedThroughputDescription'] :: ProvisionedThroughputDescription -> Maybe Natural

-- | The date and time of the last provisioned throughput decrease for this
--   table.
[$sel:lastDecreaseDateTime:ProvisionedThroughputDescription'] :: ProvisionedThroughputDescription -> Maybe POSIX

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
[$sel:writeCapacityUnits:ProvisionedThroughputDescription'] :: ProvisionedThroughputDescription -> Maybe Natural

-- | The number of provisioned throughput decreases for this table during
--   this UTC calendar day. For current maximums on provisioned throughput
--   decreases, see <a>Service, Account, and Table Quotas</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:numberOfDecreasesToday:ProvisionedThroughputDescription'] :: ProvisionedThroughputDescription -> Maybe Natural

-- | The date and time of the last provisioned throughput increase for this
--   table.
[$sel:lastIncreaseDateTime:ProvisionedThroughputDescription'] :: ProvisionedThroughputDescription -> Maybe POSIX

-- | Create a value of <a>ProvisionedThroughputDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_readCapacityUnits</a> - The
--   maximum number of strongly consistent reads consumed per second before
--   DynamoDB returns a <tt>ThrottlingException</tt>. Eventually consistent
--   reads require less effort than strongly consistent reads, so a setting
--   of 50 <tt>ReadCapacityUnits</tt> per second provides 100 eventually
--   consistent <tt>ReadCapacityUnits</tt> per second.
--   
--   <a>$sel:lastDecreaseDateTime:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_lastDecreaseDateTime</a> - The
--   date and time of the last provisioned throughput decrease for this
--   table.
--   
--   <a>$sel:writeCapacityUnits:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_writeCapacityUnits</a> - The
--   maximum number of writes consumed per second before DynamoDB returns a
--   <tt>ThrottlingException</tt>.
--   
--   <a>$sel:numberOfDecreasesToday:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_numberOfDecreasesToday</a> - The
--   number of provisioned throughput decreases for this table during this
--   UTC calendar day. For current maximums on provisioned throughput
--   decreases, see <a>Service, Account, and Table Quotas</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:lastIncreaseDateTime:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_lastIncreaseDateTime</a> - The
--   date and time of the last provisioned throughput increase for this
--   table.
newProvisionedThroughputDescription :: ProvisionedThroughputDescription

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. Eventually
--   consistent reads require less effort than strongly consistent reads,
--   so a setting of 50 <tt>ReadCapacityUnits</tt> per second provides 100
--   eventually consistent <tt>ReadCapacityUnits</tt> per second.
provisionedThroughputDescription_readCapacityUnits :: Lens' ProvisionedThroughputDescription (Maybe Natural)

-- | The date and time of the last provisioned throughput decrease for this
--   table.
provisionedThroughputDescription_lastDecreaseDateTime :: Lens' ProvisionedThroughputDescription (Maybe UTCTime)

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
provisionedThroughputDescription_writeCapacityUnits :: Lens' ProvisionedThroughputDescription (Maybe Natural)

-- | The number of provisioned throughput decreases for this table during
--   this UTC calendar day. For current maximums on provisioned throughput
--   decreases, see <a>Service, Account, and Table Quotas</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
provisionedThroughputDescription_numberOfDecreasesToday :: Lens' ProvisionedThroughputDescription (Maybe Natural)

-- | The date and time of the last provisioned throughput increase for this
--   table.
provisionedThroughputDescription_lastIncreaseDateTime :: Lens' ProvisionedThroughputDescription (Maybe UTCTime)

-- | Replica-specific provisioned throughput settings. If not specified,
--   uses the source table's provisioned throughput settings.
--   
--   <i>See:</i> <a>newProvisionedThroughputOverride</a> smart constructor.
data ProvisionedThroughputOverride
ProvisionedThroughputOverride' :: Maybe Natural -> ProvisionedThroughputOverride

-- | Replica-specific read capacity units. If not specified, uses the
--   source table's read capacity settings.
[$sel:readCapacityUnits:ProvisionedThroughputOverride'] :: ProvisionedThroughputOverride -> Maybe Natural

-- | Create a value of <a>ProvisionedThroughputOverride</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:ProvisionedThroughputOverride'</a>,
--   <a>provisionedThroughputOverride_readCapacityUnits</a> -
--   Replica-specific read capacity units. If not specified, uses the
--   source table's read capacity settings.
newProvisionedThroughputOverride :: ProvisionedThroughputOverride

-- | Replica-specific read capacity units. If not specified, uses the
--   source table's read capacity settings.
provisionedThroughputOverride_readCapacityUnits :: Lens' ProvisionedThroughputOverride (Maybe Natural)

-- | Represents a request to perform a <tt>PutItem</tt> operation.
--   
--   <i>See:</i> <a>newPut</a> smart constructor.
data Put
Put' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnValuesOnConditionCheckFailure -> Maybe Text -> HashMap Text AttributeValue -> Text -> Put

-- | One or more substitution tokens for attribute names in an expression.
[$sel:expressionAttributeNames:Put'] :: Put -> Maybe (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
[$sel:expressionAttributeValues:Put'] :: Put -> Maybe (HashMap Text AttributeValue)

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Put</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
[$sel:returnValuesOnConditionCheckFailure:Put'] :: Put -> Maybe ReturnValuesOnConditionCheckFailure

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
[$sel:conditionExpression:Put'] :: Put -> Maybe Text

-- | A map of attribute name to attribute values, representing the primary
--   key of the item to be written by <tt>PutItem</tt>. All of the table's
--   primary key attributes must be specified, and their data types must
--   match those of the table's key schema. If any attributes are present
--   in the item that are part of an index key schema for the table, their
--   types must match the index key schema.
[$sel:item:Put'] :: Put -> HashMap Text AttributeValue

-- | Name of the table in which to write the item.
[$sel:tableName:Put'] :: Put -> Text

-- | Create a value of <a>Put</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:Put'</a>,
--   <a>put_expressionAttributeNames</a> - One or more substitution tokens
--   for attribute names in an expression.
--   
--   <a>$sel:expressionAttributeValues:Put'</a>,
--   <a>put_expressionAttributeValues</a> - One or more values that can be
--   substituted in an expression.
--   
--   <a>$sel:returnValuesOnConditionCheckFailure:Put'</a>,
--   <a>put_returnValuesOnConditionCheckFailure</a> - Use
--   <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Put</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
--   
--   <a>$sel:conditionExpression:Put'</a>, <a>put_conditionExpression</a> -
--   A condition that must be satisfied in order for a conditional update
--   to succeed.
--   
--   <a>$sel:item:Put'</a>, <a>put_item</a> - A map of attribute name to
--   attribute values, representing the primary key of the item to be
--   written by <tt>PutItem</tt>. All of the table's primary key attributes
--   must be specified, and their data types must match those of the
--   table's key schema. If any attributes are present in the item that are
--   part of an index key schema for the table, their types must match the
--   index key schema.
--   
--   <a>$sel:tableName:Put'</a>, <a>put_tableName</a> - Name of the table
--   in which to write the item.
newPut :: Text -> Put

-- | One or more substitution tokens for attribute names in an expression.
put_expressionAttributeNames :: Lens' Put (Maybe (HashMap Text Text))

-- | One or more values that can be substituted in an expression.
put_expressionAttributeValues :: Lens' Put (Maybe (HashMap Text AttributeValue))

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Put</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
put_returnValuesOnConditionCheckFailure :: Lens' Put (Maybe ReturnValuesOnConditionCheckFailure)

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
put_conditionExpression :: Lens' Put (Maybe Text)

-- | A map of attribute name to attribute values, representing the primary
--   key of the item to be written by <tt>PutItem</tt>. All of the table's
--   primary key attributes must be specified, and their data types must
--   match those of the table's key schema. If any attributes are present
--   in the item that are part of an index key schema for the table, their
--   types must match the index key schema.
put_item :: Lens' Put (HashMap Text AttributeValue)

-- | Name of the table in which to write the item.
put_tableName :: Lens' Put Text

-- | Represents a request to perform a <tt>PutItem</tt> operation on an
--   item.
--   
--   <i>See:</i> <a>newPutRequest</a> smart constructor.
data PutRequest
PutRequest' :: HashMap Text AttributeValue -> PutRequest

-- | A map of attribute name to attribute values, representing the primary
--   key of an item to be processed by <tt>PutItem</tt>. All of the table's
--   primary key attributes must be specified, and their data types must
--   match those of the table's key schema. If any attributes are present
--   in the item that are part of an index key schema for the table, their
--   types must match the index key schema.
[$sel:item:PutRequest'] :: PutRequest -> HashMap Text AttributeValue

-- | Create a value of <a>PutRequest</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:item:PutRequest'</a>, <a>putRequest_item</a> - A map of
--   attribute name to attribute values, representing the primary key of an
--   item to be processed by <tt>PutItem</tt>. All of the table's primary
--   key attributes must be specified, and their data types must match
--   those of the table's key schema. If any attributes are present in the
--   item that are part of an index key schema for the table, their types
--   must match the index key schema.
newPutRequest :: PutRequest

-- | A map of attribute name to attribute values, representing the primary
--   key of an item to be processed by <tt>PutItem</tt>. All of the table's
--   primary key attributes must be specified, and their data types must
--   match those of the table's key schema. If any attributes are present
--   in the item that are part of an index key schema for the table, their
--   types must match the index key schema.
putRequest_item :: Lens' PutRequest (HashMap Text AttributeValue)

-- | Represents the properties of a replica.
--   
--   <i>See:</i> <a>newReplica</a> smart constructor.
data Replica
Replica' :: Maybe Text -> Replica

-- | The Region where the replica needs to be created.
[$sel:regionName:Replica'] :: Replica -> Maybe Text

-- | Create a value of <a>Replica</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:Replica'</a>, <a>replica_regionName</a> - The
--   Region where the replica needs to be created.
newReplica :: Replica

-- | The Region where the replica needs to be created.
replica_regionName :: Lens' Replica (Maybe Text)

-- | Represents the auto scaling settings of the replica.
--   
--   <i>See:</i> <a>newReplicaAutoScalingDescription</a> smart constructor.
data ReplicaAutoScalingDescription
ReplicaAutoScalingDescription' :: Maybe ReplicaStatus -> Maybe Text -> Maybe [ReplicaGlobalSecondaryIndexAutoScalingDescription] -> Maybe AutoScalingSettingsDescription -> Maybe AutoScalingSettingsDescription -> ReplicaAutoScalingDescription

-- | The current state of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   </ul>
[$sel:replicaStatus:ReplicaAutoScalingDescription'] :: ReplicaAutoScalingDescription -> Maybe ReplicaStatus

-- | The Region where the replica exists.
[$sel:regionName:ReplicaAutoScalingDescription'] :: ReplicaAutoScalingDescription -> Maybe Text

-- | Replica-specific global secondary index auto scaling settings.
[$sel:globalSecondaryIndexes:ReplicaAutoScalingDescription'] :: ReplicaAutoScalingDescription -> Maybe [ReplicaGlobalSecondaryIndexAutoScalingDescription]
[$sel:replicaProvisionedWriteCapacityAutoScalingSettings:ReplicaAutoScalingDescription'] :: ReplicaAutoScalingDescription -> Maybe AutoScalingSettingsDescription
[$sel:replicaProvisionedReadCapacityAutoScalingSettings:ReplicaAutoScalingDescription'] :: ReplicaAutoScalingDescription -> Maybe AutoScalingSettingsDescription

-- | Create a value of <a>ReplicaAutoScalingDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaStatus:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_replicaStatus</a> - The current state
--   of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   </ul>
--   
--   <a>$sel:regionName:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_regionName</a> - The Region where the
--   replica exists.
--   
--   <a>$sel:globalSecondaryIndexes:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_globalSecondaryIndexes</a> -
--   Replica-specific global secondary index auto scaling settings.
--   
--   
--   <a>$sel:replicaProvisionedWriteCapacityAutoScalingSettings:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_replicaProvisionedWriteCapacityAutoScalingSettings</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityAutoScalingSettings:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_replicaProvisionedReadCapacityAutoScalingSettings</a>
--   - Undocumented member.
newReplicaAutoScalingDescription :: ReplicaAutoScalingDescription

-- | The current state of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   </ul>
replicaAutoScalingDescription_replicaStatus :: Lens' ReplicaAutoScalingDescription (Maybe ReplicaStatus)

-- | The Region where the replica exists.
replicaAutoScalingDescription_regionName :: Lens' ReplicaAutoScalingDescription (Maybe Text)

-- | Replica-specific global secondary index auto scaling settings.
replicaAutoScalingDescription_globalSecondaryIndexes :: Lens' ReplicaAutoScalingDescription (Maybe [ReplicaGlobalSecondaryIndexAutoScalingDescription])

-- | Undocumented member.
replicaAutoScalingDescription_replicaProvisionedWriteCapacityAutoScalingSettings :: Lens' ReplicaAutoScalingDescription (Maybe AutoScalingSettingsDescription)

-- | Undocumented member.
replicaAutoScalingDescription_replicaProvisionedReadCapacityAutoScalingSettings :: Lens' ReplicaAutoScalingDescription (Maybe AutoScalingSettingsDescription)

-- | Represents the auto scaling settings of a replica that will be
--   modified.
--   
--   <i>See:</i> <a>newReplicaAutoScalingUpdate</a> smart constructor.
data ReplicaAutoScalingUpdate
ReplicaAutoScalingUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe [ReplicaGlobalSecondaryIndexAutoScalingUpdate] -> Text -> ReplicaAutoScalingUpdate
[$sel:replicaProvisionedReadCapacityAutoScalingUpdate:ReplicaAutoScalingUpdate'] :: ReplicaAutoScalingUpdate -> Maybe AutoScalingSettingsUpdate

-- | Represents the auto scaling settings of global secondary indexes that
--   will be modified.
[$sel:replicaGlobalSecondaryIndexUpdates:ReplicaAutoScalingUpdate'] :: ReplicaAutoScalingUpdate -> Maybe [ReplicaGlobalSecondaryIndexAutoScalingUpdate]

-- | The Region where the replica exists.
[$sel:regionName:ReplicaAutoScalingUpdate'] :: ReplicaAutoScalingUpdate -> Text

-- | Create a value of <a>ReplicaAutoScalingUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityAutoScalingUpdate:ReplicaAutoScalingUpdate'</a>,
--   <a>replicaAutoScalingUpdate_replicaProvisionedReadCapacityAutoScalingUpdate</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:replicaGlobalSecondaryIndexUpdates:ReplicaAutoScalingUpdate'</a>,
--   <a>replicaAutoScalingUpdate_replicaGlobalSecondaryIndexUpdates</a> -
--   Represents the auto scaling settings of global secondary indexes that
--   will be modified.
--   
--   <a>$sel:regionName:ReplicaAutoScalingUpdate'</a>,
--   <a>replicaAutoScalingUpdate_regionName</a> - The Region where the
--   replica exists.
newReplicaAutoScalingUpdate :: Text -> ReplicaAutoScalingUpdate

-- | Undocumented member.
replicaAutoScalingUpdate_replicaProvisionedReadCapacityAutoScalingUpdate :: Lens' ReplicaAutoScalingUpdate (Maybe AutoScalingSettingsUpdate)

-- | Represents the auto scaling settings of global secondary indexes that
--   will be modified.
replicaAutoScalingUpdate_replicaGlobalSecondaryIndexUpdates :: Lens' ReplicaAutoScalingUpdate (Maybe [ReplicaGlobalSecondaryIndexAutoScalingUpdate])

-- | The Region where the replica exists.
replicaAutoScalingUpdate_regionName :: Lens' ReplicaAutoScalingUpdate Text

-- | Contains the details of the replica.
--   
--   <i>See:</i> <a>newReplicaDescription</a> smart constructor.
data ReplicaDescription
ReplicaDescription' :: Maybe ReplicaStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe ProvisionedThroughputOverride -> Maybe [ReplicaGlobalSecondaryIndexDescription] -> ReplicaDescription

-- | The current state of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   <li><tt>REGION_DISABLED</tt> - The replica is inaccessible because the
--   AWS Region has been disabled.If the AWS Region remains inaccessible
--   for more than 20 hours, DynamoDB will remove this replica from the
--   replication group. The replica will not be deleted and replication
--   will stop from and to this region.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS </tt> - The AWS KMS key
--   used to encrypt the table is inaccessible.If the AWS KMS key remains
--   inaccessible for more than 20 hours, DynamoDB will remove this replica
--   from the replication group. The replica will not be deleted and
--   replication will stop from and to this region.</li>
--   </ul>
[$sel:replicaStatus:ReplicaDescription'] :: ReplicaDescription -> Maybe ReplicaStatus

-- | The name of the Region.
[$sel:regionName:ReplicaDescription'] :: ReplicaDescription -> Maybe Text

-- | Specifies the progress of a Create, Update, or Delete action on the
--   replica as a percentage.
[$sel:replicaStatusPercentProgress:ReplicaDescription'] :: ReplicaDescription -> Maybe Text

-- | Detailed information about the replica status.
[$sel:replicaStatusDescription:ReplicaDescription'] :: ReplicaDescription -> Maybe Text

-- | The time at which the replica was first detected as inaccessible. To
--   determine cause of inaccessibility check the <tt>ReplicaStatus</tt>
--   property.
[$sel:replicaInaccessibleDateTime:ReplicaDescription'] :: ReplicaDescription -> Maybe POSIX

-- | The AWS KMS customer master key (CMK) of the replica that will be used
--   for AWS KMS encryption.
[$sel:kmsMasterKeyId:ReplicaDescription'] :: ReplicaDescription -> Maybe Text

-- | Replica-specific provisioned throughput. If not described, uses the
--   source table's provisioned throughput settings.
[$sel:provisionedThroughputOverride:ReplicaDescription'] :: ReplicaDescription -> Maybe ProvisionedThroughputOverride

-- | Replica-specific global secondary index settings.
[$sel:globalSecondaryIndexes:ReplicaDescription'] :: ReplicaDescription -> Maybe [ReplicaGlobalSecondaryIndexDescription]

-- | Create a value of <a>ReplicaDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaStatus:ReplicaDescription'</a>,
--   <a>replicaDescription_replicaStatus</a> - The current state of the
--   replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   <li><tt>REGION_DISABLED</tt> - The replica is inaccessible because the
--   AWS Region has been disabled.If the AWS Region remains inaccessible
--   for more than 20 hours, DynamoDB will remove this replica from the
--   replication group. The replica will not be deleted and replication
--   will stop from and to this region.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS </tt> - The AWS KMS key
--   used to encrypt the table is inaccessible.If the AWS KMS key remains
--   inaccessible for more than 20 hours, DynamoDB will remove this replica
--   from the replication group. The replica will not be deleted and
--   replication will stop from and to this region.</li>
--   </ul>
--   
--   <a>$sel:regionName:ReplicaDescription'</a>,
--   <a>replicaDescription_regionName</a> - The name of the Region.
--   
--   <a>$sel:replicaStatusPercentProgress:ReplicaDescription'</a>,
--   <a>replicaDescription_replicaStatusPercentProgress</a> - Specifies the
--   progress of a Create, Update, or Delete action on the replica as a
--   percentage.
--   
--   <a>$sel:replicaStatusDescription:ReplicaDescription'</a>,
--   <a>replicaDescription_replicaStatusDescription</a> - Detailed
--   information about the replica status.
--   
--   <a>$sel:replicaInaccessibleDateTime:ReplicaDescription'</a>,
--   <a>replicaDescription_replicaInaccessibleDateTime</a> - The time at
--   which the replica was first detected as inaccessible. To determine
--   cause of inaccessibility check the <tt>ReplicaStatus</tt> property.
--   
--   <a>$sel:kmsMasterKeyId:ReplicaDescription'</a>,
--   <a>replicaDescription_kmsMasterKeyId</a> - The AWS KMS customer master
--   key (CMK) of the replica that will be used for AWS KMS encryption.
--   
--   <a>$sel:provisionedThroughputOverride:ReplicaDescription'</a>,
--   <a>replicaDescription_provisionedThroughputOverride</a> -
--   Replica-specific provisioned throughput. If not described, uses the
--   source table's provisioned throughput settings.
--   
--   <a>$sel:globalSecondaryIndexes:ReplicaDescription'</a>,
--   <a>replicaDescription_globalSecondaryIndexes</a> - Replica-specific
--   global secondary index settings.
newReplicaDescription :: ReplicaDescription

-- | The current state of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   <li><tt>REGION_DISABLED</tt> - The replica is inaccessible because the
--   AWS Region has been disabled.If the AWS Region remains inaccessible
--   for more than 20 hours, DynamoDB will remove this replica from the
--   replication group. The replica will not be deleted and replication
--   will stop from and to this region.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS </tt> - The AWS KMS key
--   used to encrypt the table is inaccessible.If the AWS KMS key remains
--   inaccessible for more than 20 hours, DynamoDB will remove this replica
--   from the replication group. The replica will not be deleted and
--   replication will stop from and to this region.</li>
--   </ul>
replicaDescription_replicaStatus :: Lens' ReplicaDescription (Maybe ReplicaStatus)

-- | The name of the Region.
replicaDescription_regionName :: Lens' ReplicaDescription (Maybe Text)

-- | Specifies the progress of a Create, Update, or Delete action on the
--   replica as a percentage.
replicaDescription_replicaStatusPercentProgress :: Lens' ReplicaDescription (Maybe Text)

-- | Detailed information about the replica status.
replicaDescription_replicaStatusDescription :: Lens' ReplicaDescription (Maybe Text)

-- | The time at which the replica was first detected as inaccessible. To
--   determine cause of inaccessibility check the <tt>ReplicaStatus</tt>
--   property.
replicaDescription_replicaInaccessibleDateTime :: Lens' ReplicaDescription (Maybe UTCTime)

-- | The AWS KMS customer master key (CMK) of the replica that will be used
--   for AWS KMS encryption.
replicaDescription_kmsMasterKeyId :: Lens' ReplicaDescription (Maybe Text)

-- | Replica-specific provisioned throughput. If not described, uses the
--   source table's provisioned throughput settings.
replicaDescription_provisionedThroughputOverride :: Lens' ReplicaDescription (Maybe ProvisionedThroughputOverride)

-- | Replica-specific global secondary index settings.
replicaDescription_globalSecondaryIndexes :: Lens' ReplicaDescription (Maybe [ReplicaGlobalSecondaryIndexDescription])

-- | Represents the properties of a replica global secondary index.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndex</a> smart constructor.
data ReplicaGlobalSecondaryIndex
ReplicaGlobalSecondaryIndex' :: Maybe ProvisionedThroughputOverride -> Text -> ReplicaGlobalSecondaryIndex

-- | Replica table GSI-specific provisioned throughput. If not specified,
--   uses the source table GSI's read capacity settings.
[$sel:provisionedThroughputOverride:ReplicaGlobalSecondaryIndex'] :: ReplicaGlobalSecondaryIndex -> Maybe ProvisionedThroughputOverride

-- | The name of the global secondary index.
[$sel:indexName:ReplicaGlobalSecondaryIndex'] :: ReplicaGlobalSecondaryIndex -> Text

-- | Create a value of <a>ReplicaGlobalSecondaryIndex</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedThroughputOverride:ReplicaGlobalSecondaryIndex'</a>,
--   <a>replicaGlobalSecondaryIndex_provisionedThroughputOverride</a> -
--   Replica table GSI-specific provisioned throughput. If not specified,
--   uses the source table GSI's read capacity settings.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndex'</a>,
--   <a>replicaGlobalSecondaryIndex_indexName</a> - The name of the global
--   secondary index.
newReplicaGlobalSecondaryIndex :: Text -> ReplicaGlobalSecondaryIndex

-- | Replica table GSI-specific provisioned throughput. If not specified,
--   uses the source table GSI's read capacity settings.
replicaGlobalSecondaryIndex_provisionedThroughputOverride :: Lens' ReplicaGlobalSecondaryIndex (Maybe ProvisionedThroughputOverride)

-- | The name of the global secondary index.
replicaGlobalSecondaryIndex_indexName :: Lens' ReplicaGlobalSecondaryIndex Text

-- | Represents the auto scaling configuration for a replica global
--   secondary index.
--   
--   <i>See:</i>
--   <a>newReplicaGlobalSecondaryIndexAutoScalingDescription</a> smart
--   constructor.
data ReplicaGlobalSecondaryIndexAutoScalingDescription
ReplicaGlobalSecondaryIndexAutoScalingDescription' :: Maybe IndexStatus -> Maybe AutoScalingSettingsDescription -> Maybe AutoScalingSettingsDescription -> Maybe Text -> ReplicaGlobalSecondaryIndexAutoScalingDescription

-- | The current state of the replica global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
[$sel:indexStatus:ReplicaGlobalSecondaryIndexAutoScalingDescription'] :: ReplicaGlobalSecondaryIndexAutoScalingDescription -> Maybe IndexStatus
[$sel:provisionedWriteCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexAutoScalingDescription'] :: ReplicaGlobalSecondaryIndexAutoScalingDescription -> Maybe AutoScalingSettingsDescription
[$sel:provisionedReadCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexAutoScalingDescription'] :: ReplicaGlobalSecondaryIndexAutoScalingDescription -> Maybe AutoScalingSettingsDescription

-- | The name of the global secondary index.
[$sel:indexName:ReplicaGlobalSecondaryIndexAutoScalingDescription'] :: ReplicaGlobalSecondaryIndexAutoScalingDescription -> Maybe Text

-- | Create a value of
--   <a>ReplicaGlobalSecondaryIndexAutoScalingDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:indexStatus:ReplicaGlobalSecondaryIndexAutoScalingDescription'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingDescription_indexStatus</a> -
--   The current state of the replica global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexAutoScalingDescription'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingDescription_provisionedWriteCapacityAutoScalingSettings</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:provisionedReadCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexAutoScalingDescription'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingDescription_provisionedReadCapacityAutoScalingSettings</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexAutoScalingDescription'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingDescription_indexName</a> -
--   The name of the global secondary index.
newReplicaGlobalSecondaryIndexAutoScalingDescription :: ReplicaGlobalSecondaryIndexAutoScalingDescription

-- | The current state of the replica global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
replicaGlobalSecondaryIndexAutoScalingDescription_indexStatus :: Lens' ReplicaGlobalSecondaryIndexAutoScalingDescription (Maybe IndexStatus)

-- | Undocumented member.
replicaGlobalSecondaryIndexAutoScalingDescription_provisionedWriteCapacityAutoScalingSettings :: Lens' ReplicaGlobalSecondaryIndexAutoScalingDescription (Maybe AutoScalingSettingsDescription)

-- | Undocumented member.
replicaGlobalSecondaryIndexAutoScalingDescription_provisionedReadCapacityAutoScalingSettings :: Lens' ReplicaGlobalSecondaryIndexAutoScalingDescription (Maybe AutoScalingSettingsDescription)

-- | The name of the global secondary index.
replicaGlobalSecondaryIndexAutoScalingDescription_indexName :: Lens' ReplicaGlobalSecondaryIndexAutoScalingDescription (Maybe Text)

-- | Represents the auto scaling settings of a global secondary index for a
--   replica that will be modified.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndexAutoScalingUpdate</a>
--   smart constructor.
data ReplicaGlobalSecondaryIndexAutoScalingUpdate
ReplicaGlobalSecondaryIndexAutoScalingUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe Text -> ReplicaGlobalSecondaryIndexAutoScalingUpdate
[$sel:provisionedReadCapacityAutoScalingUpdate:ReplicaGlobalSecondaryIndexAutoScalingUpdate'] :: ReplicaGlobalSecondaryIndexAutoScalingUpdate -> Maybe AutoScalingSettingsUpdate

-- | The name of the global secondary index.
[$sel:indexName:ReplicaGlobalSecondaryIndexAutoScalingUpdate'] :: ReplicaGlobalSecondaryIndexAutoScalingUpdate -> Maybe Text

-- | Create a value of <a>ReplicaGlobalSecondaryIndexAutoScalingUpdate</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedReadCapacityAutoScalingUpdate:ReplicaGlobalSecondaryIndexAutoScalingUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingUpdate_provisionedReadCapacityAutoScalingUpdate</a>
--   - Undocumented member.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexAutoScalingUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingUpdate_indexName</a> - The
--   name of the global secondary index.
newReplicaGlobalSecondaryIndexAutoScalingUpdate :: ReplicaGlobalSecondaryIndexAutoScalingUpdate

-- | Undocumented member.
replicaGlobalSecondaryIndexAutoScalingUpdate_provisionedReadCapacityAutoScalingUpdate :: Lens' ReplicaGlobalSecondaryIndexAutoScalingUpdate (Maybe AutoScalingSettingsUpdate)

-- | The name of the global secondary index.
replicaGlobalSecondaryIndexAutoScalingUpdate_indexName :: Lens' ReplicaGlobalSecondaryIndexAutoScalingUpdate (Maybe Text)

-- | Represents the properties of a replica global secondary index.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndexDescription</a> smart
--   constructor.
data ReplicaGlobalSecondaryIndexDescription
ReplicaGlobalSecondaryIndexDescription' :: Maybe ProvisionedThroughputOverride -> Maybe Text -> ReplicaGlobalSecondaryIndexDescription

-- | If not described, uses the source table GSI's read capacity settings.
[$sel:provisionedThroughputOverride:ReplicaGlobalSecondaryIndexDescription'] :: ReplicaGlobalSecondaryIndexDescription -> Maybe ProvisionedThroughputOverride

-- | The name of the global secondary index.
[$sel:indexName:ReplicaGlobalSecondaryIndexDescription'] :: ReplicaGlobalSecondaryIndexDescription -> Maybe Text

-- | Create a value of <a>ReplicaGlobalSecondaryIndexDescription</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedThroughputOverride:ReplicaGlobalSecondaryIndexDescription'</a>,
--   <a>replicaGlobalSecondaryIndexDescription_provisionedThroughputOverride</a>
--   - If not described, uses the source table GSI's read capacity
--   settings.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexDescription'</a>,
--   <a>replicaGlobalSecondaryIndexDescription_indexName</a> - The name of
--   the global secondary index.
newReplicaGlobalSecondaryIndexDescription :: ReplicaGlobalSecondaryIndexDescription

-- | If not described, uses the source table GSI's read capacity settings.
replicaGlobalSecondaryIndexDescription_provisionedThroughputOverride :: Lens' ReplicaGlobalSecondaryIndexDescription (Maybe ProvisionedThroughputOverride)

-- | The name of the global secondary index.
replicaGlobalSecondaryIndexDescription_indexName :: Lens' ReplicaGlobalSecondaryIndexDescription (Maybe Text)

-- | Represents the properties of a global secondary index.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndexSettingsDescription</a>
--   smart constructor.
data ReplicaGlobalSecondaryIndexSettingsDescription
ReplicaGlobalSecondaryIndexSettingsDescription' :: Maybe IndexStatus -> Maybe Natural -> Maybe Natural -> Maybe AutoScalingSettingsDescription -> Maybe AutoScalingSettingsDescription -> Text -> ReplicaGlobalSecondaryIndexSettingsDescription

-- | The current status of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global secondary index is being
--   created.</li>
--   <li><tt>UPDATING</tt> - The global secondary index is being
--   updated.</li>
--   <li><tt>DELETING</tt> - The global secondary index is being
--   deleted.</li>
--   <li><tt>ACTIVE</tt> - The global secondary index is ready for
--   use.</li>
--   </ul>
[$sel:indexStatus:ReplicaGlobalSecondaryIndexSettingsDescription'] :: ReplicaGlobalSecondaryIndexSettingsDescription -> Maybe IndexStatus

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
[$sel:provisionedReadCapacityUnits:ReplicaGlobalSecondaryIndexSettingsDescription'] :: ReplicaGlobalSecondaryIndexSettingsDescription -> Maybe Natural

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
[$sel:provisionedWriteCapacityUnits:ReplicaGlobalSecondaryIndexSettingsDescription'] :: ReplicaGlobalSecondaryIndexSettingsDescription -> Maybe Natural

-- | Auto scaling settings for a global secondary index replica's write
--   capacity units.
[$sel:provisionedWriteCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexSettingsDescription'] :: ReplicaGlobalSecondaryIndexSettingsDescription -> Maybe AutoScalingSettingsDescription

-- | Auto scaling settings for a global secondary index replica's read
--   capacity units.
[$sel:provisionedReadCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexSettingsDescription'] :: ReplicaGlobalSecondaryIndexSettingsDescription -> Maybe AutoScalingSettingsDescription

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
[$sel:indexName:ReplicaGlobalSecondaryIndexSettingsDescription'] :: ReplicaGlobalSecondaryIndexSettingsDescription -> Text

-- | Create a value of
--   <a>ReplicaGlobalSecondaryIndexSettingsDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:indexStatus:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_indexStatus</a> -
--   The current status of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global secondary index is being
--   created.</li>
--   <li><tt>UPDATING</tt> - The global secondary index is being
--   updated.</li>
--   <li><tt>DELETING</tt> - The global secondary index is being
--   deleted.</li>
--   <li><tt>ACTIVE</tt> - The global secondary index is ready for
--   use.</li>
--   </ul>
--   
--   
--   <a>$sel:provisionedReadCapacityUnits:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_provisionedReadCapacityUnits</a>
--   - The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
--   
--   
--   <a>$sel:provisionedWriteCapacityUnits:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_provisionedWriteCapacityUnits</a>
--   - The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_provisionedWriteCapacityAutoScalingSettings</a>
--   - Auto scaling settings for a global secondary index replica's write
--   capacity units.
--   
--   
--   <a>$sel:provisionedReadCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_provisionedReadCapacityAutoScalingSettings</a>
--   - Auto scaling settings for a global secondary index replica's read
--   capacity units.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_indexName</a> - The
--   name of the global secondary index. The name must be unique among all
--   other indexes on this table.
newReplicaGlobalSecondaryIndexSettingsDescription :: Text -> ReplicaGlobalSecondaryIndexSettingsDescription

-- | The current status of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global secondary index is being
--   created.</li>
--   <li><tt>UPDATING</tt> - The global secondary index is being
--   updated.</li>
--   <li><tt>DELETING</tt> - The global secondary index is being
--   deleted.</li>
--   <li><tt>ACTIVE</tt> - The global secondary index is ready for
--   use.</li>
--   </ul>
replicaGlobalSecondaryIndexSettingsDescription_indexStatus :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe IndexStatus)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
replicaGlobalSecondaryIndexSettingsDescription_provisionedReadCapacityUnits :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe Natural)

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
replicaGlobalSecondaryIndexSettingsDescription_provisionedWriteCapacityUnits :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe Natural)

-- | Auto scaling settings for a global secondary index replica's write
--   capacity units.
replicaGlobalSecondaryIndexSettingsDescription_provisionedWriteCapacityAutoScalingSettings :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe AutoScalingSettingsDescription)

-- | Auto scaling settings for a global secondary index replica's read
--   capacity units.
replicaGlobalSecondaryIndexSettingsDescription_provisionedReadCapacityAutoScalingSettings :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe AutoScalingSettingsDescription)

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
replicaGlobalSecondaryIndexSettingsDescription_indexName :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription Text

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndexSettingsUpdate</a> smart
--   constructor.
data ReplicaGlobalSecondaryIndexSettingsUpdate
ReplicaGlobalSecondaryIndexSettingsUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe Natural -> Text -> ReplicaGlobalSecondaryIndexSettingsUpdate

-- | Auto scaling settings for managing a global secondary index replica's
--   read capacity units.
[$sel:provisionedReadCapacityAutoScalingSettingsUpdate:ReplicaGlobalSecondaryIndexSettingsUpdate'] :: ReplicaGlobalSecondaryIndexSettingsUpdate -> Maybe AutoScalingSettingsUpdate

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
[$sel:provisionedReadCapacityUnits:ReplicaGlobalSecondaryIndexSettingsUpdate'] :: ReplicaGlobalSecondaryIndexSettingsUpdate -> Maybe Natural

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
[$sel:indexName:ReplicaGlobalSecondaryIndexSettingsUpdate'] :: ReplicaGlobalSecondaryIndexSettingsUpdate -> Text

-- | Create a value of <a>ReplicaGlobalSecondaryIndexSettingsUpdate</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedReadCapacityAutoScalingSettingsUpdate:ReplicaGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsUpdate_provisionedReadCapacityAutoScalingSettingsUpdate</a>
--   - Auto scaling settings for managing a global secondary index
--   replica's read capacity units.
--   
--   
--   <a>$sel:provisionedReadCapacityUnits:ReplicaGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsUpdate_provisionedReadCapacityUnits</a>
--   - The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsUpdate_indexName</a> - The name
--   of the global secondary index. The name must be unique among all other
--   indexes on this table.
newReplicaGlobalSecondaryIndexSettingsUpdate :: Text -> ReplicaGlobalSecondaryIndexSettingsUpdate

-- | Auto scaling settings for managing a global secondary index replica's
--   read capacity units.
replicaGlobalSecondaryIndexSettingsUpdate_provisionedReadCapacityAutoScalingSettingsUpdate :: Lens' ReplicaGlobalSecondaryIndexSettingsUpdate (Maybe AutoScalingSettingsUpdate)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
replicaGlobalSecondaryIndexSettingsUpdate_provisionedReadCapacityUnits :: Lens' ReplicaGlobalSecondaryIndexSettingsUpdate (Maybe Natural)

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
replicaGlobalSecondaryIndexSettingsUpdate_indexName :: Lens' ReplicaGlobalSecondaryIndexSettingsUpdate Text

-- | Represents the properties of a replica.
--   
--   <i>See:</i> <a>newReplicaSettingsDescription</a> smart constructor.
data ReplicaSettingsDescription
ReplicaSettingsDescription' :: Maybe ReplicaStatus -> Maybe Natural -> Maybe Natural -> Maybe BillingModeSummary -> Maybe [ReplicaGlobalSecondaryIndexSettingsDescription] -> Maybe AutoScalingSettingsDescription -> Maybe AutoScalingSettingsDescription -> Text -> ReplicaSettingsDescription

-- | The current state of the Region:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The Region is being created.</li>
--   <li><tt>UPDATING</tt> - The Region is being updated.</li>
--   <li><tt>DELETING</tt> - The Region is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The Region is ready for use.</li>
--   </ul>
[$sel:replicaStatus:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe ReplicaStatus

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:replicaProvisionedReadCapacityUnits:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe Natural

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:replicaProvisionedWriteCapacityUnits:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe Natural

-- | The read/write capacity mode of the replica.
[$sel:replicaBillingModeSummary:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe BillingModeSummary

-- | Replica global secondary index settings for the global table.
[$sel:replicaGlobalSecondaryIndexSettings:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe [ReplicaGlobalSecondaryIndexSettingsDescription]

-- | Auto scaling settings for a global table replica's write capacity
--   units.
[$sel:replicaProvisionedWriteCapacityAutoScalingSettings:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe AutoScalingSettingsDescription

-- | Auto scaling settings for a global table replica's read capacity
--   units.
[$sel:replicaProvisionedReadCapacityAutoScalingSettings:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Maybe AutoScalingSettingsDescription

-- | The Region name of the replica.
[$sel:regionName:ReplicaSettingsDescription'] :: ReplicaSettingsDescription -> Text

-- | Create a value of <a>ReplicaSettingsDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaStatus:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaStatus</a> - The current state of
--   the Region:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The Region is being created.</li>
--   <li><tt>UPDATING</tt> - The Region is being updated.</li>
--   <li><tt>DELETING</tt> - The Region is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The Region is ready for use.</li>
--   </ul>
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityUnits:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaProvisionedReadCapacityUnits</a>
--   - The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   
--   <a>$sel:replicaProvisionedWriteCapacityUnits:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaProvisionedWriteCapacityUnits</a>
--   - The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:replicaBillingModeSummary:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaBillingModeSummary</a> - The
--   read/write capacity mode of the replica.
--   
--   
--   <a>$sel:replicaGlobalSecondaryIndexSettings:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaGlobalSecondaryIndexSettings</a>
--   - Replica global secondary index settings for the global table.
--   
--   
--   <a>$sel:replicaProvisionedWriteCapacityAutoScalingSettings:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaProvisionedWriteCapacityAutoScalingSettings</a>
--   - Auto scaling settings for a global table replica's write capacity
--   units.
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityAutoScalingSettings:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaProvisionedReadCapacityAutoScalingSettings</a>
--   - Auto scaling settings for a global table replica's read capacity
--   units.
--   
--   <a>$sel:regionName:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_regionName</a> - The Region name of the
--   replica.
newReplicaSettingsDescription :: Text -> ReplicaSettingsDescription

-- | The current state of the Region:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The Region is being created.</li>
--   <li><tt>UPDATING</tt> - The Region is being updated.</li>
--   <li><tt>DELETING</tt> - The Region is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The Region is ready for use.</li>
--   </ul>
replicaSettingsDescription_replicaStatus :: Lens' ReplicaSettingsDescription (Maybe ReplicaStatus)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
replicaSettingsDescription_replicaProvisionedReadCapacityUnits :: Lens' ReplicaSettingsDescription (Maybe Natural)

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
replicaSettingsDescription_replicaProvisionedWriteCapacityUnits :: Lens' ReplicaSettingsDescription (Maybe Natural)

-- | The read/write capacity mode of the replica.
replicaSettingsDescription_replicaBillingModeSummary :: Lens' ReplicaSettingsDescription (Maybe BillingModeSummary)

-- | Replica global secondary index settings for the global table.
replicaSettingsDescription_replicaGlobalSecondaryIndexSettings :: Lens' ReplicaSettingsDescription (Maybe [ReplicaGlobalSecondaryIndexSettingsDescription])

-- | Auto scaling settings for a global table replica's write capacity
--   units.
replicaSettingsDescription_replicaProvisionedWriteCapacityAutoScalingSettings :: Lens' ReplicaSettingsDescription (Maybe AutoScalingSettingsDescription)

-- | Auto scaling settings for a global table replica's read capacity
--   units.
replicaSettingsDescription_replicaProvisionedReadCapacityAutoScalingSettings :: Lens' ReplicaSettingsDescription (Maybe AutoScalingSettingsDescription)

-- | The Region name of the replica.
replicaSettingsDescription_regionName :: Lens' ReplicaSettingsDescription Text

-- | Represents the settings for a global table in a Region that will be
--   modified.
--   
--   <i>See:</i> <a>newReplicaSettingsUpdate</a> smart constructor.
data ReplicaSettingsUpdate
ReplicaSettingsUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe Natural -> Maybe (NonEmpty ReplicaGlobalSecondaryIndexSettingsUpdate) -> Text -> ReplicaSettingsUpdate

-- | Auto scaling settings for managing a global table replica's read
--   capacity units.
[$sel:replicaProvisionedReadCapacityAutoScalingSettingsUpdate:ReplicaSettingsUpdate'] :: ReplicaSettingsUpdate -> Maybe AutoScalingSettingsUpdate

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:replicaProvisionedReadCapacityUnits:ReplicaSettingsUpdate'] :: ReplicaSettingsUpdate -> Maybe Natural

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
[$sel:replicaGlobalSecondaryIndexSettingsUpdate:ReplicaSettingsUpdate'] :: ReplicaSettingsUpdate -> Maybe (NonEmpty ReplicaGlobalSecondaryIndexSettingsUpdate)

-- | The Region of the replica to be added.
[$sel:regionName:ReplicaSettingsUpdate'] :: ReplicaSettingsUpdate -> Text

-- | Create a value of <a>ReplicaSettingsUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityAutoScalingSettingsUpdate:ReplicaSettingsUpdate'</a>,
--   <a>replicaSettingsUpdate_replicaProvisionedReadCapacityAutoScalingSettingsUpdate</a>
--   - Auto scaling settings for managing a global table replica's read
--   capacity units.
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityUnits:ReplicaSettingsUpdate'</a>,
--   <a>replicaSettingsUpdate_replicaProvisionedReadCapacityUnits</a> - The
--   maximum number of strongly consistent reads consumed per second before
--   DynamoDB returns a <tt>ThrottlingException</tt>. For more information,
--   see <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   
--   <a>$sel:replicaGlobalSecondaryIndexSettingsUpdate:ReplicaSettingsUpdate'</a>,
--   <a>replicaSettingsUpdate_replicaGlobalSecondaryIndexSettingsUpdate</a>
--   - Represents the settings of a global secondary index for a global
--   table that will be modified.
--   
--   <a>$sel:regionName:ReplicaSettingsUpdate'</a>,
--   <a>replicaSettingsUpdate_regionName</a> - The Region of the replica to
--   be added.
newReplicaSettingsUpdate :: Text -> ReplicaSettingsUpdate

-- | Auto scaling settings for managing a global table replica's read
--   capacity units.
replicaSettingsUpdate_replicaProvisionedReadCapacityAutoScalingSettingsUpdate :: Lens' ReplicaSettingsUpdate (Maybe AutoScalingSettingsUpdate)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
replicaSettingsUpdate_replicaProvisionedReadCapacityUnits :: Lens' ReplicaSettingsUpdate (Maybe Natural)

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
replicaSettingsUpdate_replicaGlobalSecondaryIndexSettingsUpdate :: Lens' ReplicaSettingsUpdate (Maybe (NonEmpty ReplicaGlobalSecondaryIndexSettingsUpdate))

-- | The Region of the replica to be added.
replicaSettingsUpdate_regionName :: Lens' ReplicaSettingsUpdate Text

-- | Represents one of the following:
--   
--   <ul>
--   <li>A new replica to be added to an existing global table.</li>
--   <li>New parameters for an existing replica.</li>
--   <li>An existing replica to be removed from an existing global
--   table.</li>
--   </ul>
--   
--   <i>See:</i> <a>newReplicaUpdate</a> smart constructor.
data ReplicaUpdate
ReplicaUpdate' :: Maybe CreateReplicaAction -> Maybe DeleteReplicaAction -> ReplicaUpdate

-- | The parameters required for creating a replica on an existing global
--   table.
[$sel:create:ReplicaUpdate'] :: ReplicaUpdate -> Maybe CreateReplicaAction

-- | The name of the existing replica to be removed.
[$sel:delete':ReplicaUpdate'] :: ReplicaUpdate -> Maybe DeleteReplicaAction

-- | Create a value of <a>ReplicaUpdate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:create:ReplicaUpdate'</a>, <a>replicaUpdate_create</a> - The
--   parameters required for creating a replica on an existing global
--   table.
--   
--   <a>$sel:delete':ReplicaUpdate'</a>, <a>replicaUpdate_delete</a> - The
--   name of the existing replica to be removed.
newReplicaUpdate :: ReplicaUpdate

-- | The parameters required for creating a replica on an existing global
--   table.
replicaUpdate_create :: Lens' ReplicaUpdate (Maybe CreateReplicaAction)

-- | The name of the existing replica to be removed.
replicaUpdate_delete :: Lens' ReplicaUpdate (Maybe DeleteReplicaAction)

-- | Represents one of the following:
--   
--   <ul>
--   <li>A new replica to be added to an existing regional table or global
--   table. This request invokes the <tt>CreateTableReplica</tt> action in
--   the destination Region.</li>
--   <li>New parameters for an existing replica. This request invokes the
--   <tt>UpdateTable</tt> action in the destination Region.</li>
--   <li>An existing replica to be deleted. The request invokes the
--   <tt>DeleteTableReplica</tt> action in the destination Region, deleting
--   the replica and all if its items in the destination Region.</li>
--   </ul>
--   
--   <i>See:</i> <a>newReplicationGroupUpdate</a> smart constructor.
data ReplicationGroupUpdate
ReplicationGroupUpdate' :: Maybe CreateReplicationGroupMemberAction -> Maybe DeleteReplicationGroupMemberAction -> Maybe UpdateReplicationGroupMemberAction -> ReplicationGroupUpdate

-- | The parameters required for creating a replica for the table.
[$sel:create:ReplicationGroupUpdate'] :: ReplicationGroupUpdate -> Maybe CreateReplicationGroupMemberAction

-- | The parameters required for deleting a replica for the table.
[$sel:delete':ReplicationGroupUpdate'] :: ReplicationGroupUpdate -> Maybe DeleteReplicationGroupMemberAction

-- | The parameters required for updating a replica for the table.
[$sel:update:ReplicationGroupUpdate'] :: ReplicationGroupUpdate -> Maybe UpdateReplicationGroupMemberAction

-- | Create a value of <a>ReplicationGroupUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:create:ReplicationGroupUpdate'</a>,
--   <a>replicationGroupUpdate_create</a> - The parameters required for
--   creating a replica for the table.
--   
--   <a>$sel:delete':ReplicationGroupUpdate'</a>,
--   <a>replicationGroupUpdate_delete</a> - The parameters required for
--   deleting a replica for the table.
--   
--   <a>$sel:update:ReplicationGroupUpdate'</a>,
--   <a>replicationGroupUpdate_update</a> - The parameters required for
--   updating a replica for the table.
newReplicationGroupUpdate :: ReplicationGroupUpdate

-- | The parameters required for creating a replica for the table.
replicationGroupUpdate_create :: Lens' ReplicationGroupUpdate (Maybe CreateReplicationGroupMemberAction)

-- | The parameters required for deleting a replica for the table.
replicationGroupUpdate_delete :: Lens' ReplicationGroupUpdate (Maybe DeleteReplicationGroupMemberAction)

-- | The parameters required for updating a replica for the table.
replicationGroupUpdate_update :: Lens' ReplicationGroupUpdate (Maybe UpdateReplicationGroupMemberAction)

-- | Contains details for the restore.
--   
--   <i>See:</i> <a>newRestoreSummary</a> smart constructor.
data RestoreSummary
RestoreSummary' :: Maybe Text -> Maybe Text -> POSIX -> Bool -> RestoreSummary

-- | The ARN of the source table of the backup that is being restored.
[$sel:sourceTableArn:RestoreSummary'] :: RestoreSummary -> Maybe Text

-- | The Amazon Resource Name (ARN) of the backup from which the table was
--   restored.
[$sel:sourceBackupArn:RestoreSummary'] :: RestoreSummary -> Maybe Text

-- | Point in time or source backup time.
[$sel:restoreDateTime:RestoreSummary'] :: RestoreSummary -> POSIX

-- | Indicates if a restore is in progress or not.
[$sel:restoreInProgress:RestoreSummary'] :: RestoreSummary -> Bool

-- | Create a value of <a>RestoreSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourceTableArn:RestoreSummary'</a>,
--   <a>restoreSummary_sourceTableArn</a> - The ARN of the source table of
--   the backup that is being restored.
--   
--   <a>$sel:sourceBackupArn:RestoreSummary'</a>,
--   <a>restoreSummary_sourceBackupArn</a> - The Amazon Resource Name (ARN)
--   of the backup from which the table was restored.
--   
--   <a>$sel:restoreDateTime:RestoreSummary'</a>,
--   <a>restoreSummary_restoreDateTime</a> - Point in time or source backup
--   time.
--   
--   <a>$sel:restoreInProgress:RestoreSummary'</a>,
--   <a>restoreSummary_restoreInProgress</a> - Indicates if a restore is in
--   progress or not.
newRestoreSummary :: UTCTime -> Bool -> RestoreSummary

-- | The ARN of the source table of the backup that is being restored.
restoreSummary_sourceTableArn :: Lens' RestoreSummary (Maybe Text)

-- | The Amazon Resource Name (ARN) of the backup from which the table was
--   restored.
restoreSummary_sourceBackupArn :: Lens' RestoreSummary (Maybe Text)

-- | Point in time or source backup time.
restoreSummary_restoreDateTime :: Lens' RestoreSummary UTCTime

-- | Indicates if a restore is in progress or not.
restoreSummary_restoreInProgress :: Lens' RestoreSummary Bool

-- | The description of the server-side encryption status on the specified
--   table.
--   
--   <i>See:</i> <a>newSSEDescription</a> smart constructor.
data SSEDescription
SSEDescription' :: Maybe SSEStatus -> Maybe POSIX -> Maybe SSEType -> Maybe Text -> SSEDescription

-- | Represents the current state of server-side encryption. The only
--   supported values are:
--   
--   <ul>
--   <li><tt>ENABLED</tt> - Server-side encryption is enabled.</li>
--   <li><tt>UPDATING</tt> - Server-side encryption is being updated.</li>
--   </ul>
[$sel:status:SSEDescription'] :: SSEDescription -> Maybe SSEStatus

-- | Indicates the time, in UNIX epoch date format, when DynamoDB detected
--   that the table's AWS KMS key was inaccessible. This attribute will
--   automatically be cleared when DynamoDB detects that the table's AWS
--   KMS key is accessible again. DynamoDB will initiate the table archival
--   process when table's AWS KMS key remains inaccessible for more than
--   seven days from this date.
[$sel:inaccessibleEncryptionDateTime:SSEDescription'] :: SSEDescription -> Maybe POSIX

-- | Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
[$sel:sSEType:SSEDescription'] :: SSEDescription -> Maybe SSEType

-- | The AWS KMS customer master key (CMK) ARN used for the AWS KMS
--   encryption.
[$sel:kmsMasterKeyArn:SSEDescription'] :: SSEDescription -> Maybe Text

-- | Create a value of <a>SSEDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:SSEDescription'</a>, <a>sSEDescription_status</a> -
--   Represents the current state of server-side encryption. The only
--   supported values are:
--   
--   <ul>
--   <li><tt>ENABLED</tt> - Server-side encryption is enabled.</li>
--   <li><tt>UPDATING</tt> - Server-side encryption is being updated.</li>
--   </ul>
--   
--   <a>$sel:inaccessibleEncryptionDateTime:SSEDescription'</a>,
--   <a>sSEDescription_inaccessibleEncryptionDateTime</a> - Indicates the
--   time, in UNIX epoch date format, when DynamoDB detected that the
--   table's AWS KMS key was inaccessible. This attribute will
--   automatically be cleared when DynamoDB detects that the table's AWS
--   KMS key is accessible again. DynamoDB will initiate the table archival
--   process when table's AWS KMS key remains inaccessible for more than
--   seven days from this date.
--   
--   <a>$sel:sSEType:SSEDescription'</a>, <a>sSEDescription_sSEType</a> -
--   Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
--   
--   <a>$sel:kmsMasterKeyArn:SSEDescription'</a>,
--   <a>sSEDescription_kmsMasterKeyArn</a> - The AWS KMS customer master
--   key (CMK) ARN used for the AWS KMS encryption.
newSSEDescription :: SSEDescription

-- | Represents the current state of server-side encryption. The only
--   supported values are:
--   
--   <ul>
--   <li><tt>ENABLED</tt> - Server-side encryption is enabled.</li>
--   <li><tt>UPDATING</tt> - Server-side encryption is being updated.</li>
--   </ul>
sSEDescription_status :: Lens' SSEDescription (Maybe SSEStatus)

-- | Indicates the time, in UNIX epoch date format, when DynamoDB detected
--   that the table's AWS KMS key was inaccessible. This attribute will
--   automatically be cleared when DynamoDB detects that the table's AWS
--   KMS key is accessible again. DynamoDB will initiate the table archival
--   process when table's AWS KMS key remains inaccessible for more than
--   seven days from this date.
sSEDescription_inaccessibleEncryptionDateTime :: Lens' SSEDescription (Maybe UTCTime)

-- | Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
sSEDescription_sSEType :: Lens' SSEDescription (Maybe SSEType)

-- | The AWS KMS customer master key (CMK) ARN used for the AWS KMS
--   encryption.
sSEDescription_kmsMasterKeyArn :: Lens' SSEDescription (Maybe Text)

-- | Represents the settings used to enable server-side encryption.
--   
--   <i>See:</i> <a>newSSESpecification</a> smart constructor.
data SSESpecification
SSESpecification' :: Maybe Bool -> Maybe Text -> Maybe SSEType -> SSESpecification

-- | Indicates whether server-side encryption is done using an AWS managed
--   CMK or an AWS owned CMK. If enabled (true), server-side encryption
--   type is set to <tt>KMS</tt> and an AWS managed CMK is used (AWS KMS
--   charges apply). If disabled (false) or not specified, server-side
--   encryption is set to AWS owned CMK.
[$sel:enabled:SSESpecification'] :: SSESpecification -> Maybe Bool

-- | The AWS KMS customer master key (CMK) that should be used for the AWS
--   KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name
--   (ARN), alias name, or alias ARN. Note that you should only provide
--   this parameter if the key is different from the default DynamoDB
--   customer master key alias/aws/dynamodb.
[$sel:kmsMasterKeyId:SSESpecification'] :: SSESpecification -> Maybe Text

-- | Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
[$sel:sSEType:SSESpecification'] :: SSESpecification -> Maybe SSEType

-- | Create a value of <a>SSESpecification</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enabled:SSESpecification'</a>, <a>sSESpecification_enabled</a>
--   - Indicates whether server-side encryption is done using an AWS
--   managed CMK or an AWS owned CMK. If enabled (true), server-side
--   encryption type is set to <tt>KMS</tt> and an AWS managed CMK is used
--   (AWS KMS charges apply). If disabled (false) or not specified,
--   server-side encryption is set to AWS owned CMK.
--   
--   <a>$sel:kmsMasterKeyId:SSESpecification'</a>,
--   <a>sSESpecification_kmsMasterKeyId</a> - The AWS KMS customer master
--   key (CMK) that should be used for the AWS KMS encryption. To specify a
--   CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias
--   ARN. Note that you should only provide this parameter if the key is
--   different from the default DynamoDB customer master key
--   alias/aws/dynamodb.
--   
--   <a>$sel:sSEType:SSESpecification'</a>, <a>sSESpecification_sSEType</a>
--   - Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
newSSESpecification :: SSESpecification

-- | Indicates whether server-side encryption is done using an AWS managed
--   CMK or an AWS owned CMK. If enabled (true), server-side encryption
--   type is set to <tt>KMS</tt> and an AWS managed CMK is used (AWS KMS
--   charges apply). If disabled (false) or not specified, server-side
--   encryption is set to AWS owned CMK.
sSESpecification_enabled :: Lens' SSESpecification (Maybe Bool)

-- | The AWS KMS customer master key (CMK) that should be used for the AWS
--   KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name
--   (ARN), alias name, or alias ARN. Note that you should only provide
--   this parameter if the key is different from the default DynamoDB
--   customer master key alias/aws/dynamodb.
sSESpecification_kmsMasterKeyId :: Lens' SSESpecification (Maybe Text)

-- | Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
sSESpecification_sSEType :: Lens' SSESpecification (Maybe SSEType)

-- | Contains the details of the table when the backup was created.
--   
--   <i>See:</i> <a>newSourceTableDetails</a> smart constructor.
data SourceTableDetails
SourceTableDetails' :: Maybe Integer -> Maybe Text -> Maybe BillingMode -> Maybe Natural -> Text -> Text -> NonEmpty KeySchemaElement -> POSIX -> ProvisionedThroughput -> SourceTableDetails

-- | Size of the table in bytes. Note that this is an approximate value.
[$sel:tableSizeBytes:SourceTableDetails'] :: SourceTableDetails -> Maybe Integer

-- | ARN of the table for which backup was created.
[$sel:tableArn:SourceTableDetails'] :: SourceTableDetails -> Maybe Text

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
[$sel:billingMode:SourceTableDetails'] :: SourceTableDetails -> Maybe BillingMode

-- | Number of items in the table. Note that this is an approximate value.
[$sel:itemCount:SourceTableDetails'] :: SourceTableDetails -> Maybe Natural

-- | The name of the table for which the backup was created.
[$sel:tableName:SourceTableDetails'] :: SourceTableDetails -> Text

-- | Unique identifier for the table for which the backup was created.
[$sel:tableId:SourceTableDetails'] :: SourceTableDetails -> Text

-- | Schema of the table.
[$sel:keySchema:SourceTableDetails'] :: SourceTableDetails -> NonEmpty KeySchemaElement

-- | Time when the source table was created.
[$sel:tableCreationDateTime:SourceTableDetails'] :: SourceTableDetails -> POSIX

-- | Read IOPs and Write IOPS on the table when the backup was created.
[$sel:provisionedThroughput:SourceTableDetails'] :: SourceTableDetails -> ProvisionedThroughput

-- | Create a value of <a>SourceTableDetails</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableSizeBytes:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableSizeBytes</a> - Size of the table in bytes.
--   Note that this is an approximate value.
--   
--   <a>$sel:tableArn:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableArn</a> - ARN of the table for which backup
--   was created.
--   
--   <a>$sel:billingMode:SourceTableDetails'</a>,
--   <a>sourceTableDetails_billingMode</a> - Controls how you are charged
--   for read and write throughput and how you manage capacity. This
--   setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
--   
--   <a>$sel:itemCount:SourceTableDetails'</a>,
--   <a>sourceTableDetails_itemCount</a> - Number of items in the table.
--   Note that this is an approximate value.
--   
--   <a>$sel:tableName:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableName</a> - The name of the table for which
--   the backup was created.
--   
--   <a>$sel:tableId:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableId</a> - Unique identifier for the table
--   for which the backup was created.
--   
--   <a>$sel:keySchema:SourceTableDetails'</a>,
--   <a>sourceTableDetails_keySchema</a> - Schema of the table.
--   
--   <a>$sel:tableCreationDateTime:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableCreationDateTime</a> - Time when the source
--   table was created.
--   
--   <a>$sel:provisionedThroughput:SourceTableDetails'</a>,
--   <a>sourceTableDetails_provisionedThroughput</a> - Read IOPs and Write
--   IOPS on the table when the backup was created.
newSourceTableDetails :: Text -> Text -> NonEmpty KeySchemaElement -> UTCTime -> ProvisionedThroughput -> SourceTableDetails

-- | Size of the table in bytes. Note that this is an approximate value.
sourceTableDetails_tableSizeBytes :: Lens' SourceTableDetails (Maybe Integer)

-- | ARN of the table for which backup was created.
sourceTableDetails_tableArn :: Lens' SourceTableDetails (Maybe Text)

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
sourceTableDetails_billingMode :: Lens' SourceTableDetails (Maybe BillingMode)

-- | Number of items in the table. Note that this is an approximate value.
sourceTableDetails_itemCount :: Lens' SourceTableDetails (Maybe Natural)

-- | The name of the table for which the backup was created.
sourceTableDetails_tableName :: Lens' SourceTableDetails Text

-- | Unique identifier for the table for which the backup was created.
sourceTableDetails_tableId :: Lens' SourceTableDetails Text

-- | Schema of the table.
sourceTableDetails_keySchema :: Lens' SourceTableDetails (NonEmpty KeySchemaElement)

-- | Time when the source table was created.
sourceTableDetails_tableCreationDateTime :: Lens' SourceTableDetails UTCTime

-- | Read IOPs and Write IOPS on the table when the backup was created.
sourceTableDetails_provisionedThroughput :: Lens' SourceTableDetails ProvisionedThroughput

-- | Contains the details of the features enabled on the table when the
--   backup was created. For example, LSIs, GSIs, streams, TTL.
--   
--   <i>See:</i> <a>newSourceTableFeatureDetails</a> smart constructor.
data SourceTableFeatureDetails
SourceTableFeatureDetails' :: Maybe StreamSpecification -> Maybe [GlobalSecondaryIndexInfo] -> Maybe [LocalSecondaryIndexInfo] -> Maybe SSEDescription -> Maybe TimeToLiveDescription -> SourceTableFeatureDetails

-- | Stream settings on the table when the backup was created.
[$sel:streamDescription:SourceTableFeatureDetails'] :: SourceTableFeatureDetails -> Maybe StreamSpecification

-- | Represents the GSI properties for the table when the backup was
--   created. It includes the IndexName, KeySchema, Projection, and
--   ProvisionedThroughput for the GSIs on the table at the time of backup.
[$sel:globalSecondaryIndexes:SourceTableFeatureDetails'] :: SourceTableFeatureDetails -> Maybe [GlobalSecondaryIndexInfo]

-- | Represents the LSI properties for the table when the backup was
--   created. It includes the IndexName, KeySchema and Projection for the
--   LSIs on the table at the time of backup.
[$sel:localSecondaryIndexes:SourceTableFeatureDetails'] :: SourceTableFeatureDetails -> Maybe [LocalSecondaryIndexInfo]

-- | The description of the server-side encryption status on the table when
--   the backup was created.
[$sel:sSEDescription:SourceTableFeatureDetails'] :: SourceTableFeatureDetails -> Maybe SSEDescription

-- | Time to Live settings on the table when the backup was created.
[$sel:timeToLiveDescription:SourceTableFeatureDetails'] :: SourceTableFeatureDetails -> Maybe TimeToLiveDescription

-- | Create a value of <a>SourceTableFeatureDetails</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamDescription:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_streamDescription</a> - Stream settings
--   on the table when the backup was created.
--   
--   <a>$sel:globalSecondaryIndexes:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_globalSecondaryIndexes</a> - Represents
--   the GSI properties for the table when the backup was created. It
--   includes the IndexName, KeySchema, Projection, and
--   ProvisionedThroughput for the GSIs on the table at the time of backup.
--   
--   <a>$sel:localSecondaryIndexes:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_localSecondaryIndexes</a> - Represents
--   the LSI properties for the table when the backup was created. It
--   includes the IndexName, KeySchema and Projection for the LSIs on the
--   table at the time of backup.
--   
--   <a>$sel:sSEDescription:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_sSEDescription</a> - The description of
--   the server-side encryption status on the table when the backup was
--   created.
--   
--   <a>$sel:timeToLiveDescription:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_timeToLiveDescription</a> - Time to Live
--   settings on the table when the backup was created.
newSourceTableFeatureDetails :: SourceTableFeatureDetails

-- | Stream settings on the table when the backup was created.
sourceTableFeatureDetails_streamDescription :: Lens' SourceTableFeatureDetails (Maybe StreamSpecification)

-- | Represents the GSI properties for the table when the backup was
--   created. It includes the IndexName, KeySchema, Projection, and
--   ProvisionedThroughput for the GSIs on the table at the time of backup.
sourceTableFeatureDetails_globalSecondaryIndexes :: Lens' SourceTableFeatureDetails (Maybe [GlobalSecondaryIndexInfo])

-- | Represents the LSI properties for the table when the backup was
--   created. It includes the IndexName, KeySchema and Projection for the
--   LSIs on the table at the time of backup.
sourceTableFeatureDetails_localSecondaryIndexes :: Lens' SourceTableFeatureDetails (Maybe [LocalSecondaryIndexInfo])

-- | The description of the server-side encryption status on the table when
--   the backup was created.
sourceTableFeatureDetails_sSEDescription :: Lens' SourceTableFeatureDetails (Maybe SSEDescription)

-- | Time to Live settings on the table when the backup was created.
sourceTableFeatureDetails_timeToLiveDescription :: Lens' SourceTableFeatureDetails (Maybe TimeToLiveDescription)

-- | Represents the DynamoDB Streams configuration for a table in DynamoDB.
--   
--   <i>See:</i> <a>newStreamSpecification</a> smart constructor.
data StreamSpecification
StreamSpecification' :: Maybe StreamViewType -> Bool -> StreamSpecification

-- | When an item in the table is modified, <tt>StreamViewType</tt>
--   determines what information is written to the stream for this table.
--   Valid values for <tt>StreamViewType</tt> are:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the key attributes of the modified item
--   are written to the stream.</li>
--   <li><tt>NEW_IMAGE</tt> - The entire item, as it appears after it was
--   modified, is written to the stream.</li>
--   <li><tt>OLD_IMAGE</tt> - The entire item, as it appeared before it was
--   modified, is written to the stream.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old item images
--   of the item are written to the stream.</li>
--   </ul>
[$sel:streamViewType:StreamSpecification'] :: StreamSpecification -> Maybe StreamViewType

-- | Indicates whether DynamoDB Streams is enabled (true) or disabled
--   (false) on the table.
[$sel:streamEnabled:StreamSpecification'] :: StreamSpecification -> Bool

-- | Create a value of <a>StreamSpecification</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamViewType:StreamSpecification'</a>,
--   <a>streamSpecification_streamViewType</a> - When an item in the table
--   is modified, <tt>StreamViewType</tt> determines what information is
--   written to the stream for this table. Valid values for
--   <tt>StreamViewType</tt> are:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the key attributes of the modified item
--   are written to the stream.</li>
--   <li><tt>NEW_IMAGE</tt> - The entire item, as it appears after it was
--   modified, is written to the stream.</li>
--   <li><tt>OLD_IMAGE</tt> - The entire item, as it appeared before it was
--   modified, is written to the stream.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old item images
--   of the item are written to the stream.</li>
--   </ul>
--   
--   <a>$sel:streamEnabled:StreamSpecification'</a>,
--   <a>streamSpecification_streamEnabled</a> - Indicates whether DynamoDB
--   Streams is enabled (true) or disabled (false) on the table.
newStreamSpecification :: Bool -> StreamSpecification

-- | When an item in the table is modified, <tt>StreamViewType</tt>
--   determines what information is written to the stream for this table.
--   Valid values for <tt>StreamViewType</tt> are:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the key attributes of the modified item
--   are written to the stream.</li>
--   <li><tt>NEW_IMAGE</tt> - The entire item, as it appears after it was
--   modified, is written to the stream.</li>
--   <li><tt>OLD_IMAGE</tt> - The entire item, as it appeared before it was
--   modified, is written to the stream.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old item images
--   of the item are written to the stream.</li>
--   </ul>
streamSpecification_streamViewType :: Lens' StreamSpecification (Maybe StreamViewType)

-- | Indicates whether DynamoDB Streams is enabled (true) or disabled
--   (false) on the table.
streamSpecification_streamEnabled :: Lens' StreamSpecification Bool

-- | Represents the auto scaling configuration for a global table.
--   
--   <i>See:</i> <a>newTableAutoScalingDescription</a> smart constructor.
data TableAutoScalingDescription
TableAutoScalingDescription' :: Maybe TableStatus -> Maybe [ReplicaAutoScalingDescription] -> Maybe Text -> TableAutoScalingDescription

-- | The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   </ul>
[$sel:tableStatus:TableAutoScalingDescription'] :: TableAutoScalingDescription -> Maybe TableStatus

-- | Represents replicas of the global table.
[$sel:replicas:TableAutoScalingDescription'] :: TableAutoScalingDescription -> Maybe [ReplicaAutoScalingDescription]

-- | The name of the table.
[$sel:tableName:TableAutoScalingDescription'] :: TableAutoScalingDescription -> Maybe Text

-- | Create a value of <a>TableAutoScalingDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableStatus:TableAutoScalingDescription'</a>,
--   <a>tableAutoScalingDescription_tableStatus</a> - The current state of
--   the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   </ul>
--   
--   <a>$sel:replicas:TableAutoScalingDescription'</a>,
--   <a>tableAutoScalingDescription_replicas</a> - Represents replicas of
--   the global table.
--   
--   <a>$sel:tableName:TableAutoScalingDescription'</a>,
--   <a>tableAutoScalingDescription_tableName</a> - The name of the table.
newTableAutoScalingDescription :: TableAutoScalingDescription

-- | The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   </ul>
tableAutoScalingDescription_tableStatus :: Lens' TableAutoScalingDescription (Maybe TableStatus)

-- | Represents replicas of the global table.
tableAutoScalingDescription_replicas :: Lens' TableAutoScalingDescription (Maybe [ReplicaAutoScalingDescription])

-- | The name of the table.
tableAutoScalingDescription_tableName :: Lens' TableAutoScalingDescription (Maybe Text)

-- | Represents the properties of a table.
--   
--   <i>See:</i> <a>newTableDescription</a> smart constructor.
data TableDescription
TableDescription' :: Maybe RestoreSummary -> Maybe Text -> Maybe Integer -> Maybe [AttributeDefinition] -> Maybe Text -> Maybe ProvisionedThroughputDescription -> Maybe TableStatus -> Maybe Text -> Maybe (NonEmpty KeySchemaElement) -> Maybe [GlobalSecondaryIndexDescription] -> Maybe Text -> Maybe BillingModeSummary -> Maybe [LocalSecondaryIndexDescription] -> Maybe POSIX -> Maybe SSEDescription -> Maybe Text -> Maybe [ReplicaDescription] -> Maybe Integer -> Maybe ArchivalSummary -> Maybe Text -> Maybe StreamSpecification -> TableDescription

-- | Contains details for the restore.
[$sel:restoreSummary:TableDescription'] :: TableDescription -> Maybe RestoreSummary

-- | Represents the version of <a>global tables</a> in use, if the table is
--   replicated across AWS Regions.
[$sel:globalTableVersion:TableDescription'] :: TableDescription -> Maybe Text

-- | The total size of the specified table, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
[$sel:tableSizeBytes:TableDescription'] :: TableDescription -> Maybe Integer

-- | An array of <tt>AttributeDefinition</tt> objects. Each of these
--   objects describes one attribute in the table and index key schema.
--   
--   Each <tt>AttributeDefinition</tt> object in this array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>AttributeType</tt> - The data type for the attribute.</li>
--   </ul>
[$sel:attributeDefinitions:TableDescription'] :: TableDescription -> Maybe [AttributeDefinition]

-- | The Amazon Resource Name (ARN) that uniquely identifies the latest
--   stream for this table.
[$sel:latestStreamArn:TableDescription'] :: TableDescription -> Maybe Text

-- | The provisioned throughput settings for the table, consisting of read
--   and write capacity units, along with data about increases and
--   decreases.
[$sel:provisionedThroughput:TableDescription'] :: TableDescription -> Maybe ProvisionedThroughputDescription

-- | The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The AWS KMS key
--   used to encrypt the table in inaccessible. Table operations may fail
--   due to failure to use the AWS KMS key. DynamoDB will initiate the
--   table archival process when a table's AWS KMS key remains inaccessible
--   for more than seven days.</li>
--   <li><tt>ARCHIVING</tt> - The table is being archived. Operations are
--   not allowed until archival is complete.</li>
--   <li><tt>ARCHIVED</tt> - The table has been archived. See the
--   ArchivalReason for more information.</li>
--   </ul>
[$sel:tableStatus:TableDescription'] :: TableDescription -> Maybe TableStatus

-- | The Amazon Resource Name (ARN) that uniquely identifies the table.
[$sel:tableArn:TableDescription'] :: TableDescription -> Maybe Text

-- | The primary key structure for the table. Each
--   <tt>KeySchemaElement</tt> consists of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>KeyType</tt> - The role of the attribute:<ul><li><tt>HASH</tt>
--   - partition key</li><li><tt>RANGE</tt> - sort key</li></ul>The
--   partition key of an item is also known as its <i>hash attribute</i>.
--   The term "hash attribute" derives from DynamoDB's usage of an internal
--   hash function to evenly distribute data items across partitions, based
--   on their partition key values.The sort key of an item is also known as
--   its <i>range attribute</i>. The term "range attribute" derives from
--   the way DynamoDB stores items with the same partition key physically
--   close together, in sorted order by the sort key value.</li>
--   </ul>
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:keySchema:TableDescription'] :: TableDescription -> Maybe (NonEmpty KeySchemaElement)

-- | The global secondary indexes, if any, on the table. Each index is
--   scoped to a given partition key value. Each element is composed of:
--   
--   <ul>
--   <li><tt>Backfilling</tt> - If true, then the index is currently in the
--   backfilling phase. Backfilling occurs only when a new global secondary
--   index is added to the table. It is the process by which DynamoDB
--   populates the new index with data from the table. (This attribute does
--   not appear for indexes that were created during a <tt>CreateTable</tt>
--   operation.)You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false. (This attribute does not appear for
--   indexes that were created during a <tt>CreateTable</tt>
--   operation.)</li>
--   <li><tt>IndexName</tt> - The name of the global secondary index.</li>
--   <li><tt>IndexSizeBytes</tt> - The total size of the global secondary
--   index, in bytes. DynamoDB updates this value approximately every six
--   hours. Recent changes might not be reflected in this value.</li>
--   <li><tt>IndexStatus</tt> - The current status of the global secondary
--   index:<ul><li><tt>CREATING</tt> - The index is being
--   created.</li><li><tt>UPDATING</tt> - The index is being
--   updated.</li><li><tt>DELETING</tt> - The index is being
--   deleted.</li><li><tt>ACTIVE</tt> - The index is ready for
--   use.</li></ul></li>
--   <li><tt>ItemCount</tt> - The number of items in the global secondary
--   index. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - In addition
--   to the attributes described in <tt>KEYS_ONLY</tt>, the secondary index
--   will include other non-key attributes that you
--   specify.</li><li><tt>ALL</tt> - All of the table attributes are
--   projected into the index.</li></ul></li><li><tt>NonKeyAttributes</tt>
--   - A list of one or more non-key attribute names that are projected
--   into the secondary index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units, along with data about increases and decreases.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
[$sel:globalSecondaryIndexes:TableDescription'] :: TableDescription -> Maybe [GlobalSecondaryIndexDescription]

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>AWS customer ID</li>
--   <li>Table name</li>
--   <li><pre>StreamLabel</pre></li>
--   </ul>
[$sel:latestStreamLabel:TableDescription'] :: TableDescription -> Maybe Text

-- | Contains the details for the read/write capacity mode.
[$sel:billingModeSummary:TableDescription'] :: TableDescription -> Maybe BillingModeSummary

-- | Represents one or more local secondary indexes on the table. Each
--   index is scoped to a given partition key value. Tables with one or
--   more local secondary indexes are subject to an item collection size
--   limit, where the amount of data within a given item collection cannot
--   exceed 10 GB. Each element is composed of:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>IndexSizeBytes</tt> - Represents the total size of the index,
--   in bytes. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>ItemCount</tt> - Represents the number of items in the index.
--   DynamoDB updates this value approximately every six hours. Recent
--   changes might not be reflected in this value.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
[$sel:localSecondaryIndexes:TableDescription'] :: TableDescription -> Maybe [LocalSecondaryIndexDescription]

-- | The date and time when the table was created, in <a>UNIX epoch
--   time</a> format.
[$sel:creationDateTime:TableDescription'] :: TableDescription -> Maybe POSIX

-- | The description of the server-side encryption status on the specified
--   table.
[$sel:sSEDescription:TableDescription'] :: TableDescription -> Maybe SSEDescription

-- | Unique identifier for the table for which the backup was created.
[$sel:tableId:TableDescription'] :: TableDescription -> Maybe Text

-- | Represents replicas of the table.
[$sel:replicas:TableDescription'] :: TableDescription -> Maybe [ReplicaDescription]

-- | The number of items in the specified table. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
[$sel:itemCount:TableDescription'] :: TableDescription -> Maybe Integer

-- | Contains information about the table archive.
[$sel:archivalSummary:TableDescription'] :: TableDescription -> Maybe ArchivalSummary

-- | The name of the table.
[$sel:tableName:TableDescription'] :: TableDescription -> Maybe Text

-- | The current DynamoDB Streams configuration for the table.
[$sel:streamSpecification:TableDescription'] :: TableDescription -> Maybe StreamSpecification

-- | Create a value of <a>TableDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:restoreSummary:TableDescription'</a>,
--   <a>tableDescription_restoreSummary</a> - Contains details for the
--   restore.
--   
--   <a>$sel:globalTableVersion:TableDescription'</a>,
--   <a>tableDescription_globalTableVersion</a> - Represents the version of
--   <a>global tables</a> in use, if the table is replicated across AWS
--   Regions.
--   
--   <a>$sel:tableSizeBytes:TableDescription'</a>,
--   <a>tableDescription_tableSizeBytes</a> - The total size of the
--   specified table, in bytes. DynamoDB updates this value approximately
--   every six hours. Recent changes might not be reflected in this value.
--   
--   <a>$sel:attributeDefinitions:TableDescription'</a>,
--   <a>tableDescription_attributeDefinitions</a> - An array of
--   <tt>AttributeDefinition</tt> objects. Each of these objects describes
--   one attribute in the table and index key schema.
--   
--   Each <tt>AttributeDefinition</tt> object in this array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>AttributeType</tt> - The data type for the attribute.</li>
--   </ul>
--   
--   <a>$sel:latestStreamArn:TableDescription'</a>,
--   <a>tableDescription_latestStreamArn</a> - The Amazon Resource Name
--   (ARN) that uniquely identifies the latest stream for this table.
--   
--   <a>$sel:provisionedThroughput:TableDescription'</a>,
--   <a>tableDescription_provisionedThroughput</a> - The provisioned
--   throughput settings for the table, consisting of read and write
--   capacity units, along with data about increases and decreases.
--   
--   <a>$sel:tableStatus:TableDescription'</a>,
--   <a>tableDescription_tableStatus</a> - The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The AWS KMS key
--   used to encrypt the table in inaccessible. Table operations may fail
--   due to failure to use the AWS KMS key. DynamoDB will initiate the
--   table archival process when a table's AWS KMS key remains inaccessible
--   for more than seven days.</li>
--   <li><tt>ARCHIVING</tt> - The table is being archived. Operations are
--   not allowed until archival is complete.</li>
--   <li><tt>ARCHIVED</tt> - The table has been archived. See the
--   ArchivalReason for more information.</li>
--   </ul>
--   
--   <a>$sel:tableArn:TableDescription'</a>,
--   <a>tableDescription_tableArn</a> - The Amazon Resource Name (ARN) that
--   uniquely identifies the table.
--   
--   <a>$sel:keySchema:TableDescription'</a>,
--   <a>tableDescription_keySchema</a> - The primary key structure for the
--   table. Each <tt>KeySchemaElement</tt> consists of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>KeyType</tt> - The role of the attribute:<ul><li><tt>HASH</tt>
--   - partition key</li><li><tt>RANGE</tt> - sort key</li></ul>The
--   partition key of an item is also known as its <i>hash attribute</i>.
--   The term "hash attribute" derives from DynamoDB's usage of an internal
--   hash function to evenly distribute data items across partitions, based
--   on their partition key values.The sort key of an item is also known as
--   its <i>range attribute</i>. The term "range attribute" derives from
--   the way DynamoDB stores items with the same partition key physically
--   close together, in sorted order by the sort key value.</li>
--   </ul>
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:globalSecondaryIndexes:TableDescription'</a>,
--   <a>tableDescription_globalSecondaryIndexes</a> - The global secondary
--   indexes, if any, on the table. Each index is scoped to a given
--   partition key value. Each element is composed of:
--   
--   <ul>
--   <li><tt>Backfilling</tt> - If true, then the index is currently in the
--   backfilling phase. Backfilling occurs only when a new global secondary
--   index is added to the table. It is the process by which DynamoDB
--   populates the new index with data from the table. (This attribute does
--   not appear for indexes that were created during a <tt>CreateTable</tt>
--   operation.)You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false. (This attribute does not appear for
--   indexes that were created during a <tt>CreateTable</tt>
--   operation.)</li>
--   <li><tt>IndexName</tt> - The name of the global secondary index.</li>
--   <li><tt>IndexSizeBytes</tt> - The total size of the global secondary
--   index, in bytes. DynamoDB updates this value approximately every six
--   hours. Recent changes might not be reflected in this value.</li>
--   <li><tt>IndexStatus</tt> - The current status of the global secondary
--   index:<ul><li><tt>CREATING</tt> - The index is being
--   created.</li><li><tt>UPDATING</tt> - The index is being
--   updated.</li><li><tt>DELETING</tt> - The index is being
--   deleted.</li><li><tt>ACTIVE</tt> - The index is ready for
--   use.</li></ul></li>
--   <li><tt>ItemCount</tt> - The number of items in the global secondary
--   index. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - In addition
--   to the attributes described in <tt>KEYS_ONLY</tt>, the secondary index
--   will include other non-key attributes that you
--   specify.</li><li><tt>ALL</tt> - All of the table attributes are
--   projected into the index.</li></ul></li><li><tt>NonKeyAttributes</tt>
--   - A list of one or more non-key attribute names that are projected
--   into the secondary index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units, along with data about increases and decreases.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
--   
--   <a>$sel:latestStreamLabel:TableDescription'</a>,
--   <a>tableDescription_latestStreamLabel</a> - A timestamp, in ISO 8601
--   format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>AWS customer ID</li>
--   <li>Table name</li>
--   <li><pre>StreamLabel</pre></li>
--   </ul>
--   
--   <a>$sel:billingModeSummary:TableDescription'</a>,
--   <a>tableDescription_billingModeSummary</a> - Contains the details for
--   the read/write capacity mode.
--   
--   <a>$sel:localSecondaryIndexes:TableDescription'</a>,
--   <a>tableDescription_localSecondaryIndexes</a> - Represents one or more
--   local secondary indexes on the table. Each index is scoped to a given
--   partition key value. Tables with one or more local secondary indexes
--   are subject to an item collection size limit, where the amount of data
--   within a given item collection cannot exceed 10 GB. Each element is
--   composed of:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>IndexSizeBytes</tt> - Represents the total size of the index,
--   in bytes. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>ItemCount</tt> - Represents the number of items in the index.
--   DynamoDB updates this value approximately every six hours. Recent
--   changes might not be reflected in this value.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
--   
--   <a>$sel:creationDateTime:TableDescription'</a>,
--   <a>tableDescription_creationDateTime</a> - The date and time when the
--   table was created, in <a>UNIX epoch time</a> format.
--   
--   <a>$sel:sSEDescription:TableDescription'</a>,
--   <a>tableDescription_sSEDescription</a> - The description of the
--   server-side encryption status on the specified table.
--   
--   <a>$sel:tableId:TableDescription'</a>, <a>tableDescription_tableId</a>
--   - Unique identifier for the table for which the backup was created.
--   
--   <a>$sel:replicas:TableDescription'</a>,
--   <a>tableDescription_replicas</a> - Represents replicas of the table.
--   
--   <a>$sel:itemCount:TableDescription'</a>,
--   <a>tableDescription_itemCount</a> - The number of items in the
--   specified table. DynamoDB updates this value approximately every six
--   hours. Recent changes might not be reflected in this value.
--   
--   <a>$sel:archivalSummary:TableDescription'</a>,
--   <a>tableDescription_archivalSummary</a> - Contains information about
--   the table archive.
--   
--   <a>$sel:tableName:TableDescription'</a>,
--   <a>tableDescription_tableName</a> - The name of the table.
--   
--   <a>$sel:streamSpecification:TableDescription'</a>,
--   <a>tableDescription_streamSpecification</a> - The current DynamoDB
--   Streams configuration for the table.
newTableDescription :: TableDescription

-- | Contains details for the restore.
tableDescription_restoreSummary :: Lens' TableDescription (Maybe RestoreSummary)

-- | Represents the version of <a>global tables</a> in use, if the table is
--   replicated across AWS Regions.
tableDescription_globalTableVersion :: Lens' TableDescription (Maybe Text)

-- | The total size of the specified table, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
tableDescription_tableSizeBytes :: Lens' TableDescription (Maybe Integer)

-- | An array of <tt>AttributeDefinition</tt> objects. Each of these
--   objects describes one attribute in the table and index key schema.
--   
--   Each <tt>AttributeDefinition</tt> object in this array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>AttributeType</tt> - The data type for the attribute.</li>
--   </ul>
tableDescription_attributeDefinitions :: Lens' TableDescription (Maybe [AttributeDefinition])

-- | The Amazon Resource Name (ARN) that uniquely identifies the latest
--   stream for this table.
tableDescription_latestStreamArn :: Lens' TableDescription (Maybe Text)

-- | The provisioned throughput settings for the table, consisting of read
--   and write capacity units, along with data about increases and
--   decreases.
tableDescription_provisionedThroughput :: Lens' TableDescription (Maybe ProvisionedThroughputDescription)

-- | The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The AWS KMS key
--   used to encrypt the table in inaccessible. Table operations may fail
--   due to failure to use the AWS KMS key. DynamoDB will initiate the
--   table archival process when a table's AWS KMS key remains inaccessible
--   for more than seven days.</li>
--   <li><tt>ARCHIVING</tt> - The table is being archived. Operations are
--   not allowed until archival is complete.</li>
--   <li><tt>ARCHIVED</tt> - The table has been archived. See the
--   ArchivalReason for more information.</li>
--   </ul>
tableDescription_tableStatus :: Lens' TableDescription (Maybe TableStatus)

-- | The Amazon Resource Name (ARN) that uniquely identifies the table.
tableDescription_tableArn :: Lens' TableDescription (Maybe Text)

-- | The primary key structure for the table. Each
--   <tt>KeySchemaElement</tt> consists of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>KeyType</tt> - The role of the attribute:<ul><li><tt>HASH</tt>
--   - partition key</li><li><tt>RANGE</tt> - sort key</li></ul>The
--   partition key of an item is also known as its <i>hash attribute</i>.
--   The term "hash attribute" derives from DynamoDB's usage of an internal
--   hash function to evenly distribute data items across partitions, based
--   on their partition key values.The sort key of an item is also known as
--   its <i>range attribute</i>. The term "range attribute" derives from
--   the way DynamoDB stores items with the same partition key physically
--   close together, in sorted order by the sort key value.</li>
--   </ul>
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
tableDescription_keySchema :: Lens' TableDescription (Maybe (NonEmpty KeySchemaElement))

-- | The global secondary indexes, if any, on the table. Each index is
--   scoped to a given partition key value. Each element is composed of:
--   
--   <ul>
--   <li><tt>Backfilling</tt> - If true, then the index is currently in the
--   backfilling phase. Backfilling occurs only when a new global secondary
--   index is added to the table. It is the process by which DynamoDB
--   populates the new index with data from the table. (This attribute does
--   not appear for indexes that were created during a <tt>CreateTable</tt>
--   operation.)You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false. (This attribute does not appear for
--   indexes that were created during a <tt>CreateTable</tt>
--   operation.)</li>
--   <li><tt>IndexName</tt> - The name of the global secondary index.</li>
--   <li><tt>IndexSizeBytes</tt> - The total size of the global secondary
--   index, in bytes. DynamoDB updates this value approximately every six
--   hours. Recent changes might not be reflected in this value.</li>
--   <li><tt>IndexStatus</tt> - The current status of the global secondary
--   index:<ul><li><tt>CREATING</tt> - The index is being
--   created.</li><li><tt>UPDATING</tt> - The index is being
--   updated.</li><li><tt>DELETING</tt> - The index is being
--   deleted.</li><li><tt>ACTIVE</tt> - The index is ready for
--   use.</li></ul></li>
--   <li><tt>ItemCount</tt> - The number of items in the global secondary
--   index. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - In addition
--   to the attributes described in <tt>KEYS_ONLY</tt>, the secondary index
--   will include other non-key attributes that you
--   specify.</li><li><tt>ALL</tt> - All of the table attributes are
--   projected into the index.</li></ul></li><li><tt>NonKeyAttributes</tt>
--   - A list of one or more non-key attribute names that are projected
--   into the secondary index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units, along with data about increases and decreases.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
tableDescription_globalSecondaryIndexes :: Lens' TableDescription (Maybe [GlobalSecondaryIndexDescription])

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>AWS customer ID</li>
--   <li>Table name</li>
--   <li><pre>StreamLabel</pre></li>
--   </ul>
tableDescription_latestStreamLabel :: Lens' TableDescription (Maybe Text)

-- | Contains the details for the read/write capacity mode.
tableDescription_billingModeSummary :: Lens' TableDescription (Maybe BillingModeSummary)

-- | Represents one or more local secondary indexes on the table. Each
--   index is scoped to a given partition key value. Tables with one or
--   more local secondary indexes are subject to an item collection size
--   limit, where the amount of data within a given item collection cannot
--   exceed 10 GB. Each element is composed of:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>IndexSizeBytes</tt> - Represents the total size of the index,
--   in bytes. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>ItemCount</tt> - Represents the number of items in the index.
--   DynamoDB updates this value approximately every six hours. Recent
--   changes might not be reflected in this value.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
tableDescription_localSecondaryIndexes :: Lens' TableDescription (Maybe [LocalSecondaryIndexDescription])

-- | The date and time when the table was created, in <a>UNIX epoch
--   time</a> format.
tableDescription_creationDateTime :: Lens' TableDescription (Maybe UTCTime)

-- | The description of the server-side encryption status on the specified
--   table.
tableDescription_sSEDescription :: Lens' TableDescription (Maybe SSEDescription)

-- | Unique identifier for the table for which the backup was created.
tableDescription_tableId :: Lens' TableDescription (Maybe Text)

-- | Represents replicas of the table.
tableDescription_replicas :: Lens' TableDescription (Maybe [ReplicaDescription])

-- | The number of items in the specified table. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
tableDescription_itemCount :: Lens' TableDescription (Maybe Integer)

-- | Contains information about the table archive.
tableDescription_archivalSummary :: Lens' TableDescription (Maybe ArchivalSummary)

-- | The name of the table.
tableDescription_tableName :: Lens' TableDescription (Maybe Text)

-- | The current DynamoDB Streams configuration for the table.
tableDescription_streamSpecification :: Lens' TableDescription (Maybe StreamSpecification)

-- | Describes a tag. A tag is a key-value pair. You can add up to 50 tags
--   to a single DynamoDB table.
--   
--   AWS-assigned tag names and values are automatically assigned the
--   <tt>aws:</tt> prefix, which the user cannot assign. AWS-assigned tag
--   names do not count towards the tag limit of 50. User-assigned tag
--   names have the prefix <tt>user:</tt> in the Cost Allocation Report.
--   You cannot backdate the application of a tag.
--   
--   For an overview on tagging DynamoDB resources, see <a>Tagging for
--   DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | The key of the tag. Tag keys are case sensitive. Each DynamoDB table
--   can only have up to one tag with the same key. If you try to add an
--   existing tag (same key), the existing tag value will be updated to the
--   new value.
[$sel:key:Tag'] :: Tag -> Text

-- | The value of the tag. Tag values are case-sensitive and can be null.
[$sel:value:Tag'] :: Tag -> Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The key of the tag. Tag keys
--   are case sensitive. Each DynamoDB table can only have up to one tag
--   with the same key. If you try to add an existing tag (same key), the
--   existing tag value will be updated to the new value.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The value of the tag. Tag
--   values are case-sensitive and can be null.
newTag :: Text -> Text -> Tag

-- | The key of the tag. Tag keys are case sensitive. Each DynamoDB table
--   can only have up to one tag with the same key. If you try to add an
--   existing tag (same key), the existing tag value will be updated to the
--   new value.
tag_key :: Lens' Tag Text

-- | The value of the tag. Tag values are case-sensitive and can be null.
tag_value :: Lens' Tag Text

-- | The description of the Time to Live (TTL) status on the specified
--   table.
--   
--   <i>See:</i> <a>newTimeToLiveDescription</a> smart constructor.
data TimeToLiveDescription
TimeToLiveDescription' :: Maybe TimeToLiveStatus -> Maybe Text -> TimeToLiveDescription

-- | The TTL status for the table.
[$sel:timeToLiveStatus:TimeToLiveDescription'] :: TimeToLiveDescription -> Maybe TimeToLiveStatus

-- | The name of the TTL attribute for items in the table.
[$sel:attributeName:TimeToLiveDescription'] :: TimeToLiveDescription -> Maybe Text

-- | Create a value of <a>TimeToLiveDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeToLiveStatus:TimeToLiveDescription'</a>,
--   <a>timeToLiveDescription_timeToLiveStatus</a> - The TTL status for the
--   table.
--   
--   <a>$sel:attributeName:TimeToLiveDescription'</a>,
--   <a>timeToLiveDescription_attributeName</a> - The name of the TTL
--   attribute for items in the table.
newTimeToLiveDescription :: TimeToLiveDescription

-- | The TTL status for the table.
timeToLiveDescription_timeToLiveStatus :: Lens' TimeToLiveDescription (Maybe TimeToLiveStatus)

-- | The name of the TTL attribute for items in the table.
timeToLiveDescription_attributeName :: Lens' TimeToLiveDescription (Maybe Text)

-- | Represents the settings used to enable or disable Time to Live (TTL)
--   for the specified table.
--   
--   <i>See:</i> <a>newTimeToLiveSpecification</a> smart constructor.
data TimeToLiveSpecification
TimeToLiveSpecification' :: Bool -> Text -> TimeToLiveSpecification

-- | Indicates whether TTL is to be enabled (true) or disabled (false) on
--   the table.
[$sel:enabled:TimeToLiveSpecification'] :: TimeToLiveSpecification -> Bool

-- | The name of the TTL attribute used to store the expiration time for
--   items in the table.
[$sel:attributeName:TimeToLiveSpecification'] :: TimeToLiveSpecification -> Text

-- | Create a value of <a>TimeToLiveSpecification</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enabled:TimeToLiveSpecification'</a>,
--   <a>timeToLiveSpecification_enabled</a> - Indicates whether TTL is to
--   be enabled (true) or disabled (false) on the table.
--   
--   <a>$sel:attributeName:TimeToLiveSpecification'</a>,
--   <a>timeToLiveSpecification_attributeName</a> - The name of the TTL
--   attribute used to store the expiration time for items in the table.
newTimeToLiveSpecification :: Bool -> Text -> TimeToLiveSpecification

-- | Indicates whether TTL is to be enabled (true) or disabled (false) on
--   the table.
timeToLiveSpecification_enabled :: Lens' TimeToLiveSpecification Bool

-- | The name of the TTL attribute used to store the expiration time for
--   items in the table.
timeToLiveSpecification_attributeName :: Lens' TimeToLiveSpecification Text

-- | Specifies an item to be retrieved as part of the transaction.
--   
--   <i>See:</i> <a>newTransactGetItem</a> smart constructor.
data TransactGetItem
TransactGetItem' :: Get -> TransactGetItem

-- | Contains the primary key that identifies the item to get, together
--   with the name of the table that contains the item, and optionally the
--   specific attributes of the item to retrieve.
[$sel:get':TransactGetItem'] :: TransactGetItem -> Get

-- | Create a value of <a>TransactGetItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:get':TransactGetItem'</a>, <a>transactGetItem_get</a> -
--   Contains the primary key that identifies the item to get, together
--   with the name of the table that contains the item, and optionally the
--   specific attributes of the item to retrieve.
newTransactGetItem :: Get -> TransactGetItem

-- | Contains the primary key that identifies the item to get, together
--   with the name of the table that contains the item, and optionally the
--   specific attributes of the item to retrieve.
transactGetItem_get :: Lens' TransactGetItem Get

-- | A list of requests that can perform update, put, delete, or check
--   operations on multiple items in one or more tables atomically.
--   
--   <i>See:</i> <a>newTransactWriteItem</a> smart constructor.
data TransactWriteItem
TransactWriteItem' :: Maybe ConditionCheck -> Maybe Put -> Maybe Delete -> Maybe Update -> TransactWriteItem

-- | A request to perform a check item operation.
[$sel:conditionCheck:TransactWriteItem'] :: TransactWriteItem -> Maybe ConditionCheck

-- | A request to perform a <tt>PutItem</tt> operation.
[$sel:put:TransactWriteItem'] :: TransactWriteItem -> Maybe Put

-- | A request to perform a <tt>DeleteItem</tt> operation.
[$sel:delete':TransactWriteItem'] :: TransactWriteItem -> Maybe Delete

-- | A request to perform an <tt>UpdateItem</tt> operation.
[$sel:update:TransactWriteItem'] :: TransactWriteItem -> Maybe Update

-- | Create a value of <a>TransactWriteItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:conditionCheck:TransactWriteItem'</a>,
--   <a>transactWriteItem_conditionCheck</a> - A request to perform a check
--   item operation.
--   
--   <a>$sel:put:TransactWriteItem'</a>, <a>transactWriteItem_put</a> - A
--   request to perform a <tt>PutItem</tt> operation.
--   
--   <a>$sel:delete':TransactWriteItem'</a>,
--   <a>transactWriteItem_delete</a> - A request to perform a
--   <tt>DeleteItem</tt> operation.
--   
--   <a>$sel:update:TransactWriteItem'</a>, <a>transactWriteItem_update</a>
--   - A request to perform an <tt>UpdateItem</tt> operation.
newTransactWriteItem :: TransactWriteItem

-- | A request to perform a check item operation.
transactWriteItem_conditionCheck :: Lens' TransactWriteItem (Maybe ConditionCheck)

-- | A request to perform a <tt>PutItem</tt> operation.
transactWriteItem_put :: Lens' TransactWriteItem (Maybe Put)

-- | A request to perform a <tt>DeleteItem</tt> operation.
transactWriteItem_delete :: Lens' TransactWriteItem (Maybe Delete)

-- | A request to perform an <tt>UpdateItem</tt> operation.
transactWriteItem_update :: Lens' TransactWriteItem (Maybe Update)

-- | Represents a request to perform an <tt>UpdateItem</tt> operation.
--   
--   <i>See:</i> <a>newUpdate</a> smart constructor.
data Update
Update' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnValuesOnConditionCheckFailure -> Maybe Text -> HashMap Text AttributeValue -> Text -> Text -> Update

-- | One or more substitution tokens for attribute names in an expression.
[$sel:expressionAttributeNames:Update'] :: Update -> Maybe (HashMap Text Text)

-- | One or more values that can be substituted in an expression.
[$sel:expressionAttributeValues:Update'] :: Update -> Maybe (HashMap Text AttributeValue)

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Update</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE, ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.
[$sel:returnValuesOnConditionCheckFailure:Update'] :: Update -> Maybe ReturnValuesOnConditionCheckFailure

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
[$sel:conditionExpression:Update'] :: Update -> Maybe Text

-- | The primary key of the item to be updated. Each element consists of an
--   attribute name and a value for that attribute.
[$sel:key:Update'] :: Update -> HashMap Text AttributeValue

-- | An expression that defines one or more attributes to be updated, the
--   action to be performed on them, and new value(s) for them.
[$sel:updateExpression:Update'] :: Update -> Text

-- | Name of the table for the <tt>UpdateItem</tt> request.
[$sel:tableName:Update'] :: Update -> Text

-- | Create a value of <a>Update</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:Update'</a>,
--   <a>update_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression.
--   
--   <a>$sel:expressionAttributeValues:Update'</a>,
--   <a>update_expressionAttributeValues</a> - One or more values that can
--   be substituted in an expression.
--   
--   <a>$sel:returnValuesOnConditionCheckFailure:Update'</a>,
--   <a>update_returnValuesOnConditionCheckFailure</a> - Use
--   <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Update</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE, ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.
--   
--   <a>$sel:conditionExpression:Update'</a>,
--   <a>update_conditionExpression</a> - A condition that must be satisfied
--   in order for a conditional update to succeed.
--   
--   <a>$sel:key:Update'</a>, <a>update_key</a> - The primary key of the
--   item to be updated. Each element consists of an attribute name and a
--   value for that attribute.
--   
--   <a>$sel:updateExpression:Update'</a>, <a>update_updateExpression</a> -
--   An expression that defines one or more attributes to be updated, the
--   action to be performed on them, and new value(s) for them.
--   
--   <a>$sel:tableName:Update'</a>, <a>update_tableName</a> - Name of the
--   table for the <tt>UpdateItem</tt> request.
newUpdate :: Text -> Text -> Update

-- | One or more substitution tokens for attribute names in an expression.
update_expressionAttributeNames :: Lens' Update (Maybe (HashMap Text Text))

-- | One or more values that can be substituted in an expression.
update_expressionAttributeValues :: Lens' Update (Maybe (HashMap Text AttributeValue))

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Update</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE, ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.
update_returnValuesOnConditionCheckFailure :: Lens' Update (Maybe ReturnValuesOnConditionCheckFailure)

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
update_conditionExpression :: Lens' Update (Maybe Text)

-- | The primary key of the item to be updated. Each element consists of an
--   attribute name and a value for that attribute.
update_key :: Lens' Update (HashMap Text AttributeValue)

-- | An expression that defines one or more attributes to be updated, the
--   action to be performed on them, and new value(s) for them.
update_updateExpression :: Lens' Update Text

-- | Name of the table for the <tt>UpdateItem</tt> request.
update_tableName :: Lens' Update Text

-- | Represents the new provisioned throughput settings to be applied to a
--   global secondary index.
--   
--   <i>See:</i> <a>newUpdateGlobalSecondaryIndexAction</a> smart
--   constructor.
data UpdateGlobalSecondaryIndexAction
UpdateGlobalSecondaryIndexAction' :: Text -> ProvisionedThroughput -> UpdateGlobalSecondaryIndexAction

-- | The name of the global secondary index to be updated.
[$sel:indexName:UpdateGlobalSecondaryIndexAction'] :: UpdateGlobalSecondaryIndexAction -> Text

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:provisionedThroughput:UpdateGlobalSecondaryIndexAction'] :: UpdateGlobalSecondaryIndexAction -> ProvisionedThroughput

-- | Create a value of <a>UpdateGlobalSecondaryIndexAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:UpdateGlobalSecondaryIndexAction'</a>,
--   <a>updateGlobalSecondaryIndexAction_indexName</a> - The name of the
--   global secondary index to be updated.
--   
--   <a>$sel:provisionedThroughput:UpdateGlobalSecondaryIndexAction'</a>,
--   <a>updateGlobalSecondaryIndexAction_provisionedThroughput</a> -
--   Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
newUpdateGlobalSecondaryIndexAction :: Text -> ProvisionedThroughput -> UpdateGlobalSecondaryIndexAction

-- | The name of the global secondary index to be updated.
updateGlobalSecondaryIndexAction_indexName :: Lens' UpdateGlobalSecondaryIndexAction Text

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
updateGlobalSecondaryIndexAction_provisionedThroughput :: Lens' UpdateGlobalSecondaryIndexAction ProvisionedThroughput

-- | Represents a replica to be modified.
--   
--   <i>See:</i> <a>newUpdateReplicationGroupMemberAction</a> smart
--   constructor.
data UpdateReplicationGroupMemberAction
UpdateReplicationGroupMemberAction' :: Maybe Text -> Maybe ProvisionedThroughputOverride -> Maybe (NonEmpty ReplicaGlobalSecondaryIndex) -> Text -> UpdateReplicationGroupMemberAction

-- | The AWS KMS customer master key (CMK) of the replica that should be
--   used for AWS KMS encryption. To specify a CMK, use its key ID, Amazon
--   Resource Name (ARN), alias name, or alias ARN. Note that you should
--   only provide this parameter if the key is different from the default
--   DynamoDB KMS master key alias/aws/dynamodb.
[$sel:kmsMasterKeyId:UpdateReplicationGroupMemberAction'] :: UpdateReplicationGroupMemberAction -> Maybe Text

-- | Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
[$sel:provisionedThroughputOverride:UpdateReplicationGroupMemberAction'] :: UpdateReplicationGroupMemberAction -> Maybe ProvisionedThroughputOverride

-- | Replica-specific global secondary index settings.
[$sel:globalSecondaryIndexes:UpdateReplicationGroupMemberAction'] :: UpdateReplicationGroupMemberAction -> Maybe (NonEmpty ReplicaGlobalSecondaryIndex)

-- | The Region where the replica exists.
[$sel:regionName:UpdateReplicationGroupMemberAction'] :: UpdateReplicationGroupMemberAction -> Text

-- | Create a value of <a>UpdateReplicationGroupMemberAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsMasterKeyId:UpdateReplicationGroupMemberAction'</a>,
--   <a>updateReplicationGroupMemberAction_kmsMasterKeyId</a> - The AWS KMS
--   customer master key (CMK) of the replica that should be used for AWS
--   KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name
--   (ARN), alias name, or alias ARN. Note that you should only provide
--   this parameter if the key is different from the default DynamoDB KMS
--   master key alias/aws/dynamodb.
--   
--   
--   <a>$sel:provisionedThroughputOverride:UpdateReplicationGroupMemberAction'</a>,
--   <a>updateReplicationGroupMemberAction_provisionedThroughputOverride</a>
--   - Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
--   
--   
--   <a>$sel:globalSecondaryIndexes:UpdateReplicationGroupMemberAction'</a>,
--   <a>updateReplicationGroupMemberAction_globalSecondaryIndexes</a> -
--   Replica-specific global secondary index settings.
--   
--   <a>$sel:regionName:UpdateReplicationGroupMemberAction'</a>,
--   <a>updateReplicationGroupMemberAction_regionName</a> - The Region
--   where the replica exists.
newUpdateReplicationGroupMemberAction :: Text -> UpdateReplicationGroupMemberAction

-- | The AWS KMS customer master key (CMK) of the replica that should be
--   used for AWS KMS encryption. To specify a CMK, use its key ID, Amazon
--   Resource Name (ARN), alias name, or alias ARN. Note that you should
--   only provide this parameter if the key is different from the default
--   DynamoDB KMS master key alias/aws/dynamodb.
updateReplicationGroupMemberAction_kmsMasterKeyId :: Lens' UpdateReplicationGroupMemberAction (Maybe Text)

-- | Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
updateReplicationGroupMemberAction_provisionedThroughputOverride :: Lens' UpdateReplicationGroupMemberAction (Maybe ProvisionedThroughputOverride)

-- | Replica-specific global secondary index settings.
updateReplicationGroupMemberAction_globalSecondaryIndexes :: Lens' UpdateReplicationGroupMemberAction (Maybe (NonEmpty ReplicaGlobalSecondaryIndex))

-- | The Region where the replica exists.
updateReplicationGroupMemberAction_regionName :: Lens' UpdateReplicationGroupMemberAction Text

-- | Represents an operation to perform - either <tt>DeleteItem</tt> or
--   <tt>PutItem</tt>. You can only request one of these operations, not
--   both, in a single <tt>WriteRequest</tt>. If you do need to perform
--   both of these operations, you need to provide two separate
--   <tt>WriteRequest</tt> objects.
--   
--   <i>See:</i> <a>newWriteRequest</a> smart constructor.
data WriteRequest
WriteRequest' :: Maybe DeleteRequest -> Maybe PutRequest -> WriteRequest

-- | A request to perform a <tt>DeleteItem</tt> operation.
[$sel:deleteRequest:WriteRequest'] :: WriteRequest -> Maybe DeleteRequest

-- | A request to perform a <tt>PutItem</tt> operation.
[$sel:putRequest:WriteRequest'] :: WriteRequest -> Maybe PutRequest

-- | Create a value of <a>WriteRequest</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deleteRequest:WriteRequest'</a>,
--   <a>writeRequest_deleteRequest</a> - A request to perform a
--   <tt>DeleteItem</tt> operation.
--   
--   <a>$sel:putRequest:WriteRequest'</a>, <a>writeRequest_putRequest</a> -
--   A request to perform a <tt>PutItem</tt> operation.
newWriteRequest :: WriteRequest

-- | A request to perform a <tt>DeleteItem</tt> operation.
writeRequest_deleteRequest :: Lens' WriteRequest (Maybe DeleteRequest)

-- | A request to perform a <tt>PutItem</tt> operation.
writeRequest_putRequest :: Lens' WriteRequest (Maybe PutRequest)


-- | <tt>TransactWriteItems</tt> is a synchronous write operation that
--   groups up to 25 action requests. These actions can target items in
--   different tables, but not in different AWS accounts or Regions, and no
--   two actions can target the same item. For example, you cannot both
--   <tt>ConditionCheck</tt> and <tt>Update</tt> the same item. The
--   aggregate size of the items in the transaction cannot exceed 4 MB.
--   
--   The actions are completed atomically so that either all of them
--   succeed, or all of them fail. They are defined by the following
--   objects:
--   
--   <ul>
--   <li><tt>Put</tt> — Initiates a <tt>PutItem</tt> operation to write a
--   new item. This structure specifies the primary key of the item to be
--   written, the name of the table to write it in, an optional condition
--   expression that must be satisfied for the write to succeed, a list of
--   the item's attributes, and a field indicating whether to retrieve the
--   item's attributes if the condition is not met.</li>
--   <li><tt>Update</tt> — Initiates an <tt>UpdateItem</tt> operation to
--   update an existing item. This structure specifies the primary key of
--   the item to be updated, the name of the table where it resides, an
--   optional condition expression that must be satisfied for the update to
--   succeed, an expression that defines one or more attributes to be
--   updated, and a field indicating whether to retrieve the item's
--   attributes if the condition is not met.</li>
--   <li><tt>Delete</tt> — Initiates a <tt>DeleteItem</tt> operation to
--   delete an existing item. This structure specifies the primary key of
--   the item to be deleted, the name of the table where it resides, an
--   optional condition expression that must be satisfied for the deletion
--   to succeed, and a field indicating whether to retrieve the item's
--   attributes if the condition is not met.</li>
--   <li><tt>ConditionCheck</tt> — Applies a condition to an item that is
--   not being modified by the transaction. This structure specifies the
--   primary key of the item to be checked, the name of the table where it
--   resides, a condition expression that must be satisfied for the
--   transaction to succeed, and a field indicating whether to retrieve the
--   item's attributes if the condition is not met.</li>
--   </ul>
--   
--   DynamoDB rejects the entire <tt>TransactWriteItems</tt> request if any
--   of the following is true:
--   
--   <ul>
--   <li>A condition in one of the condition expressions is not met.</li>
--   <li>An ongoing operation is in the process of updating the same
--   item.</li>
--   <li>There is insufficient provisioned capacity for the transaction to
--   be completed.</li>
--   <li>An item size becomes too large (bigger than 400 KB), a local
--   secondary index (LSI) becomes too large, or a similar validation error
--   occurs because of changes made by the transaction.</li>
--   <li>The aggregate size of the items in the transaction exceeds 4
--   MB.</li>
--   <li>There is a user error, such as an invalid data format.</li>
--   </ul>
module Amazonka.DynamoDB.TransactWriteItems

-- | <i>See:</i> <a>newTransactWriteItems</a> smart constructor.
data TransactWriteItems
TransactWriteItems' :: Maybe ReturnConsumedCapacity -> Maybe ReturnItemCollectionMetrics -> Maybe Text -> NonEmpty TransactWriteItem -> TransactWriteItems
[$sel:returnConsumedCapacity:TransactWriteItems'] :: TransactWriteItems -> Maybe ReturnConsumedCapacity

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item collections
--   (if any), that were modified during the operation and are returned in
--   the response. If set to <tt>NONE</tt> (the default), no statistics are
--   returned.
[$sel:returnItemCollectionMetrics:TransactWriteItems'] :: TransactWriteItems -> Maybe ReturnItemCollectionMetrics

-- | Providing a <tt>ClientRequestToken</tt> makes the call to
--   <tt>TransactWriteItems</tt> idempotent, meaning that multiple
--   identical calls have the same effect as one single call.
--   
--   Although multiple identical calls using the same client request token
--   produce the same result on the server (no side effects), the responses
--   to the calls might not be the same. If the
--   <tt>ReturnConsumedCapacity&gt;</tt> parameter is set, then the initial
--   <tt>TransactWriteItems</tt> call returns the amount of write capacity
--   units consumed in making the changes. Subsequent
--   <tt>TransactWriteItems</tt> calls with the same client token return
--   the number of read capacity units consumed in reading the item.
--   
--   A client request token is valid for 10 minutes after the first request
--   that uses it is completed. After 10 minutes, any request with the same
--   client token is treated as a new request. Do not resubmit the same
--   request with the same client token for more than 10 minutes, or the
--   result might not be idempotent.
--   
--   If you submit a request with the same client token but a change in
--   other parameters within the 10-minute idempotency window, DynamoDB
--   returns an <tt>IdempotentParameterMismatch</tt> exception.
[$sel:clientRequestToken:TransactWriteItems'] :: TransactWriteItems -> Maybe Text

-- | An ordered array of up to 25 <tt>TransactWriteItem</tt> objects, each
--   of which contains a <tt>ConditionCheck</tt>, <tt>Put</tt>,
--   <tt>Update</tt>, or <tt>Delete</tt> object. These can operate on items
--   in different tables, but the tables must reside in the same AWS
--   account and Region, and no two of them can operate on the same item.
[$sel:transactItems:TransactWriteItems'] :: TransactWriteItems -> NonEmpty TransactWriteItem

-- | Create a value of <a>TransactWriteItems</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:returnConsumedCapacity:TransactWriteItems'</a>,
--   <a>transactWriteItems_returnConsumedCapacity</a> - Undocumented
--   member.
--   
--   <a>$sel:returnItemCollectionMetrics:TransactWriteItems'</a>,
--   <a>transactWriteItems_returnItemCollectionMetrics</a> - Determines
--   whether item collection metrics are returned. If set to <tt>SIZE</tt>,
--   the response includes statistics about item collections (if any), that
--   were modified during the operation and are returned in the response.
--   If set to <tt>NONE</tt> (the default), no statistics are returned.
--   
--   <a>$sel:clientRequestToken:TransactWriteItems'</a>,
--   <a>transactWriteItems_clientRequestToken</a> - Providing a
--   <tt>ClientRequestToken</tt> makes the call to
--   <tt>TransactWriteItems</tt> idempotent, meaning that multiple
--   identical calls have the same effect as one single call.
--   
--   Although multiple identical calls using the same client request token
--   produce the same result on the server (no side effects), the responses
--   to the calls might not be the same. If the
--   <tt>ReturnConsumedCapacity&gt;</tt> parameter is set, then the initial
--   <tt>TransactWriteItems</tt> call returns the amount of write capacity
--   units consumed in making the changes. Subsequent
--   <tt>TransactWriteItems</tt> calls with the same client token return
--   the number of read capacity units consumed in reading the item.
--   
--   A client request token is valid for 10 minutes after the first request
--   that uses it is completed. After 10 minutes, any request with the same
--   client token is treated as a new request. Do not resubmit the same
--   request with the same client token for more than 10 minutes, or the
--   result might not be idempotent.
--   
--   If you submit a request with the same client token but a change in
--   other parameters within the 10-minute idempotency window, DynamoDB
--   returns an <tt>IdempotentParameterMismatch</tt> exception.
--   
--   <a>$sel:transactItems:TransactWriteItems'</a>,
--   <a>transactWriteItems_transactItems</a> - An ordered array of up to 25
--   <tt>TransactWriteItem</tt> objects, each of which contains a
--   <tt>ConditionCheck</tt>, <tt>Put</tt>, <tt>Update</tt>, or
--   <tt>Delete</tt> object. These can operate on items in different
--   tables, but the tables must reside in the same AWS account and Region,
--   and no two of them can operate on the same item.
newTransactWriteItems :: NonEmpty TransactWriteItem -> TransactWriteItems

-- | Undocumented member.
transactWriteItems_returnConsumedCapacity :: Lens' TransactWriteItems (Maybe ReturnConsumedCapacity)

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item collections
--   (if any), that were modified during the operation and are returned in
--   the response. If set to <tt>NONE</tt> (the default), no statistics are
--   returned.
transactWriteItems_returnItemCollectionMetrics :: Lens' TransactWriteItems (Maybe ReturnItemCollectionMetrics)

-- | Providing a <tt>ClientRequestToken</tt> makes the call to
--   <tt>TransactWriteItems</tt> idempotent, meaning that multiple
--   identical calls have the same effect as one single call.
--   
--   Although multiple identical calls using the same client request token
--   produce the same result on the server (no side effects), the responses
--   to the calls might not be the same. If the
--   <tt>ReturnConsumedCapacity&gt;</tt> parameter is set, then the initial
--   <tt>TransactWriteItems</tt> call returns the amount of write capacity
--   units consumed in making the changes. Subsequent
--   <tt>TransactWriteItems</tt> calls with the same client token return
--   the number of read capacity units consumed in reading the item.
--   
--   A client request token is valid for 10 minutes after the first request
--   that uses it is completed. After 10 minutes, any request with the same
--   client token is treated as a new request. Do not resubmit the same
--   request with the same client token for more than 10 minutes, or the
--   result might not be idempotent.
--   
--   If you submit a request with the same client token but a change in
--   other parameters within the 10-minute idempotency window, DynamoDB
--   returns an <tt>IdempotentParameterMismatch</tt> exception.
transactWriteItems_clientRequestToken :: Lens' TransactWriteItems (Maybe Text)

-- | An ordered array of up to 25 <tt>TransactWriteItem</tt> objects, each
--   of which contains a <tt>ConditionCheck</tt>, <tt>Put</tt>,
--   <tt>Update</tt>, or <tt>Delete</tt> object. These can operate on items
--   in different tables, but the tables must reside in the same AWS
--   account and Region, and no two of them can operate on the same item.
transactWriteItems_transactItems :: Lens' TransactWriteItems (NonEmpty TransactWriteItem)

-- | <i>See:</i> <a>newTransactWriteItemsResponse</a> smart constructor.
data TransactWriteItemsResponse
TransactWriteItemsResponse' :: Maybe (HashMap Text [ItemCollectionMetrics]) -> Maybe [ConsumedCapacity] -> Int -> TransactWriteItemsResponse

-- | A list of tables that were processed by <tt>TransactWriteItems</tt>
--   and, for each table, information about any item collections that were
--   affected by individual <tt>UpdateItem</tt>, <tt>PutItem</tt>, or
--   <tt>DeleteItem</tt> operations.
[$sel:itemCollectionMetrics:TransactWriteItemsResponse'] :: TransactWriteItemsResponse -> Maybe (HashMap Text [ItemCollectionMetrics])

-- | The capacity units consumed by the entire <tt>TransactWriteItems</tt>
--   operation. The values of the list are ordered according to the
--   ordering of the <tt>TransactItems</tt> request parameter.
[$sel:consumedCapacity:TransactWriteItemsResponse'] :: TransactWriteItemsResponse -> Maybe [ConsumedCapacity]

-- | The response's http status code.
[$sel:httpStatus:TransactWriteItemsResponse'] :: TransactWriteItemsResponse -> Int

-- | Create a value of <a>TransactWriteItemsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionMetrics:TransactWriteItemsResponse'</a>,
--   <a>transactWriteItemsResponse_itemCollectionMetrics</a> - A list of
--   tables that were processed by <tt>TransactWriteItems</tt> and, for
--   each table, information about any item collections that were affected
--   by individual <tt>UpdateItem</tt>, <tt>PutItem</tt>, or
--   <tt>DeleteItem</tt> operations.
--   
--   <a>$sel:consumedCapacity:TransactWriteItemsResponse'</a>,
--   <a>transactWriteItemsResponse_consumedCapacity</a> - The capacity
--   units consumed by the entire <tt>TransactWriteItems</tt> operation.
--   The values of the list are ordered according to the ordering of the
--   <tt>TransactItems</tt> request parameter.
--   
--   <a>$sel:httpStatus:TransactWriteItemsResponse'</a>,
--   <a>transactWriteItemsResponse_httpStatus</a> - The response's http
--   status code.
newTransactWriteItemsResponse :: Int -> TransactWriteItemsResponse

-- | A list of tables that were processed by <tt>TransactWriteItems</tt>
--   and, for each table, information about any item collections that were
--   affected by individual <tt>UpdateItem</tt>, <tt>PutItem</tt>, or
--   <tt>DeleteItem</tt> operations.
transactWriteItemsResponse_itemCollectionMetrics :: Lens' TransactWriteItemsResponse (Maybe (HashMap Text [ItemCollectionMetrics]))

-- | The capacity units consumed by the entire <tt>TransactWriteItems</tt>
--   operation. The values of the list are ordered according to the
--   ordering of the <tt>TransactItems</tt> request parameter.
transactWriteItemsResponse_consumedCapacity :: Lens' TransactWriteItemsResponse (Maybe [ConsumedCapacity])

-- | The response's http status code.
transactWriteItemsResponse_httpStatus :: Lens' TransactWriteItemsResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.TransactWriteItems.TransactWriteItems
instance GHC.Show.Show Amazonka.DynamoDB.TransactWriteItems.TransactWriteItems
instance GHC.Read.Read Amazonka.DynamoDB.TransactWriteItems.TransactWriteItems
instance GHC.Classes.Eq Amazonka.DynamoDB.TransactWriteItems.TransactWriteItems
instance GHC.Generics.Generic Amazonka.DynamoDB.TransactWriteItems.TransactWriteItemsResponse
instance GHC.Show.Show Amazonka.DynamoDB.TransactWriteItems.TransactWriteItemsResponse
instance GHC.Read.Read Amazonka.DynamoDB.TransactWriteItems.TransactWriteItemsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.TransactWriteItems.TransactWriteItemsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.TransactWriteItems.TransactWriteItems
instance Control.DeepSeq.NFData Amazonka.DynamoDB.TransactWriteItems.TransactWriteItemsResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.TransactWriteItems.TransactWriteItems
instance Control.DeepSeq.NFData Amazonka.DynamoDB.TransactWriteItems.TransactWriteItems
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.TransactWriteItems.TransactWriteItems
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.TransactWriteItems.TransactWriteItems
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.TransactWriteItems.TransactWriteItems
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.TransactWriteItems.TransactWriteItems


-- | <tt>TransactGetItems</tt> is a synchronous operation that atomically
--   retrieves multiple items from one or more tables (but not from
--   indexes) in a single account and Region. A <tt>TransactGetItems</tt>
--   call can contain up to 25 <tt>TransactGetItem</tt> objects, each of
--   which contains a <tt>Get</tt> structure that specifies an item to
--   retrieve from a table in the account and Region. A call to
--   <tt>TransactGetItems</tt> cannot retrieve items from tables in more
--   than one AWS account or Region. The aggregate size of the items in the
--   transaction cannot exceed 4 MB.
--   
--   DynamoDB rejects the entire <tt>TransactGetItems</tt> request if any
--   of the following is true:
--   
--   <ul>
--   <li>A conflicting operation is in the process of updating an item to
--   be read.</li>
--   <li>There is insufficient provisioned capacity for the transaction to
--   be completed.</li>
--   <li>There is a user error, such as an invalid data format.</li>
--   <li>The aggregate size of the items in the transaction cannot exceed 4
--   MB.</li>
--   </ul>
module Amazonka.DynamoDB.TransactGetItems

-- | <i>See:</i> <a>newTransactGetItems</a> smart constructor.
data TransactGetItems
TransactGetItems' :: Maybe ReturnConsumedCapacity -> NonEmpty TransactGetItem -> TransactGetItems

-- | A value of <tt>TOTAL</tt> causes consumed capacity information to be
--   returned, and a value of <tt>NONE</tt> prevents that information from
--   being returned. No other value is valid.
[$sel:returnConsumedCapacity:TransactGetItems'] :: TransactGetItems -> Maybe ReturnConsumedCapacity

-- | An ordered array of up to 25 <tt>TransactGetItem</tt> objects, each of
--   which contains a <tt>Get</tt> structure.
[$sel:transactItems:TransactGetItems'] :: TransactGetItems -> NonEmpty TransactGetItem

-- | Create a value of <a>TransactGetItems</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:returnConsumedCapacity:TransactGetItems'</a>,
--   <a>transactGetItems_returnConsumedCapacity</a> - A value of
--   <tt>TOTAL</tt> causes consumed capacity information to be returned,
--   and a value of <tt>NONE</tt> prevents that information from being
--   returned. No other value is valid.
--   
--   <a>$sel:transactItems:TransactGetItems'</a>,
--   <a>transactGetItems_transactItems</a> - An ordered array of up to 25
--   <tt>TransactGetItem</tt> objects, each of which contains a
--   <tt>Get</tt> structure.
newTransactGetItems :: NonEmpty TransactGetItem -> TransactGetItems

-- | A value of <tt>TOTAL</tt> causes consumed capacity information to be
--   returned, and a value of <tt>NONE</tt> prevents that information from
--   being returned. No other value is valid.
transactGetItems_returnConsumedCapacity :: Lens' TransactGetItems (Maybe ReturnConsumedCapacity)

-- | An ordered array of up to 25 <tt>TransactGetItem</tt> objects, each of
--   which contains a <tt>Get</tt> structure.
transactGetItems_transactItems :: Lens' TransactGetItems (NonEmpty TransactGetItem)

-- | <i>See:</i> <a>newTransactGetItemsResponse</a> smart constructor.
data TransactGetItemsResponse
TransactGetItemsResponse' :: Maybe (NonEmpty ItemResponse) -> Maybe [ConsumedCapacity] -> Int -> TransactGetItemsResponse

-- | An ordered array of up to 25 <tt>ItemResponse</tt> objects, each of
--   which corresponds to the <tt>TransactGetItem</tt> object in the same
--   position in the <i>TransactItems</i> array. Each <tt>ItemResponse</tt>
--   object contains a Map of the name-value pairs that are the projected
--   attributes of the requested item.
--   
--   If a requested item could not be retrieved, the corresponding
--   <tt>ItemResponse</tt> object is Null, or if the requested item has no
--   projected attributes, the corresponding <tt>ItemResponse</tt> object
--   is an empty Map.
[$sel:responses:TransactGetItemsResponse'] :: TransactGetItemsResponse -> Maybe (NonEmpty ItemResponse)

-- | If the <i>ReturnConsumedCapacity</i> value was <tt>TOTAL</tt>, this is
--   an array of <tt>ConsumedCapacity</tt> objects, one for each table
--   addressed by <tt>TransactGetItem</tt> objects in the
--   <i>TransactItems</i> parameter. These <tt>ConsumedCapacity</tt>
--   objects report the read-capacity units consumed by the
--   <tt>TransactGetItems</tt> call in that table.
[$sel:consumedCapacity:TransactGetItemsResponse'] :: TransactGetItemsResponse -> Maybe [ConsumedCapacity]

-- | The response's http status code.
[$sel:httpStatus:TransactGetItemsResponse'] :: TransactGetItemsResponse -> Int

-- | Create a value of <a>TransactGetItemsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responses:TransactGetItemsResponse'</a>,
--   <a>transactGetItemsResponse_responses</a> - An ordered array of up to
--   25 <tt>ItemResponse</tt> objects, each of which corresponds to the
--   <tt>TransactGetItem</tt> object in the same position in the
--   <i>TransactItems</i> array. Each <tt>ItemResponse</tt> object contains
--   a Map of the name-value pairs that are the projected attributes of the
--   requested item.
--   
--   If a requested item could not be retrieved, the corresponding
--   <tt>ItemResponse</tt> object is Null, or if the requested item has no
--   projected attributes, the corresponding <tt>ItemResponse</tt> object
--   is an empty Map.
--   
--   <a>$sel:consumedCapacity:TransactGetItemsResponse'</a>,
--   <a>transactGetItemsResponse_consumedCapacity</a> - If the
--   <i>ReturnConsumedCapacity</i> value was <tt>TOTAL</tt>, this is an
--   array of <tt>ConsumedCapacity</tt> objects, one for each table
--   addressed by <tt>TransactGetItem</tt> objects in the
--   <i>TransactItems</i> parameter. These <tt>ConsumedCapacity</tt>
--   objects report the read-capacity units consumed by the
--   <tt>TransactGetItems</tt> call in that table.
--   
--   <a>$sel:httpStatus:TransactGetItemsResponse'</a>,
--   <a>transactGetItemsResponse_httpStatus</a> - The response's http
--   status code.
newTransactGetItemsResponse :: Int -> TransactGetItemsResponse

-- | An ordered array of up to 25 <tt>ItemResponse</tt> objects, each of
--   which corresponds to the <tt>TransactGetItem</tt> object in the same
--   position in the <i>TransactItems</i> array. Each <tt>ItemResponse</tt>
--   object contains a Map of the name-value pairs that are the projected
--   attributes of the requested item.
--   
--   If a requested item could not be retrieved, the corresponding
--   <tt>ItemResponse</tt> object is Null, or if the requested item has no
--   projected attributes, the corresponding <tt>ItemResponse</tt> object
--   is an empty Map.
transactGetItemsResponse_responses :: Lens' TransactGetItemsResponse (Maybe (NonEmpty ItemResponse))

-- | If the <i>ReturnConsumedCapacity</i> value was <tt>TOTAL</tt>, this is
--   an array of <tt>ConsumedCapacity</tt> objects, one for each table
--   addressed by <tt>TransactGetItem</tt> objects in the
--   <i>TransactItems</i> parameter. These <tt>ConsumedCapacity</tt>
--   objects report the read-capacity units consumed by the
--   <tt>TransactGetItems</tt> call in that table.
transactGetItemsResponse_consumedCapacity :: Lens' TransactGetItemsResponse (Maybe [ConsumedCapacity])

-- | The response's http status code.
transactGetItemsResponse_httpStatus :: Lens' TransactGetItemsResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.TransactGetItems.TransactGetItems
instance GHC.Show.Show Amazonka.DynamoDB.TransactGetItems.TransactGetItems
instance GHC.Read.Read Amazonka.DynamoDB.TransactGetItems.TransactGetItems
instance GHC.Classes.Eq Amazonka.DynamoDB.TransactGetItems.TransactGetItems
instance GHC.Generics.Generic Amazonka.DynamoDB.TransactGetItems.TransactGetItemsResponse
instance GHC.Show.Show Amazonka.DynamoDB.TransactGetItems.TransactGetItemsResponse
instance GHC.Read.Read Amazonka.DynamoDB.TransactGetItems.TransactGetItemsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.TransactGetItems.TransactGetItemsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.TransactGetItems.TransactGetItems
instance Control.DeepSeq.NFData Amazonka.DynamoDB.TransactGetItems.TransactGetItemsResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.TransactGetItems.TransactGetItems
instance Control.DeepSeq.NFData Amazonka.DynamoDB.TransactGetItems.TransactGetItems
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.TransactGetItems.TransactGetItems
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.TransactGetItems.TransactGetItems
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.TransactGetItems.TransactGetItems
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.TransactGetItems.TransactGetItems


-- | Associate a set of tags with an Amazon DynamoDB resource. You can then
--   activate these user-defined tags so that they appear on the Billing
--   and Cost Management console for cost allocation tracking. You can call
--   TagResource up to five times per second, per account.
--   
--   For an overview on tagging DynamoDB resources, see <a>Tagging for
--   DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
module Amazonka.DynamoDB.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | Identifies the Amazon DynamoDB resource to which tags should be added.
--   This value is an Amazon Resource Name (ARN).
[$sel:resourceArn:TagResource'] :: TagResource -> Text

-- | The tags to be assigned to the Amazon DynamoDB resource.
[$sel:tags:TagResource'] :: TagResource -> [Tag]

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   Identifies the Amazon DynamoDB resource to which tags should be added.
--   This value is an Amazon Resource Name (ARN).
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - The tags to
--   be assigned to the Amazon DynamoDB resource.
newTagResource :: Text -> TagResource

-- | Identifies the Amazon DynamoDB resource to which tags should be added.
--   This value is an Amazon Resource Name (ARN).
tagResource_resourceArn :: Lens' TagResource Text

-- | The tags to be assigned to the Amazon DynamoDB resource.
tagResource_tags :: Lens' TagResource [Tag]

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newTagResourceResponse :: TagResourceResponse
instance GHC.Generics.Generic Amazonka.DynamoDB.TagResource.TagResource
instance GHC.Show.Show Amazonka.DynamoDB.TagResource.TagResource
instance GHC.Read.Read Amazonka.DynamoDB.TagResource.TagResource
instance GHC.Classes.Eq Amazonka.DynamoDB.TagResource.TagResource
instance GHC.Generics.Generic Amazonka.DynamoDB.TagResource.TagResourceResponse
instance GHC.Show.Show Amazonka.DynamoDB.TagResource.TagResourceResponse
instance GHC.Read.Read Amazonka.DynamoDB.TagResource.TagResourceResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.TagResource.TagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.DynamoDB.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.DynamoDB.TagResource.TagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.TagResource.TagResource
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.TagResource.TagResource
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.TagResource.TagResource


-- | The <tt>Scan</tt> operation returns one or more items and item
--   attributes by accessing every item in a table or a secondary index. To
--   have DynamoDB return fewer items, you can provide a
--   <tt>FilterExpression</tt> operation.
--   
--   If the total number of scanned items exceeds the maximum dataset size
--   limit of 1 MB, the scan stops and results are returned to the user as
--   a <tt>LastEvaluatedKey</tt> value to continue the scan in a subsequent
--   operation. The results also include the number of items exceeding the
--   limit. A scan can result in no table data meeting the filter criteria.
--   
--   A single <tt>Scan</tt> operation reads up to the maximum number of
--   items set (if using the <tt>Limit</tt> parameter) or a maximum of 1 MB
--   of data and then apply any filtering to the results using
--   <tt>FilterExpression</tt>. If <tt>LastEvaluatedKey</tt> is present in
--   the response, you need to paginate the result set. For more
--   information, see <a>Paginating the Results</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <tt>Scan</tt> operations proceed sequentially; however, for faster
--   performance on a large table or secondary index, applications can
--   request a parallel <tt>Scan</tt> operation by providing the
--   <tt>Segment</tt> and <tt>TotalSegments</tt> parameters. For more
--   information, see <a>Parallel Scan</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <tt>Scan</tt> uses eventually consistent reads when accessing the data
--   in a table; therefore, the result set might not include the changes to
--   data in the table immediately before the operation began. If you need
--   a consistent copy of the data, as of the time that the <tt>Scan</tt>
--   begins, you can set the <tt>ConsistentRead</tt> parameter to
--   <tt>true</tt>.
--   
--   This operation returns paginated results.
module Amazonka.DynamoDB.Scan

-- | Represents the input of a <tt>Scan</tt> operation.
--   
--   <i>See:</i> <a>newScan</a> smart constructor.
data Scan
Scan' :: Maybe Text -> Maybe (HashMap Text Condition) -> Maybe (NonEmpty Text) -> Maybe Natural -> Maybe (HashMap Text Text) -> Maybe Text -> Maybe Bool -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnConsumedCapacity -> Maybe Natural -> Maybe Select -> Maybe Natural -> Maybe ConditionalOperator -> Maybe (HashMap Text AttributeValue) -> Maybe Text -> Text -> Scan

-- | A string that identifies one or more attributes to retrieve from the
--   specified table or index. These attributes can include scalars, sets,
--   or elements of a JSON document. The attributes in the expression must
--   be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Specifying Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:projectionExpression:Scan'] :: Scan -> Maybe Text

-- | This is a legacy parameter. Use <tt>FilterExpression</tt> instead. For
--   more information, see <a>ScanFilter</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:scanFilter:Scan'] :: Scan -> Maybe (HashMap Text Condition)

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:attributesToGet:Scan'] :: Scan -> Maybe (NonEmpty Text)

-- | For a parallel <tt>Scan</tt> request, <tt>TotalSegments</tt>
--   represents the total number of segments into which the <tt>Scan</tt>
--   operation will be divided. The value of <tt>TotalSegments</tt>
--   corresponds to the number of application workers that will perform the
--   parallel scan. For example, if you want to use four application
--   threads to scan a table or an index, specify a <tt>TotalSegments</tt>
--   value of 4.
--   
--   The value for <tt>TotalSegments</tt> must be greater than or equal to
--   1, and less than or equal to 1000000. If you specify a
--   <tt>TotalSegments</tt> value of 1, the <tt>Scan</tt> operation will be
--   sequential rather than parallel.
--   
--   If you specify <tt>TotalSegments</tt>, you must also specify
--   <tt>Segment</tt>.
[$sel:totalSegments:Scan'] :: Scan -> Maybe Natural

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:expressionAttributeNames:Scan'] :: Scan -> Maybe (HashMap Text Text)

-- | A string that contains conditions that DynamoDB applies after the
--   <tt>Scan</tt> operation, but before the data is returned to you. Items
--   that do not satisfy the <tt>FilterExpression</tt> criteria are not
--   returned.
--   
--   A <tt>FilterExpression</tt> is applied after the items have already
--   been read; the process of filtering does not consume any additional
--   read capacity units.
--   
--   For more information, see <a>Filter Expressions</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:filterExpression:Scan'] :: Scan -> Maybe Text

-- | A Boolean value that determines the read consistency model during the
--   scan:
--   
--   <ul>
--   <li>If <tt>ConsistentRead</tt> is <tt>false</tt>, then the data
--   returned from <tt>Scan</tt> might not contain the results from other
--   recently completed write operations (<tt>PutItem</tt>,
--   <tt>UpdateItem</tt>, or <tt>DeleteItem</tt>).</li>
--   <li>If <tt>ConsistentRead</tt> is <tt>true</tt>, then all of the write
--   operations that completed before the <tt>Scan</tt> began are
--   guaranteed to be contained in the <tt>Scan</tt> response.</li>
--   </ul>
--   
--   The default setting for <tt>ConsistentRead</tt> is <tt>false</tt>.
--   
--   The <tt>ConsistentRead</tt> parameter is not supported on global
--   secondary indexes. If you scan a global secondary index with
--   <tt>ConsistentRead</tt> set to true, you will receive a
--   <tt>ValidationException</tt>.
[$sel:consistentRead:Scan'] :: Scan -> Maybe Bool

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <tt>ProductStatus</tt> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:expressionAttributeValues:Scan'] :: Scan -> Maybe (HashMap Text AttributeValue)
[$sel:returnConsumedCapacity:Scan'] :: Scan -> Maybe ReturnConsumedCapacity

-- | The maximum number of items to evaluate (not necessarily the number of
--   matching items). If DynamoDB processes the number of items up to the
--   limit while processing the results, it stops the operation and returns
--   the matching values up to that point, and a key in
--   <tt>LastEvaluatedKey</tt> to apply in a subsequent operation, so that
--   you can pick up where you left off. Also, if the processed dataset
--   size exceeds 1 MB before DynamoDB reaches this limit, it stops the
--   operation and returns the matching values up to the limit, and a key
--   in <tt>LastEvaluatedKey</tt> to apply in a subsequent operation to
--   continue the operation. For more information, see <a>Working with
--   Queries</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:limit:Scan'] :: Scan -> Maybe Natural

-- | The attributes to be returned in the result. You can retrieve all item
--   attributes, specific item attributes, the count of matching items, or
--   in the case of an index, some or all of the attributes projected into
--   the index.
--   
--   <ul>
--   <li><tt>ALL_ATTRIBUTES</tt> - Returns all of the item attributes from
--   the specified table or index. If you query a local secondary index,
--   then for each matching item in the index, DynamoDB fetches the entire
--   item from the parent table. If the index is configured to project all
--   item attributes, then all of the data can be obtained from the local
--   secondary index, and no fetching is required.</li>
--   <li><tt>ALL_PROJECTED_ATTRIBUTES</tt> - Allowed only when querying an
--   index. Retrieves all attributes that have been projected into the
--   index. If the index is configured to project all attributes, this
--   return value is equivalent to specifying <tt>ALL_ATTRIBUTES</tt>.</li>
--   <li><tt>COUNT</tt> - Returns the number of matching items, rather than
--   the matching items themselves.</li>
--   <li><tt>SPECIFIC_ATTRIBUTES</tt> - Returns only the attributes listed
--   in <tt>AttributesToGet</tt>. This return value is equivalent to
--   specifying <tt>AttributesToGet</tt> without specifying any value for
--   <tt>Select</tt>.If you query or scan a local secondary index and
--   request only attributes that are projected into that index, the
--   operation reads only the index and not the table. If any of the
--   requested attributes are not projected into the local secondary index,
--   DynamoDB fetches each of these attributes from the parent table. This
--   extra fetching incurs additional throughput cost and latency.If you
--   query or scan a global secondary index, you can only request
--   attributes that are projected into the index. Global secondary index
--   queries cannot fetch attributes from the parent table.</li>
--   </ul>
--   
--   If neither <tt>Select</tt> nor <tt>AttributesToGet</tt> are specified,
--   DynamoDB defaults to <tt>ALL_ATTRIBUTES</tt> when accessing a table,
--   and <tt>ALL_PROJECTED_ATTRIBUTES</tt> when accessing an index. You
--   cannot use both <tt>Select</tt> and <tt>AttributesToGet</tt> together
--   in a single request, unless the value for <tt>Select</tt> is
--   <tt>SPECIFIC_ATTRIBUTES</tt>. (This usage is equivalent to specifying
--   <tt>AttributesToGet</tt> without any value for <tt>Select</tt>.)
--   
--   If you use the <tt>ProjectionExpression</tt> parameter, then the value
--   for <tt>Select</tt> can only be <tt>SPECIFIC_ATTRIBUTES</tt>. Any
--   other value for <tt>Select</tt> will return an error.
[$sel:select:Scan'] :: Scan -> Maybe Select

-- | For a parallel <tt>Scan</tt> request, <tt>Segment</tt> identifies an
--   individual segment to be scanned by an application worker.
--   
--   Segment IDs are zero-based, so the first segment is always 0. For
--   example, if you want to use four application threads to scan a table
--   or an index, then the first thread specifies a <tt>Segment</tt> value
--   of 0, the second thread specifies 1, and so on.
--   
--   The value of <tt>LastEvaluatedKey</tt> returned from a parallel
--   <tt>Scan</tt> request must be used as <tt>ExclusiveStartKey</tt> with
--   the same segment ID in a subsequent <tt>Scan</tt> operation.
--   
--   The value for <tt>Segment</tt> must be greater than or equal to 0, and
--   less than the value provided for <tt>TotalSegments</tt>.
--   
--   If you provide <tt>Segment</tt>, you must also provide
--   <tt>TotalSegments</tt>.
[$sel:segment:Scan'] :: Scan -> Maybe Natural

-- | This is a legacy parameter. Use <tt>FilterExpression</tt> instead. For
--   more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:conditionalOperator:Scan'] :: Scan -> Maybe ConditionalOperator

-- | The primary key of the first item that this operation will evaluate.
--   Use the value that was returned for <tt>LastEvaluatedKey</tt> in the
--   previous operation.
--   
--   The data type for <tt>ExclusiveStartKey</tt> must be String, Number or
--   Binary. No set data types are allowed.
--   
--   In a parallel scan, a <tt>Scan</tt> request that includes
--   <tt>ExclusiveStartKey</tt> must specify the same segment whose
--   previous <tt>Scan</tt> returned the corresponding value of
--   <tt>LastEvaluatedKey</tt>.
[$sel:exclusiveStartKey:Scan'] :: Scan -> Maybe (HashMap Text AttributeValue)

-- | The name of a secondary index to scan. This index can be any local
--   secondary index or global secondary index. Note that if you use the
--   <tt>IndexName</tt> parameter, you must also provide
--   <tt>TableName</tt>.
[$sel:indexName:Scan'] :: Scan -> Maybe Text

-- | The name of the table containing the requested items; or, if you
--   provide <tt>IndexName</tt>, the name of the table to which that index
--   belongs.
[$sel:tableName:Scan'] :: Scan -> Text

-- | Create a value of <a>Scan</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionExpression:Scan'</a>,
--   <a>scan_projectionExpression</a> - A string that identifies one or
--   more attributes to retrieve from the specified table or index. These
--   attributes can include scalars, sets, or elements of a JSON document.
--   The attributes in the expression must be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Specifying Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:scanFilter:Scan'</a>, <a>scan_scanFilter</a> - This is a
--   legacy parameter. Use <tt>FilterExpression</tt> instead. For more
--   information, see <a>ScanFilter</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:attributesToGet:Scan'</a>, <a>scan_attributesToGet</a> - This
--   is a legacy parameter. Use <tt>ProjectionExpression</tt> instead. For
--   more information, see <a>AttributesToGet</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:totalSegments:Scan'</a>, <a>scan_totalSegments</a> - For a
--   parallel <tt>Scan</tt> request, <tt>TotalSegments</tt> represents the
--   total number of segments into which the <tt>Scan</tt> operation will
--   be divided. The value of <tt>TotalSegments</tt> corresponds to the
--   number of application workers that will perform the parallel scan. For
--   example, if you want to use four application threads to scan a table
--   or an index, specify a <tt>TotalSegments</tt> value of 4.
--   
--   The value for <tt>TotalSegments</tt> must be greater than or equal to
--   1, and less than or equal to 1000000. If you specify a
--   <tt>TotalSegments</tt> value of 1, the <tt>Scan</tt> operation will be
--   sequential rather than parallel.
--   
--   If you specify <tt>TotalSegments</tt>, you must also specify
--   <tt>Segment</tt>.
--   
--   <a>$sel:expressionAttributeNames:Scan'</a>,
--   <a>scan_expressionAttributeNames</a> - One or more substitution tokens
--   for attribute names in an expression. The following are some use cases
--   for using <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:filterExpression:Scan'</a>, <a>scan_filterExpression</a> - A
--   string that contains conditions that DynamoDB applies after the
--   <tt>Scan</tt> operation, but before the data is returned to you. Items
--   that do not satisfy the <tt>FilterExpression</tt> criteria are not
--   returned.
--   
--   A <tt>FilterExpression</tt> is applied after the items have already
--   been read; the process of filtering does not consume any additional
--   read capacity units.
--   
--   For more information, see <a>Filter Expressions</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:consistentRead:Scan'</a>, <a>scan_consistentRead</a> - A
--   Boolean value that determines the read consistency model during the
--   scan:
--   
--   <ul>
--   <li>If <tt>ConsistentRead</tt> is <tt>false</tt>, then the data
--   returned from <tt>Scan</tt> might not contain the results from other
--   recently completed write operations (<tt>PutItem</tt>,
--   <tt>UpdateItem</tt>, or <tt>DeleteItem</tt>).</li>
--   <li>If <tt>ConsistentRead</tt> is <tt>true</tt>, then all of the write
--   operations that completed before the <tt>Scan</tt> began are
--   guaranteed to be contained in the <tt>Scan</tt> response.</li>
--   </ul>
--   
--   The default setting for <tt>ConsistentRead</tt> is <tt>false</tt>.
--   
--   The <tt>ConsistentRead</tt> parameter is not supported on global
--   secondary indexes. If you scan a global secondary index with
--   <tt>ConsistentRead</tt> set to true, you will receive a
--   <tt>ValidationException</tt>.
--   
--   <a>$sel:expressionAttributeValues:Scan'</a>,
--   <a>scan_expressionAttributeValues</a> - One or more values that can be
--   substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <tt>ProductStatus</tt> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnConsumedCapacity:Scan'</a>,
--   <a>scan_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:limit:Scan'</a>, <a>scan_limit</a> - The maximum number of
--   items to evaluate (not necessarily the number of matching items). If
--   DynamoDB processes the number of items up to the limit while
--   processing the results, it stops the operation and returns the
--   matching values up to that point, and a key in
--   <tt>LastEvaluatedKey</tt> to apply in a subsequent operation, so that
--   you can pick up where you left off. Also, if the processed dataset
--   size exceeds 1 MB before DynamoDB reaches this limit, it stops the
--   operation and returns the matching values up to the limit, and a key
--   in <tt>LastEvaluatedKey</tt> to apply in a subsequent operation to
--   continue the operation. For more information, see <a>Working with
--   Queries</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:select:Scan'</a>, <a>scan_select</a> - The attributes to be
--   returned in the result. You can retrieve all item attributes, specific
--   item attributes, the count of matching items, or in the case of an
--   index, some or all of the attributes projected into the index.
--   
--   <ul>
--   <li><tt>ALL_ATTRIBUTES</tt> - Returns all of the item attributes from
--   the specified table or index. If you query a local secondary index,
--   then for each matching item in the index, DynamoDB fetches the entire
--   item from the parent table. If the index is configured to project all
--   item attributes, then all of the data can be obtained from the local
--   secondary index, and no fetching is required.</li>
--   <li><tt>ALL_PROJECTED_ATTRIBUTES</tt> - Allowed only when querying an
--   index. Retrieves all attributes that have been projected into the
--   index. If the index is configured to project all attributes, this
--   return value is equivalent to specifying <tt>ALL_ATTRIBUTES</tt>.</li>
--   <li><tt>COUNT</tt> - Returns the number of matching items, rather than
--   the matching items themselves.</li>
--   <li><tt>SPECIFIC_ATTRIBUTES</tt> - Returns only the attributes listed
--   in <tt>AttributesToGet</tt>. This return value is equivalent to
--   specifying <tt>AttributesToGet</tt> without specifying any value for
--   <tt>Select</tt>.If you query or scan a local secondary index and
--   request only attributes that are projected into that index, the
--   operation reads only the index and not the table. If any of the
--   requested attributes are not projected into the local secondary index,
--   DynamoDB fetches each of these attributes from the parent table. This
--   extra fetching incurs additional throughput cost and latency.If you
--   query or scan a global secondary index, you can only request
--   attributes that are projected into the index. Global secondary index
--   queries cannot fetch attributes from the parent table.</li>
--   </ul>
--   
--   If neither <tt>Select</tt> nor <tt>AttributesToGet</tt> are specified,
--   DynamoDB defaults to <tt>ALL_ATTRIBUTES</tt> when accessing a table,
--   and <tt>ALL_PROJECTED_ATTRIBUTES</tt> when accessing an index. You
--   cannot use both <tt>Select</tt> and <tt>AttributesToGet</tt> together
--   in a single request, unless the value for <tt>Select</tt> is
--   <tt>SPECIFIC_ATTRIBUTES</tt>. (This usage is equivalent to specifying
--   <tt>AttributesToGet</tt> without any value for <tt>Select</tt>.)
--   
--   If you use the <tt>ProjectionExpression</tt> parameter, then the value
--   for <tt>Select</tt> can only be <tt>SPECIFIC_ATTRIBUTES</tt>. Any
--   other value for <tt>Select</tt> will return an error.
--   
--   <a>$sel:segment:Scan'</a>, <a>scan_segment</a> - For a parallel
--   <tt>Scan</tt> request, <tt>Segment</tt> identifies an individual
--   segment to be scanned by an application worker.
--   
--   Segment IDs are zero-based, so the first segment is always 0. For
--   example, if you want to use four application threads to scan a table
--   or an index, then the first thread specifies a <tt>Segment</tt> value
--   of 0, the second thread specifies 1, and so on.
--   
--   The value of <tt>LastEvaluatedKey</tt> returned from a parallel
--   <tt>Scan</tt> request must be used as <tt>ExclusiveStartKey</tt> with
--   the same segment ID in a subsequent <tt>Scan</tt> operation.
--   
--   The value for <tt>Segment</tt> must be greater than or equal to 0, and
--   less than the value provided for <tt>TotalSegments</tt>.
--   
--   If you provide <tt>Segment</tt>, you must also provide
--   <tt>TotalSegments</tt>.
--   
--   <a>$sel:conditionalOperator:Scan'</a>, <a>scan_conditionalOperator</a>
--   - This is a legacy parameter. Use <tt>FilterExpression</tt> instead.
--   For more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:exclusiveStartKey:Scan'</a>, <a>scan_exclusiveStartKey</a> -
--   The primary key of the first item that this operation will evaluate.
--   Use the value that was returned for <tt>LastEvaluatedKey</tt> in the
--   previous operation.
--   
--   The data type for <tt>ExclusiveStartKey</tt> must be String, Number or
--   Binary. No set data types are allowed.
--   
--   In a parallel scan, a <tt>Scan</tt> request that includes
--   <tt>ExclusiveStartKey</tt> must specify the same segment whose
--   previous <tt>Scan</tt> returned the corresponding value of
--   <tt>LastEvaluatedKey</tt>.
--   
--   <a>$sel:indexName:Scan'</a>, <a>scan_indexName</a> - The name of a
--   secondary index to scan. This index can be any local secondary index
--   or global secondary index. Note that if you use the <tt>IndexName</tt>
--   parameter, you must also provide <tt>TableName</tt>.
--   
--   <a>$sel:tableName:Scan'</a>, <a>scan_tableName</a> - The name of the
--   table containing the requested items; or, if you provide
--   <tt>IndexName</tt>, the name of the table to which that index belongs.
newScan :: Text -> Scan

-- | A string that identifies one or more attributes to retrieve from the
--   specified table or index. These attributes can include scalars, sets,
--   or elements of a JSON document. The attributes in the expression must
--   be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Specifying Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
scan_projectionExpression :: Lens' Scan (Maybe Text)

-- | This is a legacy parameter. Use <tt>FilterExpression</tt> instead. For
--   more information, see <a>ScanFilter</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
scan_scanFilter :: Lens' Scan (Maybe (HashMap Text Condition))

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
scan_attributesToGet :: Lens' Scan (Maybe (NonEmpty Text))

-- | For a parallel <tt>Scan</tt> request, <tt>TotalSegments</tt>
--   represents the total number of segments into which the <tt>Scan</tt>
--   operation will be divided. The value of <tt>TotalSegments</tt>
--   corresponds to the number of application workers that will perform the
--   parallel scan. For example, if you want to use four application
--   threads to scan a table or an index, specify a <tt>TotalSegments</tt>
--   value of 4.
--   
--   The value for <tt>TotalSegments</tt> must be greater than or equal to
--   1, and less than or equal to 1000000. If you specify a
--   <tt>TotalSegments</tt> value of 1, the <tt>Scan</tt> operation will be
--   sequential rather than parallel.
--   
--   If you specify <tt>TotalSegments</tt>, you must also specify
--   <tt>Segment</tt>.
scan_totalSegments :: Lens' Scan (Maybe Natural)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
scan_expressionAttributeNames :: Lens' Scan (Maybe (HashMap Text Text))

-- | A string that contains conditions that DynamoDB applies after the
--   <tt>Scan</tt> operation, but before the data is returned to you. Items
--   that do not satisfy the <tt>FilterExpression</tt> criteria are not
--   returned.
--   
--   A <tt>FilterExpression</tt> is applied after the items have already
--   been read; the process of filtering does not consume any additional
--   read capacity units.
--   
--   For more information, see <a>Filter Expressions</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
scan_filterExpression :: Lens' Scan (Maybe Text)

-- | A Boolean value that determines the read consistency model during the
--   scan:
--   
--   <ul>
--   <li>If <tt>ConsistentRead</tt> is <tt>false</tt>, then the data
--   returned from <tt>Scan</tt> might not contain the results from other
--   recently completed write operations (<tt>PutItem</tt>,
--   <tt>UpdateItem</tt>, or <tt>DeleteItem</tt>).</li>
--   <li>If <tt>ConsistentRead</tt> is <tt>true</tt>, then all of the write
--   operations that completed before the <tt>Scan</tt> began are
--   guaranteed to be contained in the <tt>Scan</tt> response.</li>
--   </ul>
--   
--   The default setting for <tt>ConsistentRead</tt> is <tt>false</tt>.
--   
--   The <tt>ConsistentRead</tt> parameter is not supported on global
--   secondary indexes. If you scan a global secondary index with
--   <tt>ConsistentRead</tt> set to true, you will receive a
--   <tt>ValidationException</tt>.
scan_consistentRead :: Lens' Scan (Maybe Bool)

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <tt>ProductStatus</tt> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
scan_expressionAttributeValues :: Lens' Scan (Maybe (HashMap Text AttributeValue))

-- | Undocumented member.
scan_returnConsumedCapacity :: Lens' Scan (Maybe ReturnConsumedCapacity)

-- | The maximum number of items to evaluate (not necessarily the number of
--   matching items). If DynamoDB processes the number of items up to the
--   limit while processing the results, it stops the operation and returns
--   the matching values up to that point, and a key in
--   <tt>LastEvaluatedKey</tt> to apply in a subsequent operation, so that
--   you can pick up where you left off. Also, if the processed dataset
--   size exceeds 1 MB before DynamoDB reaches this limit, it stops the
--   operation and returns the matching values up to the limit, and a key
--   in <tt>LastEvaluatedKey</tt> to apply in a subsequent operation to
--   continue the operation. For more information, see <a>Working with
--   Queries</a> in the <i>Amazon DynamoDB Developer Guide</i>.
scan_limit :: Lens' Scan (Maybe Natural)

-- | The attributes to be returned in the result. You can retrieve all item
--   attributes, specific item attributes, the count of matching items, or
--   in the case of an index, some or all of the attributes projected into
--   the index.
--   
--   <ul>
--   <li><tt>ALL_ATTRIBUTES</tt> - Returns all of the item attributes from
--   the specified table or index. If you query a local secondary index,
--   then for each matching item in the index, DynamoDB fetches the entire
--   item from the parent table. If the index is configured to project all
--   item attributes, then all of the data can be obtained from the local
--   secondary index, and no fetching is required.</li>
--   <li><tt>ALL_PROJECTED_ATTRIBUTES</tt> - Allowed only when querying an
--   index. Retrieves all attributes that have been projected into the
--   index. If the index is configured to project all attributes, this
--   return value is equivalent to specifying <tt>ALL_ATTRIBUTES</tt>.</li>
--   <li><tt>COUNT</tt> - Returns the number of matching items, rather than
--   the matching items themselves.</li>
--   <li><tt>SPECIFIC_ATTRIBUTES</tt> - Returns only the attributes listed
--   in <tt>AttributesToGet</tt>. This return value is equivalent to
--   specifying <tt>AttributesToGet</tt> without specifying any value for
--   <tt>Select</tt>.If you query or scan a local secondary index and
--   request only attributes that are projected into that index, the
--   operation reads only the index and not the table. If any of the
--   requested attributes are not projected into the local secondary index,
--   DynamoDB fetches each of these attributes from the parent table. This
--   extra fetching incurs additional throughput cost and latency.If you
--   query or scan a global secondary index, you can only request
--   attributes that are projected into the index. Global secondary index
--   queries cannot fetch attributes from the parent table.</li>
--   </ul>
--   
--   If neither <tt>Select</tt> nor <tt>AttributesToGet</tt> are specified,
--   DynamoDB defaults to <tt>ALL_ATTRIBUTES</tt> when accessing a table,
--   and <tt>ALL_PROJECTED_ATTRIBUTES</tt> when accessing an index. You
--   cannot use both <tt>Select</tt> and <tt>AttributesToGet</tt> together
--   in a single request, unless the value for <tt>Select</tt> is
--   <tt>SPECIFIC_ATTRIBUTES</tt>. (This usage is equivalent to specifying
--   <tt>AttributesToGet</tt> without any value for <tt>Select</tt>.)
--   
--   If you use the <tt>ProjectionExpression</tt> parameter, then the value
--   for <tt>Select</tt> can only be <tt>SPECIFIC_ATTRIBUTES</tt>. Any
--   other value for <tt>Select</tt> will return an error.
scan_select :: Lens' Scan (Maybe Select)

-- | For a parallel <tt>Scan</tt> request, <tt>Segment</tt> identifies an
--   individual segment to be scanned by an application worker.
--   
--   Segment IDs are zero-based, so the first segment is always 0. For
--   example, if you want to use four application threads to scan a table
--   or an index, then the first thread specifies a <tt>Segment</tt> value
--   of 0, the second thread specifies 1, and so on.
--   
--   The value of <tt>LastEvaluatedKey</tt> returned from a parallel
--   <tt>Scan</tt> request must be used as <tt>ExclusiveStartKey</tt> with
--   the same segment ID in a subsequent <tt>Scan</tt> operation.
--   
--   The value for <tt>Segment</tt> must be greater than or equal to 0, and
--   less than the value provided for <tt>TotalSegments</tt>.
--   
--   If you provide <tt>Segment</tt>, you must also provide
--   <tt>TotalSegments</tt>.
scan_segment :: Lens' Scan (Maybe Natural)

-- | This is a legacy parameter. Use <tt>FilterExpression</tt> instead. For
--   more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
scan_conditionalOperator :: Lens' Scan (Maybe ConditionalOperator)

-- | The primary key of the first item that this operation will evaluate.
--   Use the value that was returned for <tt>LastEvaluatedKey</tt> in the
--   previous operation.
--   
--   The data type for <tt>ExclusiveStartKey</tt> must be String, Number or
--   Binary. No set data types are allowed.
--   
--   In a parallel scan, a <tt>Scan</tt> request that includes
--   <tt>ExclusiveStartKey</tt> must specify the same segment whose
--   previous <tt>Scan</tt> returned the corresponding value of
--   <tt>LastEvaluatedKey</tt>.
scan_exclusiveStartKey :: Lens' Scan (Maybe (HashMap Text AttributeValue))

-- | The name of a secondary index to scan. This index can be any local
--   secondary index or global secondary index. Note that if you use the
--   <tt>IndexName</tt> parameter, you must also provide
--   <tt>TableName</tt>.
scan_indexName :: Lens' Scan (Maybe Text)

-- | The name of the table containing the requested items; or, if you
--   provide <tt>IndexName</tt>, the name of the table to which that index
--   belongs.
scan_tableName :: Lens' Scan Text

-- | Represents the output of a <tt>Scan</tt> operation.
--   
--   <i>See:</i> <a>newScanResponse</a> smart constructor.
data ScanResponse
ScanResponse' :: Maybe (HashMap Text AttributeValue) -> Maybe Int -> Maybe Int -> Maybe [HashMap Text AttributeValue] -> Maybe ConsumedCapacity -> Int -> ScanResponse

-- | The primary key of the item where the operation stopped, inclusive of
--   the previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedKey</tt> is empty, then the "last page" of results
--   has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedKey</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedKey</tt> is empty.
[$sel:lastEvaluatedKey:ScanResponse'] :: ScanResponse -> Maybe (HashMap Text AttributeValue)

-- | The number of items in the response.
--   
--   If you set <tt>ScanFilter</tt> in the request, then <tt>Count</tt> is
--   the number of items returned after the filter was applied, and
--   <tt>ScannedCount</tt> is the number of matching items before the
--   filter was applied.
--   
--   If you did not use a filter in the request, then <tt>Count</tt> is the
--   same as <tt>ScannedCount</tt>.
[$sel:count:ScanResponse'] :: ScanResponse -> Maybe Int

-- | The number of items evaluated, before any <tt>ScanFilter</tt> is
--   applied. A high <tt>ScannedCount</tt> value with few, or no,
--   <tt>Count</tt> results indicates an inefficient <tt>Scan</tt>
--   operation. For more information, see <a>Count and ScannedCount</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   If you did not use a filter in the request, then <tt>ScannedCount</tt>
--   is the same as <tt>Count</tt>.
[$sel:scannedCount:ScanResponse'] :: ScanResponse -> Maybe Int

-- | An array of item attributes that match the scan criteria. Each element
--   in this array consists of an attribute name and the value for that
--   attribute.
[$sel:items:ScanResponse'] :: ScanResponse -> Maybe [HashMap Text AttributeValue]

-- | The capacity units consumed by the <tt>Scan</tt> operation. The data
--   returned includes the total provisioned throughput consumed, along
--   with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Throughput</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:consumedCapacity:ScanResponse'] :: ScanResponse -> Maybe ConsumedCapacity

-- | The response's http status code.
[$sel:httpStatus:ScanResponse'] :: ScanResponse -> Int

-- | Create a value of <a>ScanResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedKey:ScanResponse'</a>,
--   <a>scanResponse_lastEvaluatedKey</a> - The primary key of the item
--   where the operation stopped, inclusive of the previous result set. Use
--   this value to start a new operation, excluding this value in the new
--   request.
--   
--   If <tt>LastEvaluatedKey</tt> is empty, then the "last page" of results
--   has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedKey</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedKey</tt> is empty.
--   
--   <a>$sel:count:ScanResponse'</a>, <a>scanResponse_count</a> - The
--   number of items in the response.
--   
--   If you set <tt>ScanFilter</tt> in the request, then <tt>Count</tt> is
--   the number of items returned after the filter was applied, and
--   <tt>ScannedCount</tt> is the number of matching items before the
--   filter was applied.
--   
--   If you did not use a filter in the request, then <tt>Count</tt> is the
--   same as <tt>ScannedCount</tt>.
--   
--   <a>$sel:scannedCount:ScanResponse'</a>,
--   <a>scanResponse_scannedCount</a> - The number of items evaluated,
--   before any <tt>ScanFilter</tt> is applied. A high
--   <tt>ScannedCount</tt> value with few, or no, <tt>Count</tt> results
--   indicates an inefficient <tt>Scan</tt> operation. For more
--   information, see <a>Count and ScannedCount</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   If you did not use a filter in the request, then <tt>ScannedCount</tt>
--   is the same as <tt>Count</tt>.
--   
--   <a>$sel:items:ScanResponse'</a>, <a>scanResponse_items</a> - An array
--   of item attributes that match the scan criteria. Each element in this
--   array consists of an attribute name and the value for that attribute.
--   
--   <a>$sel:consumedCapacity:ScanResponse'</a>,
--   <a>scanResponse_consumedCapacity</a> - The capacity units consumed by
--   the <tt>Scan</tt> operation. The data returned includes the total
--   provisioned throughput consumed, along with statistics for the table
--   and any indexes involved in the operation. <tt>ConsumedCapacity</tt>
--   is only returned if the <tt>ReturnConsumedCapacity</tt> parameter was
--   specified. For more information, see <a>Provisioned Throughput</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:httpStatus:ScanResponse'</a>, <a>scanResponse_httpStatus</a> -
--   The response's http status code.
newScanResponse :: Int -> ScanResponse

-- | The primary key of the item where the operation stopped, inclusive of
--   the previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedKey</tt> is empty, then the "last page" of results
--   has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedKey</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedKey</tt> is empty.
scanResponse_lastEvaluatedKey :: Lens' ScanResponse (Maybe (HashMap Text AttributeValue))

-- | The number of items in the response.
--   
--   If you set <tt>ScanFilter</tt> in the request, then <tt>Count</tt> is
--   the number of items returned after the filter was applied, and
--   <tt>ScannedCount</tt> is the number of matching items before the
--   filter was applied.
--   
--   If you did not use a filter in the request, then <tt>Count</tt> is the
--   same as <tt>ScannedCount</tt>.
scanResponse_count :: Lens' ScanResponse (Maybe Int)

-- | The number of items evaluated, before any <tt>ScanFilter</tt> is
--   applied. A high <tt>ScannedCount</tt> value with few, or no,
--   <tt>Count</tt> results indicates an inefficient <tt>Scan</tt>
--   operation. For more information, see <a>Count and ScannedCount</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   If you did not use a filter in the request, then <tt>ScannedCount</tt>
--   is the same as <tt>Count</tt>.
scanResponse_scannedCount :: Lens' ScanResponse (Maybe Int)

-- | An array of item attributes that match the scan criteria. Each element
--   in this array consists of an attribute name and the value for that
--   attribute.
scanResponse_items :: Lens' ScanResponse (Maybe [HashMap Text AttributeValue])

-- | The capacity units consumed by the <tt>Scan</tt> operation. The data
--   returned includes the total provisioned throughput consumed, along
--   with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Throughput</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
scanResponse_consumedCapacity :: Lens' ScanResponse (Maybe ConsumedCapacity)

-- | The response's http status code.
scanResponse_httpStatus :: Lens' ScanResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.Scan.Scan
instance GHC.Show.Show Amazonka.DynamoDB.Scan.Scan
instance GHC.Read.Read Amazonka.DynamoDB.Scan.Scan
instance GHC.Classes.Eq Amazonka.DynamoDB.Scan.Scan
instance GHC.Generics.Generic Amazonka.DynamoDB.Scan.ScanResponse
instance GHC.Show.Show Amazonka.DynamoDB.Scan.ScanResponse
instance GHC.Read.Read Amazonka.DynamoDB.Scan.ScanResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.Scan.ScanResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.Scan.Scan
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Scan.ScanResponse
instance Amazonka.Pager.AWSPager Amazonka.DynamoDB.Scan.Scan
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Scan.Scan
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Scan.Scan
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.Scan.Scan
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Scan.Scan
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.Scan.Scan
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Scan.Scan


-- | Restores the specified table to the specified point in time within
--   <tt>EarliestRestorableDateTime</tt> and
--   <tt>LatestRestorableDateTime</tt>. You can restore your table to any
--   point in time during the last 35 days. Any number of users can execute
--   up to 4 concurrent restores (any type of restore) in a given account.
--   
--   When you restore using point in time recovery, DynamoDB restores your
--   table data to the state based on the selected date and time
--   (day:hour:minute:second) to a new table.
--   
--   Along with data, the following are also included on the new restored
--   table using point in time recovery:
--   
--   <ul>
--   <li>Global secondary indexes (GSIs)</li>
--   <li>Local secondary indexes (LSIs)</li>
--   <li>Provisioned read and write capacity</li>
--   <li>Encryption settingsAll these settings come from the current
--   settings of the source table at the time of restore.</li>
--   </ul>
--   
--   You must manually set up the following on the restored table:
--   
--   <ul>
--   <li>Auto scaling policies</li>
--   <li>IAM policies</li>
--   <li>Amazon CloudWatch metrics and alarms</li>
--   <li>Tags</li>
--   <li>Stream settings</li>
--   <li>Time to Live (TTL) settings</li>
--   <li>Point in time recovery settings</li>
--   </ul>
module Amazonka.DynamoDB.RestoreTableToPointInTime

-- | <i>See:</i> <a>newRestoreTableToPointInTime</a> smart constructor.
data RestoreTableToPointInTime
RestoreTableToPointInTime' :: Maybe BillingMode -> Maybe Bool -> Maybe [GlobalSecondaryIndex] -> Maybe ProvisionedThroughput -> Maybe Text -> Maybe SSESpecification -> Maybe Text -> Maybe [LocalSecondaryIndex] -> Maybe POSIX -> Text -> RestoreTableToPointInTime

-- | The billing mode of the restored table.
[$sel:billingModeOverride:RestoreTableToPointInTime'] :: RestoreTableToPointInTime -> Maybe BillingMode

-- | Restore the table to the latest possible time.
--   <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time.
[$sel:useLatestRestorableTime:RestoreTableToPointInTime'] :: RestoreTableToPointInTime -> Maybe Bool

-- | List of global secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
[$sel:globalSecondaryIndexOverride:RestoreTableToPointInTime'] :: RestoreTableToPointInTime -> Maybe [GlobalSecondaryIndex]

-- | Provisioned throughput settings for the restored table.
[$sel:provisionedThroughputOverride:RestoreTableToPointInTime'] :: RestoreTableToPointInTime -> Maybe ProvisionedThroughput

-- | The DynamoDB table that will be restored. This value is an Amazon
--   Resource Name (ARN).
[$sel:sourceTableArn:RestoreTableToPointInTime'] :: RestoreTableToPointInTime -> Maybe Text

-- | The new server-side encryption settings for the restored table.
[$sel:sSESpecificationOverride:RestoreTableToPointInTime'] :: RestoreTableToPointInTime -> Maybe SSESpecification

-- | Name of the source table that is being restored.
[$sel:sourceTableName:RestoreTableToPointInTime'] :: RestoreTableToPointInTime -> Maybe Text

-- | List of local secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
[$sel:localSecondaryIndexOverride:RestoreTableToPointInTime'] :: RestoreTableToPointInTime -> Maybe [LocalSecondaryIndex]

-- | Time in the past to restore the table to.
[$sel:restoreDateTime:RestoreTableToPointInTime'] :: RestoreTableToPointInTime -> Maybe POSIX

-- | The name of the new table to which it must be restored to.
[$sel:targetTableName:RestoreTableToPointInTime'] :: RestoreTableToPointInTime -> Text

-- | Create a value of <a>RestoreTableToPointInTime</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:billingModeOverride:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_billingModeOverride</a> - The billing
--   mode of the restored table.
--   
--   <a>$sel:useLatestRestorableTime:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_useLatestRestorableTime</a> - Restore the
--   table to the latest possible time. <tt>LatestRestorableDateTime</tt>
--   is typically 5 minutes before the current time.
--   
--   <a>$sel:globalSecondaryIndexOverride:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_globalSecondaryIndexOverride</a> - List
--   of global secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
--   
--   <a>$sel:provisionedThroughputOverride:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_provisionedThroughputOverride</a> -
--   Provisioned throughput settings for the restored table.
--   
--   <a>$sel:sourceTableArn:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_sourceTableArn</a> - The DynamoDB table
--   that will be restored. This value is an Amazon Resource Name (ARN).
--   
--   <a>$sel:sSESpecificationOverride:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_sSESpecificationOverride</a> - The new
--   server-side encryption settings for the restored table.
--   
--   <a>$sel:sourceTableName:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_sourceTableName</a> - Name of the source
--   table that is being restored.
--   
--   <a>$sel:localSecondaryIndexOverride:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_localSecondaryIndexOverride</a> - List of
--   local secondary indexes for the restored table. The indexes provided
--   should match existing secondary indexes. You can choose to exclude
--   some or all of the indexes at the time of restore.
--   
--   <a>$sel:restoreDateTime:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_restoreDateTime</a> - Time in the past to
--   restore the table to.
--   
--   <a>$sel:targetTableName:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_targetTableName</a> - The name of the new
--   table to which it must be restored to.
newRestoreTableToPointInTime :: Text -> RestoreTableToPointInTime

-- | The billing mode of the restored table.
restoreTableToPointInTime_billingModeOverride :: Lens' RestoreTableToPointInTime (Maybe BillingMode)

-- | Restore the table to the latest possible time.
--   <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time.
restoreTableToPointInTime_useLatestRestorableTime :: Lens' RestoreTableToPointInTime (Maybe Bool)

-- | List of global secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
restoreTableToPointInTime_globalSecondaryIndexOverride :: Lens' RestoreTableToPointInTime (Maybe [GlobalSecondaryIndex])

-- | Provisioned throughput settings for the restored table.
restoreTableToPointInTime_provisionedThroughputOverride :: Lens' RestoreTableToPointInTime (Maybe ProvisionedThroughput)

-- | The DynamoDB table that will be restored. This value is an Amazon
--   Resource Name (ARN).
restoreTableToPointInTime_sourceTableArn :: Lens' RestoreTableToPointInTime (Maybe Text)

-- | The new server-side encryption settings for the restored table.
restoreTableToPointInTime_sSESpecificationOverride :: Lens' RestoreTableToPointInTime (Maybe SSESpecification)

-- | Name of the source table that is being restored.
restoreTableToPointInTime_sourceTableName :: Lens' RestoreTableToPointInTime (Maybe Text)

-- | List of local secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
restoreTableToPointInTime_localSecondaryIndexOverride :: Lens' RestoreTableToPointInTime (Maybe [LocalSecondaryIndex])

-- | Time in the past to restore the table to.
restoreTableToPointInTime_restoreDateTime :: Lens' RestoreTableToPointInTime (Maybe UTCTime)

-- | The name of the new table to which it must be restored to.
restoreTableToPointInTime_targetTableName :: Lens' RestoreTableToPointInTime Text

-- | <i>See:</i> <a>newRestoreTableToPointInTimeResponse</a> smart
--   constructor.
data RestoreTableToPointInTimeResponse
RestoreTableToPointInTimeResponse' :: Maybe TableDescription -> Int -> RestoreTableToPointInTimeResponse

-- | Represents the properties of a table.
[$sel:tableDescription:RestoreTableToPointInTimeResponse'] :: RestoreTableToPointInTimeResponse -> Maybe TableDescription

-- | The response's http status code.
[$sel:httpStatus:RestoreTableToPointInTimeResponse'] :: RestoreTableToPointInTimeResponse -> Int

-- | Create a value of <a>RestoreTableToPointInTimeResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableDescription:RestoreTableToPointInTimeResponse'</a>,
--   <a>restoreTableToPointInTimeResponse_tableDescription</a> - Represents
--   the properties of a table.
--   
--   <a>$sel:httpStatus:RestoreTableToPointInTimeResponse'</a>,
--   <a>restoreTableToPointInTimeResponse_httpStatus</a> - The response's
--   http status code.
newRestoreTableToPointInTimeResponse :: Int -> RestoreTableToPointInTimeResponse

-- | Represents the properties of a table.
restoreTableToPointInTimeResponse_tableDescription :: Lens' RestoreTableToPointInTimeResponse (Maybe TableDescription)

-- | The response's http status code.
restoreTableToPointInTimeResponse_httpStatus :: Lens' RestoreTableToPointInTimeResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTime
instance GHC.Show.Show Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTime
instance GHC.Read.Read Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTime
instance GHC.Classes.Eq Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTime
instance GHC.Generics.Generic Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTimeResponse
instance GHC.Show.Show Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTimeResponse
instance GHC.Read.Read Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTimeResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTimeResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTime
instance Control.DeepSeq.NFData Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTimeResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTime
instance Control.DeepSeq.NFData Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTime
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTime
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTime
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTime
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.RestoreTableToPointInTime.RestoreTableToPointInTime


-- | Creates a new table from an existing backup. Any number of users can
--   execute up to 4 concurrent restores (any type of restore) in a given
--   account.
--   
--   You can call <tt>RestoreTableFromBackup</tt> at a maximum rate of 10
--   times per second.
--   
--   You must manually set up the following on the restored table:
--   
--   <ul>
--   <li>Auto scaling policies</li>
--   <li>IAM policies</li>
--   <li>Amazon CloudWatch metrics and alarms</li>
--   <li>Tags</li>
--   <li>Stream settings</li>
--   <li>Time to Live (TTL) settings</li>
--   </ul>
module Amazonka.DynamoDB.RestoreTableFromBackup

-- | <i>See:</i> <a>newRestoreTableFromBackup</a> smart constructor.
data RestoreTableFromBackup
RestoreTableFromBackup' :: Maybe BillingMode -> Maybe [GlobalSecondaryIndex] -> Maybe ProvisionedThroughput -> Maybe SSESpecification -> Maybe [LocalSecondaryIndex] -> Text -> Text -> RestoreTableFromBackup

-- | The billing mode of the restored table.
[$sel:billingModeOverride:RestoreTableFromBackup'] :: RestoreTableFromBackup -> Maybe BillingMode

-- | List of global secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
[$sel:globalSecondaryIndexOverride:RestoreTableFromBackup'] :: RestoreTableFromBackup -> Maybe [GlobalSecondaryIndex]

-- | Provisioned throughput settings for the restored table.
[$sel:provisionedThroughputOverride:RestoreTableFromBackup'] :: RestoreTableFromBackup -> Maybe ProvisionedThroughput

-- | The new server-side encryption settings for the restored table.
[$sel:sSESpecificationOverride:RestoreTableFromBackup'] :: RestoreTableFromBackup -> Maybe SSESpecification

-- | List of local secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
[$sel:localSecondaryIndexOverride:RestoreTableFromBackup'] :: RestoreTableFromBackup -> Maybe [LocalSecondaryIndex]

-- | The name of the new table to which the backup must be restored.
[$sel:targetTableName:RestoreTableFromBackup'] :: RestoreTableFromBackup -> Text

-- | The Amazon Resource Name (ARN) associated with the backup.
[$sel:backupArn:RestoreTableFromBackup'] :: RestoreTableFromBackup -> Text

-- | Create a value of <a>RestoreTableFromBackup</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:billingModeOverride:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_billingModeOverride</a> - The billing mode
--   of the restored table.
--   
--   <a>$sel:globalSecondaryIndexOverride:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_globalSecondaryIndexOverride</a> - List of
--   global secondary indexes for the restored table. The indexes provided
--   should match existing secondary indexes. You can choose to exclude
--   some or all of the indexes at the time of restore.
--   
--   <a>$sel:provisionedThroughputOverride:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_provisionedThroughputOverride</a> -
--   Provisioned throughput settings for the restored table.
--   
--   <a>$sel:sSESpecificationOverride:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_sSESpecificationOverride</a> - The new
--   server-side encryption settings for the restored table.
--   
--   <a>$sel:localSecondaryIndexOverride:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_localSecondaryIndexOverride</a> - List of
--   local secondary indexes for the restored table. The indexes provided
--   should match existing secondary indexes. You can choose to exclude
--   some or all of the indexes at the time of restore.
--   
--   <a>$sel:targetTableName:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_targetTableName</a> - The name of the new
--   table to which the backup must be restored.
--   
--   <a>$sel:backupArn:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_backupArn</a> - The Amazon Resource Name
--   (ARN) associated with the backup.
newRestoreTableFromBackup :: Text -> Text -> RestoreTableFromBackup

-- | The billing mode of the restored table.
restoreTableFromBackup_billingModeOverride :: Lens' RestoreTableFromBackup (Maybe BillingMode)

-- | List of global secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
restoreTableFromBackup_globalSecondaryIndexOverride :: Lens' RestoreTableFromBackup (Maybe [GlobalSecondaryIndex])

-- | Provisioned throughput settings for the restored table.
restoreTableFromBackup_provisionedThroughputOverride :: Lens' RestoreTableFromBackup (Maybe ProvisionedThroughput)

-- | The new server-side encryption settings for the restored table.
restoreTableFromBackup_sSESpecificationOverride :: Lens' RestoreTableFromBackup (Maybe SSESpecification)

-- | List of local secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
restoreTableFromBackup_localSecondaryIndexOverride :: Lens' RestoreTableFromBackup (Maybe [LocalSecondaryIndex])

-- | The name of the new table to which the backup must be restored.
restoreTableFromBackup_targetTableName :: Lens' RestoreTableFromBackup Text

-- | The Amazon Resource Name (ARN) associated with the backup.
restoreTableFromBackup_backupArn :: Lens' RestoreTableFromBackup Text

-- | <i>See:</i> <a>newRestoreTableFromBackupResponse</a> smart
--   constructor.
data RestoreTableFromBackupResponse
RestoreTableFromBackupResponse' :: Maybe TableDescription -> Int -> RestoreTableFromBackupResponse

-- | The description of the table created from an existing backup.
[$sel:tableDescription:RestoreTableFromBackupResponse'] :: RestoreTableFromBackupResponse -> Maybe TableDescription

-- | The response's http status code.
[$sel:httpStatus:RestoreTableFromBackupResponse'] :: RestoreTableFromBackupResponse -> Int

-- | Create a value of <a>RestoreTableFromBackupResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableDescription:RestoreTableFromBackupResponse'</a>,
--   <a>restoreTableFromBackupResponse_tableDescription</a> - The
--   description of the table created from an existing backup.
--   
--   <a>$sel:httpStatus:RestoreTableFromBackupResponse'</a>,
--   <a>restoreTableFromBackupResponse_httpStatus</a> - The response's http
--   status code.
newRestoreTableFromBackupResponse :: Int -> RestoreTableFromBackupResponse

-- | The description of the table created from an existing backup.
restoreTableFromBackupResponse_tableDescription :: Lens' RestoreTableFromBackupResponse (Maybe TableDescription)

-- | The response's http status code.
restoreTableFromBackupResponse_httpStatus :: Lens' RestoreTableFromBackupResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackup
instance GHC.Show.Show Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackup
instance GHC.Read.Read Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackup
instance GHC.Classes.Eq Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackup
instance GHC.Generics.Generic Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackupResponse
instance GHC.Show.Show Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackupResponse
instance GHC.Read.Read Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackupResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackupResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackup
instance Control.DeepSeq.NFData Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackupResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackup
instance Control.DeepSeq.NFData Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackup
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackup
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackup
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackup
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.RestoreTableFromBackup.RestoreTableFromBackup


-- | The <tt>Query</tt> operation finds items based on primary key values.
--   You can query any table or secondary index that has a composite
--   primary key (a partition key and a sort key).
--   
--   Use the <tt>KeyConditionExpression</tt> parameter to provide a
--   specific value for the partition key. The <tt>Query</tt> operation
--   will return all of the items from the table or index with that
--   partition key value. You can optionally narrow the scope of the
--   <tt>Query</tt> operation by specifying a sort key value and a
--   comparison operator in <tt>KeyConditionExpression</tt>. To further
--   refine the <tt>Query</tt> results, you can optionally provide a
--   <tt>FilterExpression</tt>. A <tt>FilterExpression</tt> determines
--   which items within the results should be returned to you. All of the
--   other results are discarded.
--   
--   A <tt>Query</tt> operation always returns a result set. If no matching
--   items are found, the result set will be empty. Queries that do not
--   return results consume the minimum number of read capacity units for
--   that type of read operation.
--   
--   DynamoDB calculates the number of read capacity units consumed based
--   on item size, not on the amount of data that is returned to an
--   application. The number of capacity units consumed will be the same
--   whether you request all of the attributes (the default behavior) or
--   just some of them (using a projection expression). The number will
--   also be the same whether or not you use a <tt>FilterExpression</tt>.
--   
--   <tt>Query</tt> results are always sorted by the sort key value. If the
--   data type of the sort key is Number, the results are returned in
--   numeric order; otherwise, the results are returned in order of UTF-8
--   bytes. By default, the sort order is ascending. To reverse the order,
--   set the <tt>ScanIndexForward</tt> parameter to false.
--   
--   A single <tt>Query</tt> operation will read up to the maximum number
--   of items set (if using the <tt>Limit</tt> parameter) or a maximum of 1
--   MB of data and then apply any filtering to the results using
--   <tt>FilterExpression</tt>. If <tt>LastEvaluatedKey</tt> is present in
--   the response, you will need to paginate the result set. For more
--   information, see <a>Paginating the Results</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <tt>FilterExpression</tt> is applied after a <tt>Query</tt> finishes,
--   but before the results are returned. A <tt>FilterExpression</tt>
--   cannot contain partition key or sort key attributes. You need to
--   specify those attributes in the <tt>KeyConditionExpression</tt>.
--   
--   A <tt>Query</tt> operation can return an empty result set and a
--   <tt>LastEvaluatedKey</tt> if all the items read for the page of
--   results are filtered out.
--   
--   You can query a table, a local secondary index, or a global secondary
--   index. For a query on a table or on a local secondary index, you can
--   set the <tt>ConsistentRead</tt> parameter to <tt>true</tt> and obtain
--   a strongly consistent result. Global secondary indexes support
--   eventually consistent reads only, so do not specify
--   <tt>ConsistentRead</tt> when querying a global secondary index.
--   
--   This operation returns paginated results.
module Amazonka.DynamoDB.Query

-- | Represents the input of a <tt>Query</tt> operation.
--   
--   <i>See:</i> <a>newQuery</a> smart constructor.
data Query
Query' :: Maybe (HashMap Text Condition) -> Maybe Text -> Maybe (NonEmpty Text) -> Maybe (HashMap Text Text) -> Maybe Text -> Maybe (HashMap Text Condition) -> Maybe Bool -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnConsumedCapacity -> Maybe Bool -> Maybe Natural -> Maybe Select -> Maybe Text -> Maybe ConditionalOperator -> Maybe (HashMap Text AttributeValue) -> Maybe Text -> Text -> Query

-- | This is a legacy parameter. Use <tt>KeyConditionExpression</tt>
--   instead. For more information, see <a>KeyConditions</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:keyConditions:Query'] :: Query -> Maybe (HashMap Text Condition)

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the expression must be separated by
--   commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:projectionExpression:Query'] :: Query -> Maybe Text

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:attributesToGet:Query'] :: Query -> Maybe (NonEmpty Text)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:expressionAttributeNames:Query'] :: Query -> Maybe (HashMap Text Text)

-- | A string that contains conditions that DynamoDB applies after the
--   <tt>Query</tt> operation, but before the data is returned to you.
--   Items that do not satisfy the <tt>FilterExpression</tt> criteria are
--   not returned.
--   
--   A <tt>FilterExpression</tt> does not allow key attributes. You cannot
--   define a filter expression based on a partition key or a sort key.
--   
--   A <tt>FilterExpression</tt> is applied after the items have already
--   been read; the process of filtering does not consume any additional
--   read capacity units.
--   
--   For more information, see <a>Filter Expressions</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:filterExpression:Query'] :: Query -> Maybe Text

-- | This is a legacy parameter. Use <tt>FilterExpression</tt> instead. For
--   more information, see <a>QueryFilter</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:queryFilter:Query'] :: Query -> Maybe (HashMap Text Condition)

-- | Determines the read consistency model: If set to <tt>true</tt>, then
--   the operation uses strongly consistent reads; otherwise, the operation
--   uses eventually consistent reads.
--   
--   Strongly consistent reads are not supported on global secondary
--   indexes. If you query a global secondary index with
--   <tt>ConsistentRead</tt> set to <tt>true</tt>, you will receive a
--   <tt>ValidationException</tt>.
[$sel:consistentRead:Query'] :: Query -> Maybe Bool

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:expressionAttributeValues:Query'] :: Query -> Maybe (HashMap Text AttributeValue)
[$sel:returnConsumedCapacity:Query'] :: Query -> Maybe ReturnConsumedCapacity

-- | Specifies the order for index traversal: If <tt>true</tt> (default),
--   the traversal is performed in ascending order; if <tt>false</tt>, the
--   traversal is performed in descending order.
--   
--   Items with the same partition key value are stored in sorted order by
--   sort key. If the sort key data type is Number, the results are stored
--   in numeric order. For type String, the results are stored in order of
--   UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary
--   data as unsigned.
--   
--   If <tt>ScanIndexForward</tt> is <tt>true</tt>, DynamoDB returns the
--   results in the order in which they are stored (by sort key value).
--   This is the default behavior. If <tt>ScanIndexForward</tt> is
--   <tt>false</tt>, DynamoDB reads the results in reverse order by sort
--   key value, and then returns the results to the client.
[$sel:scanIndexForward:Query'] :: Query -> Maybe Bool

-- | The maximum number of items to evaluate (not necessarily the number of
--   matching items). If DynamoDB processes the number of items up to the
--   limit while processing the results, it stops the operation and returns
--   the matching values up to that point, and a key in
--   <tt>LastEvaluatedKey</tt> to apply in a subsequent operation, so that
--   you can pick up where you left off. Also, if the processed dataset
--   size exceeds 1 MB before DynamoDB reaches this limit, it stops the
--   operation and returns the matching values up to the limit, and a key
--   in <tt>LastEvaluatedKey</tt> to apply in a subsequent operation to
--   continue the operation. For more information, see <a>Query and
--   Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:limit:Query'] :: Query -> Maybe Natural

-- | The attributes to be returned in the result. You can retrieve all item
--   attributes, specific item attributes, the count of matching items, or
--   in the case of an index, some or all of the attributes projected into
--   the index.
--   
--   <ul>
--   <li><tt>ALL_ATTRIBUTES</tt> - Returns all of the item attributes from
--   the specified table or index. If you query a local secondary index,
--   then for each matching item in the index, DynamoDB fetches the entire
--   item from the parent table. If the index is configured to project all
--   item attributes, then all of the data can be obtained from the local
--   secondary index, and no fetching is required.</li>
--   <li><tt>ALL_PROJECTED_ATTRIBUTES</tt> - Allowed only when querying an
--   index. Retrieves all attributes that have been projected into the
--   index. If the index is configured to project all attributes, this
--   return value is equivalent to specifying <tt>ALL_ATTRIBUTES</tt>.</li>
--   <li><tt>COUNT</tt> - Returns the number of matching items, rather than
--   the matching items themselves.</li>
--   <li><tt>SPECIFIC_ATTRIBUTES</tt> - Returns only the attributes listed
--   in <tt>AttributesToGet</tt>. This return value is equivalent to
--   specifying <tt>AttributesToGet</tt> without specifying any value for
--   <tt>Select</tt>.If you query or scan a local secondary index and
--   request only attributes that are projected into that index, the
--   operation will read only the index and not the table. If any of the
--   requested attributes are not projected into the local secondary index,
--   DynamoDB fetches each of these attributes from the parent table. This
--   extra fetching incurs additional throughput cost and latency.If you
--   query or scan a global secondary index, you can only request
--   attributes that are projected into the index. Global secondary index
--   queries cannot fetch attributes from the parent table.</li>
--   </ul>
--   
--   If neither <tt>Select</tt> nor <tt>AttributesToGet</tt> are specified,
--   DynamoDB defaults to <tt>ALL_ATTRIBUTES</tt> when accessing a table,
--   and <tt>ALL_PROJECTED_ATTRIBUTES</tt> when accessing an index. You
--   cannot use both <tt>Select</tt> and <tt>AttributesToGet</tt> together
--   in a single request, unless the value for <tt>Select</tt> is
--   <tt>SPECIFIC_ATTRIBUTES</tt>. (This usage is equivalent to specifying
--   <tt>AttributesToGet</tt> without any value for <tt>Select</tt>.)
--   
--   If you use the <tt>ProjectionExpression</tt> parameter, then the value
--   for <tt>Select</tt> can only be <tt>SPECIFIC_ATTRIBUTES</tt>. Any
--   other value for <tt>Select</tt> will return an error.
[$sel:select:Query'] :: Query -> Maybe Select

-- | The condition that specifies the key values for items to be retrieved
--   by the <tt>Query</tt> action.
--   
--   The condition must perform an equality test on a single partition key
--   value.
--   
--   The condition can optionally perform one of several comparison tests
--   on a single sort key value. This allows <tt>Query</tt> to retrieve one
--   item with a given partition key value and sort key value, or several
--   items that have the same partition key value but different sort key
--   values.
--   
--   The partition key equality test is required, and must be specified in
--   the following format:
--   
--   <tt>partitionKeyName</tt> <i>=</i> <tt>:partitionkeyval</tt>
--   
--   If you also want to provide a condition for the sort key, it must be
--   combined using <tt>AND</tt> with the condition for the sort key.
--   Following is an example, using the <b>=</b> comparison operator for
--   the sort key:
--   
--   <tt>partitionKeyName</tt> <tt>=</tt> <tt>:partitionkeyval</tt>
--   <tt>AND</tt> <tt>sortKeyName</tt> <tt>=</tt> <tt>:sortkeyval</tt>
--   
--   Valid comparisons for the sort key condition are as follows:
--   
--   <ul>
--   <li><tt>sortKeyName</tt> <tt>=</tt> <tt>:sortkeyval</tt> - true if the
--   sort key value is equal to <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&lt;</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is less than <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&lt;=</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is less than or equal to <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&gt;</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is greater than <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&gt;= </tt> <tt>:sortkeyval</tt> - true
--   if the sort key value is greater than or equal to
--   <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>BETWEEN</tt> <tt>:sortkeyval1</tt>
--   <tt>AND</tt> <tt>:sortkeyval2</tt> - true if the sort key value is
--   greater than or equal to <tt>:sortkeyval1</tt>, and less than or equal
--   to <tt>:sortkeyval2</tt>.</li>
--   <li><tt>begins_with (</tt> <tt>sortKeyName</tt>, <tt>:sortkeyval</tt>
--   <tt>)</tt> - true if the sort key value begins with a particular
--   operand. (You cannot use this function with a sort key that is of type
--   Number.) Note that the function name <tt>begins_with</tt> is
--   case-sensitive.</li>
--   </ul>
--   
--   Use the <tt>ExpressionAttributeValues</tt> parameter to replace tokens
--   such as <tt>:partitionval</tt> and <tt>:sortval</tt> with actual
--   values at runtime.
--   
--   You can optionally use the <tt>ExpressionAttributeNames</tt> parameter
--   to replace the names of the partition key and sort key with
--   placeholder tokens. This option might be necessary if an attribute
--   name conflicts with a DynamoDB reserved word. For example, the
--   following <tt>KeyConditionExpression</tt> parameter causes an error
--   because <i>Size</i> is a reserved word:
--   
--   <ul>
--   <li><pre>Size = :myval</pre></li>
--   </ul>
--   
--   To work around this, define a placeholder (such a <tt>#S</tt>) to
--   represent the attribute name <i>Size</i>.
--   <tt>KeyConditionExpression</tt> then is as follows:
--   
--   <ul>
--   <li><pre>#S = :myval</pre></li>
--   </ul>
--   
--   For a list of reserved words, see <a>Reserved Words</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   For more information on <tt>ExpressionAttributeNames</tt> and
--   <tt>ExpressionAttributeValues</tt>, see <a>Using Placeholders for
--   Attribute Names and Values</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
[$sel:keyConditionExpression:Query'] :: Query -> Maybe Text

-- | This is a legacy parameter. Use <tt>FilterExpression</tt> instead. For
--   more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:conditionalOperator:Query'] :: Query -> Maybe ConditionalOperator

-- | The primary key of the first item that this operation will evaluate.
--   Use the value that was returned for <tt>LastEvaluatedKey</tt> in the
--   previous operation.
--   
--   The data type for <tt>ExclusiveStartKey</tt> must be String, Number,
--   or Binary. No set data types are allowed.
[$sel:exclusiveStartKey:Query'] :: Query -> Maybe (HashMap Text AttributeValue)

-- | The name of an index to query. This index can be any local secondary
--   index or global secondary index on the table. Note that if you use the
--   <tt>IndexName</tt> parameter, you must also provide
--   <tt>TableName.</tt>
[$sel:indexName:Query'] :: Query -> Maybe Text

-- | The name of the table containing the requested items.
[$sel:tableName:Query'] :: Query -> Text

-- | Create a value of <a>Query</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyConditions:Query'</a>, <a>query_keyConditions</a> - This is
--   a legacy parameter. Use <tt>KeyConditionExpression</tt> instead. For
--   more information, see <a>KeyConditions</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:projectionExpression:Query'</a>,
--   <a>query_projectionExpression</a> - A string that identifies one or
--   more attributes to retrieve from the table. These attributes can
--   include scalars, sets, or elements of a JSON document. The attributes
--   in the expression must be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributesToGet:Query'</a>, <a>query_attributesToGet</a> -
--   This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:expressionAttributeNames:Query'</a>,
--   <a>query_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression. The following are some
--   use cases for using <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:filterExpression:Query'</a>, <a>query_filterExpression</a> - A
--   string that contains conditions that DynamoDB applies after the
--   <tt>Query</tt> operation, but before the data is returned to you.
--   Items that do not satisfy the <tt>FilterExpression</tt> criteria are
--   not returned.
--   
--   A <tt>FilterExpression</tt> does not allow key attributes. You cannot
--   define a filter expression based on a partition key or a sort key.
--   
--   A <tt>FilterExpression</tt> is applied after the items have already
--   been read; the process of filtering does not consume any additional
--   read capacity units.
--   
--   For more information, see <a>Filter Expressions</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:queryFilter:Query'</a>, <a>query_queryFilter</a> - This is a
--   legacy parameter. Use <tt>FilterExpression</tt> instead. For more
--   information, see <a>QueryFilter</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:consistentRead:Query'</a>, <a>query_consistentRead</a> -
--   Determines the read consistency model: If set to <tt>true</tt>, then
--   the operation uses strongly consistent reads; otherwise, the operation
--   uses eventually consistent reads.
--   
--   Strongly consistent reads are not supported on global secondary
--   indexes. If you query a global secondary index with
--   <tt>ConsistentRead</tt> set to <tt>true</tt>, you will receive a
--   <tt>ValidationException</tt>.
--   
--   <a>$sel:expressionAttributeValues:Query'</a>,
--   <a>query_expressionAttributeValues</a> - One or more values that can
--   be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnConsumedCapacity:Query'</a>,
--   <a>query_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:scanIndexForward:Query'</a>, <a>query_scanIndexForward</a> -
--   Specifies the order for index traversal: If <tt>true</tt> (default),
--   the traversal is performed in ascending order; if <tt>false</tt>, the
--   traversal is performed in descending order.
--   
--   Items with the same partition key value are stored in sorted order by
--   sort key. If the sort key data type is Number, the results are stored
--   in numeric order. For type String, the results are stored in order of
--   UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary
--   data as unsigned.
--   
--   If <tt>ScanIndexForward</tt> is <tt>true</tt>, DynamoDB returns the
--   results in the order in which they are stored (by sort key value).
--   This is the default behavior. If <tt>ScanIndexForward</tt> is
--   <tt>false</tt>, DynamoDB reads the results in reverse order by sort
--   key value, and then returns the results to the client.
--   
--   <a>$sel:limit:Query'</a>, <a>query_limit</a> - The maximum number of
--   items to evaluate (not necessarily the number of matching items). If
--   DynamoDB processes the number of items up to the limit while
--   processing the results, it stops the operation and returns the
--   matching values up to that point, and a key in
--   <tt>LastEvaluatedKey</tt> to apply in a subsequent operation, so that
--   you can pick up where you left off. Also, if the processed dataset
--   size exceeds 1 MB before DynamoDB reaches this limit, it stops the
--   operation and returns the matching values up to the limit, and a key
--   in <tt>LastEvaluatedKey</tt> to apply in a subsequent operation to
--   continue the operation. For more information, see <a>Query and
--   Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:select:Query'</a>, <a>query_select</a> - The attributes to be
--   returned in the result. You can retrieve all item attributes, specific
--   item attributes, the count of matching items, or in the case of an
--   index, some or all of the attributes projected into the index.
--   
--   <ul>
--   <li><tt>ALL_ATTRIBUTES</tt> - Returns all of the item attributes from
--   the specified table or index. If you query a local secondary index,
--   then for each matching item in the index, DynamoDB fetches the entire
--   item from the parent table. If the index is configured to project all
--   item attributes, then all of the data can be obtained from the local
--   secondary index, and no fetching is required.</li>
--   <li><tt>ALL_PROJECTED_ATTRIBUTES</tt> - Allowed only when querying an
--   index. Retrieves all attributes that have been projected into the
--   index. If the index is configured to project all attributes, this
--   return value is equivalent to specifying <tt>ALL_ATTRIBUTES</tt>.</li>
--   <li><tt>COUNT</tt> - Returns the number of matching items, rather than
--   the matching items themselves.</li>
--   <li><tt>SPECIFIC_ATTRIBUTES</tt> - Returns only the attributes listed
--   in <tt>AttributesToGet</tt>. This return value is equivalent to
--   specifying <tt>AttributesToGet</tt> without specifying any value for
--   <tt>Select</tt>.If you query or scan a local secondary index and
--   request only attributes that are projected into that index, the
--   operation will read only the index and not the table. If any of the
--   requested attributes are not projected into the local secondary index,
--   DynamoDB fetches each of these attributes from the parent table. This
--   extra fetching incurs additional throughput cost and latency.If you
--   query or scan a global secondary index, you can only request
--   attributes that are projected into the index. Global secondary index
--   queries cannot fetch attributes from the parent table.</li>
--   </ul>
--   
--   If neither <tt>Select</tt> nor <tt>AttributesToGet</tt> are specified,
--   DynamoDB defaults to <tt>ALL_ATTRIBUTES</tt> when accessing a table,
--   and <tt>ALL_PROJECTED_ATTRIBUTES</tt> when accessing an index. You
--   cannot use both <tt>Select</tt> and <tt>AttributesToGet</tt> together
--   in a single request, unless the value for <tt>Select</tt> is
--   <tt>SPECIFIC_ATTRIBUTES</tt>. (This usage is equivalent to specifying
--   <tt>AttributesToGet</tt> without any value for <tt>Select</tt>.)
--   
--   If you use the <tt>ProjectionExpression</tt> parameter, then the value
--   for <tt>Select</tt> can only be <tt>SPECIFIC_ATTRIBUTES</tt>. Any
--   other value for <tt>Select</tt> will return an error.
--   
--   <a>$sel:keyConditionExpression:Query'</a>,
--   <a>query_keyConditionExpression</a> - The condition that specifies the
--   key values for items to be retrieved by the <tt>Query</tt> action.
--   
--   The condition must perform an equality test on a single partition key
--   value.
--   
--   The condition can optionally perform one of several comparison tests
--   on a single sort key value. This allows <tt>Query</tt> to retrieve one
--   item with a given partition key value and sort key value, or several
--   items that have the same partition key value but different sort key
--   values.
--   
--   The partition key equality test is required, and must be specified in
--   the following format:
--   
--   <tt>partitionKeyName</tt> <i>=</i> <tt>:partitionkeyval</tt>
--   
--   If you also want to provide a condition for the sort key, it must be
--   combined using <tt>AND</tt> with the condition for the sort key.
--   Following is an example, using the <b>=</b> comparison operator for
--   the sort key:
--   
--   <tt>partitionKeyName</tt> <tt>=</tt> <tt>:partitionkeyval</tt>
--   <tt>AND</tt> <tt>sortKeyName</tt> <tt>=</tt> <tt>:sortkeyval</tt>
--   
--   Valid comparisons for the sort key condition are as follows:
--   
--   <ul>
--   <li><tt>sortKeyName</tt> <tt>=</tt> <tt>:sortkeyval</tt> - true if the
--   sort key value is equal to <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&lt;</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is less than <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&lt;=</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is less than or equal to <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&gt;</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is greater than <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&gt;= </tt> <tt>:sortkeyval</tt> - true
--   if the sort key value is greater than or equal to
--   <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>BETWEEN</tt> <tt>:sortkeyval1</tt>
--   <tt>AND</tt> <tt>:sortkeyval2</tt> - true if the sort key value is
--   greater than or equal to <tt>:sortkeyval1</tt>, and less than or equal
--   to <tt>:sortkeyval2</tt>.</li>
--   <li><tt>begins_with (</tt> <tt>sortKeyName</tt>, <tt>:sortkeyval</tt>
--   <tt>)</tt> - true if the sort key value begins with a particular
--   operand. (You cannot use this function with a sort key that is of type
--   Number.) Note that the function name <tt>begins_with</tt> is
--   case-sensitive.</li>
--   </ul>
--   
--   Use the <tt>ExpressionAttributeValues</tt> parameter to replace tokens
--   such as <tt>:partitionval</tt> and <tt>:sortval</tt> with actual
--   values at runtime.
--   
--   You can optionally use the <tt>ExpressionAttributeNames</tt> parameter
--   to replace the names of the partition key and sort key with
--   placeholder tokens. This option might be necessary if an attribute
--   name conflicts with a DynamoDB reserved word. For example, the
--   following <tt>KeyConditionExpression</tt> parameter causes an error
--   because <i>Size</i> is a reserved word:
--   
--   <ul>
--   <li><pre>Size = :myval</pre></li>
--   </ul>
--   
--   To work around this, define a placeholder (such a <tt>#S</tt>) to
--   represent the attribute name <i>Size</i>.
--   <tt>KeyConditionExpression</tt> then is as follows:
--   
--   <ul>
--   <li><pre>#S = :myval</pre></li>
--   </ul>
--   
--   For a list of reserved words, see <a>Reserved Words</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   For more information on <tt>ExpressionAttributeNames</tt> and
--   <tt>ExpressionAttributeValues</tt>, see <a>Using Placeholders for
--   Attribute Names and Values</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:conditionalOperator:Query'</a>,
--   <a>query_conditionalOperator</a> - This is a legacy parameter. Use
--   <tt>FilterExpression</tt> instead. For more information, see
--   <a>ConditionalOperator</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:exclusiveStartKey:Query'</a>, <a>query_exclusiveStartKey</a> -
--   The primary key of the first item that this operation will evaluate.
--   Use the value that was returned for <tt>LastEvaluatedKey</tt> in the
--   previous operation.
--   
--   The data type for <tt>ExclusiveStartKey</tt> must be String, Number,
--   or Binary. No set data types are allowed.
--   
--   <a>$sel:indexName:Query'</a>, <a>query_indexName</a> - The name of an
--   index to query. This index can be any local secondary index or global
--   secondary index on the table. Note that if you use the
--   <tt>IndexName</tt> parameter, you must also provide
--   <tt>TableName.</tt>
--   
--   <a>$sel:tableName:Query'</a>, <a>query_tableName</a> - The name of the
--   table containing the requested items.
newQuery :: Text -> Query

-- | This is a legacy parameter. Use <tt>KeyConditionExpression</tt>
--   instead. For more information, see <a>KeyConditions</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
query_keyConditions :: Lens' Query (Maybe (HashMap Text Condition))

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the expression must be separated by
--   commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
query_projectionExpression :: Lens' Query (Maybe Text)

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
query_attributesToGet :: Lens' Query (Maybe (NonEmpty Text))

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
query_expressionAttributeNames :: Lens' Query (Maybe (HashMap Text Text))

-- | A string that contains conditions that DynamoDB applies after the
--   <tt>Query</tt> operation, but before the data is returned to you.
--   Items that do not satisfy the <tt>FilterExpression</tt> criteria are
--   not returned.
--   
--   A <tt>FilterExpression</tt> does not allow key attributes. You cannot
--   define a filter expression based on a partition key or a sort key.
--   
--   A <tt>FilterExpression</tt> is applied after the items have already
--   been read; the process of filtering does not consume any additional
--   read capacity units.
--   
--   For more information, see <a>Filter Expressions</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
query_filterExpression :: Lens' Query (Maybe Text)

-- | This is a legacy parameter. Use <tt>FilterExpression</tt> instead. For
--   more information, see <a>QueryFilter</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
query_queryFilter :: Lens' Query (Maybe (HashMap Text Condition))

-- | Determines the read consistency model: If set to <tt>true</tt>, then
--   the operation uses strongly consistent reads; otherwise, the operation
--   uses eventually consistent reads.
--   
--   Strongly consistent reads are not supported on global secondary
--   indexes. If you query a global secondary index with
--   <tt>ConsistentRead</tt> set to <tt>true</tt>, you will receive a
--   <tt>ValidationException</tt>.
query_consistentRead :: Lens' Query (Maybe Bool)

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
query_expressionAttributeValues :: Lens' Query (Maybe (HashMap Text AttributeValue))

-- | Undocumented member.
query_returnConsumedCapacity :: Lens' Query (Maybe ReturnConsumedCapacity)

-- | Specifies the order for index traversal: If <tt>true</tt> (default),
--   the traversal is performed in ascending order; if <tt>false</tt>, the
--   traversal is performed in descending order.
--   
--   Items with the same partition key value are stored in sorted order by
--   sort key. If the sort key data type is Number, the results are stored
--   in numeric order. For type String, the results are stored in order of
--   UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary
--   data as unsigned.
--   
--   If <tt>ScanIndexForward</tt> is <tt>true</tt>, DynamoDB returns the
--   results in the order in which they are stored (by sort key value).
--   This is the default behavior. If <tt>ScanIndexForward</tt> is
--   <tt>false</tt>, DynamoDB reads the results in reverse order by sort
--   key value, and then returns the results to the client.
query_scanIndexForward :: Lens' Query (Maybe Bool)

-- | The maximum number of items to evaluate (not necessarily the number of
--   matching items). If DynamoDB processes the number of items up to the
--   limit while processing the results, it stops the operation and returns
--   the matching values up to that point, and a key in
--   <tt>LastEvaluatedKey</tt> to apply in a subsequent operation, so that
--   you can pick up where you left off. Also, if the processed dataset
--   size exceeds 1 MB before DynamoDB reaches this limit, it stops the
--   operation and returns the matching values up to the limit, and a key
--   in <tt>LastEvaluatedKey</tt> to apply in a subsequent operation to
--   continue the operation. For more information, see <a>Query and
--   Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
query_limit :: Lens' Query (Maybe Natural)

-- | The attributes to be returned in the result. You can retrieve all item
--   attributes, specific item attributes, the count of matching items, or
--   in the case of an index, some or all of the attributes projected into
--   the index.
--   
--   <ul>
--   <li><tt>ALL_ATTRIBUTES</tt> - Returns all of the item attributes from
--   the specified table or index. If you query a local secondary index,
--   then for each matching item in the index, DynamoDB fetches the entire
--   item from the parent table. If the index is configured to project all
--   item attributes, then all of the data can be obtained from the local
--   secondary index, and no fetching is required.</li>
--   <li><tt>ALL_PROJECTED_ATTRIBUTES</tt> - Allowed only when querying an
--   index. Retrieves all attributes that have been projected into the
--   index. If the index is configured to project all attributes, this
--   return value is equivalent to specifying <tt>ALL_ATTRIBUTES</tt>.</li>
--   <li><tt>COUNT</tt> - Returns the number of matching items, rather than
--   the matching items themselves.</li>
--   <li><tt>SPECIFIC_ATTRIBUTES</tt> - Returns only the attributes listed
--   in <tt>AttributesToGet</tt>. This return value is equivalent to
--   specifying <tt>AttributesToGet</tt> without specifying any value for
--   <tt>Select</tt>.If you query or scan a local secondary index and
--   request only attributes that are projected into that index, the
--   operation will read only the index and not the table. If any of the
--   requested attributes are not projected into the local secondary index,
--   DynamoDB fetches each of these attributes from the parent table. This
--   extra fetching incurs additional throughput cost and latency.If you
--   query or scan a global secondary index, you can only request
--   attributes that are projected into the index. Global secondary index
--   queries cannot fetch attributes from the parent table.</li>
--   </ul>
--   
--   If neither <tt>Select</tt> nor <tt>AttributesToGet</tt> are specified,
--   DynamoDB defaults to <tt>ALL_ATTRIBUTES</tt> when accessing a table,
--   and <tt>ALL_PROJECTED_ATTRIBUTES</tt> when accessing an index. You
--   cannot use both <tt>Select</tt> and <tt>AttributesToGet</tt> together
--   in a single request, unless the value for <tt>Select</tt> is
--   <tt>SPECIFIC_ATTRIBUTES</tt>. (This usage is equivalent to specifying
--   <tt>AttributesToGet</tt> without any value for <tt>Select</tt>.)
--   
--   If you use the <tt>ProjectionExpression</tt> parameter, then the value
--   for <tt>Select</tt> can only be <tt>SPECIFIC_ATTRIBUTES</tt>. Any
--   other value for <tt>Select</tt> will return an error.
query_select :: Lens' Query (Maybe Select)

-- | The condition that specifies the key values for items to be retrieved
--   by the <tt>Query</tt> action.
--   
--   The condition must perform an equality test on a single partition key
--   value.
--   
--   The condition can optionally perform one of several comparison tests
--   on a single sort key value. This allows <tt>Query</tt> to retrieve one
--   item with a given partition key value and sort key value, or several
--   items that have the same partition key value but different sort key
--   values.
--   
--   The partition key equality test is required, and must be specified in
--   the following format:
--   
--   <tt>partitionKeyName</tt> <i>=</i> <tt>:partitionkeyval</tt>
--   
--   If you also want to provide a condition for the sort key, it must be
--   combined using <tt>AND</tt> with the condition for the sort key.
--   Following is an example, using the <b>=</b> comparison operator for
--   the sort key:
--   
--   <tt>partitionKeyName</tt> <tt>=</tt> <tt>:partitionkeyval</tt>
--   <tt>AND</tt> <tt>sortKeyName</tt> <tt>=</tt> <tt>:sortkeyval</tt>
--   
--   Valid comparisons for the sort key condition are as follows:
--   
--   <ul>
--   <li><tt>sortKeyName</tt> <tt>=</tt> <tt>:sortkeyval</tt> - true if the
--   sort key value is equal to <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&lt;</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is less than <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&lt;=</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is less than or equal to <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&gt;</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is greater than <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&gt;= </tt> <tt>:sortkeyval</tt> - true
--   if the sort key value is greater than or equal to
--   <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>BETWEEN</tt> <tt>:sortkeyval1</tt>
--   <tt>AND</tt> <tt>:sortkeyval2</tt> - true if the sort key value is
--   greater than or equal to <tt>:sortkeyval1</tt>, and less than or equal
--   to <tt>:sortkeyval2</tt>.</li>
--   <li><tt>begins_with (</tt> <tt>sortKeyName</tt>, <tt>:sortkeyval</tt>
--   <tt>)</tt> - true if the sort key value begins with a particular
--   operand. (You cannot use this function with a sort key that is of type
--   Number.) Note that the function name <tt>begins_with</tt> is
--   case-sensitive.</li>
--   </ul>
--   
--   Use the <tt>ExpressionAttributeValues</tt> parameter to replace tokens
--   such as <tt>:partitionval</tt> and <tt>:sortval</tt> with actual
--   values at runtime.
--   
--   You can optionally use the <tt>ExpressionAttributeNames</tt> parameter
--   to replace the names of the partition key and sort key with
--   placeholder tokens. This option might be necessary if an attribute
--   name conflicts with a DynamoDB reserved word. For example, the
--   following <tt>KeyConditionExpression</tt> parameter causes an error
--   because <i>Size</i> is a reserved word:
--   
--   <ul>
--   <li><pre>Size = :myval</pre></li>
--   </ul>
--   
--   To work around this, define a placeholder (such a <tt>#S</tt>) to
--   represent the attribute name <i>Size</i>.
--   <tt>KeyConditionExpression</tt> then is as follows:
--   
--   <ul>
--   <li><pre>#S = :myval</pre></li>
--   </ul>
--   
--   For a list of reserved words, see <a>Reserved Words</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   For more information on <tt>ExpressionAttributeNames</tt> and
--   <tt>ExpressionAttributeValues</tt>, see <a>Using Placeholders for
--   Attribute Names and Values</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
query_keyConditionExpression :: Lens' Query (Maybe Text)

-- | This is a legacy parameter. Use <tt>FilterExpression</tt> instead. For
--   more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
query_conditionalOperator :: Lens' Query (Maybe ConditionalOperator)

-- | The primary key of the first item that this operation will evaluate.
--   Use the value that was returned for <tt>LastEvaluatedKey</tt> in the
--   previous operation.
--   
--   The data type for <tt>ExclusiveStartKey</tt> must be String, Number,
--   or Binary. No set data types are allowed.
query_exclusiveStartKey :: Lens' Query (Maybe (HashMap Text AttributeValue))

-- | The name of an index to query. This index can be any local secondary
--   index or global secondary index on the table. Note that if you use the
--   <tt>IndexName</tt> parameter, you must also provide
--   <tt>TableName.</tt>
query_indexName :: Lens' Query (Maybe Text)

-- | The name of the table containing the requested items.
query_tableName :: Lens' Query Text

-- | Represents the output of a <tt>Query</tt> operation.
--   
--   <i>See:</i> <a>newQueryResponse</a> smart constructor.
data QueryResponse
QueryResponse' :: Maybe (HashMap Text AttributeValue) -> Maybe Int -> Maybe Int -> Maybe [HashMap Text AttributeValue] -> Maybe ConsumedCapacity -> Int -> QueryResponse

-- | The primary key of the item where the operation stopped, inclusive of
--   the previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedKey</tt> is empty, then the "last page" of results
--   has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedKey</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedKey</tt> is empty.
[$sel:lastEvaluatedKey:QueryResponse'] :: QueryResponse -> Maybe (HashMap Text AttributeValue)

-- | The number of items in the response.
--   
--   If you used a <tt>QueryFilter</tt> in the request, then <tt>Count</tt>
--   is the number of items returned after the filter was applied, and
--   <tt>ScannedCount</tt> is the number of matching items before the
--   filter was applied.
--   
--   If you did not use a filter in the request, then <tt>Count</tt> and
--   <tt>ScannedCount</tt> are the same.
[$sel:count:QueryResponse'] :: QueryResponse -> Maybe Int

-- | The number of items evaluated, before any <tt>QueryFilter</tt> is
--   applied. A high <tt>ScannedCount</tt> value with few, or no,
--   <tt>Count</tt> results indicates an inefficient <tt>Query</tt>
--   operation. For more information, see <a>Count and ScannedCount</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   If you did not use a filter in the request, then <tt>ScannedCount</tt>
--   is the same as <tt>Count</tt>.
[$sel:scannedCount:QueryResponse'] :: QueryResponse -> Maybe Int

-- | An array of item attributes that match the query criteria. Each
--   element in this array consists of an attribute name and the value for
--   that attribute.
[$sel:items:QueryResponse'] :: QueryResponse -> Maybe [HashMap Text AttributeValue]

-- | The capacity units consumed by the <tt>Query</tt> operation. The data
--   returned includes the total provisioned throughput consumed, along
--   with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Throughput</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:consumedCapacity:QueryResponse'] :: QueryResponse -> Maybe ConsumedCapacity

-- | The response's http status code.
[$sel:httpStatus:QueryResponse'] :: QueryResponse -> Int

-- | Create a value of <a>QueryResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedKey:QueryResponse'</a>,
--   <a>queryResponse_lastEvaluatedKey</a> - The primary key of the item
--   where the operation stopped, inclusive of the previous result set. Use
--   this value to start a new operation, excluding this value in the new
--   request.
--   
--   If <tt>LastEvaluatedKey</tt> is empty, then the "last page" of results
--   has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedKey</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedKey</tt> is empty.
--   
--   <a>$sel:count:QueryResponse'</a>, <a>queryResponse_count</a> - The
--   number of items in the response.
--   
--   If you used a <tt>QueryFilter</tt> in the request, then <tt>Count</tt>
--   is the number of items returned after the filter was applied, and
--   <tt>ScannedCount</tt> is the number of matching items before the
--   filter was applied.
--   
--   If you did not use a filter in the request, then <tt>Count</tt> and
--   <tt>ScannedCount</tt> are the same.
--   
--   <a>$sel:scannedCount:QueryResponse'</a>,
--   <a>queryResponse_scannedCount</a> - The number of items evaluated,
--   before any <tt>QueryFilter</tt> is applied. A high
--   <tt>ScannedCount</tt> value with few, or no, <tt>Count</tt> results
--   indicates an inefficient <tt>Query</tt> operation. For more
--   information, see <a>Count and ScannedCount</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   If you did not use a filter in the request, then <tt>ScannedCount</tt>
--   is the same as <tt>Count</tt>.
--   
--   <a>$sel:items:QueryResponse'</a>, <a>queryResponse_items</a> - An
--   array of item attributes that match the query criteria. Each element
--   in this array consists of an attribute name and the value for that
--   attribute.
--   
--   <a>$sel:consumedCapacity:QueryResponse'</a>,
--   <a>queryResponse_consumedCapacity</a> - The capacity units consumed by
--   the <tt>Query</tt> operation. The data returned includes the total
--   provisioned throughput consumed, along with statistics for the table
--   and any indexes involved in the operation. <tt>ConsumedCapacity</tt>
--   is only returned if the <tt>ReturnConsumedCapacity</tt> parameter was
--   specified. For more information, see <a>Provisioned Throughput</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:httpStatus:QueryResponse'</a>, <a>queryResponse_httpStatus</a>
--   - The response's http status code.
newQueryResponse :: Int -> QueryResponse

-- | The primary key of the item where the operation stopped, inclusive of
--   the previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedKey</tt> is empty, then the "last page" of results
--   has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedKey</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedKey</tt> is empty.
queryResponse_lastEvaluatedKey :: Lens' QueryResponse (Maybe (HashMap Text AttributeValue))

-- | The number of items in the response.
--   
--   If you used a <tt>QueryFilter</tt> in the request, then <tt>Count</tt>
--   is the number of items returned after the filter was applied, and
--   <tt>ScannedCount</tt> is the number of matching items before the
--   filter was applied.
--   
--   If you did not use a filter in the request, then <tt>Count</tt> and
--   <tt>ScannedCount</tt> are the same.
queryResponse_count :: Lens' QueryResponse (Maybe Int)

-- | The number of items evaluated, before any <tt>QueryFilter</tt> is
--   applied. A high <tt>ScannedCount</tt> value with few, or no,
--   <tt>Count</tt> results indicates an inefficient <tt>Query</tt>
--   operation. For more information, see <a>Count and ScannedCount</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   If you did not use a filter in the request, then <tt>ScannedCount</tt>
--   is the same as <tt>Count</tt>.
queryResponse_scannedCount :: Lens' QueryResponse (Maybe Int)

-- | An array of item attributes that match the query criteria. Each
--   element in this array consists of an attribute name and the value for
--   that attribute.
queryResponse_items :: Lens' QueryResponse (Maybe [HashMap Text AttributeValue])

-- | The capacity units consumed by the <tt>Query</tt> operation. The data
--   returned includes the total provisioned throughput consumed, along
--   with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Throughput</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
queryResponse_consumedCapacity :: Lens' QueryResponse (Maybe ConsumedCapacity)

-- | The response's http status code.
queryResponse_httpStatus :: Lens' QueryResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.Query.Query
instance GHC.Show.Show Amazonka.DynamoDB.Query.Query
instance GHC.Read.Read Amazonka.DynamoDB.Query.Query
instance GHC.Classes.Eq Amazonka.DynamoDB.Query.Query
instance GHC.Generics.Generic Amazonka.DynamoDB.Query.QueryResponse
instance GHC.Show.Show Amazonka.DynamoDB.Query.QueryResponse
instance GHC.Read.Read Amazonka.DynamoDB.Query.QueryResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.Query.QueryResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.Query.Query
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Query.QueryResponse
instance Amazonka.Pager.AWSPager Amazonka.DynamoDB.Query.Query
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.Query.Query
instance Control.DeepSeq.NFData Amazonka.DynamoDB.Query.Query
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.Query.Query
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.Query.Query
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.Query.Query
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.Query.Query


-- | Creates a new item, or replaces an old item with a new item. If an
--   item that has the same primary key as the new item already exists in
--   the specified table, the new item completely replaces the existing
--   item. You can perform a conditional put operation (add a new item if
--   one with the specified primary key doesn't exist), or replace an
--   existing item if it has certain attribute values. You can return the
--   item's attribute values in the same operation, using the
--   <tt>ReturnValues</tt> parameter.
--   
--   This topic provides general information about the <tt>PutItem</tt>
--   API.
--   
--   For information on how to call the <tt>PutItem</tt> API using the AWS
--   SDK in specific languages, see the following:
--   
--   <ul>
--   <li><a>PutItem in the AWS Command Line Interface</a></li>
--   <li><a>PutItem in the AWS SDK for .NET</a></li>
--   <li><a>PutItem in the AWS SDK for C++</a></li>
--   <li><a>PutItem in the AWS SDK for Go</a></li>
--   <li><a>PutItem in the AWS SDK for Java</a></li>
--   <li><a>PutItem in the AWS SDK for JavaScript</a></li>
--   <li><a>PutItem in the AWS SDK for PHP V3</a></li>
--   <li><a>PutItem in the AWS SDK for Python</a></li>
--   <li><a>PutItem in the AWS SDK for Ruby V2</a></li>
--   </ul>
--   
--   When you add an item, the primary key attributes are the only required
--   attributes. Attribute values cannot be null.
--   
--   Empty String and Binary attribute values are allowed. Attribute values
--   of type String and Binary must have a length greater than zero if the
--   attribute is used as a key attribute for a table or index. Set type
--   attributes cannot be empty.
--   
--   Invalid Requests with empty values will be rejected with a
--   <tt>ValidationException</tt> exception.
--   
--   To prevent a new item from replacing an existing item, use a
--   conditional expression that contains the <tt>attribute_not_exists</tt>
--   function with the name of the attribute being used as the partition
--   key for the table. Since every record must contain that attribute, the
--   <tt>attribute_not_exists</tt> function will only succeed if no
--   matching item exists.
--   
--   For more information about <tt>PutItem</tt>, see <a>Working with
--   Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.
module Amazonka.DynamoDB.PutItem

-- | Represents the input of a <tt>PutItem</tt> operation.
--   
--   <i>See:</i> <a>newPutItem</a> smart constructor.
data PutItem
PutItem' :: Maybe (HashMap Text Text) -> Maybe ReturnValue -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnConsumedCapacity -> Maybe ReturnItemCollectionMetrics -> Maybe Text -> Maybe ConditionalOperator -> Maybe (HashMap Text ExpectedAttributeValue) -> Text -> HashMap Text AttributeValue -> PutItem

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:expressionAttributeNames:PutItem'] :: PutItem -> Maybe (HashMap Text Text)

-- | Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appeared before they were updated with the <tt>PutItem</tt>
--   request. For <tt>PutItem</tt>, the valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - If <tt>PutItem</tt> overwrote an attribute
--   name-value pair, then the content of the old item is returned.</li>
--   </ul>
--   
--   The <tt>ReturnValues</tt> parameter is used by several DynamoDB
--   operations; however, <tt>PutItem</tt> does not recognize any values
--   other than <tt>NONE</tt> or <tt>ALL_OLD</tt>.
[$sel:returnValues:PutItem'] :: PutItem -> Maybe ReturnValue

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:expressionAttributeValues:PutItem'] :: PutItem -> Maybe (HashMap Text AttributeValue)
[$sel:returnConsumedCapacity:PutItem'] :: PutItem -> Maybe ReturnConsumedCapacity

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item
--   collections, if any, that were modified during the operation are
--   returned in the response. If set to <tt>NONE</tt> (the default), no
--   statistics are returned.
[$sel:returnItemCollectionMetrics:PutItem'] :: PutItem -> Maybe ReturnItemCollectionMetrics

-- | A condition that must be satisfied in order for a conditional
--   <tt>PutItem</tt> operation to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information on condition expressions, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:conditionExpression:PutItem'] :: PutItem -> Maybe Text

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:conditionalOperator:PutItem'] :: PutItem -> Maybe ConditionalOperator

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>Expected</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:expected:PutItem'] :: PutItem -> Maybe (HashMap Text ExpectedAttributeValue)

-- | The name of the table to contain the item.
[$sel:tableName:PutItem'] :: PutItem -> Text

-- | A map of attribute name/value pairs, one for each attribute. Only the
--   primary key attributes are required; you can optionally provide other
--   attribute name-value pairs for the item.
--   
--   You must provide all of the attributes for the primary key. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   both values for both the partition key and the sort key.
--   
--   If you specify any attributes that are part of an index key, then the
--   data types for those attributes must match those of the schema in the
--   table's attribute definition.
--   
--   Empty String and Binary attribute values are allowed. Attribute values
--   of type String and Binary must have a length greater than zero if the
--   attribute is used as a key attribute for a table or index.
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   Each element in the <tt>Item</tt> map is an <tt>AttributeValue</tt>
--   object.
[$sel:item:PutItem'] :: PutItem -> HashMap Text AttributeValue

-- | Create a value of <a>PutItem</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:PutItem'</a>,
--   <a>putItem_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression. The following are some
--   use cases for using <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnValues:PutItem'</a>, <a>putItem_returnValues</a> - Use
--   <tt>ReturnValues</tt> if you want to get the item attributes as they
--   appeared before they were updated with the <tt>PutItem</tt> request.
--   For <tt>PutItem</tt>, the valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - If <tt>PutItem</tt> overwrote an attribute
--   name-value pair, then the content of the old item is returned.</li>
--   </ul>
--   
--   The <tt>ReturnValues</tt> parameter is used by several DynamoDB
--   operations; however, <tt>PutItem</tt> does not recognize any values
--   other than <tt>NONE</tt> or <tt>ALL_OLD</tt>.
--   
--   <a>$sel:expressionAttributeValues:PutItem'</a>,
--   <a>putItem_expressionAttributeValues</a> - One or more values that can
--   be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnConsumedCapacity:PutItem'</a>,
--   <a>putItem_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:returnItemCollectionMetrics:PutItem'</a>,
--   <a>putItem_returnItemCollectionMetrics</a> - Determines whether item
--   collection metrics are returned. If set to <tt>SIZE</tt>, the response
--   includes statistics about item collections, if any, that were modified
--   during the operation are returned in the response. If set to
--   <tt>NONE</tt> (the default), no statistics are returned.
--   
--   <a>$sel:conditionExpression:PutItem'</a>,
--   <a>putItem_conditionExpression</a> - A condition that must be
--   satisfied in order for a conditional <tt>PutItem</tt> operation to
--   succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information on condition expressions, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:conditionalOperator:PutItem'</a>,
--   <a>putItem_conditionalOperator</a> - This is a legacy parameter. Use
--   <tt>ConditionExpression</tt> instead. For more information, see
--   <a>ConditionalOperator</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:expected:PutItem'</a>, <a>putItem_expected</a> - This is a
--   legacy parameter. Use <tt>ConditionExpression</tt> instead. For more
--   information, see <a>Expected</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:tableName:PutItem'</a>, <a>putItem_tableName</a> - The name of
--   the table to contain the item.
--   
--   <a>$sel:item:PutItem'</a>, <a>putItem_item</a> - A map of attribute
--   name/value pairs, one for each attribute. Only the primary key
--   attributes are required; you can optionally provide other attribute
--   name-value pairs for the item.
--   
--   You must provide all of the attributes for the primary key. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   both values for both the partition key and the sort key.
--   
--   If you specify any attributes that are part of an index key, then the
--   data types for those attributes must match those of the schema in the
--   table's attribute definition.
--   
--   Empty String and Binary attribute values are allowed. Attribute values
--   of type String and Binary must have a length greater than zero if the
--   attribute is used as a key attribute for a table or index.
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   Each element in the <tt>Item</tt> map is an <tt>AttributeValue</tt>
--   object.
newPutItem :: Text -> PutItem

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
putItem_expressionAttributeNames :: Lens' PutItem (Maybe (HashMap Text Text))

-- | Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appeared before they were updated with the <tt>PutItem</tt>
--   request. For <tt>PutItem</tt>, the valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - If <tt>PutItem</tt> overwrote an attribute
--   name-value pair, then the content of the old item is returned.</li>
--   </ul>
--   
--   The <tt>ReturnValues</tt> parameter is used by several DynamoDB
--   operations; however, <tt>PutItem</tt> does not recognize any values
--   other than <tt>NONE</tt> or <tt>ALL_OLD</tt>.
putItem_returnValues :: Lens' PutItem (Maybe ReturnValue)

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
putItem_expressionAttributeValues :: Lens' PutItem (Maybe (HashMap Text AttributeValue))

-- | Undocumented member.
putItem_returnConsumedCapacity :: Lens' PutItem (Maybe ReturnConsumedCapacity)

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item
--   collections, if any, that were modified during the operation are
--   returned in the response. If set to <tt>NONE</tt> (the default), no
--   statistics are returned.
putItem_returnItemCollectionMetrics :: Lens' PutItem (Maybe ReturnItemCollectionMetrics)

-- | A condition that must be satisfied in order for a conditional
--   <tt>PutItem</tt> operation to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information on condition expressions, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
putItem_conditionExpression :: Lens' PutItem (Maybe Text)

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
putItem_conditionalOperator :: Lens' PutItem (Maybe ConditionalOperator)

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>Expected</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
putItem_expected :: Lens' PutItem (Maybe (HashMap Text ExpectedAttributeValue))

-- | The name of the table to contain the item.
putItem_tableName :: Lens' PutItem Text

-- | A map of attribute name/value pairs, one for each attribute. Only the
--   primary key attributes are required; you can optionally provide other
--   attribute name-value pairs for the item.
--   
--   You must provide all of the attributes for the primary key. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   both values for both the partition key and the sort key.
--   
--   If you specify any attributes that are part of an index key, then the
--   data types for those attributes must match those of the schema in the
--   table's attribute definition.
--   
--   Empty String and Binary attribute values are allowed. Attribute values
--   of type String and Binary must have a length greater than zero if the
--   attribute is used as a key attribute for a table or index.
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   Each element in the <tt>Item</tt> map is an <tt>AttributeValue</tt>
--   object.
putItem_item :: Lens' PutItem (HashMap Text AttributeValue)

-- | Represents the output of a <tt>PutItem</tt> operation.
--   
--   <i>See:</i> <a>newPutItemResponse</a> smart constructor.
data PutItemResponse
PutItemResponse' :: Maybe ItemCollectionMetrics -> Maybe ConsumedCapacity -> Maybe (HashMap Text AttributeValue) -> Int -> PutItemResponse

-- | Information about item collections, if any, that were affected by the
--   <tt>PutItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
[$sel:itemCollectionMetrics:PutItemResponse'] :: PutItemResponse -> Maybe ItemCollectionMetrics

-- | The capacity units consumed by the <tt>PutItem</tt> operation. The
--   data returned includes the total provisioned throughput consumed,
--   along with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Read/Write Capacity Mode</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:consumedCapacity:PutItemResponse'] :: PutItemResponse -> Maybe ConsumedCapacity

-- | The attribute values as they appeared before the <tt>PutItem</tt>
--   operation, but only if <tt>ReturnValues</tt> is specified as
--   <tt>ALL_OLD</tt> in the request. Each element consists of an attribute
--   name and an attribute value.
[$sel:attributes:PutItemResponse'] :: PutItemResponse -> Maybe (HashMap Text AttributeValue)

-- | The response's http status code.
[$sel:httpStatus:PutItemResponse'] :: PutItemResponse -> Int

-- | Create a value of <a>PutItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionMetrics:PutItemResponse'</a>,
--   <a>putItemResponse_itemCollectionMetrics</a> - Information about item
--   collections, if any, that were affected by the <tt>PutItem</tt>
--   operation. <tt>ItemCollectionMetrics</tt> is only returned if the
--   <tt>ReturnItemCollectionMetrics</tt> parameter was specified. If the
--   table does not have any local secondary indexes, this information is
--   not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
--   
--   <a>$sel:consumedCapacity:PutItemResponse'</a>,
--   <a>putItemResponse_consumedCapacity</a> - The capacity units consumed
--   by the <tt>PutItem</tt> operation. The data returned includes the
--   total provisioned throughput consumed, along with statistics for the
--   table and any indexes involved in the operation.
--   <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Read/Write Capacity Mode</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributes:PutItemResponse'</a>,
--   <a>putItemResponse_attributes</a> - The attribute values as they
--   appeared before the <tt>PutItem</tt> operation, but only if
--   <tt>ReturnValues</tt> is specified as <tt>ALL_OLD</tt> in the request.
--   Each element consists of an attribute name and an attribute value.
--   
--   <a>$sel:httpStatus:PutItemResponse'</a>,
--   <a>putItemResponse_httpStatus</a> - The response's http status code.
newPutItemResponse :: Int -> PutItemResponse

-- | Information about item collections, if any, that were affected by the
--   <tt>PutItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
putItemResponse_itemCollectionMetrics :: Lens' PutItemResponse (Maybe ItemCollectionMetrics)

-- | The capacity units consumed by the <tt>PutItem</tt> operation. The
--   data returned includes the total provisioned throughput consumed,
--   along with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Read/Write Capacity Mode</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
putItemResponse_consumedCapacity :: Lens' PutItemResponse (Maybe ConsumedCapacity)

-- | The attribute values as they appeared before the <tt>PutItem</tt>
--   operation, but only if <tt>ReturnValues</tt> is specified as
--   <tt>ALL_OLD</tt> in the request. Each element consists of an attribute
--   name and an attribute value.
putItemResponse_attributes :: Lens' PutItemResponse (Maybe (HashMap Text AttributeValue))

-- | The response's http status code.
putItemResponse_httpStatus :: Lens' PutItemResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.PutItem.PutItem
instance GHC.Show.Show Amazonka.DynamoDB.PutItem.PutItem
instance GHC.Read.Read Amazonka.DynamoDB.PutItem.PutItem
instance GHC.Classes.Eq Amazonka.DynamoDB.PutItem.PutItem
instance GHC.Generics.Generic Amazonka.DynamoDB.PutItem.PutItemResponse
instance GHC.Show.Show Amazonka.DynamoDB.PutItem.PutItemResponse
instance GHC.Read.Read Amazonka.DynamoDB.PutItem.PutItemResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.PutItem.PutItemResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.PutItem.PutItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.PutItem.PutItemResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.PutItem.PutItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.PutItem.PutItem
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.PutItem.PutItem
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.PutItem.PutItem
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.PutItem.PutItem
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.PutItem.PutItem


-- | List all tags on an Amazon DynamoDB resource. You can call
--   ListTagsOfResource up to 10 times per second, per account.
--   
--   For an overview on tagging DynamoDB resources, see <a>Tagging for
--   DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   This operation returns paginated results.
module Amazonka.DynamoDB.ListTagsOfResource

-- | <i>See:</i> <a>newListTagsOfResource</a> smart constructor.
data ListTagsOfResource
ListTagsOfResource' :: Maybe Text -> Text -> ListTagsOfResource

-- | An optional string that, if supplied, must be copied from the output
--   of a previous call to ListTagOfResource. When provided in this manner,
--   this API fetches the next page of results.
[$sel:nextToken:ListTagsOfResource'] :: ListTagsOfResource -> Maybe Text

-- | The Amazon DynamoDB resource with tags to be listed. This value is an
--   Amazon Resource Name (ARN).
[$sel:resourceArn:ListTagsOfResource'] :: ListTagsOfResource -> Text

-- | Create a value of <a>ListTagsOfResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsOfResource'</a>,
--   <a>listTagsOfResource_nextToken</a> - An optional string that, if
--   supplied, must be copied from the output of a previous call to
--   ListTagOfResource. When provided in this manner, this API fetches the
--   next page of results.
--   
--   <a>$sel:resourceArn:ListTagsOfResource'</a>,
--   <a>listTagsOfResource_resourceArn</a> - The Amazon DynamoDB resource
--   with tags to be listed. This value is an Amazon Resource Name (ARN).
newListTagsOfResource :: Text -> ListTagsOfResource

-- | An optional string that, if supplied, must be copied from the output
--   of a previous call to ListTagOfResource. When provided in this manner,
--   this API fetches the next page of results.
listTagsOfResource_nextToken :: Lens' ListTagsOfResource (Maybe Text)

-- | The Amazon DynamoDB resource with tags to be listed. This value is an
--   Amazon Resource Name (ARN).
listTagsOfResource_resourceArn :: Lens' ListTagsOfResource Text

-- | <i>See:</i> <a>newListTagsOfResourceResponse</a> smart constructor.
data ListTagsOfResourceResponse
ListTagsOfResourceResponse' :: Maybe Text -> Maybe [Tag] -> Int -> ListTagsOfResourceResponse

-- | If this value is returned, there are additional results to be
--   displayed. To retrieve them, call ListTagsOfResource again, with
--   NextToken set to this value.
[$sel:nextToken:ListTagsOfResourceResponse'] :: ListTagsOfResourceResponse -> Maybe Text

-- | The tags currently associated with the Amazon DynamoDB resource.
[$sel:tags:ListTagsOfResourceResponse'] :: ListTagsOfResourceResponse -> Maybe [Tag]

-- | The response's http status code.
[$sel:httpStatus:ListTagsOfResourceResponse'] :: ListTagsOfResourceResponse -> Int

-- | Create a value of <a>ListTagsOfResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsOfResource'</a>,
--   <a>listTagsOfResourceResponse_nextToken</a> - If this value is
--   returned, there are additional results to be displayed. To retrieve
--   them, call ListTagsOfResource again, with NextToken set to this value.
--   
--   <a>$sel:tags:ListTagsOfResourceResponse'</a>,
--   <a>listTagsOfResourceResponse_tags</a> - The tags currently associated
--   with the Amazon DynamoDB resource.
--   
--   <a>$sel:httpStatus:ListTagsOfResourceResponse'</a>,
--   <a>listTagsOfResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsOfResourceResponse :: Int -> ListTagsOfResourceResponse

-- | If this value is returned, there are additional results to be
--   displayed. To retrieve them, call ListTagsOfResource again, with
--   NextToken set to this value.
listTagsOfResourceResponse_nextToken :: Lens' ListTagsOfResourceResponse (Maybe Text)

-- | The tags currently associated with the Amazon DynamoDB resource.
listTagsOfResourceResponse_tags :: Lens' ListTagsOfResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsOfResourceResponse_httpStatus :: Lens' ListTagsOfResourceResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResource
instance GHC.Show.Show Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResource
instance GHC.Read.Read Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResource
instance GHC.Classes.Eq Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResource
instance GHC.Generics.Generic Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResourceResponse
instance GHC.Show.Show Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResourceResponse
instance GHC.Read.Read Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResourceResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResource
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResourceResponse
instance Amazonka.Pager.AWSPager Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResource
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResource
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResource
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResource
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.ListTagsOfResource.ListTagsOfResource


-- | Returns an array of table names associated with the current account
--   and endpoint. The output from <tt>ListTables</tt> is paginated, with
--   each page returning a maximum of 100 table names.
--   
--   This operation returns paginated results.
module Amazonka.DynamoDB.ListTables

-- | Represents the input of a <tt>ListTables</tt> operation.
--   
--   <i>See:</i> <a>newListTables</a> smart constructor.
data ListTables
ListTables' :: Maybe Text -> Maybe Natural -> ListTables

-- | The first table name that this operation will evaluate. Use the value
--   that was returned for <tt>LastEvaluatedTableName</tt> in a previous
--   operation, so that you can obtain the next page of results.
[$sel:exclusiveStartTableName:ListTables'] :: ListTables -> Maybe Text

-- | A maximum number of table names to return. If this parameter is not
--   specified, the limit is 100.
[$sel:limit:ListTables'] :: ListTables -> Maybe Natural

-- | Create a value of <a>ListTables</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exclusiveStartTableName:ListTables'</a>,
--   <a>listTables_exclusiveStartTableName</a> - The first table name that
--   this operation will evaluate. Use the value that was returned for
--   <tt>LastEvaluatedTableName</tt> in a previous operation, so that you
--   can obtain the next page of results.
--   
--   <a>$sel:limit:ListTables'</a>, <a>listTables_limit</a> - A maximum
--   number of table names to return. If this parameter is not specified,
--   the limit is 100.
newListTables :: ListTables

-- | The first table name that this operation will evaluate. Use the value
--   that was returned for <tt>LastEvaluatedTableName</tt> in a previous
--   operation, so that you can obtain the next page of results.
listTables_exclusiveStartTableName :: Lens' ListTables (Maybe Text)

-- | A maximum number of table names to return. If this parameter is not
--   specified, the limit is 100.
listTables_limit :: Lens' ListTables (Maybe Natural)

-- | Represents the output of a <tt>ListTables</tt> operation.
--   
--   <i>See:</i> <a>newListTablesResponse</a> smart constructor.
data ListTablesResponse
ListTablesResponse' :: Maybe Text -> Maybe [Text] -> Int -> ListTablesResponse

-- | The name of the last table in the current page of results. Use this
--   value as the <tt>ExclusiveStartTableName</tt> in a new request to
--   obtain the next page of results, until all the table names are
--   returned.
--   
--   If you do not receive a <tt>LastEvaluatedTableName</tt> value in the
--   response, this means that there are no more table names to be
--   retrieved.
[$sel:lastEvaluatedTableName:ListTablesResponse'] :: ListTablesResponse -> Maybe Text

-- | The names of the tables associated with the current account at the
--   current endpoint. The maximum size of this array is 100.
--   
--   If <tt>LastEvaluatedTableName</tt> also appears in the output, you can
--   use this value as the <tt>ExclusiveStartTableName</tt> parameter in a
--   subsequent <tt>ListTables</tt> request and obtain the next page of
--   results.
[$sel:tableNames:ListTablesResponse'] :: ListTablesResponse -> Maybe [Text]

-- | The response's http status code.
[$sel:httpStatus:ListTablesResponse'] :: ListTablesResponse -> Int

-- | Create a value of <a>ListTablesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedTableName:ListTablesResponse'</a>,
--   <a>listTablesResponse_lastEvaluatedTableName</a> - The name of the
--   last table in the current page of results. Use this value as the
--   <tt>ExclusiveStartTableName</tt> in a new request to obtain the next
--   page of results, until all the table names are returned.
--   
--   If you do not receive a <tt>LastEvaluatedTableName</tt> value in the
--   response, this means that there are no more table names to be
--   retrieved.
--   
--   <a>$sel:tableNames:ListTablesResponse'</a>,
--   <a>listTablesResponse_tableNames</a> - The names of the tables
--   associated with the current account at the current endpoint. The
--   maximum size of this array is 100.
--   
--   If <tt>LastEvaluatedTableName</tt> also appears in the output, you can
--   use this value as the <tt>ExclusiveStartTableName</tt> parameter in a
--   subsequent <tt>ListTables</tt> request and obtain the next page of
--   results.
--   
--   <a>$sel:httpStatus:ListTablesResponse'</a>,
--   <a>listTablesResponse_httpStatus</a> - The response's http status
--   code.
newListTablesResponse :: Int -> ListTablesResponse

-- | The name of the last table in the current page of results. Use this
--   value as the <tt>ExclusiveStartTableName</tt> in a new request to
--   obtain the next page of results, until all the table names are
--   returned.
--   
--   If you do not receive a <tt>LastEvaluatedTableName</tt> value in the
--   response, this means that there are no more table names to be
--   retrieved.
listTablesResponse_lastEvaluatedTableName :: Lens' ListTablesResponse (Maybe Text)

-- | The names of the tables associated with the current account at the
--   current endpoint. The maximum size of this array is 100.
--   
--   If <tt>LastEvaluatedTableName</tt> also appears in the output, you can
--   use this value as the <tt>ExclusiveStartTableName</tt> parameter in a
--   subsequent <tt>ListTables</tt> request and obtain the next page of
--   results.
listTablesResponse_tableNames :: Lens' ListTablesResponse (Maybe [Text])

-- | The response's http status code.
listTablesResponse_httpStatus :: Lens' ListTablesResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.ListTables.ListTables
instance GHC.Show.Show Amazonka.DynamoDB.ListTables.ListTables
instance GHC.Read.Read Amazonka.DynamoDB.ListTables.ListTables
instance GHC.Classes.Eq Amazonka.DynamoDB.ListTables.ListTables
instance GHC.Generics.Generic Amazonka.DynamoDB.ListTables.ListTablesResponse
instance GHC.Show.Show Amazonka.DynamoDB.ListTables.ListTablesResponse
instance GHC.Read.Read Amazonka.DynamoDB.ListTables.ListTablesResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.ListTables.ListTablesResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.ListTables.ListTables
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ListTables.ListTablesResponse
instance Amazonka.Pager.AWSPager Amazonka.DynamoDB.ListTables.ListTables
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.ListTables.ListTables
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ListTables.ListTables
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.ListTables.ListTables
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.ListTables.ListTables
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.ListTables.ListTables
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.ListTables.ListTables


-- | Lists all global tables that have a replica in the specified Region.
--   
--   This operation only applies to <a>Version 2017.11.29</a> of global
--   tables.
module Amazonka.DynamoDB.ListGlobalTables

-- | <i>See:</i> <a>newListGlobalTables</a> smart constructor.
data ListGlobalTables
ListGlobalTables' :: Maybe Text -> Maybe Text -> Maybe Natural -> ListGlobalTables

-- | Lists the global tables in a specific Region.
[$sel:regionName:ListGlobalTables'] :: ListGlobalTables -> Maybe Text

-- | The first global table name that this operation will evaluate.
[$sel:exclusiveStartGlobalTableName:ListGlobalTables'] :: ListGlobalTables -> Maybe Text

-- | The maximum number of table names to return, if the parameter is not
--   specified DynamoDB defaults to 100.
--   
--   If the number of global tables DynamoDB finds reaches this limit, it
--   stops the operation and returns the table names collected up to that
--   point, with a table name in the <tt>LastEvaluatedGlobalTableName</tt>
--   to apply in a subsequent operation to the
--   <tt>ExclusiveStartGlobalTableName</tt> parameter.
[$sel:limit:ListGlobalTables'] :: ListGlobalTables -> Maybe Natural

-- | Create a value of <a>ListGlobalTables</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:ListGlobalTables'</a>,
--   <a>listGlobalTables_regionName</a> - Lists the global tables in a
--   specific Region.
--   
--   <a>$sel:exclusiveStartGlobalTableName:ListGlobalTables'</a>,
--   <a>listGlobalTables_exclusiveStartGlobalTableName</a> - The first
--   global table name that this operation will evaluate.
--   
--   <a>$sel:limit:ListGlobalTables'</a>, <a>listGlobalTables_limit</a> -
--   The maximum number of table names to return, if the parameter is not
--   specified DynamoDB defaults to 100.
--   
--   If the number of global tables DynamoDB finds reaches this limit, it
--   stops the operation and returns the table names collected up to that
--   point, with a table name in the <tt>LastEvaluatedGlobalTableName</tt>
--   to apply in a subsequent operation to the
--   <tt>ExclusiveStartGlobalTableName</tt> parameter.
newListGlobalTables :: ListGlobalTables

-- | Lists the global tables in a specific Region.
listGlobalTables_regionName :: Lens' ListGlobalTables (Maybe Text)

-- | The first global table name that this operation will evaluate.
listGlobalTables_exclusiveStartGlobalTableName :: Lens' ListGlobalTables (Maybe Text)

-- | The maximum number of table names to return, if the parameter is not
--   specified DynamoDB defaults to 100.
--   
--   If the number of global tables DynamoDB finds reaches this limit, it
--   stops the operation and returns the table names collected up to that
--   point, with a table name in the <tt>LastEvaluatedGlobalTableName</tt>
--   to apply in a subsequent operation to the
--   <tt>ExclusiveStartGlobalTableName</tt> parameter.
listGlobalTables_limit :: Lens' ListGlobalTables (Maybe Natural)

-- | <i>See:</i> <a>newListGlobalTablesResponse</a> smart constructor.
data ListGlobalTablesResponse
ListGlobalTablesResponse' :: Maybe Text -> Maybe [GlobalTable] -> Int -> ListGlobalTablesResponse

-- | Last evaluated global table name.
[$sel:lastEvaluatedGlobalTableName:ListGlobalTablesResponse'] :: ListGlobalTablesResponse -> Maybe Text

-- | List of global table names.
[$sel:globalTables:ListGlobalTablesResponse'] :: ListGlobalTablesResponse -> Maybe [GlobalTable]

-- | The response's http status code.
[$sel:httpStatus:ListGlobalTablesResponse'] :: ListGlobalTablesResponse -> Int

-- | Create a value of <a>ListGlobalTablesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedGlobalTableName:ListGlobalTablesResponse'</a>,
--   <a>listGlobalTablesResponse_lastEvaluatedGlobalTableName</a> - Last
--   evaluated global table name.
--   
--   <a>$sel:globalTables:ListGlobalTablesResponse'</a>,
--   <a>listGlobalTablesResponse_globalTables</a> - List of global table
--   names.
--   
--   <a>$sel:httpStatus:ListGlobalTablesResponse'</a>,
--   <a>listGlobalTablesResponse_httpStatus</a> - The response's http
--   status code.
newListGlobalTablesResponse :: Int -> ListGlobalTablesResponse

-- | Last evaluated global table name.
listGlobalTablesResponse_lastEvaluatedGlobalTableName :: Lens' ListGlobalTablesResponse (Maybe Text)

-- | List of global table names.
listGlobalTablesResponse_globalTables :: Lens' ListGlobalTablesResponse (Maybe [GlobalTable])

-- | The response's http status code.
listGlobalTablesResponse_httpStatus :: Lens' ListGlobalTablesResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.ListGlobalTables.ListGlobalTables
instance GHC.Show.Show Amazonka.DynamoDB.ListGlobalTables.ListGlobalTables
instance GHC.Read.Read Amazonka.DynamoDB.ListGlobalTables.ListGlobalTables
instance GHC.Classes.Eq Amazonka.DynamoDB.ListGlobalTables.ListGlobalTables
instance GHC.Generics.Generic Amazonka.DynamoDB.ListGlobalTables.ListGlobalTablesResponse
instance GHC.Show.Show Amazonka.DynamoDB.ListGlobalTables.ListGlobalTablesResponse
instance GHC.Read.Read Amazonka.DynamoDB.ListGlobalTables.ListGlobalTablesResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.ListGlobalTables.ListGlobalTablesResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.ListGlobalTables.ListGlobalTables
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ListGlobalTables.ListGlobalTablesResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.ListGlobalTables.ListGlobalTables
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ListGlobalTables.ListGlobalTables
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.ListGlobalTables.ListGlobalTables
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.ListGlobalTables.ListGlobalTables
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.ListGlobalTables.ListGlobalTables
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.ListGlobalTables.ListGlobalTables


-- | Lists completed exports within the past 90 days.
module Amazonka.DynamoDB.ListExports

-- | <i>See:</i> <a>newListExports</a> smart constructor.
data ListExports
ListExports' :: Maybe Text -> Maybe Text -> Maybe Natural -> ListExports

-- | The Amazon Resource Name (ARN) associated with the exported table.
[$sel:tableArn:ListExports'] :: ListExports -> Maybe Text

-- | An optional string that, if supplied, must be copied from the output
--   of a previous call to <tt>ListExports</tt>. When provided in this
--   manner, the API fetches the next page of results.
[$sel:nextToken:ListExports'] :: ListExports -> Maybe Text

-- | Maximum number of results to return per page.
[$sel:maxResults:ListExports'] :: ListExports -> Maybe Natural

-- | Create a value of <a>ListExports</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableArn:ListExports'</a>, <a>listExports_tableArn</a> - The
--   Amazon Resource Name (ARN) associated with the exported table.
--   
--   <a>$sel:nextToken:ListExports'</a>, <a>listExports_nextToken</a> - An
--   optional string that, if supplied, must be copied from the output of a
--   previous call to <tt>ListExports</tt>. When provided in this manner,
--   the API fetches the next page of results.
--   
--   <a>$sel:maxResults:ListExports'</a>, <a>listExports_maxResults</a> -
--   Maximum number of results to return per page.
newListExports :: ListExports

-- | The Amazon Resource Name (ARN) associated with the exported table.
listExports_tableArn :: Lens' ListExports (Maybe Text)

-- | An optional string that, if supplied, must be copied from the output
--   of a previous call to <tt>ListExports</tt>. When provided in this
--   manner, the API fetches the next page of results.
listExports_nextToken :: Lens' ListExports (Maybe Text)

-- | Maximum number of results to return per page.
listExports_maxResults :: Lens' ListExports (Maybe Natural)

-- | <i>See:</i> <a>newListExportsResponse</a> smart constructor.
data ListExportsResponse
ListExportsResponse' :: Maybe [ExportSummary] -> Maybe Text -> Int -> ListExportsResponse

-- | A list of <tt>ExportSummary</tt> objects.
[$sel:exportSummaries:ListExportsResponse'] :: ListExportsResponse -> Maybe [ExportSummary]

-- | If this value is returned, there are additional results to be
--   displayed. To retrieve them, call <tt>ListExports</tt> again, with
--   <tt>NextToken</tt> set to this value.
[$sel:nextToken:ListExportsResponse'] :: ListExportsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListExportsResponse'] :: ListExportsResponse -> Int

-- | Create a value of <a>ListExportsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exportSummaries:ListExportsResponse'</a>,
--   <a>listExportsResponse_exportSummaries</a> - A list of
--   <tt>ExportSummary</tt> objects.
--   
--   <a>$sel:nextToken:ListExports'</a>,
--   <a>listExportsResponse_nextToken</a> - If this value is returned,
--   there are additional results to be displayed. To retrieve them, call
--   <tt>ListExports</tt> again, with <tt>NextToken</tt> set to this value.
--   
--   <a>$sel:httpStatus:ListExportsResponse'</a>,
--   <a>listExportsResponse_httpStatus</a> - The response's http status
--   code.
newListExportsResponse :: Int -> ListExportsResponse

-- | A list of <tt>ExportSummary</tt> objects.
listExportsResponse_exportSummaries :: Lens' ListExportsResponse (Maybe [ExportSummary])

-- | If this value is returned, there are additional results to be
--   displayed. To retrieve them, call <tt>ListExports</tt> again, with
--   <tt>NextToken</tt> set to this value.
listExportsResponse_nextToken :: Lens' ListExportsResponse (Maybe Text)

-- | The response's http status code.
listExportsResponse_httpStatus :: Lens' ListExportsResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.ListExports.ListExports
instance GHC.Show.Show Amazonka.DynamoDB.ListExports.ListExports
instance GHC.Read.Read Amazonka.DynamoDB.ListExports.ListExports
instance GHC.Classes.Eq Amazonka.DynamoDB.ListExports.ListExports
instance GHC.Generics.Generic Amazonka.DynamoDB.ListExports.ListExportsResponse
instance GHC.Show.Show Amazonka.DynamoDB.ListExports.ListExportsResponse
instance GHC.Read.Read Amazonka.DynamoDB.ListExports.ListExportsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.ListExports.ListExportsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.ListExports.ListExports
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ListExports.ListExportsResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.ListExports.ListExports
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ListExports.ListExports
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.ListExports.ListExports
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.ListExports.ListExports
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.ListExports.ListExports
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.ListExports.ListExports


-- | Returns a list of ContributorInsightsSummary for a table and all its
--   global secondary indexes.
module Amazonka.DynamoDB.ListContributorInsights

-- | <i>See:</i> <a>newListContributorInsights</a> smart constructor.
data ListContributorInsights
ListContributorInsights' :: Maybe Text -> Maybe Int -> Maybe Text -> ListContributorInsights

-- | A token to for the desired page, if there is one.
[$sel:nextToken:ListContributorInsights'] :: ListContributorInsights -> Maybe Text

-- | Maximum number of results to return per page.
[$sel:maxResults:ListContributorInsights'] :: ListContributorInsights -> Maybe Int

-- | The name of the table.
[$sel:tableName:ListContributorInsights'] :: ListContributorInsights -> Maybe Text

-- | Create a value of <a>ListContributorInsights</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListContributorInsights'</a>,
--   <a>listContributorInsights_nextToken</a> - A token to for the desired
--   page, if there is one.
--   
--   <a>$sel:maxResults:ListContributorInsights'</a>,
--   <a>listContributorInsights_maxResults</a> - Maximum number of results
--   to return per page.
--   
--   <a>$sel:tableName:ListContributorInsights'</a>,
--   <a>listContributorInsights_tableName</a> - The name of the table.
newListContributorInsights :: ListContributorInsights

-- | A token to for the desired page, if there is one.
listContributorInsights_nextToken :: Lens' ListContributorInsights (Maybe Text)

-- | Maximum number of results to return per page.
listContributorInsights_maxResults :: Lens' ListContributorInsights (Maybe Int)

-- | The name of the table.
listContributorInsights_tableName :: Lens' ListContributorInsights (Maybe Text)

-- | <i>See:</i> <a>newListContributorInsightsResponse</a> smart
--   constructor.
data ListContributorInsightsResponse
ListContributorInsightsResponse' :: Maybe [ContributorInsightsSummary] -> Maybe Text -> Int -> ListContributorInsightsResponse

-- | A list of ContributorInsightsSummary.
[$sel:contributorInsightsSummaries:ListContributorInsightsResponse'] :: ListContributorInsightsResponse -> Maybe [ContributorInsightsSummary]

-- | A token to go to the next page if there is one.
[$sel:nextToken:ListContributorInsightsResponse'] :: ListContributorInsightsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListContributorInsightsResponse'] :: ListContributorInsightsResponse -> Int

-- | Create a value of <a>ListContributorInsightsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:contributorInsightsSummaries:ListContributorInsightsResponse'</a>,
--   <a>listContributorInsightsResponse_contributorInsightsSummaries</a> -
--   A list of ContributorInsightsSummary.
--   
--   <a>$sel:nextToken:ListContributorInsights'</a>,
--   <a>listContributorInsightsResponse_nextToken</a> - A token to go to
--   the next page if there is one.
--   
--   <a>$sel:httpStatus:ListContributorInsightsResponse'</a>,
--   <a>listContributorInsightsResponse_httpStatus</a> - The response's
--   http status code.
newListContributorInsightsResponse :: Int -> ListContributorInsightsResponse

-- | A list of ContributorInsightsSummary.
listContributorInsightsResponse_contributorInsightsSummaries :: Lens' ListContributorInsightsResponse (Maybe [ContributorInsightsSummary])

-- | A token to go to the next page if there is one.
listContributorInsightsResponse_nextToken :: Lens' ListContributorInsightsResponse (Maybe Text)

-- | The response's http status code.
listContributorInsightsResponse_httpStatus :: Lens' ListContributorInsightsResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.ListContributorInsights.ListContributorInsights
instance GHC.Show.Show Amazonka.DynamoDB.ListContributorInsights.ListContributorInsights
instance GHC.Read.Read Amazonka.DynamoDB.ListContributorInsights.ListContributorInsights
instance GHC.Classes.Eq Amazonka.DynamoDB.ListContributorInsights.ListContributorInsights
instance GHC.Generics.Generic Amazonka.DynamoDB.ListContributorInsights.ListContributorInsightsResponse
instance GHC.Show.Show Amazonka.DynamoDB.ListContributorInsights.ListContributorInsightsResponse
instance GHC.Read.Read Amazonka.DynamoDB.ListContributorInsights.ListContributorInsightsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.ListContributorInsights.ListContributorInsightsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.ListContributorInsights.ListContributorInsights
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ListContributorInsights.ListContributorInsightsResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.ListContributorInsights.ListContributorInsights
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ListContributorInsights.ListContributorInsights
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.ListContributorInsights.ListContributorInsights
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.ListContributorInsights.ListContributorInsights
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.ListContributorInsights.ListContributorInsights
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.ListContributorInsights.ListContributorInsights


-- | List backups associated with an AWS account. To list backups for a
--   given table, specify <tt>TableName</tt>. <tt>ListBackups</tt> returns
--   a paginated list of results with at most 1 MB worth of items in a
--   page. You can also specify a maximum number of entries to be returned
--   in a page.
--   
--   In the request, start time is inclusive, but end time is exclusive.
--   Note that these boundaries are for the time at which the original
--   backup was requested.
--   
--   You can call <tt>ListBackups</tt> a maximum of five times per second.
--   
--   This operation returns paginated results.
module Amazonka.DynamoDB.ListBackups

-- | <i>See:</i> <a>newListBackups</a> smart constructor.
data ListBackups
ListBackups' :: Maybe POSIX -> Maybe POSIX -> Maybe Natural -> Maybe Text -> Maybe BackupTypeFilter -> Maybe Text -> ListBackups

-- | Only backups created before this time are listed.
--   <tt>TimeRangeUpperBound</tt> is exclusive.
[$sel:timeRangeUpperBound:ListBackups'] :: ListBackups -> Maybe POSIX

-- | Only backups created after this time are listed.
--   <tt>TimeRangeLowerBound</tt> is inclusive.
[$sel:timeRangeLowerBound:ListBackups'] :: ListBackups -> Maybe POSIX

-- | Maximum number of backups to return at once.
[$sel:limit:ListBackups'] :: ListBackups -> Maybe Natural

-- | <tt>LastEvaluatedBackupArn</tt> is the Amazon Resource Name (ARN) of
--   the backup last evaluated when the current page of results was
--   returned, inclusive of the current page of results. This value may be
--   specified as the <tt>ExclusiveStartBackupArn</tt> of a new
--   <tt>ListBackups</tt> operation in order to fetch the next page of
--   results.
[$sel:exclusiveStartBackupArn:ListBackups'] :: ListBackups -> Maybe Text

-- | The backups from the table specified by <tt>BackupType</tt> are
--   listed.
--   
--   Where <tt>BackupType</tt> can be:
--   
--   <ul>
--   <li><tt>USER</tt> - On-demand backup created by you.</li>
--   <li><tt>SYSTEM</tt> - On-demand backup automatically created by
--   DynamoDB.</li>
--   <li><tt>ALL</tt> - All types of on-demand backups (USER and
--   SYSTEM).</li>
--   </ul>
[$sel:backupType:ListBackups'] :: ListBackups -> Maybe BackupTypeFilter

-- | The backups from the table specified by <tt>TableName</tt> are listed.
[$sel:tableName:ListBackups'] :: ListBackups -> Maybe Text

-- | Create a value of <a>ListBackups</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeRangeUpperBound:ListBackups'</a>,
--   <a>listBackups_timeRangeUpperBound</a> - Only backups created before
--   this time are listed. <tt>TimeRangeUpperBound</tt> is exclusive.
--   
--   <a>$sel:timeRangeLowerBound:ListBackups'</a>,
--   <a>listBackups_timeRangeLowerBound</a> - Only backups created after
--   this time are listed. <tt>TimeRangeLowerBound</tt> is inclusive.
--   
--   <a>$sel:limit:ListBackups'</a>, <a>listBackups_limit</a> - Maximum
--   number of backups to return at once.
--   
--   <a>$sel:exclusiveStartBackupArn:ListBackups'</a>,
--   <a>listBackups_exclusiveStartBackupArn</a> -
--   <tt>LastEvaluatedBackupArn</tt> is the Amazon Resource Name (ARN) of
--   the backup last evaluated when the current page of results was
--   returned, inclusive of the current page of results. This value may be
--   specified as the <tt>ExclusiveStartBackupArn</tt> of a new
--   <tt>ListBackups</tt> operation in order to fetch the next page of
--   results.
--   
--   <a>$sel:backupType:ListBackups'</a>, <a>listBackups_backupType</a> -
--   The backups from the table specified by <tt>BackupType</tt> are
--   listed.
--   
--   Where <tt>BackupType</tt> can be:
--   
--   <ul>
--   <li><tt>USER</tt> - On-demand backup created by you.</li>
--   <li><tt>SYSTEM</tt> - On-demand backup automatically created by
--   DynamoDB.</li>
--   <li><tt>ALL</tt> - All types of on-demand backups (USER and
--   SYSTEM).</li>
--   </ul>
--   
--   <a>$sel:tableName:ListBackups'</a>, <a>listBackups_tableName</a> - The
--   backups from the table specified by <tt>TableName</tt> are listed.
newListBackups :: ListBackups

-- | Only backups created before this time are listed.
--   <tt>TimeRangeUpperBound</tt> is exclusive.
listBackups_timeRangeUpperBound :: Lens' ListBackups (Maybe UTCTime)

-- | Only backups created after this time are listed.
--   <tt>TimeRangeLowerBound</tt> is inclusive.
listBackups_timeRangeLowerBound :: Lens' ListBackups (Maybe UTCTime)

-- | Maximum number of backups to return at once.
listBackups_limit :: Lens' ListBackups (Maybe Natural)

-- | <tt>LastEvaluatedBackupArn</tt> is the Amazon Resource Name (ARN) of
--   the backup last evaluated when the current page of results was
--   returned, inclusive of the current page of results. This value may be
--   specified as the <tt>ExclusiveStartBackupArn</tt> of a new
--   <tt>ListBackups</tt> operation in order to fetch the next page of
--   results.
listBackups_exclusiveStartBackupArn :: Lens' ListBackups (Maybe Text)

-- | The backups from the table specified by <tt>BackupType</tt> are
--   listed.
--   
--   Where <tt>BackupType</tt> can be:
--   
--   <ul>
--   <li><tt>USER</tt> - On-demand backup created by you.</li>
--   <li><tt>SYSTEM</tt> - On-demand backup automatically created by
--   DynamoDB.</li>
--   <li><tt>ALL</tt> - All types of on-demand backups (USER and
--   SYSTEM).</li>
--   </ul>
listBackups_backupType :: Lens' ListBackups (Maybe BackupTypeFilter)

-- | The backups from the table specified by <tt>TableName</tt> are listed.
listBackups_tableName :: Lens' ListBackups (Maybe Text)

-- | <i>See:</i> <a>newListBackupsResponse</a> smart constructor.
data ListBackupsResponse
ListBackupsResponse' :: Maybe [BackupSummary] -> Maybe Text -> Int -> ListBackupsResponse

-- | List of <tt>BackupSummary</tt> objects.
[$sel:backupSummaries:ListBackupsResponse'] :: ListBackupsResponse -> Maybe [BackupSummary]

-- | The ARN of the backup last evaluated when the current page of results
--   was returned, inclusive of the current page of results. This value may
--   be specified as the <tt>ExclusiveStartBackupArn</tt> of a new
--   <tt>ListBackups</tt> operation in order to fetch the next page of
--   results.
--   
--   If <tt>LastEvaluatedBackupArn</tt> is empty, then the last page of
--   results has been processed and there are no more results to be
--   retrieved.
--   
--   If <tt>LastEvaluatedBackupArn</tt> is not empty, this may or may not
--   indicate that there is more data to be returned. All results are
--   guaranteed to have been returned if and only if no value for
--   <tt>LastEvaluatedBackupArn</tt> is returned.
[$sel:lastEvaluatedBackupArn:ListBackupsResponse'] :: ListBackupsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListBackupsResponse'] :: ListBackupsResponse -> Int

-- | Create a value of <a>ListBackupsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupSummaries:ListBackupsResponse'</a>,
--   <a>listBackupsResponse_backupSummaries</a> - List of
--   <tt>BackupSummary</tt> objects.
--   
--   <a>$sel:lastEvaluatedBackupArn:ListBackupsResponse'</a>,
--   <a>listBackupsResponse_lastEvaluatedBackupArn</a> - The ARN of the
--   backup last evaluated when the current page of results was returned,
--   inclusive of the current page of results. This value may be specified
--   as the <tt>ExclusiveStartBackupArn</tt> of a new <tt>ListBackups</tt>
--   operation in order to fetch the next page of results.
--   
--   If <tt>LastEvaluatedBackupArn</tt> is empty, then the last page of
--   results has been processed and there are no more results to be
--   retrieved.
--   
--   If <tt>LastEvaluatedBackupArn</tt> is not empty, this may or may not
--   indicate that there is more data to be returned. All results are
--   guaranteed to have been returned if and only if no value for
--   <tt>LastEvaluatedBackupArn</tt> is returned.
--   
--   <a>$sel:httpStatus:ListBackupsResponse'</a>,
--   <a>listBackupsResponse_httpStatus</a> - The response's http status
--   code.
newListBackupsResponse :: Int -> ListBackupsResponse

-- | List of <tt>BackupSummary</tt> objects.
listBackupsResponse_backupSummaries :: Lens' ListBackupsResponse (Maybe [BackupSummary])

-- | The ARN of the backup last evaluated when the current page of results
--   was returned, inclusive of the current page of results. This value may
--   be specified as the <tt>ExclusiveStartBackupArn</tt> of a new
--   <tt>ListBackups</tt> operation in order to fetch the next page of
--   results.
--   
--   If <tt>LastEvaluatedBackupArn</tt> is empty, then the last page of
--   results has been processed and there are no more results to be
--   retrieved.
--   
--   If <tt>LastEvaluatedBackupArn</tt> is not empty, this may or may not
--   indicate that there is more data to be returned. All results are
--   guaranteed to have been returned if and only if no value for
--   <tt>LastEvaluatedBackupArn</tt> is returned.
listBackupsResponse_lastEvaluatedBackupArn :: Lens' ListBackupsResponse (Maybe Text)

-- | The response's http status code.
listBackupsResponse_httpStatus :: Lens' ListBackupsResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.ListBackups.ListBackups
instance GHC.Show.Show Amazonka.DynamoDB.ListBackups.ListBackups
instance GHC.Read.Read Amazonka.DynamoDB.ListBackups.ListBackups
instance GHC.Classes.Eq Amazonka.DynamoDB.ListBackups.ListBackups
instance GHC.Generics.Generic Amazonka.DynamoDB.ListBackups.ListBackupsResponse
instance GHC.Show.Show Amazonka.DynamoDB.ListBackups.ListBackupsResponse
instance GHC.Read.Read Amazonka.DynamoDB.ListBackups.ListBackupsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.ListBackups.ListBackupsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.ListBackups.ListBackups
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ListBackups.ListBackupsResponse
instance Amazonka.Pager.AWSPager Amazonka.DynamoDB.ListBackups.ListBackups
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.ListBackups.ListBackups
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ListBackups.ListBackups
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.ListBackups.ListBackups
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.ListBackups.ListBackups
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.ListBackups.ListBackups
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.ListBackups.ListBackups


-- | The <tt>GetItem</tt> operation returns a set of attributes for the
--   item with the given primary key. If there is no matching item,
--   <tt>GetItem</tt> does not return any data and there will be no
--   <tt>Item</tt> element in the response.
--   
--   <tt>GetItem</tt> provides an eventually consistent read by default. If
--   your application requires a strongly consistent read, set
--   <tt>ConsistentRead</tt> to <tt>true</tt>. Although a strongly
--   consistent read might take more time than an eventually consistent
--   read, it always returns the last updated value.
module Amazonka.DynamoDB.GetItem

-- | Represents the input of a <tt>GetItem</tt> operation.
--   
--   <i>See:</i> <a>newGetItem</a> smart constructor.
data GetItem
GetItem' :: Maybe Text -> Maybe (NonEmpty Text) -> Maybe (HashMap Text Text) -> Maybe Bool -> Maybe ReturnConsumedCapacity -> Text -> HashMap Text AttributeValue -> GetItem

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the expression must be separated by
--   commas.
--   
--   If no attribute names are specified, then all attributes are returned.
--   If any of the requested attributes are not found, they do not appear
--   in the result.
--   
--   For more information, see <a>Specifying Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
[$sel:projectionExpression:GetItem'] :: GetItem -> Maybe Text

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:attributesToGet:GetItem'] :: GetItem -> Maybe (NonEmpty Text)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:expressionAttributeNames:GetItem'] :: GetItem -> Maybe (HashMap Text Text)

-- | Determines the read consistency model: If set to <tt>true</tt>, then
--   the operation uses strongly consistent reads; otherwise, the operation
--   uses eventually consistent reads.
[$sel:consistentRead:GetItem'] :: GetItem -> Maybe Bool
[$sel:returnConsumedCapacity:GetItem'] :: GetItem -> Maybe ReturnConsumedCapacity

-- | The name of the table containing the requested item.
[$sel:tableName:GetItem'] :: GetItem -> Text

-- | A map of attribute names to <tt>AttributeValue</tt> objects,
--   representing the primary key of the item to retrieve.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
[$sel:key:GetItem'] :: GetItem -> HashMap Text AttributeValue

-- | Create a value of <a>GetItem</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionExpression:GetItem'</a>,
--   <a>getItem_projectionExpression</a> - A string that identifies one or
--   more attributes to retrieve from the table. These attributes can
--   include scalars, sets, or elements of a JSON document. The attributes
--   in the expression must be separated by commas.
--   
--   If no attribute names are specified, then all attributes are returned.
--   If any of the requested attributes are not found, they do not appear
--   in the result.
--   
--   For more information, see <a>Specifying Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributesToGet:GetItem'</a>, <a>getItem_attributesToGet</a> -
--   This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:expressionAttributeNames:GetItem'</a>,
--   <a>getItem_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression. The following are some
--   use cases for using <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:consistentRead:GetItem'</a>, <a>getItem_consistentRead</a> -
--   Determines the read consistency model: If set to <tt>true</tt>, then
--   the operation uses strongly consistent reads; otherwise, the operation
--   uses eventually consistent reads.
--   
--   <a>$sel:returnConsumedCapacity:GetItem'</a>,
--   <a>getItem_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:tableName:GetItem'</a>, <a>getItem_tableName</a> - The name of
--   the table containing the requested item.
--   
--   <a>$sel:key:GetItem'</a>, <a>getItem_key</a> - A map of attribute
--   names to <tt>AttributeValue</tt> objects, representing the primary key
--   of the item to retrieve.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
newGetItem :: Text -> GetItem

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the expression must be separated by
--   commas.
--   
--   If no attribute names are specified, then all attributes are returned.
--   If any of the requested attributes are not found, they do not appear
--   in the result.
--   
--   For more information, see <a>Specifying Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
getItem_projectionExpression :: Lens' GetItem (Maybe Text)

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
getItem_attributesToGet :: Lens' GetItem (Maybe (NonEmpty Text))

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
getItem_expressionAttributeNames :: Lens' GetItem (Maybe (HashMap Text Text))

-- | Determines the read consistency model: If set to <tt>true</tt>, then
--   the operation uses strongly consistent reads; otherwise, the operation
--   uses eventually consistent reads.
getItem_consistentRead :: Lens' GetItem (Maybe Bool)

-- | Undocumented member.
getItem_returnConsumedCapacity :: Lens' GetItem (Maybe ReturnConsumedCapacity)

-- | The name of the table containing the requested item.
getItem_tableName :: Lens' GetItem Text

-- | A map of attribute names to <tt>AttributeValue</tt> objects,
--   representing the primary key of the item to retrieve.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
getItem_key :: Lens' GetItem (HashMap Text AttributeValue)

-- | Represents the output of a <tt>GetItem</tt> operation.
--   
--   <i>See:</i> <a>newGetItemResponse</a> smart constructor.
data GetItemResponse
GetItemResponse' :: Maybe ConsumedCapacity -> Maybe (HashMap Text AttributeValue) -> Int -> GetItemResponse

-- | The capacity units consumed by the <tt>GetItem</tt> operation. The
--   data returned includes the total provisioned throughput consumed,
--   along with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Read/Write Capacity Mode</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:consumedCapacity:GetItemResponse'] :: GetItemResponse -> Maybe ConsumedCapacity

-- | A map of attribute names to <tt>AttributeValue</tt> objects, as
--   specified by <tt>ProjectionExpression</tt>.
[$sel:item:GetItemResponse'] :: GetItemResponse -> Maybe (HashMap Text AttributeValue)

-- | The response's http status code.
[$sel:httpStatus:GetItemResponse'] :: GetItemResponse -> Int

-- | Create a value of <a>GetItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumedCapacity:GetItemResponse'</a>,
--   <a>getItemResponse_consumedCapacity</a> - The capacity units consumed
--   by the <tt>GetItem</tt> operation. The data returned includes the
--   total provisioned throughput consumed, along with statistics for the
--   table and any indexes involved in the operation.
--   <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Read/Write Capacity Mode</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:item:GetItemResponse'</a>, <a>getItemResponse_item</a> - A map
--   of attribute names to <tt>AttributeValue</tt> objects, as specified by
--   <tt>ProjectionExpression</tt>.
--   
--   <a>$sel:httpStatus:GetItemResponse'</a>,
--   <a>getItemResponse_httpStatus</a> - The response's http status code.
newGetItemResponse :: Int -> GetItemResponse

-- | The capacity units consumed by the <tt>GetItem</tt> operation. The
--   data returned includes the total provisioned throughput consumed,
--   along with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Read/Write Capacity Mode</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
getItemResponse_consumedCapacity :: Lens' GetItemResponse (Maybe ConsumedCapacity)

-- | A map of attribute names to <tt>AttributeValue</tt> objects, as
--   specified by <tt>ProjectionExpression</tt>.
getItemResponse_item :: Lens' GetItemResponse (Maybe (HashMap Text AttributeValue))

-- | The response's http status code.
getItemResponse_httpStatus :: Lens' GetItemResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.GetItem.GetItem
instance GHC.Show.Show Amazonka.DynamoDB.GetItem.GetItem
instance GHC.Read.Read Amazonka.DynamoDB.GetItem.GetItem
instance GHC.Classes.Eq Amazonka.DynamoDB.GetItem.GetItem
instance GHC.Generics.Generic Amazonka.DynamoDB.GetItem.GetItemResponse
instance GHC.Show.Show Amazonka.DynamoDB.GetItem.GetItemResponse
instance GHC.Read.Read Amazonka.DynamoDB.GetItem.GetItemResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.GetItem.GetItemResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.GetItem.GetItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.GetItem.GetItemResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.GetItem.GetItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.GetItem.GetItem
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.GetItem.GetItem
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.GetItem.GetItem
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.GetItem.GetItem
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.GetItem.GetItem


-- | Exports table data to an S3 bucket. The table must have point in time
--   recovery enabled, and you can export data from any time within the
--   point in time recovery window.
module Amazonka.DynamoDB.ExportTableToPointInTime

-- | <i>See:</i> <a>newExportTableToPointInTime</a> smart constructor.
data ExportTableToPointInTime
ExportTableToPointInTime' :: Maybe Text -> Maybe ExportFormat -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe S3SseAlgorithm -> Maybe Text -> Text -> Text -> ExportTableToPointInTime

-- | The ID of the AWS account that owns the bucket the export will be
--   stored in.
[$sel:s3BucketOwner:ExportTableToPointInTime'] :: ExportTableToPointInTime -> Maybe Text

-- | The format for the exported data. Valid values for
--   <tt>ExportFormat</tt> are <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
[$sel:exportFormat:ExportTableToPointInTime'] :: ExportTableToPointInTime -> Maybe ExportFormat

-- | The ID of the AWS KMS managed key used to encrypt the S3 bucket where
--   export data will be stored (if applicable).
[$sel:s3SseKmsKeyId:ExportTableToPointInTime'] :: ExportTableToPointInTime -> Maybe Text

-- | Providing a <tt>ClientToken</tt> makes the call to
--   <tt>ExportTableToPointInTimeInput</tt> idempotent, meaning that
--   multiple identical calls have the same effect as one single call.
--   
--   A client token is valid for 8 hours after the first request that uses
--   it is completed. After 8 hours, any request with the same client token
--   is treated as a new request. Do not resubmit the same request with the
--   same client token for more than 8 hours, or the result might not be
--   idempotent.
--   
--   If you submit a request with the same client token but a change in
--   other parameters within the 8-hour idempotency window, DynamoDB
--   returns an <tt>IdempotentParameterMismatch</tt> exception.
[$sel:clientToken:ExportTableToPointInTime'] :: ExportTableToPointInTime -> Maybe Text

-- | Time in the past from which to export table data. The table export
--   will be a snapshot of the table's state at this point in time.
[$sel:exportTime:ExportTableToPointInTime'] :: ExportTableToPointInTime -> Maybe POSIX

-- | Type of encryption used on the bucket where export data will be
--   stored. Valid values for <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
[$sel:s3SseAlgorithm:ExportTableToPointInTime'] :: ExportTableToPointInTime -> Maybe S3SseAlgorithm

-- | The Amazon S3 bucket prefix to use as the file name and path of the
--   exported snapshot.
[$sel:s3Prefix:ExportTableToPointInTime'] :: ExportTableToPointInTime -> Maybe Text

-- | The Amazon Resource Name (ARN) associated with the table to export.
[$sel:tableArn:ExportTableToPointInTime'] :: ExportTableToPointInTime -> Text

-- | The name of the Amazon S3 bucket to export the snapshot to.
[$sel:s3Bucket:ExportTableToPointInTime'] :: ExportTableToPointInTime -> Text

-- | Create a value of <a>ExportTableToPointInTime</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:s3BucketOwner:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_s3BucketOwner</a> - The ID of the AWS
--   account that owns the bucket the export will be stored in.
--   
--   <a>$sel:exportFormat:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_exportFormat</a> - The format for the
--   exported data. Valid values for <tt>ExportFormat</tt> are
--   <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
--   
--   <a>$sel:s3SseKmsKeyId:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_s3SseKmsKeyId</a> - The ID of the AWS KMS
--   managed key used to encrypt the S3 bucket where export data will be
--   stored (if applicable).
--   
--   <a>$sel:clientToken:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_clientToken</a> - Providing a
--   <tt>ClientToken</tt> makes the call to
--   <tt>ExportTableToPointInTimeInput</tt> idempotent, meaning that
--   multiple identical calls have the same effect as one single call.
--   
--   A client token is valid for 8 hours after the first request that uses
--   it is completed. After 8 hours, any request with the same client token
--   is treated as a new request. Do not resubmit the same request with the
--   same client token for more than 8 hours, or the result might not be
--   idempotent.
--   
--   If you submit a request with the same client token but a change in
--   other parameters within the 8-hour idempotency window, DynamoDB
--   returns an <tt>IdempotentParameterMismatch</tt> exception.
--   
--   <a>$sel:exportTime:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_exportTime</a> - Time in the past from
--   which to export table data. The table export will be a snapshot of the
--   table's state at this point in time.
--   
--   <a>$sel:s3SseAlgorithm:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_s3SseAlgorithm</a> - Type of encryption
--   used on the bucket where export data will be stored. Valid values for
--   <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
--   
--   <a>$sel:s3Prefix:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_s3Prefix</a> - The Amazon S3 bucket prefix
--   to use as the file name and path of the exported snapshot.
--   
--   <a>$sel:tableArn:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_tableArn</a> - The Amazon Resource Name
--   (ARN) associated with the table to export.
--   
--   <a>$sel:s3Bucket:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_s3Bucket</a> - The name of the Amazon S3
--   bucket to export the snapshot to.
newExportTableToPointInTime :: Text -> Text -> ExportTableToPointInTime

-- | The ID of the AWS account that owns the bucket the export will be
--   stored in.
exportTableToPointInTime_s3BucketOwner :: Lens' ExportTableToPointInTime (Maybe Text)

-- | The format for the exported data. Valid values for
--   <tt>ExportFormat</tt> are <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
exportTableToPointInTime_exportFormat :: Lens' ExportTableToPointInTime (Maybe ExportFormat)

-- | The ID of the AWS KMS managed key used to encrypt the S3 bucket where
--   export data will be stored (if applicable).
exportTableToPointInTime_s3SseKmsKeyId :: Lens' ExportTableToPointInTime (Maybe Text)

-- | Providing a <tt>ClientToken</tt> makes the call to
--   <tt>ExportTableToPointInTimeInput</tt> idempotent, meaning that
--   multiple identical calls have the same effect as one single call.
--   
--   A client token is valid for 8 hours after the first request that uses
--   it is completed. After 8 hours, any request with the same client token
--   is treated as a new request. Do not resubmit the same request with the
--   same client token for more than 8 hours, or the result might not be
--   idempotent.
--   
--   If you submit a request with the same client token but a change in
--   other parameters within the 8-hour idempotency window, DynamoDB
--   returns an <tt>IdempotentParameterMismatch</tt> exception.
exportTableToPointInTime_clientToken :: Lens' ExportTableToPointInTime (Maybe Text)

-- | Time in the past from which to export table data. The table export
--   will be a snapshot of the table's state at this point in time.
exportTableToPointInTime_exportTime :: Lens' ExportTableToPointInTime (Maybe UTCTime)

-- | Type of encryption used on the bucket where export data will be
--   stored. Valid values for <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
exportTableToPointInTime_s3SseAlgorithm :: Lens' ExportTableToPointInTime (Maybe S3SseAlgorithm)

-- | The Amazon S3 bucket prefix to use as the file name and path of the
--   exported snapshot.
exportTableToPointInTime_s3Prefix :: Lens' ExportTableToPointInTime (Maybe Text)

-- | The Amazon Resource Name (ARN) associated with the table to export.
exportTableToPointInTime_tableArn :: Lens' ExportTableToPointInTime Text

-- | The name of the Amazon S3 bucket to export the snapshot to.
exportTableToPointInTime_s3Bucket :: Lens' ExportTableToPointInTime Text

-- | <i>See:</i> <a>newExportTableToPointInTimeResponse</a> smart
--   constructor.
data ExportTableToPointInTimeResponse
ExportTableToPointInTimeResponse' :: Maybe ExportDescription -> Int -> ExportTableToPointInTimeResponse

-- | Contains a description of the table export.
[$sel:exportDescription:ExportTableToPointInTimeResponse'] :: ExportTableToPointInTimeResponse -> Maybe ExportDescription

-- | The response's http status code.
[$sel:httpStatus:ExportTableToPointInTimeResponse'] :: ExportTableToPointInTimeResponse -> Int

-- | Create a value of <a>ExportTableToPointInTimeResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exportDescription:ExportTableToPointInTimeResponse'</a>,
--   <a>exportTableToPointInTimeResponse_exportDescription</a> - Contains a
--   description of the table export.
--   
--   <a>$sel:httpStatus:ExportTableToPointInTimeResponse'</a>,
--   <a>exportTableToPointInTimeResponse_httpStatus</a> - The response's
--   http status code.
newExportTableToPointInTimeResponse :: Int -> ExportTableToPointInTimeResponse

-- | Contains a description of the table export.
exportTableToPointInTimeResponse_exportDescription :: Lens' ExportTableToPointInTimeResponse (Maybe ExportDescription)

-- | The response's http status code.
exportTableToPointInTimeResponse_httpStatus :: Lens' ExportTableToPointInTimeResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTime
instance GHC.Show.Show Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTime
instance GHC.Read.Read Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTime
instance GHC.Classes.Eq Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTime
instance GHC.Generics.Generic Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTimeResponse
instance GHC.Show.Show Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTimeResponse
instance GHC.Read.Read Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTimeResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTimeResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTime
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTimeResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTime
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTime
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTime
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTime
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTime
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.ExportTableToPointInTime.ExportTableToPointInTime


-- | This operation allows you to perform transactional reads or writes on
--   data stored in DynamoDB, using PartiQL.
module Amazonka.DynamoDB.ExecuteTransaction

-- | <i>See:</i> <a>newExecuteTransaction</a> smart constructor.
data ExecuteTransaction
ExecuteTransaction' :: Maybe Text -> NonEmpty ParameterizedStatement -> ExecuteTransaction

-- | Set this value to get remaining results, if <tt>NextToken</tt> was
--   returned in the statement response.
[$sel:clientRequestToken:ExecuteTransaction'] :: ExecuteTransaction -> Maybe Text

-- | The list of PartiQL statements representing the transaction to run.
[$sel:transactStatements:ExecuteTransaction'] :: ExecuteTransaction -> NonEmpty ParameterizedStatement

-- | Create a value of <a>ExecuteTransaction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientRequestToken:ExecuteTransaction'</a>,
--   <a>executeTransaction_clientRequestToken</a> - Set this value to get
--   remaining results, if <tt>NextToken</tt> was returned in the statement
--   response.
--   
--   <a>$sel:transactStatements:ExecuteTransaction'</a>,
--   <a>executeTransaction_transactStatements</a> - The list of PartiQL
--   statements representing the transaction to run.
newExecuteTransaction :: NonEmpty ParameterizedStatement -> ExecuteTransaction

-- | Set this value to get remaining results, if <tt>NextToken</tt> was
--   returned in the statement response.
executeTransaction_clientRequestToken :: Lens' ExecuteTransaction (Maybe Text)

-- | The list of PartiQL statements representing the transaction to run.
executeTransaction_transactStatements :: Lens' ExecuteTransaction (NonEmpty ParameterizedStatement)

-- | <i>See:</i> <a>newExecuteTransactionResponse</a> smart constructor.
data ExecuteTransactionResponse
ExecuteTransactionResponse' :: Maybe (NonEmpty ItemResponse) -> Int -> ExecuteTransactionResponse

-- | The response to a PartiQL transaction.
[$sel:responses:ExecuteTransactionResponse'] :: ExecuteTransactionResponse -> Maybe (NonEmpty ItemResponse)

-- | The response's http status code.
[$sel:httpStatus:ExecuteTransactionResponse'] :: ExecuteTransactionResponse -> Int

-- | Create a value of <a>ExecuteTransactionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responses:ExecuteTransactionResponse'</a>,
--   <a>executeTransactionResponse_responses</a> - The response to a
--   PartiQL transaction.
--   
--   <a>$sel:httpStatus:ExecuteTransactionResponse'</a>,
--   <a>executeTransactionResponse_httpStatus</a> - The response's http
--   status code.
newExecuteTransactionResponse :: Int -> ExecuteTransactionResponse

-- | The response to a PartiQL transaction.
executeTransactionResponse_responses :: Lens' ExecuteTransactionResponse (Maybe (NonEmpty ItemResponse))

-- | The response's http status code.
executeTransactionResponse_httpStatus :: Lens' ExecuteTransactionResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransaction
instance GHC.Show.Show Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransaction
instance GHC.Read.Read Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransaction
instance GHC.Classes.Eq Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransaction
instance GHC.Generics.Generic Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransactionResponse
instance GHC.Show.Show Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransactionResponse
instance GHC.Read.Read Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransactionResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransactionResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransaction
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransactionResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransaction
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransaction
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransaction
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransaction
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransaction
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.ExecuteTransaction.ExecuteTransaction


-- | This operation allows you to perform reads and singleton writes on
--   data stored in DynamoDB, using PartiQL.
module Amazonka.DynamoDB.ExecuteStatement

-- | <i>See:</i> <a>newExecuteStatement</a> smart constructor.
data ExecuteStatement
ExecuteStatement' :: Maybe Bool -> Maybe Text -> Maybe (NonEmpty AttributeValue) -> Text -> ExecuteStatement

-- | The consistency of a read operation. If set to <tt>true</tt>, then a
--   strongly consistent read is used; otherwise, an eventually consistent
--   read is used.
[$sel:consistentRead:ExecuteStatement'] :: ExecuteStatement -> Maybe Bool

-- | Set this value to get remaining results, if <tt>NextToken</tt> was
--   returned in the statement response.
[$sel:nextToken:ExecuteStatement'] :: ExecuteStatement -> Maybe Text

-- | The parameters for the PartiQL statement, if any.
[$sel:parameters:ExecuteStatement'] :: ExecuteStatement -> Maybe (NonEmpty AttributeValue)

-- | The PartiQL statement representing the operation to run.
[$sel:statement:ExecuteStatement'] :: ExecuteStatement -> Text

-- | Create a value of <a>ExecuteStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consistentRead:ExecuteStatement'</a>,
--   <a>executeStatement_consistentRead</a> - The consistency of a read
--   operation. If set to <tt>true</tt>, then a strongly consistent read is
--   used; otherwise, an eventually consistent read is used.
--   
--   <a>$sel:nextToken:ExecuteStatement'</a>,
--   <a>executeStatement_nextToken</a> - Set this value to get remaining
--   results, if <tt>NextToken</tt> was returned in the statement response.
--   
--   <a>$sel:parameters:ExecuteStatement'</a>,
--   <a>executeStatement_parameters</a> - The parameters for the PartiQL
--   statement, if any.
--   
--   <a>$sel:statement:ExecuteStatement'</a>,
--   <a>executeStatement_statement</a> - The PartiQL statement representing
--   the operation to run.
newExecuteStatement :: Text -> ExecuteStatement

-- | The consistency of a read operation. If set to <tt>true</tt>, then a
--   strongly consistent read is used; otherwise, an eventually consistent
--   read is used.
executeStatement_consistentRead :: Lens' ExecuteStatement (Maybe Bool)

-- | Set this value to get remaining results, if <tt>NextToken</tt> was
--   returned in the statement response.
executeStatement_nextToken :: Lens' ExecuteStatement (Maybe Text)

-- | The parameters for the PartiQL statement, if any.
executeStatement_parameters :: Lens' ExecuteStatement (Maybe (NonEmpty AttributeValue))

-- | The PartiQL statement representing the operation to run.
executeStatement_statement :: Lens' ExecuteStatement Text

-- | <i>See:</i> <a>newExecuteStatementResponse</a> smart constructor.
data ExecuteStatementResponse
ExecuteStatementResponse' :: Maybe [HashMap Text AttributeValue] -> Maybe Text -> Int -> ExecuteStatementResponse

-- | If a read operation was used, this property will contain the result of
--   the reade operation; a map of attribute names and their values. For
--   the write operations this value will be empty.
[$sel:items:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Maybe [HashMap Text AttributeValue]

-- | If the response of a read request exceeds the response payload limit
--   DynamoDB will set this value in the response. If set, you can use that
--   this value in the subsequent request to get the remaining results.
[$sel:nextToken:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ExecuteStatementResponse'] :: ExecuteStatementResponse -> Int

-- | Create a value of <a>ExecuteStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:items:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_items</a> - If a read operation was used,
--   this property will contain the result of the reade operation; a map of
--   attribute names and their values. For the write operations this value
--   will be empty.
--   
--   <a>$sel:nextToken:ExecuteStatement'</a>,
--   <a>executeStatementResponse_nextToken</a> - If the response of a read
--   request exceeds the response payload limit DynamoDB will set this
--   value in the response. If set, you can use that this value in the
--   subsequent request to get the remaining results.
--   
--   <a>$sel:httpStatus:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_httpStatus</a> - The response's http
--   status code.
newExecuteStatementResponse :: Int -> ExecuteStatementResponse

-- | If a read operation was used, this property will contain the result of
--   the reade operation; a map of attribute names and their values. For
--   the write operations this value will be empty.
executeStatementResponse_items :: Lens' ExecuteStatementResponse (Maybe [HashMap Text AttributeValue])

-- | If the response of a read request exceeds the response payload limit
--   DynamoDB will set this value in the response. If set, you can use that
--   this value in the subsequent request to get the remaining results.
executeStatementResponse_nextToken :: Lens' ExecuteStatementResponse (Maybe Text)

-- | The response's http status code.
executeStatementResponse_httpStatus :: Lens' ExecuteStatementResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.ExecuteStatement.ExecuteStatement
instance GHC.Show.Show Amazonka.DynamoDB.ExecuteStatement.ExecuteStatement
instance GHC.Read.Read Amazonka.DynamoDB.ExecuteStatement.ExecuteStatement
instance GHC.Classes.Eq Amazonka.DynamoDB.ExecuteStatement.ExecuteStatement
instance GHC.Generics.Generic Amazonka.DynamoDB.ExecuteStatement.ExecuteStatementResponse
instance GHC.Show.Show Amazonka.DynamoDB.ExecuteStatement.ExecuteStatementResponse
instance GHC.Read.Read Amazonka.DynamoDB.ExecuteStatement.ExecuteStatementResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.ExecuteStatement.ExecuteStatementResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.ExecuteStatement.ExecuteStatement
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ExecuteStatement.ExecuteStatementResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.ExecuteStatement.ExecuteStatement
instance Control.DeepSeq.NFData Amazonka.DynamoDB.ExecuteStatement.ExecuteStatement
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.ExecuteStatement.ExecuteStatement
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.ExecuteStatement.ExecuteStatement
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.ExecuteStatement.ExecuteStatement
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.ExecuteStatement.ExecuteStatement


-- | Starts table data replication to the specified Kinesis data stream at
--   a timestamp chosen during the enable workflow. If this operation
--   doesn't return results immediately, use
--   DescribeKinesisStreamingDestination to check if streaming to the
--   Kinesis data stream is ACTIVE.
module Amazonka.DynamoDB.EnableKinesisStreamingDestination

-- | <i>See:</i> <a>newEnableKinesisStreamingDestination</a> smart
--   constructor.
data EnableKinesisStreamingDestination
EnableKinesisStreamingDestination' :: Text -> Text -> EnableKinesisStreamingDestination

-- | The name of the DynamoDB table.
[$sel:tableName:EnableKinesisStreamingDestination'] :: EnableKinesisStreamingDestination -> Text

-- | The ARN for a Kinesis data stream.
[$sel:streamArn:EnableKinesisStreamingDestination'] :: EnableKinesisStreamingDestination -> Text

-- | Create a value of <a>EnableKinesisStreamingDestination</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:EnableKinesisStreamingDestination'</a>,
--   <a>enableKinesisStreamingDestination_tableName</a> - The name of the
--   DynamoDB table.
--   
--   <a>$sel:streamArn:EnableKinesisStreamingDestination'</a>,
--   <a>enableKinesisStreamingDestination_streamArn</a> - The ARN for a
--   Kinesis data stream.
newEnableKinesisStreamingDestination :: Text -> Text -> EnableKinesisStreamingDestination

-- | The name of the DynamoDB table.
enableKinesisStreamingDestination_tableName :: Lens' EnableKinesisStreamingDestination Text

-- | The ARN for a Kinesis data stream.
enableKinesisStreamingDestination_streamArn :: Lens' EnableKinesisStreamingDestination Text

-- | <i>See:</i> <a>newKinesisStreamingDestinationOutput</a> smart
--   constructor.
data KinesisStreamingDestinationOutput
KinesisStreamingDestinationOutput' :: Maybe DestinationStatus -> Maybe Text -> Maybe Text -> KinesisStreamingDestinationOutput

-- | The current status of the replication.
[$sel:destinationStatus:KinesisStreamingDestinationOutput'] :: KinesisStreamingDestinationOutput -> Maybe DestinationStatus

-- | The ARN for the specific Kinesis data stream.
[$sel:streamArn:KinesisStreamingDestinationOutput'] :: KinesisStreamingDestinationOutput -> Maybe Text

-- | The name of the table being modified.
[$sel:tableName:KinesisStreamingDestinationOutput'] :: KinesisStreamingDestinationOutput -> Maybe Text

-- | Create a value of <a>KinesisStreamingDestinationOutput</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:destinationStatus:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_destinationStatus</a> - The
--   current status of the replication.
--   
--   <a>$sel:streamArn:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_streamArn</a> - The ARN for the
--   specific Kinesis data stream.
--   
--   <a>$sel:tableName:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_tableName</a> - The name of the
--   table being modified.
newKinesisStreamingDestinationOutput :: KinesisStreamingDestinationOutput

-- | The current status of the replication.
kinesisStreamingDestinationOutput_destinationStatus :: Lens' KinesisStreamingDestinationOutput (Maybe DestinationStatus)

-- | The ARN for the specific Kinesis data stream.
kinesisStreamingDestinationOutput_streamArn :: Lens' KinesisStreamingDestinationOutput (Maybe Text)

-- | The name of the table being modified.
kinesisStreamingDestinationOutput_tableName :: Lens' KinesisStreamingDestinationOutput (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.EnableKinesisStreamingDestination.EnableKinesisStreamingDestination
instance GHC.Show.Show Amazonka.DynamoDB.EnableKinesisStreamingDestination.EnableKinesisStreamingDestination
instance GHC.Read.Read Amazonka.DynamoDB.EnableKinesisStreamingDestination.EnableKinesisStreamingDestination
instance GHC.Classes.Eq Amazonka.DynamoDB.EnableKinesisStreamingDestination.EnableKinesisStreamingDestination
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.EnableKinesisStreamingDestination.EnableKinesisStreamingDestination
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.EnableKinesisStreamingDestination.EnableKinesisStreamingDestination
instance Control.DeepSeq.NFData Amazonka.DynamoDB.EnableKinesisStreamingDestination.EnableKinesisStreamingDestination
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.EnableKinesisStreamingDestination.EnableKinesisStreamingDestination
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.EnableKinesisStreamingDestination.EnableKinesisStreamingDestination
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.EnableKinesisStreamingDestination.EnableKinesisStreamingDestination
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.EnableKinesisStreamingDestination.EnableKinesisStreamingDestination


-- | Stops replication from the DynamoDB table to the Kinesis data stream.
--   This is done without deleting either of the resources.
module Amazonka.DynamoDB.DisableKinesisStreamingDestination

-- | <i>See:</i> <a>newDisableKinesisStreamingDestination</a> smart
--   constructor.
data DisableKinesisStreamingDestination
DisableKinesisStreamingDestination' :: Text -> Text -> DisableKinesisStreamingDestination

-- | The name of the DynamoDB table.
[$sel:tableName:DisableKinesisStreamingDestination'] :: DisableKinesisStreamingDestination -> Text

-- | The ARN for a Kinesis data stream.
[$sel:streamArn:DisableKinesisStreamingDestination'] :: DisableKinesisStreamingDestination -> Text

-- | Create a value of <a>DisableKinesisStreamingDestination</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DisableKinesisStreamingDestination'</a>,
--   <a>disableKinesisStreamingDestination_tableName</a> - The name of the
--   DynamoDB table.
--   
--   <a>$sel:streamArn:DisableKinesisStreamingDestination'</a>,
--   <a>disableKinesisStreamingDestination_streamArn</a> - The ARN for a
--   Kinesis data stream.
newDisableKinesisStreamingDestination :: Text -> Text -> DisableKinesisStreamingDestination

-- | The name of the DynamoDB table.
disableKinesisStreamingDestination_tableName :: Lens' DisableKinesisStreamingDestination Text

-- | The ARN for a Kinesis data stream.
disableKinesisStreamingDestination_streamArn :: Lens' DisableKinesisStreamingDestination Text

-- | <i>See:</i> <a>newKinesisStreamingDestinationOutput</a> smart
--   constructor.
data KinesisStreamingDestinationOutput
KinesisStreamingDestinationOutput' :: Maybe DestinationStatus -> Maybe Text -> Maybe Text -> KinesisStreamingDestinationOutput

-- | The current status of the replication.
[$sel:destinationStatus:KinesisStreamingDestinationOutput'] :: KinesisStreamingDestinationOutput -> Maybe DestinationStatus

-- | The ARN for the specific Kinesis data stream.
[$sel:streamArn:KinesisStreamingDestinationOutput'] :: KinesisStreamingDestinationOutput -> Maybe Text

-- | The name of the table being modified.
[$sel:tableName:KinesisStreamingDestinationOutput'] :: KinesisStreamingDestinationOutput -> Maybe Text

-- | Create a value of <a>KinesisStreamingDestinationOutput</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:destinationStatus:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_destinationStatus</a> - The
--   current status of the replication.
--   
--   <a>$sel:streamArn:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_streamArn</a> - The ARN for the
--   specific Kinesis data stream.
--   
--   <a>$sel:tableName:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_tableName</a> - The name of the
--   table being modified.
newKinesisStreamingDestinationOutput :: KinesisStreamingDestinationOutput

-- | The current status of the replication.
kinesisStreamingDestinationOutput_destinationStatus :: Lens' KinesisStreamingDestinationOutput (Maybe DestinationStatus)

-- | The ARN for the specific Kinesis data stream.
kinesisStreamingDestinationOutput_streamArn :: Lens' KinesisStreamingDestinationOutput (Maybe Text)

-- | The name of the table being modified.
kinesisStreamingDestinationOutput_tableName :: Lens' KinesisStreamingDestinationOutput (Maybe Text)
instance GHC.Generics.Generic Amazonka.DynamoDB.DisableKinesisStreamingDestination.DisableKinesisStreamingDestination
instance GHC.Show.Show Amazonka.DynamoDB.DisableKinesisStreamingDestination.DisableKinesisStreamingDestination
instance GHC.Read.Read Amazonka.DynamoDB.DisableKinesisStreamingDestination.DisableKinesisStreamingDestination
instance GHC.Classes.Eq Amazonka.DynamoDB.DisableKinesisStreamingDestination.DisableKinesisStreamingDestination
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DisableKinesisStreamingDestination.DisableKinesisStreamingDestination
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DisableKinesisStreamingDestination.DisableKinesisStreamingDestination
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DisableKinesisStreamingDestination.DisableKinesisStreamingDestination
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DisableKinesisStreamingDestination.DisableKinesisStreamingDestination
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DisableKinesisStreamingDestination.DisableKinesisStreamingDestination
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DisableKinesisStreamingDestination.DisableKinesisStreamingDestination
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DisableKinesisStreamingDestination.DisableKinesisStreamingDestination


-- | Gives a description of the Time to Live (TTL) status on the specified
--   table.
module Amazonka.DynamoDB.DescribeTimeToLive

-- | <i>See:</i> <a>newDescribeTimeToLive</a> smart constructor.
data DescribeTimeToLive
DescribeTimeToLive' :: Text -> DescribeTimeToLive

-- | The name of the table to be described.
[$sel:tableName:DescribeTimeToLive'] :: DescribeTimeToLive -> Text

-- | Create a value of <a>DescribeTimeToLive</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DescribeTimeToLive'</a>,
--   <a>describeTimeToLive_tableName</a> - The name of the table to be
--   described.
newDescribeTimeToLive :: Text -> DescribeTimeToLive

-- | The name of the table to be described.
describeTimeToLive_tableName :: Lens' DescribeTimeToLive Text

-- | <i>See:</i> <a>newDescribeTimeToLiveResponse</a> smart constructor.
data DescribeTimeToLiveResponse
DescribeTimeToLiveResponse' :: Maybe TimeToLiveDescription -> Int -> DescribeTimeToLiveResponse
[$sel:timeToLiveDescription:DescribeTimeToLiveResponse'] :: DescribeTimeToLiveResponse -> Maybe TimeToLiveDescription

-- | The response's http status code.
[$sel:httpStatus:DescribeTimeToLiveResponse'] :: DescribeTimeToLiveResponse -> Int

-- | Create a value of <a>DescribeTimeToLiveResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeToLiveDescription:DescribeTimeToLiveResponse'</a>,
--   <a>describeTimeToLiveResponse_timeToLiveDescription</a> -
--   
--   <a>$sel:httpStatus:DescribeTimeToLiveResponse'</a>,
--   <a>describeTimeToLiveResponse_httpStatus</a> - The response's http
--   status code.
newDescribeTimeToLiveResponse :: Int -> DescribeTimeToLiveResponse

describeTimeToLiveResponse_timeToLiveDescription :: Lens' DescribeTimeToLiveResponse (Maybe TimeToLiveDescription)

-- | The response's http status code.
describeTimeToLiveResponse_httpStatus :: Lens' DescribeTimeToLiveResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLive
instance GHC.Show.Show Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLive
instance GHC.Read.Read Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLive
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLive
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLiveResponse
instance GHC.Show.Show Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLiveResponse
instance GHC.Read.Read Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLiveResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLiveResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLive
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLiveResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLive
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLive
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLive
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLive
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLive
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DescribeTimeToLive.DescribeTimeToLive


-- | Describes auto scaling settings across replicas of the global table at
--   once.
--   
--   This operation only applies to <a>Version 2019.11.21</a> of global
--   tables.
module Amazonka.DynamoDB.DescribeTableReplicaAutoScaling

-- | <i>See:</i> <a>newDescribeTableReplicaAutoScaling</a> smart
--   constructor.
data DescribeTableReplicaAutoScaling
DescribeTableReplicaAutoScaling' :: Text -> DescribeTableReplicaAutoScaling

-- | The name of the table.
[$sel:tableName:DescribeTableReplicaAutoScaling'] :: DescribeTableReplicaAutoScaling -> Text

-- | Create a value of <a>DescribeTableReplicaAutoScaling</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DescribeTableReplicaAutoScaling'</a>,
--   <a>describeTableReplicaAutoScaling_tableName</a> - The name of the
--   table.
newDescribeTableReplicaAutoScaling :: Text -> DescribeTableReplicaAutoScaling

-- | The name of the table.
describeTableReplicaAutoScaling_tableName :: Lens' DescribeTableReplicaAutoScaling Text

-- | <i>See:</i> <a>newDescribeTableReplicaAutoScalingResponse</a> smart
--   constructor.
data DescribeTableReplicaAutoScalingResponse
DescribeTableReplicaAutoScalingResponse' :: Maybe TableAutoScalingDescription -> Int -> DescribeTableReplicaAutoScalingResponse

-- | Represents the auto scaling properties of the table.
[$sel:tableAutoScalingDescription:DescribeTableReplicaAutoScalingResponse'] :: DescribeTableReplicaAutoScalingResponse -> Maybe TableAutoScalingDescription

-- | The response's http status code.
[$sel:httpStatus:DescribeTableReplicaAutoScalingResponse'] :: DescribeTableReplicaAutoScalingResponse -> Int

-- | Create a value of <a>DescribeTableReplicaAutoScalingResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:tableAutoScalingDescription:DescribeTableReplicaAutoScalingResponse'</a>,
--   <a>describeTableReplicaAutoScalingResponse_tableAutoScalingDescription</a>
--   - Represents the auto scaling properties of the table.
--   
--   <a>$sel:httpStatus:DescribeTableReplicaAutoScalingResponse'</a>,
--   <a>describeTableReplicaAutoScalingResponse_httpStatus</a> - The
--   response's http status code.
newDescribeTableReplicaAutoScalingResponse :: Int -> DescribeTableReplicaAutoScalingResponse

-- | Represents the auto scaling properties of the table.
describeTableReplicaAutoScalingResponse_tableAutoScalingDescription :: Lens' DescribeTableReplicaAutoScalingResponse (Maybe TableAutoScalingDescription)

-- | The response's http status code.
describeTableReplicaAutoScalingResponse_httpStatus :: Lens' DescribeTableReplicaAutoScalingResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScaling
instance GHC.Show.Show Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScaling
instance GHC.Read.Read Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScaling
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScaling
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScalingResponse
instance GHC.Show.Show Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScalingResponse
instance GHC.Read.Read Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScalingResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScalingResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScaling
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScalingResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScaling
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScaling
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScaling
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScaling
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScaling
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DescribeTableReplicaAutoScaling.DescribeTableReplicaAutoScaling


-- | Returns information about the table, including the current status of
--   the table, when it was created, the primary key schema, and any
--   indexes on the table.
--   
--   If you issue a <tt>DescribeTable</tt> request immediately after a
--   <tt>CreateTable</tt> request, DynamoDB might return a
--   <tt>ResourceNotFoundException</tt>. This is because
--   <tt>DescribeTable</tt> uses an eventually consistent query, and the
--   metadata for your table might not be available at that moment. Wait
--   for a few seconds, and then try the <tt>DescribeTable</tt> request
--   again.
module Amazonka.DynamoDB.DescribeTable

-- | Represents the input of a <tt>DescribeTable</tt> operation.
--   
--   <i>See:</i> <a>newDescribeTable</a> smart constructor.
data DescribeTable
DescribeTable' :: Text -> DescribeTable

-- | The name of the table to describe.
[$sel:tableName:DescribeTable'] :: DescribeTable -> Text

-- | Create a value of <a>DescribeTable</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DescribeTable'</a>, <a>describeTable_tableName</a> -
--   The name of the table to describe.
newDescribeTable :: Text -> DescribeTable

-- | The name of the table to describe.
describeTable_tableName :: Lens' DescribeTable Text

-- | Represents the output of a <tt>DescribeTable</tt> operation.
--   
--   <i>See:</i> <a>newDescribeTableResponse</a> smart constructor.
data DescribeTableResponse
DescribeTableResponse' :: Maybe TableDescription -> Int -> DescribeTableResponse

-- | The properties of the table.
[$sel:table:DescribeTableResponse'] :: DescribeTableResponse -> Maybe TableDescription

-- | The response's http status code.
[$sel:httpStatus:DescribeTableResponse'] :: DescribeTableResponse -> Int

-- | Create a value of <a>DescribeTableResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:table:DescribeTableResponse'</a>,
--   <a>describeTableResponse_table</a> - The properties of the table.
--   
--   <a>$sel:httpStatus:DescribeTableResponse'</a>,
--   <a>describeTableResponse_httpStatus</a> - The response's http status
--   code.
newDescribeTableResponse :: Int -> DescribeTableResponse

-- | The properties of the table.
describeTableResponse_table :: Lens' DescribeTableResponse (Maybe TableDescription)

-- | The response's http status code.
describeTableResponse_httpStatus :: Lens' DescribeTableResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeTable.DescribeTable
instance GHC.Show.Show Amazonka.DynamoDB.DescribeTable.DescribeTable
instance GHC.Read.Read Amazonka.DynamoDB.DescribeTable.DescribeTable
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeTable.DescribeTable
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeTable.DescribeTableResponse
instance GHC.Show.Show Amazonka.DynamoDB.DescribeTable.DescribeTableResponse
instance GHC.Read.Read Amazonka.DynamoDB.DescribeTable.DescribeTableResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeTable.DescribeTableResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DescribeTable.DescribeTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeTable.DescribeTableResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DescribeTable.DescribeTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeTable.DescribeTable
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DescribeTable.DescribeTable
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DescribeTable.DescribeTable
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DescribeTable.DescribeTable
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DescribeTable.DescribeTable


-- | Returns the current provisioned-capacity quotas for your AWS account
--   in a Region, both for the Region as a whole and for any one DynamoDB
--   table that you create there.
--   
--   When you establish an AWS account, the account has initial quotas on
--   the maximum read capacity units and write capacity units that you can
--   provision across all of your DynamoDB tables in a given Region. Also,
--   there are per-table quotas that apply when you create a table there.
--   For more information, see <a>Service, Account, and Table Quotas</a>
--   page in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   Although you can increase these quotas by filing a case at <a>AWS
--   Support Center</a>, obtaining the increase is not instantaneous. The
--   <tt>DescribeLimits</tt> action lets you write code to compare the
--   capacity you are currently using to those quotas imposed by your
--   account so that you have enough time to apply for an increase before
--   you hit a quota.
--   
--   For example, you could use one of the AWS SDKs to do the following:
--   
--   <ol>
--   <li>Call <tt>DescribeLimits</tt> for a particular Region to obtain
--   your current account quotas on provisioned capacity there.</li>
--   <li>Create a variable to hold the aggregate read capacity units
--   provisioned for all your tables in that Region, and one to hold the
--   aggregate write capacity units. Zero them both.</li>
--   <li>Call <tt>ListTables</tt> to obtain a list of all your DynamoDB
--   tables.</li>
--   <li>For each table name listed by <tt>ListTables</tt>, do the
--   following:<ul><li>Call <tt>DescribeTable</tt> with the table
--   name.</li><li>Use the data returned by <tt>DescribeTable</tt> to add
--   the read capacity units and write capacity units provisioned for the
--   table itself to your variables.</li><li>If the table has one or more
--   global secondary indexes (GSIs), loop over these GSIs and add their
--   provisioned capacity values to your variables as well.</li></ul></li>
--   <li>Report the account quotas for that Region returned by
--   <tt>DescribeLimits</tt>, along with the total current provisioned
--   capacity levels you have calculated.</li>
--   </ol>
--   
--   This will let you see whether you are getting close to your
--   account-level quotas.
--   
--   The per-table quotas apply only when you are creating a new table.
--   They restrict the sum of the provisioned capacity of the new table
--   itself and all its global secondary indexes.
--   
--   For existing tables and their GSIs, DynamoDB doesn't let you increase
--   provisioned capacity extremely rapidly, but the only quota that
--   applies is that the aggregate provisioned capacity over all your
--   tables and GSIs cannot exceed either of the per-account quotas.
--   
--   <tt>DescribeLimits</tt> should only be called periodically. You can
--   expect throttling errors if you call it more than once in a minute.
--   
--   The <tt>DescribeLimits</tt> Request element has no content.
module Amazonka.DynamoDB.DescribeLimits

-- | Represents the input of a <tt>DescribeLimits</tt> operation. Has no
--   content.
--   
--   <i>See:</i> <a>newDescribeLimits</a> smart constructor.
data DescribeLimits
DescribeLimits' :: DescribeLimits

-- | Create a value of <a>DescribeLimits</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDescribeLimits :: DescribeLimits

-- | Represents the output of a <tt>DescribeLimits</tt> operation.
--   
--   <i>See:</i> <a>newDescribeLimitsResponse</a> smart constructor.
data DescribeLimitsResponse
DescribeLimitsResponse' :: Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Int -> DescribeLimitsResponse

-- | The maximum write capacity units that your account allows you to
--   provision for a new table that you are creating in this Region,
--   including the write capacity units provisioned for its global
--   secondary indexes (GSIs).
[$sel:tableMaxWriteCapacityUnits:DescribeLimitsResponse'] :: DescribeLimitsResponse -> Maybe Natural

-- | The maximum read capacity units that your account allows you to
--   provision for a new table that you are creating in this Region,
--   including the read capacity units provisioned for its global secondary
--   indexes (GSIs).
[$sel:tableMaxReadCapacityUnits:DescribeLimitsResponse'] :: DescribeLimitsResponse -> Maybe Natural

-- | The maximum total write capacity units that your account allows you to
--   provision across all of your tables in this Region.
[$sel:accountMaxWriteCapacityUnits:DescribeLimitsResponse'] :: DescribeLimitsResponse -> Maybe Natural

-- | The maximum total read capacity units that your account allows you to
--   provision across all of your tables in this Region.
[$sel:accountMaxReadCapacityUnits:DescribeLimitsResponse'] :: DescribeLimitsResponse -> Maybe Natural

-- | The response's http status code.
[$sel:httpStatus:DescribeLimitsResponse'] :: DescribeLimitsResponse -> Int

-- | Create a value of <a>DescribeLimitsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableMaxWriteCapacityUnits:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_tableMaxWriteCapacityUnits</a> - The maximum
--   write capacity units that your account allows you to provision for a
--   new table that you are creating in this Region, including the write
--   capacity units provisioned for its global secondary indexes (GSIs).
--   
--   <a>$sel:tableMaxReadCapacityUnits:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_tableMaxReadCapacityUnits</a> - The maximum
--   read capacity units that your account allows you to provision for a
--   new table that you are creating in this Region, including the read
--   capacity units provisioned for its global secondary indexes (GSIs).
--   
--   <a>$sel:accountMaxWriteCapacityUnits:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_accountMaxWriteCapacityUnits</a> - The
--   maximum total write capacity units that your account allows you to
--   provision across all of your tables in this Region.
--   
--   <a>$sel:accountMaxReadCapacityUnits:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_accountMaxReadCapacityUnits</a> - The
--   maximum total read capacity units that your account allows you to
--   provision across all of your tables in this Region.
--   
--   <a>$sel:httpStatus:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_httpStatus</a> - The response's http status
--   code.
newDescribeLimitsResponse :: Int -> DescribeLimitsResponse

-- | The maximum write capacity units that your account allows you to
--   provision for a new table that you are creating in this Region,
--   including the write capacity units provisioned for its global
--   secondary indexes (GSIs).
describeLimitsResponse_tableMaxWriteCapacityUnits :: Lens' DescribeLimitsResponse (Maybe Natural)

-- | The maximum read capacity units that your account allows you to
--   provision for a new table that you are creating in this Region,
--   including the read capacity units provisioned for its global secondary
--   indexes (GSIs).
describeLimitsResponse_tableMaxReadCapacityUnits :: Lens' DescribeLimitsResponse (Maybe Natural)

-- | The maximum total write capacity units that your account allows you to
--   provision across all of your tables in this Region.
describeLimitsResponse_accountMaxWriteCapacityUnits :: Lens' DescribeLimitsResponse (Maybe Natural)

-- | The maximum total read capacity units that your account allows you to
--   provision across all of your tables in this Region.
describeLimitsResponse_accountMaxReadCapacityUnits :: Lens' DescribeLimitsResponse (Maybe Natural)

-- | The response's http status code.
describeLimitsResponse_httpStatus :: Lens' DescribeLimitsResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeLimits.DescribeLimits
instance GHC.Show.Show Amazonka.DynamoDB.DescribeLimits.DescribeLimits
instance GHC.Read.Read Amazonka.DynamoDB.DescribeLimits.DescribeLimits
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeLimits.DescribeLimits
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeLimits.DescribeLimitsResponse
instance GHC.Show.Show Amazonka.DynamoDB.DescribeLimits.DescribeLimitsResponse
instance GHC.Read.Read Amazonka.DynamoDB.DescribeLimits.DescribeLimitsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeLimits.DescribeLimitsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DescribeLimits.DescribeLimits
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeLimits.DescribeLimitsResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DescribeLimits.DescribeLimits
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeLimits.DescribeLimits
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DescribeLimits.DescribeLimits
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DescribeLimits.DescribeLimits
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DescribeLimits.DescribeLimits
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DescribeLimits.DescribeLimits


-- | Returns information about the status of Kinesis streaming.
module Amazonka.DynamoDB.DescribeKinesisStreamingDestination

-- | <i>See:</i> <a>newDescribeKinesisStreamingDestination</a> smart
--   constructor.
data DescribeKinesisStreamingDestination
DescribeKinesisStreamingDestination' :: Text -> DescribeKinesisStreamingDestination

-- | The name of the table being described.
[$sel:tableName:DescribeKinesisStreamingDestination'] :: DescribeKinesisStreamingDestination -> Text

-- | Create a value of <a>DescribeKinesisStreamingDestination</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DescribeKinesisStreamingDestination'</a>,
--   <a>describeKinesisStreamingDestination_tableName</a> - The name of the
--   table being described.
newDescribeKinesisStreamingDestination :: Text -> DescribeKinesisStreamingDestination

-- | The name of the table being described.
describeKinesisStreamingDestination_tableName :: Lens' DescribeKinesisStreamingDestination Text

-- | <i>See:</i> <a>newDescribeKinesisStreamingDestinationResponse</a>
--   smart constructor.
data DescribeKinesisStreamingDestinationResponse
DescribeKinesisStreamingDestinationResponse' :: Maybe [KinesisDataStreamDestination] -> Maybe Text -> Int -> DescribeKinesisStreamingDestinationResponse

-- | The list of replica structures for the table being described.
[$sel:kinesisDataStreamDestinations:DescribeKinesisStreamingDestinationResponse'] :: DescribeKinesisStreamingDestinationResponse -> Maybe [KinesisDataStreamDestination]

-- | The name of the table being described.
[$sel:tableName:DescribeKinesisStreamingDestinationResponse'] :: DescribeKinesisStreamingDestinationResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DescribeKinesisStreamingDestinationResponse'] :: DescribeKinesisStreamingDestinationResponse -> Int

-- | Create a value of <a>DescribeKinesisStreamingDestinationResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:kinesisDataStreamDestinations:DescribeKinesisStreamingDestinationResponse'</a>,
--   <a>describeKinesisStreamingDestinationResponse_kinesisDataStreamDestinations</a>
--   - The list of replica structures for the table being described.
--   
--   <a>$sel:tableName:DescribeKinesisStreamingDestination'</a>,
--   <a>describeKinesisStreamingDestinationResponse_tableName</a> - The
--   name of the table being described.
--   
--   <a>$sel:httpStatus:DescribeKinesisStreamingDestinationResponse'</a>,
--   <a>describeKinesisStreamingDestinationResponse_httpStatus</a> - The
--   response's http status code.
newDescribeKinesisStreamingDestinationResponse :: Int -> DescribeKinesisStreamingDestinationResponse

-- | The list of replica structures for the table being described.
describeKinesisStreamingDestinationResponse_kinesisDataStreamDestinations :: Lens' DescribeKinesisStreamingDestinationResponse (Maybe [KinesisDataStreamDestination])

-- | The name of the table being described.
describeKinesisStreamingDestinationResponse_tableName :: Lens' DescribeKinesisStreamingDestinationResponse (Maybe Text)

-- | The response's http status code.
describeKinesisStreamingDestinationResponse_httpStatus :: Lens' DescribeKinesisStreamingDestinationResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestination
instance GHC.Show.Show Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestination
instance GHC.Read.Read Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestination
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestination
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestinationResponse
instance GHC.Show.Show Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestinationResponse
instance GHC.Read.Read Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestinationResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestinationResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestination
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestinationResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestination
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestination
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestination
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestination
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestination
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DescribeKinesisStreamingDestination.DescribeKinesisStreamingDestination


-- | Describes Region-specific settings for a global table.
--   
--   This operation only applies to <a>Version 2017.11.29</a> of global
--   tables.
module Amazonka.DynamoDB.DescribeGlobalTableSettings

-- | <i>See:</i> <a>newDescribeGlobalTableSettings</a> smart constructor.
data DescribeGlobalTableSettings
DescribeGlobalTableSettings' :: Text -> DescribeGlobalTableSettings

-- | The name of the global table to describe.
[$sel:globalTableName:DescribeGlobalTableSettings'] :: DescribeGlobalTableSettings -> Text

-- | Create a value of <a>DescribeGlobalTableSettings</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableName:DescribeGlobalTableSettings'</a>,
--   <a>describeGlobalTableSettings_globalTableName</a> - The name of the
--   global table to describe.
newDescribeGlobalTableSettings :: Text -> DescribeGlobalTableSettings

-- | The name of the global table to describe.
describeGlobalTableSettings_globalTableName :: Lens' DescribeGlobalTableSettings Text

-- | <i>See:</i> <a>newDescribeGlobalTableSettingsResponse</a> smart
--   constructor.
data DescribeGlobalTableSettingsResponse
DescribeGlobalTableSettingsResponse' :: Maybe [ReplicaSettingsDescription] -> Maybe Text -> Int -> DescribeGlobalTableSettingsResponse

-- | The Region-specific settings for the global table.
[$sel:replicaSettings:DescribeGlobalTableSettingsResponse'] :: DescribeGlobalTableSettingsResponse -> Maybe [ReplicaSettingsDescription]

-- | The name of the global table.
[$sel:globalTableName:DescribeGlobalTableSettingsResponse'] :: DescribeGlobalTableSettingsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DescribeGlobalTableSettingsResponse'] :: DescribeGlobalTableSettingsResponse -> Int

-- | Create a value of <a>DescribeGlobalTableSettingsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaSettings:DescribeGlobalTableSettingsResponse'</a>,
--   <a>describeGlobalTableSettingsResponse_replicaSettings</a> - The
--   Region-specific settings for the global table.
--   
--   <a>$sel:globalTableName:DescribeGlobalTableSettings'</a>,
--   <a>describeGlobalTableSettingsResponse_globalTableName</a> - The name
--   of the global table.
--   
--   <a>$sel:httpStatus:DescribeGlobalTableSettingsResponse'</a>,
--   <a>describeGlobalTableSettingsResponse_httpStatus</a> - The response's
--   http status code.
newDescribeGlobalTableSettingsResponse :: Int -> DescribeGlobalTableSettingsResponse

-- | The Region-specific settings for the global table.
describeGlobalTableSettingsResponse_replicaSettings :: Lens' DescribeGlobalTableSettingsResponse (Maybe [ReplicaSettingsDescription])

-- | The name of the global table.
describeGlobalTableSettingsResponse_globalTableName :: Lens' DescribeGlobalTableSettingsResponse (Maybe Text)

-- | The response's http status code.
describeGlobalTableSettingsResponse_httpStatus :: Lens' DescribeGlobalTableSettingsResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettings
instance GHC.Show.Show Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettings
instance GHC.Read.Read Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettings
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettings
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettingsResponse
instance GHC.Show.Show Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettingsResponse
instance GHC.Read.Read Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettingsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettingsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettings
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettingsResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettings
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettings
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettings
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettings
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettings
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DescribeGlobalTableSettings.DescribeGlobalTableSettings


-- | Returns information about the specified global table.
--   
--   This operation only applies to <a>Version 2017.11.29</a> of global
--   tables. If you are using global tables <a>Version 2019.11.21</a> you
--   can use <a>DescribeTable</a> instead.
module Amazonka.DynamoDB.DescribeGlobalTable

-- | <i>See:</i> <a>newDescribeGlobalTable</a> smart constructor.
data DescribeGlobalTable
DescribeGlobalTable' :: Text -> DescribeGlobalTable

-- | The name of the global table.
[$sel:globalTableName:DescribeGlobalTable'] :: DescribeGlobalTable -> Text

-- | Create a value of <a>DescribeGlobalTable</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableName:DescribeGlobalTable'</a>,
--   <a>describeGlobalTable_globalTableName</a> - The name of the global
--   table.
newDescribeGlobalTable :: Text -> DescribeGlobalTable

-- | The name of the global table.
describeGlobalTable_globalTableName :: Lens' DescribeGlobalTable Text

-- | <i>See:</i> <a>newDescribeGlobalTableResponse</a> smart constructor.
data DescribeGlobalTableResponse
DescribeGlobalTableResponse' :: Maybe GlobalTableDescription -> Int -> DescribeGlobalTableResponse

-- | Contains the details of the global table.
[$sel:globalTableDescription:DescribeGlobalTableResponse'] :: DescribeGlobalTableResponse -> Maybe GlobalTableDescription

-- | The response's http status code.
[$sel:httpStatus:DescribeGlobalTableResponse'] :: DescribeGlobalTableResponse -> Int

-- | Create a value of <a>DescribeGlobalTableResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableDescription:DescribeGlobalTableResponse'</a>,
--   <a>describeGlobalTableResponse_globalTableDescription</a> - Contains
--   the details of the global table.
--   
--   <a>$sel:httpStatus:DescribeGlobalTableResponse'</a>,
--   <a>describeGlobalTableResponse_httpStatus</a> - The response's http
--   status code.
newDescribeGlobalTableResponse :: Int -> DescribeGlobalTableResponse

-- | Contains the details of the global table.
describeGlobalTableResponse_globalTableDescription :: Lens' DescribeGlobalTableResponse (Maybe GlobalTableDescription)

-- | The response's http status code.
describeGlobalTableResponse_httpStatus :: Lens' DescribeGlobalTableResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTable
instance GHC.Show.Show Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTable
instance GHC.Read.Read Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTable
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTable
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTableResponse
instance GHC.Show.Show Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTableResponse
instance GHC.Read.Read Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTableResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTableResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTableResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTable
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTable
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTable
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTable
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DescribeGlobalTable.DescribeGlobalTable


-- | Describes an existing table export.
module Amazonka.DynamoDB.DescribeExport

-- | <i>See:</i> <a>newDescribeExport</a> smart constructor.
data DescribeExport
DescribeExport' :: Text -> DescribeExport

-- | The Amazon Resource Name (ARN) associated with the export.
[$sel:exportArn:DescribeExport'] :: DescribeExport -> Text

-- | Create a value of <a>DescribeExport</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exportArn:DescribeExport'</a>, <a>describeExport_exportArn</a>
--   - The Amazon Resource Name (ARN) associated with the export.
newDescribeExport :: Text -> DescribeExport

-- | The Amazon Resource Name (ARN) associated with the export.
describeExport_exportArn :: Lens' DescribeExport Text

-- | <i>See:</i> <a>newDescribeExportResponse</a> smart constructor.
data DescribeExportResponse
DescribeExportResponse' :: Maybe ExportDescription -> Int -> DescribeExportResponse

-- | Represents the properties of the export.
[$sel:exportDescription:DescribeExportResponse'] :: DescribeExportResponse -> Maybe ExportDescription

-- | The response's http status code.
[$sel:httpStatus:DescribeExportResponse'] :: DescribeExportResponse -> Int

-- | Create a value of <a>DescribeExportResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exportDescription:DescribeExportResponse'</a>,
--   <a>describeExportResponse_exportDescription</a> - Represents the
--   properties of the export.
--   
--   <a>$sel:httpStatus:DescribeExportResponse'</a>,
--   <a>describeExportResponse_httpStatus</a> - The response's http status
--   code.
newDescribeExportResponse :: Int -> DescribeExportResponse

-- | Represents the properties of the export.
describeExportResponse_exportDescription :: Lens' DescribeExportResponse (Maybe ExportDescription)

-- | The response's http status code.
describeExportResponse_httpStatus :: Lens' DescribeExportResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeExport.DescribeExport
instance GHC.Show.Show Amazonka.DynamoDB.DescribeExport.DescribeExport
instance GHC.Read.Read Amazonka.DynamoDB.DescribeExport.DescribeExport
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeExport.DescribeExport
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeExport.DescribeExportResponse
instance GHC.Show.Show Amazonka.DynamoDB.DescribeExport.DescribeExportResponse
instance GHC.Read.Read Amazonka.DynamoDB.DescribeExport.DescribeExportResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeExport.DescribeExportResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DescribeExport.DescribeExport
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeExport.DescribeExportResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DescribeExport.DescribeExport
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeExport.DescribeExport
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DescribeExport.DescribeExport
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DescribeExport.DescribeExport
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DescribeExport.DescribeExport
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DescribeExport.DescribeExport


-- | Returns the regional endpoint information.
module Amazonka.DynamoDB.DescribeEndpoints

-- | <i>See:</i> <a>newDescribeEndpoints</a> smart constructor.
data DescribeEndpoints
DescribeEndpoints' :: DescribeEndpoints

-- | Create a value of <a>DescribeEndpoints</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDescribeEndpoints :: DescribeEndpoints

-- | <i>See:</i> <a>newDescribeEndpointsResponse</a> smart constructor.
data DescribeEndpointsResponse
DescribeEndpointsResponse' :: Int -> [Endpoint] -> DescribeEndpointsResponse

-- | The response's http status code.
[$sel:httpStatus:DescribeEndpointsResponse'] :: DescribeEndpointsResponse -> Int

-- | List of endpoints.
[$sel:endpoints:DescribeEndpointsResponse'] :: DescribeEndpointsResponse -> [Endpoint]

-- | Create a value of <a>DescribeEndpointsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DescribeEndpointsResponse'</a>,
--   <a>describeEndpointsResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:endpoints:DescribeEndpointsResponse'</a>,
--   <a>describeEndpointsResponse_endpoints</a> - List of endpoints.
newDescribeEndpointsResponse :: Int -> DescribeEndpointsResponse

-- | The response's http status code.
describeEndpointsResponse_httpStatus :: Lens' DescribeEndpointsResponse Int

-- | List of endpoints.
describeEndpointsResponse_endpoints :: Lens' DescribeEndpointsResponse [Endpoint]
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpoints
instance GHC.Show.Show Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpoints
instance GHC.Read.Read Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpoints
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpoints
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpointsResponse
instance GHC.Show.Show Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpointsResponse
instance GHC.Read.Read Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpointsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpointsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpoints
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpointsResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpoints
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpoints
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpoints
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpoints
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpoints
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DescribeEndpoints.DescribeEndpoints


-- | Returns information about contributor insights, for a given table or
--   global secondary index.
module Amazonka.DynamoDB.DescribeContributorInsights

-- | <i>See:</i> <a>newDescribeContributorInsights</a> smart constructor.
data DescribeContributorInsights
DescribeContributorInsights' :: Maybe Text -> Text -> DescribeContributorInsights

-- | The name of the global secondary index to describe, if applicable.
[$sel:indexName:DescribeContributorInsights'] :: DescribeContributorInsights -> Maybe Text

-- | The name of the table to describe.
[$sel:tableName:DescribeContributorInsights'] :: DescribeContributorInsights -> Text

-- | Create a value of <a>DescribeContributorInsights</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:DescribeContributorInsights'</a>,
--   <a>describeContributorInsights_indexName</a> - The name of the global
--   secondary index to describe, if applicable.
--   
--   <a>$sel:tableName:DescribeContributorInsights'</a>,
--   <a>describeContributorInsights_tableName</a> - The name of the table
--   to describe.
newDescribeContributorInsights :: Text -> DescribeContributorInsights

-- | The name of the global secondary index to describe, if applicable.
describeContributorInsights_indexName :: Lens' DescribeContributorInsights (Maybe Text)

-- | The name of the table to describe.
describeContributorInsights_tableName :: Lens' DescribeContributorInsights Text

-- | <i>See:</i> <a>newDescribeContributorInsightsResponse</a> smart
--   constructor.
data DescribeContributorInsightsResponse
DescribeContributorInsightsResponse' :: Maybe [Text] -> Maybe FailureException -> Maybe ContributorInsightsStatus -> Maybe POSIX -> Maybe Text -> Maybe Text -> Int -> DescribeContributorInsightsResponse

-- | List of names of the associated Alpine rules.
[$sel:contributorInsightsRuleList:DescribeContributorInsightsResponse'] :: DescribeContributorInsightsResponse -> Maybe [Text]

-- | Returns information about the last failure that encountered.
--   
--   The most common exceptions for a FAILED status are:
--   
--   <ul>
--   <li>LimitExceededException - Per-account Amazon CloudWatch Contributor
--   Insights rule limit reached. Please disable Contributor Insights for
--   other tables/indexes OR disable Contributor Insights rules before
--   retrying.</li>
--   <li>AccessDeniedException - Amazon CloudWatch Contributor Insights
--   rules cannot be modified due to insufficient permissions.</li>
--   <li>AccessDeniedException - Failed to create service-linked role for
--   Contributor Insights due to insufficient permissions.</li>
--   <li>InternalServerError - Failed to create Amazon CloudWatch
--   Contributor Insights rules. Please retry request.</li>
--   </ul>
[$sel:failureException:DescribeContributorInsightsResponse'] :: DescribeContributorInsightsResponse -> Maybe FailureException

-- | Current Status contributor insights.
[$sel:contributorInsightsStatus:DescribeContributorInsightsResponse'] :: DescribeContributorInsightsResponse -> Maybe ContributorInsightsStatus

-- | Timestamp of the last time the status was changed.
[$sel:lastUpdateDateTime:DescribeContributorInsightsResponse'] :: DescribeContributorInsightsResponse -> Maybe POSIX

-- | The name of the table being described.
[$sel:tableName:DescribeContributorInsightsResponse'] :: DescribeContributorInsightsResponse -> Maybe Text

-- | The name of the global secondary index being described.
[$sel:indexName:DescribeContributorInsightsResponse'] :: DescribeContributorInsightsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DescribeContributorInsightsResponse'] :: DescribeContributorInsightsResponse -> Int

-- | Create a value of <a>DescribeContributorInsightsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:contributorInsightsRuleList:DescribeContributorInsightsResponse'</a>,
--   <a>describeContributorInsightsResponse_contributorInsightsRuleList</a>
--   - List of names of the associated Alpine rules.
--   
--   <a>$sel:failureException:DescribeContributorInsightsResponse'</a>,
--   <a>describeContributorInsightsResponse_failureException</a> - Returns
--   information about the last failure that encountered.
--   
--   The most common exceptions for a FAILED status are:
--   
--   <ul>
--   <li>LimitExceededException - Per-account Amazon CloudWatch Contributor
--   Insights rule limit reached. Please disable Contributor Insights for
--   other tables/indexes OR disable Contributor Insights rules before
--   retrying.</li>
--   <li>AccessDeniedException - Amazon CloudWatch Contributor Insights
--   rules cannot be modified due to insufficient permissions.</li>
--   <li>AccessDeniedException - Failed to create service-linked role for
--   Contributor Insights due to insufficient permissions.</li>
--   <li>InternalServerError - Failed to create Amazon CloudWatch
--   Contributor Insights rules. Please retry request.</li>
--   </ul>
--   
--   
--   <a>$sel:contributorInsightsStatus:DescribeContributorInsightsResponse'</a>,
--   <a>describeContributorInsightsResponse_contributorInsightsStatus</a> -
--   Current Status contributor insights.
--   
--   <a>$sel:lastUpdateDateTime:DescribeContributorInsightsResponse'</a>,
--   <a>describeContributorInsightsResponse_lastUpdateDateTime</a> -
--   Timestamp of the last time the status was changed.
--   
--   <a>$sel:tableName:DescribeContributorInsights'</a>,
--   <a>describeContributorInsightsResponse_tableName</a> - The name of the
--   table being described.
--   
--   <a>$sel:indexName:DescribeContributorInsights'</a>,
--   <a>describeContributorInsightsResponse_indexName</a> - The name of the
--   global secondary index being described.
--   
--   <a>$sel:httpStatus:DescribeContributorInsightsResponse'</a>,
--   <a>describeContributorInsightsResponse_httpStatus</a> - The response's
--   http status code.
newDescribeContributorInsightsResponse :: Int -> DescribeContributorInsightsResponse

-- | List of names of the associated Alpine rules.
describeContributorInsightsResponse_contributorInsightsRuleList :: Lens' DescribeContributorInsightsResponse (Maybe [Text])

-- | Returns information about the last failure that encountered.
--   
--   The most common exceptions for a FAILED status are:
--   
--   <ul>
--   <li>LimitExceededException - Per-account Amazon CloudWatch Contributor
--   Insights rule limit reached. Please disable Contributor Insights for
--   other tables/indexes OR disable Contributor Insights rules before
--   retrying.</li>
--   <li>AccessDeniedException - Amazon CloudWatch Contributor Insights
--   rules cannot be modified due to insufficient permissions.</li>
--   <li>AccessDeniedException - Failed to create service-linked role for
--   Contributor Insights due to insufficient permissions.</li>
--   <li>InternalServerError - Failed to create Amazon CloudWatch
--   Contributor Insights rules. Please retry request.</li>
--   </ul>
describeContributorInsightsResponse_failureException :: Lens' DescribeContributorInsightsResponse (Maybe FailureException)

-- | Current Status contributor insights.
describeContributorInsightsResponse_contributorInsightsStatus :: Lens' DescribeContributorInsightsResponse (Maybe ContributorInsightsStatus)

-- | Timestamp of the last time the status was changed.
describeContributorInsightsResponse_lastUpdateDateTime :: Lens' DescribeContributorInsightsResponse (Maybe UTCTime)

-- | The name of the table being described.
describeContributorInsightsResponse_tableName :: Lens' DescribeContributorInsightsResponse (Maybe Text)

-- | The name of the global secondary index being described.
describeContributorInsightsResponse_indexName :: Lens' DescribeContributorInsightsResponse (Maybe Text)

-- | The response's http status code.
describeContributorInsightsResponse_httpStatus :: Lens' DescribeContributorInsightsResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsights
instance GHC.Show.Show Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsights
instance GHC.Read.Read Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsights
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsights
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsightsResponse
instance GHC.Show.Show Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsightsResponse
instance GHC.Read.Read Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsightsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsightsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsights
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsightsResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsights
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsights
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsights
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsights
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsights
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DescribeContributorInsights.DescribeContributorInsights


-- | Checks the status of continuous backups and point in time recovery on
--   the specified table. Continuous backups are <tt>ENABLED</tt> on all
--   tables at table creation. If point in time recovery is enabled,
--   <tt>PointInTimeRecoveryStatus</tt> will be set to ENABLED.
--   
--   After continuous backups and point in time recovery are enabled, you
--   can restore to any point in time within
--   <tt>EarliestRestorableDateTime</tt> and
--   <tt>LatestRestorableDateTime</tt>.
--   
--   <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time. You can restore your table to any point in time during
--   the last 35 days.
--   
--   You can call <tt>DescribeContinuousBackups</tt> at a maximum rate of
--   10 times per second.
module Amazonka.DynamoDB.DescribeContinuousBackups

-- | <i>See:</i> <a>newDescribeContinuousBackups</a> smart constructor.
data DescribeContinuousBackups
DescribeContinuousBackups' :: Text -> DescribeContinuousBackups

-- | Name of the table for which the customer wants to check the continuous
--   backups and point in time recovery settings.
[$sel:tableName:DescribeContinuousBackups'] :: DescribeContinuousBackups -> Text

-- | Create a value of <a>DescribeContinuousBackups</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DescribeContinuousBackups'</a>,
--   <a>describeContinuousBackups_tableName</a> - Name of the table for
--   which the customer wants to check the continuous backups and point in
--   time recovery settings.
newDescribeContinuousBackups :: Text -> DescribeContinuousBackups

-- | Name of the table for which the customer wants to check the continuous
--   backups and point in time recovery settings.
describeContinuousBackups_tableName :: Lens' DescribeContinuousBackups Text

-- | <i>See:</i> <a>newDescribeContinuousBackupsResponse</a> smart
--   constructor.
data DescribeContinuousBackupsResponse
DescribeContinuousBackupsResponse' :: Maybe ContinuousBackupsDescription -> Int -> DescribeContinuousBackupsResponse

-- | Represents the continuous backups and point in time recovery settings
--   on the table.
[$sel:continuousBackupsDescription:DescribeContinuousBackupsResponse'] :: DescribeContinuousBackupsResponse -> Maybe ContinuousBackupsDescription

-- | The response's http status code.
[$sel:httpStatus:DescribeContinuousBackupsResponse'] :: DescribeContinuousBackupsResponse -> Int

-- | Create a value of <a>DescribeContinuousBackupsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:continuousBackupsDescription:DescribeContinuousBackupsResponse'</a>,
--   <a>describeContinuousBackupsResponse_continuousBackupsDescription</a>
--   - Represents the continuous backups and point in time recovery
--   settings on the table.
--   
--   <a>$sel:httpStatus:DescribeContinuousBackupsResponse'</a>,
--   <a>describeContinuousBackupsResponse_httpStatus</a> - The response's
--   http status code.
newDescribeContinuousBackupsResponse :: Int -> DescribeContinuousBackupsResponse

-- | Represents the continuous backups and point in time recovery settings
--   on the table.
describeContinuousBackupsResponse_continuousBackupsDescription :: Lens' DescribeContinuousBackupsResponse (Maybe ContinuousBackupsDescription)

-- | The response's http status code.
describeContinuousBackupsResponse_httpStatus :: Lens' DescribeContinuousBackupsResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackups
instance GHC.Show.Show Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackups
instance GHC.Read.Read Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackups
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackups
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackupsResponse
instance GHC.Show.Show Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackupsResponse
instance GHC.Read.Read Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackupsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackupsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackups
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackupsResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackups
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackups
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackups
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackups
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackups
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DescribeContinuousBackups.DescribeContinuousBackups


-- | Describes an existing backup of a table.
--   
--   You can call <tt>DescribeBackup</tt> at a maximum rate of 10 times per
--   second.
module Amazonka.DynamoDB.DescribeBackup

-- | <i>See:</i> <a>newDescribeBackup</a> smart constructor.
data DescribeBackup
DescribeBackup' :: Text -> DescribeBackup

-- | The Amazon Resource Name (ARN) associated with the backup.
[$sel:backupArn:DescribeBackup'] :: DescribeBackup -> Text

-- | Create a value of <a>DescribeBackup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupArn:DescribeBackup'</a>, <a>describeBackup_backupArn</a>
--   - The Amazon Resource Name (ARN) associated with the backup.
newDescribeBackup :: Text -> DescribeBackup

-- | The Amazon Resource Name (ARN) associated with the backup.
describeBackup_backupArn :: Lens' DescribeBackup Text

-- | <i>See:</i> <a>newDescribeBackupResponse</a> smart constructor.
data DescribeBackupResponse
DescribeBackupResponse' :: Maybe BackupDescription -> Int -> DescribeBackupResponse

-- | Contains the description of the backup created for the table.
[$sel:backupDescription:DescribeBackupResponse'] :: DescribeBackupResponse -> Maybe BackupDescription

-- | The response's http status code.
[$sel:httpStatus:DescribeBackupResponse'] :: DescribeBackupResponse -> Int

-- | Create a value of <a>DescribeBackupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupDescription:DescribeBackupResponse'</a>,
--   <a>describeBackupResponse_backupDescription</a> - Contains the
--   description of the backup created for the table.
--   
--   <a>$sel:httpStatus:DescribeBackupResponse'</a>,
--   <a>describeBackupResponse_httpStatus</a> - The response's http status
--   code.
newDescribeBackupResponse :: Int -> DescribeBackupResponse

-- | Contains the description of the backup created for the table.
describeBackupResponse_backupDescription :: Lens' DescribeBackupResponse (Maybe BackupDescription)

-- | The response's http status code.
describeBackupResponse_httpStatus :: Lens' DescribeBackupResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeBackup.DescribeBackup
instance GHC.Show.Show Amazonka.DynamoDB.DescribeBackup.DescribeBackup
instance GHC.Read.Read Amazonka.DynamoDB.DescribeBackup.DescribeBackup
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeBackup.DescribeBackup
instance GHC.Generics.Generic Amazonka.DynamoDB.DescribeBackup.DescribeBackupResponse
instance GHC.Show.Show Amazonka.DynamoDB.DescribeBackup.DescribeBackupResponse
instance GHC.Read.Read Amazonka.DynamoDB.DescribeBackup.DescribeBackupResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DescribeBackup.DescribeBackupResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DescribeBackup.DescribeBackup
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeBackup.DescribeBackupResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DescribeBackup.DescribeBackup
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DescribeBackup.DescribeBackup
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DescribeBackup.DescribeBackup
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DescribeBackup.DescribeBackup
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DescribeBackup.DescribeBackup
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DescribeBackup.DescribeBackup


-- | The <tt>DeleteTable</tt> operation deletes a table and all of its
--   items. After a <tt>DeleteTable</tt> request, the specified table is in
--   the <tt>DELETING</tt> state until DynamoDB completes the deletion. If
--   the table is in the <tt>ACTIVE</tt> state, you can delete it. If a
--   table is in <tt>CREATING</tt> or <tt>UPDATING</tt> states, then
--   DynamoDB returns a <tt>ResourceInUseException</tt>. If the specified
--   table does not exist, DynamoDB returns a
--   <tt>ResourceNotFoundException</tt>. If table is already in the
--   <tt>DELETING</tt> state, no error is returned.
--   
--   DynamoDB might continue to accept data read and write operations, such
--   as <tt>GetItem</tt> and <tt>PutItem</tt>, on a table in the
--   <tt>DELETING</tt> state until the table deletion is complete.
--   
--   When you delete a table, any indexes on that table are also deleted.
--   
--   If you have DynamoDB Streams enabled on the table, then the
--   corresponding stream on that table goes into the <tt>DISABLED</tt>
--   state, and the stream is automatically deleted after 24 hours.
--   
--   Use the <tt>DescribeTable</tt> action to check the status of the
--   table.
module Amazonka.DynamoDB.DeleteTable

-- | Represents the input of a <tt>DeleteTable</tt> operation.
--   
--   <i>See:</i> <a>newDeleteTable</a> smart constructor.
data DeleteTable
DeleteTable' :: Text -> DeleteTable

-- | The name of the table to delete.
[$sel:tableName:DeleteTable'] :: DeleteTable -> Text

-- | Create a value of <a>DeleteTable</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DeleteTable'</a>, <a>deleteTable_tableName</a> - The
--   name of the table to delete.
newDeleteTable :: Text -> DeleteTable

-- | The name of the table to delete.
deleteTable_tableName :: Lens' DeleteTable Text

-- | Represents the output of a <tt>DeleteTable</tt> operation.
--   
--   <i>See:</i> <a>newDeleteTableResponse</a> smart constructor.
data DeleteTableResponse
DeleteTableResponse' :: Maybe TableDescription -> Int -> DeleteTableResponse

-- | Represents the properties of a table.
[$sel:tableDescription:DeleteTableResponse'] :: DeleteTableResponse -> Maybe TableDescription

-- | The response's http status code.
[$sel:httpStatus:DeleteTableResponse'] :: DeleteTableResponse -> Int

-- | Create a value of <a>DeleteTableResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableDescription:DeleteTableResponse'</a>,
--   <a>deleteTableResponse_tableDescription</a> - Represents the
--   properties of a table.
--   
--   <a>$sel:httpStatus:DeleteTableResponse'</a>,
--   <a>deleteTableResponse_httpStatus</a> - The response's http status
--   code.
newDeleteTableResponse :: Int -> DeleteTableResponse

-- | Represents the properties of a table.
deleteTableResponse_tableDescription :: Lens' DeleteTableResponse (Maybe TableDescription)

-- | The response's http status code.
deleteTableResponse_httpStatus :: Lens' DeleteTableResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DeleteTable.DeleteTable
instance GHC.Show.Show Amazonka.DynamoDB.DeleteTable.DeleteTable
instance GHC.Read.Read Amazonka.DynamoDB.DeleteTable.DeleteTable
instance GHC.Classes.Eq Amazonka.DynamoDB.DeleteTable.DeleteTable
instance GHC.Generics.Generic Amazonka.DynamoDB.DeleteTable.DeleteTableResponse
instance GHC.Show.Show Amazonka.DynamoDB.DeleteTable.DeleteTableResponse
instance GHC.Read.Read Amazonka.DynamoDB.DeleteTable.DeleteTableResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DeleteTable.DeleteTableResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DeleteTable.DeleteTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DeleteTable.DeleteTableResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DeleteTable.DeleteTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DeleteTable.DeleteTable
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DeleteTable.DeleteTable
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DeleteTable.DeleteTable
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DeleteTable.DeleteTable
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DeleteTable.DeleteTable


-- | Deletes a single item in a table by primary key. You can perform a
--   conditional delete operation that deletes the item if it exists, or if
--   it has an expected attribute value.
--   
--   In addition to deleting an item, you can also return the item's
--   attribute values in the same operation, using the
--   <tt>ReturnValues</tt> parameter.
--   
--   Unless you specify conditions, the <tt>DeleteItem</tt> is an
--   idempotent operation; running it multiple times on the same item or
--   attribute does <i>not</i> result in an error response.
--   
--   Conditional deletes are useful for deleting items only if specific
--   conditions are met. If those conditions are met, DynamoDB performs the
--   delete. Otherwise, the item is not deleted.
module Amazonka.DynamoDB.DeleteItem

-- | Represents the input of a <tt>DeleteItem</tt> operation.
--   
--   <i>See:</i> <a>newDeleteItem</a> smart constructor.
data DeleteItem
DeleteItem' :: Maybe (HashMap Text Text) -> Maybe ReturnValue -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnConsumedCapacity -> Maybe ReturnItemCollectionMetrics -> Maybe Text -> Maybe ConditionalOperator -> Maybe (HashMap Text ExpectedAttributeValue) -> Text -> HashMap Text AttributeValue -> DeleteItem

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:expressionAttributeNames:DeleteItem'] :: DeleteItem -> Maybe (HashMap Text Text)

-- | Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appeared before they were deleted. For <tt>DeleteItem</tt>, the
--   valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - The content of the old item is returned.</li>
--   </ul>
--   
--   The <tt>ReturnValues</tt> parameter is used by several DynamoDB
--   operations; however, <tt>DeleteItem</tt> does not recognize any values
--   other than <tt>NONE</tt> or <tt>ALL_OLD</tt>.
[$sel:returnValues:DeleteItem'] :: DeleteItem -> Maybe ReturnValue

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:expressionAttributeValues:DeleteItem'] :: DeleteItem -> Maybe (HashMap Text AttributeValue)
[$sel:returnConsumedCapacity:DeleteItem'] :: DeleteItem -> Maybe ReturnConsumedCapacity

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item
--   collections, if any, that were modified during the operation are
--   returned in the response. If set to <tt>NONE</tt> (the default), no
--   statistics are returned.
[$sel:returnItemCollectionMetrics:DeleteItem'] :: DeleteItem -> Maybe ReturnItemCollectionMetrics

-- | A condition that must be satisfied in order for a conditional
--   <tt>DeleteItem</tt> to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information about condition expressions, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:conditionExpression:DeleteItem'] :: DeleteItem -> Maybe Text

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:conditionalOperator:DeleteItem'] :: DeleteItem -> Maybe ConditionalOperator

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>Expected</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:expected:DeleteItem'] :: DeleteItem -> Maybe (HashMap Text ExpectedAttributeValue)

-- | The name of the table from which to delete the item.
[$sel:tableName:DeleteItem'] :: DeleteItem -> Text

-- | A map of attribute names to <tt>AttributeValue</tt> objects,
--   representing the primary key of the item to delete.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
[$sel:key:DeleteItem'] :: DeleteItem -> HashMap Text AttributeValue

-- | Create a value of <a>DeleteItem</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:DeleteItem'</a>,
--   <a>deleteItem_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression. The following are some
--   use cases for using <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnValues:DeleteItem'</a>, <a>deleteItem_returnValues</a> -
--   Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appeared before they were deleted. For <tt>DeleteItem</tt>, the
--   valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - The content of the old item is returned.</li>
--   </ul>
--   
--   The <tt>ReturnValues</tt> parameter is used by several DynamoDB
--   operations; however, <tt>DeleteItem</tt> does not recognize any values
--   other than <tt>NONE</tt> or <tt>ALL_OLD</tt>.
--   
--   <a>$sel:expressionAttributeValues:DeleteItem'</a>,
--   <a>deleteItem_expressionAttributeValues</a> - One or more values that
--   can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnConsumedCapacity:DeleteItem'</a>,
--   <a>deleteItem_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:returnItemCollectionMetrics:DeleteItem'</a>,
--   <a>deleteItem_returnItemCollectionMetrics</a> - Determines whether
--   item collection metrics are returned. If set to <tt>SIZE</tt>, the
--   response includes statistics about item collections, if any, that were
--   modified during the operation are returned in the response. If set to
--   <tt>NONE</tt> (the default), no statistics are returned.
--   
--   <a>$sel:conditionExpression:DeleteItem'</a>,
--   <a>deleteItem_conditionExpression</a> - A condition that must be
--   satisfied in order for a conditional <tt>DeleteItem</tt> to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information about condition expressions, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:conditionalOperator:DeleteItem'</a>,
--   <a>deleteItem_conditionalOperator</a> - This is a legacy parameter.
--   Use <tt>ConditionExpression</tt> instead. For more information, see
--   <a>ConditionalOperator</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:expected:DeleteItem'</a>, <a>deleteItem_expected</a> - This is
--   a legacy parameter. Use <tt>ConditionExpression</tt> instead. For more
--   information, see <a>Expected</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:tableName:DeleteItem'</a>, <a>deleteItem_tableName</a> - The
--   name of the table from which to delete the item.
--   
--   <a>$sel:key:DeleteItem'</a>, <a>deleteItem_key</a> - A map of
--   attribute names to <tt>AttributeValue</tt> objects, representing the
--   primary key of the item to delete.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
newDeleteItem :: Text -> DeleteItem

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
deleteItem_expressionAttributeNames :: Lens' DeleteItem (Maybe (HashMap Text Text))

-- | Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appeared before they were deleted. For <tt>DeleteItem</tt>, the
--   valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - The content of the old item is returned.</li>
--   </ul>
--   
--   The <tt>ReturnValues</tt> parameter is used by several DynamoDB
--   operations; however, <tt>DeleteItem</tt> does not recognize any values
--   other than <tt>NONE</tt> or <tt>ALL_OLD</tt>.
deleteItem_returnValues :: Lens' DeleteItem (Maybe ReturnValue)

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
deleteItem_expressionAttributeValues :: Lens' DeleteItem (Maybe (HashMap Text AttributeValue))

-- | Undocumented member.
deleteItem_returnConsumedCapacity :: Lens' DeleteItem (Maybe ReturnConsumedCapacity)

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item
--   collections, if any, that were modified during the operation are
--   returned in the response. If set to <tt>NONE</tt> (the default), no
--   statistics are returned.
deleteItem_returnItemCollectionMetrics :: Lens' DeleteItem (Maybe ReturnItemCollectionMetrics)

-- | A condition that must be satisfied in order for a conditional
--   <tt>DeleteItem</tt> to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information about condition expressions, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
deleteItem_conditionExpression :: Lens' DeleteItem (Maybe Text)

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
deleteItem_conditionalOperator :: Lens' DeleteItem (Maybe ConditionalOperator)

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>Expected</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
deleteItem_expected :: Lens' DeleteItem (Maybe (HashMap Text ExpectedAttributeValue))

-- | The name of the table from which to delete the item.
deleteItem_tableName :: Lens' DeleteItem Text

-- | A map of attribute names to <tt>AttributeValue</tt> objects,
--   representing the primary key of the item to delete.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
deleteItem_key :: Lens' DeleteItem (HashMap Text AttributeValue)

-- | Represents the output of a <tt>DeleteItem</tt> operation.
--   
--   <i>See:</i> <a>newDeleteItemResponse</a> smart constructor.
data DeleteItemResponse
DeleteItemResponse' :: Maybe ItemCollectionMetrics -> Maybe ConsumedCapacity -> Maybe (HashMap Text AttributeValue) -> Int -> DeleteItemResponse

-- | Information about item collections, if any, that were affected by the
--   <tt>DeleteItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
[$sel:itemCollectionMetrics:DeleteItemResponse'] :: DeleteItemResponse -> Maybe ItemCollectionMetrics

-- | The capacity units consumed by the <tt>DeleteItem</tt> operation. The
--   data returned includes the total provisioned throughput consumed,
--   along with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Mode</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:consumedCapacity:DeleteItemResponse'] :: DeleteItemResponse -> Maybe ConsumedCapacity

-- | A map of attribute names to <tt>AttributeValue</tt> objects,
--   representing the item as it appeared before the <tt>DeleteItem</tt>
--   operation. This map appears in the response only if
--   <tt>ReturnValues</tt> was specified as <tt>ALL_OLD</tt> in the
--   request.
[$sel:attributes:DeleteItemResponse'] :: DeleteItemResponse -> Maybe (HashMap Text AttributeValue)

-- | The response's http status code.
[$sel:httpStatus:DeleteItemResponse'] :: DeleteItemResponse -> Int

-- | Create a value of <a>DeleteItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionMetrics:DeleteItemResponse'</a>,
--   <a>deleteItemResponse_itemCollectionMetrics</a> - Information about
--   item collections, if any, that were affected by the
--   <tt>DeleteItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
--   
--   <a>$sel:consumedCapacity:DeleteItemResponse'</a>,
--   <a>deleteItemResponse_consumedCapacity</a> - The capacity units
--   consumed by the <tt>DeleteItem</tt> operation. The data returned
--   includes the total provisioned throughput consumed, along with
--   statistics for the table and any indexes involved in the operation.
--   <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Mode</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:attributes:DeleteItemResponse'</a>,
--   <a>deleteItemResponse_attributes</a> - A map of attribute names to
--   <tt>AttributeValue</tt> objects, representing the item as it appeared
--   before the <tt>DeleteItem</tt> operation. This map appears in the
--   response only if <tt>ReturnValues</tt> was specified as
--   <tt>ALL_OLD</tt> in the request.
--   
--   <a>$sel:httpStatus:DeleteItemResponse'</a>,
--   <a>deleteItemResponse_httpStatus</a> - The response's http status
--   code.
newDeleteItemResponse :: Int -> DeleteItemResponse

-- | Information about item collections, if any, that were affected by the
--   <tt>DeleteItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
deleteItemResponse_itemCollectionMetrics :: Lens' DeleteItemResponse (Maybe ItemCollectionMetrics)

-- | The capacity units consumed by the <tt>DeleteItem</tt> operation. The
--   data returned includes the total provisioned throughput consumed,
--   along with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Mode</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
deleteItemResponse_consumedCapacity :: Lens' DeleteItemResponse (Maybe ConsumedCapacity)

-- | A map of attribute names to <tt>AttributeValue</tt> objects,
--   representing the item as it appeared before the <tt>DeleteItem</tt>
--   operation. This map appears in the response only if
--   <tt>ReturnValues</tt> was specified as <tt>ALL_OLD</tt> in the
--   request.
deleteItemResponse_attributes :: Lens' DeleteItemResponse (Maybe (HashMap Text AttributeValue))

-- | The response's http status code.
deleteItemResponse_httpStatus :: Lens' DeleteItemResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DeleteItem.DeleteItem
instance GHC.Show.Show Amazonka.DynamoDB.DeleteItem.DeleteItem
instance GHC.Read.Read Amazonka.DynamoDB.DeleteItem.DeleteItem
instance GHC.Classes.Eq Amazonka.DynamoDB.DeleteItem.DeleteItem
instance GHC.Generics.Generic Amazonka.DynamoDB.DeleteItem.DeleteItemResponse
instance GHC.Show.Show Amazonka.DynamoDB.DeleteItem.DeleteItemResponse
instance GHC.Read.Read Amazonka.DynamoDB.DeleteItem.DeleteItemResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DeleteItem.DeleteItemResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DeleteItem.DeleteItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DeleteItem.DeleteItemResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DeleteItem.DeleteItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DeleteItem.DeleteItem
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DeleteItem.DeleteItem
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DeleteItem.DeleteItem
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DeleteItem.DeleteItem
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DeleteItem.DeleteItem


-- | Deletes an existing backup of a table.
--   
--   You can call <tt>DeleteBackup</tt> at a maximum rate of 10 times per
--   second.
module Amazonka.DynamoDB.DeleteBackup

-- | <i>See:</i> <a>newDeleteBackup</a> smart constructor.
data DeleteBackup
DeleteBackup' :: Text -> DeleteBackup

-- | The ARN associated with the backup.
[$sel:backupArn:DeleteBackup'] :: DeleteBackup -> Text

-- | Create a value of <a>DeleteBackup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupArn:DeleteBackup'</a>, <a>deleteBackup_backupArn</a> -
--   The ARN associated with the backup.
newDeleteBackup :: Text -> DeleteBackup

-- | The ARN associated with the backup.
deleteBackup_backupArn :: Lens' DeleteBackup Text

-- | <i>See:</i> <a>newDeleteBackupResponse</a> smart constructor.
data DeleteBackupResponse
DeleteBackupResponse' :: Maybe BackupDescription -> Int -> DeleteBackupResponse

-- | Contains the description of the backup created for the table.
[$sel:backupDescription:DeleteBackupResponse'] :: DeleteBackupResponse -> Maybe BackupDescription

-- | The response's http status code.
[$sel:httpStatus:DeleteBackupResponse'] :: DeleteBackupResponse -> Int

-- | Create a value of <a>DeleteBackupResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupDescription:DeleteBackupResponse'</a>,
--   <a>deleteBackupResponse_backupDescription</a> - Contains the
--   description of the backup created for the table.
--   
--   <a>$sel:httpStatus:DeleteBackupResponse'</a>,
--   <a>deleteBackupResponse_httpStatus</a> - The response's http status
--   code.
newDeleteBackupResponse :: Int -> DeleteBackupResponse

-- | Contains the description of the backup created for the table.
deleteBackupResponse_backupDescription :: Lens' DeleteBackupResponse (Maybe BackupDescription)

-- | The response's http status code.
deleteBackupResponse_httpStatus :: Lens' DeleteBackupResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.DeleteBackup.DeleteBackup
instance GHC.Show.Show Amazonka.DynamoDB.DeleteBackup.DeleteBackup
instance GHC.Read.Read Amazonka.DynamoDB.DeleteBackup.DeleteBackup
instance GHC.Classes.Eq Amazonka.DynamoDB.DeleteBackup.DeleteBackup
instance GHC.Generics.Generic Amazonka.DynamoDB.DeleteBackup.DeleteBackupResponse
instance GHC.Show.Show Amazonka.DynamoDB.DeleteBackup.DeleteBackupResponse
instance GHC.Read.Read Amazonka.DynamoDB.DeleteBackup.DeleteBackupResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.DeleteBackup.DeleteBackupResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.DeleteBackup.DeleteBackup
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DeleteBackup.DeleteBackupResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.DeleteBackup.DeleteBackup
instance Control.DeepSeq.NFData Amazonka.DynamoDB.DeleteBackup.DeleteBackup
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.DeleteBackup.DeleteBackup
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.DeleteBackup.DeleteBackup
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.DeleteBackup.DeleteBackup
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.DeleteBackup.DeleteBackup


-- | The <tt>CreateTable</tt> operation adds a new table to your account.
--   In an AWS account, table names must be unique within each Region. That
--   is, you can have two tables with same name if you create the tables in
--   different Regions.
--   
--   <tt>CreateTable</tt> is an asynchronous operation. Upon receiving a
--   <tt>CreateTable</tt> request, DynamoDB immediately returns a response
--   with a <tt>TableStatus</tt> of <tt>CREATING</tt>. After the table is
--   created, DynamoDB sets the <tt>TableStatus</tt> to <tt>ACTIVE</tt>.
--   You can perform read and write operations only on an <tt>ACTIVE</tt>
--   table.
--   
--   You can optionally define secondary indexes on the new table, as part
--   of the <tt>CreateTable</tt> operation. If you want to create multiple
--   tables with secondary indexes on them, you must create the tables
--   sequentially. Only one table with secondary indexes can be in the
--   <tt>CREATING</tt> state at any given time.
--   
--   You can use the <tt>DescribeTable</tt> action to check the table
--   status.
module Amazonka.DynamoDB.CreateTable

-- | Represents the input of a <tt>CreateTable</tt> operation.
--   
--   <i>See:</i> <a>newCreateTable</a> smart constructor.
data CreateTable
CreateTable' :: Maybe ProvisionedThroughput -> Maybe SSESpecification -> Maybe [GlobalSecondaryIndex] -> Maybe [LocalSecondaryIndex] -> Maybe BillingMode -> Maybe [Tag] -> Maybe StreamSpecification -> [AttributeDefinition] -> Text -> NonEmpty KeySchemaElement -> CreateTable

-- | Represents the provisioned throughput settings for a specified table
--   or index. The settings can be modified using the <tt>UpdateTable</tt>
--   operation.
--   
--   If you set BillingMode as <tt>PROVISIONED</tt>, you must specify this
--   property. If you set BillingMode as <tt>PAY_PER_REQUEST</tt>, you
--   cannot specify this property.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:provisionedThroughput:CreateTable'] :: CreateTable -> Maybe ProvisionedThroughput

-- | Represents the settings used to enable server-side encryption.
[$sel:sSESpecification:CreateTable'] :: CreateTable -> Maybe SSESpecification

-- | One or more global secondary indexes (the maximum is 20) to be created
--   on the table. Each global secondary index in the array includes the
--   following:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the global secondary index. Must
--   be unique only for this table.</li>
--   <li><tt>KeySchema</tt> - Specifies the key schema for the global
--   secondary index.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 100. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units.</li>
--   </ul>
[$sel:globalSecondaryIndexes:CreateTable'] :: CreateTable -> Maybe [GlobalSecondaryIndex]

-- | One or more local secondary indexes (the maximum is 5) to be created
--   on the table. Each index is scoped to a given partition key value.
--   There is a 10 GB size limit per partition key value; otherwise, the
--   size of a local secondary index is unconstrained.
--   
--   Each local secondary index in the array includes the following:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index. Must
--   be unique only for this table.</li>
--   <li><tt>KeySchema</tt> - Specifies the key schema for the local
--   secondary index. The key schema must begin with the same partition key
--   as the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 100. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   </ul>
[$sel:localSecondaryIndexes:CreateTable'] :: CreateTable -> Maybe [LocalSecondaryIndex]

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
[$sel:billingMode:CreateTable'] :: CreateTable -> Maybe BillingMode

-- | A list of key-value pairs to label the table. For more information,
--   see <a>Tagging for DynamoDB</a>.
[$sel:tags:CreateTable'] :: CreateTable -> Maybe [Tag]

-- | The settings for DynamoDB Streams on the table. These settings consist
--   of:
--   
--   <ul>
--   <li><tt>StreamEnabled</tt> - Indicates whether DynamoDB Streams is to
--   be enabled (true) or disabled (false).</li>
--   <li><tt>StreamViewType</tt> - When an item in the table is modified,
--   <tt>StreamViewType</tt> determines what information is written to the
--   table's stream. Valid values for <tt>StreamViewType</tt>
--   are:<ul><li><tt>KEYS_ONLY</tt> - Only the key attributes of the
--   modified item are written to the stream.</li><li><tt>NEW_IMAGE</tt> -
--   The entire item, as it appears after it was modified, is written to
--   the stream.</li><li><tt>OLD_IMAGE</tt> - The entire item, as it
--   appeared before it was modified, is written to the
--   stream.</li><li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old
--   item images of the item are written to the stream.</li></ul></li>
--   </ul>
[$sel:streamSpecification:CreateTable'] :: CreateTable -> Maybe StreamSpecification

-- | An array of attributes that describe the key schema for the table and
--   indexes.
[$sel:attributeDefinitions:CreateTable'] :: CreateTable -> [AttributeDefinition]

-- | The name of the table to create.
[$sel:tableName:CreateTable'] :: CreateTable -> Text

-- | Specifies the attributes that make up the primary key for a table or
--   an index. The attributes in <tt>KeySchema</tt> must also be defined in
--   the <tt>AttributeDefinitions</tt> array. For more information, see
--   <a>Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   Each <tt>KeySchemaElement</tt> in the array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of this key attribute.</li>
--   <li><tt>KeyType</tt> - The role that the key attribute will
--   assume:<ul><li><tt>HASH</tt> - partition key</li><li><tt>RANGE</tt> -
--   sort key</li></ul></li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from the DynamoDB
--   usage of an internal hash function to evenly distribute data items
--   across partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   For a simple primary key (partition key), you must provide exactly one
--   element with a <tt>KeyType</tt> of <tt>HASH</tt>.
--   
--   For a composite primary key (partition key and sort key), you must
--   provide exactly two elements, in this order: The first element must
--   have a <tt>KeyType</tt> of <tt>HASH</tt>, and the second element must
--   have a <tt>KeyType</tt> of <tt>RANGE</tt>.
--   
--   For more information, see <a>Working with Tables</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:keySchema:CreateTable'] :: CreateTable -> NonEmpty KeySchemaElement

-- | Create a value of <a>CreateTable</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:provisionedThroughput:CreateTable'</a>,
--   <a>createTable_provisionedThroughput</a> - Represents the provisioned
--   throughput settings for a specified table or index. The settings can
--   be modified using the <tt>UpdateTable</tt> operation.
--   
--   If you set BillingMode as <tt>PROVISIONED</tt>, you must specify this
--   property. If you set BillingMode as <tt>PAY_PER_REQUEST</tt>, you
--   cannot specify this property.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:sSESpecification:CreateTable'</a>,
--   <a>createTable_sSESpecification</a> - Represents the settings used to
--   enable server-side encryption.
--   
--   <a>$sel:globalSecondaryIndexes:CreateTable'</a>,
--   <a>createTable_globalSecondaryIndexes</a> - One or more global
--   secondary indexes (the maximum is 20) to be created on the table. Each
--   global secondary index in the array includes the following:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the global secondary index. Must
--   be unique only for this table.</li>
--   <li><tt>KeySchema</tt> - Specifies the key schema for the global
--   secondary index.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 100. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units.</li>
--   </ul>
--   
--   <a>$sel:localSecondaryIndexes:CreateTable'</a>,
--   <a>createTable_localSecondaryIndexes</a> - One or more local secondary
--   indexes (the maximum is 5) to be created on the table. Each index is
--   scoped to a given partition key value. There is a 10 GB size limit per
--   partition key value; otherwise, the size of a local secondary index is
--   unconstrained.
--   
--   Each local secondary index in the array includes the following:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index. Must
--   be unique only for this table.</li>
--   <li><tt>KeySchema</tt> - Specifies the key schema for the local
--   secondary index. The key schema must begin with the same partition key
--   as the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 100. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   </ul>
--   
--   <a>$sel:billingMode:CreateTable'</a>, <a>createTable_billingMode</a> -
--   Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
--   
--   <a>$sel:tags:CreateTable'</a>, <a>createTable_tags</a> - A list of
--   key-value pairs to label the table. For more information, see
--   <a>Tagging for DynamoDB</a>.
--   
--   <a>$sel:streamSpecification:CreateTable'</a>,
--   <a>createTable_streamSpecification</a> - The settings for DynamoDB
--   Streams on the table. These settings consist of:
--   
--   <ul>
--   <li><tt>StreamEnabled</tt> - Indicates whether DynamoDB Streams is to
--   be enabled (true) or disabled (false).</li>
--   <li><tt>StreamViewType</tt> - When an item in the table is modified,
--   <tt>StreamViewType</tt> determines what information is written to the
--   table's stream. Valid values for <tt>StreamViewType</tt>
--   are:<ul><li><tt>KEYS_ONLY</tt> - Only the key attributes of the
--   modified item are written to the stream.</li><li><tt>NEW_IMAGE</tt> -
--   The entire item, as it appears after it was modified, is written to
--   the stream.</li><li><tt>OLD_IMAGE</tt> - The entire item, as it
--   appeared before it was modified, is written to the
--   stream.</li><li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old
--   item images of the item are written to the stream.</li></ul></li>
--   </ul>
--   
--   <a>$sel:attributeDefinitions:CreateTable'</a>,
--   <a>createTable_attributeDefinitions</a> - An array of attributes that
--   describe the key schema for the table and indexes.
--   
--   <a>$sel:tableName:CreateTable'</a>, <a>createTable_tableName</a> - The
--   name of the table to create.
--   
--   <a>$sel:keySchema:CreateTable'</a>, <a>createTable_keySchema</a> -
--   Specifies the attributes that make up the primary key for a table or
--   an index. The attributes in <tt>KeySchema</tt> must also be defined in
--   the <tt>AttributeDefinitions</tt> array. For more information, see
--   <a>Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   Each <tt>KeySchemaElement</tt> in the array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of this key attribute.</li>
--   <li><tt>KeyType</tt> - The role that the key attribute will
--   assume:<ul><li><tt>HASH</tt> - partition key</li><li><tt>RANGE</tt> -
--   sort key</li></ul></li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from the DynamoDB
--   usage of an internal hash function to evenly distribute data items
--   across partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   For a simple primary key (partition key), you must provide exactly one
--   element with a <tt>KeyType</tt> of <tt>HASH</tt>.
--   
--   For a composite primary key (partition key and sort key), you must
--   provide exactly two elements, in this order: The first element must
--   have a <tt>KeyType</tt> of <tt>HASH</tt>, and the second element must
--   have a <tt>KeyType</tt> of <tt>RANGE</tt>.
--   
--   For more information, see <a>Working with Tables</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
newCreateTable :: Text -> NonEmpty KeySchemaElement -> CreateTable

-- | Represents the provisioned throughput settings for a specified table
--   or index. The settings can be modified using the <tt>UpdateTable</tt>
--   operation.
--   
--   If you set BillingMode as <tt>PROVISIONED</tt>, you must specify this
--   property. If you set BillingMode as <tt>PAY_PER_REQUEST</tt>, you
--   cannot specify this property.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
createTable_provisionedThroughput :: Lens' CreateTable (Maybe ProvisionedThroughput)

-- | Represents the settings used to enable server-side encryption.
createTable_sSESpecification :: Lens' CreateTable (Maybe SSESpecification)

-- | One or more global secondary indexes (the maximum is 20) to be created
--   on the table. Each global secondary index in the array includes the
--   following:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the global secondary index. Must
--   be unique only for this table.</li>
--   <li><tt>KeySchema</tt> - Specifies the key schema for the global
--   secondary index.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 100. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units.</li>
--   </ul>
createTable_globalSecondaryIndexes :: Lens' CreateTable (Maybe [GlobalSecondaryIndex])

-- | One or more local secondary indexes (the maximum is 5) to be created
--   on the table. Each index is scoped to a given partition key value.
--   There is a 10 GB size limit per partition key value; otherwise, the
--   size of a local secondary index is unconstrained.
--   
--   Each local secondary index in the array includes the following:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index. Must
--   be unique only for this table.</li>
--   <li><tt>KeySchema</tt> - Specifies the key schema for the local
--   secondary index. The key schema must begin with the same partition key
--   as the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 100. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   </ul>
createTable_localSecondaryIndexes :: Lens' CreateTable (Maybe [LocalSecondaryIndex])

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
createTable_billingMode :: Lens' CreateTable (Maybe BillingMode)

-- | A list of key-value pairs to label the table. For more information,
--   see <a>Tagging for DynamoDB</a>.
createTable_tags :: Lens' CreateTable (Maybe [Tag])

-- | The settings for DynamoDB Streams on the table. These settings consist
--   of:
--   
--   <ul>
--   <li><tt>StreamEnabled</tt> - Indicates whether DynamoDB Streams is to
--   be enabled (true) or disabled (false).</li>
--   <li><tt>StreamViewType</tt> - When an item in the table is modified,
--   <tt>StreamViewType</tt> determines what information is written to the
--   table's stream. Valid values for <tt>StreamViewType</tt>
--   are:<ul><li><tt>KEYS_ONLY</tt> - Only the key attributes of the
--   modified item are written to the stream.</li><li><tt>NEW_IMAGE</tt> -
--   The entire item, as it appears after it was modified, is written to
--   the stream.</li><li><tt>OLD_IMAGE</tt> - The entire item, as it
--   appeared before it was modified, is written to the
--   stream.</li><li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old
--   item images of the item are written to the stream.</li></ul></li>
--   </ul>
createTable_streamSpecification :: Lens' CreateTable (Maybe StreamSpecification)

-- | An array of attributes that describe the key schema for the table and
--   indexes.
createTable_attributeDefinitions :: Lens' CreateTable [AttributeDefinition]

-- | The name of the table to create.
createTable_tableName :: Lens' CreateTable Text

-- | Specifies the attributes that make up the primary key for a table or
--   an index. The attributes in <tt>KeySchema</tt> must also be defined in
--   the <tt>AttributeDefinitions</tt> array. For more information, see
--   <a>Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   Each <tt>KeySchemaElement</tt> in the array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of this key attribute.</li>
--   <li><tt>KeyType</tt> - The role that the key attribute will
--   assume:<ul><li><tt>HASH</tt> - partition key</li><li><tt>RANGE</tt> -
--   sort key</li></ul></li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from the DynamoDB
--   usage of an internal hash function to evenly distribute data items
--   across partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   For a simple primary key (partition key), you must provide exactly one
--   element with a <tt>KeyType</tt> of <tt>HASH</tt>.
--   
--   For a composite primary key (partition key and sort key), you must
--   provide exactly two elements, in this order: The first element must
--   have a <tt>KeyType</tt> of <tt>HASH</tt>, and the second element must
--   have a <tt>KeyType</tt> of <tt>RANGE</tt>.
--   
--   For more information, see <a>Working with Tables</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
createTable_keySchema :: Lens' CreateTable (NonEmpty KeySchemaElement)

-- | Represents the output of a <tt>CreateTable</tt> operation.
--   
--   <i>See:</i> <a>newCreateTableResponse</a> smart constructor.
data CreateTableResponse
CreateTableResponse' :: Maybe TableDescription -> Int -> CreateTableResponse

-- | Represents the properties of the table.
[$sel:tableDescription:CreateTableResponse'] :: CreateTableResponse -> Maybe TableDescription

-- | The response's http status code.
[$sel:httpStatus:CreateTableResponse'] :: CreateTableResponse -> Int

-- | Create a value of <a>CreateTableResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableDescription:CreateTableResponse'</a>,
--   <a>createTableResponse_tableDescription</a> - Represents the
--   properties of the table.
--   
--   <a>$sel:httpStatus:CreateTableResponse'</a>,
--   <a>createTableResponse_httpStatus</a> - The response's http status
--   code.
newCreateTableResponse :: Int -> CreateTableResponse

-- | Represents the properties of the table.
createTableResponse_tableDescription :: Lens' CreateTableResponse (Maybe TableDescription)

-- | The response's http status code.
createTableResponse_httpStatus :: Lens' CreateTableResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.CreateTable.CreateTable
instance GHC.Show.Show Amazonka.DynamoDB.CreateTable.CreateTable
instance GHC.Read.Read Amazonka.DynamoDB.CreateTable.CreateTable
instance GHC.Classes.Eq Amazonka.DynamoDB.CreateTable.CreateTable
instance GHC.Generics.Generic Amazonka.DynamoDB.CreateTable.CreateTableResponse
instance GHC.Show.Show Amazonka.DynamoDB.CreateTable.CreateTableResponse
instance GHC.Read.Read Amazonka.DynamoDB.CreateTable.CreateTableResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.CreateTable.CreateTableResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.CreateTable.CreateTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.CreateTable.CreateTableResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.CreateTable.CreateTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.CreateTable.CreateTable
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.CreateTable.CreateTable
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.CreateTable.CreateTable
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.CreateTable.CreateTable
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.CreateTable.CreateTable


-- | Creates a global table from an existing table. A global table creates
--   a replication relationship between two or more DynamoDB tables with
--   the same table name in the provided Regions.
--   
--   This operation only applies to <a>Version 2017.11.29</a> of global
--   tables.
--   
--   If you want to add a new replica table to a global table, each of the
--   following conditions must be true:
--   
--   <ul>
--   <li>The table must have the same primary key as all of the other
--   replicas.</li>
--   <li>The table must have the same name as all of the other
--   replicas.</li>
--   <li>The table must have DynamoDB Streams enabled, with the stream
--   containing both the new and the old images of the item.</li>
--   <li>None of the replica tables in the global table can contain any
--   data.</li>
--   </ul>
--   
--   If global secondary indexes are specified, then the following
--   conditions must also be met:
--   
--   <ul>
--   <li>The global secondary indexes must have the same name.</li>
--   <li>The global secondary indexes must have the same hash key and sort
--   key (if present).</li>
--   </ul>
--   
--   If local secondary indexes are specified, then the following
--   conditions must also be met:
--   
--   <ul>
--   <li>The local secondary indexes must have the same name.</li>
--   <li>The local secondary indexes must have the same hash key and sort
--   key (if present).</li>
--   </ul>
--   
--   Write capacity settings should be set consistently across your replica
--   tables and secondary indexes. DynamoDB strongly recommends enabling
--   auto scaling to manage the write capacity settings for all of your
--   global tables replicas and indexes.
--   
--   If you prefer to manage write capacity settings manually, you should
--   provision equal replicated write capacity units to your replica
--   tables. You should also provision equal replicated write capacity
--   units to matching secondary indexes across your global table.
module Amazonka.DynamoDB.CreateGlobalTable

-- | <i>See:</i> <a>newCreateGlobalTable</a> smart constructor.
data CreateGlobalTable
CreateGlobalTable' :: Text -> [Replica] -> CreateGlobalTable

-- | The global table name.
[$sel:globalTableName:CreateGlobalTable'] :: CreateGlobalTable -> Text

-- | The Regions where the global table needs to be created.
[$sel:replicationGroup:CreateGlobalTable'] :: CreateGlobalTable -> [Replica]

-- | Create a value of <a>CreateGlobalTable</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableName:CreateGlobalTable'</a>,
--   <a>createGlobalTable_globalTableName</a> - The global table name.
--   
--   <a>$sel:replicationGroup:CreateGlobalTable'</a>,
--   <a>createGlobalTable_replicationGroup</a> - The Regions where the
--   global table needs to be created.
newCreateGlobalTable :: Text -> CreateGlobalTable

-- | The global table name.
createGlobalTable_globalTableName :: Lens' CreateGlobalTable Text

-- | The Regions where the global table needs to be created.
createGlobalTable_replicationGroup :: Lens' CreateGlobalTable [Replica]

-- | <i>See:</i> <a>newCreateGlobalTableResponse</a> smart constructor.
data CreateGlobalTableResponse
CreateGlobalTableResponse' :: Maybe GlobalTableDescription -> Int -> CreateGlobalTableResponse

-- | Contains the details of the global table.
[$sel:globalTableDescription:CreateGlobalTableResponse'] :: CreateGlobalTableResponse -> Maybe GlobalTableDescription

-- | The response's http status code.
[$sel:httpStatus:CreateGlobalTableResponse'] :: CreateGlobalTableResponse -> Int

-- | Create a value of <a>CreateGlobalTableResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableDescription:CreateGlobalTableResponse'</a>,
--   <a>createGlobalTableResponse_globalTableDescription</a> - Contains the
--   details of the global table.
--   
--   <a>$sel:httpStatus:CreateGlobalTableResponse'</a>,
--   <a>createGlobalTableResponse_httpStatus</a> - The response's http
--   status code.
newCreateGlobalTableResponse :: Int -> CreateGlobalTableResponse

-- | Contains the details of the global table.
createGlobalTableResponse_globalTableDescription :: Lens' CreateGlobalTableResponse (Maybe GlobalTableDescription)

-- | The response's http status code.
createGlobalTableResponse_httpStatus :: Lens' CreateGlobalTableResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTable
instance GHC.Show.Show Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTable
instance GHC.Read.Read Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTable
instance GHC.Classes.Eq Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTable
instance GHC.Generics.Generic Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTableResponse
instance GHC.Show.Show Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTableResponse
instance GHC.Read.Read Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTableResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTableResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTableResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTable
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTable
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTable
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTable
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.CreateGlobalTable.CreateGlobalTable


-- | Creates a backup for an existing table.
--   
--   Each time you create an on-demand backup, the entire table data is
--   backed up. There is no limit to the number of on-demand backups that
--   can be taken.
--   
--   When you create an on-demand backup, a time marker of the request is
--   cataloged, and the backup is created asynchronously, by applying all
--   changes until the time of the request to the last full table snapshot.
--   Backup requests are processed instantaneously and become available for
--   restore within minutes.
--   
--   You can call <tt>CreateBackup</tt> at a maximum rate of 50 times per
--   second.
--   
--   All backups in DynamoDB work without consuming any provisioned
--   throughput on the table.
--   
--   If you submit a backup request on 2018-12-14 at 14:25:00, the backup
--   is guaranteed to contain all data committed to the table up to
--   14:24:00, and data committed after 14:26:00 will not be. The backup
--   might contain data modifications made between 14:24:00 and 14:26:00.
--   On-demand backup does not support causal consistency.
--   
--   Along with data, the following are also included on the backups:
--   
--   <ul>
--   <li>Global secondary indexes (GSIs)</li>
--   <li>Local secondary indexes (LSIs)</li>
--   <li>Streams</li>
--   <li>Provisioned read and write capacity</li>
--   </ul>
module Amazonka.DynamoDB.CreateBackup

-- | <i>See:</i> <a>newCreateBackup</a> smart constructor.
data CreateBackup
CreateBackup' :: Text -> Text -> CreateBackup

-- | The name of the table.
[$sel:tableName:CreateBackup'] :: CreateBackup -> Text

-- | Specified name for the backup.
[$sel:backupName:CreateBackup'] :: CreateBackup -> Text

-- | Create a value of <a>CreateBackup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:CreateBackup'</a>, <a>createBackup_tableName</a> -
--   The name of the table.
--   
--   <a>$sel:backupName:CreateBackup'</a>, <a>createBackup_backupName</a> -
--   Specified name for the backup.
newCreateBackup :: Text -> Text -> CreateBackup

-- | The name of the table.
createBackup_tableName :: Lens' CreateBackup Text

-- | Specified name for the backup.
createBackup_backupName :: Lens' CreateBackup Text

-- | <i>See:</i> <a>newCreateBackupResponse</a> smart constructor.
data CreateBackupResponse
CreateBackupResponse' :: Maybe BackupDetails -> Int -> CreateBackupResponse

-- | Contains the details of the backup created for the table.
[$sel:backupDetails:CreateBackupResponse'] :: CreateBackupResponse -> Maybe BackupDetails

-- | The response's http status code.
[$sel:httpStatus:CreateBackupResponse'] :: CreateBackupResponse -> Int

-- | Create a value of <a>CreateBackupResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupDetails:CreateBackupResponse'</a>,
--   <a>createBackupResponse_backupDetails</a> - Contains the details of
--   the backup created for the table.
--   
--   <a>$sel:httpStatus:CreateBackupResponse'</a>,
--   <a>createBackupResponse_httpStatus</a> - The response's http status
--   code.
newCreateBackupResponse :: Int -> CreateBackupResponse

-- | Contains the details of the backup created for the table.
createBackupResponse_backupDetails :: Lens' CreateBackupResponse (Maybe BackupDetails)

-- | The response's http status code.
createBackupResponse_httpStatus :: Lens' CreateBackupResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.CreateBackup.CreateBackup
instance GHC.Show.Show Amazonka.DynamoDB.CreateBackup.CreateBackup
instance GHC.Read.Read Amazonka.DynamoDB.CreateBackup.CreateBackup
instance GHC.Classes.Eq Amazonka.DynamoDB.CreateBackup.CreateBackup
instance GHC.Generics.Generic Amazonka.DynamoDB.CreateBackup.CreateBackupResponse
instance GHC.Show.Show Amazonka.DynamoDB.CreateBackup.CreateBackupResponse
instance GHC.Read.Read Amazonka.DynamoDB.CreateBackup.CreateBackupResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.CreateBackup.CreateBackupResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.CreateBackup.CreateBackup
instance Control.DeepSeq.NFData Amazonka.DynamoDB.CreateBackup.CreateBackupResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.CreateBackup.CreateBackup
instance Control.DeepSeq.NFData Amazonka.DynamoDB.CreateBackup.CreateBackup
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.CreateBackup.CreateBackup
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.CreateBackup.CreateBackup
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.CreateBackup.CreateBackup
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.CreateBackup.CreateBackup


-- | The <tt>BatchWriteItem</tt> operation puts or deletes multiple items
--   in one or more tables. A single call to <tt>BatchWriteItem</tt> can
--   write up to 16 MB of data, which can comprise as many as 25 put or
--   delete requests. Individual items to be written can be as large as 400
--   KB.
--   
--   <tt>BatchWriteItem</tt> cannot update items. To update items, use the
--   <tt>UpdateItem</tt> action.
--   
--   The individual <tt>PutItem</tt> and <tt>DeleteItem</tt> operations
--   specified in <tt>BatchWriteItem</tt> are atomic; however
--   <tt>BatchWriteItem</tt> as a whole is not. If any requested operations
--   fail because the table's provisioned throughput is exceeded or an
--   internal processing failure occurs, the failed operations are returned
--   in the <tt>UnprocessedItems</tt> response parameter. You can
--   investigate and optionally resend the requests. Typically, you would
--   call <tt>BatchWriteItem</tt> in a loop. Each iteration would check for
--   unprocessed items and submit a new <tt>BatchWriteItem</tt> request
--   with those unprocessed items until all items have been processed.
--   
--   If <i>none</i> of the items can be processed due to insufficient
--   provisioned throughput on all of the tables in the request, then
--   <tt>BatchWriteItem</tt> returns a
--   <tt>ProvisionedThroughputExceededException</tt>.
--   
--   If DynamoDB returns any unprocessed items, you should retry the batch
--   operation on those items. However, /we strongly recommend that you use
--   an exponential backoff algorithm/. If you retry the batch operation
--   immediately, the underlying read or write requests can still fail due
--   to throttling on the individual tables. If you delay the batch
--   operation using exponential backoff, the individual requests in the
--   batch are much more likely to succeed.
--   
--   For more information, see <a>Batch Operations and Error Handling</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   With <tt>BatchWriteItem</tt>, you can efficiently write or delete
--   large amounts of data, such as from Amazon EMR, or copy data from
--   another database into DynamoDB. In order to improve performance with
--   these large-scale operations, <tt>BatchWriteItem</tt> does not behave
--   in the same way as individual <tt>PutItem</tt> and <tt>DeleteItem</tt>
--   calls would. For example, you cannot specify conditions on individual
--   put and delete requests, and <tt>BatchWriteItem</tt> does not return
--   deleted items in the response.
--   
--   If you use a programming language that supports concurrency, you can
--   use threads to write items in parallel. Your application must include
--   the necessary logic to manage the threads. With languages that don't
--   support threading, you must update or delete the specified items one
--   at a time. In both situations, <tt>BatchWriteItem</tt> performs the
--   specified put and delete operations in parallel, giving you the power
--   of the thread pool approach without having to introduce complexity
--   into your application.
--   
--   Parallel processing reduces latency, but each specified put and delete
--   request consumes the same number of write capacity units whether it is
--   processed in parallel or not. Delete operations on nonexistent items
--   consume one write capacity unit.
--   
--   If one or more of the following is true, DynamoDB rejects the entire
--   batch write operation:
--   
--   <ul>
--   <li>One or more tables specified in the <tt>BatchWriteItem</tt>
--   request does not exist.</li>
--   <li>Primary key attributes specified on an item in the request do not
--   match those in the corresponding table's primary key schema.</li>
--   <li>You try to perform multiple operations on the same item in the
--   same <tt>BatchWriteItem</tt> request. For example, you cannot put and
--   delete the same item in the same <tt>BatchWriteItem</tt> request.</li>
--   <li>Your request contains at least two items with identical hash and
--   range keys (which essentially is two put operations).</li>
--   <li>There are more than 25 requests in the batch.</li>
--   <li>Any individual item in a batch exceeds 400 KB.</li>
--   <li>The total request size exceeds 16 MB.</li>
--   </ul>
module Amazonka.DynamoDB.BatchWriteItem

-- | Represents the input of a <tt>BatchWriteItem</tt> operation.
--   
--   <i>See:</i> <a>newBatchWriteItem</a> smart constructor.
data BatchWriteItem
BatchWriteItem' :: Maybe ReturnConsumedCapacity -> Maybe ReturnItemCollectionMetrics -> HashMap Text (NonEmpty WriteRequest) -> BatchWriteItem
[$sel:returnConsumedCapacity:BatchWriteItem'] :: BatchWriteItem -> Maybe ReturnConsumedCapacity

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item
--   collections, if any, that were modified during the operation are
--   returned in the response. If set to <tt>NONE</tt> (the default), no
--   statistics are returned.
[$sel:returnItemCollectionMetrics:BatchWriteItem'] :: BatchWriteItem -> Maybe ReturnItemCollectionMetrics

-- | A map of one or more table names and, for each table, a list of
--   operations to be performed (<tt>DeleteRequest</tt> or
--   <tt>PutRequest</tt>). Each element in the map consists of the
--   following:
--   
--   <ul>
--   <li><tt>DeleteRequest</tt> - Perform a <tt>DeleteItem</tt> operation
--   on the specified item. The item to be deleted is identified by a
--   <tt>Key</tt> subelement:<ul><li><tt>Key</tt> - A map of primary key
--   attribute values that uniquely identify the item. Each entry in this
--   map consists of an attribute name and an attribute value. For each
--   primary key, you must provide <i>all</i> of the key attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for <i>both</i> the partition key and the sort
--   key.</li></ul></li>
--   <li><tt>PutRequest</tt> - Perform a <tt>PutItem</tt> operation on the
--   specified item. The item to be put is identified by an <tt>Item</tt>
--   subelement:<ul><li><tt>Item</tt> - A map of attributes and their
--   values. Each entry in this map consists of an attribute name and an
--   attribute value. Attribute values must not be null; string and binary
--   type attributes must have lengths greater than zero; and set type
--   attributes must not be empty. Requests that contain empty values are
--   rejected with a <tt>ValidationException</tt> exception.If you specify
--   any attributes that are part of an index key, then the data types for
--   those attributes must match those of the schema in the table's
--   attribute definition.</li></ul></li>
--   </ul>
[$sel:requestItems:BatchWriteItem'] :: BatchWriteItem -> HashMap Text (NonEmpty WriteRequest)

-- | Create a value of <a>BatchWriteItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:returnConsumedCapacity:BatchWriteItem'</a>,
--   <a>batchWriteItem_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:returnItemCollectionMetrics:BatchWriteItem'</a>,
--   <a>batchWriteItem_returnItemCollectionMetrics</a> - Determines whether
--   item collection metrics are returned. If set to <tt>SIZE</tt>, the
--   response includes statistics about item collections, if any, that were
--   modified during the operation are returned in the response. If set to
--   <tt>NONE</tt> (the default), no statistics are returned.
--   
--   <a>$sel:requestItems:BatchWriteItem'</a>,
--   <a>batchWriteItem_requestItems</a> - A map of one or more table names
--   and, for each table, a list of operations to be performed
--   (<tt>DeleteRequest</tt> or <tt>PutRequest</tt>). Each element in the
--   map consists of the following:
--   
--   <ul>
--   <li><tt>DeleteRequest</tt> - Perform a <tt>DeleteItem</tt> operation
--   on the specified item. The item to be deleted is identified by a
--   <tt>Key</tt> subelement:<ul><li><tt>Key</tt> - A map of primary key
--   attribute values that uniquely identify the item. Each entry in this
--   map consists of an attribute name and an attribute value. For each
--   primary key, you must provide <i>all</i> of the key attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for <i>both</i> the partition key and the sort
--   key.</li></ul></li>
--   <li><tt>PutRequest</tt> - Perform a <tt>PutItem</tt> operation on the
--   specified item. The item to be put is identified by an <tt>Item</tt>
--   subelement:<ul><li><tt>Item</tt> - A map of attributes and their
--   values. Each entry in this map consists of an attribute name and an
--   attribute value. Attribute values must not be null; string and binary
--   type attributes must have lengths greater than zero; and set type
--   attributes must not be empty. Requests that contain empty values are
--   rejected with a <tt>ValidationException</tt> exception.If you specify
--   any attributes that are part of an index key, then the data types for
--   those attributes must match those of the schema in the table's
--   attribute definition.</li></ul></li>
--   </ul>
newBatchWriteItem :: BatchWriteItem

-- | Undocumented member.
batchWriteItem_returnConsumedCapacity :: Lens' BatchWriteItem (Maybe ReturnConsumedCapacity)

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item
--   collections, if any, that were modified during the operation are
--   returned in the response. If set to <tt>NONE</tt> (the default), no
--   statistics are returned.
batchWriteItem_returnItemCollectionMetrics :: Lens' BatchWriteItem (Maybe ReturnItemCollectionMetrics)

-- | A map of one or more table names and, for each table, a list of
--   operations to be performed (<tt>DeleteRequest</tt> or
--   <tt>PutRequest</tt>). Each element in the map consists of the
--   following:
--   
--   <ul>
--   <li><tt>DeleteRequest</tt> - Perform a <tt>DeleteItem</tt> operation
--   on the specified item. The item to be deleted is identified by a
--   <tt>Key</tt> subelement:<ul><li><tt>Key</tt> - A map of primary key
--   attribute values that uniquely identify the item. Each entry in this
--   map consists of an attribute name and an attribute value. For each
--   primary key, you must provide <i>all</i> of the key attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for <i>both</i> the partition key and the sort
--   key.</li></ul></li>
--   <li><tt>PutRequest</tt> - Perform a <tt>PutItem</tt> operation on the
--   specified item. The item to be put is identified by an <tt>Item</tt>
--   subelement:<ul><li><tt>Item</tt> - A map of attributes and their
--   values. Each entry in this map consists of an attribute name and an
--   attribute value. Attribute values must not be null; string and binary
--   type attributes must have lengths greater than zero; and set type
--   attributes must not be empty. Requests that contain empty values are
--   rejected with a <tt>ValidationException</tt> exception.If you specify
--   any attributes that are part of an index key, then the data types for
--   those attributes must match those of the schema in the table's
--   attribute definition.</li></ul></li>
--   </ul>
batchWriteItem_requestItems :: Lens' BatchWriteItem (HashMap Text (NonEmpty WriteRequest))

-- | Represents the output of a <tt>BatchWriteItem</tt> operation.
--   
--   <i>See:</i> <a>newBatchWriteItemResponse</a> smart constructor.
data BatchWriteItemResponse
BatchWriteItemResponse' :: Maybe (HashMap Text [ItemCollectionMetrics]) -> Maybe [ConsumedCapacity] -> Maybe (HashMap Text (NonEmpty WriteRequest)) -> Int -> BatchWriteItemResponse

-- | A list of tables that were processed by <tt>BatchWriteItem</tt> and,
--   for each table, information about any item collections that were
--   affected by individual <tt>DeleteItem</tt> or <tt>PutItem</tt>
--   operations.
--   
--   Each entry consists of the following subelements:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the
--   item.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, expressed in GB. This is a two-element array containing a lower
--   bound and an upper bound for the estimate. The estimate includes the
--   size of all the items in the table, plus the size of all attributes
--   projected into all of the local secondary indexes on the table. Use
--   this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
[$sel:itemCollectionMetrics:BatchWriteItemResponse'] :: BatchWriteItemResponse -> Maybe (HashMap Text [ItemCollectionMetrics])

-- | The capacity units consumed by the entire <tt>BatchWriteItem</tt>
--   operation.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>TableName</tt> - The table that consumed the provisioned
--   throughput.</li>
--   <li><tt>CapacityUnits</tt> - The total number of capacity units
--   consumed.</li>
--   </ul>
[$sel:consumedCapacity:BatchWriteItemResponse'] :: BatchWriteItemResponse -> Maybe [ConsumedCapacity]

-- | A map of tables and requests against those tables that were not
--   processed. The <tt>UnprocessedItems</tt> value is in the same form as
--   <tt>RequestItems</tt>, so you can provide this value directly to a
--   subsequent <tt>BatchGetItem</tt> operation. For more information, see
--   <tt>RequestItems</tt> in the Request Parameters section.
--   
--   Each <tt>UnprocessedItems</tt> entry consists of a table name and, for
--   that table, a list of operations to perform (<tt>DeleteRequest</tt> or
--   <tt>PutRequest</tt>).
--   
--   <ul>
--   <li><tt>DeleteRequest</tt> - Perform a <tt>DeleteItem</tt> operation
--   on the specified item. The item to be deleted is identified by a
--   <tt>Key</tt> subelement:<ul><li><tt>Key</tt> - A map of primary key
--   attribute values that uniquely identify the item. Each entry in this
--   map consists of an attribute name and an attribute
--   value.</li></ul></li>
--   <li><tt>PutRequest</tt> - Perform a <tt>PutItem</tt> operation on the
--   specified item. The item to be put is identified by an <tt>Item</tt>
--   subelement:<ul><li><tt>Item</tt> - A map of attributes and their
--   values. Each entry in this map consists of an attribute name and an
--   attribute value. Attribute values must not be null; string and binary
--   type attributes must have lengths greater than zero; and set type
--   attributes must not be empty. Requests that contain empty values will
--   be rejected with a <tt>ValidationException</tt> exception.If you
--   specify any attributes that are part of an index key, then the data
--   types for those attributes must match those of the schema in the
--   table's attribute definition.</li></ul></li>
--   </ul>
--   
--   If there are no unprocessed items remaining, the response contains an
--   empty <tt>UnprocessedItems</tt> map.
[$sel:unprocessedItems:BatchWriteItemResponse'] :: BatchWriteItemResponse -> Maybe (HashMap Text (NonEmpty WriteRequest))

-- | The response's http status code.
[$sel:httpStatus:BatchWriteItemResponse'] :: BatchWriteItemResponse -> Int

-- | Create a value of <a>BatchWriteItemResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionMetrics:BatchWriteItemResponse'</a>,
--   <a>batchWriteItemResponse_itemCollectionMetrics</a> - A list of tables
--   that were processed by <tt>BatchWriteItem</tt> and, for each table,
--   information about any item collections that were affected by
--   individual <tt>DeleteItem</tt> or <tt>PutItem</tt> operations.
--   
--   Each entry consists of the following subelements:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the
--   item.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, expressed in GB. This is a two-element array containing a lower
--   bound and an upper bound for the estimate. The estimate includes the
--   size of all the items in the table, plus the size of all attributes
--   projected into all of the local secondary indexes on the table. Use
--   this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
--   
--   <a>$sel:consumedCapacity:BatchWriteItemResponse'</a>,
--   <a>batchWriteItemResponse_consumedCapacity</a> - The capacity units
--   consumed by the entire <tt>BatchWriteItem</tt> operation.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>TableName</tt> - The table that consumed the provisioned
--   throughput.</li>
--   <li><tt>CapacityUnits</tt> - The total number of capacity units
--   consumed.</li>
--   </ul>
--   
--   <a>$sel:unprocessedItems:BatchWriteItemResponse'</a>,
--   <a>batchWriteItemResponse_unprocessedItems</a> - A map of tables and
--   requests against those tables that were not processed. The
--   <tt>UnprocessedItems</tt> value is in the same form as
--   <tt>RequestItems</tt>, so you can provide this value directly to a
--   subsequent <tt>BatchGetItem</tt> operation. For more information, see
--   <tt>RequestItems</tt> in the Request Parameters section.
--   
--   Each <tt>UnprocessedItems</tt> entry consists of a table name and, for
--   that table, a list of operations to perform (<tt>DeleteRequest</tt> or
--   <tt>PutRequest</tt>).
--   
--   <ul>
--   <li><tt>DeleteRequest</tt> - Perform a <tt>DeleteItem</tt> operation
--   on the specified item. The item to be deleted is identified by a
--   <tt>Key</tt> subelement:<ul><li><tt>Key</tt> - A map of primary key
--   attribute values that uniquely identify the item. Each entry in this
--   map consists of an attribute name and an attribute
--   value.</li></ul></li>
--   <li><tt>PutRequest</tt> - Perform a <tt>PutItem</tt> operation on the
--   specified item. The item to be put is identified by an <tt>Item</tt>
--   subelement:<ul><li><tt>Item</tt> - A map of attributes and their
--   values. Each entry in this map consists of an attribute name and an
--   attribute value. Attribute values must not be null; string and binary
--   type attributes must have lengths greater than zero; and set type
--   attributes must not be empty. Requests that contain empty values will
--   be rejected with a <tt>ValidationException</tt> exception.If you
--   specify any attributes that are part of an index key, then the data
--   types for those attributes must match those of the schema in the
--   table's attribute definition.</li></ul></li>
--   </ul>
--   
--   If there are no unprocessed items remaining, the response contains an
--   empty <tt>UnprocessedItems</tt> map.
--   
--   <a>$sel:httpStatus:BatchWriteItemResponse'</a>,
--   <a>batchWriteItemResponse_httpStatus</a> - The response's http status
--   code.
newBatchWriteItemResponse :: Int -> BatchWriteItemResponse

-- | A list of tables that were processed by <tt>BatchWriteItem</tt> and,
--   for each table, information about any item collections that were
--   affected by individual <tt>DeleteItem</tt> or <tt>PutItem</tt>
--   operations.
--   
--   Each entry consists of the following subelements:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the
--   item.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, expressed in GB. This is a two-element array containing a lower
--   bound and an upper bound for the estimate. The estimate includes the
--   size of all the items in the table, plus the size of all attributes
--   projected into all of the local secondary indexes on the table. Use
--   this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
batchWriteItemResponse_itemCollectionMetrics :: Lens' BatchWriteItemResponse (Maybe (HashMap Text [ItemCollectionMetrics]))

-- | The capacity units consumed by the entire <tt>BatchWriteItem</tt>
--   operation.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>TableName</tt> - The table that consumed the provisioned
--   throughput.</li>
--   <li><tt>CapacityUnits</tt> - The total number of capacity units
--   consumed.</li>
--   </ul>
batchWriteItemResponse_consumedCapacity :: Lens' BatchWriteItemResponse (Maybe [ConsumedCapacity])

-- | A map of tables and requests against those tables that were not
--   processed. The <tt>UnprocessedItems</tt> value is in the same form as
--   <tt>RequestItems</tt>, so you can provide this value directly to a
--   subsequent <tt>BatchGetItem</tt> operation. For more information, see
--   <tt>RequestItems</tt> in the Request Parameters section.
--   
--   Each <tt>UnprocessedItems</tt> entry consists of a table name and, for
--   that table, a list of operations to perform (<tt>DeleteRequest</tt> or
--   <tt>PutRequest</tt>).
--   
--   <ul>
--   <li><tt>DeleteRequest</tt> - Perform a <tt>DeleteItem</tt> operation
--   on the specified item. The item to be deleted is identified by a
--   <tt>Key</tt> subelement:<ul><li><tt>Key</tt> - A map of primary key
--   attribute values that uniquely identify the item. Each entry in this
--   map consists of an attribute name and an attribute
--   value.</li></ul></li>
--   <li><tt>PutRequest</tt> - Perform a <tt>PutItem</tt> operation on the
--   specified item. The item to be put is identified by an <tt>Item</tt>
--   subelement:<ul><li><tt>Item</tt> - A map of attributes and their
--   values. Each entry in this map consists of an attribute name and an
--   attribute value. Attribute values must not be null; string and binary
--   type attributes must have lengths greater than zero; and set type
--   attributes must not be empty. Requests that contain empty values will
--   be rejected with a <tt>ValidationException</tt> exception.If you
--   specify any attributes that are part of an index key, then the data
--   types for those attributes must match those of the schema in the
--   table's attribute definition.</li></ul></li>
--   </ul>
--   
--   If there are no unprocessed items remaining, the response contains an
--   empty <tt>UnprocessedItems</tt> map.
batchWriteItemResponse_unprocessedItems :: Lens' BatchWriteItemResponse (Maybe (HashMap Text (NonEmpty WriteRequest)))

-- | The response's http status code.
batchWriteItemResponse_httpStatus :: Lens' BatchWriteItemResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.BatchWriteItem.BatchWriteItem
instance GHC.Show.Show Amazonka.DynamoDB.BatchWriteItem.BatchWriteItem
instance GHC.Read.Read Amazonka.DynamoDB.BatchWriteItem.BatchWriteItem
instance GHC.Classes.Eq Amazonka.DynamoDB.BatchWriteItem.BatchWriteItem
instance GHC.Generics.Generic Amazonka.DynamoDB.BatchWriteItem.BatchWriteItemResponse
instance GHC.Show.Show Amazonka.DynamoDB.BatchWriteItem.BatchWriteItemResponse
instance GHC.Read.Read Amazonka.DynamoDB.BatchWriteItem.BatchWriteItemResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.BatchWriteItem.BatchWriteItemResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.BatchWriteItem.BatchWriteItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.BatchWriteItem.BatchWriteItemResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.BatchWriteItem.BatchWriteItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.BatchWriteItem.BatchWriteItem
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.BatchWriteItem.BatchWriteItem
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.BatchWriteItem.BatchWriteItem
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.BatchWriteItem.BatchWriteItem
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.BatchWriteItem.BatchWriteItem


-- | The <tt>BatchGetItem</tt> operation returns the attributes of one or
--   more items from one or more tables. You identify requested items by
--   primary key.
--   
--   A single operation can retrieve up to 16 MB of data, which can contain
--   as many as 100 items. <tt>BatchGetItem</tt> returns a partial result
--   if the response size limit is exceeded, the table's provisioned
--   throughput is exceeded, or an internal processing failure occurs. If a
--   partial result is returned, the operation returns a value for
--   <tt>UnprocessedKeys</tt>. You can use this value to retry the
--   operation starting with the next item to get.
--   
--   If you request more than 100 items, <tt>BatchGetItem</tt> returns a
--   <tt>ValidationException</tt> with the message "Too many items
--   requested for the BatchGetItem call."
--   
--   For example, if you ask to retrieve 100 items, but each individual
--   item is 300 KB in size, the system returns 52 items (so as not to
--   exceed the 16 MB limit). It also returns an appropriate
--   <tt>UnprocessedKeys</tt> value so you can get the next page of
--   results. If desired, your application can include its own logic to
--   assemble the pages of results into one dataset.
--   
--   If <i>none</i> of the items can be processed due to insufficient
--   provisioned throughput on all of the tables in the request, then
--   <tt>BatchGetItem</tt> returns a
--   <tt>ProvisionedThroughputExceededException</tt>. If <i>at least
--   one</i> of the items is successfully processed, then
--   <tt>BatchGetItem</tt> completes successfully, while returning the keys
--   of the unread items in <tt>UnprocessedKeys</tt>.
--   
--   If DynamoDB returns any unprocessed items, you should retry the batch
--   operation on those items. However, /we strongly recommend that you use
--   an exponential backoff algorithm/. If you retry the batch operation
--   immediately, the underlying read or write requests can still fail due
--   to throttling on the individual tables. If you delay the batch
--   operation using exponential backoff, the individual requests in the
--   batch are much more likely to succeed.
--   
--   For more information, see <a>Batch Operations and Error Handling</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   By default, <tt>BatchGetItem</tt> performs eventually consistent reads
--   on every table in the request. If you want strongly consistent reads
--   instead, you can set <tt>ConsistentRead</tt> to <tt>true</tt> for any
--   or all tables.
--   
--   In order to minimize response latency, <tt>BatchGetItem</tt> retrieves
--   items in parallel.
--   
--   When designing your application, keep in mind that DynamoDB does not
--   return items in any particular order. To help parse the response by
--   item, include the primary key values for the items in your request in
--   the <tt>ProjectionExpression</tt> parameter.
--   
--   If a requested item does not exist, it is not returned in the result.
--   Requests for nonexistent items consume the minimum read capacity units
--   according to the type of read. For more information, see <a>Working
--   with Tables</a> in the <i>Amazon DynamoDB Developer Guide</i>.
module Amazonka.DynamoDB.BatchGetItem

-- | Represents the input of a <tt>BatchGetItem</tt> operation.
--   
--   <i>See:</i> <a>newBatchGetItem</a> smart constructor.
data BatchGetItem
BatchGetItem' :: Maybe ReturnConsumedCapacity -> HashMap Text KeysAndAttributes -> BatchGetItem
[$sel:returnConsumedCapacity:BatchGetItem'] :: BatchGetItem -> Maybe ReturnConsumedCapacity

-- | A map of one or more table names and, for each table, a map that
--   describes one or more items to retrieve from that table. Each table
--   name can be used only once per <tt>BatchGetItem</tt> request.
--   
--   Each element in the map of items to retrieve consists of the
--   following:
--   
--   <ul>
--   <li><tt>ConsistentRead</tt> - If <tt>true</tt>, a strongly consistent
--   read is used; if <tt>false</tt> (the default), an eventually
--   consistent read is used.</li>
--   <li><tt>ExpressionAttributeNames</tt> - One or more substitution
--   tokens for attribute names in the <tt>ProjectionExpression</tt>
--   parameter. The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:<ul><li>To access an attribute whose
--   name conflicts with a DynamoDB reserved word.</li><li>To create a
--   placeholder for repeating occurrences of an attribute name in an
--   expression.</li><li>To prevent special characters in an attribute name
--   from being misinterpreted in an expression.</li></ul>Use the <b>#</b>
--   character in an expression to dereference an attribute name. For
--   example, consider the following attribute
--   name:<ul><li><pre>Percentile</pre></li></ul>The name of this attribute
--   conflicts with a reserved word, so it cannot be used directly in an
--   expression. (For the complete list of reserved words, see <a>Reserved
--   Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work
--   around this, you could specify the following for
--   <tt>ExpressionAttributeNames</tt>:<ul><li><pre>{"#P":"Percentile"}</pre></li></ul>You
--   could then use this substitution in an expression, as in this
--   example:<ul><li><pre>#P = :val</pre></li></ul>Tokens that begin with
--   the <b>:</b> character are /expression attribute values/, which are
--   placeholders for the actual value at runtime.For more information
--   about expression attribute names, see <a>Accessing Item Attributes</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.</li>
--   <li><tt>Keys</tt> - An array of primary key attribute values that
--   define specific items in the table. For each primary key, you must
--   provide <i>all</i> of the key attributes. For example, with a simple
--   primary key, you only need to provide the partition key value. For a
--   composite key, you must provide <i>both</i> the partition key value
--   and the sort key value.</li>
--   <li><tt>ProjectionExpression</tt> - A string that identifies one or
--   more attributes to retrieve from the table. These attributes can
--   include scalars, sets, or elements of a JSON document. The attributes
--   in the expression must be separated by commas.If no attribute names
--   are specified, then all attributes are returned. If any of the
--   requested attributes are not found, they do not appear in the
--   result.For more information, see <a>Accessing Item Attributes</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.</li>
--   <li><tt>AttributesToGet</tt> - This is a legacy parameter. Use
--   <tt>ProjectionExpression</tt> instead. For more information, see
--   <a>AttributesToGet</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.</li>
--   </ul>
[$sel:requestItems:BatchGetItem'] :: BatchGetItem -> HashMap Text KeysAndAttributes

-- | Create a value of <a>BatchGetItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:returnConsumedCapacity:BatchGetItem'</a>,
--   <a>batchGetItem_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:requestItems:BatchGetItem'</a>,
--   <a>batchGetItem_requestItems</a> - A map of one or more table names
--   and, for each table, a map that describes one or more items to
--   retrieve from that table. Each table name can be used only once per
--   <tt>BatchGetItem</tt> request.
--   
--   Each element in the map of items to retrieve consists of the
--   following:
--   
--   <ul>
--   <li><tt>ConsistentRead</tt> - If <tt>true</tt>, a strongly consistent
--   read is used; if <tt>false</tt> (the default), an eventually
--   consistent read is used.</li>
--   <li><tt>ExpressionAttributeNames</tt> - One or more substitution
--   tokens for attribute names in the <tt>ProjectionExpression</tt>
--   parameter. The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:<ul><li>To access an attribute whose
--   name conflicts with a DynamoDB reserved word.</li><li>To create a
--   placeholder for repeating occurrences of an attribute name in an
--   expression.</li><li>To prevent special characters in an attribute name
--   from being misinterpreted in an expression.</li></ul>Use the <b>#</b>
--   character in an expression to dereference an attribute name. For
--   example, consider the following attribute
--   name:<ul><li><pre>Percentile</pre></li></ul>The name of this attribute
--   conflicts with a reserved word, so it cannot be used directly in an
--   expression. (For the complete list of reserved words, see <a>Reserved
--   Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work
--   around this, you could specify the following for
--   <tt>ExpressionAttributeNames</tt>:<ul><li><pre>{"#P":"Percentile"}</pre></li></ul>You
--   could then use this substitution in an expression, as in this
--   example:<ul><li><pre>#P = :val</pre></li></ul>Tokens that begin with
--   the <b>:</b> character are /expression attribute values/, which are
--   placeholders for the actual value at runtime.For more information
--   about expression attribute names, see <a>Accessing Item Attributes</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.</li>
--   <li><tt>Keys</tt> - An array of primary key attribute values that
--   define specific items in the table. For each primary key, you must
--   provide <i>all</i> of the key attributes. For example, with a simple
--   primary key, you only need to provide the partition key value. For a
--   composite key, you must provide <i>both</i> the partition key value
--   and the sort key value.</li>
--   <li><tt>ProjectionExpression</tt> - A string that identifies one or
--   more attributes to retrieve from the table. These attributes can
--   include scalars, sets, or elements of a JSON document. The attributes
--   in the expression must be separated by commas.If no attribute names
--   are specified, then all attributes are returned. If any of the
--   requested attributes are not found, they do not appear in the
--   result.For more information, see <a>Accessing Item Attributes</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.</li>
--   <li><tt>AttributesToGet</tt> - This is a legacy parameter. Use
--   <tt>ProjectionExpression</tt> instead. For more information, see
--   <a>AttributesToGet</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.</li>
--   </ul>
newBatchGetItem :: BatchGetItem

-- | Undocumented member.
batchGetItem_returnConsumedCapacity :: Lens' BatchGetItem (Maybe ReturnConsumedCapacity)

-- | A map of one or more table names and, for each table, a map that
--   describes one or more items to retrieve from that table. Each table
--   name can be used only once per <tt>BatchGetItem</tt> request.
--   
--   Each element in the map of items to retrieve consists of the
--   following:
--   
--   <ul>
--   <li><tt>ConsistentRead</tt> - If <tt>true</tt>, a strongly consistent
--   read is used; if <tt>false</tt> (the default), an eventually
--   consistent read is used.</li>
--   <li><tt>ExpressionAttributeNames</tt> - One or more substitution
--   tokens for attribute names in the <tt>ProjectionExpression</tt>
--   parameter. The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:<ul><li>To access an attribute whose
--   name conflicts with a DynamoDB reserved word.</li><li>To create a
--   placeholder for repeating occurrences of an attribute name in an
--   expression.</li><li>To prevent special characters in an attribute name
--   from being misinterpreted in an expression.</li></ul>Use the <b>#</b>
--   character in an expression to dereference an attribute name. For
--   example, consider the following attribute
--   name:<ul><li><pre>Percentile</pre></li></ul>The name of this attribute
--   conflicts with a reserved word, so it cannot be used directly in an
--   expression. (For the complete list of reserved words, see <a>Reserved
--   Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work
--   around this, you could specify the following for
--   <tt>ExpressionAttributeNames</tt>:<ul><li><pre>{"#P":"Percentile"}</pre></li></ul>You
--   could then use this substitution in an expression, as in this
--   example:<ul><li><pre>#P = :val</pre></li></ul>Tokens that begin with
--   the <b>:</b> character are /expression attribute values/, which are
--   placeholders for the actual value at runtime.For more information
--   about expression attribute names, see <a>Accessing Item Attributes</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.</li>
--   <li><tt>Keys</tt> - An array of primary key attribute values that
--   define specific items in the table. For each primary key, you must
--   provide <i>all</i> of the key attributes. For example, with a simple
--   primary key, you only need to provide the partition key value. For a
--   composite key, you must provide <i>both</i> the partition key value
--   and the sort key value.</li>
--   <li><tt>ProjectionExpression</tt> - A string that identifies one or
--   more attributes to retrieve from the table. These attributes can
--   include scalars, sets, or elements of a JSON document. The attributes
--   in the expression must be separated by commas.If no attribute names
--   are specified, then all attributes are returned. If any of the
--   requested attributes are not found, they do not appear in the
--   result.For more information, see <a>Accessing Item Attributes</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.</li>
--   <li><tt>AttributesToGet</tt> - This is a legacy parameter. Use
--   <tt>ProjectionExpression</tt> instead. For more information, see
--   <a>AttributesToGet</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.</li>
--   </ul>
batchGetItem_requestItems :: Lens' BatchGetItem (HashMap Text KeysAndAttributes)

-- | Represents the output of a <tt>BatchGetItem</tt> operation.
--   
--   <i>See:</i> <a>newBatchGetItemResponse</a> smart constructor.
data BatchGetItemResponse
BatchGetItemResponse' :: Maybe (HashMap Text KeysAndAttributes) -> Maybe (HashMap Text [HashMap Text AttributeValue]) -> Maybe [ConsumedCapacity] -> Int -> BatchGetItemResponse

-- | A map of tables and their respective keys that were not processed with
--   the current response. The <tt>UnprocessedKeys</tt> value is in the
--   same form as <tt>RequestItems</tt>, so the value can be provided
--   directly to a subsequent <tt>BatchGetItem</tt> operation. For more
--   information, see <tt>RequestItems</tt> in the Request Parameters
--   section.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>Keys</tt> - An array of primary key attribute values that
--   define specific items in the table.</li>
--   <li><tt>ProjectionExpression</tt> - One or more attributes to be
--   retrieved from the table or index. By default, all attributes are
--   returned. If a requested attribute is not found, it does not appear in
--   the result.</li>
--   <li><tt>ConsistentRead</tt> - The consistency of a read operation. If
--   set to <tt>true</tt>, then a strongly consistent read is used;
--   otherwise, an eventually consistent read is used.</li>
--   </ul>
--   
--   If there are no unprocessed keys remaining, the response contains an
--   empty <tt>UnprocessedKeys</tt> map.
[$sel:unprocessedKeys:BatchGetItemResponse'] :: BatchGetItemResponse -> Maybe (HashMap Text KeysAndAttributes)

-- | A map of table name to a list of items. Each object in
--   <tt>Responses</tt> consists of a table name, along with a map of
--   attribute data consisting of the data type and attribute value.
[$sel:responses:BatchGetItemResponse'] :: BatchGetItemResponse -> Maybe (HashMap Text [HashMap Text AttributeValue])

-- | The read capacity units consumed by the entire <tt>BatchGetItem</tt>
--   operation.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>TableName</tt> - The table that consumed the provisioned
--   throughput.</li>
--   <li><tt>CapacityUnits</tt> - The total number of capacity units
--   consumed.</li>
--   </ul>
[$sel:consumedCapacity:BatchGetItemResponse'] :: BatchGetItemResponse -> Maybe [ConsumedCapacity]

-- | The response's http status code.
[$sel:httpStatus:BatchGetItemResponse'] :: BatchGetItemResponse -> Int

-- | Create a value of <a>BatchGetItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:unprocessedKeys:BatchGetItemResponse'</a>,
--   <a>batchGetItemResponse_unprocessedKeys</a> - A map of tables and
--   their respective keys that were not processed with the current
--   response. The <tt>UnprocessedKeys</tt> value is in the same form as
--   <tt>RequestItems</tt>, so the value can be provided directly to a
--   subsequent <tt>BatchGetItem</tt> operation. For more information, see
--   <tt>RequestItems</tt> in the Request Parameters section.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>Keys</tt> - An array of primary key attribute values that
--   define specific items in the table.</li>
--   <li><tt>ProjectionExpression</tt> - One or more attributes to be
--   retrieved from the table or index. By default, all attributes are
--   returned. If a requested attribute is not found, it does not appear in
--   the result.</li>
--   <li><tt>ConsistentRead</tt> - The consistency of a read operation. If
--   set to <tt>true</tt>, then a strongly consistent read is used;
--   otherwise, an eventually consistent read is used.</li>
--   </ul>
--   
--   If there are no unprocessed keys remaining, the response contains an
--   empty <tt>UnprocessedKeys</tt> map.
--   
--   <a>$sel:responses:BatchGetItemResponse'</a>,
--   <a>batchGetItemResponse_responses</a> - A map of table name to a list
--   of items. Each object in <tt>Responses</tt> consists of a table name,
--   along with a map of attribute data consisting of the data type and
--   attribute value.
--   
--   <a>$sel:consumedCapacity:BatchGetItemResponse'</a>,
--   <a>batchGetItemResponse_consumedCapacity</a> - The read capacity units
--   consumed by the entire <tt>BatchGetItem</tt> operation.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>TableName</tt> - The table that consumed the provisioned
--   throughput.</li>
--   <li><tt>CapacityUnits</tt> - The total number of capacity units
--   consumed.</li>
--   </ul>
--   
--   <a>$sel:httpStatus:BatchGetItemResponse'</a>,
--   <a>batchGetItemResponse_httpStatus</a> - The response's http status
--   code.
newBatchGetItemResponse :: Int -> BatchGetItemResponse

-- | A map of tables and their respective keys that were not processed with
--   the current response. The <tt>UnprocessedKeys</tt> value is in the
--   same form as <tt>RequestItems</tt>, so the value can be provided
--   directly to a subsequent <tt>BatchGetItem</tt> operation. For more
--   information, see <tt>RequestItems</tt> in the Request Parameters
--   section.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>Keys</tt> - An array of primary key attribute values that
--   define specific items in the table.</li>
--   <li><tt>ProjectionExpression</tt> - One or more attributes to be
--   retrieved from the table or index. By default, all attributes are
--   returned. If a requested attribute is not found, it does not appear in
--   the result.</li>
--   <li><tt>ConsistentRead</tt> - The consistency of a read operation. If
--   set to <tt>true</tt>, then a strongly consistent read is used;
--   otherwise, an eventually consistent read is used.</li>
--   </ul>
--   
--   If there are no unprocessed keys remaining, the response contains an
--   empty <tt>UnprocessedKeys</tt> map.
batchGetItemResponse_unprocessedKeys :: Lens' BatchGetItemResponse (Maybe (HashMap Text KeysAndAttributes))

-- | A map of table name to a list of items. Each object in
--   <tt>Responses</tt> consists of a table name, along with a map of
--   attribute data consisting of the data type and attribute value.
batchGetItemResponse_responses :: Lens' BatchGetItemResponse (Maybe (HashMap Text [HashMap Text AttributeValue]))

-- | The read capacity units consumed by the entire <tt>BatchGetItem</tt>
--   operation.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>TableName</tt> - The table that consumed the provisioned
--   throughput.</li>
--   <li><tt>CapacityUnits</tt> - The total number of capacity units
--   consumed.</li>
--   </ul>
batchGetItemResponse_consumedCapacity :: Lens' BatchGetItemResponse (Maybe [ConsumedCapacity])

-- | The response's http status code.
batchGetItemResponse_httpStatus :: Lens' BatchGetItemResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.BatchGetItem.BatchGetItem
instance GHC.Show.Show Amazonka.DynamoDB.BatchGetItem.BatchGetItem
instance GHC.Read.Read Amazonka.DynamoDB.BatchGetItem.BatchGetItem
instance GHC.Classes.Eq Amazonka.DynamoDB.BatchGetItem.BatchGetItem
instance GHC.Generics.Generic Amazonka.DynamoDB.BatchGetItem.BatchGetItemResponse
instance GHC.Show.Show Amazonka.DynamoDB.BatchGetItem.BatchGetItemResponse
instance GHC.Read.Read Amazonka.DynamoDB.BatchGetItem.BatchGetItemResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.BatchGetItem.BatchGetItemResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.BatchGetItem.BatchGetItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.BatchGetItem.BatchGetItemResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.BatchGetItem.BatchGetItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.BatchGetItem.BatchGetItem
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.BatchGetItem.BatchGetItem
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.BatchGetItem.BatchGetItem
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.BatchGetItem.BatchGetItem
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.BatchGetItem.BatchGetItem


-- | This operation allows you to perform batch reads and writes on data
--   stored in DynamoDB, using PartiQL.
module Amazonka.DynamoDB.BatchExecuteStatement

-- | <i>See:</i> <a>newBatchExecuteStatement</a> smart constructor.
data BatchExecuteStatement
BatchExecuteStatement' :: NonEmpty BatchStatementRequest -> BatchExecuteStatement

-- | The list of PartiQL statements representing the batch to run.
[$sel:statements:BatchExecuteStatement'] :: BatchExecuteStatement -> NonEmpty BatchStatementRequest

-- | Create a value of <a>BatchExecuteStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statements:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_statements</a> - The list of PartiQL
--   statements representing the batch to run.
newBatchExecuteStatement :: NonEmpty BatchStatementRequest -> BatchExecuteStatement

-- | The list of PartiQL statements representing the batch to run.
batchExecuteStatement_statements :: Lens' BatchExecuteStatement (NonEmpty BatchStatementRequest)

-- | <i>See:</i> <a>newBatchExecuteStatementResponse</a> smart constructor.
data BatchExecuteStatementResponse
BatchExecuteStatementResponse' :: Maybe [BatchStatementResponse] -> Int -> BatchExecuteStatementResponse

-- | The response to each PartiQL statement in the batch.
[$sel:responses:BatchExecuteStatementResponse'] :: BatchExecuteStatementResponse -> Maybe [BatchStatementResponse]

-- | The response's http status code.
[$sel:httpStatus:BatchExecuteStatementResponse'] :: BatchExecuteStatementResponse -> Int

-- | Create a value of <a>BatchExecuteStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responses:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_responses</a> - The response to each
--   PartiQL statement in the batch.
--   
--   <a>$sel:httpStatus:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_httpStatus</a> - The response's http
--   status code.
newBatchExecuteStatementResponse :: Int -> BatchExecuteStatementResponse

-- | The response to each PartiQL statement in the batch.
batchExecuteStatementResponse_responses :: Lens' BatchExecuteStatementResponse (Maybe [BatchStatementResponse])

-- | The response's http status code.
batchExecuteStatementResponse_httpStatus :: Lens' BatchExecuteStatementResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatement
instance GHC.Show.Show Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatement
instance GHC.Read.Read Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatement
instance GHC.Classes.Eq Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatement
instance GHC.Generics.Generic Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatementResponse
instance GHC.Show.Show Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatementResponse
instance GHC.Read.Read Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatementResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatementResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatement
instance Control.DeepSeq.NFData Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatementResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatement
instance Control.DeepSeq.NFData Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatement
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatement
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatement
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatement
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.BatchExecuteStatement.BatchExecuteStatement


-- | Removes the association of tags from an Amazon DynamoDB resource. You
--   can call <tt>UntagResource</tt> up to five times per second, per
--   account.
--   
--   For an overview on tagging DynamoDB resources, see <a>Tagging for
--   DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
module Amazonka.DynamoDB.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | The DynamoDB resource that the tags will be removed from. This value
--   is an Amazon Resource Name (ARN).
[$sel:resourceArn:UntagResource'] :: UntagResource -> Text

-- | A list of tag keys. Existing tags of the resource whose keys are
--   members of this list will be removed from the DynamoDB resource.
[$sel:tagKeys:UntagResource'] :: UntagResource -> [Text]

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The DynamoDB resource that the tags
--   will be removed from. This value is an Amazon Resource Name (ARN).
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - A
--   list of tag keys. Existing tags of the resource whose keys are members
--   of this list will be removed from the DynamoDB resource.
newUntagResource :: Text -> UntagResource

-- | The DynamoDB resource that the tags will be removed from. This value
--   is an Amazon Resource Name (ARN).
untagResource_resourceArn :: Lens' UntagResource Text

-- | A list of tag keys. Existing tags of the resource whose keys are
--   members of this list will be removed from the DynamoDB resource.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newUntagResourceResponse :: UntagResourceResponse
instance GHC.Generics.Generic Amazonka.DynamoDB.UntagResource.UntagResource
instance GHC.Show.Show Amazonka.DynamoDB.UntagResource.UntagResource
instance GHC.Read.Read Amazonka.DynamoDB.UntagResource.UntagResource
instance GHC.Classes.Eq Amazonka.DynamoDB.UntagResource.UntagResource
instance GHC.Generics.Generic Amazonka.DynamoDB.UntagResource.UntagResourceResponse
instance GHC.Show.Show Amazonka.DynamoDB.UntagResource.UntagResourceResponse
instance GHC.Read.Read Amazonka.DynamoDB.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.UntagResource.UntagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UntagResource.UntagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.UntagResource.UntagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.UntagResource.UntagResource
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.UntagResource.UntagResource
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.UntagResource.UntagResource


-- | <tt>UpdateContinuousBackups</tt> enables or disables point in time
--   recovery for the specified table. A successful
--   <tt>UpdateContinuousBackups</tt> call returns the current
--   <tt>ContinuousBackupsDescription</tt>. Continuous backups are
--   <tt>ENABLED</tt> on all tables at table creation. If point in time
--   recovery is enabled, <tt>PointInTimeRecoveryStatus</tt> will be set to
--   ENABLED.
--   
--   Once continuous backups and point in time recovery are enabled, you
--   can restore to any point in time within
--   <tt>EarliestRestorableDateTime</tt> and
--   <tt>LatestRestorableDateTime</tt>.
--   
--   <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time. You can restore your table to any point in time during
--   the last 35 days.
module Amazonka.DynamoDB.UpdateContinuousBackups

-- | <i>See:</i> <a>newUpdateContinuousBackups</a> smart constructor.
data UpdateContinuousBackups
UpdateContinuousBackups' :: Text -> PointInTimeRecoverySpecification -> UpdateContinuousBackups

-- | The name of the table.
[$sel:tableName:UpdateContinuousBackups'] :: UpdateContinuousBackups -> Text

-- | Represents the settings used to enable point in time recovery.
[$sel:pointInTimeRecoverySpecification:UpdateContinuousBackups'] :: UpdateContinuousBackups -> PointInTimeRecoverySpecification

-- | Create a value of <a>UpdateContinuousBackups</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:UpdateContinuousBackups'</a>,
--   <a>updateContinuousBackups_tableName</a> - The name of the table.
--   
--   <a>$sel:pointInTimeRecoverySpecification:UpdateContinuousBackups'</a>,
--   <a>updateContinuousBackups_pointInTimeRecoverySpecification</a> -
--   Represents the settings used to enable point in time recovery.
newUpdateContinuousBackups :: Text -> PointInTimeRecoverySpecification -> UpdateContinuousBackups

-- | The name of the table.
updateContinuousBackups_tableName :: Lens' UpdateContinuousBackups Text

-- | Represents the settings used to enable point in time recovery.
updateContinuousBackups_pointInTimeRecoverySpecification :: Lens' UpdateContinuousBackups PointInTimeRecoverySpecification

-- | <i>See:</i> <a>newUpdateContinuousBackupsResponse</a> smart
--   constructor.
data UpdateContinuousBackupsResponse
UpdateContinuousBackupsResponse' :: Maybe ContinuousBackupsDescription -> Int -> UpdateContinuousBackupsResponse

-- | Represents the continuous backups and point in time recovery settings
--   on the table.
[$sel:continuousBackupsDescription:UpdateContinuousBackupsResponse'] :: UpdateContinuousBackupsResponse -> Maybe ContinuousBackupsDescription

-- | The response's http status code.
[$sel:httpStatus:UpdateContinuousBackupsResponse'] :: UpdateContinuousBackupsResponse -> Int

-- | Create a value of <a>UpdateContinuousBackupsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:continuousBackupsDescription:UpdateContinuousBackupsResponse'</a>,
--   <a>updateContinuousBackupsResponse_continuousBackupsDescription</a> -
--   Represents the continuous backups and point in time recovery settings
--   on the table.
--   
--   <a>$sel:httpStatus:UpdateContinuousBackupsResponse'</a>,
--   <a>updateContinuousBackupsResponse_httpStatus</a> - The response's
--   http status code.
newUpdateContinuousBackupsResponse :: Int -> UpdateContinuousBackupsResponse

-- | Represents the continuous backups and point in time recovery settings
--   on the table.
updateContinuousBackupsResponse_continuousBackupsDescription :: Lens' UpdateContinuousBackupsResponse (Maybe ContinuousBackupsDescription)

-- | The response's http status code.
updateContinuousBackupsResponse_httpStatus :: Lens' UpdateContinuousBackupsResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackups
instance GHC.Show.Show Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackups
instance GHC.Read.Read Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackups
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackups
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackupsResponse
instance GHC.Show.Show Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackupsResponse
instance GHC.Read.Read Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackupsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackupsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackups
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackupsResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackups
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackups
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackups
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackups
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackups
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.UpdateContinuousBackups.UpdateContinuousBackups


-- | Updates the status for contributor insights for a specific table or
--   index.
module Amazonka.DynamoDB.UpdateContributorInsights

-- | <i>See:</i> <a>newUpdateContributorInsights</a> smart constructor.
data UpdateContributorInsights
UpdateContributorInsights' :: Maybe Text -> Text -> ContributorInsightsAction -> UpdateContributorInsights

-- | The global secondary index name, if applicable.
[$sel:indexName:UpdateContributorInsights'] :: UpdateContributorInsights -> Maybe Text

-- | The name of the table.
[$sel:tableName:UpdateContributorInsights'] :: UpdateContributorInsights -> Text

-- | Represents the contributor insights action.
[$sel:contributorInsightsAction:UpdateContributorInsights'] :: UpdateContributorInsights -> ContributorInsightsAction

-- | Create a value of <a>UpdateContributorInsights</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:UpdateContributorInsights'</a>,
--   <a>updateContributorInsights_indexName</a> - The global secondary
--   index name, if applicable.
--   
--   <a>$sel:tableName:UpdateContributorInsights'</a>,
--   <a>updateContributorInsights_tableName</a> - The name of the table.
--   
--   <a>$sel:contributorInsightsAction:UpdateContributorInsights'</a>,
--   <a>updateContributorInsights_contributorInsightsAction</a> -
--   Represents the contributor insights action.
newUpdateContributorInsights :: Text -> ContributorInsightsAction -> UpdateContributorInsights

-- | The global secondary index name, if applicable.
updateContributorInsights_indexName :: Lens' UpdateContributorInsights (Maybe Text)

-- | The name of the table.
updateContributorInsights_tableName :: Lens' UpdateContributorInsights Text

-- | Represents the contributor insights action.
updateContributorInsights_contributorInsightsAction :: Lens' UpdateContributorInsights ContributorInsightsAction

-- | <i>See:</i> <a>newUpdateContributorInsightsResponse</a> smart
--   constructor.
data UpdateContributorInsightsResponse
UpdateContributorInsightsResponse' :: Maybe ContributorInsightsStatus -> Maybe Text -> Maybe Text -> Int -> UpdateContributorInsightsResponse

-- | The status of contributor insights
[$sel:contributorInsightsStatus:UpdateContributorInsightsResponse'] :: UpdateContributorInsightsResponse -> Maybe ContributorInsightsStatus

-- | The name of the table.
[$sel:tableName:UpdateContributorInsightsResponse'] :: UpdateContributorInsightsResponse -> Maybe Text

-- | The name of the global secondary index, if applicable.
[$sel:indexName:UpdateContributorInsightsResponse'] :: UpdateContributorInsightsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:UpdateContributorInsightsResponse'] :: UpdateContributorInsightsResponse -> Int

-- | Create a value of <a>UpdateContributorInsightsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:contributorInsightsStatus:UpdateContributorInsightsResponse'</a>,
--   <a>updateContributorInsightsResponse_contributorInsightsStatus</a> -
--   The status of contributor insights
--   
--   <a>$sel:tableName:UpdateContributorInsights'</a>,
--   <a>updateContributorInsightsResponse_tableName</a> - The name of the
--   table.
--   
--   <a>$sel:indexName:UpdateContributorInsights'</a>,
--   <a>updateContributorInsightsResponse_indexName</a> - The name of the
--   global secondary index, if applicable.
--   
--   <a>$sel:httpStatus:UpdateContributorInsightsResponse'</a>,
--   <a>updateContributorInsightsResponse_httpStatus</a> - The response's
--   http status code.
newUpdateContributorInsightsResponse :: Int -> UpdateContributorInsightsResponse

-- | The status of contributor insights
updateContributorInsightsResponse_contributorInsightsStatus :: Lens' UpdateContributorInsightsResponse (Maybe ContributorInsightsStatus)

-- | The name of the table.
updateContributorInsightsResponse_tableName :: Lens' UpdateContributorInsightsResponse (Maybe Text)

-- | The name of the global secondary index, if applicable.
updateContributorInsightsResponse_indexName :: Lens' UpdateContributorInsightsResponse (Maybe Text)

-- | The response's http status code.
updateContributorInsightsResponse_httpStatus :: Lens' UpdateContributorInsightsResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsights
instance GHC.Show.Show Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsights
instance GHC.Read.Read Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsights
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsights
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsightsResponse
instance GHC.Show.Show Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsightsResponse
instance GHC.Read.Read Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsightsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsightsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsights
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsightsResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsights
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsights
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsights
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsights
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsights
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.UpdateContributorInsights.UpdateContributorInsights


-- | Adds or removes replicas in the specified global table. The global
--   table must already exist to be able to use this operation. Any replica
--   to be added must be empty, have the same name as the global table,
--   have the same key schema, have DynamoDB Streams enabled, and have the
--   same provisioned and maximum write capacity units.
--   
--   Although you can use <tt>UpdateGlobalTable</tt> to add replicas and
--   remove replicas in a single request, for simplicity we recommend that
--   you issue separate requests for adding or removing replicas.
--   
--   If global secondary indexes are specified, then the following
--   conditions must also be met:
--   
--   <ul>
--   <li>The global secondary indexes must have the same name.</li>
--   <li>The global secondary indexes must have the same hash key and sort
--   key (if present).</li>
--   <li>The global secondary indexes must have the same provisioned and
--   maximum write capacity units.</li>
--   </ul>
module Amazonka.DynamoDB.UpdateGlobalTable

-- | <i>See:</i> <a>newUpdateGlobalTable</a> smart constructor.
data UpdateGlobalTable
UpdateGlobalTable' :: Text -> [ReplicaUpdate] -> UpdateGlobalTable

-- | The global table name.
[$sel:globalTableName:UpdateGlobalTable'] :: UpdateGlobalTable -> Text

-- | A list of Regions that should be added or removed from the global
--   table.
[$sel:replicaUpdates:UpdateGlobalTable'] :: UpdateGlobalTable -> [ReplicaUpdate]

-- | Create a value of <a>UpdateGlobalTable</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableName:UpdateGlobalTable'</a>,
--   <a>updateGlobalTable_globalTableName</a> - The global table name.
--   
--   <a>$sel:replicaUpdates:UpdateGlobalTable'</a>,
--   <a>updateGlobalTable_replicaUpdates</a> - A list of Regions that
--   should be added or removed from the global table.
newUpdateGlobalTable :: Text -> UpdateGlobalTable

-- | The global table name.
updateGlobalTable_globalTableName :: Lens' UpdateGlobalTable Text

-- | A list of Regions that should be added or removed from the global
--   table.
updateGlobalTable_replicaUpdates :: Lens' UpdateGlobalTable [ReplicaUpdate]

-- | <i>See:</i> <a>newUpdateGlobalTableResponse</a> smart constructor.
data UpdateGlobalTableResponse
UpdateGlobalTableResponse' :: Maybe GlobalTableDescription -> Int -> UpdateGlobalTableResponse

-- | Contains the details of the global table.
[$sel:globalTableDescription:UpdateGlobalTableResponse'] :: UpdateGlobalTableResponse -> Maybe GlobalTableDescription

-- | The response's http status code.
[$sel:httpStatus:UpdateGlobalTableResponse'] :: UpdateGlobalTableResponse -> Int

-- | Create a value of <a>UpdateGlobalTableResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableDescription:UpdateGlobalTableResponse'</a>,
--   <a>updateGlobalTableResponse_globalTableDescription</a> - Contains the
--   details of the global table.
--   
--   <a>$sel:httpStatus:UpdateGlobalTableResponse'</a>,
--   <a>updateGlobalTableResponse_httpStatus</a> - The response's http
--   status code.
newUpdateGlobalTableResponse :: Int -> UpdateGlobalTableResponse

-- | Contains the details of the global table.
updateGlobalTableResponse_globalTableDescription :: Lens' UpdateGlobalTableResponse (Maybe GlobalTableDescription)

-- | The response's http status code.
updateGlobalTableResponse_httpStatus :: Lens' UpdateGlobalTableResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTable
instance GHC.Show.Show Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTable
instance GHC.Read.Read Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTable
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTable
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTableResponse
instance GHC.Show.Show Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTableResponse
instance GHC.Read.Read Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTableResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTableResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTableResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTable
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTable
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTable
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTable
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.UpdateGlobalTable.UpdateGlobalTable


-- | Updates settings for a global table.
module Amazonka.DynamoDB.UpdateGlobalTableSettings

-- | <i>See:</i> <a>newUpdateGlobalTableSettings</a> smart constructor.
data UpdateGlobalTableSettings
UpdateGlobalTableSettings' :: Maybe AutoScalingSettingsUpdate -> Maybe BillingMode -> Maybe Natural -> Maybe (NonEmpty ReplicaSettingsUpdate) -> Maybe (NonEmpty GlobalTableGlobalSecondaryIndexSettingsUpdate) -> Text -> UpdateGlobalTableSettings

-- | Auto scaling settings for managing provisioned write capacity for the
--   global table.
[$sel:globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate:UpdateGlobalTableSettings'] :: UpdateGlobalTableSettings -> Maybe AutoScalingSettingsUpdate

-- | The billing mode of the global table. If
--   <tt>GlobalTableBillingMode</tt> is not specified, the global table
--   defaults to <tt>PROVISIONED</tt> capacity billing mode.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
[$sel:globalTableBillingMode:UpdateGlobalTableSettings'] :: UpdateGlobalTableSettings -> Maybe BillingMode

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
[$sel:globalTableProvisionedWriteCapacityUnits:UpdateGlobalTableSettings'] :: UpdateGlobalTableSettings -> Maybe Natural

-- | Represents the settings for a global table in a Region that will be
--   modified.
[$sel:replicaSettingsUpdate:UpdateGlobalTableSettings'] :: UpdateGlobalTableSettings -> Maybe (NonEmpty ReplicaSettingsUpdate)

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
[$sel:globalTableGlobalSecondaryIndexSettingsUpdate:UpdateGlobalTableSettings'] :: UpdateGlobalTableSettings -> Maybe (NonEmpty GlobalTableGlobalSecondaryIndexSettingsUpdate)

-- | The name of the global table
[$sel:globalTableName:UpdateGlobalTableSettings'] :: UpdateGlobalTableSettings -> Text

-- | Create a value of <a>UpdateGlobalTableSettings</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettings_globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate</a>
--   - Auto scaling settings for managing provisioned write capacity for
--   the global table.
--   
--   <a>$sel:globalTableBillingMode:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettings_globalTableBillingMode</a> - The billing
--   mode of the global table. If <tt>GlobalTableBillingMode</tt> is not
--   specified, the global table defaults to <tt>PROVISIONED</tt> capacity
--   billing mode.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
--   
--   
--   <a>$sel:globalTableProvisionedWriteCapacityUnits:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettings_globalTableProvisionedWriteCapacityUnits</a>
--   - The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
--   
--   <a>$sel:replicaSettingsUpdate:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettings_replicaSettingsUpdate</a> - Represents
--   the settings for a global table in a Region that will be modified.
--   
--   
--   <a>$sel:globalTableGlobalSecondaryIndexSettingsUpdate:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettings_globalTableGlobalSecondaryIndexSettingsUpdate</a>
--   - Represents the settings of a global secondary index for a global
--   table that will be modified.
--   
--   <a>$sel:globalTableName:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettings_globalTableName</a> - The name of the
--   global table
newUpdateGlobalTableSettings :: Text -> UpdateGlobalTableSettings

-- | Auto scaling settings for managing provisioned write capacity for the
--   global table.
updateGlobalTableSettings_globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate :: Lens' UpdateGlobalTableSettings (Maybe AutoScalingSettingsUpdate)

-- | The billing mode of the global table. If
--   <tt>GlobalTableBillingMode</tt> is not specified, the global table
--   defaults to <tt>PROVISIONED</tt> capacity billing mode.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
updateGlobalTableSettings_globalTableBillingMode :: Lens' UpdateGlobalTableSettings (Maybe BillingMode)

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
updateGlobalTableSettings_globalTableProvisionedWriteCapacityUnits :: Lens' UpdateGlobalTableSettings (Maybe Natural)

-- | Represents the settings for a global table in a Region that will be
--   modified.
updateGlobalTableSettings_replicaSettingsUpdate :: Lens' UpdateGlobalTableSettings (Maybe (NonEmpty ReplicaSettingsUpdate))

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
updateGlobalTableSettings_globalTableGlobalSecondaryIndexSettingsUpdate :: Lens' UpdateGlobalTableSettings (Maybe (NonEmpty GlobalTableGlobalSecondaryIndexSettingsUpdate))

-- | The name of the global table
updateGlobalTableSettings_globalTableName :: Lens' UpdateGlobalTableSettings Text

-- | <i>See:</i> <a>newUpdateGlobalTableSettingsResponse</a> smart
--   constructor.
data UpdateGlobalTableSettingsResponse
UpdateGlobalTableSettingsResponse' :: Maybe [ReplicaSettingsDescription] -> Maybe Text -> Int -> UpdateGlobalTableSettingsResponse

-- | The Region-specific settings for the global table.
[$sel:replicaSettings:UpdateGlobalTableSettingsResponse'] :: UpdateGlobalTableSettingsResponse -> Maybe [ReplicaSettingsDescription]

-- | The name of the global table.
[$sel:globalTableName:UpdateGlobalTableSettingsResponse'] :: UpdateGlobalTableSettingsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:UpdateGlobalTableSettingsResponse'] :: UpdateGlobalTableSettingsResponse -> Int

-- | Create a value of <a>UpdateGlobalTableSettingsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaSettings:UpdateGlobalTableSettingsResponse'</a>,
--   <a>updateGlobalTableSettingsResponse_replicaSettings</a> - The
--   Region-specific settings for the global table.
--   
--   <a>$sel:globalTableName:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettingsResponse_globalTableName</a> - The name of
--   the global table.
--   
--   <a>$sel:httpStatus:UpdateGlobalTableSettingsResponse'</a>,
--   <a>updateGlobalTableSettingsResponse_httpStatus</a> - The response's
--   http status code.
newUpdateGlobalTableSettingsResponse :: Int -> UpdateGlobalTableSettingsResponse

-- | The Region-specific settings for the global table.
updateGlobalTableSettingsResponse_replicaSettings :: Lens' UpdateGlobalTableSettingsResponse (Maybe [ReplicaSettingsDescription])

-- | The name of the global table.
updateGlobalTableSettingsResponse_globalTableName :: Lens' UpdateGlobalTableSettingsResponse (Maybe Text)

-- | The response's http status code.
updateGlobalTableSettingsResponse_httpStatus :: Lens' UpdateGlobalTableSettingsResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettings
instance GHC.Show.Show Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettings
instance GHC.Read.Read Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettings
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettings
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettingsResponse
instance GHC.Show.Show Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettingsResponse
instance GHC.Read.Read Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettingsResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettingsResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettings
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettingsResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettings
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettings
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettings
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettings
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettings
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.UpdateGlobalTableSettings.UpdateGlobalTableSettings


-- | Edits an existing item's attributes, or adds a new item to the table
--   if it does not already exist. You can put, delete, or add attribute
--   values. You can also perform a conditional update on an existing item
--   (insert a new attribute name-value pair if it doesn't exist, or
--   replace an existing name-value pair if it has certain expected
--   attribute values).
--   
--   You can also return the item's attribute values in the same
--   <tt>UpdateItem</tt> operation using the <tt>ReturnValues</tt>
--   parameter.
module Amazonka.DynamoDB.UpdateItem

-- | Represents the input of an <tt>UpdateItem</tt> operation.
--   
--   <i>See:</i> <a>newUpdateItem</a> smart constructor.
data UpdateItem
UpdateItem' :: Maybe (HashMap Text Text) -> Maybe ReturnValue -> Maybe Text -> Maybe (HashMap Text AttributeValue) -> Maybe (HashMap Text AttributeValueUpdate) -> Maybe ReturnConsumedCapacity -> Maybe ReturnItemCollectionMetrics -> Maybe Text -> Maybe ConditionalOperator -> Maybe (HashMap Text ExpectedAttributeValue) -> Text -> HashMap Text AttributeValue -> UpdateItem

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.) To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information about expression attribute names, see
--   <a>Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
[$sel:expressionAttributeNames:UpdateItem'] :: UpdateItem -> Maybe (HashMap Text Text)

-- | Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appear before or after they are updated. For <tt>UpdateItem</tt>,
--   the valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - Returns all of the attributes of the item, as
--   they appeared before the UpdateItem operation.</li>
--   <li><tt>UPDATED_OLD</tt> - Returns only the updated attributes, as
--   they appeared before the UpdateItem operation.</li>
--   <li><tt>ALL_NEW</tt> - Returns all of the attributes of the item, as
--   they appear after the UpdateItem operation.</li>
--   <li><tt>UPDATED_NEW</tt> - Returns only the updated attributes, as
--   they appear after the UpdateItem operation.</li>
--   </ul>
--   
--   There is no additional cost associated with requesting a return value
--   aside from the small network and processing overhead of receiving a
--   larger response. No read capacity units are consumed.
--   
--   The values returned are strongly consistent.
[$sel:returnValues:UpdateItem'] :: UpdateItem -> Maybe ReturnValue

-- | An expression that defines one or more attributes to be updated, the
--   action to be performed on them, and new values for them.
--   
--   The following action values are available for
--   <tt>UpdateExpression</tt>.
--   
--   <ul>
--   <li><tt>SET</tt> - Adds one or more attributes and values to an item.
--   If any of these attributes already exist, they are replaced by the new
--   values. You can also use <tt>SET</tt> to add or subtract from an
--   attribute that is of type Number. For example: <tt>SET myNum = myNum +
--   :val</tt><tt>SET</tt> supports the following
--   functions:<ul><li><tt>if_not_exists (path, operand)</tt> - if the item
--   does not contain an attribute at the specified path, then
--   <tt>if_not_exists</tt> evaluates to operand; otherwise, it evaluates
--   to path. You can use this function to avoid overwriting an attribute
--   that may already be present in the item.</li><li><tt>list_append
--   (operand, operand)</tt> - evaluates to a list with a new element added
--   to it. You can append the new element to the start or the end of the
--   list by reversing the order of the operands.</li></ul>These function
--   names are case-sensitive.</li>
--   <li><tt>REMOVE</tt> - Removes one or more attributes from an
--   item.</li>
--   <li><tt>ADD</tt> - Adds the specified value to the item, if the
--   attribute does not already exist. If the attribute does exist, then
--   the behavior of <tt>ADD</tt> depends on the data type of the
--   attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then <tt>Value</tt> is mathematically
--   added to the existing attribute. If <tt>Value</tt> is a negative
--   number, then it is subtracted from the existing attribute.If you use
--   <tt>ADD</tt> to increment or decrement a number value for an item that
--   doesn't exist before the update, DynamoDB uses <tt>0</tt> as the
--   initial value.Similarly, if you use <tt>ADD</tt> for an existing item
--   to increment or decrement an attribute value that doesn't exist before
--   the update, DynamoDB uses <tt>0</tt> as the initial value. For
--   example, suppose that the item you want to update doesn't have an
--   attribute named <tt>itemcount</tt>, but you decide to <tt>ADD</tt> the
--   number <tt>3</tt> to this attribute anyway. DynamoDB will create the
--   <tt>itemcount</tt> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <tt>itemcount</tt> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set and if
--   <tt>Value</tt> is also a set, then <tt>Value</tt> is added to the
--   existing set. For example, if the attribute value is the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value is <tt>[1,2,3]</tt>. An error occurs if
--   an <tt>ADD</tt> action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings.</li></ul>The <tt>ADD</tt> action only supports
--   Number and set data types. In addition, <tt>ADD</tt> can only be used
--   on top-level attributes, not nested attributes.</li>
--   <li><tt>DELETE</tt> - Deletes an element from a set.If a set of values
--   is specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specifies <tt>[a,c]</tt>, then the final
--   attribute value is <tt>[b]</tt>. Specifying an empty set is an
--   error.The <tt>DELETE</tt> action only supports set data types. In
--   addition, <tt>DELETE</tt> can only be used on top-level attributes,
--   not nested attributes.</li>
--   </ul>
--   
--   You can have many actions in a single expression, such as the
--   following: <tt>SET a=:value1, b=:value2 DELETE :value3, :value4,
--   :value5</tt>
--   
--   For more information on update expressions, see <a>Modifying Items and
--   Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:updateExpression:UpdateItem'] :: UpdateItem -> Maybe Text

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <tt>ProductStatus</tt> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:expressionAttributeValues:UpdateItem'] :: UpdateItem -> Maybe (HashMap Text AttributeValue)

-- | This is a legacy parameter. Use <tt>UpdateExpression</tt> instead. For
--   more information, see <a>AttributeUpdates</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:attributeUpdates:UpdateItem'] :: UpdateItem -> Maybe (HashMap Text AttributeValueUpdate)
[$sel:returnConsumedCapacity:UpdateItem'] :: UpdateItem -> Maybe ReturnConsumedCapacity

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item
--   collections, if any, that were modified during the operation are
--   returned in the response. If set to <tt>NONE</tt> (the default), no
--   statistics are returned.
[$sel:returnItemCollectionMetrics:UpdateItem'] :: UpdateItem -> Maybe ReturnItemCollectionMetrics

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information about condition expressions, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:conditionExpression:UpdateItem'] :: UpdateItem -> Maybe Text

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:conditionalOperator:UpdateItem'] :: UpdateItem -> Maybe ConditionalOperator

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>Expected</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
[$sel:expected:UpdateItem'] :: UpdateItem -> Maybe (HashMap Text ExpectedAttributeValue)

-- | The name of the table containing the item to update.
[$sel:tableName:UpdateItem'] :: UpdateItem -> Text

-- | The primary key of the item to be updated. Each element consists of an
--   attribute name and a value for that attribute.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
[$sel:key:UpdateItem'] :: UpdateItem -> HashMap Text AttributeValue

-- | Create a value of <a>UpdateItem</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:UpdateItem'</a>,
--   <a>updateItem_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression. The following are some
--   use cases for using <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.) To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information about expression attribute names, see
--   <a>Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:returnValues:UpdateItem'</a>, <a>updateItem_returnValues</a> -
--   Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appear before or after they are updated. For <tt>UpdateItem</tt>,
--   the valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - Returns all of the attributes of the item, as
--   they appeared before the UpdateItem operation.</li>
--   <li><tt>UPDATED_OLD</tt> - Returns only the updated attributes, as
--   they appeared before the UpdateItem operation.</li>
--   <li><tt>ALL_NEW</tt> - Returns all of the attributes of the item, as
--   they appear after the UpdateItem operation.</li>
--   <li><tt>UPDATED_NEW</tt> - Returns only the updated attributes, as
--   they appear after the UpdateItem operation.</li>
--   </ul>
--   
--   There is no additional cost associated with requesting a return value
--   aside from the small network and processing overhead of receiving a
--   larger response. No read capacity units are consumed.
--   
--   The values returned are strongly consistent.
--   
--   <a>$sel:updateExpression:UpdateItem'</a>,
--   <a>updateItem_updateExpression</a> - An expression that defines one or
--   more attributes to be updated, the action to be performed on them, and
--   new values for them.
--   
--   The following action values are available for
--   <tt>UpdateExpression</tt>.
--   
--   <ul>
--   <li><tt>SET</tt> - Adds one or more attributes and values to an item.
--   If any of these attributes already exist, they are replaced by the new
--   values. You can also use <tt>SET</tt> to add or subtract from an
--   attribute that is of type Number. For example: <tt>SET myNum = myNum +
--   :val</tt><tt>SET</tt> supports the following
--   functions:<ul><li><tt>if_not_exists (path, operand)</tt> - if the item
--   does not contain an attribute at the specified path, then
--   <tt>if_not_exists</tt> evaluates to operand; otherwise, it evaluates
--   to path. You can use this function to avoid overwriting an attribute
--   that may already be present in the item.</li><li><tt>list_append
--   (operand, operand)</tt> - evaluates to a list with a new element added
--   to it. You can append the new element to the start or the end of the
--   list by reversing the order of the operands.</li></ul>These function
--   names are case-sensitive.</li>
--   <li><tt>REMOVE</tt> - Removes one or more attributes from an
--   item.</li>
--   <li><tt>ADD</tt> - Adds the specified value to the item, if the
--   attribute does not already exist. If the attribute does exist, then
--   the behavior of <tt>ADD</tt> depends on the data type of the
--   attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then <tt>Value</tt> is mathematically
--   added to the existing attribute. If <tt>Value</tt> is a negative
--   number, then it is subtracted from the existing attribute.If you use
--   <tt>ADD</tt> to increment or decrement a number value for an item that
--   doesn't exist before the update, DynamoDB uses <tt>0</tt> as the
--   initial value.Similarly, if you use <tt>ADD</tt> for an existing item
--   to increment or decrement an attribute value that doesn't exist before
--   the update, DynamoDB uses <tt>0</tt> as the initial value. For
--   example, suppose that the item you want to update doesn't have an
--   attribute named <tt>itemcount</tt>, but you decide to <tt>ADD</tt> the
--   number <tt>3</tt> to this attribute anyway. DynamoDB will create the
--   <tt>itemcount</tt> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <tt>itemcount</tt> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set and if
--   <tt>Value</tt> is also a set, then <tt>Value</tt> is added to the
--   existing set. For example, if the attribute value is the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value is <tt>[1,2,3]</tt>. An error occurs if
--   an <tt>ADD</tt> action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings.</li></ul>The <tt>ADD</tt> action only supports
--   Number and set data types. In addition, <tt>ADD</tt> can only be used
--   on top-level attributes, not nested attributes.</li>
--   <li><tt>DELETE</tt> - Deletes an element from a set.If a set of values
--   is specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specifies <tt>[a,c]</tt>, then the final
--   attribute value is <tt>[b]</tt>. Specifying an empty set is an
--   error.The <tt>DELETE</tt> action only supports set data types. In
--   addition, <tt>DELETE</tt> can only be used on top-level attributes,
--   not nested attributes.</li>
--   </ul>
--   
--   You can have many actions in a single expression, such as the
--   following: <tt>SET a=:value1, b=:value2 DELETE :value3, :value4,
--   :value5</tt>
--   
--   For more information on update expressions, see <a>Modifying Items and
--   Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:expressionAttributeValues:UpdateItem'</a>,
--   <a>updateItem_expressionAttributeValues</a> - One or more values that
--   can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <tt>ProductStatus</tt> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributeUpdates:UpdateItem'</a>,
--   <a>updateItem_attributeUpdates</a> - This is a legacy parameter. Use
--   <tt>UpdateExpression</tt> instead. For more information, see
--   <a>AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnConsumedCapacity:UpdateItem'</a>,
--   <a>updateItem_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:returnItemCollectionMetrics:UpdateItem'</a>,
--   <a>updateItem_returnItemCollectionMetrics</a> - Determines whether
--   item collection metrics are returned. If set to <tt>SIZE</tt>, the
--   response includes statistics about item collections, if any, that were
--   modified during the operation are returned in the response. If set to
--   <tt>NONE</tt> (the default), no statistics are returned.
--   
--   <a>$sel:conditionExpression:UpdateItem'</a>,
--   <a>updateItem_conditionExpression</a> - A condition that must be
--   satisfied in order for a conditional update to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information about condition expressions, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:conditionalOperator:UpdateItem'</a>,
--   <a>updateItem_conditionalOperator</a> - This is a legacy parameter.
--   Use <tt>ConditionExpression</tt> instead. For more information, see
--   <a>ConditionalOperator</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:expected:UpdateItem'</a>, <a>updateItem_expected</a> - This is
--   a legacy parameter. Use <tt>ConditionExpression</tt> instead. For more
--   information, see <a>Expected</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:tableName:UpdateItem'</a>, <a>updateItem_tableName</a> - The
--   name of the table containing the item to update.
--   
--   <a>$sel:key:UpdateItem'</a>, <a>updateItem_key</a> - The primary key
--   of the item to be updated. Each element consists of an attribute name
--   and a value for that attribute.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
newUpdateItem :: Text -> UpdateItem

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.) To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information about expression attribute names, see
--   <a>Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
updateItem_expressionAttributeNames :: Lens' UpdateItem (Maybe (HashMap Text Text))

-- | Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appear before or after they are updated. For <tt>UpdateItem</tt>,
--   the valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - Returns all of the attributes of the item, as
--   they appeared before the UpdateItem operation.</li>
--   <li><tt>UPDATED_OLD</tt> - Returns only the updated attributes, as
--   they appeared before the UpdateItem operation.</li>
--   <li><tt>ALL_NEW</tt> - Returns all of the attributes of the item, as
--   they appear after the UpdateItem operation.</li>
--   <li><tt>UPDATED_NEW</tt> - Returns only the updated attributes, as
--   they appear after the UpdateItem operation.</li>
--   </ul>
--   
--   There is no additional cost associated with requesting a return value
--   aside from the small network and processing overhead of receiving a
--   larger response. No read capacity units are consumed.
--   
--   The values returned are strongly consistent.
updateItem_returnValues :: Lens' UpdateItem (Maybe ReturnValue)

-- | An expression that defines one or more attributes to be updated, the
--   action to be performed on them, and new values for them.
--   
--   The following action values are available for
--   <tt>UpdateExpression</tt>.
--   
--   <ul>
--   <li><tt>SET</tt> - Adds one or more attributes and values to an item.
--   If any of these attributes already exist, they are replaced by the new
--   values. You can also use <tt>SET</tt> to add or subtract from an
--   attribute that is of type Number. For example: <tt>SET myNum = myNum +
--   :val</tt><tt>SET</tt> supports the following
--   functions:<ul><li><tt>if_not_exists (path, operand)</tt> - if the item
--   does not contain an attribute at the specified path, then
--   <tt>if_not_exists</tt> evaluates to operand; otherwise, it evaluates
--   to path. You can use this function to avoid overwriting an attribute
--   that may already be present in the item.</li><li><tt>list_append
--   (operand, operand)</tt> - evaluates to a list with a new element added
--   to it. You can append the new element to the start or the end of the
--   list by reversing the order of the operands.</li></ul>These function
--   names are case-sensitive.</li>
--   <li><tt>REMOVE</tt> - Removes one or more attributes from an
--   item.</li>
--   <li><tt>ADD</tt> - Adds the specified value to the item, if the
--   attribute does not already exist. If the attribute does exist, then
--   the behavior of <tt>ADD</tt> depends on the data type of the
--   attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then <tt>Value</tt> is mathematically
--   added to the existing attribute. If <tt>Value</tt> is a negative
--   number, then it is subtracted from the existing attribute.If you use
--   <tt>ADD</tt> to increment or decrement a number value for an item that
--   doesn't exist before the update, DynamoDB uses <tt>0</tt> as the
--   initial value.Similarly, if you use <tt>ADD</tt> for an existing item
--   to increment or decrement an attribute value that doesn't exist before
--   the update, DynamoDB uses <tt>0</tt> as the initial value. For
--   example, suppose that the item you want to update doesn't have an
--   attribute named <tt>itemcount</tt>, but you decide to <tt>ADD</tt> the
--   number <tt>3</tt> to this attribute anyway. DynamoDB will create the
--   <tt>itemcount</tt> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <tt>itemcount</tt> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set and if
--   <tt>Value</tt> is also a set, then <tt>Value</tt> is added to the
--   existing set. For example, if the attribute value is the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value is <tt>[1,2,3]</tt>. An error occurs if
--   an <tt>ADD</tt> action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings.</li></ul>The <tt>ADD</tt> action only supports
--   Number and set data types. In addition, <tt>ADD</tt> can only be used
--   on top-level attributes, not nested attributes.</li>
--   <li><tt>DELETE</tt> - Deletes an element from a set.If a set of values
--   is specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specifies <tt>[a,c]</tt>, then the final
--   attribute value is <tt>[b]</tt>. Specifying an empty set is an
--   error.The <tt>DELETE</tt> action only supports set data types. In
--   addition, <tt>DELETE</tt> can only be used on top-level attributes,
--   not nested attributes.</li>
--   </ul>
--   
--   You can have many actions in a single expression, such as the
--   following: <tt>SET a=:value1, b=:value2 DELETE :value3, :value4,
--   :value5</tt>
--   
--   For more information on update expressions, see <a>Modifying Items and
--   Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
updateItem_updateExpression :: Lens' UpdateItem (Maybe Text)

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <tt>ProductStatus</tt> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
updateItem_expressionAttributeValues :: Lens' UpdateItem (Maybe (HashMap Text AttributeValue))

-- | This is a legacy parameter. Use <tt>UpdateExpression</tt> instead. For
--   more information, see <a>AttributeUpdates</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
updateItem_attributeUpdates :: Lens' UpdateItem (Maybe (HashMap Text AttributeValueUpdate))

-- | Undocumented member.
updateItem_returnConsumedCapacity :: Lens' UpdateItem (Maybe ReturnConsumedCapacity)

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item
--   collections, if any, that were modified during the operation are
--   returned in the response. If set to <tt>NONE</tt> (the default), no
--   statistics are returned.
updateItem_returnItemCollectionMetrics :: Lens' UpdateItem (Maybe ReturnItemCollectionMetrics)

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information about condition expressions, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
updateItem_conditionExpression :: Lens' UpdateItem (Maybe Text)

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
updateItem_conditionalOperator :: Lens' UpdateItem (Maybe ConditionalOperator)

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>Expected</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
updateItem_expected :: Lens' UpdateItem (Maybe (HashMap Text ExpectedAttributeValue))

-- | The name of the table containing the item to update.
updateItem_tableName :: Lens' UpdateItem Text

-- | The primary key of the item to be updated. Each element consists of an
--   attribute name and a value for that attribute.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
updateItem_key :: Lens' UpdateItem (HashMap Text AttributeValue)

-- | Represents the output of an <tt>UpdateItem</tt> operation.
--   
--   <i>See:</i> <a>newUpdateItemResponse</a> smart constructor.
data UpdateItemResponse
UpdateItemResponse' :: Maybe ItemCollectionMetrics -> Maybe ConsumedCapacity -> Maybe (HashMap Text AttributeValue) -> Int -> UpdateItemResponse

-- | Information about item collections, if any, that were affected by the
--   <tt>UpdateItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
[$sel:itemCollectionMetrics:UpdateItemResponse'] :: UpdateItemResponse -> Maybe ItemCollectionMetrics

-- | The capacity units consumed by the <tt>UpdateItem</tt> operation. The
--   data returned includes the total provisioned throughput consumed,
--   along with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Throughput</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
[$sel:consumedCapacity:UpdateItemResponse'] :: UpdateItemResponse -> Maybe ConsumedCapacity

-- | A map of attribute values as they appear before or after the
--   <tt>UpdateItem</tt> operation, as determined by the
--   <tt>ReturnValues</tt> parameter.
--   
--   The <tt>Attributes</tt> map is only present if <tt>ReturnValues</tt>
--   was specified as something other than <tt>NONE</tt> in the request.
--   Each element represents one attribute.
[$sel:attributes:UpdateItemResponse'] :: UpdateItemResponse -> Maybe (HashMap Text AttributeValue)

-- | The response's http status code.
[$sel:httpStatus:UpdateItemResponse'] :: UpdateItemResponse -> Int

-- | Create a value of <a>UpdateItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionMetrics:UpdateItemResponse'</a>,
--   <a>updateItemResponse_itemCollectionMetrics</a> - Information about
--   item collections, if any, that were affected by the
--   <tt>UpdateItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
--   
--   <a>$sel:consumedCapacity:UpdateItemResponse'</a>,
--   <a>updateItemResponse_consumedCapacity</a> - The capacity units
--   consumed by the <tt>UpdateItem</tt> operation. The data returned
--   includes the total provisioned throughput consumed, along with
--   statistics for the table and any indexes involved in the operation.
--   <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Throughput</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributes:UpdateItemResponse'</a>,
--   <a>updateItemResponse_attributes</a> - A map of attribute values as
--   they appear before or after the <tt>UpdateItem</tt> operation, as
--   determined by the <tt>ReturnValues</tt> parameter.
--   
--   The <tt>Attributes</tt> map is only present if <tt>ReturnValues</tt>
--   was specified as something other than <tt>NONE</tt> in the request.
--   Each element represents one attribute.
--   
--   <a>$sel:httpStatus:UpdateItemResponse'</a>,
--   <a>updateItemResponse_httpStatus</a> - The response's http status
--   code.
newUpdateItemResponse :: Int -> UpdateItemResponse

-- | Information about item collections, if any, that were affected by the
--   <tt>UpdateItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
updateItemResponse_itemCollectionMetrics :: Lens' UpdateItemResponse (Maybe ItemCollectionMetrics)

-- | The capacity units consumed by the <tt>UpdateItem</tt> operation. The
--   data returned includes the total provisioned throughput consumed,
--   along with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Throughput</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
updateItemResponse_consumedCapacity :: Lens' UpdateItemResponse (Maybe ConsumedCapacity)

-- | A map of attribute values as they appear before or after the
--   <tt>UpdateItem</tt> operation, as determined by the
--   <tt>ReturnValues</tt> parameter.
--   
--   The <tt>Attributes</tt> map is only present if <tt>ReturnValues</tt>
--   was specified as something other than <tt>NONE</tt> in the request.
--   Each element represents one attribute.
updateItemResponse_attributes :: Lens' UpdateItemResponse (Maybe (HashMap Text AttributeValue))

-- | The response's http status code.
updateItemResponse_httpStatus :: Lens' UpdateItemResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateItem.UpdateItem
instance GHC.Show.Show Amazonka.DynamoDB.UpdateItem.UpdateItem
instance GHC.Read.Read Amazonka.DynamoDB.UpdateItem.UpdateItem
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateItem.UpdateItem
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateItem.UpdateItemResponse
instance GHC.Show.Show Amazonka.DynamoDB.UpdateItem.UpdateItemResponse
instance GHC.Read.Read Amazonka.DynamoDB.UpdateItem.UpdateItemResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateItem.UpdateItemResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.UpdateItem.UpdateItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateItem.UpdateItemResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.UpdateItem.UpdateItem
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateItem.UpdateItem
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.UpdateItem.UpdateItem
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.UpdateItem.UpdateItem
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.UpdateItem.UpdateItem
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.UpdateItem.UpdateItem


-- | Modifies the provisioned throughput settings, global secondary
--   indexes, or DynamoDB Streams settings for a given table.
--   
--   You can only perform one of the following operations at once:
--   
--   <ul>
--   <li>Modify the provisioned throughput settings of the table.</li>
--   <li>Enable or disable DynamoDB Streams on the table.</li>
--   <li>Remove a global secondary index from the table.</li>
--   <li>Create a new global secondary index on the table. After the index
--   begins backfilling, you can use <tt>UpdateTable</tt> to perform other
--   operations.</li>
--   </ul>
--   
--   <tt>UpdateTable</tt> is an asynchronous operation; while it is
--   executing, the table status changes from <tt>ACTIVE</tt> to
--   <tt>UPDATING</tt>. While it is <tt>UPDATING</tt>, you cannot issue
--   another <tt>UpdateTable</tt> request. When the table returns to the
--   <tt>ACTIVE</tt> state, the <tt>UpdateTable</tt> operation is complete.
module Amazonka.DynamoDB.UpdateTable

-- | Represents the input of an <tt>UpdateTable</tt> operation.
--   
--   <i>See:</i> <a>newUpdateTable</a> smart constructor.
data UpdateTable
UpdateTable' :: Maybe [AttributeDefinition] -> Maybe ProvisionedThroughput -> Maybe SSESpecification -> Maybe (NonEmpty ReplicationGroupUpdate) -> Maybe [GlobalSecondaryIndexUpdate] -> Maybe BillingMode -> Maybe StreamSpecification -> Text -> UpdateTable

-- | An array of attributes that describe the key schema for the table and
--   indexes. If you are adding a new global secondary index to the table,
--   <tt>AttributeDefinitions</tt> must include the key element(s) of the
--   new index.
[$sel:attributeDefinitions:UpdateTable'] :: UpdateTable -> Maybe [AttributeDefinition]

-- | The new provisioned throughput settings for the specified table or
--   index.
[$sel:provisionedThroughput:UpdateTable'] :: UpdateTable -> Maybe ProvisionedThroughput

-- | The new server-side encryption settings for the specified table.
[$sel:sSESpecification:UpdateTable'] :: UpdateTable -> Maybe SSESpecification

-- | A list of replica update actions (create, delete, or update) for the
--   table.
--   
--   This property only applies to <a>Version 2019.11.21</a> of global
--   tables.
[$sel:replicaUpdates:UpdateTable'] :: UpdateTable -> Maybe (NonEmpty ReplicationGroupUpdate)

-- | An array of one or more global secondary indexes for the table. For
--   each index in the array, you can request one action:
--   
--   <ul>
--   <li><tt>Create</tt> - add a new global secondary index to the
--   table.</li>
--   <li><tt>Update</tt> - modify the provisioned throughput settings of an
--   existing global secondary index.</li>
--   <li><tt>Delete</tt> - remove a global secondary index from the
--   table.</li>
--   </ul>
--   
--   You can create or delete only one global secondary index per
--   <tt>UpdateTable</tt> operation.
--   
--   For more information, see <a>Managing Global Secondary Indexes</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
[$sel:globalSecondaryIndexUpdates:UpdateTable'] :: UpdateTable -> Maybe [GlobalSecondaryIndexUpdate]

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. When switching from pay-per-request to provisioned
--   capacity, initial provisioned capacity values must be set. The initial
--   provisioned capacity values are estimated based on the consumed read
--   and write capacity of your table and global secondary indexes over the
--   past 30 minutes.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
[$sel:billingMode:UpdateTable'] :: UpdateTable -> Maybe BillingMode

-- | Represents the DynamoDB Streams configuration for the table.
--   
--   You receive a <tt>ResourceInUseException</tt> if you try to enable a
--   stream on a table that already has a stream, or if you try to disable
--   a stream on a table that doesn't have a stream.
[$sel:streamSpecification:UpdateTable'] :: UpdateTable -> Maybe StreamSpecification

-- | The name of the table to be updated.
[$sel:tableName:UpdateTable'] :: UpdateTable -> Text

-- | Create a value of <a>UpdateTable</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeDefinitions:UpdateTable'</a>,
--   <a>updateTable_attributeDefinitions</a> - An array of attributes that
--   describe the key schema for the table and indexes. If you are adding a
--   new global secondary index to the table, <tt>AttributeDefinitions</tt>
--   must include the key element(s) of the new index.
--   
--   <a>$sel:provisionedThroughput:UpdateTable'</a>,
--   <a>updateTable_provisionedThroughput</a> - The new provisioned
--   throughput settings for the specified table or index.
--   
--   <a>$sel:sSESpecification:UpdateTable'</a>,
--   <a>updateTable_sSESpecification</a> - The new server-side encryption
--   settings for the specified table.
--   
--   <a>$sel:replicaUpdates:UpdateTable'</a>,
--   <a>updateTable_replicaUpdates</a> - A list of replica update actions
--   (create, delete, or update) for the table.
--   
--   This property only applies to <a>Version 2019.11.21</a> of global
--   tables.
--   
--   <a>$sel:globalSecondaryIndexUpdates:UpdateTable'</a>,
--   <a>updateTable_globalSecondaryIndexUpdates</a> - An array of one or
--   more global secondary indexes for the table. For each index in the
--   array, you can request one action:
--   
--   <ul>
--   <li><tt>Create</tt> - add a new global secondary index to the
--   table.</li>
--   <li><tt>Update</tt> - modify the provisioned throughput settings of an
--   existing global secondary index.</li>
--   <li><tt>Delete</tt> - remove a global secondary index from the
--   table.</li>
--   </ul>
--   
--   You can create or delete only one global secondary index per
--   <tt>UpdateTable</tt> operation.
--   
--   For more information, see <a>Managing Global Secondary Indexes</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:billingMode:UpdateTable'</a>, <a>updateTable_billingMode</a> -
--   Controls how you are charged for read and write throughput and how you
--   manage capacity. When switching from pay-per-request to provisioned
--   capacity, initial provisioned capacity values must be set. The initial
--   provisioned capacity values are estimated based on the consumed read
--   and write capacity of your table and global secondary indexes over the
--   past 30 minutes.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
--   
--   <a>$sel:streamSpecification:UpdateTable'</a>,
--   <a>updateTable_streamSpecification</a> - Represents the DynamoDB
--   Streams configuration for the table.
--   
--   You receive a <tt>ResourceInUseException</tt> if you try to enable a
--   stream on a table that already has a stream, or if you try to disable
--   a stream on a table that doesn't have a stream.
--   
--   <a>$sel:tableName:UpdateTable'</a>, <a>updateTable_tableName</a> - The
--   name of the table to be updated.
newUpdateTable :: Text -> UpdateTable

-- | An array of attributes that describe the key schema for the table and
--   indexes. If you are adding a new global secondary index to the table,
--   <tt>AttributeDefinitions</tt> must include the key element(s) of the
--   new index.
updateTable_attributeDefinitions :: Lens' UpdateTable (Maybe [AttributeDefinition])

-- | The new provisioned throughput settings for the specified table or
--   index.
updateTable_provisionedThroughput :: Lens' UpdateTable (Maybe ProvisionedThroughput)

-- | The new server-side encryption settings for the specified table.
updateTable_sSESpecification :: Lens' UpdateTable (Maybe SSESpecification)

-- | A list of replica update actions (create, delete, or update) for the
--   table.
--   
--   This property only applies to <a>Version 2019.11.21</a> of global
--   tables.
updateTable_replicaUpdates :: Lens' UpdateTable (Maybe (NonEmpty ReplicationGroupUpdate))

-- | An array of one or more global secondary indexes for the table. For
--   each index in the array, you can request one action:
--   
--   <ul>
--   <li><tt>Create</tt> - add a new global secondary index to the
--   table.</li>
--   <li><tt>Update</tt> - modify the provisioned throughput settings of an
--   existing global secondary index.</li>
--   <li><tt>Delete</tt> - remove a global secondary index from the
--   table.</li>
--   </ul>
--   
--   You can create or delete only one global secondary index per
--   <tt>UpdateTable</tt> operation.
--   
--   For more information, see <a>Managing Global Secondary Indexes</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
updateTable_globalSecondaryIndexUpdates :: Lens' UpdateTable (Maybe [GlobalSecondaryIndexUpdate])

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. When switching from pay-per-request to provisioned
--   capacity, initial provisioned capacity values must be set. The initial
--   provisioned capacity values are estimated based on the consumed read
--   and write capacity of your table and global secondary indexes over the
--   past 30 minutes.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
updateTable_billingMode :: Lens' UpdateTable (Maybe BillingMode)

-- | Represents the DynamoDB Streams configuration for the table.
--   
--   You receive a <tt>ResourceInUseException</tt> if you try to enable a
--   stream on a table that already has a stream, or if you try to disable
--   a stream on a table that doesn't have a stream.
updateTable_streamSpecification :: Lens' UpdateTable (Maybe StreamSpecification)

-- | The name of the table to be updated.
updateTable_tableName :: Lens' UpdateTable Text

-- | Represents the output of an <tt>UpdateTable</tt> operation.
--   
--   <i>See:</i> <a>newUpdateTableResponse</a> smart constructor.
data UpdateTableResponse
UpdateTableResponse' :: Maybe TableDescription -> Int -> UpdateTableResponse

-- | Represents the properties of the table.
[$sel:tableDescription:UpdateTableResponse'] :: UpdateTableResponse -> Maybe TableDescription

-- | The response's http status code.
[$sel:httpStatus:UpdateTableResponse'] :: UpdateTableResponse -> Int

-- | Create a value of <a>UpdateTableResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableDescription:UpdateTableResponse'</a>,
--   <a>updateTableResponse_tableDescription</a> - Represents the
--   properties of the table.
--   
--   <a>$sel:httpStatus:UpdateTableResponse'</a>,
--   <a>updateTableResponse_httpStatus</a> - The response's http status
--   code.
newUpdateTableResponse :: Int -> UpdateTableResponse

-- | Represents the properties of the table.
updateTableResponse_tableDescription :: Lens' UpdateTableResponse (Maybe TableDescription)

-- | The response's http status code.
updateTableResponse_httpStatus :: Lens' UpdateTableResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateTable.UpdateTable
instance GHC.Show.Show Amazonka.DynamoDB.UpdateTable.UpdateTable
instance GHC.Read.Read Amazonka.DynamoDB.UpdateTable.UpdateTable
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateTable.UpdateTable
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateTable.UpdateTableResponse
instance GHC.Show.Show Amazonka.DynamoDB.UpdateTable.UpdateTableResponse
instance GHC.Read.Read Amazonka.DynamoDB.UpdateTable.UpdateTableResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateTable.UpdateTableResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.UpdateTable.UpdateTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateTable.UpdateTableResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.UpdateTable.UpdateTable
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateTable.UpdateTable
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.UpdateTable.UpdateTable
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.UpdateTable.UpdateTable
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.UpdateTable.UpdateTable
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.UpdateTable.UpdateTable


-- | Updates auto scaling settings on your global tables at once.
--   
--   This operation only applies to <a>Version 2019.11.21</a> of global
--   tables.
module Amazonka.DynamoDB.UpdateTableReplicaAutoScaling

-- | <i>See:</i> <a>newUpdateTableReplicaAutoScaling</a> smart constructor.
data UpdateTableReplicaAutoScaling
UpdateTableReplicaAutoScaling' :: Maybe (NonEmpty ReplicaAutoScalingUpdate) -> Maybe AutoScalingSettingsUpdate -> Maybe (NonEmpty GlobalSecondaryIndexAutoScalingUpdate) -> Text -> UpdateTableReplicaAutoScaling

-- | Represents the auto scaling settings of replicas of the table that
--   will be modified.
[$sel:replicaUpdates:UpdateTableReplicaAutoScaling'] :: UpdateTableReplicaAutoScaling -> Maybe (NonEmpty ReplicaAutoScalingUpdate)
[$sel:provisionedWriteCapacityAutoScalingUpdate:UpdateTableReplicaAutoScaling'] :: UpdateTableReplicaAutoScaling -> Maybe AutoScalingSettingsUpdate

-- | Represents the auto scaling settings of the global secondary indexes
--   of the replica to be updated.
[$sel:globalSecondaryIndexUpdates:UpdateTableReplicaAutoScaling'] :: UpdateTableReplicaAutoScaling -> Maybe (NonEmpty GlobalSecondaryIndexAutoScalingUpdate)

-- | The name of the global table to be updated.
[$sel:tableName:UpdateTableReplicaAutoScaling'] :: UpdateTableReplicaAutoScaling -> Text

-- | Create a value of <a>UpdateTableReplicaAutoScaling</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaUpdates:UpdateTableReplicaAutoScaling'</a>,
--   <a>updateTableReplicaAutoScaling_replicaUpdates</a> - Represents the
--   auto scaling settings of replicas of the table that will be modified.
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingUpdate:UpdateTableReplicaAutoScaling'</a>,
--   <a>updateTableReplicaAutoScaling_provisionedWriteCapacityAutoScalingUpdate</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:globalSecondaryIndexUpdates:UpdateTableReplicaAutoScaling'</a>,
--   <a>updateTableReplicaAutoScaling_globalSecondaryIndexUpdates</a> -
--   Represents the auto scaling settings of the global secondary indexes
--   of the replica to be updated.
--   
--   <a>$sel:tableName:UpdateTableReplicaAutoScaling'</a>,
--   <a>updateTableReplicaAutoScaling_tableName</a> - The name of the
--   global table to be updated.
newUpdateTableReplicaAutoScaling :: Text -> UpdateTableReplicaAutoScaling

-- | Represents the auto scaling settings of replicas of the table that
--   will be modified.
updateTableReplicaAutoScaling_replicaUpdates :: Lens' UpdateTableReplicaAutoScaling (Maybe (NonEmpty ReplicaAutoScalingUpdate))

-- | Undocumented member.
updateTableReplicaAutoScaling_provisionedWriteCapacityAutoScalingUpdate :: Lens' UpdateTableReplicaAutoScaling (Maybe AutoScalingSettingsUpdate)

-- | Represents the auto scaling settings of the global secondary indexes
--   of the replica to be updated.
updateTableReplicaAutoScaling_globalSecondaryIndexUpdates :: Lens' UpdateTableReplicaAutoScaling (Maybe (NonEmpty GlobalSecondaryIndexAutoScalingUpdate))

-- | The name of the global table to be updated.
updateTableReplicaAutoScaling_tableName :: Lens' UpdateTableReplicaAutoScaling Text

-- | <i>See:</i> <a>newUpdateTableReplicaAutoScalingResponse</a> smart
--   constructor.
data UpdateTableReplicaAutoScalingResponse
UpdateTableReplicaAutoScalingResponse' :: Maybe TableAutoScalingDescription -> Int -> UpdateTableReplicaAutoScalingResponse

-- | Returns information about the auto scaling settings of a table with
--   replicas.
[$sel:tableAutoScalingDescription:UpdateTableReplicaAutoScalingResponse'] :: UpdateTableReplicaAutoScalingResponse -> Maybe TableAutoScalingDescription

-- | The response's http status code.
[$sel:httpStatus:UpdateTableReplicaAutoScalingResponse'] :: UpdateTableReplicaAutoScalingResponse -> Int

-- | Create a value of <a>UpdateTableReplicaAutoScalingResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:tableAutoScalingDescription:UpdateTableReplicaAutoScalingResponse'</a>,
--   <a>updateTableReplicaAutoScalingResponse_tableAutoScalingDescription</a>
--   - Returns information about the auto scaling settings of a table with
--   replicas.
--   
--   <a>$sel:httpStatus:UpdateTableReplicaAutoScalingResponse'</a>,
--   <a>updateTableReplicaAutoScalingResponse_httpStatus</a> - The
--   response's http status code.
newUpdateTableReplicaAutoScalingResponse :: Int -> UpdateTableReplicaAutoScalingResponse

-- | Returns information about the auto scaling settings of a table with
--   replicas.
updateTableReplicaAutoScalingResponse_tableAutoScalingDescription :: Lens' UpdateTableReplicaAutoScalingResponse (Maybe TableAutoScalingDescription)

-- | The response's http status code.
updateTableReplicaAutoScalingResponse_httpStatus :: Lens' UpdateTableReplicaAutoScalingResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScaling
instance GHC.Show.Show Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScaling
instance GHC.Read.Read Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScaling
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScaling
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScalingResponse
instance GHC.Show.Show Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScalingResponse
instance GHC.Read.Read Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScalingResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScalingResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScaling
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScalingResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScaling
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScaling
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScaling
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScaling
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScaling
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.UpdateTableReplicaAutoScaling.UpdateTableReplicaAutoScaling


-- | The <tt>UpdateTimeToLive</tt> method enables or disables Time to Live
--   (TTL) for the specified table. A successful <tt>UpdateTimeToLive</tt>
--   call returns the current <tt>TimeToLiveSpecification</tt>. It can take
--   up to one hour for the change to fully process. Any additional
--   <tt>UpdateTimeToLive</tt> calls for the same table during this one
--   hour duration result in a <tt>ValidationException</tt>.
--   
--   TTL compares the current time in epoch time format to the time stored
--   in the TTL attribute of an item. If the epoch time value stored in the
--   attribute is less than the current time, the item is marked as expired
--   and subsequently deleted.
--   
--   The epoch time format is the number of seconds elapsed since 12:00:00
--   AM January 1, 1970 UTC.
--   
--   DynamoDB deletes expired items on a best-effort basis to ensure
--   availability of throughput for other data operations.
--   
--   DynamoDB typically deletes expired items within two days of
--   expiration. The exact duration within which an item gets deleted after
--   expiration is specific to the nature of the workload. Items that have
--   expired and not been deleted will still show up in reads, queries, and
--   scans.
--   
--   As items are deleted, they are removed from any local secondary index
--   and global secondary index immediately in the same eventually
--   consistent way as a standard delete operation.
--   
--   For more information, see <a>Time To Live</a> in the Amazon DynamoDB
--   Developer Guide.
module Amazonka.DynamoDB.UpdateTimeToLive

-- | Represents the input of an <tt>UpdateTimeToLive</tt> operation.
--   
--   <i>See:</i> <a>newUpdateTimeToLive</a> smart constructor.
data UpdateTimeToLive
UpdateTimeToLive' :: Text -> TimeToLiveSpecification -> UpdateTimeToLive

-- | The name of the table to be configured.
[$sel:tableName:UpdateTimeToLive'] :: UpdateTimeToLive -> Text

-- | Represents the settings used to enable or disable Time to Live for the
--   specified table.
[$sel:timeToLiveSpecification:UpdateTimeToLive'] :: UpdateTimeToLive -> TimeToLiveSpecification

-- | Create a value of <a>UpdateTimeToLive</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:UpdateTimeToLive'</a>,
--   <a>updateTimeToLive_tableName</a> - The name of the table to be
--   configured.
--   
--   <a>$sel:timeToLiveSpecification:UpdateTimeToLive'</a>,
--   <a>updateTimeToLive_timeToLiveSpecification</a> - Represents the
--   settings used to enable or disable Time to Live for the specified
--   table.
newUpdateTimeToLive :: Text -> TimeToLiveSpecification -> UpdateTimeToLive

-- | The name of the table to be configured.
updateTimeToLive_tableName :: Lens' UpdateTimeToLive Text

-- | Represents the settings used to enable or disable Time to Live for the
--   specified table.
updateTimeToLive_timeToLiveSpecification :: Lens' UpdateTimeToLive TimeToLiveSpecification

-- | <i>See:</i> <a>newUpdateTimeToLiveResponse</a> smart constructor.
data UpdateTimeToLiveResponse
UpdateTimeToLiveResponse' :: Maybe TimeToLiveSpecification -> Int -> UpdateTimeToLiveResponse

-- | Represents the output of an <tt>UpdateTimeToLive</tt> operation.
[$sel:timeToLiveSpecification:UpdateTimeToLiveResponse'] :: UpdateTimeToLiveResponse -> Maybe TimeToLiveSpecification

-- | The response's http status code.
[$sel:httpStatus:UpdateTimeToLiveResponse'] :: UpdateTimeToLiveResponse -> Int

-- | Create a value of <a>UpdateTimeToLiveResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeToLiveSpecification:UpdateTimeToLive'</a>,
--   <a>updateTimeToLiveResponse_timeToLiveSpecification</a> - Represents
--   the output of an <tt>UpdateTimeToLive</tt> operation.
--   
--   <a>$sel:httpStatus:UpdateTimeToLiveResponse'</a>,
--   <a>updateTimeToLiveResponse_httpStatus</a> - The response's http
--   status code.
newUpdateTimeToLiveResponse :: Int -> UpdateTimeToLiveResponse

-- | Represents the output of an <tt>UpdateTimeToLive</tt> operation.
updateTimeToLiveResponse_timeToLiveSpecification :: Lens' UpdateTimeToLiveResponse (Maybe TimeToLiveSpecification)

-- | The response's http status code.
updateTimeToLiveResponse_httpStatus :: Lens' UpdateTimeToLiveResponse Int
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLive
instance GHC.Show.Show Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLive
instance GHC.Read.Read Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLive
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLive
instance GHC.Generics.Generic Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLiveResponse
instance GHC.Show.Show Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLiveResponse
instance GHC.Read.Read Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLiveResponse
instance GHC.Classes.Eq Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLiveResponse
instance Amazonka.Types.AWSRequest Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLive
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLiveResponse
instance Data.Hashable.Class.Hashable Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLive
instance Control.DeepSeq.NFData Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLive
instance Amazonka.Data.Headers.ToHeaders Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLive
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLive
instance Amazonka.Data.Path.ToPath Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLive
instance Amazonka.Data.Query.ToQuery Amazonka.DynamoDB.UpdateTimeToLive.UpdateTimeToLive


module Amazonka.DynamoDB.Lens

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
putItem_expressionAttributeNames :: Lens' PutItem (Maybe (HashMap Text Text))

-- | Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appeared before they were updated with the <tt>PutItem</tt>
--   request. For <tt>PutItem</tt>, the valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - If <tt>PutItem</tt> overwrote an attribute
--   name-value pair, then the content of the old item is returned.</li>
--   </ul>
--   
--   The <tt>ReturnValues</tt> parameter is used by several DynamoDB
--   operations; however, <tt>PutItem</tt> does not recognize any values
--   other than <tt>NONE</tt> or <tt>ALL_OLD</tt>.
putItem_returnValues :: Lens' PutItem (Maybe ReturnValue)

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
putItem_expressionAttributeValues :: Lens' PutItem (Maybe (HashMap Text AttributeValue))

-- | Undocumented member.
putItem_returnConsumedCapacity :: Lens' PutItem (Maybe ReturnConsumedCapacity)

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item
--   collections, if any, that were modified during the operation are
--   returned in the response. If set to <tt>NONE</tt> (the default), no
--   statistics are returned.
putItem_returnItemCollectionMetrics :: Lens' PutItem (Maybe ReturnItemCollectionMetrics)

-- | A condition that must be satisfied in order for a conditional
--   <tt>PutItem</tt> operation to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information on condition expressions, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
putItem_conditionExpression :: Lens' PutItem (Maybe Text)

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
putItem_conditionalOperator :: Lens' PutItem (Maybe ConditionalOperator)

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>Expected</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
putItem_expected :: Lens' PutItem (Maybe (HashMap Text ExpectedAttributeValue))

-- | The name of the table to contain the item.
putItem_tableName :: Lens' PutItem Text

-- | A map of attribute name/value pairs, one for each attribute. Only the
--   primary key attributes are required; you can optionally provide other
--   attribute name-value pairs for the item.
--   
--   You must provide all of the attributes for the primary key. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   both values for both the partition key and the sort key.
--   
--   If you specify any attributes that are part of an index key, then the
--   data types for those attributes must match those of the schema in the
--   table's attribute definition.
--   
--   Empty String and Binary attribute values are allowed. Attribute values
--   of type String and Binary must have a length greater than zero if the
--   attribute is used as a key attribute for a table or index.
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   Each element in the <tt>Item</tt> map is an <tt>AttributeValue</tt>
--   object.
putItem_item :: Lens' PutItem (HashMap Text AttributeValue)

-- | Information about item collections, if any, that were affected by the
--   <tt>PutItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
putItemResponse_itemCollectionMetrics :: Lens' PutItemResponse (Maybe ItemCollectionMetrics)

-- | The capacity units consumed by the <tt>PutItem</tt> operation. The
--   data returned includes the total provisioned throughput consumed,
--   along with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Read/Write Capacity Mode</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
putItemResponse_consumedCapacity :: Lens' PutItemResponse (Maybe ConsumedCapacity)

-- | The attribute values as they appeared before the <tt>PutItem</tt>
--   operation, but only if <tt>ReturnValues</tt> is specified as
--   <tt>ALL_OLD</tt> in the request. Each element consists of an attribute
--   name and an attribute value.
putItemResponse_attributes :: Lens' PutItemResponse (Maybe (HashMap Text AttributeValue))

-- | The response's http status code.
putItemResponse_httpStatus :: Lens' PutItemResponse Int

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
deleteItem_expressionAttributeNames :: Lens' DeleteItem (Maybe (HashMap Text Text))

-- | Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appeared before they were deleted. For <tt>DeleteItem</tt>, the
--   valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - The content of the old item is returned.</li>
--   </ul>
--   
--   The <tt>ReturnValues</tt> parameter is used by several DynamoDB
--   operations; however, <tt>DeleteItem</tt> does not recognize any values
--   other than <tt>NONE</tt> or <tt>ALL_OLD</tt>.
deleteItem_returnValues :: Lens' DeleteItem (Maybe ReturnValue)

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
deleteItem_expressionAttributeValues :: Lens' DeleteItem (Maybe (HashMap Text AttributeValue))

-- | Undocumented member.
deleteItem_returnConsumedCapacity :: Lens' DeleteItem (Maybe ReturnConsumedCapacity)

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item
--   collections, if any, that were modified during the operation are
--   returned in the response. If set to <tt>NONE</tt> (the default), no
--   statistics are returned.
deleteItem_returnItemCollectionMetrics :: Lens' DeleteItem (Maybe ReturnItemCollectionMetrics)

-- | A condition that must be satisfied in order for a conditional
--   <tt>DeleteItem</tt> to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information about condition expressions, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
deleteItem_conditionExpression :: Lens' DeleteItem (Maybe Text)

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
deleteItem_conditionalOperator :: Lens' DeleteItem (Maybe ConditionalOperator)

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>Expected</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
deleteItem_expected :: Lens' DeleteItem (Maybe (HashMap Text ExpectedAttributeValue))

-- | The name of the table from which to delete the item.
deleteItem_tableName :: Lens' DeleteItem Text

-- | A map of attribute names to <tt>AttributeValue</tt> objects,
--   representing the primary key of the item to delete.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
deleteItem_key :: Lens' DeleteItem (HashMap Text AttributeValue)

-- | Information about item collections, if any, that were affected by the
--   <tt>DeleteItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
deleteItemResponse_itemCollectionMetrics :: Lens' DeleteItemResponse (Maybe ItemCollectionMetrics)

-- | The capacity units consumed by the <tt>DeleteItem</tt> operation. The
--   data returned includes the total provisioned throughput consumed,
--   along with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Mode</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
deleteItemResponse_consumedCapacity :: Lens' DeleteItemResponse (Maybe ConsumedCapacity)

-- | A map of attribute names to <tt>AttributeValue</tt> objects,
--   representing the item as it appeared before the <tt>DeleteItem</tt>
--   operation. This map appears in the response only if
--   <tt>ReturnValues</tt> was specified as <tt>ALL_OLD</tt> in the
--   request.
deleteItemResponse_attributes :: Lens' DeleteItemResponse (Maybe (HashMap Text AttributeValue))

-- | The response's http status code.
deleteItemResponse_httpStatus :: Lens' DeleteItemResponse Int

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.) To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information about expression attribute names, see
--   <a>Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
updateItem_expressionAttributeNames :: Lens' UpdateItem (Maybe (HashMap Text Text))

-- | Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appear before or after they are updated. For <tt>UpdateItem</tt>,
--   the valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - Returns all of the attributes of the item, as
--   they appeared before the UpdateItem operation.</li>
--   <li><tt>UPDATED_OLD</tt> - Returns only the updated attributes, as
--   they appeared before the UpdateItem operation.</li>
--   <li><tt>ALL_NEW</tt> - Returns all of the attributes of the item, as
--   they appear after the UpdateItem operation.</li>
--   <li><tt>UPDATED_NEW</tt> - Returns only the updated attributes, as
--   they appear after the UpdateItem operation.</li>
--   </ul>
--   
--   There is no additional cost associated with requesting a return value
--   aside from the small network and processing overhead of receiving a
--   larger response. No read capacity units are consumed.
--   
--   The values returned are strongly consistent.
updateItem_returnValues :: Lens' UpdateItem (Maybe ReturnValue)

-- | An expression that defines one or more attributes to be updated, the
--   action to be performed on them, and new values for them.
--   
--   The following action values are available for
--   <tt>UpdateExpression</tt>.
--   
--   <ul>
--   <li><tt>SET</tt> - Adds one or more attributes and values to an item.
--   If any of these attributes already exist, they are replaced by the new
--   values. You can also use <tt>SET</tt> to add or subtract from an
--   attribute that is of type Number. For example: <tt>SET myNum = myNum +
--   :val</tt><tt>SET</tt> supports the following
--   functions:<ul><li><tt>if_not_exists (path, operand)</tt> - if the item
--   does not contain an attribute at the specified path, then
--   <tt>if_not_exists</tt> evaluates to operand; otherwise, it evaluates
--   to path. You can use this function to avoid overwriting an attribute
--   that may already be present in the item.</li><li><tt>list_append
--   (operand, operand)</tt> - evaluates to a list with a new element added
--   to it. You can append the new element to the start or the end of the
--   list by reversing the order of the operands.</li></ul>These function
--   names are case-sensitive.</li>
--   <li><tt>REMOVE</tt> - Removes one or more attributes from an
--   item.</li>
--   <li><tt>ADD</tt> - Adds the specified value to the item, if the
--   attribute does not already exist. If the attribute does exist, then
--   the behavior of <tt>ADD</tt> depends on the data type of the
--   attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then <tt>Value</tt> is mathematically
--   added to the existing attribute. If <tt>Value</tt> is a negative
--   number, then it is subtracted from the existing attribute.If you use
--   <tt>ADD</tt> to increment or decrement a number value for an item that
--   doesn't exist before the update, DynamoDB uses <tt>0</tt> as the
--   initial value.Similarly, if you use <tt>ADD</tt> for an existing item
--   to increment or decrement an attribute value that doesn't exist before
--   the update, DynamoDB uses <tt>0</tt> as the initial value. For
--   example, suppose that the item you want to update doesn't have an
--   attribute named <tt>itemcount</tt>, but you decide to <tt>ADD</tt> the
--   number <tt>3</tt> to this attribute anyway. DynamoDB will create the
--   <tt>itemcount</tt> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <tt>itemcount</tt> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set and if
--   <tt>Value</tt> is also a set, then <tt>Value</tt> is added to the
--   existing set. For example, if the attribute value is the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value is <tt>[1,2,3]</tt>. An error occurs if
--   an <tt>ADD</tt> action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings.</li></ul>The <tt>ADD</tt> action only supports
--   Number and set data types. In addition, <tt>ADD</tt> can only be used
--   on top-level attributes, not nested attributes.</li>
--   <li><tt>DELETE</tt> - Deletes an element from a set.If a set of values
--   is specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specifies <tt>[a,c]</tt>, then the final
--   attribute value is <tt>[b]</tt>. Specifying an empty set is an
--   error.The <tt>DELETE</tt> action only supports set data types. In
--   addition, <tt>DELETE</tt> can only be used on top-level attributes,
--   not nested attributes.</li>
--   </ul>
--   
--   You can have many actions in a single expression, such as the
--   following: <tt>SET a=:value1, b=:value2 DELETE :value3, :value4,
--   :value5</tt>
--   
--   For more information on update expressions, see <a>Modifying Items and
--   Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
updateItem_updateExpression :: Lens' UpdateItem (Maybe Text)

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <tt>ProductStatus</tt> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
updateItem_expressionAttributeValues :: Lens' UpdateItem (Maybe (HashMap Text AttributeValue))

-- | This is a legacy parameter. Use <tt>UpdateExpression</tt> instead. For
--   more information, see <a>AttributeUpdates</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
updateItem_attributeUpdates :: Lens' UpdateItem (Maybe (HashMap Text AttributeValueUpdate))

-- | Undocumented member.
updateItem_returnConsumedCapacity :: Lens' UpdateItem (Maybe ReturnConsumedCapacity)

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item
--   collections, if any, that were modified during the operation are
--   returned in the response. If set to <tt>NONE</tt> (the default), no
--   statistics are returned.
updateItem_returnItemCollectionMetrics :: Lens' UpdateItem (Maybe ReturnItemCollectionMetrics)

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information about condition expressions, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
updateItem_conditionExpression :: Lens' UpdateItem (Maybe Text)

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
updateItem_conditionalOperator :: Lens' UpdateItem (Maybe ConditionalOperator)

-- | This is a legacy parameter. Use <tt>ConditionExpression</tt> instead.
--   For more information, see <a>Expected</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
updateItem_expected :: Lens' UpdateItem (Maybe (HashMap Text ExpectedAttributeValue))

-- | The name of the table containing the item to update.
updateItem_tableName :: Lens' UpdateItem Text

-- | The primary key of the item to be updated. Each element consists of an
--   attribute name and a value for that attribute.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
updateItem_key :: Lens' UpdateItem (HashMap Text AttributeValue)

-- | Information about item collections, if any, that were affected by the
--   <tt>UpdateItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
updateItemResponse_itemCollectionMetrics :: Lens' UpdateItemResponse (Maybe ItemCollectionMetrics)

-- | The capacity units consumed by the <tt>UpdateItem</tt> operation. The
--   data returned includes the total provisioned throughput consumed,
--   along with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Throughput</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
updateItemResponse_consumedCapacity :: Lens' UpdateItemResponse (Maybe ConsumedCapacity)

-- | A map of attribute values as they appear before or after the
--   <tt>UpdateItem</tt> operation, as determined by the
--   <tt>ReturnValues</tt> parameter.
--   
--   The <tt>Attributes</tt> map is only present if <tt>ReturnValues</tt>
--   was specified as something other than <tt>NONE</tt> in the request.
--   Each element represents one attribute.
updateItemResponse_attributes :: Lens' UpdateItemResponse (Maybe (HashMap Text AttributeValue))

-- | The response's http status code.
updateItemResponse_httpStatus :: Lens' UpdateItemResponse Int

-- | The name of the DynamoDB table.
disableKinesisStreamingDestination_tableName :: Lens' DisableKinesisStreamingDestination Text

-- | The ARN for a Kinesis data stream.
disableKinesisStreamingDestination_streamArn :: Lens' DisableKinesisStreamingDestination Text

-- | The current status of the replication.
kinesisStreamingDestinationOutput_destinationStatus :: Lens' KinesisStreamingDestinationOutput (Maybe DestinationStatus)

-- | The ARN for the specific Kinesis data stream.
kinesisStreamingDestinationOutput_streamArn :: Lens' KinesisStreamingDestinationOutput (Maybe Text)

-- | The name of the table being modified.
kinesisStreamingDestinationOutput_tableName :: Lens' KinesisStreamingDestinationOutput (Maybe Text)

-- | Lists the global tables in a specific Region.
listGlobalTables_regionName :: Lens' ListGlobalTables (Maybe Text)

-- | The first global table name that this operation will evaluate.
listGlobalTables_exclusiveStartGlobalTableName :: Lens' ListGlobalTables (Maybe Text)

-- | The maximum number of table names to return, if the parameter is not
--   specified DynamoDB defaults to 100.
--   
--   If the number of global tables DynamoDB finds reaches this limit, it
--   stops the operation and returns the table names collected up to that
--   point, with a table name in the <tt>LastEvaluatedGlobalTableName</tt>
--   to apply in a subsequent operation to the
--   <tt>ExclusiveStartGlobalTableName</tt> parameter.
listGlobalTables_limit :: Lens' ListGlobalTables (Maybe Natural)

-- | Last evaluated global table name.
listGlobalTablesResponse_lastEvaluatedGlobalTableName :: Lens' ListGlobalTablesResponse (Maybe Text)

-- | List of global table names.
listGlobalTablesResponse_globalTables :: Lens' ListGlobalTablesResponse (Maybe [GlobalTable])

-- | The response's http status code.
listGlobalTablesResponse_httpStatus :: Lens' ListGlobalTablesResponse Int

-- | The global table name.
updateGlobalTable_globalTableName :: Lens' UpdateGlobalTable Text

-- | A list of Regions that should be added or removed from the global
--   table.
updateGlobalTable_replicaUpdates :: Lens' UpdateGlobalTable [ReplicaUpdate]

-- | Contains the details of the global table.
updateGlobalTableResponse_globalTableDescription :: Lens' UpdateGlobalTableResponse (Maybe GlobalTableDescription)

-- | The response's http status code.
updateGlobalTableResponse_httpStatus :: Lens' UpdateGlobalTableResponse Int

-- | The name of the table to delete.
deleteTable_tableName :: Lens' DeleteTable Text

-- | Represents the properties of a table.
deleteTableResponse_tableDescription :: Lens' DeleteTableResponse (Maybe TableDescription)

-- | The response's http status code.
deleteTableResponse_httpStatus :: Lens' DeleteTableResponse Int

-- | An array of attributes that describe the key schema for the table and
--   indexes. If you are adding a new global secondary index to the table,
--   <tt>AttributeDefinitions</tt> must include the key element(s) of the
--   new index.
updateTable_attributeDefinitions :: Lens' UpdateTable (Maybe [AttributeDefinition])

-- | The new provisioned throughput settings for the specified table or
--   index.
updateTable_provisionedThroughput :: Lens' UpdateTable (Maybe ProvisionedThroughput)

-- | The new server-side encryption settings for the specified table.
updateTable_sSESpecification :: Lens' UpdateTable (Maybe SSESpecification)

-- | A list of replica update actions (create, delete, or update) for the
--   table.
--   
--   This property only applies to <a>Version 2019.11.21</a> of global
--   tables.
updateTable_replicaUpdates :: Lens' UpdateTable (Maybe (NonEmpty ReplicationGroupUpdate))

-- | An array of one or more global secondary indexes for the table. For
--   each index in the array, you can request one action:
--   
--   <ul>
--   <li><tt>Create</tt> - add a new global secondary index to the
--   table.</li>
--   <li><tt>Update</tt> - modify the provisioned throughput settings of an
--   existing global secondary index.</li>
--   <li><tt>Delete</tt> - remove a global secondary index from the
--   table.</li>
--   </ul>
--   
--   You can create or delete only one global secondary index per
--   <tt>UpdateTable</tt> operation.
--   
--   For more information, see <a>Managing Global Secondary Indexes</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
updateTable_globalSecondaryIndexUpdates :: Lens' UpdateTable (Maybe [GlobalSecondaryIndexUpdate])

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. When switching from pay-per-request to provisioned
--   capacity, initial provisioned capacity values must be set. The initial
--   provisioned capacity values are estimated based on the consumed read
--   and write capacity of your table and global secondary indexes over the
--   past 30 minutes.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
updateTable_billingMode :: Lens' UpdateTable (Maybe BillingMode)

-- | Represents the DynamoDB Streams configuration for the table.
--   
--   You receive a <tt>ResourceInUseException</tt> if you try to enable a
--   stream on a table that already has a stream, or if you try to disable
--   a stream on a table that doesn't have a stream.
updateTable_streamSpecification :: Lens' UpdateTable (Maybe StreamSpecification)

-- | The name of the table to be updated.
updateTable_tableName :: Lens' UpdateTable Text

-- | Represents the properties of the table.
updateTableResponse_tableDescription :: Lens' UpdateTableResponse (Maybe TableDescription)

-- | The response's http status code.
updateTableResponse_httpStatus :: Lens' UpdateTableResponse Int

-- | Undocumented member.
batchGetItem_returnConsumedCapacity :: Lens' BatchGetItem (Maybe ReturnConsumedCapacity)

-- | A map of one or more table names and, for each table, a map that
--   describes one or more items to retrieve from that table. Each table
--   name can be used only once per <tt>BatchGetItem</tt> request.
--   
--   Each element in the map of items to retrieve consists of the
--   following:
--   
--   <ul>
--   <li><tt>ConsistentRead</tt> - If <tt>true</tt>, a strongly consistent
--   read is used; if <tt>false</tt> (the default), an eventually
--   consistent read is used.</li>
--   <li><tt>ExpressionAttributeNames</tt> - One or more substitution
--   tokens for attribute names in the <tt>ProjectionExpression</tt>
--   parameter. The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:<ul><li>To access an attribute whose
--   name conflicts with a DynamoDB reserved word.</li><li>To create a
--   placeholder for repeating occurrences of an attribute name in an
--   expression.</li><li>To prevent special characters in an attribute name
--   from being misinterpreted in an expression.</li></ul>Use the <b>#</b>
--   character in an expression to dereference an attribute name. For
--   example, consider the following attribute
--   name:<ul><li><pre>Percentile</pre></li></ul>The name of this attribute
--   conflicts with a reserved word, so it cannot be used directly in an
--   expression. (For the complete list of reserved words, see <a>Reserved
--   Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work
--   around this, you could specify the following for
--   <tt>ExpressionAttributeNames</tt>:<ul><li><pre>{"#P":"Percentile"}</pre></li></ul>You
--   could then use this substitution in an expression, as in this
--   example:<ul><li><pre>#P = :val</pre></li></ul>Tokens that begin with
--   the <b>:</b> character are /expression attribute values/, which are
--   placeholders for the actual value at runtime.For more information
--   about expression attribute names, see <a>Accessing Item Attributes</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.</li>
--   <li><tt>Keys</tt> - An array of primary key attribute values that
--   define specific items in the table. For each primary key, you must
--   provide <i>all</i> of the key attributes. For example, with a simple
--   primary key, you only need to provide the partition key value. For a
--   composite key, you must provide <i>both</i> the partition key value
--   and the sort key value.</li>
--   <li><tt>ProjectionExpression</tt> - A string that identifies one or
--   more attributes to retrieve from the table. These attributes can
--   include scalars, sets, or elements of a JSON document. The attributes
--   in the expression must be separated by commas.If no attribute names
--   are specified, then all attributes are returned. If any of the
--   requested attributes are not found, they do not appear in the
--   result.For more information, see <a>Accessing Item Attributes</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.</li>
--   <li><tt>AttributesToGet</tt> - This is a legacy parameter. Use
--   <tt>ProjectionExpression</tt> instead. For more information, see
--   <a>AttributesToGet</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.</li>
--   </ul>
batchGetItem_requestItems :: Lens' BatchGetItem (HashMap Text KeysAndAttributes)

-- | A map of tables and their respective keys that were not processed with
--   the current response. The <tt>UnprocessedKeys</tt> value is in the
--   same form as <tt>RequestItems</tt>, so the value can be provided
--   directly to a subsequent <tt>BatchGetItem</tt> operation. For more
--   information, see <tt>RequestItems</tt> in the Request Parameters
--   section.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>Keys</tt> - An array of primary key attribute values that
--   define specific items in the table.</li>
--   <li><tt>ProjectionExpression</tt> - One or more attributes to be
--   retrieved from the table or index. By default, all attributes are
--   returned. If a requested attribute is not found, it does not appear in
--   the result.</li>
--   <li><tt>ConsistentRead</tt> - The consistency of a read operation. If
--   set to <tt>true</tt>, then a strongly consistent read is used;
--   otherwise, an eventually consistent read is used.</li>
--   </ul>
--   
--   If there are no unprocessed keys remaining, the response contains an
--   empty <tt>UnprocessedKeys</tt> map.
batchGetItemResponse_unprocessedKeys :: Lens' BatchGetItemResponse (Maybe (HashMap Text KeysAndAttributes))

-- | A map of table name to a list of items. Each object in
--   <tt>Responses</tt> consists of a table name, along with a map of
--   attribute data consisting of the data type and attribute value.
batchGetItemResponse_responses :: Lens' BatchGetItemResponse (Maybe (HashMap Text [HashMap Text AttributeValue]))

-- | The read capacity units consumed by the entire <tt>BatchGetItem</tt>
--   operation.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>TableName</tt> - The table that consumed the provisioned
--   throughput.</li>
--   <li><tt>CapacityUnits</tt> - The total number of capacity units
--   consumed.</li>
--   </ul>
batchGetItemResponse_consumedCapacity :: Lens' BatchGetItemResponse (Maybe [ConsumedCapacity])

-- | The response's http status code.
batchGetItemResponse_httpStatus :: Lens' BatchGetItemResponse Int

-- | Only backups created before this time are listed.
--   <tt>TimeRangeUpperBound</tt> is exclusive.
listBackups_timeRangeUpperBound :: Lens' ListBackups (Maybe UTCTime)

-- | Only backups created after this time are listed.
--   <tt>TimeRangeLowerBound</tt> is inclusive.
listBackups_timeRangeLowerBound :: Lens' ListBackups (Maybe UTCTime)

-- | Maximum number of backups to return at once.
listBackups_limit :: Lens' ListBackups (Maybe Natural)

-- | <tt>LastEvaluatedBackupArn</tt> is the Amazon Resource Name (ARN) of
--   the backup last evaluated when the current page of results was
--   returned, inclusive of the current page of results. This value may be
--   specified as the <tt>ExclusiveStartBackupArn</tt> of a new
--   <tt>ListBackups</tt> operation in order to fetch the next page of
--   results.
listBackups_exclusiveStartBackupArn :: Lens' ListBackups (Maybe Text)

-- | The backups from the table specified by <tt>BackupType</tt> are
--   listed.
--   
--   Where <tt>BackupType</tt> can be:
--   
--   <ul>
--   <li><tt>USER</tt> - On-demand backup created by you.</li>
--   <li><tt>SYSTEM</tt> - On-demand backup automatically created by
--   DynamoDB.</li>
--   <li><tt>ALL</tt> - All types of on-demand backups (USER and
--   SYSTEM).</li>
--   </ul>
listBackups_backupType :: Lens' ListBackups (Maybe BackupTypeFilter)

-- | The backups from the table specified by <tt>TableName</tt> are listed.
listBackups_tableName :: Lens' ListBackups (Maybe Text)

-- | List of <tt>BackupSummary</tt> objects.
listBackupsResponse_backupSummaries :: Lens' ListBackupsResponse (Maybe [BackupSummary])

-- | The ARN of the backup last evaluated when the current page of results
--   was returned, inclusive of the current page of results. This value may
--   be specified as the <tt>ExclusiveStartBackupArn</tt> of a new
--   <tt>ListBackups</tt> operation in order to fetch the next page of
--   results.
--   
--   If <tt>LastEvaluatedBackupArn</tt> is empty, then the last page of
--   results has been processed and there are no more results to be
--   retrieved.
--   
--   If <tt>LastEvaluatedBackupArn</tt> is not empty, this may or may not
--   indicate that there is more data to be returned. All results are
--   guaranteed to have been returned if and only if no value for
--   <tt>LastEvaluatedBackupArn</tt> is returned.
listBackupsResponse_lastEvaluatedBackupArn :: Lens' ListBackupsResponse (Maybe Text)

-- | The response's http status code.
listBackupsResponse_httpStatus :: Lens' ListBackupsResponse Int

-- | The ARN associated with the backup.
deleteBackup_backupArn :: Lens' DeleteBackup Text

-- | Contains the description of the backup created for the table.
deleteBackupResponse_backupDescription :: Lens' DeleteBackupResponse (Maybe BackupDescription)

-- | The response's http status code.
deleteBackupResponse_httpStatus :: Lens' DeleteBackupResponse Int

-- | The name of the table.
createBackup_tableName :: Lens' CreateBackup Text

-- | Specified name for the backup.
createBackup_backupName :: Lens' CreateBackup Text

-- | Contains the details of the backup created for the table.
createBackupResponse_backupDetails :: Lens' CreateBackupResponse (Maybe BackupDetails)

-- | The response's http status code.
createBackupResponse_httpStatus :: Lens' CreateBackupResponse Int

-- | Represents the auto scaling settings of replicas of the table that
--   will be modified.
updateTableReplicaAutoScaling_replicaUpdates :: Lens' UpdateTableReplicaAutoScaling (Maybe (NonEmpty ReplicaAutoScalingUpdate))

-- | Undocumented member.
updateTableReplicaAutoScaling_provisionedWriteCapacityAutoScalingUpdate :: Lens' UpdateTableReplicaAutoScaling (Maybe AutoScalingSettingsUpdate)

-- | Represents the auto scaling settings of the global secondary indexes
--   of the replica to be updated.
updateTableReplicaAutoScaling_globalSecondaryIndexUpdates :: Lens' UpdateTableReplicaAutoScaling (Maybe (NonEmpty GlobalSecondaryIndexAutoScalingUpdate))

-- | The name of the global table to be updated.
updateTableReplicaAutoScaling_tableName :: Lens' UpdateTableReplicaAutoScaling Text

-- | Returns information about the auto scaling settings of a table with
--   replicas.
updateTableReplicaAutoScalingResponse_tableAutoScalingDescription :: Lens' UpdateTableReplicaAutoScalingResponse (Maybe TableAutoScalingDescription)

-- | The response's http status code.
updateTableReplicaAutoScalingResponse_httpStatus :: Lens' UpdateTableReplicaAutoScalingResponse Int

-- | The name of the global table to describe.
describeGlobalTableSettings_globalTableName :: Lens' DescribeGlobalTableSettings Text

-- | The Region-specific settings for the global table.
describeGlobalTableSettingsResponse_replicaSettings :: Lens' DescribeGlobalTableSettingsResponse (Maybe [ReplicaSettingsDescription])

-- | The name of the global table.
describeGlobalTableSettingsResponse_globalTableName :: Lens' DescribeGlobalTableSettingsResponse (Maybe Text)

-- | The response's http status code.
describeGlobalTableSettingsResponse_httpStatus :: Lens' DescribeGlobalTableSettingsResponse Int

-- | An optional string that, if supplied, must be copied from the output
--   of a previous call to ListTagOfResource. When provided in this manner,
--   this API fetches the next page of results.
listTagsOfResource_nextToken :: Lens' ListTagsOfResource (Maybe Text)

-- | The Amazon DynamoDB resource with tags to be listed. This value is an
--   Amazon Resource Name (ARN).
listTagsOfResource_resourceArn :: Lens' ListTagsOfResource Text

-- | If this value is returned, there are additional results to be
--   displayed. To retrieve them, call ListTagsOfResource again, with
--   NextToken set to this value.
listTagsOfResourceResponse_nextToken :: Lens' ListTagsOfResourceResponse (Maybe Text)

-- | The tags currently associated with the Amazon DynamoDB resource.
listTagsOfResourceResponse_tags :: Lens' ListTagsOfResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsOfResourceResponse_httpStatus :: Lens' ListTagsOfResourceResponse Int

-- | The name of the global table.
describeGlobalTable_globalTableName :: Lens' DescribeGlobalTable Text

-- | Contains the details of the global table.
describeGlobalTableResponse_globalTableDescription :: Lens' DescribeGlobalTableResponse (Maybe GlobalTableDescription)

-- | The response's http status code.
describeGlobalTableResponse_httpStatus :: Lens' DescribeGlobalTableResponse Int

-- | The name of the table to describe.
describeTable_tableName :: Lens' DescribeTable Text

-- | The properties of the table.
describeTableResponse_table :: Lens' DescribeTableResponse (Maybe TableDescription)

-- | The response's http status code.
describeTableResponse_httpStatus :: Lens' DescribeTableResponse Int

-- | The maximum write capacity units that your account allows you to
--   provision for a new table that you are creating in this Region,
--   including the write capacity units provisioned for its global
--   secondary indexes (GSIs).
describeLimitsResponse_tableMaxWriteCapacityUnits :: Lens' DescribeLimitsResponse (Maybe Natural)

-- | The maximum read capacity units that your account allows you to
--   provision for a new table that you are creating in this Region,
--   including the read capacity units provisioned for its global secondary
--   indexes (GSIs).
describeLimitsResponse_tableMaxReadCapacityUnits :: Lens' DescribeLimitsResponse (Maybe Natural)

-- | The maximum total write capacity units that your account allows you to
--   provision across all of your tables in this Region.
describeLimitsResponse_accountMaxWriteCapacityUnits :: Lens' DescribeLimitsResponse (Maybe Natural)

-- | The maximum total read capacity units that your account allows you to
--   provision across all of your tables in this Region.
describeLimitsResponse_accountMaxReadCapacityUnits :: Lens' DescribeLimitsResponse (Maybe Natural)

-- | The response's http status code.
describeLimitsResponse_httpStatus :: Lens' DescribeLimitsResponse Int

-- | Set this value to get remaining results, if <tt>NextToken</tt> was
--   returned in the statement response.
executeTransaction_clientRequestToken :: Lens' ExecuteTransaction (Maybe Text)

-- | The list of PartiQL statements representing the transaction to run.
executeTransaction_transactStatements :: Lens' ExecuteTransaction (NonEmpty ParameterizedStatement)

-- | The response to a PartiQL transaction.
executeTransactionResponse_responses :: Lens' ExecuteTransactionResponse (Maybe (NonEmpty ItemResponse))

-- | The response's http status code.
executeTransactionResponse_httpStatus :: Lens' ExecuteTransactionResponse Int

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the expression must be separated by
--   commas.
--   
--   If no attribute names are specified, then all attributes are returned.
--   If any of the requested attributes are not found, they do not appear
--   in the result.
--   
--   For more information, see <a>Specifying Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
getItem_projectionExpression :: Lens' GetItem (Maybe Text)

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
getItem_attributesToGet :: Lens' GetItem (Maybe (NonEmpty Text))

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
getItem_expressionAttributeNames :: Lens' GetItem (Maybe (HashMap Text Text))

-- | Determines the read consistency model: If set to <tt>true</tt>, then
--   the operation uses strongly consistent reads; otherwise, the operation
--   uses eventually consistent reads.
getItem_consistentRead :: Lens' GetItem (Maybe Bool)

-- | Undocumented member.
getItem_returnConsumedCapacity :: Lens' GetItem (Maybe ReturnConsumedCapacity)

-- | The name of the table containing the requested item.
getItem_tableName :: Lens' GetItem Text

-- | A map of attribute names to <tt>AttributeValue</tt> objects,
--   representing the primary key of the item to retrieve.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
getItem_key :: Lens' GetItem (HashMap Text AttributeValue)

-- | The capacity units consumed by the <tt>GetItem</tt> operation. The
--   data returned includes the total provisioned throughput consumed,
--   along with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Read/Write Capacity Mode</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
getItemResponse_consumedCapacity :: Lens' GetItemResponse (Maybe ConsumedCapacity)

-- | A map of attribute names to <tt>AttributeValue</tt> objects, as
--   specified by <tt>ProjectionExpression</tt>.
getItemResponse_item :: Lens' GetItemResponse (Maybe (HashMap Text AttributeValue))

-- | The response's http status code.
getItemResponse_httpStatus :: Lens' GetItemResponse Int

-- | The Amazon Resource Name (ARN) associated with the backup.
describeBackup_backupArn :: Lens' DescribeBackup Text

-- | Contains the description of the backup created for the table.
describeBackupResponse_backupDescription :: Lens' DescribeBackupResponse (Maybe BackupDescription)

-- | The response's http status code.
describeBackupResponse_httpStatus :: Lens' DescribeBackupResponse Int

-- | The list of PartiQL statements representing the batch to run.
batchExecuteStatement_statements :: Lens' BatchExecuteStatement (NonEmpty BatchStatementRequest)

-- | The response to each PartiQL statement in the batch.
batchExecuteStatementResponse_responses :: Lens' BatchExecuteStatementResponse (Maybe [BatchStatementResponse])

-- | The response's http status code.
batchExecuteStatementResponse_httpStatus :: Lens' BatchExecuteStatementResponse Int

-- | The name of the table.
describeTableReplicaAutoScaling_tableName :: Lens' DescribeTableReplicaAutoScaling Text

-- | Represents the auto scaling properties of the table.
describeTableReplicaAutoScalingResponse_tableAutoScalingDescription :: Lens' DescribeTableReplicaAutoScalingResponse (Maybe TableAutoScalingDescription)

-- | The response's http status code.
describeTableReplicaAutoScalingResponse_httpStatus :: Lens' DescribeTableReplicaAutoScalingResponse Int

-- | Auto scaling settings for managing provisioned write capacity for the
--   global table.
updateGlobalTableSettings_globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate :: Lens' UpdateGlobalTableSettings (Maybe AutoScalingSettingsUpdate)

-- | The billing mode of the global table. If
--   <tt>GlobalTableBillingMode</tt> is not specified, the global table
--   defaults to <tt>PROVISIONED</tt> capacity billing mode.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
updateGlobalTableSettings_globalTableBillingMode :: Lens' UpdateGlobalTableSettings (Maybe BillingMode)

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
updateGlobalTableSettings_globalTableProvisionedWriteCapacityUnits :: Lens' UpdateGlobalTableSettings (Maybe Natural)

-- | Represents the settings for a global table in a Region that will be
--   modified.
updateGlobalTableSettings_replicaSettingsUpdate :: Lens' UpdateGlobalTableSettings (Maybe (NonEmpty ReplicaSettingsUpdate))

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
updateGlobalTableSettings_globalTableGlobalSecondaryIndexSettingsUpdate :: Lens' UpdateGlobalTableSettings (Maybe (NonEmpty GlobalTableGlobalSecondaryIndexSettingsUpdate))

-- | The name of the global table
updateGlobalTableSettings_globalTableName :: Lens' UpdateGlobalTableSettings Text

-- | The Region-specific settings for the global table.
updateGlobalTableSettingsResponse_replicaSettings :: Lens' UpdateGlobalTableSettingsResponse (Maybe [ReplicaSettingsDescription])

-- | The name of the global table.
updateGlobalTableSettingsResponse_globalTableName :: Lens' UpdateGlobalTableSettingsResponse (Maybe Text)

-- | The response's http status code.
updateGlobalTableSettingsResponse_httpStatus :: Lens' UpdateGlobalTableSettingsResponse Int

-- | The name of the DynamoDB table.
enableKinesisStreamingDestination_tableName :: Lens' EnableKinesisStreamingDestination Text

-- | The ARN for a Kinesis data stream.
enableKinesisStreamingDestination_streamArn :: Lens' EnableKinesisStreamingDestination Text

-- | The current status of the replication.
kinesisStreamingDestinationOutput_destinationStatus :: Lens' KinesisStreamingDestinationOutput (Maybe DestinationStatus)

-- | The ARN for the specific Kinesis data stream.
kinesisStreamingDestinationOutput_streamArn :: Lens' KinesisStreamingDestinationOutput (Maybe Text)

-- | The name of the table being modified.
kinesisStreamingDestinationOutput_tableName :: Lens' KinesisStreamingDestinationOutput (Maybe Text)

-- | A value of <tt>TOTAL</tt> causes consumed capacity information to be
--   returned, and a value of <tt>NONE</tt> prevents that information from
--   being returned. No other value is valid.
transactGetItems_returnConsumedCapacity :: Lens' TransactGetItems (Maybe ReturnConsumedCapacity)

-- | An ordered array of up to 25 <tt>TransactGetItem</tt> objects, each of
--   which contains a <tt>Get</tt> structure.
transactGetItems_transactItems :: Lens' TransactGetItems (NonEmpty TransactGetItem)

-- | An ordered array of up to 25 <tt>ItemResponse</tt> objects, each of
--   which corresponds to the <tt>TransactGetItem</tt> object in the same
--   position in the <i>TransactItems</i> array. Each <tt>ItemResponse</tt>
--   object contains a Map of the name-value pairs that are the projected
--   attributes of the requested item.
--   
--   If a requested item could not be retrieved, the corresponding
--   <tt>ItemResponse</tt> object is Null, or if the requested item has no
--   projected attributes, the corresponding <tt>ItemResponse</tt> object
--   is an empty Map.
transactGetItemsResponse_responses :: Lens' TransactGetItemsResponse (Maybe (NonEmpty ItemResponse))

-- | If the <i>ReturnConsumedCapacity</i> value was <tt>TOTAL</tt>, this is
--   an array of <tt>ConsumedCapacity</tt> objects, one for each table
--   addressed by <tt>TransactGetItem</tt> objects in the
--   <i>TransactItems</i> parameter. These <tt>ConsumedCapacity</tt>
--   objects report the read-capacity units consumed by the
--   <tt>TransactGetItems</tt> call in that table.
transactGetItemsResponse_consumedCapacity :: Lens' TransactGetItemsResponse (Maybe [ConsumedCapacity])

-- | The response's http status code.
transactGetItemsResponse_httpStatus :: Lens' TransactGetItemsResponse Int

-- | A token to for the desired page, if there is one.
listContributorInsights_nextToken :: Lens' ListContributorInsights (Maybe Text)

-- | Maximum number of results to return per page.
listContributorInsights_maxResults :: Lens' ListContributorInsights (Maybe Int)

-- | The name of the table.
listContributorInsights_tableName :: Lens' ListContributorInsights (Maybe Text)

-- | A list of ContributorInsightsSummary.
listContributorInsightsResponse_contributorInsightsSummaries :: Lens' ListContributorInsightsResponse (Maybe [ContributorInsightsSummary])

-- | A token to go to the next page if there is one.
listContributorInsightsResponse_nextToken :: Lens' ListContributorInsightsResponse (Maybe Text)

-- | The response's http status code.
listContributorInsightsResponse_httpStatus :: Lens' ListContributorInsightsResponse Int

-- | Undocumented member.
batchWriteItem_returnConsumedCapacity :: Lens' BatchWriteItem (Maybe ReturnConsumedCapacity)

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item
--   collections, if any, that were modified during the operation are
--   returned in the response. If set to <tt>NONE</tt> (the default), no
--   statistics are returned.
batchWriteItem_returnItemCollectionMetrics :: Lens' BatchWriteItem (Maybe ReturnItemCollectionMetrics)

-- | A map of one or more table names and, for each table, a list of
--   operations to be performed (<tt>DeleteRequest</tt> or
--   <tt>PutRequest</tt>). Each element in the map consists of the
--   following:
--   
--   <ul>
--   <li><tt>DeleteRequest</tt> - Perform a <tt>DeleteItem</tt> operation
--   on the specified item. The item to be deleted is identified by a
--   <tt>Key</tt> subelement:<ul><li><tt>Key</tt> - A map of primary key
--   attribute values that uniquely identify the item. Each entry in this
--   map consists of an attribute name and an attribute value. For each
--   primary key, you must provide <i>all</i> of the key attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for <i>both</i> the partition key and the sort
--   key.</li></ul></li>
--   <li><tt>PutRequest</tt> - Perform a <tt>PutItem</tt> operation on the
--   specified item. The item to be put is identified by an <tt>Item</tt>
--   subelement:<ul><li><tt>Item</tt> - A map of attributes and their
--   values. Each entry in this map consists of an attribute name and an
--   attribute value. Attribute values must not be null; string and binary
--   type attributes must have lengths greater than zero; and set type
--   attributes must not be empty. Requests that contain empty values are
--   rejected with a <tt>ValidationException</tt> exception.If you specify
--   any attributes that are part of an index key, then the data types for
--   those attributes must match those of the schema in the table's
--   attribute definition.</li></ul></li>
--   </ul>
batchWriteItem_requestItems :: Lens' BatchWriteItem (HashMap Text (NonEmpty WriteRequest))

-- | A list of tables that were processed by <tt>BatchWriteItem</tt> and,
--   for each table, information about any item collections that were
--   affected by individual <tt>DeleteItem</tt> or <tt>PutItem</tt>
--   operations.
--   
--   Each entry consists of the following subelements:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the
--   item.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, expressed in GB. This is a two-element array containing a lower
--   bound and an upper bound for the estimate. The estimate includes the
--   size of all the items in the table, plus the size of all attributes
--   projected into all of the local secondary indexes on the table. Use
--   this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
batchWriteItemResponse_itemCollectionMetrics :: Lens' BatchWriteItemResponse (Maybe (HashMap Text [ItemCollectionMetrics]))

-- | The capacity units consumed by the entire <tt>BatchWriteItem</tt>
--   operation.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>TableName</tt> - The table that consumed the provisioned
--   throughput.</li>
--   <li><tt>CapacityUnits</tt> - The total number of capacity units
--   consumed.</li>
--   </ul>
batchWriteItemResponse_consumedCapacity :: Lens' BatchWriteItemResponse (Maybe [ConsumedCapacity])

-- | A map of tables and requests against those tables that were not
--   processed. The <tt>UnprocessedItems</tt> value is in the same form as
--   <tt>RequestItems</tt>, so you can provide this value directly to a
--   subsequent <tt>BatchGetItem</tt> operation. For more information, see
--   <tt>RequestItems</tt> in the Request Parameters section.
--   
--   Each <tt>UnprocessedItems</tt> entry consists of a table name and, for
--   that table, a list of operations to perform (<tt>DeleteRequest</tt> or
--   <tt>PutRequest</tt>).
--   
--   <ul>
--   <li><tt>DeleteRequest</tt> - Perform a <tt>DeleteItem</tt> operation
--   on the specified item. The item to be deleted is identified by a
--   <tt>Key</tt> subelement:<ul><li><tt>Key</tt> - A map of primary key
--   attribute values that uniquely identify the item. Each entry in this
--   map consists of an attribute name and an attribute
--   value.</li></ul></li>
--   <li><tt>PutRequest</tt> - Perform a <tt>PutItem</tt> operation on the
--   specified item. The item to be put is identified by an <tt>Item</tt>
--   subelement:<ul><li><tt>Item</tt> - A map of attributes and their
--   values. Each entry in this map consists of an attribute name and an
--   attribute value. Attribute values must not be null; string and binary
--   type attributes must have lengths greater than zero; and set type
--   attributes must not be empty. Requests that contain empty values will
--   be rejected with a <tt>ValidationException</tt> exception.If you
--   specify any attributes that are part of an index key, then the data
--   types for those attributes must match those of the schema in the
--   table's attribute definition.</li></ul></li>
--   </ul>
--   
--   If there are no unprocessed items remaining, the response contains an
--   empty <tt>UnprocessedItems</tt> map.
batchWriteItemResponse_unprocessedItems :: Lens' BatchWriteItemResponse (Maybe (HashMap Text (NonEmpty WriteRequest)))

-- | The response's http status code.
batchWriteItemResponse_httpStatus :: Lens' BatchWriteItemResponse Int

-- | The ID of the AWS account that owns the bucket the export will be
--   stored in.
exportTableToPointInTime_s3BucketOwner :: Lens' ExportTableToPointInTime (Maybe Text)

-- | The format for the exported data. Valid values for
--   <tt>ExportFormat</tt> are <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
exportTableToPointInTime_exportFormat :: Lens' ExportTableToPointInTime (Maybe ExportFormat)

-- | The ID of the AWS KMS managed key used to encrypt the S3 bucket where
--   export data will be stored (if applicable).
exportTableToPointInTime_s3SseKmsKeyId :: Lens' ExportTableToPointInTime (Maybe Text)

-- | Providing a <tt>ClientToken</tt> makes the call to
--   <tt>ExportTableToPointInTimeInput</tt> idempotent, meaning that
--   multiple identical calls have the same effect as one single call.
--   
--   A client token is valid for 8 hours after the first request that uses
--   it is completed. After 8 hours, any request with the same client token
--   is treated as a new request. Do not resubmit the same request with the
--   same client token for more than 8 hours, or the result might not be
--   idempotent.
--   
--   If you submit a request with the same client token but a change in
--   other parameters within the 8-hour idempotency window, DynamoDB
--   returns an <tt>IdempotentParameterMismatch</tt> exception.
exportTableToPointInTime_clientToken :: Lens' ExportTableToPointInTime (Maybe Text)

-- | Time in the past from which to export table data. The table export
--   will be a snapshot of the table's state at this point in time.
exportTableToPointInTime_exportTime :: Lens' ExportTableToPointInTime (Maybe UTCTime)

-- | Type of encryption used on the bucket where export data will be
--   stored. Valid values for <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
exportTableToPointInTime_s3SseAlgorithm :: Lens' ExportTableToPointInTime (Maybe S3SseAlgorithm)

-- | The Amazon S3 bucket prefix to use as the file name and path of the
--   exported snapshot.
exportTableToPointInTime_s3Prefix :: Lens' ExportTableToPointInTime (Maybe Text)

-- | The Amazon Resource Name (ARN) associated with the table to export.
exportTableToPointInTime_tableArn :: Lens' ExportTableToPointInTime Text

-- | The name of the Amazon S3 bucket to export the snapshot to.
exportTableToPointInTime_s3Bucket :: Lens' ExportTableToPointInTime Text

-- | Contains a description of the table export.
exportTableToPointInTimeResponse_exportDescription :: Lens' ExportTableToPointInTimeResponse (Maybe ExportDescription)

-- | The response's http status code.
exportTableToPointInTimeResponse_httpStatus :: Lens' ExportTableToPointInTimeResponse Int

-- | Undocumented member.
transactWriteItems_returnConsumedCapacity :: Lens' TransactWriteItems (Maybe ReturnConsumedCapacity)

-- | Determines whether item collection metrics are returned. If set to
--   <tt>SIZE</tt>, the response includes statistics about item collections
--   (if any), that were modified during the operation and are returned in
--   the response. If set to <tt>NONE</tt> (the default), no statistics are
--   returned.
transactWriteItems_returnItemCollectionMetrics :: Lens' TransactWriteItems (Maybe ReturnItemCollectionMetrics)

-- | Providing a <tt>ClientRequestToken</tt> makes the call to
--   <tt>TransactWriteItems</tt> idempotent, meaning that multiple
--   identical calls have the same effect as one single call.
--   
--   Although multiple identical calls using the same client request token
--   produce the same result on the server (no side effects), the responses
--   to the calls might not be the same. If the
--   <tt>ReturnConsumedCapacity&gt;</tt> parameter is set, then the initial
--   <tt>TransactWriteItems</tt> call returns the amount of write capacity
--   units consumed in making the changes. Subsequent
--   <tt>TransactWriteItems</tt> calls with the same client token return
--   the number of read capacity units consumed in reading the item.
--   
--   A client request token is valid for 10 minutes after the first request
--   that uses it is completed. After 10 minutes, any request with the same
--   client token is treated as a new request. Do not resubmit the same
--   request with the same client token for more than 10 minutes, or the
--   result might not be idempotent.
--   
--   If you submit a request with the same client token but a change in
--   other parameters within the 10-minute idempotency window, DynamoDB
--   returns an <tt>IdempotentParameterMismatch</tt> exception.
transactWriteItems_clientRequestToken :: Lens' TransactWriteItems (Maybe Text)

-- | An ordered array of up to 25 <tt>TransactWriteItem</tt> objects, each
--   of which contains a <tt>ConditionCheck</tt>, <tt>Put</tt>,
--   <tt>Update</tt>, or <tt>Delete</tt> object. These can operate on items
--   in different tables, but the tables must reside in the same AWS
--   account and Region, and no two of them can operate on the same item.
transactWriteItems_transactItems :: Lens' TransactWriteItems (NonEmpty TransactWriteItem)

-- | A list of tables that were processed by <tt>TransactWriteItems</tt>
--   and, for each table, information about any item collections that were
--   affected by individual <tt>UpdateItem</tt>, <tt>PutItem</tt>, or
--   <tt>DeleteItem</tt> operations.
transactWriteItemsResponse_itemCollectionMetrics :: Lens' TransactWriteItemsResponse (Maybe (HashMap Text [ItemCollectionMetrics]))

-- | The capacity units consumed by the entire <tt>TransactWriteItems</tt>
--   operation. The values of the list are ordered according to the
--   ordering of the <tt>TransactItems</tt> request parameter.
transactWriteItemsResponse_consumedCapacity :: Lens' TransactWriteItemsResponse (Maybe [ConsumedCapacity])

-- | The response's http status code.
transactWriteItemsResponse_httpStatus :: Lens' TransactWriteItemsResponse Int

-- | The first table name that this operation will evaluate. Use the value
--   that was returned for <tt>LastEvaluatedTableName</tt> in a previous
--   operation, so that you can obtain the next page of results.
listTables_exclusiveStartTableName :: Lens' ListTables (Maybe Text)

-- | A maximum number of table names to return. If this parameter is not
--   specified, the limit is 100.
listTables_limit :: Lens' ListTables (Maybe Natural)

-- | The name of the last table in the current page of results. Use this
--   value as the <tt>ExclusiveStartTableName</tt> in a new request to
--   obtain the next page of results, until all the table names are
--   returned.
--   
--   If you do not receive a <tt>LastEvaluatedTableName</tt> value in the
--   response, this means that there are no more table names to be
--   retrieved.
listTablesResponse_lastEvaluatedTableName :: Lens' ListTablesResponse (Maybe Text)

-- | The names of the tables associated with the current account at the
--   current endpoint. The maximum size of this array is 100.
--   
--   If <tt>LastEvaluatedTableName</tt> also appears in the output, you can
--   use this value as the <tt>ExclusiveStartTableName</tt> parameter in a
--   subsequent <tt>ListTables</tt> request and obtain the next page of
--   results.
listTablesResponse_tableNames :: Lens' ListTablesResponse (Maybe [Text])

-- | The response's http status code.
listTablesResponse_httpStatus :: Lens' ListTablesResponse Int

-- | A string that identifies one or more attributes to retrieve from the
--   specified table or index. These attributes can include scalars, sets,
--   or elements of a JSON document. The attributes in the expression must
--   be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Specifying Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
scan_projectionExpression :: Lens' Scan (Maybe Text)

-- | This is a legacy parameter. Use <tt>FilterExpression</tt> instead. For
--   more information, see <a>ScanFilter</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
scan_scanFilter :: Lens' Scan (Maybe (HashMap Text Condition))

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
scan_attributesToGet :: Lens' Scan (Maybe (NonEmpty Text))

-- | For a parallel <tt>Scan</tt> request, <tt>TotalSegments</tt>
--   represents the total number of segments into which the <tt>Scan</tt>
--   operation will be divided. The value of <tt>TotalSegments</tt>
--   corresponds to the number of application workers that will perform the
--   parallel scan. For example, if you want to use four application
--   threads to scan a table or an index, specify a <tt>TotalSegments</tt>
--   value of 4.
--   
--   The value for <tt>TotalSegments</tt> must be greater than or equal to
--   1, and less than or equal to 1000000. If you specify a
--   <tt>TotalSegments</tt> value of 1, the <tt>Scan</tt> operation will be
--   sequential rather than parallel.
--   
--   If you specify <tt>TotalSegments</tt>, you must also specify
--   <tt>Segment</tt>.
scan_totalSegments :: Lens' Scan (Maybe Natural)

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
scan_expressionAttributeNames :: Lens' Scan (Maybe (HashMap Text Text))

-- | A string that contains conditions that DynamoDB applies after the
--   <tt>Scan</tt> operation, but before the data is returned to you. Items
--   that do not satisfy the <tt>FilterExpression</tt> criteria are not
--   returned.
--   
--   A <tt>FilterExpression</tt> is applied after the items have already
--   been read; the process of filtering does not consume any additional
--   read capacity units.
--   
--   For more information, see <a>Filter Expressions</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
scan_filterExpression :: Lens' Scan (Maybe Text)

-- | A Boolean value that determines the read consistency model during the
--   scan:
--   
--   <ul>
--   <li>If <tt>ConsistentRead</tt> is <tt>false</tt>, then the data
--   returned from <tt>Scan</tt> might not contain the results from other
--   recently completed write operations (<tt>PutItem</tt>,
--   <tt>UpdateItem</tt>, or <tt>DeleteItem</tt>).</li>
--   <li>If <tt>ConsistentRead</tt> is <tt>true</tt>, then all of the write
--   operations that completed before the <tt>Scan</tt> began are
--   guaranteed to be contained in the <tt>Scan</tt> response.</li>
--   </ul>
--   
--   The default setting for <tt>ConsistentRead</tt> is <tt>false</tt>.
--   
--   The <tt>ConsistentRead</tt> parameter is not supported on global
--   secondary indexes. If you scan a global secondary index with
--   <tt>ConsistentRead</tt> set to true, you will receive a
--   <tt>ValidationException</tt>.
scan_consistentRead :: Lens' Scan (Maybe Bool)

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <tt>ProductStatus</tt> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
scan_expressionAttributeValues :: Lens' Scan (Maybe (HashMap Text AttributeValue))

-- | Undocumented member.
scan_returnConsumedCapacity :: Lens' Scan (Maybe ReturnConsumedCapacity)

-- | The maximum number of items to evaluate (not necessarily the number of
--   matching items). If DynamoDB processes the number of items up to the
--   limit while processing the results, it stops the operation and returns
--   the matching values up to that point, and a key in
--   <tt>LastEvaluatedKey</tt> to apply in a subsequent operation, so that
--   you can pick up where you left off. Also, if the processed dataset
--   size exceeds 1 MB before DynamoDB reaches this limit, it stops the
--   operation and returns the matching values up to the limit, and a key
--   in <tt>LastEvaluatedKey</tt> to apply in a subsequent operation to
--   continue the operation. For more information, see <a>Working with
--   Queries</a> in the <i>Amazon DynamoDB Developer Guide</i>.
scan_limit :: Lens' Scan (Maybe Natural)

-- | The attributes to be returned in the result. You can retrieve all item
--   attributes, specific item attributes, the count of matching items, or
--   in the case of an index, some or all of the attributes projected into
--   the index.
--   
--   <ul>
--   <li><tt>ALL_ATTRIBUTES</tt> - Returns all of the item attributes from
--   the specified table or index. If you query a local secondary index,
--   then for each matching item in the index, DynamoDB fetches the entire
--   item from the parent table. If the index is configured to project all
--   item attributes, then all of the data can be obtained from the local
--   secondary index, and no fetching is required.</li>
--   <li><tt>ALL_PROJECTED_ATTRIBUTES</tt> - Allowed only when querying an
--   index. Retrieves all attributes that have been projected into the
--   index. If the index is configured to project all attributes, this
--   return value is equivalent to specifying <tt>ALL_ATTRIBUTES</tt>.</li>
--   <li><tt>COUNT</tt> - Returns the number of matching items, rather than
--   the matching items themselves.</li>
--   <li><tt>SPECIFIC_ATTRIBUTES</tt> - Returns only the attributes listed
--   in <tt>AttributesToGet</tt>. This return value is equivalent to
--   specifying <tt>AttributesToGet</tt> without specifying any value for
--   <tt>Select</tt>.If you query or scan a local secondary index and
--   request only attributes that are projected into that index, the
--   operation reads only the index and not the table. If any of the
--   requested attributes are not projected into the local secondary index,
--   DynamoDB fetches each of these attributes from the parent table. This
--   extra fetching incurs additional throughput cost and latency.If you
--   query or scan a global secondary index, you can only request
--   attributes that are projected into the index. Global secondary index
--   queries cannot fetch attributes from the parent table.</li>
--   </ul>
--   
--   If neither <tt>Select</tt> nor <tt>AttributesToGet</tt> are specified,
--   DynamoDB defaults to <tt>ALL_ATTRIBUTES</tt> when accessing a table,
--   and <tt>ALL_PROJECTED_ATTRIBUTES</tt> when accessing an index. You
--   cannot use both <tt>Select</tt> and <tt>AttributesToGet</tt> together
--   in a single request, unless the value for <tt>Select</tt> is
--   <tt>SPECIFIC_ATTRIBUTES</tt>. (This usage is equivalent to specifying
--   <tt>AttributesToGet</tt> without any value for <tt>Select</tt>.)
--   
--   If you use the <tt>ProjectionExpression</tt> parameter, then the value
--   for <tt>Select</tt> can only be <tt>SPECIFIC_ATTRIBUTES</tt>. Any
--   other value for <tt>Select</tt> will return an error.
scan_select :: Lens' Scan (Maybe Select)

-- | For a parallel <tt>Scan</tt> request, <tt>Segment</tt> identifies an
--   individual segment to be scanned by an application worker.
--   
--   Segment IDs are zero-based, so the first segment is always 0. For
--   example, if you want to use four application threads to scan a table
--   or an index, then the first thread specifies a <tt>Segment</tt> value
--   of 0, the second thread specifies 1, and so on.
--   
--   The value of <tt>LastEvaluatedKey</tt> returned from a parallel
--   <tt>Scan</tt> request must be used as <tt>ExclusiveStartKey</tt> with
--   the same segment ID in a subsequent <tt>Scan</tt> operation.
--   
--   The value for <tt>Segment</tt> must be greater than or equal to 0, and
--   less than the value provided for <tt>TotalSegments</tt>.
--   
--   If you provide <tt>Segment</tt>, you must also provide
--   <tt>TotalSegments</tt>.
scan_segment :: Lens' Scan (Maybe Natural)

-- | This is a legacy parameter. Use <tt>FilterExpression</tt> instead. For
--   more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
scan_conditionalOperator :: Lens' Scan (Maybe ConditionalOperator)

-- | The primary key of the first item that this operation will evaluate.
--   Use the value that was returned for <tt>LastEvaluatedKey</tt> in the
--   previous operation.
--   
--   The data type for <tt>ExclusiveStartKey</tt> must be String, Number or
--   Binary. No set data types are allowed.
--   
--   In a parallel scan, a <tt>Scan</tt> request that includes
--   <tt>ExclusiveStartKey</tt> must specify the same segment whose
--   previous <tt>Scan</tt> returned the corresponding value of
--   <tt>LastEvaluatedKey</tt>.
scan_exclusiveStartKey :: Lens' Scan (Maybe (HashMap Text AttributeValue))

-- | The name of a secondary index to scan. This index can be any local
--   secondary index or global secondary index. Note that if you use the
--   <tt>IndexName</tt> parameter, you must also provide
--   <tt>TableName</tt>.
scan_indexName :: Lens' Scan (Maybe Text)

-- | The name of the table containing the requested items; or, if you
--   provide <tt>IndexName</tt>, the name of the table to which that index
--   belongs.
scan_tableName :: Lens' Scan Text

-- | The primary key of the item where the operation stopped, inclusive of
--   the previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedKey</tt> is empty, then the "last page" of results
--   has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedKey</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedKey</tt> is empty.
scanResponse_lastEvaluatedKey :: Lens' ScanResponse (Maybe (HashMap Text AttributeValue))

-- | The number of items in the response.
--   
--   If you set <tt>ScanFilter</tt> in the request, then <tt>Count</tt> is
--   the number of items returned after the filter was applied, and
--   <tt>ScannedCount</tt> is the number of matching items before the
--   filter was applied.
--   
--   If you did not use a filter in the request, then <tt>Count</tt> is the
--   same as <tt>ScannedCount</tt>.
scanResponse_count :: Lens' ScanResponse (Maybe Int)

-- | The number of items evaluated, before any <tt>ScanFilter</tt> is
--   applied. A high <tt>ScannedCount</tt> value with few, or no,
--   <tt>Count</tt> results indicates an inefficient <tt>Scan</tt>
--   operation. For more information, see <a>Count and ScannedCount</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   If you did not use a filter in the request, then <tt>ScannedCount</tt>
--   is the same as <tt>Count</tt>.
scanResponse_scannedCount :: Lens' ScanResponse (Maybe Int)

-- | An array of item attributes that match the scan criteria. Each element
--   in this array consists of an attribute name and the value for that
--   attribute.
scanResponse_items :: Lens' ScanResponse (Maybe [HashMap Text AttributeValue])

-- | The capacity units consumed by the <tt>Scan</tt> operation. The data
--   returned includes the total provisioned throughput consumed, along
--   with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Throughput</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
scanResponse_consumedCapacity :: Lens' ScanResponse (Maybe ConsumedCapacity)

-- | The response's http status code.
scanResponse_httpStatus :: Lens' ScanResponse Int

-- | The global secondary index name, if applicable.
updateContributorInsights_indexName :: Lens' UpdateContributorInsights (Maybe Text)

-- | The name of the table.
updateContributorInsights_tableName :: Lens' UpdateContributorInsights Text

-- | Represents the contributor insights action.
updateContributorInsights_contributorInsightsAction :: Lens' UpdateContributorInsights ContributorInsightsAction

-- | The status of contributor insights
updateContributorInsightsResponse_contributorInsightsStatus :: Lens' UpdateContributorInsightsResponse (Maybe ContributorInsightsStatus)

-- | The name of the table.
updateContributorInsightsResponse_tableName :: Lens' UpdateContributorInsightsResponse (Maybe Text)

-- | The name of the global secondary index, if applicable.
updateContributorInsightsResponse_indexName :: Lens' UpdateContributorInsightsResponse (Maybe Text)

-- | The response's http status code.
updateContributorInsightsResponse_httpStatus :: Lens' UpdateContributorInsightsResponse Int

-- | The consistency of a read operation. If set to <tt>true</tt>, then a
--   strongly consistent read is used; otherwise, an eventually consistent
--   read is used.
executeStatement_consistentRead :: Lens' ExecuteStatement (Maybe Bool)

-- | Set this value to get remaining results, if <tt>NextToken</tt> was
--   returned in the statement response.
executeStatement_nextToken :: Lens' ExecuteStatement (Maybe Text)

-- | The parameters for the PartiQL statement, if any.
executeStatement_parameters :: Lens' ExecuteStatement (Maybe (NonEmpty AttributeValue))

-- | The PartiQL statement representing the operation to run.
executeStatement_statement :: Lens' ExecuteStatement Text

-- | If a read operation was used, this property will contain the result of
--   the reade operation; a map of attribute names and their values. For
--   the write operations this value will be empty.
executeStatementResponse_items :: Lens' ExecuteStatementResponse (Maybe [HashMap Text AttributeValue])

-- | If the response of a read request exceeds the response payload limit
--   DynamoDB will set this value in the response. If set, you can use that
--   this value in the subsequent request to get the remaining results.
executeStatementResponse_nextToken :: Lens' ExecuteStatementResponse (Maybe Text)

-- | The response's http status code.
executeStatementResponse_httpStatus :: Lens' ExecuteStatementResponse Int

-- | This is a legacy parameter. Use <tt>KeyConditionExpression</tt>
--   instead. For more information, see <a>KeyConditions</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
query_keyConditions :: Lens' Query (Maybe (HashMap Text Condition))

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the expression must be separated by
--   commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
query_projectionExpression :: Lens' Query (Maybe Text)

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
query_attributesToGet :: Lens' Query (Maybe (NonEmpty Text))

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
query_expressionAttributeNames :: Lens' Query (Maybe (HashMap Text Text))

-- | A string that contains conditions that DynamoDB applies after the
--   <tt>Query</tt> operation, but before the data is returned to you.
--   Items that do not satisfy the <tt>FilterExpression</tt> criteria are
--   not returned.
--   
--   A <tt>FilterExpression</tt> does not allow key attributes. You cannot
--   define a filter expression based on a partition key or a sort key.
--   
--   A <tt>FilterExpression</tt> is applied after the items have already
--   been read; the process of filtering does not consume any additional
--   read capacity units.
--   
--   For more information, see <a>Filter Expressions</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
query_filterExpression :: Lens' Query (Maybe Text)

-- | This is a legacy parameter. Use <tt>FilterExpression</tt> instead. For
--   more information, see <a>QueryFilter</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
query_queryFilter :: Lens' Query (Maybe (HashMap Text Condition))

-- | Determines the read consistency model: If set to <tt>true</tt>, then
--   the operation uses strongly consistent reads; otherwise, the operation
--   uses eventually consistent reads.
--   
--   Strongly consistent reads are not supported on global secondary
--   indexes. If you query a global secondary index with
--   <tt>ConsistentRead</tt> set to <tt>true</tt>, you will receive a
--   <tt>ValidationException</tt>.
query_consistentRead :: Lens' Query (Maybe Bool)

-- | One or more values that can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
query_expressionAttributeValues :: Lens' Query (Maybe (HashMap Text AttributeValue))

-- | Undocumented member.
query_returnConsumedCapacity :: Lens' Query (Maybe ReturnConsumedCapacity)

-- | Specifies the order for index traversal: If <tt>true</tt> (default),
--   the traversal is performed in ascending order; if <tt>false</tt>, the
--   traversal is performed in descending order.
--   
--   Items with the same partition key value are stored in sorted order by
--   sort key. If the sort key data type is Number, the results are stored
--   in numeric order. For type String, the results are stored in order of
--   UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary
--   data as unsigned.
--   
--   If <tt>ScanIndexForward</tt> is <tt>true</tt>, DynamoDB returns the
--   results in the order in which they are stored (by sort key value).
--   This is the default behavior. If <tt>ScanIndexForward</tt> is
--   <tt>false</tt>, DynamoDB reads the results in reverse order by sort
--   key value, and then returns the results to the client.
query_scanIndexForward :: Lens' Query (Maybe Bool)

-- | The maximum number of items to evaluate (not necessarily the number of
--   matching items). If DynamoDB processes the number of items up to the
--   limit while processing the results, it stops the operation and returns
--   the matching values up to that point, and a key in
--   <tt>LastEvaluatedKey</tt> to apply in a subsequent operation, so that
--   you can pick up where you left off. Also, if the processed dataset
--   size exceeds 1 MB before DynamoDB reaches this limit, it stops the
--   operation and returns the matching values up to the limit, and a key
--   in <tt>LastEvaluatedKey</tt> to apply in a subsequent operation to
--   continue the operation. For more information, see <a>Query and
--   Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
query_limit :: Lens' Query (Maybe Natural)

-- | The attributes to be returned in the result. You can retrieve all item
--   attributes, specific item attributes, the count of matching items, or
--   in the case of an index, some or all of the attributes projected into
--   the index.
--   
--   <ul>
--   <li><tt>ALL_ATTRIBUTES</tt> - Returns all of the item attributes from
--   the specified table or index. If you query a local secondary index,
--   then for each matching item in the index, DynamoDB fetches the entire
--   item from the parent table. If the index is configured to project all
--   item attributes, then all of the data can be obtained from the local
--   secondary index, and no fetching is required.</li>
--   <li><tt>ALL_PROJECTED_ATTRIBUTES</tt> - Allowed only when querying an
--   index. Retrieves all attributes that have been projected into the
--   index. If the index is configured to project all attributes, this
--   return value is equivalent to specifying <tt>ALL_ATTRIBUTES</tt>.</li>
--   <li><tt>COUNT</tt> - Returns the number of matching items, rather than
--   the matching items themselves.</li>
--   <li><tt>SPECIFIC_ATTRIBUTES</tt> - Returns only the attributes listed
--   in <tt>AttributesToGet</tt>. This return value is equivalent to
--   specifying <tt>AttributesToGet</tt> without specifying any value for
--   <tt>Select</tt>.If you query or scan a local secondary index and
--   request only attributes that are projected into that index, the
--   operation will read only the index and not the table. If any of the
--   requested attributes are not projected into the local secondary index,
--   DynamoDB fetches each of these attributes from the parent table. This
--   extra fetching incurs additional throughput cost and latency.If you
--   query or scan a global secondary index, you can only request
--   attributes that are projected into the index. Global secondary index
--   queries cannot fetch attributes from the parent table.</li>
--   </ul>
--   
--   If neither <tt>Select</tt> nor <tt>AttributesToGet</tt> are specified,
--   DynamoDB defaults to <tt>ALL_ATTRIBUTES</tt> when accessing a table,
--   and <tt>ALL_PROJECTED_ATTRIBUTES</tt> when accessing an index. You
--   cannot use both <tt>Select</tt> and <tt>AttributesToGet</tt> together
--   in a single request, unless the value for <tt>Select</tt> is
--   <tt>SPECIFIC_ATTRIBUTES</tt>. (This usage is equivalent to specifying
--   <tt>AttributesToGet</tt> without any value for <tt>Select</tt>.)
--   
--   If you use the <tt>ProjectionExpression</tt> parameter, then the value
--   for <tt>Select</tt> can only be <tt>SPECIFIC_ATTRIBUTES</tt>. Any
--   other value for <tt>Select</tt> will return an error.
query_select :: Lens' Query (Maybe Select)

-- | The condition that specifies the key values for items to be retrieved
--   by the <tt>Query</tt> action.
--   
--   The condition must perform an equality test on a single partition key
--   value.
--   
--   The condition can optionally perform one of several comparison tests
--   on a single sort key value. This allows <tt>Query</tt> to retrieve one
--   item with a given partition key value and sort key value, or several
--   items that have the same partition key value but different sort key
--   values.
--   
--   The partition key equality test is required, and must be specified in
--   the following format:
--   
--   <tt>partitionKeyName</tt> <i>=</i> <tt>:partitionkeyval</tt>
--   
--   If you also want to provide a condition for the sort key, it must be
--   combined using <tt>AND</tt> with the condition for the sort key.
--   Following is an example, using the <b>=</b> comparison operator for
--   the sort key:
--   
--   <tt>partitionKeyName</tt> <tt>=</tt> <tt>:partitionkeyval</tt>
--   <tt>AND</tt> <tt>sortKeyName</tt> <tt>=</tt> <tt>:sortkeyval</tt>
--   
--   Valid comparisons for the sort key condition are as follows:
--   
--   <ul>
--   <li><tt>sortKeyName</tt> <tt>=</tt> <tt>:sortkeyval</tt> - true if the
--   sort key value is equal to <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&lt;</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is less than <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&lt;=</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is less than or equal to <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&gt;</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is greater than <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&gt;= </tt> <tt>:sortkeyval</tt> - true
--   if the sort key value is greater than or equal to
--   <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>BETWEEN</tt> <tt>:sortkeyval1</tt>
--   <tt>AND</tt> <tt>:sortkeyval2</tt> - true if the sort key value is
--   greater than or equal to <tt>:sortkeyval1</tt>, and less than or equal
--   to <tt>:sortkeyval2</tt>.</li>
--   <li><tt>begins_with (</tt> <tt>sortKeyName</tt>, <tt>:sortkeyval</tt>
--   <tt>)</tt> - true if the sort key value begins with a particular
--   operand. (You cannot use this function with a sort key that is of type
--   Number.) Note that the function name <tt>begins_with</tt> is
--   case-sensitive.</li>
--   </ul>
--   
--   Use the <tt>ExpressionAttributeValues</tt> parameter to replace tokens
--   such as <tt>:partitionval</tt> and <tt>:sortval</tt> with actual
--   values at runtime.
--   
--   You can optionally use the <tt>ExpressionAttributeNames</tt> parameter
--   to replace the names of the partition key and sort key with
--   placeholder tokens. This option might be necessary if an attribute
--   name conflicts with a DynamoDB reserved word. For example, the
--   following <tt>KeyConditionExpression</tt> parameter causes an error
--   because <i>Size</i> is a reserved word:
--   
--   <ul>
--   <li><pre>Size = :myval</pre></li>
--   </ul>
--   
--   To work around this, define a placeholder (such a <tt>#S</tt>) to
--   represent the attribute name <i>Size</i>.
--   <tt>KeyConditionExpression</tt> then is as follows:
--   
--   <ul>
--   <li><pre>#S = :myval</pre></li>
--   </ul>
--   
--   For a list of reserved words, see <a>Reserved Words</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   For more information on <tt>ExpressionAttributeNames</tt> and
--   <tt>ExpressionAttributeValues</tt>, see <a>Using Placeholders for
--   Attribute Names and Values</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
query_keyConditionExpression :: Lens' Query (Maybe Text)

-- | This is a legacy parameter. Use <tt>FilterExpression</tt> instead. For
--   more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
query_conditionalOperator :: Lens' Query (Maybe ConditionalOperator)

-- | The primary key of the first item that this operation will evaluate.
--   Use the value that was returned for <tt>LastEvaluatedKey</tt> in the
--   previous operation.
--   
--   The data type for <tt>ExclusiveStartKey</tt> must be String, Number,
--   or Binary. No set data types are allowed.
query_exclusiveStartKey :: Lens' Query (Maybe (HashMap Text AttributeValue))

-- | The name of an index to query. This index can be any local secondary
--   index or global secondary index on the table. Note that if you use the
--   <tt>IndexName</tt> parameter, you must also provide
--   <tt>TableName.</tt>
query_indexName :: Lens' Query (Maybe Text)

-- | The name of the table containing the requested items.
query_tableName :: Lens' Query Text

-- | The primary key of the item where the operation stopped, inclusive of
--   the previous result set. Use this value to start a new operation,
--   excluding this value in the new request.
--   
--   If <tt>LastEvaluatedKey</tt> is empty, then the "last page" of results
--   has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedKey</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedKey</tt> is empty.
queryResponse_lastEvaluatedKey :: Lens' QueryResponse (Maybe (HashMap Text AttributeValue))

-- | The number of items in the response.
--   
--   If you used a <tt>QueryFilter</tt> in the request, then <tt>Count</tt>
--   is the number of items returned after the filter was applied, and
--   <tt>ScannedCount</tt> is the number of matching items before the
--   filter was applied.
--   
--   If you did not use a filter in the request, then <tt>Count</tt> and
--   <tt>ScannedCount</tt> are the same.
queryResponse_count :: Lens' QueryResponse (Maybe Int)

-- | The number of items evaluated, before any <tt>QueryFilter</tt> is
--   applied. A high <tt>ScannedCount</tt> value with few, or no,
--   <tt>Count</tt> results indicates an inefficient <tt>Query</tt>
--   operation. For more information, see <a>Count and ScannedCount</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   If you did not use a filter in the request, then <tt>ScannedCount</tt>
--   is the same as <tt>Count</tt>.
queryResponse_scannedCount :: Lens' QueryResponse (Maybe Int)

-- | An array of item attributes that match the query criteria. Each
--   element in this array consists of an attribute name and the value for
--   that attribute.
queryResponse_items :: Lens' QueryResponse (Maybe [HashMap Text AttributeValue])

-- | The capacity units consumed by the <tt>Query</tt> operation. The data
--   returned includes the total provisioned throughput consumed, along
--   with statistics for the table and any indexes involved in the
--   operation. <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Throughput</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
queryResponse_consumedCapacity :: Lens' QueryResponse (Maybe ConsumedCapacity)

-- | The response's http status code.
queryResponse_httpStatus :: Lens' QueryResponse Int

-- | Represents the provisioned throughput settings for a specified table
--   or index. The settings can be modified using the <tt>UpdateTable</tt>
--   operation.
--   
--   If you set BillingMode as <tt>PROVISIONED</tt>, you must specify this
--   property. If you set BillingMode as <tt>PAY_PER_REQUEST</tt>, you
--   cannot specify this property.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
createTable_provisionedThroughput :: Lens' CreateTable (Maybe ProvisionedThroughput)

-- | Represents the settings used to enable server-side encryption.
createTable_sSESpecification :: Lens' CreateTable (Maybe SSESpecification)

-- | One or more global secondary indexes (the maximum is 20) to be created
--   on the table. Each global secondary index in the array includes the
--   following:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the global secondary index. Must
--   be unique only for this table.</li>
--   <li><tt>KeySchema</tt> - Specifies the key schema for the global
--   secondary index.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 100. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units.</li>
--   </ul>
createTable_globalSecondaryIndexes :: Lens' CreateTable (Maybe [GlobalSecondaryIndex])

-- | One or more local secondary indexes (the maximum is 5) to be created
--   on the table. Each index is scoped to a given partition key value.
--   There is a 10 GB size limit per partition key value; otherwise, the
--   size of a local secondary index is unconstrained.
--   
--   Each local secondary index in the array includes the following:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index. Must
--   be unique only for this table.</li>
--   <li><tt>KeySchema</tt> - Specifies the key schema for the local
--   secondary index. The key schema must begin with the same partition key
--   as the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 100. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   </ul>
createTable_localSecondaryIndexes :: Lens' CreateTable (Maybe [LocalSecondaryIndex])

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
createTable_billingMode :: Lens' CreateTable (Maybe BillingMode)

-- | A list of key-value pairs to label the table. For more information,
--   see <a>Tagging for DynamoDB</a>.
createTable_tags :: Lens' CreateTable (Maybe [Tag])

-- | The settings for DynamoDB Streams on the table. These settings consist
--   of:
--   
--   <ul>
--   <li><tt>StreamEnabled</tt> - Indicates whether DynamoDB Streams is to
--   be enabled (true) or disabled (false).</li>
--   <li><tt>StreamViewType</tt> - When an item in the table is modified,
--   <tt>StreamViewType</tt> determines what information is written to the
--   table's stream. Valid values for <tt>StreamViewType</tt>
--   are:<ul><li><tt>KEYS_ONLY</tt> - Only the key attributes of the
--   modified item are written to the stream.</li><li><tt>NEW_IMAGE</tt> -
--   The entire item, as it appears after it was modified, is written to
--   the stream.</li><li><tt>OLD_IMAGE</tt> - The entire item, as it
--   appeared before it was modified, is written to the
--   stream.</li><li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old
--   item images of the item are written to the stream.</li></ul></li>
--   </ul>
createTable_streamSpecification :: Lens' CreateTable (Maybe StreamSpecification)

-- | An array of attributes that describe the key schema for the table and
--   indexes.
createTable_attributeDefinitions :: Lens' CreateTable [AttributeDefinition]

-- | The name of the table to create.
createTable_tableName :: Lens' CreateTable Text

-- | Specifies the attributes that make up the primary key for a table or
--   an index. The attributes in <tt>KeySchema</tt> must also be defined in
--   the <tt>AttributeDefinitions</tt> array. For more information, see
--   <a>Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   Each <tt>KeySchemaElement</tt> in the array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of this key attribute.</li>
--   <li><tt>KeyType</tt> - The role that the key attribute will
--   assume:<ul><li><tt>HASH</tt> - partition key</li><li><tt>RANGE</tt> -
--   sort key</li></ul></li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from the DynamoDB
--   usage of an internal hash function to evenly distribute data items
--   across partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   For a simple primary key (partition key), you must provide exactly one
--   element with a <tt>KeyType</tt> of <tt>HASH</tt>.
--   
--   For a composite primary key (partition key and sort key), you must
--   provide exactly two elements, in this order: The first element must
--   have a <tt>KeyType</tt> of <tt>HASH</tt>, and the second element must
--   have a <tt>KeyType</tt> of <tt>RANGE</tt>.
--   
--   For more information, see <a>Working with Tables</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
createTable_keySchema :: Lens' CreateTable (NonEmpty KeySchemaElement)

-- | Represents the properties of the table.
createTableResponse_tableDescription :: Lens' CreateTableResponse (Maybe TableDescription)

-- | The response's http status code.
createTableResponse_httpStatus :: Lens' CreateTableResponse Int

-- | The name of the table being described.
describeKinesisStreamingDestination_tableName :: Lens' DescribeKinesisStreamingDestination Text

-- | The list of replica structures for the table being described.
describeKinesisStreamingDestinationResponse_kinesisDataStreamDestinations :: Lens' DescribeKinesisStreamingDestinationResponse (Maybe [KinesisDataStreamDestination])

-- | The name of the table being described.
describeKinesisStreamingDestinationResponse_tableName :: Lens' DescribeKinesisStreamingDestinationResponse (Maybe Text)

-- | The response's http status code.
describeKinesisStreamingDestinationResponse_httpStatus :: Lens' DescribeKinesisStreamingDestinationResponse Int

-- | The response's http status code.
describeEndpointsResponse_httpStatus :: Lens' DescribeEndpointsResponse Int

-- | List of endpoints.
describeEndpointsResponse_endpoints :: Lens' DescribeEndpointsResponse [Endpoint]

-- | The name of the table to be described.
describeTimeToLive_tableName :: Lens' DescribeTimeToLive Text

describeTimeToLiveResponse_timeToLiveDescription :: Lens' DescribeTimeToLiveResponse (Maybe TimeToLiveDescription)

-- | The response's http status code.
describeTimeToLiveResponse_httpStatus :: Lens' DescribeTimeToLiveResponse Int

-- | Name of the table for which the customer wants to check the continuous
--   backups and point in time recovery settings.
describeContinuousBackups_tableName :: Lens' DescribeContinuousBackups Text

-- | Represents the continuous backups and point in time recovery settings
--   on the table.
describeContinuousBackupsResponse_continuousBackupsDescription :: Lens' DescribeContinuousBackupsResponse (Maybe ContinuousBackupsDescription)

-- | The response's http status code.
describeContinuousBackupsResponse_httpStatus :: Lens' DescribeContinuousBackupsResponse Int

-- | The Amazon Resource Name (ARN) associated with the exported table.
listExports_tableArn :: Lens' ListExports (Maybe Text)

-- | An optional string that, if supplied, must be copied from the output
--   of a previous call to <tt>ListExports</tt>. When provided in this
--   manner, the API fetches the next page of results.
listExports_nextToken :: Lens' ListExports (Maybe Text)

-- | Maximum number of results to return per page.
listExports_maxResults :: Lens' ListExports (Maybe Natural)

-- | A list of <tt>ExportSummary</tt> objects.
listExportsResponse_exportSummaries :: Lens' ListExportsResponse (Maybe [ExportSummary])

-- | If this value is returned, there are additional results to be
--   displayed. To retrieve them, call <tt>ListExports</tt> again, with
--   <tt>NextToken</tt> set to this value.
listExportsResponse_nextToken :: Lens' ListExportsResponse (Maybe Text)

-- | The response's http status code.
listExportsResponse_httpStatus :: Lens' ListExportsResponse Int

-- | Identifies the Amazon DynamoDB resource to which tags should be added.
--   This value is an Amazon Resource Name (ARN).
tagResource_resourceArn :: Lens' TagResource Text

-- | The tags to be assigned to the Amazon DynamoDB resource.
tagResource_tags :: Lens' TagResource [Tag]

-- | The name of the global secondary index to describe, if applicable.
describeContributorInsights_indexName :: Lens' DescribeContributorInsights (Maybe Text)

-- | The name of the table to describe.
describeContributorInsights_tableName :: Lens' DescribeContributorInsights Text

-- | List of names of the associated Alpine rules.
describeContributorInsightsResponse_contributorInsightsRuleList :: Lens' DescribeContributorInsightsResponse (Maybe [Text])

-- | Returns information about the last failure that encountered.
--   
--   The most common exceptions for a FAILED status are:
--   
--   <ul>
--   <li>LimitExceededException - Per-account Amazon CloudWatch Contributor
--   Insights rule limit reached. Please disable Contributor Insights for
--   other tables/indexes OR disable Contributor Insights rules before
--   retrying.</li>
--   <li>AccessDeniedException - Amazon CloudWatch Contributor Insights
--   rules cannot be modified due to insufficient permissions.</li>
--   <li>AccessDeniedException - Failed to create service-linked role for
--   Contributor Insights due to insufficient permissions.</li>
--   <li>InternalServerError - Failed to create Amazon CloudWatch
--   Contributor Insights rules. Please retry request.</li>
--   </ul>
describeContributorInsightsResponse_failureException :: Lens' DescribeContributorInsightsResponse (Maybe FailureException)

-- | Current Status contributor insights.
describeContributorInsightsResponse_contributorInsightsStatus :: Lens' DescribeContributorInsightsResponse (Maybe ContributorInsightsStatus)

-- | Timestamp of the last time the status was changed.
describeContributorInsightsResponse_lastUpdateDateTime :: Lens' DescribeContributorInsightsResponse (Maybe UTCTime)

-- | The name of the table being described.
describeContributorInsightsResponse_tableName :: Lens' DescribeContributorInsightsResponse (Maybe Text)

-- | The name of the global secondary index being described.
describeContributorInsightsResponse_indexName :: Lens' DescribeContributorInsightsResponse (Maybe Text)

-- | The response's http status code.
describeContributorInsightsResponse_httpStatus :: Lens' DescribeContributorInsightsResponse Int

-- | The DynamoDB resource that the tags will be removed from. This value
--   is an Amazon Resource Name (ARN).
untagResource_resourceArn :: Lens' UntagResource Text

-- | A list of tag keys. Existing tags of the resource whose keys are
--   members of this list will be removed from the DynamoDB resource.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | The billing mode of the restored table.
restoreTableToPointInTime_billingModeOverride :: Lens' RestoreTableToPointInTime (Maybe BillingMode)

-- | Restore the table to the latest possible time.
--   <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time.
restoreTableToPointInTime_useLatestRestorableTime :: Lens' RestoreTableToPointInTime (Maybe Bool)

-- | List of global secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
restoreTableToPointInTime_globalSecondaryIndexOverride :: Lens' RestoreTableToPointInTime (Maybe [GlobalSecondaryIndex])

-- | Provisioned throughput settings for the restored table.
restoreTableToPointInTime_provisionedThroughputOverride :: Lens' RestoreTableToPointInTime (Maybe ProvisionedThroughput)

-- | The DynamoDB table that will be restored. This value is an Amazon
--   Resource Name (ARN).
restoreTableToPointInTime_sourceTableArn :: Lens' RestoreTableToPointInTime (Maybe Text)

-- | The new server-side encryption settings for the restored table.
restoreTableToPointInTime_sSESpecificationOverride :: Lens' RestoreTableToPointInTime (Maybe SSESpecification)

-- | Name of the source table that is being restored.
restoreTableToPointInTime_sourceTableName :: Lens' RestoreTableToPointInTime (Maybe Text)

-- | List of local secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
restoreTableToPointInTime_localSecondaryIndexOverride :: Lens' RestoreTableToPointInTime (Maybe [LocalSecondaryIndex])

-- | Time in the past to restore the table to.
restoreTableToPointInTime_restoreDateTime :: Lens' RestoreTableToPointInTime (Maybe UTCTime)

-- | The name of the new table to which it must be restored to.
restoreTableToPointInTime_targetTableName :: Lens' RestoreTableToPointInTime Text

-- | Represents the properties of a table.
restoreTableToPointInTimeResponse_tableDescription :: Lens' RestoreTableToPointInTimeResponse (Maybe TableDescription)

-- | The response's http status code.
restoreTableToPointInTimeResponse_httpStatus :: Lens' RestoreTableToPointInTimeResponse Int

-- | The billing mode of the restored table.
restoreTableFromBackup_billingModeOverride :: Lens' RestoreTableFromBackup (Maybe BillingMode)

-- | List of global secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
restoreTableFromBackup_globalSecondaryIndexOverride :: Lens' RestoreTableFromBackup (Maybe [GlobalSecondaryIndex])

-- | Provisioned throughput settings for the restored table.
restoreTableFromBackup_provisionedThroughputOverride :: Lens' RestoreTableFromBackup (Maybe ProvisionedThroughput)

-- | The new server-side encryption settings for the restored table.
restoreTableFromBackup_sSESpecificationOverride :: Lens' RestoreTableFromBackup (Maybe SSESpecification)

-- | List of local secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
restoreTableFromBackup_localSecondaryIndexOverride :: Lens' RestoreTableFromBackup (Maybe [LocalSecondaryIndex])

-- | The name of the new table to which the backup must be restored.
restoreTableFromBackup_targetTableName :: Lens' RestoreTableFromBackup Text

-- | The Amazon Resource Name (ARN) associated with the backup.
restoreTableFromBackup_backupArn :: Lens' RestoreTableFromBackup Text

-- | The description of the table created from an existing backup.
restoreTableFromBackupResponse_tableDescription :: Lens' RestoreTableFromBackupResponse (Maybe TableDescription)

-- | The response's http status code.
restoreTableFromBackupResponse_httpStatus :: Lens' RestoreTableFromBackupResponse Int

-- | The name of the table to be configured.
updateTimeToLive_tableName :: Lens' UpdateTimeToLive Text

-- | Represents the settings used to enable or disable Time to Live for the
--   specified table.
updateTimeToLive_timeToLiveSpecification :: Lens' UpdateTimeToLive TimeToLiveSpecification

-- | Represents the output of an <tt>UpdateTimeToLive</tt> operation.
updateTimeToLiveResponse_timeToLiveSpecification :: Lens' UpdateTimeToLiveResponse (Maybe TimeToLiveSpecification)

-- | The response's http status code.
updateTimeToLiveResponse_httpStatus :: Lens' UpdateTimeToLiveResponse Int

-- | The global table name.
createGlobalTable_globalTableName :: Lens' CreateGlobalTable Text

-- | The Regions where the global table needs to be created.
createGlobalTable_replicationGroup :: Lens' CreateGlobalTable [Replica]

-- | Contains the details of the global table.
createGlobalTableResponse_globalTableDescription :: Lens' CreateGlobalTableResponse (Maybe GlobalTableDescription)

-- | The response's http status code.
createGlobalTableResponse_httpStatus :: Lens' CreateGlobalTableResponse Int

-- | The name of the table.
updateContinuousBackups_tableName :: Lens' UpdateContinuousBackups Text

-- | Represents the settings used to enable point in time recovery.
updateContinuousBackups_pointInTimeRecoverySpecification :: Lens' UpdateContinuousBackups PointInTimeRecoverySpecification

-- | Represents the continuous backups and point in time recovery settings
--   on the table.
updateContinuousBackupsResponse_continuousBackupsDescription :: Lens' UpdateContinuousBackupsResponse (Maybe ContinuousBackupsDescription)

-- | The response's http status code.
updateContinuousBackupsResponse_httpStatus :: Lens' UpdateContinuousBackupsResponse Int

-- | The Amazon Resource Name (ARN) associated with the export.
describeExport_exportArn :: Lens' DescribeExport Text

-- | Represents the properties of the export.
describeExportResponse_exportDescription :: Lens' DescribeExportResponse (Maybe ExportDescription)

-- | The response's http status code.
describeExportResponse_httpStatus :: Lens' DescribeExportResponse Int

-- | The reason DynamoDB archived the table. Currently, the only possible
--   value is:
--   
--   <ul>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The table was
--   archived due to the table's AWS KMS key being inaccessible for more
--   than seven days. An On-Demand backup was created at the archival
--   time.</li>
--   </ul>
archivalSummary_archivalReason :: Lens' ArchivalSummary (Maybe Text)

-- | The date and time when table archival was initiated by DynamoDB, in
--   UNIX epoch time format.
archivalSummary_archivalDateTime :: Lens' ArchivalSummary (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the backup the table was archived
--   to, when applicable in the archival reason. If you wish to restore
--   this backup to the same table name, you will need to delete the
--   original table.
archivalSummary_archivalBackupArn :: Lens' ArchivalSummary (Maybe Text)

-- | A name for the attribute.
attributeDefinition_attributeName :: Lens' AttributeDefinition Text

-- | The data type for the attribute, where:
--   
--   <ul>
--   <li><tt>S</tt> - the attribute is of type String</li>
--   <li><tt>N</tt> - the attribute is of type Number</li>
--   <li><tt>B</tt> - the attribute is of type Binary</li>
--   </ul>
attributeDefinition_attributeType :: Lens' AttributeDefinition ScalarAttributeType

-- | An attribute of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
attributeValue_l :: Lens' AttributeValue (Maybe [AttributeValue])

-- | An attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
attributeValue_ns :: Lens' AttributeValue (Maybe [Text])

-- | An attribute of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
attributeValue_m :: Lens' AttributeValue (Maybe (HashMap Text AttributeValue))

-- | An attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
attributeValue_null :: Lens' AttributeValue (Maybe Bool)

-- | An attribute of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
attributeValue_n :: Lens' AttributeValue (Maybe Text)

-- | An attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
attributeValue_bs :: Lens' AttributeValue (Maybe [ByteString])

-- | An attribute of type Binary. For example:
--   
--   <tt>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</tt>-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
attributeValue_b :: Lens' AttributeValue (Maybe ByteString)

-- | An attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
attributeValue_ss :: Lens' AttributeValue (Maybe [Text])

-- | An attribute of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
attributeValue_s :: Lens' AttributeValue (Maybe Text)

-- | An attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
attributeValue_bool :: Lens' AttributeValue (Maybe Bool)

-- | Represents the data for an attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
attributeValueUpdate_value :: Lens' AttributeValueUpdate (Maybe AttributeValue)

-- | Specifies how to perform the update. Valid values are <tt>PUT</tt>
--   (default), <tt>DELETE</tt>, and <tt>ADD</tt>. The behavior depends on
--   whether the specified primary key already exists in the table.
--   
--   <b>If an item with the specified <i>Key</i> is found in the table:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - Adds the specified attribute to the item. If the
--   attribute already exists, it is replaced by the new value.</li>
--   <li><tt>DELETE</tt> - If no value is specified, the attribute and its
--   value are removed from the item. The data type of the specified value
--   must match the existing value's data type.If a <i>set</i> of values is
--   specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specified <tt>[a,c]</tt>, then the final
--   attribute value would be <tt>[b]</tt>. Specifying an empty set is an
--   error.</li>
--   <li><tt>ADD</tt> - If the attribute does not already exist, then the
--   attribute and its values are added to the item. If the attribute does
--   exist, then the behavior of <tt>ADD</tt> depends on the data type of
--   the attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then the <tt>Value</tt> is
--   mathematically added to the existing attribute. If <tt>Value</tt> is a
--   negative number, then it is subtracted from the existing attribute.If
--   you use <tt>ADD</tt> to increment or decrement a number value for an
--   item that doesn't exist before the update, DynamoDB uses 0 as the
--   initial value.In addition, if you use <tt>ADD</tt> to update an
--   existing item, and intend to increment or decrement an attribute value
--   which does not yet exist, DynamoDB uses <tt>0</tt> as the initial
--   value. For example, suppose that the item you want to update does not
--   yet have an attribute named <i>itemcount</i>, but you decide to
--   <tt>ADD</tt> the number <tt>3</tt> to this attribute anyway, even
--   though it currently does not exist. DynamoDB will create the
--   <i>itemcount</i> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <i>itemcount</i> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set, and if the
--   <tt>Value</tt> is also a set, then the <tt>Value</tt> is added to the
--   existing set. (This is a <i>set</i> operation, not mathematical
--   addition.) For example, if the attribute value was the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value would be <tt>[1,2,3]</tt>. An error
--   occurs if an Add action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings. The same holds true for number sets and binary
--   sets.</li></ul>This action is only valid for an existing attribute
--   whose data type is number or is a set. Do not use <tt>ADD</tt> for any
--   other data types.</li>
--   </ul>
--   
--   <b>If no item with the specified <i>Key</i> is found:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - DynamoDB creates a new item with the specified
--   primary key, and then adds the attribute.</li>
--   <li><tt>DELETE</tt> - Nothing happens; there is no attribute to
--   delete.</li>
--   <li><tt>ADD</tt> - DynamoDB creates an item with the supplied primary
--   key and number (or set of numbers) for the attribute value. The only
--   data types allowed are number and number set; no other data types can
--   be specified.</li>
--   </ul>
attributeValueUpdate_action :: Lens' AttributeValueUpdate (Maybe AttributeAction)

-- | The name of the scaling policy.
autoScalingPolicyDescription_policyName :: Lens' AutoScalingPolicyDescription (Maybe Text)

-- | Represents a target tracking scaling policy configuration.
autoScalingPolicyDescription_targetTrackingScalingPolicyConfiguration :: Lens' AutoScalingPolicyDescription (Maybe AutoScalingTargetTrackingScalingPolicyConfigurationDescription)

-- | The name of the scaling policy.
autoScalingPolicyUpdate_policyName :: Lens' AutoScalingPolicyUpdate (Maybe Text)

-- | Represents a target tracking scaling policy configuration.
autoScalingPolicyUpdate_targetTrackingScalingPolicyConfiguration :: Lens' AutoScalingPolicyUpdate AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

-- | Disabled auto scaling for this global table or global secondary index.
autoScalingSettingsDescription_autoScalingDisabled :: Lens' AutoScalingSettingsDescription (Maybe Bool)

-- | The minimum capacity units that a global table or global secondary
--   index should be scaled down to.
autoScalingSettingsDescription_minimumUnits :: Lens' AutoScalingSettingsDescription (Maybe Natural)

-- | The maximum capacity units that a global table or global secondary
--   index should be scaled up to.
autoScalingSettingsDescription_maximumUnits :: Lens' AutoScalingSettingsDescription (Maybe Natural)

-- | Information about the scaling policies.
autoScalingSettingsDescription_scalingPolicies :: Lens' AutoScalingSettingsDescription (Maybe [AutoScalingPolicyDescription])

-- | Role ARN used for configuring the auto scaling policy.
autoScalingSettingsDescription_autoScalingRoleArn :: Lens' AutoScalingSettingsDescription (Maybe Text)

-- | Disabled auto scaling for this global table or global secondary index.
autoScalingSettingsUpdate_autoScalingDisabled :: Lens' AutoScalingSettingsUpdate (Maybe Bool)

-- | The minimum capacity units that a global table or global secondary
--   index should be scaled down to.
autoScalingSettingsUpdate_minimumUnits :: Lens' AutoScalingSettingsUpdate (Maybe Natural)

-- | The scaling policy to apply for scaling target global table or global
--   secondary index capacity units.
autoScalingSettingsUpdate_scalingPolicyUpdate :: Lens' AutoScalingSettingsUpdate (Maybe AutoScalingPolicyUpdate)

-- | The maximum capacity units that a global table or global secondary
--   index should be scaled up to.
autoScalingSettingsUpdate_maximumUnits :: Lens' AutoScalingSettingsUpdate (Maybe Natural)

-- | Role ARN used for configuring auto scaling policy.
autoScalingSettingsUpdate_autoScalingRoleArn :: Lens' AutoScalingSettingsUpdate (Maybe Text)

-- | The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
autoScalingTargetTrackingScalingPolicyConfigurationDescription_scaleInCooldown :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationDescription (Maybe Int)

-- | Indicates whether scale in by the target tracking policy is disabled.
--   If the value is true, scale in is disabled and the target tracking
--   policy won't remove capacity from the scalable resource. Otherwise,
--   scale in is enabled and the target tracking policy can remove capacity
--   from the scalable resource. The default value is false.
autoScalingTargetTrackingScalingPolicyConfigurationDescription_disableScaleIn :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationDescription (Maybe Bool)

-- | The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
autoScalingTargetTrackingScalingPolicyConfigurationDescription_scaleOutCooldown :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationDescription (Maybe Int)

-- | The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
autoScalingTargetTrackingScalingPolicyConfigurationDescription_targetValue :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationDescription Double

-- | The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
autoScalingTargetTrackingScalingPolicyConfigurationUpdate_scaleInCooldown :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationUpdate (Maybe Int)

-- | Indicates whether scale in by the target tracking policy is disabled.
--   If the value is true, scale in is disabled and the target tracking
--   policy won't remove capacity from the scalable resource. Otherwise,
--   scale in is enabled and the target tracking policy can remove capacity
--   from the scalable resource. The default value is false.
autoScalingTargetTrackingScalingPolicyConfigurationUpdate_disableScaleIn :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationUpdate (Maybe Bool)

-- | The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
autoScalingTargetTrackingScalingPolicyConfigurationUpdate_scaleOutCooldown :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationUpdate (Maybe Int)

-- | The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
autoScalingTargetTrackingScalingPolicyConfigurationUpdate_targetValue :: Lens' AutoScalingTargetTrackingScalingPolicyConfigurationUpdate Double

-- | Contains the details of the backup created for the table.
backupDescription_backupDetails :: Lens' BackupDescription (Maybe BackupDetails)

-- | Contains the details of the table when the backup was created.
backupDescription_sourceTableDetails :: Lens' BackupDescription (Maybe SourceTableDetails)

-- | Contains the details of the features enabled on the table when the
--   backup was created. For example, LSIs, GSIs, streams, TTL.
backupDescription_sourceTableFeatureDetails :: Lens' BackupDescription (Maybe SourceTableFeatureDetails)

-- | Time at which the automatic on-demand backup created by DynamoDB will
--   expire. This <tt>SYSTEM</tt> on-demand backup expires automatically 35
--   days after its creation.
backupDetails_backupExpiryDateTime :: Lens' BackupDetails (Maybe UTCTime)

-- | Size of the backup in bytes.
backupDetails_backupSizeBytes :: Lens' BackupDetails (Maybe Natural)

-- | ARN associated with the backup.
backupDetails_backupArn :: Lens' BackupDetails Text

-- | Name of the requested backup.
backupDetails_backupName :: Lens' BackupDetails Text

-- | Backup can be in one of the following states: CREATING, ACTIVE,
--   DELETED.
backupDetails_backupStatus :: Lens' BackupDetails BackupStatus

-- | BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
backupDetails_backupType :: Lens' BackupDetails BackupType

-- | Time at which the backup was created. This is the request time of the
--   backup.
backupDetails_backupCreationDateTime :: Lens' BackupDetails UTCTime

-- | Time at which the automatic on-demand backup created by DynamoDB will
--   expire. This <tt>SYSTEM</tt> on-demand backup expires automatically 35
--   days after its creation.
backupSummary_backupExpiryDateTime :: Lens' BackupSummary (Maybe UTCTime)

-- | ARN associated with the table.
backupSummary_tableArn :: Lens' BackupSummary (Maybe Text)

-- | Name of the specified backup.
backupSummary_backupName :: Lens' BackupSummary (Maybe Text)

-- | Backup can be in one of the following states: CREATING, ACTIVE,
--   DELETED.
backupSummary_backupStatus :: Lens' BackupSummary (Maybe BackupStatus)

-- | Size of the backup in bytes.
backupSummary_backupSizeBytes :: Lens' BackupSummary (Maybe Natural)

-- | ARN associated with the backup.
backupSummary_backupArn :: Lens' BackupSummary (Maybe Text)

-- | Unique identifier for the table.
backupSummary_tableId :: Lens' BackupSummary (Maybe Text)

-- | Time at which the backup was created.
backupSummary_backupCreationDateTime :: Lens' BackupSummary (Maybe UTCTime)

-- | BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
backupSummary_backupType :: Lens' BackupSummary (Maybe BackupType)

-- | Name of the table.
backupSummary_tableName :: Lens' BackupSummary (Maybe Text)

-- | The error code associated with the failed PartiQL batch statement.
batchStatementError_code :: Lens' BatchStatementError (Maybe BatchStatementErrorCodeEnum)

-- | The error message associated with the PartiQL batch resposne.
batchStatementError_message :: Lens' BatchStatementError (Maybe Text)

-- | The read consistency of the PartiQL batch request.
batchStatementRequest_consistentRead :: Lens' BatchStatementRequest (Maybe Bool)

-- | The parameters associated with a PartiQL statement in the batch
--   request.
batchStatementRequest_parameters :: Lens' BatchStatementRequest (Maybe (NonEmpty AttributeValue))

-- | A valid PartiQL statement.
batchStatementRequest_statement :: Lens' BatchStatementRequest Text

-- | The error associated with a failed PartiQL batch statement.
batchStatementResponse_error :: Lens' BatchStatementResponse (Maybe BatchStatementError)

-- | A DynamoDB item associated with a BatchStatementResponse
batchStatementResponse_item :: Lens' BatchStatementResponse (Maybe (HashMap Text AttributeValue))

-- | The table name associated with a failed PartiQL batch statement.
batchStatementResponse_tableName :: Lens' BatchStatementResponse (Maybe Text)

-- | Represents the time when <tt>PAY_PER_REQUEST</tt> was last set as the
--   read/write capacity mode.
billingModeSummary_lastUpdateToPayPerRequestDateTime :: Lens' BillingModeSummary (Maybe UTCTime)

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
billingModeSummary_billingMode :: Lens' BillingModeSummary (Maybe BillingMode)

-- | The total number of read capacity units consumed on a table or an
--   index.
capacity_readCapacityUnits :: Lens' Capacity (Maybe Double)

-- | The total number of capacity units consumed on a table or an index.
capacity_capacityUnits :: Lens' Capacity (Maybe Double)

-- | The total number of write capacity units consumed on a table or an
--   index.
capacity_writeCapacityUnits :: Lens' Capacity (Maybe Double)

-- | One or more values to evaluate against the supplied attribute. The
--   number of values in the list depends on the
--   <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
condition_attributeValueList :: Lens' Condition (Maybe [AttributeValue])

-- | A comparator for evaluating attributes. For example, equals, greater
--   than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
--   
--   For usage examples of <tt>AttributeValueList</tt> and
--   <tt>ComparisonOperator</tt>, see <a>Legacy Conditional Parameters</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.
condition_comparisonOperator :: Lens' Condition ComparisonOperator

-- | One or more substitution tokens for attribute names in an expression.
conditionCheck_expressionAttributeNames :: Lens' ConditionCheck (Maybe (HashMap Text Text))

-- | One or more values that can be substituted in an expression.
conditionCheck_expressionAttributeValues :: Lens' ConditionCheck (Maybe (HashMap Text AttributeValue))

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>ConditionCheck</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
conditionCheck_returnValuesOnConditionCheckFailure :: Lens' ConditionCheck (Maybe ReturnValuesOnConditionCheckFailure)

-- | The primary key of the item to be checked. Each element consists of an
--   attribute name and a value for that attribute.
conditionCheck_key :: Lens' ConditionCheck (HashMap Text AttributeValue)

-- | Name of the table for the check item request.
conditionCheck_tableName :: Lens' ConditionCheck Text

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
conditionCheck_conditionExpression :: Lens' ConditionCheck Text

-- | The total number of read capacity units consumed by the operation.
consumedCapacity_readCapacityUnits :: Lens' ConsumedCapacity (Maybe Double)

-- | The amount of throughput consumed on each global index affected by the
--   operation.
consumedCapacity_globalSecondaryIndexes :: Lens' ConsumedCapacity (Maybe (HashMap Text Capacity))

-- | The total number of capacity units consumed by the operation.
consumedCapacity_capacityUnits :: Lens' ConsumedCapacity (Maybe Double)

-- | The total number of write capacity units consumed by the operation.
consumedCapacity_writeCapacityUnits :: Lens' ConsumedCapacity (Maybe Double)

-- | The amount of throughput consumed on each local index affected by the
--   operation.
consumedCapacity_localSecondaryIndexes :: Lens' ConsumedCapacity (Maybe (HashMap Text Capacity))

-- | The amount of throughput consumed on the table affected by the
--   operation.
consumedCapacity_table :: Lens' ConsumedCapacity (Maybe Capacity)

-- | The name of the table that was affected by the operation.
consumedCapacity_tableName :: Lens' ConsumedCapacity (Maybe Text)

-- | The description of the point in time recovery settings applied to the
--   table.
continuousBackupsDescription_pointInTimeRecoveryDescription :: Lens' ContinuousBackupsDescription (Maybe PointInTimeRecoveryDescription)

-- | <tt>ContinuousBackupsStatus</tt> can be one of the following states:
--   ENABLED, DISABLED
continuousBackupsDescription_continuousBackupsStatus :: Lens' ContinuousBackupsDescription ContinuousBackupsStatus

-- | Describes the current status for contributor insights for the given
--   table and index, if applicable.
contributorInsightsSummary_contributorInsightsStatus :: Lens' ContributorInsightsSummary (Maybe ContributorInsightsStatus)

-- | Name of the table associated with the summary.
contributorInsightsSummary_tableName :: Lens' ContributorInsightsSummary (Maybe Text)

-- | Name of the index associated with the summary, if any.
contributorInsightsSummary_indexName :: Lens' ContributorInsightsSummary (Maybe Text)

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
createGlobalSecondaryIndexAction_provisionedThroughput :: Lens' CreateGlobalSecondaryIndexAction (Maybe ProvisionedThroughput)

-- | The name of the global secondary index to be created.
createGlobalSecondaryIndexAction_indexName :: Lens' CreateGlobalSecondaryIndexAction Text

-- | The key schema for the global secondary index.
createGlobalSecondaryIndexAction_keySchema :: Lens' CreateGlobalSecondaryIndexAction (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   an index. These are in addition to the primary key attributes and
--   index key attributes, which are automatically projected.
createGlobalSecondaryIndexAction_projection :: Lens' CreateGlobalSecondaryIndexAction Projection

-- | The Region of the replica to be added.
createReplicaAction_regionName :: Lens' CreateReplicaAction Text

-- | The AWS KMS customer master key (CMK) that should be used for AWS KMS
--   encryption in the new replica. To specify a CMK, use its key ID,
--   Amazon Resource Name (ARN), alias name, or alias ARN. Note that you
--   should only provide this parameter if the key is different from the
--   default DynamoDB KMS master key alias/aws/dynamodb.
createReplicationGroupMemberAction_kmsMasterKeyId :: Lens' CreateReplicationGroupMemberAction (Maybe Text)

-- | Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
createReplicationGroupMemberAction_provisionedThroughputOverride :: Lens' CreateReplicationGroupMemberAction (Maybe ProvisionedThroughputOverride)

-- | Replica-specific global secondary index settings.
createReplicationGroupMemberAction_globalSecondaryIndexes :: Lens' CreateReplicationGroupMemberAction (Maybe (NonEmpty ReplicaGlobalSecondaryIndex))

-- | The Region where the new replica will be created.
createReplicationGroupMemberAction_regionName :: Lens' CreateReplicationGroupMemberAction Text

-- | One or more substitution tokens for attribute names in an expression.
delete_expressionAttributeNames :: Lens' Delete (Maybe (HashMap Text Text))

-- | One or more values that can be substituted in an expression.
delete_expressionAttributeValues :: Lens' Delete (Maybe (HashMap Text AttributeValue))

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Delete</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
delete_returnValuesOnConditionCheckFailure :: Lens' Delete (Maybe ReturnValuesOnConditionCheckFailure)

-- | A condition that must be satisfied in order for a conditional delete
--   to succeed.
delete_conditionExpression :: Lens' Delete (Maybe Text)

-- | The primary key of the item to be deleted. Each element consists of an
--   attribute name and a value for that attribute.
delete_key :: Lens' Delete (HashMap Text AttributeValue)

-- | Name of the table in which the item to be deleted resides.
delete_tableName :: Lens' Delete Text

-- | The name of the global secondary index to be deleted.
deleteGlobalSecondaryIndexAction_indexName :: Lens' DeleteGlobalSecondaryIndexAction Text

-- | The Region of the replica to be removed.
deleteReplicaAction_regionName :: Lens' DeleteReplicaAction Text

-- | The Region where the replica exists.
deleteReplicationGroupMemberAction_regionName :: Lens' DeleteReplicationGroupMemberAction Text

-- | A map of attribute name to attribute values, representing the primary
--   key of the item to delete. All of the table's primary key attributes
--   must be specified, and their data types must match those of the
--   table's key schema.
deleteRequest_key :: Lens' DeleteRequest (HashMap Text AttributeValue)

-- | IP address of the endpoint.
endpoint_address :: Lens' Endpoint Text

-- | Endpoint cache time to live (TTL) value.
endpoint_cachePeriodInMinutes :: Lens' Endpoint Integer

-- | One or more values to evaluate against the supplied attribute. The
--   number of values in the list depends on the
--   <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   For information on specifying data types in JSON, see <a>JSON Data
--   Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.
expectedAttributeValue_attributeValueList :: Lens' ExpectedAttributeValue (Maybe [AttributeValue])

-- | Causes DynamoDB to evaluate the value before attempting a conditional
--   operation:
--   
--   <ul>
--   <li>If <tt>Exists</tt> is <tt>true</tt>, DynamoDB will check to see if
--   that attribute value already exists in the table. If it is found, then
--   the operation succeeds. If it is not found, the operation fails with a
--   <tt>ConditionCheckFailedException</tt>.</li>
--   <li>If <tt>Exists</tt> is <tt>false</tt>, DynamoDB assumes that the
--   attribute value does not exist in the table. If in fact the value does
--   not exist, then the assumption is valid and the operation succeeds. If
--   the value is found, despite the assumption that it does not exist, the
--   operation fails with a <tt>ConditionCheckFailedException</tt>.</li>
--   </ul>
--   
--   The default setting for <tt>Exists</tt> is <tt>true</tt>. If you
--   supply a <tt>Value</tt> all by itself, DynamoDB assumes the attribute
--   exists: You don't have to set <tt>Exists</tt> to <tt>true</tt>,
--   because it is implied.
--   
--   DynamoDB returns a <tt>ValidationException</tt> if:
--   
--   <ul>
--   <li><tt>Exists</tt> is <tt>true</tt> but there is no <tt>Value</tt> to
--   check. (You expect a value to exist, but don't specify what that value
--   is.)</li>
--   <li><tt>Exists</tt> is <tt>false</tt> but you also provide a
--   <tt>Value</tt>. (You cannot expect an attribute to have a value, while
--   also expecting it not to exist.)</li>
--   </ul>
expectedAttributeValue_exists :: Lens' ExpectedAttributeValue (Maybe Bool)

-- | Represents the data for the expected attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
expectedAttributeValue_value :: Lens' ExpectedAttributeValue (Maybe AttributeValue)

-- | A comparator for evaluating attributes in the
--   <tt>AttributeValueList</tt>. For example, equals, greater than, less
--   than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
expectedAttributeValue_comparisonOperator :: Lens' ExpectedAttributeValue (Maybe ComparisonOperator)

-- | The ID of the AWS account that owns the bucket containing the export.
exportDescription_s3BucketOwner :: Lens' ExportDescription (Maybe Text)

-- | The format of the exported data. Valid values for
--   <tt>ExportFormat</tt> are <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
exportDescription_exportFormat :: Lens' ExportDescription (Maybe ExportFormat)

-- | The ID of the AWS KMS managed key used to encrypt the S3 bucket where
--   export data is stored (if applicable).
exportDescription_s3SseKmsKeyId :: Lens' ExportDescription (Maybe Text)

-- | The client token that was provided for the export task. A client token
--   makes calls to <tt>ExportTableToPointInTimeInput</tt> idempotent,
--   meaning that multiple identical calls have the same effect as one
--   single call.
exportDescription_clientToken :: Lens' ExportDescription (Maybe Text)

-- | The time at which the export task began.
exportDescription_startTime :: Lens' ExportDescription (Maybe UTCTime)

-- | Status code for the result of the failed export.
exportDescription_failureCode :: Lens' ExportDescription (Maybe Text)

-- | Export can be in one of the following states: IN_PROGRESS, COMPLETED,
--   or FAILED.
exportDescription_exportStatus :: Lens' ExportDescription (Maybe ExportStatus)

-- | Export failure reason description.
exportDescription_failureMessage :: Lens' ExportDescription (Maybe Text)

-- | The Amazon Resource Name (ARN) of the table that was exported.
exportDescription_tableArn :: Lens' ExportDescription (Maybe Text)

-- | The billable size of the table export.
exportDescription_billedSizeBytes :: Lens' ExportDescription (Maybe Natural)

-- | The Amazon Resource Name (ARN) of the table export.
exportDescription_exportArn :: Lens' ExportDescription (Maybe Text)

-- | Point in time from which table data was exported.
exportDescription_exportTime :: Lens' ExportDescription (Maybe UTCTime)

-- | Type of encryption used on the bucket where export data is stored.
--   Valid values for <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
exportDescription_s3SseAlgorithm :: Lens' ExportDescription (Maybe S3SseAlgorithm)

-- | The time at which the export task completed.
exportDescription_endTime :: Lens' ExportDescription (Maybe UTCTime)

-- | The Amazon S3 bucket prefix used as the file name and path of the
--   exported snapshot.
exportDescription_s3Prefix :: Lens' ExportDescription (Maybe Text)

-- | The name of the manifest file for the export task.
exportDescription_exportManifest :: Lens' ExportDescription (Maybe Text)

-- | Unique ID of the table that was exported.
exportDescription_tableId :: Lens' ExportDescription (Maybe Text)

-- | The number of items exported.
exportDescription_itemCount :: Lens' ExportDescription (Maybe Natural)

-- | The name of the Amazon S3 bucket containing the export.
exportDescription_s3Bucket :: Lens' ExportDescription (Maybe Text)

-- | Export can be in one of the following states: IN_PROGRESS, COMPLETED,
--   or FAILED.
exportSummary_exportStatus :: Lens' ExportSummary (Maybe ExportStatus)

-- | The Amazon Resource Name (ARN) of the export.
exportSummary_exportArn :: Lens' ExportSummary (Maybe Text)

-- | Exception name.
failureException_exceptionName :: Lens' FailureException (Maybe Text)

-- | Description of the failure.
failureException_exceptionDescription :: Lens' FailureException (Maybe Text)

-- | A string that identifies one or more attributes of the specified item
--   to retrieve from the table. The attributes in the expression must be
--   separated by commas. If no attribute names are specified, then all
--   attributes of the specified item are returned. If any of the requested
--   attributes are not found, they do not appear in the result.
get_projectionExpression :: Lens' Get (Maybe Text)

-- | One or more substitution tokens for attribute names in the
--   ProjectionExpression parameter.
get_expressionAttributeNames :: Lens' Get (Maybe (HashMap Text Text))

-- | A map of attribute names to <tt>AttributeValue</tt> objects that
--   specifies the primary key of the item to retrieve.
get_key :: Lens' Get (HashMap Text AttributeValue)

-- | The name of the table from which to retrieve the specified item.
get_tableName :: Lens' Get Text

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
globalSecondaryIndex_provisionedThroughput :: Lens' GlobalSecondaryIndex (Maybe ProvisionedThroughput)

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
globalSecondaryIndex_indexName :: Lens' GlobalSecondaryIndex Text

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
globalSecondaryIndex_keySchema :: Lens' GlobalSecondaryIndex (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
globalSecondaryIndex_projection :: Lens' GlobalSecondaryIndex Projection

-- | Undocumented member.
globalSecondaryIndexAutoScalingUpdate_provisionedWriteCapacityAutoScalingUpdate :: Lens' GlobalSecondaryIndexAutoScalingUpdate (Maybe AutoScalingSettingsUpdate)

-- | The name of the global secondary index.
globalSecondaryIndexAutoScalingUpdate_indexName :: Lens' GlobalSecondaryIndexAutoScalingUpdate (Maybe Text)

-- | Indicates whether the index is currently backfilling.
--   <i>Backfilling</i> is the process of reading items from the table and
--   determining whether they can be added to the index. (Not all items
--   will qualify: For example, a partition key cannot have any duplicate
--   values.) If an item can be added to the index, DynamoDB will do so.
--   After all items have been processed, the backfilling operation is
--   complete and <tt>Backfilling</tt> is false.
--   
--   You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false.
--   
--   For indexes that were created during a <tt>CreateTable</tt> operation,
--   the <tt>Backfilling</tt> attribute does not appear in the
--   <tt>DescribeTable</tt> output.
globalSecondaryIndexDescription_backfilling :: Lens' GlobalSecondaryIndexDescription (Maybe Bool)

-- | The total size of the specified index, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
globalSecondaryIndexDescription_indexSizeBytes :: Lens' GlobalSecondaryIndexDescription (Maybe Integer)

-- | The current state of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
globalSecondaryIndexDescription_indexStatus :: Lens' GlobalSecondaryIndexDescription (Maybe IndexStatus)

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
globalSecondaryIndexDescription_provisionedThroughput :: Lens' GlobalSecondaryIndexDescription (Maybe ProvisionedThroughputDescription)

-- | The Amazon Resource Name (ARN) that uniquely identifies the index.
globalSecondaryIndexDescription_indexArn :: Lens' GlobalSecondaryIndexDescription (Maybe Text)

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
globalSecondaryIndexDescription_keySchema :: Lens' GlobalSecondaryIndexDescription (Maybe (NonEmpty KeySchemaElement))

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
globalSecondaryIndexDescription_projection :: Lens' GlobalSecondaryIndexDescription (Maybe Projection)

-- | The number of items in the specified index. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
globalSecondaryIndexDescription_itemCount :: Lens' GlobalSecondaryIndexDescription (Maybe Integer)

-- | The name of the global secondary index.
globalSecondaryIndexDescription_indexName :: Lens' GlobalSecondaryIndexDescription (Maybe Text)

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
globalSecondaryIndexInfo_provisionedThroughput :: Lens' GlobalSecondaryIndexInfo (Maybe ProvisionedThroughput)

-- | The complete key schema for a global secondary index, which consists
--   of one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
globalSecondaryIndexInfo_keySchema :: Lens' GlobalSecondaryIndexInfo (Maybe (NonEmpty KeySchemaElement))

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
globalSecondaryIndexInfo_projection :: Lens' GlobalSecondaryIndexInfo (Maybe Projection)

-- | The name of the global secondary index.
globalSecondaryIndexInfo_indexName :: Lens' GlobalSecondaryIndexInfo (Maybe Text)

-- | The parameters required for creating a global secondary index on an
--   existing table:
--   
--   <ul>
--   <li><pre>IndexName</pre></li>
--   <li><pre>KeySchema</pre></li>
--   <li><pre>AttributeDefinitions</pre></li>
--   <li><pre>Projection</pre></li>
--   <li><pre>ProvisionedThroughput</pre></li>
--   </ul>
globalSecondaryIndexUpdate_create :: Lens' GlobalSecondaryIndexUpdate (Maybe CreateGlobalSecondaryIndexAction)

-- | The name of an existing global secondary index to be removed.
globalSecondaryIndexUpdate_delete :: Lens' GlobalSecondaryIndexUpdate (Maybe DeleteGlobalSecondaryIndexAction)

-- | The name of an existing global secondary index, along with new
--   provisioned throughput settings to be applied to that index.
globalSecondaryIndexUpdate_update :: Lens' GlobalSecondaryIndexUpdate (Maybe UpdateGlobalSecondaryIndexAction)

-- | The global table name.
globalTable_globalTableName :: Lens' GlobalTable (Maybe Text)

-- | The Regions where the global table has replicas.
globalTable_replicationGroup :: Lens' GlobalTable (Maybe [Replica])

-- | The current state of the global table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global table is being created.</li>
--   <li><tt>UPDATING</tt> - The global table is being updated.</li>
--   <li><tt>DELETING</tt> - The global table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The global table is ready for use.</li>
--   </ul>
globalTableDescription_globalTableStatus :: Lens' GlobalTableDescription (Maybe GlobalTableStatus)

-- | The global table name.
globalTableDescription_globalTableName :: Lens' GlobalTableDescription (Maybe Text)

-- | The unique identifier of the global table.
globalTableDescription_globalTableArn :: Lens' GlobalTableDescription (Maybe Text)

-- | The creation time of the global table.
globalTableDescription_creationDateTime :: Lens' GlobalTableDescription (Maybe UTCTime)

-- | The Regions where the global table has replicas.
globalTableDescription_replicationGroup :: Lens' GlobalTableDescription (Maybe [ReplicaDescription])

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
globalTableGlobalSecondaryIndexSettingsUpdate_provisionedWriteCapacityUnits :: Lens' GlobalTableGlobalSecondaryIndexSettingsUpdate (Maybe Natural)

-- | Auto scaling settings for managing a global secondary index's write
--   capacity units.
globalTableGlobalSecondaryIndexSettingsUpdate_provisionedWriteCapacityAutoScalingSettingsUpdate :: Lens' GlobalTableGlobalSecondaryIndexSettingsUpdate (Maybe AutoScalingSettingsUpdate)

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
globalTableGlobalSecondaryIndexSettingsUpdate_indexName :: Lens' GlobalTableGlobalSecondaryIndexSettingsUpdate Text

-- | The partition key value of the item collection. This value is the same
--   as the partition key value of the item.
itemCollectionMetrics_itemCollectionKey :: Lens' ItemCollectionMetrics (Maybe (HashMap Text AttributeValue))

-- | An estimate of item collection size, in gigabytes. This value is a
--   two-element array containing a lower bound and an upper bound for the
--   estimate. The estimate includes the size of all the items in the
--   table, plus the size of all attributes projected into all of the local
--   secondary indexes on that table. Use this estimate to measure whether
--   a local secondary index is approaching its size limit.
--   
--   The estimate is subject to change over time; therefore, do not rely on
--   the precision or accuracy of the estimate.
itemCollectionMetrics_sizeEstimateRangeGB :: Lens' ItemCollectionMetrics (Maybe [Double])

-- | Map of attribute data consisting of the data type and attribute value.
itemResponse_item :: Lens' ItemResponse (Maybe (HashMap Text AttributeValue))

-- | The name of a key attribute.
keySchemaElement_attributeName :: Lens' KeySchemaElement Text

-- | The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
keySchemaElement_keyType :: Lens' KeySchemaElement KeyType

-- | A string that identifies one or more attributes to retrieve from the
--   table. These attributes can include scalars, sets, or elements of a
--   JSON document. The attributes in the <tt>ProjectionExpression</tt>
--   must be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
keysAndAttributes_projectionExpression :: Lens' KeysAndAttributes (Maybe Text)

-- | This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>Legacy Conditional Parameters</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
keysAndAttributes_attributesToGet :: Lens' KeysAndAttributes (Maybe (NonEmpty Text))

-- | One or more substitution tokens for attribute names in an expression.
--   The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Accessing
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
keysAndAttributes_expressionAttributeNames :: Lens' KeysAndAttributes (Maybe (HashMap Text Text))

-- | The consistency of a read operation. If set to <tt>true</tt>, then a
--   strongly consistent read is used; otherwise, an eventually consistent
--   read is used.
keysAndAttributes_consistentRead :: Lens' KeysAndAttributes (Maybe Bool)

-- | The primary key attribute values that define the items and the
--   attributes associated with the items.
keysAndAttributes_keys :: Lens' KeysAndAttributes (NonEmpty (HashMap Text AttributeValue))

-- | The current status of replication.
kinesisDataStreamDestination_destinationStatus :: Lens' KinesisDataStreamDestination (Maybe DestinationStatus)

-- | The ARN for a specific Kinesis data stream.
kinesisDataStreamDestination_streamArn :: Lens' KinesisDataStreamDestination (Maybe Text)

-- | The human-readable string that corresponds to the replica status.
kinesisDataStreamDestination_destinationStatusDescription :: Lens' KinesisDataStreamDestination (Maybe Text)

-- | The name of the DynamoDB table.
kinesisStreamingDestinationInput_tableName :: Lens' KinesisStreamingDestinationInput Text

-- | The ARN for a Kinesis data stream.
kinesisStreamingDestinationInput_streamArn :: Lens' KinesisStreamingDestinationInput Text

-- | The current status of the replication.
kinesisStreamingDestinationOutput_destinationStatus :: Lens' KinesisStreamingDestinationOutput (Maybe DestinationStatus)

-- | The ARN for the specific Kinesis data stream.
kinesisStreamingDestinationOutput_streamArn :: Lens' KinesisStreamingDestinationOutput (Maybe Text)

-- | The name of the table being modified.
kinesisStreamingDestinationOutput_tableName :: Lens' KinesisStreamingDestinationOutput (Maybe Text)

-- | The name of the local secondary index. The name must be unique among
--   all other indexes on this table.
localSecondaryIndex_indexName :: Lens' LocalSecondaryIndex Text

-- | The complete key schema for the local secondary index, consisting of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
localSecondaryIndex_keySchema :: Lens' LocalSecondaryIndex (NonEmpty KeySchemaElement)

-- | Represents attributes that are copied (projected) from the table into
--   the local secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
localSecondaryIndex_projection :: Lens' LocalSecondaryIndex Projection

-- | The total size of the specified index, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
localSecondaryIndexDescription_indexSizeBytes :: Lens' LocalSecondaryIndexDescription (Maybe Integer)

-- | The Amazon Resource Name (ARN) that uniquely identifies the index.
localSecondaryIndexDescription_indexArn :: Lens' LocalSecondaryIndexDescription (Maybe Text)

-- | The complete key schema for the local secondary index, consisting of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
localSecondaryIndexDescription_keySchema :: Lens' LocalSecondaryIndexDescription (Maybe (NonEmpty KeySchemaElement))

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
localSecondaryIndexDescription_projection :: Lens' LocalSecondaryIndexDescription (Maybe Projection)

-- | The number of items in the specified index. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
localSecondaryIndexDescription_itemCount :: Lens' LocalSecondaryIndexDescription (Maybe Integer)

-- | Represents the name of the local secondary index.
localSecondaryIndexDescription_indexName :: Lens' LocalSecondaryIndexDescription (Maybe Text)

-- | The complete key schema for a local secondary index, which consists of
--   one or more pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
localSecondaryIndexInfo_keySchema :: Lens' LocalSecondaryIndexInfo (Maybe (NonEmpty KeySchemaElement))

-- | Represents attributes that are copied (projected) from the table into
--   the global secondary index. These are in addition to the primary key
--   attributes and index key attributes, which are automatically
--   projected.
localSecondaryIndexInfo_projection :: Lens' LocalSecondaryIndexInfo (Maybe Projection)

-- | Represents the name of the local secondary index.
localSecondaryIndexInfo_indexName :: Lens' LocalSecondaryIndexInfo (Maybe Text)

-- | The parameter values.
parameterizedStatement_parameters :: Lens' ParameterizedStatement (Maybe (NonEmpty AttributeValue))

-- | A PartiQL statment that uses parameters.
parameterizedStatement_statement :: Lens' ParameterizedStatement Text

-- | The current state of point in time recovery:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Point in time recovery is being enabled.</li>
--   <li><tt>ENABLED</tt> - Point in time recovery is enabled.</li>
--   <li><tt>DISABLED</tt> - Point in time recovery is disabled.</li>
--   </ul>
pointInTimeRecoveryDescription_pointInTimeRecoveryStatus :: Lens' PointInTimeRecoveryDescription (Maybe PointInTimeRecoveryStatus)

-- | Specifies the earliest point in time you can restore your table to.
--   You can restore your table to any point in time during the last 35
--   days.
pointInTimeRecoveryDescription_earliestRestorableDateTime :: Lens' PointInTimeRecoveryDescription (Maybe UTCTime)

-- | <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time.
pointInTimeRecoveryDescription_latestRestorableDateTime :: Lens' PointInTimeRecoveryDescription (Maybe UTCTime)

-- | Indicates whether point in time recovery is enabled (true) or disabled
--   (false) on the table.
pointInTimeRecoverySpecification_pointInTimeRecoveryEnabled :: Lens' PointInTimeRecoverySpecification Bool

-- | The set of attributes that are projected into the index:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.</li>
--   <li><tt>INCLUDE</tt> - In addition to the attributes described in
--   <tt>KEYS_ONLY</tt>, the secondary index will include other non-key
--   attributes that you specify.</li>
--   <li><tt>ALL</tt> - All of the table attributes are projected into the
--   index.</li>
--   </ul>
projection_projectionType :: Lens' Projection (Maybe ProjectionType)

-- | Represents the non-key attribute names which will be projected into
--   the index.
--   
--   For local secondary indexes, the total count of
--   <tt>NonKeyAttributes</tt> summed across all of the local secondary
--   indexes, must not exceed 20. If you project the same attribute into
--   two different indexes, this counts as two distinct attributes when
--   determining the total.
projection_nonKeyAttributes :: Lens' Projection (Maybe (NonEmpty Text))

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
provisionedThroughput_readCapacityUnits :: Lens' ProvisionedThroughput Natural

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
provisionedThroughput_writeCapacityUnits :: Lens' ProvisionedThroughput Natural

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. Eventually
--   consistent reads require less effort than strongly consistent reads,
--   so a setting of 50 <tt>ReadCapacityUnits</tt> per second provides 100
--   eventually consistent <tt>ReadCapacityUnits</tt> per second.
provisionedThroughputDescription_readCapacityUnits :: Lens' ProvisionedThroughputDescription (Maybe Natural)

-- | The date and time of the last provisioned throughput decrease for this
--   table.
provisionedThroughputDescription_lastDecreaseDateTime :: Lens' ProvisionedThroughputDescription (Maybe UTCTime)

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
provisionedThroughputDescription_writeCapacityUnits :: Lens' ProvisionedThroughputDescription (Maybe Natural)

-- | The number of provisioned throughput decreases for this table during
--   this UTC calendar day. For current maximums on provisioned throughput
--   decreases, see <a>Service, Account, and Table Quotas</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
provisionedThroughputDescription_numberOfDecreasesToday :: Lens' ProvisionedThroughputDescription (Maybe Natural)

-- | The date and time of the last provisioned throughput increase for this
--   table.
provisionedThroughputDescription_lastIncreaseDateTime :: Lens' ProvisionedThroughputDescription (Maybe UTCTime)

-- | Replica-specific read capacity units. If not specified, uses the
--   source table's read capacity settings.
provisionedThroughputOverride_readCapacityUnits :: Lens' ProvisionedThroughputOverride (Maybe Natural)

-- | One or more substitution tokens for attribute names in an expression.
put_expressionAttributeNames :: Lens' Put (Maybe (HashMap Text Text))

-- | One or more values that can be substituted in an expression.
put_expressionAttributeValues :: Lens' Put (Maybe (HashMap Text AttributeValue))

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Put</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
put_returnValuesOnConditionCheckFailure :: Lens' Put (Maybe ReturnValuesOnConditionCheckFailure)

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
put_conditionExpression :: Lens' Put (Maybe Text)

-- | A map of attribute name to attribute values, representing the primary
--   key of the item to be written by <tt>PutItem</tt>. All of the table's
--   primary key attributes must be specified, and their data types must
--   match those of the table's key schema. If any attributes are present
--   in the item that are part of an index key schema for the table, their
--   types must match the index key schema.
put_item :: Lens' Put (HashMap Text AttributeValue)

-- | Name of the table in which to write the item.
put_tableName :: Lens' Put Text

-- | A map of attribute name to attribute values, representing the primary
--   key of an item to be processed by <tt>PutItem</tt>. All of the table's
--   primary key attributes must be specified, and their data types must
--   match those of the table's key schema. If any attributes are present
--   in the item that are part of an index key schema for the table, their
--   types must match the index key schema.
putRequest_item :: Lens' PutRequest (HashMap Text AttributeValue)

-- | The Region where the replica needs to be created.
replica_regionName :: Lens' Replica (Maybe Text)

-- | The current state of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   </ul>
replicaAutoScalingDescription_replicaStatus :: Lens' ReplicaAutoScalingDescription (Maybe ReplicaStatus)

-- | The Region where the replica exists.
replicaAutoScalingDescription_regionName :: Lens' ReplicaAutoScalingDescription (Maybe Text)

-- | Replica-specific global secondary index auto scaling settings.
replicaAutoScalingDescription_globalSecondaryIndexes :: Lens' ReplicaAutoScalingDescription (Maybe [ReplicaGlobalSecondaryIndexAutoScalingDescription])

-- | Undocumented member.
replicaAutoScalingDescription_replicaProvisionedWriteCapacityAutoScalingSettings :: Lens' ReplicaAutoScalingDescription (Maybe AutoScalingSettingsDescription)

-- | Undocumented member.
replicaAutoScalingDescription_replicaProvisionedReadCapacityAutoScalingSettings :: Lens' ReplicaAutoScalingDescription (Maybe AutoScalingSettingsDescription)

-- | Undocumented member.
replicaAutoScalingUpdate_replicaProvisionedReadCapacityAutoScalingUpdate :: Lens' ReplicaAutoScalingUpdate (Maybe AutoScalingSettingsUpdate)

-- | Represents the auto scaling settings of global secondary indexes that
--   will be modified.
replicaAutoScalingUpdate_replicaGlobalSecondaryIndexUpdates :: Lens' ReplicaAutoScalingUpdate (Maybe [ReplicaGlobalSecondaryIndexAutoScalingUpdate])

-- | The Region where the replica exists.
replicaAutoScalingUpdate_regionName :: Lens' ReplicaAutoScalingUpdate Text

-- | The current state of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   <li><tt>REGION_DISABLED</tt> - The replica is inaccessible because the
--   AWS Region has been disabled.If the AWS Region remains inaccessible
--   for more than 20 hours, DynamoDB will remove this replica from the
--   replication group. The replica will not be deleted and replication
--   will stop from and to this region.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS </tt> - The AWS KMS key
--   used to encrypt the table is inaccessible.If the AWS KMS key remains
--   inaccessible for more than 20 hours, DynamoDB will remove this replica
--   from the replication group. The replica will not be deleted and
--   replication will stop from and to this region.</li>
--   </ul>
replicaDescription_replicaStatus :: Lens' ReplicaDescription (Maybe ReplicaStatus)

-- | The name of the Region.
replicaDescription_regionName :: Lens' ReplicaDescription (Maybe Text)

-- | Specifies the progress of a Create, Update, or Delete action on the
--   replica as a percentage.
replicaDescription_replicaStatusPercentProgress :: Lens' ReplicaDescription (Maybe Text)

-- | Detailed information about the replica status.
replicaDescription_replicaStatusDescription :: Lens' ReplicaDescription (Maybe Text)

-- | The time at which the replica was first detected as inaccessible. To
--   determine cause of inaccessibility check the <tt>ReplicaStatus</tt>
--   property.
replicaDescription_replicaInaccessibleDateTime :: Lens' ReplicaDescription (Maybe UTCTime)

-- | The AWS KMS customer master key (CMK) of the replica that will be used
--   for AWS KMS encryption.
replicaDescription_kmsMasterKeyId :: Lens' ReplicaDescription (Maybe Text)

-- | Replica-specific provisioned throughput. If not described, uses the
--   source table's provisioned throughput settings.
replicaDescription_provisionedThroughputOverride :: Lens' ReplicaDescription (Maybe ProvisionedThroughputOverride)

-- | Replica-specific global secondary index settings.
replicaDescription_globalSecondaryIndexes :: Lens' ReplicaDescription (Maybe [ReplicaGlobalSecondaryIndexDescription])

-- | Replica table GSI-specific provisioned throughput. If not specified,
--   uses the source table GSI's read capacity settings.
replicaGlobalSecondaryIndex_provisionedThroughputOverride :: Lens' ReplicaGlobalSecondaryIndex (Maybe ProvisionedThroughputOverride)

-- | The name of the global secondary index.
replicaGlobalSecondaryIndex_indexName :: Lens' ReplicaGlobalSecondaryIndex Text

-- | The current state of the replica global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
replicaGlobalSecondaryIndexAutoScalingDescription_indexStatus :: Lens' ReplicaGlobalSecondaryIndexAutoScalingDescription (Maybe IndexStatus)

-- | Undocumented member.
replicaGlobalSecondaryIndexAutoScalingDescription_provisionedWriteCapacityAutoScalingSettings :: Lens' ReplicaGlobalSecondaryIndexAutoScalingDescription (Maybe AutoScalingSettingsDescription)

-- | Undocumented member.
replicaGlobalSecondaryIndexAutoScalingDescription_provisionedReadCapacityAutoScalingSettings :: Lens' ReplicaGlobalSecondaryIndexAutoScalingDescription (Maybe AutoScalingSettingsDescription)

-- | The name of the global secondary index.
replicaGlobalSecondaryIndexAutoScalingDescription_indexName :: Lens' ReplicaGlobalSecondaryIndexAutoScalingDescription (Maybe Text)

-- | Undocumented member.
replicaGlobalSecondaryIndexAutoScalingUpdate_provisionedReadCapacityAutoScalingUpdate :: Lens' ReplicaGlobalSecondaryIndexAutoScalingUpdate (Maybe AutoScalingSettingsUpdate)

-- | The name of the global secondary index.
replicaGlobalSecondaryIndexAutoScalingUpdate_indexName :: Lens' ReplicaGlobalSecondaryIndexAutoScalingUpdate (Maybe Text)

-- | If not described, uses the source table GSI's read capacity settings.
replicaGlobalSecondaryIndexDescription_provisionedThroughputOverride :: Lens' ReplicaGlobalSecondaryIndexDescription (Maybe ProvisionedThroughputOverride)

-- | The name of the global secondary index.
replicaGlobalSecondaryIndexDescription_indexName :: Lens' ReplicaGlobalSecondaryIndexDescription (Maybe Text)

-- | The current status of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global secondary index is being
--   created.</li>
--   <li><tt>UPDATING</tt> - The global secondary index is being
--   updated.</li>
--   <li><tt>DELETING</tt> - The global secondary index is being
--   deleted.</li>
--   <li><tt>ACTIVE</tt> - The global secondary index is ready for
--   use.</li>
--   </ul>
replicaGlobalSecondaryIndexSettingsDescription_indexStatus :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe IndexStatus)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
replicaGlobalSecondaryIndexSettingsDescription_provisionedReadCapacityUnits :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe Natural)

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
replicaGlobalSecondaryIndexSettingsDescription_provisionedWriteCapacityUnits :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe Natural)

-- | Auto scaling settings for a global secondary index replica's write
--   capacity units.
replicaGlobalSecondaryIndexSettingsDescription_provisionedWriteCapacityAutoScalingSettings :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe AutoScalingSettingsDescription)

-- | Auto scaling settings for a global secondary index replica's read
--   capacity units.
replicaGlobalSecondaryIndexSettingsDescription_provisionedReadCapacityAutoScalingSettings :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription (Maybe AutoScalingSettingsDescription)

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
replicaGlobalSecondaryIndexSettingsDescription_indexName :: Lens' ReplicaGlobalSecondaryIndexSettingsDescription Text

-- | Auto scaling settings for managing a global secondary index replica's
--   read capacity units.
replicaGlobalSecondaryIndexSettingsUpdate_provisionedReadCapacityAutoScalingSettingsUpdate :: Lens' ReplicaGlobalSecondaryIndexSettingsUpdate (Maybe AutoScalingSettingsUpdate)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
replicaGlobalSecondaryIndexSettingsUpdate_provisionedReadCapacityUnits :: Lens' ReplicaGlobalSecondaryIndexSettingsUpdate (Maybe Natural)

-- | The name of the global secondary index. The name must be unique among
--   all other indexes on this table.
replicaGlobalSecondaryIndexSettingsUpdate_indexName :: Lens' ReplicaGlobalSecondaryIndexSettingsUpdate Text

-- | The current state of the Region:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The Region is being created.</li>
--   <li><tt>UPDATING</tt> - The Region is being updated.</li>
--   <li><tt>DELETING</tt> - The Region is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The Region is ready for use.</li>
--   </ul>
replicaSettingsDescription_replicaStatus :: Lens' ReplicaSettingsDescription (Maybe ReplicaStatus)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
replicaSettingsDescription_replicaProvisionedReadCapacityUnits :: Lens' ReplicaSettingsDescription (Maybe Natural)

-- | The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
replicaSettingsDescription_replicaProvisionedWriteCapacityUnits :: Lens' ReplicaSettingsDescription (Maybe Natural)

-- | The read/write capacity mode of the replica.
replicaSettingsDescription_replicaBillingModeSummary :: Lens' ReplicaSettingsDescription (Maybe BillingModeSummary)

-- | Replica global secondary index settings for the global table.
replicaSettingsDescription_replicaGlobalSecondaryIndexSettings :: Lens' ReplicaSettingsDescription (Maybe [ReplicaGlobalSecondaryIndexSettingsDescription])

-- | Auto scaling settings for a global table replica's write capacity
--   units.
replicaSettingsDescription_replicaProvisionedWriteCapacityAutoScalingSettings :: Lens' ReplicaSettingsDescription (Maybe AutoScalingSettingsDescription)

-- | Auto scaling settings for a global table replica's read capacity
--   units.
replicaSettingsDescription_replicaProvisionedReadCapacityAutoScalingSettings :: Lens' ReplicaSettingsDescription (Maybe AutoScalingSettingsDescription)

-- | The Region name of the replica.
replicaSettingsDescription_regionName :: Lens' ReplicaSettingsDescription Text

-- | Auto scaling settings for managing a global table replica's read
--   capacity units.
replicaSettingsUpdate_replicaProvisionedReadCapacityAutoScalingSettingsUpdate :: Lens' ReplicaSettingsUpdate (Maybe AutoScalingSettingsUpdate)

-- | The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
replicaSettingsUpdate_replicaProvisionedReadCapacityUnits :: Lens' ReplicaSettingsUpdate (Maybe Natural)

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
replicaSettingsUpdate_replicaGlobalSecondaryIndexSettingsUpdate :: Lens' ReplicaSettingsUpdate (Maybe (NonEmpty ReplicaGlobalSecondaryIndexSettingsUpdate))

-- | The Region of the replica to be added.
replicaSettingsUpdate_regionName :: Lens' ReplicaSettingsUpdate Text

-- | The parameters required for creating a replica on an existing global
--   table.
replicaUpdate_create :: Lens' ReplicaUpdate (Maybe CreateReplicaAction)

-- | The name of the existing replica to be removed.
replicaUpdate_delete :: Lens' ReplicaUpdate (Maybe DeleteReplicaAction)

-- | The parameters required for creating a replica for the table.
replicationGroupUpdate_create :: Lens' ReplicationGroupUpdate (Maybe CreateReplicationGroupMemberAction)

-- | The parameters required for deleting a replica for the table.
replicationGroupUpdate_delete :: Lens' ReplicationGroupUpdate (Maybe DeleteReplicationGroupMemberAction)

-- | The parameters required for updating a replica for the table.
replicationGroupUpdate_update :: Lens' ReplicationGroupUpdate (Maybe UpdateReplicationGroupMemberAction)

-- | The ARN of the source table of the backup that is being restored.
restoreSummary_sourceTableArn :: Lens' RestoreSummary (Maybe Text)

-- | The Amazon Resource Name (ARN) of the backup from which the table was
--   restored.
restoreSummary_sourceBackupArn :: Lens' RestoreSummary (Maybe Text)

-- | Point in time or source backup time.
restoreSummary_restoreDateTime :: Lens' RestoreSummary UTCTime

-- | Indicates if a restore is in progress or not.
restoreSummary_restoreInProgress :: Lens' RestoreSummary Bool

-- | Represents the current state of server-side encryption. The only
--   supported values are:
--   
--   <ul>
--   <li><tt>ENABLED</tt> - Server-side encryption is enabled.</li>
--   <li><tt>UPDATING</tt> - Server-side encryption is being updated.</li>
--   </ul>
sSEDescription_status :: Lens' SSEDescription (Maybe SSEStatus)

-- | Indicates the time, in UNIX epoch date format, when DynamoDB detected
--   that the table's AWS KMS key was inaccessible. This attribute will
--   automatically be cleared when DynamoDB detects that the table's AWS
--   KMS key is accessible again. DynamoDB will initiate the table archival
--   process when table's AWS KMS key remains inaccessible for more than
--   seven days from this date.
sSEDescription_inaccessibleEncryptionDateTime :: Lens' SSEDescription (Maybe UTCTime)

-- | Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
sSEDescription_sSEType :: Lens' SSEDescription (Maybe SSEType)

-- | The AWS KMS customer master key (CMK) ARN used for the AWS KMS
--   encryption.
sSEDescription_kmsMasterKeyArn :: Lens' SSEDescription (Maybe Text)

-- | Indicates whether server-side encryption is done using an AWS managed
--   CMK or an AWS owned CMK. If enabled (true), server-side encryption
--   type is set to <tt>KMS</tt> and an AWS managed CMK is used (AWS KMS
--   charges apply). If disabled (false) or not specified, server-side
--   encryption is set to AWS owned CMK.
sSESpecification_enabled :: Lens' SSESpecification (Maybe Bool)

-- | The AWS KMS customer master key (CMK) that should be used for the AWS
--   KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name
--   (ARN), alias name, or alias ARN. Note that you should only provide
--   this parameter if the key is different from the default DynamoDB
--   customer master key alias/aws/dynamodb.
sSESpecification_kmsMasterKeyId :: Lens' SSESpecification (Maybe Text)

-- | Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
sSESpecification_sSEType :: Lens' SSESpecification (Maybe SSEType)

-- | Size of the table in bytes. Note that this is an approximate value.
sourceTableDetails_tableSizeBytes :: Lens' SourceTableDetails (Maybe Integer)

-- | ARN of the table for which backup was created.
sourceTableDetails_tableArn :: Lens' SourceTableDetails (Maybe Text)

-- | Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
sourceTableDetails_billingMode :: Lens' SourceTableDetails (Maybe BillingMode)

-- | Number of items in the table. Note that this is an approximate value.
sourceTableDetails_itemCount :: Lens' SourceTableDetails (Maybe Natural)

-- | The name of the table for which the backup was created.
sourceTableDetails_tableName :: Lens' SourceTableDetails Text

-- | Unique identifier for the table for which the backup was created.
sourceTableDetails_tableId :: Lens' SourceTableDetails Text

-- | Schema of the table.
sourceTableDetails_keySchema :: Lens' SourceTableDetails (NonEmpty KeySchemaElement)

-- | Time when the source table was created.
sourceTableDetails_tableCreationDateTime :: Lens' SourceTableDetails UTCTime

-- | Read IOPs and Write IOPS on the table when the backup was created.
sourceTableDetails_provisionedThroughput :: Lens' SourceTableDetails ProvisionedThroughput

-- | Stream settings on the table when the backup was created.
sourceTableFeatureDetails_streamDescription :: Lens' SourceTableFeatureDetails (Maybe StreamSpecification)

-- | Represents the GSI properties for the table when the backup was
--   created. It includes the IndexName, KeySchema, Projection, and
--   ProvisionedThroughput for the GSIs on the table at the time of backup.
sourceTableFeatureDetails_globalSecondaryIndexes :: Lens' SourceTableFeatureDetails (Maybe [GlobalSecondaryIndexInfo])

-- | Represents the LSI properties for the table when the backup was
--   created. It includes the IndexName, KeySchema and Projection for the
--   LSIs on the table at the time of backup.
sourceTableFeatureDetails_localSecondaryIndexes :: Lens' SourceTableFeatureDetails (Maybe [LocalSecondaryIndexInfo])

-- | The description of the server-side encryption status on the table when
--   the backup was created.
sourceTableFeatureDetails_sSEDescription :: Lens' SourceTableFeatureDetails (Maybe SSEDescription)

-- | Time to Live settings on the table when the backup was created.
sourceTableFeatureDetails_timeToLiveDescription :: Lens' SourceTableFeatureDetails (Maybe TimeToLiveDescription)

-- | When an item in the table is modified, <tt>StreamViewType</tt>
--   determines what information is written to the stream for this table.
--   Valid values for <tt>StreamViewType</tt> are:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the key attributes of the modified item
--   are written to the stream.</li>
--   <li><tt>NEW_IMAGE</tt> - The entire item, as it appears after it was
--   modified, is written to the stream.</li>
--   <li><tt>OLD_IMAGE</tt> - The entire item, as it appeared before it was
--   modified, is written to the stream.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old item images
--   of the item are written to the stream.</li>
--   </ul>
streamSpecification_streamViewType :: Lens' StreamSpecification (Maybe StreamViewType)

-- | Indicates whether DynamoDB Streams is enabled (true) or disabled
--   (false) on the table.
streamSpecification_streamEnabled :: Lens' StreamSpecification Bool

-- | The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   </ul>
tableAutoScalingDescription_tableStatus :: Lens' TableAutoScalingDescription (Maybe TableStatus)

-- | Represents replicas of the global table.
tableAutoScalingDescription_replicas :: Lens' TableAutoScalingDescription (Maybe [ReplicaAutoScalingDescription])

-- | The name of the table.
tableAutoScalingDescription_tableName :: Lens' TableAutoScalingDescription (Maybe Text)

-- | Contains details for the restore.
tableDescription_restoreSummary :: Lens' TableDescription (Maybe RestoreSummary)

-- | Represents the version of <a>global tables</a> in use, if the table is
--   replicated across AWS Regions.
tableDescription_globalTableVersion :: Lens' TableDescription (Maybe Text)

-- | The total size of the specified table, in bytes. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
tableDescription_tableSizeBytes :: Lens' TableDescription (Maybe Integer)

-- | An array of <tt>AttributeDefinition</tt> objects. Each of these
--   objects describes one attribute in the table and index key schema.
--   
--   Each <tt>AttributeDefinition</tt> object in this array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>AttributeType</tt> - The data type for the attribute.</li>
--   </ul>
tableDescription_attributeDefinitions :: Lens' TableDescription (Maybe [AttributeDefinition])

-- | The Amazon Resource Name (ARN) that uniquely identifies the latest
--   stream for this table.
tableDescription_latestStreamArn :: Lens' TableDescription (Maybe Text)

-- | The provisioned throughput settings for the table, consisting of read
--   and write capacity units, along with data about increases and
--   decreases.
tableDescription_provisionedThroughput :: Lens' TableDescription (Maybe ProvisionedThroughputDescription)

-- | The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The AWS KMS key
--   used to encrypt the table in inaccessible. Table operations may fail
--   due to failure to use the AWS KMS key. DynamoDB will initiate the
--   table archival process when a table's AWS KMS key remains inaccessible
--   for more than seven days.</li>
--   <li><tt>ARCHIVING</tt> - The table is being archived. Operations are
--   not allowed until archival is complete.</li>
--   <li><tt>ARCHIVED</tt> - The table has been archived. See the
--   ArchivalReason for more information.</li>
--   </ul>
tableDescription_tableStatus :: Lens' TableDescription (Maybe TableStatus)

-- | The Amazon Resource Name (ARN) that uniquely identifies the table.
tableDescription_tableArn :: Lens' TableDescription (Maybe Text)

-- | The primary key structure for the table. Each
--   <tt>KeySchemaElement</tt> consists of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>KeyType</tt> - The role of the attribute:<ul><li><tt>HASH</tt>
--   - partition key</li><li><tt>RANGE</tt> - sort key</li></ul>The
--   partition key of an item is also known as its <i>hash attribute</i>.
--   The term "hash attribute" derives from DynamoDB's usage of an internal
--   hash function to evenly distribute data items across partitions, based
--   on their partition key values.The sort key of an item is also known as
--   its <i>range attribute</i>. The term "range attribute" derives from
--   the way DynamoDB stores items with the same partition key physically
--   close together, in sorted order by the sort key value.</li>
--   </ul>
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
tableDescription_keySchema :: Lens' TableDescription (Maybe (NonEmpty KeySchemaElement))

-- | The global secondary indexes, if any, on the table. Each index is
--   scoped to a given partition key value. Each element is composed of:
--   
--   <ul>
--   <li><tt>Backfilling</tt> - If true, then the index is currently in the
--   backfilling phase. Backfilling occurs only when a new global secondary
--   index is added to the table. It is the process by which DynamoDB
--   populates the new index with data from the table. (This attribute does
--   not appear for indexes that were created during a <tt>CreateTable</tt>
--   operation.)You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false. (This attribute does not appear for
--   indexes that were created during a <tt>CreateTable</tt>
--   operation.)</li>
--   <li><tt>IndexName</tt> - The name of the global secondary index.</li>
--   <li><tt>IndexSizeBytes</tt> - The total size of the global secondary
--   index, in bytes. DynamoDB updates this value approximately every six
--   hours. Recent changes might not be reflected in this value.</li>
--   <li><tt>IndexStatus</tt> - The current status of the global secondary
--   index:<ul><li><tt>CREATING</tt> - The index is being
--   created.</li><li><tt>UPDATING</tt> - The index is being
--   updated.</li><li><tt>DELETING</tt> - The index is being
--   deleted.</li><li><tt>ACTIVE</tt> - The index is ready for
--   use.</li></ul></li>
--   <li><tt>ItemCount</tt> - The number of items in the global secondary
--   index. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - In addition
--   to the attributes described in <tt>KEYS_ONLY</tt>, the secondary index
--   will include other non-key attributes that you
--   specify.</li><li><tt>ALL</tt> - All of the table attributes are
--   projected into the index.</li></ul></li><li><tt>NonKeyAttributes</tt>
--   - A list of one or more non-key attribute names that are projected
--   into the secondary index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units, along with data about increases and decreases.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
tableDescription_globalSecondaryIndexes :: Lens' TableDescription (Maybe [GlobalSecondaryIndexDescription])

-- | A timestamp, in ISO 8601 format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>AWS customer ID</li>
--   <li>Table name</li>
--   <li><pre>StreamLabel</pre></li>
--   </ul>
tableDescription_latestStreamLabel :: Lens' TableDescription (Maybe Text)

-- | Contains the details for the read/write capacity mode.
tableDescription_billingModeSummary :: Lens' TableDescription (Maybe BillingModeSummary)

-- | Represents one or more local secondary indexes on the table. Each
--   index is scoped to a given partition key value. Tables with one or
--   more local secondary indexes are subject to an item collection size
--   limit, where the amount of data within a given item collection cannot
--   exceed 10 GB. Each element is composed of:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>IndexSizeBytes</tt> - Represents the total size of the index,
--   in bytes. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>ItemCount</tt> - Represents the number of items in the index.
--   DynamoDB updates this value approximately every six hours. Recent
--   changes might not be reflected in this value.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
tableDescription_localSecondaryIndexes :: Lens' TableDescription (Maybe [LocalSecondaryIndexDescription])

-- | The date and time when the table was created, in <a>UNIX epoch
--   time</a> format.
tableDescription_creationDateTime :: Lens' TableDescription (Maybe UTCTime)

-- | The description of the server-side encryption status on the specified
--   table.
tableDescription_sSEDescription :: Lens' TableDescription (Maybe SSEDescription)

-- | Unique identifier for the table for which the backup was created.
tableDescription_tableId :: Lens' TableDescription (Maybe Text)

-- | Represents replicas of the table.
tableDescription_replicas :: Lens' TableDescription (Maybe [ReplicaDescription])

-- | The number of items in the specified table. DynamoDB updates this
--   value approximately every six hours. Recent changes might not be
--   reflected in this value.
tableDescription_itemCount :: Lens' TableDescription (Maybe Integer)

-- | Contains information about the table archive.
tableDescription_archivalSummary :: Lens' TableDescription (Maybe ArchivalSummary)

-- | The name of the table.
tableDescription_tableName :: Lens' TableDescription (Maybe Text)

-- | The current DynamoDB Streams configuration for the table.
tableDescription_streamSpecification :: Lens' TableDescription (Maybe StreamSpecification)

-- | The key of the tag. Tag keys are case sensitive. Each DynamoDB table
--   can only have up to one tag with the same key. If you try to add an
--   existing tag (same key), the existing tag value will be updated to the
--   new value.
tag_key :: Lens' Tag Text

-- | The value of the tag. Tag values are case-sensitive and can be null.
tag_value :: Lens' Tag Text

-- | The TTL status for the table.
timeToLiveDescription_timeToLiveStatus :: Lens' TimeToLiveDescription (Maybe TimeToLiveStatus)

-- | The name of the TTL attribute for items in the table.
timeToLiveDescription_attributeName :: Lens' TimeToLiveDescription (Maybe Text)

-- | Indicates whether TTL is to be enabled (true) or disabled (false) on
--   the table.
timeToLiveSpecification_enabled :: Lens' TimeToLiveSpecification Bool

-- | The name of the TTL attribute used to store the expiration time for
--   items in the table.
timeToLiveSpecification_attributeName :: Lens' TimeToLiveSpecification Text

-- | Contains the primary key that identifies the item to get, together
--   with the name of the table that contains the item, and optionally the
--   specific attributes of the item to retrieve.
transactGetItem_get :: Lens' TransactGetItem Get

-- | A request to perform a check item operation.
transactWriteItem_conditionCheck :: Lens' TransactWriteItem (Maybe ConditionCheck)

-- | A request to perform a <tt>PutItem</tt> operation.
transactWriteItem_put :: Lens' TransactWriteItem (Maybe Put)

-- | A request to perform a <tt>DeleteItem</tt> operation.
transactWriteItem_delete :: Lens' TransactWriteItem (Maybe Delete)

-- | A request to perform an <tt>UpdateItem</tt> operation.
transactWriteItem_update :: Lens' TransactWriteItem (Maybe Update)

-- | One or more substitution tokens for attribute names in an expression.
update_expressionAttributeNames :: Lens' Update (Maybe (HashMap Text Text))

-- | One or more values that can be substituted in an expression.
update_expressionAttributeValues :: Lens' Update (Maybe (HashMap Text AttributeValue))

-- | Use <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Update</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE, ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.
update_returnValuesOnConditionCheckFailure :: Lens' Update (Maybe ReturnValuesOnConditionCheckFailure)

-- | A condition that must be satisfied in order for a conditional update
--   to succeed.
update_conditionExpression :: Lens' Update (Maybe Text)

-- | The primary key of the item to be updated. Each element consists of an
--   attribute name and a value for that attribute.
update_key :: Lens' Update (HashMap Text AttributeValue)

-- | An expression that defines one or more attributes to be updated, the
--   action to be performed on them, and new value(s) for them.
update_updateExpression :: Lens' Update Text

-- | Name of the table for the <tt>UpdateItem</tt> request.
update_tableName :: Lens' Update Text

-- | The name of the global secondary index to be updated.
updateGlobalSecondaryIndexAction_indexName :: Lens' UpdateGlobalSecondaryIndexAction Text

-- | Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
updateGlobalSecondaryIndexAction_provisionedThroughput :: Lens' UpdateGlobalSecondaryIndexAction ProvisionedThroughput

-- | The AWS KMS customer master key (CMK) of the replica that should be
--   used for AWS KMS encryption. To specify a CMK, use its key ID, Amazon
--   Resource Name (ARN), alias name, or alias ARN. Note that you should
--   only provide this parameter if the key is different from the default
--   DynamoDB KMS master key alias/aws/dynamodb.
updateReplicationGroupMemberAction_kmsMasterKeyId :: Lens' UpdateReplicationGroupMemberAction (Maybe Text)

-- | Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
updateReplicationGroupMemberAction_provisionedThroughputOverride :: Lens' UpdateReplicationGroupMemberAction (Maybe ProvisionedThroughputOverride)

-- | Replica-specific global secondary index settings.
updateReplicationGroupMemberAction_globalSecondaryIndexes :: Lens' UpdateReplicationGroupMemberAction (Maybe (NonEmpty ReplicaGlobalSecondaryIndex))

-- | The Region where the replica exists.
updateReplicationGroupMemberAction_regionName :: Lens' UpdateReplicationGroupMemberAction Text

-- | A request to perform a <tt>DeleteItem</tt> operation.
writeRequest_deleteRequest :: Lens' WriteRequest (Maybe DeleteRequest)

-- | A request to perform a <tt>PutItem</tt> operation.
writeRequest_putRequest :: Lens' WriteRequest (Maybe PutRequest)


module Amazonka.DynamoDB.Waiters

-- | Polls <a>DescribeTable</a> every 20 seconds until a successful state
--   is reached. An error is returned after 25 failed checks.
newTableNotExists :: Wait DescribeTable

-- | Polls <a>DescribeTable</a> every 20 seconds until a successful state
--   is reached. An error is returned after 25 failed checks.
newTableExists :: Wait DescribeTable


-- | Derived from API version <tt>2012-08-10</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon DynamoDB
--   
--   Amazon DynamoDB is a fully managed NoSQL database service that
--   provides fast and predictable performance with seamless scalability.
--   DynamoDB lets you offload the administrative burdens of operating and
--   scaling a distributed database, so that you don't have to worry about
--   hardware provisioning, setup and configuration, replication, software
--   patching, or cluster scaling.
--   
--   With DynamoDB, you can create database tables that can store and
--   retrieve any amount of data, and serve any level of request traffic.
--   You can scale up or scale down your tables' throughput capacity
--   without downtime or performance degradation, and use the AWS
--   Management Console to monitor resource utilization and performance
--   metrics.
--   
--   DynamoDB automatically spreads the data and traffic for your tables
--   over a sufficient number of servers to handle your throughput and
--   storage requirements, while maintaining consistent and fast
--   performance. All of your data is stored on solid state disks (SSDs)
--   and automatically replicated across multiple Availability Zones in an
--   AWS region, providing built-in high availability and data durability.
module Amazonka.DynamoDB

-- | API version <tt>2012-08-10</tt> of the Amazon DynamoDB SDK
--   configuration.
defaultService :: Service

-- | The specified <tt>ExportTime</tt> is outside of the point in time
--   recovery window.
_InvalidExportTimeException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Backup not found for the given BackupARN.
_BackupNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A target table with the specified name is either being created or
--   deleted.
_TableInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There was a conflict when writing to the specified S3 bucket.
_ExportConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Backups have not yet been enabled for this table.
_ContinuousBackupsUnavailableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your request rate is too high. The AWS SDKs for DynamoDB automatically
--   retry requests that receive this exception. Your request is eventually
--   successful, unless your retry queue is too large to finish. Reduce the
--   frequency of requests and use exponential backoff. For more
--   information, go to <a>Error Retries and Exponential Backoff</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
_ProvisionedThroughputExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified global table does not exist.
_GlobalTableNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The transaction with the given request token is already in progress.
_TransactionInProgressException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The entire transaction request was canceled.
--   
--   DynamoDB cancels a <tt>TransactWriteItems</tt> request under the
--   following circumstances:
--   
--   <ul>
--   <li>A condition in one of the condition expressions is not met.</li>
--   <li>A table in the <tt>TransactWriteItems</tt> request is in a
--   different account or region.</li>
--   <li>More than one action in the <tt>TransactWriteItems</tt> operation
--   targets the same item.</li>
--   <li>There is insufficient provisioned capacity for the transaction to
--   be completed.</li>
--   <li>An item size becomes too large (larger than 400 KB), or a local
--   secondary index (LSI) becomes too large, or a similar validation error
--   occurs because of changes made by the transaction.</li>
--   <li>There is a user error, such as an invalid data format.</li>
--   </ul>
--   
--   DynamoDB cancels a <tt>TransactGetItems</tt> request under the
--   following circumstances:
--   
--   <ul>
--   <li>There is an ongoing <tt>TransactGetItems</tt> operation that
--   conflicts with a concurrent <tt>PutItem</tt>, <tt>UpdateItem</tt>,
--   <tt>DeleteItem</tt> or <tt>TransactWriteItems</tt> request. In this
--   case the <tt>TransactGetItems</tt> operation fails with a
--   <tt>TransactionCanceledException</tt>.</li>
--   <li>A table in the <tt>TransactGetItems</tt> request is in a different
--   account or region.</li>
--   <li>There is insufficient provisioned capacity for the transaction to
--   be completed.</li>
--   <li>There is a user error, such as an invalid data format.</li>
--   </ul>
--   
--   If using Java, DynamoDB lists the cancellation reasons on the
--   <tt>CancellationReasons</tt> property. This property is not set for
--   other languages. Transaction cancellation reasons are ordered in the
--   order of requested items, if an item has no error it will have
--   <tt>NONE</tt> code and <tt>Null</tt> message.
--   
--   Cancellation reason codes and possible error messages:
--   
--   <ul>
--   <li>No Errors:<ul><li>Code: <tt>NONE</tt></li><li>Message:
--   <tt>null</tt></li></ul></li>
--   <li>Conditional Check Failed:<ul><li>Code:
--   <tt>ConditionalCheckFailed</tt></li><li>Message: The conditional
--   request failed.</li></ul></li>
--   <li>Item Collection Size Limit Exceeded:<ul><li>Code:
--   <tt>ItemCollectionSizeLimitExceeded</tt></li><li>Message: Collection
--   size exceeded.</li></ul></li>
--   <li>Transaction Conflict:<ul><li>Code:
--   <tt>TransactionConflict</tt></li><li>Message: Transaction is ongoing
--   for the item.</li></ul></li>
--   <li>Provisioned Throughput Exceeded:<ul><li>Code:
--   <tt>ProvisionedThroughputExceeded</tt></li><li>Messages:<ul><li>The
--   level of configured provisioned throughput for the table was exceeded.
--   Consider increasing your provisioning level with the UpdateTable
--   API.This Message is received when provisioned throughput is exceeded
--   is on a provisioned DynamoDB table.</li><li>The level of configured
--   provisioned throughput for one or more global secondary indexes of the
--   table was exceeded. Consider increasing your provisioning level for
--   the under-provisioned global secondary indexes with the UpdateTable
--   API.This message is returned when provisioned throughput is exceeded
--   is on a provisioned GSI.</li></ul></li></ul></li>
--   <li>Throttling Error:<ul><li>Code:
--   <tt>ThrottlingError</tt></li><li>Messages:<ul><li>Throughput exceeds
--   the current capacity of your table or index. DynamoDB is automatically
--   scaling your table or index so please try again shortly. If exceptions
--   persist, check if you have a hot key:
--   https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/bp-partition-key-design.html.This
--   message is returned when writes get throttled on an On-Demand table as
--   DynamoDB is automatically scaling the table.</li><li>Throughput
--   exceeds the current capacity for one or more global secondary indexes.
--   DynamoDB is automatically scaling your index so please try again
--   shortly.This message is returned when when writes get throttled on an
--   On-Demand GSI as DynamoDB is automatically scaling the
--   GSI.</li></ul></li></ul></li>
--   <li>Validation Error:<ul><li>Code:
--   <tt>ValidationError</tt></li><li>Messages:<ul><li>One or more
--   parameter values were invalid.</li><li>The update expression attempted
--   to update the secondary index key beyond allowed size
--   limits.</li><li>The update expression attempted to update the
--   secondary index key to unsupported type.</li><li>An operand in the
--   update expression has an incorrect data type.</li><li>Item size to
--   update has exceeded the maximum allowed size.</li><li>Number overflow.
--   Attempting to store a number with magnitude larger than supported
--   range.</li><li>Type mismatch for attribute to update.</li><li>Nesting
--   Levels have exceeded supported limits.</li><li>The document path
--   provided in the update expression is invalid for update.</li><li>The
--   provided expression refers to an attribute that does not exist in the
--   item.</li></ul></li></ul></li>
--   </ul>
_TransactionCanceledException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A condition specified in the operation could not be evaluated.
_ConditionalCheckFailedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified global table already exists.
_GlobalTableAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified replica is no longer part of the global table.
_ReplicaNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | A target table with the specified name already exists.
_TableAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Throughput exceeds the current throughput quota for your account.
--   Please contact AWS Support at <a>AWS Support</a> to request a quota
--   increase.
_RequestLimitExceeded :: AsError a => Getting (First ServiceError) a ServiceError

-- | An item collection is too large. This exception is only returned for
--   tables that have one or more local secondary indexes.
_ItemCollectionSizeLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An error occurred on the server side.
_InternalServerError :: AsError a => Getting (First ServiceError) a ServiceError

-- | A source table with the name <tt>TableName</tt> does not currently
--   exist within the subscriber's account.
_TableNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation tried to access a nonexistent index.
_IndexNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Operation was rejected because there is an ongoing transaction for the
--   item.
_TransactionConflictException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is another ongoing conflicting backup control plane operation on
--   the table. The backup is either being created, deleted or restored to
--   a table.
_BackupInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There was an attempt to insert an item with the same primary key as an
--   item that already exists in the DynamoDB table.
_DuplicateItemException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified export was not found.
_ExportNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Point in time recovery has not yet been enabled for this source table.
_PointInTimeRecoveryUnavailableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | DynamoDB rejected the request because you retried a request with a
--   different payload but with an idempotent token that was already used.
_IdempotentParameterMismatchException :: AsError a => Getting (First ServiceError) a ServiceError

-- | An invalid restore time was specified. RestoreDateTime must be between
--   EarliestRestorableDateTime and LatestRestorableDateTime.
_InvalidRestoreTimeException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation tried to access a nonexistent table or index. The
--   resource might not be specified correctly, or its status might not be
--   <tt>ACTIVE</tt>.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified replica is already part of the global table.
_ReplicaAlreadyExistsException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is no limit to the number of daily on-demand backups that can be
--   taken.
--   
--   Up to 50 simultaneous table operations are allowed per account. These
--   operations include <tt>CreateTable</tt>, <tt>UpdateTable</tt>,
--   <tt>DeleteTable</tt>,<tt>UpdateTimeToLive</tt>,
--   <tt>RestoreTableFromBackup</tt>, and
--   <tt>RestoreTableToPointInTime</tt>.
--   
--   The only exception is when you are creating a table with one or more
--   secondary indexes. You can have up to 25 such requests running at a
--   time; however, if the table or index specifications are complex,
--   DynamoDB might temporarily reduce the number of concurrent operations.
--   
--   There is a soft account quota of 256 tables.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The operation conflicts with the resource's availability. For example,
--   you attempted to recreate an existing table, or tried to delete a
--   table currently in the <tt>CREATING</tt> state.
_ResourceInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Polls <a>DescribeTable</a> every 20 seconds until a successful state
--   is reached. An error is returned after 25 failed checks.
newTableNotExists :: Wait DescribeTable

-- | Polls <a>DescribeTable</a> every 20 seconds until a successful state
--   is reached. An error is returned after 25 failed checks.
newTableExists :: Wait DescribeTable

-- | Represents the input of a <tt>PutItem</tt> operation.
--   
--   <i>See:</i> <a>newPutItem</a> smart constructor.
data PutItem
PutItem' :: Maybe (HashMap Text Text) -> Maybe ReturnValue -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnConsumedCapacity -> Maybe ReturnItemCollectionMetrics -> Maybe Text -> Maybe ConditionalOperator -> Maybe (HashMap Text ExpectedAttributeValue) -> Text -> HashMap Text AttributeValue -> PutItem

-- | Create a value of <a>PutItem</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:PutItem'</a>,
--   <a>putItem_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression. The following are some
--   use cases for using <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnValues:PutItem'</a>, <a>putItem_returnValues</a> - Use
--   <tt>ReturnValues</tt> if you want to get the item attributes as they
--   appeared before they were updated with the <tt>PutItem</tt> request.
--   For <tt>PutItem</tt>, the valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - If <tt>PutItem</tt> overwrote an attribute
--   name-value pair, then the content of the old item is returned.</li>
--   </ul>
--   
--   The <tt>ReturnValues</tt> parameter is used by several DynamoDB
--   operations; however, <tt>PutItem</tt> does not recognize any values
--   other than <tt>NONE</tt> or <tt>ALL_OLD</tt>.
--   
--   <a>$sel:expressionAttributeValues:PutItem'</a>,
--   <a>putItem_expressionAttributeValues</a> - One or more values that can
--   be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnConsumedCapacity:PutItem'</a>,
--   <a>putItem_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:returnItemCollectionMetrics:PutItem'</a>,
--   <a>putItem_returnItemCollectionMetrics</a> - Determines whether item
--   collection metrics are returned. If set to <tt>SIZE</tt>, the response
--   includes statistics about item collections, if any, that were modified
--   during the operation are returned in the response. If set to
--   <tt>NONE</tt> (the default), no statistics are returned.
--   
--   <a>$sel:conditionExpression:PutItem'</a>,
--   <a>putItem_conditionExpression</a> - A condition that must be
--   satisfied in order for a conditional <tt>PutItem</tt> operation to
--   succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information on condition expressions, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:conditionalOperator:PutItem'</a>,
--   <a>putItem_conditionalOperator</a> - This is a legacy parameter. Use
--   <tt>ConditionExpression</tt> instead. For more information, see
--   <a>ConditionalOperator</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:expected:PutItem'</a>, <a>putItem_expected</a> - This is a
--   legacy parameter. Use <tt>ConditionExpression</tt> instead. For more
--   information, see <a>Expected</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:tableName:PutItem'</a>, <a>putItem_tableName</a> - The name of
--   the table to contain the item.
--   
--   <a>$sel:item:PutItem'</a>, <a>putItem_item</a> - A map of attribute
--   name/value pairs, one for each attribute. Only the primary key
--   attributes are required; you can optionally provide other attribute
--   name-value pairs for the item.
--   
--   You must provide all of the attributes for the primary key. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   both values for both the partition key and the sort key.
--   
--   If you specify any attributes that are part of an index key, then the
--   data types for those attributes must match those of the schema in the
--   table's attribute definition.
--   
--   Empty String and Binary attribute values are allowed. Attribute values
--   of type String and Binary must have a length greater than zero if the
--   attribute is used as a key attribute for a table or index.
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   Each element in the <tt>Item</tt> map is an <tt>AttributeValue</tt>
--   object.
newPutItem :: Text -> PutItem

-- | Represents the output of a <tt>PutItem</tt> operation.
--   
--   <i>See:</i> <a>newPutItemResponse</a> smart constructor.
data PutItemResponse
PutItemResponse' :: Maybe ItemCollectionMetrics -> Maybe ConsumedCapacity -> Maybe (HashMap Text AttributeValue) -> Int -> PutItemResponse

-- | Create a value of <a>PutItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionMetrics:PutItemResponse'</a>,
--   <a>putItemResponse_itemCollectionMetrics</a> - Information about item
--   collections, if any, that were affected by the <tt>PutItem</tt>
--   operation. <tt>ItemCollectionMetrics</tt> is only returned if the
--   <tt>ReturnItemCollectionMetrics</tt> parameter was specified. If the
--   table does not have any local secondary indexes, this information is
--   not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
--   
--   <a>$sel:consumedCapacity:PutItemResponse'</a>,
--   <a>putItemResponse_consumedCapacity</a> - The capacity units consumed
--   by the <tt>PutItem</tt> operation. The data returned includes the
--   total provisioned throughput consumed, along with statistics for the
--   table and any indexes involved in the operation.
--   <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Read/Write Capacity Mode</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributes:PutItemResponse'</a>,
--   <a>putItemResponse_attributes</a> - The attribute values as they
--   appeared before the <tt>PutItem</tt> operation, but only if
--   <tt>ReturnValues</tt> is specified as <tt>ALL_OLD</tt> in the request.
--   Each element consists of an attribute name and an attribute value.
--   
--   <a>$sel:httpStatus:PutItemResponse'</a>,
--   <a>putItemResponse_httpStatus</a> - The response's http status code.
newPutItemResponse :: Int -> PutItemResponse

-- | Represents the input of a <tt>DeleteItem</tt> operation.
--   
--   <i>See:</i> <a>newDeleteItem</a> smart constructor.
data DeleteItem
DeleteItem' :: Maybe (HashMap Text Text) -> Maybe ReturnValue -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnConsumedCapacity -> Maybe ReturnItemCollectionMetrics -> Maybe Text -> Maybe ConditionalOperator -> Maybe (HashMap Text ExpectedAttributeValue) -> Text -> HashMap Text AttributeValue -> DeleteItem

-- | Create a value of <a>DeleteItem</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:DeleteItem'</a>,
--   <a>deleteItem_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression. The following are some
--   use cases for using <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnValues:DeleteItem'</a>, <a>deleteItem_returnValues</a> -
--   Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appeared before they were deleted. For <tt>DeleteItem</tt>, the
--   valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - The content of the old item is returned.</li>
--   </ul>
--   
--   The <tt>ReturnValues</tt> parameter is used by several DynamoDB
--   operations; however, <tt>DeleteItem</tt> does not recognize any values
--   other than <tt>NONE</tt> or <tt>ALL_OLD</tt>.
--   
--   <a>$sel:expressionAttributeValues:DeleteItem'</a>,
--   <a>deleteItem_expressionAttributeValues</a> - One or more values that
--   can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnConsumedCapacity:DeleteItem'</a>,
--   <a>deleteItem_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:returnItemCollectionMetrics:DeleteItem'</a>,
--   <a>deleteItem_returnItemCollectionMetrics</a> - Determines whether
--   item collection metrics are returned. If set to <tt>SIZE</tt>, the
--   response includes statistics about item collections, if any, that were
--   modified during the operation are returned in the response. If set to
--   <tt>NONE</tt> (the default), no statistics are returned.
--   
--   <a>$sel:conditionExpression:DeleteItem'</a>,
--   <a>deleteItem_conditionExpression</a> - A condition that must be
--   satisfied in order for a conditional <tt>DeleteItem</tt> to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information about condition expressions, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:conditionalOperator:DeleteItem'</a>,
--   <a>deleteItem_conditionalOperator</a> - This is a legacy parameter.
--   Use <tt>ConditionExpression</tt> instead. For more information, see
--   <a>ConditionalOperator</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:expected:DeleteItem'</a>, <a>deleteItem_expected</a> - This is
--   a legacy parameter. Use <tt>ConditionExpression</tt> instead. For more
--   information, see <a>Expected</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:tableName:DeleteItem'</a>, <a>deleteItem_tableName</a> - The
--   name of the table from which to delete the item.
--   
--   <a>$sel:key:DeleteItem'</a>, <a>deleteItem_key</a> - A map of
--   attribute names to <tt>AttributeValue</tt> objects, representing the
--   primary key of the item to delete.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
newDeleteItem :: Text -> DeleteItem

-- | Represents the output of a <tt>DeleteItem</tt> operation.
--   
--   <i>See:</i> <a>newDeleteItemResponse</a> smart constructor.
data DeleteItemResponse
DeleteItemResponse' :: Maybe ItemCollectionMetrics -> Maybe ConsumedCapacity -> Maybe (HashMap Text AttributeValue) -> Int -> DeleteItemResponse

-- | Create a value of <a>DeleteItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionMetrics:DeleteItemResponse'</a>,
--   <a>deleteItemResponse_itemCollectionMetrics</a> - Information about
--   item collections, if any, that were affected by the
--   <tt>DeleteItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
--   
--   <a>$sel:consumedCapacity:DeleteItemResponse'</a>,
--   <a>deleteItemResponse_consumedCapacity</a> - The capacity units
--   consumed by the <tt>DeleteItem</tt> operation. The data returned
--   includes the total provisioned throughput consumed, along with
--   statistics for the table and any indexes involved in the operation.
--   <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Mode</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:attributes:DeleteItemResponse'</a>,
--   <a>deleteItemResponse_attributes</a> - A map of attribute names to
--   <tt>AttributeValue</tt> objects, representing the item as it appeared
--   before the <tt>DeleteItem</tt> operation. This map appears in the
--   response only if <tt>ReturnValues</tt> was specified as
--   <tt>ALL_OLD</tt> in the request.
--   
--   <a>$sel:httpStatus:DeleteItemResponse'</a>,
--   <a>deleteItemResponse_httpStatus</a> - The response's http status
--   code.
newDeleteItemResponse :: Int -> DeleteItemResponse

-- | Represents the input of an <tt>UpdateItem</tt> operation.
--   
--   <i>See:</i> <a>newUpdateItem</a> smart constructor.
data UpdateItem
UpdateItem' :: Maybe (HashMap Text Text) -> Maybe ReturnValue -> Maybe Text -> Maybe (HashMap Text AttributeValue) -> Maybe (HashMap Text AttributeValueUpdate) -> Maybe ReturnConsumedCapacity -> Maybe ReturnItemCollectionMetrics -> Maybe Text -> Maybe ConditionalOperator -> Maybe (HashMap Text ExpectedAttributeValue) -> Text -> HashMap Text AttributeValue -> UpdateItem

-- | Create a value of <a>UpdateItem</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:UpdateItem'</a>,
--   <a>updateItem_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression. The following are some
--   use cases for using <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.) To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information about expression attribute names, see
--   <a>Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:returnValues:UpdateItem'</a>, <a>updateItem_returnValues</a> -
--   Use <tt>ReturnValues</tt> if you want to get the item attributes as
--   they appear before or after they are updated. For <tt>UpdateItem</tt>,
--   the valid values are:
--   
--   <ul>
--   <li><tt>NONE</tt> - If <tt>ReturnValues</tt> is not specified, or if
--   its value is <tt>NONE</tt>, then nothing is returned. (This setting is
--   the default for <tt>ReturnValues</tt>.)</li>
--   <li><tt>ALL_OLD</tt> - Returns all of the attributes of the item, as
--   they appeared before the UpdateItem operation.</li>
--   <li><tt>UPDATED_OLD</tt> - Returns only the updated attributes, as
--   they appeared before the UpdateItem operation.</li>
--   <li><tt>ALL_NEW</tt> - Returns all of the attributes of the item, as
--   they appear after the UpdateItem operation.</li>
--   <li><tt>UPDATED_NEW</tt> - Returns only the updated attributes, as
--   they appear after the UpdateItem operation.</li>
--   </ul>
--   
--   There is no additional cost associated with requesting a return value
--   aside from the small network and processing overhead of receiving a
--   larger response. No read capacity units are consumed.
--   
--   The values returned are strongly consistent.
--   
--   <a>$sel:updateExpression:UpdateItem'</a>,
--   <a>updateItem_updateExpression</a> - An expression that defines one or
--   more attributes to be updated, the action to be performed on them, and
--   new values for them.
--   
--   The following action values are available for
--   <tt>UpdateExpression</tt>.
--   
--   <ul>
--   <li><tt>SET</tt> - Adds one or more attributes and values to an item.
--   If any of these attributes already exist, they are replaced by the new
--   values. You can also use <tt>SET</tt> to add or subtract from an
--   attribute that is of type Number. For example: <tt>SET myNum = myNum +
--   :val</tt><tt>SET</tt> supports the following
--   functions:<ul><li><tt>if_not_exists (path, operand)</tt> - if the item
--   does not contain an attribute at the specified path, then
--   <tt>if_not_exists</tt> evaluates to operand; otherwise, it evaluates
--   to path. You can use this function to avoid overwriting an attribute
--   that may already be present in the item.</li><li><tt>list_append
--   (operand, operand)</tt> - evaluates to a list with a new element added
--   to it. You can append the new element to the start or the end of the
--   list by reversing the order of the operands.</li></ul>These function
--   names are case-sensitive.</li>
--   <li><tt>REMOVE</tt> - Removes one or more attributes from an
--   item.</li>
--   <li><tt>ADD</tt> - Adds the specified value to the item, if the
--   attribute does not already exist. If the attribute does exist, then
--   the behavior of <tt>ADD</tt> depends on the data type of the
--   attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then <tt>Value</tt> is mathematically
--   added to the existing attribute. If <tt>Value</tt> is a negative
--   number, then it is subtracted from the existing attribute.If you use
--   <tt>ADD</tt> to increment or decrement a number value for an item that
--   doesn't exist before the update, DynamoDB uses <tt>0</tt> as the
--   initial value.Similarly, if you use <tt>ADD</tt> for an existing item
--   to increment or decrement an attribute value that doesn't exist before
--   the update, DynamoDB uses <tt>0</tt> as the initial value. For
--   example, suppose that the item you want to update doesn't have an
--   attribute named <tt>itemcount</tt>, but you decide to <tt>ADD</tt> the
--   number <tt>3</tt> to this attribute anyway. DynamoDB will create the
--   <tt>itemcount</tt> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <tt>itemcount</tt> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set and if
--   <tt>Value</tt> is also a set, then <tt>Value</tt> is added to the
--   existing set. For example, if the attribute value is the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value is <tt>[1,2,3]</tt>. An error occurs if
--   an <tt>ADD</tt> action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings.</li></ul>The <tt>ADD</tt> action only supports
--   Number and set data types. In addition, <tt>ADD</tt> can only be used
--   on top-level attributes, not nested attributes.</li>
--   <li><tt>DELETE</tt> - Deletes an element from a set.If a set of values
--   is specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specifies <tt>[a,c]</tt>, then the final
--   attribute value is <tt>[b]</tt>. Specifying an empty set is an
--   error.The <tt>DELETE</tt> action only supports set data types. In
--   addition, <tt>DELETE</tt> can only be used on top-level attributes,
--   not nested attributes.</li>
--   </ul>
--   
--   You can have many actions in a single expression, such as the
--   following: <tt>SET a=:value1, b=:value2 DELETE :value3, :value4,
--   :value5</tt>
--   
--   For more information on update expressions, see <a>Modifying Items and
--   Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:expressionAttributeValues:UpdateItem'</a>,
--   <a>updateItem_expressionAttributeValues</a> - One or more values that
--   can be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <tt>ProductStatus</tt> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributeUpdates:UpdateItem'</a>,
--   <a>updateItem_attributeUpdates</a> - This is a legacy parameter. Use
--   <tt>UpdateExpression</tt> instead. For more information, see
--   <a>AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnConsumedCapacity:UpdateItem'</a>,
--   <a>updateItem_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:returnItemCollectionMetrics:UpdateItem'</a>,
--   <a>updateItem_returnItemCollectionMetrics</a> - Determines whether
--   item collection metrics are returned. If set to <tt>SIZE</tt>, the
--   response includes statistics about item collections, if any, that were
--   modified during the operation are returned in the response. If set to
--   <tt>NONE</tt> (the default), no statistics are returned.
--   
--   <a>$sel:conditionExpression:UpdateItem'</a>,
--   <a>updateItem_conditionExpression</a> - A condition that must be
--   satisfied in order for a conditional update to succeed.
--   
--   An expression can contain any of the following:
--   
--   <ul>
--   <li>Functions: <tt>attribute_exists | attribute_not_exists |
--   attribute_type | contains | begins_with | size</tt>These function
--   names are case-sensitive.</li>
--   <li>Comparison operators: <tt>= | &lt;&gt; | &lt; | &gt; | &lt;= |
--   &gt;= | BETWEEN | IN </tt></li>
--   <li>Logical operators: <tt>AND | OR | NOT</tt></li>
--   </ul>
--   
--   For more information about condition expressions, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:conditionalOperator:UpdateItem'</a>,
--   <a>updateItem_conditionalOperator</a> - This is a legacy parameter.
--   Use <tt>ConditionExpression</tt> instead. For more information, see
--   <a>ConditionalOperator</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:expected:UpdateItem'</a>, <a>updateItem_expected</a> - This is
--   a legacy parameter. Use <tt>ConditionExpression</tt> instead. For more
--   information, see <a>Expected</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:tableName:UpdateItem'</a>, <a>updateItem_tableName</a> - The
--   name of the table containing the item to update.
--   
--   <a>$sel:key:UpdateItem'</a>, <a>updateItem_key</a> - The primary key
--   of the item to be updated. Each element consists of an attribute name
--   and a value for that attribute.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
newUpdateItem :: Text -> UpdateItem

-- | Represents the output of an <tt>UpdateItem</tt> operation.
--   
--   <i>See:</i> <a>newUpdateItemResponse</a> smart constructor.
data UpdateItemResponse
UpdateItemResponse' :: Maybe ItemCollectionMetrics -> Maybe ConsumedCapacity -> Maybe (HashMap Text AttributeValue) -> Int -> UpdateItemResponse

-- | Create a value of <a>UpdateItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionMetrics:UpdateItemResponse'</a>,
--   <a>updateItemResponse_itemCollectionMetrics</a> - Information about
--   item collections, if any, that were affected by the
--   <tt>UpdateItem</tt> operation. <tt>ItemCollectionMetrics</tt> is only
--   returned if the <tt>ReturnItemCollectionMetrics</tt> parameter was
--   specified. If the table does not have any local secondary indexes,
--   this information is not returned in the response.
--   
--   Each <tt>ItemCollectionMetrics</tt> element consists of:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the item
--   itself.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, in gigabytes. This value is a two-element array containing a
--   lower bound and an upper bound for the estimate. The estimate includes
--   the size of all the items in the table, plus the size of all
--   attributes projected into all of the local secondary indexes on that
--   table. Use this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
--   
--   <a>$sel:consumedCapacity:UpdateItemResponse'</a>,
--   <a>updateItemResponse_consumedCapacity</a> - The capacity units
--   consumed by the <tt>UpdateItem</tt> operation. The data returned
--   includes the total provisioned throughput consumed, along with
--   statistics for the table and any indexes involved in the operation.
--   <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Provisioned Throughput</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributes:UpdateItemResponse'</a>,
--   <a>updateItemResponse_attributes</a> - A map of attribute values as
--   they appear before or after the <tt>UpdateItem</tt> operation, as
--   determined by the <tt>ReturnValues</tt> parameter.
--   
--   The <tt>Attributes</tt> map is only present if <tt>ReturnValues</tt>
--   was specified as something other than <tt>NONE</tt> in the request.
--   Each element represents one attribute.
--   
--   <a>$sel:httpStatus:UpdateItemResponse'</a>,
--   <a>updateItemResponse_httpStatus</a> - The response's http status
--   code.
newUpdateItemResponse :: Int -> UpdateItemResponse

-- | <i>See:</i> <a>newDisableKinesisStreamingDestination</a> smart
--   constructor.
data DisableKinesisStreamingDestination
DisableKinesisStreamingDestination' :: Text -> Text -> DisableKinesisStreamingDestination

-- | Create a value of <a>DisableKinesisStreamingDestination</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DisableKinesisStreamingDestination'</a>,
--   <a>disableKinesisStreamingDestination_tableName</a> - The name of the
--   DynamoDB table.
--   
--   <a>$sel:streamArn:DisableKinesisStreamingDestination'</a>,
--   <a>disableKinesisStreamingDestination_streamArn</a> - The ARN for a
--   Kinesis data stream.
newDisableKinesisStreamingDestination :: Text -> Text -> DisableKinesisStreamingDestination

-- | <i>See:</i> <a>newKinesisStreamingDestinationOutput</a> smart
--   constructor.
data KinesisStreamingDestinationOutput
KinesisStreamingDestinationOutput' :: Maybe DestinationStatus -> Maybe Text -> Maybe Text -> KinesisStreamingDestinationOutput

-- | Create a value of <a>KinesisStreamingDestinationOutput</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:destinationStatus:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_destinationStatus</a> - The
--   current status of the replication.
--   
--   <a>$sel:streamArn:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_streamArn</a> - The ARN for the
--   specific Kinesis data stream.
--   
--   <a>$sel:tableName:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_tableName</a> - The name of the
--   table being modified.
newKinesisStreamingDestinationOutput :: KinesisStreamingDestinationOutput

-- | <i>See:</i> <a>newListGlobalTables</a> smart constructor.
data ListGlobalTables
ListGlobalTables' :: Maybe Text -> Maybe Text -> Maybe Natural -> ListGlobalTables

-- | Create a value of <a>ListGlobalTables</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:ListGlobalTables'</a>,
--   <a>listGlobalTables_regionName</a> - Lists the global tables in a
--   specific Region.
--   
--   <a>$sel:exclusiveStartGlobalTableName:ListGlobalTables'</a>,
--   <a>listGlobalTables_exclusiveStartGlobalTableName</a> - The first
--   global table name that this operation will evaluate.
--   
--   <a>$sel:limit:ListGlobalTables'</a>, <a>listGlobalTables_limit</a> -
--   The maximum number of table names to return, if the parameter is not
--   specified DynamoDB defaults to 100.
--   
--   If the number of global tables DynamoDB finds reaches this limit, it
--   stops the operation and returns the table names collected up to that
--   point, with a table name in the <tt>LastEvaluatedGlobalTableName</tt>
--   to apply in a subsequent operation to the
--   <tt>ExclusiveStartGlobalTableName</tt> parameter.
newListGlobalTables :: ListGlobalTables

-- | <i>See:</i> <a>newListGlobalTablesResponse</a> smart constructor.
data ListGlobalTablesResponse
ListGlobalTablesResponse' :: Maybe Text -> Maybe [GlobalTable] -> Int -> ListGlobalTablesResponse

-- | Create a value of <a>ListGlobalTablesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedGlobalTableName:ListGlobalTablesResponse'</a>,
--   <a>listGlobalTablesResponse_lastEvaluatedGlobalTableName</a> - Last
--   evaluated global table name.
--   
--   <a>$sel:globalTables:ListGlobalTablesResponse'</a>,
--   <a>listGlobalTablesResponse_globalTables</a> - List of global table
--   names.
--   
--   <a>$sel:httpStatus:ListGlobalTablesResponse'</a>,
--   <a>listGlobalTablesResponse_httpStatus</a> - The response's http
--   status code.
newListGlobalTablesResponse :: Int -> ListGlobalTablesResponse

-- | <i>See:</i> <a>newUpdateGlobalTable</a> smart constructor.
data UpdateGlobalTable
UpdateGlobalTable' :: Text -> [ReplicaUpdate] -> UpdateGlobalTable

-- | Create a value of <a>UpdateGlobalTable</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableName:UpdateGlobalTable'</a>,
--   <a>updateGlobalTable_globalTableName</a> - The global table name.
--   
--   <a>$sel:replicaUpdates:UpdateGlobalTable'</a>,
--   <a>updateGlobalTable_replicaUpdates</a> - A list of Regions that
--   should be added or removed from the global table.
newUpdateGlobalTable :: Text -> UpdateGlobalTable

-- | <i>See:</i> <a>newUpdateGlobalTableResponse</a> smart constructor.
data UpdateGlobalTableResponse
UpdateGlobalTableResponse' :: Maybe GlobalTableDescription -> Int -> UpdateGlobalTableResponse

-- | Create a value of <a>UpdateGlobalTableResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableDescription:UpdateGlobalTableResponse'</a>,
--   <a>updateGlobalTableResponse_globalTableDescription</a> - Contains the
--   details of the global table.
--   
--   <a>$sel:httpStatus:UpdateGlobalTableResponse'</a>,
--   <a>updateGlobalTableResponse_httpStatus</a> - The response's http
--   status code.
newUpdateGlobalTableResponse :: Int -> UpdateGlobalTableResponse

-- | Represents the input of a <tt>DeleteTable</tt> operation.
--   
--   <i>See:</i> <a>newDeleteTable</a> smart constructor.
data DeleteTable
DeleteTable' :: Text -> DeleteTable

-- | Create a value of <a>DeleteTable</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DeleteTable'</a>, <a>deleteTable_tableName</a> - The
--   name of the table to delete.
newDeleteTable :: Text -> DeleteTable

-- | Represents the output of a <tt>DeleteTable</tt> operation.
--   
--   <i>See:</i> <a>newDeleteTableResponse</a> smart constructor.
data DeleteTableResponse
DeleteTableResponse' :: Maybe TableDescription -> Int -> DeleteTableResponse

-- | Create a value of <a>DeleteTableResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableDescription:DeleteTableResponse'</a>,
--   <a>deleteTableResponse_tableDescription</a> - Represents the
--   properties of a table.
--   
--   <a>$sel:httpStatus:DeleteTableResponse'</a>,
--   <a>deleteTableResponse_httpStatus</a> - The response's http status
--   code.
newDeleteTableResponse :: Int -> DeleteTableResponse

-- | Represents the input of an <tt>UpdateTable</tt> operation.
--   
--   <i>See:</i> <a>newUpdateTable</a> smart constructor.
data UpdateTable
UpdateTable' :: Maybe [AttributeDefinition] -> Maybe ProvisionedThroughput -> Maybe SSESpecification -> Maybe (NonEmpty ReplicationGroupUpdate) -> Maybe [GlobalSecondaryIndexUpdate] -> Maybe BillingMode -> Maybe StreamSpecification -> Text -> UpdateTable

-- | Create a value of <a>UpdateTable</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeDefinitions:UpdateTable'</a>,
--   <a>updateTable_attributeDefinitions</a> - An array of attributes that
--   describe the key schema for the table and indexes. If you are adding a
--   new global secondary index to the table, <tt>AttributeDefinitions</tt>
--   must include the key element(s) of the new index.
--   
--   <a>$sel:provisionedThroughput:UpdateTable'</a>,
--   <a>updateTable_provisionedThroughput</a> - The new provisioned
--   throughput settings for the specified table or index.
--   
--   <a>$sel:sSESpecification:UpdateTable'</a>,
--   <a>updateTable_sSESpecification</a> - The new server-side encryption
--   settings for the specified table.
--   
--   <a>$sel:replicaUpdates:UpdateTable'</a>,
--   <a>updateTable_replicaUpdates</a> - A list of replica update actions
--   (create, delete, or update) for the table.
--   
--   This property only applies to <a>Version 2019.11.21</a> of global
--   tables.
--   
--   <a>$sel:globalSecondaryIndexUpdates:UpdateTable'</a>,
--   <a>updateTable_globalSecondaryIndexUpdates</a> - An array of one or
--   more global secondary indexes for the table. For each index in the
--   array, you can request one action:
--   
--   <ul>
--   <li><tt>Create</tt> - add a new global secondary index to the
--   table.</li>
--   <li><tt>Update</tt> - modify the provisioned throughput settings of an
--   existing global secondary index.</li>
--   <li><tt>Delete</tt> - remove a global secondary index from the
--   table.</li>
--   </ul>
--   
--   You can create or delete only one global secondary index per
--   <tt>UpdateTable</tt> operation.
--   
--   For more information, see <a>Managing Global Secondary Indexes</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:billingMode:UpdateTable'</a>, <a>updateTable_billingMode</a> -
--   Controls how you are charged for read and write throughput and how you
--   manage capacity. When switching from pay-per-request to provisioned
--   capacity, initial provisioned capacity values must be set. The initial
--   provisioned capacity values are estimated based on the consumed read
--   and write capacity of your table and global secondary indexes over the
--   past 30 minutes.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
--   
--   <a>$sel:streamSpecification:UpdateTable'</a>,
--   <a>updateTable_streamSpecification</a> - Represents the DynamoDB
--   Streams configuration for the table.
--   
--   You receive a <tt>ResourceInUseException</tt> if you try to enable a
--   stream on a table that already has a stream, or if you try to disable
--   a stream on a table that doesn't have a stream.
--   
--   <a>$sel:tableName:UpdateTable'</a>, <a>updateTable_tableName</a> - The
--   name of the table to be updated.
newUpdateTable :: Text -> UpdateTable

-- | Represents the output of an <tt>UpdateTable</tt> operation.
--   
--   <i>See:</i> <a>newUpdateTableResponse</a> smart constructor.
data UpdateTableResponse
UpdateTableResponse' :: Maybe TableDescription -> Int -> UpdateTableResponse

-- | Create a value of <a>UpdateTableResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableDescription:UpdateTableResponse'</a>,
--   <a>updateTableResponse_tableDescription</a> - Represents the
--   properties of the table.
--   
--   <a>$sel:httpStatus:UpdateTableResponse'</a>,
--   <a>updateTableResponse_httpStatus</a> - The response's http status
--   code.
newUpdateTableResponse :: Int -> UpdateTableResponse

-- | Represents the input of a <tt>BatchGetItem</tt> operation.
--   
--   <i>See:</i> <a>newBatchGetItem</a> smart constructor.
data BatchGetItem
BatchGetItem' :: Maybe ReturnConsumedCapacity -> HashMap Text KeysAndAttributes -> BatchGetItem

-- | Create a value of <a>BatchGetItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:returnConsumedCapacity:BatchGetItem'</a>,
--   <a>batchGetItem_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:requestItems:BatchGetItem'</a>,
--   <a>batchGetItem_requestItems</a> - A map of one or more table names
--   and, for each table, a map that describes one or more items to
--   retrieve from that table. Each table name can be used only once per
--   <tt>BatchGetItem</tt> request.
--   
--   Each element in the map of items to retrieve consists of the
--   following:
--   
--   <ul>
--   <li><tt>ConsistentRead</tt> - If <tt>true</tt>, a strongly consistent
--   read is used; if <tt>false</tt> (the default), an eventually
--   consistent read is used.</li>
--   <li><tt>ExpressionAttributeNames</tt> - One or more substitution
--   tokens for attribute names in the <tt>ProjectionExpression</tt>
--   parameter. The following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:<ul><li>To access an attribute whose
--   name conflicts with a DynamoDB reserved word.</li><li>To create a
--   placeholder for repeating occurrences of an attribute name in an
--   expression.</li><li>To prevent special characters in an attribute name
--   from being misinterpreted in an expression.</li></ul>Use the <b>#</b>
--   character in an expression to dereference an attribute name. For
--   example, consider the following attribute
--   name:<ul><li><pre>Percentile</pre></li></ul>The name of this attribute
--   conflicts with a reserved word, so it cannot be used directly in an
--   expression. (For the complete list of reserved words, see <a>Reserved
--   Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work
--   around this, you could specify the following for
--   <tt>ExpressionAttributeNames</tt>:<ul><li><pre>{"#P":"Percentile"}</pre></li></ul>You
--   could then use this substitution in an expression, as in this
--   example:<ul><li><pre>#P = :val</pre></li></ul>Tokens that begin with
--   the <b>:</b> character are /expression attribute values/, which are
--   placeholders for the actual value at runtime.For more information
--   about expression attribute names, see <a>Accessing Item Attributes</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.</li>
--   <li><tt>Keys</tt> - An array of primary key attribute values that
--   define specific items in the table. For each primary key, you must
--   provide <i>all</i> of the key attributes. For example, with a simple
--   primary key, you only need to provide the partition key value. For a
--   composite key, you must provide <i>both</i> the partition key value
--   and the sort key value.</li>
--   <li><tt>ProjectionExpression</tt> - A string that identifies one or
--   more attributes to retrieve from the table. These attributes can
--   include scalars, sets, or elements of a JSON document. The attributes
--   in the expression must be separated by commas.If no attribute names
--   are specified, then all attributes are returned. If any of the
--   requested attributes are not found, they do not appear in the
--   result.For more information, see <a>Accessing Item Attributes</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.</li>
--   <li><tt>AttributesToGet</tt> - This is a legacy parameter. Use
--   <tt>ProjectionExpression</tt> instead. For more information, see
--   <a>AttributesToGet</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.</li>
--   </ul>
newBatchGetItem :: BatchGetItem

-- | Represents the output of a <tt>BatchGetItem</tt> operation.
--   
--   <i>See:</i> <a>newBatchGetItemResponse</a> smart constructor.
data BatchGetItemResponse
BatchGetItemResponse' :: Maybe (HashMap Text KeysAndAttributes) -> Maybe (HashMap Text [HashMap Text AttributeValue]) -> Maybe [ConsumedCapacity] -> Int -> BatchGetItemResponse

-- | Create a value of <a>BatchGetItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:unprocessedKeys:BatchGetItemResponse'</a>,
--   <a>batchGetItemResponse_unprocessedKeys</a> - A map of tables and
--   their respective keys that were not processed with the current
--   response. The <tt>UnprocessedKeys</tt> value is in the same form as
--   <tt>RequestItems</tt>, so the value can be provided directly to a
--   subsequent <tt>BatchGetItem</tt> operation. For more information, see
--   <tt>RequestItems</tt> in the Request Parameters section.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>Keys</tt> - An array of primary key attribute values that
--   define specific items in the table.</li>
--   <li><tt>ProjectionExpression</tt> - One or more attributes to be
--   retrieved from the table or index. By default, all attributes are
--   returned. If a requested attribute is not found, it does not appear in
--   the result.</li>
--   <li><tt>ConsistentRead</tt> - The consistency of a read operation. If
--   set to <tt>true</tt>, then a strongly consistent read is used;
--   otherwise, an eventually consistent read is used.</li>
--   </ul>
--   
--   If there are no unprocessed keys remaining, the response contains an
--   empty <tt>UnprocessedKeys</tt> map.
--   
--   <a>$sel:responses:BatchGetItemResponse'</a>,
--   <a>batchGetItemResponse_responses</a> - A map of table name to a list
--   of items. Each object in <tt>Responses</tt> consists of a table name,
--   along with a map of attribute data consisting of the data type and
--   attribute value.
--   
--   <a>$sel:consumedCapacity:BatchGetItemResponse'</a>,
--   <a>batchGetItemResponse_consumedCapacity</a> - The read capacity units
--   consumed by the entire <tt>BatchGetItem</tt> operation.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>TableName</tt> - The table that consumed the provisioned
--   throughput.</li>
--   <li><tt>CapacityUnits</tt> - The total number of capacity units
--   consumed.</li>
--   </ul>
--   
--   <a>$sel:httpStatus:BatchGetItemResponse'</a>,
--   <a>batchGetItemResponse_httpStatus</a> - The response's http status
--   code.
newBatchGetItemResponse :: Int -> BatchGetItemResponse

-- | <i>See:</i> <a>newListBackups</a> smart constructor.
data ListBackups
ListBackups' :: Maybe POSIX -> Maybe POSIX -> Maybe Natural -> Maybe Text -> Maybe BackupTypeFilter -> Maybe Text -> ListBackups

-- | Create a value of <a>ListBackups</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeRangeUpperBound:ListBackups'</a>,
--   <a>listBackups_timeRangeUpperBound</a> - Only backups created before
--   this time are listed. <tt>TimeRangeUpperBound</tt> is exclusive.
--   
--   <a>$sel:timeRangeLowerBound:ListBackups'</a>,
--   <a>listBackups_timeRangeLowerBound</a> - Only backups created after
--   this time are listed. <tt>TimeRangeLowerBound</tt> is inclusive.
--   
--   <a>$sel:limit:ListBackups'</a>, <a>listBackups_limit</a> - Maximum
--   number of backups to return at once.
--   
--   <a>$sel:exclusiveStartBackupArn:ListBackups'</a>,
--   <a>listBackups_exclusiveStartBackupArn</a> -
--   <tt>LastEvaluatedBackupArn</tt> is the Amazon Resource Name (ARN) of
--   the backup last evaluated when the current page of results was
--   returned, inclusive of the current page of results. This value may be
--   specified as the <tt>ExclusiveStartBackupArn</tt> of a new
--   <tt>ListBackups</tt> operation in order to fetch the next page of
--   results.
--   
--   <a>$sel:backupType:ListBackups'</a>, <a>listBackups_backupType</a> -
--   The backups from the table specified by <tt>BackupType</tt> are
--   listed.
--   
--   Where <tt>BackupType</tt> can be:
--   
--   <ul>
--   <li><tt>USER</tt> - On-demand backup created by you.</li>
--   <li><tt>SYSTEM</tt> - On-demand backup automatically created by
--   DynamoDB.</li>
--   <li><tt>ALL</tt> - All types of on-demand backups (USER and
--   SYSTEM).</li>
--   </ul>
--   
--   <a>$sel:tableName:ListBackups'</a>, <a>listBackups_tableName</a> - The
--   backups from the table specified by <tt>TableName</tt> are listed.
newListBackups :: ListBackups

-- | <i>See:</i> <a>newListBackupsResponse</a> smart constructor.
data ListBackupsResponse
ListBackupsResponse' :: Maybe [BackupSummary] -> Maybe Text -> Int -> ListBackupsResponse

-- | Create a value of <a>ListBackupsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupSummaries:ListBackupsResponse'</a>,
--   <a>listBackupsResponse_backupSummaries</a> - List of
--   <tt>BackupSummary</tt> objects.
--   
--   <a>$sel:lastEvaluatedBackupArn:ListBackupsResponse'</a>,
--   <a>listBackupsResponse_lastEvaluatedBackupArn</a> - The ARN of the
--   backup last evaluated when the current page of results was returned,
--   inclusive of the current page of results. This value may be specified
--   as the <tt>ExclusiveStartBackupArn</tt> of a new <tt>ListBackups</tt>
--   operation in order to fetch the next page of results.
--   
--   If <tt>LastEvaluatedBackupArn</tt> is empty, then the last page of
--   results has been processed and there are no more results to be
--   retrieved.
--   
--   If <tt>LastEvaluatedBackupArn</tt> is not empty, this may or may not
--   indicate that there is more data to be returned. All results are
--   guaranteed to have been returned if and only if no value for
--   <tt>LastEvaluatedBackupArn</tt> is returned.
--   
--   <a>$sel:httpStatus:ListBackupsResponse'</a>,
--   <a>listBackupsResponse_httpStatus</a> - The response's http status
--   code.
newListBackupsResponse :: Int -> ListBackupsResponse

-- | <i>See:</i> <a>newDeleteBackup</a> smart constructor.
data DeleteBackup
DeleteBackup' :: Text -> DeleteBackup

-- | Create a value of <a>DeleteBackup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupArn:DeleteBackup'</a>, <a>deleteBackup_backupArn</a> -
--   The ARN associated with the backup.
newDeleteBackup :: Text -> DeleteBackup

-- | <i>See:</i> <a>newDeleteBackupResponse</a> smart constructor.
data DeleteBackupResponse
DeleteBackupResponse' :: Maybe BackupDescription -> Int -> DeleteBackupResponse

-- | Create a value of <a>DeleteBackupResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupDescription:DeleteBackupResponse'</a>,
--   <a>deleteBackupResponse_backupDescription</a> - Contains the
--   description of the backup created for the table.
--   
--   <a>$sel:httpStatus:DeleteBackupResponse'</a>,
--   <a>deleteBackupResponse_httpStatus</a> - The response's http status
--   code.
newDeleteBackupResponse :: Int -> DeleteBackupResponse

-- | <i>See:</i> <a>newCreateBackup</a> smart constructor.
data CreateBackup
CreateBackup' :: Text -> Text -> CreateBackup

-- | Create a value of <a>CreateBackup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:CreateBackup'</a>, <a>createBackup_tableName</a> -
--   The name of the table.
--   
--   <a>$sel:backupName:CreateBackup'</a>, <a>createBackup_backupName</a> -
--   Specified name for the backup.
newCreateBackup :: Text -> Text -> CreateBackup

-- | <i>See:</i> <a>newCreateBackupResponse</a> smart constructor.
data CreateBackupResponse
CreateBackupResponse' :: Maybe BackupDetails -> Int -> CreateBackupResponse

-- | Create a value of <a>CreateBackupResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupDetails:CreateBackupResponse'</a>,
--   <a>createBackupResponse_backupDetails</a> - Contains the details of
--   the backup created for the table.
--   
--   <a>$sel:httpStatus:CreateBackupResponse'</a>,
--   <a>createBackupResponse_httpStatus</a> - The response's http status
--   code.
newCreateBackupResponse :: Int -> CreateBackupResponse

-- | <i>See:</i> <a>newUpdateTableReplicaAutoScaling</a> smart constructor.
data UpdateTableReplicaAutoScaling
UpdateTableReplicaAutoScaling' :: Maybe (NonEmpty ReplicaAutoScalingUpdate) -> Maybe AutoScalingSettingsUpdate -> Maybe (NonEmpty GlobalSecondaryIndexAutoScalingUpdate) -> Text -> UpdateTableReplicaAutoScaling

-- | Create a value of <a>UpdateTableReplicaAutoScaling</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaUpdates:UpdateTableReplicaAutoScaling'</a>,
--   <a>updateTableReplicaAutoScaling_replicaUpdates</a> - Represents the
--   auto scaling settings of replicas of the table that will be modified.
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingUpdate:UpdateTableReplicaAutoScaling'</a>,
--   <a>updateTableReplicaAutoScaling_provisionedWriteCapacityAutoScalingUpdate</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:globalSecondaryIndexUpdates:UpdateTableReplicaAutoScaling'</a>,
--   <a>updateTableReplicaAutoScaling_globalSecondaryIndexUpdates</a> -
--   Represents the auto scaling settings of the global secondary indexes
--   of the replica to be updated.
--   
--   <a>$sel:tableName:UpdateTableReplicaAutoScaling'</a>,
--   <a>updateTableReplicaAutoScaling_tableName</a> - The name of the
--   global table to be updated.
newUpdateTableReplicaAutoScaling :: Text -> UpdateTableReplicaAutoScaling

-- | <i>See:</i> <a>newUpdateTableReplicaAutoScalingResponse</a> smart
--   constructor.
data UpdateTableReplicaAutoScalingResponse
UpdateTableReplicaAutoScalingResponse' :: Maybe TableAutoScalingDescription -> Int -> UpdateTableReplicaAutoScalingResponse

-- | Create a value of <a>UpdateTableReplicaAutoScalingResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:tableAutoScalingDescription:UpdateTableReplicaAutoScalingResponse'</a>,
--   <a>updateTableReplicaAutoScalingResponse_tableAutoScalingDescription</a>
--   - Returns information about the auto scaling settings of a table with
--   replicas.
--   
--   <a>$sel:httpStatus:UpdateTableReplicaAutoScalingResponse'</a>,
--   <a>updateTableReplicaAutoScalingResponse_httpStatus</a> - The
--   response's http status code.
newUpdateTableReplicaAutoScalingResponse :: Int -> UpdateTableReplicaAutoScalingResponse

-- | <i>See:</i> <a>newDescribeGlobalTableSettings</a> smart constructor.
data DescribeGlobalTableSettings
DescribeGlobalTableSettings' :: Text -> DescribeGlobalTableSettings

-- | Create a value of <a>DescribeGlobalTableSettings</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableName:DescribeGlobalTableSettings'</a>,
--   <a>describeGlobalTableSettings_globalTableName</a> - The name of the
--   global table to describe.
newDescribeGlobalTableSettings :: Text -> DescribeGlobalTableSettings

-- | <i>See:</i> <a>newDescribeGlobalTableSettingsResponse</a> smart
--   constructor.
data DescribeGlobalTableSettingsResponse
DescribeGlobalTableSettingsResponse' :: Maybe [ReplicaSettingsDescription] -> Maybe Text -> Int -> DescribeGlobalTableSettingsResponse

-- | Create a value of <a>DescribeGlobalTableSettingsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaSettings:DescribeGlobalTableSettingsResponse'</a>,
--   <a>describeGlobalTableSettingsResponse_replicaSettings</a> - The
--   Region-specific settings for the global table.
--   
--   <a>$sel:globalTableName:DescribeGlobalTableSettings'</a>,
--   <a>describeGlobalTableSettingsResponse_globalTableName</a> - The name
--   of the global table.
--   
--   <a>$sel:httpStatus:DescribeGlobalTableSettingsResponse'</a>,
--   <a>describeGlobalTableSettingsResponse_httpStatus</a> - The response's
--   http status code.
newDescribeGlobalTableSettingsResponse :: Int -> DescribeGlobalTableSettingsResponse

-- | <i>See:</i> <a>newListTagsOfResource</a> smart constructor.
data ListTagsOfResource
ListTagsOfResource' :: Maybe Text -> Text -> ListTagsOfResource

-- | Create a value of <a>ListTagsOfResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsOfResource'</a>,
--   <a>listTagsOfResource_nextToken</a> - An optional string that, if
--   supplied, must be copied from the output of a previous call to
--   ListTagOfResource. When provided in this manner, this API fetches the
--   next page of results.
--   
--   <a>$sel:resourceArn:ListTagsOfResource'</a>,
--   <a>listTagsOfResource_resourceArn</a> - The Amazon DynamoDB resource
--   with tags to be listed. This value is an Amazon Resource Name (ARN).
newListTagsOfResource :: Text -> ListTagsOfResource

-- | <i>See:</i> <a>newListTagsOfResourceResponse</a> smart constructor.
data ListTagsOfResourceResponse
ListTagsOfResourceResponse' :: Maybe Text -> Maybe [Tag] -> Int -> ListTagsOfResourceResponse

-- | Create a value of <a>ListTagsOfResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTagsOfResource'</a>,
--   <a>listTagsOfResourceResponse_nextToken</a> - If this value is
--   returned, there are additional results to be displayed. To retrieve
--   them, call ListTagsOfResource again, with NextToken set to this value.
--   
--   <a>$sel:tags:ListTagsOfResourceResponse'</a>,
--   <a>listTagsOfResourceResponse_tags</a> - The tags currently associated
--   with the Amazon DynamoDB resource.
--   
--   <a>$sel:httpStatus:ListTagsOfResourceResponse'</a>,
--   <a>listTagsOfResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsOfResourceResponse :: Int -> ListTagsOfResourceResponse

-- | <i>See:</i> <a>newDescribeGlobalTable</a> smart constructor.
data DescribeGlobalTable
DescribeGlobalTable' :: Text -> DescribeGlobalTable

-- | Create a value of <a>DescribeGlobalTable</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableName:DescribeGlobalTable'</a>,
--   <a>describeGlobalTable_globalTableName</a> - The name of the global
--   table.
newDescribeGlobalTable :: Text -> DescribeGlobalTable

-- | <i>See:</i> <a>newDescribeGlobalTableResponse</a> smart constructor.
data DescribeGlobalTableResponse
DescribeGlobalTableResponse' :: Maybe GlobalTableDescription -> Int -> DescribeGlobalTableResponse

-- | Create a value of <a>DescribeGlobalTableResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableDescription:DescribeGlobalTableResponse'</a>,
--   <a>describeGlobalTableResponse_globalTableDescription</a> - Contains
--   the details of the global table.
--   
--   <a>$sel:httpStatus:DescribeGlobalTableResponse'</a>,
--   <a>describeGlobalTableResponse_httpStatus</a> - The response's http
--   status code.
newDescribeGlobalTableResponse :: Int -> DescribeGlobalTableResponse

-- | Represents the input of a <tt>DescribeTable</tt> operation.
--   
--   <i>See:</i> <a>newDescribeTable</a> smart constructor.
data DescribeTable
DescribeTable' :: Text -> DescribeTable

-- | Create a value of <a>DescribeTable</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DescribeTable'</a>, <a>describeTable_tableName</a> -
--   The name of the table to describe.
newDescribeTable :: Text -> DescribeTable

-- | Represents the output of a <tt>DescribeTable</tt> operation.
--   
--   <i>See:</i> <a>newDescribeTableResponse</a> smart constructor.
data DescribeTableResponse
DescribeTableResponse' :: Maybe TableDescription -> Int -> DescribeTableResponse

-- | Create a value of <a>DescribeTableResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:table:DescribeTableResponse'</a>,
--   <a>describeTableResponse_table</a> - The properties of the table.
--   
--   <a>$sel:httpStatus:DescribeTableResponse'</a>,
--   <a>describeTableResponse_httpStatus</a> - The response's http status
--   code.
newDescribeTableResponse :: Int -> DescribeTableResponse

-- | Represents the input of a <tt>DescribeLimits</tt> operation. Has no
--   content.
--   
--   <i>See:</i> <a>newDescribeLimits</a> smart constructor.
data DescribeLimits
DescribeLimits' :: DescribeLimits

-- | Create a value of <a>DescribeLimits</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDescribeLimits :: DescribeLimits

-- | Represents the output of a <tt>DescribeLimits</tt> operation.
--   
--   <i>See:</i> <a>newDescribeLimitsResponse</a> smart constructor.
data DescribeLimitsResponse
DescribeLimitsResponse' :: Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Int -> DescribeLimitsResponse

-- | Create a value of <a>DescribeLimitsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableMaxWriteCapacityUnits:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_tableMaxWriteCapacityUnits</a> - The maximum
--   write capacity units that your account allows you to provision for a
--   new table that you are creating in this Region, including the write
--   capacity units provisioned for its global secondary indexes (GSIs).
--   
--   <a>$sel:tableMaxReadCapacityUnits:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_tableMaxReadCapacityUnits</a> - The maximum
--   read capacity units that your account allows you to provision for a
--   new table that you are creating in this Region, including the read
--   capacity units provisioned for its global secondary indexes (GSIs).
--   
--   <a>$sel:accountMaxWriteCapacityUnits:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_accountMaxWriteCapacityUnits</a> - The
--   maximum total write capacity units that your account allows you to
--   provision across all of your tables in this Region.
--   
--   <a>$sel:accountMaxReadCapacityUnits:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_accountMaxReadCapacityUnits</a> - The
--   maximum total read capacity units that your account allows you to
--   provision across all of your tables in this Region.
--   
--   <a>$sel:httpStatus:DescribeLimitsResponse'</a>,
--   <a>describeLimitsResponse_httpStatus</a> - The response's http status
--   code.
newDescribeLimitsResponse :: Int -> DescribeLimitsResponse

-- | <i>See:</i> <a>newExecuteTransaction</a> smart constructor.
data ExecuteTransaction
ExecuteTransaction' :: Maybe Text -> NonEmpty ParameterizedStatement -> ExecuteTransaction

-- | Create a value of <a>ExecuteTransaction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientRequestToken:ExecuteTransaction'</a>,
--   <a>executeTransaction_clientRequestToken</a> - Set this value to get
--   remaining results, if <tt>NextToken</tt> was returned in the statement
--   response.
--   
--   <a>$sel:transactStatements:ExecuteTransaction'</a>,
--   <a>executeTransaction_transactStatements</a> - The list of PartiQL
--   statements representing the transaction to run.
newExecuteTransaction :: NonEmpty ParameterizedStatement -> ExecuteTransaction

-- | <i>See:</i> <a>newExecuteTransactionResponse</a> smart constructor.
data ExecuteTransactionResponse
ExecuteTransactionResponse' :: Maybe (NonEmpty ItemResponse) -> Int -> ExecuteTransactionResponse

-- | Create a value of <a>ExecuteTransactionResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responses:ExecuteTransactionResponse'</a>,
--   <a>executeTransactionResponse_responses</a> - The response to a
--   PartiQL transaction.
--   
--   <a>$sel:httpStatus:ExecuteTransactionResponse'</a>,
--   <a>executeTransactionResponse_httpStatus</a> - The response's http
--   status code.
newExecuteTransactionResponse :: Int -> ExecuteTransactionResponse

-- | Represents the input of a <tt>GetItem</tt> operation.
--   
--   <i>See:</i> <a>newGetItem</a> smart constructor.
data GetItem
GetItem' :: Maybe Text -> Maybe (NonEmpty Text) -> Maybe (HashMap Text Text) -> Maybe Bool -> Maybe ReturnConsumedCapacity -> Text -> HashMap Text AttributeValue -> GetItem

-- | Create a value of <a>GetItem</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionExpression:GetItem'</a>,
--   <a>getItem_projectionExpression</a> - A string that identifies one or
--   more attributes to retrieve from the table. These attributes can
--   include scalars, sets, or elements of a JSON document. The attributes
--   in the expression must be separated by commas.
--   
--   If no attribute names are specified, then all attributes are returned.
--   If any of the requested attributes are not found, they do not appear
--   in the result.
--   
--   For more information, see <a>Specifying Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributesToGet:GetItem'</a>, <a>getItem_attributesToGet</a> -
--   This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:expressionAttributeNames:GetItem'</a>,
--   <a>getItem_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression. The following are some
--   use cases for using <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:consistentRead:GetItem'</a>, <a>getItem_consistentRead</a> -
--   Determines the read consistency model: If set to <tt>true</tt>, then
--   the operation uses strongly consistent reads; otherwise, the operation
--   uses eventually consistent reads.
--   
--   <a>$sel:returnConsumedCapacity:GetItem'</a>,
--   <a>getItem_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:tableName:GetItem'</a>, <a>getItem_tableName</a> - The name of
--   the table containing the requested item.
--   
--   <a>$sel:key:GetItem'</a>, <a>getItem_key</a> - A map of attribute
--   names to <tt>AttributeValue</tt> objects, representing the primary key
--   of the item to retrieve.
--   
--   For the primary key, you must provide all of the attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for both the partition key and the sort key.
newGetItem :: Text -> GetItem

-- | Represents the output of a <tt>GetItem</tt> operation.
--   
--   <i>See:</i> <a>newGetItemResponse</a> smart constructor.
data GetItemResponse
GetItemResponse' :: Maybe ConsumedCapacity -> Maybe (HashMap Text AttributeValue) -> Int -> GetItemResponse

-- | Create a value of <a>GetItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consumedCapacity:GetItemResponse'</a>,
--   <a>getItemResponse_consumedCapacity</a> - The capacity units consumed
--   by the <tt>GetItem</tt> operation. The data returned includes the
--   total provisioned throughput consumed, along with statistics for the
--   table and any indexes involved in the operation.
--   <tt>ConsumedCapacity</tt> is only returned if the
--   <tt>ReturnConsumedCapacity</tt> parameter was specified. For more
--   information, see <a>Read/Write Capacity Mode</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:item:GetItemResponse'</a>, <a>getItemResponse_item</a> - A map
--   of attribute names to <tt>AttributeValue</tt> objects, as specified by
--   <tt>ProjectionExpression</tt>.
--   
--   <a>$sel:httpStatus:GetItemResponse'</a>,
--   <a>getItemResponse_httpStatus</a> - The response's http status code.
newGetItemResponse :: Int -> GetItemResponse

-- | <i>See:</i> <a>newDescribeBackup</a> smart constructor.
data DescribeBackup
DescribeBackup' :: Text -> DescribeBackup

-- | Create a value of <a>DescribeBackup</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupArn:DescribeBackup'</a>, <a>describeBackup_backupArn</a>
--   - The Amazon Resource Name (ARN) associated with the backup.
newDescribeBackup :: Text -> DescribeBackup

-- | <i>See:</i> <a>newDescribeBackupResponse</a> smart constructor.
data DescribeBackupResponse
DescribeBackupResponse' :: Maybe BackupDescription -> Int -> DescribeBackupResponse

-- | Create a value of <a>DescribeBackupResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupDescription:DescribeBackupResponse'</a>,
--   <a>describeBackupResponse_backupDescription</a> - Contains the
--   description of the backup created for the table.
--   
--   <a>$sel:httpStatus:DescribeBackupResponse'</a>,
--   <a>describeBackupResponse_httpStatus</a> - The response's http status
--   code.
newDescribeBackupResponse :: Int -> DescribeBackupResponse

-- | <i>See:</i> <a>newBatchExecuteStatement</a> smart constructor.
data BatchExecuteStatement
BatchExecuteStatement' :: NonEmpty BatchStatementRequest -> BatchExecuteStatement

-- | Create a value of <a>BatchExecuteStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:statements:BatchExecuteStatement'</a>,
--   <a>batchExecuteStatement_statements</a> - The list of PartiQL
--   statements representing the batch to run.
newBatchExecuteStatement :: NonEmpty BatchStatementRequest -> BatchExecuteStatement

-- | <i>See:</i> <a>newBatchExecuteStatementResponse</a> smart constructor.
data BatchExecuteStatementResponse
BatchExecuteStatementResponse' :: Maybe [BatchStatementResponse] -> Int -> BatchExecuteStatementResponse

-- | Create a value of <a>BatchExecuteStatementResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responses:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_responses</a> - The response to each
--   PartiQL statement in the batch.
--   
--   <a>$sel:httpStatus:BatchExecuteStatementResponse'</a>,
--   <a>batchExecuteStatementResponse_httpStatus</a> - The response's http
--   status code.
newBatchExecuteStatementResponse :: Int -> BatchExecuteStatementResponse

-- | <i>See:</i> <a>newDescribeTableReplicaAutoScaling</a> smart
--   constructor.
data DescribeTableReplicaAutoScaling
DescribeTableReplicaAutoScaling' :: Text -> DescribeTableReplicaAutoScaling

-- | Create a value of <a>DescribeTableReplicaAutoScaling</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DescribeTableReplicaAutoScaling'</a>,
--   <a>describeTableReplicaAutoScaling_tableName</a> - The name of the
--   table.
newDescribeTableReplicaAutoScaling :: Text -> DescribeTableReplicaAutoScaling

-- | <i>See:</i> <a>newDescribeTableReplicaAutoScalingResponse</a> smart
--   constructor.
data DescribeTableReplicaAutoScalingResponse
DescribeTableReplicaAutoScalingResponse' :: Maybe TableAutoScalingDescription -> Int -> DescribeTableReplicaAutoScalingResponse

-- | Create a value of <a>DescribeTableReplicaAutoScalingResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:tableAutoScalingDescription:DescribeTableReplicaAutoScalingResponse'</a>,
--   <a>describeTableReplicaAutoScalingResponse_tableAutoScalingDescription</a>
--   - Represents the auto scaling properties of the table.
--   
--   <a>$sel:httpStatus:DescribeTableReplicaAutoScalingResponse'</a>,
--   <a>describeTableReplicaAutoScalingResponse_httpStatus</a> - The
--   response's http status code.
newDescribeTableReplicaAutoScalingResponse :: Int -> DescribeTableReplicaAutoScalingResponse

-- | <i>See:</i> <a>newUpdateGlobalTableSettings</a> smart constructor.
data UpdateGlobalTableSettings
UpdateGlobalTableSettings' :: Maybe AutoScalingSettingsUpdate -> Maybe BillingMode -> Maybe Natural -> Maybe (NonEmpty ReplicaSettingsUpdate) -> Maybe (NonEmpty GlobalTableGlobalSecondaryIndexSettingsUpdate) -> Text -> UpdateGlobalTableSettings

-- | Create a value of <a>UpdateGlobalTableSettings</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettings_globalTableProvisionedWriteCapacityAutoScalingSettingsUpdate</a>
--   - Auto scaling settings for managing provisioned write capacity for
--   the global table.
--   
--   <a>$sel:globalTableBillingMode:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettings_globalTableBillingMode</a> - The billing
--   mode of the global table. If <tt>GlobalTableBillingMode</tt> is not
--   specified, the global table defaults to <tt>PROVISIONED</tt> capacity
--   billing mode.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
--   
--   
--   <a>$sel:globalTableProvisionedWriteCapacityUnits:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettings_globalTableProvisionedWriteCapacityUnits</a>
--   - The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
--   
--   <a>$sel:replicaSettingsUpdate:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettings_replicaSettingsUpdate</a> - Represents
--   the settings for a global table in a Region that will be modified.
--   
--   
--   <a>$sel:globalTableGlobalSecondaryIndexSettingsUpdate:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettings_globalTableGlobalSecondaryIndexSettingsUpdate</a>
--   - Represents the settings of a global secondary index for a global
--   table that will be modified.
--   
--   <a>$sel:globalTableName:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettings_globalTableName</a> - The name of the
--   global table
newUpdateGlobalTableSettings :: Text -> UpdateGlobalTableSettings

-- | <i>See:</i> <a>newUpdateGlobalTableSettingsResponse</a> smart
--   constructor.
data UpdateGlobalTableSettingsResponse
UpdateGlobalTableSettingsResponse' :: Maybe [ReplicaSettingsDescription] -> Maybe Text -> Int -> UpdateGlobalTableSettingsResponse

-- | Create a value of <a>UpdateGlobalTableSettingsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaSettings:UpdateGlobalTableSettingsResponse'</a>,
--   <a>updateGlobalTableSettingsResponse_replicaSettings</a> - The
--   Region-specific settings for the global table.
--   
--   <a>$sel:globalTableName:UpdateGlobalTableSettings'</a>,
--   <a>updateGlobalTableSettingsResponse_globalTableName</a> - The name of
--   the global table.
--   
--   <a>$sel:httpStatus:UpdateGlobalTableSettingsResponse'</a>,
--   <a>updateGlobalTableSettingsResponse_httpStatus</a> - The response's
--   http status code.
newUpdateGlobalTableSettingsResponse :: Int -> UpdateGlobalTableSettingsResponse

-- | <i>See:</i> <a>newEnableKinesisStreamingDestination</a> smart
--   constructor.
data EnableKinesisStreamingDestination
EnableKinesisStreamingDestination' :: Text -> Text -> EnableKinesisStreamingDestination

-- | Create a value of <a>EnableKinesisStreamingDestination</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:EnableKinesisStreamingDestination'</a>,
--   <a>enableKinesisStreamingDestination_tableName</a> - The name of the
--   DynamoDB table.
--   
--   <a>$sel:streamArn:EnableKinesisStreamingDestination'</a>,
--   <a>enableKinesisStreamingDestination_streamArn</a> - The ARN for a
--   Kinesis data stream.
newEnableKinesisStreamingDestination :: Text -> Text -> EnableKinesisStreamingDestination

-- | <i>See:</i> <a>newKinesisStreamingDestinationOutput</a> smart
--   constructor.
data KinesisStreamingDestinationOutput
KinesisStreamingDestinationOutput' :: Maybe DestinationStatus -> Maybe Text -> Maybe Text -> KinesisStreamingDestinationOutput

-- | Create a value of <a>KinesisStreamingDestinationOutput</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:destinationStatus:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_destinationStatus</a> - The
--   current status of the replication.
--   
--   <a>$sel:streamArn:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_streamArn</a> - The ARN for the
--   specific Kinesis data stream.
--   
--   <a>$sel:tableName:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_tableName</a> - The name of the
--   table being modified.
newKinesisStreamingDestinationOutput :: KinesisStreamingDestinationOutput

-- | <i>See:</i> <a>newTransactGetItems</a> smart constructor.
data TransactGetItems
TransactGetItems' :: Maybe ReturnConsumedCapacity -> NonEmpty TransactGetItem -> TransactGetItems

-- | Create a value of <a>TransactGetItems</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:returnConsumedCapacity:TransactGetItems'</a>,
--   <a>transactGetItems_returnConsumedCapacity</a> - A value of
--   <tt>TOTAL</tt> causes consumed capacity information to be returned,
--   and a value of <tt>NONE</tt> prevents that information from being
--   returned. No other value is valid.
--   
--   <a>$sel:transactItems:TransactGetItems'</a>,
--   <a>transactGetItems_transactItems</a> - An ordered array of up to 25
--   <tt>TransactGetItem</tt> objects, each of which contains a
--   <tt>Get</tt> structure.
newTransactGetItems :: NonEmpty TransactGetItem -> TransactGetItems

-- | <i>See:</i> <a>newTransactGetItemsResponse</a> smart constructor.
data TransactGetItemsResponse
TransactGetItemsResponse' :: Maybe (NonEmpty ItemResponse) -> Maybe [ConsumedCapacity] -> Int -> TransactGetItemsResponse

-- | Create a value of <a>TransactGetItemsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:responses:TransactGetItemsResponse'</a>,
--   <a>transactGetItemsResponse_responses</a> - An ordered array of up to
--   25 <tt>ItemResponse</tt> objects, each of which corresponds to the
--   <tt>TransactGetItem</tt> object in the same position in the
--   <i>TransactItems</i> array. Each <tt>ItemResponse</tt> object contains
--   a Map of the name-value pairs that are the projected attributes of the
--   requested item.
--   
--   If a requested item could not be retrieved, the corresponding
--   <tt>ItemResponse</tt> object is Null, or if the requested item has no
--   projected attributes, the corresponding <tt>ItemResponse</tt> object
--   is an empty Map.
--   
--   <a>$sel:consumedCapacity:TransactGetItemsResponse'</a>,
--   <a>transactGetItemsResponse_consumedCapacity</a> - If the
--   <i>ReturnConsumedCapacity</i> value was <tt>TOTAL</tt>, this is an
--   array of <tt>ConsumedCapacity</tt> objects, one for each table
--   addressed by <tt>TransactGetItem</tt> objects in the
--   <i>TransactItems</i> parameter. These <tt>ConsumedCapacity</tt>
--   objects report the read-capacity units consumed by the
--   <tt>TransactGetItems</tt> call in that table.
--   
--   <a>$sel:httpStatus:TransactGetItemsResponse'</a>,
--   <a>transactGetItemsResponse_httpStatus</a> - The response's http
--   status code.
newTransactGetItemsResponse :: Int -> TransactGetItemsResponse

-- | <i>See:</i> <a>newListContributorInsights</a> smart constructor.
data ListContributorInsights
ListContributorInsights' :: Maybe Text -> Maybe Int -> Maybe Text -> ListContributorInsights

-- | Create a value of <a>ListContributorInsights</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListContributorInsights'</a>,
--   <a>listContributorInsights_nextToken</a> - A token to for the desired
--   page, if there is one.
--   
--   <a>$sel:maxResults:ListContributorInsights'</a>,
--   <a>listContributorInsights_maxResults</a> - Maximum number of results
--   to return per page.
--   
--   <a>$sel:tableName:ListContributorInsights'</a>,
--   <a>listContributorInsights_tableName</a> - The name of the table.
newListContributorInsights :: ListContributorInsights

-- | <i>See:</i> <a>newListContributorInsightsResponse</a> smart
--   constructor.
data ListContributorInsightsResponse
ListContributorInsightsResponse' :: Maybe [ContributorInsightsSummary] -> Maybe Text -> Int -> ListContributorInsightsResponse

-- | Create a value of <a>ListContributorInsightsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:contributorInsightsSummaries:ListContributorInsightsResponse'</a>,
--   <a>listContributorInsightsResponse_contributorInsightsSummaries</a> -
--   A list of ContributorInsightsSummary.
--   
--   <a>$sel:nextToken:ListContributorInsights'</a>,
--   <a>listContributorInsightsResponse_nextToken</a> - A token to go to
--   the next page if there is one.
--   
--   <a>$sel:httpStatus:ListContributorInsightsResponse'</a>,
--   <a>listContributorInsightsResponse_httpStatus</a> - The response's
--   http status code.
newListContributorInsightsResponse :: Int -> ListContributorInsightsResponse

-- | Represents the input of a <tt>BatchWriteItem</tt> operation.
--   
--   <i>See:</i> <a>newBatchWriteItem</a> smart constructor.
data BatchWriteItem
BatchWriteItem' :: Maybe ReturnConsumedCapacity -> Maybe ReturnItemCollectionMetrics -> HashMap Text (NonEmpty WriteRequest) -> BatchWriteItem

-- | Create a value of <a>BatchWriteItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:returnConsumedCapacity:BatchWriteItem'</a>,
--   <a>batchWriteItem_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:returnItemCollectionMetrics:BatchWriteItem'</a>,
--   <a>batchWriteItem_returnItemCollectionMetrics</a> - Determines whether
--   item collection metrics are returned. If set to <tt>SIZE</tt>, the
--   response includes statistics about item collections, if any, that were
--   modified during the operation are returned in the response. If set to
--   <tt>NONE</tt> (the default), no statistics are returned.
--   
--   <a>$sel:requestItems:BatchWriteItem'</a>,
--   <a>batchWriteItem_requestItems</a> - A map of one or more table names
--   and, for each table, a list of operations to be performed
--   (<tt>DeleteRequest</tt> or <tt>PutRequest</tt>). Each element in the
--   map consists of the following:
--   
--   <ul>
--   <li><tt>DeleteRequest</tt> - Perform a <tt>DeleteItem</tt> operation
--   on the specified item. The item to be deleted is identified by a
--   <tt>Key</tt> subelement:<ul><li><tt>Key</tt> - A map of primary key
--   attribute values that uniquely identify the item. Each entry in this
--   map consists of an attribute name and an attribute value. For each
--   primary key, you must provide <i>all</i> of the key attributes. For
--   example, with a simple primary key, you only need to provide a value
--   for the partition key. For a composite primary key, you must provide
--   values for <i>both</i> the partition key and the sort
--   key.</li></ul></li>
--   <li><tt>PutRequest</tt> - Perform a <tt>PutItem</tt> operation on the
--   specified item. The item to be put is identified by an <tt>Item</tt>
--   subelement:<ul><li><tt>Item</tt> - A map of attributes and their
--   values. Each entry in this map consists of an attribute name and an
--   attribute value. Attribute values must not be null; string and binary
--   type attributes must have lengths greater than zero; and set type
--   attributes must not be empty. Requests that contain empty values are
--   rejected with a <tt>ValidationException</tt> exception.If you specify
--   any attributes that are part of an index key, then the data types for
--   those attributes must match those of the schema in the table's
--   attribute definition.</li></ul></li>
--   </ul>
newBatchWriteItem :: BatchWriteItem

-- | Represents the output of a <tt>BatchWriteItem</tt> operation.
--   
--   <i>See:</i> <a>newBatchWriteItemResponse</a> smart constructor.
data BatchWriteItemResponse
BatchWriteItemResponse' :: Maybe (HashMap Text [ItemCollectionMetrics]) -> Maybe [ConsumedCapacity] -> Maybe (HashMap Text (NonEmpty WriteRequest)) -> Int -> BatchWriteItemResponse

-- | Create a value of <a>BatchWriteItemResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionMetrics:BatchWriteItemResponse'</a>,
--   <a>batchWriteItemResponse_itemCollectionMetrics</a> - A list of tables
--   that were processed by <tt>BatchWriteItem</tt> and, for each table,
--   information about any item collections that were affected by
--   individual <tt>DeleteItem</tt> or <tt>PutItem</tt> operations.
--   
--   Each entry consists of the following subelements:
--   
--   <ul>
--   <li><tt>ItemCollectionKey</tt> - The partition key value of the item
--   collection. This is the same as the partition key value of the
--   item.</li>
--   <li><tt>SizeEstimateRangeGB</tt> - An estimate of item collection
--   size, expressed in GB. This is a two-element array containing a lower
--   bound and an upper bound for the estimate. The estimate includes the
--   size of all the items in the table, plus the size of all attributes
--   projected into all of the local secondary indexes on the table. Use
--   this estimate to measure whether a local secondary index is
--   approaching its size limit.The estimate is subject to change over
--   time; therefore, do not rely on the precision or accuracy of the
--   estimate.</li>
--   </ul>
--   
--   <a>$sel:consumedCapacity:BatchWriteItemResponse'</a>,
--   <a>batchWriteItemResponse_consumedCapacity</a> - The capacity units
--   consumed by the entire <tt>BatchWriteItem</tt> operation.
--   
--   Each element consists of:
--   
--   <ul>
--   <li><tt>TableName</tt> - The table that consumed the provisioned
--   throughput.</li>
--   <li><tt>CapacityUnits</tt> - The total number of capacity units
--   consumed.</li>
--   </ul>
--   
--   <a>$sel:unprocessedItems:BatchWriteItemResponse'</a>,
--   <a>batchWriteItemResponse_unprocessedItems</a> - A map of tables and
--   requests against those tables that were not processed. The
--   <tt>UnprocessedItems</tt> value is in the same form as
--   <tt>RequestItems</tt>, so you can provide this value directly to a
--   subsequent <tt>BatchGetItem</tt> operation. For more information, see
--   <tt>RequestItems</tt> in the Request Parameters section.
--   
--   Each <tt>UnprocessedItems</tt> entry consists of a table name and, for
--   that table, a list of operations to perform (<tt>DeleteRequest</tt> or
--   <tt>PutRequest</tt>).
--   
--   <ul>
--   <li><tt>DeleteRequest</tt> - Perform a <tt>DeleteItem</tt> operation
--   on the specified item. The item to be deleted is identified by a
--   <tt>Key</tt> subelement:<ul><li><tt>Key</tt> - A map of primary key
--   attribute values that uniquely identify the item. Each entry in this
--   map consists of an attribute name and an attribute
--   value.</li></ul></li>
--   <li><tt>PutRequest</tt> - Perform a <tt>PutItem</tt> operation on the
--   specified item. The item to be put is identified by an <tt>Item</tt>
--   subelement:<ul><li><tt>Item</tt> - A map of attributes and their
--   values. Each entry in this map consists of an attribute name and an
--   attribute value. Attribute values must not be null; string and binary
--   type attributes must have lengths greater than zero; and set type
--   attributes must not be empty. Requests that contain empty values will
--   be rejected with a <tt>ValidationException</tt> exception.If you
--   specify any attributes that are part of an index key, then the data
--   types for those attributes must match those of the schema in the
--   table's attribute definition.</li></ul></li>
--   </ul>
--   
--   If there are no unprocessed items remaining, the response contains an
--   empty <tt>UnprocessedItems</tt> map.
--   
--   <a>$sel:httpStatus:BatchWriteItemResponse'</a>,
--   <a>batchWriteItemResponse_httpStatus</a> - The response's http status
--   code.
newBatchWriteItemResponse :: Int -> BatchWriteItemResponse

-- | <i>See:</i> <a>newExportTableToPointInTime</a> smart constructor.
data ExportTableToPointInTime
ExportTableToPointInTime' :: Maybe Text -> Maybe ExportFormat -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe S3SseAlgorithm -> Maybe Text -> Text -> Text -> ExportTableToPointInTime

-- | Create a value of <a>ExportTableToPointInTime</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:s3BucketOwner:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_s3BucketOwner</a> - The ID of the AWS
--   account that owns the bucket the export will be stored in.
--   
--   <a>$sel:exportFormat:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_exportFormat</a> - The format for the
--   exported data. Valid values for <tt>ExportFormat</tt> are
--   <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
--   
--   <a>$sel:s3SseKmsKeyId:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_s3SseKmsKeyId</a> - The ID of the AWS KMS
--   managed key used to encrypt the S3 bucket where export data will be
--   stored (if applicable).
--   
--   <a>$sel:clientToken:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_clientToken</a> - Providing a
--   <tt>ClientToken</tt> makes the call to
--   <tt>ExportTableToPointInTimeInput</tt> idempotent, meaning that
--   multiple identical calls have the same effect as one single call.
--   
--   A client token is valid for 8 hours after the first request that uses
--   it is completed. After 8 hours, any request with the same client token
--   is treated as a new request. Do not resubmit the same request with the
--   same client token for more than 8 hours, or the result might not be
--   idempotent.
--   
--   If you submit a request with the same client token but a change in
--   other parameters within the 8-hour idempotency window, DynamoDB
--   returns an <tt>IdempotentParameterMismatch</tt> exception.
--   
--   <a>$sel:exportTime:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_exportTime</a> - Time in the past from
--   which to export table data. The table export will be a snapshot of the
--   table's state at this point in time.
--   
--   <a>$sel:s3SseAlgorithm:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_s3SseAlgorithm</a> - Type of encryption
--   used on the bucket where export data will be stored. Valid values for
--   <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
--   
--   <a>$sel:s3Prefix:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_s3Prefix</a> - The Amazon S3 bucket prefix
--   to use as the file name and path of the exported snapshot.
--   
--   <a>$sel:tableArn:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_tableArn</a> - The Amazon Resource Name
--   (ARN) associated with the table to export.
--   
--   <a>$sel:s3Bucket:ExportTableToPointInTime'</a>,
--   <a>exportTableToPointInTime_s3Bucket</a> - The name of the Amazon S3
--   bucket to export the snapshot to.
newExportTableToPointInTime :: Text -> Text -> ExportTableToPointInTime

-- | <i>See:</i> <a>newExportTableToPointInTimeResponse</a> smart
--   constructor.
data ExportTableToPointInTimeResponse
ExportTableToPointInTimeResponse' :: Maybe ExportDescription -> Int -> ExportTableToPointInTimeResponse

-- | Create a value of <a>ExportTableToPointInTimeResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exportDescription:ExportTableToPointInTimeResponse'</a>,
--   <a>exportTableToPointInTimeResponse_exportDescription</a> - Contains a
--   description of the table export.
--   
--   <a>$sel:httpStatus:ExportTableToPointInTimeResponse'</a>,
--   <a>exportTableToPointInTimeResponse_httpStatus</a> - The response's
--   http status code.
newExportTableToPointInTimeResponse :: Int -> ExportTableToPointInTimeResponse

-- | <i>See:</i> <a>newTransactWriteItems</a> smart constructor.
data TransactWriteItems
TransactWriteItems' :: Maybe ReturnConsumedCapacity -> Maybe ReturnItemCollectionMetrics -> Maybe Text -> NonEmpty TransactWriteItem -> TransactWriteItems

-- | Create a value of <a>TransactWriteItems</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:returnConsumedCapacity:TransactWriteItems'</a>,
--   <a>transactWriteItems_returnConsumedCapacity</a> - Undocumented
--   member.
--   
--   <a>$sel:returnItemCollectionMetrics:TransactWriteItems'</a>,
--   <a>transactWriteItems_returnItemCollectionMetrics</a> - Determines
--   whether item collection metrics are returned. If set to <tt>SIZE</tt>,
--   the response includes statistics about item collections (if any), that
--   were modified during the operation and are returned in the response.
--   If set to <tt>NONE</tt> (the default), no statistics are returned.
--   
--   <a>$sel:clientRequestToken:TransactWriteItems'</a>,
--   <a>transactWriteItems_clientRequestToken</a> - Providing a
--   <tt>ClientRequestToken</tt> makes the call to
--   <tt>TransactWriteItems</tt> idempotent, meaning that multiple
--   identical calls have the same effect as one single call.
--   
--   Although multiple identical calls using the same client request token
--   produce the same result on the server (no side effects), the responses
--   to the calls might not be the same. If the
--   <tt>ReturnConsumedCapacity&gt;</tt> parameter is set, then the initial
--   <tt>TransactWriteItems</tt> call returns the amount of write capacity
--   units consumed in making the changes. Subsequent
--   <tt>TransactWriteItems</tt> calls with the same client token return
--   the number of read capacity units consumed in reading the item.
--   
--   A client request token is valid for 10 minutes after the first request
--   that uses it is completed. After 10 minutes, any request with the same
--   client token is treated as a new request. Do not resubmit the same
--   request with the same client token for more than 10 minutes, or the
--   result might not be idempotent.
--   
--   If you submit a request with the same client token but a change in
--   other parameters within the 10-minute idempotency window, DynamoDB
--   returns an <tt>IdempotentParameterMismatch</tt> exception.
--   
--   <a>$sel:transactItems:TransactWriteItems'</a>,
--   <a>transactWriteItems_transactItems</a> - An ordered array of up to 25
--   <tt>TransactWriteItem</tt> objects, each of which contains a
--   <tt>ConditionCheck</tt>, <tt>Put</tt>, <tt>Update</tt>, or
--   <tt>Delete</tt> object. These can operate on items in different
--   tables, but the tables must reside in the same AWS account and Region,
--   and no two of them can operate on the same item.
newTransactWriteItems :: NonEmpty TransactWriteItem -> TransactWriteItems

-- | <i>See:</i> <a>newTransactWriteItemsResponse</a> smart constructor.
data TransactWriteItemsResponse
TransactWriteItemsResponse' :: Maybe (HashMap Text [ItemCollectionMetrics]) -> Maybe [ConsumedCapacity] -> Int -> TransactWriteItemsResponse

-- | Create a value of <a>TransactWriteItemsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionMetrics:TransactWriteItemsResponse'</a>,
--   <a>transactWriteItemsResponse_itemCollectionMetrics</a> - A list of
--   tables that were processed by <tt>TransactWriteItems</tt> and, for
--   each table, information about any item collections that were affected
--   by individual <tt>UpdateItem</tt>, <tt>PutItem</tt>, or
--   <tt>DeleteItem</tt> operations.
--   
--   <a>$sel:consumedCapacity:TransactWriteItemsResponse'</a>,
--   <a>transactWriteItemsResponse_consumedCapacity</a> - The capacity
--   units consumed by the entire <tt>TransactWriteItems</tt> operation.
--   The values of the list are ordered according to the ordering of the
--   <tt>TransactItems</tt> request parameter.
--   
--   <a>$sel:httpStatus:TransactWriteItemsResponse'</a>,
--   <a>transactWriteItemsResponse_httpStatus</a> - The response's http
--   status code.
newTransactWriteItemsResponse :: Int -> TransactWriteItemsResponse

-- | Represents the input of a <tt>ListTables</tt> operation.
--   
--   <i>See:</i> <a>newListTables</a> smart constructor.
data ListTables
ListTables' :: Maybe Text -> Maybe Natural -> ListTables

-- | Create a value of <a>ListTables</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exclusiveStartTableName:ListTables'</a>,
--   <a>listTables_exclusiveStartTableName</a> - The first table name that
--   this operation will evaluate. Use the value that was returned for
--   <tt>LastEvaluatedTableName</tt> in a previous operation, so that you
--   can obtain the next page of results.
--   
--   <a>$sel:limit:ListTables'</a>, <a>listTables_limit</a> - A maximum
--   number of table names to return. If this parameter is not specified,
--   the limit is 100.
newListTables :: ListTables

-- | Represents the output of a <tt>ListTables</tt> operation.
--   
--   <i>See:</i> <a>newListTablesResponse</a> smart constructor.
data ListTablesResponse
ListTablesResponse' :: Maybe Text -> Maybe [Text] -> Int -> ListTablesResponse

-- | Create a value of <a>ListTablesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedTableName:ListTablesResponse'</a>,
--   <a>listTablesResponse_lastEvaluatedTableName</a> - The name of the
--   last table in the current page of results. Use this value as the
--   <tt>ExclusiveStartTableName</tt> in a new request to obtain the next
--   page of results, until all the table names are returned.
--   
--   If you do not receive a <tt>LastEvaluatedTableName</tt> value in the
--   response, this means that there are no more table names to be
--   retrieved.
--   
--   <a>$sel:tableNames:ListTablesResponse'</a>,
--   <a>listTablesResponse_tableNames</a> - The names of the tables
--   associated with the current account at the current endpoint. The
--   maximum size of this array is 100.
--   
--   If <tt>LastEvaluatedTableName</tt> also appears in the output, you can
--   use this value as the <tt>ExclusiveStartTableName</tt> parameter in a
--   subsequent <tt>ListTables</tt> request and obtain the next page of
--   results.
--   
--   <a>$sel:httpStatus:ListTablesResponse'</a>,
--   <a>listTablesResponse_httpStatus</a> - The response's http status
--   code.
newListTablesResponse :: Int -> ListTablesResponse

-- | Represents the input of a <tt>Scan</tt> operation.
--   
--   <i>See:</i> <a>newScan</a> smart constructor.
data Scan
Scan' :: Maybe Text -> Maybe (HashMap Text Condition) -> Maybe (NonEmpty Text) -> Maybe Natural -> Maybe (HashMap Text Text) -> Maybe Text -> Maybe Bool -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnConsumedCapacity -> Maybe Natural -> Maybe Select -> Maybe Natural -> Maybe ConditionalOperator -> Maybe (HashMap Text AttributeValue) -> Maybe Text -> Text -> Scan

-- | Create a value of <a>Scan</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionExpression:Scan'</a>,
--   <a>scan_projectionExpression</a> - A string that identifies one or
--   more attributes to retrieve from the specified table or index. These
--   attributes can include scalars, sets, or elements of a JSON document.
--   The attributes in the expression must be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Specifying Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:scanFilter:Scan'</a>, <a>scan_scanFilter</a> - This is a
--   legacy parameter. Use <tt>FilterExpression</tt> instead. For more
--   information, see <a>ScanFilter</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:attributesToGet:Scan'</a>, <a>scan_attributesToGet</a> - This
--   is a legacy parameter. Use <tt>ProjectionExpression</tt> instead. For
--   more information, see <a>AttributesToGet</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:totalSegments:Scan'</a>, <a>scan_totalSegments</a> - For a
--   parallel <tt>Scan</tt> request, <tt>TotalSegments</tt> represents the
--   total number of segments into which the <tt>Scan</tt> operation will
--   be divided. The value of <tt>TotalSegments</tt> corresponds to the
--   number of application workers that will perform the parallel scan. For
--   example, if you want to use four application threads to scan a table
--   or an index, specify a <tt>TotalSegments</tt> value of 4.
--   
--   The value for <tt>TotalSegments</tt> must be greater than or equal to
--   1, and less than or equal to 1000000. If you specify a
--   <tt>TotalSegments</tt> value of 1, the <tt>Scan</tt> operation will be
--   sequential rather than parallel.
--   
--   If you specify <tt>TotalSegments</tt>, you must also specify
--   <tt>Segment</tt>.
--   
--   <a>$sel:expressionAttributeNames:Scan'</a>,
--   <a>scan_expressionAttributeNames</a> - One or more substitution tokens
--   for attribute names in an expression. The following are some use cases
--   for using <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:filterExpression:Scan'</a>, <a>scan_filterExpression</a> - A
--   string that contains conditions that DynamoDB applies after the
--   <tt>Scan</tt> operation, but before the data is returned to you. Items
--   that do not satisfy the <tt>FilterExpression</tt> criteria are not
--   returned.
--   
--   A <tt>FilterExpression</tt> is applied after the items have already
--   been read; the process of filtering does not consume any additional
--   read capacity units.
--   
--   For more information, see <a>Filter Expressions</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:consistentRead:Scan'</a>, <a>scan_consistentRead</a> - A
--   Boolean value that determines the read consistency model during the
--   scan:
--   
--   <ul>
--   <li>If <tt>ConsistentRead</tt> is <tt>false</tt>, then the data
--   returned from <tt>Scan</tt> might not contain the results from other
--   recently completed write operations (<tt>PutItem</tt>,
--   <tt>UpdateItem</tt>, or <tt>DeleteItem</tt>).</li>
--   <li>If <tt>ConsistentRead</tt> is <tt>true</tt>, then all of the write
--   operations that completed before the <tt>Scan</tt> began are
--   guaranteed to be contained in the <tt>Scan</tt> response.</li>
--   </ul>
--   
--   The default setting for <tt>ConsistentRead</tt> is <tt>false</tt>.
--   
--   The <tt>ConsistentRead</tt> parameter is not supported on global
--   secondary indexes. If you scan a global secondary index with
--   <tt>ConsistentRead</tt> set to true, you will receive a
--   <tt>ValidationException</tt>.
--   
--   <a>$sel:expressionAttributeValues:Scan'</a>,
--   <a>scan_expressionAttributeValues</a> - One or more values that can be
--   substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <tt>ProductStatus</tt> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Condition
--   Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnConsumedCapacity:Scan'</a>,
--   <a>scan_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:limit:Scan'</a>, <a>scan_limit</a> - The maximum number of
--   items to evaluate (not necessarily the number of matching items). If
--   DynamoDB processes the number of items up to the limit while
--   processing the results, it stops the operation and returns the
--   matching values up to that point, and a key in
--   <tt>LastEvaluatedKey</tt> to apply in a subsequent operation, so that
--   you can pick up where you left off. Also, if the processed dataset
--   size exceeds 1 MB before DynamoDB reaches this limit, it stops the
--   operation and returns the matching values up to the limit, and a key
--   in <tt>LastEvaluatedKey</tt> to apply in a subsequent operation to
--   continue the operation. For more information, see <a>Working with
--   Queries</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:select:Scan'</a>, <a>scan_select</a> - The attributes to be
--   returned in the result. You can retrieve all item attributes, specific
--   item attributes, the count of matching items, or in the case of an
--   index, some or all of the attributes projected into the index.
--   
--   <ul>
--   <li><tt>ALL_ATTRIBUTES</tt> - Returns all of the item attributes from
--   the specified table or index. If you query a local secondary index,
--   then for each matching item in the index, DynamoDB fetches the entire
--   item from the parent table. If the index is configured to project all
--   item attributes, then all of the data can be obtained from the local
--   secondary index, and no fetching is required.</li>
--   <li><tt>ALL_PROJECTED_ATTRIBUTES</tt> - Allowed only when querying an
--   index. Retrieves all attributes that have been projected into the
--   index. If the index is configured to project all attributes, this
--   return value is equivalent to specifying <tt>ALL_ATTRIBUTES</tt>.</li>
--   <li><tt>COUNT</tt> - Returns the number of matching items, rather than
--   the matching items themselves.</li>
--   <li><tt>SPECIFIC_ATTRIBUTES</tt> - Returns only the attributes listed
--   in <tt>AttributesToGet</tt>. This return value is equivalent to
--   specifying <tt>AttributesToGet</tt> without specifying any value for
--   <tt>Select</tt>.If you query or scan a local secondary index and
--   request only attributes that are projected into that index, the
--   operation reads only the index and not the table. If any of the
--   requested attributes are not projected into the local secondary index,
--   DynamoDB fetches each of these attributes from the parent table. This
--   extra fetching incurs additional throughput cost and latency.If you
--   query or scan a global secondary index, you can only request
--   attributes that are projected into the index. Global secondary index
--   queries cannot fetch attributes from the parent table.</li>
--   </ul>
--   
--   If neither <tt>Select</tt> nor <tt>AttributesToGet</tt> are specified,
--   DynamoDB defaults to <tt>ALL_ATTRIBUTES</tt> when accessing a table,
--   and <tt>ALL_PROJECTED_ATTRIBUTES</tt> when accessing an index. You
--   cannot use both <tt>Select</tt> and <tt>AttributesToGet</tt> together
--   in a single request, unless the value for <tt>Select</tt> is
--   <tt>SPECIFIC_ATTRIBUTES</tt>. (This usage is equivalent to specifying
--   <tt>AttributesToGet</tt> without any value for <tt>Select</tt>.)
--   
--   If you use the <tt>ProjectionExpression</tt> parameter, then the value
--   for <tt>Select</tt> can only be <tt>SPECIFIC_ATTRIBUTES</tt>. Any
--   other value for <tt>Select</tt> will return an error.
--   
--   <a>$sel:segment:Scan'</a>, <a>scan_segment</a> - For a parallel
--   <tt>Scan</tt> request, <tt>Segment</tt> identifies an individual
--   segment to be scanned by an application worker.
--   
--   Segment IDs are zero-based, so the first segment is always 0. For
--   example, if you want to use four application threads to scan a table
--   or an index, then the first thread specifies a <tt>Segment</tt> value
--   of 0, the second thread specifies 1, and so on.
--   
--   The value of <tt>LastEvaluatedKey</tt> returned from a parallel
--   <tt>Scan</tt> request must be used as <tt>ExclusiveStartKey</tt> with
--   the same segment ID in a subsequent <tt>Scan</tt> operation.
--   
--   The value for <tt>Segment</tt> must be greater than or equal to 0, and
--   less than the value provided for <tt>TotalSegments</tt>.
--   
--   If you provide <tt>Segment</tt>, you must also provide
--   <tt>TotalSegments</tt>.
--   
--   <a>$sel:conditionalOperator:Scan'</a>, <a>scan_conditionalOperator</a>
--   - This is a legacy parameter. Use <tt>FilterExpression</tt> instead.
--   For more information, see <a>ConditionalOperator</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:exclusiveStartKey:Scan'</a>, <a>scan_exclusiveStartKey</a> -
--   The primary key of the first item that this operation will evaluate.
--   Use the value that was returned for <tt>LastEvaluatedKey</tt> in the
--   previous operation.
--   
--   The data type for <tt>ExclusiveStartKey</tt> must be String, Number or
--   Binary. No set data types are allowed.
--   
--   In a parallel scan, a <tt>Scan</tt> request that includes
--   <tt>ExclusiveStartKey</tt> must specify the same segment whose
--   previous <tt>Scan</tt> returned the corresponding value of
--   <tt>LastEvaluatedKey</tt>.
--   
--   <a>$sel:indexName:Scan'</a>, <a>scan_indexName</a> - The name of a
--   secondary index to scan. This index can be any local secondary index
--   or global secondary index. Note that if you use the <tt>IndexName</tt>
--   parameter, you must also provide <tt>TableName</tt>.
--   
--   <a>$sel:tableName:Scan'</a>, <a>scan_tableName</a> - The name of the
--   table containing the requested items; or, if you provide
--   <tt>IndexName</tt>, the name of the table to which that index belongs.
newScan :: Text -> Scan

-- | Represents the output of a <tt>Scan</tt> operation.
--   
--   <i>See:</i> <a>newScanResponse</a> smart constructor.
data ScanResponse
ScanResponse' :: Maybe (HashMap Text AttributeValue) -> Maybe Int -> Maybe Int -> Maybe [HashMap Text AttributeValue] -> Maybe ConsumedCapacity -> Int -> ScanResponse

-- | Create a value of <a>ScanResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedKey:ScanResponse'</a>,
--   <a>scanResponse_lastEvaluatedKey</a> - The primary key of the item
--   where the operation stopped, inclusive of the previous result set. Use
--   this value to start a new operation, excluding this value in the new
--   request.
--   
--   If <tt>LastEvaluatedKey</tt> is empty, then the "last page" of results
--   has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedKey</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedKey</tt> is empty.
--   
--   <a>$sel:count:ScanResponse'</a>, <a>scanResponse_count</a> - The
--   number of items in the response.
--   
--   If you set <tt>ScanFilter</tt> in the request, then <tt>Count</tt> is
--   the number of items returned after the filter was applied, and
--   <tt>ScannedCount</tt> is the number of matching items before the
--   filter was applied.
--   
--   If you did not use a filter in the request, then <tt>Count</tt> is the
--   same as <tt>ScannedCount</tt>.
--   
--   <a>$sel:scannedCount:ScanResponse'</a>,
--   <a>scanResponse_scannedCount</a> - The number of items evaluated,
--   before any <tt>ScanFilter</tt> is applied. A high
--   <tt>ScannedCount</tt> value with few, or no, <tt>Count</tt> results
--   indicates an inefficient <tt>Scan</tt> operation. For more
--   information, see <a>Count and ScannedCount</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   If you did not use a filter in the request, then <tt>ScannedCount</tt>
--   is the same as <tt>Count</tt>.
--   
--   <a>$sel:items:ScanResponse'</a>, <a>scanResponse_items</a> - An array
--   of item attributes that match the scan criteria. Each element in this
--   array consists of an attribute name and the value for that attribute.
--   
--   <a>$sel:consumedCapacity:ScanResponse'</a>,
--   <a>scanResponse_consumedCapacity</a> - The capacity units consumed by
--   the <tt>Scan</tt> operation. The data returned includes the total
--   provisioned throughput consumed, along with statistics for the table
--   and any indexes involved in the operation. <tt>ConsumedCapacity</tt>
--   is only returned if the <tt>ReturnConsumedCapacity</tt> parameter was
--   specified. For more information, see <a>Provisioned Throughput</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:httpStatus:ScanResponse'</a>, <a>scanResponse_httpStatus</a> -
--   The response's http status code.
newScanResponse :: Int -> ScanResponse

-- | <i>See:</i> <a>newUpdateContributorInsights</a> smart constructor.
data UpdateContributorInsights
UpdateContributorInsights' :: Maybe Text -> Text -> ContributorInsightsAction -> UpdateContributorInsights

-- | Create a value of <a>UpdateContributorInsights</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:UpdateContributorInsights'</a>,
--   <a>updateContributorInsights_indexName</a> - The global secondary
--   index name, if applicable.
--   
--   <a>$sel:tableName:UpdateContributorInsights'</a>,
--   <a>updateContributorInsights_tableName</a> - The name of the table.
--   
--   <a>$sel:contributorInsightsAction:UpdateContributorInsights'</a>,
--   <a>updateContributorInsights_contributorInsightsAction</a> -
--   Represents the contributor insights action.
newUpdateContributorInsights :: Text -> ContributorInsightsAction -> UpdateContributorInsights

-- | <i>See:</i> <a>newUpdateContributorInsightsResponse</a> smart
--   constructor.
data UpdateContributorInsightsResponse
UpdateContributorInsightsResponse' :: Maybe ContributorInsightsStatus -> Maybe Text -> Maybe Text -> Int -> UpdateContributorInsightsResponse

-- | Create a value of <a>UpdateContributorInsightsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:contributorInsightsStatus:UpdateContributorInsightsResponse'</a>,
--   <a>updateContributorInsightsResponse_contributorInsightsStatus</a> -
--   The status of contributor insights
--   
--   <a>$sel:tableName:UpdateContributorInsights'</a>,
--   <a>updateContributorInsightsResponse_tableName</a> - The name of the
--   table.
--   
--   <a>$sel:indexName:UpdateContributorInsights'</a>,
--   <a>updateContributorInsightsResponse_indexName</a> - The name of the
--   global secondary index, if applicable.
--   
--   <a>$sel:httpStatus:UpdateContributorInsightsResponse'</a>,
--   <a>updateContributorInsightsResponse_httpStatus</a> - The response's
--   http status code.
newUpdateContributorInsightsResponse :: Int -> UpdateContributorInsightsResponse

-- | <i>See:</i> <a>newExecuteStatement</a> smart constructor.
data ExecuteStatement
ExecuteStatement' :: Maybe Bool -> Maybe Text -> Maybe (NonEmpty AttributeValue) -> Text -> ExecuteStatement

-- | Create a value of <a>ExecuteStatement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consistentRead:ExecuteStatement'</a>,
--   <a>executeStatement_consistentRead</a> - The consistency of a read
--   operation. If set to <tt>true</tt>, then a strongly consistent read is
--   used; otherwise, an eventually consistent read is used.
--   
--   <a>$sel:nextToken:ExecuteStatement'</a>,
--   <a>executeStatement_nextToken</a> - Set this value to get remaining
--   results, if <tt>NextToken</tt> was returned in the statement response.
--   
--   <a>$sel:parameters:ExecuteStatement'</a>,
--   <a>executeStatement_parameters</a> - The parameters for the PartiQL
--   statement, if any.
--   
--   <a>$sel:statement:ExecuteStatement'</a>,
--   <a>executeStatement_statement</a> - The PartiQL statement representing
--   the operation to run.
newExecuteStatement :: Text -> ExecuteStatement

-- | <i>See:</i> <a>newExecuteStatementResponse</a> smart constructor.
data ExecuteStatementResponse
ExecuteStatementResponse' :: Maybe [HashMap Text AttributeValue] -> Maybe Text -> Int -> ExecuteStatementResponse

-- | Create a value of <a>ExecuteStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:items:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_items</a> - If a read operation was used,
--   this property will contain the result of the reade operation; a map of
--   attribute names and their values. For the write operations this value
--   will be empty.
--   
--   <a>$sel:nextToken:ExecuteStatement'</a>,
--   <a>executeStatementResponse_nextToken</a> - If the response of a read
--   request exceeds the response payload limit DynamoDB will set this
--   value in the response. If set, you can use that this value in the
--   subsequent request to get the remaining results.
--   
--   <a>$sel:httpStatus:ExecuteStatementResponse'</a>,
--   <a>executeStatementResponse_httpStatus</a> - The response's http
--   status code.
newExecuteStatementResponse :: Int -> ExecuteStatementResponse

-- | Represents the input of a <tt>Query</tt> operation.
--   
--   <i>See:</i> <a>newQuery</a> smart constructor.
data Query
Query' :: Maybe (HashMap Text Condition) -> Maybe Text -> Maybe (NonEmpty Text) -> Maybe (HashMap Text Text) -> Maybe Text -> Maybe (HashMap Text Condition) -> Maybe Bool -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnConsumedCapacity -> Maybe Bool -> Maybe Natural -> Maybe Select -> Maybe Text -> Maybe ConditionalOperator -> Maybe (HashMap Text AttributeValue) -> Maybe Text -> Text -> Query

-- | Create a value of <a>Query</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keyConditions:Query'</a>, <a>query_keyConditions</a> - This is
--   a legacy parameter. Use <tt>KeyConditionExpression</tt> instead. For
--   more information, see <a>KeyConditions</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:projectionExpression:Query'</a>,
--   <a>query_projectionExpression</a> - A string that identifies one or
--   more attributes to retrieve from the table. These attributes can
--   include scalars, sets, or elements of a JSON document. The attributes
--   in the expression must be separated by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributesToGet:Query'</a>, <a>query_attributesToGet</a> -
--   This is a legacy parameter. Use <tt>ProjectionExpression</tt> instead.
--   For more information, see <a>AttributesToGet</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:expressionAttributeNames:Query'</a>,
--   <a>query_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression. The following are some
--   use cases for using <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Specifying
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:filterExpression:Query'</a>, <a>query_filterExpression</a> - A
--   string that contains conditions that DynamoDB applies after the
--   <tt>Query</tt> operation, but before the data is returned to you.
--   Items that do not satisfy the <tt>FilterExpression</tt> criteria are
--   not returned.
--   
--   A <tt>FilterExpression</tt> does not allow key attributes. You cannot
--   define a filter expression based on a partition key or a sort key.
--   
--   A <tt>FilterExpression</tt> is applied after the items have already
--   been read; the process of filtering does not consume any additional
--   read capacity units.
--   
--   For more information, see <a>Filter Expressions</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:queryFilter:Query'</a>, <a>query_queryFilter</a> - This is a
--   legacy parameter. Use <tt>FilterExpression</tt> instead. For more
--   information, see <a>QueryFilter</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:consistentRead:Query'</a>, <a>query_consistentRead</a> -
--   Determines the read consistency model: If set to <tt>true</tt>, then
--   the operation uses strongly consistent reads; otherwise, the operation
--   uses eventually consistent reads.
--   
--   Strongly consistent reads are not supported on global secondary
--   indexes. If you query a global secondary index with
--   <tt>ConsistentRead</tt> set to <tt>true</tt>, you will receive a
--   <tt>ValidationException</tt>.
--   
--   <a>$sel:expressionAttributeValues:Query'</a>,
--   <a>query_expressionAttributeValues</a> - One or more values that can
--   be substituted in an expression.
--   
--   Use the <b>:</b> (colon) character in an expression to dereference an
--   attribute value. For example, suppose that you wanted to check whether
--   the value of the <i>ProductStatus</i> attribute was one of the
--   following:
--   
--   <pre>
--   Available | Backordered | Discontinued
--   </pre>
--   
--   You would first need to specify <tt>ExpressionAttributeValues</tt> as
--   follows:
--   
--   <pre>
--   { ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }
--   </pre>
--   
--   You could then use these values in an expression, such as this:
--   
--   <pre>
--   ProductStatus IN (:avail, :back, :disc)
--   </pre>
--   
--   For more information on expression attribute values, see <a>Specifying
--   Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:returnConsumedCapacity:Query'</a>,
--   <a>query_returnConsumedCapacity</a> - Undocumented member.
--   
--   <a>$sel:scanIndexForward:Query'</a>, <a>query_scanIndexForward</a> -
--   Specifies the order for index traversal: If <tt>true</tt> (default),
--   the traversal is performed in ascending order; if <tt>false</tt>, the
--   traversal is performed in descending order.
--   
--   Items with the same partition key value are stored in sorted order by
--   sort key. If the sort key data type is Number, the results are stored
--   in numeric order. For type String, the results are stored in order of
--   UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary
--   data as unsigned.
--   
--   If <tt>ScanIndexForward</tt> is <tt>true</tt>, DynamoDB returns the
--   results in the order in which they are stored (by sort key value).
--   This is the default behavior. If <tt>ScanIndexForward</tt> is
--   <tt>false</tt>, DynamoDB reads the results in reverse order by sort
--   key value, and then returns the results to the client.
--   
--   <a>$sel:limit:Query'</a>, <a>query_limit</a> - The maximum number of
--   items to evaluate (not necessarily the number of matching items). If
--   DynamoDB processes the number of items up to the limit while
--   processing the results, it stops the operation and returns the
--   matching values up to that point, and a key in
--   <tt>LastEvaluatedKey</tt> to apply in a subsequent operation, so that
--   you can pick up where you left off. Also, if the processed dataset
--   size exceeds 1 MB before DynamoDB reaches this limit, it stops the
--   operation and returns the matching values up to the limit, and a key
--   in <tt>LastEvaluatedKey</tt> to apply in a subsequent operation to
--   continue the operation. For more information, see <a>Query and
--   Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:select:Query'</a>, <a>query_select</a> - The attributes to be
--   returned in the result. You can retrieve all item attributes, specific
--   item attributes, the count of matching items, or in the case of an
--   index, some or all of the attributes projected into the index.
--   
--   <ul>
--   <li><tt>ALL_ATTRIBUTES</tt> - Returns all of the item attributes from
--   the specified table or index. If you query a local secondary index,
--   then for each matching item in the index, DynamoDB fetches the entire
--   item from the parent table. If the index is configured to project all
--   item attributes, then all of the data can be obtained from the local
--   secondary index, and no fetching is required.</li>
--   <li><tt>ALL_PROJECTED_ATTRIBUTES</tt> - Allowed only when querying an
--   index. Retrieves all attributes that have been projected into the
--   index. If the index is configured to project all attributes, this
--   return value is equivalent to specifying <tt>ALL_ATTRIBUTES</tt>.</li>
--   <li><tt>COUNT</tt> - Returns the number of matching items, rather than
--   the matching items themselves.</li>
--   <li><tt>SPECIFIC_ATTRIBUTES</tt> - Returns only the attributes listed
--   in <tt>AttributesToGet</tt>. This return value is equivalent to
--   specifying <tt>AttributesToGet</tt> without specifying any value for
--   <tt>Select</tt>.If you query or scan a local secondary index and
--   request only attributes that are projected into that index, the
--   operation will read only the index and not the table. If any of the
--   requested attributes are not projected into the local secondary index,
--   DynamoDB fetches each of these attributes from the parent table. This
--   extra fetching incurs additional throughput cost and latency.If you
--   query or scan a global secondary index, you can only request
--   attributes that are projected into the index. Global secondary index
--   queries cannot fetch attributes from the parent table.</li>
--   </ul>
--   
--   If neither <tt>Select</tt> nor <tt>AttributesToGet</tt> are specified,
--   DynamoDB defaults to <tt>ALL_ATTRIBUTES</tt> when accessing a table,
--   and <tt>ALL_PROJECTED_ATTRIBUTES</tt> when accessing an index. You
--   cannot use both <tt>Select</tt> and <tt>AttributesToGet</tt> together
--   in a single request, unless the value for <tt>Select</tt> is
--   <tt>SPECIFIC_ATTRIBUTES</tt>. (This usage is equivalent to specifying
--   <tt>AttributesToGet</tt> without any value for <tt>Select</tt>.)
--   
--   If you use the <tt>ProjectionExpression</tt> parameter, then the value
--   for <tt>Select</tt> can only be <tt>SPECIFIC_ATTRIBUTES</tt>. Any
--   other value for <tt>Select</tt> will return an error.
--   
--   <a>$sel:keyConditionExpression:Query'</a>,
--   <a>query_keyConditionExpression</a> - The condition that specifies the
--   key values for items to be retrieved by the <tt>Query</tt> action.
--   
--   The condition must perform an equality test on a single partition key
--   value.
--   
--   The condition can optionally perform one of several comparison tests
--   on a single sort key value. This allows <tt>Query</tt> to retrieve one
--   item with a given partition key value and sort key value, or several
--   items that have the same partition key value but different sort key
--   values.
--   
--   The partition key equality test is required, and must be specified in
--   the following format:
--   
--   <tt>partitionKeyName</tt> <i>=</i> <tt>:partitionkeyval</tt>
--   
--   If you also want to provide a condition for the sort key, it must be
--   combined using <tt>AND</tt> with the condition for the sort key.
--   Following is an example, using the <b>=</b> comparison operator for
--   the sort key:
--   
--   <tt>partitionKeyName</tt> <tt>=</tt> <tt>:partitionkeyval</tt>
--   <tt>AND</tt> <tt>sortKeyName</tt> <tt>=</tt> <tt>:sortkeyval</tt>
--   
--   Valid comparisons for the sort key condition are as follows:
--   
--   <ul>
--   <li><tt>sortKeyName</tt> <tt>=</tt> <tt>:sortkeyval</tt> - true if the
--   sort key value is equal to <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&lt;</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is less than <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&lt;=</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is less than or equal to <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&gt;</tt> <tt>:sortkeyval</tt> - true if
--   the sort key value is greater than <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>&gt;= </tt> <tt>:sortkeyval</tt> - true
--   if the sort key value is greater than or equal to
--   <tt>:sortkeyval</tt>.</li>
--   <li><tt>sortKeyName</tt> <tt>BETWEEN</tt> <tt>:sortkeyval1</tt>
--   <tt>AND</tt> <tt>:sortkeyval2</tt> - true if the sort key value is
--   greater than or equal to <tt>:sortkeyval1</tt>, and less than or equal
--   to <tt>:sortkeyval2</tt>.</li>
--   <li><tt>begins_with (</tt> <tt>sortKeyName</tt>, <tt>:sortkeyval</tt>
--   <tt>)</tt> - true if the sort key value begins with a particular
--   operand. (You cannot use this function with a sort key that is of type
--   Number.) Note that the function name <tt>begins_with</tt> is
--   case-sensitive.</li>
--   </ul>
--   
--   Use the <tt>ExpressionAttributeValues</tt> parameter to replace tokens
--   such as <tt>:partitionval</tt> and <tt>:sortval</tt> with actual
--   values at runtime.
--   
--   You can optionally use the <tt>ExpressionAttributeNames</tt> parameter
--   to replace the names of the partition key and sort key with
--   placeholder tokens. This option might be necessary if an attribute
--   name conflicts with a DynamoDB reserved word. For example, the
--   following <tt>KeyConditionExpression</tt> parameter causes an error
--   because <i>Size</i> is a reserved word:
--   
--   <ul>
--   <li><pre>Size = :myval</pre></li>
--   </ul>
--   
--   To work around this, define a placeholder (such a <tt>#S</tt>) to
--   represent the attribute name <i>Size</i>.
--   <tt>KeyConditionExpression</tt> then is as follows:
--   
--   <ul>
--   <li><pre>#S = :myval</pre></li>
--   </ul>
--   
--   For a list of reserved words, see <a>Reserved Words</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   For more information on <tt>ExpressionAttributeNames</tt> and
--   <tt>ExpressionAttributeValues</tt>, see <a>Using Placeholders for
--   Attribute Names and Values</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:conditionalOperator:Query'</a>,
--   <a>query_conditionalOperator</a> - This is a legacy parameter. Use
--   <tt>FilterExpression</tt> instead. For more information, see
--   <a>ConditionalOperator</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   <a>$sel:exclusiveStartKey:Query'</a>, <a>query_exclusiveStartKey</a> -
--   The primary key of the first item that this operation will evaluate.
--   Use the value that was returned for <tt>LastEvaluatedKey</tt> in the
--   previous operation.
--   
--   The data type for <tt>ExclusiveStartKey</tt> must be String, Number,
--   or Binary. No set data types are allowed.
--   
--   <a>$sel:indexName:Query'</a>, <a>query_indexName</a> - The name of an
--   index to query. This index can be any local secondary index or global
--   secondary index on the table. Note that if you use the
--   <tt>IndexName</tt> parameter, you must also provide
--   <tt>TableName.</tt>
--   
--   <a>$sel:tableName:Query'</a>, <a>query_tableName</a> - The name of the
--   table containing the requested items.
newQuery :: Text -> Query

-- | Represents the output of a <tt>Query</tt> operation.
--   
--   <i>See:</i> <a>newQueryResponse</a> smart constructor.
data QueryResponse
QueryResponse' :: Maybe (HashMap Text AttributeValue) -> Maybe Int -> Maybe Int -> Maybe [HashMap Text AttributeValue] -> Maybe ConsumedCapacity -> Int -> QueryResponse

-- | Create a value of <a>QueryResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastEvaluatedKey:QueryResponse'</a>,
--   <a>queryResponse_lastEvaluatedKey</a> - The primary key of the item
--   where the operation stopped, inclusive of the previous result set. Use
--   this value to start a new operation, excluding this value in the new
--   request.
--   
--   If <tt>LastEvaluatedKey</tt> is empty, then the "last page" of results
--   has been processed and there is no more data to be retrieved.
--   
--   If <tt>LastEvaluatedKey</tt> is not empty, it does not necessarily
--   mean that there is more data in the result set. The only way to know
--   when you have reached the end of the result set is when
--   <tt>LastEvaluatedKey</tt> is empty.
--   
--   <a>$sel:count:QueryResponse'</a>, <a>queryResponse_count</a> - The
--   number of items in the response.
--   
--   If you used a <tt>QueryFilter</tt> in the request, then <tt>Count</tt>
--   is the number of items returned after the filter was applied, and
--   <tt>ScannedCount</tt> is the number of matching items before the
--   filter was applied.
--   
--   If you did not use a filter in the request, then <tt>Count</tt> and
--   <tt>ScannedCount</tt> are the same.
--   
--   <a>$sel:scannedCount:QueryResponse'</a>,
--   <a>queryResponse_scannedCount</a> - The number of items evaluated,
--   before any <tt>QueryFilter</tt> is applied. A high
--   <tt>ScannedCount</tt> value with few, or no, <tt>Count</tt> results
--   indicates an inefficient <tt>Query</tt> operation. For more
--   information, see <a>Count and ScannedCount</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   If you did not use a filter in the request, then <tt>ScannedCount</tt>
--   is the same as <tt>Count</tt>.
--   
--   <a>$sel:items:QueryResponse'</a>, <a>queryResponse_items</a> - An
--   array of item attributes that match the query criteria. Each element
--   in this array consists of an attribute name and the value for that
--   attribute.
--   
--   <a>$sel:consumedCapacity:QueryResponse'</a>,
--   <a>queryResponse_consumedCapacity</a> - The capacity units consumed by
--   the <tt>Query</tt> operation. The data returned includes the total
--   provisioned throughput consumed, along with statistics for the table
--   and any indexes involved in the operation. <tt>ConsumedCapacity</tt>
--   is only returned if the <tt>ReturnConsumedCapacity</tt> parameter was
--   specified. For more information, see <a>Provisioned Throughput</a> in
--   the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:httpStatus:QueryResponse'</a>, <a>queryResponse_httpStatus</a>
--   - The response's http status code.
newQueryResponse :: Int -> QueryResponse

-- | Represents the input of a <tt>CreateTable</tt> operation.
--   
--   <i>See:</i> <a>newCreateTable</a> smart constructor.
data CreateTable
CreateTable' :: Maybe ProvisionedThroughput -> Maybe SSESpecification -> Maybe [GlobalSecondaryIndex] -> Maybe [LocalSecondaryIndex] -> Maybe BillingMode -> Maybe [Tag] -> Maybe StreamSpecification -> [AttributeDefinition] -> Text -> NonEmpty KeySchemaElement -> CreateTable

-- | Create a value of <a>CreateTable</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:provisionedThroughput:CreateTable'</a>,
--   <a>createTable_provisionedThroughput</a> - Represents the provisioned
--   throughput settings for a specified table or index. The settings can
--   be modified using the <tt>UpdateTable</tt> operation.
--   
--   If you set BillingMode as <tt>PROVISIONED</tt>, you must specify this
--   property. If you set BillingMode as <tt>PAY_PER_REQUEST</tt>, you
--   cannot specify this property.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:sSESpecification:CreateTable'</a>,
--   <a>createTable_sSESpecification</a> - Represents the settings used to
--   enable server-side encryption.
--   
--   <a>$sel:globalSecondaryIndexes:CreateTable'</a>,
--   <a>createTable_globalSecondaryIndexes</a> - One or more global
--   secondary indexes (the maximum is 20) to be created on the table. Each
--   global secondary index in the array includes the following:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the global secondary index. Must
--   be unique only for this table.</li>
--   <li><tt>KeySchema</tt> - Specifies the key schema for the global
--   secondary index.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 100. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units.</li>
--   </ul>
--   
--   <a>$sel:localSecondaryIndexes:CreateTable'</a>,
--   <a>createTable_localSecondaryIndexes</a> - One or more local secondary
--   indexes (the maximum is 5) to be created on the table. Each index is
--   scoped to a given partition key value. There is a 10 GB size limit per
--   partition key value; otherwise, the size of a local secondary index is
--   unconstrained.
--   
--   Each local secondary index in the array includes the following:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index. Must
--   be unique only for this table.</li>
--   <li><tt>KeySchema</tt> - Specifies the key schema for the local
--   secondary index. The key schema must begin with the same partition key
--   as the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 100. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   </ul>
--   
--   <a>$sel:billingMode:CreateTable'</a>, <a>createTable_billingMode</a> -
--   Controls how you are charged for read and write throughput and how you
--   manage capacity. This setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads. <tt>PROVISIONED</tt> sets the billing mode to
--   <a>Provisioned Mode</a>.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - We recommend using
--   <tt>PAY_PER_REQUEST</tt> for unpredictable workloads.
--   <tt>PAY_PER_REQUEST</tt> sets the billing mode to <a>On-Demand
--   Mode</a>.</li>
--   </ul>
--   
--   <a>$sel:tags:CreateTable'</a>, <a>createTable_tags</a> - A list of
--   key-value pairs to label the table. For more information, see
--   <a>Tagging for DynamoDB</a>.
--   
--   <a>$sel:streamSpecification:CreateTable'</a>,
--   <a>createTable_streamSpecification</a> - The settings for DynamoDB
--   Streams on the table. These settings consist of:
--   
--   <ul>
--   <li><tt>StreamEnabled</tt> - Indicates whether DynamoDB Streams is to
--   be enabled (true) or disabled (false).</li>
--   <li><tt>StreamViewType</tt> - When an item in the table is modified,
--   <tt>StreamViewType</tt> determines what information is written to the
--   table's stream. Valid values for <tt>StreamViewType</tt>
--   are:<ul><li><tt>KEYS_ONLY</tt> - Only the key attributes of the
--   modified item are written to the stream.</li><li><tt>NEW_IMAGE</tt> -
--   The entire item, as it appears after it was modified, is written to
--   the stream.</li><li><tt>OLD_IMAGE</tt> - The entire item, as it
--   appeared before it was modified, is written to the
--   stream.</li><li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old
--   item images of the item are written to the stream.</li></ul></li>
--   </ul>
--   
--   <a>$sel:attributeDefinitions:CreateTable'</a>,
--   <a>createTable_attributeDefinitions</a> - An array of attributes that
--   describe the key schema for the table and indexes.
--   
--   <a>$sel:tableName:CreateTable'</a>, <a>createTable_tableName</a> - The
--   name of the table to create.
--   
--   <a>$sel:keySchema:CreateTable'</a>, <a>createTable_keySchema</a> -
--   Specifies the attributes that make up the primary key for a table or
--   an index. The attributes in <tt>KeySchema</tt> must also be defined in
--   the <tt>AttributeDefinitions</tt> array. For more information, see
--   <a>Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   Each <tt>KeySchemaElement</tt> in the array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of this key attribute.</li>
--   <li><tt>KeyType</tt> - The role that the key attribute will
--   assume:<ul><li><tt>HASH</tt> - partition key</li><li><tt>RANGE</tt> -
--   sort key</li></ul></li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from the DynamoDB
--   usage of an internal hash function to evenly distribute data items
--   across partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   For a simple primary key (partition key), you must provide exactly one
--   element with a <tt>KeyType</tt> of <tt>HASH</tt>.
--   
--   For a composite primary key (partition key and sort key), you must
--   provide exactly two elements, in this order: The first element must
--   have a <tt>KeyType</tt> of <tt>HASH</tt>, and the second element must
--   have a <tt>KeyType</tt> of <tt>RANGE</tt>.
--   
--   For more information, see <a>Working with Tables</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
newCreateTable :: Text -> NonEmpty KeySchemaElement -> CreateTable

-- | Represents the output of a <tt>CreateTable</tt> operation.
--   
--   <i>See:</i> <a>newCreateTableResponse</a> smart constructor.
data CreateTableResponse
CreateTableResponse' :: Maybe TableDescription -> Int -> CreateTableResponse

-- | Create a value of <a>CreateTableResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableDescription:CreateTableResponse'</a>,
--   <a>createTableResponse_tableDescription</a> - Represents the
--   properties of the table.
--   
--   <a>$sel:httpStatus:CreateTableResponse'</a>,
--   <a>createTableResponse_httpStatus</a> - The response's http status
--   code.
newCreateTableResponse :: Int -> CreateTableResponse

-- | <i>See:</i> <a>newDescribeKinesisStreamingDestination</a> smart
--   constructor.
data DescribeKinesisStreamingDestination
DescribeKinesisStreamingDestination' :: Text -> DescribeKinesisStreamingDestination

-- | Create a value of <a>DescribeKinesisStreamingDestination</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DescribeKinesisStreamingDestination'</a>,
--   <a>describeKinesisStreamingDestination_tableName</a> - The name of the
--   table being described.
newDescribeKinesisStreamingDestination :: Text -> DescribeKinesisStreamingDestination

-- | <i>See:</i> <a>newDescribeKinesisStreamingDestinationResponse</a>
--   smart constructor.
data DescribeKinesisStreamingDestinationResponse
DescribeKinesisStreamingDestinationResponse' :: Maybe [KinesisDataStreamDestination] -> Maybe Text -> Int -> DescribeKinesisStreamingDestinationResponse

-- | Create a value of <a>DescribeKinesisStreamingDestinationResponse</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:kinesisDataStreamDestinations:DescribeKinesisStreamingDestinationResponse'</a>,
--   <a>describeKinesisStreamingDestinationResponse_kinesisDataStreamDestinations</a>
--   - The list of replica structures for the table being described.
--   
--   <a>$sel:tableName:DescribeKinesisStreamingDestination'</a>,
--   <a>describeKinesisStreamingDestinationResponse_tableName</a> - The
--   name of the table being described.
--   
--   <a>$sel:httpStatus:DescribeKinesisStreamingDestinationResponse'</a>,
--   <a>describeKinesisStreamingDestinationResponse_httpStatus</a> - The
--   response's http status code.
newDescribeKinesisStreamingDestinationResponse :: Int -> DescribeKinesisStreamingDestinationResponse

-- | <i>See:</i> <a>newDescribeEndpoints</a> smart constructor.
data DescribeEndpoints
DescribeEndpoints' :: DescribeEndpoints

-- | Create a value of <a>DescribeEndpoints</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newDescribeEndpoints :: DescribeEndpoints

-- | <i>See:</i> <a>newDescribeEndpointsResponse</a> smart constructor.
data DescribeEndpointsResponse
DescribeEndpointsResponse' :: Int -> [Endpoint] -> DescribeEndpointsResponse

-- | Create a value of <a>DescribeEndpointsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:DescribeEndpointsResponse'</a>,
--   <a>describeEndpointsResponse_httpStatus</a> - The response's http
--   status code.
--   
--   <a>$sel:endpoints:DescribeEndpointsResponse'</a>,
--   <a>describeEndpointsResponse_endpoints</a> - List of endpoints.
newDescribeEndpointsResponse :: Int -> DescribeEndpointsResponse

-- | <i>See:</i> <a>newDescribeTimeToLive</a> smart constructor.
data DescribeTimeToLive
DescribeTimeToLive' :: Text -> DescribeTimeToLive

-- | Create a value of <a>DescribeTimeToLive</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DescribeTimeToLive'</a>,
--   <a>describeTimeToLive_tableName</a> - The name of the table to be
--   described.
newDescribeTimeToLive :: Text -> DescribeTimeToLive

-- | <i>See:</i> <a>newDescribeTimeToLiveResponse</a> smart constructor.
data DescribeTimeToLiveResponse
DescribeTimeToLiveResponse' :: Maybe TimeToLiveDescription -> Int -> DescribeTimeToLiveResponse

-- | Create a value of <a>DescribeTimeToLiveResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeToLiveDescription:DescribeTimeToLiveResponse'</a>,
--   <a>describeTimeToLiveResponse_timeToLiveDescription</a> -
--   
--   <a>$sel:httpStatus:DescribeTimeToLiveResponse'</a>,
--   <a>describeTimeToLiveResponse_httpStatus</a> - The response's http
--   status code.
newDescribeTimeToLiveResponse :: Int -> DescribeTimeToLiveResponse

-- | <i>See:</i> <a>newDescribeContinuousBackups</a> smart constructor.
data DescribeContinuousBackups
DescribeContinuousBackups' :: Text -> DescribeContinuousBackups

-- | Create a value of <a>DescribeContinuousBackups</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:DescribeContinuousBackups'</a>,
--   <a>describeContinuousBackups_tableName</a> - Name of the table for
--   which the customer wants to check the continuous backups and point in
--   time recovery settings.
newDescribeContinuousBackups :: Text -> DescribeContinuousBackups

-- | <i>See:</i> <a>newDescribeContinuousBackupsResponse</a> smart
--   constructor.
data DescribeContinuousBackupsResponse
DescribeContinuousBackupsResponse' :: Maybe ContinuousBackupsDescription -> Int -> DescribeContinuousBackupsResponse

-- | Create a value of <a>DescribeContinuousBackupsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:continuousBackupsDescription:DescribeContinuousBackupsResponse'</a>,
--   <a>describeContinuousBackupsResponse_continuousBackupsDescription</a>
--   - Represents the continuous backups and point in time recovery
--   settings on the table.
--   
--   <a>$sel:httpStatus:DescribeContinuousBackupsResponse'</a>,
--   <a>describeContinuousBackupsResponse_httpStatus</a> - The response's
--   http status code.
newDescribeContinuousBackupsResponse :: Int -> DescribeContinuousBackupsResponse

-- | <i>See:</i> <a>newListExports</a> smart constructor.
data ListExports
ListExports' :: Maybe Text -> Maybe Text -> Maybe Natural -> ListExports

-- | Create a value of <a>ListExports</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableArn:ListExports'</a>, <a>listExports_tableArn</a> - The
--   Amazon Resource Name (ARN) associated with the exported table.
--   
--   <a>$sel:nextToken:ListExports'</a>, <a>listExports_nextToken</a> - An
--   optional string that, if supplied, must be copied from the output of a
--   previous call to <tt>ListExports</tt>. When provided in this manner,
--   the API fetches the next page of results.
--   
--   <a>$sel:maxResults:ListExports'</a>, <a>listExports_maxResults</a> -
--   Maximum number of results to return per page.
newListExports :: ListExports

-- | <i>See:</i> <a>newListExportsResponse</a> smart constructor.
data ListExportsResponse
ListExportsResponse' :: Maybe [ExportSummary] -> Maybe Text -> Int -> ListExportsResponse

-- | Create a value of <a>ListExportsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exportSummaries:ListExportsResponse'</a>,
--   <a>listExportsResponse_exportSummaries</a> - A list of
--   <tt>ExportSummary</tt> objects.
--   
--   <a>$sel:nextToken:ListExports'</a>,
--   <a>listExportsResponse_nextToken</a> - If this value is returned,
--   there are additional results to be displayed. To retrieve them, call
--   <tt>ListExports</tt> again, with <tt>NextToken</tt> set to this value.
--   
--   <a>$sel:httpStatus:ListExportsResponse'</a>,
--   <a>listExportsResponse_httpStatus</a> - The response's http status
--   code.
newListExportsResponse :: Int -> ListExportsResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   Identifies the Amazon DynamoDB resource to which tags should be added.
--   This value is an Amazon Resource Name (ARN).
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - The tags to
--   be assigned to the Amazon DynamoDB resource.
newTagResource :: Text -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newTagResourceResponse :: TagResourceResponse

-- | <i>See:</i> <a>newDescribeContributorInsights</a> smart constructor.
data DescribeContributorInsights
DescribeContributorInsights' :: Maybe Text -> Text -> DescribeContributorInsights

-- | Create a value of <a>DescribeContributorInsights</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:DescribeContributorInsights'</a>,
--   <a>describeContributorInsights_indexName</a> - The name of the global
--   secondary index to describe, if applicable.
--   
--   <a>$sel:tableName:DescribeContributorInsights'</a>,
--   <a>describeContributorInsights_tableName</a> - The name of the table
--   to describe.
newDescribeContributorInsights :: Text -> DescribeContributorInsights

-- | <i>See:</i> <a>newDescribeContributorInsightsResponse</a> smart
--   constructor.
data DescribeContributorInsightsResponse
DescribeContributorInsightsResponse' :: Maybe [Text] -> Maybe FailureException -> Maybe ContributorInsightsStatus -> Maybe POSIX -> Maybe Text -> Maybe Text -> Int -> DescribeContributorInsightsResponse

-- | Create a value of <a>DescribeContributorInsightsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:contributorInsightsRuleList:DescribeContributorInsightsResponse'</a>,
--   <a>describeContributorInsightsResponse_contributorInsightsRuleList</a>
--   - List of names of the associated Alpine rules.
--   
--   <a>$sel:failureException:DescribeContributorInsightsResponse'</a>,
--   <a>describeContributorInsightsResponse_failureException</a> - Returns
--   information about the last failure that encountered.
--   
--   The most common exceptions for a FAILED status are:
--   
--   <ul>
--   <li>LimitExceededException - Per-account Amazon CloudWatch Contributor
--   Insights rule limit reached. Please disable Contributor Insights for
--   other tables/indexes OR disable Contributor Insights rules before
--   retrying.</li>
--   <li>AccessDeniedException - Amazon CloudWatch Contributor Insights
--   rules cannot be modified due to insufficient permissions.</li>
--   <li>AccessDeniedException - Failed to create service-linked role for
--   Contributor Insights due to insufficient permissions.</li>
--   <li>InternalServerError - Failed to create Amazon CloudWatch
--   Contributor Insights rules. Please retry request.</li>
--   </ul>
--   
--   
--   <a>$sel:contributorInsightsStatus:DescribeContributorInsightsResponse'</a>,
--   <a>describeContributorInsightsResponse_contributorInsightsStatus</a> -
--   Current Status contributor insights.
--   
--   <a>$sel:lastUpdateDateTime:DescribeContributorInsightsResponse'</a>,
--   <a>describeContributorInsightsResponse_lastUpdateDateTime</a> -
--   Timestamp of the last time the status was changed.
--   
--   <a>$sel:tableName:DescribeContributorInsights'</a>,
--   <a>describeContributorInsightsResponse_tableName</a> - The name of the
--   table being described.
--   
--   <a>$sel:indexName:DescribeContributorInsights'</a>,
--   <a>describeContributorInsightsResponse_indexName</a> - The name of the
--   global secondary index being described.
--   
--   <a>$sel:httpStatus:DescribeContributorInsightsResponse'</a>,
--   <a>describeContributorInsightsResponse_httpStatus</a> - The response's
--   http status code.
newDescribeContributorInsightsResponse :: Int -> DescribeContributorInsightsResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The DynamoDB resource that the tags
--   will be removed from. This value is an Amazon Resource Name (ARN).
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - A
--   list of tag keys. Existing tags of the resource whose keys are members
--   of this list will be removed from the DynamoDB resource.
newUntagResource :: Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newUntagResourceResponse :: UntagResourceResponse

-- | <i>See:</i> <a>newRestoreTableToPointInTime</a> smart constructor.
data RestoreTableToPointInTime
RestoreTableToPointInTime' :: Maybe BillingMode -> Maybe Bool -> Maybe [GlobalSecondaryIndex] -> Maybe ProvisionedThroughput -> Maybe Text -> Maybe SSESpecification -> Maybe Text -> Maybe [LocalSecondaryIndex] -> Maybe POSIX -> Text -> RestoreTableToPointInTime

-- | Create a value of <a>RestoreTableToPointInTime</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:billingModeOverride:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_billingModeOverride</a> - The billing
--   mode of the restored table.
--   
--   <a>$sel:useLatestRestorableTime:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_useLatestRestorableTime</a> - Restore the
--   table to the latest possible time. <tt>LatestRestorableDateTime</tt>
--   is typically 5 minutes before the current time.
--   
--   <a>$sel:globalSecondaryIndexOverride:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_globalSecondaryIndexOverride</a> - List
--   of global secondary indexes for the restored table. The indexes
--   provided should match existing secondary indexes. You can choose to
--   exclude some or all of the indexes at the time of restore.
--   
--   <a>$sel:provisionedThroughputOverride:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_provisionedThroughputOverride</a> -
--   Provisioned throughput settings for the restored table.
--   
--   <a>$sel:sourceTableArn:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_sourceTableArn</a> - The DynamoDB table
--   that will be restored. This value is an Amazon Resource Name (ARN).
--   
--   <a>$sel:sSESpecificationOverride:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_sSESpecificationOverride</a> - The new
--   server-side encryption settings for the restored table.
--   
--   <a>$sel:sourceTableName:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_sourceTableName</a> - Name of the source
--   table that is being restored.
--   
--   <a>$sel:localSecondaryIndexOverride:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_localSecondaryIndexOverride</a> - List of
--   local secondary indexes for the restored table. The indexes provided
--   should match existing secondary indexes. You can choose to exclude
--   some or all of the indexes at the time of restore.
--   
--   <a>$sel:restoreDateTime:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_restoreDateTime</a> - Time in the past to
--   restore the table to.
--   
--   <a>$sel:targetTableName:RestoreTableToPointInTime'</a>,
--   <a>restoreTableToPointInTime_targetTableName</a> - The name of the new
--   table to which it must be restored to.
newRestoreTableToPointInTime :: Text -> RestoreTableToPointInTime

-- | <i>See:</i> <a>newRestoreTableToPointInTimeResponse</a> smart
--   constructor.
data RestoreTableToPointInTimeResponse
RestoreTableToPointInTimeResponse' :: Maybe TableDescription -> Int -> RestoreTableToPointInTimeResponse

-- | Create a value of <a>RestoreTableToPointInTimeResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableDescription:RestoreTableToPointInTimeResponse'</a>,
--   <a>restoreTableToPointInTimeResponse_tableDescription</a> - Represents
--   the properties of a table.
--   
--   <a>$sel:httpStatus:RestoreTableToPointInTimeResponse'</a>,
--   <a>restoreTableToPointInTimeResponse_httpStatus</a> - The response's
--   http status code.
newRestoreTableToPointInTimeResponse :: Int -> RestoreTableToPointInTimeResponse

-- | <i>See:</i> <a>newRestoreTableFromBackup</a> smart constructor.
data RestoreTableFromBackup
RestoreTableFromBackup' :: Maybe BillingMode -> Maybe [GlobalSecondaryIndex] -> Maybe ProvisionedThroughput -> Maybe SSESpecification -> Maybe [LocalSecondaryIndex] -> Text -> Text -> RestoreTableFromBackup

-- | Create a value of <a>RestoreTableFromBackup</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:billingModeOverride:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_billingModeOverride</a> - The billing mode
--   of the restored table.
--   
--   <a>$sel:globalSecondaryIndexOverride:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_globalSecondaryIndexOverride</a> - List of
--   global secondary indexes for the restored table. The indexes provided
--   should match existing secondary indexes. You can choose to exclude
--   some or all of the indexes at the time of restore.
--   
--   <a>$sel:provisionedThroughputOverride:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_provisionedThroughputOverride</a> -
--   Provisioned throughput settings for the restored table.
--   
--   <a>$sel:sSESpecificationOverride:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_sSESpecificationOverride</a> - The new
--   server-side encryption settings for the restored table.
--   
--   <a>$sel:localSecondaryIndexOverride:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_localSecondaryIndexOverride</a> - List of
--   local secondary indexes for the restored table. The indexes provided
--   should match existing secondary indexes. You can choose to exclude
--   some or all of the indexes at the time of restore.
--   
--   <a>$sel:targetTableName:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_targetTableName</a> - The name of the new
--   table to which the backup must be restored.
--   
--   <a>$sel:backupArn:RestoreTableFromBackup'</a>,
--   <a>restoreTableFromBackup_backupArn</a> - The Amazon Resource Name
--   (ARN) associated with the backup.
newRestoreTableFromBackup :: Text -> Text -> RestoreTableFromBackup

-- | <i>See:</i> <a>newRestoreTableFromBackupResponse</a> smart
--   constructor.
data RestoreTableFromBackupResponse
RestoreTableFromBackupResponse' :: Maybe TableDescription -> Int -> RestoreTableFromBackupResponse

-- | Create a value of <a>RestoreTableFromBackupResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableDescription:RestoreTableFromBackupResponse'</a>,
--   <a>restoreTableFromBackupResponse_tableDescription</a> - The
--   description of the table created from an existing backup.
--   
--   <a>$sel:httpStatus:RestoreTableFromBackupResponse'</a>,
--   <a>restoreTableFromBackupResponse_httpStatus</a> - The response's http
--   status code.
newRestoreTableFromBackupResponse :: Int -> RestoreTableFromBackupResponse

-- | Represents the input of an <tt>UpdateTimeToLive</tt> operation.
--   
--   <i>See:</i> <a>newUpdateTimeToLive</a> smart constructor.
data UpdateTimeToLive
UpdateTimeToLive' :: Text -> TimeToLiveSpecification -> UpdateTimeToLive

-- | Create a value of <a>UpdateTimeToLive</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:UpdateTimeToLive'</a>,
--   <a>updateTimeToLive_tableName</a> - The name of the table to be
--   configured.
--   
--   <a>$sel:timeToLiveSpecification:UpdateTimeToLive'</a>,
--   <a>updateTimeToLive_timeToLiveSpecification</a> - Represents the
--   settings used to enable or disable Time to Live for the specified
--   table.
newUpdateTimeToLive :: Text -> TimeToLiveSpecification -> UpdateTimeToLive

-- | <i>See:</i> <a>newUpdateTimeToLiveResponse</a> smart constructor.
data UpdateTimeToLiveResponse
UpdateTimeToLiveResponse' :: Maybe TimeToLiveSpecification -> Int -> UpdateTimeToLiveResponse

-- | Create a value of <a>UpdateTimeToLiveResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeToLiveSpecification:UpdateTimeToLive'</a>,
--   <a>updateTimeToLiveResponse_timeToLiveSpecification</a> - Represents
--   the output of an <tt>UpdateTimeToLive</tt> operation.
--   
--   <a>$sel:httpStatus:UpdateTimeToLiveResponse'</a>,
--   <a>updateTimeToLiveResponse_httpStatus</a> - The response's http
--   status code.
newUpdateTimeToLiveResponse :: Int -> UpdateTimeToLiveResponse

-- | <i>See:</i> <a>newCreateGlobalTable</a> smart constructor.
data CreateGlobalTable
CreateGlobalTable' :: Text -> [Replica] -> CreateGlobalTable

-- | Create a value of <a>CreateGlobalTable</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableName:CreateGlobalTable'</a>,
--   <a>createGlobalTable_globalTableName</a> - The global table name.
--   
--   <a>$sel:replicationGroup:CreateGlobalTable'</a>,
--   <a>createGlobalTable_replicationGroup</a> - The Regions where the
--   global table needs to be created.
newCreateGlobalTable :: Text -> CreateGlobalTable

-- | <i>See:</i> <a>newCreateGlobalTableResponse</a> smart constructor.
data CreateGlobalTableResponse
CreateGlobalTableResponse' :: Maybe GlobalTableDescription -> Int -> CreateGlobalTableResponse

-- | Create a value of <a>CreateGlobalTableResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableDescription:CreateGlobalTableResponse'</a>,
--   <a>createGlobalTableResponse_globalTableDescription</a> - Contains the
--   details of the global table.
--   
--   <a>$sel:httpStatus:CreateGlobalTableResponse'</a>,
--   <a>createGlobalTableResponse_httpStatus</a> - The response's http
--   status code.
newCreateGlobalTableResponse :: Int -> CreateGlobalTableResponse

-- | <i>See:</i> <a>newUpdateContinuousBackups</a> smart constructor.
data UpdateContinuousBackups
UpdateContinuousBackups' :: Text -> PointInTimeRecoverySpecification -> UpdateContinuousBackups

-- | Create a value of <a>UpdateContinuousBackups</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:UpdateContinuousBackups'</a>,
--   <a>updateContinuousBackups_tableName</a> - The name of the table.
--   
--   <a>$sel:pointInTimeRecoverySpecification:UpdateContinuousBackups'</a>,
--   <a>updateContinuousBackups_pointInTimeRecoverySpecification</a> -
--   Represents the settings used to enable point in time recovery.
newUpdateContinuousBackups :: Text -> PointInTimeRecoverySpecification -> UpdateContinuousBackups

-- | <i>See:</i> <a>newUpdateContinuousBackupsResponse</a> smart
--   constructor.
data UpdateContinuousBackupsResponse
UpdateContinuousBackupsResponse' :: Maybe ContinuousBackupsDescription -> Int -> UpdateContinuousBackupsResponse

-- | Create a value of <a>UpdateContinuousBackupsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:continuousBackupsDescription:UpdateContinuousBackupsResponse'</a>,
--   <a>updateContinuousBackupsResponse_continuousBackupsDescription</a> -
--   Represents the continuous backups and point in time recovery settings
--   on the table.
--   
--   <a>$sel:httpStatus:UpdateContinuousBackupsResponse'</a>,
--   <a>updateContinuousBackupsResponse_httpStatus</a> - The response's
--   http status code.
newUpdateContinuousBackupsResponse :: Int -> UpdateContinuousBackupsResponse

-- | <i>See:</i> <a>newDescribeExport</a> smart constructor.
data DescribeExport
DescribeExport' :: Text -> DescribeExport

-- | Create a value of <a>DescribeExport</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exportArn:DescribeExport'</a>, <a>describeExport_exportArn</a>
--   - The Amazon Resource Name (ARN) associated with the export.
newDescribeExport :: Text -> DescribeExport

-- | <i>See:</i> <a>newDescribeExportResponse</a> smart constructor.
data DescribeExportResponse
DescribeExportResponse' :: Maybe ExportDescription -> Int -> DescribeExportResponse

-- | Create a value of <a>DescribeExportResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exportDescription:DescribeExportResponse'</a>,
--   <a>describeExportResponse_exportDescription</a> - Represents the
--   properties of the export.
--   
--   <a>$sel:httpStatus:DescribeExportResponse'</a>,
--   <a>describeExportResponse_httpStatus</a> - The response's http status
--   code.
newDescribeExportResponse :: Int -> DescribeExportResponse
newtype AttributeAction
AttributeAction' :: Text -> AttributeAction
[fromAttributeAction] :: AttributeAction -> Text
pattern AttributeAction_ADD :: AttributeAction
pattern AttributeAction_DELETE :: AttributeAction
pattern AttributeAction_PUT :: AttributeAction
newtype BackupStatus
BackupStatus' :: Text -> BackupStatus
[fromBackupStatus] :: BackupStatus -> Text
pattern BackupStatus_AVAILABLE :: BackupStatus
pattern BackupStatus_CREATING :: BackupStatus
pattern BackupStatus_DELETED :: BackupStatus
newtype BackupType
BackupType' :: Text -> BackupType
[fromBackupType] :: BackupType -> Text
pattern BackupType_AWS_BACKUP :: BackupType
pattern BackupType_SYSTEM :: BackupType
pattern BackupType_USER :: BackupType
newtype BackupTypeFilter
BackupTypeFilter' :: Text -> BackupTypeFilter
[fromBackupTypeFilter] :: BackupTypeFilter -> Text
pattern BackupTypeFilter_ALL :: BackupTypeFilter
pattern BackupTypeFilter_AWS_BACKUP :: BackupTypeFilter
pattern BackupTypeFilter_SYSTEM :: BackupTypeFilter
pattern BackupTypeFilter_USER :: BackupTypeFilter
newtype BatchStatementErrorCodeEnum
BatchStatementErrorCodeEnum' :: Text -> BatchStatementErrorCodeEnum
[fromBatchStatementErrorCodeEnum] :: BatchStatementErrorCodeEnum -> Text
pattern BatchStatementErrorCodeEnum_AccessDenied :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ConditionalCheckFailed :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_DuplicateItem :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_InternalServerError :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ItemCollectionSizeLimitExceeded :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ProvisionedThroughputExceeded :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_RequestLimitExceeded :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ResourceNotFound :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ThrottlingError :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_TransactionConflict :: BatchStatementErrorCodeEnum
pattern BatchStatementErrorCodeEnum_ValidationError :: BatchStatementErrorCodeEnum
newtype BillingMode
BillingMode' :: Text -> BillingMode
[fromBillingMode] :: BillingMode -> Text
pattern BillingMode_PAY_PER_REQUEST :: BillingMode
pattern BillingMode_PROVISIONED :: BillingMode
newtype ComparisonOperator
ComparisonOperator' :: Text -> ComparisonOperator
[fromComparisonOperator] :: ComparisonOperator -> Text
pattern ComparisonOperator_BEGINS_WITH :: ComparisonOperator
pattern ComparisonOperator_BETWEEN :: ComparisonOperator
pattern ComparisonOperator_CONTAINS :: ComparisonOperator
pattern ComparisonOperator_EQ :: ComparisonOperator
pattern ComparisonOperator_GE :: ComparisonOperator
pattern ComparisonOperator_GT :: ComparisonOperator
pattern ComparisonOperator_IN :: ComparisonOperator
pattern ComparisonOperator_LE :: ComparisonOperator
pattern ComparisonOperator_LT :: ComparisonOperator
pattern ComparisonOperator_NE :: ComparisonOperator
pattern ComparisonOperator_NOT_CONTAINS :: ComparisonOperator
pattern ComparisonOperator_NOT_NULL :: ComparisonOperator
pattern ComparisonOperator_NULL :: ComparisonOperator
newtype ConditionalOperator
ConditionalOperator' :: Text -> ConditionalOperator
[fromConditionalOperator] :: ConditionalOperator -> Text
pattern ConditionalOperator_AND :: ConditionalOperator
pattern ConditionalOperator_OR :: ConditionalOperator
newtype ContinuousBackupsStatus
ContinuousBackupsStatus' :: Text -> ContinuousBackupsStatus
[fromContinuousBackupsStatus] :: ContinuousBackupsStatus -> Text
pattern ContinuousBackupsStatus_DISABLED :: ContinuousBackupsStatus
pattern ContinuousBackupsStatus_ENABLED :: ContinuousBackupsStatus
newtype ContributorInsightsAction
ContributorInsightsAction' :: Text -> ContributorInsightsAction
[fromContributorInsightsAction] :: ContributorInsightsAction -> Text
pattern ContributorInsightsAction_DISABLE :: ContributorInsightsAction
pattern ContributorInsightsAction_ENABLE :: ContributorInsightsAction
newtype ContributorInsightsStatus
ContributorInsightsStatus' :: Text -> ContributorInsightsStatus
[fromContributorInsightsStatus] :: ContributorInsightsStatus -> Text
pattern ContributorInsightsStatus_DISABLED :: ContributorInsightsStatus
pattern ContributorInsightsStatus_DISABLING :: ContributorInsightsStatus
pattern ContributorInsightsStatus_ENABLED :: ContributorInsightsStatus
pattern ContributorInsightsStatus_ENABLING :: ContributorInsightsStatus
pattern ContributorInsightsStatus_FAILED :: ContributorInsightsStatus
newtype DestinationStatus
DestinationStatus' :: Text -> DestinationStatus
[fromDestinationStatus] :: DestinationStatus -> Text
pattern DestinationStatus_ACTIVE :: DestinationStatus
pattern DestinationStatus_DISABLED :: DestinationStatus
pattern DestinationStatus_DISABLING :: DestinationStatus
pattern DestinationStatus_ENABLE_FAILED :: DestinationStatus
pattern DestinationStatus_ENABLING :: DestinationStatus
newtype ExportFormat
ExportFormat' :: Text -> ExportFormat
[fromExportFormat] :: ExportFormat -> Text
pattern ExportFormat_DYNAMODB_JSON :: ExportFormat
pattern ExportFormat_ION :: ExportFormat
newtype ExportStatus
ExportStatus' :: Text -> ExportStatus
[fromExportStatus] :: ExportStatus -> Text
pattern ExportStatus_COMPLETED :: ExportStatus
pattern ExportStatus_FAILED :: ExportStatus
pattern ExportStatus_IN_PROGRESS :: ExportStatus
newtype GlobalTableStatus
GlobalTableStatus' :: Text -> GlobalTableStatus
[fromGlobalTableStatus] :: GlobalTableStatus -> Text
pattern GlobalTableStatus_ACTIVE :: GlobalTableStatus
pattern GlobalTableStatus_CREATING :: GlobalTableStatus
pattern GlobalTableStatus_DELETING :: GlobalTableStatus
pattern GlobalTableStatus_UPDATING :: GlobalTableStatus
newtype IndexStatus
IndexStatus' :: Text -> IndexStatus
[fromIndexStatus] :: IndexStatus -> Text
pattern IndexStatus_ACTIVE :: IndexStatus
pattern IndexStatus_CREATING :: IndexStatus
pattern IndexStatus_DELETING :: IndexStatus
pattern IndexStatus_UPDATING :: IndexStatus
newtype KeyType
KeyType' :: Text -> KeyType
[fromKeyType] :: KeyType -> Text
pattern KeyType_HASH :: KeyType
pattern KeyType_RANGE :: KeyType
newtype PointInTimeRecoveryStatus
PointInTimeRecoveryStatus' :: Text -> PointInTimeRecoveryStatus
[fromPointInTimeRecoveryStatus] :: PointInTimeRecoveryStatus -> Text
pattern PointInTimeRecoveryStatus_DISABLED :: PointInTimeRecoveryStatus
pattern PointInTimeRecoveryStatus_ENABLED :: PointInTimeRecoveryStatus
newtype ProjectionType
ProjectionType' :: Text -> ProjectionType
[fromProjectionType] :: ProjectionType -> Text
pattern ProjectionType_ALL :: ProjectionType
pattern ProjectionType_INCLUDE :: ProjectionType
pattern ProjectionType_KEYS_ONLY :: ProjectionType
newtype ReplicaStatus
ReplicaStatus' :: Text -> ReplicaStatus
[fromReplicaStatus] :: ReplicaStatus -> Text
pattern ReplicaStatus_ACTIVE :: ReplicaStatus
pattern ReplicaStatus_CREATING :: ReplicaStatus
pattern ReplicaStatus_CREATION_FAILED :: ReplicaStatus
pattern ReplicaStatus_DELETING :: ReplicaStatus
pattern ReplicaStatus_INACCESSIBLE_ENCRYPTION_CREDENTIALS :: ReplicaStatus
pattern ReplicaStatus_REGION_DISABLED :: ReplicaStatus
pattern ReplicaStatus_UPDATING :: ReplicaStatus

-- | Determines the level of detail about provisioned throughput
--   consumption that is returned in the response:
--   
--   <ul>
--   <li><tt>INDEXES</tt> - The response includes the aggregate
--   <tt>ConsumedCapacity</tt> for the operation, together with
--   <tt>ConsumedCapacity</tt> for each table and secondary index that was
--   accessed.Note that some operations, such as <tt>GetItem</tt> and
--   <tt>BatchGetItem</tt>, do not access any indexes at all. In these
--   cases, specifying <tt>INDEXES</tt> will only return
--   <tt>ConsumedCapacity</tt> information for table(s).</li>
--   <li><tt>TOTAL</tt> - The response includes only the aggregate
--   <tt>ConsumedCapacity</tt> for the operation.</li>
--   <li><tt>NONE</tt> - No <tt>ConsumedCapacity</tt> details are included
--   in the response.</li>
--   </ul>
newtype ReturnConsumedCapacity
ReturnConsumedCapacity' :: Text -> ReturnConsumedCapacity
[fromReturnConsumedCapacity] :: ReturnConsumedCapacity -> Text
pattern ReturnConsumedCapacity_INDEXES :: ReturnConsumedCapacity
pattern ReturnConsumedCapacity_NONE :: ReturnConsumedCapacity
pattern ReturnConsumedCapacity_TOTAL :: ReturnConsumedCapacity
newtype ReturnItemCollectionMetrics
ReturnItemCollectionMetrics' :: Text -> ReturnItemCollectionMetrics
[fromReturnItemCollectionMetrics] :: ReturnItemCollectionMetrics -> Text
pattern ReturnItemCollectionMetrics_NONE :: ReturnItemCollectionMetrics
pattern ReturnItemCollectionMetrics_SIZE :: ReturnItemCollectionMetrics
newtype ReturnValue
ReturnValue' :: Text -> ReturnValue
[fromReturnValue] :: ReturnValue -> Text
pattern ReturnValue_ALL_NEW :: ReturnValue
pattern ReturnValue_ALL_OLD :: ReturnValue
pattern ReturnValue_NONE :: ReturnValue
pattern ReturnValue_UPDATED_NEW :: ReturnValue
pattern ReturnValue_UPDATED_OLD :: ReturnValue
newtype ReturnValuesOnConditionCheckFailure
ReturnValuesOnConditionCheckFailure' :: Text -> ReturnValuesOnConditionCheckFailure
[fromReturnValuesOnConditionCheckFailure] :: ReturnValuesOnConditionCheckFailure -> Text
pattern ReturnValuesOnConditionCheckFailure_ALL_OLD :: ReturnValuesOnConditionCheckFailure
pattern ReturnValuesOnConditionCheckFailure_NONE :: ReturnValuesOnConditionCheckFailure
newtype S3SseAlgorithm
S3SseAlgorithm' :: Text -> S3SseAlgorithm
[fromS3SseAlgorithm] :: S3SseAlgorithm -> Text
pattern S3SseAlgorithm_AES256 :: S3SseAlgorithm
pattern S3SseAlgorithm_KMS :: S3SseAlgorithm
newtype SSEStatus
SSEStatus' :: Text -> SSEStatus
[fromSSEStatus] :: SSEStatus -> Text
pattern SSEStatus_DISABLED :: SSEStatus
pattern SSEStatus_DISABLING :: SSEStatus
pattern SSEStatus_ENABLED :: SSEStatus
pattern SSEStatus_ENABLING :: SSEStatus
pattern SSEStatus_UPDATING :: SSEStatus
newtype SSEType
SSEType' :: Text -> SSEType
[fromSSEType] :: SSEType -> Text
pattern SSEType_AES256 :: SSEType
pattern SSEType_KMS :: SSEType
newtype ScalarAttributeType
ScalarAttributeType' :: Text -> ScalarAttributeType
[fromScalarAttributeType] :: ScalarAttributeType -> Text
pattern ScalarAttributeType_B :: ScalarAttributeType
pattern ScalarAttributeType_N :: ScalarAttributeType
pattern ScalarAttributeType_S :: ScalarAttributeType
newtype Select
Select' :: Text -> Select
[fromSelect] :: Select -> Text
pattern Select_ALL_ATTRIBUTES :: Select
pattern Select_ALL_PROJECTED_ATTRIBUTES :: Select
pattern Select_COUNT :: Select
pattern Select_SPECIFIC_ATTRIBUTES :: Select
newtype StreamViewType
StreamViewType' :: Text -> StreamViewType
[fromStreamViewType] :: StreamViewType -> Text
pattern StreamViewType_KEYS_ONLY :: StreamViewType
pattern StreamViewType_NEW_AND_OLD_IMAGES :: StreamViewType
pattern StreamViewType_NEW_IMAGE :: StreamViewType
pattern StreamViewType_OLD_IMAGE :: StreamViewType
newtype TableStatus
TableStatus' :: Text -> TableStatus
[fromTableStatus] :: TableStatus -> Text
pattern TableStatus_ACTIVE :: TableStatus
pattern TableStatus_ARCHIVED :: TableStatus
pattern TableStatus_ARCHIVING :: TableStatus
pattern TableStatus_CREATING :: TableStatus
pattern TableStatus_DELETING :: TableStatus
pattern TableStatus_INACCESSIBLE_ENCRYPTION_CREDENTIALS :: TableStatus
pattern TableStatus_UPDATING :: TableStatus
newtype TimeToLiveStatus
TimeToLiveStatus' :: Text -> TimeToLiveStatus
[fromTimeToLiveStatus] :: TimeToLiveStatus -> Text
pattern TimeToLiveStatus_DISABLED :: TimeToLiveStatus
pattern TimeToLiveStatus_DISABLING :: TimeToLiveStatus
pattern TimeToLiveStatus_ENABLED :: TimeToLiveStatus
pattern TimeToLiveStatus_ENABLING :: TimeToLiveStatus

-- | Contains details of a table archival operation.
--   
--   <i>See:</i> <a>newArchivalSummary</a> smart constructor.
data ArchivalSummary
ArchivalSummary' :: Maybe Text -> Maybe POSIX -> Maybe Text -> ArchivalSummary

-- | Create a value of <a>ArchivalSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:archivalReason:ArchivalSummary'</a>,
--   <a>archivalSummary_archivalReason</a> - The reason DynamoDB archived
--   the table. Currently, the only possible value is:
--   
--   <ul>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The table was
--   archived due to the table's AWS KMS key being inaccessible for more
--   than seven days. An On-Demand backup was created at the archival
--   time.</li>
--   </ul>
--   
--   <a>$sel:archivalDateTime:ArchivalSummary'</a>,
--   <a>archivalSummary_archivalDateTime</a> - The date and time when table
--   archival was initiated by DynamoDB, in UNIX epoch time format.
--   
--   <a>$sel:archivalBackupArn:ArchivalSummary'</a>,
--   <a>archivalSummary_archivalBackupArn</a> - The Amazon Resource Name
--   (ARN) of the backup the table was archived to, when applicable in the
--   archival reason. If you wish to restore this backup to the same table
--   name, you will need to delete the original table.
newArchivalSummary :: ArchivalSummary

-- | Represents an attribute for describing the key schema for the table
--   and indexes.
--   
--   <i>See:</i> <a>newAttributeDefinition</a> smart constructor.
data AttributeDefinition
AttributeDefinition' :: Text -> ScalarAttributeType -> AttributeDefinition

-- | Create a value of <a>AttributeDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeName:AttributeDefinition'</a>,
--   <a>attributeDefinition_attributeName</a> - A name for the attribute.
--   
--   <a>$sel:attributeType:AttributeDefinition'</a>,
--   <a>attributeDefinition_attributeType</a> - The data type for the
--   attribute, where:
--   
--   <ul>
--   <li><tt>S</tt> - the attribute is of type String</li>
--   <li><tt>N</tt> - the attribute is of type Number</li>
--   <li><tt>B</tt> - the attribute is of type Binary</li>
--   </ul>
newAttributeDefinition :: Text -> ScalarAttributeType -> AttributeDefinition

-- | Represents the data for an attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newAttributeValue</a> smart constructor.
data AttributeValue
AttributeValue' :: Maybe [AttributeValue] -> Maybe [Text] -> Maybe (HashMap Text AttributeValue) -> Maybe Bool -> Maybe Text -> Maybe [Base64] -> Maybe Base64 -> Maybe [Text] -> Maybe Text -> Maybe Bool -> AttributeValue

-- | Create a value of <a>AttributeValue</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:l:AttributeValue'</a>, <a>attributeValue_l</a> - An attribute
--   of type List. For example:
--   
--   <pre>
--   "L": [ {"S": "Cookies"} , {"S": "Coffee"}, {"N", "3.14159"}]
--   </pre>
--   
--   <a>$sel:ns:AttributeValue'</a>, <a>attributeValue_ns</a> - An
--   attribute of type Number Set. For example:
--   
--   <pre>
--   "NS": ["42.2", "-19", "7.5", "3.14"]
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
--   
--   <a>$sel:m:AttributeValue'</a>, <a>attributeValue_m</a> - An attribute
--   of type Map. For example:
--   
--   <pre>
--   "M": {"Name": {"S": "Joe"}, "Age": {"N": "35"}}
--   </pre>
--   
--   <a>$sel:null:AttributeValue'</a>, <a>attributeValue_null</a> - An
--   attribute of type Null. For example:
--   
--   <pre>
--   "NULL": true
--   </pre>
--   
--   <a>$sel:n:AttributeValue'</a>, <a>attributeValue_n</a> - An attribute
--   of type Number. For example:
--   
--   <pre>
--   "N": "123.45"
--   </pre>
--   
--   Numbers are sent across the network to DynamoDB as strings, to
--   maximize compatibility across languages and libraries. However,
--   DynamoDB treats them as number type attributes for mathematical
--   operations.
--   
--   <a>$sel:bs:AttributeValue'</a>, <a>attributeValue_bs</a> - An
--   attribute of type Binary Set. For example:
--   
--   <pre>
--   "BS": ["U3Vubnk=", "UmFpbnk=", "U25vd3k="]
--   </pre>
--   
--   <a>$sel:b:AttributeValue'</a>, <a>attributeValue_b</a> - An attribute
--   of type Binary. For example:
--   
--   <tt>"B": "dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk"</tt>-- -- <i>Note:</i>
--   This <tt>Lens</tt> automatically encodes and decodes Base64 data. --
--   The underlying isomorphism will encode to Base64 representation during
--   -- serialisation, and decode from Base64 representation during
--   deserialisation. -- This <tt>Lens</tt> accepts and returns only raw
--   unencoded data.
--   
--   <a>$sel:ss:AttributeValue'</a>, <a>attributeValue_ss</a> - An
--   attribute of type String Set. For example:
--   
--   <pre>
--   "SS": ["Giraffe", "Hippo" ,"Zebra"]
--   </pre>
--   
--   <a>$sel:s:AttributeValue'</a>, <a>attributeValue_s</a> - An attribute
--   of type String. For example:
--   
--   <pre>
--   "S": "Hello"
--   </pre>
--   
--   <a>$sel:bool:AttributeValue'</a>, <a>attributeValue_bool</a> - An
--   attribute of type Boolean. For example:
--   
--   <pre>
--   "BOOL": true
--   </pre>
newAttributeValue :: AttributeValue

-- | For the <tt>UpdateItem</tt> operation, represents the attributes to be
--   modified, the action to perform on each, and the new value for each.
--   
--   You cannot use <tt>UpdateItem</tt> to update any primary key
--   attributes. Instead, you will need to delete the item, and then use
--   <tt>PutItem</tt> to create a new item with new attributes.
--   
--   Attribute values cannot be null; string and binary type attributes
--   must have lengths greater than zero; and set type attributes must not
--   be empty. Requests with empty values will be rejected with a
--   <tt>ValidationException</tt> exception.
--   
--   <i>See:</i> <a>newAttributeValueUpdate</a> smart constructor.
data AttributeValueUpdate
AttributeValueUpdate' :: Maybe AttributeValue -> Maybe AttributeAction -> AttributeValueUpdate

-- | Create a value of <a>AttributeValueUpdate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:AttributeValueUpdate'</a>,
--   <a>attributeValueUpdate_value</a> - Represents the data for an
--   attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:action:AttributeValueUpdate'</a>,
--   <a>attributeValueUpdate_action</a> - Specifies how to perform the
--   update. Valid values are <tt>PUT</tt> (default), <tt>DELETE</tt>, and
--   <tt>ADD</tt>. The behavior depends on whether the specified primary
--   key already exists in the table.
--   
--   <b>If an item with the specified <i>Key</i> is found in the table:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - Adds the specified attribute to the item. If the
--   attribute already exists, it is replaced by the new value.</li>
--   <li><tt>DELETE</tt> - If no value is specified, the attribute and its
--   value are removed from the item. The data type of the specified value
--   must match the existing value's data type.If a <i>set</i> of values is
--   specified, then those values are subtracted from the old set. For
--   example, if the attribute value was the set <tt>[a,b,c]</tt> and the
--   <tt>DELETE</tt> action specified <tt>[a,c]</tt>, then the final
--   attribute value would be <tt>[b]</tt>. Specifying an empty set is an
--   error.</li>
--   <li><tt>ADD</tt> - If the attribute does not already exist, then the
--   attribute and its values are added to the item. If the attribute does
--   exist, then the behavior of <tt>ADD</tt> depends on the data type of
--   the attribute:<ul><li>If the existing attribute is a number, and if
--   <tt>Value</tt> is also a number, then the <tt>Value</tt> is
--   mathematically added to the existing attribute. If <tt>Value</tt> is a
--   negative number, then it is subtracted from the existing attribute.If
--   you use <tt>ADD</tt> to increment or decrement a number value for an
--   item that doesn't exist before the update, DynamoDB uses 0 as the
--   initial value.In addition, if you use <tt>ADD</tt> to update an
--   existing item, and intend to increment or decrement an attribute value
--   which does not yet exist, DynamoDB uses <tt>0</tt> as the initial
--   value. For example, suppose that the item you want to update does not
--   yet have an attribute named <i>itemcount</i>, but you decide to
--   <tt>ADD</tt> the number <tt>3</tt> to this attribute anyway, even
--   though it currently does not exist. DynamoDB will create the
--   <i>itemcount</i> attribute, set its initial value to <tt>0</tt>, and
--   finally add <tt>3</tt> to it. The result will be a new
--   <i>itemcount</i> attribute in the item, with a value of
--   <tt>3</tt>.</li><li>If the existing data type is a set, and if the
--   <tt>Value</tt> is also a set, then the <tt>Value</tt> is added to the
--   existing set. (This is a <i>set</i> operation, not mathematical
--   addition.) For example, if the attribute value was the set
--   <tt>[1,2]</tt>, and the <tt>ADD</tt> action specified <tt>[3]</tt>,
--   then the final attribute value would be <tt>[1,2,3]</tt>. An error
--   occurs if an Add action is specified for a set attribute and the
--   attribute type specified does not match the existing set type.Both
--   sets must have the same primitive data type. For example, if the
--   existing data type is a set of strings, the <tt>Value</tt> must also
--   be a set of strings. The same holds true for number sets and binary
--   sets.</li></ul>This action is only valid for an existing attribute
--   whose data type is number or is a set. Do not use <tt>ADD</tt> for any
--   other data types.</li>
--   </ul>
--   
--   <b>If no item with the specified <i>Key</i> is found:</b>
--   
--   <ul>
--   <li><tt>PUT</tt> - DynamoDB creates a new item with the specified
--   primary key, and then adds the attribute.</li>
--   <li><tt>DELETE</tt> - Nothing happens; there is no attribute to
--   delete.</li>
--   <li><tt>ADD</tt> - DynamoDB creates an item with the supplied primary
--   key and number (or set of numbers) for the attribute value. The only
--   data types allowed are number and number set; no other data types can
--   be specified.</li>
--   </ul>
newAttributeValueUpdate :: AttributeValueUpdate

-- | Represents the properties of the scaling policy.
--   
--   <i>See:</i> <a>newAutoScalingPolicyDescription</a> smart constructor.
data AutoScalingPolicyDescription
AutoScalingPolicyDescription' :: Maybe Text -> Maybe AutoScalingTargetTrackingScalingPolicyConfigurationDescription -> AutoScalingPolicyDescription

-- | Create a value of <a>AutoScalingPolicyDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:policyName:AutoScalingPolicyDescription'</a>,
--   <a>autoScalingPolicyDescription_policyName</a> - The name of the
--   scaling policy.
--   
--   
--   <a>$sel:targetTrackingScalingPolicyConfiguration:AutoScalingPolicyDescription'</a>,
--   <a>autoScalingPolicyDescription_targetTrackingScalingPolicyConfiguration</a>
--   - Represents a target tracking scaling policy configuration.
newAutoScalingPolicyDescription :: AutoScalingPolicyDescription

-- | Represents the auto scaling policy to be modified.
--   
--   <i>See:</i> <a>newAutoScalingPolicyUpdate</a> smart constructor.
data AutoScalingPolicyUpdate
AutoScalingPolicyUpdate' :: Maybe Text -> AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> AutoScalingPolicyUpdate

-- | Create a value of <a>AutoScalingPolicyUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:policyName:AutoScalingPolicyUpdate'</a>,
--   <a>autoScalingPolicyUpdate_policyName</a> - The name of the scaling
--   policy.
--   
--   
--   <a>$sel:targetTrackingScalingPolicyConfiguration:AutoScalingPolicyUpdate'</a>,
--   <a>autoScalingPolicyUpdate_targetTrackingScalingPolicyConfiguration</a>
--   - Represents a target tracking scaling policy configuration.
newAutoScalingPolicyUpdate :: AutoScalingTargetTrackingScalingPolicyConfigurationUpdate -> AutoScalingPolicyUpdate

-- | Represents the auto scaling settings for a global table or global
--   secondary index.
--   
--   <i>See:</i> <a>newAutoScalingSettingsDescription</a> smart
--   constructor.
data AutoScalingSettingsDescription
AutoScalingSettingsDescription' :: Maybe Bool -> Maybe Natural -> Maybe Natural -> Maybe [AutoScalingPolicyDescription] -> Maybe Text -> AutoScalingSettingsDescription

-- | Create a value of <a>AutoScalingSettingsDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:autoScalingDisabled:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_autoScalingDisabled</a> - Disabled
--   auto scaling for this global table or global secondary index.
--   
--   <a>$sel:minimumUnits:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_minimumUnits</a> - The minimum
--   capacity units that a global table or global secondary index should be
--   scaled down to.
--   
--   <a>$sel:maximumUnits:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_maximumUnits</a> - The maximum
--   capacity units that a global table or global secondary index should be
--   scaled up to.
--   
--   <a>$sel:scalingPolicies:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_scalingPolicies</a> - Information
--   about the scaling policies.
--   
--   <a>$sel:autoScalingRoleArn:AutoScalingSettingsDescription'</a>,
--   <a>autoScalingSettingsDescription_autoScalingRoleArn</a> - Role ARN
--   used for configuring the auto scaling policy.
newAutoScalingSettingsDescription :: AutoScalingSettingsDescription

-- | Represents the auto scaling settings to be modified for a global table
--   or global secondary index.
--   
--   <i>See:</i> <a>newAutoScalingSettingsUpdate</a> smart constructor.
data AutoScalingSettingsUpdate
AutoScalingSettingsUpdate' :: Maybe Bool -> Maybe Natural -> Maybe AutoScalingPolicyUpdate -> Maybe Natural -> Maybe Text -> AutoScalingSettingsUpdate

-- | Create a value of <a>AutoScalingSettingsUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:autoScalingDisabled:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_autoScalingDisabled</a> - Disabled auto
--   scaling for this global table or global secondary index.
--   
--   <a>$sel:minimumUnits:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_minimumUnits</a> - The minimum capacity
--   units that a global table or global secondary index should be scaled
--   down to.
--   
--   <a>$sel:scalingPolicyUpdate:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_scalingPolicyUpdate</a> - The scaling
--   policy to apply for scaling target global table or global secondary
--   index capacity units.
--   
--   <a>$sel:maximumUnits:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_maximumUnits</a> - The maximum capacity
--   units that a global table or global secondary index should be scaled
--   up to.
--   
--   <a>$sel:autoScalingRoleArn:AutoScalingSettingsUpdate'</a>,
--   <a>autoScalingSettingsUpdate_autoScalingRoleArn</a> - Role ARN used
--   for configuring auto scaling policy.
newAutoScalingSettingsUpdate :: AutoScalingSettingsUpdate

-- | Represents the properties of a target tracking scaling policy.
--   
--   <i>See:</i>
--   <a>newAutoScalingTargetTrackingScalingPolicyConfigurationDescription</a>
--   smart constructor.
data AutoScalingTargetTrackingScalingPolicyConfigurationDescription
AutoScalingTargetTrackingScalingPolicyConfigurationDescription' :: Maybe Int -> Maybe Bool -> Maybe Int -> Double -> AutoScalingTargetTrackingScalingPolicyConfigurationDescription

-- | Create a value of
--   <a>AutoScalingTargetTrackingScalingPolicyConfigurationDescription</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:scaleInCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationDescription_scaleInCooldown</a>
--   - The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
--   
--   
--   <a>$sel:disableScaleIn:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationDescription_disableScaleIn</a>
--   - Indicates whether scale in by the target tracking policy is
--   disabled. If the value is true, scale in is disabled and the target
--   tracking policy won't remove capacity from the scalable resource.
--   Otherwise, scale in is enabled and the target tracking policy can
--   remove capacity from the scalable resource. The default value is
--   false.
--   
--   
--   <a>$sel:scaleOutCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationDescription_scaleOutCooldown</a>
--   - The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
--   
--   
--   <a>$sel:targetValue:AutoScalingTargetTrackingScalingPolicyConfigurationDescription'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationDescription_targetValue</a>
--   - The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
newAutoScalingTargetTrackingScalingPolicyConfigurationDescription :: Double -> AutoScalingTargetTrackingScalingPolicyConfigurationDescription

-- | Represents the settings of a target tracking scaling policy that will
--   be modified.
--   
--   <i>See:</i>
--   <a>newAutoScalingTargetTrackingScalingPolicyConfigurationUpdate</a>
--   smart constructor.
data AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
AutoScalingTargetTrackingScalingPolicyConfigurationUpdate' :: Maybe Int -> Maybe Bool -> Maybe Int -> Double -> AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

-- | Create a value of
--   <a>AutoScalingTargetTrackingScalingPolicyConfigurationUpdate</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:scaleInCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationUpdate_scaleInCooldown</a>
--   - The amount of time, in seconds, after a scale in activity completes
--   before another scale in activity can start. The cooldown period is
--   used to block subsequent scale in requests until it has expired. You
--   should scale in conservatively to protect your application's
--   availability. However, if another alarm triggers a scale out policy
--   during the cooldown period after a scale-in, application auto scaling
--   scales out your scalable target immediately.
--   
--   
--   <a>$sel:disableScaleIn:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationUpdate_disableScaleIn</a>
--   - Indicates whether scale in by the target tracking policy is
--   disabled. If the value is true, scale in is disabled and the target
--   tracking policy won't remove capacity from the scalable resource.
--   Otherwise, scale in is enabled and the target tracking policy can
--   remove capacity from the scalable resource. The default value is
--   false.
--   
--   
--   <a>$sel:scaleOutCooldown:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationUpdate_scaleOutCooldown</a>
--   - The amount of time, in seconds, after a scale out activity completes
--   before another scale out activity can start. While the cooldown period
--   is in effect, the capacity that has been added by the previous scale
--   out event that initiated the cooldown is calculated as part of the
--   desired capacity for the next scale out. You should continuously (but
--   not excessively) scale out.
--   
--   
--   <a>$sel:targetValue:AutoScalingTargetTrackingScalingPolicyConfigurationUpdate'</a>,
--   <a>autoScalingTargetTrackingScalingPolicyConfigurationUpdate_targetValue</a>
--   - The target value for the metric. The range is 8.515920e-109 to
--   1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
newAutoScalingTargetTrackingScalingPolicyConfigurationUpdate :: Double -> AutoScalingTargetTrackingScalingPolicyConfigurationUpdate

-- | Contains the description of the backup created for the table.
--   
--   <i>See:</i> <a>newBackupDescription</a> smart constructor.
data BackupDescription
BackupDescription' :: Maybe BackupDetails -> Maybe SourceTableDetails -> Maybe SourceTableFeatureDetails -> BackupDescription

-- | Create a value of <a>BackupDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupDetails:BackupDescription'</a>,
--   <a>backupDescription_backupDetails</a> - Contains the details of the
--   backup created for the table.
--   
--   <a>$sel:sourceTableDetails:BackupDescription'</a>,
--   <a>backupDescription_sourceTableDetails</a> - Contains the details of
--   the table when the backup was created.
--   
--   <a>$sel:sourceTableFeatureDetails:BackupDescription'</a>,
--   <a>backupDescription_sourceTableFeatureDetails</a> - Contains the
--   details of the features enabled on the table when the backup was
--   created. For example, LSIs, GSIs, streams, TTL.
newBackupDescription :: BackupDescription

-- | Contains the details of the backup created for the table.
--   
--   <i>See:</i> <a>newBackupDetails</a> smart constructor.
data BackupDetails
BackupDetails' :: Maybe POSIX -> Maybe Natural -> Text -> Text -> BackupStatus -> BackupType -> POSIX -> BackupDetails

-- | Create a value of <a>BackupDetails</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupExpiryDateTime:BackupDetails'</a>,
--   <a>backupDetails_backupExpiryDateTime</a> - Time at which the
--   automatic on-demand backup created by DynamoDB will expire. This
--   <tt>SYSTEM</tt> on-demand backup expires automatically 35 days after
--   its creation.
--   
--   <a>$sel:backupSizeBytes:BackupDetails'</a>,
--   <a>backupDetails_backupSizeBytes</a> - Size of the backup in bytes.
--   
--   <a>$sel:backupArn:BackupDetails'</a>, <a>backupDetails_backupArn</a> -
--   ARN associated with the backup.
--   
--   <a>$sel:backupName:BackupDetails'</a>, <a>backupDetails_backupName</a>
--   - Name of the requested backup.
--   
--   <a>$sel:backupStatus:BackupDetails'</a>,
--   <a>backupDetails_backupStatus</a> - Backup can be in one of the
--   following states: CREATING, ACTIVE, DELETED.
--   
--   <a>$sel:backupType:BackupDetails'</a>, <a>backupDetails_backupType</a>
--   - BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
--   
--   <a>$sel:backupCreationDateTime:BackupDetails'</a>,
--   <a>backupDetails_backupCreationDateTime</a> - Time at which the backup
--   was created. This is the request time of the backup.
newBackupDetails :: Text -> Text -> BackupStatus -> BackupType -> UTCTime -> BackupDetails

-- | Contains details for the backup.
--   
--   <i>See:</i> <a>newBackupSummary</a> smart constructor.
data BackupSummary
BackupSummary' :: Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe BackupStatus -> Maybe Natural -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe BackupType -> Maybe Text -> BackupSummary

-- | Create a value of <a>BackupSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backupExpiryDateTime:BackupSummary'</a>,
--   <a>backupSummary_backupExpiryDateTime</a> - Time at which the
--   automatic on-demand backup created by DynamoDB will expire. This
--   <tt>SYSTEM</tt> on-demand backup expires automatically 35 days after
--   its creation.
--   
--   <a>$sel:tableArn:BackupSummary'</a>, <a>backupSummary_tableArn</a> -
--   ARN associated with the table.
--   
--   <a>$sel:backupName:BackupSummary'</a>, <a>backupSummary_backupName</a>
--   - Name of the specified backup.
--   
--   <a>$sel:backupStatus:BackupSummary'</a>,
--   <a>backupSummary_backupStatus</a> - Backup can be in one of the
--   following states: CREATING, ACTIVE, DELETED.
--   
--   <a>$sel:backupSizeBytes:BackupSummary'</a>,
--   <a>backupSummary_backupSizeBytes</a> - Size of the backup in bytes.
--   
--   <a>$sel:backupArn:BackupSummary'</a>, <a>backupSummary_backupArn</a> -
--   ARN associated with the backup.
--   
--   <a>$sel:tableId:BackupSummary'</a>, <a>backupSummary_tableId</a> -
--   Unique identifier for the table.
--   
--   <a>$sel:backupCreationDateTime:BackupSummary'</a>,
--   <a>backupSummary_backupCreationDateTime</a> - Time at which the backup
--   was created.
--   
--   <a>$sel:backupType:BackupSummary'</a>, <a>backupSummary_backupType</a>
--   - BackupType:
--   
--   <ul>
--   <li><tt>USER</tt> - You create and manage these using the on-demand
--   backup feature.</li>
--   <li><tt>SYSTEM</tt> - If you delete a table with point-in-time
--   recovery enabled, a <tt>SYSTEM</tt> backup is automatically created
--   and is retained for 35 days (at no additional cost). System backups
--   allow you to restore the deleted table to the state it was in just
--   before the point of deletion.</li>
--   <li><tt>AWS_BACKUP</tt> - On-demand backup created by you from AWS
--   Backup service.</li>
--   </ul>
--   
--   <a>$sel:tableName:BackupSummary'</a>, <a>backupSummary_tableName</a> -
--   Name of the table.
newBackupSummary :: BackupSummary

-- | An error associated with a statement in a PartiQL batch that was run.
--   
--   <i>See:</i> <a>newBatchStatementError</a> smart constructor.
data BatchStatementError
BatchStatementError' :: Maybe BatchStatementErrorCodeEnum -> Maybe Text -> BatchStatementError

-- | Create a value of <a>BatchStatementError</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:code:BatchStatementError'</a>, <a>batchStatementError_code</a>
--   - The error code associated with the failed PartiQL batch statement.
--   
--   <a>$sel:message:BatchStatementError'</a>,
--   <a>batchStatementError_message</a> - The error message associated with
--   the PartiQL batch resposne.
newBatchStatementError :: BatchStatementError

-- | A PartiQL batch statement request.
--   
--   <i>See:</i> <a>newBatchStatementRequest</a> smart constructor.
data BatchStatementRequest
BatchStatementRequest' :: Maybe Bool -> Maybe (NonEmpty AttributeValue) -> Text -> BatchStatementRequest

-- | Create a value of <a>BatchStatementRequest</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:consistentRead:BatchStatementRequest'</a>,
--   <a>batchStatementRequest_consistentRead</a> - The read consistency of
--   the PartiQL batch request.
--   
--   <a>$sel:parameters:BatchStatementRequest'</a>,
--   <a>batchStatementRequest_parameters</a> - The parameters associated
--   with a PartiQL statement in the batch request.
--   
--   <a>$sel:statement:BatchStatementRequest'</a>,
--   <a>batchStatementRequest_statement</a> - A valid PartiQL statement.
newBatchStatementRequest :: Text -> BatchStatementRequest

-- | A PartiQL batch statement response..
--   
--   <i>See:</i> <a>newBatchStatementResponse</a> smart constructor.
data BatchStatementResponse
BatchStatementResponse' :: Maybe BatchStatementError -> Maybe (HashMap Text AttributeValue) -> Maybe Text -> BatchStatementResponse

-- | Create a value of <a>BatchStatementResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:error:BatchStatementResponse'</a>,
--   <a>batchStatementResponse_error</a> - The error associated with a
--   failed PartiQL batch statement.
--   
--   <a>$sel:item:BatchStatementResponse'</a>,
--   <a>batchStatementResponse_item</a> - A DynamoDB item associated with a
--   BatchStatementResponse
--   
--   <a>$sel:tableName:BatchStatementResponse'</a>,
--   <a>batchStatementResponse_tableName</a> - The table name associated
--   with a failed PartiQL batch statement.
newBatchStatementResponse :: BatchStatementResponse

-- | Contains the details for the read/write capacity mode.
--   
--   <i>See:</i> <a>newBillingModeSummary</a> smart constructor.
data BillingModeSummary
BillingModeSummary' :: Maybe POSIX -> Maybe BillingMode -> BillingModeSummary

-- | Create a value of <a>BillingModeSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastUpdateToPayPerRequestDateTime:BillingModeSummary'</a>,
--   <a>billingModeSummary_lastUpdateToPayPerRequestDateTime</a> -
--   Represents the time when <tt>PAY_PER_REQUEST</tt> was last set as the
--   read/write capacity mode.
--   
--   <a>$sel:billingMode:BillingModeSummary'</a>,
--   <a>billingModeSummary_billingMode</a> - Controls how you are charged
--   for read and write throughput and how you manage capacity. This
--   setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
newBillingModeSummary :: BillingModeSummary

-- | Represents the amount of provisioned throughput capacity consumed on a
--   table or an index.
--   
--   <i>See:</i> <a>newCapacity</a> smart constructor.
data Capacity
Capacity' :: Maybe Double -> Maybe Double -> Maybe Double -> Capacity

-- | Create a value of <a>Capacity</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:Capacity'</a>,
--   <a>capacity_readCapacityUnits</a> - The total number of read capacity
--   units consumed on a table or an index.
--   
--   <a>$sel:capacityUnits:Capacity'</a>, <a>capacity_capacityUnits</a> -
--   The total number of capacity units consumed on a table or an index.
--   
--   <a>$sel:writeCapacityUnits:Capacity'</a>,
--   <a>capacity_writeCapacityUnits</a> - The total number of write
--   capacity units consumed on a table or an index.
newCapacity :: Capacity

-- | Represents the selection criteria for a <tt>Query</tt> or
--   <tt>Scan</tt> operation:
--   
--   <ul>
--   <li>For a <tt>Query</tt> operation, <tt>Condition</tt> is used for
--   specifying the <tt>KeyConditions</tt> to use when querying a table or
--   an index. For <tt>KeyConditions</tt>, only the following comparison
--   operators are supported:<pre>EQ | LE | LT | GE | GT | BEGINS_WITH |
--   BETWEEN</pre><tt>Condition</tt> is also used in a
--   <tt>QueryFilter</tt>, which evaluates the query results and returns
--   only the desired values.</li>
--   <li>For a <tt>Scan</tt> operation, <tt>Condition</tt> is used in a
--   <tt>ScanFilter</tt>, which evaluates the scan results and returns only
--   the desired values.</li>
--   </ul>
--   
--   <i>See:</i> <a>newCondition</a> smart constructor.
data Condition
Condition' :: Maybe [AttributeValue] -> ComparisonOperator -> Condition

-- | Create a value of <a>Condition</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeValueList:Condition'</a>,
--   <a>condition_attributeValueList</a> - One or more values to evaluate
--   against the supplied attribute. The number of values in the list
--   depends on the <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   <a>$sel:comparisonOperator:Condition'</a>,
--   <a>condition_comparisonOperator</a> - A comparator for evaluating
--   attributes. For example, equals, greater than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
--   
--   For usage examples of <tt>AttributeValueList</tt> and
--   <tt>ComparisonOperator</tt>, see <a>Legacy Conditional Parameters</a>
--   in the <i>Amazon DynamoDB Developer Guide</i>.
newCondition :: ComparisonOperator -> Condition

-- | Represents a request to perform a check that an item exists or to
--   check the condition of specific attributes of the item.
--   
--   <i>See:</i> <a>newConditionCheck</a> smart constructor.
data ConditionCheck
ConditionCheck' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnValuesOnConditionCheckFailure -> HashMap Text AttributeValue -> Text -> Text -> ConditionCheck

-- | Create a value of <a>ConditionCheck</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:ConditionCheck'</a>,
--   <a>conditionCheck_expressionAttributeNames</a> - One or more
--   substitution tokens for attribute names in an expression.
--   
--   <a>$sel:expressionAttributeValues:ConditionCheck'</a>,
--   <a>conditionCheck_expressionAttributeValues</a> - One or more values
--   that can be substituted in an expression.
--   
--   <a>$sel:returnValuesOnConditionCheckFailure:ConditionCheck'</a>,
--   <a>conditionCheck_returnValuesOnConditionCheckFailure</a> - Use
--   <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>ConditionCheck</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
--   
--   <a>$sel:key:ConditionCheck'</a>, <a>conditionCheck_key</a> - The
--   primary key of the item to be checked. Each element consists of an
--   attribute name and a value for that attribute.
--   
--   <a>$sel:tableName:ConditionCheck'</a>, <a>conditionCheck_tableName</a>
--   - Name of the table for the check item request.
--   
--   <a>$sel:conditionExpression:ConditionCheck'</a>,
--   <a>conditionCheck_conditionExpression</a> - A condition that must be
--   satisfied in order for a conditional update to succeed.
newConditionCheck :: Text -> Text -> ConditionCheck

-- | The capacity units consumed by an operation. The data returned
--   includes the total provisioned throughput consumed, along with
--   statistics for the table and any indexes involved in the operation.
--   <tt>ConsumedCapacity</tt> is only returned if the request asked for
--   it. For more information, see <a>Provisioned Throughput</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>See:</i> <a>newConsumedCapacity</a> smart constructor.
data ConsumedCapacity
ConsumedCapacity' :: Maybe Double -> Maybe (HashMap Text Capacity) -> Maybe Double -> Maybe Double -> Maybe (HashMap Text Capacity) -> Maybe Capacity -> Maybe Text -> ConsumedCapacity

-- | Create a value of <a>ConsumedCapacity</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:ConsumedCapacity'</a>,
--   <a>consumedCapacity_readCapacityUnits</a> - The total number of read
--   capacity units consumed by the operation.
--   
--   <a>$sel:globalSecondaryIndexes:ConsumedCapacity'</a>,
--   <a>consumedCapacity_globalSecondaryIndexes</a> - The amount of
--   throughput consumed on each global index affected by the operation.
--   
--   <a>$sel:capacityUnits:ConsumedCapacity'</a>,
--   <a>consumedCapacity_capacityUnits</a> - The total number of capacity
--   units consumed by the operation.
--   
--   <a>$sel:writeCapacityUnits:ConsumedCapacity'</a>,
--   <a>consumedCapacity_writeCapacityUnits</a> - The total number of write
--   capacity units consumed by the operation.
--   
--   <a>$sel:localSecondaryIndexes:ConsumedCapacity'</a>,
--   <a>consumedCapacity_localSecondaryIndexes</a> - The amount of
--   throughput consumed on each local index affected by the operation.
--   
--   <a>$sel:table:ConsumedCapacity'</a>, <a>consumedCapacity_table</a> -
--   The amount of throughput consumed on the table affected by the
--   operation.
--   
--   <a>$sel:tableName:ConsumedCapacity'</a>,
--   <a>consumedCapacity_tableName</a> - The name of the table that was
--   affected by the operation.
newConsumedCapacity :: ConsumedCapacity

-- | Represents the continuous backups and point in time recovery settings
--   on the table.
--   
--   <i>See:</i> <a>newContinuousBackupsDescription</a> smart constructor.
data ContinuousBackupsDescription
ContinuousBackupsDescription' :: Maybe PointInTimeRecoveryDescription -> ContinuousBackupsStatus -> ContinuousBackupsDescription

-- | Create a value of <a>ContinuousBackupsDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:pointInTimeRecoveryDescription:ContinuousBackupsDescription'</a>,
--   <a>continuousBackupsDescription_pointInTimeRecoveryDescription</a> -
--   The description of the point in time recovery settings applied to the
--   table.
--   
--   <a>$sel:continuousBackupsStatus:ContinuousBackupsDescription'</a>,
--   <a>continuousBackupsDescription_continuousBackupsStatus</a> -
--   <tt>ContinuousBackupsStatus</tt> can be one of the following states:
--   ENABLED, DISABLED
newContinuousBackupsDescription :: ContinuousBackupsStatus -> ContinuousBackupsDescription

-- | Represents a Contributor Insights summary entry.
--   
--   <i>See:</i> <a>newContributorInsightsSummary</a> smart constructor.
data ContributorInsightsSummary
ContributorInsightsSummary' :: Maybe ContributorInsightsStatus -> Maybe Text -> Maybe Text -> ContributorInsightsSummary

-- | Create a value of <a>ContributorInsightsSummary</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:contributorInsightsStatus:ContributorInsightsSummary'</a>,
--   <a>contributorInsightsSummary_contributorInsightsStatus</a> -
--   Describes the current status for contributor insights for the given
--   table and index, if applicable.
--   
--   <a>$sel:tableName:ContributorInsightsSummary'</a>,
--   <a>contributorInsightsSummary_tableName</a> - Name of the table
--   associated with the summary.
--   
--   <a>$sel:indexName:ContributorInsightsSummary'</a>,
--   <a>contributorInsightsSummary_indexName</a> - Name of the index
--   associated with the summary, if any.
newContributorInsightsSummary :: ContributorInsightsSummary

-- | Represents a new global secondary index to be added to an existing
--   table.
--   
--   <i>See:</i> <a>newCreateGlobalSecondaryIndexAction</a> smart
--   constructor.
data CreateGlobalSecondaryIndexAction
CreateGlobalSecondaryIndexAction' :: Maybe ProvisionedThroughput -> Text -> NonEmpty KeySchemaElement -> Projection -> CreateGlobalSecondaryIndexAction

-- | Create a value of <a>CreateGlobalSecondaryIndexAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:provisionedThroughput:CreateGlobalSecondaryIndexAction'</a>,
--   <a>createGlobalSecondaryIndexAction_provisionedThroughput</a> -
--   Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:indexName:CreateGlobalSecondaryIndexAction'</a>,
--   <a>createGlobalSecondaryIndexAction_indexName</a> - The name of the
--   global secondary index to be created.
--   
--   <a>$sel:keySchema:CreateGlobalSecondaryIndexAction'</a>,
--   <a>createGlobalSecondaryIndexAction_keySchema</a> - The key schema for
--   the global secondary index.
--   
--   <a>$sel:projection:CreateGlobalSecondaryIndexAction'</a>,
--   <a>createGlobalSecondaryIndexAction_projection</a> - Represents
--   attributes that are copied (projected) from the table into an index.
--   These are in addition to the primary key attributes and index key
--   attributes, which are automatically projected.
newCreateGlobalSecondaryIndexAction :: Text -> NonEmpty KeySchemaElement -> Projection -> CreateGlobalSecondaryIndexAction

-- | Represents a replica to be added.
--   
--   <i>See:</i> <a>newCreateReplicaAction</a> smart constructor.
data CreateReplicaAction
CreateReplicaAction' :: Text -> CreateReplicaAction

-- | Create a value of <a>CreateReplicaAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:CreateReplicaAction'</a>,
--   <a>createReplicaAction_regionName</a> - The Region of the replica to
--   be added.
newCreateReplicaAction :: Text -> CreateReplicaAction

-- | Represents a replica to be created.
--   
--   <i>See:</i> <a>newCreateReplicationGroupMemberAction</a> smart
--   constructor.
data CreateReplicationGroupMemberAction
CreateReplicationGroupMemberAction' :: Maybe Text -> Maybe ProvisionedThroughputOverride -> Maybe (NonEmpty ReplicaGlobalSecondaryIndex) -> Text -> CreateReplicationGroupMemberAction

-- | Create a value of <a>CreateReplicationGroupMemberAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsMasterKeyId:CreateReplicationGroupMemberAction'</a>,
--   <a>createReplicationGroupMemberAction_kmsMasterKeyId</a> - The AWS KMS
--   customer master key (CMK) that should be used for AWS KMS encryption
--   in the new replica. To specify a CMK, use its key ID, Amazon Resource
--   Name (ARN), alias name, or alias ARN. Note that you should only
--   provide this parameter if the key is different from the default
--   DynamoDB KMS master key alias/aws/dynamodb.
--   
--   
--   <a>$sel:provisionedThroughputOverride:CreateReplicationGroupMemberAction'</a>,
--   <a>createReplicationGroupMemberAction_provisionedThroughputOverride</a>
--   - Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
--   
--   
--   <a>$sel:globalSecondaryIndexes:CreateReplicationGroupMemberAction'</a>,
--   <a>createReplicationGroupMemberAction_globalSecondaryIndexes</a> -
--   Replica-specific global secondary index settings.
--   
--   <a>$sel:regionName:CreateReplicationGroupMemberAction'</a>,
--   <a>createReplicationGroupMemberAction_regionName</a> - The Region
--   where the new replica will be created.
newCreateReplicationGroupMemberAction :: Text -> CreateReplicationGroupMemberAction

-- | Represents a request to perform a <tt>DeleteItem</tt> operation.
--   
--   <i>See:</i> <a>newDelete</a> smart constructor.
data Delete
Delete' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnValuesOnConditionCheckFailure -> Maybe Text -> HashMap Text AttributeValue -> Text -> Delete

-- | Create a value of <a>Delete</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:Delete'</a>,
--   <a>delete_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression.
--   
--   <a>$sel:expressionAttributeValues:Delete'</a>,
--   <a>delete_expressionAttributeValues</a> - One or more values that can
--   be substituted in an expression.
--   
--   <a>$sel:returnValuesOnConditionCheckFailure:Delete'</a>,
--   <a>delete_returnValuesOnConditionCheckFailure</a> - Use
--   <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Delete</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
--   
--   <a>$sel:conditionExpression:Delete'</a>,
--   <a>delete_conditionExpression</a> - A condition that must be satisfied
--   in order for a conditional delete to succeed.
--   
--   <a>$sel:key:Delete'</a>, <a>delete_key</a> - The primary key of the
--   item to be deleted. Each element consists of an attribute name and a
--   value for that attribute.
--   
--   <a>$sel:tableName:Delete'</a>, <a>delete_tableName</a> - Name of the
--   table in which the item to be deleted resides.
newDelete :: Text -> Delete

-- | Represents a global secondary index to be deleted from an existing
--   table.
--   
--   <i>See:</i> <a>newDeleteGlobalSecondaryIndexAction</a> smart
--   constructor.
data DeleteGlobalSecondaryIndexAction
DeleteGlobalSecondaryIndexAction' :: Text -> DeleteGlobalSecondaryIndexAction

-- | Create a value of <a>DeleteGlobalSecondaryIndexAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:DeleteGlobalSecondaryIndexAction'</a>,
--   <a>deleteGlobalSecondaryIndexAction_indexName</a> - The name of the
--   global secondary index to be deleted.
newDeleteGlobalSecondaryIndexAction :: Text -> DeleteGlobalSecondaryIndexAction

-- | Represents a replica to be removed.
--   
--   <i>See:</i> <a>newDeleteReplicaAction</a> smart constructor.
data DeleteReplicaAction
DeleteReplicaAction' :: Text -> DeleteReplicaAction

-- | Create a value of <a>DeleteReplicaAction</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:DeleteReplicaAction'</a>,
--   <a>deleteReplicaAction_regionName</a> - The Region of the replica to
--   be removed.
newDeleteReplicaAction :: Text -> DeleteReplicaAction

-- | Represents a replica to be deleted.
--   
--   <i>See:</i> <a>newDeleteReplicationGroupMemberAction</a> smart
--   constructor.
data DeleteReplicationGroupMemberAction
DeleteReplicationGroupMemberAction' :: Text -> DeleteReplicationGroupMemberAction

-- | Create a value of <a>DeleteReplicationGroupMemberAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:DeleteReplicationGroupMemberAction'</a>,
--   <a>deleteReplicationGroupMemberAction_regionName</a> - The Region
--   where the replica exists.
newDeleteReplicationGroupMemberAction :: Text -> DeleteReplicationGroupMemberAction

-- | Represents a request to perform a <tt>DeleteItem</tt> operation on an
--   item.
--   
--   <i>See:</i> <a>newDeleteRequest</a> smart constructor.
data DeleteRequest
DeleteRequest' :: HashMap Text AttributeValue -> DeleteRequest

-- | Create a value of <a>DeleteRequest</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:DeleteRequest'</a>, <a>deleteRequest_key</a> - A map of
--   attribute name to attribute values, representing the primary key of
--   the item to delete. All of the table's primary key attributes must be
--   specified, and their data types must match those of the table's key
--   schema.
newDeleteRequest :: DeleteRequest

-- | An endpoint information details.
--   
--   <i>See:</i> <a>newEndpoint</a> smart constructor.
data Endpoint
Endpoint' :: Text -> Integer -> Endpoint

-- | Create a value of <a>Endpoint</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:address:Endpoint'</a>, <a>endpoint_address</a> - IP address of
--   the endpoint.
--   
--   <a>$sel:cachePeriodInMinutes:Endpoint'</a>,
--   <a>endpoint_cachePeriodInMinutes</a> - Endpoint cache time to live
--   (TTL) value.
newEndpoint :: Text -> Integer -> Endpoint

-- | Represents a condition to be compared with an attribute value. This
--   condition can be used with <tt>DeleteItem</tt>, <tt>PutItem</tt>, or
--   <tt>UpdateItem</tt> operations; if the comparison evaluates to true,
--   the operation succeeds; if not, the operation fails. You can use
--   <tt>ExpectedAttributeValue</tt> in one of two different ways:
--   
--   <ul>
--   <li>Use <tt>AttributeValueList</tt> to specify one or more values to
--   compare against an attribute. Use <tt>ComparisonOperator</tt> to
--   specify how you want to perform the comparison. If the comparison
--   evaluates to true, then the conditional operation succeeds.</li>
--   <li>Use <tt>Value</tt> to specify a value that DynamoDB will compare
--   against an attribute. If the values match, then
--   <tt>ExpectedAttributeValue</tt> evaluates to true and the conditional
--   operation succeeds. Optionally, you can also set <tt>Exists</tt> to
--   false, indicating that you <i>do not</i> expect to find the attribute
--   value in the table. In this case, the conditional operation succeeds
--   only if the comparison evaluates to false.</li>
--   </ul>
--   
--   <tt>Value</tt> and <tt>Exists</tt> are incompatible with
--   <tt>AttributeValueList</tt> and <tt>ComparisonOperator</tt>. Note that
--   if you use both sets of parameters at once, DynamoDB will return a
--   <tt>ValidationException</tt> exception.
--   
--   <i>See:</i> <a>newExpectedAttributeValue</a> smart constructor.
data ExpectedAttributeValue
ExpectedAttributeValue' :: Maybe [AttributeValue] -> Maybe Bool -> Maybe AttributeValue -> Maybe ComparisonOperator -> ExpectedAttributeValue

-- | Create a value of <a>ExpectedAttributeValue</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeValueList:ExpectedAttributeValue'</a>,
--   <a>expectedAttributeValue_attributeValueList</a> - One or more values
--   to evaluate against the supplied attribute. The number of values in
--   the list depends on the <tt>ComparisonOperator</tt> being used.
--   
--   For type Number, value comparisons are numeric.
--   
--   String value comparisons for greater than, equals, or less than are
--   based on ASCII character code values. For example, <tt>a</tt> is
--   greater than <tt>A</tt>, and <tt>a</tt> is greater than <tt>B</tt>.
--   For a list of code values, see
--   <a>http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters</a>.
--   
--   For Binary, DynamoDB treats each byte of the binary data as unsigned
--   when it compares binary values.
--   
--   For information on specifying data types in JSON, see <a>JSON Data
--   Format</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:exists:ExpectedAttributeValue'</a>,
--   <a>expectedAttributeValue_exists</a> - Causes DynamoDB to evaluate the
--   value before attempting a conditional operation:
--   
--   <ul>
--   <li>If <tt>Exists</tt> is <tt>true</tt>, DynamoDB will check to see if
--   that attribute value already exists in the table. If it is found, then
--   the operation succeeds. If it is not found, the operation fails with a
--   <tt>ConditionCheckFailedException</tt>.</li>
--   <li>If <tt>Exists</tt> is <tt>false</tt>, DynamoDB assumes that the
--   attribute value does not exist in the table. If in fact the value does
--   not exist, then the assumption is valid and the operation succeeds. If
--   the value is found, despite the assumption that it does not exist, the
--   operation fails with a <tt>ConditionCheckFailedException</tt>.</li>
--   </ul>
--   
--   The default setting for <tt>Exists</tt> is <tt>true</tt>. If you
--   supply a <tt>Value</tt> all by itself, DynamoDB assumes the attribute
--   exists: You don't have to set <tt>Exists</tt> to <tt>true</tt>,
--   because it is implied.
--   
--   DynamoDB returns a <tt>ValidationException</tt> if:
--   
--   <ul>
--   <li><tt>Exists</tt> is <tt>true</tt> but there is no <tt>Value</tt> to
--   check. (You expect a value to exist, but don't specify what that value
--   is.)</li>
--   <li><tt>Exists</tt> is <tt>false</tt> but you also provide a
--   <tt>Value</tt>. (You cannot expect an attribute to have a value, while
--   also expecting it not to exist.)</li>
--   </ul>
--   
--   <a>$sel:value:ExpectedAttributeValue'</a>,
--   <a>expectedAttributeValue_value</a> - Represents the data for the
--   expected attribute.
--   
--   Each attribute value is described as a name-value pair. The name is
--   the data type, and the value is the data itself.
--   
--   For more information, see <a>Data Types</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:comparisonOperator:ExpectedAttributeValue'</a>,
--   <a>expectedAttributeValue_comparisonOperator</a> - A comparator for
--   evaluating attributes in the <tt>AttributeValueList</tt>. For example,
--   equals, greater than, less than, etc.
--   
--   The following comparison operators are available:
--   
--   <pre>
--   EQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN
--   </pre>
--   
--   The following are descriptions of each comparison operator.
--   
--   <ul>
--   <li><tt>EQ</tt> : Equal. <tt>EQ</tt> is supported for all data types,
--   including lists and maps.<tt>AttributeValueList</tt> can contain only
--   one <tt>AttributeValue</tt> element of type String, Number, Binary,
--   String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not equal <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NE</tt> : Not equal. <tt>NE</tt> is supported for all data
--   types, including lists and maps.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> of type String, Number,
--   Binary, String Set, Number Set, or Binary Set. If an item contains an
--   <tt>AttributeValue</tt> of a different type than the one provided in
--   the request, the value does not match. For example, <tt>{"S":"6"}</tt>
--   does not equal <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not
--   equal <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>LE</tt> : Less than or equal.<tt>AttributeValueList</tt> can
--   contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>LT</tt> : Less than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> of type String, Number, or Binary
--   (not a set type). If an item contains an <tt>AttributeValue</tt>
--   element of a different type than the one provided in the request, the
--   value does not match. For example, <tt>{"S":"6"}</tt> does not equal
--   <tt>{"N":"6"}</tt>. Also, <tt>{"N":"6"}</tt> does not compare to
--   <tt>{"NS":["6", "2", "1"]}</tt>.</li>
--   <li><tt>GE</tt> : Greater than or equal.<tt>AttributeValueList</tt>
--   can contain only one <tt>AttributeValue</tt> element of type String,
--   Number, or Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>GT</tt> : Greater than.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If an item contains an
--   <tt>AttributeValue</tt> element of a different type than the one
--   provided in the request, the value does not match. For example,
--   <tt>{"S":"6"}</tt> does not equal <tt>{"N":"6"}</tt>. Also,
--   <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt>.</li>
--   <li><tt>NOT_NULL</tt> : The attribute exists. <tt>NOT_NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the existence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NOT_NULL</tt>, the result is a Boolean <tt>true</tt>. This result
--   is because the attribute "<tt>a</tt>" exists; its data type is not
--   relevant to the <tt>NOT_NULL</tt> comparison operator.</li>
--   <li><tt>NULL</tt> : The attribute does not exist. <tt>NULL</tt> is
--   supported for all data types, including lists and maps.This operator
--   tests for the nonexistence of an attribute, not its data type. If the
--   data type of attribute "<tt>a</tt>" is null, and you evaluate it using
--   <tt>NULL</tt>, the result is a Boolean <tt>false</tt>. This is because
--   the attribute "<tt>a</tt>" exists; its data type is not relevant to
--   the <tt>NULL</tt> comparison operator.</li>
--   <li><tt>CONTAINS</tt> : Checks for a subsequence, or value in a
--   set.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> element of type String, Number, or Binary (not
--   a set type). If the target attribute of the comparison is of type
--   String, then the operator checks for a substring match. If the target
--   attribute of the comparison is of type Binary, then the operator looks
--   for a subsequence of the target that matches the input. If the target
--   attribute of the comparison is a set ("<tt>SS</tt>", "<tt>NS</tt>", or
--   "<tt>BS</tt>"), then the operator evaluates to true if it finds an
--   exact match with any member of the set.CONTAINS is supported for
--   lists: When evaluating "<tt>a CONTAINS b</tt>", "<tt>a</tt>" can be a
--   list; however, "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>NOT_CONTAINS</tt> : Checks for absence of a subsequence, or
--   absence of a value in a set.<tt>AttributeValueList</tt> can contain
--   only one <tt>AttributeValue</tt> element of type String, Number, or
--   Binary (not a set type). If the target attribute of the comparison is
--   a String, then the operator checks for the absence of a substring
--   match. If the target attribute of the comparison is Binary, then the
--   operator checks for the absence of a subsequence of the target that
--   matches the input. If the target attribute of the comparison is a set
--   ("<tt>SS</tt>", "<tt>NS</tt>", or "<tt>BS</tt>"), then the operator
--   evaluates to true if it <i>does not</i> find an exact match with any
--   member of the set.NOT_CONTAINS is supported for lists: When evaluating
--   "<tt>a NOT CONTAINS b</tt>", "<tt>a</tt>" can be a list; however,
--   "<tt>b</tt>" cannot be a set, a map, or a list.</li>
--   <li><tt>BEGINS_WITH</tt> : Checks for a
--   prefix.<tt>AttributeValueList</tt> can contain only one
--   <tt>AttributeValue</tt> of type String or Binary (not a Number or a
--   set type). The target attribute of the comparison must be of type
--   String or Binary (not a Number or a set type).</li>
--   <li><tt>IN</tt> : Checks for matching elements in a
--   list.<tt>AttributeValueList</tt> can contain one or more
--   <tt>AttributeValue</tt> elements of type String, Number, or Binary.
--   These attributes are compared against an existing attribute of an
--   item. If any elements of the input are equal to the item attribute,
--   the expression evaluates to true.</li>
--   <li><tt>BETWEEN</tt> : Greater than or equal to the first value, and
--   less than or equal to the second value.<tt>AttributeValueList</tt>
--   must contain two <tt>AttributeValue</tt> elements of the same type,
--   either String, Number, or Binary (not a set type). A target attribute
--   matches if the target value is greater than, or equal to, the first
--   element and less than, or equal to, the second element. If an item
--   contains an <tt>AttributeValue</tt> element of a different type than
--   the one provided in the request, the value does not match. For
--   example, <tt>{"S":"6"}</tt> does not compare to <tt>{"N":"6"}</tt>.
--   Also, <tt>{"N":"6"}</tt> does not compare to <tt>{"NS":["6", "2",
--   "1"]}</tt></li>
--   </ul>
newExpectedAttributeValue :: ExpectedAttributeValue

-- | Represents the properties of the exported table.
--   
--   <i>See:</i> <a>newExportDescription</a> smart constructor.
data ExportDescription
ExportDescription' :: Maybe Text -> Maybe ExportFormat -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe ExportStatus -> Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> Maybe POSIX -> Maybe S3SseAlgorithm -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Natural -> Maybe Text -> ExportDescription

-- | Create a value of <a>ExportDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:s3BucketOwner:ExportDescription'</a>,
--   <a>exportDescription_s3BucketOwner</a> - The ID of the AWS account
--   that owns the bucket containing the export.
--   
--   <a>$sel:exportFormat:ExportDescription'</a>,
--   <a>exportDescription_exportFormat</a> - The format of the exported
--   data. Valid values for <tt>ExportFormat</tt> are
--   <tt>DYNAMODB_JSON</tt> or <tt>ION</tt>.
--   
--   <a>$sel:s3SseKmsKeyId:ExportDescription'</a>,
--   <a>exportDescription_s3SseKmsKeyId</a> - The ID of the AWS KMS managed
--   key used to encrypt the S3 bucket where export data is stored (if
--   applicable).
--   
--   <a>$sel:clientToken:ExportDescription'</a>,
--   <a>exportDescription_clientToken</a> - The client token that was
--   provided for the export task. A client token makes calls to
--   <tt>ExportTableToPointInTimeInput</tt> idempotent, meaning that
--   multiple identical calls have the same effect as one single call.
--   
--   <a>$sel:startTime:ExportDescription'</a>,
--   <a>exportDescription_startTime</a> - The time at which the export task
--   began.
--   
--   <a>$sel:failureCode:ExportDescription'</a>,
--   <a>exportDescription_failureCode</a> - Status code for the result of
--   the failed export.
--   
--   <a>$sel:exportStatus:ExportDescription'</a>,
--   <a>exportDescription_exportStatus</a> - Export can be in one of the
--   following states: IN_PROGRESS, COMPLETED, or FAILED.
--   
--   <a>$sel:failureMessage:ExportDescription'</a>,
--   <a>exportDescription_failureMessage</a> - Export failure reason
--   description.
--   
--   <a>$sel:tableArn:ExportDescription'</a>,
--   <a>exportDescription_tableArn</a> - The Amazon Resource Name (ARN) of
--   the table that was exported.
--   
--   <a>$sel:billedSizeBytes:ExportDescription'</a>,
--   <a>exportDescription_billedSizeBytes</a> - The billable size of the
--   table export.
--   
--   <a>$sel:exportArn:ExportDescription'</a>,
--   <a>exportDescription_exportArn</a> - The Amazon Resource Name (ARN) of
--   the table export.
--   
--   <a>$sel:exportTime:ExportDescription'</a>,
--   <a>exportDescription_exportTime</a> - Point in time from which table
--   data was exported.
--   
--   <a>$sel:s3SseAlgorithm:ExportDescription'</a>,
--   <a>exportDescription_s3SseAlgorithm</a> - Type of encryption used on
--   the bucket where export data is stored. Valid values for
--   <tt>S3SseAlgorithm</tt> are:
--   
--   <ul>
--   <li><tt>AES256</tt> - server-side encryption with Amazon S3 managed
--   keys</li>
--   <li><tt>KMS</tt> - server-side encryption with AWS KMS managed
--   keys</li>
--   </ul>
--   
--   <a>$sel:endTime:ExportDescription'</a>,
--   <a>exportDescription_endTime</a> - The time at which the export task
--   completed.
--   
--   <a>$sel:s3Prefix:ExportDescription'</a>,
--   <a>exportDescription_s3Prefix</a> - The Amazon S3 bucket prefix used
--   as the file name and path of the exported snapshot.
--   
--   <a>$sel:exportManifest:ExportDescription'</a>,
--   <a>exportDescription_exportManifest</a> - The name of the manifest
--   file for the export task.
--   
--   <a>$sel:tableId:ExportDescription'</a>,
--   <a>exportDescription_tableId</a> - Unique ID of the table that was
--   exported.
--   
--   <a>$sel:itemCount:ExportDescription'</a>,
--   <a>exportDescription_itemCount</a> - The number of items exported.
--   
--   <a>$sel:s3Bucket:ExportDescription'</a>,
--   <a>exportDescription_s3Bucket</a> - The name of the Amazon S3 bucket
--   containing the export.
newExportDescription :: ExportDescription

-- | Summary information about an export task.
--   
--   <i>See:</i> <a>newExportSummary</a> smart constructor.
data ExportSummary
ExportSummary' :: Maybe ExportStatus -> Maybe Text -> ExportSummary

-- | Create a value of <a>ExportSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exportStatus:ExportSummary'</a>,
--   <a>exportSummary_exportStatus</a> - Export can be in one of the
--   following states: IN_PROGRESS, COMPLETED, or FAILED.
--   
--   <a>$sel:exportArn:ExportSummary'</a>, <a>exportSummary_exportArn</a> -
--   The Amazon Resource Name (ARN) of the export.
newExportSummary :: ExportSummary

-- | Represents a failure a contributor insights operation.
--   
--   <i>See:</i> <a>newFailureException</a> smart constructor.
data FailureException
FailureException' :: Maybe Text -> Maybe Text -> FailureException

-- | Create a value of <a>FailureException</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:exceptionName:FailureException'</a>,
--   <a>failureException_exceptionName</a> - Exception name.
--   
--   <a>$sel:exceptionDescription:FailureException'</a>,
--   <a>failureException_exceptionDescription</a> - Description of the
--   failure.
newFailureException :: FailureException

-- | Specifies an item and related attribute values to retrieve in a
--   <tt>TransactGetItem</tt> object.
--   
--   <i>See:</i> <a>newGet</a> smart constructor.
data Get
Get' :: Maybe Text -> Maybe (HashMap Text Text) -> HashMap Text AttributeValue -> Text -> Get

-- | Create a value of <a>Get</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionExpression:Get'</a>, <a>get_projectionExpression</a>
--   - A string that identifies one or more attributes of the specified
--   item to retrieve from the table. The attributes in the expression must
--   be separated by commas. If no attribute names are specified, then all
--   attributes of the specified item are returned. If any of the requested
--   attributes are not found, they do not appear in the result.
--   
--   <a>$sel:expressionAttributeNames:Get'</a>,
--   <a>get_expressionAttributeNames</a> - One or more substitution tokens
--   for attribute names in the ProjectionExpression parameter.
--   
--   <a>$sel:key:Get'</a>, <a>get_key</a> - A map of attribute names to
--   <tt>AttributeValue</tt> objects that specifies the primary key of the
--   item to retrieve.
--   
--   <a>$sel:tableName:Get'</a>, <a>get_tableName</a> - The name of the
--   table from which to retrieve the specified item.
newGet :: Text -> Get

-- | Represents the properties of a global secondary index.
--   
--   <i>See:</i> <a>newGlobalSecondaryIndex</a> smart constructor.
data GlobalSecondaryIndex
GlobalSecondaryIndex' :: Maybe ProvisionedThroughput -> Text -> NonEmpty KeySchemaElement -> Projection -> GlobalSecondaryIndex

-- | Create a value of <a>GlobalSecondaryIndex</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:provisionedThroughput:GlobalSecondaryIndex'</a>,
--   <a>globalSecondaryIndex_provisionedThroughput</a> - Represents the
--   provisioned throughput settings for the specified global secondary
--   index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:indexName:GlobalSecondaryIndex'</a>,
--   <a>globalSecondaryIndex_indexName</a> - The name of the global
--   secondary index. The name must be unique among all other indexes on
--   this table.
--   
--   <a>$sel:keySchema:GlobalSecondaryIndex'</a>,
--   <a>globalSecondaryIndex_keySchema</a> - The complete key schema for a
--   global secondary index, which consists of one or more pairs of
--   attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:GlobalSecondaryIndex'</a>,
--   <a>globalSecondaryIndex_projection</a> - Represents attributes that
--   are copied (projected) from the table into the global secondary index.
--   These are in addition to the primary key attributes and index key
--   attributes, which are automatically projected.
newGlobalSecondaryIndex :: Text -> NonEmpty KeySchemaElement -> Projection -> GlobalSecondaryIndex

-- | Represents the auto scaling settings of a global secondary index for a
--   global table that will be modified.
--   
--   <i>See:</i> <a>newGlobalSecondaryIndexAutoScalingUpdate</a> smart
--   constructor.
data GlobalSecondaryIndexAutoScalingUpdate
GlobalSecondaryIndexAutoScalingUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe Text -> GlobalSecondaryIndexAutoScalingUpdate

-- | Create a value of <a>GlobalSecondaryIndexAutoScalingUpdate</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingUpdate:GlobalSecondaryIndexAutoScalingUpdate'</a>,
--   <a>globalSecondaryIndexAutoScalingUpdate_provisionedWriteCapacityAutoScalingUpdate</a>
--   - Undocumented member.
--   
--   <a>$sel:indexName:GlobalSecondaryIndexAutoScalingUpdate'</a>,
--   <a>globalSecondaryIndexAutoScalingUpdate_indexName</a> - The name of
--   the global secondary index.
newGlobalSecondaryIndexAutoScalingUpdate :: GlobalSecondaryIndexAutoScalingUpdate

-- | Represents the properties of a global secondary index.
--   
--   <i>See:</i> <a>newGlobalSecondaryIndexDescription</a> smart
--   constructor.
data GlobalSecondaryIndexDescription
GlobalSecondaryIndexDescription' :: Maybe Bool -> Maybe Integer -> Maybe IndexStatus -> Maybe ProvisionedThroughputDescription -> Maybe Text -> Maybe (NonEmpty KeySchemaElement) -> Maybe Projection -> Maybe Integer -> Maybe Text -> GlobalSecondaryIndexDescription

-- | Create a value of <a>GlobalSecondaryIndexDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:backfilling:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_backfilling</a> - Indicates whether
--   the index is currently backfilling. <i>Backfilling</i> is the process
--   of reading items from the table and determining whether they can be
--   added to the index. (Not all items will qualify: For example, a
--   partition key cannot have any duplicate values.) If an item can be
--   added to the index, DynamoDB will do so. After all items have been
--   processed, the backfilling operation is complete and
--   <tt>Backfilling</tt> is false.
--   
--   You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false.
--   
--   For indexes that were created during a <tt>CreateTable</tt> operation,
--   the <tt>Backfilling</tt> attribute does not appear in the
--   <tt>DescribeTable</tt> output.
--   
--   <a>$sel:indexSizeBytes:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_indexSizeBytes</a> - The total size
--   of the specified index, in bytes. DynamoDB updates this value
--   approximately every six hours. Recent changes might not be reflected
--   in this value.
--   
--   <a>$sel:indexStatus:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_indexStatus</a> - The current state
--   of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
--   
--   <a>$sel:provisionedThroughput:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_provisionedThroughput</a> -
--   Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:indexArn:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_indexArn</a> - The Amazon Resource
--   Name (ARN) that uniquely identifies the index.
--   
--   <a>$sel:keySchema:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_keySchema</a> - The complete key
--   schema for a global secondary index, which consists of one or more
--   pairs of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_projection</a> - Represents
--   attributes that are copied (projected) from the table into the global
--   secondary index. These are in addition to the primary key attributes
--   and index key attributes, which are automatically projected.
--   
--   <a>$sel:itemCount:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_itemCount</a> - The number of items
--   in the specified index. DynamoDB updates this value approximately
--   every six hours. Recent changes might not be reflected in this value.
--   
--   <a>$sel:indexName:GlobalSecondaryIndexDescription'</a>,
--   <a>globalSecondaryIndexDescription_indexName</a> - The name of the
--   global secondary index.
newGlobalSecondaryIndexDescription :: GlobalSecondaryIndexDescription

-- | Represents the properties of a global secondary index for the table
--   when the backup was created.
--   
--   <i>See:</i> <a>newGlobalSecondaryIndexInfo</a> smart constructor.
data GlobalSecondaryIndexInfo
GlobalSecondaryIndexInfo' :: Maybe ProvisionedThroughput -> Maybe (NonEmpty KeySchemaElement) -> Maybe Projection -> Maybe Text -> GlobalSecondaryIndexInfo

-- | Create a value of <a>GlobalSecondaryIndexInfo</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:provisionedThroughput:GlobalSecondaryIndexInfo'</a>,
--   <a>globalSecondaryIndexInfo_provisionedThroughput</a> - Represents the
--   provisioned throughput settings for the specified global secondary
--   index.
--   
--   <a>$sel:keySchema:GlobalSecondaryIndexInfo'</a>,
--   <a>globalSecondaryIndexInfo_keySchema</a> - The complete key schema
--   for a global secondary index, which consists of one or more pairs of
--   attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:GlobalSecondaryIndexInfo'</a>,
--   <a>globalSecondaryIndexInfo_projection</a> - Represents attributes
--   that are copied (projected) from the table into the global secondary
--   index. These are in addition to the primary key attributes and index
--   key attributes, which are automatically projected.
--   
--   <a>$sel:indexName:GlobalSecondaryIndexInfo'</a>,
--   <a>globalSecondaryIndexInfo_indexName</a> - The name of the global
--   secondary index.
newGlobalSecondaryIndexInfo :: GlobalSecondaryIndexInfo

-- | Represents one of the following:
--   
--   <ul>
--   <li>A new global secondary index to be added to an existing
--   table.</li>
--   <li>New provisioned throughput parameters for an existing global
--   secondary index.</li>
--   <li>An existing global secondary index to be removed from an existing
--   table.</li>
--   </ul>
--   
--   <i>See:</i> <a>newGlobalSecondaryIndexUpdate</a> smart constructor.
data GlobalSecondaryIndexUpdate
GlobalSecondaryIndexUpdate' :: Maybe CreateGlobalSecondaryIndexAction -> Maybe DeleteGlobalSecondaryIndexAction -> Maybe UpdateGlobalSecondaryIndexAction -> GlobalSecondaryIndexUpdate

-- | Create a value of <a>GlobalSecondaryIndexUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:create:GlobalSecondaryIndexUpdate'</a>,
--   <a>globalSecondaryIndexUpdate_create</a> - The parameters required for
--   creating a global secondary index on an existing table:
--   
--   <ul>
--   <li><pre>IndexName</pre></li>
--   <li><pre>KeySchema</pre></li>
--   <li><pre>AttributeDefinitions</pre></li>
--   <li><pre>Projection</pre></li>
--   <li><pre>ProvisionedThroughput</pre></li>
--   </ul>
--   
--   <a>$sel:delete':GlobalSecondaryIndexUpdate'</a>,
--   <a>globalSecondaryIndexUpdate_delete</a> - The name of an existing
--   global secondary index to be removed.
--   
--   <a>$sel:update:GlobalSecondaryIndexUpdate'</a>,
--   <a>globalSecondaryIndexUpdate_update</a> - The name of an existing
--   global secondary index, along with new provisioned throughput settings
--   to be applied to that index.
newGlobalSecondaryIndexUpdate :: GlobalSecondaryIndexUpdate

-- | Represents the properties of a global table.
--   
--   <i>See:</i> <a>newGlobalTable</a> smart constructor.
data GlobalTable
GlobalTable' :: Maybe Text -> Maybe [Replica] -> GlobalTable

-- | Create a value of <a>GlobalTable</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableName:GlobalTable'</a>,
--   <a>globalTable_globalTableName</a> - The global table name.
--   
--   <a>$sel:replicationGroup:GlobalTable'</a>,
--   <a>globalTable_replicationGroup</a> - The Regions where the global
--   table has replicas.
newGlobalTable :: GlobalTable

-- | Contains details about the global table.
--   
--   <i>See:</i> <a>newGlobalTableDescription</a> smart constructor.
data GlobalTableDescription
GlobalTableDescription' :: Maybe GlobalTableStatus -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe [ReplicaDescription] -> GlobalTableDescription

-- | Create a value of <a>GlobalTableDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:globalTableStatus:GlobalTableDescription'</a>,
--   <a>globalTableDescription_globalTableStatus</a> - The current state of
--   the global table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global table is being created.</li>
--   <li><tt>UPDATING</tt> - The global table is being updated.</li>
--   <li><tt>DELETING</tt> - The global table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The global table is ready for use.</li>
--   </ul>
--   
--   <a>$sel:globalTableName:GlobalTableDescription'</a>,
--   <a>globalTableDescription_globalTableName</a> - The global table name.
--   
--   <a>$sel:globalTableArn:GlobalTableDescription'</a>,
--   <a>globalTableDescription_globalTableArn</a> - The unique identifier
--   of the global table.
--   
--   <a>$sel:creationDateTime:GlobalTableDescription'</a>,
--   <a>globalTableDescription_creationDateTime</a> - The creation time of
--   the global table.
--   
--   <a>$sel:replicationGroup:GlobalTableDescription'</a>,
--   <a>globalTableDescription_replicationGroup</a> - The Regions where the
--   global table has replicas.
newGlobalTableDescription :: GlobalTableDescription

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
--   
--   <i>See:</i> <a>newGlobalTableGlobalSecondaryIndexSettingsUpdate</a>
--   smart constructor.
data GlobalTableGlobalSecondaryIndexSettingsUpdate
GlobalTableGlobalSecondaryIndexSettingsUpdate' :: Maybe Natural -> Maybe AutoScalingSettingsUpdate -> Text -> GlobalTableGlobalSecondaryIndexSettingsUpdate

-- | Create a value of <a>GlobalTableGlobalSecondaryIndexSettingsUpdate</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedWriteCapacityUnits:GlobalTableGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>globalTableGlobalSecondaryIndexSettingsUpdate_provisionedWriteCapacityUnits</a>
--   - The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException.</tt>
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingSettingsUpdate:GlobalTableGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>globalTableGlobalSecondaryIndexSettingsUpdate_provisionedWriteCapacityAutoScalingSettingsUpdate</a>
--   - Auto scaling settings for managing a global secondary index's write
--   capacity units.
--   
--   <a>$sel:indexName:GlobalTableGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>globalTableGlobalSecondaryIndexSettingsUpdate_indexName</a> - The
--   name of the global secondary index. The name must be unique among all
--   other indexes on this table.
newGlobalTableGlobalSecondaryIndexSettingsUpdate :: Text -> GlobalTableGlobalSecondaryIndexSettingsUpdate

-- | Information about item collections, if any, that were affected by the
--   operation. <tt>ItemCollectionMetrics</tt> is only returned if the
--   request asked for it. If the table does not have any local secondary
--   indexes, this information is not returned in the response.
--   
--   <i>See:</i> <a>newItemCollectionMetrics</a> smart constructor.
data ItemCollectionMetrics
ItemCollectionMetrics' :: Maybe (HashMap Text AttributeValue) -> Maybe [Double] -> ItemCollectionMetrics

-- | Create a value of <a>ItemCollectionMetrics</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:itemCollectionKey:ItemCollectionMetrics'</a>,
--   <a>itemCollectionMetrics_itemCollectionKey</a> - The partition key
--   value of the item collection. This value is the same as the partition
--   key value of the item.
--   
--   <a>$sel:sizeEstimateRangeGB:ItemCollectionMetrics'</a>,
--   <a>itemCollectionMetrics_sizeEstimateRangeGB</a> - An estimate of item
--   collection size, in gigabytes. This value is a two-element array
--   containing a lower bound and an upper bound for the estimate. The
--   estimate includes the size of all the items in the table, plus the
--   size of all attributes projected into all of the local secondary
--   indexes on that table. Use this estimate to measure whether a local
--   secondary index is approaching its size limit.
--   
--   The estimate is subject to change over time; therefore, do not rely on
--   the precision or accuracy of the estimate.
newItemCollectionMetrics :: ItemCollectionMetrics

-- | Details for the requested item.
--   
--   <i>See:</i> <a>newItemResponse</a> smart constructor.
data ItemResponse
ItemResponse' :: Maybe (HashMap Text AttributeValue) -> ItemResponse

-- | Create a value of <a>ItemResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:item:ItemResponse'</a>, <a>itemResponse_item</a> - Map of
--   attribute data consisting of the data type and attribute value.
newItemResponse :: ItemResponse

-- | Represents <i>a single element</i> of a key schema. A key schema
--   specifies the attributes that make up the primary key of a table, or
--   the key attributes of an index.
--   
--   A <tt>KeySchemaElement</tt> represents exactly one attribute of the
--   primary key. For example, a simple primary key would be represented by
--   one <tt>KeySchemaElement</tt> (for the partition key). A composite
--   primary key would require one <tt>KeySchemaElement</tt> for the
--   partition key, and another <tt>KeySchemaElement</tt> for the sort key.
--   
--   A <tt>KeySchemaElement</tt> must be a scalar, top-level attribute (not
--   a nested attribute). The data type must be one of String, Number, or
--   Binary. The attribute cannot be nested within a List or a Map.
--   
--   <i>See:</i> <a>newKeySchemaElement</a> smart constructor.
data KeySchemaElement
KeySchemaElement' :: Text -> KeyType -> KeySchemaElement

-- | Create a value of <a>KeySchemaElement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeName:KeySchemaElement'</a>,
--   <a>keySchemaElement_attributeName</a> - The name of a key attribute.
--   
--   <a>$sel:keyType:KeySchemaElement'</a>, <a>keySchemaElement_keyType</a>
--   - The role that this key attribute will assume:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
newKeySchemaElement :: Text -> KeyType -> KeySchemaElement

-- | Represents a set of primary keys and, for each key, the attributes to
--   retrieve from the table.
--   
--   For each primary key, you must provide <i>all</i> of the key
--   attributes. For example, with a simple primary key, you only need to
--   provide the partition key. For a composite primary key, you must
--   provide <i>both</i> the partition key and the sort key.
--   
--   <i>See:</i> <a>newKeysAndAttributes</a> smart constructor.
data KeysAndAttributes
KeysAndAttributes' :: Maybe Text -> Maybe (NonEmpty Text) -> Maybe (HashMap Text Text) -> Maybe Bool -> NonEmpty (HashMap Text AttributeValue) -> KeysAndAttributes

-- | Create a value of <a>KeysAndAttributes</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionExpression:KeysAndAttributes'</a>,
--   <a>keysAndAttributes_projectionExpression</a> - A string that
--   identifies one or more attributes to retrieve from the table. These
--   attributes can include scalars, sets, or elements of a JSON document.
--   The attributes in the <tt>ProjectionExpression</tt> must be separated
--   by commas.
--   
--   If no attribute names are specified, then all attributes will be
--   returned. If any of the requested attributes are not found, they will
--   not appear in the result.
--   
--   For more information, see <a>Accessing Item Attributes</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:attributesToGet:KeysAndAttributes'</a>,
--   <a>keysAndAttributes_attributesToGet</a> - This is a legacy parameter.
--   Use <tt>ProjectionExpression</tt> instead. For more information, see
--   <a>Legacy Conditional Parameters</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <a>$sel:expressionAttributeNames:KeysAndAttributes'</a>,
--   <a>keysAndAttributes_expressionAttributeNames</a> - One or more
--   substitution tokens for attribute names in an expression. The
--   following are some use cases for using
--   <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li>To access an attribute whose name conflicts with a DynamoDB
--   reserved word.</li>
--   <li>To create a placeholder for repeating occurrences of an attribute
--   name in an expression.</li>
--   <li>To prevent special characters in an attribute name from being
--   misinterpreted in an expression.</li>
--   </ul>
--   
--   Use the <b>#</b> character in an expression to dereference an
--   attribute name. For example, consider the following attribute name:
--   
--   <ul>
--   <li><pre>Percentile</pre></li>
--   </ul>
--   
--   The name of this attribute conflicts with a reserved word, so it
--   cannot be used directly in an expression. (For the complete list of
--   reserved words, see <a>Reserved Words</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>). To work around this, you could specify the
--   following for <tt>ExpressionAttributeNames</tt>:
--   
--   <ul>
--   <li><pre>{"#P":"Percentile"}</pre></li>
--   </ul>
--   
--   You could then use this substitution in an expression, as in this
--   example:
--   
--   <ul>
--   <li><pre>#P = :val</pre></li>
--   </ul>
--   
--   Tokens that begin with the <b>:</b> character are /expression
--   attribute values/, which are placeholders for the actual value at
--   runtime.
--   
--   For more information on expression attribute names, see <a>Accessing
--   Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:consistentRead:KeysAndAttributes'</a>,
--   <a>keysAndAttributes_consistentRead</a> - The consistency of a read
--   operation. If set to <tt>true</tt>, then a strongly consistent read is
--   used; otherwise, an eventually consistent read is used.
--   
--   <a>$sel:keys:KeysAndAttributes'</a>, <a>keysAndAttributes_keys</a> -
--   The primary key attribute values that define the items and the
--   attributes associated with the items.
newKeysAndAttributes :: NonEmpty (HashMap Text AttributeValue) -> KeysAndAttributes

-- | Describes a Kinesis data stream destination.
--   
--   <i>See:</i> <a>newKinesisDataStreamDestination</a> smart constructor.
data KinesisDataStreamDestination
KinesisDataStreamDestination' :: Maybe DestinationStatus -> Maybe Text -> Maybe Text -> KinesisDataStreamDestination

-- | Create a value of <a>KinesisDataStreamDestination</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:destinationStatus:KinesisDataStreamDestination'</a>,
--   <a>kinesisDataStreamDestination_destinationStatus</a> - The current
--   status of replication.
--   
--   <a>$sel:streamArn:KinesisDataStreamDestination'</a>,
--   <a>kinesisDataStreamDestination_streamArn</a> - The ARN for a specific
--   Kinesis data stream.
--   
--   
--   <a>$sel:destinationStatusDescription:KinesisDataStreamDestination'</a>,
--   <a>kinesisDataStreamDestination_destinationStatusDescription</a> - The
--   human-readable string that corresponds to the replica status.
newKinesisDataStreamDestination :: KinesisDataStreamDestination

-- | <i>See:</i> <a>newKinesisStreamingDestinationInput</a> smart
--   constructor.
data KinesisStreamingDestinationInput
KinesisStreamingDestinationInput' :: Text -> Text -> KinesisStreamingDestinationInput

-- | Create a value of <a>KinesisStreamingDestinationInput</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableName:KinesisStreamingDestinationInput'</a>,
--   <a>kinesisStreamingDestinationInput_tableName</a> - The name of the
--   DynamoDB table.
--   
--   <a>$sel:streamArn:KinesisStreamingDestinationInput'</a>,
--   <a>kinesisStreamingDestinationInput_streamArn</a> - The ARN for a
--   Kinesis data stream.
newKinesisStreamingDestinationInput :: Text -> Text -> KinesisStreamingDestinationInput

-- | <i>See:</i> <a>newKinesisStreamingDestinationOutput</a> smart
--   constructor.
data KinesisStreamingDestinationOutput
KinesisStreamingDestinationOutput' :: Maybe DestinationStatus -> Maybe Text -> Maybe Text -> KinesisStreamingDestinationOutput

-- | Create a value of <a>KinesisStreamingDestinationOutput</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:destinationStatus:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_destinationStatus</a> - The
--   current status of the replication.
--   
--   <a>$sel:streamArn:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_streamArn</a> - The ARN for the
--   specific Kinesis data stream.
--   
--   <a>$sel:tableName:KinesisStreamingDestinationOutput'</a>,
--   <a>kinesisStreamingDestinationOutput_tableName</a> - The name of the
--   table being modified.
newKinesisStreamingDestinationOutput :: KinesisStreamingDestinationOutput

-- | Represents the properties of a local secondary index.
--   
--   <i>See:</i> <a>newLocalSecondaryIndex</a> smart constructor.
data LocalSecondaryIndex
LocalSecondaryIndex' :: Text -> NonEmpty KeySchemaElement -> Projection -> LocalSecondaryIndex

-- | Create a value of <a>LocalSecondaryIndex</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:LocalSecondaryIndex'</a>,
--   <a>localSecondaryIndex_indexName</a> - The name of the local secondary
--   index. The name must be unique among all other indexes on this table.
--   
--   <a>$sel:keySchema:LocalSecondaryIndex'</a>,
--   <a>localSecondaryIndex_keySchema</a> - The complete key schema for the
--   local secondary index, consisting of one or more pairs of attribute
--   names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:LocalSecondaryIndex'</a>,
--   <a>localSecondaryIndex_projection</a> - Represents attributes that are
--   copied (projected) from the table into the local secondary index.
--   These are in addition to the primary key attributes and index key
--   attributes, which are automatically projected.
newLocalSecondaryIndex :: Text -> NonEmpty KeySchemaElement -> Projection -> LocalSecondaryIndex

-- | Represents the properties of a local secondary index.
--   
--   <i>See:</i> <a>newLocalSecondaryIndexDescription</a> smart
--   constructor.
data LocalSecondaryIndexDescription
LocalSecondaryIndexDescription' :: Maybe Integer -> Maybe Text -> Maybe (NonEmpty KeySchemaElement) -> Maybe Projection -> Maybe Integer -> Maybe Text -> LocalSecondaryIndexDescription

-- | Create a value of <a>LocalSecondaryIndexDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexSizeBytes:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_indexSizeBytes</a> - The total size
--   of the specified index, in bytes. DynamoDB updates this value
--   approximately every six hours. Recent changes might not be reflected
--   in this value.
--   
--   <a>$sel:indexArn:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_indexArn</a> - The Amazon Resource
--   Name (ARN) that uniquely identifies the index.
--   
--   <a>$sel:keySchema:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_keySchema</a> - The complete key
--   schema for the local secondary index, consisting of one or more pairs
--   of attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_projection</a> - Represents
--   attributes that are copied (projected) from the table into the global
--   secondary index. These are in addition to the primary key attributes
--   and index key attributes, which are automatically projected.
--   
--   <a>$sel:itemCount:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_itemCount</a> - The number of items
--   in the specified index. DynamoDB updates this value approximately
--   every six hours. Recent changes might not be reflected in this value.
--   
--   <a>$sel:indexName:LocalSecondaryIndexDescription'</a>,
--   <a>localSecondaryIndexDescription_indexName</a> - Represents the name
--   of the local secondary index.
newLocalSecondaryIndexDescription :: LocalSecondaryIndexDescription

-- | Represents the properties of a local secondary index for the table
--   when the backup was created.
--   
--   <i>See:</i> <a>newLocalSecondaryIndexInfo</a> smart constructor.
data LocalSecondaryIndexInfo
LocalSecondaryIndexInfo' :: Maybe (NonEmpty KeySchemaElement) -> Maybe Projection -> Maybe Text -> LocalSecondaryIndexInfo

-- | Create a value of <a>LocalSecondaryIndexInfo</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:keySchema:LocalSecondaryIndexInfo'</a>,
--   <a>localSecondaryIndexInfo_keySchema</a> - The complete key schema for
--   a local secondary index, which consists of one or more pairs of
--   attribute names and key types:
--   
--   <ul>
--   <li><tt>HASH</tt> - partition key</li>
--   <li><tt>RANGE</tt> - sort key</li>
--   </ul>
--   
--   The partition key of an item is also known as its <i>hash
--   attribute</i>. The term "hash attribute" derives from DynamoDB's usage
--   of an internal hash function to evenly distribute data items across
--   partitions, based on their partition key values.
--   
--   The sort key of an item is also known as its <i>range attribute</i>.
--   The term "range attribute" derives from the way DynamoDB stores items
--   with the same partition key physically close together, in sorted order
--   by the sort key value.
--   
--   <a>$sel:projection:LocalSecondaryIndexInfo'</a>,
--   <a>localSecondaryIndexInfo_projection</a> - Represents attributes that
--   are copied (projected) from the table into the global secondary index.
--   These are in addition to the primary key attributes and index key
--   attributes, which are automatically projected.
--   
--   <a>$sel:indexName:LocalSecondaryIndexInfo'</a>,
--   <a>localSecondaryIndexInfo_indexName</a> - Represents the name of the
--   local secondary index.
newLocalSecondaryIndexInfo :: LocalSecondaryIndexInfo

-- | Represents a PartiQL statment that uses parameters.
--   
--   <i>See:</i> <a>newParameterizedStatement</a> smart constructor.
data ParameterizedStatement
ParameterizedStatement' :: Maybe (NonEmpty AttributeValue) -> Text -> ParameterizedStatement

-- | Create a value of <a>ParameterizedStatement</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:parameters:ParameterizedStatement'</a>,
--   <a>parameterizedStatement_parameters</a> - The parameter values.
--   
--   <a>$sel:statement:ParameterizedStatement'</a>,
--   <a>parameterizedStatement_statement</a> - A PartiQL statment that uses
--   parameters.
newParameterizedStatement :: Text -> ParameterizedStatement

-- | The description of the point in time settings applied to the table.
--   
--   <i>See:</i> <a>newPointInTimeRecoveryDescription</a> smart
--   constructor.
data PointInTimeRecoveryDescription
PointInTimeRecoveryDescription' :: Maybe PointInTimeRecoveryStatus -> Maybe POSIX -> Maybe POSIX -> PointInTimeRecoveryDescription

-- | Create a value of <a>PointInTimeRecoveryDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:pointInTimeRecoveryStatus:PointInTimeRecoveryDescription'</a>,
--   <a>pointInTimeRecoveryDescription_pointInTimeRecoveryStatus</a> - The
--   current state of point in time recovery:
--   
--   <ul>
--   <li><tt>ENABLING</tt> - Point in time recovery is being enabled.</li>
--   <li><tt>ENABLED</tt> - Point in time recovery is enabled.</li>
--   <li><tt>DISABLED</tt> - Point in time recovery is disabled.</li>
--   </ul>
--   
--   
--   <a>$sel:earliestRestorableDateTime:PointInTimeRecoveryDescription'</a>,
--   <a>pointInTimeRecoveryDescription_earliestRestorableDateTime</a> -
--   Specifies the earliest point in time you can restore your table to.
--   You can restore your table to any point in time during the last 35
--   days.
--   
--   <a>$sel:latestRestorableDateTime:PointInTimeRecoveryDescription'</a>,
--   <a>pointInTimeRecoveryDescription_latestRestorableDateTime</a> -
--   <tt>LatestRestorableDateTime</tt> is typically 5 minutes before the
--   current time.
newPointInTimeRecoveryDescription :: PointInTimeRecoveryDescription

-- | Represents the settings used to enable point in time recovery.
--   
--   <i>See:</i> <a>newPointInTimeRecoverySpecification</a> smart
--   constructor.
data PointInTimeRecoverySpecification
PointInTimeRecoverySpecification' :: Bool -> PointInTimeRecoverySpecification

-- | Create a value of <a>PointInTimeRecoverySpecification</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:pointInTimeRecoveryEnabled:PointInTimeRecoverySpecification'</a>,
--   <a>pointInTimeRecoverySpecification_pointInTimeRecoveryEnabled</a> -
--   Indicates whether point in time recovery is enabled (true) or disabled
--   (false) on the table.
newPointInTimeRecoverySpecification :: Bool -> PointInTimeRecoverySpecification

-- | Represents attributes that are copied (projected) from the table into
--   an index. These are in addition to the primary key attributes and
--   index key attributes, which are automatically projected.
--   
--   <i>See:</i> <a>newProjection</a> smart constructor.
data Projection
Projection' :: Maybe ProjectionType -> Maybe (NonEmpty Text) -> Projection

-- | Create a value of <a>Projection</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:projectionType:Projection'</a>,
--   <a>projection_projectionType</a> - The set of attributes that are
--   projected into the index:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the index and primary keys are projected
--   into the index.</li>
--   <li><tt>INCLUDE</tt> - In addition to the attributes described in
--   <tt>KEYS_ONLY</tt>, the secondary index will include other non-key
--   attributes that you specify.</li>
--   <li><tt>ALL</tt> - All of the table attributes are projected into the
--   index.</li>
--   </ul>
--   
--   <a>$sel:nonKeyAttributes:Projection'</a>,
--   <a>projection_nonKeyAttributes</a> - Represents the non-key attribute
--   names which will be projected into the index.
--   
--   For local secondary indexes, the total count of
--   <tt>NonKeyAttributes</tt> summed across all of the local secondary
--   indexes, must not exceed 20. If you project the same attribute into
--   two different indexes, this counts as two distinct attributes when
--   determining the total.
newProjection :: Projection

-- | Represents the provisioned throughput settings for a specified table
--   or index. The settings can be modified using the <tt>UpdateTable</tt>
--   operation.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newProvisionedThroughput</a> smart constructor.
data ProvisionedThroughput
ProvisionedThroughput' :: Natural -> Natural -> ProvisionedThroughput

-- | Create a value of <a>ProvisionedThroughput</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:ProvisionedThroughput'</a>,
--   <a>provisionedThroughput_readCapacityUnits</a> - The maximum number of
--   strongly consistent reads consumed per second before DynamoDB returns
--   a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
--   
--   <a>$sel:writeCapacityUnits:ProvisionedThroughput'</a>,
--   <a>provisionedThroughput_writeCapacityUnits</a> - The maximum number
--   of writes consumed per second before DynamoDB returns a
--   <tt>ThrottlingException</tt>. For more information, see <a>Specifying
--   Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer
--   Guide</i>.
--   
--   If read/write capacity mode is <tt>PAY_PER_REQUEST</tt> the value is
--   set to 0.
newProvisionedThroughput :: Natural -> Natural -> ProvisionedThroughput

-- | Represents the provisioned throughput settings for the table,
--   consisting of read and write capacity units, along with data about
--   increases and decreases.
--   
--   <i>See:</i> <a>newProvisionedThroughputDescription</a> smart
--   constructor.
data ProvisionedThroughputDescription
ProvisionedThroughputDescription' :: Maybe Natural -> Maybe POSIX -> Maybe Natural -> Maybe Natural -> Maybe POSIX -> ProvisionedThroughputDescription

-- | Create a value of <a>ProvisionedThroughputDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_readCapacityUnits</a> - The
--   maximum number of strongly consistent reads consumed per second before
--   DynamoDB returns a <tt>ThrottlingException</tt>. Eventually consistent
--   reads require less effort than strongly consistent reads, so a setting
--   of 50 <tt>ReadCapacityUnits</tt> per second provides 100 eventually
--   consistent <tt>ReadCapacityUnits</tt> per second.
--   
--   <a>$sel:lastDecreaseDateTime:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_lastDecreaseDateTime</a> - The
--   date and time of the last provisioned throughput decrease for this
--   table.
--   
--   <a>$sel:writeCapacityUnits:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_writeCapacityUnits</a> - The
--   maximum number of writes consumed per second before DynamoDB returns a
--   <tt>ThrottlingException</tt>.
--   
--   <a>$sel:numberOfDecreasesToday:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_numberOfDecreasesToday</a> - The
--   number of provisioned throughput decreases for this table during this
--   UTC calendar day. For current maximums on provisioned throughput
--   decreases, see <a>Service, Account, and Table Quotas</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:lastIncreaseDateTime:ProvisionedThroughputDescription'</a>,
--   <a>provisionedThroughputDescription_lastIncreaseDateTime</a> - The
--   date and time of the last provisioned throughput increase for this
--   table.
newProvisionedThroughputDescription :: ProvisionedThroughputDescription

-- | Replica-specific provisioned throughput settings. If not specified,
--   uses the source table's provisioned throughput settings.
--   
--   <i>See:</i> <a>newProvisionedThroughputOverride</a> smart constructor.
data ProvisionedThroughputOverride
ProvisionedThroughputOverride' :: Maybe Natural -> ProvisionedThroughputOverride

-- | Create a value of <a>ProvisionedThroughputOverride</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:readCapacityUnits:ProvisionedThroughputOverride'</a>,
--   <a>provisionedThroughputOverride_readCapacityUnits</a> -
--   Replica-specific read capacity units. If not specified, uses the
--   source table's read capacity settings.
newProvisionedThroughputOverride :: ProvisionedThroughputOverride

-- | Represents a request to perform a <tt>PutItem</tt> operation.
--   
--   <i>See:</i> <a>newPut</a> smart constructor.
data Put
Put' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnValuesOnConditionCheckFailure -> Maybe Text -> HashMap Text AttributeValue -> Text -> Put

-- | Create a value of <a>Put</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:Put'</a>,
--   <a>put_expressionAttributeNames</a> - One or more substitution tokens
--   for attribute names in an expression.
--   
--   <a>$sel:expressionAttributeValues:Put'</a>,
--   <a>put_expressionAttributeValues</a> - One or more values that can be
--   substituted in an expression.
--   
--   <a>$sel:returnValuesOnConditionCheckFailure:Put'</a>,
--   <a>put_returnValuesOnConditionCheckFailure</a> - Use
--   <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Put</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE and ALL_OLD.
--   
--   <a>$sel:conditionExpression:Put'</a>, <a>put_conditionExpression</a> -
--   A condition that must be satisfied in order for a conditional update
--   to succeed.
--   
--   <a>$sel:item:Put'</a>, <a>put_item</a> - A map of attribute name to
--   attribute values, representing the primary key of the item to be
--   written by <tt>PutItem</tt>. All of the table's primary key attributes
--   must be specified, and their data types must match those of the
--   table's key schema. If any attributes are present in the item that are
--   part of an index key schema for the table, their types must match the
--   index key schema.
--   
--   <a>$sel:tableName:Put'</a>, <a>put_tableName</a> - Name of the table
--   in which to write the item.
newPut :: Text -> Put

-- | Represents a request to perform a <tt>PutItem</tt> operation on an
--   item.
--   
--   <i>See:</i> <a>newPutRequest</a> smart constructor.
data PutRequest
PutRequest' :: HashMap Text AttributeValue -> PutRequest

-- | Create a value of <a>PutRequest</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:item:PutRequest'</a>, <a>putRequest_item</a> - A map of
--   attribute name to attribute values, representing the primary key of an
--   item to be processed by <tt>PutItem</tt>. All of the table's primary
--   key attributes must be specified, and their data types must match
--   those of the table's key schema. If any attributes are present in the
--   item that are part of an index key schema for the table, their types
--   must match the index key schema.
newPutRequest :: PutRequest

-- | Represents the properties of a replica.
--   
--   <i>See:</i> <a>newReplica</a> smart constructor.
data Replica
Replica' :: Maybe Text -> Replica

-- | Create a value of <a>Replica</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:regionName:Replica'</a>, <a>replica_regionName</a> - The
--   Region where the replica needs to be created.
newReplica :: Replica

-- | Represents the auto scaling settings of the replica.
--   
--   <i>See:</i> <a>newReplicaAutoScalingDescription</a> smart constructor.
data ReplicaAutoScalingDescription
ReplicaAutoScalingDescription' :: Maybe ReplicaStatus -> Maybe Text -> Maybe [ReplicaGlobalSecondaryIndexAutoScalingDescription] -> Maybe AutoScalingSettingsDescription -> Maybe AutoScalingSettingsDescription -> ReplicaAutoScalingDescription

-- | Create a value of <a>ReplicaAutoScalingDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaStatus:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_replicaStatus</a> - The current state
--   of the replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   </ul>
--   
--   <a>$sel:regionName:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_regionName</a> - The Region where the
--   replica exists.
--   
--   <a>$sel:globalSecondaryIndexes:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_globalSecondaryIndexes</a> -
--   Replica-specific global secondary index auto scaling settings.
--   
--   
--   <a>$sel:replicaProvisionedWriteCapacityAutoScalingSettings:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_replicaProvisionedWriteCapacityAutoScalingSettings</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityAutoScalingSettings:ReplicaAutoScalingDescription'</a>,
--   <a>replicaAutoScalingDescription_replicaProvisionedReadCapacityAutoScalingSettings</a>
--   - Undocumented member.
newReplicaAutoScalingDescription :: ReplicaAutoScalingDescription

-- | Represents the auto scaling settings of a replica that will be
--   modified.
--   
--   <i>See:</i> <a>newReplicaAutoScalingUpdate</a> smart constructor.
data ReplicaAutoScalingUpdate
ReplicaAutoScalingUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe [ReplicaGlobalSecondaryIndexAutoScalingUpdate] -> Text -> ReplicaAutoScalingUpdate

-- | Create a value of <a>ReplicaAutoScalingUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityAutoScalingUpdate:ReplicaAutoScalingUpdate'</a>,
--   <a>replicaAutoScalingUpdate_replicaProvisionedReadCapacityAutoScalingUpdate</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:replicaGlobalSecondaryIndexUpdates:ReplicaAutoScalingUpdate'</a>,
--   <a>replicaAutoScalingUpdate_replicaGlobalSecondaryIndexUpdates</a> -
--   Represents the auto scaling settings of global secondary indexes that
--   will be modified.
--   
--   <a>$sel:regionName:ReplicaAutoScalingUpdate'</a>,
--   <a>replicaAutoScalingUpdate_regionName</a> - The Region where the
--   replica exists.
newReplicaAutoScalingUpdate :: Text -> ReplicaAutoScalingUpdate

-- | Contains the details of the replica.
--   
--   <i>See:</i> <a>newReplicaDescription</a> smart constructor.
data ReplicaDescription
ReplicaDescription' :: Maybe ReplicaStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe ProvisionedThroughputOverride -> Maybe [ReplicaGlobalSecondaryIndexDescription] -> ReplicaDescription

-- | Create a value of <a>ReplicaDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaStatus:ReplicaDescription'</a>,
--   <a>replicaDescription_replicaStatus</a> - The current state of the
--   replica:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The replica is being created.</li>
--   <li><tt>UPDATING</tt> - The replica is being updated.</li>
--   <li><tt>DELETING</tt> - The replica is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The replica is ready for use.</li>
--   <li><tt>REGION_DISABLED</tt> - The replica is inaccessible because the
--   AWS Region has been disabled.If the AWS Region remains inaccessible
--   for more than 20 hours, DynamoDB will remove this replica from the
--   replication group. The replica will not be deleted and replication
--   will stop from and to this region.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS </tt> - The AWS KMS key
--   used to encrypt the table is inaccessible.If the AWS KMS key remains
--   inaccessible for more than 20 hours, DynamoDB will remove this replica
--   from the replication group. The replica will not be deleted and
--   replication will stop from and to this region.</li>
--   </ul>
--   
--   <a>$sel:regionName:ReplicaDescription'</a>,
--   <a>replicaDescription_regionName</a> - The name of the Region.
--   
--   <a>$sel:replicaStatusPercentProgress:ReplicaDescription'</a>,
--   <a>replicaDescription_replicaStatusPercentProgress</a> - Specifies the
--   progress of a Create, Update, or Delete action on the replica as a
--   percentage.
--   
--   <a>$sel:replicaStatusDescription:ReplicaDescription'</a>,
--   <a>replicaDescription_replicaStatusDescription</a> - Detailed
--   information about the replica status.
--   
--   <a>$sel:replicaInaccessibleDateTime:ReplicaDescription'</a>,
--   <a>replicaDescription_replicaInaccessibleDateTime</a> - The time at
--   which the replica was first detected as inaccessible. To determine
--   cause of inaccessibility check the <tt>ReplicaStatus</tt> property.
--   
--   <a>$sel:kmsMasterKeyId:ReplicaDescription'</a>,
--   <a>replicaDescription_kmsMasterKeyId</a> - The AWS KMS customer master
--   key (CMK) of the replica that will be used for AWS KMS encryption.
--   
--   <a>$sel:provisionedThroughputOverride:ReplicaDescription'</a>,
--   <a>replicaDescription_provisionedThroughputOverride</a> -
--   Replica-specific provisioned throughput. If not described, uses the
--   source table's provisioned throughput settings.
--   
--   <a>$sel:globalSecondaryIndexes:ReplicaDescription'</a>,
--   <a>replicaDescription_globalSecondaryIndexes</a> - Replica-specific
--   global secondary index settings.
newReplicaDescription :: ReplicaDescription

-- | Represents the properties of a replica global secondary index.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndex</a> smart constructor.
data ReplicaGlobalSecondaryIndex
ReplicaGlobalSecondaryIndex' :: Maybe ProvisionedThroughputOverride -> Text -> ReplicaGlobalSecondaryIndex

-- | Create a value of <a>ReplicaGlobalSecondaryIndex</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedThroughputOverride:ReplicaGlobalSecondaryIndex'</a>,
--   <a>replicaGlobalSecondaryIndex_provisionedThroughputOverride</a> -
--   Replica table GSI-specific provisioned throughput. If not specified,
--   uses the source table GSI's read capacity settings.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndex'</a>,
--   <a>replicaGlobalSecondaryIndex_indexName</a> - The name of the global
--   secondary index.
newReplicaGlobalSecondaryIndex :: Text -> ReplicaGlobalSecondaryIndex

-- | Represents the auto scaling configuration for a replica global
--   secondary index.
--   
--   <i>See:</i>
--   <a>newReplicaGlobalSecondaryIndexAutoScalingDescription</a> smart
--   constructor.
data ReplicaGlobalSecondaryIndexAutoScalingDescription
ReplicaGlobalSecondaryIndexAutoScalingDescription' :: Maybe IndexStatus -> Maybe AutoScalingSettingsDescription -> Maybe AutoScalingSettingsDescription -> Maybe Text -> ReplicaGlobalSecondaryIndexAutoScalingDescription

-- | Create a value of
--   <a>ReplicaGlobalSecondaryIndexAutoScalingDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:indexStatus:ReplicaGlobalSecondaryIndexAutoScalingDescription'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingDescription_indexStatus</a> -
--   The current state of the replica global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The index is being created.</li>
--   <li><tt>UPDATING</tt> - The index is being updated.</li>
--   <li><tt>DELETING</tt> - The index is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The index is ready for use.</li>
--   </ul>
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexAutoScalingDescription'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingDescription_provisionedWriteCapacityAutoScalingSettings</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:provisionedReadCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexAutoScalingDescription'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingDescription_provisionedReadCapacityAutoScalingSettings</a>
--   - Undocumented member.
--   
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexAutoScalingDescription'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingDescription_indexName</a> -
--   The name of the global secondary index.
newReplicaGlobalSecondaryIndexAutoScalingDescription :: ReplicaGlobalSecondaryIndexAutoScalingDescription

-- | Represents the auto scaling settings of a global secondary index for a
--   replica that will be modified.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndexAutoScalingUpdate</a>
--   smart constructor.
data ReplicaGlobalSecondaryIndexAutoScalingUpdate
ReplicaGlobalSecondaryIndexAutoScalingUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe Text -> ReplicaGlobalSecondaryIndexAutoScalingUpdate

-- | Create a value of <a>ReplicaGlobalSecondaryIndexAutoScalingUpdate</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedReadCapacityAutoScalingUpdate:ReplicaGlobalSecondaryIndexAutoScalingUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingUpdate_provisionedReadCapacityAutoScalingUpdate</a>
--   - Undocumented member.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexAutoScalingUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexAutoScalingUpdate_indexName</a> - The
--   name of the global secondary index.
newReplicaGlobalSecondaryIndexAutoScalingUpdate :: ReplicaGlobalSecondaryIndexAutoScalingUpdate

-- | Represents the properties of a replica global secondary index.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndexDescription</a> smart
--   constructor.
data ReplicaGlobalSecondaryIndexDescription
ReplicaGlobalSecondaryIndexDescription' :: Maybe ProvisionedThroughputOverride -> Maybe Text -> ReplicaGlobalSecondaryIndexDescription

-- | Create a value of <a>ReplicaGlobalSecondaryIndexDescription</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedThroughputOverride:ReplicaGlobalSecondaryIndexDescription'</a>,
--   <a>replicaGlobalSecondaryIndexDescription_provisionedThroughputOverride</a>
--   - If not described, uses the source table GSI's read capacity
--   settings.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexDescription'</a>,
--   <a>replicaGlobalSecondaryIndexDescription_indexName</a> - The name of
--   the global secondary index.
newReplicaGlobalSecondaryIndexDescription :: ReplicaGlobalSecondaryIndexDescription

-- | Represents the properties of a global secondary index.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndexSettingsDescription</a>
--   smart constructor.
data ReplicaGlobalSecondaryIndexSettingsDescription
ReplicaGlobalSecondaryIndexSettingsDescription' :: Maybe IndexStatus -> Maybe Natural -> Maybe Natural -> Maybe AutoScalingSettingsDescription -> Maybe AutoScalingSettingsDescription -> Text -> ReplicaGlobalSecondaryIndexSettingsDescription

-- | Create a value of
--   <a>ReplicaGlobalSecondaryIndexSettingsDescription</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:indexStatus:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_indexStatus</a> -
--   The current status of the global secondary index:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The global secondary index is being
--   created.</li>
--   <li><tt>UPDATING</tt> - The global secondary index is being
--   updated.</li>
--   <li><tt>DELETING</tt> - The global secondary index is being
--   deleted.</li>
--   <li><tt>ACTIVE</tt> - The global secondary index is ready for
--   use.</li>
--   </ul>
--   
--   
--   <a>$sel:provisionedReadCapacityUnits:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_provisionedReadCapacityUnits</a>
--   - The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
--   
--   
--   <a>$sel:provisionedWriteCapacityUnits:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_provisionedWriteCapacityUnits</a>
--   - The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>.
--   
--   
--   <a>$sel:provisionedWriteCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_provisionedWriteCapacityAutoScalingSettings</a>
--   - Auto scaling settings for a global secondary index replica's write
--   capacity units.
--   
--   
--   <a>$sel:provisionedReadCapacityAutoScalingSettings:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_provisionedReadCapacityAutoScalingSettings</a>
--   - Auto scaling settings for a global secondary index replica's read
--   capacity units.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexSettingsDescription'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsDescription_indexName</a> - The
--   name of the global secondary index. The name must be unique among all
--   other indexes on this table.
newReplicaGlobalSecondaryIndexSettingsDescription :: Text -> ReplicaGlobalSecondaryIndexSettingsDescription

-- | Represents the settings of a global secondary index for a global table
--   that will be modified.
--   
--   <i>See:</i> <a>newReplicaGlobalSecondaryIndexSettingsUpdate</a> smart
--   constructor.
data ReplicaGlobalSecondaryIndexSettingsUpdate
ReplicaGlobalSecondaryIndexSettingsUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe Natural -> Text -> ReplicaGlobalSecondaryIndexSettingsUpdate

-- | Create a value of <a>ReplicaGlobalSecondaryIndexSettingsUpdate</a>
--   with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:provisionedReadCapacityAutoScalingSettingsUpdate:ReplicaGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsUpdate_provisionedReadCapacityAutoScalingSettingsUpdate</a>
--   - Auto scaling settings for managing a global secondary index
--   replica's read capacity units.
--   
--   
--   <a>$sel:provisionedReadCapacityUnits:ReplicaGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsUpdate_provisionedReadCapacityUnits</a>
--   - The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>.
--   
--   <a>$sel:indexName:ReplicaGlobalSecondaryIndexSettingsUpdate'</a>,
--   <a>replicaGlobalSecondaryIndexSettingsUpdate_indexName</a> - The name
--   of the global secondary index. The name must be unique among all other
--   indexes on this table.
newReplicaGlobalSecondaryIndexSettingsUpdate :: Text -> ReplicaGlobalSecondaryIndexSettingsUpdate

-- | Represents the properties of a replica.
--   
--   <i>See:</i> <a>newReplicaSettingsDescription</a> smart constructor.
data ReplicaSettingsDescription
ReplicaSettingsDescription' :: Maybe ReplicaStatus -> Maybe Natural -> Maybe Natural -> Maybe BillingModeSummary -> Maybe [ReplicaGlobalSecondaryIndexSettingsDescription] -> Maybe AutoScalingSettingsDescription -> Maybe AutoScalingSettingsDescription -> Text -> ReplicaSettingsDescription

-- | Create a value of <a>ReplicaSettingsDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:replicaStatus:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaStatus</a> - The current state of
--   the Region:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The Region is being created.</li>
--   <li><tt>UPDATING</tt> - The Region is being updated.</li>
--   <li><tt>DELETING</tt> - The Region is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The Region is ready for use.</li>
--   </ul>
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityUnits:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaProvisionedReadCapacityUnits</a>
--   - The maximum number of strongly consistent reads consumed per second
--   before DynamoDB returns a <tt>ThrottlingException</tt>. For more
--   information, see <a>Specifying Read and Write Requirements</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   
--   <a>$sel:replicaProvisionedWriteCapacityUnits:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaProvisionedWriteCapacityUnits</a>
--   - The maximum number of writes consumed per second before DynamoDB
--   returns a <tt>ThrottlingException</tt>. For more information, see
--   <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   <a>$sel:replicaBillingModeSummary:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaBillingModeSummary</a> - The
--   read/write capacity mode of the replica.
--   
--   
--   <a>$sel:replicaGlobalSecondaryIndexSettings:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaGlobalSecondaryIndexSettings</a>
--   - Replica global secondary index settings for the global table.
--   
--   
--   <a>$sel:replicaProvisionedWriteCapacityAutoScalingSettings:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaProvisionedWriteCapacityAutoScalingSettings</a>
--   - Auto scaling settings for a global table replica's write capacity
--   units.
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityAutoScalingSettings:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_replicaProvisionedReadCapacityAutoScalingSettings</a>
--   - Auto scaling settings for a global table replica's read capacity
--   units.
--   
--   <a>$sel:regionName:ReplicaSettingsDescription'</a>,
--   <a>replicaSettingsDescription_regionName</a> - The Region name of the
--   replica.
newReplicaSettingsDescription :: Text -> ReplicaSettingsDescription

-- | Represents the settings for a global table in a Region that will be
--   modified.
--   
--   <i>See:</i> <a>newReplicaSettingsUpdate</a> smart constructor.
data ReplicaSettingsUpdate
ReplicaSettingsUpdate' :: Maybe AutoScalingSettingsUpdate -> Maybe Natural -> Maybe (NonEmpty ReplicaGlobalSecondaryIndexSettingsUpdate) -> Text -> ReplicaSettingsUpdate

-- | Create a value of <a>ReplicaSettingsUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityAutoScalingSettingsUpdate:ReplicaSettingsUpdate'</a>,
--   <a>replicaSettingsUpdate_replicaProvisionedReadCapacityAutoScalingSettingsUpdate</a>
--   - Auto scaling settings for managing a global table replica's read
--   capacity units.
--   
--   
--   <a>$sel:replicaProvisionedReadCapacityUnits:ReplicaSettingsUpdate'</a>,
--   <a>replicaSettingsUpdate_replicaProvisionedReadCapacityUnits</a> - The
--   maximum number of strongly consistent reads consumed per second before
--   DynamoDB returns a <tt>ThrottlingException</tt>. For more information,
--   see <a>Specifying Read and Write Requirements</a> in the <i>Amazon
--   DynamoDB Developer Guide</i>.
--   
--   
--   <a>$sel:replicaGlobalSecondaryIndexSettingsUpdate:ReplicaSettingsUpdate'</a>,
--   <a>replicaSettingsUpdate_replicaGlobalSecondaryIndexSettingsUpdate</a>
--   - Represents the settings of a global secondary index for a global
--   table that will be modified.
--   
--   <a>$sel:regionName:ReplicaSettingsUpdate'</a>,
--   <a>replicaSettingsUpdate_regionName</a> - The Region of the replica to
--   be added.
newReplicaSettingsUpdate :: Text -> ReplicaSettingsUpdate

-- | Represents one of the following:
--   
--   <ul>
--   <li>A new replica to be added to an existing global table.</li>
--   <li>New parameters for an existing replica.</li>
--   <li>An existing replica to be removed from an existing global
--   table.</li>
--   </ul>
--   
--   <i>See:</i> <a>newReplicaUpdate</a> smart constructor.
data ReplicaUpdate
ReplicaUpdate' :: Maybe CreateReplicaAction -> Maybe DeleteReplicaAction -> ReplicaUpdate

-- | Create a value of <a>ReplicaUpdate</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:create:ReplicaUpdate'</a>, <a>replicaUpdate_create</a> - The
--   parameters required for creating a replica on an existing global
--   table.
--   
--   <a>$sel:delete':ReplicaUpdate'</a>, <a>replicaUpdate_delete</a> - The
--   name of the existing replica to be removed.
newReplicaUpdate :: ReplicaUpdate

-- | Represents one of the following:
--   
--   <ul>
--   <li>A new replica to be added to an existing regional table or global
--   table. This request invokes the <tt>CreateTableReplica</tt> action in
--   the destination Region.</li>
--   <li>New parameters for an existing replica. This request invokes the
--   <tt>UpdateTable</tt> action in the destination Region.</li>
--   <li>An existing replica to be deleted. The request invokes the
--   <tt>DeleteTableReplica</tt> action in the destination Region, deleting
--   the replica and all if its items in the destination Region.</li>
--   </ul>
--   
--   <i>See:</i> <a>newReplicationGroupUpdate</a> smart constructor.
data ReplicationGroupUpdate
ReplicationGroupUpdate' :: Maybe CreateReplicationGroupMemberAction -> Maybe DeleteReplicationGroupMemberAction -> Maybe UpdateReplicationGroupMemberAction -> ReplicationGroupUpdate

-- | Create a value of <a>ReplicationGroupUpdate</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:create:ReplicationGroupUpdate'</a>,
--   <a>replicationGroupUpdate_create</a> - The parameters required for
--   creating a replica for the table.
--   
--   <a>$sel:delete':ReplicationGroupUpdate'</a>,
--   <a>replicationGroupUpdate_delete</a> - The parameters required for
--   deleting a replica for the table.
--   
--   <a>$sel:update:ReplicationGroupUpdate'</a>,
--   <a>replicationGroupUpdate_update</a> - The parameters required for
--   updating a replica for the table.
newReplicationGroupUpdate :: ReplicationGroupUpdate

-- | Contains details for the restore.
--   
--   <i>See:</i> <a>newRestoreSummary</a> smart constructor.
data RestoreSummary
RestoreSummary' :: Maybe Text -> Maybe Text -> POSIX -> Bool -> RestoreSummary

-- | Create a value of <a>RestoreSummary</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourceTableArn:RestoreSummary'</a>,
--   <a>restoreSummary_sourceTableArn</a> - The ARN of the source table of
--   the backup that is being restored.
--   
--   <a>$sel:sourceBackupArn:RestoreSummary'</a>,
--   <a>restoreSummary_sourceBackupArn</a> - The Amazon Resource Name (ARN)
--   of the backup from which the table was restored.
--   
--   <a>$sel:restoreDateTime:RestoreSummary'</a>,
--   <a>restoreSummary_restoreDateTime</a> - Point in time or source backup
--   time.
--   
--   <a>$sel:restoreInProgress:RestoreSummary'</a>,
--   <a>restoreSummary_restoreInProgress</a> - Indicates if a restore is in
--   progress or not.
newRestoreSummary :: UTCTime -> Bool -> RestoreSummary

-- | The description of the server-side encryption status on the specified
--   table.
--   
--   <i>See:</i> <a>newSSEDescription</a> smart constructor.
data SSEDescription
SSEDescription' :: Maybe SSEStatus -> Maybe POSIX -> Maybe SSEType -> Maybe Text -> SSEDescription

-- | Create a value of <a>SSEDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:SSEDescription'</a>, <a>sSEDescription_status</a> -
--   Represents the current state of server-side encryption. The only
--   supported values are:
--   
--   <ul>
--   <li><tt>ENABLED</tt> - Server-side encryption is enabled.</li>
--   <li><tt>UPDATING</tt> - Server-side encryption is being updated.</li>
--   </ul>
--   
--   <a>$sel:inaccessibleEncryptionDateTime:SSEDescription'</a>,
--   <a>sSEDescription_inaccessibleEncryptionDateTime</a> - Indicates the
--   time, in UNIX epoch date format, when DynamoDB detected that the
--   table's AWS KMS key was inaccessible. This attribute will
--   automatically be cleared when DynamoDB detects that the table's AWS
--   KMS key is accessible again. DynamoDB will initiate the table archival
--   process when table's AWS KMS key remains inaccessible for more than
--   seven days from this date.
--   
--   <a>$sel:sSEType:SSEDescription'</a>, <a>sSEDescription_sSEType</a> -
--   Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
--   
--   <a>$sel:kmsMasterKeyArn:SSEDescription'</a>,
--   <a>sSEDescription_kmsMasterKeyArn</a> - The AWS KMS customer master
--   key (CMK) ARN used for the AWS KMS encryption.
newSSEDescription :: SSEDescription

-- | Represents the settings used to enable server-side encryption.
--   
--   <i>See:</i> <a>newSSESpecification</a> smart constructor.
data SSESpecification
SSESpecification' :: Maybe Bool -> Maybe Text -> Maybe SSEType -> SSESpecification

-- | Create a value of <a>SSESpecification</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enabled:SSESpecification'</a>, <a>sSESpecification_enabled</a>
--   - Indicates whether server-side encryption is done using an AWS
--   managed CMK or an AWS owned CMK. If enabled (true), server-side
--   encryption type is set to <tt>KMS</tt> and an AWS managed CMK is used
--   (AWS KMS charges apply). If disabled (false) or not specified,
--   server-side encryption is set to AWS owned CMK.
--   
--   <a>$sel:kmsMasterKeyId:SSESpecification'</a>,
--   <a>sSESpecification_kmsMasterKeyId</a> - The AWS KMS customer master
--   key (CMK) that should be used for the AWS KMS encryption. To specify a
--   CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias
--   ARN. Note that you should only provide this parameter if the key is
--   different from the default DynamoDB customer master key
--   alias/aws/dynamodb.
--   
--   <a>$sel:sSEType:SSESpecification'</a>, <a>sSESpecification_sSEType</a>
--   - Server-side encryption type. The only supported value is:
--   
--   <ul>
--   <li><tt>KMS</tt> - Server-side encryption that uses AWS Key Management
--   Service. The key is stored in your account and is managed by AWS KMS
--   (AWS KMS charges apply).</li>
--   </ul>
newSSESpecification :: SSESpecification

-- | Contains the details of the table when the backup was created.
--   
--   <i>See:</i> <a>newSourceTableDetails</a> smart constructor.
data SourceTableDetails
SourceTableDetails' :: Maybe Integer -> Maybe Text -> Maybe BillingMode -> Maybe Natural -> Text -> Text -> NonEmpty KeySchemaElement -> POSIX -> ProvisionedThroughput -> SourceTableDetails

-- | Create a value of <a>SourceTableDetails</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableSizeBytes:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableSizeBytes</a> - Size of the table in bytes.
--   Note that this is an approximate value.
--   
--   <a>$sel:tableArn:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableArn</a> - ARN of the table for which backup
--   was created.
--   
--   <a>$sel:billingMode:SourceTableDetails'</a>,
--   <a>sourceTableDetails_billingMode</a> - Controls how you are charged
--   for read and write throughput and how you manage capacity. This
--   setting can be changed later.
--   
--   <ul>
--   <li><tt>PROVISIONED</tt> - Sets the read/write capacity mode to
--   <tt>PROVISIONED</tt>. We recommend using <tt>PROVISIONED</tt> for
--   predictable workloads.</li>
--   <li><tt>PAY_PER_REQUEST</tt> - Sets the read/write capacity mode to
--   <tt>PAY_PER_REQUEST</tt>. We recommend using <tt>PAY_PER_REQUEST</tt>
--   for unpredictable workloads.</li>
--   </ul>
--   
--   <a>$sel:itemCount:SourceTableDetails'</a>,
--   <a>sourceTableDetails_itemCount</a> - Number of items in the table.
--   Note that this is an approximate value.
--   
--   <a>$sel:tableName:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableName</a> - The name of the table for which
--   the backup was created.
--   
--   <a>$sel:tableId:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableId</a> - Unique identifier for the table
--   for which the backup was created.
--   
--   <a>$sel:keySchema:SourceTableDetails'</a>,
--   <a>sourceTableDetails_keySchema</a> - Schema of the table.
--   
--   <a>$sel:tableCreationDateTime:SourceTableDetails'</a>,
--   <a>sourceTableDetails_tableCreationDateTime</a> - Time when the source
--   table was created.
--   
--   <a>$sel:provisionedThroughput:SourceTableDetails'</a>,
--   <a>sourceTableDetails_provisionedThroughput</a> - Read IOPs and Write
--   IOPS on the table when the backup was created.
newSourceTableDetails :: Text -> Text -> NonEmpty KeySchemaElement -> UTCTime -> ProvisionedThroughput -> SourceTableDetails

-- | Contains the details of the features enabled on the table when the
--   backup was created. For example, LSIs, GSIs, streams, TTL.
--   
--   <i>See:</i> <a>newSourceTableFeatureDetails</a> smart constructor.
data SourceTableFeatureDetails
SourceTableFeatureDetails' :: Maybe StreamSpecification -> Maybe [GlobalSecondaryIndexInfo] -> Maybe [LocalSecondaryIndexInfo] -> Maybe SSEDescription -> Maybe TimeToLiveDescription -> SourceTableFeatureDetails

-- | Create a value of <a>SourceTableFeatureDetails</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamDescription:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_streamDescription</a> - Stream settings
--   on the table when the backup was created.
--   
--   <a>$sel:globalSecondaryIndexes:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_globalSecondaryIndexes</a> - Represents
--   the GSI properties for the table when the backup was created. It
--   includes the IndexName, KeySchema, Projection, and
--   ProvisionedThroughput for the GSIs on the table at the time of backup.
--   
--   <a>$sel:localSecondaryIndexes:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_localSecondaryIndexes</a> - Represents
--   the LSI properties for the table when the backup was created. It
--   includes the IndexName, KeySchema and Projection for the LSIs on the
--   table at the time of backup.
--   
--   <a>$sel:sSEDescription:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_sSEDescription</a> - The description of
--   the server-side encryption status on the table when the backup was
--   created.
--   
--   <a>$sel:timeToLiveDescription:SourceTableFeatureDetails'</a>,
--   <a>sourceTableFeatureDetails_timeToLiveDescription</a> - Time to Live
--   settings on the table when the backup was created.
newSourceTableFeatureDetails :: SourceTableFeatureDetails

-- | Represents the DynamoDB Streams configuration for a table in DynamoDB.
--   
--   <i>See:</i> <a>newStreamSpecification</a> smart constructor.
data StreamSpecification
StreamSpecification' :: Maybe StreamViewType -> Bool -> StreamSpecification

-- | Create a value of <a>StreamSpecification</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamViewType:StreamSpecification'</a>,
--   <a>streamSpecification_streamViewType</a> - When an item in the table
--   is modified, <tt>StreamViewType</tt> determines what information is
--   written to the stream for this table. Valid values for
--   <tt>StreamViewType</tt> are:
--   
--   <ul>
--   <li><tt>KEYS_ONLY</tt> - Only the key attributes of the modified item
--   are written to the stream.</li>
--   <li><tt>NEW_IMAGE</tt> - The entire item, as it appears after it was
--   modified, is written to the stream.</li>
--   <li><tt>OLD_IMAGE</tt> - The entire item, as it appeared before it was
--   modified, is written to the stream.</li>
--   <li><tt>NEW_AND_OLD_IMAGES</tt> - Both the new and the old item images
--   of the item are written to the stream.</li>
--   </ul>
--   
--   <a>$sel:streamEnabled:StreamSpecification'</a>,
--   <a>streamSpecification_streamEnabled</a> - Indicates whether DynamoDB
--   Streams is enabled (true) or disabled (false) on the table.
newStreamSpecification :: Bool -> StreamSpecification

-- | Represents the auto scaling configuration for a global table.
--   
--   <i>See:</i> <a>newTableAutoScalingDescription</a> smart constructor.
data TableAutoScalingDescription
TableAutoScalingDescription' :: Maybe TableStatus -> Maybe [ReplicaAutoScalingDescription] -> Maybe Text -> TableAutoScalingDescription

-- | Create a value of <a>TableAutoScalingDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tableStatus:TableAutoScalingDescription'</a>,
--   <a>tableAutoScalingDescription_tableStatus</a> - The current state of
--   the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   </ul>
--   
--   <a>$sel:replicas:TableAutoScalingDescription'</a>,
--   <a>tableAutoScalingDescription_replicas</a> - Represents replicas of
--   the global table.
--   
--   <a>$sel:tableName:TableAutoScalingDescription'</a>,
--   <a>tableAutoScalingDescription_tableName</a> - The name of the table.
newTableAutoScalingDescription :: TableAutoScalingDescription

-- | Represents the properties of a table.
--   
--   <i>See:</i> <a>newTableDescription</a> smart constructor.
data TableDescription
TableDescription' :: Maybe RestoreSummary -> Maybe Text -> Maybe Integer -> Maybe [AttributeDefinition] -> Maybe Text -> Maybe ProvisionedThroughputDescription -> Maybe TableStatus -> Maybe Text -> Maybe (NonEmpty KeySchemaElement) -> Maybe [GlobalSecondaryIndexDescription] -> Maybe Text -> Maybe BillingModeSummary -> Maybe [LocalSecondaryIndexDescription] -> Maybe POSIX -> Maybe SSEDescription -> Maybe Text -> Maybe [ReplicaDescription] -> Maybe Integer -> Maybe ArchivalSummary -> Maybe Text -> Maybe StreamSpecification -> TableDescription

-- | Create a value of <a>TableDescription</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:restoreSummary:TableDescription'</a>,
--   <a>tableDescription_restoreSummary</a> - Contains details for the
--   restore.
--   
--   <a>$sel:globalTableVersion:TableDescription'</a>,
--   <a>tableDescription_globalTableVersion</a> - Represents the version of
--   <a>global tables</a> in use, if the table is replicated across AWS
--   Regions.
--   
--   <a>$sel:tableSizeBytes:TableDescription'</a>,
--   <a>tableDescription_tableSizeBytes</a> - The total size of the
--   specified table, in bytes. DynamoDB updates this value approximately
--   every six hours. Recent changes might not be reflected in this value.
--   
--   <a>$sel:attributeDefinitions:TableDescription'</a>,
--   <a>tableDescription_attributeDefinitions</a> - An array of
--   <tt>AttributeDefinition</tt> objects. Each of these objects describes
--   one attribute in the table and index key schema.
--   
--   Each <tt>AttributeDefinition</tt> object in this array is composed of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>AttributeType</tt> - The data type for the attribute.</li>
--   </ul>
--   
--   <a>$sel:latestStreamArn:TableDescription'</a>,
--   <a>tableDescription_latestStreamArn</a> - The Amazon Resource Name
--   (ARN) that uniquely identifies the latest stream for this table.
--   
--   <a>$sel:provisionedThroughput:TableDescription'</a>,
--   <a>tableDescription_provisionedThroughput</a> - The provisioned
--   throughput settings for the table, consisting of read and write
--   capacity units, along with data about increases and decreases.
--   
--   <a>$sel:tableStatus:TableDescription'</a>,
--   <a>tableDescription_tableStatus</a> - The current state of the table:
--   
--   <ul>
--   <li><tt>CREATING</tt> - The table is being created.</li>
--   <li><tt>UPDATING</tt> - The table is being updated.</li>
--   <li><tt>DELETING</tt> - The table is being deleted.</li>
--   <li><tt>ACTIVE</tt> - The table is ready for use.</li>
--   <li><tt>INACCESSIBLE_ENCRYPTION_CREDENTIALS</tt> - The AWS KMS key
--   used to encrypt the table in inaccessible. Table operations may fail
--   due to failure to use the AWS KMS key. DynamoDB will initiate the
--   table archival process when a table's AWS KMS key remains inaccessible
--   for more than seven days.</li>
--   <li><tt>ARCHIVING</tt> - The table is being archived. Operations are
--   not allowed until archival is complete.</li>
--   <li><tt>ARCHIVED</tt> - The table has been archived. See the
--   ArchivalReason for more information.</li>
--   </ul>
--   
--   <a>$sel:tableArn:TableDescription'</a>,
--   <a>tableDescription_tableArn</a> - The Amazon Resource Name (ARN) that
--   uniquely identifies the table.
--   
--   <a>$sel:keySchema:TableDescription'</a>,
--   <a>tableDescription_keySchema</a> - The primary key structure for the
--   table. Each <tt>KeySchemaElement</tt> consists of:
--   
--   <ul>
--   <li><tt>AttributeName</tt> - The name of the attribute.</li>
--   <li><tt>KeyType</tt> - The role of the attribute:<ul><li><tt>HASH</tt>
--   - partition key</li><li><tt>RANGE</tt> - sort key</li></ul>The
--   partition key of an item is also known as its <i>hash attribute</i>.
--   The term "hash attribute" derives from DynamoDB's usage of an internal
--   hash function to evenly distribute data items across partitions, based
--   on their partition key values.The sort key of an item is also known as
--   its <i>range attribute</i>. The term "range attribute" derives from
--   the way DynamoDB stores items with the same partition key physically
--   close together, in sorted order by the sort key value.</li>
--   </ul>
--   
--   For more information about primary keys, see <a>Primary Key</a> in the
--   <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <a>$sel:globalSecondaryIndexes:TableDescription'</a>,
--   <a>tableDescription_globalSecondaryIndexes</a> - The global secondary
--   indexes, if any, on the table. Each index is scoped to a given
--   partition key value. Each element is composed of:
--   
--   <ul>
--   <li><tt>Backfilling</tt> - If true, then the index is currently in the
--   backfilling phase. Backfilling occurs only when a new global secondary
--   index is added to the table. It is the process by which DynamoDB
--   populates the new index with data from the table. (This attribute does
--   not appear for indexes that were created during a <tt>CreateTable</tt>
--   operation.)You can delete an index that is being created during the
--   <tt>Backfilling</tt> phase when <tt>IndexStatus</tt> is set to
--   CREATING and <tt>Backfilling</tt> is true. You can't delete the index
--   that is being created when <tt>IndexStatus</tt> is set to CREATING and
--   <tt>Backfilling</tt> is false. (This attribute does not appear for
--   indexes that were created during a <tt>CreateTable</tt>
--   operation.)</li>
--   <li><tt>IndexName</tt> - The name of the global secondary index.</li>
--   <li><tt>IndexSizeBytes</tt> - The total size of the global secondary
--   index, in bytes. DynamoDB updates this value approximately every six
--   hours. Recent changes might not be reflected in this value.</li>
--   <li><tt>IndexStatus</tt> - The current status of the global secondary
--   index:<ul><li><tt>CREATING</tt> - The index is being
--   created.</li><li><tt>UPDATING</tt> - The index is being
--   updated.</li><li><tt>DELETING</tt> - The index is being
--   deleted.</li><li><tt>ACTIVE</tt> - The index is ready for
--   use.</li></ul></li>
--   <li><tt>ItemCount</tt> - The number of items in the global secondary
--   index. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - In addition
--   to the attributes described in <tt>KEYS_ONLY</tt>, the secondary index
--   will include other non-key attributes that you
--   specify.</li><li><tt>ALL</tt> - All of the table attributes are
--   projected into the index.</li></ul></li><li><tt>NonKeyAttributes</tt>
--   - A list of one or more non-key attribute names that are projected
--   into the secondary index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>ProvisionedThroughput</tt> - The provisioned throughput
--   settings for the global secondary index, consisting of read and write
--   capacity units, along with data about increases and decreases.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
--   
--   <a>$sel:latestStreamLabel:TableDescription'</a>,
--   <a>tableDescription_latestStreamLabel</a> - A timestamp, in ISO 8601
--   format, for this stream.
--   
--   Note that <tt>LatestStreamLabel</tt> is not a unique identifier for
--   the stream, because it is possible that a stream from another table
--   might have the same timestamp. However, the combination of the
--   following three elements is guaranteed to be unique:
--   
--   <ul>
--   <li>AWS customer ID</li>
--   <li>Table name</li>
--   <li><pre>StreamLabel</pre></li>
--   </ul>
--   
--   <a>$sel:billingModeSummary:TableDescription'</a>,
--   <a>tableDescription_billingModeSummary</a> - Contains the details for
--   the read/write capacity mode.
--   
--   <a>$sel:localSecondaryIndexes:TableDescription'</a>,
--   <a>tableDescription_localSecondaryIndexes</a> - Represents one or more
--   local secondary indexes on the table. Each index is scoped to a given
--   partition key value. Tables with one or more local secondary indexes
--   are subject to an item collection size limit, where the amount of data
--   within a given item collection cannot exceed 10 GB. Each element is
--   composed of:
--   
--   <ul>
--   <li><tt>IndexName</tt> - The name of the local secondary index.</li>
--   <li><tt>KeySchema</tt> - Specifies the complete index key schema. The
--   attribute names in the key schema must be between 1 and 255 characters
--   (inclusive). The key schema must begin with the same partition key as
--   the table.</li>
--   <li><tt>Projection</tt> - Specifies attributes that are copied
--   (projected) from the table into the index. These are in addition to
--   the primary key attributes and index key attributes, which are
--   automatically projected. Each attribute specification is composed
--   of:<ul><li><tt>ProjectionType</tt> - One of the
--   following:<ul><li><tt>KEYS_ONLY</tt> - Only the index and primary keys
--   are projected into the index.</li><li><tt>INCLUDE</tt> - Only the
--   specified table attributes are projected into the index. The list of
--   projected attributes is in
--   <tt>NonKeyAttributes</tt>.</li><li><tt>ALL</tt> - All of the table
--   attributes are projected into the
--   index.</li></ul></li><li><tt>NonKeyAttributes</tt> - A list of one or
--   more non-key attribute names that are projected into the secondary
--   index. The total count of attributes provided in
--   <tt>NonKeyAttributes</tt>, summed across all of the secondary indexes,
--   must not exceed 20. If you project the same attribute into two
--   different indexes, this counts as two distinct attributes when
--   determining the total.</li></ul></li>
--   <li><tt>IndexSizeBytes</tt> - Represents the total size of the index,
--   in bytes. DynamoDB updates this value approximately every six hours.
--   Recent changes might not be reflected in this value.</li>
--   <li><tt>ItemCount</tt> - Represents the number of items in the index.
--   DynamoDB updates this value approximately every six hours. Recent
--   changes might not be reflected in this value.</li>
--   </ul>
--   
--   If the table is in the <tt>DELETING</tt> state, no information about
--   indexes will be returned.
--   
--   <a>$sel:creationDateTime:TableDescription'</a>,
--   <a>tableDescription_creationDateTime</a> - The date and time when the
--   table was created, in <a>UNIX epoch time</a> format.
--   
--   <a>$sel:sSEDescription:TableDescription'</a>,
--   <a>tableDescription_sSEDescription</a> - The description of the
--   server-side encryption status on the specified table.
--   
--   <a>$sel:tableId:TableDescription'</a>, <a>tableDescription_tableId</a>
--   - Unique identifier for the table for which the backup was created.
--   
--   <a>$sel:replicas:TableDescription'</a>,
--   <a>tableDescription_replicas</a> - Represents replicas of the table.
--   
--   <a>$sel:itemCount:TableDescription'</a>,
--   <a>tableDescription_itemCount</a> - The number of items in the
--   specified table. DynamoDB updates this value approximately every six
--   hours. Recent changes might not be reflected in this value.
--   
--   <a>$sel:archivalSummary:TableDescription'</a>,
--   <a>tableDescription_archivalSummary</a> - Contains information about
--   the table archive.
--   
--   <a>$sel:tableName:TableDescription'</a>,
--   <a>tableDescription_tableName</a> - The name of the table.
--   
--   <a>$sel:streamSpecification:TableDescription'</a>,
--   <a>tableDescription_streamSpecification</a> - The current DynamoDB
--   Streams configuration for the table.
newTableDescription :: TableDescription

-- | Describes a tag. A tag is a key-value pair. You can add up to 50 tags
--   to a single DynamoDB table.
--   
--   AWS-assigned tag names and values are automatically assigned the
--   <tt>aws:</tt> prefix, which the user cannot assign. AWS-assigned tag
--   names do not count towards the tag limit of 50. User-assigned tag
--   names have the prefix <tt>user:</tt> in the Cost Allocation Report.
--   You cannot backdate the application of a tag.
--   
--   For an overview on tagging DynamoDB resources, see <a>Tagging for
--   DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Text -> Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - The key of the tag. Tag keys
--   are case sensitive. Each DynamoDB table can only have up to one tag
--   with the same key. If you try to add an existing tag (same key), the
--   existing tag value will be updated to the new value.
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The value of the tag. Tag
--   values are case-sensitive and can be null.
newTag :: Text -> Text -> Tag

-- | The description of the Time to Live (TTL) status on the specified
--   table.
--   
--   <i>See:</i> <a>newTimeToLiveDescription</a> smart constructor.
data TimeToLiveDescription
TimeToLiveDescription' :: Maybe TimeToLiveStatus -> Maybe Text -> TimeToLiveDescription

-- | Create a value of <a>TimeToLiveDescription</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:timeToLiveStatus:TimeToLiveDescription'</a>,
--   <a>timeToLiveDescription_timeToLiveStatus</a> - The TTL status for the
--   table.
--   
--   <a>$sel:attributeName:TimeToLiveDescription'</a>,
--   <a>timeToLiveDescription_attributeName</a> - The name of the TTL
--   attribute for items in the table.
newTimeToLiveDescription :: TimeToLiveDescription

-- | Represents the settings used to enable or disable Time to Live (TTL)
--   for the specified table.
--   
--   <i>See:</i> <a>newTimeToLiveSpecification</a> smart constructor.
data TimeToLiveSpecification
TimeToLiveSpecification' :: Bool -> Text -> TimeToLiveSpecification

-- | Create a value of <a>TimeToLiveSpecification</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enabled:TimeToLiveSpecification'</a>,
--   <a>timeToLiveSpecification_enabled</a> - Indicates whether TTL is to
--   be enabled (true) or disabled (false) on the table.
--   
--   <a>$sel:attributeName:TimeToLiveSpecification'</a>,
--   <a>timeToLiveSpecification_attributeName</a> - The name of the TTL
--   attribute used to store the expiration time for items in the table.
newTimeToLiveSpecification :: Bool -> Text -> TimeToLiveSpecification

-- | Specifies an item to be retrieved as part of the transaction.
--   
--   <i>See:</i> <a>newTransactGetItem</a> smart constructor.
data TransactGetItem
TransactGetItem' :: Get -> TransactGetItem

-- | Create a value of <a>TransactGetItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:get':TransactGetItem'</a>, <a>transactGetItem_get</a> -
--   Contains the primary key that identifies the item to get, together
--   with the name of the table that contains the item, and optionally the
--   specific attributes of the item to retrieve.
newTransactGetItem :: Get -> TransactGetItem

-- | A list of requests that can perform update, put, delete, or check
--   operations on multiple items in one or more tables atomically.
--   
--   <i>See:</i> <a>newTransactWriteItem</a> smart constructor.
data TransactWriteItem
TransactWriteItem' :: Maybe ConditionCheck -> Maybe Put -> Maybe Delete -> Maybe Update -> TransactWriteItem

-- | Create a value of <a>TransactWriteItem</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:conditionCheck:TransactWriteItem'</a>,
--   <a>transactWriteItem_conditionCheck</a> - A request to perform a check
--   item operation.
--   
--   <a>$sel:put:TransactWriteItem'</a>, <a>transactWriteItem_put</a> - A
--   request to perform a <tt>PutItem</tt> operation.
--   
--   <a>$sel:delete':TransactWriteItem'</a>,
--   <a>transactWriteItem_delete</a> - A request to perform a
--   <tt>DeleteItem</tt> operation.
--   
--   <a>$sel:update:TransactWriteItem'</a>, <a>transactWriteItem_update</a>
--   - A request to perform an <tt>UpdateItem</tt> operation.
newTransactWriteItem :: TransactWriteItem

-- | Represents a request to perform an <tt>UpdateItem</tt> operation.
--   
--   <i>See:</i> <a>newUpdate</a> smart constructor.
data Update
Update' :: Maybe (HashMap Text Text) -> Maybe (HashMap Text AttributeValue) -> Maybe ReturnValuesOnConditionCheckFailure -> Maybe Text -> HashMap Text AttributeValue -> Text -> Text -> Update

-- | Create a value of <a>Update</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expressionAttributeNames:Update'</a>,
--   <a>update_expressionAttributeNames</a> - One or more substitution
--   tokens for attribute names in an expression.
--   
--   <a>$sel:expressionAttributeValues:Update'</a>,
--   <a>update_expressionAttributeValues</a> - One or more values that can
--   be substituted in an expression.
--   
--   <a>$sel:returnValuesOnConditionCheckFailure:Update'</a>,
--   <a>update_returnValuesOnConditionCheckFailure</a> - Use
--   <tt>ReturnValuesOnConditionCheckFailure</tt> to get the item
--   attributes if the <tt>Update</tt> condition fails. For
--   <tt>ReturnValuesOnConditionCheckFailure</tt>, the valid values are:
--   NONE, ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.
--   
--   <a>$sel:conditionExpression:Update'</a>,
--   <a>update_conditionExpression</a> - A condition that must be satisfied
--   in order for a conditional update to succeed.
--   
--   <a>$sel:key:Update'</a>, <a>update_key</a> - The primary key of the
--   item to be updated. Each element consists of an attribute name and a
--   value for that attribute.
--   
--   <a>$sel:updateExpression:Update'</a>, <a>update_updateExpression</a> -
--   An expression that defines one or more attributes to be updated, the
--   action to be performed on them, and new value(s) for them.
--   
--   <a>$sel:tableName:Update'</a>, <a>update_tableName</a> - Name of the
--   table for the <tt>UpdateItem</tt> request.
newUpdate :: Text -> Text -> Update

-- | Represents the new provisioned throughput settings to be applied to a
--   global secondary index.
--   
--   <i>See:</i> <a>newUpdateGlobalSecondaryIndexAction</a> smart
--   constructor.
data UpdateGlobalSecondaryIndexAction
UpdateGlobalSecondaryIndexAction' :: Text -> ProvisionedThroughput -> UpdateGlobalSecondaryIndexAction

-- | Create a value of <a>UpdateGlobalSecondaryIndexAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:indexName:UpdateGlobalSecondaryIndexAction'</a>,
--   <a>updateGlobalSecondaryIndexAction_indexName</a> - The name of the
--   global secondary index to be updated.
--   
--   <a>$sel:provisionedThroughput:UpdateGlobalSecondaryIndexAction'</a>,
--   <a>updateGlobalSecondaryIndexAction_provisionedThroughput</a> -
--   Represents the provisioned throughput settings for the specified
--   global secondary index.
--   
--   For current minimum and maximum provisioned throughput values, see
--   <a>Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB
--   Developer Guide</i>.
newUpdateGlobalSecondaryIndexAction :: Text -> ProvisionedThroughput -> UpdateGlobalSecondaryIndexAction

-- | Represents a replica to be modified.
--   
--   <i>See:</i> <a>newUpdateReplicationGroupMemberAction</a> smart
--   constructor.
data UpdateReplicationGroupMemberAction
UpdateReplicationGroupMemberAction' :: Maybe Text -> Maybe ProvisionedThroughputOverride -> Maybe (NonEmpty ReplicaGlobalSecondaryIndex) -> Text -> UpdateReplicationGroupMemberAction

-- | Create a value of <a>UpdateReplicationGroupMemberAction</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:kmsMasterKeyId:UpdateReplicationGroupMemberAction'</a>,
--   <a>updateReplicationGroupMemberAction_kmsMasterKeyId</a> - The AWS KMS
--   customer master key (CMK) of the replica that should be used for AWS
--   KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name
--   (ARN), alias name, or alias ARN. Note that you should only provide
--   this parameter if the key is different from the default DynamoDB KMS
--   master key alias/aws/dynamodb.
--   
--   
--   <a>$sel:provisionedThroughputOverride:UpdateReplicationGroupMemberAction'</a>,
--   <a>updateReplicationGroupMemberAction_provisionedThroughputOverride</a>
--   - Replica-specific provisioned throughput. If not specified, uses the
--   source table's provisioned throughput settings.
--   
--   
--   <a>$sel:globalSecondaryIndexes:UpdateReplicationGroupMemberAction'</a>,
--   <a>updateReplicationGroupMemberAction_globalSecondaryIndexes</a> -
--   Replica-specific global secondary index settings.
--   
--   <a>$sel:regionName:UpdateReplicationGroupMemberAction'</a>,
--   <a>updateReplicationGroupMemberAction_regionName</a> - The Region
--   where the replica exists.
newUpdateReplicationGroupMemberAction :: Text -> UpdateReplicationGroupMemberAction

-- | Represents an operation to perform - either <tt>DeleteItem</tt> or
--   <tt>PutItem</tt>. You can only request one of these operations, not
--   both, in a single <tt>WriteRequest</tt>. If you do need to perform
--   both of these operations, you need to provide two separate
--   <tt>WriteRequest</tt> objects.
--   
--   <i>See:</i> <a>newWriteRequest</a> smart constructor.
data WriteRequest
WriteRequest' :: Maybe DeleteRequest -> Maybe PutRequest -> WriteRequest

-- | Create a value of <a>WriteRequest</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deleteRequest:WriteRequest'</a>,
--   <a>writeRequest_deleteRequest</a> - A request to perform a
--   <tt>DeleteItem</tt> operation.
--   
--   <a>$sel:putRequest:WriteRequest'</a>, <a>writeRequest_putRequest</a> -
--   A request to perform a <tt>PutItem</tt> operation.
newWriteRequest :: WriteRequest
