-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-personalize-eventsZSamazonka-personalize-events
@version 2.0


module Network.AWS.PersonalizeEvents.Types.Event

-- | Represents user interaction event information sent using the
--   <tt>PutEvents</tt> API.
--   
--   <i>See:</i> <a>newEvent</a> smart constructor.
data Event
Event' :: Maybe Text -> Maybe Double -> Maybe Text -> Maybe (NonEmpty Text) -> Maybe Text -> Maybe Text -> Text -> POSIX -> Event

-- | The ID of the recommendation.
[$sel:recommendationId:Event'] :: Event -> Maybe Text

-- | The event value that corresponds to the <tt>EVENT_VALUE</tt> field of
--   the Interactions schema.
[$sel:eventValue:Event'] :: Event -> Maybe Double

-- | The item ID key that corresponds to the <tt>ITEM_ID</tt> field of the
--   Interactions schema.
[$sel:itemId:Event'] :: Event -> Maybe Text

-- | A list of item IDs that represents the sequence of items you have
--   shown the user. For example, <tt>["itemId1", "itemId2",
--   "itemId3"]</tt>.
[$sel:impression:Event'] :: Event -> Maybe (NonEmpty Text)

-- | An ID associated with the event. If an event ID is not provided,
--   Amazon Personalize generates a unique ID for the event. An event ID is
--   not used as an input to the model. Amazon Personalize uses the event
--   ID to distinquish unique events. Any subsequent events after the first
--   with the same event ID are not used in model training.
[$sel:eventId:Event'] :: Event -> Maybe Text

-- | A string map of event-specific data that you might choose to record.
--   For example, if a user rates a movie on your site, other than movie ID
--   (<tt>itemId</tt>) and rating (<tt>eventValue</tt>) , you might also
--   send the number of movie ratings made by the user.
--   
--   Each item in the map consists of a key-value pair. For example,
--   
--   <pre>
--   {"numberOfRatings": "12"}
--   </pre>
--   
--   The keys use camel case names that match the fields in the
--   Interactions schema. In the above example, the
--   <tt>numberOfRatings</tt> would match the 'NUMBER_OF_RATINGS' field
--   defined in the Interactions schema.
[$sel:properties:Event'] :: Event -> Maybe Text

-- | The type of event, such as click or download. This property
--   corresponds to the <tt>EVENT_TYPE</tt> field of your Interactions
--   schema and depends on the types of events you are tracking.
[$sel:eventType:Event'] :: Event -> Text

-- | The timestamp (in Unix time) on the client side when the event
--   occurred.
[$sel:sentAt:Event'] :: Event -> POSIX

-- | Create a value of <a>Event</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:recommendationId:Event'</a>, <a>event_recommendationId</a> -
--   The ID of the recommendation.
--   
--   <a>$sel:eventValue:Event'</a>, <a>event_eventValue</a> - The event
--   value that corresponds to the <tt>EVENT_VALUE</tt> field of the
--   Interactions schema.
--   
--   <a>$sel:itemId:Event'</a>, <a>event_itemId</a> - The item ID key that
--   corresponds to the <tt>ITEM_ID</tt> field of the Interactions schema.
--   
--   <a>$sel:impression:Event'</a>, <a>event_impression</a> - A list of
--   item IDs that represents the sequence of items you have shown the
--   user. For example, <tt>["itemId1", "itemId2", "itemId3"]</tt>.
--   
--   <a>$sel:eventId:Event'</a>, <a>event_eventId</a> - An ID associated
--   with the event. If an event ID is not provided, Amazon Personalize
--   generates a unique ID for the event. An event ID is not used as an
--   input to the model. Amazon Personalize uses the event ID to
--   distinquish unique events. Any subsequent events after the first with
--   the same event ID are not used in model training.
--   
--   <a>$sel:properties:Event'</a>, <a>event_properties</a> - A string map
--   of event-specific data that you might choose to record. For example,
--   if a user rates a movie on your site, other than movie ID
--   (<tt>itemId</tt>) and rating (<tt>eventValue</tt>) , you might also
--   send the number of movie ratings made by the user.
--   
--   Each item in the map consists of a key-value pair. For example,
--   
--   <pre>
--   {"numberOfRatings": "12"}
--   </pre>
--   
--   The keys use camel case names that match the fields in the
--   Interactions schema. In the above example, the
--   <tt>numberOfRatings</tt> would match the 'NUMBER_OF_RATINGS' field
--   defined in the Interactions schema.
--   
--   <a>$sel:eventType:Event'</a>, <a>event_eventType</a> - The type of
--   event, such as click or download. This property corresponds to the
--   <tt>EVENT_TYPE</tt> field of your Interactions schema and depends on
--   the types of events you are tracking.
--   
--   <a>$sel:sentAt:Event'</a>, <a>event_sentAt</a> - The timestamp (in
--   Unix time) on the client side when the event occurred.
newEvent :: Text -> UTCTime -> Event

-- | The ID of the recommendation.
event_recommendationId :: Lens' Event (Maybe Text)

-- | The event value that corresponds to the <tt>EVENT_VALUE</tt> field of
--   the Interactions schema.
event_eventValue :: Lens' Event (Maybe Double)

-- | The item ID key that corresponds to the <tt>ITEM_ID</tt> field of the
--   Interactions schema.
event_itemId :: Lens' Event (Maybe Text)

-- | A list of item IDs that represents the sequence of items you have
--   shown the user. For example, <tt>["itemId1", "itemId2",
--   "itemId3"]</tt>.
event_impression :: Lens' Event (Maybe (NonEmpty Text))

-- | An ID associated with the event. If an event ID is not provided,
--   Amazon Personalize generates a unique ID for the event. An event ID is
--   not used as an input to the model. Amazon Personalize uses the event
--   ID to distinquish unique events. Any subsequent events after the first
--   with the same event ID are not used in model training.
event_eventId :: Lens' Event (Maybe Text)

-- | A string map of event-specific data that you might choose to record.
--   For example, if a user rates a movie on your site, other than movie ID
--   (<tt>itemId</tt>) and rating (<tt>eventValue</tt>) , you might also
--   send the number of movie ratings made by the user.
--   
--   Each item in the map consists of a key-value pair. For example,
--   
--   <pre>
--   {"numberOfRatings": "12"}
--   </pre>
--   
--   The keys use camel case names that match the fields in the
--   Interactions schema. In the above example, the
--   <tt>numberOfRatings</tt> would match the 'NUMBER_OF_RATINGS' field
--   defined in the Interactions schema.
event_properties :: Lens' Event (Maybe Text)

-- | The type of event, such as click or download. This property
--   corresponds to the <tt>EVENT_TYPE</tt> field of your Interactions
--   schema and depends on the types of events you are tracking.
event_eventType :: Lens' Event Text

-- | The timestamp (in Unix time) on the client side when the event
--   occurred.
event_sentAt :: Lens' Event UTCTime
instance GHC.Generics.Generic Network.AWS.PersonalizeEvents.Types.Event.Event
instance GHC.Show.Show Network.AWS.PersonalizeEvents.Types.Event.Event
instance GHC.Read.Read Network.AWS.PersonalizeEvents.Types.Event.Event
instance GHC.Classes.Eq Network.AWS.PersonalizeEvents.Types.Event.Event
instance Data.Hashable.Class.Hashable Network.AWS.PersonalizeEvents.Types.Event.Event
instance Control.DeepSeq.NFData Network.AWS.PersonalizeEvents.Types.Event.Event
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.PersonalizeEvents.Types.Event.Event


module Network.AWS.PersonalizeEvents.Types.Item

-- | Represents item metadata added to an Items dataset using the
--   <tt>PutItems</tt> API. For more information see <a>Importing Items
--   Incrementally</a>.
--   
--   <i>See:</i> <a>newItem</a> smart constructor.
data Item
Item' :: Maybe Text -> Text -> Item

-- | A string map of item-specific metadata. Each element in the map
--   consists of a key-value pair. For example, <tt>{"numberOfRatings":
--   "12"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Items dataset. In the previous example, the
--   <tt>numberOfRatings</tt> matches the 'NUMBER_OF_RATINGS' field defined
--   in the Items schema. For categorical string data, to include multiple
--   categories for a single item, separate each category with a pipe
--   separator (<tt>|</tt>). For example, <tt>\"Horror|Action\"</tt>.
[$sel:properties:Item'] :: Item -> Maybe Text

-- | The ID associated with the item.
[$sel:itemId:Item'] :: Item -> Text

-- | Create a value of <a>Item</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:properties:Item'</a>, <a>item_properties</a> - A string map of
--   item-specific metadata. Each element in the map consists of a
--   key-value pair. For example, <tt>{"numberOfRatings": "12"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Items dataset. In the previous example, the
--   <tt>numberOfRatings</tt> matches the 'NUMBER_OF_RATINGS' field defined
--   in the Items schema. For categorical string data, to include multiple
--   categories for a single item, separate each category with a pipe
--   separator (<tt>|</tt>). For example, <tt>\"Horror|Action\"</tt>.
--   
--   <a>$sel:itemId:Item'</a>, <a>item_itemId</a> - The ID associated with
--   the item.
newItem :: Text -> Item

-- | A string map of item-specific metadata. Each element in the map
--   consists of a key-value pair. For example, <tt>{"numberOfRatings":
--   "12"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Items dataset. In the previous example, the
--   <tt>numberOfRatings</tt> matches the 'NUMBER_OF_RATINGS' field defined
--   in the Items schema. For categorical string data, to include multiple
--   categories for a single item, separate each category with a pipe
--   separator (<tt>|</tt>). For example, <tt>\"Horror|Action\"</tt>.
item_properties :: Lens' Item (Maybe Text)

-- | The ID associated with the item.
item_itemId :: Lens' Item Text
instance GHC.Generics.Generic Network.AWS.PersonalizeEvents.Types.Item.Item
instance GHC.Show.Show Network.AWS.PersonalizeEvents.Types.Item.Item
instance GHC.Read.Read Network.AWS.PersonalizeEvents.Types.Item.Item
instance GHC.Classes.Eq Network.AWS.PersonalizeEvents.Types.Item.Item
instance Data.Hashable.Class.Hashable Network.AWS.PersonalizeEvents.Types.Item.Item
instance Control.DeepSeq.NFData Network.AWS.PersonalizeEvents.Types.Item.Item
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.PersonalizeEvents.Types.Item.Item


module Network.AWS.PersonalizeEvents.Types.User

-- | Represents user metadata added to a Users dataset using the
--   <tt>PutUsers</tt> API. For more information see <a>Importing Users
--   Incrementally</a>.
--   
--   <i>See:</i> <a>newUser</a> smart constructor.
data User
User' :: Maybe Text -> Text -> User

-- | A string map of user-specific metadata. Each element in the map
--   consists of a key-value pair. For example,
--   <tt>{"numberOfVideosWatched": "45"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Users dataset. In the previous example, the
--   <tt>numberOfVideosWatched</tt> matches the 'NUMBER_OF_VIDEOS_WATCHED'
--   field defined in the Users schema. For categorical string data, to
--   include multiple categories for a single user, separate each category
--   with a pipe separator (<tt>|</tt>). For example, <tt>\"Member|Frequent
--   shopper\"</tt>.
[$sel:properties:User'] :: User -> Maybe Text

-- | The ID associated with the user.
[$sel:userId:User'] :: User -> Text

-- | Create a value of <a>User</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:properties:User'</a>, <a>user_properties</a> - A string map of
--   user-specific metadata. Each element in the map consists of a
--   key-value pair. For example, <tt>{"numberOfVideosWatched": "45"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Users dataset. In the previous example, the
--   <tt>numberOfVideosWatched</tt> matches the 'NUMBER_OF_VIDEOS_WATCHED'
--   field defined in the Users schema. For categorical string data, to
--   include multiple categories for a single user, separate each category
--   with a pipe separator (<tt>|</tt>). For example, <tt>\"Member|Frequent
--   shopper\"</tt>.
--   
--   <a>$sel:userId:User'</a>, <a>user_userId</a> - The ID associated with
--   the user.
newUser :: Text -> User

-- | A string map of user-specific metadata. Each element in the map
--   consists of a key-value pair. For example,
--   <tt>{"numberOfVideosWatched": "45"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Users dataset. In the previous example, the
--   <tt>numberOfVideosWatched</tt> matches the 'NUMBER_OF_VIDEOS_WATCHED'
--   field defined in the Users schema. For categorical string data, to
--   include multiple categories for a single user, separate each category
--   with a pipe separator (<tt>|</tt>). For example, <tt>\"Member|Frequent
--   shopper\"</tt>.
user_properties :: Lens' User (Maybe Text)

-- | The ID associated with the user.
user_userId :: Lens' User Text
instance GHC.Generics.Generic Network.AWS.PersonalizeEvents.Types.User.User
instance GHC.Show.Show Network.AWS.PersonalizeEvents.Types.User.User
instance GHC.Read.Read Network.AWS.PersonalizeEvents.Types.User.User
instance GHC.Classes.Eq Network.AWS.PersonalizeEvents.Types.User.User
instance Data.Hashable.Class.Hashable Network.AWS.PersonalizeEvents.Types.User.User
instance Control.DeepSeq.NFData Network.AWS.PersonalizeEvents.Types.User.User
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.PersonalizeEvents.Types.User.User


module Network.AWS.PersonalizeEvents.Types

-- | API version <tt>2018-03-22</tt> of the Amazon Personalize Events SDK
--   configuration.
defaultService :: Service

-- | Provide a valid value for the field or parameter.
_InvalidInputException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Could not find the specified resource.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified resource is in use.
_ResourceInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Represents user interaction event information sent using the
--   <tt>PutEvents</tt> API.
--   
--   <i>See:</i> <a>newEvent</a> smart constructor.
data Event
Event' :: Maybe Text -> Maybe Double -> Maybe Text -> Maybe (NonEmpty Text) -> Maybe Text -> Maybe Text -> Text -> POSIX -> Event

-- | The ID of the recommendation.
[$sel:recommendationId:Event'] :: Event -> Maybe Text

-- | The event value that corresponds to the <tt>EVENT_VALUE</tt> field of
--   the Interactions schema.
[$sel:eventValue:Event'] :: Event -> Maybe Double

-- | The item ID key that corresponds to the <tt>ITEM_ID</tt> field of the
--   Interactions schema.
[$sel:itemId:Event'] :: Event -> Maybe Text

-- | A list of item IDs that represents the sequence of items you have
--   shown the user. For example, <tt>["itemId1", "itemId2",
--   "itemId3"]</tt>.
[$sel:impression:Event'] :: Event -> Maybe (NonEmpty Text)

-- | An ID associated with the event. If an event ID is not provided,
--   Amazon Personalize generates a unique ID for the event. An event ID is
--   not used as an input to the model. Amazon Personalize uses the event
--   ID to distinquish unique events. Any subsequent events after the first
--   with the same event ID are not used in model training.
[$sel:eventId:Event'] :: Event -> Maybe Text

-- | A string map of event-specific data that you might choose to record.
--   For example, if a user rates a movie on your site, other than movie ID
--   (<tt>itemId</tt>) and rating (<tt>eventValue</tt>) , you might also
--   send the number of movie ratings made by the user.
--   
--   Each item in the map consists of a key-value pair. For example,
--   
--   <pre>
--   {"numberOfRatings": "12"}
--   </pre>
--   
--   The keys use camel case names that match the fields in the
--   Interactions schema. In the above example, the
--   <tt>numberOfRatings</tt> would match the 'NUMBER_OF_RATINGS' field
--   defined in the Interactions schema.
[$sel:properties:Event'] :: Event -> Maybe Text

-- | The type of event, such as click or download. This property
--   corresponds to the <tt>EVENT_TYPE</tt> field of your Interactions
--   schema and depends on the types of events you are tracking.
[$sel:eventType:Event'] :: Event -> Text

-- | The timestamp (in Unix time) on the client side when the event
--   occurred.
[$sel:sentAt:Event'] :: Event -> POSIX

-- | Create a value of <a>Event</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:recommendationId:Event'</a>, <a>event_recommendationId</a> -
--   The ID of the recommendation.
--   
--   <a>$sel:eventValue:Event'</a>, <a>event_eventValue</a> - The event
--   value that corresponds to the <tt>EVENT_VALUE</tt> field of the
--   Interactions schema.
--   
--   <a>$sel:itemId:Event'</a>, <a>event_itemId</a> - The item ID key that
--   corresponds to the <tt>ITEM_ID</tt> field of the Interactions schema.
--   
--   <a>$sel:impression:Event'</a>, <a>event_impression</a> - A list of
--   item IDs that represents the sequence of items you have shown the
--   user. For example, <tt>["itemId1", "itemId2", "itemId3"]</tt>.
--   
--   <a>$sel:eventId:Event'</a>, <a>event_eventId</a> - An ID associated
--   with the event. If an event ID is not provided, Amazon Personalize
--   generates a unique ID for the event. An event ID is not used as an
--   input to the model. Amazon Personalize uses the event ID to
--   distinquish unique events. Any subsequent events after the first with
--   the same event ID are not used in model training.
--   
--   <a>$sel:properties:Event'</a>, <a>event_properties</a> - A string map
--   of event-specific data that you might choose to record. For example,
--   if a user rates a movie on your site, other than movie ID
--   (<tt>itemId</tt>) and rating (<tt>eventValue</tt>) , you might also
--   send the number of movie ratings made by the user.
--   
--   Each item in the map consists of a key-value pair. For example,
--   
--   <pre>
--   {"numberOfRatings": "12"}
--   </pre>
--   
--   The keys use camel case names that match the fields in the
--   Interactions schema. In the above example, the
--   <tt>numberOfRatings</tt> would match the 'NUMBER_OF_RATINGS' field
--   defined in the Interactions schema.
--   
--   <a>$sel:eventType:Event'</a>, <a>event_eventType</a> - The type of
--   event, such as click or download. This property corresponds to the
--   <tt>EVENT_TYPE</tt> field of your Interactions schema and depends on
--   the types of events you are tracking.
--   
--   <a>$sel:sentAt:Event'</a>, <a>event_sentAt</a> - The timestamp (in
--   Unix time) on the client side when the event occurred.
newEvent :: Text -> UTCTime -> Event

-- | The ID of the recommendation.
event_recommendationId :: Lens' Event (Maybe Text)

-- | The event value that corresponds to the <tt>EVENT_VALUE</tt> field of
--   the Interactions schema.
event_eventValue :: Lens' Event (Maybe Double)

-- | The item ID key that corresponds to the <tt>ITEM_ID</tt> field of the
--   Interactions schema.
event_itemId :: Lens' Event (Maybe Text)

-- | A list of item IDs that represents the sequence of items you have
--   shown the user. For example, <tt>["itemId1", "itemId2",
--   "itemId3"]</tt>.
event_impression :: Lens' Event (Maybe (NonEmpty Text))

-- | An ID associated with the event. If an event ID is not provided,
--   Amazon Personalize generates a unique ID for the event. An event ID is
--   not used as an input to the model. Amazon Personalize uses the event
--   ID to distinquish unique events. Any subsequent events after the first
--   with the same event ID are not used in model training.
event_eventId :: Lens' Event (Maybe Text)

-- | A string map of event-specific data that you might choose to record.
--   For example, if a user rates a movie on your site, other than movie ID
--   (<tt>itemId</tt>) and rating (<tt>eventValue</tt>) , you might also
--   send the number of movie ratings made by the user.
--   
--   Each item in the map consists of a key-value pair. For example,
--   
--   <pre>
--   {"numberOfRatings": "12"}
--   </pre>
--   
--   The keys use camel case names that match the fields in the
--   Interactions schema. In the above example, the
--   <tt>numberOfRatings</tt> would match the 'NUMBER_OF_RATINGS' field
--   defined in the Interactions schema.
event_properties :: Lens' Event (Maybe Text)

-- | The type of event, such as click or download. This property
--   corresponds to the <tt>EVENT_TYPE</tt> field of your Interactions
--   schema and depends on the types of events you are tracking.
event_eventType :: Lens' Event Text

-- | The timestamp (in Unix time) on the client side when the event
--   occurred.
event_sentAt :: Lens' Event UTCTime

-- | Represents item metadata added to an Items dataset using the
--   <tt>PutItems</tt> API. For more information see <a>Importing Items
--   Incrementally</a>.
--   
--   <i>See:</i> <a>newItem</a> smart constructor.
data Item
Item' :: Maybe Text -> Text -> Item

-- | A string map of item-specific metadata. Each element in the map
--   consists of a key-value pair. For example, <tt>{"numberOfRatings":
--   "12"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Items dataset. In the previous example, the
--   <tt>numberOfRatings</tt> matches the 'NUMBER_OF_RATINGS' field defined
--   in the Items schema. For categorical string data, to include multiple
--   categories for a single item, separate each category with a pipe
--   separator (<tt>|</tt>). For example, <tt>\"Horror|Action\"</tt>.
[$sel:properties:Item'] :: Item -> Maybe Text

-- | The ID associated with the item.
[$sel:itemId:Item'] :: Item -> Text

-- | Create a value of <a>Item</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:properties:Item'</a>, <a>item_properties</a> - A string map of
--   item-specific metadata. Each element in the map consists of a
--   key-value pair. For example, <tt>{"numberOfRatings": "12"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Items dataset. In the previous example, the
--   <tt>numberOfRatings</tt> matches the 'NUMBER_OF_RATINGS' field defined
--   in the Items schema. For categorical string data, to include multiple
--   categories for a single item, separate each category with a pipe
--   separator (<tt>|</tt>). For example, <tt>\"Horror|Action\"</tt>.
--   
--   <a>$sel:itemId:Item'</a>, <a>item_itemId</a> - The ID associated with
--   the item.
newItem :: Text -> Item

-- | A string map of item-specific metadata. Each element in the map
--   consists of a key-value pair. For example, <tt>{"numberOfRatings":
--   "12"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Items dataset. In the previous example, the
--   <tt>numberOfRatings</tt> matches the 'NUMBER_OF_RATINGS' field defined
--   in the Items schema. For categorical string data, to include multiple
--   categories for a single item, separate each category with a pipe
--   separator (<tt>|</tt>). For example, <tt>\"Horror|Action\"</tt>.
item_properties :: Lens' Item (Maybe Text)

-- | The ID associated with the item.
item_itemId :: Lens' Item Text

-- | Represents user metadata added to a Users dataset using the
--   <tt>PutUsers</tt> API. For more information see <a>Importing Users
--   Incrementally</a>.
--   
--   <i>See:</i> <a>newUser</a> smart constructor.
data User
User' :: Maybe Text -> Text -> User

-- | A string map of user-specific metadata. Each element in the map
--   consists of a key-value pair. For example,
--   <tt>{"numberOfVideosWatched": "45"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Users dataset. In the previous example, the
--   <tt>numberOfVideosWatched</tt> matches the 'NUMBER_OF_VIDEOS_WATCHED'
--   field defined in the Users schema. For categorical string data, to
--   include multiple categories for a single user, separate each category
--   with a pipe separator (<tt>|</tt>). For example, <tt>\"Member|Frequent
--   shopper\"</tt>.
[$sel:properties:User'] :: User -> Maybe Text

-- | The ID associated with the user.
[$sel:userId:User'] :: User -> Text

-- | Create a value of <a>User</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:properties:User'</a>, <a>user_properties</a> - A string map of
--   user-specific metadata. Each element in the map consists of a
--   key-value pair. For example, <tt>{"numberOfVideosWatched": "45"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Users dataset. In the previous example, the
--   <tt>numberOfVideosWatched</tt> matches the 'NUMBER_OF_VIDEOS_WATCHED'
--   field defined in the Users schema. For categorical string data, to
--   include multiple categories for a single user, separate each category
--   with a pipe separator (<tt>|</tt>). For example, <tt>\"Member|Frequent
--   shopper\"</tt>.
--   
--   <a>$sel:userId:User'</a>, <a>user_userId</a> - The ID associated with
--   the user.
newUser :: Text -> User

-- | A string map of user-specific metadata. Each element in the map
--   consists of a key-value pair. For example,
--   <tt>{"numberOfVideosWatched": "45"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Users dataset. In the previous example, the
--   <tt>numberOfVideosWatched</tt> matches the 'NUMBER_OF_VIDEOS_WATCHED'
--   field defined in the Users schema. For categorical string data, to
--   include multiple categories for a single user, separate each category
--   with a pipe separator (<tt>|</tt>). For example, <tt>\"Member|Frequent
--   shopper\"</tt>.
user_properties :: Lens' User (Maybe Text)

-- | The ID associated with the user.
user_userId :: Lens' User Text


-- | Adds one or more users to a Users dataset. For more information see
--   <a>Importing Users Incrementally</a>.
module Network.AWS.PersonalizeEvents.PutUsers

-- | <i>See:</i> <a>newPutUsers</a> smart constructor.
data PutUsers
PutUsers' :: Text -> NonEmpty User -> PutUsers

-- | The Amazon Resource Name (ARN) of the Users dataset you are adding the
--   user or users to.
[$sel:datasetArn:PutUsers'] :: PutUsers -> Text

-- | A list of user data.
[$sel:users:PutUsers'] :: PutUsers -> NonEmpty User

-- | Create a value of <a>PutUsers</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:datasetArn:PutUsers'</a>, <a>putUsers_datasetArn</a> - The
--   Amazon Resource Name (ARN) of the Users dataset you are adding the
--   user or users to.
--   
--   <a>$sel:users:PutUsers'</a>, <a>putUsers_users</a> - A list of user
--   data.
newPutUsers :: Text -> NonEmpty User -> PutUsers

-- | The Amazon Resource Name (ARN) of the Users dataset you are adding the
--   user or users to.
putUsers_datasetArn :: Lens' PutUsers Text

-- | A list of user data.
putUsers_users :: Lens' PutUsers (NonEmpty User)

-- | <i>See:</i> <a>newPutUsersResponse</a> smart constructor.
data PutUsersResponse
PutUsersResponse' :: PutUsersResponse

-- | Create a value of <a>PutUsersResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newPutUsersResponse :: PutUsersResponse
instance GHC.Generics.Generic Network.AWS.PersonalizeEvents.PutUsers.PutUsers
instance GHC.Show.Show Network.AWS.PersonalizeEvents.PutUsers.PutUsers
instance GHC.Read.Read Network.AWS.PersonalizeEvents.PutUsers.PutUsers
instance GHC.Classes.Eq Network.AWS.PersonalizeEvents.PutUsers.PutUsers
instance GHC.Generics.Generic Network.AWS.PersonalizeEvents.PutUsers.PutUsersResponse
instance GHC.Show.Show Network.AWS.PersonalizeEvents.PutUsers.PutUsersResponse
instance GHC.Read.Read Network.AWS.PersonalizeEvents.PutUsers.PutUsersResponse
instance GHC.Classes.Eq Network.AWS.PersonalizeEvents.PutUsers.PutUsersResponse
instance Network.AWS.Types.AWSRequest Network.AWS.PersonalizeEvents.PutUsers.PutUsers
instance Control.DeepSeq.NFData Network.AWS.PersonalizeEvents.PutUsers.PutUsersResponse
instance Data.Hashable.Class.Hashable Network.AWS.PersonalizeEvents.PutUsers.PutUsers
instance Control.DeepSeq.NFData Network.AWS.PersonalizeEvents.PutUsers.PutUsers
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.PersonalizeEvents.PutUsers.PutUsers
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.PersonalizeEvents.PutUsers.PutUsers
instance Network.AWS.Data.Path.ToPath Network.AWS.PersonalizeEvents.PutUsers.PutUsers
instance Network.AWS.Data.Query.ToQuery Network.AWS.PersonalizeEvents.PutUsers.PutUsers


-- | Adds one or more items to an Items dataset. For more information see
--   <a>Importing Items Incrementally</a>.
module Network.AWS.PersonalizeEvents.PutItems

-- | <i>See:</i> <a>newPutItems</a> smart constructor.
data PutItems
PutItems' :: Text -> NonEmpty Item -> PutItems

-- | The Amazon Resource Name (ARN) of the Items dataset you are adding the
--   item or items to.
[$sel:datasetArn:PutItems'] :: PutItems -> Text

-- | A list of item data.
[$sel:items:PutItems'] :: PutItems -> NonEmpty Item

-- | Create a value of <a>PutItems</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:datasetArn:PutItems'</a>, <a>putItems_datasetArn</a> - The
--   Amazon Resource Name (ARN) of the Items dataset you are adding the
--   item or items to.
--   
--   <a>$sel:items:PutItems'</a>, <a>putItems_items</a> - A list of item
--   data.
newPutItems :: Text -> NonEmpty Item -> PutItems

-- | The Amazon Resource Name (ARN) of the Items dataset you are adding the
--   item or items to.
putItems_datasetArn :: Lens' PutItems Text

-- | A list of item data.
putItems_items :: Lens' PutItems (NonEmpty Item)

-- | <i>See:</i> <a>newPutItemsResponse</a> smart constructor.
data PutItemsResponse
PutItemsResponse' :: PutItemsResponse

-- | Create a value of <a>PutItemsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newPutItemsResponse :: PutItemsResponse
instance GHC.Generics.Generic Network.AWS.PersonalizeEvents.PutItems.PutItems
instance GHC.Show.Show Network.AWS.PersonalizeEvents.PutItems.PutItems
instance GHC.Read.Read Network.AWS.PersonalizeEvents.PutItems.PutItems
instance GHC.Classes.Eq Network.AWS.PersonalizeEvents.PutItems.PutItems
instance GHC.Generics.Generic Network.AWS.PersonalizeEvents.PutItems.PutItemsResponse
instance GHC.Show.Show Network.AWS.PersonalizeEvents.PutItems.PutItemsResponse
instance GHC.Read.Read Network.AWS.PersonalizeEvents.PutItems.PutItemsResponse
instance GHC.Classes.Eq Network.AWS.PersonalizeEvents.PutItems.PutItemsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.PersonalizeEvents.PutItems.PutItems
instance Control.DeepSeq.NFData Network.AWS.PersonalizeEvents.PutItems.PutItemsResponse
instance Data.Hashable.Class.Hashable Network.AWS.PersonalizeEvents.PutItems.PutItems
instance Control.DeepSeq.NFData Network.AWS.PersonalizeEvents.PutItems.PutItems
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.PersonalizeEvents.PutItems.PutItems
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.PersonalizeEvents.PutItems.PutItems
instance Network.AWS.Data.Path.ToPath Network.AWS.PersonalizeEvents.PutItems.PutItems
instance Network.AWS.Data.Query.ToQuery Network.AWS.PersonalizeEvents.PutItems.PutItems


-- | Records user interaction event data. For more information see
--   <a>Recording Events</a>.
module Network.AWS.PersonalizeEvents.PutEvents

-- | <i>See:</i> <a>newPutEvents</a> smart constructor.
data PutEvents
PutEvents' :: Maybe Text -> Text -> Text -> NonEmpty Event -> PutEvents

-- | The user associated with the event.
[$sel:userId:PutEvents'] :: PutEvents -> Maybe Text

-- | The tracking ID for the event. The ID is generated by a call to the
--   <a>CreateEventTracker</a> API.
[$sel:trackingId:PutEvents'] :: PutEvents -> Text

-- | The session ID associated with the user's visit. Your application
--   generates the sessionId when a user first visits your website or uses
--   your application. Amazon Personalize uses the sessionId to associate
--   events with the user before they log in. For more information, see
--   <a>Recording Events</a>.
[$sel:sessionId:PutEvents'] :: PutEvents -> Text

-- | A list of event data from the session.
[$sel:eventList:PutEvents'] :: PutEvents -> NonEmpty Event

-- | Create a value of <a>PutEvents</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:userId:PutEvents'</a>, <a>putEvents_userId</a> - The user
--   associated with the event.
--   
--   <a>$sel:trackingId:PutEvents'</a>, <a>putEvents_trackingId</a> - The
--   tracking ID for the event. The ID is generated by a call to the
--   <a>CreateEventTracker</a> API.
--   
--   <a>$sel:sessionId:PutEvents'</a>, <a>putEvents_sessionId</a> - The
--   session ID associated with the user's visit. Your application
--   generates the sessionId when a user first visits your website or uses
--   your application. Amazon Personalize uses the sessionId to associate
--   events with the user before they log in. For more information, see
--   <a>Recording Events</a>.
--   
--   <a>$sel:eventList:PutEvents'</a>, <a>putEvents_eventList</a> - A list
--   of event data from the session.
newPutEvents :: Text -> Text -> NonEmpty Event -> PutEvents

-- | The user associated with the event.
putEvents_userId :: Lens' PutEvents (Maybe Text)

-- | The tracking ID for the event. The ID is generated by a call to the
--   <a>CreateEventTracker</a> API.
putEvents_trackingId :: Lens' PutEvents Text

-- | The session ID associated with the user's visit. Your application
--   generates the sessionId when a user first visits your website or uses
--   your application. Amazon Personalize uses the sessionId to associate
--   events with the user before they log in. For more information, see
--   <a>Recording Events</a>.
putEvents_sessionId :: Lens' PutEvents Text

-- | A list of event data from the session.
putEvents_eventList :: Lens' PutEvents (NonEmpty Event)

-- | <i>See:</i> <a>newPutEventsResponse</a> smart constructor.
data PutEventsResponse
PutEventsResponse' :: PutEventsResponse

-- | Create a value of <a>PutEventsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newPutEventsResponse :: PutEventsResponse
instance GHC.Generics.Generic Network.AWS.PersonalizeEvents.PutEvents.PutEvents
instance GHC.Show.Show Network.AWS.PersonalizeEvents.PutEvents.PutEvents
instance GHC.Read.Read Network.AWS.PersonalizeEvents.PutEvents.PutEvents
instance GHC.Classes.Eq Network.AWS.PersonalizeEvents.PutEvents.PutEvents
instance GHC.Generics.Generic Network.AWS.PersonalizeEvents.PutEvents.PutEventsResponse
instance GHC.Show.Show Network.AWS.PersonalizeEvents.PutEvents.PutEventsResponse
instance GHC.Read.Read Network.AWS.PersonalizeEvents.PutEvents.PutEventsResponse
instance GHC.Classes.Eq Network.AWS.PersonalizeEvents.PutEvents.PutEventsResponse
instance Network.AWS.Types.AWSRequest Network.AWS.PersonalizeEvents.PutEvents.PutEvents
instance Control.DeepSeq.NFData Network.AWS.PersonalizeEvents.PutEvents.PutEventsResponse
instance Data.Hashable.Class.Hashable Network.AWS.PersonalizeEvents.PutEvents.PutEvents
instance Control.DeepSeq.NFData Network.AWS.PersonalizeEvents.PutEvents.PutEvents
instance Network.AWS.Data.Headers.ToHeaders Network.AWS.PersonalizeEvents.PutEvents.PutEvents
instance Data.Aeson.Types.ToJSON.ToJSON Network.AWS.PersonalizeEvents.PutEvents.PutEvents
instance Network.AWS.Data.Path.ToPath Network.AWS.PersonalizeEvents.PutEvents.PutEvents
instance Network.AWS.Data.Query.ToQuery Network.AWS.PersonalizeEvents.PutEvents.PutEvents


module Network.AWS.PersonalizeEvents.Lens

-- | The Amazon Resource Name (ARN) of the Users dataset you are adding the
--   user or users to.
putUsers_datasetArn :: Lens' PutUsers Text

-- | A list of user data.
putUsers_users :: Lens' PutUsers (NonEmpty User)

-- | The Amazon Resource Name (ARN) of the Items dataset you are adding the
--   item or items to.
putItems_datasetArn :: Lens' PutItems Text

-- | A list of item data.
putItems_items :: Lens' PutItems (NonEmpty Item)

-- | The user associated with the event.
putEvents_userId :: Lens' PutEvents (Maybe Text)

-- | The tracking ID for the event. The ID is generated by a call to the
--   <a>CreateEventTracker</a> API.
putEvents_trackingId :: Lens' PutEvents Text

-- | The session ID associated with the user's visit. Your application
--   generates the sessionId when a user first visits your website or uses
--   your application. Amazon Personalize uses the sessionId to associate
--   events with the user before they log in. For more information, see
--   <a>Recording Events</a>.
putEvents_sessionId :: Lens' PutEvents Text

-- | A list of event data from the session.
putEvents_eventList :: Lens' PutEvents (NonEmpty Event)

-- | The ID of the recommendation.
event_recommendationId :: Lens' Event (Maybe Text)

-- | The event value that corresponds to the <tt>EVENT_VALUE</tt> field of
--   the Interactions schema.
event_eventValue :: Lens' Event (Maybe Double)

-- | The item ID key that corresponds to the <tt>ITEM_ID</tt> field of the
--   Interactions schema.
event_itemId :: Lens' Event (Maybe Text)

-- | A list of item IDs that represents the sequence of items you have
--   shown the user. For example, <tt>["itemId1", "itemId2",
--   "itemId3"]</tt>.
event_impression :: Lens' Event (Maybe (NonEmpty Text))

-- | An ID associated with the event. If an event ID is not provided,
--   Amazon Personalize generates a unique ID for the event. An event ID is
--   not used as an input to the model. Amazon Personalize uses the event
--   ID to distinquish unique events. Any subsequent events after the first
--   with the same event ID are not used in model training.
event_eventId :: Lens' Event (Maybe Text)

-- | A string map of event-specific data that you might choose to record.
--   For example, if a user rates a movie on your site, other than movie ID
--   (<tt>itemId</tt>) and rating (<tt>eventValue</tt>) , you might also
--   send the number of movie ratings made by the user.
--   
--   Each item in the map consists of a key-value pair. For example,
--   
--   <pre>
--   {"numberOfRatings": "12"}
--   </pre>
--   
--   The keys use camel case names that match the fields in the
--   Interactions schema. In the above example, the
--   <tt>numberOfRatings</tt> would match the 'NUMBER_OF_RATINGS' field
--   defined in the Interactions schema.
event_properties :: Lens' Event (Maybe Text)

-- | The type of event, such as click or download. This property
--   corresponds to the <tt>EVENT_TYPE</tt> field of your Interactions
--   schema and depends on the types of events you are tracking.
event_eventType :: Lens' Event Text

-- | The timestamp (in Unix time) on the client side when the event
--   occurred.
event_sentAt :: Lens' Event UTCTime

-- | A string map of item-specific metadata. Each element in the map
--   consists of a key-value pair. For example, <tt>{"numberOfRatings":
--   "12"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Items dataset. In the previous example, the
--   <tt>numberOfRatings</tt> matches the 'NUMBER_OF_RATINGS' field defined
--   in the Items schema. For categorical string data, to include multiple
--   categories for a single item, separate each category with a pipe
--   separator (<tt>|</tt>). For example, <tt>\"Horror|Action\"</tt>.
item_properties :: Lens' Item (Maybe Text)

-- | The ID associated with the item.
item_itemId :: Lens' Item Text

-- | A string map of user-specific metadata. Each element in the map
--   consists of a key-value pair. For example,
--   <tt>{"numberOfVideosWatched": "45"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Users dataset. In the previous example, the
--   <tt>numberOfVideosWatched</tt> matches the 'NUMBER_OF_VIDEOS_WATCHED'
--   field defined in the Users schema. For categorical string data, to
--   include multiple categories for a single user, separate each category
--   with a pipe separator (<tt>|</tt>). For example, <tt>\"Member|Frequent
--   shopper\"</tt>.
user_properties :: Lens' User (Maybe Text)

-- | The ID associated with the user.
user_userId :: Lens' User Text


module Network.AWS.PersonalizeEvents.Waiters


-- | Derived from API version <tt>2018-03-22</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon Personalize can consume real-time user event data, such as
--   <i>stream</i> or <i>click</i> data, and use it for model training
--   either alone or combined with historical data. For more information
--   see <a>Recording Events</a>.
module Network.AWS.PersonalizeEvents

-- | API version <tt>2018-03-22</tt> of the Amazon Personalize Events SDK
--   configuration.
defaultService :: Service

-- | Provide a valid value for the field or parameter.
_InvalidInputException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Could not find the specified resource.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified resource is in use.
_ResourceInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | <i>See:</i> <a>newPutUsers</a> smart constructor.
data PutUsers
PutUsers' :: Text -> NonEmpty User -> PutUsers

-- | Create a value of <a>PutUsers</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:datasetArn:PutUsers'</a>, <a>putUsers_datasetArn</a> - The
--   Amazon Resource Name (ARN) of the Users dataset you are adding the
--   user or users to.
--   
--   <a>$sel:users:PutUsers'</a>, <a>putUsers_users</a> - A list of user
--   data.
newPutUsers :: Text -> NonEmpty User -> PutUsers

-- | <i>See:</i> <a>newPutUsersResponse</a> smart constructor.
data PutUsersResponse
PutUsersResponse' :: PutUsersResponse

-- | Create a value of <a>PutUsersResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newPutUsersResponse :: PutUsersResponse

-- | <i>See:</i> <a>newPutItems</a> smart constructor.
data PutItems
PutItems' :: Text -> NonEmpty Item -> PutItems

-- | Create a value of <a>PutItems</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:datasetArn:PutItems'</a>, <a>putItems_datasetArn</a> - The
--   Amazon Resource Name (ARN) of the Items dataset you are adding the
--   item or items to.
--   
--   <a>$sel:items:PutItems'</a>, <a>putItems_items</a> - A list of item
--   data.
newPutItems :: Text -> NonEmpty Item -> PutItems

-- | <i>See:</i> <a>newPutItemsResponse</a> smart constructor.
data PutItemsResponse
PutItemsResponse' :: PutItemsResponse

-- | Create a value of <a>PutItemsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newPutItemsResponse :: PutItemsResponse

-- | <i>See:</i> <a>newPutEvents</a> smart constructor.
data PutEvents
PutEvents' :: Maybe Text -> Text -> Text -> NonEmpty Event -> PutEvents

-- | Create a value of <a>PutEvents</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:userId:PutEvents'</a>, <a>putEvents_userId</a> - The user
--   associated with the event.
--   
--   <a>$sel:trackingId:PutEvents'</a>, <a>putEvents_trackingId</a> - The
--   tracking ID for the event. The ID is generated by a call to the
--   <a>CreateEventTracker</a> API.
--   
--   <a>$sel:sessionId:PutEvents'</a>, <a>putEvents_sessionId</a> - The
--   session ID associated with the user's visit. Your application
--   generates the sessionId when a user first visits your website or uses
--   your application. Amazon Personalize uses the sessionId to associate
--   events with the user before they log in. For more information, see
--   <a>Recording Events</a>.
--   
--   <a>$sel:eventList:PutEvents'</a>, <a>putEvents_eventList</a> - A list
--   of event data from the session.
newPutEvents :: Text -> Text -> NonEmpty Event -> PutEvents

-- | <i>See:</i> <a>newPutEventsResponse</a> smart constructor.
data PutEventsResponse
PutEventsResponse' :: PutEventsResponse

-- | Create a value of <a>PutEventsResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
newPutEventsResponse :: PutEventsResponse

-- | Represents user interaction event information sent using the
--   <tt>PutEvents</tt> API.
--   
--   <i>See:</i> <a>newEvent</a> smart constructor.
data Event
Event' :: Maybe Text -> Maybe Double -> Maybe Text -> Maybe (NonEmpty Text) -> Maybe Text -> Maybe Text -> Text -> POSIX -> Event

-- | Create a value of <a>Event</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:recommendationId:Event'</a>, <a>event_recommendationId</a> -
--   The ID of the recommendation.
--   
--   <a>$sel:eventValue:Event'</a>, <a>event_eventValue</a> - The event
--   value that corresponds to the <tt>EVENT_VALUE</tt> field of the
--   Interactions schema.
--   
--   <a>$sel:itemId:Event'</a>, <a>event_itemId</a> - The item ID key that
--   corresponds to the <tt>ITEM_ID</tt> field of the Interactions schema.
--   
--   <a>$sel:impression:Event'</a>, <a>event_impression</a> - A list of
--   item IDs that represents the sequence of items you have shown the
--   user. For example, <tt>["itemId1", "itemId2", "itemId3"]</tt>.
--   
--   <a>$sel:eventId:Event'</a>, <a>event_eventId</a> - An ID associated
--   with the event. If an event ID is not provided, Amazon Personalize
--   generates a unique ID for the event. An event ID is not used as an
--   input to the model. Amazon Personalize uses the event ID to
--   distinquish unique events. Any subsequent events after the first with
--   the same event ID are not used in model training.
--   
--   <a>$sel:properties:Event'</a>, <a>event_properties</a> - A string map
--   of event-specific data that you might choose to record. For example,
--   if a user rates a movie on your site, other than movie ID
--   (<tt>itemId</tt>) and rating (<tt>eventValue</tt>) , you might also
--   send the number of movie ratings made by the user.
--   
--   Each item in the map consists of a key-value pair. For example,
--   
--   <pre>
--   {"numberOfRatings": "12"}
--   </pre>
--   
--   The keys use camel case names that match the fields in the
--   Interactions schema. In the above example, the
--   <tt>numberOfRatings</tt> would match the 'NUMBER_OF_RATINGS' field
--   defined in the Interactions schema.
--   
--   <a>$sel:eventType:Event'</a>, <a>event_eventType</a> - The type of
--   event, such as click or download. This property corresponds to the
--   <tt>EVENT_TYPE</tt> field of your Interactions schema and depends on
--   the types of events you are tracking.
--   
--   <a>$sel:sentAt:Event'</a>, <a>event_sentAt</a> - The timestamp (in
--   Unix time) on the client side when the event occurred.
newEvent :: Text -> UTCTime -> Event

-- | Represents item metadata added to an Items dataset using the
--   <tt>PutItems</tt> API. For more information see <a>Importing Items
--   Incrementally</a>.
--   
--   <i>See:</i> <a>newItem</a> smart constructor.
data Item
Item' :: Maybe Text -> Text -> Item

-- | Create a value of <a>Item</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:properties:Item'</a>, <a>item_properties</a> - A string map of
--   item-specific metadata. Each element in the map consists of a
--   key-value pair. For example, <tt>{"numberOfRatings": "12"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Items dataset. In the previous example, the
--   <tt>numberOfRatings</tt> matches the 'NUMBER_OF_RATINGS' field defined
--   in the Items schema. For categorical string data, to include multiple
--   categories for a single item, separate each category with a pipe
--   separator (<tt>|</tt>). For example, <tt>\"Horror|Action\"</tt>.
--   
--   <a>$sel:itemId:Item'</a>, <a>item_itemId</a> - The ID associated with
--   the item.
newItem :: Text -> Item

-- | Represents user metadata added to a Users dataset using the
--   <tt>PutUsers</tt> API. For more information see <a>Importing Users
--   Incrementally</a>.
--   
--   <i>See:</i> <a>newUser</a> smart constructor.
data User
User' :: Maybe Text -> Text -> User

-- | Create a value of <a>User</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:properties:User'</a>, <a>user_properties</a> - A string map of
--   user-specific metadata. Each element in the map consists of a
--   key-value pair. For example, <tt>{"numberOfVideosWatched": "45"}</tt>.
--   
--   The keys use camel case names that match the fields in the schema for
--   the Users dataset. In the previous example, the
--   <tt>numberOfVideosWatched</tt> matches the 'NUMBER_OF_VIDEOS_WATCHED'
--   field defined in the Users schema. For categorical string data, to
--   include multiple categories for a single user, separate each category
--   with a pipe separator (<tt>|</tt>). For example, <tt>\"Member|Frequent
--   shopper\"</tt>.
--   
--   <a>$sel:userId:User'</a>, <a>user_userId</a> - The ID associated with
--   the user.
newUser :: Text -> User
