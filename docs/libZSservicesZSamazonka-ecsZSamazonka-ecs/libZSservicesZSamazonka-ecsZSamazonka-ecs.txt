-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/

@package libZSservicesZSamazonka-ecsZSamazonka-ecs
@version 2.0


module Amazonka.ECS.Types.AgentUpdateStatus
newtype AgentUpdateStatus
AgentUpdateStatus' :: Text -> AgentUpdateStatus
[fromAgentUpdateStatus] :: AgentUpdateStatus -> Text
pattern AgentUpdateStatus_FAILED :: AgentUpdateStatus
pattern AgentUpdateStatus_PENDING :: AgentUpdateStatus
pattern AgentUpdateStatus_STAGED :: AgentUpdateStatus
pattern AgentUpdateStatus_STAGING :: AgentUpdateStatus
pattern AgentUpdateStatus_UPDATED :: AgentUpdateStatus
pattern AgentUpdateStatus_UPDATING :: AgentUpdateStatus
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Control.DeepSeq.NFData Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance GHC.Generics.Generic Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance GHC.Classes.Ord Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance GHC.Classes.Eq Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance GHC.Read.Read Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus
instance GHC.Show.Show Amazonka.ECS.Types.AgentUpdateStatus.AgentUpdateStatus


module Amazonka.ECS.Types.AssignPublicIp
newtype AssignPublicIp
AssignPublicIp' :: Text -> AssignPublicIp
[fromAssignPublicIp] :: AssignPublicIp -> Text
pattern AssignPublicIp_DISABLED :: AssignPublicIp
pattern AssignPublicIp_ENABLED :: AssignPublicIp
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Control.DeepSeq.NFData Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance GHC.Generics.Generic Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance GHC.Classes.Ord Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance GHC.Classes.Eq Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance GHC.Read.Read Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp
instance GHC.Show.Show Amazonka.ECS.Types.AssignPublicIp.AssignPublicIp


module Amazonka.ECS.Types.AttachmentStateChange

-- | An object representing a change in state for a task attachment.
--   
--   <i>See:</i> <a>newAttachmentStateChange</a> smart constructor.
data AttachmentStateChange
AttachmentStateChange' :: Text -> Text -> AttachmentStateChange

-- | The Amazon Resource Name (ARN) of the attachment.
[$sel:attachmentArn:AttachmentStateChange'] :: AttachmentStateChange -> Text

-- | The status of the attachment.
[$sel:status:AttachmentStateChange'] :: AttachmentStateChange -> Text

-- | Create a value of <a>AttachmentStateChange</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attachmentArn:AttachmentStateChange'</a>,
--   <a>attachmentStateChange_attachmentArn</a> - The Amazon Resource Name
--   (ARN) of the attachment.
--   
--   <a>$sel:status:AttachmentStateChange'</a>,
--   <a>attachmentStateChange_status</a> - The status of the attachment.
newAttachmentStateChange :: Text -> Text -> AttachmentStateChange

-- | The Amazon Resource Name (ARN) of the attachment.
attachmentStateChange_attachmentArn :: Lens' AttachmentStateChange Text

-- | The status of the attachment.
attachmentStateChange_status :: Lens' AttachmentStateChange Text
instance GHC.Generics.Generic Amazonka.ECS.Types.AttachmentStateChange.AttachmentStateChange
instance GHC.Show.Show Amazonka.ECS.Types.AttachmentStateChange.AttachmentStateChange
instance GHC.Read.Read Amazonka.ECS.Types.AttachmentStateChange.AttachmentStateChange
instance GHC.Classes.Eq Amazonka.ECS.Types.AttachmentStateChange.AttachmentStateChange
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.AttachmentStateChange.AttachmentStateChange
instance Control.DeepSeq.NFData Amazonka.ECS.Types.AttachmentStateChange.AttachmentStateChange
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.AttachmentStateChange.AttachmentStateChange


module Amazonka.ECS.Types.AwsVpcConfiguration

-- | An object representing the networking details for a task or service.
--   
--   <i>See:</i> <a>newAwsVpcConfiguration</a> smart constructor.
data AwsVpcConfiguration
AwsVpcConfiguration' :: Maybe [Text] -> Maybe AssignPublicIp -> [Text] -> AwsVpcConfiguration

-- | The IDs of the security groups associated with the task or service. If
--   you do not specify a security group, the default security group for
--   the VPC is used. There is a limit of 5 security groups that can be
--   specified per <tt>AwsVpcConfiguration</tt>.
--   
--   All specified security groups must be from the same VPC.
[$sel:securityGroups:AwsVpcConfiguration'] :: AwsVpcConfiguration -> Maybe [Text]

-- | Whether the task's elastic network interface receives a public IP
--   address. The default value is <tt>DISABLED</tt>.
[$sel:assignPublicIp:AwsVpcConfiguration'] :: AwsVpcConfiguration -> Maybe AssignPublicIp

-- | The IDs of the subnets associated with the task or service. There is a
--   limit of 16 subnets that can be specified per
--   <tt>AwsVpcConfiguration</tt>.
--   
--   All specified subnets must be from the same VPC.
[$sel:subnets:AwsVpcConfiguration'] :: AwsVpcConfiguration -> [Text]

-- | Create a value of <a>AwsVpcConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:securityGroups:AwsVpcConfiguration'</a>,
--   <a>awsVpcConfiguration_securityGroups</a> - The IDs of the security
--   groups associated with the task or service. If you do not specify a
--   security group, the default security group for the VPC is used. There
--   is a limit of 5 security groups that can be specified per
--   <tt>AwsVpcConfiguration</tt>.
--   
--   All specified security groups must be from the same VPC.
--   
--   <a>$sel:assignPublicIp:AwsVpcConfiguration'</a>,
--   <a>awsVpcConfiguration_assignPublicIp</a> - Whether the task's elastic
--   network interface receives a public IP address. The default value is
--   <tt>DISABLED</tt>.
--   
--   <a>$sel:subnets:AwsVpcConfiguration'</a>,
--   <a>awsVpcConfiguration_subnets</a> - The IDs of the subnets associated
--   with the task or service. There is a limit of 16 subnets that can be
--   specified per <tt>AwsVpcConfiguration</tt>.
--   
--   All specified subnets must be from the same VPC.
newAwsVpcConfiguration :: AwsVpcConfiguration

-- | The IDs of the security groups associated with the task or service. If
--   you do not specify a security group, the default security group for
--   the VPC is used. There is a limit of 5 security groups that can be
--   specified per <tt>AwsVpcConfiguration</tt>.
--   
--   All specified security groups must be from the same VPC.
awsVpcConfiguration_securityGroups :: Lens' AwsVpcConfiguration (Maybe [Text])

-- | Whether the task's elastic network interface receives a public IP
--   address. The default value is <tt>DISABLED</tt>.
awsVpcConfiguration_assignPublicIp :: Lens' AwsVpcConfiguration (Maybe AssignPublicIp)

-- | The IDs of the subnets associated with the task or service. There is a
--   limit of 16 subnets that can be specified per
--   <tt>AwsVpcConfiguration</tt>.
--   
--   All specified subnets must be from the same VPC.
awsVpcConfiguration_subnets :: Lens' AwsVpcConfiguration [Text]
instance GHC.Generics.Generic Amazonka.ECS.Types.AwsVpcConfiguration.AwsVpcConfiguration
instance GHC.Show.Show Amazonka.ECS.Types.AwsVpcConfiguration.AwsVpcConfiguration
instance GHC.Read.Read Amazonka.ECS.Types.AwsVpcConfiguration.AwsVpcConfiguration
instance GHC.Classes.Eq Amazonka.ECS.Types.AwsVpcConfiguration.AwsVpcConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.AwsVpcConfiguration.AwsVpcConfiguration
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.AwsVpcConfiguration.AwsVpcConfiguration
instance Control.DeepSeq.NFData Amazonka.ECS.Types.AwsVpcConfiguration.AwsVpcConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.AwsVpcConfiguration.AwsVpcConfiguration


module Amazonka.ECS.Types.CapacityProviderField
newtype CapacityProviderField
CapacityProviderField' :: Text -> CapacityProviderField
[fromCapacityProviderField] :: CapacityProviderField -> Text
pattern CapacityProviderField_TAGS :: CapacityProviderField
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Control.DeepSeq.NFData Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance GHC.Generics.Generic Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance GHC.Classes.Ord Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance GHC.Classes.Eq Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance GHC.Read.Read Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField
instance GHC.Show.Show Amazonka.ECS.Types.CapacityProviderField.CapacityProviderField


module Amazonka.ECS.Types.CapacityProviderStatus
newtype CapacityProviderStatus
CapacityProviderStatus' :: Text -> CapacityProviderStatus
[fromCapacityProviderStatus] :: CapacityProviderStatus -> Text
pattern CapacityProviderStatus_ACTIVE :: CapacityProviderStatus
pattern CapacityProviderStatus_INACTIVE :: CapacityProviderStatus
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Control.DeepSeq.NFData Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance GHC.Generics.Generic Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance GHC.Classes.Ord Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance GHC.Classes.Eq Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance GHC.Read.Read Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus
instance GHC.Show.Show Amazonka.ECS.Types.CapacityProviderStatus.CapacityProviderStatus


module Amazonka.ECS.Types.CapacityProviderStrategyItem

-- | The details of a capacity provider strategy. A capacity provider
--   strategy can be set when using the RunTask or CreateCluster APIs or as
--   the default capacity provider strategy for a cluster with the
--   CreateCluster API.
--   
--   Only capacity providers that are already associated with a cluster and
--   have an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status can be used in a
--   capacity provider strategy. The PutClusterCapacityProviders API is
--   used to associate a capacity provider with a cluster.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New Auto Scaling group
--   capacity providers can be created with the CreateCapacityProvider API
--   operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used in a capacity provider
--   strategy.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
--   
--   <i>See:</i> <a>newCapacityProviderStrategyItem</a> smart constructor.
data CapacityProviderStrategyItem
CapacityProviderStrategyItem' :: Maybe Natural -> Maybe Natural -> Text -> CapacityProviderStrategyItem

-- | The <i>base</i> value designates how many tasks, at a minimum, to run
--   on the specified capacity provider. Only one capacity provider in a
--   capacity provider strategy can have a <i>base</i> defined. If no value
--   is specified, the default value of <tt>0</tt> is used.
[$sel:base:CapacityProviderStrategyItem'] :: CapacityProviderStrategyItem -> Maybe Natural

-- | The <i>weight</i> value designates the relative percentage of the
--   total number of tasks launched that should use the specified capacity
--   provider. The <tt>weight</tt> value is taken into consideration after
--   the <tt>base</tt> value, if defined, is satisfied.
--   
--   If no <tt>weight</tt> value is specified, the default value of
--   <tt>0</tt> is used. When multiple capacity providers are specified
--   within a capacity provider strategy, at least one of the capacity
--   providers must have a weight value greater than zero and any capacity
--   providers with a weight of <tt>0</tt> will not be used to place tasks.
--   If you specify multiple capacity providers in a strategy that all have
--   a weight of <tt>0</tt>, any <tt>RunTask</tt> or <tt>CreateService</tt>
--   actions using the capacity provider strategy will fail.
--   
--   An example scenario for using weights is defining a strategy that
--   contains two capacity providers and both have a weight of <tt>1</tt>,
--   then when the <tt>base</tt> is satisfied, the tasks will be split
--   evenly across the two capacity providers. Using that same logic, if
--   you specify a weight of <tt>1</tt> for <i>capacityProviderA</i> and a
--   weight of <tt>4</tt> for <i>capacityProviderB</i>, then for every one
--   task that is run using <i>capacityProviderA</i>, four tasks would use
--   <i>capacityProviderB</i>.
[$sel:weight:CapacityProviderStrategyItem'] :: CapacityProviderStrategyItem -> Maybe Natural

-- | The short name of the capacity provider.
[$sel:capacityProvider:CapacityProviderStrategyItem'] :: CapacityProviderStrategyItem -> Text

-- | Create a value of <a>CapacityProviderStrategyItem</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:base:CapacityProviderStrategyItem'</a>,
--   <a>capacityProviderStrategyItem_base</a> - The <i>base</i> value
--   designates how many tasks, at a minimum, to run on the specified
--   capacity provider. Only one capacity provider in a capacity provider
--   strategy can have a <i>base</i> defined. If no value is specified, the
--   default value of <tt>0</tt> is used.
--   
--   <a>$sel:weight:CapacityProviderStrategyItem'</a>,
--   <a>capacityProviderStrategyItem_weight</a> - The <i>weight</i> value
--   designates the relative percentage of the total number of tasks
--   launched that should use the specified capacity provider. The
--   <tt>weight</tt> value is taken into consideration after the
--   <tt>base</tt> value, if defined, is satisfied.
--   
--   If no <tt>weight</tt> value is specified, the default value of
--   <tt>0</tt> is used. When multiple capacity providers are specified
--   within a capacity provider strategy, at least one of the capacity
--   providers must have a weight value greater than zero and any capacity
--   providers with a weight of <tt>0</tt> will not be used to place tasks.
--   If you specify multiple capacity providers in a strategy that all have
--   a weight of <tt>0</tt>, any <tt>RunTask</tt> or <tt>CreateService</tt>
--   actions using the capacity provider strategy will fail.
--   
--   An example scenario for using weights is defining a strategy that
--   contains two capacity providers and both have a weight of <tt>1</tt>,
--   then when the <tt>base</tt> is satisfied, the tasks will be split
--   evenly across the two capacity providers. Using that same logic, if
--   you specify a weight of <tt>1</tt> for <i>capacityProviderA</i> and a
--   weight of <tt>4</tt> for <i>capacityProviderB</i>, then for every one
--   task that is run using <i>capacityProviderA</i>, four tasks would use
--   <i>capacityProviderB</i>.
--   
--   <a>$sel:capacityProvider:CapacityProviderStrategyItem'</a>,
--   <a>capacityProviderStrategyItem_capacityProvider</a> - The short name
--   of the capacity provider.
newCapacityProviderStrategyItem :: Text -> CapacityProviderStrategyItem

-- | The <i>base</i> value designates how many tasks, at a minimum, to run
--   on the specified capacity provider. Only one capacity provider in a
--   capacity provider strategy can have a <i>base</i> defined. If no value
--   is specified, the default value of <tt>0</tt> is used.
capacityProviderStrategyItem_base :: Lens' CapacityProviderStrategyItem (Maybe Natural)

-- | The <i>weight</i> value designates the relative percentage of the
--   total number of tasks launched that should use the specified capacity
--   provider. The <tt>weight</tt> value is taken into consideration after
--   the <tt>base</tt> value, if defined, is satisfied.
--   
--   If no <tt>weight</tt> value is specified, the default value of
--   <tt>0</tt> is used. When multiple capacity providers are specified
--   within a capacity provider strategy, at least one of the capacity
--   providers must have a weight value greater than zero and any capacity
--   providers with a weight of <tt>0</tt> will not be used to place tasks.
--   If you specify multiple capacity providers in a strategy that all have
--   a weight of <tt>0</tt>, any <tt>RunTask</tt> or <tt>CreateService</tt>
--   actions using the capacity provider strategy will fail.
--   
--   An example scenario for using weights is defining a strategy that
--   contains two capacity providers and both have a weight of <tt>1</tt>,
--   then when the <tt>base</tt> is satisfied, the tasks will be split
--   evenly across the two capacity providers. Using that same logic, if
--   you specify a weight of <tt>1</tt> for <i>capacityProviderA</i> and a
--   weight of <tt>4</tt> for <i>capacityProviderB</i>, then for every one
--   task that is run using <i>capacityProviderA</i>, four tasks would use
--   <i>capacityProviderB</i>.
capacityProviderStrategyItem_weight :: Lens' CapacityProviderStrategyItem (Maybe Natural)

-- | The short name of the capacity provider.
capacityProviderStrategyItem_capacityProvider :: Lens' CapacityProviderStrategyItem Text
instance GHC.Generics.Generic Amazonka.ECS.Types.CapacityProviderStrategyItem.CapacityProviderStrategyItem
instance GHC.Show.Show Amazonka.ECS.Types.CapacityProviderStrategyItem.CapacityProviderStrategyItem
instance GHC.Read.Read Amazonka.ECS.Types.CapacityProviderStrategyItem.CapacityProviderStrategyItem
instance GHC.Classes.Eq Amazonka.ECS.Types.CapacityProviderStrategyItem.CapacityProviderStrategyItem
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.CapacityProviderStrategyItem.CapacityProviderStrategyItem
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.CapacityProviderStrategyItem.CapacityProviderStrategyItem
instance Control.DeepSeq.NFData Amazonka.ECS.Types.CapacityProviderStrategyItem.CapacityProviderStrategyItem
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.CapacityProviderStrategyItem.CapacityProviderStrategyItem


module Amazonka.ECS.Types.CapacityProviderUpdateStatus
newtype CapacityProviderUpdateStatus
CapacityProviderUpdateStatus' :: Text -> CapacityProviderUpdateStatus
[fromCapacityProviderUpdateStatus] :: CapacityProviderUpdateStatus -> Text
pattern CapacityProviderUpdateStatus_DELETE_COMPLETE :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_DELETE_FAILED :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_DELETE_IN_PROGRESS :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_UPDATE_COMPLETE :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_UPDATE_FAILED :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_UPDATE_IN_PROGRESS :: CapacityProviderUpdateStatus
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Control.DeepSeq.NFData Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance GHC.Generics.Generic Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance GHC.Classes.Ord Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance GHC.Classes.Eq Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance GHC.Read.Read Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus
instance GHC.Show.Show Amazonka.ECS.Types.CapacityProviderUpdateStatus.CapacityProviderUpdateStatus


module Amazonka.ECS.Types.ClusterField
newtype ClusterField
ClusterField' :: Text -> ClusterField
[fromClusterField] :: ClusterField -> Text
pattern ClusterField_ATTACHMENTS :: ClusterField
pattern ClusterField_CONFIGURATIONS :: ClusterField
pattern ClusterField_SETTINGS :: ClusterField
pattern ClusterField_STATISTICS :: ClusterField
pattern ClusterField_TAGS :: ClusterField
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ClusterField.ClusterField
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ClusterField.ClusterField
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ClusterField.ClusterField
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ClusterField.ClusterField
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ClusterField.ClusterField
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ClusterField.ClusterField
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ClusterField.ClusterField
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ClusterField.ClusterField
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ClusterField.ClusterField
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ClusterField.ClusterField
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ClusterField.ClusterField
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ClusterField.ClusterField
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ClusterField.ClusterField
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ClusterField.ClusterField
instance GHC.Generics.Generic Amazonka.ECS.Types.ClusterField.ClusterField
instance GHC.Classes.Ord Amazonka.ECS.Types.ClusterField.ClusterField
instance GHC.Classes.Eq Amazonka.ECS.Types.ClusterField.ClusterField
instance GHC.Read.Read Amazonka.ECS.Types.ClusterField.ClusterField
instance GHC.Show.Show Amazonka.ECS.Types.ClusterField.ClusterField


module Amazonka.ECS.Types.ClusterSettingName
newtype ClusterSettingName
ClusterSettingName' :: Text -> ClusterSettingName
[fromClusterSettingName] :: ClusterSettingName -> Text
pattern ClusterSettingName_ContainerInsights :: ClusterSettingName
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance GHC.Generics.Generic Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance GHC.Classes.Ord Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance GHC.Classes.Eq Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance GHC.Read.Read Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName
instance GHC.Show.Show Amazonka.ECS.Types.ClusterSettingName.ClusterSettingName


module Amazonka.ECS.Types.ClusterSetting

-- | The settings to use when creating a cluster. This parameter is used to
--   enable CloudWatch Container Insights for a cluster.
--   
--   <i>See:</i> <a>newClusterSetting</a> smart constructor.
data ClusterSetting
ClusterSetting' :: Maybe Text -> Maybe ClusterSettingName -> ClusterSetting

-- | The value to set for the cluster setting. The supported values are
--   <tt>enabled</tt> and <tt>disabled</tt>. If <tt>enabled</tt> is
--   specified, CloudWatch Container Insights will be enabled for the
--   cluster, otherwise it will be disabled unless the
--   <tt>containerInsights</tt> account setting is enabled. If a cluster
--   value is specified, it will override the <tt>containerInsights</tt>
--   value set with PutAccountSetting or PutAccountSettingDefault.
[$sel:value:ClusterSetting'] :: ClusterSetting -> Maybe Text

-- | The name of the cluster setting. The only supported value is
--   <tt>containerInsights</tt>.
[$sel:name:ClusterSetting'] :: ClusterSetting -> Maybe ClusterSettingName

-- | Create a value of <a>ClusterSetting</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:ClusterSetting'</a>, <a>clusterSetting_value</a> - The
--   value to set for the cluster setting. The supported values are
--   <tt>enabled</tt> and <tt>disabled</tt>. If <tt>enabled</tt> is
--   specified, CloudWatch Container Insights will be enabled for the
--   cluster, otherwise it will be disabled unless the
--   <tt>containerInsights</tt> account setting is enabled. If a cluster
--   value is specified, it will override the <tt>containerInsights</tt>
--   value set with PutAccountSetting or PutAccountSettingDefault.
--   
--   <a>$sel:name:ClusterSetting'</a>, <a>clusterSetting_name</a> - The
--   name of the cluster setting. The only supported value is
--   <tt>containerInsights</tt>.
newClusterSetting :: ClusterSetting

-- | The value to set for the cluster setting. The supported values are
--   <tt>enabled</tt> and <tt>disabled</tt>. If <tt>enabled</tt> is
--   specified, CloudWatch Container Insights will be enabled for the
--   cluster, otherwise it will be disabled unless the
--   <tt>containerInsights</tt> account setting is enabled. If a cluster
--   value is specified, it will override the <tt>containerInsights</tt>
--   value set with PutAccountSetting or PutAccountSettingDefault.
clusterSetting_value :: Lens' ClusterSetting (Maybe Text)

-- | The name of the cluster setting. The only supported value is
--   <tt>containerInsights</tt>.
clusterSetting_name :: Lens' ClusterSetting (Maybe ClusterSettingName)
instance GHC.Generics.Generic Amazonka.ECS.Types.ClusterSetting.ClusterSetting
instance GHC.Show.Show Amazonka.ECS.Types.ClusterSetting.ClusterSetting
instance GHC.Read.Read Amazonka.ECS.Types.ClusterSetting.ClusterSetting
instance GHC.Classes.Eq Amazonka.ECS.Types.ClusterSetting.ClusterSetting
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ClusterSetting.ClusterSetting
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ClusterSetting.ClusterSetting
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ClusterSetting.ClusterSetting
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ClusterSetting.ClusterSetting


module Amazonka.ECS.Types.Compatibility
newtype Compatibility
Compatibility' :: Text -> Compatibility
[fromCompatibility] :: Compatibility -> Text
pattern Compatibility_EC2 :: Compatibility
pattern Compatibility_EXTERNAL :: Compatibility
pattern Compatibility_FARGATE :: Compatibility
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.Compatibility.Compatibility
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.Compatibility.Compatibility
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.Compatibility.Compatibility
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.Compatibility.Compatibility
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.Compatibility.Compatibility
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Compatibility.Compatibility
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.Compatibility.Compatibility
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.Compatibility.Compatibility
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.Compatibility.Compatibility
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.Compatibility.Compatibility
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.Compatibility.Compatibility
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.Compatibility.Compatibility
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Compatibility.Compatibility
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Compatibility.Compatibility
instance GHC.Generics.Generic Amazonka.ECS.Types.Compatibility.Compatibility
instance GHC.Classes.Ord Amazonka.ECS.Types.Compatibility.Compatibility
instance GHC.Classes.Eq Amazonka.ECS.Types.Compatibility.Compatibility
instance GHC.Read.Read Amazonka.ECS.Types.Compatibility.Compatibility
instance GHC.Show.Show Amazonka.ECS.Types.Compatibility.Compatibility


module Amazonka.ECS.Types.Connectivity
newtype Connectivity
Connectivity' :: Text -> Connectivity
[fromConnectivity] :: Connectivity -> Text
pattern Connectivity_CONNECTED :: Connectivity
pattern Connectivity_DISCONNECTED :: Connectivity
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.Connectivity.Connectivity
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.Connectivity.Connectivity
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.Connectivity.Connectivity
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.Connectivity.Connectivity
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.Connectivity.Connectivity
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Connectivity.Connectivity
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.Connectivity.Connectivity
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.Connectivity.Connectivity
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.Connectivity.Connectivity
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.Connectivity.Connectivity
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.Connectivity.Connectivity
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.Connectivity.Connectivity
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Connectivity.Connectivity
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Connectivity.Connectivity
instance GHC.Generics.Generic Amazonka.ECS.Types.Connectivity.Connectivity
instance GHC.Classes.Ord Amazonka.ECS.Types.Connectivity.Connectivity
instance GHC.Classes.Eq Amazonka.ECS.Types.Connectivity.Connectivity
instance GHC.Read.Read Amazonka.ECS.Types.Connectivity.Connectivity
instance GHC.Show.Show Amazonka.ECS.Types.Connectivity.Connectivity


module Amazonka.ECS.Types.ContainerCondition
newtype ContainerCondition
ContainerCondition' :: Text -> ContainerCondition
[fromContainerCondition] :: ContainerCondition -> Text
pattern ContainerCondition_COMPLETE :: ContainerCondition
pattern ContainerCondition_HEALTHY :: ContainerCondition
pattern ContainerCondition_START :: ContainerCondition
pattern ContainerCondition_SUCCESS :: ContainerCondition
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance GHC.Generics.Generic Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance GHC.Classes.Ord Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance GHC.Classes.Eq Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance GHC.Read.Read Amazonka.ECS.Types.ContainerCondition.ContainerCondition
instance GHC.Show.Show Amazonka.ECS.Types.ContainerCondition.ContainerCondition


module Amazonka.ECS.Types.ContainerDependency

-- | The dependencies defined for container startup and shutdown. A
--   container can contain multiple dependencies. When a dependency is
--   defined for container startup, for container shutdown it is reversed.
--   
--   Your Amazon ECS container instances require at least version 1.26.0 of
--   the container agent to enable container dependencies. However, we
--   recommend using the latest container agent version. For information
--   about checking your agent version and updating to the latest version,
--   see <a>Updating the Amazon ECS Container Agent</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>. If you are using an
--   Amazon ECS-optimized Linux AMI, your instance needs at least version
--   1.26.0-1 of the <tt>ecs-init</tt> package. If your container instances
--   are launched from version <tt>20190301</tt> or later, then they
--   contain the required versions of the container agent and
--   <tt>ecs-init</tt>. For more information, see <a>Amazon ECS-optimized
--   Linux AMI</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   For tasks using the Fargate launch type, this parameter requires that
--   the task or service uses platform version 1.3.0 or later.
--   
--   <i>See:</i> <a>newContainerDependency</a> smart constructor.
data ContainerDependency
ContainerDependency' :: Text -> ContainerCondition -> ContainerDependency

-- | The name of a container.
[$sel:containerName:ContainerDependency'] :: ContainerDependency -> Text

-- | The dependency condition of the container. The following are the
--   available conditions and their behavior:
--   
--   <ul>
--   <li><tt>START</tt> - This condition emulates the behavior of links and
--   volumes today. It validates that a dependent container is started
--   before permitting other containers to start.</li>
--   <li><tt>COMPLETE</tt> - This condition validates that a dependent
--   container runs to completion (exits) before permitting other
--   containers to start. This can be useful for nonessential containers
--   that run a script and then exit. This condition cannot be set on an
--   essential container.</li>
--   <li><tt>SUCCESS</tt> - This condition is the same as
--   <tt>COMPLETE</tt>, but it also requires that the container exits with
--   a <tt>zero</tt> status. This condition cannot be set on an essential
--   container.</li>
--   <li><tt>HEALTHY</tt> - This condition validates that the dependent
--   container passes its Docker health check before permitting other
--   containers to start. This requires that the dependent container has
--   health checks configured. This condition is confirmed only at task
--   startup.</li>
--   </ul>
[$sel:condition:ContainerDependency'] :: ContainerDependency -> ContainerCondition

-- | Create a value of <a>ContainerDependency</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:ContainerDependency'</a>,
--   <a>containerDependency_containerName</a> - The name of a container.
--   
--   <a>$sel:condition:ContainerDependency'</a>,
--   <a>containerDependency_condition</a> - The dependency condition of the
--   container. The following are the available conditions and their
--   behavior:
--   
--   <ul>
--   <li><tt>START</tt> - This condition emulates the behavior of links and
--   volumes today. It validates that a dependent container is started
--   before permitting other containers to start.</li>
--   <li><tt>COMPLETE</tt> - This condition validates that a dependent
--   container runs to completion (exits) before permitting other
--   containers to start. This can be useful for nonessential containers
--   that run a script and then exit. This condition cannot be set on an
--   essential container.</li>
--   <li><tt>SUCCESS</tt> - This condition is the same as
--   <tt>COMPLETE</tt>, but it also requires that the container exits with
--   a <tt>zero</tt> status. This condition cannot be set on an essential
--   container.</li>
--   <li><tt>HEALTHY</tt> - This condition validates that the dependent
--   container passes its Docker health check before permitting other
--   containers to start. This requires that the dependent container has
--   health checks configured. This condition is confirmed only at task
--   startup.</li>
--   </ul>
newContainerDependency :: Text -> ContainerCondition -> ContainerDependency

-- | The name of a container.
containerDependency_containerName :: Lens' ContainerDependency Text

-- | The dependency condition of the container. The following are the
--   available conditions and their behavior:
--   
--   <ul>
--   <li><tt>START</tt> - This condition emulates the behavior of links and
--   volumes today. It validates that a dependent container is started
--   before permitting other containers to start.</li>
--   <li><tt>COMPLETE</tt> - This condition validates that a dependent
--   container runs to completion (exits) before permitting other
--   containers to start. This can be useful for nonessential containers
--   that run a script and then exit. This condition cannot be set on an
--   essential container.</li>
--   <li><tt>SUCCESS</tt> - This condition is the same as
--   <tt>COMPLETE</tt>, but it also requires that the container exits with
--   a <tt>zero</tt> status. This condition cannot be set on an essential
--   container.</li>
--   <li><tt>HEALTHY</tt> - This condition validates that the dependent
--   container passes its Docker health check before permitting other
--   containers to start. This requires that the dependent container has
--   health checks configured. This condition is confirmed only at task
--   startup.</li>
--   </ul>
containerDependency_condition :: Lens' ContainerDependency ContainerCondition
instance GHC.Generics.Generic Amazonka.ECS.Types.ContainerDependency.ContainerDependency
instance GHC.Show.Show Amazonka.ECS.Types.ContainerDependency.ContainerDependency
instance GHC.Read.Read Amazonka.ECS.Types.ContainerDependency.ContainerDependency
instance GHC.Classes.Eq Amazonka.ECS.Types.ContainerDependency.ContainerDependency
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ContainerDependency.ContainerDependency
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ContainerDependency.ContainerDependency
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ContainerDependency.ContainerDependency
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ContainerDependency.ContainerDependency


module Amazonka.ECS.Types.ContainerInstanceField
newtype ContainerInstanceField
ContainerInstanceField' :: Text -> ContainerInstanceField
[fromContainerInstanceField] :: ContainerInstanceField -> Text
pattern ContainerInstanceField_TAGS :: ContainerInstanceField
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance GHC.Generics.Generic Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance GHC.Classes.Ord Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance GHC.Classes.Eq Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance GHC.Read.Read Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField
instance GHC.Show.Show Amazonka.ECS.Types.ContainerInstanceField.ContainerInstanceField


module Amazonka.ECS.Types.ContainerInstanceStatus
newtype ContainerInstanceStatus
ContainerInstanceStatus' :: Text -> ContainerInstanceStatus
[fromContainerInstanceStatus] :: ContainerInstanceStatus -> Text
pattern ContainerInstanceStatus_ACTIVE :: ContainerInstanceStatus
pattern ContainerInstanceStatus_DEREGISTERING :: ContainerInstanceStatus
pattern ContainerInstanceStatus_DRAINING :: ContainerInstanceStatus
pattern ContainerInstanceStatus_REGISTERING :: ContainerInstanceStatus
pattern ContainerInstanceStatus_REGISTRATION_FAILED :: ContainerInstanceStatus
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance GHC.Generics.Generic Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance GHC.Classes.Ord Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance GHC.Classes.Eq Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance GHC.Read.Read Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus
instance GHC.Show.Show Amazonka.ECS.Types.ContainerInstanceStatus.ContainerInstanceStatus


module Amazonka.ECS.Types.DeploymentCircuitBreaker

-- | The deployment circuit breaker can only be used for services using the
--   rolling update (<tt>ECS</tt>) deployment type that are not behind a
--   Classic Load Balancer.
--   
--   The <b>deployment circuit breaker</b> determines whether a service
--   deployment will fail if the service can't reach a steady state. If
--   enabled, a service deployment will transition to a failed state and
--   stop launching new tasks. You can also enable Amazon ECS to roll back
--   your service to the last completed deployment after a failure. For
--   more information, see <a>Rolling update</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newDeploymentCircuitBreaker</a> smart constructor.
data DeploymentCircuitBreaker
DeploymentCircuitBreaker' :: Bool -> Bool -> DeploymentCircuitBreaker

-- | Whether to enable the deployment circuit breaker logic for the
--   service.
[$sel:enable:DeploymentCircuitBreaker'] :: DeploymentCircuitBreaker -> Bool

-- | Whether to enable Amazon ECS to roll back the service if a service
--   deployment fails. If rollback is enabled, when a service deployment
--   fails, the service is rolled back to the last deployment that
--   completed successfully.
[$sel:rollback:DeploymentCircuitBreaker'] :: DeploymentCircuitBreaker -> Bool

-- | Create a value of <a>DeploymentCircuitBreaker</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enable:DeploymentCircuitBreaker'</a>,
--   <a>deploymentCircuitBreaker_enable</a> - Whether to enable the
--   deployment circuit breaker logic for the service.
--   
--   <a>$sel:rollback:DeploymentCircuitBreaker'</a>,
--   <a>deploymentCircuitBreaker_rollback</a> - Whether to enable Amazon
--   ECS to roll back the service if a service deployment fails. If
--   rollback is enabled, when a service deployment fails, the service is
--   rolled back to the last deployment that completed successfully.
newDeploymentCircuitBreaker :: Bool -> Bool -> DeploymentCircuitBreaker

-- | Whether to enable the deployment circuit breaker logic for the
--   service.
deploymentCircuitBreaker_enable :: Lens' DeploymentCircuitBreaker Bool

-- | Whether to enable Amazon ECS to roll back the service if a service
--   deployment fails. If rollback is enabled, when a service deployment
--   fails, the service is rolled back to the last deployment that
--   completed successfully.
deploymentCircuitBreaker_rollback :: Lens' DeploymentCircuitBreaker Bool
instance GHC.Generics.Generic Amazonka.ECS.Types.DeploymentCircuitBreaker.DeploymentCircuitBreaker
instance GHC.Show.Show Amazonka.ECS.Types.DeploymentCircuitBreaker.DeploymentCircuitBreaker
instance GHC.Read.Read Amazonka.ECS.Types.DeploymentCircuitBreaker.DeploymentCircuitBreaker
instance GHC.Classes.Eq Amazonka.ECS.Types.DeploymentCircuitBreaker.DeploymentCircuitBreaker
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.DeploymentCircuitBreaker.DeploymentCircuitBreaker
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.DeploymentCircuitBreaker.DeploymentCircuitBreaker
instance Control.DeepSeq.NFData Amazonka.ECS.Types.DeploymentCircuitBreaker.DeploymentCircuitBreaker
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.DeploymentCircuitBreaker.DeploymentCircuitBreaker


module Amazonka.ECS.Types.DeploymentConfiguration

-- | Optional deployment parameters that control how many tasks run during
--   a deployment and the ordering of stopping and starting tasks.
--   
--   <i>See:</i> <a>newDeploymentConfiguration</a> smart constructor.
data DeploymentConfiguration
DeploymentConfiguration' :: Maybe Int -> Maybe Int -> Maybe DeploymentCircuitBreaker -> DeploymentConfiguration

-- | If a service is using the rolling update (<tt>ECS</tt>) deployment
--   type, the <b>minimum healthy percent</b> represents a lower limit on
--   the number of tasks in a service that must remain in the
--   <tt>RUNNING</tt> state during a deployment, as a percentage of the
--   desired number of tasks (rounded up to the nearest integer), and while
--   any container instances are in the <tt>DRAINING</tt> state if the
--   service contains tasks using the EC2 launch type. This parameter
--   enables you to deploy without using additional cluster capacity. For
--   example, if your service has a desired number of four tasks and a
--   minimum healthy percent of 50%, the scheduler may stop two existing
--   tasks to free up cluster capacity before starting two new tasks. Tasks
--   for services that <i>do not</i> use a load balancer are considered
--   healthy if they are in the <tt>RUNNING</tt> state; tasks for services
--   that <i>do</i> use a load balancer are considered healthy if they are
--   in the <tt>RUNNING</tt> state and they are reported as healthy by the
--   load balancer. The default value for minimum healthy percent is 100%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __minimum healthy percent__ value is set to the default
--   value and is used to define the lower limit on the number of the tasks
--   in the service that remain in the <tt>RUNNING</tt> state while the
--   container instances are in the <tt>DRAINING</tt> state. If the tasks
--   in the service use the Fargate launch type, the minimum healthy
--   percent value is not used, although it is returned when describing
--   your service.
[$sel:minimumHealthyPercent:DeploymentConfiguration'] :: DeploymentConfiguration -> Maybe Int

-- | If a service is using the rolling update (<tt>ECS</tt>) deployment
--   type, the <b>maximum percent</b> parameter represents an upper limit
--   on the number of tasks in a service that are allowed in the
--   <tt>RUNNING</tt> or <tt>PENDING</tt> state during a deployment, as a
--   percentage of the desired number of tasks (rounded down to the nearest
--   integer), and while any container instances are in the
--   <tt>DRAINING</tt> state if the service contains tasks using the EC2
--   launch type. This parameter enables you to define the deployment batch
--   size. For example, if your service has a desired number of four tasks
--   and a maximum percent value of 200%, the scheduler may start four new
--   tasks before stopping the four older tasks (provided that the cluster
--   resources required to do this are available). The default value for
--   maximum percent is 200%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __maximum percent__ value is set to the default value and is
--   used to define the upper limit on the number of the tasks in the
--   service that remain in the <tt>RUNNING</tt> state while the container
--   instances are in the <tt>DRAINING</tt> state. If the tasks in the
--   service use the Fargate launch type, the maximum percent value is not
--   used, although it is returned when describing your service.
[$sel:maximumPercent:DeploymentConfiguration'] :: DeploymentConfiguration -> Maybe Int

-- | The deployment circuit breaker can only be used for services using the
--   rolling update (<tt>ECS</tt>) deployment type.
--   
--   The <b>deployment circuit breaker</b> determines whether a service
--   deployment will fail if the service can't reach a steady state. If
--   deployment circuit breaker is enabled, a service deployment will
--   transition to a failed state and stop launching new tasks. If rollback
--   is enabled, when a service deployment fails, the service is rolled
--   back to the last deployment that completed successfully.
[$sel:deploymentCircuitBreaker:DeploymentConfiguration'] :: DeploymentConfiguration -> Maybe DeploymentCircuitBreaker

-- | Create a value of <a>DeploymentConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:minimumHealthyPercent:DeploymentConfiguration'</a>,
--   <a>deploymentConfiguration_minimumHealthyPercent</a> - If a service is
--   using the rolling update (<tt>ECS</tt>) deployment type, the
--   <b>minimum healthy percent</b> represents a lower limit on the number
--   of tasks in a service that must remain in the <tt>RUNNING</tt> state
--   during a deployment, as a percentage of the desired number of tasks
--   (rounded up to the nearest integer), and while any container instances
--   are in the <tt>DRAINING</tt> state if the service contains tasks using
--   the EC2 launch type. This parameter enables you to deploy without
--   using additional cluster capacity. For example, if your service has a
--   desired number of four tasks and a minimum healthy percent of 50%, the
--   scheduler may stop two existing tasks to free up cluster capacity
--   before starting two new tasks. Tasks for services that <i>do not</i>
--   use a load balancer are considered healthy if they are in the
--   <tt>RUNNING</tt> state; tasks for services that <i>do</i> use a load
--   balancer are considered healthy if they are in the <tt>RUNNING</tt>
--   state and they are reported as healthy by the load balancer. The
--   default value for minimum healthy percent is 100%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __minimum healthy percent__ value is set to the default
--   value and is used to define the lower limit on the number of the tasks
--   in the service that remain in the <tt>RUNNING</tt> state while the
--   container instances are in the <tt>DRAINING</tt> state. If the tasks
--   in the service use the Fargate launch type, the minimum healthy
--   percent value is not used, although it is returned when describing
--   your service.
--   
--   <a>$sel:maximumPercent:DeploymentConfiguration'</a>,
--   <a>deploymentConfiguration_maximumPercent</a> - If a service is using
--   the rolling update (<tt>ECS</tt>) deployment type, the <b>maximum
--   percent</b> parameter represents an upper limit on the number of tasks
--   in a service that are allowed in the <tt>RUNNING</tt> or
--   <tt>PENDING</tt> state during a deployment, as a percentage of the
--   desired number of tasks (rounded down to the nearest integer), and
--   while any container instances are in the <tt>DRAINING</tt> state if
--   the service contains tasks using the EC2 launch type. This parameter
--   enables you to define the deployment batch size. For example, if your
--   service has a desired number of four tasks and a maximum percent value
--   of 200%, the scheduler may start four new tasks before stopping the
--   four older tasks (provided that the cluster resources required to do
--   this are available). The default value for maximum percent is 200%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __maximum percent__ value is set to the default value and is
--   used to define the upper limit on the number of the tasks in the
--   service that remain in the <tt>RUNNING</tt> state while the container
--   instances are in the <tt>DRAINING</tt> state. If the tasks in the
--   service use the Fargate launch type, the maximum percent value is not
--   used, although it is returned when describing your service.
--   
--   <a>$sel:deploymentCircuitBreaker:DeploymentConfiguration'</a>,
--   <a>deploymentConfiguration_deploymentCircuitBreaker</a> - The
--   deployment circuit breaker can only be used for services using the
--   rolling update (<tt>ECS</tt>) deployment type.
--   
--   The <b>deployment circuit breaker</b> determines whether a service
--   deployment will fail if the service can't reach a steady state. If
--   deployment circuit breaker is enabled, a service deployment will
--   transition to a failed state and stop launching new tasks. If rollback
--   is enabled, when a service deployment fails, the service is rolled
--   back to the last deployment that completed successfully.
newDeploymentConfiguration :: DeploymentConfiguration

-- | If a service is using the rolling update (<tt>ECS</tt>) deployment
--   type, the <b>minimum healthy percent</b> represents a lower limit on
--   the number of tasks in a service that must remain in the
--   <tt>RUNNING</tt> state during a deployment, as a percentage of the
--   desired number of tasks (rounded up to the nearest integer), and while
--   any container instances are in the <tt>DRAINING</tt> state if the
--   service contains tasks using the EC2 launch type. This parameter
--   enables you to deploy without using additional cluster capacity. For
--   example, if your service has a desired number of four tasks and a
--   minimum healthy percent of 50%, the scheduler may stop two existing
--   tasks to free up cluster capacity before starting two new tasks. Tasks
--   for services that <i>do not</i> use a load balancer are considered
--   healthy if they are in the <tt>RUNNING</tt> state; tasks for services
--   that <i>do</i> use a load balancer are considered healthy if they are
--   in the <tt>RUNNING</tt> state and they are reported as healthy by the
--   load balancer. The default value for minimum healthy percent is 100%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __minimum healthy percent__ value is set to the default
--   value and is used to define the lower limit on the number of the tasks
--   in the service that remain in the <tt>RUNNING</tt> state while the
--   container instances are in the <tt>DRAINING</tt> state. If the tasks
--   in the service use the Fargate launch type, the minimum healthy
--   percent value is not used, although it is returned when describing
--   your service.
deploymentConfiguration_minimumHealthyPercent :: Lens' DeploymentConfiguration (Maybe Int)

-- | If a service is using the rolling update (<tt>ECS</tt>) deployment
--   type, the <b>maximum percent</b> parameter represents an upper limit
--   on the number of tasks in a service that are allowed in the
--   <tt>RUNNING</tt> or <tt>PENDING</tt> state during a deployment, as a
--   percentage of the desired number of tasks (rounded down to the nearest
--   integer), and while any container instances are in the
--   <tt>DRAINING</tt> state if the service contains tasks using the EC2
--   launch type. This parameter enables you to define the deployment batch
--   size. For example, if your service has a desired number of four tasks
--   and a maximum percent value of 200%, the scheduler may start four new
--   tasks before stopping the four older tasks (provided that the cluster
--   resources required to do this are available). The default value for
--   maximum percent is 200%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __maximum percent__ value is set to the default value and is
--   used to define the upper limit on the number of the tasks in the
--   service that remain in the <tt>RUNNING</tt> state while the container
--   instances are in the <tt>DRAINING</tt> state. If the tasks in the
--   service use the Fargate launch type, the maximum percent value is not
--   used, although it is returned when describing your service.
deploymentConfiguration_maximumPercent :: Lens' DeploymentConfiguration (Maybe Int)

-- | The deployment circuit breaker can only be used for services using the
--   rolling update (<tt>ECS</tt>) deployment type.
--   
--   The <b>deployment circuit breaker</b> determines whether a service
--   deployment will fail if the service can't reach a steady state. If
--   deployment circuit breaker is enabled, a service deployment will
--   transition to a failed state and stop launching new tasks. If rollback
--   is enabled, when a service deployment fails, the service is rolled
--   back to the last deployment that completed successfully.
deploymentConfiguration_deploymentCircuitBreaker :: Lens' DeploymentConfiguration (Maybe DeploymentCircuitBreaker)
instance GHC.Generics.Generic Amazonka.ECS.Types.DeploymentConfiguration.DeploymentConfiguration
instance GHC.Show.Show Amazonka.ECS.Types.DeploymentConfiguration.DeploymentConfiguration
instance GHC.Read.Read Amazonka.ECS.Types.DeploymentConfiguration.DeploymentConfiguration
instance GHC.Classes.Eq Amazonka.ECS.Types.DeploymentConfiguration.DeploymentConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.DeploymentConfiguration.DeploymentConfiguration
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.DeploymentConfiguration.DeploymentConfiguration
instance Control.DeepSeq.NFData Amazonka.ECS.Types.DeploymentConfiguration.DeploymentConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.DeploymentConfiguration.DeploymentConfiguration


module Amazonka.ECS.Types.DeploymentControllerType
newtype DeploymentControllerType
DeploymentControllerType' :: Text -> DeploymentControllerType
[fromDeploymentControllerType] :: DeploymentControllerType -> Text
pattern DeploymentControllerType_CODE_DEPLOY :: DeploymentControllerType
pattern DeploymentControllerType_ECS :: DeploymentControllerType
pattern DeploymentControllerType_EXTERNAL :: DeploymentControllerType
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Control.DeepSeq.NFData Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance GHC.Generics.Generic Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance GHC.Classes.Ord Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance GHC.Classes.Eq Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance GHC.Read.Read Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType
instance GHC.Show.Show Amazonka.ECS.Types.DeploymentControllerType.DeploymentControllerType


module Amazonka.ECS.Types.DeploymentController

-- | The deployment controller to use for the service. For more
--   information, see <a>Amazon ECS Deployment Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newDeploymentController</a> smart constructor.
data DeploymentController
DeploymentController' :: DeploymentControllerType -> DeploymentController

-- | The deployment controller type to use.
--   
--   There are three deployment controller types available:
--   
--   <ul>
--   <li><i>ECS</i> The rolling update (<tt>ECS</tt>) deployment type
--   involves replacing the current running version of the container with
--   the latest version. The number of containers Amazon ECS adds or
--   removes from the service during a rolling update is controlled by
--   adjusting the minimum and maximum number of healthy tasks allowed
--   during a service deployment, as specified in the
--   DeploymentConfiguration.</li>
--   <li><i>CODE_DEPLOY</i> The blue/green (<tt>CODE_DEPLOY</tt>)
--   deployment type uses the blue/green deployment model powered by
--   CodeDeploy, which allows you to verify a new deployment of a service
--   before sending production traffic to it.</li>
--   <li><i>EXTERNAL</i> The external (<tt>EXTERNAL</tt>) deployment type
--   enables you to use any third-party deployment controller for full
--   control over the deployment process for an Amazon ECS service.</li>
--   </ul>
[$sel:type':DeploymentController'] :: DeploymentController -> DeploymentControllerType

-- | Create a value of <a>DeploymentController</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':DeploymentController'</a>,
--   <a>deploymentController_type</a> - The deployment controller type to
--   use.
--   
--   There are three deployment controller types available:
--   
--   <ul>
--   <li><i>ECS</i> The rolling update (<tt>ECS</tt>) deployment type
--   involves replacing the current running version of the container with
--   the latest version. The number of containers Amazon ECS adds or
--   removes from the service during a rolling update is controlled by
--   adjusting the minimum and maximum number of healthy tasks allowed
--   during a service deployment, as specified in the
--   DeploymentConfiguration.</li>
--   <li><i>CODE_DEPLOY</i> The blue/green (<tt>CODE_DEPLOY</tt>)
--   deployment type uses the blue/green deployment model powered by
--   CodeDeploy, which allows you to verify a new deployment of a service
--   before sending production traffic to it.</li>
--   <li><i>EXTERNAL</i> The external (<tt>EXTERNAL</tt>) deployment type
--   enables you to use any third-party deployment controller for full
--   control over the deployment process for an Amazon ECS service.</li>
--   </ul>
newDeploymentController :: DeploymentControllerType -> DeploymentController

-- | The deployment controller type to use.
--   
--   There are three deployment controller types available:
--   
--   <ul>
--   <li><i>ECS</i> The rolling update (<tt>ECS</tt>) deployment type
--   involves replacing the current running version of the container with
--   the latest version. The number of containers Amazon ECS adds or
--   removes from the service during a rolling update is controlled by
--   adjusting the minimum and maximum number of healthy tasks allowed
--   during a service deployment, as specified in the
--   DeploymentConfiguration.</li>
--   <li><i>CODE_DEPLOY</i> The blue/green (<tt>CODE_DEPLOY</tt>)
--   deployment type uses the blue/green deployment model powered by
--   CodeDeploy, which allows you to verify a new deployment of a service
--   before sending production traffic to it.</li>
--   <li><i>EXTERNAL</i> The external (<tt>EXTERNAL</tt>) deployment type
--   enables you to use any third-party deployment controller for full
--   control over the deployment process for an Amazon ECS service.</li>
--   </ul>
deploymentController_type :: Lens' DeploymentController DeploymentControllerType
instance GHC.Generics.Generic Amazonka.ECS.Types.DeploymentController.DeploymentController
instance GHC.Show.Show Amazonka.ECS.Types.DeploymentController.DeploymentController
instance GHC.Read.Read Amazonka.ECS.Types.DeploymentController.DeploymentController
instance GHC.Classes.Eq Amazonka.ECS.Types.DeploymentController.DeploymentController
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.DeploymentController.DeploymentController
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.DeploymentController.DeploymentController
instance Control.DeepSeq.NFData Amazonka.ECS.Types.DeploymentController.DeploymentController
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.DeploymentController.DeploymentController


module Amazonka.ECS.Types.DeploymentRolloutState
newtype DeploymentRolloutState
DeploymentRolloutState' :: Text -> DeploymentRolloutState
[fromDeploymentRolloutState] :: DeploymentRolloutState -> Text
pattern DeploymentRolloutState_COMPLETED :: DeploymentRolloutState
pattern DeploymentRolloutState_FAILED :: DeploymentRolloutState
pattern DeploymentRolloutState_IN_PROGRESS :: DeploymentRolloutState
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Control.DeepSeq.NFData Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance GHC.Generics.Generic Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance GHC.Classes.Ord Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance GHC.Classes.Eq Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance GHC.Read.Read Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState
instance GHC.Show.Show Amazonka.ECS.Types.DeploymentRolloutState.DeploymentRolloutState


module Amazonka.ECS.Types.DesiredStatus
newtype DesiredStatus
DesiredStatus' :: Text -> DesiredStatus
[fromDesiredStatus] :: DesiredStatus -> Text
pattern DesiredStatus_PENDING :: DesiredStatus
pattern DesiredStatus_RUNNING :: DesiredStatus
pattern DesiredStatus_STOPPED :: DesiredStatus
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Control.DeepSeq.NFData Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance GHC.Generics.Generic Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance GHC.Classes.Ord Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance GHC.Classes.Eq Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance GHC.Read.Read Amazonka.ECS.Types.DesiredStatus.DesiredStatus
instance GHC.Show.Show Amazonka.ECS.Types.DesiredStatus.DesiredStatus


module Amazonka.ECS.Types.DeviceCgroupPermission
newtype DeviceCgroupPermission
DeviceCgroupPermission' :: Text -> DeviceCgroupPermission
[fromDeviceCgroupPermission] :: DeviceCgroupPermission -> Text
pattern DeviceCgroupPermission_Mknod :: DeviceCgroupPermission
pattern DeviceCgroupPermission_Read :: DeviceCgroupPermission
pattern DeviceCgroupPermission_Write :: DeviceCgroupPermission
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Control.DeepSeq.NFData Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance GHC.Generics.Generic Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance GHC.Classes.Ord Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance GHC.Classes.Eq Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance GHC.Read.Read Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission
instance GHC.Show.Show Amazonka.ECS.Types.DeviceCgroupPermission.DeviceCgroupPermission


module Amazonka.ECS.Types.Device

-- | An object representing a container instance host device.
--   
--   <i>See:</i> <a>newDevice</a> smart constructor.
data Device
Device' :: Maybe Text -> Maybe [DeviceCgroupPermission] -> Text -> Device

-- | The path inside the container at which to expose the host device.
[$sel:containerPath:Device'] :: Device -> Maybe Text

-- | The explicit permissions to provide to the container for the device.
--   By default, the container has permissions for <tt>read</tt>,
--   <tt>write</tt>, and <tt>mknod</tt> for the device.
[$sel:permissions:Device'] :: Device -> Maybe [DeviceCgroupPermission]

-- | The path for the device on the host container instance.
[$sel:hostPath:Device'] :: Device -> Text

-- | Create a value of <a>Device</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerPath:Device'</a>, <a>device_containerPath</a> - The
--   path inside the container at which to expose the host device.
--   
--   <a>$sel:permissions:Device'</a>, <a>device_permissions</a> - The
--   explicit permissions to provide to the container for the device. By
--   default, the container has permissions for <tt>read</tt>,
--   <tt>write</tt>, and <tt>mknod</tt> for the device.
--   
--   <a>$sel:hostPath:Device'</a>, <a>device_hostPath</a> - The path for
--   the device on the host container instance.
newDevice :: Text -> Device

-- | The path inside the container at which to expose the host device.
device_containerPath :: Lens' Device (Maybe Text)

-- | The explicit permissions to provide to the container for the device.
--   By default, the container has permissions for <tt>read</tt>,
--   <tt>write</tt>, and <tt>mknod</tt> for the device.
device_permissions :: Lens' Device (Maybe [DeviceCgroupPermission])

-- | The path for the device on the host container instance.
device_hostPath :: Lens' Device Text
instance GHC.Generics.Generic Amazonka.ECS.Types.Device.Device
instance GHC.Show.Show Amazonka.ECS.Types.Device.Device
instance GHC.Read.Read Amazonka.ECS.Types.Device.Device
instance GHC.Classes.Eq Amazonka.ECS.Types.Device.Device
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Device.Device
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Device.Device
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Device.Device
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.Device.Device


module Amazonka.ECS.Types.EFSAuthorizationConfigIAM
newtype EFSAuthorizationConfigIAM
EFSAuthorizationConfigIAM' :: Text -> EFSAuthorizationConfigIAM
[fromEFSAuthorizationConfigIAM] :: EFSAuthorizationConfigIAM -> Text
pattern EFSAuthorizationConfigIAM_DISABLED :: EFSAuthorizationConfigIAM
pattern EFSAuthorizationConfigIAM_ENABLED :: EFSAuthorizationConfigIAM
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Control.DeepSeq.NFData Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance GHC.Generics.Generic Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance GHC.Classes.Ord Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance GHC.Classes.Eq Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance GHC.Read.Read Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM
instance GHC.Show.Show Amazonka.ECS.Types.EFSAuthorizationConfigIAM.EFSAuthorizationConfigIAM


module Amazonka.ECS.Types.EFSAuthorizationConfig

-- | The authorization configuration details for the Amazon EFS file
--   system.
--   
--   <i>See:</i> <a>newEFSAuthorizationConfig</a> smart constructor.
data EFSAuthorizationConfig
EFSAuthorizationConfig' :: Maybe Text -> Maybe EFSAuthorizationConfigIAM -> EFSAuthorizationConfig

-- | The Amazon EFS access point ID to use. If an access point is
--   specified, the root directory value specified in the
--   <tt>EFSVolumeConfiguration</tt> must either be omitted or set to
--   <tt>/</tt> which will enforce the path set on the EFS access point. If
--   an access point is used, transit encryption must be enabled in the
--   <tt>EFSVolumeConfiguration</tt>. For more information, see <a>Working
--   with Amazon EFS Access Points</a> in the <i>Amazon Elastic File System
--   User Guide</i>.
[$sel:accessPointId:EFSAuthorizationConfig'] :: EFSAuthorizationConfig -> Maybe Text

-- | Whether or not to use the Amazon ECS task IAM role defined in a task
--   definition when mounting the Amazon EFS file system. If enabled,
--   transit encryption must be enabled in the
--   <tt>EFSVolumeConfiguration</tt>. If this parameter is omitted, the
--   default value of <tt>DISABLED</tt> is used. For more information, see
--   <a>Using Amazon EFS Access Points</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
[$sel:iam:EFSAuthorizationConfig'] :: EFSAuthorizationConfig -> Maybe EFSAuthorizationConfigIAM

-- | Create a value of <a>EFSAuthorizationConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:accessPointId:EFSAuthorizationConfig'</a>,
--   <a>eFSAuthorizationConfig_accessPointId</a> - The Amazon EFS access
--   point ID to use. If an access point is specified, the root directory
--   value specified in the <tt>EFSVolumeConfiguration</tt> must either be
--   omitted or set to <tt>/</tt> which will enforce the path set on the
--   EFS access point. If an access point is used, transit encryption must
--   be enabled in the <tt>EFSVolumeConfiguration</tt>. For more
--   information, see <a>Working with Amazon EFS Access Points</a> in the
--   <i>Amazon Elastic File System User Guide</i>.
--   
--   <a>$sel:iam:EFSAuthorizationConfig'</a>,
--   <a>eFSAuthorizationConfig_iam</a> - Whether or not to use the Amazon
--   ECS task IAM role defined in a task definition when mounting the
--   Amazon EFS file system. If enabled, transit encryption must be enabled
--   in the <tt>EFSVolumeConfiguration</tt>. If this parameter is omitted,
--   the default value of <tt>DISABLED</tt> is used. For more information,
--   see <a>Using Amazon EFS Access Points</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
newEFSAuthorizationConfig :: EFSAuthorizationConfig

-- | The Amazon EFS access point ID to use. If an access point is
--   specified, the root directory value specified in the
--   <tt>EFSVolumeConfiguration</tt> must either be omitted or set to
--   <tt>/</tt> which will enforce the path set on the EFS access point. If
--   an access point is used, transit encryption must be enabled in the
--   <tt>EFSVolumeConfiguration</tt>. For more information, see <a>Working
--   with Amazon EFS Access Points</a> in the <i>Amazon Elastic File System
--   User Guide</i>.
eFSAuthorizationConfig_accessPointId :: Lens' EFSAuthorizationConfig (Maybe Text)

-- | Whether or not to use the Amazon ECS task IAM role defined in a task
--   definition when mounting the Amazon EFS file system. If enabled,
--   transit encryption must be enabled in the
--   <tt>EFSVolumeConfiguration</tt>. If this parameter is omitted, the
--   default value of <tt>DISABLED</tt> is used. For more information, see
--   <a>Using Amazon EFS Access Points</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
eFSAuthorizationConfig_iam :: Lens' EFSAuthorizationConfig (Maybe EFSAuthorizationConfigIAM)
instance GHC.Generics.Generic Amazonka.ECS.Types.EFSAuthorizationConfig.EFSAuthorizationConfig
instance GHC.Show.Show Amazonka.ECS.Types.EFSAuthorizationConfig.EFSAuthorizationConfig
instance GHC.Read.Read Amazonka.ECS.Types.EFSAuthorizationConfig.EFSAuthorizationConfig
instance GHC.Classes.Eq Amazonka.ECS.Types.EFSAuthorizationConfig.EFSAuthorizationConfig
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.EFSAuthorizationConfig.EFSAuthorizationConfig
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.EFSAuthorizationConfig.EFSAuthorizationConfig
instance Control.DeepSeq.NFData Amazonka.ECS.Types.EFSAuthorizationConfig.EFSAuthorizationConfig
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.EFSAuthorizationConfig.EFSAuthorizationConfig


module Amazonka.ECS.Types.EFSTransitEncryption
newtype EFSTransitEncryption
EFSTransitEncryption' :: Text -> EFSTransitEncryption
[fromEFSTransitEncryption] :: EFSTransitEncryption -> Text
pattern EFSTransitEncryption_DISABLED :: EFSTransitEncryption
pattern EFSTransitEncryption_ENABLED :: EFSTransitEncryption
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Control.DeepSeq.NFData Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance GHC.Generics.Generic Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance GHC.Classes.Ord Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance GHC.Classes.Eq Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance GHC.Read.Read Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption
instance GHC.Show.Show Amazonka.ECS.Types.EFSTransitEncryption.EFSTransitEncryption


module Amazonka.ECS.Types.EFSVolumeConfiguration

-- | This parameter is specified when you are using an Amazon Elastic File
--   System file system for task storage. For more information, see
--   <a>Amazon EFS Volumes</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newEFSVolumeConfiguration</a> smart constructor.
data EFSVolumeConfiguration
EFSVolumeConfiguration' :: Maybe Text -> Maybe EFSTransitEncryption -> Maybe EFSAuthorizationConfig -> Maybe Int -> Text -> EFSVolumeConfiguration

-- | The directory within the Amazon EFS file system to mount as the root
--   directory inside the host. If this parameter is omitted, the root of
--   the Amazon EFS volume will be used. Specifying <tt>/</tt> will have
--   the same effect as omitting this parameter.
--   
--   If an EFS access point is specified in the
--   <tt>authorizationConfig</tt>, the root directory parameter must either
--   be omitted or set to <tt>/</tt> which will enforce the path set on the
--   EFS access point.
[$sel:rootDirectory:EFSVolumeConfiguration'] :: EFSVolumeConfiguration -> Maybe Text

-- | Whether or not to enable encryption for Amazon EFS data in transit
--   between the Amazon ECS host and the Amazon EFS server. Transit
--   encryption must be enabled if Amazon EFS IAM authorization is used. If
--   this parameter is omitted, the default value of <tt>DISABLED</tt> is
--   used. For more information, see <a>Encrypting Data in Transit</a> in
--   the <i>Amazon Elastic File System User Guide</i>.
[$sel:transitEncryption:EFSVolumeConfiguration'] :: EFSVolumeConfiguration -> Maybe EFSTransitEncryption

-- | The authorization configuration details for the Amazon EFS file
--   system.
[$sel:authorizationConfig:EFSVolumeConfiguration'] :: EFSVolumeConfiguration -> Maybe EFSAuthorizationConfig

-- | The port to use when sending encrypted data between the Amazon ECS
--   host and the Amazon EFS server. If you do not specify a transit
--   encryption port, it will use the port selection strategy that the
--   Amazon EFS mount helper uses. For more information, see <a>EFS Mount
--   Helper</a> in the <i>Amazon Elastic File System User Guide</i>.
[$sel:transitEncryptionPort:EFSVolumeConfiguration'] :: EFSVolumeConfiguration -> Maybe Int

-- | The Amazon EFS file system ID to use.
[$sel:fileSystemId:EFSVolumeConfiguration'] :: EFSVolumeConfiguration -> Text

-- | Create a value of <a>EFSVolumeConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rootDirectory:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_rootDirectory</a> - The directory within the
--   Amazon EFS file system to mount as the root directory inside the host.
--   If this parameter is omitted, the root of the Amazon EFS volume will
--   be used. Specifying <tt>/</tt> will have the same effect as omitting
--   this parameter.
--   
--   If an EFS access point is specified in the
--   <tt>authorizationConfig</tt>, the root directory parameter must either
--   be omitted or set to <tt>/</tt> which will enforce the path set on the
--   EFS access point.
--   
--   <a>$sel:transitEncryption:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_transitEncryption</a> - Whether or not to
--   enable encryption for Amazon EFS data in transit between the Amazon
--   ECS host and the Amazon EFS server. Transit encryption must be enabled
--   if Amazon EFS IAM authorization is used. If this parameter is omitted,
--   the default value of <tt>DISABLED</tt> is used. For more information,
--   see <a>Encrypting Data in Transit</a> in the <i>Amazon Elastic File
--   System User Guide</i>.
--   
--   <a>$sel:authorizationConfig:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_authorizationConfig</a> - The authorization
--   configuration details for the Amazon EFS file system.
--   
--   <a>$sel:transitEncryptionPort:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_transitEncryptionPort</a> - The port to use
--   when sending encrypted data between the Amazon ECS host and the Amazon
--   EFS server. If you do not specify a transit encryption port, it will
--   use the port selection strategy that the Amazon EFS mount helper uses.
--   For more information, see <a>EFS Mount Helper</a> in the <i>Amazon
--   Elastic File System User Guide</i>.
--   
--   <a>$sel:fileSystemId:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_fileSystemId</a> - The Amazon EFS file
--   system ID to use.
newEFSVolumeConfiguration :: Text -> EFSVolumeConfiguration

-- | The directory within the Amazon EFS file system to mount as the root
--   directory inside the host. If this parameter is omitted, the root of
--   the Amazon EFS volume will be used. Specifying <tt>/</tt> will have
--   the same effect as omitting this parameter.
--   
--   If an EFS access point is specified in the
--   <tt>authorizationConfig</tt>, the root directory parameter must either
--   be omitted or set to <tt>/</tt> which will enforce the path set on the
--   EFS access point.
eFSVolumeConfiguration_rootDirectory :: Lens' EFSVolumeConfiguration (Maybe Text)

-- | Whether or not to enable encryption for Amazon EFS data in transit
--   between the Amazon ECS host and the Amazon EFS server. Transit
--   encryption must be enabled if Amazon EFS IAM authorization is used. If
--   this parameter is omitted, the default value of <tt>DISABLED</tt> is
--   used. For more information, see <a>Encrypting Data in Transit</a> in
--   the <i>Amazon Elastic File System User Guide</i>.
eFSVolumeConfiguration_transitEncryption :: Lens' EFSVolumeConfiguration (Maybe EFSTransitEncryption)

-- | The authorization configuration details for the Amazon EFS file
--   system.
eFSVolumeConfiguration_authorizationConfig :: Lens' EFSVolumeConfiguration (Maybe EFSAuthorizationConfig)

-- | The port to use when sending encrypted data between the Amazon ECS
--   host and the Amazon EFS server. If you do not specify a transit
--   encryption port, it will use the port selection strategy that the
--   Amazon EFS mount helper uses. For more information, see <a>EFS Mount
--   Helper</a> in the <i>Amazon Elastic File System User Guide</i>.
eFSVolumeConfiguration_transitEncryptionPort :: Lens' EFSVolumeConfiguration (Maybe Int)

-- | The Amazon EFS file system ID to use.
eFSVolumeConfiguration_fileSystemId :: Lens' EFSVolumeConfiguration Text
instance GHC.Generics.Generic Amazonka.ECS.Types.EFSVolumeConfiguration.EFSVolumeConfiguration
instance GHC.Show.Show Amazonka.ECS.Types.EFSVolumeConfiguration.EFSVolumeConfiguration
instance GHC.Read.Read Amazonka.ECS.Types.EFSVolumeConfiguration.EFSVolumeConfiguration
instance GHC.Classes.Eq Amazonka.ECS.Types.EFSVolumeConfiguration.EFSVolumeConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.EFSVolumeConfiguration.EFSVolumeConfiguration
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.EFSVolumeConfiguration.EFSVolumeConfiguration
instance Control.DeepSeq.NFData Amazonka.ECS.Types.EFSVolumeConfiguration.EFSVolumeConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.EFSVolumeConfiguration.EFSVolumeConfiguration


module Amazonka.ECS.Types.EnvironmentFileType
newtype EnvironmentFileType
EnvironmentFileType' :: Text -> EnvironmentFileType
[fromEnvironmentFileType] :: EnvironmentFileType -> Text
pattern EnvironmentFileType_S3 :: EnvironmentFileType
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Control.DeepSeq.NFData Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance GHC.Generics.Generic Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance GHC.Classes.Ord Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance GHC.Classes.Eq Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance GHC.Read.Read Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType
instance GHC.Show.Show Amazonka.ECS.Types.EnvironmentFileType.EnvironmentFileType


module Amazonka.ECS.Types.EnvironmentFile

-- | A list of files containing the environment variables to pass to a
--   container. You can specify up to ten environment files. The file must
--   have a <tt>.env</tt> file extension. Each line in an environment file
--   should contain an environment variable in <tt>VARIABLE=VALUE</tt>
--   format. Lines beginning with <tt>#</tt> are treated as comments and
--   are ignored. For more information on the environment variable file
--   syntax, see <a>Declare default environment variables in file</a>.
--   
--   If there are environment variables specified using the
--   <tt>environment</tt> parameter in a container definition, they take
--   precedence over the variables contained within an environment file. If
--   multiple environment files are specified that contain the same
--   variable, they are processed from the top down. It is recommended to
--   use unique variable names. For more information, see <a>Specifying
--   environment variables</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   This field is only valid for containers in Fargate tasks that use
--   platform version <tt>1.4.0</tt> or later.
--   
--   <i>See:</i> <a>newEnvironmentFile</a> smart constructor.
data EnvironmentFile
EnvironmentFile' :: Text -> EnvironmentFileType -> EnvironmentFile

-- | The Amazon Resource Name (ARN) of the Amazon S3 object containing the
--   environment variable file.
[$sel:value:EnvironmentFile'] :: EnvironmentFile -> Text

-- | The file type to use. The only supported value is <tt>s3</tt>.
[$sel:type':EnvironmentFile'] :: EnvironmentFile -> EnvironmentFileType

-- | Create a value of <a>EnvironmentFile</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:EnvironmentFile'</a>, <a>environmentFile_value</a> - The
--   Amazon Resource Name (ARN) of the Amazon S3 object containing the
--   environment variable file.
--   
--   <a>$sel:type':EnvironmentFile'</a>, <a>environmentFile_type</a> - The
--   file type to use. The only supported value is <tt>s3</tt>.
newEnvironmentFile :: Text -> EnvironmentFileType -> EnvironmentFile

-- | The Amazon Resource Name (ARN) of the Amazon S3 object containing the
--   environment variable file.
environmentFile_value :: Lens' EnvironmentFile Text

-- | The file type to use. The only supported value is <tt>s3</tt>.
environmentFile_type :: Lens' EnvironmentFile EnvironmentFileType
instance GHC.Generics.Generic Amazonka.ECS.Types.EnvironmentFile.EnvironmentFile
instance GHC.Show.Show Amazonka.ECS.Types.EnvironmentFile.EnvironmentFile
instance GHC.Read.Read Amazonka.ECS.Types.EnvironmentFile.EnvironmentFile
instance GHC.Classes.Eq Amazonka.ECS.Types.EnvironmentFile.EnvironmentFile
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.EnvironmentFile.EnvironmentFile
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.EnvironmentFile.EnvironmentFile
instance Control.DeepSeq.NFData Amazonka.ECS.Types.EnvironmentFile.EnvironmentFile
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.EnvironmentFile.EnvironmentFile


module Amazonka.ECS.Types.EphemeralStorage

-- | The amount of ephemeral storage to allocate for the task. This
--   parameter is used to expand the total amount of ephemeral storage
--   available, beyond the default amount, for tasks hosted on Fargate. For
--   more information, see <a>Fargate task storage</a> in the <i>Amazon ECS
--   User Guide for Fargate</i>.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
--   
--   <i>See:</i> <a>newEphemeralStorage</a> smart constructor.
data EphemeralStorage
EphemeralStorage' :: Int -> EphemeralStorage

-- | The total amount, in GiB, of ephemeral storage to set for the task.
--   The minimum supported value is <tt>21</tt> GiB and the maximum
--   supported value is <tt>200</tt> GiB.
[$sel:sizeInGiB:EphemeralStorage'] :: EphemeralStorage -> Int

-- | Create a value of <a>EphemeralStorage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sizeInGiB:EphemeralStorage'</a>,
--   <a>ephemeralStorage_sizeInGiB</a> - The total amount, in GiB, of
--   ephemeral storage to set for the task. The minimum supported value is
--   <tt>21</tt> GiB and the maximum supported value is <tt>200</tt> GiB.
newEphemeralStorage :: Int -> EphemeralStorage

-- | The total amount, in GiB, of ephemeral storage to set for the task.
--   The minimum supported value is <tt>21</tt> GiB and the maximum
--   supported value is <tt>200</tt> GiB.
ephemeralStorage_sizeInGiB :: Lens' EphemeralStorage Int
instance GHC.Generics.Generic Amazonka.ECS.Types.EphemeralStorage.EphemeralStorage
instance GHC.Show.Show Amazonka.ECS.Types.EphemeralStorage.EphemeralStorage
instance GHC.Read.Read Amazonka.ECS.Types.EphemeralStorage.EphemeralStorage
instance GHC.Classes.Eq Amazonka.ECS.Types.EphemeralStorage.EphemeralStorage
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.EphemeralStorage.EphemeralStorage
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.EphemeralStorage.EphemeralStorage
instance Control.DeepSeq.NFData Amazonka.ECS.Types.EphemeralStorage.EphemeralStorage
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.EphemeralStorage.EphemeralStorage


module Amazonka.ECS.Types.ExecuteCommandLogConfiguration

-- | The log configuration for the results of the execute command actions.
--   The logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
--   
--   <i>See:</i> <a>newExecuteCommandLogConfiguration</a> smart
--   constructor.
data ExecuteCommandLogConfiguration
ExecuteCommandLogConfiguration' :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> ExecuteCommandLogConfiguration

-- | The name of the CloudWatch log group to send logs to.
--   
--   The CloudWatch log group must already be created.
[$sel:cloudWatchLogGroupName:ExecuteCommandLogConfiguration'] :: ExecuteCommandLogConfiguration -> Maybe Text

-- | An optional folder in the S3 bucket to place logs in.
[$sel:s3KeyPrefix:ExecuteCommandLogConfiguration'] :: ExecuteCommandLogConfiguration -> Maybe Text

-- | Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
[$sel:cloudWatchEncryptionEnabled:ExecuteCommandLogConfiguration'] :: ExecuteCommandLogConfiguration -> Maybe Bool

-- | Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
[$sel:s3EncryptionEnabled:ExecuteCommandLogConfiguration'] :: ExecuteCommandLogConfiguration -> Maybe Bool

-- | The name of the S3 bucket to send logs to.
--   
--   The S3 bucket must already be created.
[$sel:s3BucketName:ExecuteCommandLogConfiguration'] :: ExecuteCommandLogConfiguration -> Maybe Text

-- | Create a value of <a>ExecuteCommandLogConfiguration</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cloudWatchLogGroupName:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_cloudWatchLogGroupName</a> - The
--   name of the CloudWatch log group to send logs to.
--   
--   The CloudWatch log group must already be created.
--   
--   <a>$sel:s3KeyPrefix:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_s3KeyPrefix</a> - An optional folder
--   in the S3 bucket to place logs in.
--   
--   
--   <a>$sel:cloudWatchEncryptionEnabled:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_cloudWatchEncryptionEnabled</a> -
--   Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
--   
--   <a>$sel:s3EncryptionEnabled:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_s3EncryptionEnabled</a> - Whether or
--   not to enable encryption on the CloudWatch logs. If not specified,
--   encryption will be disabled.
--   
--   <a>$sel:s3BucketName:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_s3BucketName</a> - The name of the
--   S3 bucket to send logs to.
--   
--   The S3 bucket must already be created.
newExecuteCommandLogConfiguration :: ExecuteCommandLogConfiguration

-- | The name of the CloudWatch log group to send logs to.
--   
--   The CloudWatch log group must already be created.
executeCommandLogConfiguration_cloudWatchLogGroupName :: Lens' ExecuteCommandLogConfiguration (Maybe Text)

-- | An optional folder in the S3 bucket to place logs in.
executeCommandLogConfiguration_s3KeyPrefix :: Lens' ExecuteCommandLogConfiguration (Maybe Text)

-- | Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
executeCommandLogConfiguration_cloudWatchEncryptionEnabled :: Lens' ExecuteCommandLogConfiguration (Maybe Bool)

-- | Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
executeCommandLogConfiguration_s3EncryptionEnabled :: Lens' ExecuteCommandLogConfiguration (Maybe Bool)

-- | The name of the S3 bucket to send logs to.
--   
--   The S3 bucket must already be created.
executeCommandLogConfiguration_s3BucketName :: Lens' ExecuteCommandLogConfiguration (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.ExecuteCommandLogConfiguration.ExecuteCommandLogConfiguration
instance GHC.Show.Show Amazonka.ECS.Types.ExecuteCommandLogConfiguration.ExecuteCommandLogConfiguration
instance GHC.Read.Read Amazonka.ECS.Types.ExecuteCommandLogConfiguration.ExecuteCommandLogConfiguration
instance GHC.Classes.Eq Amazonka.ECS.Types.ExecuteCommandLogConfiguration.ExecuteCommandLogConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ExecuteCommandLogConfiguration.ExecuteCommandLogConfiguration
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ExecuteCommandLogConfiguration.ExecuteCommandLogConfiguration
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ExecuteCommandLogConfiguration.ExecuteCommandLogConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ExecuteCommandLogConfiguration.ExecuteCommandLogConfiguration


module Amazonka.ECS.Types.ExecuteCommandLogging
newtype ExecuteCommandLogging
ExecuteCommandLogging' :: Text -> ExecuteCommandLogging
[fromExecuteCommandLogging] :: ExecuteCommandLogging -> Text
pattern ExecuteCommandLogging_DEFAULT :: ExecuteCommandLogging
pattern ExecuteCommandLogging_NONE :: ExecuteCommandLogging
pattern ExecuteCommandLogging_OVERRIDE :: ExecuteCommandLogging
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance GHC.Generics.Generic Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance GHC.Classes.Ord Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance GHC.Classes.Eq Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance GHC.Read.Read Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging
instance GHC.Show.Show Amazonka.ECS.Types.ExecuteCommandLogging.ExecuteCommandLogging


module Amazonka.ECS.Types.ExecuteCommandConfiguration

-- | The details of the execute command configuration.
--   
--   <i>See:</i> <a>newExecuteCommandConfiguration</a> smart constructor.
data ExecuteCommandConfiguration
ExecuteCommandConfiguration' :: Maybe ExecuteCommandLogConfiguration -> Maybe Text -> Maybe ExecuteCommandLogging -> ExecuteCommandConfiguration

-- | The log configuration for the results of the execute command actions.
--   The logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When
--   <tt>logging=OVERRIDE</tt> is specified, a <tt>logConfiguration</tt>
--   must be provided.
[$sel:logConfiguration:ExecuteCommandConfiguration'] :: ExecuteCommandConfiguration -> Maybe ExecuteCommandLogConfiguration

-- | Specify an Key Management Service key ID to encrypt the data between
--   the local client and the container.
[$sel:kmsKeyId:ExecuteCommandConfiguration'] :: ExecuteCommandConfiguration -> Maybe Text

-- | The log setting to use for redirecting logs for your execute command
--   results. The following log settings are available.
--   
--   <ul>
--   <li><tt>NONE</tt>: The execute command session is not logged.</li>
--   <li><tt>DEFAULT</tt>: The <tt>awslogs</tt> configuration in the task
--   definition is used. If no logging parameter is specified, it defaults
--   to this value. If no <tt>awslogs</tt> log driver is configured in the
--   task definition, the output won't be logged.</li>
--   <li><tt>OVERRIDE</tt>: Specify the logging details as a part of
--   <tt>logConfiguration</tt>. If the <tt>OVERRIDE</tt> logging option is
--   specified, the <tt>logConfiguration</tt> is required.</li>
--   </ul>
[$sel:logging:ExecuteCommandConfiguration'] :: ExecuteCommandConfiguration -> Maybe ExecuteCommandLogging

-- | Create a value of <a>ExecuteCommandConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logConfiguration:ExecuteCommandConfiguration'</a>,
--   <a>executeCommandConfiguration_logConfiguration</a> - The log
--   configuration for the results of the execute command actions. The logs
--   can be sent to CloudWatch Logs or an Amazon S3 bucket. When
--   <tt>logging=OVERRIDE</tt> is specified, a <tt>logConfiguration</tt>
--   must be provided.
--   
--   <a>$sel:kmsKeyId:ExecuteCommandConfiguration'</a>,
--   <a>executeCommandConfiguration_kmsKeyId</a> - Specify an Key
--   Management Service key ID to encrypt the data between the local client
--   and the container.
--   
--   <a>$sel:logging:ExecuteCommandConfiguration'</a>,
--   <a>executeCommandConfiguration_logging</a> - The log setting to use
--   for redirecting logs for your execute command results. The following
--   log settings are available.
--   
--   <ul>
--   <li><tt>NONE</tt>: The execute command session is not logged.</li>
--   <li><tt>DEFAULT</tt>: The <tt>awslogs</tt> configuration in the task
--   definition is used. If no logging parameter is specified, it defaults
--   to this value. If no <tt>awslogs</tt> log driver is configured in the
--   task definition, the output won't be logged.</li>
--   <li><tt>OVERRIDE</tt>: Specify the logging details as a part of
--   <tt>logConfiguration</tt>. If the <tt>OVERRIDE</tt> logging option is
--   specified, the <tt>logConfiguration</tt> is required.</li>
--   </ul>
newExecuteCommandConfiguration :: ExecuteCommandConfiguration

-- | The log configuration for the results of the execute command actions.
--   The logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When
--   <tt>logging=OVERRIDE</tt> is specified, a <tt>logConfiguration</tt>
--   must be provided.
executeCommandConfiguration_logConfiguration :: Lens' ExecuteCommandConfiguration (Maybe ExecuteCommandLogConfiguration)

-- | Specify an Key Management Service key ID to encrypt the data between
--   the local client and the container.
executeCommandConfiguration_kmsKeyId :: Lens' ExecuteCommandConfiguration (Maybe Text)

-- | The log setting to use for redirecting logs for your execute command
--   results. The following log settings are available.
--   
--   <ul>
--   <li><tt>NONE</tt>: The execute command session is not logged.</li>
--   <li><tt>DEFAULT</tt>: The <tt>awslogs</tt> configuration in the task
--   definition is used. If no logging parameter is specified, it defaults
--   to this value. If no <tt>awslogs</tt> log driver is configured in the
--   task definition, the output won't be logged.</li>
--   <li><tt>OVERRIDE</tt>: Specify the logging details as a part of
--   <tt>logConfiguration</tt>. If the <tt>OVERRIDE</tt> logging option is
--   specified, the <tt>logConfiguration</tt> is required.</li>
--   </ul>
executeCommandConfiguration_logging :: Lens' ExecuteCommandConfiguration (Maybe ExecuteCommandLogging)
instance GHC.Generics.Generic Amazonka.ECS.Types.ExecuteCommandConfiguration.ExecuteCommandConfiguration
instance GHC.Show.Show Amazonka.ECS.Types.ExecuteCommandConfiguration.ExecuteCommandConfiguration
instance GHC.Read.Read Amazonka.ECS.Types.ExecuteCommandConfiguration.ExecuteCommandConfiguration
instance GHC.Classes.Eq Amazonka.ECS.Types.ExecuteCommandConfiguration.ExecuteCommandConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ExecuteCommandConfiguration.ExecuteCommandConfiguration
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ExecuteCommandConfiguration.ExecuteCommandConfiguration
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ExecuteCommandConfiguration.ExecuteCommandConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ExecuteCommandConfiguration.ExecuteCommandConfiguration


module Amazonka.ECS.Types.ClusterConfiguration

-- | The execute command configuration for the cluster.
--   
--   <i>See:</i> <a>newClusterConfiguration</a> smart constructor.
data ClusterConfiguration
ClusterConfiguration' :: Maybe ExecuteCommandConfiguration -> ClusterConfiguration

-- | The details of the execute command configuration.
[$sel:executeCommandConfiguration:ClusterConfiguration'] :: ClusterConfiguration -> Maybe ExecuteCommandConfiguration

-- | Create a value of <a>ClusterConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:executeCommandConfiguration:ClusterConfiguration'</a>,
--   <a>clusterConfiguration_executeCommandConfiguration</a> - The details
--   of the execute command configuration.
newClusterConfiguration :: ClusterConfiguration

-- | The details of the execute command configuration.
clusterConfiguration_executeCommandConfiguration :: Lens' ClusterConfiguration (Maybe ExecuteCommandConfiguration)
instance GHC.Generics.Generic Amazonka.ECS.Types.ClusterConfiguration.ClusterConfiguration
instance GHC.Show.Show Amazonka.ECS.Types.ClusterConfiguration.ClusterConfiguration
instance GHC.Read.Read Amazonka.ECS.Types.ClusterConfiguration.ClusterConfiguration
instance GHC.Classes.Eq Amazonka.ECS.Types.ClusterConfiguration.ClusterConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ClusterConfiguration.ClusterConfiguration
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ClusterConfiguration.ClusterConfiguration
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ClusterConfiguration.ClusterConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ClusterConfiguration.ClusterConfiguration


module Amazonka.ECS.Types.FSxWindowsFileServerAuthorizationConfig

-- | The authorization configuration details for Amazon FSx for Windows
--   File Server file system. See
--   <a>FSxWindowsFileServerVolumeConfiguration</a> in the <i>Amazon
--   Elastic Container Service API Reference</i>.
--   
--   For more information and the input format, see <a>Amazon FSx for
--   Windows File Server Volumes</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newFSxWindowsFileServerAuthorizationConfig</a> smart
--   constructor.
data FSxWindowsFileServerAuthorizationConfig
FSxWindowsFileServerAuthorizationConfig' :: Text -> Text -> FSxWindowsFileServerAuthorizationConfig

-- | The authorization credential option to use. The authorization
--   credential options can be provided using either the Amazon Resource
--   Name (ARN) of an Secrets Manager secret or SSM Parameter Store
--   parameter. The ARNs refer to the stored credentials.
[$sel:credentialsParameter:FSxWindowsFileServerAuthorizationConfig'] :: FSxWindowsFileServerAuthorizationConfig -> Text

-- | A fully qualified domain name hosted by an <a>Directory Service</a>
--   Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon
--   EC2.
[$sel:domain:FSxWindowsFileServerAuthorizationConfig'] :: FSxWindowsFileServerAuthorizationConfig -> Text

-- | Create a value of <a>FSxWindowsFileServerAuthorizationConfig</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:credentialsParameter:FSxWindowsFileServerAuthorizationConfig'</a>,
--   <a>fSxWindowsFileServerAuthorizationConfig_credentialsParameter</a> -
--   The authorization credential option to use. The authorization
--   credential options can be provided using either the Amazon Resource
--   Name (ARN) of an Secrets Manager secret or SSM Parameter Store
--   parameter. The ARNs refer to the stored credentials.
--   
--   <a>$sel:domain:FSxWindowsFileServerAuthorizationConfig'</a>,
--   <a>fSxWindowsFileServerAuthorizationConfig_domain</a> - A fully
--   qualified domain name hosted by an <a>Directory Service</a> Managed
--   Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
newFSxWindowsFileServerAuthorizationConfig :: Text -> Text -> FSxWindowsFileServerAuthorizationConfig

-- | The authorization credential option to use. The authorization
--   credential options can be provided using either the Amazon Resource
--   Name (ARN) of an Secrets Manager secret or SSM Parameter Store
--   parameter. The ARNs refer to the stored credentials.
fSxWindowsFileServerAuthorizationConfig_credentialsParameter :: Lens' FSxWindowsFileServerAuthorizationConfig Text

-- | A fully qualified domain name hosted by an <a>Directory Service</a>
--   Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon
--   EC2.
fSxWindowsFileServerAuthorizationConfig_domain :: Lens' FSxWindowsFileServerAuthorizationConfig Text
instance GHC.Generics.Generic Amazonka.ECS.Types.FSxWindowsFileServerAuthorizationConfig.FSxWindowsFileServerAuthorizationConfig
instance GHC.Show.Show Amazonka.ECS.Types.FSxWindowsFileServerAuthorizationConfig.FSxWindowsFileServerAuthorizationConfig
instance GHC.Read.Read Amazonka.ECS.Types.FSxWindowsFileServerAuthorizationConfig.FSxWindowsFileServerAuthorizationConfig
instance GHC.Classes.Eq Amazonka.ECS.Types.FSxWindowsFileServerAuthorizationConfig.FSxWindowsFileServerAuthorizationConfig
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.FSxWindowsFileServerAuthorizationConfig.FSxWindowsFileServerAuthorizationConfig
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.FSxWindowsFileServerAuthorizationConfig.FSxWindowsFileServerAuthorizationConfig
instance Control.DeepSeq.NFData Amazonka.ECS.Types.FSxWindowsFileServerAuthorizationConfig.FSxWindowsFileServerAuthorizationConfig
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.FSxWindowsFileServerAuthorizationConfig.FSxWindowsFileServerAuthorizationConfig


module Amazonka.ECS.Types.FSxWindowsFileServerVolumeConfiguration

-- | This parameter is specified when you are using <a>Amazon FSx for
--   Windows File Server</a> file system for task storage.
--   
--   For more information and the input format, see <a>Amazon FSx for
--   Windows File Server Volumes</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newFSxWindowsFileServerVolumeConfiguration</a> smart
--   constructor.
data FSxWindowsFileServerVolumeConfiguration
FSxWindowsFileServerVolumeConfiguration' :: Text -> Text -> FSxWindowsFileServerAuthorizationConfig -> FSxWindowsFileServerVolumeConfiguration

-- | The Amazon FSx for Windows File Server file system ID to use.
[$sel:fileSystemId:FSxWindowsFileServerVolumeConfiguration'] :: FSxWindowsFileServerVolumeConfiguration -> Text

-- | The directory within the Amazon FSx for Windows File Server file
--   system to mount as the root directory inside the host.
[$sel:rootDirectory:FSxWindowsFileServerVolumeConfiguration'] :: FSxWindowsFileServerVolumeConfiguration -> Text

-- | The authorization configuration details for the Amazon FSx for Windows
--   File Server file system.
[$sel:authorizationConfig:FSxWindowsFileServerVolumeConfiguration'] :: FSxWindowsFileServerVolumeConfiguration -> FSxWindowsFileServerAuthorizationConfig

-- | Create a value of <a>FSxWindowsFileServerVolumeConfiguration</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:fileSystemId:FSxWindowsFileServerVolumeConfiguration'</a>,
--   <a>fSxWindowsFileServerVolumeConfiguration_fileSystemId</a> - The
--   Amazon FSx for Windows File Server file system ID to use.
--   
--   <a>$sel:rootDirectory:FSxWindowsFileServerVolumeConfiguration'</a>,
--   <a>fSxWindowsFileServerVolumeConfiguration_rootDirectory</a> - The
--   directory within the Amazon FSx for Windows File Server file system to
--   mount as the root directory inside the host.
--   
--   
--   <a>$sel:authorizationConfig:FSxWindowsFileServerVolumeConfiguration'</a>,
--   <a>fSxWindowsFileServerVolumeConfiguration_authorizationConfig</a> -
--   The authorization configuration details for the Amazon FSx for Windows
--   File Server file system.
newFSxWindowsFileServerVolumeConfiguration :: Text -> Text -> FSxWindowsFileServerAuthorizationConfig -> FSxWindowsFileServerVolumeConfiguration

-- | The Amazon FSx for Windows File Server file system ID to use.
fSxWindowsFileServerVolumeConfiguration_fileSystemId :: Lens' FSxWindowsFileServerVolumeConfiguration Text

-- | The directory within the Amazon FSx for Windows File Server file
--   system to mount as the root directory inside the host.
fSxWindowsFileServerVolumeConfiguration_rootDirectory :: Lens' FSxWindowsFileServerVolumeConfiguration Text

-- | The authorization configuration details for the Amazon FSx for Windows
--   File Server file system.
fSxWindowsFileServerVolumeConfiguration_authorizationConfig :: Lens' FSxWindowsFileServerVolumeConfiguration FSxWindowsFileServerAuthorizationConfig
instance GHC.Generics.Generic Amazonka.ECS.Types.FSxWindowsFileServerVolumeConfiguration.FSxWindowsFileServerVolumeConfiguration
instance GHC.Show.Show Amazonka.ECS.Types.FSxWindowsFileServerVolumeConfiguration.FSxWindowsFileServerVolumeConfiguration
instance GHC.Read.Read Amazonka.ECS.Types.FSxWindowsFileServerVolumeConfiguration.FSxWindowsFileServerVolumeConfiguration
instance GHC.Classes.Eq Amazonka.ECS.Types.FSxWindowsFileServerVolumeConfiguration.FSxWindowsFileServerVolumeConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.FSxWindowsFileServerVolumeConfiguration.FSxWindowsFileServerVolumeConfiguration
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.FSxWindowsFileServerVolumeConfiguration.FSxWindowsFileServerVolumeConfiguration
instance Control.DeepSeq.NFData Amazonka.ECS.Types.FSxWindowsFileServerVolumeConfiguration.FSxWindowsFileServerVolumeConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.FSxWindowsFileServerVolumeConfiguration.FSxWindowsFileServerVolumeConfiguration


module Amazonka.ECS.Types.Failure

-- | A failed resource. For a list of common causes, see <a>API failure
--   reasons</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <i>See:</i> <a>newFailure</a> smart constructor.
data Failure
Failure' :: Maybe Text -> Maybe Text -> Maybe Text -> Failure

-- | The Amazon Resource Name (ARN) of the failed resource.
[$sel:arn:Failure'] :: Failure -> Maybe Text

-- | The reason for the failure.
[$sel:reason:Failure'] :: Failure -> Maybe Text

-- | The details of the failure.
[$sel:detail:Failure'] :: Failure -> Maybe Text

-- | Create a value of <a>Failure</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:Failure'</a>, <a>failure_arn</a> - The Amazon Resource
--   Name (ARN) of the failed resource.
--   
--   <a>$sel:reason:Failure'</a>, <a>failure_reason</a> - The reason for
--   the failure.
--   
--   <a>$sel:detail:Failure'</a>, <a>failure_detail</a> - The details of
--   the failure.
newFailure :: Failure

-- | The Amazon Resource Name (ARN) of the failed resource.
failure_arn :: Lens' Failure (Maybe Text)

-- | The reason for the failure.
failure_reason :: Lens' Failure (Maybe Text)

-- | The details of the failure.
failure_detail :: Lens' Failure (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.Failure.Failure
instance GHC.Show.Show Amazonka.ECS.Types.Failure.Failure
instance GHC.Read.Read Amazonka.ECS.Types.Failure.Failure
instance GHC.Classes.Eq Amazonka.ECS.Types.Failure.Failure
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Failure.Failure
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Failure.Failure
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Failure.Failure


module Amazonka.ECS.Types.FirelensConfigurationType
newtype FirelensConfigurationType
FirelensConfigurationType' :: Text -> FirelensConfigurationType
[fromFirelensConfigurationType] :: FirelensConfigurationType -> Text
pattern FirelensConfigurationType_Fluentbit :: FirelensConfigurationType
pattern FirelensConfigurationType_Fluentd :: FirelensConfigurationType
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Control.DeepSeq.NFData Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance GHC.Generics.Generic Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance GHC.Classes.Ord Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance GHC.Classes.Eq Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance GHC.Read.Read Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType
instance GHC.Show.Show Amazonka.ECS.Types.FirelensConfigurationType.FirelensConfigurationType


module Amazonka.ECS.Types.FirelensConfiguration

-- | The FireLens configuration for the container. This is used to specify
--   and configure a log router for container logs. For more information,
--   see <a>Custom Log Routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newFirelensConfiguration</a> smart constructor.
data FirelensConfiguration
FirelensConfiguration' :: Maybe (HashMap Text Text) -> FirelensConfigurationType -> FirelensConfiguration

-- | The options to use when configuring the log router. This field is
--   optional and can be used to specify a custom configuration file or to
--   add additional metadata, such as the task, task definition, cluster,
--   and container instance details to the log event. If specified, the
--   syntax to use is
--   <tt>"options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}</tt>.
--   For more information, see <a>Creating a Task Definition that Uses a
--   FireLens Configuration</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   Tasks hosted on Fargate only support the <tt>file</tt> configuration
--   file type.
[$sel:options:FirelensConfiguration'] :: FirelensConfiguration -> Maybe (HashMap Text Text)

-- | The log router to use. The valid values are <tt>fluentd</tt> or
--   <tt>fluentbit</tt>.
[$sel:type':FirelensConfiguration'] :: FirelensConfiguration -> FirelensConfigurationType

-- | Create a value of <a>FirelensConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:options:FirelensConfiguration'</a>,
--   <a>firelensConfiguration_options</a> - The options to use when
--   configuring the log router. This field is optional and can be used to
--   specify a custom configuration file or to add additional metadata,
--   such as the task, task definition, cluster, and container instance
--   details to the log event. If specified, the syntax to use is
--   <tt>"options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}</tt>.
--   For more information, see <a>Creating a Task Definition that Uses a
--   FireLens Configuration</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   Tasks hosted on Fargate only support the <tt>file</tt> configuration
--   file type.
--   
--   <a>$sel:type':FirelensConfiguration'</a>,
--   <a>firelensConfiguration_type</a> - The log router to use. The valid
--   values are <tt>fluentd</tt> or <tt>fluentbit</tt>.
newFirelensConfiguration :: FirelensConfigurationType -> FirelensConfiguration

-- | The options to use when configuring the log router. This field is
--   optional and can be used to specify a custom configuration file or to
--   add additional metadata, such as the task, task definition, cluster,
--   and container instance details to the log event. If specified, the
--   syntax to use is
--   <tt>"options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}</tt>.
--   For more information, see <a>Creating a Task Definition that Uses a
--   FireLens Configuration</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   Tasks hosted on Fargate only support the <tt>file</tt> configuration
--   file type.
firelensConfiguration_options :: Lens' FirelensConfiguration (Maybe (HashMap Text Text))

-- | The log router to use. The valid values are <tt>fluentd</tt> or
--   <tt>fluentbit</tt>.
firelensConfiguration_type :: Lens' FirelensConfiguration FirelensConfigurationType
instance GHC.Generics.Generic Amazonka.ECS.Types.FirelensConfiguration.FirelensConfiguration
instance GHC.Show.Show Amazonka.ECS.Types.FirelensConfiguration.FirelensConfiguration
instance GHC.Read.Read Amazonka.ECS.Types.FirelensConfiguration.FirelensConfiguration
instance GHC.Classes.Eq Amazonka.ECS.Types.FirelensConfiguration.FirelensConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.FirelensConfiguration.FirelensConfiguration
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.FirelensConfiguration.FirelensConfiguration
instance Control.DeepSeq.NFData Amazonka.ECS.Types.FirelensConfiguration.FirelensConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.FirelensConfiguration.FirelensConfiguration


module Amazonka.ECS.Types.HealthCheck

-- | An object representing a container health check. Health check
--   parameters that are specified in a container definition override any
--   Docker health checks that exist in the container image (such as those
--   specified in a parent image or from the image's Dockerfile).
--   
--   You can view the health status of both individual containers and a
--   task with the DescribeTasks API operation or when viewing the task
--   details in the console.
--   
--   The following describes the possible <tt>healthStatus</tt> values for
--   a container:
--   
--   <ul>
--   <li><tt>HEALTHY</tt>-The container health check has passed
--   successfully.</li>
--   <li><tt>UNHEALTHY</tt>-The container health check has failed.</li>
--   <li><tt>UNKNOWN</tt>-The container health check is being evaluated or
--   there is no container health check defined.</li>
--   </ul>
--   
--   The following describes the possible <tt>healthStatus</tt> values for
--   a task. The container health check status of nonessential containers
--   do not have an effect on the health status of a task.
--   
--   <ul>
--   <li><tt>HEALTHY</tt>-All essential containers within the task have
--   passed their health checks.</li>
--   <li><tt>UNHEALTHY</tt>-One or more essential containers have failed
--   their health check.</li>
--   <li><tt>UNKNOWN</tt>-The essential containers within the task are
--   still having their health checks evaluated or there are no container
--   health checks defined.</li>
--   </ul>
--   
--   If a task is run manually, and not as part of a service, the task will
--   continue its lifecycle regardless of its health status. For tasks that
--   are part of a service, if the task reports as unhealthy then the task
--   will be stopped and the service scheduler will replace it.
--   
--   The following are notes about container health check support:
--   
--   <ul>
--   <li>Container health checks require version 1.17.0 or greater of the
--   Amazon ECS container agent. For more information, see <a>Updating the
--   Amazon ECS Container Agent</a>.</li>
--   <li>Container health checks are supported for Fargate tasks if you are
--   using platform version 1.1.0 or greater. For more information, see
--   <a>Fargate Platform Versions</a>.</li>
--   <li>Container health checks are not supported for tasks that are part
--   of a service that is configured to use a Classic Load Balancer.</li>
--   </ul>
--   
--   <i>See:</i> <a>newHealthCheck</a> smart constructor.
data HealthCheck
HealthCheck' :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> [Text] -> HealthCheck

-- | The optional grace period within which to provide containers time to
--   bootstrap before failed health checks count towards the maximum number
--   of retries. You may specify between 0 and 300 seconds. The
--   <tt>startPeriod</tt> is disabled by default.
--   
--   If a health check succeeds within the <tt>startPeriod</tt>, then the
--   container is considered healthy and any subsequent failures count
--   toward the maximum number of retries.
[$sel:startPeriod:HealthCheck'] :: HealthCheck -> Maybe Int

-- | The number of times to retry a failed health check before the
--   container is considered unhealthy. You may specify between 1 and 10
--   retries. The default value is 3.
[$sel:retries:HealthCheck'] :: HealthCheck -> Maybe Int

-- | The time period in seconds between each health check execution. You
--   may specify between 5 and 300 seconds. The default value is 30
--   seconds.
[$sel:interval:HealthCheck'] :: HealthCheck -> Maybe Int

-- | The time period in seconds to wait for a health check to succeed
--   before it is considered a failure. You may specify between 2 and 60
--   seconds. The default value is 5.
[$sel:timeout:HealthCheck'] :: HealthCheck -> Maybe Int

-- | A string array representing the command that the container runs to
--   determine if it is healthy. The string array must start with
--   <tt>CMD</tt> to execute the command arguments directly, or
--   <tt>CMD-SHELL</tt> to run the command with the container's default
--   shell.
--   
--   When you use the Amazon Web Services Management Console JSON panel,
--   the Command Line Interface, or the APIs, you should enclose the list
--   of commands in brackets, as shown below.
--   
--   <pre>
--   [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
--   </pre>
--   
--   You do not need to include the brackets when you use the Amazon Web
--   Services Management Consoleas shown below.
--   
--   <pre>
--   "CMD-SHELL", "curl -f http://localhost/ || exit 1"
--   </pre>
--   
--   An exit code of 0 indicates success, and non-zero exit code indicates
--   failure. For more information, see <tt>HealthCheck</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
[$sel:command:HealthCheck'] :: HealthCheck -> [Text]

-- | Create a value of <a>HealthCheck</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:startPeriod:HealthCheck'</a>, <a>healthCheck_startPeriod</a> -
--   The optional grace period within which to provide containers time to
--   bootstrap before failed health checks count towards the maximum number
--   of retries. You may specify between 0 and 300 seconds. The
--   <tt>startPeriod</tt> is disabled by default.
--   
--   If a health check succeeds within the <tt>startPeriod</tt>, then the
--   container is considered healthy and any subsequent failures count
--   toward the maximum number of retries.
--   
--   <a>$sel:retries:HealthCheck'</a>, <a>healthCheck_retries</a> - The
--   number of times to retry a failed health check before the container is
--   considered unhealthy. You may specify between 1 and 10 retries. The
--   default value is 3.
--   
--   <a>$sel:interval:HealthCheck'</a>, <a>healthCheck_interval</a> - The
--   time period in seconds between each health check execution. You may
--   specify between 5 and 300 seconds. The default value is 30 seconds.
--   
--   <a>$sel:timeout:HealthCheck'</a>, <a>healthCheck_timeout</a> - The
--   time period in seconds to wait for a health check to succeed before it
--   is considered a failure. You may specify between 2 and 60 seconds. The
--   default value is 5.
--   
--   <a>$sel:command:HealthCheck'</a>, <a>healthCheck_command</a> - A
--   string array representing the command that the container runs to
--   determine if it is healthy. The string array must start with
--   <tt>CMD</tt> to execute the command arguments directly, or
--   <tt>CMD-SHELL</tt> to run the command with the container's default
--   shell.
--   
--   When you use the Amazon Web Services Management Console JSON panel,
--   the Command Line Interface, or the APIs, you should enclose the list
--   of commands in brackets, as shown below.
--   
--   <pre>
--   [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
--   </pre>
--   
--   You do not need to include the brackets when you use the Amazon Web
--   Services Management Consoleas shown below.
--   
--   <pre>
--   "CMD-SHELL", "curl -f http://localhost/ || exit 1"
--   </pre>
--   
--   An exit code of 0 indicates success, and non-zero exit code indicates
--   failure. For more information, see <tt>HealthCheck</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
newHealthCheck :: HealthCheck

-- | The optional grace period within which to provide containers time to
--   bootstrap before failed health checks count towards the maximum number
--   of retries. You may specify between 0 and 300 seconds. The
--   <tt>startPeriod</tt> is disabled by default.
--   
--   If a health check succeeds within the <tt>startPeriod</tt>, then the
--   container is considered healthy and any subsequent failures count
--   toward the maximum number of retries.
healthCheck_startPeriod :: Lens' HealthCheck (Maybe Int)

-- | The number of times to retry a failed health check before the
--   container is considered unhealthy. You may specify between 1 and 10
--   retries. The default value is 3.
healthCheck_retries :: Lens' HealthCheck (Maybe Int)

-- | The time period in seconds between each health check execution. You
--   may specify between 5 and 300 seconds. The default value is 30
--   seconds.
healthCheck_interval :: Lens' HealthCheck (Maybe Int)

-- | The time period in seconds to wait for a health check to succeed
--   before it is considered a failure. You may specify between 2 and 60
--   seconds. The default value is 5.
healthCheck_timeout :: Lens' HealthCheck (Maybe Int)

-- | A string array representing the command that the container runs to
--   determine if it is healthy. The string array must start with
--   <tt>CMD</tt> to execute the command arguments directly, or
--   <tt>CMD-SHELL</tt> to run the command with the container's default
--   shell.
--   
--   When you use the Amazon Web Services Management Console JSON panel,
--   the Command Line Interface, or the APIs, you should enclose the list
--   of commands in brackets, as shown below.
--   
--   <pre>
--   [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
--   </pre>
--   
--   You do not need to include the brackets when you use the Amazon Web
--   Services Management Consoleas shown below.
--   
--   <pre>
--   "CMD-SHELL", "curl -f http://localhost/ || exit 1"
--   </pre>
--   
--   An exit code of 0 indicates success, and non-zero exit code indicates
--   failure. For more information, see <tt>HealthCheck</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
healthCheck_command :: Lens' HealthCheck [Text]
instance GHC.Generics.Generic Amazonka.ECS.Types.HealthCheck.HealthCheck
instance GHC.Show.Show Amazonka.ECS.Types.HealthCheck.HealthCheck
instance GHC.Read.Read Amazonka.ECS.Types.HealthCheck.HealthCheck
instance GHC.Classes.Eq Amazonka.ECS.Types.HealthCheck.HealthCheck
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.HealthCheck.HealthCheck
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.HealthCheck.HealthCheck
instance Control.DeepSeq.NFData Amazonka.ECS.Types.HealthCheck.HealthCheck
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.HealthCheck.HealthCheck


module Amazonka.ECS.Types.HealthStatus
newtype HealthStatus
HealthStatus' :: Text -> HealthStatus
[fromHealthStatus] :: HealthStatus -> Text
pattern HealthStatus_HEALTHY :: HealthStatus
pattern HealthStatus_UNHEALTHY :: HealthStatus
pattern HealthStatus_UNKNOWN :: HealthStatus
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Control.DeepSeq.NFData Amazonka.ECS.Types.HealthStatus.HealthStatus
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.HealthStatus.HealthStatus
instance GHC.Generics.Generic Amazonka.ECS.Types.HealthStatus.HealthStatus
instance GHC.Classes.Ord Amazonka.ECS.Types.HealthStatus.HealthStatus
instance GHC.Classes.Eq Amazonka.ECS.Types.HealthStatus.HealthStatus
instance GHC.Read.Read Amazonka.ECS.Types.HealthStatus.HealthStatus
instance GHC.Show.Show Amazonka.ECS.Types.HealthStatus.HealthStatus


module Amazonka.ECS.Types.HostEntry

-- | Hostnames and IP address entries that are added to the
--   <tt>/etc/hosts</tt> file of a container via the <tt>extraHosts</tt>
--   parameter of its ContainerDefinition.
--   
--   <i>See:</i> <a>newHostEntry</a> smart constructor.
data HostEntry
HostEntry' :: Text -> Text -> HostEntry

-- | The hostname to use in the <tt>/etc/hosts</tt> entry.
[$sel:hostname:HostEntry'] :: HostEntry -> Text

-- | The IP address to use in the <tt>/etc/hosts</tt> entry.
[$sel:ipAddress:HostEntry'] :: HostEntry -> Text

-- | Create a value of <a>HostEntry</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:hostname:HostEntry'</a>, <a>hostEntry_hostname</a> - The
--   hostname to use in the <tt>/etc/hosts</tt> entry.
--   
--   <a>$sel:ipAddress:HostEntry'</a>, <a>hostEntry_ipAddress</a> - The IP
--   address to use in the <tt>/etc/hosts</tt> entry.
newHostEntry :: Text -> Text -> HostEntry

-- | The hostname to use in the <tt>/etc/hosts</tt> entry.
hostEntry_hostname :: Lens' HostEntry Text

-- | The IP address to use in the <tt>/etc/hosts</tt> entry.
hostEntry_ipAddress :: Lens' HostEntry Text
instance GHC.Generics.Generic Amazonka.ECS.Types.HostEntry.HostEntry
instance GHC.Show.Show Amazonka.ECS.Types.HostEntry.HostEntry
instance GHC.Read.Read Amazonka.ECS.Types.HostEntry.HostEntry
instance GHC.Classes.Eq Amazonka.ECS.Types.HostEntry.HostEntry
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.HostEntry.HostEntry
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.HostEntry.HostEntry
instance Control.DeepSeq.NFData Amazonka.ECS.Types.HostEntry.HostEntry
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.HostEntry.HostEntry


module Amazonka.ECS.Types.HostVolumeProperties

-- | Details on a container instance bind mount host volume.
--   
--   <i>See:</i> <a>newHostVolumeProperties</a> smart constructor.
data HostVolumeProperties
HostVolumeProperties' :: Maybe Text -> HostVolumeProperties

-- | When the <tt>host</tt> parameter is used, specify a
--   <tt>sourcePath</tt> to declare the path on the host container instance
--   that is presented to the container. If this parameter is empty, then
--   the Docker daemon has assigned a host path for you. If the
--   <tt>host</tt> parameter contains a <tt>sourcePath</tt> file location,
--   then the data volume persists at the specified location on the host
--   container instance until you delete it manually. If the
--   <tt>sourcePath</tt> value does not exist on the host container
--   instance, the Docker daemon creates it. If the location does exist,
--   the contents of the source path folder are exported.
--   
--   If you are using the Fargate launch type, the <tt>sourcePath</tt>
--   parameter is not supported.
[$sel:sourcePath:HostVolumeProperties'] :: HostVolumeProperties -> Maybe Text

-- | Create a value of <a>HostVolumeProperties</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourcePath:HostVolumeProperties'</a>,
--   <a>hostVolumeProperties_sourcePath</a> - When the <tt>host</tt>
--   parameter is used, specify a <tt>sourcePath</tt> to declare the path
--   on the host container instance that is presented to the container. If
--   this parameter is empty, then the Docker daemon has assigned a host
--   path for you. If the <tt>host</tt> parameter contains a
--   <tt>sourcePath</tt> file location, then the data volume persists at
--   the specified location on the host container instance until you delete
--   it manually. If the <tt>sourcePath</tt> value does not exist on the
--   host container instance, the Docker daemon creates it. If the location
--   does exist, the contents of the source path folder are exported.
--   
--   If you are using the Fargate launch type, the <tt>sourcePath</tt>
--   parameter is not supported.
newHostVolumeProperties :: HostVolumeProperties

-- | When the <tt>host</tt> parameter is used, specify a
--   <tt>sourcePath</tt> to declare the path on the host container instance
--   that is presented to the container. If this parameter is empty, then
--   the Docker daemon has assigned a host path for you. If the
--   <tt>host</tt> parameter contains a <tt>sourcePath</tt> file location,
--   then the data volume persists at the specified location on the host
--   container instance until you delete it manually. If the
--   <tt>sourcePath</tt> value does not exist on the host container
--   instance, the Docker daemon creates it. If the location does exist,
--   the contents of the source path folder are exported.
--   
--   If you are using the Fargate launch type, the <tt>sourcePath</tt>
--   parameter is not supported.
hostVolumeProperties_sourcePath :: Lens' HostVolumeProperties (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.HostVolumeProperties.HostVolumeProperties
instance GHC.Show.Show Amazonka.ECS.Types.HostVolumeProperties.HostVolumeProperties
instance GHC.Read.Read Amazonka.ECS.Types.HostVolumeProperties.HostVolumeProperties
instance GHC.Classes.Eq Amazonka.ECS.Types.HostVolumeProperties.HostVolumeProperties
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.HostVolumeProperties.HostVolumeProperties
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.HostVolumeProperties.HostVolumeProperties
instance Control.DeepSeq.NFData Amazonka.ECS.Types.HostVolumeProperties.HostVolumeProperties
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.HostVolumeProperties.HostVolumeProperties


module Amazonka.ECS.Types.InferenceAccelerator

-- | Details on a Elastic Inference accelerator. For more information, see
--   <a>Working with Amazon Elastic Inference on Amazon ECS</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newInferenceAccelerator</a> smart constructor.
data InferenceAccelerator
InferenceAccelerator' :: Text -> Text -> InferenceAccelerator

-- | The Elastic Inference accelerator device name. The <tt>deviceName</tt>
--   must also be referenced in a container definition as a
--   ResourceRequirement.
[$sel:deviceName:InferenceAccelerator'] :: InferenceAccelerator -> Text

-- | The Elastic Inference accelerator type to use.
[$sel:deviceType:InferenceAccelerator'] :: InferenceAccelerator -> Text

-- | Create a value of <a>InferenceAccelerator</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deviceName:InferenceAccelerator'</a>,
--   <a>inferenceAccelerator_deviceName</a> - The Elastic Inference
--   accelerator device name. The <tt>deviceName</tt> must also be
--   referenced in a container definition as a ResourceRequirement.
--   
--   <a>$sel:deviceType:InferenceAccelerator'</a>,
--   <a>inferenceAccelerator_deviceType</a> - The Elastic Inference
--   accelerator type to use.
newInferenceAccelerator :: Text -> Text -> InferenceAccelerator

-- | The Elastic Inference accelerator device name. The <tt>deviceName</tt>
--   must also be referenced in a container definition as a
--   ResourceRequirement.
inferenceAccelerator_deviceName :: Lens' InferenceAccelerator Text

-- | The Elastic Inference accelerator type to use.
inferenceAccelerator_deviceType :: Lens' InferenceAccelerator Text
instance GHC.Generics.Generic Amazonka.ECS.Types.InferenceAccelerator.InferenceAccelerator
instance GHC.Show.Show Amazonka.ECS.Types.InferenceAccelerator.InferenceAccelerator
instance GHC.Read.Read Amazonka.ECS.Types.InferenceAccelerator.InferenceAccelerator
instance GHC.Classes.Eq Amazonka.ECS.Types.InferenceAccelerator.InferenceAccelerator
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.InferenceAccelerator.InferenceAccelerator
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.InferenceAccelerator.InferenceAccelerator
instance Control.DeepSeq.NFData Amazonka.ECS.Types.InferenceAccelerator.InferenceAccelerator
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.InferenceAccelerator.InferenceAccelerator


module Amazonka.ECS.Types.InferenceAcceleratorOverride

-- | Details on an Elastic Inference accelerator task override. This
--   parameter is used to override the Elastic Inference accelerator
--   specified in the task definition. For more information, see <a>Working
--   with Amazon Elastic Inference on Amazon ECS</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newInferenceAcceleratorOverride</a> smart constructor.
data InferenceAcceleratorOverride
InferenceAcceleratorOverride' :: Maybe Text -> Maybe Text -> InferenceAcceleratorOverride

-- | The Elastic Inference accelerator device name to override for the
--   task. This parameter must match a <tt>deviceName</tt> specified in the
--   task definition.
[$sel:deviceName:InferenceAcceleratorOverride'] :: InferenceAcceleratorOverride -> Maybe Text

-- | The Elastic Inference accelerator type to use.
[$sel:deviceType:InferenceAcceleratorOverride'] :: InferenceAcceleratorOverride -> Maybe Text

-- | Create a value of <a>InferenceAcceleratorOverride</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deviceName:InferenceAcceleratorOverride'</a>,
--   <a>inferenceAcceleratorOverride_deviceName</a> - The Elastic Inference
--   accelerator device name to override for the task. This parameter must
--   match a <tt>deviceName</tt> specified in the task definition.
--   
--   <a>$sel:deviceType:InferenceAcceleratorOverride'</a>,
--   <a>inferenceAcceleratorOverride_deviceType</a> - The Elastic Inference
--   accelerator type to use.
newInferenceAcceleratorOverride :: InferenceAcceleratorOverride

-- | The Elastic Inference accelerator device name to override for the
--   task. This parameter must match a <tt>deviceName</tt> specified in the
--   task definition.
inferenceAcceleratorOverride_deviceName :: Lens' InferenceAcceleratorOverride (Maybe Text)

-- | The Elastic Inference accelerator type to use.
inferenceAcceleratorOverride_deviceType :: Lens' InferenceAcceleratorOverride (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.InferenceAcceleratorOverride.InferenceAcceleratorOverride
instance GHC.Show.Show Amazonka.ECS.Types.InferenceAcceleratorOverride.InferenceAcceleratorOverride
instance GHC.Read.Read Amazonka.ECS.Types.InferenceAcceleratorOverride.InferenceAcceleratorOverride
instance GHC.Classes.Eq Amazonka.ECS.Types.InferenceAcceleratorOverride.InferenceAcceleratorOverride
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.InferenceAcceleratorOverride.InferenceAcceleratorOverride
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.InferenceAcceleratorOverride.InferenceAcceleratorOverride
instance Control.DeepSeq.NFData Amazonka.ECS.Types.InferenceAcceleratorOverride.InferenceAcceleratorOverride
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.InferenceAcceleratorOverride.InferenceAcceleratorOverride


module Amazonka.ECS.Types.IpcMode
newtype IpcMode
IpcMode' :: Text -> IpcMode
[fromIpcMode] :: IpcMode -> Text
pattern IpcMode_Host :: IpcMode
pattern IpcMode_None :: IpcMode
pattern IpcMode_Task :: IpcMode
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.IpcMode.IpcMode
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.IpcMode.IpcMode
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.IpcMode.IpcMode
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.IpcMode.IpcMode
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.IpcMode.IpcMode
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.IpcMode.IpcMode
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.IpcMode.IpcMode
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.IpcMode.IpcMode
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.IpcMode.IpcMode
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.IpcMode.IpcMode
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.IpcMode.IpcMode
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.IpcMode.IpcMode
instance Control.DeepSeq.NFData Amazonka.ECS.Types.IpcMode.IpcMode
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.IpcMode.IpcMode
instance GHC.Generics.Generic Amazonka.ECS.Types.IpcMode.IpcMode
instance GHC.Classes.Ord Amazonka.ECS.Types.IpcMode.IpcMode
instance GHC.Classes.Eq Amazonka.ECS.Types.IpcMode.IpcMode
instance GHC.Read.Read Amazonka.ECS.Types.IpcMode.IpcMode
instance GHC.Show.Show Amazonka.ECS.Types.IpcMode.IpcMode


module Amazonka.ECS.Types.KernelCapabilities

-- | The Linux capabilities for the container that are added to or dropped
--   from the default configuration provided by Docker. For more
--   information on the default capabilities and the non-default available
--   capabilities, see <a>Runtime privilege and Linux capabilities</a> in
--   the <i>Docker run reference</i>. For more detailed information on
--   these Linux capabilities, see the <a>capabilities(7)</a> Linux manual
--   page.
--   
--   <i>See:</i> <a>newKernelCapabilities</a> smart constructor.
data KernelCapabilities
KernelCapabilities' :: Maybe [Text] -> Maybe [Text] -> KernelCapabilities

-- | The Linux capabilities for the container that have been removed from
--   the default configuration provided by Docker. This parameter maps to
--   <tt>CapDrop</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-drop</tt> option to
--   <a>docker run</a>.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
[$sel:drop:KernelCapabilities'] :: KernelCapabilities -> Maybe [Text]

-- | The Linux capabilities for the container that have been added to the
--   default configuration provided by Docker. This parameter maps to
--   <tt>CapAdd</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-add</tt> option to
--   <a>docker run</a>.
--   
--   Tasks launched on Fargate only support adding the <tt>SYS_PTRACE</tt>
--   kernel capability.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
[$sel:add:KernelCapabilities'] :: KernelCapabilities -> Maybe [Text]

-- | Create a value of <a>KernelCapabilities</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:drop:KernelCapabilities'</a>, <a>kernelCapabilities_drop</a> -
--   The Linux capabilities for the container that have been removed from
--   the default configuration provided by Docker. This parameter maps to
--   <tt>CapDrop</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-drop</tt> option to
--   <a>docker run</a>.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
--   
--   <a>$sel:add:KernelCapabilities'</a>, <a>kernelCapabilities_add</a> -
--   The Linux capabilities for the container that have been added to the
--   default configuration provided by Docker. This parameter maps to
--   <tt>CapAdd</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-add</tt> option to
--   <a>docker run</a>.
--   
--   Tasks launched on Fargate only support adding the <tt>SYS_PTRACE</tt>
--   kernel capability.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
newKernelCapabilities :: KernelCapabilities

-- | The Linux capabilities for the container that have been removed from
--   the default configuration provided by Docker. This parameter maps to
--   <tt>CapDrop</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-drop</tt> option to
--   <a>docker run</a>.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
kernelCapabilities_drop :: Lens' KernelCapabilities (Maybe [Text])

-- | The Linux capabilities for the container that have been added to the
--   default configuration provided by Docker. This parameter maps to
--   <tt>CapAdd</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-add</tt> option to
--   <a>docker run</a>.
--   
--   Tasks launched on Fargate only support adding the <tt>SYS_PTRACE</tt>
--   kernel capability.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
kernelCapabilities_add :: Lens' KernelCapabilities (Maybe [Text])
instance GHC.Generics.Generic Amazonka.ECS.Types.KernelCapabilities.KernelCapabilities
instance GHC.Show.Show Amazonka.ECS.Types.KernelCapabilities.KernelCapabilities
instance GHC.Read.Read Amazonka.ECS.Types.KernelCapabilities.KernelCapabilities
instance GHC.Classes.Eq Amazonka.ECS.Types.KernelCapabilities.KernelCapabilities
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.KernelCapabilities.KernelCapabilities
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.KernelCapabilities.KernelCapabilities
instance Control.DeepSeq.NFData Amazonka.ECS.Types.KernelCapabilities.KernelCapabilities
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.KernelCapabilities.KernelCapabilities


module Amazonka.ECS.Types.KeyValuePair

-- | A key-value pair object.
--   
--   <i>See:</i> <a>newKeyValuePair</a> smart constructor.
data KeyValuePair
KeyValuePair' :: Maybe Text -> Maybe Text -> KeyValuePair

-- | The value of the key-value pair. For environment variables, this is
--   the value of the environment variable.
[$sel:value:KeyValuePair'] :: KeyValuePair -> Maybe Text

-- | The name of the key-value pair. For environment variables, this is the
--   name of the environment variable.
[$sel:name:KeyValuePair'] :: KeyValuePair -> Maybe Text

-- | Create a value of <a>KeyValuePair</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:KeyValuePair'</a>, <a>keyValuePair_value</a> - The value
--   of the key-value pair. For environment variables, this is the value of
--   the environment variable.
--   
--   <a>$sel:name:KeyValuePair'</a>, <a>keyValuePair_name</a> - The name of
--   the key-value pair. For environment variables, this is the name of the
--   environment variable.
newKeyValuePair :: KeyValuePair

-- | The value of the key-value pair. For environment variables, this is
--   the value of the environment variable.
keyValuePair_value :: Lens' KeyValuePair (Maybe Text)

-- | The name of the key-value pair. For environment variables, this is the
--   name of the environment variable.
keyValuePair_name :: Lens' KeyValuePair (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.KeyValuePair.KeyValuePair
instance GHC.Show.Show Amazonka.ECS.Types.KeyValuePair.KeyValuePair
instance GHC.Read.Read Amazonka.ECS.Types.KeyValuePair.KeyValuePair
instance GHC.Classes.Eq Amazonka.ECS.Types.KeyValuePair.KeyValuePair
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.KeyValuePair.KeyValuePair
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.KeyValuePair.KeyValuePair
instance Control.DeepSeq.NFData Amazonka.ECS.Types.KeyValuePair.KeyValuePair
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.KeyValuePair.KeyValuePair


module Amazonka.ECS.Types.Attachment

-- | An object representing a container instance or task attachment.
--   
--   <i>See:</i> <a>newAttachment</a> smart constructor.
data Attachment
Attachment' :: Maybe Text -> Maybe [KeyValuePair] -> Maybe Text -> Maybe Text -> Attachment

-- | The status of the attachment. Valid values are <tt>PRECREATED</tt>,
--   <tt>CREATED</tt>, <tt>ATTACHING</tt>, <tt>ATTACHED</tt>,
--   <tt>DETACHING</tt>, <tt>DETACHED</tt>, and <tt>DELETED</tt>.
[$sel:status:Attachment'] :: Attachment -> Maybe Text

-- | Details of the attachment. For elastic network interfaces, this
--   includes the network interface ID, the MAC address, the subnet ID, and
--   the private IPv4 address.
[$sel:details:Attachment'] :: Attachment -> Maybe [KeyValuePair]

-- | The unique identifier for the attachment.
[$sel:id:Attachment'] :: Attachment -> Maybe Text

-- | The type of the attachment, such as <tt>ElasticNetworkInterface</tt>.
[$sel:type':Attachment'] :: Attachment -> Maybe Text

-- | Create a value of <a>Attachment</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:Attachment'</a>, <a>attachment_status</a> - The status
--   of the attachment. Valid values are <tt>PRECREATED</tt>,
--   <tt>CREATED</tt>, <tt>ATTACHING</tt>, <tt>ATTACHED</tt>,
--   <tt>DETACHING</tt>, <tt>DETACHED</tt>, and <tt>DELETED</tt>.
--   
--   <a>$sel:details:Attachment'</a>, <a>attachment_details</a> - Details
--   of the attachment. For elastic network interfaces, this includes the
--   network interface ID, the MAC address, the subnet ID, and the private
--   IPv4 address.
--   
--   <a>$sel:id:Attachment'</a>, <a>attachment_id</a> - The unique
--   identifier for the attachment.
--   
--   <a>$sel:type':Attachment'</a>, <a>attachment_type</a> - The type of
--   the attachment, such as <tt>ElasticNetworkInterface</tt>.
newAttachment :: Attachment

-- | The status of the attachment. Valid values are <tt>PRECREATED</tt>,
--   <tt>CREATED</tt>, <tt>ATTACHING</tt>, <tt>ATTACHED</tt>,
--   <tt>DETACHING</tt>, <tt>DETACHED</tt>, and <tt>DELETED</tt>.
attachment_status :: Lens' Attachment (Maybe Text)

-- | Details of the attachment. For elastic network interfaces, this
--   includes the network interface ID, the MAC address, the subnet ID, and
--   the private IPv4 address.
attachment_details :: Lens' Attachment (Maybe [KeyValuePair])

-- | The unique identifier for the attachment.
attachment_id :: Lens' Attachment (Maybe Text)

-- | The type of the attachment, such as <tt>ElasticNetworkInterface</tt>.
attachment_type :: Lens' Attachment (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.Attachment.Attachment
instance GHC.Show.Show Amazonka.ECS.Types.Attachment.Attachment
instance GHC.Read.Read Amazonka.ECS.Types.Attachment.Attachment
instance GHC.Classes.Eq Amazonka.ECS.Types.Attachment.Attachment
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Attachment.Attachment
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Attachment.Attachment
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Attachment.Attachment


module Amazonka.ECS.Types.LaunchType
newtype LaunchType
LaunchType' :: Text -> LaunchType
[fromLaunchType] :: LaunchType -> Text
pattern LaunchType_EC2 :: LaunchType
pattern LaunchType_EXTERNAL :: LaunchType
pattern LaunchType_FARGATE :: LaunchType
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.LaunchType.LaunchType
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.LaunchType.LaunchType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.LaunchType.LaunchType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.LaunchType.LaunchType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.LaunchType.LaunchType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.LaunchType.LaunchType
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.LaunchType.LaunchType
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.LaunchType.LaunchType
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.LaunchType.LaunchType
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.LaunchType.LaunchType
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.LaunchType.LaunchType
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.LaunchType.LaunchType
instance Control.DeepSeq.NFData Amazonka.ECS.Types.LaunchType.LaunchType
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.LaunchType.LaunchType
instance GHC.Generics.Generic Amazonka.ECS.Types.LaunchType.LaunchType
instance GHC.Classes.Ord Amazonka.ECS.Types.LaunchType.LaunchType
instance GHC.Classes.Eq Amazonka.ECS.Types.LaunchType.LaunchType
instance GHC.Read.Read Amazonka.ECS.Types.LaunchType.LaunchType
instance GHC.Show.Show Amazonka.ECS.Types.LaunchType.LaunchType


module Amazonka.ECS.Types.LoadBalancer

-- | The load balancer configuration to use with a service or task set.
--   
--   For specific notes and restrictions regarding the use of load
--   balancers with services and task sets, see the CreateService and
--   CreateTaskSet actions.
--   
--   <i>See:</i> <a>newLoadBalancer</a> smart constructor.
data LoadBalancer
LoadBalancer' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> LoadBalancer

-- | The name of the load balancer to associate with the Amazon ECS service
--   or task set.
--   
--   A load balancer name is only specified when using a Classic Load
--   Balancer. If you are using an Application Load Balancer or a Network
--   Load Balancer the load balancer name parameter should be omitted.
[$sel:loadBalancerName:LoadBalancer'] :: LoadBalancer -> Maybe Text

-- | The name of the container (as it appears in a container definition) to
--   associate with the load balancer.
[$sel:containerName:LoadBalancer'] :: LoadBalancer -> Maybe Text

-- | The full Amazon Resource Name (ARN) of the Elastic Load Balancing
--   target group or groups associated with a service or task set.
--   
--   A target group ARN is only specified when using an Application Load
--   Balancer or Network Load Balancer. If you are using a Classic Load
--   Balancer the target group ARN should be omitted.
--   
--   For services using the <tt>ECS</tt> deployment controller, you can
--   specify one or multiple target groups. For more information, see
--   <a>Registering Multiple Target Groups with a Service</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For services using the <tt>CODE_DEPLOY</tt> deployment controller, you
--   are required to define two target groups for the load balancer. For
--   more information, see <a>Blue/Green Deployment with CodeDeploy</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your service's task definition uses the <tt>awsvpc</tt> network
--   mode (which is required for the Fargate launch type), you must choose
--   <tt>ip</tt> as the target type, not <tt>instance</tt>, when creating
--   your target groups because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
[$sel:targetGroupArn:LoadBalancer'] :: LoadBalancer -> Maybe Text

-- | The port on the container to associate with the load balancer. This
--   port must correspond to a <tt>containerPort</tt> in the task
--   definition the tasks in the service are using. For tasks that use the
--   EC2 launch type, the container instance they are launched on must
--   allow ingress traffic on the <tt>hostPort</tt> of the port mapping.
[$sel:containerPort:LoadBalancer'] :: LoadBalancer -> Maybe Int

-- | Create a value of <a>LoadBalancer</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:loadBalancerName:LoadBalancer'</a>,
--   <a>loadBalancer_loadBalancerName</a> - The name of the load balancer
--   to associate with the Amazon ECS service or task set.
--   
--   A load balancer name is only specified when using a Classic Load
--   Balancer. If you are using an Application Load Balancer or a Network
--   Load Balancer the load balancer name parameter should be omitted.
--   
--   <a>$sel:containerName:LoadBalancer'</a>,
--   <a>loadBalancer_containerName</a> - The name of the container (as it
--   appears in a container definition) to associate with the load
--   balancer.
--   
--   <a>$sel:targetGroupArn:LoadBalancer'</a>,
--   <a>loadBalancer_targetGroupArn</a> - The full Amazon Resource Name
--   (ARN) of the Elastic Load Balancing target group or groups associated
--   with a service or task set.
--   
--   A target group ARN is only specified when using an Application Load
--   Balancer or Network Load Balancer. If you are using a Classic Load
--   Balancer the target group ARN should be omitted.
--   
--   For services using the <tt>ECS</tt> deployment controller, you can
--   specify one or multiple target groups. For more information, see
--   <a>Registering Multiple Target Groups with a Service</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For services using the <tt>CODE_DEPLOY</tt> deployment controller, you
--   are required to define two target groups for the load balancer. For
--   more information, see <a>Blue/Green Deployment with CodeDeploy</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your service's task definition uses the <tt>awsvpc</tt> network
--   mode (which is required for the Fargate launch type), you must choose
--   <tt>ip</tt> as the target type, not <tt>instance</tt>, when creating
--   your target groups because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
--   
--   <a>$sel:containerPort:LoadBalancer'</a>,
--   <a>loadBalancer_containerPort</a> - The port on the container to
--   associate with the load balancer. This port must correspond to a
--   <tt>containerPort</tt> in the task definition the tasks in the service
--   are using. For tasks that use the EC2 launch type, the container
--   instance they are launched on must allow ingress traffic on the
--   <tt>hostPort</tt> of the port mapping.
newLoadBalancer :: LoadBalancer

-- | The name of the load balancer to associate with the Amazon ECS service
--   or task set.
--   
--   A load balancer name is only specified when using a Classic Load
--   Balancer. If you are using an Application Load Balancer or a Network
--   Load Balancer the load balancer name parameter should be omitted.
loadBalancer_loadBalancerName :: Lens' LoadBalancer (Maybe Text)

-- | The name of the container (as it appears in a container definition) to
--   associate with the load balancer.
loadBalancer_containerName :: Lens' LoadBalancer (Maybe Text)

-- | The full Amazon Resource Name (ARN) of the Elastic Load Balancing
--   target group or groups associated with a service or task set.
--   
--   A target group ARN is only specified when using an Application Load
--   Balancer or Network Load Balancer. If you are using a Classic Load
--   Balancer the target group ARN should be omitted.
--   
--   For services using the <tt>ECS</tt> deployment controller, you can
--   specify one or multiple target groups. For more information, see
--   <a>Registering Multiple Target Groups with a Service</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For services using the <tt>CODE_DEPLOY</tt> deployment controller, you
--   are required to define two target groups for the load balancer. For
--   more information, see <a>Blue/Green Deployment with CodeDeploy</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your service's task definition uses the <tt>awsvpc</tt> network
--   mode (which is required for the Fargate launch type), you must choose
--   <tt>ip</tt> as the target type, not <tt>instance</tt>, when creating
--   your target groups because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
loadBalancer_targetGroupArn :: Lens' LoadBalancer (Maybe Text)

-- | The port on the container to associate with the load balancer. This
--   port must correspond to a <tt>containerPort</tt> in the task
--   definition the tasks in the service are using. For tasks that use the
--   EC2 launch type, the container instance they are launched on must
--   allow ingress traffic on the <tt>hostPort</tt> of the port mapping.
loadBalancer_containerPort :: Lens' LoadBalancer (Maybe Int)
instance GHC.Generics.Generic Amazonka.ECS.Types.LoadBalancer.LoadBalancer
instance GHC.Show.Show Amazonka.ECS.Types.LoadBalancer.LoadBalancer
instance GHC.Read.Read Amazonka.ECS.Types.LoadBalancer.LoadBalancer
instance GHC.Classes.Eq Amazonka.ECS.Types.LoadBalancer.LoadBalancer
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.LoadBalancer.LoadBalancer
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.LoadBalancer.LoadBalancer
instance Control.DeepSeq.NFData Amazonka.ECS.Types.LoadBalancer.LoadBalancer
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.LoadBalancer.LoadBalancer


module Amazonka.ECS.Types.LogDriver
newtype LogDriver
LogDriver' :: Text -> LogDriver
[fromLogDriver] :: LogDriver -> Text
pattern LogDriver_Awsfirelens :: LogDriver
pattern LogDriver_Awslogs :: LogDriver
pattern LogDriver_Fluentd :: LogDriver
pattern LogDriver_Gelf :: LogDriver
pattern LogDriver_Journald :: LogDriver
pattern LogDriver_Json_file :: LogDriver
pattern LogDriver_Splunk :: LogDriver
pattern LogDriver_Syslog :: LogDriver
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.LogDriver.LogDriver
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.LogDriver.LogDriver
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.LogDriver.LogDriver
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.LogDriver.LogDriver
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.LogDriver.LogDriver
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.LogDriver.LogDriver
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.LogDriver.LogDriver
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.LogDriver.LogDriver
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.LogDriver.LogDriver
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.LogDriver.LogDriver
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.LogDriver.LogDriver
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.LogDriver.LogDriver
instance Control.DeepSeq.NFData Amazonka.ECS.Types.LogDriver.LogDriver
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.LogDriver.LogDriver
instance GHC.Generics.Generic Amazonka.ECS.Types.LogDriver.LogDriver
instance GHC.Classes.Ord Amazonka.ECS.Types.LogDriver.LogDriver
instance GHC.Classes.Eq Amazonka.ECS.Types.LogDriver.LogDriver
instance GHC.Read.Read Amazonka.ECS.Types.LogDriver.LogDriver
instance GHC.Show.Show Amazonka.ECS.Types.LogDriver.LogDriver


module Amazonka.ECS.Types.ManagedAgentName
newtype ManagedAgentName
ManagedAgentName' :: Text -> ManagedAgentName
[fromManagedAgentName] :: ManagedAgentName -> Text
pattern ManagedAgentName_ExecuteCommandAgent :: ManagedAgentName
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance GHC.Generics.Generic Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance GHC.Classes.Ord Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance GHC.Classes.Eq Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance GHC.Read.Read Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName
instance GHC.Show.Show Amazonka.ECS.Types.ManagedAgentName.ManagedAgentName


module Amazonka.ECS.Types.ManagedAgent

-- | Details about the managed agent status for the container.
--   
--   <i>See:</i> <a>newManagedAgent</a> smart constructor.
data ManagedAgent
ManagedAgent' :: Maybe Text -> Maybe Text -> Maybe ManagedAgentName -> Maybe POSIX -> ManagedAgent

-- | The last known status of the managed agent.
[$sel:lastStatus:ManagedAgent'] :: ManagedAgent -> Maybe Text

-- | The reason for why the managed agent is in the state it is in.
[$sel:reason:ManagedAgent'] :: ManagedAgent -> Maybe Text

-- | The name of the managed agent. When the execute command feature is
--   enabled, the managed agent name is <tt>ExecuteCommandAgent</tt>.
[$sel:name:ManagedAgent'] :: ManagedAgent -> Maybe ManagedAgentName

-- | The Unix timestamp for when the managed agent was last started.
[$sel:lastStartedAt:ManagedAgent'] :: ManagedAgent -> Maybe POSIX

-- | Create a value of <a>ManagedAgent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastStatus:ManagedAgent'</a>, <a>managedAgent_lastStatus</a> -
--   The last known status of the managed agent.
--   
--   <a>$sel:reason:ManagedAgent'</a>, <a>managedAgent_reason</a> - The
--   reason for why the managed agent is in the state it is in.
--   
--   <a>$sel:name:ManagedAgent'</a>, <a>managedAgent_name</a> - The name of
--   the managed agent. When the execute command feature is enabled, the
--   managed agent name is <tt>ExecuteCommandAgent</tt>.
--   
--   <a>$sel:lastStartedAt:ManagedAgent'</a>,
--   <a>managedAgent_lastStartedAt</a> - The Unix timestamp for when the
--   managed agent was last started.
newManagedAgent :: ManagedAgent

-- | The last known status of the managed agent.
managedAgent_lastStatus :: Lens' ManagedAgent (Maybe Text)

-- | The reason for why the managed agent is in the state it is in.
managedAgent_reason :: Lens' ManagedAgent (Maybe Text)

-- | The name of the managed agent. When the execute command feature is
--   enabled, the managed agent name is <tt>ExecuteCommandAgent</tt>.
managedAgent_name :: Lens' ManagedAgent (Maybe ManagedAgentName)

-- | The Unix timestamp for when the managed agent was last started.
managedAgent_lastStartedAt :: Lens' ManagedAgent (Maybe UTCTime)
instance GHC.Generics.Generic Amazonka.ECS.Types.ManagedAgent.ManagedAgent
instance GHC.Show.Show Amazonka.ECS.Types.ManagedAgent.ManagedAgent
instance GHC.Read.Read Amazonka.ECS.Types.ManagedAgent.ManagedAgent
instance GHC.Classes.Eq Amazonka.ECS.Types.ManagedAgent.ManagedAgent
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ManagedAgent.ManagedAgent
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ManagedAgent.ManagedAgent
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ManagedAgent.ManagedAgent


module Amazonka.ECS.Types.ManagedAgentStateChange

-- | An object representing a change in state for a managed agent.
--   
--   <i>See:</i> <a>newManagedAgentStateChange</a> smart constructor.
data ManagedAgentStateChange
ManagedAgentStateChange' :: Maybe Text -> Text -> ManagedAgentName -> Text -> ManagedAgentStateChange

-- | The reason for the status of the managed agent.
[$sel:reason:ManagedAgentStateChange'] :: ManagedAgentStateChange -> Maybe Text

-- | The name of the container associated with the managed agent.
[$sel:containerName:ManagedAgentStateChange'] :: ManagedAgentStateChange -> Text

-- | The name of the managed agent.
[$sel:managedAgentName:ManagedAgentStateChange'] :: ManagedAgentStateChange -> ManagedAgentName

-- | The status of the managed agent.
[$sel:status:ManagedAgentStateChange'] :: ManagedAgentStateChange -> Text

-- | Create a value of <a>ManagedAgentStateChange</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:reason:ManagedAgentStateChange'</a>,
--   <a>managedAgentStateChange_reason</a> - The reason for the status of
--   the managed agent.
--   
--   <a>$sel:containerName:ManagedAgentStateChange'</a>,
--   <a>managedAgentStateChange_containerName</a> - The name of the
--   container associated with the managed agent.
--   
--   <a>$sel:managedAgentName:ManagedAgentStateChange'</a>,
--   <a>managedAgentStateChange_managedAgentName</a> - The name of the
--   managed agent.
--   
--   <a>$sel:status:ManagedAgentStateChange'</a>,
--   <a>managedAgentStateChange_status</a> - The status of the managed
--   agent.
newManagedAgentStateChange :: Text -> ManagedAgentName -> Text -> ManagedAgentStateChange

-- | The reason for the status of the managed agent.
managedAgentStateChange_reason :: Lens' ManagedAgentStateChange (Maybe Text)

-- | The name of the container associated with the managed agent.
managedAgentStateChange_containerName :: Lens' ManagedAgentStateChange Text

-- | The name of the managed agent.
managedAgentStateChange_managedAgentName :: Lens' ManagedAgentStateChange ManagedAgentName

-- | The status of the managed agent.
managedAgentStateChange_status :: Lens' ManagedAgentStateChange Text
instance GHC.Generics.Generic Amazonka.ECS.Types.ManagedAgentStateChange.ManagedAgentStateChange
instance GHC.Show.Show Amazonka.ECS.Types.ManagedAgentStateChange.ManagedAgentStateChange
instance GHC.Read.Read Amazonka.ECS.Types.ManagedAgentStateChange.ManagedAgentStateChange
instance GHC.Classes.Eq Amazonka.ECS.Types.ManagedAgentStateChange.ManagedAgentStateChange
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ManagedAgentStateChange.ManagedAgentStateChange
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ManagedAgentStateChange.ManagedAgentStateChange
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ManagedAgentStateChange.ManagedAgentStateChange


module Amazonka.ECS.Types.ManagedScalingStatus
newtype ManagedScalingStatus
ManagedScalingStatus' :: Text -> ManagedScalingStatus
[fromManagedScalingStatus] :: ManagedScalingStatus -> Text
pattern ManagedScalingStatus_DISABLED :: ManagedScalingStatus
pattern ManagedScalingStatus_ENABLED :: ManagedScalingStatus
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance GHC.Generics.Generic Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance GHC.Classes.Ord Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance GHC.Classes.Eq Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance GHC.Read.Read Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus
instance GHC.Show.Show Amazonka.ECS.Types.ManagedScalingStatus.ManagedScalingStatus


module Amazonka.ECS.Types.ManagedScaling

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
--   
--   When managed scaling is enabled, Amazon ECS manages the scale-in and
--   scale-out actions of the Auto Scaling group. Amazon ECS manages a
--   target tracking scaling policy using an Amazon ECS-managed CloudWatch
--   metric with the specified <tt>targetCapacity</tt> value as the target
--   value for the metric. For more information, see <a>Using Managed
--   Scaling</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   If managed scaling is disabled, the user must manage the scaling of
--   the Auto Scaling group.
--   
--   <i>See:</i> <a>newManagedScaling</a> smart constructor.
data ManagedScaling
ManagedScaling' :: Maybe ManagedScalingStatus -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Natural -> ManagedScaling

-- | Whether or not to enable managed scaling for the capacity provider.
[$sel:status:ManagedScaling'] :: ManagedScaling -> Maybe ManagedScalingStatus

-- | The maximum number of container instances that Amazon ECS will scale
--   in or scale out at one time. If this parameter is omitted, the default
--   value of <tt>10000</tt> is used.
[$sel:maximumScalingStepSize:ManagedScaling'] :: ManagedScaling -> Maybe Natural

-- | The target capacity value for the capacity provider. The specified
--   value must be greater than <tt>0</tt> and less than or equal to
--   <tt>100</tt>. A value of <tt>100</tt> will result in the Amazon EC2
--   instances in your Auto Scaling group being completely utilized.
[$sel:targetCapacity:ManagedScaling'] :: ManagedScaling -> Maybe Natural

-- | The minimum number of container instances that Amazon ECS will scale
--   in or scale out at one time. If this parameter is omitted, the default
--   value of <tt>1</tt> is used.
[$sel:minimumScalingStepSize:ManagedScaling'] :: ManagedScaling -> Maybe Natural

-- | The period of time, in seconds, after a newly launched Amazon EC2
--   instance can contribute to CloudWatch metrics for Auto Scaling group.
--   If this parameter is omitted, the default value of <tt>300</tt>
--   seconds is used.
[$sel:instanceWarmupPeriod:ManagedScaling'] :: ManagedScaling -> Maybe Natural

-- | Create a value of <a>ManagedScaling</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ManagedScaling'</a>, <a>managedScaling_status</a> -
--   Whether or not to enable managed scaling for the capacity provider.
--   
--   <a>$sel:maximumScalingStepSize:ManagedScaling'</a>,
--   <a>managedScaling_maximumScalingStepSize</a> - The maximum number of
--   container instances that Amazon ECS will scale in or scale out at one
--   time. If this parameter is omitted, the default value of
--   <tt>10000</tt> is used.
--   
--   <a>$sel:targetCapacity:ManagedScaling'</a>,
--   <a>managedScaling_targetCapacity</a> - The target capacity value for
--   the capacity provider. The specified value must be greater than
--   <tt>0</tt> and less than or equal to <tt>100</tt>. A value of
--   <tt>100</tt> will result in the Amazon EC2 instances in your Auto
--   Scaling group being completely utilized.
--   
--   <a>$sel:minimumScalingStepSize:ManagedScaling'</a>,
--   <a>managedScaling_minimumScalingStepSize</a> - The minimum number of
--   container instances that Amazon ECS will scale in or scale out at one
--   time. If this parameter is omitted, the default value of <tt>1</tt> is
--   used.
--   
--   <a>$sel:instanceWarmupPeriod:ManagedScaling'</a>,
--   <a>managedScaling_instanceWarmupPeriod</a> - The period of time, in
--   seconds, after a newly launched Amazon EC2 instance can contribute to
--   CloudWatch metrics for Auto Scaling group. If this parameter is
--   omitted, the default value of <tt>300</tt> seconds is used.
newManagedScaling :: ManagedScaling

-- | Whether or not to enable managed scaling for the capacity provider.
managedScaling_status :: Lens' ManagedScaling (Maybe ManagedScalingStatus)

-- | The maximum number of container instances that Amazon ECS will scale
--   in or scale out at one time. If this parameter is omitted, the default
--   value of <tt>10000</tt> is used.
managedScaling_maximumScalingStepSize :: Lens' ManagedScaling (Maybe Natural)

-- | The target capacity value for the capacity provider. The specified
--   value must be greater than <tt>0</tt> and less than or equal to
--   <tt>100</tt>. A value of <tt>100</tt> will result in the Amazon EC2
--   instances in your Auto Scaling group being completely utilized.
managedScaling_targetCapacity :: Lens' ManagedScaling (Maybe Natural)

-- | The minimum number of container instances that Amazon ECS will scale
--   in or scale out at one time. If this parameter is omitted, the default
--   value of <tt>1</tt> is used.
managedScaling_minimumScalingStepSize :: Lens' ManagedScaling (Maybe Natural)

-- | The period of time, in seconds, after a newly launched Amazon EC2
--   instance can contribute to CloudWatch metrics for Auto Scaling group.
--   If this parameter is omitted, the default value of <tt>300</tt>
--   seconds is used.
managedScaling_instanceWarmupPeriod :: Lens' ManagedScaling (Maybe Natural)
instance GHC.Generics.Generic Amazonka.ECS.Types.ManagedScaling.ManagedScaling
instance GHC.Show.Show Amazonka.ECS.Types.ManagedScaling.ManagedScaling
instance GHC.Read.Read Amazonka.ECS.Types.ManagedScaling.ManagedScaling
instance GHC.Classes.Eq Amazonka.ECS.Types.ManagedScaling.ManagedScaling
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ManagedScaling.ManagedScaling
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ManagedScaling.ManagedScaling
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ManagedScaling.ManagedScaling
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ManagedScaling.ManagedScaling


module Amazonka.ECS.Types.ManagedTerminationProtection
newtype ManagedTerminationProtection
ManagedTerminationProtection' :: Text -> ManagedTerminationProtection
[fromManagedTerminationProtection] :: ManagedTerminationProtection -> Text
pattern ManagedTerminationProtection_DISABLED :: ManagedTerminationProtection
pattern ManagedTerminationProtection_ENABLED :: ManagedTerminationProtection
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance GHC.Generics.Generic Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance GHC.Classes.Ord Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance GHC.Classes.Eq Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance GHC.Read.Read Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection
instance GHC.Show.Show Amazonka.ECS.Types.ManagedTerminationProtection.ManagedTerminationProtection


module Amazonka.ECS.Types.AutoScalingGroupProviderUpdate

-- | The details of the Auto Scaling group capacity provider to update.
--   
--   <i>See:</i> <a>newAutoScalingGroupProviderUpdate</a> smart
--   constructor.
data AutoScalingGroupProviderUpdate
AutoScalingGroupProviderUpdate' :: Maybe ManagedScaling -> Maybe ManagedTerminationProtection -> AutoScalingGroupProviderUpdate

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
[$sel:managedScaling:AutoScalingGroupProviderUpdate'] :: AutoScalingGroupProviderUpdate -> Maybe ManagedScaling

-- | The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
[$sel:managedTerminationProtection:AutoScalingGroupProviderUpdate'] :: AutoScalingGroupProviderUpdate -> Maybe ManagedTerminationProtection

-- | Create a value of <a>AutoScalingGroupProviderUpdate</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:managedScaling:AutoScalingGroupProviderUpdate'</a>,
--   <a>autoScalingGroupProviderUpdate_managedScaling</a> - The managed
--   scaling settings for the Auto Scaling group capacity provider.
--   
--   
--   <a>$sel:managedTerminationProtection:AutoScalingGroupProviderUpdate'</a>,
--   <a>autoScalingGroupProviderUpdate_managedTerminationProtection</a> -
--   The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
newAutoScalingGroupProviderUpdate :: AutoScalingGroupProviderUpdate

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
autoScalingGroupProviderUpdate_managedScaling :: Lens' AutoScalingGroupProviderUpdate (Maybe ManagedScaling)

-- | The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
autoScalingGroupProviderUpdate_managedTerminationProtection :: Lens' AutoScalingGroupProviderUpdate (Maybe ManagedTerminationProtection)
instance GHC.Generics.Generic Amazonka.ECS.Types.AutoScalingGroupProviderUpdate.AutoScalingGroupProviderUpdate
instance GHC.Show.Show Amazonka.ECS.Types.AutoScalingGroupProviderUpdate.AutoScalingGroupProviderUpdate
instance GHC.Read.Read Amazonka.ECS.Types.AutoScalingGroupProviderUpdate.AutoScalingGroupProviderUpdate
instance GHC.Classes.Eq Amazonka.ECS.Types.AutoScalingGroupProviderUpdate.AutoScalingGroupProviderUpdate
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.AutoScalingGroupProviderUpdate.AutoScalingGroupProviderUpdate
instance Control.DeepSeq.NFData Amazonka.ECS.Types.AutoScalingGroupProviderUpdate.AutoScalingGroupProviderUpdate
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.AutoScalingGroupProviderUpdate.AutoScalingGroupProviderUpdate


module Amazonka.ECS.Types.AutoScalingGroupProvider

-- | The details of the Auto Scaling group for the capacity provider.
--   
--   <i>See:</i> <a>newAutoScalingGroupProvider</a> smart constructor.
data AutoScalingGroupProvider
AutoScalingGroupProvider' :: Maybe ManagedScaling -> Maybe ManagedTerminationProtection -> Text -> AutoScalingGroupProvider

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
[$sel:managedScaling:AutoScalingGroupProvider'] :: AutoScalingGroupProvider -> Maybe ManagedScaling

-- | The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
[$sel:managedTerminationProtection:AutoScalingGroupProvider'] :: AutoScalingGroupProvider -> Maybe ManagedTerminationProtection

-- | The Amazon Resource Name (ARN) that identifies the Auto Scaling group.
[$sel:autoScalingGroupArn:AutoScalingGroupProvider'] :: AutoScalingGroupProvider -> Text

-- | Create a value of <a>AutoScalingGroupProvider</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:managedScaling:AutoScalingGroupProvider'</a>,
--   <a>autoScalingGroupProvider_managedScaling</a> - The managed scaling
--   settings for the Auto Scaling group capacity provider.
--   
--   <a>$sel:managedTerminationProtection:AutoScalingGroupProvider'</a>,
--   <a>autoScalingGroupProvider_managedTerminationProtection</a> - The
--   managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
--   
--   <a>$sel:autoScalingGroupArn:AutoScalingGroupProvider'</a>,
--   <a>autoScalingGroupProvider_autoScalingGroupArn</a> - The Amazon
--   Resource Name (ARN) that identifies the Auto Scaling group.
newAutoScalingGroupProvider :: Text -> AutoScalingGroupProvider

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
autoScalingGroupProvider_managedScaling :: Lens' AutoScalingGroupProvider (Maybe ManagedScaling)

-- | The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
autoScalingGroupProvider_managedTerminationProtection :: Lens' AutoScalingGroupProvider (Maybe ManagedTerminationProtection)

-- | The Amazon Resource Name (ARN) that identifies the Auto Scaling group.
autoScalingGroupProvider_autoScalingGroupArn :: Lens' AutoScalingGroupProvider Text
instance GHC.Generics.Generic Amazonka.ECS.Types.AutoScalingGroupProvider.AutoScalingGroupProvider
instance GHC.Show.Show Amazonka.ECS.Types.AutoScalingGroupProvider.AutoScalingGroupProvider
instance GHC.Read.Read Amazonka.ECS.Types.AutoScalingGroupProvider.AutoScalingGroupProvider
instance GHC.Classes.Eq Amazonka.ECS.Types.AutoScalingGroupProvider.AutoScalingGroupProvider
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.AutoScalingGroupProvider.AutoScalingGroupProvider
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.AutoScalingGroupProvider.AutoScalingGroupProvider
instance Control.DeepSeq.NFData Amazonka.ECS.Types.AutoScalingGroupProvider.AutoScalingGroupProvider
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.AutoScalingGroupProvider.AutoScalingGroupProvider


module Amazonka.ECS.Types.MountPoint

-- | Details on a volume mount point that is used in a container
--   definition.
--   
--   <i>See:</i> <a>newMountPoint</a> smart constructor.
data MountPoint
MountPoint' :: Maybe Text -> Maybe Text -> Maybe Bool -> MountPoint

-- | The path on the container to mount the host volume at.
[$sel:containerPath:MountPoint'] :: MountPoint -> Maybe Text

-- | The name of the volume to mount. Must be a volume name referenced in
--   the <tt>name</tt> parameter of task definition <tt>volume</tt>.
[$sel:sourceVolume:MountPoint'] :: MountPoint -> Maybe Text

-- | If this value is <tt>true</tt>, the container has read-only access to
--   the volume. If this value is <tt>false</tt>, then the container can
--   write to the volume. The default value is <tt>false</tt>.
[$sel:readOnly:MountPoint'] :: MountPoint -> Maybe Bool

-- | Create a value of <a>MountPoint</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerPath:MountPoint'</a>, <a>mountPoint_containerPath</a>
--   - The path on the container to mount the host volume at.
--   
--   <a>$sel:sourceVolume:MountPoint'</a>, <a>mountPoint_sourceVolume</a> -
--   The name of the volume to mount. Must be a volume name referenced in
--   the <tt>name</tt> parameter of task definition <tt>volume</tt>.
--   
--   <a>$sel:readOnly:MountPoint'</a>, <a>mountPoint_readOnly</a> - If this
--   value is <tt>true</tt>, the container has read-only access to the
--   volume. If this value is <tt>false</tt>, then the container can write
--   to the volume. The default value is <tt>false</tt>.
newMountPoint :: MountPoint

-- | The path on the container to mount the host volume at.
mountPoint_containerPath :: Lens' MountPoint (Maybe Text)

-- | The name of the volume to mount. Must be a volume name referenced in
--   the <tt>name</tt> parameter of task definition <tt>volume</tt>.
mountPoint_sourceVolume :: Lens' MountPoint (Maybe Text)

-- | If this value is <tt>true</tt>, the container has read-only access to
--   the volume. If this value is <tt>false</tt>, then the container can
--   write to the volume. The default value is <tt>false</tt>.
mountPoint_readOnly :: Lens' MountPoint (Maybe Bool)
instance GHC.Generics.Generic Amazonka.ECS.Types.MountPoint.MountPoint
instance GHC.Show.Show Amazonka.ECS.Types.MountPoint.MountPoint
instance GHC.Read.Read Amazonka.ECS.Types.MountPoint.MountPoint
instance GHC.Classes.Eq Amazonka.ECS.Types.MountPoint.MountPoint
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.MountPoint.MountPoint
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.MountPoint.MountPoint
instance Control.DeepSeq.NFData Amazonka.ECS.Types.MountPoint.MountPoint
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.MountPoint.MountPoint


module Amazonka.ECS.Types.NetworkConfiguration

-- | An object representing the network configuration for a task or
--   service.
--   
--   <i>See:</i> <a>newNetworkConfiguration</a> smart constructor.
data NetworkConfiguration
NetworkConfiguration' :: Maybe AwsVpcConfiguration -> NetworkConfiguration

-- | The VPC subnets and security groups associated with a task.
--   
--   All specified subnets and security groups must be from the same VPC.
[$sel:awsvpcConfiguration:NetworkConfiguration'] :: NetworkConfiguration -> Maybe AwsVpcConfiguration

-- | Create a value of <a>NetworkConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:awsvpcConfiguration:NetworkConfiguration'</a>,
--   <a>networkConfiguration_awsvpcConfiguration</a> - The VPC subnets and
--   security groups associated with a task.
--   
--   All specified subnets and security groups must be from the same VPC.
newNetworkConfiguration :: NetworkConfiguration

-- | The VPC subnets and security groups associated with a task.
--   
--   All specified subnets and security groups must be from the same VPC.
networkConfiguration_awsvpcConfiguration :: Lens' NetworkConfiguration (Maybe AwsVpcConfiguration)
instance GHC.Generics.Generic Amazonka.ECS.Types.NetworkConfiguration.NetworkConfiguration
instance GHC.Show.Show Amazonka.ECS.Types.NetworkConfiguration.NetworkConfiguration
instance GHC.Read.Read Amazonka.ECS.Types.NetworkConfiguration.NetworkConfiguration
instance GHC.Classes.Eq Amazonka.ECS.Types.NetworkConfiguration.NetworkConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.NetworkConfiguration.NetworkConfiguration
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.NetworkConfiguration.NetworkConfiguration
instance Control.DeepSeq.NFData Amazonka.ECS.Types.NetworkConfiguration.NetworkConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.NetworkConfiguration.NetworkConfiguration


module Amazonka.ECS.Types.Deployment

-- | The details of an Amazon ECS service deployment. This is used only
--   when a service uses the <tt>ECS</tt> deployment controller type.
--   
--   <i>See:</i> <a>newDeployment</a> smart constructor.
data Deployment
Deployment' :: Maybe DeploymentRolloutState -> Maybe Int -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe LaunchType -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe NetworkConfiguration -> Maybe [CapacityProviderStrategyItem] -> Deployment

-- | The <tt>rolloutState</tt> of a service is only returned for services
--   that use the rolling update (<tt>ECS</tt>) deployment type that are
--   not behind a Classic Load Balancer.
--   
--   The rollout state of the deployment. When a service deployment is
--   started, it begins in an <tt>IN_PROGRESS</tt> state. When the service
--   reaches a steady state, the deployment will transition to a
--   <tt>COMPLETED</tt> state. If the service fails to reach a steady state
--   and circuit breaker is enabled, the deployment will transition to a
--   <tt>FAILED</tt> state. A deployment in <tt>FAILED</tt> state will
--   launch no new tasks. For more information, see
--   DeploymentCircuitBreaker.
[$sel:rolloutState:Deployment'] :: Deployment -> Maybe DeploymentRolloutState

-- | The number of tasks in the deployment that are in the <tt>RUNNING</tt>
--   status.
[$sel:runningCount:Deployment'] :: Deployment -> Maybe Int

-- | The status of the deployment. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The most recent deployment of a service.</li>
--   <li><i>ACTIVE</i> A service deployment that still has running tasks,
--   but are in the process of being replaced with a new <tt>PRIMARY</tt>
--   deployment.</li>
--   <li><i>INACTIVE</i> A deployment that has been completely
--   replaced.</li>
--   </ul>
[$sel:status:Deployment'] :: Deployment -> Maybe Text

-- | The Unix timestamp for when the service deployment was created.
[$sel:createdAt:Deployment'] :: Deployment -> Maybe POSIX

-- | The platform version on which your tasks in the service are running. A
--   platform version is only specified for tasks using the Fargate launch
--   type. If one is not specified, the <tt>LATEST</tt> platform version is
--   used by default. For more information, see <a>Fargate Platform
--   Versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:platformVersion:Deployment'] :: Deployment -> Maybe Text

-- | The most recent desired count of tasks that was specified for the
--   service to deploy or maintain.
[$sel:desiredCount:Deployment'] :: Deployment -> Maybe Int

-- | The number of tasks in the deployment that are in the <tt>PENDING</tt>
--   status.
[$sel:pendingCount:Deployment'] :: Deployment -> Maybe Int

-- | The ID of the deployment.
[$sel:id:Deployment'] :: Deployment -> Maybe Text

-- | The number of consecutively failed tasks in the deployment. A task is
--   considered a failure if the service scheduler can't launch the task,
--   the task doesn't transition to a <tt>RUNNING</tt> state, or if it
--   fails any of its defined health checks and is stopped.
--   
--   Once a service deployment has one or more successfully running tasks,
--   the failed task count resets to zero and stops being evaluated.
[$sel:failedTasks:Deployment'] :: Deployment -> Maybe Int

-- | The launch type the tasks in the service are using. For more
--   information, see <a>Amazon ECS Launch Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:launchType:Deployment'] :: Deployment -> Maybe LaunchType

-- | The Unix timestamp for when the service deployment was last updated.
[$sel:updatedAt:Deployment'] :: Deployment -> Maybe POSIX

-- | The most recent task definition that was specified for the tasks in
--   the service to use.
[$sel:taskDefinition:Deployment'] :: Deployment -> Maybe Text

-- | A description of the rollout state of a deployment.
[$sel:rolloutStateReason:Deployment'] :: Deployment -> Maybe Text

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
[$sel:networkConfiguration:Deployment'] :: Deployment -> Maybe NetworkConfiguration

-- | The capacity provider strategy that the deployment is using.
[$sel:capacityProviderStrategy:Deployment'] :: Deployment -> Maybe [CapacityProviderStrategyItem]

-- | Create a value of <a>Deployment</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rolloutState:Deployment'</a>, <a>deployment_rolloutState</a> -
--   The <tt>rolloutState</tt> of a service is only returned for services
--   that use the rolling update (<tt>ECS</tt>) deployment type that are
--   not behind a Classic Load Balancer.
--   
--   The rollout state of the deployment. When a service deployment is
--   started, it begins in an <tt>IN_PROGRESS</tt> state. When the service
--   reaches a steady state, the deployment will transition to a
--   <tt>COMPLETED</tt> state. If the service fails to reach a steady state
--   and circuit breaker is enabled, the deployment will transition to a
--   <tt>FAILED</tt> state. A deployment in <tt>FAILED</tt> state will
--   launch no new tasks. For more information, see
--   DeploymentCircuitBreaker.
--   
--   <a>$sel:runningCount:Deployment'</a>, <a>deployment_runningCount</a> -
--   The number of tasks in the deployment that are in the <tt>RUNNING</tt>
--   status.
--   
--   <a>$sel:status:Deployment'</a>, <a>deployment_status</a> - The status
--   of the deployment. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The most recent deployment of a service.</li>
--   <li><i>ACTIVE</i> A service deployment that still has running tasks,
--   but are in the process of being replaced with a new <tt>PRIMARY</tt>
--   deployment.</li>
--   <li><i>INACTIVE</i> A deployment that has been completely
--   replaced.</li>
--   </ul>
--   
--   <a>$sel:createdAt:Deployment'</a>, <a>deployment_createdAt</a> - The
--   Unix timestamp for when the service deployment was created.
--   
--   <a>$sel:platformVersion:Deployment'</a>,
--   <a>deployment_platformVersion</a> - The platform version on which your
--   tasks in the service are running. A platform version is only specified
--   for tasks using the Fargate launch type. If one is not specified, the
--   <tt>LATEST</tt> platform version is used by default. For more
--   information, see <a>Fargate Platform Versions</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:desiredCount:Deployment'</a>, <a>deployment_desiredCount</a> -
--   The most recent desired count of tasks that was specified for the
--   service to deploy or maintain.
--   
--   <a>$sel:pendingCount:Deployment'</a>, <a>deployment_pendingCount</a> -
--   The number of tasks in the deployment that are in the <tt>PENDING</tt>
--   status.
--   
--   <a>$sel:id:Deployment'</a>, <a>deployment_id</a> - The ID of the
--   deployment.
--   
--   <a>$sel:failedTasks:Deployment'</a>, <a>deployment_failedTasks</a> -
--   The number of consecutively failed tasks in the deployment. A task is
--   considered a failure if the service scheduler can't launch the task,
--   the task doesn't transition to a <tt>RUNNING</tt> state, or if it
--   fails any of its defined health checks and is stopped.
--   
--   Once a service deployment has one or more successfully running tasks,
--   the failed task count resets to zero and stops being evaluated.
--   
--   <a>$sel:launchType:Deployment'</a>, <a>deployment_launchType</a> - The
--   launch type the tasks in the service are using. For more information,
--   see <a>Amazon ECS Launch Types</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:updatedAt:Deployment'</a>, <a>deployment_updatedAt</a> - The
--   Unix timestamp for when the service deployment was last updated.
--   
--   <a>$sel:taskDefinition:Deployment'</a>,
--   <a>deployment_taskDefinition</a> - The most recent task definition
--   that was specified for the tasks in the service to use.
--   
--   <a>$sel:rolloutStateReason:Deployment'</a>,
--   <a>deployment_rolloutStateReason</a> - A description of the rollout
--   state of a deployment.
--   
--   <a>$sel:networkConfiguration:Deployment'</a>,
--   <a>deployment_networkConfiguration</a> - The VPC subnet and security
--   group configuration for tasks that receive their own elastic network
--   interface by using the <tt>awsvpc</tt> networking mode.
--   
--   <a>$sel:capacityProviderStrategy:Deployment'</a>,
--   <a>deployment_capacityProviderStrategy</a> - The capacity provider
--   strategy that the deployment is using.
newDeployment :: Deployment

-- | The <tt>rolloutState</tt> of a service is only returned for services
--   that use the rolling update (<tt>ECS</tt>) deployment type that are
--   not behind a Classic Load Balancer.
--   
--   The rollout state of the deployment. When a service deployment is
--   started, it begins in an <tt>IN_PROGRESS</tt> state. When the service
--   reaches a steady state, the deployment will transition to a
--   <tt>COMPLETED</tt> state. If the service fails to reach a steady state
--   and circuit breaker is enabled, the deployment will transition to a
--   <tt>FAILED</tt> state. A deployment in <tt>FAILED</tt> state will
--   launch no new tasks. For more information, see
--   DeploymentCircuitBreaker.
deployment_rolloutState :: Lens' Deployment (Maybe DeploymentRolloutState)

-- | The number of tasks in the deployment that are in the <tt>RUNNING</tt>
--   status.
deployment_runningCount :: Lens' Deployment (Maybe Int)

-- | The status of the deployment. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The most recent deployment of a service.</li>
--   <li><i>ACTIVE</i> A service deployment that still has running tasks,
--   but are in the process of being replaced with a new <tt>PRIMARY</tt>
--   deployment.</li>
--   <li><i>INACTIVE</i> A deployment that has been completely
--   replaced.</li>
--   </ul>
deployment_status :: Lens' Deployment (Maybe Text)

-- | The Unix timestamp for when the service deployment was created.
deployment_createdAt :: Lens' Deployment (Maybe UTCTime)

-- | The platform version on which your tasks in the service are running. A
--   platform version is only specified for tasks using the Fargate launch
--   type. If one is not specified, the <tt>LATEST</tt> platform version is
--   used by default. For more information, see <a>Fargate Platform
--   Versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
deployment_platformVersion :: Lens' Deployment (Maybe Text)

-- | The most recent desired count of tasks that was specified for the
--   service to deploy or maintain.
deployment_desiredCount :: Lens' Deployment (Maybe Int)

-- | The number of tasks in the deployment that are in the <tt>PENDING</tt>
--   status.
deployment_pendingCount :: Lens' Deployment (Maybe Int)

-- | The ID of the deployment.
deployment_id :: Lens' Deployment (Maybe Text)

-- | The number of consecutively failed tasks in the deployment. A task is
--   considered a failure if the service scheduler can't launch the task,
--   the task doesn't transition to a <tt>RUNNING</tt> state, or if it
--   fails any of its defined health checks and is stopped.
--   
--   Once a service deployment has one or more successfully running tasks,
--   the failed task count resets to zero and stops being evaluated.
deployment_failedTasks :: Lens' Deployment (Maybe Int)

-- | The launch type the tasks in the service are using. For more
--   information, see <a>Amazon ECS Launch Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
deployment_launchType :: Lens' Deployment (Maybe LaunchType)

-- | The Unix timestamp for when the service deployment was last updated.
deployment_updatedAt :: Lens' Deployment (Maybe UTCTime)

-- | The most recent task definition that was specified for the tasks in
--   the service to use.
deployment_taskDefinition :: Lens' Deployment (Maybe Text)

-- | A description of the rollout state of a deployment.
deployment_rolloutStateReason :: Lens' Deployment (Maybe Text)

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
deployment_networkConfiguration :: Lens' Deployment (Maybe NetworkConfiguration)

-- | The capacity provider strategy that the deployment is using.
deployment_capacityProviderStrategy :: Lens' Deployment (Maybe [CapacityProviderStrategyItem])
instance GHC.Generics.Generic Amazonka.ECS.Types.Deployment.Deployment
instance GHC.Show.Show Amazonka.ECS.Types.Deployment.Deployment
instance GHC.Read.Read Amazonka.ECS.Types.Deployment.Deployment
instance GHC.Classes.Eq Amazonka.ECS.Types.Deployment.Deployment
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Deployment.Deployment
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Deployment.Deployment
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Deployment.Deployment


module Amazonka.ECS.Types.NetworkInterface

-- | An object representing the elastic network interface for tasks that
--   use the <tt>awsvpc</tt> network mode.
--   
--   <i>See:</i> <a>newNetworkInterface</a> smart constructor.
data NetworkInterface
NetworkInterface' :: Maybe Text -> Maybe Text -> Maybe Text -> NetworkInterface

-- | The private IPv6 address for the network interface.
[$sel:ipv6Address:NetworkInterface'] :: NetworkInterface -> Maybe Text

-- | The private IPv4 address for the network interface.
[$sel:privateIpv4Address:NetworkInterface'] :: NetworkInterface -> Maybe Text

-- | The attachment ID for the network interface.
[$sel:attachmentId:NetworkInterface'] :: NetworkInterface -> Maybe Text

-- | Create a value of <a>NetworkInterface</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ipv6Address:NetworkInterface'</a>,
--   <a>networkInterface_ipv6Address</a> - The private IPv6 address for the
--   network interface.
--   
--   <a>$sel:privateIpv4Address:NetworkInterface'</a>,
--   <a>networkInterface_privateIpv4Address</a> - The private IPv4 address
--   for the network interface.
--   
--   <a>$sel:attachmentId:NetworkInterface'</a>,
--   <a>networkInterface_attachmentId</a> - The attachment ID for the
--   network interface.
newNetworkInterface :: NetworkInterface

-- | The private IPv6 address for the network interface.
networkInterface_ipv6Address :: Lens' NetworkInterface (Maybe Text)

-- | The private IPv4 address for the network interface.
networkInterface_privateIpv4Address :: Lens' NetworkInterface (Maybe Text)

-- | The attachment ID for the network interface.
networkInterface_attachmentId :: Lens' NetworkInterface (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.NetworkInterface.NetworkInterface
instance GHC.Show.Show Amazonka.ECS.Types.NetworkInterface.NetworkInterface
instance GHC.Read.Read Amazonka.ECS.Types.NetworkInterface.NetworkInterface
instance GHC.Classes.Eq Amazonka.ECS.Types.NetworkInterface.NetworkInterface
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.NetworkInterface.NetworkInterface
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.NetworkInterface.NetworkInterface
instance Control.DeepSeq.NFData Amazonka.ECS.Types.NetworkInterface.NetworkInterface


module Amazonka.ECS.Types.NetworkMode
newtype NetworkMode
NetworkMode' :: Text -> NetworkMode
[fromNetworkMode] :: NetworkMode -> Text
pattern NetworkMode_Awsvpc :: NetworkMode
pattern NetworkMode_Bridge :: NetworkMode
pattern NetworkMode_Host :: NetworkMode
pattern NetworkMode_None :: NetworkMode
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Control.DeepSeq.NFData Amazonka.ECS.Types.NetworkMode.NetworkMode
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.NetworkMode.NetworkMode
instance GHC.Generics.Generic Amazonka.ECS.Types.NetworkMode.NetworkMode
instance GHC.Classes.Ord Amazonka.ECS.Types.NetworkMode.NetworkMode
instance GHC.Classes.Eq Amazonka.ECS.Types.NetworkMode.NetworkMode
instance GHC.Read.Read Amazonka.ECS.Types.NetworkMode.NetworkMode
instance GHC.Show.Show Amazonka.ECS.Types.NetworkMode.NetworkMode


module Amazonka.ECS.Types.PidMode
newtype PidMode
PidMode' :: Text -> PidMode
[fromPidMode] :: PidMode -> Text
pattern PidMode_Host :: PidMode
pattern PidMode_Task :: PidMode
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.PidMode.PidMode
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.PidMode.PidMode
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.PidMode.PidMode
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.PidMode.PidMode
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.PidMode.PidMode
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.PidMode.PidMode
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.PidMode.PidMode
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.PidMode.PidMode
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.PidMode.PidMode
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.PidMode.PidMode
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.PidMode.PidMode
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.PidMode.PidMode
instance Control.DeepSeq.NFData Amazonka.ECS.Types.PidMode.PidMode
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.PidMode.PidMode
instance GHC.Generics.Generic Amazonka.ECS.Types.PidMode.PidMode
instance GHC.Classes.Ord Amazonka.ECS.Types.PidMode.PidMode
instance GHC.Classes.Eq Amazonka.ECS.Types.PidMode.PidMode
instance GHC.Read.Read Amazonka.ECS.Types.PidMode.PidMode
instance GHC.Show.Show Amazonka.ECS.Types.PidMode.PidMode


module Amazonka.ECS.Types.PlacementConstraintType
newtype PlacementConstraintType
PlacementConstraintType' :: Text -> PlacementConstraintType
[fromPlacementConstraintType] :: PlacementConstraintType -> Text
pattern PlacementConstraintType_DistinctInstance :: PlacementConstraintType
pattern PlacementConstraintType_MemberOf :: PlacementConstraintType
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Control.DeepSeq.NFData Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance GHC.Generics.Generic Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance GHC.Classes.Ord Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance GHC.Classes.Eq Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance GHC.Read.Read Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType
instance GHC.Show.Show Amazonka.ECS.Types.PlacementConstraintType.PlacementConstraintType


module Amazonka.ECS.Types.PlacementConstraint

-- | An object representing a constraint on task placement. For more
--   information, see <a>Task Placement Constraints</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   If you are using the Fargate launch type, task placement constraints
--   are not supported.
--   
--   <i>See:</i> <a>newPlacementConstraint</a> smart constructor.
data PlacementConstraint
PlacementConstraint' :: Maybe Text -> Maybe PlacementConstraintType -> PlacementConstraint

-- | A cluster query language expression to apply to the constraint. The
--   expression can have a maximum length of 2000 characters. You can't
--   specify an expression if the constraint type is
--   <tt>distinctInstance</tt>. For more information, see <a>Cluster query
--   language</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:expression:PlacementConstraint'] :: PlacementConstraint -> Maybe Text

-- | The type of constraint. Use <tt>distinctInstance</tt> to ensure that
--   each task in a particular group is running on a different container
--   instance. Use <tt>memberOf</tt> to restrict the selection to a group
--   of valid candidates.
[$sel:type':PlacementConstraint'] :: PlacementConstraint -> Maybe PlacementConstraintType

-- | Create a value of <a>PlacementConstraint</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expression:PlacementConstraint'</a>,
--   <a>placementConstraint_expression</a> - A cluster query language
--   expression to apply to the constraint. The expression can have a
--   maximum length of 2000 characters. You can't specify an expression if
--   the constraint type is <tt>distinctInstance</tt>. For more
--   information, see <a>Cluster query language</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:type':PlacementConstraint'</a>,
--   <a>placementConstraint_type</a> - The type of constraint. Use
--   <tt>distinctInstance</tt> to ensure that each task in a particular
--   group is running on a different container instance. Use
--   <tt>memberOf</tt> to restrict the selection to a group of valid
--   candidates.
newPlacementConstraint :: PlacementConstraint

-- | A cluster query language expression to apply to the constraint. The
--   expression can have a maximum length of 2000 characters. You can't
--   specify an expression if the constraint type is
--   <tt>distinctInstance</tt>. For more information, see <a>Cluster query
--   language</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
placementConstraint_expression :: Lens' PlacementConstraint (Maybe Text)

-- | The type of constraint. Use <tt>distinctInstance</tt> to ensure that
--   each task in a particular group is running on a different container
--   instance. Use <tt>memberOf</tt> to restrict the selection to a group
--   of valid candidates.
placementConstraint_type :: Lens' PlacementConstraint (Maybe PlacementConstraintType)
instance GHC.Generics.Generic Amazonka.ECS.Types.PlacementConstraint.PlacementConstraint
instance GHC.Show.Show Amazonka.ECS.Types.PlacementConstraint.PlacementConstraint
instance GHC.Read.Read Amazonka.ECS.Types.PlacementConstraint.PlacementConstraint
instance GHC.Classes.Eq Amazonka.ECS.Types.PlacementConstraint.PlacementConstraint
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.PlacementConstraint.PlacementConstraint
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.PlacementConstraint.PlacementConstraint
instance Control.DeepSeq.NFData Amazonka.ECS.Types.PlacementConstraint.PlacementConstraint
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.PlacementConstraint.PlacementConstraint


module Amazonka.ECS.Types.PlacementStrategyType
newtype PlacementStrategyType
PlacementStrategyType' :: Text -> PlacementStrategyType
[fromPlacementStrategyType] :: PlacementStrategyType -> Text
pattern PlacementStrategyType_Binpack :: PlacementStrategyType
pattern PlacementStrategyType_Random :: PlacementStrategyType
pattern PlacementStrategyType_Spread :: PlacementStrategyType
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Control.DeepSeq.NFData Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance GHC.Generics.Generic Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance GHC.Classes.Ord Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance GHC.Classes.Eq Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance GHC.Read.Read Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType
instance GHC.Show.Show Amazonka.ECS.Types.PlacementStrategyType.PlacementStrategyType


module Amazonka.ECS.Types.PlacementStrategy

-- | The task placement strategy for a task or service. For more
--   information, see <a>Task Placement Strategies</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newPlacementStrategy</a> smart constructor.
data PlacementStrategy
PlacementStrategy' :: Maybe Text -> Maybe PlacementStrategyType -> PlacementStrategy

-- | The field to apply the placement strategy against. For the
--   <tt>spread</tt> placement strategy, valid values are
--   <tt>instanceId</tt> (or <tt>host</tt>, which has the same effect), or
--   any platform or custom attribute that is applied to a container
--   instance, such as <tt>attribute:ecs.availability-zone</tt>. For the
--   <tt>binpack</tt> placement strategy, valid values are <tt>cpu</tt> and
--   <tt>memory</tt>. For the <tt>random</tt> placement strategy, this
--   field is not used.
[$sel:field:PlacementStrategy'] :: PlacementStrategy -> Maybe Text

-- | The type of placement strategy. The <tt>random</tt> placement strategy
--   randomly places tasks on available candidates. The <tt>spread</tt>
--   placement strategy spreads placement across available candidates
--   evenly based on the <tt>field</tt> parameter. The <tt>binpack</tt>
--   strategy places tasks on available candidates that have the least
--   available amount of the resource that is specified with the
--   <tt>field</tt> parameter. For example, if you binpack on memory, a
--   task is placed on the instance with the least amount of remaining
--   memory (but still enough to run the task).
[$sel:type':PlacementStrategy'] :: PlacementStrategy -> Maybe PlacementStrategyType

-- | Create a value of <a>PlacementStrategy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:field:PlacementStrategy'</a>, <a>placementStrategy_field</a> -
--   The field to apply the placement strategy against. For the
--   <tt>spread</tt> placement strategy, valid values are
--   <tt>instanceId</tt> (or <tt>host</tt>, which has the same effect), or
--   any platform or custom attribute that is applied to a container
--   instance, such as <tt>attribute:ecs.availability-zone</tt>. For the
--   <tt>binpack</tt> placement strategy, valid values are <tt>cpu</tt> and
--   <tt>memory</tt>. For the <tt>random</tt> placement strategy, this
--   field is not used.
--   
--   <a>$sel:type':PlacementStrategy'</a>, <a>placementStrategy_type</a> -
--   The type of placement strategy. The <tt>random</tt> placement strategy
--   randomly places tasks on available candidates. The <tt>spread</tt>
--   placement strategy spreads placement across available candidates
--   evenly based on the <tt>field</tt> parameter. The <tt>binpack</tt>
--   strategy places tasks on available candidates that have the least
--   available amount of the resource that is specified with the
--   <tt>field</tt> parameter. For example, if you binpack on memory, a
--   task is placed on the instance with the least amount of remaining
--   memory (but still enough to run the task).
newPlacementStrategy :: PlacementStrategy

-- | The field to apply the placement strategy against. For the
--   <tt>spread</tt> placement strategy, valid values are
--   <tt>instanceId</tt> (or <tt>host</tt>, which has the same effect), or
--   any platform or custom attribute that is applied to a container
--   instance, such as <tt>attribute:ecs.availability-zone</tt>. For the
--   <tt>binpack</tt> placement strategy, valid values are <tt>cpu</tt> and
--   <tt>memory</tt>. For the <tt>random</tt> placement strategy, this
--   field is not used.
placementStrategy_field :: Lens' PlacementStrategy (Maybe Text)

-- | The type of placement strategy. The <tt>random</tt> placement strategy
--   randomly places tasks on available candidates. The <tt>spread</tt>
--   placement strategy spreads placement across available candidates
--   evenly based on the <tt>field</tt> parameter. The <tt>binpack</tt>
--   strategy places tasks on available candidates that have the least
--   available amount of the resource that is specified with the
--   <tt>field</tt> parameter. For example, if you binpack on memory, a
--   task is placed on the instance with the least amount of remaining
--   memory (but still enough to run the task).
placementStrategy_type :: Lens' PlacementStrategy (Maybe PlacementStrategyType)
instance GHC.Generics.Generic Amazonka.ECS.Types.PlacementStrategy.PlacementStrategy
instance GHC.Show.Show Amazonka.ECS.Types.PlacementStrategy.PlacementStrategy
instance GHC.Read.Read Amazonka.ECS.Types.PlacementStrategy.PlacementStrategy
instance GHC.Classes.Eq Amazonka.ECS.Types.PlacementStrategy.PlacementStrategy
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.PlacementStrategy.PlacementStrategy
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.PlacementStrategy.PlacementStrategy
instance Control.DeepSeq.NFData Amazonka.ECS.Types.PlacementStrategy.PlacementStrategy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.PlacementStrategy.PlacementStrategy


module Amazonka.ECS.Types.PlatformDeviceType
newtype PlatformDeviceType
PlatformDeviceType' :: Text -> PlatformDeviceType
[fromPlatformDeviceType] :: PlatformDeviceType -> Text
pattern PlatformDeviceType_GPU :: PlatformDeviceType
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Control.DeepSeq.NFData Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance GHC.Generics.Generic Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance GHC.Classes.Ord Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance GHC.Classes.Eq Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance GHC.Read.Read Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType
instance GHC.Show.Show Amazonka.ECS.Types.PlatformDeviceType.PlatformDeviceType


module Amazonka.ECS.Types.PlatformDevice

-- | The devices that are available on the container instance. The only
--   supported device type is a GPU.
--   
--   <i>See:</i> <a>newPlatformDevice</a> smart constructor.
data PlatformDevice
PlatformDevice' :: Text -> PlatformDeviceType -> PlatformDevice

-- | The ID for the GPU(s) on the container instance. The available GPU IDs
--   can also be obtained on the container instance in the
--   <tt>/var/lib/ecs/gpu/nvidia_gpu_info.json</tt> file.
[$sel:id:PlatformDevice'] :: PlatformDevice -> Text

-- | The type of device that is available on the container instance. The
--   only supported value is <tt>GPU</tt>.
[$sel:type':PlatformDevice'] :: PlatformDevice -> PlatformDeviceType

-- | Create a value of <a>PlatformDevice</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:PlatformDevice'</a>, <a>platformDevice_id</a> - The ID for
--   the GPU(s) on the container instance. The available GPU IDs can also
--   be obtained on the container instance in the
--   <tt>/var/lib/ecs/gpu/nvidia_gpu_info.json</tt> file.
--   
--   <a>$sel:type':PlatformDevice'</a>, <a>platformDevice_type</a> - The
--   type of device that is available on the container instance. The only
--   supported value is <tt>GPU</tt>.
newPlatformDevice :: Text -> PlatformDeviceType -> PlatformDevice

-- | The ID for the GPU(s) on the container instance. The available GPU IDs
--   can also be obtained on the container instance in the
--   <tt>/var/lib/ecs/gpu/nvidia_gpu_info.json</tt> file.
platformDevice_id :: Lens' PlatformDevice Text

-- | The type of device that is available on the container instance. The
--   only supported value is <tt>GPU</tt>.
platformDevice_type :: Lens' PlatformDevice PlatformDeviceType
instance GHC.Generics.Generic Amazonka.ECS.Types.PlatformDevice.PlatformDevice
instance GHC.Show.Show Amazonka.ECS.Types.PlatformDevice.PlatformDevice
instance GHC.Read.Read Amazonka.ECS.Types.PlatformDevice.PlatformDevice
instance GHC.Classes.Eq Amazonka.ECS.Types.PlatformDevice.PlatformDevice
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.PlatformDevice.PlatformDevice
instance Control.DeepSeq.NFData Amazonka.ECS.Types.PlatformDevice.PlatformDevice
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.PlatformDevice.PlatformDevice


module Amazonka.ECS.Types.PropagateTags
newtype PropagateTags
PropagateTags' :: Text -> PropagateTags
[fromPropagateTags] :: PropagateTags -> Text
pattern PropagateTags_SERVICE :: PropagateTags
pattern PropagateTags_TASK_DEFINITION :: PropagateTags
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Control.DeepSeq.NFData Amazonka.ECS.Types.PropagateTags.PropagateTags
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.PropagateTags.PropagateTags
instance GHC.Generics.Generic Amazonka.ECS.Types.PropagateTags.PropagateTags
instance GHC.Classes.Ord Amazonka.ECS.Types.PropagateTags.PropagateTags
instance GHC.Classes.Eq Amazonka.ECS.Types.PropagateTags.PropagateTags
instance GHC.Read.Read Amazonka.ECS.Types.PropagateTags.PropagateTags
instance GHC.Show.Show Amazonka.ECS.Types.PropagateTags.PropagateTags


module Amazonka.ECS.Types.ProxyConfigurationType
newtype ProxyConfigurationType
ProxyConfigurationType' :: Text -> ProxyConfigurationType
[fromProxyConfigurationType] :: ProxyConfigurationType -> Text
pattern ProxyConfigurationType_APPMESH :: ProxyConfigurationType
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance GHC.Generics.Generic Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance GHC.Classes.Ord Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance GHC.Classes.Eq Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance GHC.Read.Read Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType
instance GHC.Show.Show Amazonka.ECS.Types.ProxyConfigurationType.ProxyConfigurationType


module Amazonka.ECS.Types.ProxyConfiguration

-- | The configuration details for the App Mesh proxy.
--   
--   For tasks using the EC2 launch type, the container instances require
--   at least version 1.26.0 of the container agent and at least version
--   1.26.0-1 of the <tt>ecs-init</tt> package to enable a proxy
--   configuration. If your container instances are launched from the
--   Amazon ECS-optimized AMI version <tt>20190301</tt> or later, then they
--   contain the required versions of the container agent and
--   <tt>ecs-init</tt>. For more information, see <a>Amazon ECS-optimized
--   Linux AMI</a>
--   
--   <i>See:</i> <a>newProxyConfiguration</a> smart constructor.
data ProxyConfiguration
ProxyConfiguration' :: Maybe ProxyConfigurationType -> Maybe [KeyValuePair] -> Text -> ProxyConfiguration

-- | The proxy type. The only supported value is <tt>APPMESH</tt>.
[$sel:type':ProxyConfiguration'] :: ProxyConfiguration -> Maybe ProxyConfigurationType

-- | The set of network configuration parameters to provide the Container
--   Network Interface (CNI) plugin, specified as key-value pairs.
--   
--   <ul>
--   <li><tt>IgnoredUID</tt> - (Required) The user ID (UID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredGID</tt> is specified, this field can be empty.</li>
--   <li><tt>IgnoredGID</tt> - (Required) The group ID (GID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredUID</tt> is specified, this field can be empty.</li>
--   <li><tt>AppPorts</tt> - (Required) The list of ports that the
--   application uses. Network traffic to these ports is forwarded to the
--   <tt>ProxyIngressPort</tt> and <tt>ProxyEgressPort</tt>.</li>
--   <li><tt>ProxyIngressPort</tt> - (Required) Specifies the port that
--   incoming traffic to the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>ProxyEgressPort</tt> - (Required) Specifies the port that
--   outgoing traffic from the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>EgressIgnoredPorts</tt> - (Required) The egress traffic going
--   to the specified ports is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   <li><tt>EgressIgnoredIPs</tt> - (Required) The egress traffic going to
--   the specified IP addresses is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   </ul>
[$sel:properties:ProxyConfiguration'] :: ProxyConfiguration -> Maybe [KeyValuePair]

-- | The name of the container that will serve as the App Mesh proxy.
[$sel:containerName:ProxyConfiguration'] :: ProxyConfiguration -> Text

-- | Create a value of <a>ProxyConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':ProxyConfiguration'</a>, <a>proxyConfiguration_type</a>
--   - The proxy type. The only supported value is <tt>APPMESH</tt>.
--   
--   <a>$sel:properties:ProxyConfiguration'</a>,
--   <a>proxyConfiguration_properties</a> - The set of network
--   configuration parameters to provide the Container Network Interface
--   (CNI) plugin, specified as key-value pairs.
--   
--   <ul>
--   <li><tt>IgnoredUID</tt> - (Required) The user ID (UID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredGID</tt> is specified, this field can be empty.</li>
--   <li><tt>IgnoredGID</tt> - (Required) The group ID (GID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredUID</tt> is specified, this field can be empty.</li>
--   <li><tt>AppPorts</tt> - (Required) The list of ports that the
--   application uses. Network traffic to these ports is forwarded to the
--   <tt>ProxyIngressPort</tt> and <tt>ProxyEgressPort</tt>.</li>
--   <li><tt>ProxyIngressPort</tt> - (Required) Specifies the port that
--   incoming traffic to the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>ProxyEgressPort</tt> - (Required) Specifies the port that
--   outgoing traffic from the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>EgressIgnoredPorts</tt> - (Required) The egress traffic going
--   to the specified ports is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   <li><tt>EgressIgnoredIPs</tt> - (Required) The egress traffic going to
--   the specified IP addresses is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   </ul>
--   
--   <a>$sel:containerName:ProxyConfiguration'</a>,
--   <a>proxyConfiguration_containerName</a> - The name of the container
--   that will serve as the App Mesh proxy.
newProxyConfiguration :: Text -> ProxyConfiguration

-- | The proxy type. The only supported value is <tt>APPMESH</tt>.
proxyConfiguration_type :: Lens' ProxyConfiguration (Maybe ProxyConfigurationType)

-- | The set of network configuration parameters to provide the Container
--   Network Interface (CNI) plugin, specified as key-value pairs.
--   
--   <ul>
--   <li><tt>IgnoredUID</tt> - (Required) The user ID (UID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredGID</tt> is specified, this field can be empty.</li>
--   <li><tt>IgnoredGID</tt> - (Required) The group ID (GID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredUID</tt> is specified, this field can be empty.</li>
--   <li><tt>AppPorts</tt> - (Required) The list of ports that the
--   application uses. Network traffic to these ports is forwarded to the
--   <tt>ProxyIngressPort</tt> and <tt>ProxyEgressPort</tt>.</li>
--   <li><tt>ProxyIngressPort</tt> - (Required) Specifies the port that
--   incoming traffic to the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>ProxyEgressPort</tt> - (Required) Specifies the port that
--   outgoing traffic from the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>EgressIgnoredPorts</tt> - (Required) The egress traffic going
--   to the specified ports is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   <li><tt>EgressIgnoredIPs</tt> - (Required) The egress traffic going to
--   the specified IP addresses is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   </ul>
proxyConfiguration_properties :: Lens' ProxyConfiguration (Maybe [KeyValuePair])

-- | The name of the container that will serve as the App Mesh proxy.
proxyConfiguration_containerName :: Lens' ProxyConfiguration Text
instance GHC.Generics.Generic Amazonka.ECS.Types.ProxyConfiguration.ProxyConfiguration
instance GHC.Show.Show Amazonka.ECS.Types.ProxyConfiguration.ProxyConfiguration
instance GHC.Read.Read Amazonka.ECS.Types.ProxyConfiguration.ProxyConfiguration
instance GHC.Classes.Eq Amazonka.ECS.Types.ProxyConfiguration.ProxyConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ProxyConfiguration.ProxyConfiguration
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ProxyConfiguration.ProxyConfiguration
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ProxyConfiguration.ProxyConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ProxyConfiguration.ProxyConfiguration


module Amazonka.ECS.Types.RepositoryCredentials

-- | The repository credentials for private registry authentication.
--   
--   <i>See:</i> <a>newRepositoryCredentials</a> smart constructor.
data RepositoryCredentials
RepositoryCredentials' :: Text -> RepositoryCredentials

-- | The Amazon Resource Name (ARN) of the secret containing the private
--   repository credentials.
--   
--   When you are using the Amazon ECS API, CLI, or Amazon Web Services
--   SDK, if the secret exists in the same Region as the task that you are
--   launching then you can use either the full ARN or the name of the
--   secret. When you are using the Amazon Web Services Management Console,
--   you must specify the full ARN of the secret.
[$sel:credentialsParameter:RepositoryCredentials'] :: RepositoryCredentials -> Text

-- | Create a value of <a>RepositoryCredentials</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:credentialsParameter:RepositoryCredentials'</a>,
--   <a>repositoryCredentials_credentialsParameter</a> - The Amazon
--   Resource Name (ARN) of the secret containing the private repository
--   credentials.
--   
--   When you are using the Amazon ECS API, CLI, or Amazon Web Services
--   SDK, if the secret exists in the same Region as the task that you are
--   launching then you can use either the full ARN or the name of the
--   secret. When you are using the Amazon Web Services Management Console,
--   you must specify the full ARN of the secret.
newRepositoryCredentials :: Text -> RepositoryCredentials

-- | The Amazon Resource Name (ARN) of the secret containing the private
--   repository credentials.
--   
--   When you are using the Amazon ECS API, CLI, or Amazon Web Services
--   SDK, if the secret exists in the same Region as the task that you are
--   launching then you can use either the full ARN or the name of the
--   secret. When you are using the Amazon Web Services Management Console,
--   you must specify the full ARN of the secret.
repositoryCredentials_credentialsParameter :: Lens' RepositoryCredentials Text
instance GHC.Generics.Generic Amazonka.ECS.Types.RepositoryCredentials.RepositoryCredentials
instance GHC.Show.Show Amazonka.ECS.Types.RepositoryCredentials.RepositoryCredentials
instance GHC.Read.Read Amazonka.ECS.Types.RepositoryCredentials.RepositoryCredentials
instance GHC.Classes.Eq Amazonka.ECS.Types.RepositoryCredentials.RepositoryCredentials
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.RepositoryCredentials.RepositoryCredentials
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.RepositoryCredentials.RepositoryCredentials
instance Control.DeepSeq.NFData Amazonka.ECS.Types.RepositoryCredentials.RepositoryCredentials
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.RepositoryCredentials.RepositoryCredentials


module Amazonka.ECS.Types.Resource

-- | Describes the resources available for a container instance.
--   
--   <i>See:</i> <a>newResource</a> smart constructor.
data Resource
Resource' :: Maybe [Text] -> Maybe Int -> Maybe Double -> Maybe Integer -> Maybe Text -> Maybe Text -> Resource

-- | When the <tt>stringSetValue</tt> type is set, the value of the
--   resource must be a string type.
[$sel:stringSetValue:Resource'] :: Resource -> Maybe [Text]

-- | When the <tt>integerValue</tt> type is set, the value of the resource
--   must be an integer.
[$sel:integerValue:Resource'] :: Resource -> Maybe Int

-- | When the <tt>doubleValue</tt> type is set, the value of the resource
--   must be a double precision floating-point type.
[$sel:doubleValue:Resource'] :: Resource -> Maybe Double

-- | When the <tt>longValue</tt> type is set, the value of the resource
--   must be an extended precision floating-point type.
[$sel:longValue:Resource'] :: Resource -> Maybe Integer

-- | The name of the resource, such as <tt>CPU</tt>, <tt>MEMORY</tt>,
--   <tt>PORTS</tt>, <tt>PORTS_UDP</tt>, or a user-defined resource.
[$sel:name:Resource'] :: Resource -> Maybe Text

-- | The type of the resource, such as <tt>INTEGER</tt>, <tt>DOUBLE</tt>,
--   <tt>LONG</tt>, or <tt>STRINGSET</tt>.
[$sel:type':Resource'] :: Resource -> Maybe Text

-- | Create a value of <a>Resource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:stringSetValue:Resource'</a>, <a>resource_stringSetValue</a> -
--   When the <tt>stringSetValue</tt> type is set, the value of the
--   resource must be a string type.
--   
--   <a>$sel:integerValue:Resource'</a>, <a>resource_integerValue</a> -
--   When the <tt>integerValue</tt> type is set, the value of the resource
--   must be an integer.
--   
--   <a>$sel:doubleValue:Resource'</a>, <a>resource_doubleValue</a> - When
--   the <tt>doubleValue</tt> type is set, the value of the resource must
--   be a double precision floating-point type.
--   
--   <a>$sel:longValue:Resource'</a>, <a>resource_longValue</a> - When the
--   <tt>longValue</tt> type is set, the value of the resource must be an
--   extended precision floating-point type.
--   
--   <a>$sel:name:Resource'</a>, <a>resource_name</a> - The name of the
--   resource, such as <tt>CPU</tt>, <tt>MEMORY</tt>, <tt>PORTS</tt>,
--   <tt>PORTS_UDP</tt>, or a user-defined resource.
--   
--   <a>$sel:type':Resource'</a>, <a>resource_type</a> - The type of the
--   resource, such as <tt>INTEGER</tt>, <tt>DOUBLE</tt>, <tt>LONG</tt>, or
--   <tt>STRINGSET</tt>.
newResource :: Resource

-- | When the <tt>stringSetValue</tt> type is set, the value of the
--   resource must be a string type.
resource_stringSetValue :: Lens' Resource (Maybe [Text])

-- | When the <tt>integerValue</tt> type is set, the value of the resource
--   must be an integer.
resource_integerValue :: Lens' Resource (Maybe Int)

-- | When the <tt>doubleValue</tt> type is set, the value of the resource
--   must be a double precision floating-point type.
resource_doubleValue :: Lens' Resource (Maybe Double)

-- | When the <tt>longValue</tt> type is set, the value of the resource
--   must be an extended precision floating-point type.
resource_longValue :: Lens' Resource (Maybe Integer)

-- | The name of the resource, such as <tt>CPU</tt>, <tt>MEMORY</tt>,
--   <tt>PORTS</tt>, <tt>PORTS_UDP</tt>, or a user-defined resource.
resource_name :: Lens' Resource (Maybe Text)

-- | The type of the resource, such as <tt>INTEGER</tt>, <tt>DOUBLE</tt>,
--   <tt>LONG</tt>, or <tt>STRINGSET</tt>.
resource_type :: Lens' Resource (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.Resource.Resource
instance GHC.Show.Show Amazonka.ECS.Types.Resource.Resource
instance GHC.Read.Read Amazonka.ECS.Types.Resource.Resource
instance GHC.Classes.Eq Amazonka.ECS.Types.Resource.Resource
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Resource.Resource
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Resource.Resource
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Resource.Resource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.Resource.Resource


module Amazonka.ECS.Types.ResourceType
newtype ResourceType
ResourceType' :: Text -> ResourceType
[fromResourceType] :: ResourceType -> Text
pattern ResourceType_GPU :: ResourceType
pattern ResourceType_InferenceAccelerator :: ResourceType
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ResourceType.ResourceType
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ResourceType.ResourceType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ResourceType.ResourceType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ResourceType.ResourceType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ResourceType.ResourceType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ResourceType.ResourceType
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ResourceType.ResourceType
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ResourceType.ResourceType
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ResourceType.ResourceType
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ResourceType.ResourceType
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ResourceType.ResourceType
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ResourceType.ResourceType
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ResourceType.ResourceType
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ResourceType.ResourceType
instance GHC.Generics.Generic Amazonka.ECS.Types.ResourceType.ResourceType
instance GHC.Classes.Ord Amazonka.ECS.Types.ResourceType.ResourceType
instance GHC.Classes.Eq Amazonka.ECS.Types.ResourceType.ResourceType
instance GHC.Read.Read Amazonka.ECS.Types.ResourceType.ResourceType
instance GHC.Show.Show Amazonka.ECS.Types.ResourceType.ResourceType


module Amazonka.ECS.Types.ResourceRequirement

-- | The type and amount of a resource to assign to a container. The
--   supported resource types are GPUs and Elastic Inference accelerators.
--   For more information, see <a>Working with GPUs on Amazon ECS</a> or
--   <a>Working with Amazon Elastic Inference on Amazon ECS</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>
--   
--   <i>See:</i> <a>newResourceRequirement</a> smart constructor.
data ResourceRequirement
ResourceRequirement' :: Text -> ResourceType -> ResourceRequirement

-- | The value for the specified resource type.
--   
--   If the <tt>GPU</tt> type is used, the value is the number of physical
--   <tt>GPUs</tt> the Amazon ECS container agent will reserve for the
--   container. The number of GPUs reserved for all containers in a task
--   should not exceed the number of available GPUs on the container
--   instance the task is launched on.
--   
--   If the <tt>InferenceAccelerator</tt> type is used, the <tt>value</tt>
--   should match the <tt>deviceName</tt> for an InferenceAccelerator
--   specified in a task definition.
[$sel:value:ResourceRequirement'] :: ResourceRequirement -> Text

-- | The type of resource to assign to a container. The supported values
--   are <tt>GPU</tt> or <tt>InferenceAccelerator</tt>.
[$sel:type':ResourceRequirement'] :: ResourceRequirement -> ResourceType

-- | Create a value of <a>ResourceRequirement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:ResourceRequirement'</a>,
--   <a>resourceRequirement_value</a> - The value for the specified
--   resource type.
--   
--   If the <tt>GPU</tt> type is used, the value is the number of physical
--   <tt>GPUs</tt> the Amazon ECS container agent will reserve for the
--   container. The number of GPUs reserved for all containers in a task
--   should not exceed the number of available GPUs on the container
--   instance the task is launched on.
--   
--   If the <tt>InferenceAccelerator</tt> type is used, the <tt>value</tt>
--   should match the <tt>deviceName</tt> for an InferenceAccelerator
--   specified in a task definition.
--   
--   <a>$sel:type':ResourceRequirement'</a>,
--   <a>resourceRequirement_type</a> - The type of resource to assign to a
--   container. The supported values are <tt>GPU</tt> or
--   <tt>InferenceAccelerator</tt>.
newResourceRequirement :: Text -> ResourceType -> ResourceRequirement

-- | The value for the specified resource type.
--   
--   If the <tt>GPU</tt> type is used, the value is the number of physical
--   <tt>GPUs</tt> the Amazon ECS container agent will reserve for the
--   container. The number of GPUs reserved for all containers in a task
--   should not exceed the number of available GPUs on the container
--   instance the task is launched on.
--   
--   If the <tt>InferenceAccelerator</tt> type is used, the <tt>value</tt>
--   should match the <tt>deviceName</tt> for an InferenceAccelerator
--   specified in a task definition.
resourceRequirement_value :: Lens' ResourceRequirement Text

-- | The type of resource to assign to a container. The supported values
--   are <tt>GPU</tt> or <tt>InferenceAccelerator</tt>.
resourceRequirement_type :: Lens' ResourceRequirement ResourceType
instance GHC.Generics.Generic Amazonka.ECS.Types.ResourceRequirement.ResourceRequirement
instance GHC.Show.Show Amazonka.ECS.Types.ResourceRequirement.ResourceRequirement
instance GHC.Read.Read Amazonka.ECS.Types.ResourceRequirement.ResourceRequirement
instance GHC.Classes.Eq Amazonka.ECS.Types.ResourceRequirement.ResourceRequirement
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ResourceRequirement.ResourceRequirement
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ResourceRequirement.ResourceRequirement
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ResourceRequirement.ResourceRequirement
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ResourceRequirement.ResourceRequirement


module Amazonka.ECS.Types.ContainerOverride

-- | The overrides that should be sent to a container. An empty container
--   override can be passed in. An example of an empty container override
--   would be <tt>{"containerOverrides": [ ] }</tt>. If a non-empty
--   container override is specified, the <tt>name</tt> parameter must be
--   included.
--   
--   <i>See:</i> <a>newContainerOverride</a> smart constructor.
data ContainerOverride
ContainerOverride' :: Maybe [Text] -> Maybe [KeyValuePair] -> Maybe [EnvironmentFile] -> Maybe [ResourceRequirement] -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe Int -> ContainerOverride

-- | The command to send to the container that overrides the default
--   command from the Docker image or the task definition. You must also
--   specify a container name.
[$sel:command:ContainerOverride'] :: ContainerOverride -> Maybe [Text]

-- | The environment variables to send to the container. You can add new
--   environment variables, which are added to the container at launch, or
--   you can override the existing environment variables from the Docker
--   image or the task definition. You must also specify a container name.
[$sel:environment:ContainerOverride'] :: ContainerOverride -> Maybe [KeyValuePair]

-- | A list of files containing the environment variables to pass to a
--   container, instead of the value from the container definition.
[$sel:environmentFiles:ContainerOverride'] :: ContainerOverride -> Maybe [EnvironmentFile]

-- | The type and amount of a resource to assign to a container, instead of
--   the default value from the task definition. The only supported
--   resource is a GPU.
[$sel:resourceRequirements:ContainerOverride'] :: ContainerOverride -> Maybe [ResourceRequirement]

-- | The hard limit (in MiB) of memory to present to the container, instead
--   of the default value from the task definition. If your container
--   attempts to exceed the memory specified here, the container is killed.
--   You must also specify a container name.
[$sel:memory:ContainerOverride'] :: ContainerOverride -> Maybe Int

-- | The name of the container that receives the override. This parameter
--   is required if any override is specified.
[$sel:name:ContainerOverride'] :: ContainerOverride -> Maybe Text

-- | The number of <tt>cpu</tt> units reserved for the container, instead
--   of the default value from the task definition. You must also specify a
--   container name.
[$sel:cpu:ContainerOverride'] :: ContainerOverride -> Maybe Int

-- | The soft limit (in MiB) of memory to reserve for the container,
--   instead of the default value from the task definition. You must also
--   specify a container name.
[$sel:memoryReservation:ContainerOverride'] :: ContainerOverride -> Maybe Int

-- | Create a value of <a>ContainerOverride</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:command:ContainerOverride'</a>,
--   <a>containerOverride_command</a> - The command to send to the
--   container that overrides the default command from the Docker image or
--   the task definition. You must also specify a container name.
--   
--   <a>$sel:environment:ContainerOverride'</a>,
--   <a>containerOverride_environment</a> - The environment variables to
--   send to the container. You can add new environment variables, which
--   are added to the container at launch, or you can override the existing
--   environment variables from the Docker image or the task definition.
--   You must also specify a container name.
--   
--   <a>$sel:environmentFiles:ContainerOverride'</a>,
--   <a>containerOverride_environmentFiles</a> - A list of files containing
--   the environment variables to pass to a container, instead of the value
--   from the container definition.
--   
--   <a>$sel:resourceRequirements:ContainerOverride'</a>,
--   <a>containerOverride_resourceRequirements</a> - The type and amount of
--   a resource to assign to a container, instead of the default value from
--   the task definition. The only supported resource is a GPU.
--   
--   <a>$sel:memory:ContainerOverride'</a>, <a>containerOverride_memory</a>
--   - The hard limit (in MiB) of memory to present to the container,
--   instead of the default value from the task definition. If your
--   container attempts to exceed the memory specified here, the container
--   is killed. You must also specify a container name.
--   
--   <a>$sel:name:ContainerOverride'</a>, <a>containerOverride_name</a> -
--   The name of the container that receives the override. This parameter
--   is required if any override is specified.
--   
--   <a>$sel:cpu:ContainerOverride'</a>, <a>containerOverride_cpu</a> - The
--   number of <tt>cpu</tt> units reserved for the container, instead of
--   the default value from the task definition. You must also specify a
--   container name.
--   
--   <a>$sel:memoryReservation:ContainerOverride'</a>,
--   <a>containerOverride_memoryReservation</a> - The soft limit (in MiB)
--   of memory to reserve for the container, instead of the default value
--   from the task definition. You must also specify a container name.
newContainerOverride :: ContainerOverride

-- | The command to send to the container that overrides the default
--   command from the Docker image or the task definition. You must also
--   specify a container name.
containerOverride_command :: Lens' ContainerOverride (Maybe [Text])

-- | The environment variables to send to the container. You can add new
--   environment variables, which are added to the container at launch, or
--   you can override the existing environment variables from the Docker
--   image or the task definition. You must also specify a container name.
containerOverride_environment :: Lens' ContainerOverride (Maybe [KeyValuePair])

-- | A list of files containing the environment variables to pass to a
--   container, instead of the value from the container definition.
containerOverride_environmentFiles :: Lens' ContainerOverride (Maybe [EnvironmentFile])

-- | The type and amount of a resource to assign to a container, instead of
--   the default value from the task definition. The only supported
--   resource is a GPU.
containerOverride_resourceRequirements :: Lens' ContainerOverride (Maybe [ResourceRequirement])

-- | The hard limit (in MiB) of memory to present to the container, instead
--   of the default value from the task definition. If your container
--   attempts to exceed the memory specified here, the container is killed.
--   You must also specify a container name.
containerOverride_memory :: Lens' ContainerOverride (Maybe Int)

-- | The name of the container that receives the override. This parameter
--   is required if any override is specified.
containerOverride_name :: Lens' ContainerOverride (Maybe Text)

-- | The number of <tt>cpu</tt> units reserved for the container, instead
--   of the default value from the task definition. You must also specify a
--   container name.
containerOverride_cpu :: Lens' ContainerOverride (Maybe Int)

-- | The soft limit (in MiB) of memory to reserve for the container,
--   instead of the default value from the task definition. You must also
--   specify a container name.
containerOverride_memoryReservation :: Lens' ContainerOverride (Maybe Int)
instance GHC.Generics.Generic Amazonka.ECS.Types.ContainerOverride.ContainerOverride
instance GHC.Show.Show Amazonka.ECS.Types.ContainerOverride.ContainerOverride
instance GHC.Read.Read Amazonka.ECS.Types.ContainerOverride.ContainerOverride
instance GHC.Classes.Eq Amazonka.ECS.Types.ContainerOverride.ContainerOverride
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ContainerOverride.ContainerOverride
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ContainerOverride.ContainerOverride
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ContainerOverride.ContainerOverride
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ContainerOverride.ContainerOverride


module Amazonka.ECS.Types.ScaleUnit
newtype ScaleUnit
ScaleUnit' :: Text -> ScaleUnit
[fromScaleUnit] :: ScaleUnit -> Text
pattern ScaleUnit_PERCENT :: ScaleUnit
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance GHC.Generics.Generic Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance GHC.Classes.Ord Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance GHC.Classes.Eq Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance GHC.Read.Read Amazonka.ECS.Types.ScaleUnit.ScaleUnit
instance GHC.Show.Show Amazonka.ECS.Types.ScaleUnit.ScaleUnit


module Amazonka.ECS.Types.Scale

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
--   
--   <i>See:</i> <a>newScale</a> smart constructor.
data Scale
Scale' :: Maybe Double -> Maybe ScaleUnit -> Scale

-- | The value, specified as a percent total of a service's
--   <tt>desiredCount</tt>, to scale the task set. Accepted values are
--   numbers between 0 and 100.
[$sel:value:Scale'] :: Scale -> Maybe Double

-- | The unit of measure for the scale value.
[$sel:unit:Scale'] :: Scale -> Maybe ScaleUnit

-- | Create a value of <a>Scale</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Scale'</a>, <a>scale_value</a> - The value, specified as
--   a percent total of a service's <tt>desiredCount</tt>, to scale the
--   task set. Accepted values are numbers between 0 and 100.
--   
--   <a>$sel:unit:Scale'</a>, <a>scale_unit</a> - The unit of measure for
--   the scale value.
newScale :: Scale

-- | The value, specified as a percent total of a service's
--   <tt>desiredCount</tt>, to scale the task set. Accepted values are
--   numbers between 0 and 100.
scale_value :: Lens' Scale (Maybe Double)

-- | The unit of measure for the scale value.
scale_unit :: Lens' Scale (Maybe ScaleUnit)
instance GHC.Generics.Generic Amazonka.ECS.Types.Scale.Scale
instance GHC.Show.Show Amazonka.ECS.Types.Scale.Scale
instance GHC.Read.Read Amazonka.ECS.Types.Scale.Scale
instance GHC.Classes.Eq Amazonka.ECS.Types.Scale.Scale
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Scale.Scale
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Scale.Scale
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Scale.Scale
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.Scale.Scale


module Amazonka.ECS.Types.SchedulingStrategy
newtype SchedulingStrategy
SchedulingStrategy' :: Text -> SchedulingStrategy
[fromSchedulingStrategy] :: SchedulingStrategy -> Text
pattern SchedulingStrategy_DAEMON :: SchedulingStrategy
pattern SchedulingStrategy_REPLICA :: SchedulingStrategy
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Control.DeepSeq.NFData Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance GHC.Generics.Generic Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance GHC.Classes.Ord Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance GHC.Classes.Eq Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance GHC.Read.Read Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy
instance GHC.Show.Show Amazonka.ECS.Types.SchedulingStrategy.SchedulingStrategy


module Amazonka.ECS.Types.Scope
newtype Scope
Scope' :: Text -> Scope
[fromScope] :: Scope -> Text
pattern Scope_Shared :: Scope
pattern Scope_Task :: Scope
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.Scope.Scope
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.Scope.Scope
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.Scope.Scope
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.Scope.Scope
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.Scope.Scope
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Scope.Scope
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.Scope.Scope
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.Scope.Scope
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.Scope.Scope
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.Scope.Scope
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.Scope.Scope
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.Scope.Scope
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Scope.Scope
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Scope.Scope
instance GHC.Generics.Generic Amazonka.ECS.Types.Scope.Scope
instance GHC.Classes.Ord Amazonka.ECS.Types.Scope.Scope
instance GHC.Classes.Eq Amazonka.ECS.Types.Scope.Scope
instance GHC.Read.Read Amazonka.ECS.Types.Scope.Scope
instance GHC.Show.Show Amazonka.ECS.Types.Scope.Scope


module Amazonka.ECS.Types.DockerVolumeConfiguration

-- | This parameter is specified when you are using Docker volumes. Docker
--   volumes are only supported when you are using the EC2 launch type.
--   Windows containers only support the use of the <tt>local</tt> driver.
--   To use bind mounts, specify a <tt>host</tt> instead.
--   
--   <i>See:</i> <a>newDockerVolumeConfiguration</a> smart constructor.
data DockerVolumeConfiguration
DockerVolumeConfiguration' :: Maybe (HashMap Text Text) -> Maybe Text -> Maybe Scope -> Maybe (HashMap Text Text) -> Maybe Bool -> DockerVolumeConfiguration

-- | A map of Docker driver-specific options passed through. This parameter
--   maps to <tt>DriverOpts</tt> in the <a>Create a volume</a> section of
--   the <a>Docker Remote API</a> and the <tt>xxopt</tt> option to
--   <a>docker volume create</a>.
[$sel:driverOpts:DockerVolumeConfiguration'] :: DockerVolumeConfiguration -> Maybe (HashMap Text Text)

-- | The Docker volume driver to use. The driver value must match the
--   driver name provided by Docker because it is used for task placement.
--   If the driver was installed using the Docker plugin CLI, use
--   <tt>docker plugin ls</tt> to retrieve the driver name from your
--   container instance. If the driver was installed using another method,
--   use Docker plugin discovery to retrieve the driver name. For more
--   information, see <a>Docker plugin discovery</a>. This parameter maps
--   to <tt>Driver</tt> in the <a>Create a volume</a> section of the
--   <a>Docker Remote API</a> and the <tt>xxdriver</tt> option to <a>docker
--   volume create</a>.
[$sel:driver:DockerVolumeConfiguration'] :: DockerVolumeConfiguration -> Maybe Text

-- | The scope for the Docker volume that determines its lifecycle. Docker
--   volumes that are scoped to a <tt>task</tt> are automatically
--   provisioned when the task starts and destroyed when the task stops.
--   Docker volumes that are scoped as <tt>shared</tt> persist after the
--   task stops.
[$sel:scope:DockerVolumeConfiguration'] :: DockerVolumeConfiguration -> Maybe Scope

-- | Custom metadata to add to your Docker volume. This parameter maps to
--   <tt>Labels</tt> in the <a>Create a volume</a> section of the <a>Docker
--   Remote API</a> and the <tt>xxlabel</tt> option to <a>docker volume
--   create</a>.
[$sel:labels:DockerVolumeConfiguration'] :: DockerVolumeConfiguration -> Maybe (HashMap Text Text)

-- | If this value is <tt>true</tt>, the Docker volume is created if it
--   does not already exist.
--   
--   This field is only used if the <tt>scope</tt> is <tt>shared</tt>.
[$sel:autoprovision:DockerVolumeConfiguration'] :: DockerVolumeConfiguration -> Maybe Bool

-- | Create a value of <a>DockerVolumeConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:driverOpts:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_driverOpts</a> - A map of Docker
--   driver-specific options passed through. This parameter maps to
--   <tt>DriverOpts</tt> in the <a>Create a volume</a> section of the
--   <a>Docker Remote API</a> and the <tt>xxopt</tt> option to <a>docker
--   volume create</a>.
--   
--   <a>$sel:driver:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_driver</a> - The Docker volume driver to
--   use. The driver value must match the driver name provided by Docker
--   because it is used for task placement. If the driver was installed
--   using the Docker plugin CLI, use <tt>docker plugin ls</tt> to retrieve
--   the driver name from your container instance. If the driver was
--   installed using another method, use Docker plugin discovery to
--   retrieve the driver name. For more information, see <a>Docker plugin
--   discovery</a>. This parameter maps to <tt>Driver</tt> in the <a>Create
--   a volume</a> section of the <a>Docker Remote API</a> and the
--   <tt>xxdriver</tt> option to <a>docker volume create</a>.
--   
--   <a>$sel:scope:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_scope</a> - The scope for the Docker
--   volume that determines its lifecycle. Docker volumes that are scoped
--   to a <tt>task</tt> are automatically provisioned when the task starts
--   and destroyed when the task stops. Docker volumes that are scoped as
--   <tt>shared</tt> persist after the task stops.
--   
--   <a>$sel:labels:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_labels</a> - Custom metadata to add to
--   your Docker volume. This parameter maps to <tt>Labels</tt> in the
--   <a>Create a volume</a> section of the <a>Docker Remote API</a> and the
--   <tt>xxlabel</tt> option to <a>docker volume create</a>.
--   
--   <a>$sel:autoprovision:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_autoprovision</a> - If this value is
--   <tt>true</tt>, the Docker volume is created if it does not already
--   exist.
--   
--   This field is only used if the <tt>scope</tt> is <tt>shared</tt>.
newDockerVolumeConfiguration :: DockerVolumeConfiguration

-- | A map of Docker driver-specific options passed through. This parameter
--   maps to <tt>DriverOpts</tt> in the <a>Create a volume</a> section of
--   the <a>Docker Remote API</a> and the <tt>xxopt</tt> option to
--   <a>docker volume create</a>.
dockerVolumeConfiguration_driverOpts :: Lens' DockerVolumeConfiguration (Maybe (HashMap Text Text))

-- | The Docker volume driver to use. The driver value must match the
--   driver name provided by Docker because it is used for task placement.
--   If the driver was installed using the Docker plugin CLI, use
--   <tt>docker plugin ls</tt> to retrieve the driver name from your
--   container instance. If the driver was installed using another method,
--   use Docker plugin discovery to retrieve the driver name. For more
--   information, see <a>Docker plugin discovery</a>. This parameter maps
--   to <tt>Driver</tt> in the <a>Create a volume</a> section of the
--   <a>Docker Remote API</a> and the <tt>xxdriver</tt> option to <a>docker
--   volume create</a>.
dockerVolumeConfiguration_driver :: Lens' DockerVolumeConfiguration (Maybe Text)

-- | The scope for the Docker volume that determines its lifecycle. Docker
--   volumes that are scoped to a <tt>task</tt> are automatically
--   provisioned when the task starts and destroyed when the task stops.
--   Docker volumes that are scoped as <tt>shared</tt> persist after the
--   task stops.
dockerVolumeConfiguration_scope :: Lens' DockerVolumeConfiguration (Maybe Scope)

-- | Custom metadata to add to your Docker volume. This parameter maps to
--   <tt>Labels</tt> in the <a>Create a volume</a> section of the <a>Docker
--   Remote API</a> and the <tt>xxlabel</tt> option to <a>docker volume
--   create</a>.
dockerVolumeConfiguration_labels :: Lens' DockerVolumeConfiguration (Maybe (HashMap Text Text))

-- | If this value is <tt>true</tt>, the Docker volume is created if it
--   does not already exist.
--   
--   This field is only used if the <tt>scope</tt> is <tt>shared</tt>.
dockerVolumeConfiguration_autoprovision :: Lens' DockerVolumeConfiguration (Maybe Bool)
instance GHC.Generics.Generic Amazonka.ECS.Types.DockerVolumeConfiguration.DockerVolumeConfiguration
instance GHC.Show.Show Amazonka.ECS.Types.DockerVolumeConfiguration.DockerVolumeConfiguration
instance GHC.Read.Read Amazonka.ECS.Types.DockerVolumeConfiguration.DockerVolumeConfiguration
instance GHC.Classes.Eq Amazonka.ECS.Types.DockerVolumeConfiguration.DockerVolumeConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.DockerVolumeConfiguration.DockerVolumeConfiguration
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.DockerVolumeConfiguration.DockerVolumeConfiguration
instance Control.DeepSeq.NFData Amazonka.ECS.Types.DockerVolumeConfiguration.DockerVolumeConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.DockerVolumeConfiguration.DockerVolumeConfiguration


module Amazonka.ECS.Types.Secret

-- | An object representing the secret to expose to your container. Secrets
--   can be exposed to a container in the following ways:
--   
--   <ul>
--   <li>To inject sensitive data into your containers as environment
--   variables, use the <tt>secrets</tt> container definition
--   parameter.</li>
--   <li>To reference sensitive information in the log configuration of a
--   container, use the <tt>secretOptions</tt> container definition
--   parameter.</li>
--   </ul>
--   
--   For more information, see <a>Specifying Sensitive Data</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newSecret</a> smart constructor.
data Secret
Secret' :: Text -> Text -> Secret

-- | The name of the secret.
[$sel:name:Secret'] :: Secret -> Text

-- | The secret to expose to the container. The supported values are either
--   the full ARN of the Secrets Manager secret or the full ARN of the
--   parameter in the SSM Parameter Store.
--   
--   If the SSM Parameter Store parameter exists in the same Region as the
--   task you are launching, then you can use either the full ARN or name
--   of the parameter. If the parameter exists in a different Region, then
--   the full ARN must be specified.
[$sel:valueFrom:Secret'] :: Secret -> Text

-- | Create a value of <a>Secret</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:Secret'</a>, <a>secret_name</a> - The name of the secret.
--   
--   <a>$sel:valueFrom:Secret'</a>, <a>secret_valueFrom</a> - The secret to
--   expose to the container. The supported values are either the full ARN
--   of the Secrets Manager secret or the full ARN of the parameter in the
--   SSM Parameter Store.
--   
--   If the SSM Parameter Store parameter exists in the same Region as the
--   task you are launching, then you can use either the full ARN or name
--   of the parameter. If the parameter exists in a different Region, then
--   the full ARN must be specified.
newSecret :: Text -> Text -> Secret

-- | The name of the secret.
secret_name :: Lens' Secret Text

-- | The secret to expose to the container. The supported values are either
--   the full ARN of the Secrets Manager secret or the full ARN of the
--   parameter in the SSM Parameter Store.
--   
--   If the SSM Parameter Store parameter exists in the same Region as the
--   task you are launching, then you can use either the full ARN or name
--   of the parameter. If the parameter exists in a different Region, then
--   the full ARN must be specified.
secret_valueFrom :: Lens' Secret Text
instance GHC.Generics.Generic Amazonka.ECS.Types.Secret.Secret
instance GHC.Show.Show Amazonka.ECS.Types.Secret.Secret
instance GHC.Read.Read Amazonka.ECS.Types.Secret.Secret
instance GHC.Classes.Eq Amazonka.ECS.Types.Secret.Secret
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Secret.Secret
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Secret.Secret
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Secret.Secret
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.Secret.Secret


module Amazonka.ECS.Types.LogConfiguration

-- | The log configuration for the container. This parameter maps to
--   <tt>LogConfig</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--log-driver</tt> option to
--   <a>docker run</a> .
--   
--   By default, containers use the same logging driver that the Docker
--   daemon uses; however the container may use a different logging driver
--   than the Docker daemon by specifying a log driver configuration in the
--   container definition. For more information on the options for
--   different supported log drivers, see <a>Configure logging drivers</a>
--   in the Docker documentation.
--   
--   The following should be noted when specifying a log configuration for
--   your containers:
--   
--   <ul>
--   <li>Amazon ECS currently supports a subset of the logging drivers
--   available to the Docker daemon (shown in the valid values below).
--   Additional log drivers may be available in future releases of the
--   Amazon ECS container agent.</li>
--   <li>This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance.</li>
--   <li>For tasks hosted on Amazon EC2 instances, the Amazon ECS container
--   agent must register the available logging drivers with the
--   <tt>ECS_AVAILABLE_LOGGING_DRIVERS</tt> environment variable before
--   containers placed on that instance can use these log configuration
--   options. For more information, see <a>Amazon ECS container agent
--   configuration</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.</li>
--   <li>For tasks on Fargate, because you do not have access to the
--   underlying infrastructure your tasks are hosted on, any additional
--   software needed will have to be installed outside of the task. For
--   example, the Fluentd output aggregators or a remote host running
--   Logstash to send Gelf logs to.</li>
--   </ul>
--   
--   <i>See:</i> <a>newLogConfiguration</a> smart constructor.
data LogConfiguration
LogConfiguration' :: Maybe (HashMap Text Text) -> Maybe [Secret] -> LogDriver -> LogConfiguration

-- | The configuration options to send to the log driver. This parameter
--   requires version 1.19 of the Docker Remote API or greater on your
--   container instance. To check the Docker Remote API version on your
--   container instance, log in to your container instance and run the
--   following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
[$sel:options:LogConfiguration'] :: LogConfiguration -> Maybe (HashMap Text Text)

-- | The secrets to pass to the log configuration. For more information,
--   see <a>Specifying Sensitive Data</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
[$sel:secretOptions:LogConfiguration'] :: LogConfiguration -> Maybe [Secret]

-- | The log driver to use for the container.
--   
--   For tasks on Fargate, the supported log drivers are <tt>awslogs</tt>,
--   <tt>splunk</tt>, and <tt>awsfirelens</tt>.
--   
--   For tasks hosted on Amazon EC2 instances, the supported log drivers
--   are <tt>awslogs</tt>, <tt>fluentd</tt>, <tt>gelf</tt>,
--   <tt>json-file</tt>, <tt>journald</tt>,
--   <tt>logentries</tt>,<tt>syslog</tt>, <tt>splunk</tt>, and
--   <tt>awsfirelens</tt>.
--   
--   For more information about using the <tt>awslogs</tt> log driver, see
--   <a>Using the awslogs log driver</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   For more information about using the <tt>awsfirelens</tt> log driver,
--   see <a>Custom log routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   If you have a custom driver that is not listed, you can fork the
--   Amazon ECS container agent project that is <a>available on GitHub</a>
--   and customize it to work with that driver. We encourage you to submit
--   pull requests for changes that you would like to have included.
--   However, we do not currently provide support for running modified
--   copies of this software.
[$sel:logDriver:LogConfiguration'] :: LogConfiguration -> LogDriver

-- | Create a value of <a>LogConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:options:LogConfiguration'</a>, <a>logConfiguration_options</a>
--   - The configuration options to send to the log driver. This parameter
--   requires version 1.19 of the Docker Remote API or greater on your
--   container instance. To check the Docker Remote API version on your
--   container instance, log in to your container instance and run the
--   following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   <a>$sel:secretOptions:LogConfiguration'</a>,
--   <a>logConfiguration_secretOptions</a> - The secrets to pass to the log
--   configuration. For more information, see <a>Specifying Sensitive
--   Data</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:logDriver:LogConfiguration'</a>,
--   <a>logConfiguration_logDriver</a> - The log driver to use for the
--   container.
--   
--   For tasks on Fargate, the supported log drivers are <tt>awslogs</tt>,
--   <tt>splunk</tt>, and <tt>awsfirelens</tt>.
--   
--   For tasks hosted on Amazon EC2 instances, the supported log drivers
--   are <tt>awslogs</tt>, <tt>fluentd</tt>, <tt>gelf</tt>,
--   <tt>json-file</tt>, <tt>journald</tt>,
--   <tt>logentries</tt>,<tt>syslog</tt>, <tt>splunk</tt>, and
--   <tt>awsfirelens</tt>.
--   
--   For more information about using the <tt>awslogs</tt> log driver, see
--   <a>Using the awslogs log driver</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   For more information about using the <tt>awsfirelens</tt> log driver,
--   see <a>Custom log routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   If you have a custom driver that is not listed, you can fork the
--   Amazon ECS container agent project that is <a>available on GitHub</a>
--   and customize it to work with that driver. We encourage you to submit
--   pull requests for changes that you would like to have included.
--   However, we do not currently provide support for running modified
--   copies of this software.
newLogConfiguration :: LogDriver -> LogConfiguration

-- | The configuration options to send to the log driver. This parameter
--   requires version 1.19 of the Docker Remote API or greater on your
--   container instance. To check the Docker Remote API version on your
--   container instance, log in to your container instance and run the
--   following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
logConfiguration_options :: Lens' LogConfiguration (Maybe (HashMap Text Text))

-- | The secrets to pass to the log configuration. For more information,
--   see <a>Specifying Sensitive Data</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
logConfiguration_secretOptions :: Lens' LogConfiguration (Maybe [Secret])

-- | The log driver to use for the container.
--   
--   For tasks on Fargate, the supported log drivers are <tt>awslogs</tt>,
--   <tt>splunk</tt>, and <tt>awsfirelens</tt>.
--   
--   For tasks hosted on Amazon EC2 instances, the supported log drivers
--   are <tt>awslogs</tt>, <tt>fluentd</tt>, <tt>gelf</tt>,
--   <tt>json-file</tt>, <tt>journald</tt>,
--   <tt>logentries</tt>,<tt>syslog</tt>, <tt>splunk</tt>, and
--   <tt>awsfirelens</tt>.
--   
--   For more information about using the <tt>awslogs</tt> log driver, see
--   <a>Using the awslogs log driver</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   For more information about using the <tt>awsfirelens</tt> log driver,
--   see <a>Custom log routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   If you have a custom driver that is not listed, you can fork the
--   Amazon ECS container agent project that is <a>available on GitHub</a>
--   and customize it to work with that driver. We encourage you to submit
--   pull requests for changes that you would like to have included.
--   However, we do not currently provide support for running modified
--   copies of this software.
logConfiguration_logDriver :: Lens' LogConfiguration LogDriver
instance GHC.Generics.Generic Amazonka.ECS.Types.LogConfiguration.LogConfiguration
instance GHC.Show.Show Amazonka.ECS.Types.LogConfiguration.LogConfiguration
instance GHC.Read.Read Amazonka.ECS.Types.LogConfiguration.LogConfiguration
instance GHC.Classes.Eq Amazonka.ECS.Types.LogConfiguration.LogConfiguration
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.LogConfiguration.LogConfiguration
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.LogConfiguration.LogConfiguration
instance Control.DeepSeq.NFData Amazonka.ECS.Types.LogConfiguration.LogConfiguration
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.LogConfiguration.LogConfiguration


module Amazonka.ECS.Types.ServiceEvent

-- | Details on an event associated with a service.
--   
--   <i>See:</i> <a>newServiceEvent</a> smart constructor.
data ServiceEvent
ServiceEvent' :: Maybe POSIX -> Maybe Text -> Maybe Text -> ServiceEvent

-- | The Unix timestamp for when the event was triggered.
[$sel:createdAt:ServiceEvent'] :: ServiceEvent -> Maybe POSIX

-- | The ID string of the event.
[$sel:id:ServiceEvent'] :: ServiceEvent -> Maybe Text

-- | The event message.
[$sel:message:ServiceEvent'] :: ServiceEvent -> Maybe Text

-- | Create a value of <a>ServiceEvent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:createdAt:ServiceEvent'</a>, <a>serviceEvent_createdAt</a> -
--   The Unix timestamp for when the event was triggered.
--   
--   <a>$sel:id:ServiceEvent'</a>, <a>serviceEvent_id</a> - The ID string
--   of the event.
--   
--   <a>$sel:message:ServiceEvent'</a>, <a>serviceEvent_message</a> - The
--   event message.
newServiceEvent :: ServiceEvent

-- | The Unix timestamp for when the event was triggered.
serviceEvent_createdAt :: Lens' ServiceEvent (Maybe UTCTime)

-- | The ID string of the event.
serviceEvent_id :: Lens' ServiceEvent (Maybe Text)

-- | The event message.
serviceEvent_message :: Lens' ServiceEvent (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.ServiceEvent.ServiceEvent
instance GHC.Show.Show Amazonka.ECS.Types.ServiceEvent.ServiceEvent
instance GHC.Read.Read Amazonka.ECS.Types.ServiceEvent.ServiceEvent
instance GHC.Classes.Eq Amazonka.ECS.Types.ServiceEvent.ServiceEvent
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ServiceEvent.ServiceEvent
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ServiceEvent.ServiceEvent
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ServiceEvent.ServiceEvent


module Amazonka.ECS.Types.ServiceField
newtype ServiceField
ServiceField' :: Text -> ServiceField
[fromServiceField] :: ServiceField -> Text
pattern ServiceField_TAGS :: ServiceField
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.ServiceField.ServiceField
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.ServiceField.ServiceField
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.ServiceField.ServiceField
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ServiceField.ServiceField
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.ServiceField.ServiceField
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ServiceField.ServiceField
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.ServiceField.ServiceField
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.ServiceField.ServiceField
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.ServiceField.ServiceField
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.ServiceField.ServiceField
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.ServiceField.ServiceField
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.ServiceField.ServiceField
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ServiceField.ServiceField
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ServiceField.ServiceField
instance GHC.Generics.Generic Amazonka.ECS.Types.ServiceField.ServiceField
instance GHC.Classes.Ord Amazonka.ECS.Types.ServiceField.ServiceField
instance GHC.Classes.Eq Amazonka.ECS.Types.ServiceField.ServiceField
instance GHC.Read.Read Amazonka.ECS.Types.ServiceField.ServiceField
instance GHC.Show.Show Amazonka.ECS.Types.ServiceField.ServiceField


module Amazonka.ECS.Types.ServiceRegistry

-- | Details of the service registry.
--   
--   <i>See:</i> <a>newServiceRegistry</a> smart constructor.
data ServiceRegistry
ServiceRegistry' :: Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> ServiceRegistry

-- | The Amazon Resource Name (ARN) of the service registry. The currently
--   supported service registry is Cloud Map. For more information, see
--   <a>CreateService</a>.
[$sel:registryArn:ServiceRegistry'] :: ServiceRegistry -> Maybe Text

-- | The container name value, already specified in the task definition, to
--   be used for your service discovery service. If the task definition
--   that your service task specifies uses the <tt>bridge</tt> or
--   <tt>host</tt> network mode, you must specify a <tt>containerName</tt>
--   and <tt>containerPort</tt> combination from the task definition. If
--   the task definition that your service task specifies uses the
--   <tt>awsvpc</tt> network mode and a type SRV DNS record is used, you
--   must specify either a <tt>containerName</tt> and
--   <tt>containerPort</tt> combination or a <tt>port</tt> value, but not
--   both.
[$sel:containerName:ServiceRegistry'] :: ServiceRegistry -> Maybe Text

-- | The port value, already specified in the task definition, to be used
--   for your service discovery service. If the task definition your
--   service task specifies uses the <tt>bridge</tt> or <tt>host</tt>
--   network mode, you must specify a <tt>containerName</tt> and
--   <tt>containerPort</tt> combination from the task definition. If the
--   task definition your service task specifies uses the <tt>awsvpc</tt>
--   network mode and a type SRV DNS record is used, you must specify
--   either a <tt>containerName</tt> and <tt>containerPort</tt> combination
--   or a <tt>port</tt> value, but not both.
[$sel:containerPort:ServiceRegistry'] :: ServiceRegistry -> Maybe Int

-- | The port value used if your service discovery service specified an SRV
--   record. This field may be used if both the <tt>awsvpc</tt> network
--   mode and SRV records are used.
[$sel:port:ServiceRegistry'] :: ServiceRegistry -> Maybe Int

-- | Create a value of <a>ServiceRegistry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryArn:ServiceRegistry'</a>,
--   <a>serviceRegistry_registryArn</a> - The Amazon Resource Name (ARN) of
--   the service registry. The currently supported service registry is
--   Cloud Map. For more information, see <a>CreateService</a>.
--   
--   <a>$sel:containerName:ServiceRegistry'</a>,
--   <a>serviceRegistry_containerName</a> - The container name value,
--   already specified in the task definition, to be used for your service
--   discovery service. If the task definition that your service task
--   specifies uses the <tt>bridge</tt> or <tt>host</tt> network mode, you
--   must specify a <tt>containerName</tt> and <tt>containerPort</tt>
--   combination from the task definition. If the task definition that your
--   service task specifies uses the <tt>awsvpc</tt> network mode and a
--   type SRV DNS record is used, you must specify either a
--   <tt>containerName</tt> and <tt>containerPort</tt> combination or a
--   <tt>port</tt> value, but not both.
--   
--   <a>$sel:containerPort:ServiceRegistry'</a>,
--   <a>serviceRegistry_containerPort</a> - The port value, already
--   specified in the task definition, to be used for your service
--   discovery service. If the task definition your service task specifies
--   uses the <tt>bridge</tt> or <tt>host</tt> network mode, you must
--   specify a <tt>containerName</tt> and <tt>containerPort</tt>
--   combination from the task definition. If the task definition your
--   service task specifies uses the <tt>awsvpc</tt> network mode and a
--   type SRV DNS record is used, you must specify either a
--   <tt>containerName</tt> and <tt>containerPort</tt> combination or a
--   <tt>port</tt> value, but not both.
--   
--   <a>$sel:port:ServiceRegistry'</a>, <a>serviceRegistry_port</a> - The
--   port value used if your service discovery service specified an SRV
--   record. This field may be used if both the <tt>awsvpc</tt> network
--   mode and SRV records are used.
newServiceRegistry :: ServiceRegistry

-- | The Amazon Resource Name (ARN) of the service registry. The currently
--   supported service registry is Cloud Map. For more information, see
--   <a>CreateService</a>.
serviceRegistry_registryArn :: Lens' ServiceRegistry (Maybe Text)

-- | The container name value, already specified in the task definition, to
--   be used for your service discovery service. If the task definition
--   that your service task specifies uses the <tt>bridge</tt> or
--   <tt>host</tt> network mode, you must specify a <tt>containerName</tt>
--   and <tt>containerPort</tt> combination from the task definition. If
--   the task definition that your service task specifies uses the
--   <tt>awsvpc</tt> network mode and a type SRV DNS record is used, you
--   must specify either a <tt>containerName</tt> and
--   <tt>containerPort</tt> combination or a <tt>port</tt> value, but not
--   both.
serviceRegistry_containerName :: Lens' ServiceRegistry (Maybe Text)

-- | The port value, already specified in the task definition, to be used
--   for your service discovery service. If the task definition your
--   service task specifies uses the <tt>bridge</tt> or <tt>host</tt>
--   network mode, you must specify a <tt>containerName</tt> and
--   <tt>containerPort</tt> combination from the task definition. If the
--   task definition your service task specifies uses the <tt>awsvpc</tt>
--   network mode and a type SRV DNS record is used, you must specify
--   either a <tt>containerName</tt> and <tt>containerPort</tt> combination
--   or a <tt>port</tt> value, but not both.
serviceRegistry_containerPort :: Lens' ServiceRegistry (Maybe Int)

-- | The port value used if your service discovery service specified an SRV
--   record. This field may be used if both the <tt>awsvpc</tt> network
--   mode and SRV records are used.
serviceRegistry_port :: Lens' ServiceRegistry (Maybe Int)
instance GHC.Generics.Generic Amazonka.ECS.Types.ServiceRegistry.ServiceRegistry
instance GHC.Show.Show Amazonka.ECS.Types.ServiceRegistry.ServiceRegistry
instance GHC.Read.Read Amazonka.ECS.Types.ServiceRegistry.ServiceRegistry
instance GHC.Classes.Eq Amazonka.ECS.Types.ServiceRegistry.ServiceRegistry
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ServiceRegistry.ServiceRegistry
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ServiceRegistry.ServiceRegistry
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ServiceRegistry.ServiceRegistry
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ServiceRegistry.ServiceRegistry


module Amazonka.ECS.Types.Session

-- | The details of the execute command session.
--   
--   <i>See:</i> <a>newSession</a> smart constructor.
data Session
Session' :: Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Session

-- | A URL back to managed agent on the container that the SSM Session
--   Manager client uses to send commands and receive output from the
--   container.
[$sel:streamUrl:Session'] :: Session -> Maybe Text

-- | An encrypted token value containing session and caller information.
--   Used to authenticate the connection to the container.
[$sel:tokenValue:Session'] :: Session -> Maybe (Sensitive Text)

-- | The ID of the execute command session.
[$sel:sessionId:Session'] :: Session -> Maybe Text

-- | Create a value of <a>Session</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamUrl:Session'</a>, <a>session_streamUrl</a> - A URL back
--   to managed agent on the container that the SSM Session Manager client
--   uses to send commands and receive output from the container.
--   
--   <a>$sel:tokenValue:Session'</a>, <a>session_tokenValue</a> - An
--   encrypted token value containing session and caller information. Used
--   to authenticate the connection to the container.
--   
--   <a>$sel:sessionId:Session'</a>, <a>session_sessionId</a> - The ID of
--   the execute command session.
newSession :: Session

-- | A URL back to managed agent on the container that the SSM Session
--   Manager client uses to send commands and receive output from the
--   container.
session_streamUrl :: Lens' Session (Maybe Text)

-- | An encrypted token value containing session and caller information.
--   Used to authenticate the connection to the container.
session_tokenValue :: Lens' Session (Maybe Text)

-- | The ID of the execute command session.
session_sessionId :: Lens' Session (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.Session.Session
instance GHC.Show.Show Amazonka.ECS.Types.Session.Session
instance GHC.Classes.Eq Amazonka.ECS.Types.Session.Session
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Session.Session
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Session.Session
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Session.Session


module Amazonka.ECS.Types.SettingName
newtype SettingName
SettingName' :: Text -> SettingName
[fromSettingName] :: SettingName -> Text
pattern SettingName_AwsvpcTrunking :: SettingName
pattern SettingName_ContainerInsights :: SettingName
pattern SettingName_ContainerInstanceLongArnFormat :: SettingName
pattern SettingName_ServiceLongArnFormat :: SettingName
pattern SettingName_TaskLongArnFormat :: SettingName
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.SettingName.SettingName
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.SettingName.SettingName
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.SettingName.SettingName
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.SettingName.SettingName
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.SettingName.SettingName
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.SettingName.SettingName
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.SettingName.SettingName
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.SettingName.SettingName
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.SettingName.SettingName
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.SettingName.SettingName
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.SettingName.SettingName
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.SettingName.SettingName
instance Control.DeepSeq.NFData Amazonka.ECS.Types.SettingName.SettingName
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.SettingName.SettingName
instance GHC.Generics.Generic Amazonka.ECS.Types.SettingName.SettingName
instance GHC.Classes.Ord Amazonka.ECS.Types.SettingName.SettingName
instance GHC.Classes.Eq Amazonka.ECS.Types.SettingName.SettingName
instance GHC.Read.Read Amazonka.ECS.Types.SettingName.SettingName
instance GHC.Show.Show Amazonka.ECS.Types.SettingName.SettingName


module Amazonka.ECS.Types.Setting

-- | The current account setting for a resource.
--   
--   <i>See:</i> <a>newSetting</a> smart constructor.
data Setting
Setting' :: Maybe Text -> Maybe SettingName -> Maybe Text -> Setting

-- | Whether the account setting is enabled or disabled for the specified
--   resource.
[$sel:value:Setting'] :: Setting -> Maybe Text

-- | The Amazon ECS resource name.
[$sel:name:Setting'] :: Setting -> Maybe SettingName

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If this field is omitted, the authenticated user is
--   assumed.
[$sel:principalArn:Setting'] :: Setting -> Maybe Text

-- | Create a value of <a>Setting</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Setting'</a>, <a>setting_value</a> - Whether the account
--   setting is enabled or disabled for the specified resource.
--   
--   <a>$sel:name:Setting'</a>, <a>setting_name</a> - The Amazon ECS
--   resource name.
--   
--   <a>$sel:principalArn:Setting'</a>, <a>setting_principalArn</a> - The
--   ARN of the principal, which can be an IAM user, IAM role, or the root
--   user. If this field is omitted, the authenticated user is assumed.
newSetting :: Setting

-- | Whether the account setting is enabled or disabled for the specified
--   resource.
setting_value :: Lens' Setting (Maybe Text)

-- | The Amazon ECS resource name.
setting_name :: Lens' Setting (Maybe SettingName)

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If this field is omitted, the authenticated user is
--   assumed.
setting_principalArn :: Lens' Setting (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.Setting.Setting
instance GHC.Show.Show Amazonka.ECS.Types.Setting.Setting
instance GHC.Read.Read Amazonka.ECS.Types.Setting.Setting
instance GHC.Classes.Eq Amazonka.ECS.Types.Setting.Setting
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Setting.Setting
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Setting.Setting
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Setting.Setting


module Amazonka.ECS.Types.SortOrder
newtype SortOrder
SortOrder' :: Text -> SortOrder
[fromSortOrder] :: SortOrder -> Text
pattern SortOrder_ASC :: SortOrder
pattern SortOrder_DESC :: SortOrder
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.SortOrder.SortOrder
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.SortOrder.SortOrder
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.SortOrder.SortOrder
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.SortOrder.SortOrder
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.SortOrder.SortOrder
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.SortOrder.SortOrder
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.SortOrder.SortOrder
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.SortOrder.SortOrder
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.SortOrder.SortOrder
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.SortOrder.SortOrder
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.SortOrder.SortOrder
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.SortOrder.SortOrder
instance Control.DeepSeq.NFData Amazonka.ECS.Types.SortOrder.SortOrder
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.SortOrder.SortOrder
instance GHC.Generics.Generic Amazonka.ECS.Types.SortOrder.SortOrder
instance GHC.Classes.Ord Amazonka.ECS.Types.SortOrder.SortOrder
instance GHC.Classes.Eq Amazonka.ECS.Types.SortOrder.SortOrder
instance GHC.Read.Read Amazonka.ECS.Types.SortOrder.SortOrder
instance GHC.Show.Show Amazonka.ECS.Types.SortOrder.SortOrder


module Amazonka.ECS.Types.StabilityStatus
newtype StabilityStatus
StabilityStatus' :: Text -> StabilityStatus
[fromStabilityStatus] :: StabilityStatus -> Text
pattern StabilityStatus_STABILIZING :: StabilityStatus
pattern StabilityStatus_STEADY_STATE :: StabilityStatus
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Control.DeepSeq.NFData Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance GHC.Generics.Generic Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance GHC.Classes.Ord Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance GHC.Classes.Eq Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance GHC.Read.Read Amazonka.ECS.Types.StabilityStatus.StabilityStatus
instance GHC.Show.Show Amazonka.ECS.Types.StabilityStatus.StabilityStatus


module Amazonka.ECS.Types.SystemControl

-- | A list of namespaced kernel parameters to set in the container. This
--   parameter maps to <tt>Sysctls</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--sysctl</tt>
--   option to <a>docker run</a>.
--   
--   It is not recommended that you specify network-related
--   <tt>systemControls</tt> parameters for multiple containers in a single
--   task that also uses either the <tt>awsvpc</tt> or <tt>host</tt>
--   network mode for the following reasons:
--   
--   <ul>
--   <li>For tasks that use the <tt>awsvpc</tt> network mode, if you set
--   <tt>systemControls</tt> for any container, it applies to all
--   containers in the task. If you set different <tt>systemControls</tt>
--   for multiple containers in a single task, the container that is
--   started last determines which <tt>systemControls</tt> take
--   effect.</li>
--   <li>For tasks that use the <tt>host</tt> network mode, the
--   <tt>systemControls</tt> parameter applies to the container instance's
--   kernel parameter as well as that of all containers of any tasks
--   running on that container instance.</li>
--   </ul>
--   
--   <i>See:</i> <a>newSystemControl</a> smart constructor.
data SystemControl
SystemControl' :: Maybe Text -> Maybe Text -> SystemControl

-- | The value for the namespaced kernel parameter specified in
--   <tt>namespace</tt>.
[$sel:value:SystemControl'] :: SystemControl -> Maybe Text

-- | The namespaced kernel parameter for which to set a <tt>value</tt>.
[$sel:namespace:SystemControl'] :: SystemControl -> Maybe Text

-- | Create a value of <a>SystemControl</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:SystemControl'</a>, <a>systemControl_value</a> - The
--   value for the namespaced kernel parameter specified in
--   <tt>namespace</tt>.
--   
--   <a>$sel:namespace:SystemControl'</a>, <a>systemControl_namespace</a> -
--   The namespaced kernel parameter for which to set a <tt>value</tt>.
newSystemControl :: SystemControl

-- | The value for the namespaced kernel parameter specified in
--   <tt>namespace</tt>.
systemControl_value :: Lens' SystemControl (Maybe Text)

-- | The namespaced kernel parameter for which to set a <tt>value</tt>.
systemControl_namespace :: Lens' SystemControl (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.SystemControl.SystemControl
instance GHC.Show.Show Amazonka.ECS.Types.SystemControl.SystemControl
instance GHC.Read.Read Amazonka.ECS.Types.SystemControl.SystemControl
instance GHC.Classes.Eq Amazonka.ECS.Types.SystemControl.SystemControl
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.SystemControl.SystemControl
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.SystemControl.SystemControl
instance Control.DeepSeq.NFData Amazonka.ECS.Types.SystemControl.SystemControl
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.SystemControl.SystemControl


module Amazonka.ECS.Types.Tag

-- | The metadata that you apply to a resource to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
[$sel:key:Tag'] :: Tag -> Maybe Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The optional part of a
--   key-value pair that make up a tag. A <tt>value</tt> acts as a
--   descriptor within a tag category (key).
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - One part of a key-value pair
--   that make up a tag. A <tt>key</tt> is a general label that acts like a
--   category for more specific tag values.
newTag :: Tag

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
tag_value :: Lens' Tag (Maybe Text)

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
tag_key :: Lens' Tag (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.Tag.Tag
instance GHC.Show.Show Amazonka.ECS.Types.Tag.Tag
instance GHC.Read.Read Amazonka.ECS.Types.Tag.Tag
instance GHC.Classes.Eq Amazonka.ECS.Types.Tag.Tag
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Tag.Tag
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Tag.Tag
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Tag.Tag
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.Tag.Tag


module Amazonka.ECS.Types.Cluster

-- | A regional grouping of one or more container instances on which you
--   can run task requests. Each account receives a default cluster the
--   first time you use the Amazon ECS service, but you may also create
--   other clusters. Clusters may contain more than one instance type
--   simultaneously.
--   
--   <i>See:</i> <a>newCluster</a> smart constructor.
data Cluster
Cluster' :: Maybe Text -> Maybe Text -> Maybe [Attachment] -> Maybe Int -> Maybe [CapacityProviderStrategyItem] -> Maybe [ClusterSetting] -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe [KeyValuePair] -> Maybe ClusterConfiguration -> Maybe Text -> Maybe [Text] -> Maybe Int -> Maybe [Tag] -> Cluster

-- | The status of the cluster. The following are the possible states that
--   will be returned.
--   
--   <ul>
--   <li><i>ACTIVE</i> The cluster is ready to accept tasks and if
--   applicable you can register container instances with the cluster.</li>
--   <li><i>PROVISIONING</i> The cluster has capacity providers associated
--   with it and the resources needed for the capacity provider are being
--   created.</li>
--   <li><i>DEPROVISIONING</i> The cluster has capacity providers
--   associated with it and the resources needed for the capacity provider
--   are being deleted.</li>
--   <li><i>FAILED</i> The cluster has capacity providers associated with
--   it and the resources needed for the capacity provider have failed to
--   create.</li>
--   <li><i>INACTIVE</i> The cluster has been deleted. Clusters with an
--   <tt>INACTIVE</tt> status may remain discoverable in your account for a
--   period of time. However, this behavior is subject to change in the
--   future, so you should not rely on <tt>INACTIVE</tt> clusters
--   persisting.</li>
--   </ul>
[$sel:status:Cluster'] :: Cluster -> Maybe Text

-- | The Amazon Resource Name (ARN) that identifies the cluster. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the cluster, the Amazon Web Services account ID of the cluster owner,
--   the <tt>cluster</tt> namespace, and then the cluster name. For
--   example, <tt>arn:aws:ecs:region:012345678910:cluster/test</tt>.
[$sel:clusterArn:Cluster'] :: Cluster -> Maybe Text

-- | The resources attached to a cluster. When using a capacity provider
--   with a cluster, the Auto Scaling plan that is created will be returned
--   as a cluster attachment.
[$sel:attachments:Cluster'] :: Cluster -> Maybe [Attachment]

-- | The number of tasks in the cluster that are in the <tt>RUNNING</tt>
--   state.
[$sel:runningTasksCount:Cluster'] :: Cluster -> Maybe Int

-- | The default capacity provider strategy for the cluster. When services
--   or tasks are run in the cluster with no launch type or capacity
--   provider strategy specified, the default capacity provider strategy is
--   used.
[$sel:defaultCapacityProviderStrategy:Cluster'] :: Cluster -> Maybe [CapacityProviderStrategyItem]

-- | The settings for the cluster. This parameter indicates whether
--   CloudWatch Container Insights is enabled or disabled for a cluster.
[$sel:settings:Cluster'] :: Cluster -> Maybe [ClusterSetting]

-- | The number of container instances registered into the cluster. This
--   includes container instances in both <tt>ACTIVE</tt> and
--   <tt>DRAINING</tt> status.
[$sel:registeredContainerInstancesCount:Cluster'] :: Cluster -> Maybe Int

-- | The number of tasks in the cluster that are in the <tt>PENDING</tt>
--   state.
[$sel:pendingTasksCount:Cluster'] :: Cluster -> Maybe Int

-- | A user-generated string that you use to identify your cluster.
[$sel:clusterName:Cluster'] :: Cluster -> Maybe Text

-- | Additional information about your clusters that are separated by
--   launch type, including:
--   
--   <ul>
--   <li>runningEC2TasksCount</li>
--   <li>RunningFargateTasksCount</li>
--   <li>pendingEC2TasksCount</li>
--   <li>pendingFargateTasksCount</li>
--   <li>activeEC2ServiceCount</li>
--   <li>activeFargateServiceCount</li>
--   <li>drainingEC2ServiceCount</li>
--   <li>drainingFargateServiceCount</li>
--   </ul>
[$sel:statistics:Cluster'] :: Cluster -> Maybe [KeyValuePair]

-- | The execute command configuration for the cluster.
[$sel:configuration:Cluster'] :: Cluster -> Maybe ClusterConfiguration

-- | The status of the capacity providers associated with the cluster. The
--   following are the states that will be returned:
--   
--   <ul>
--   <li><i>UPDATE_IN_PROGRESS</i> The available capacity providers for the
--   cluster are updating. This occurs when the Auto Scaling plan is
--   provisioning or deprovisioning.</li>
--   <li><i>UPDATE_COMPLETE</i> The capacity providers have successfully
--   updated.</li>
--   <li><i>UPDATE_FAILED</i> The capacity provider updates failed.</li>
--   </ul>
[$sel:attachmentsStatus:Cluster'] :: Cluster -> Maybe Text

-- | The capacity providers associated with the cluster.
[$sel:capacityProviders:Cluster'] :: Cluster -> Maybe [Text]

-- | The number of services that are running on the cluster in an
--   <tt>ACTIVE</tt> state. You can view these services with ListServices.
[$sel:activeServicesCount:Cluster'] :: Cluster -> Maybe Int

-- | The metadata that you apply to the cluster to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:Cluster'] :: Cluster -> Maybe [Tag]

-- | Create a value of <a>Cluster</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:Cluster'</a>, <a>cluster_status</a> - The status of the
--   cluster. The following are the possible states that will be returned.
--   
--   <ul>
--   <li><i>ACTIVE</i> The cluster is ready to accept tasks and if
--   applicable you can register container instances with the cluster.</li>
--   <li><i>PROVISIONING</i> The cluster has capacity providers associated
--   with it and the resources needed for the capacity provider are being
--   created.</li>
--   <li><i>DEPROVISIONING</i> The cluster has capacity providers
--   associated with it and the resources needed for the capacity provider
--   are being deleted.</li>
--   <li><i>FAILED</i> The cluster has capacity providers associated with
--   it and the resources needed for the capacity provider have failed to
--   create.</li>
--   <li><i>INACTIVE</i> The cluster has been deleted. Clusters with an
--   <tt>INACTIVE</tt> status may remain discoverable in your account for a
--   period of time. However, this behavior is subject to change in the
--   future, so you should not rely on <tt>INACTIVE</tt> clusters
--   persisting.</li>
--   </ul>
--   
--   <a>$sel:clusterArn:Cluster'</a>, <a>cluster_clusterArn</a> - The
--   Amazon Resource Name (ARN) that identifies the cluster. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the cluster, the Amazon Web Services account ID of the cluster owner,
--   the <tt>cluster</tt> namespace, and then the cluster name. For
--   example, <tt>arn:aws:ecs:region:012345678910:cluster/test</tt>.
--   
--   <a>$sel:attachments:Cluster'</a>, <a>cluster_attachments</a> - The
--   resources attached to a cluster. When using a capacity provider with a
--   cluster, the Auto Scaling plan that is created will be returned as a
--   cluster attachment.
--   
--   <a>$sel:runningTasksCount:Cluster'</a>,
--   <a>cluster_runningTasksCount</a> - The number of tasks in the cluster
--   that are in the <tt>RUNNING</tt> state.
--   
--   <a>$sel:defaultCapacityProviderStrategy:Cluster'</a>,
--   <a>cluster_defaultCapacityProviderStrategy</a> - The default capacity
--   provider strategy for the cluster. When services or tasks are run in
--   the cluster with no launch type or capacity provider strategy
--   specified, the default capacity provider strategy is used.
--   
--   <a>$sel:settings:Cluster'</a>, <a>cluster_settings</a> - The settings
--   for the cluster. This parameter indicates whether CloudWatch Container
--   Insights is enabled or disabled for a cluster.
--   
--   <a>$sel:registeredContainerInstancesCount:Cluster'</a>,
--   <a>cluster_registeredContainerInstancesCount</a> - The number of
--   container instances registered into the cluster. This includes
--   container instances in both <tt>ACTIVE</tt> and <tt>DRAINING</tt>
--   status.
--   
--   <a>$sel:pendingTasksCount:Cluster'</a>,
--   <a>cluster_pendingTasksCount</a> - The number of tasks in the cluster
--   that are in the <tt>PENDING</tt> state.
--   
--   <a>$sel:clusterName:Cluster'</a>, <a>cluster_clusterName</a> - A
--   user-generated string that you use to identify your cluster.
--   
--   <a>$sel:statistics:Cluster'</a>, <a>cluster_statistics</a> -
--   Additional information about your clusters that are separated by
--   launch type, including:
--   
--   <ul>
--   <li>runningEC2TasksCount</li>
--   <li>RunningFargateTasksCount</li>
--   <li>pendingEC2TasksCount</li>
--   <li>pendingFargateTasksCount</li>
--   <li>activeEC2ServiceCount</li>
--   <li>activeFargateServiceCount</li>
--   <li>drainingEC2ServiceCount</li>
--   <li>drainingFargateServiceCount</li>
--   </ul>
--   
--   <a>$sel:configuration:Cluster'</a>, <a>cluster_configuration</a> - The
--   execute command configuration for the cluster.
--   
--   <a>$sel:attachmentsStatus:Cluster'</a>,
--   <a>cluster_attachmentsStatus</a> - The status of the capacity
--   providers associated with the cluster. The following are the states
--   that will be returned:
--   
--   <ul>
--   <li><i>UPDATE_IN_PROGRESS</i> The available capacity providers for the
--   cluster are updating. This occurs when the Auto Scaling plan is
--   provisioning or deprovisioning.</li>
--   <li><i>UPDATE_COMPLETE</i> The capacity providers have successfully
--   updated.</li>
--   <li><i>UPDATE_FAILED</i> The capacity provider updates failed.</li>
--   </ul>
--   
--   <a>$sel:capacityProviders:Cluster'</a>,
--   <a>cluster_capacityProviders</a> - The capacity providers associated
--   with the cluster.
--   
--   <a>$sel:activeServicesCount:Cluster'</a>,
--   <a>cluster_activeServicesCount</a> - The number of services that are
--   running on the cluster in an <tt>ACTIVE</tt> state. You can view these
--   services with ListServices.
--   
--   <a>$sel:tags:Cluster'</a>, <a>cluster_tags</a> - The metadata that you
--   apply to the cluster to help you categorize and organize them. Each
--   tag consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newCluster :: Cluster

-- | The status of the cluster. The following are the possible states that
--   will be returned.
--   
--   <ul>
--   <li><i>ACTIVE</i> The cluster is ready to accept tasks and if
--   applicable you can register container instances with the cluster.</li>
--   <li><i>PROVISIONING</i> The cluster has capacity providers associated
--   with it and the resources needed for the capacity provider are being
--   created.</li>
--   <li><i>DEPROVISIONING</i> The cluster has capacity providers
--   associated with it and the resources needed for the capacity provider
--   are being deleted.</li>
--   <li><i>FAILED</i> The cluster has capacity providers associated with
--   it and the resources needed for the capacity provider have failed to
--   create.</li>
--   <li><i>INACTIVE</i> The cluster has been deleted. Clusters with an
--   <tt>INACTIVE</tt> status may remain discoverable in your account for a
--   period of time. However, this behavior is subject to change in the
--   future, so you should not rely on <tt>INACTIVE</tt> clusters
--   persisting.</li>
--   </ul>
cluster_status :: Lens' Cluster (Maybe Text)

-- | The Amazon Resource Name (ARN) that identifies the cluster. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the cluster, the Amazon Web Services account ID of the cluster owner,
--   the <tt>cluster</tt> namespace, and then the cluster name. For
--   example, <tt>arn:aws:ecs:region:012345678910:cluster/test</tt>.
cluster_clusterArn :: Lens' Cluster (Maybe Text)

-- | The resources attached to a cluster. When using a capacity provider
--   with a cluster, the Auto Scaling plan that is created will be returned
--   as a cluster attachment.
cluster_attachments :: Lens' Cluster (Maybe [Attachment])

-- | The number of tasks in the cluster that are in the <tt>RUNNING</tt>
--   state.
cluster_runningTasksCount :: Lens' Cluster (Maybe Int)

-- | The default capacity provider strategy for the cluster. When services
--   or tasks are run in the cluster with no launch type or capacity
--   provider strategy specified, the default capacity provider strategy is
--   used.
cluster_defaultCapacityProviderStrategy :: Lens' Cluster (Maybe [CapacityProviderStrategyItem])

-- | The settings for the cluster. This parameter indicates whether
--   CloudWatch Container Insights is enabled or disabled for a cluster.
cluster_settings :: Lens' Cluster (Maybe [ClusterSetting])

-- | The number of container instances registered into the cluster. This
--   includes container instances in both <tt>ACTIVE</tt> and
--   <tt>DRAINING</tt> status.
cluster_registeredContainerInstancesCount :: Lens' Cluster (Maybe Int)

-- | The number of tasks in the cluster that are in the <tt>PENDING</tt>
--   state.
cluster_pendingTasksCount :: Lens' Cluster (Maybe Int)

-- | A user-generated string that you use to identify your cluster.
cluster_clusterName :: Lens' Cluster (Maybe Text)

-- | Additional information about your clusters that are separated by
--   launch type, including:
--   
--   <ul>
--   <li>runningEC2TasksCount</li>
--   <li>RunningFargateTasksCount</li>
--   <li>pendingEC2TasksCount</li>
--   <li>pendingFargateTasksCount</li>
--   <li>activeEC2ServiceCount</li>
--   <li>activeFargateServiceCount</li>
--   <li>drainingEC2ServiceCount</li>
--   <li>drainingFargateServiceCount</li>
--   </ul>
cluster_statistics :: Lens' Cluster (Maybe [KeyValuePair])

-- | The execute command configuration for the cluster.
cluster_configuration :: Lens' Cluster (Maybe ClusterConfiguration)

-- | The status of the capacity providers associated with the cluster. The
--   following are the states that will be returned:
--   
--   <ul>
--   <li><i>UPDATE_IN_PROGRESS</i> The available capacity providers for the
--   cluster are updating. This occurs when the Auto Scaling plan is
--   provisioning or deprovisioning.</li>
--   <li><i>UPDATE_COMPLETE</i> The capacity providers have successfully
--   updated.</li>
--   <li><i>UPDATE_FAILED</i> The capacity provider updates failed.</li>
--   </ul>
cluster_attachmentsStatus :: Lens' Cluster (Maybe Text)

-- | The capacity providers associated with the cluster.
cluster_capacityProviders :: Lens' Cluster (Maybe [Text])

-- | The number of services that are running on the cluster in an
--   <tt>ACTIVE</tt> state. You can view these services with ListServices.
cluster_activeServicesCount :: Lens' Cluster (Maybe Int)

-- | The metadata that you apply to the cluster to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
cluster_tags :: Lens' Cluster (Maybe [Tag])
instance GHC.Generics.Generic Amazonka.ECS.Types.Cluster.Cluster
instance GHC.Show.Show Amazonka.ECS.Types.Cluster.Cluster
instance GHC.Read.Read Amazonka.ECS.Types.Cluster.Cluster
instance GHC.Classes.Eq Amazonka.ECS.Types.Cluster.Cluster
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Cluster.Cluster
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Cluster.Cluster
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Cluster.Cluster


module Amazonka.ECS.Types.CapacityProvider

-- | The details of a capacity provider.
--   
--   <i>See:</i> <a>newCapacityProvider</a> smart constructor.
data CapacityProvider
CapacityProvider' :: Maybe CapacityProviderStatus -> Maybe Text -> Maybe AutoScalingGroupProvider -> Maybe Text -> Maybe CapacityProviderUpdateStatus -> Maybe Text -> Maybe [Tag] -> CapacityProvider

-- | The current status of the capacity provider. Only capacity providers
--   in an <tt>ACTIVE</tt> state can be used in a cluster. When a capacity
--   provider is successfully deleted, it will have an <tt>INACTIVE</tt>
--   status.
[$sel:status:CapacityProvider'] :: CapacityProvider -> Maybe CapacityProviderStatus

-- | The update status reason. This provides further details about the
--   update status for the capacity provider.
[$sel:updateStatusReason:CapacityProvider'] :: CapacityProvider -> Maybe Text

-- | The Auto Scaling group settings for the capacity provider.
[$sel:autoScalingGroupProvider:CapacityProvider'] :: CapacityProvider -> Maybe AutoScalingGroupProvider

-- | The name of the capacity provider.
[$sel:name:CapacityProvider'] :: CapacityProvider -> Maybe Text

-- | The update status of the capacity provider. The following are the
--   possible states that will be returned.
--   
--   <ul>
--   <li><i>DELETE_IN_PROGRESS</i> The capacity provider is in the process
--   of being deleted.</li>
--   <li><i>DELETE_COMPLETE</i> The capacity provider has been successfully
--   deleted and will have an <tt>INACTIVE</tt> status.</li>
--   <li><i>DELETE_FAILED</i> The capacity provider was unable to be
--   deleted. The update status reason will provide further details about
--   why the delete failed.</li>
--   </ul>
[$sel:updateStatus:CapacityProvider'] :: CapacityProvider -> Maybe CapacityProviderUpdateStatus

-- | The Amazon Resource Name (ARN) that identifies the capacity provider.
[$sel:capacityProviderArn:CapacityProvider'] :: CapacityProvider -> Maybe Text

-- | The metadata that you apply to the capacity provider to help you
--   categorize and organize it. Each tag consists of a key and an optional
--   value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:CapacityProvider'] :: CapacityProvider -> Maybe [Tag]

-- | Create a value of <a>CapacityProvider</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CapacityProvider'</a>, <a>capacityProvider_status</a> -
--   The current status of the capacity provider. Only capacity providers
--   in an <tt>ACTIVE</tt> state can be used in a cluster. When a capacity
--   provider is successfully deleted, it will have an <tt>INACTIVE</tt>
--   status.
--   
--   <a>$sel:updateStatusReason:CapacityProvider'</a>,
--   <a>capacityProvider_updateStatusReason</a> - The update status reason.
--   This provides further details about the update status for the capacity
--   provider.
--   
--   <a>$sel:autoScalingGroupProvider:CapacityProvider'</a>,
--   <a>capacityProvider_autoScalingGroupProvider</a> - The Auto Scaling
--   group settings for the capacity provider.
--   
--   <a>$sel:name:CapacityProvider'</a>, <a>capacityProvider_name</a> - The
--   name of the capacity provider.
--   
--   <a>$sel:updateStatus:CapacityProvider'</a>,
--   <a>capacityProvider_updateStatus</a> - The update status of the
--   capacity provider. The following are the possible states that will be
--   returned.
--   
--   <ul>
--   <li><i>DELETE_IN_PROGRESS</i> The capacity provider is in the process
--   of being deleted.</li>
--   <li><i>DELETE_COMPLETE</i> The capacity provider has been successfully
--   deleted and will have an <tt>INACTIVE</tt> status.</li>
--   <li><i>DELETE_FAILED</i> The capacity provider was unable to be
--   deleted. The update status reason will provide further details about
--   why the delete failed.</li>
--   </ul>
--   
--   <a>$sel:capacityProviderArn:CapacityProvider'</a>,
--   <a>capacityProvider_capacityProviderArn</a> - The Amazon Resource Name
--   (ARN) that identifies the capacity provider.
--   
--   <a>$sel:tags:CapacityProvider'</a>, <a>capacityProvider_tags</a> - The
--   metadata that you apply to the capacity provider to help you
--   categorize and organize it. Each tag consists of a key and an optional
--   value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newCapacityProvider :: CapacityProvider

-- | The current status of the capacity provider. Only capacity providers
--   in an <tt>ACTIVE</tt> state can be used in a cluster. When a capacity
--   provider is successfully deleted, it will have an <tt>INACTIVE</tt>
--   status.
capacityProvider_status :: Lens' CapacityProvider (Maybe CapacityProviderStatus)

-- | The update status reason. This provides further details about the
--   update status for the capacity provider.
capacityProvider_updateStatusReason :: Lens' CapacityProvider (Maybe Text)

-- | The Auto Scaling group settings for the capacity provider.
capacityProvider_autoScalingGroupProvider :: Lens' CapacityProvider (Maybe AutoScalingGroupProvider)

-- | The name of the capacity provider.
capacityProvider_name :: Lens' CapacityProvider (Maybe Text)

-- | The update status of the capacity provider. The following are the
--   possible states that will be returned.
--   
--   <ul>
--   <li><i>DELETE_IN_PROGRESS</i> The capacity provider is in the process
--   of being deleted.</li>
--   <li><i>DELETE_COMPLETE</i> The capacity provider has been successfully
--   deleted and will have an <tt>INACTIVE</tt> status.</li>
--   <li><i>DELETE_FAILED</i> The capacity provider was unable to be
--   deleted. The update status reason will provide further details about
--   why the delete failed.</li>
--   </ul>
capacityProvider_updateStatus :: Lens' CapacityProvider (Maybe CapacityProviderUpdateStatus)

-- | The Amazon Resource Name (ARN) that identifies the capacity provider.
capacityProvider_capacityProviderArn :: Lens' CapacityProvider (Maybe Text)

-- | The metadata that you apply to the capacity provider to help you
--   categorize and organize it. Each tag consists of a key and an optional
--   value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
capacityProvider_tags :: Lens' CapacityProvider (Maybe [Tag])
instance GHC.Generics.Generic Amazonka.ECS.Types.CapacityProvider.CapacityProvider
instance GHC.Show.Show Amazonka.ECS.Types.CapacityProvider.CapacityProvider
instance GHC.Read.Read Amazonka.ECS.Types.CapacityProvider.CapacityProvider
instance GHC.Classes.Eq Amazonka.ECS.Types.CapacityProvider.CapacityProvider
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.CapacityProvider.CapacityProvider
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.CapacityProvider.CapacityProvider
instance Control.DeepSeq.NFData Amazonka.ECS.Types.CapacityProvider.CapacityProvider


module Amazonka.ECS.Types.TargetType
newtype TargetType
TargetType' :: Text -> TargetType
[fromTargetType] :: TargetType -> Text
pattern TargetType_Container_instance :: TargetType
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.TargetType.TargetType
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.TargetType.TargetType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.TargetType.TargetType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.TargetType.TargetType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.TargetType.TargetType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TargetType.TargetType
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.TargetType.TargetType
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.TargetType.TargetType
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.TargetType.TargetType
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.TargetType.TargetType
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.TargetType.TargetType
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.TargetType.TargetType
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TargetType.TargetType
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TargetType.TargetType
instance GHC.Generics.Generic Amazonka.ECS.Types.TargetType.TargetType
instance GHC.Classes.Ord Amazonka.ECS.Types.TargetType.TargetType
instance GHC.Classes.Eq Amazonka.ECS.Types.TargetType.TargetType
instance GHC.Read.Read Amazonka.ECS.Types.TargetType.TargetType
instance GHC.Show.Show Amazonka.ECS.Types.TargetType.TargetType


module Amazonka.ECS.Types.Attribute

-- | An attribute is a name-value pair associated with an Amazon ECS
--   object. Attributes enable you to extend the Amazon ECS data model by
--   adding custom metadata to your resources. For more information, see
--   <a>Attributes</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <i>See:</i> <a>newAttribute</a> smart constructor.
data Attribute
Attribute' :: Maybe Text -> Maybe Text -> Maybe TargetType -> Text -> Attribute

-- | The ID of the target. You can specify the short form ID for a resource
--   or the full Amazon Resource Name (ARN).
[$sel:targetId:Attribute'] :: Attribute -> Maybe Text

-- | The value of the attribute. The <tt>value</tt> must contain between 1
--   and 128 characters and may contain letters (uppercase and lowercase),
--   numbers, hyphens, underscores, periods, at signs (@), forward slashes,
--   back slashes, colons, or spaces. The value cannot contain any leading
--   or trailing whitespace.
[$sel:value:Attribute'] :: Attribute -> Maybe Text

-- | The type of the target with which to attach the attribute. This
--   parameter is required if you use the short form ID for a resource
--   instead of the full ARN.
[$sel:targetType:Attribute'] :: Attribute -> Maybe TargetType

-- | The name of the attribute. The <tt>name</tt> must contain between 1
--   and 128 characters and name may contain letters (uppercase and
--   lowercase), numbers, hyphens, underscores, forward slashes, back
--   slashes, or periods.
[$sel:name:Attribute'] :: Attribute -> Text

-- | Create a value of <a>Attribute</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targetId:Attribute'</a>, <a>attribute_targetId</a> - The ID of
--   the target. You can specify the short form ID for a resource or the
--   full Amazon Resource Name (ARN).
--   
--   <a>$sel:value:Attribute'</a>, <a>attribute_value</a> - The value of
--   the attribute. The <tt>value</tt> must contain between 1 and 128
--   characters and may contain letters (uppercase and lowercase), numbers,
--   hyphens, underscores, periods, at signs (@), forward slashes, back
--   slashes, colons, or spaces. The value cannot contain any leading or
--   trailing whitespace.
--   
--   <a>$sel:targetType:Attribute'</a>, <a>attribute_targetType</a> - The
--   type of the target with which to attach the attribute. This parameter
--   is required if you use the short form ID for a resource instead of the
--   full ARN.
--   
--   <a>$sel:name:Attribute'</a>, <a>attribute_name</a> - The name of the
--   attribute. The <tt>name</tt> must contain between 1 and 128 characters
--   and name may contain letters (uppercase and lowercase), numbers,
--   hyphens, underscores, forward slashes, back slashes, or periods.
newAttribute :: Text -> Attribute

-- | The ID of the target. You can specify the short form ID for a resource
--   or the full Amazon Resource Name (ARN).
attribute_targetId :: Lens' Attribute (Maybe Text)

-- | The value of the attribute. The <tt>value</tt> must contain between 1
--   and 128 characters and may contain letters (uppercase and lowercase),
--   numbers, hyphens, underscores, periods, at signs (@), forward slashes,
--   back slashes, colons, or spaces. The value cannot contain any leading
--   or trailing whitespace.
attribute_value :: Lens' Attribute (Maybe Text)

-- | The type of the target with which to attach the attribute. This
--   parameter is required if you use the short form ID for a resource
--   instead of the full ARN.
attribute_targetType :: Lens' Attribute (Maybe TargetType)

-- | The name of the attribute. The <tt>name</tt> must contain between 1
--   and 128 characters and name may contain letters (uppercase and
--   lowercase), numbers, hyphens, underscores, forward slashes, back
--   slashes, or periods.
attribute_name :: Lens' Attribute Text
instance GHC.Generics.Generic Amazonka.ECS.Types.Attribute.Attribute
instance GHC.Show.Show Amazonka.ECS.Types.Attribute.Attribute
instance GHC.Read.Read Amazonka.ECS.Types.Attribute.Attribute
instance GHC.Classes.Eq Amazonka.ECS.Types.Attribute.Attribute
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Attribute.Attribute
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Attribute.Attribute
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Attribute.Attribute
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.Attribute.Attribute


module Amazonka.ECS.Types.TaskDefinitionFamilyStatus
newtype TaskDefinitionFamilyStatus
TaskDefinitionFamilyStatus' :: Text -> TaskDefinitionFamilyStatus
[fromTaskDefinitionFamilyStatus] :: TaskDefinitionFamilyStatus -> Text
pattern TaskDefinitionFamilyStatus_ACTIVE :: TaskDefinitionFamilyStatus
pattern TaskDefinitionFamilyStatus_ALL :: TaskDefinitionFamilyStatus
pattern TaskDefinitionFamilyStatus_INACTIVE :: TaskDefinitionFamilyStatus
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance GHC.Generics.Generic Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance GHC.Classes.Ord Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance GHC.Classes.Eq Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance GHC.Read.Read Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus
instance GHC.Show.Show Amazonka.ECS.Types.TaskDefinitionFamilyStatus.TaskDefinitionFamilyStatus


module Amazonka.ECS.Types.TaskDefinitionField
newtype TaskDefinitionField
TaskDefinitionField' :: Text -> TaskDefinitionField
[fromTaskDefinitionField] :: TaskDefinitionField -> Text
pattern TaskDefinitionField_TAGS :: TaskDefinitionField
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance GHC.Generics.Generic Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance GHC.Classes.Ord Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance GHC.Classes.Eq Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance GHC.Read.Read Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField
instance GHC.Show.Show Amazonka.ECS.Types.TaskDefinitionField.TaskDefinitionField


module Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType
newtype TaskDefinitionPlacementConstraintType
TaskDefinitionPlacementConstraintType' :: Text -> TaskDefinitionPlacementConstraintType
[fromTaskDefinitionPlacementConstraintType] :: TaskDefinitionPlacementConstraintType -> Text
pattern TaskDefinitionPlacementConstraintType_MemberOf :: TaskDefinitionPlacementConstraintType
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance GHC.Generics.Generic Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance GHC.Classes.Ord Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance GHC.Classes.Eq Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance GHC.Read.Read Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType
instance GHC.Show.Show Amazonka.ECS.Types.TaskDefinitionPlacementConstraintType.TaskDefinitionPlacementConstraintType


module Amazonka.ECS.Types.TaskDefinitionPlacementConstraint

-- | An object representing a constraint on task placement in the task
--   definition. For more information, see <a>Task placement
--   constraints</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   Task placement constraints are not supported for tasks run on Fargate.
--   
--   <i>See:</i> <a>newTaskDefinitionPlacementConstraint</a> smart
--   constructor.
data TaskDefinitionPlacementConstraint
TaskDefinitionPlacementConstraint' :: Maybe Text -> Maybe TaskDefinitionPlacementConstraintType -> TaskDefinitionPlacementConstraint

-- | A cluster query language expression to apply to the constraint. For
--   more information, see <a>Cluster query language</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:expression:TaskDefinitionPlacementConstraint'] :: TaskDefinitionPlacementConstraint -> Maybe Text

-- | The type of constraint. The <tt>MemberOf</tt> constraint restricts
--   selection to be from a group of valid candidates.
[$sel:type':TaskDefinitionPlacementConstraint'] :: TaskDefinitionPlacementConstraint -> Maybe TaskDefinitionPlacementConstraintType

-- | Create a value of <a>TaskDefinitionPlacementConstraint</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expression:TaskDefinitionPlacementConstraint'</a>,
--   <a>taskDefinitionPlacementConstraint_expression</a> - A cluster query
--   language expression to apply to the constraint. For more information,
--   see <a>Cluster query language</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:type':TaskDefinitionPlacementConstraint'</a>,
--   <a>taskDefinitionPlacementConstraint_type</a> - The type of
--   constraint. The <tt>MemberOf</tt> constraint restricts selection to be
--   from a group of valid candidates.
newTaskDefinitionPlacementConstraint :: TaskDefinitionPlacementConstraint

-- | A cluster query language expression to apply to the constraint. For
--   more information, see <a>Cluster query language</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
taskDefinitionPlacementConstraint_expression :: Lens' TaskDefinitionPlacementConstraint (Maybe Text)

-- | The type of constraint. The <tt>MemberOf</tt> constraint restricts
--   selection to be from a group of valid candidates.
taskDefinitionPlacementConstraint_type :: Lens' TaskDefinitionPlacementConstraint (Maybe TaskDefinitionPlacementConstraintType)
instance GHC.Generics.Generic Amazonka.ECS.Types.TaskDefinitionPlacementConstraint.TaskDefinitionPlacementConstraint
instance GHC.Show.Show Amazonka.ECS.Types.TaskDefinitionPlacementConstraint.TaskDefinitionPlacementConstraint
instance GHC.Read.Read Amazonka.ECS.Types.TaskDefinitionPlacementConstraint.TaskDefinitionPlacementConstraint
instance GHC.Classes.Eq Amazonka.ECS.Types.TaskDefinitionPlacementConstraint.TaskDefinitionPlacementConstraint
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TaskDefinitionPlacementConstraint.TaskDefinitionPlacementConstraint
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TaskDefinitionPlacementConstraint.TaskDefinitionPlacementConstraint
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TaskDefinitionPlacementConstraint.TaskDefinitionPlacementConstraint
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.TaskDefinitionPlacementConstraint.TaskDefinitionPlacementConstraint


module Amazonka.ECS.Types.TaskDefinitionStatus
newtype TaskDefinitionStatus
TaskDefinitionStatus' :: Text -> TaskDefinitionStatus
[fromTaskDefinitionStatus] :: TaskDefinitionStatus -> Text
pattern TaskDefinitionStatus_ACTIVE :: TaskDefinitionStatus
pattern TaskDefinitionStatus_INACTIVE :: TaskDefinitionStatus
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance GHC.Generics.Generic Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance GHC.Classes.Ord Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance GHC.Classes.Eq Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance GHC.Read.Read Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus
instance GHC.Show.Show Amazonka.ECS.Types.TaskDefinitionStatus.TaskDefinitionStatus


module Amazonka.ECS.Types.TaskField
newtype TaskField
TaskField' :: Text -> TaskField
[fromTaskField] :: TaskField -> Text
pattern TaskField_TAGS :: TaskField
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.TaskField.TaskField
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.TaskField.TaskField
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.TaskField.TaskField
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.TaskField.TaskField
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.TaskField.TaskField
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TaskField.TaskField
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.TaskField.TaskField
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.TaskField.TaskField
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.TaskField.TaskField
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.TaskField.TaskField
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.TaskField.TaskField
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.TaskField.TaskField
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TaskField.TaskField
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TaskField.TaskField
instance GHC.Generics.Generic Amazonka.ECS.Types.TaskField.TaskField
instance GHC.Classes.Ord Amazonka.ECS.Types.TaskField.TaskField
instance GHC.Classes.Eq Amazonka.ECS.Types.TaskField.TaskField
instance GHC.Read.Read Amazonka.ECS.Types.TaskField.TaskField
instance GHC.Show.Show Amazonka.ECS.Types.TaskField.TaskField


module Amazonka.ECS.Types.TaskOverride

-- | The overrides associated with a task.
--   
--   <i>See:</i> <a>newTaskOverride</a> smart constructor.
data TaskOverride
TaskOverride' :: Maybe [ContainerOverride] -> Maybe Text -> Maybe EphemeralStorage -> Maybe Text -> Maybe Text -> Maybe [InferenceAcceleratorOverride] -> Maybe Text -> TaskOverride

-- | One or more container overrides sent to a task.
[$sel:containerOverrides:TaskOverride'] :: TaskOverride -> Maybe [ContainerOverride]

-- | The Amazon Resource Name (ARN) of the task execution IAM role override
--   for the task. For more information, see <a>Amazon ECS task execution
--   IAM role</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:executionRoleArn:TaskOverride'] :: TaskOverride -> Maybe Text

-- | The ephemeral storage setting override for the task.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
[$sel:ephemeralStorage:TaskOverride'] :: TaskOverride -> Maybe EphemeralStorage

-- | The memory override for the task.
[$sel:memory:TaskOverride'] :: TaskOverride -> Maybe Text

-- | The Amazon Resource Name (ARN) of the IAM role that containers in this
--   task can assume. All containers in this task are granted the
--   permissions that are specified in this role. For more information, see
--   <a>IAM Role for Tasks</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
[$sel:taskRoleArn:TaskOverride'] :: TaskOverride -> Maybe Text

-- | The Elastic Inference accelerator override for the task.
[$sel:inferenceAcceleratorOverrides:TaskOverride'] :: TaskOverride -> Maybe [InferenceAcceleratorOverride]

-- | The cpu override for the task.
[$sel:cpu:TaskOverride'] :: TaskOverride -> Maybe Text

-- | Create a value of <a>TaskOverride</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerOverrides:TaskOverride'</a>,
--   <a>taskOverride_containerOverrides</a> - One or more container
--   overrides sent to a task.
--   
--   <a>$sel:executionRoleArn:TaskOverride'</a>,
--   <a>taskOverride_executionRoleArn</a> - The Amazon Resource Name (ARN)
--   of the task execution IAM role override for the task. For more
--   information, see <a>Amazon ECS task execution IAM role</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:ephemeralStorage:TaskOverride'</a>,
--   <a>taskOverride_ephemeralStorage</a> - The ephemeral storage setting
--   override for the task.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
--   
--   <a>$sel:memory:TaskOverride'</a>, <a>taskOverride_memory</a> - The
--   memory override for the task.
--   
--   <a>$sel:taskRoleArn:TaskOverride'</a>, <a>taskOverride_taskRoleArn</a>
--   - The Amazon Resource Name (ARN) of the IAM role that containers in
--   this task can assume. All containers in this task are granted the
--   permissions that are specified in this role. For more information, see
--   <a>IAM Role for Tasks</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <a>$sel:inferenceAcceleratorOverrides:TaskOverride'</a>,
--   <a>taskOverride_inferenceAcceleratorOverrides</a> - The Elastic
--   Inference accelerator override for the task.
--   
--   <a>$sel:cpu:TaskOverride'</a>, <a>taskOverride_cpu</a> - The cpu
--   override for the task.
newTaskOverride :: TaskOverride

-- | One or more container overrides sent to a task.
taskOverride_containerOverrides :: Lens' TaskOverride (Maybe [ContainerOverride])

-- | The Amazon Resource Name (ARN) of the task execution IAM role override
--   for the task. For more information, see <a>Amazon ECS task execution
--   IAM role</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
taskOverride_executionRoleArn :: Lens' TaskOverride (Maybe Text)

-- | The ephemeral storage setting override for the task.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
taskOverride_ephemeralStorage :: Lens' TaskOverride (Maybe EphemeralStorage)

-- | The memory override for the task.
taskOverride_memory :: Lens' TaskOverride (Maybe Text)

-- | The Amazon Resource Name (ARN) of the IAM role that containers in this
--   task can assume. All containers in this task are granted the
--   permissions that are specified in this role. For more information, see
--   <a>IAM Role for Tasks</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
taskOverride_taskRoleArn :: Lens' TaskOverride (Maybe Text)

-- | The Elastic Inference accelerator override for the task.
taskOverride_inferenceAcceleratorOverrides :: Lens' TaskOverride (Maybe [InferenceAcceleratorOverride])

-- | The cpu override for the task.
taskOverride_cpu :: Lens' TaskOverride (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.TaskOverride.TaskOverride
instance GHC.Show.Show Amazonka.ECS.Types.TaskOverride.TaskOverride
instance GHC.Read.Read Amazonka.ECS.Types.TaskOverride.TaskOverride
instance GHC.Classes.Eq Amazonka.ECS.Types.TaskOverride.TaskOverride
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TaskOverride.TaskOverride
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TaskOverride.TaskOverride
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TaskOverride.TaskOverride
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.TaskOverride.TaskOverride


module Amazonka.ECS.Types.TaskSet

-- | Information about a set of Amazon ECS tasks in either an CodeDeploy or
--   an <tt>EXTERNAL</tt> deployment. An Amazon ECS task set includes
--   details such as the desired number of tasks, how many tasks are
--   running, and whether the task set serves production traffic.
--   
--   <i>See:</i> <a>newTaskSet</a> smart constructor.
data TaskSet
TaskSet' :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe POSIX -> Maybe Text -> Maybe Scale -> Maybe [LoadBalancer] -> Maybe POSIX -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe LaunchType -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe NetworkConfiguration -> Maybe [ServiceRegistry] -> Maybe [CapacityProviderStrategyItem] -> Maybe StabilityStatus -> Maybe [Tag] -> TaskSet

-- | The number of tasks in the task set that are in the <tt>RUNNING</tt>
--   status during a deployment. A task in the <tt>RUNNING</tt> state is
--   running and ready for use.
[$sel:runningCount:TaskSet'] :: TaskSet -> Maybe Int

-- | The status of the task set. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The task set is serving production traffic.</li>
--   <li><i>ACTIVE</i> The task set is not serving production traffic.</li>
--   <li><i>DRAINING</i> The tasks in the task set are being stopped and
--   their corresponding targets are being deregistered from their target
--   group.</li>
--   </ul>
[$sel:status:TaskSet'] :: TaskSet -> Maybe Text

-- | The Amazon Resource Name (ARN) of the cluster that the service that
--   hosts the task set exists in.
[$sel:clusterArn:TaskSet'] :: TaskSet -> Maybe Text

-- | The computed desired count for the task set. This is calculated by
--   multiplying the service's <tt>desiredCount</tt> by the task set's
--   <tt>scale</tt> percentage. The result is always rounded up. For
--   example, if the computed desired count is 1.2, it rounds up to 2
--   tasks.
[$sel:computedDesiredCount:TaskSet'] :: TaskSet -> Maybe Int

-- | The Unix timestamp for when the task set was created.
[$sel:createdAt:TaskSet'] :: TaskSet -> Maybe POSIX

-- | The Fargate platform version on which the tasks in the task set are
--   running. A platform version is only specified for tasks run on
--   Fargate. For more information, see <a>Fargate platform versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:platformVersion:TaskSet'] :: TaskSet -> Maybe Text

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
[$sel:scale:TaskSet'] :: TaskSet -> Maybe Scale

-- | Details on a load balancer that is used with a task set.
[$sel:loadBalancers:TaskSet'] :: TaskSet -> Maybe [LoadBalancer]

-- | The Unix timestamp for when the task set stability status was
--   retrieved.
[$sel:stabilityStatusAt:TaskSet'] :: TaskSet -> Maybe POSIX

-- | The number of tasks in the task set that are in the <tt>PENDING</tt>
--   status during a deployment. A task in the <tt>PENDING</tt> state is
--   preparing to enter the <tt>RUNNING</tt> state. A task set enters the
--   <tt>PENDING</tt> status when it launches for the first time or when it
--   is restarted after being in the <tt>STOPPED</tt> state.
[$sel:pendingCount:TaskSet'] :: TaskSet -> Maybe Int

-- | The Amazon Resource Name (ARN) of the task set.
[$sel:taskSetArn:TaskSet'] :: TaskSet -> Maybe Text

-- | The tag specified when a task set is started. If the task set is
--   created by an CodeDeploy deployment, the <tt>startedBy</tt> parameter
--   is <tt>CODE_DEPLOY</tt>. For a task set created for an external
--   deployment, the startedBy field isn't used.
[$sel:startedBy:TaskSet'] :: TaskSet -> Maybe Text

-- | The ID of the task set.
[$sel:id:TaskSet'] :: TaskSet -> Maybe Text

-- | The launch type the tasks in the task set are using. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:launchType:TaskSet'] :: TaskSet -> Maybe LaunchType

-- | The Unix timestamp for when the task set was last updated.
[$sel:updatedAt:TaskSet'] :: TaskSet -> Maybe POSIX

-- | The Amazon Resource Name (ARN) of the service the task set exists in.
[$sel:serviceArn:TaskSet'] :: TaskSet -> Maybe Text

-- | The task definition the task set is using.
[$sel:taskDefinition:TaskSet'] :: TaskSet -> Maybe Text

-- | The external ID associated with the task set.
--   
--   If a task set is created by an CodeDeploy deployment, the
--   <tt>externalId</tt> parameter contains the CodeDeploy deployment ID.
--   
--   If a task set is created for an external deployment and is associated
--   with a service discovery registry, the <tt>externalId</tt> parameter
--   contains the <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute.
[$sel:externalId:TaskSet'] :: TaskSet -> Maybe Text

-- | The network configuration for the task set.
[$sel:networkConfiguration:TaskSet'] :: TaskSet -> Maybe NetworkConfiguration

-- | The details of the service discovery registries to assign to this task
--   set. For more information, see <a>Service discovery</a>.
[$sel:serviceRegistries:TaskSet'] :: TaskSet -> Maybe [ServiceRegistry]

-- | The capacity provider strategy associated with the task set.
[$sel:capacityProviderStrategy:TaskSet'] :: TaskSet -> Maybe [CapacityProviderStrategyItem]

-- | The stability status, which indicates whether the task set has reached
--   a steady state. If the following conditions are met, the task set will
--   be in <tt>STEADY_STATE</tt>:
--   
--   <ul>
--   <li>The task <tt>runningCount</tt> is equal to the
--   <tt>computedDesiredCount</tt>.</li>
--   <li>The <tt>pendingCount</tt> is <tt>0</tt>.</li>
--   <li>There are no tasks running on container instances in the
--   <tt>DRAINING</tt> status.</li>
--   <li>All tasks are reporting a healthy status from the load balancers,
--   service discovery, and container health checks.</li>
--   </ul>
--   
--   If any of those conditions are not met, the stability status returns
--   <tt>STABILIZING</tt>.
[$sel:stabilityStatus:TaskSet'] :: TaskSet -> Maybe StabilityStatus

-- | The metadata that you apply to the task set to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:TaskSet'] :: TaskSet -> Maybe [Tag]

-- | Create a value of <a>TaskSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:runningCount:TaskSet'</a>, <a>taskSet_runningCount</a> - The
--   number of tasks in the task set that are in the <tt>RUNNING</tt>
--   status during a deployment. A task in the <tt>RUNNING</tt> state is
--   running and ready for use.
--   
--   <a>$sel:status:TaskSet'</a>, <a>taskSet_status</a> - The status of the
--   task set. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The task set is serving production traffic.</li>
--   <li><i>ACTIVE</i> The task set is not serving production traffic.</li>
--   <li><i>DRAINING</i> The tasks in the task set are being stopped and
--   their corresponding targets are being deregistered from their target
--   group.</li>
--   </ul>
--   
--   <a>$sel:clusterArn:TaskSet'</a>, <a>taskSet_clusterArn</a> - The
--   Amazon Resource Name (ARN) of the cluster that the service that hosts
--   the task set exists in.
--   
--   <a>$sel:computedDesiredCount:TaskSet'</a>,
--   <a>taskSet_computedDesiredCount</a> - The computed desired count for
--   the task set. This is calculated by multiplying the service's
--   <tt>desiredCount</tt> by the task set's <tt>scale</tt> percentage. The
--   result is always rounded up. For example, if the computed desired
--   count is 1.2, it rounds up to 2 tasks.
--   
--   <a>$sel:createdAt:TaskSet'</a>, <a>taskSet_createdAt</a> - The Unix
--   timestamp for when the task set was created.
--   
--   <a>$sel:platformVersion:TaskSet'</a>, <a>taskSet_platformVersion</a> -
--   The Fargate platform version on which the tasks in the task set are
--   running. A platform version is only specified for tasks run on
--   Fargate. For more information, see <a>Fargate platform versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:scale:TaskSet'</a>, <a>taskSet_scale</a> - A floating-point
--   percentage of the desired number of tasks to place and keep running in
--   the task set.
--   
--   <a>$sel:loadBalancers:TaskSet'</a>, <a>taskSet_loadBalancers</a> -
--   Details on a load balancer that is used with a task set.
--   
--   <a>$sel:stabilityStatusAt:TaskSet'</a>,
--   <a>taskSet_stabilityStatusAt</a> - The Unix timestamp for when the
--   task set stability status was retrieved.
--   
--   <a>$sel:pendingCount:TaskSet'</a>, <a>taskSet_pendingCount</a> - The
--   number of tasks in the task set that are in the <tt>PENDING</tt>
--   status during a deployment. A task in the <tt>PENDING</tt> state is
--   preparing to enter the <tt>RUNNING</tt> state. A task set enters the
--   <tt>PENDING</tt> status when it launches for the first time or when it
--   is restarted after being in the <tt>STOPPED</tt> state.
--   
--   <a>$sel:taskSetArn:TaskSet'</a>, <a>taskSet_taskSetArn</a> - The
--   Amazon Resource Name (ARN) of the task set.
--   
--   <a>$sel:startedBy:TaskSet'</a>, <a>taskSet_startedBy</a> - The tag
--   specified when a task set is started. If the task set is created by an
--   CodeDeploy deployment, the <tt>startedBy</tt> parameter is
--   <tt>CODE_DEPLOY</tt>. For a task set created for an external
--   deployment, the startedBy field isn't used.
--   
--   <a>$sel:id:TaskSet'</a>, <a>taskSet_id</a> - The ID of the task set.
--   
--   <a>$sel:launchType:TaskSet'</a>, <a>taskSet_launchType</a> - The
--   launch type the tasks in the task set are using. For more information,
--   see <a>Amazon ECS launch types</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:updatedAt:TaskSet'</a>, <a>taskSet_updatedAt</a> - The Unix
--   timestamp for when the task set was last updated.
--   
--   <a>$sel:serviceArn:TaskSet'</a>, <a>taskSet_serviceArn</a> - The
--   Amazon Resource Name (ARN) of the service the task set exists in.
--   
--   <a>$sel:taskDefinition:TaskSet'</a>, <a>taskSet_taskDefinition</a> -
--   The task definition the task set is using.
--   
--   <a>$sel:externalId:TaskSet'</a>, <a>taskSet_externalId</a> - The
--   external ID associated with the task set.
--   
--   If a task set is created by an CodeDeploy deployment, the
--   <tt>externalId</tt> parameter contains the CodeDeploy deployment ID.
--   
--   If a task set is created for an external deployment and is associated
--   with a service discovery registry, the <tt>externalId</tt> parameter
--   contains the <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute.
--   
--   <a>$sel:networkConfiguration:TaskSet'</a>,
--   <a>taskSet_networkConfiguration</a> - The network configuration for
--   the task set.
--   
--   <a>$sel:serviceRegistries:TaskSet'</a>,
--   <a>taskSet_serviceRegistries</a> - The details of the service
--   discovery registries to assign to this task set. For more information,
--   see <a>Service discovery</a>.
--   
--   <a>$sel:capacityProviderStrategy:TaskSet'</a>,
--   <a>taskSet_capacityProviderStrategy</a> - The capacity provider
--   strategy associated with the task set.
--   
--   <a>$sel:stabilityStatus:TaskSet'</a>, <a>taskSet_stabilityStatus</a> -
--   The stability status, which indicates whether the task set has reached
--   a steady state. If the following conditions are met, the task set will
--   be in <tt>STEADY_STATE</tt>:
--   
--   <ul>
--   <li>The task <tt>runningCount</tt> is equal to the
--   <tt>computedDesiredCount</tt>.</li>
--   <li>The <tt>pendingCount</tt> is <tt>0</tt>.</li>
--   <li>There are no tasks running on container instances in the
--   <tt>DRAINING</tt> status.</li>
--   <li>All tasks are reporting a healthy status from the load balancers,
--   service discovery, and container health checks.</li>
--   </ul>
--   
--   If any of those conditions are not met, the stability status returns
--   <tt>STABILIZING</tt>.
--   
--   <a>$sel:tags:TaskSet'</a>, <a>taskSet_tags</a> - The metadata that you
--   apply to the task set to help you categorize and organize them. Each
--   tag consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newTaskSet :: TaskSet

-- | The number of tasks in the task set that are in the <tt>RUNNING</tt>
--   status during a deployment. A task in the <tt>RUNNING</tt> state is
--   running and ready for use.
taskSet_runningCount :: Lens' TaskSet (Maybe Int)

-- | The status of the task set. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The task set is serving production traffic.</li>
--   <li><i>ACTIVE</i> The task set is not serving production traffic.</li>
--   <li><i>DRAINING</i> The tasks in the task set are being stopped and
--   their corresponding targets are being deregistered from their target
--   group.</li>
--   </ul>
taskSet_status :: Lens' TaskSet (Maybe Text)

-- | The Amazon Resource Name (ARN) of the cluster that the service that
--   hosts the task set exists in.
taskSet_clusterArn :: Lens' TaskSet (Maybe Text)

-- | The computed desired count for the task set. This is calculated by
--   multiplying the service's <tt>desiredCount</tt> by the task set's
--   <tt>scale</tt> percentage. The result is always rounded up. For
--   example, if the computed desired count is 1.2, it rounds up to 2
--   tasks.
taskSet_computedDesiredCount :: Lens' TaskSet (Maybe Int)

-- | The Unix timestamp for when the task set was created.
taskSet_createdAt :: Lens' TaskSet (Maybe UTCTime)

-- | The Fargate platform version on which the tasks in the task set are
--   running. A platform version is only specified for tasks run on
--   Fargate. For more information, see <a>Fargate platform versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
taskSet_platformVersion :: Lens' TaskSet (Maybe Text)

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
taskSet_scale :: Lens' TaskSet (Maybe Scale)

-- | Details on a load balancer that is used with a task set.
taskSet_loadBalancers :: Lens' TaskSet (Maybe [LoadBalancer])

-- | The Unix timestamp for when the task set stability status was
--   retrieved.
taskSet_stabilityStatusAt :: Lens' TaskSet (Maybe UTCTime)

-- | The number of tasks in the task set that are in the <tt>PENDING</tt>
--   status during a deployment. A task in the <tt>PENDING</tt> state is
--   preparing to enter the <tt>RUNNING</tt> state. A task set enters the
--   <tt>PENDING</tt> status when it launches for the first time or when it
--   is restarted after being in the <tt>STOPPED</tt> state.
taskSet_pendingCount :: Lens' TaskSet (Maybe Int)

-- | The Amazon Resource Name (ARN) of the task set.
taskSet_taskSetArn :: Lens' TaskSet (Maybe Text)

-- | The tag specified when a task set is started. If the task set is
--   created by an CodeDeploy deployment, the <tt>startedBy</tt> parameter
--   is <tt>CODE_DEPLOY</tt>. For a task set created for an external
--   deployment, the startedBy field isn't used.
taskSet_startedBy :: Lens' TaskSet (Maybe Text)

-- | The ID of the task set.
taskSet_id :: Lens' TaskSet (Maybe Text)

-- | The launch type the tasks in the task set are using. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
taskSet_launchType :: Lens' TaskSet (Maybe LaunchType)

-- | The Unix timestamp for when the task set was last updated.
taskSet_updatedAt :: Lens' TaskSet (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the service the task set exists in.
taskSet_serviceArn :: Lens' TaskSet (Maybe Text)

-- | The task definition the task set is using.
taskSet_taskDefinition :: Lens' TaskSet (Maybe Text)

-- | The external ID associated with the task set.
--   
--   If a task set is created by an CodeDeploy deployment, the
--   <tt>externalId</tt> parameter contains the CodeDeploy deployment ID.
--   
--   If a task set is created for an external deployment and is associated
--   with a service discovery registry, the <tt>externalId</tt> parameter
--   contains the <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute.
taskSet_externalId :: Lens' TaskSet (Maybe Text)

-- | The network configuration for the task set.
taskSet_networkConfiguration :: Lens' TaskSet (Maybe NetworkConfiguration)

-- | The details of the service discovery registries to assign to this task
--   set. For more information, see <a>Service discovery</a>.
taskSet_serviceRegistries :: Lens' TaskSet (Maybe [ServiceRegistry])

-- | The capacity provider strategy associated with the task set.
taskSet_capacityProviderStrategy :: Lens' TaskSet (Maybe [CapacityProviderStrategyItem])

-- | The stability status, which indicates whether the task set has reached
--   a steady state. If the following conditions are met, the task set will
--   be in <tt>STEADY_STATE</tt>:
--   
--   <ul>
--   <li>The task <tt>runningCount</tt> is equal to the
--   <tt>computedDesiredCount</tt>.</li>
--   <li>The <tt>pendingCount</tt> is <tt>0</tt>.</li>
--   <li>There are no tasks running on container instances in the
--   <tt>DRAINING</tt> status.</li>
--   <li>All tasks are reporting a healthy status from the load balancers,
--   service discovery, and container health checks.</li>
--   </ul>
--   
--   If any of those conditions are not met, the stability status returns
--   <tt>STABILIZING</tt>.
taskSet_stabilityStatus :: Lens' TaskSet (Maybe StabilityStatus)

-- | The metadata that you apply to the task set to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
taskSet_tags :: Lens' TaskSet (Maybe [Tag])
instance GHC.Generics.Generic Amazonka.ECS.Types.TaskSet.TaskSet
instance GHC.Show.Show Amazonka.ECS.Types.TaskSet.TaskSet
instance GHC.Read.Read Amazonka.ECS.Types.TaskSet.TaskSet
instance GHC.Classes.Eq Amazonka.ECS.Types.TaskSet.TaskSet
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TaskSet.TaskSet
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TaskSet.TaskSet
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TaskSet.TaskSet


module Amazonka.ECS.Types.ContainerService

-- | Details on a service within a cluster
--   
--   <i>See:</i> <a>newContainerService</a> smart constructor.
data ContainerService
ContainerService' :: Maybe [TaskSet] -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe PropagateTags -> Maybe POSIX -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe [LoadBalancer] -> Maybe Int -> Maybe [PlacementConstraint] -> Maybe [ServiceEvent] -> Maybe [PlacementStrategy] -> Maybe [Deployment] -> Maybe Text -> Maybe DeploymentController -> Maybe LaunchType -> Maybe Text -> Maybe Text -> Maybe SchedulingStrategy -> Maybe Int -> Maybe NetworkConfiguration -> Maybe [ServiceRegistry] -> Maybe [CapacityProviderStrategyItem] -> Maybe Bool -> Maybe [Tag] -> Maybe Text -> Maybe DeploymentConfiguration -> ContainerService

-- | Information about a set of Amazon ECS tasks in either an CodeDeploy or
--   an <tt>EXTERNAL</tt> deployment. An Amazon ECS task set includes
--   details such as the desired number of tasks, how many tasks are
--   running, and whether the task set serves production traffic.
[$sel:taskSets:ContainerService'] :: ContainerService -> Maybe [TaskSet]

-- | The number of tasks in the cluster that are in the <tt>RUNNING</tt>
--   state.
[$sel:runningCount:ContainerService'] :: ContainerService -> Maybe Int

-- | The status of the service. The valid values are <tt>ACTIVE</tt>,
--   <tt>DRAINING</tt>, or <tt>INACTIVE</tt>.
[$sel:status:ContainerService'] :: ContainerService -> Maybe Text

-- | The Amazon Resource Name (ARN) of the cluster that hosts the service.
[$sel:clusterArn:ContainerService'] :: ContainerService -> Maybe Text

-- | Specifies whether to propagate the tags from the task definition or
--   the service to the task. If no value is specified, the tags are not
--   propagated.
[$sel:propagateTags:ContainerService'] :: ContainerService -> Maybe PropagateTags

-- | The Unix timestamp for when the service was created.
[$sel:createdAt:ContainerService'] :: ContainerService -> Maybe POSIX

-- | The platform version on which to run your service. A platform version
--   is only specified for tasks hosted on Fargate. If one is not
--   specified, the <tt>LATEST</tt> platform version is used by default.
--   For more information, see <a>Fargate Platform Versions</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:platformVersion:ContainerService'] :: ContainerService -> Maybe Text

-- | Specifies whether to enable Amazon ECS managed tags for the tasks in
--   the service. For more information, see <a>Tagging Your Amazon ECS
--   Resources</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:enableECSManagedTags:ContainerService'] :: ContainerService -> Maybe Bool

-- | The principal that created the service.
[$sel:createdBy:ContainerService'] :: ContainerService -> Maybe Text

-- | The desired number of instantiations of the task definition to keep
--   running on the service. This value is specified when the service is
--   created with CreateService, and it can be modified with UpdateService.
[$sel:desiredCount:ContainerService'] :: ContainerService -> Maybe Int

-- | A list of Elastic Load Balancing load balancer objects, containing the
--   load balancer name, the container name (as it appears in a container
--   definition), and the container port to access from the load balancer.
[$sel:loadBalancers:ContainerService'] :: ContainerService -> Maybe [LoadBalancer]

-- | The number of tasks in the cluster that are in the <tt>PENDING</tt>
--   state.
[$sel:pendingCount:ContainerService'] :: ContainerService -> Maybe Int

-- | The placement constraints for the tasks in the service.
[$sel:placementConstraints:ContainerService'] :: ContainerService -> Maybe [PlacementConstraint]

-- | The event stream for your service. A maximum of 100 of the latest
--   events are displayed.
[$sel:events:ContainerService'] :: ContainerService -> Maybe [ServiceEvent]

-- | The placement strategy that determines how tasks for the service are
--   placed.
[$sel:placementStrategy:ContainerService'] :: ContainerService -> Maybe [PlacementStrategy]

-- | The current state of deployments for the service.
[$sel:deployments:ContainerService'] :: ContainerService -> Maybe [Deployment]

-- | The name of your service. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. Service names must be
--   unique within a cluster, but you can have similarly named services in
--   multiple clusters within a Region or across multiple Regions.
[$sel:serviceName:ContainerService'] :: ContainerService -> Maybe Text

-- | The deployment controller type the service is using. When using the
--   DescribeServices API, this field is omitted if the service is using
--   the <tt>ECS</tt> deployment controller type.
[$sel:deploymentController:ContainerService'] :: ContainerService -> Maybe DeploymentController

-- | The launch type the service is using. When using the DescribeServices
--   API, this field is omitted if the service was created using a capacity
--   provider strategy.
[$sel:launchType:ContainerService'] :: ContainerService -> Maybe LaunchType

-- | The ARN that identifies the service. The ARN contains the
--   <tt>arn:aws:ecs</tt> namespace, followed by the Region of the service,
--   the Amazon Web Services account ID of the service owner, the
--   <tt>service</tt> namespace, and then the service name. For example,
--   <tt>arn:aws:ecs:region:012345678910:service/my-service</tt>.
[$sel:serviceArn:ContainerService'] :: ContainerService -> Maybe Text

-- | The task definition to use for tasks in the service. This value is
--   specified when the service is created with CreateService, and it can
--   be modified with UpdateService.
[$sel:taskDefinition:ContainerService'] :: ContainerService -> Maybe Text

-- | The scheduling strategy to use for the service. For more information,
--   see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement
--   constraints.Fargate tasks do not support the <tt>DAEMON</tt>
--   scheduling strategy.</li>
--   </ul>
[$sel:schedulingStrategy:ContainerService'] :: ContainerService -> Maybe SchedulingStrategy

-- | The period of time, in seconds, that the Amazon ECS service scheduler
--   ignores unhealthy Elastic Load Balancing target health checks after a
--   task has first started.
[$sel:healthCheckGracePeriodSeconds:ContainerService'] :: ContainerService -> Maybe Int

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
[$sel:networkConfiguration:ContainerService'] :: ContainerService -> Maybe NetworkConfiguration

-- | The details of the service discovery registries to assign to this
--   service. For more information, see <a>Service Discovery</a>.
[$sel:serviceRegistries:ContainerService'] :: ContainerService -> Maybe [ServiceRegistry]

-- | The capacity provider strategy the service is using. When using the
--   DescribeServices API, this field is omitted if the service was created
--   using a launch type.
[$sel:capacityProviderStrategy:ContainerService'] :: ContainerService -> Maybe [CapacityProviderStrategyItem]

-- | Whether or not the execute command functionality is enabled for the
--   service. If <tt>true</tt>, the execute command functionality is
--   enabled for all containers in tasks as part of the service.
[$sel:enableExecuteCommand:ContainerService'] :: ContainerService -> Maybe Bool

-- | The metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:ContainerService'] :: ContainerService -> Maybe [Tag]

-- | The ARN of the IAM role associated with the service that allows the
--   Amazon ECS container agent to register container instances with an
--   Elastic Load Balancing load balancer.
[$sel:roleArn:ContainerService'] :: ContainerService -> Maybe Text

-- | Optional deployment parameters that control how many tasks run during
--   the deployment and the ordering of stopping and starting tasks.
[$sel:deploymentConfiguration:ContainerService'] :: ContainerService -> Maybe DeploymentConfiguration

-- | Create a value of <a>ContainerService</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSets:ContainerService'</a>,
--   <a>containerService_taskSets</a> - Information about a set of Amazon
--   ECS tasks in either an CodeDeploy or an <tt>EXTERNAL</tt> deployment.
--   An Amazon ECS task set includes details such as the desired number of
--   tasks, how many tasks are running, and whether the task set serves
--   production traffic.
--   
--   <a>$sel:runningCount:ContainerService'</a>,
--   <a>containerService_runningCount</a> - The number of tasks in the
--   cluster that are in the <tt>RUNNING</tt> state.
--   
--   <a>$sel:status:ContainerService'</a>, <a>containerService_status</a> -
--   The status of the service. The valid values are <tt>ACTIVE</tt>,
--   <tt>DRAINING</tt>, or <tt>INACTIVE</tt>.
--   
--   <a>$sel:clusterArn:ContainerService'</a>,
--   <a>containerService_clusterArn</a> - The Amazon Resource Name (ARN) of
--   the cluster that hosts the service.
--   
--   <a>$sel:propagateTags:ContainerService'</a>,
--   <a>containerService_propagateTags</a> - Specifies whether to propagate
--   the tags from the task definition or the service to the task. If no
--   value is specified, the tags are not propagated.
--   
--   <a>$sel:createdAt:ContainerService'</a>,
--   <a>containerService_createdAt</a> - The Unix timestamp for when the
--   service was created.
--   
--   <a>$sel:platformVersion:ContainerService'</a>,
--   <a>containerService_platformVersion</a> - The platform version on
--   which to run your service. A platform version is only specified for
--   tasks hosted on Fargate. If one is not specified, the <tt>LATEST</tt>
--   platform version is used by default. For more information, see
--   <a>Fargate Platform Versions</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:enableECSManagedTags:ContainerService'</a>,
--   <a>containerService_enableECSManagedTags</a> - Specifies whether to
--   enable Amazon ECS managed tags for the tasks in the service. For more
--   information, see <a>Tagging Your Amazon ECS Resources</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:createdBy:ContainerService'</a>,
--   <a>containerService_createdBy</a> - The principal that created the
--   service.
--   
--   <a>$sel:desiredCount:ContainerService'</a>,
--   <a>containerService_desiredCount</a> - The desired number of
--   instantiations of the task definition to keep running on the service.
--   This value is specified when the service is created with
--   CreateService, and it can be modified with UpdateService.
--   
--   <a>$sel:loadBalancers:ContainerService'</a>,
--   <a>containerService_loadBalancers</a> - A list of Elastic Load
--   Balancing load balancer objects, containing the load balancer name,
--   the container name (as it appears in a container definition), and the
--   container port to access from the load balancer.
--   
--   <a>$sel:pendingCount:ContainerService'</a>,
--   <a>containerService_pendingCount</a> - The number of tasks in the
--   cluster that are in the <tt>PENDING</tt> state.
--   
--   <a>$sel:placementConstraints:ContainerService'</a>,
--   <a>containerService_placementConstraints</a> - The placement
--   constraints for the tasks in the service.
--   
--   <a>$sel:events:ContainerService'</a>, <a>containerService_events</a> -
--   The event stream for your service. A maximum of 100 of the latest
--   events are displayed.
--   
--   <a>$sel:placementStrategy:ContainerService'</a>,
--   <a>containerService_placementStrategy</a> - The placement strategy
--   that determines how tasks for the service are placed.
--   
--   <a>$sel:deployments:ContainerService'</a>,
--   <a>containerService_deployments</a> - The current state of deployments
--   for the service.
--   
--   <a>$sel:serviceName:ContainerService'</a>,
--   <a>containerService_serviceName</a> - The name of your service. Up to
--   255 letters (uppercase and lowercase), numbers, underscores, and
--   hyphens are allowed. Service names must be unique within a cluster,
--   but you can have similarly named services in multiple clusters within
--   a Region or across multiple Regions.
--   
--   <a>$sel:deploymentController:ContainerService'</a>,
--   <a>containerService_deploymentController</a> - The deployment
--   controller type the service is using. When using the DescribeServices
--   API, this field is omitted if the service is using the <tt>ECS</tt>
--   deployment controller type.
--   
--   <a>$sel:launchType:ContainerService'</a>,
--   <a>containerService_launchType</a> - The launch type the service is
--   using. When using the DescribeServices API, this field is omitted if
--   the service was created using a capacity provider strategy.
--   
--   <a>$sel:serviceArn:ContainerService'</a>,
--   <a>containerService_serviceArn</a> - The ARN that identifies the
--   service. The ARN contains the <tt>arn:aws:ecs</tt> namespace, followed
--   by the Region of the service, the Amazon Web Services account ID of
--   the service owner, the <tt>service</tt> namespace, and then the
--   service name. For example,
--   <tt>arn:aws:ecs:region:012345678910:service/my-service</tt>.
--   
--   <a>$sel:taskDefinition:ContainerService'</a>,
--   <a>containerService_taskDefinition</a> - The task definition to use
--   for tasks in the service. This value is specified when the service is
--   created with CreateService, and it can be modified with UpdateService.
--   
--   <a>$sel:schedulingStrategy:ContainerService'</a>,
--   <a>containerService_schedulingStrategy</a> - The scheduling strategy
--   to use for the service. For more information, see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement
--   constraints.Fargate tasks do not support the <tt>DAEMON</tt>
--   scheduling strategy.</li>
--   </ul>
--   
--   <a>$sel:healthCheckGracePeriodSeconds:ContainerService'</a>,
--   <a>containerService_healthCheckGracePeriodSeconds</a> - The period of
--   time, in seconds, that the Amazon ECS service scheduler ignores
--   unhealthy Elastic Load Balancing target health checks after a task has
--   first started.
--   
--   <a>$sel:networkConfiguration:ContainerService'</a>,
--   <a>containerService_networkConfiguration</a> - The VPC subnet and
--   security group configuration for tasks that receive their own elastic
--   network interface by using the <tt>awsvpc</tt> networking mode.
--   
--   <a>$sel:serviceRegistries:ContainerService'</a>,
--   <a>containerService_serviceRegistries</a> - The details of the service
--   discovery registries to assign to this service. For more information,
--   see <a>Service Discovery</a>.
--   
--   <a>$sel:capacityProviderStrategy:ContainerService'</a>,
--   <a>containerService_capacityProviderStrategy</a> - The capacity
--   provider strategy the service is using. When using the
--   DescribeServices API, this field is omitted if the service was created
--   using a launch type.
--   
--   <a>$sel:enableExecuteCommand:ContainerService'</a>,
--   <a>containerService_enableExecuteCommand</a> - Whether or not the
--   execute command functionality is enabled for the service. If
--   <tt>true</tt>, the execute command functionality is enabled for all
--   containers in tasks as part of the service.
--   
--   <a>$sel:tags:ContainerService'</a>, <a>containerService_tags</a> - The
--   metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:roleArn:ContainerService'</a>, <a>containerService_roleArn</a>
--   - The ARN of the IAM role associated with the service that allows the
--   Amazon ECS container agent to register container instances with an
--   Elastic Load Balancing load balancer.
--   
--   <a>$sel:deploymentConfiguration:ContainerService'</a>,
--   <a>containerService_deploymentConfiguration</a> - Optional deployment
--   parameters that control how many tasks run during the deployment and
--   the ordering of stopping and starting tasks.
newContainerService :: ContainerService

-- | Information about a set of Amazon ECS tasks in either an CodeDeploy or
--   an <tt>EXTERNAL</tt> deployment. An Amazon ECS task set includes
--   details such as the desired number of tasks, how many tasks are
--   running, and whether the task set serves production traffic.
containerService_taskSets :: Lens' ContainerService (Maybe [TaskSet])

-- | The number of tasks in the cluster that are in the <tt>RUNNING</tt>
--   state.
containerService_runningCount :: Lens' ContainerService (Maybe Int)

-- | The status of the service. The valid values are <tt>ACTIVE</tt>,
--   <tt>DRAINING</tt>, or <tt>INACTIVE</tt>.
containerService_status :: Lens' ContainerService (Maybe Text)

-- | The Amazon Resource Name (ARN) of the cluster that hosts the service.
containerService_clusterArn :: Lens' ContainerService (Maybe Text)

-- | Specifies whether to propagate the tags from the task definition or
--   the service to the task. If no value is specified, the tags are not
--   propagated.
containerService_propagateTags :: Lens' ContainerService (Maybe PropagateTags)

-- | The Unix timestamp for when the service was created.
containerService_createdAt :: Lens' ContainerService (Maybe UTCTime)

-- | The platform version on which to run your service. A platform version
--   is only specified for tasks hosted on Fargate. If one is not
--   specified, the <tt>LATEST</tt> platform version is used by default.
--   For more information, see <a>Fargate Platform Versions</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
containerService_platformVersion :: Lens' ContainerService (Maybe Text)

-- | Specifies whether to enable Amazon ECS managed tags for the tasks in
--   the service. For more information, see <a>Tagging Your Amazon ECS
--   Resources</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
containerService_enableECSManagedTags :: Lens' ContainerService (Maybe Bool)

-- | The principal that created the service.
containerService_createdBy :: Lens' ContainerService (Maybe Text)

-- | The desired number of instantiations of the task definition to keep
--   running on the service. This value is specified when the service is
--   created with CreateService, and it can be modified with UpdateService.
containerService_desiredCount :: Lens' ContainerService (Maybe Int)

-- | A list of Elastic Load Balancing load balancer objects, containing the
--   load balancer name, the container name (as it appears in a container
--   definition), and the container port to access from the load balancer.
containerService_loadBalancers :: Lens' ContainerService (Maybe [LoadBalancer])

-- | The number of tasks in the cluster that are in the <tt>PENDING</tt>
--   state.
containerService_pendingCount :: Lens' ContainerService (Maybe Int)

-- | The placement constraints for the tasks in the service.
containerService_placementConstraints :: Lens' ContainerService (Maybe [PlacementConstraint])

-- | The event stream for your service. A maximum of 100 of the latest
--   events are displayed.
containerService_events :: Lens' ContainerService (Maybe [ServiceEvent])

-- | The placement strategy that determines how tasks for the service are
--   placed.
containerService_placementStrategy :: Lens' ContainerService (Maybe [PlacementStrategy])

-- | The current state of deployments for the service.
containerService_deployments :: Lens' ContainerService (Maybe [Deployment])

-- | The name of your service. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. Service names must be
--   unique within a cluster, but you can have similarly named services in
--   multiple clusters within a Region or across multiple Regions.
containerService_serviceName :: Lens' ContainerService (Maybe Text)

-- | The deployment controller type the service is using. When using the
--   DescribeServices API, this field is omitted if the service is using
--   the <tt>ECS</tt> deployment controller type.
containerService_deploymentController :: Lens' ContainerService (Maybe DeploymentController)

-- | The launch type the service is using. When using the DescribeServices
--   API, this field is omitted if the service was created using a capacity
--   provider strategy.
containerService_launchType :: Lens' ContainerService (Maybe LaunchType)

-- | The ARN that identifies the service. The ARN contains the
--   <tt>arn:aws:ecs</tt> namespace, followed by the Region of the service,
--   the Amazon Web Services account ID of the service owner, the
--   <tt>service</tt> namespace, and then the service name. For example,
--   <tt>arn:aws:ecs:region:012345678910:service/my-service</tt>.
containerService_serviceArn :: Lens' ContainerService (Maybe Text)

-- | The task definition to use for tasks in the service. This value is
--   specified when the service is created with CreateService, and it can
--   be modified with UpdateService.
containerService_taskDefinition :: Lens' ContainerService (Maybe Text)

-- | The scheduling strategy to use for the service. For more information,
--   see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement
--   constraints.Fargate tasks do not support the <tt>DAEMON</tt>
--   scheduling strategy.</li>
--   </ul>
containerService_schedulingStrategy :: Lens' ContainerService (Maybe SchedulingStrategy)

-- | The period of time, in seconds, that the Amazon ECS service scheduler
--   ignores unhealthy Elastic Load Balancing target health checks after a
--   task has first started.
containerService_healthCheckGracePeriodSeconds :: Lens' ContainerService (Maybe Int)

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
containerService_networkConfiguration :: Lens' ContainerService (Maybe NetworkConfiguration)

-- | The details of the service discovery registries to assign to this
--   service. For more information, see <a>Service Discovery</a>.
containerService_serviceRegistries :: Lens' ContainerService (Maybe [ServiceRegistry])

-- | The capacity provider strategy the service is using. When using the
--   DescribeServices API, this field is omitted if the service was created
--   using a launch type.
containerService_capacityProviderStrategy :: Lens' ContainerService (Maybe [CapacityProviderStrategyItem])

-- | Whether or not the execute command functionality is enabled for the
--   service. If <tt>true</tt>, the execute command functionality is
--   enabled for all containers in tasks as part of the service.
containerService_enableExecuteCommand :: Lens' ContainerService (Maybe Bool)

-- | The metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
containerService_tags :: Lens' ContainerService (Maybe [Tag])

-- | The ARN of the IAM role associated with the service that allows the
--   Amazon ECS container agent to register container instances with an
--   Elastic Load Balancing load balancer.
containerService_roleArn :: Lens' ContainerService (Maybe Text)

-- | Optional deployment parameters that control how many tasks run during
--   the deployment and the ordering of stopping and starting tasks.
containerService_deploymentConfiguration :: Lens' ContainerService (Maybe DeploymentConfiguration)
instance GHC.Generics.Generic Amazonka.ECS.Types.ContainerService.ContainerService
instance GHC.Show.Show Amazonka.ECS.Types.ContainerService.ContainerService
instance GHC.Read.Read Amazonka.ECS.Types.ContainerService.ContainerService
instance GHC.Classes.Eq Amazonka.ECS.Types.ContainerService.ContainerService
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ContainerService.ContainerService
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ContainerService.ContainerService
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ContainerService.ContainerService


module Amazonka.ECS.Types.TaskSetField
newtype TaskSetField
TaskSetField' :: Text -> TaskSetField
[fromTaskSetField] :: TaskSetField -> Text
pattern TaskSetField_TAGS :: TaskSetField
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TaskSetField.TaskSetField
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TaskSetField.TaskSetField
instance GHC.Generics.Generic Amazonka.ECS.Types.TaskSetField.TaskSetField
instance GHC.Classes.Ord Amazonka.ECS.Types.TaskSetField.TaskSetField
instance GHC.Classes.Eq Amazonka.ECS.Types.TaskSetField.TaskSetField
instance GHC.Read.Read Amazonka.ECS.Types.TaskSetField.TaskSetField
instance GHC.Show.Show Amazonka.ECS.Types.TaskSetField.TaskSetField


module Amazonka.ECS.Types.TaskStopCode
newtype TaskStopCode
TaskStopCode' :: Text -> TaskStopCode
[fromTaskStopCode] :: TaskStopCode -> Text
pattern TaskStopCode_EssentialContainerExited :: TaskStopCode
pattern TaskStopCode_TaskFailedToStart :: TaskStopCode
pattern TaskStopCode_UserInitiated :: TaskStopCode
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance GHC.Generics.Generic Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance GHC.Classes.Ord Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance GHC.Classes.Eq Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance GHC.Read.Read Amazonka.ECS.Types.TaskStopCode.TaskStopCode
instance GHC.Show.Show Amazonka.ECS.Types.TaskStopCode.TaskStopCode


module Amazonka.ECS.Types.Tmpfs

-- | The container path, mount options, and size of the tmpfs mount.
--   
--   <i>See:</i> <a>newTmpfs</a> smart constructor.
data Tmpfs
Tmpfs' :: Maybe [Text] -> Text -> Int -> Tmpfs

-- | The list of tmpfs volume mount options.
--   
--   Valid values: <tt>"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev"
--   | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" |
--   "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" |
--   "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" |
--   "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" |
--   "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" |
--   "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"</tt>
[$sel:mountOptions:Tmpfs'] :: Tmpfs -> Maybe [Text]

-- | The absolute file path where the tmpfs volume is to be mounted.
[$sel:containerPath:Tmpfs'] :: Tmpfs -> Text

-- | The maximum size (in MiB) of the tmpfs volume.
[$sel:size:Tmpfs'] :: Tmpfs -> Int

-- | Create a value of <a>Tmpfs</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mountOptions:Tmpfs'</a>, <a>tmpfs_mountOptions</a> - The list
--   of tmpfs volume mount options.
--   
--   Valid values: <tt>"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev"
--   | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" |
--   "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" |
--   "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" |
--   "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" |
--   "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" |
--   "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"</tt>
--   
--   <a>$sel:containerPath:Tmpfs'</a>, <a>tmpfs_containerPath</a> - The
--   absolute file path where the tmpfs volume is to be mounted.
--   
--   <a>$sel:size:Tmpfs'</a>, <a>tmpfs_size</a> - The maximum size (in MiB)
--   of the tmpfs volume.
newTmpfs :: Text -> Int -> Tmpfs

-- | The list of tmpfs volume mount options.
--   
--   Valid values: <tt>"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev"
--   | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" |
--   "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" |
--   "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" |
--   "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" |
--   "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" |
--   "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"</tt>
tmpfs_mountOptions :: Lens' Tmpfs (Maybe [Text])

-- | The absolute file path where the tmpfs volume is to be mounted.
tmpfs_containerPath :: Lens' Tmpfs Text

-- | The maximum size (in MiB) of the tmpfs volume.
tmpfs_size :: Lens' Tmpfs Int
instance GHC.Generics.Generic Amazonka.ECS.Types.Tmpfs.Tmpfs
instance GHC.Show.Show Amazonka.ECS.Types.Tmpfs.Tmpfs
instance GHC.Read.Read Amazonka.ECS.Types.Tmpfs.Tmpfs
instance GHC.Classes.Eq Amazonka.ECS.Types.Tmpfs.Tmpfs
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Tmpfs.Tmpfs
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Tmpfs.Tmpfs
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Tmpfs.Tmpfs
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.Tmpfs.Tmpfs


module Amazonka.ECS.Types.LinuxParameters

-- | Linux-specific options that are applied to the container, such as
--   Linux KernelCapabilities.
--   
--   <i>See:</i> <a>newLinuxParameters</a> smart constructor.
data LinuxParameters
LinuxParameters' :: Maybe Int -> Maybe Bool -> Maybe [Tmpfs] -> Maybe Int -> Maybe [Device] -> Maybe KernelCapabilities -> Maybe Int -> LinuxParameters

-- | The value for the size (in MiB) of the <tt>/dev/shm</tt> volume. This
--   parameter maps to the <tt>--shm-size</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>sharedMemorySize</tt> parameter is not supported.
[$sel:sharedMemorySize:LinuxParameters'] :: LinuxParameters -> Maybe Int

-- | Run an <tt>init</tt> process inside the container that forwards
--   signals and reaps processes. This parameter maps to the
--   <tt>--init</tt> option to <a>docker run</a>. This parameter requires
--   version 1.25 of the Docker Remote API or greater on your container
--   instance. To check the Docker Remote API version on your container
--   instance, log in to your container instance and run the following
--   command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
[$sel:initProcessEnabled:LinuxParameters'] :: LinuxParameters -> Maybe Bool

-- | The container path, mount options, and size (in MiB) of the tmpfs
--   mount. This parameter maps to the <tt>--tmpfs</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>tmpfs</tt> parameter is not supported.
[$sel:tmpfs:LinuxParameters'] :: LinuxParameters -> Maybe [Tmpfs]

-- | This allows you to tune a container's memory swappiness behavior. A
--   <tt>swappiness</tt> value of <tt>0</tt> will cause swapping to not
--   happen unless absolutely necessary. A <tt>swappiness</tt> value of
--   <tt>100</tt> will cause pages to be swapped very aggressively.
--   Accepted values are whole numbers between <tt>0</tt> and <tt>100</tt>.
--   If the <tt>swappiness</tt> parameter is not specified, a default value
--   of <tt>60</tt> is used. If a value is not specified for
--   <tt>maxSwap</tt> then this parameter is ignored. This parameter maps
--   to the <tt>--memory-swappiness</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>swappiness</tt> parameter is not supported.
[$sel:swappiness:LinuxParameters'] :: LinuxParameters -> Maybe Int

-- | Any host devices to expose to the container. This parameter maps to
--   <tt>Devices</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--device</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>devices</tt> parameter is not supported.
[$sel:devices:LinuxParameters'] :: LinuxParameters -> Maybe [Device]

-- | The Linux capabilities for the container that are added to or dropped
--   from the default configuration provided by Docker.
--   
--   For tasks that use the Fargate launch type, <tt>capabilities</tt> is
--   supported for all platform versions but the <tt>add</tt> parameter is
--   only supported if using platform version 1.4.0 or later.
[$sel:capabilities:LinuxParameters'] :: LinuxParameters -> Maybe KernelCapabilities

-- | The total amount of swap memory (in MiB) a container can use. This
--   parameter will be translated to the <tt>--memory-swap</tt> option to
--   <a>docker run</a> where the value would be the sum of the container
--   memory plus the <tt>maxSwap</tt> value.
--   
--   If a <tt>maxSwap</tt> value of <tt>0</tt> is specified, the container
--   will not use swap. Accepted values are <tt>0</tt> or any positive
--   integer. If the <tt>maxSwap</tt> parameter is omitted, the container
--   will use the swap configuration for the container instance it is
--   running on. A <tt>maxSwap</tt> value must be set for the
--   <tt>swappiness</tt> parameter to be used.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>maxSwap</tt> parameter is not supported.
[$sel:maxSwap:LinuxParameters'] :: LinuxParameters -> Maybe Int

-- | Create a value of <a>LinuxParameters</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sharedMemorySize:LinuxParameters'</a>,
--   <a>linuxParameters_sharedMemorySize</a> - The value for the size (in
--   MiB) of the <tt>/dev/shm</tt> volume. This parameter maps to the
--   <tt>--shm-size</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>sharedMemorySize</tt> parameter is not supported.
--   
--   <a>$sel:initProcessEnabled:LinuxParameters'</a>,
--   <a>linuxParameters_initProcessEnabled</a> - Run an <tt>init</tt>
--   process inside the container that forwards signals and reaps
--   processes. This parameter maps to the <tt>--init</tt> option to
--   <a>docker run</a>. This parameter requires version 1.25 of the Docker
--   Remote API or greater on your container instance. To check the Docker
--   Remote API version on your container instance, log in to your
--   container instance and run the following command: <tt>sudo docker
--   version --format '{{.Server.APIVersion}}'</tt>
--   
--   <a>$sel:tmpfs:LinuxParameters'</a>, <a>linuxParameters_tmpfs</a> - The
--   container path, mount options, and size (in MiB) of the tmpfs mount.
--   This parameter maps to the <tt>--tmpfs</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>tmpfs</tt> parameter is not supported.
--   
--   <a>$sel:swappiness:LinuxParameters'</a>,
--   <a>linuxParameters_swappiness</a> - This allows you to tune a
--   container's memory swappiness behavior. A <tt>swappiness</tt> value of
--   <tt>0</tt> will cause swapping to not happen unless absolutely
--   necessary. A <tt>swappiness</tt> value of <tt>100</tt> will cause
--   pages to be swapped very aggressively. Accepted values are whole
--   numbers between <tt>0</tt> and <tt>100</tt>. If the
--   <tt>swappiness</tt> parameter is not specified, a default value of
--   <tt>60</tt> is used. If a value is not specified for <tt>maxSwap</tt>
--   then this parameter is ignored. This parameter maps to the
--   <tt>--memory-swappiness</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>swappiness</tt> parameter is not supported.
--   
--   <a>$sel:devices:LinuxParameters'</a>, <a>linuxParameters_devices</a> -
--   Any host devices to expose to the container. This parameter maps to
--   <tt>Devices</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--device</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>devices</tt> parameter is not supported.
--   
--   <a>$sel:capabilities:LinuxParameters'</a>,
--   <a>linuxParameters_capabilities</a> - The Linux capabilities for the
--   container that are added to or dropped from the default configuration
--   provided by Docker.
--   
--   For tasks that use the Fargate launch type, <tt>capabilities</tt> is
--   supported for all platform versions but the <tt>add</tt> parameter is
--   only supported if using platform version 1.4.0 or later.
--   
--   <a>$sel:maxSwap:LinuxParameters'</a>, <a>linuxParameters_maxSwap</a> -
--   The total amount of swap memory (in MiB) a container can use. This
--   parameter will be translated to the <tt>--memory-swap</tt> option to
--   <a>docker run</a> where the value would be the sum of the container
--   memory plus the <tt>maxSwap</tt> value.
--   
--   If a <tt>maxSwap</tt> value of <tt>0</tt> is specified, the container
--   will not use swap. Accepted values are <tt>0</tt> or any positive
--   integer. If the <tt>maxSwap</tt> parameter is omitted, the container
--   will use the swap configuration for the container instance it is
--   running on. A <tt>maxSwap</tt> value must be set for the
--   <tt>swappiness</tt> parameter to be used.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>maxSwap</tt> parameter is not supported.
newLinuxParameters :: LinuxParameters

-- | The value for the size (in MiB) of the <tt>/dev/shm</tt> volume. This
--   parameter maps to the <tt>--shm-size</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>sharedMemorySize</tt> parameter is not supported.
linuxParameters_sharedMemorySize :: Lens' LinuxParameters (Maybe Int)

-- | Run an <tt>init</tt> process inside the container that forwards
--   signals and reaps processes. This parameter maps to the
--   <tt>--init</tt> option to <a>docker run</a>. This parameter requires
--   version 1.25 of the Docker Remote API or greater on your container
--   instance. To check the Docker Remote API version on your container
--   instance, log in to your container instance and run the following
--   command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
linuxParameters_initProcessEnabled :: Lens' LinuxParameters (Maybe Bool)

-- | The container path, mount options, and size (in MiB) of the tmpfs
--   mount. This parameter maps to the <tt>--tmpfs</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>tmpfs</tt> parameter is not supported.
linuxParameters_tmpfs :: Lens' LinuxParameters (Maybe [Tmpfs])

-- | This allows you to tune a container's memory swappiness behavior. A
--   <tt>swappiness</tt> value of <tt>0</tt> will cause swapping to not
--   happen unless absolutely necessary. A <tt>swappiness</tt> value of
--   <tt>100</tt> will cause pages to be swapped very aggressively.
--   Accepted values are whole numbers between <tt>0</tt> and <tt>100</tt>.
--   If the <tt>swappiness</tt> parameter is not specified, a default value
--   of <tt>60</tt> is used. If a value is not specified for
--   <tt>maxSwap</tt> then this parameter is ignored. This parameter maps
--   to the <tt>--memory-swappiness</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>swappiness</tt> parameter is not supported.
linuxParameters_swappiness :: Lens' LinuxParameters (Maybe Int)

-- | Any host devices to expose to the container. This parameter maps to
--   <tt>Devices</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--device</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>devices</tt> parameter is not supported.
linuxParameters_devices :: Lens' LinuxParameters (Maybe [Device])

-- | The Linux capabilities for the container that are added to or dropped
--   from the default configuration provided by Docker.
--   
--   For tasks that use the Fargate launch type, <tt>capabilities</tt> is
--   supported for all platform versions but the <tt>add</tt> parameter is
--   only supported if using platform version 1.4.0 or later.
linuxParameters_capabilities :: Lens' LinuxParameters (Maybe KernelCapabilities)

-- | The total amount of swap memory (in MiB) a container can use. This
--   parameter will be translated to the <tt>--memory-swap</tt> option to
--   <a>docker run</a> where the value would be the sum of the container
--   memory plus the <tt>maxSwap</tt> value.
--   
--   If a <tt>maxSwap</tt> value of <tt>0</tt> is specified, the container
--   will not use swap. Accepted values are <tt>0</tt> or any positive
--   integer. If the <tt>maxSwap</tt> parameter is omitted, the container
--   will use the swap configuration for the container instance it is
--   running on. A <tt>maxSwap</tt> value must be set for the
--   <tt>swappiness</tt> parameter to be used.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>maxSwap</tt> parameter is not supported.
linuxParameters_maxSwap :: Lens' LinuxParameters (Maybe Int)
instance GHC.Generics.Generic Amazonka.ECS.Types.LinuxParameters.LinuxParameters
instance GHC.Show.Show Amazonka.ECS.Types.LinuxParameters.LinuxParameters
instance GHC.Read.Read Amazonka.ECS.Types.LinuxParameters.LinuxParameters
instance GHC.Classes.Eq Amazonka.ECS.Types.LinuxParameters.LinuxParameters
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.LinuxParameters.LinuxParameters
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.LinuxParameters.LinuxParameters
instance Control.DeepSeq.NFData Amazonka.ECS.Types.LinuxParameters.LinuxParameters
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.LinuxParameters.LinuxParameters


module Amazonka.ECS.Types.TransportProtocol
newtype TransportProtocol
TransportProtocol' :: Text -> TransportProtocol
[fromTransportProtocol] :: TransportProtocol -> Text
pattern TransportProtocol_Tcp :: TransportProtocol
pattern TransportProtocol_Udp :: TransportProtocol
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance GHC.Generics.Generic Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance GHC.Classes.Ord Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance GHC.Classes.Eq Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance GHC.Read.Read Amazonka.ECS.Types.TransportProtocol.TransportProtocol
instance GHC.Show.Show Amazonka.ECS.Types.TransportProtocol.TransportProtocol


module Amazonka.ECS.Types.PortMapping

-- | Port mappings allow containers to access ports on the host container
--   instance to send or receive traffic. Port mappings are specified as
--   part of the container definition.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, exposed ports should be specified using
--   <tt>containerPort</tt>. The <tt>hostPort</tt> can be left blank or it
--   must be the same value as the <tt>containerPort</tt>.
--   
--   You cannot expose the same container port for multiple protocols. An
--   error will be returned if this is attempted
--   
--   After a task reaches the <tt>RUNNING</tt> status, manual and automatic
--   host and container port assignments are visible in the
--   <tt>networkBindings</tt> section of DescribeTasks API responses.
--   
--   <i>See:</i> <a>newPortMapping</a> smart constructor.
data PortMapping
PortMapping' :: Maybe TransportProtocol -> Maybe Int -> Maybe Int -> PortMapping

-- | The protocol used for the port mapping. Valid values are <tt>tcp</tt>
--   and <tt>udp</tt>. The default is <tt>tcp</tt>.
[$sel:protocol:PortMapping'] :: PortMapping -> Maybe TransportProtocol

-- | The port number on the container instance to reserve for your
--   container.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, the <tt>hostPort</tt> can either be left
--   blank or set to the same value as the <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode, you can specify a non-reserved host port for your container port
--   mapping, or you can omit the <tt>hostPort</tt> (or set it to
--   <tt>0</tt>) while specifying a <tt>containerPort</tt> and your
--   container automatically receives a port in the ephemeral port range
--   for your container instance operating system and Docker version.
--   
--   The default ephemeral port range for Docker version 1.6.0 and later is
--   listed on the instance under
--   <tt>/proc/sys/net/ipv4/ip_local_port_range</tt>. If this kernel
--   parameter is unavailable, the default ephemeral port range from 49153
--   through 65535 is used. Do not attempt to specify a host port in the
--   ephemeral port range as these are reserved for automatic assignment.
--   In general, ports below 32768 are outside of the ephemeral port range.
--   
--   The default ephemeral port range from 49153 through 65535 is always
--   used for Docker versions before 1.6.0.
--   
--   The default reserved ports are 22 for SSH, the Docker ports 2375 and
--   2376, and the Amazon ECS container agent ports 51678-51680. Any host
--   port that was previously specified in a running task is also reserved
--   while the task is running (after a task stops, the host port is
--   released). The current reserved ports are displayed in the
--   <tt>remainingResources</tt> of DescribeContainerInstances output. A
--   container instance can have up to 100 reserved ports at a time,
--   including the default reserved ports. Automatically assigned ports
--   don't count toward the 100 reserved ports limit.
[$sel:hostPort:PortMapping'] :: PortMapping -> Maybe Int

-- | The port number on the container that is bound to the user-specified
--   or automatically assigned host port.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, exposed ports should be specified using
--   <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode and you specify a container port and not a host port, your
--   container automatically receives a host port in the ephemeral port
--   range. For more information, see <tt>hostPort</tt>. Port mappings that
--   are automatically assigned in this way do not count toward the 100
--   reserved ports limit of a container instance.
[$sel:containerPort:PortMapping'] :: PortMapping -> Maybe Int

-- | Create a value of <a>PortMapping</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocol:PortMapping'</a>, <a>portMapping_protocol</a> - The
--   protocol used for the port mapping. Valid values are <tt>tcp</tt> and
--   <tt>udp</tt>. The default is <tt>tcp</tt>.
--   
--   <a>$sel:hostPort:PortMapping'</a>, <a>portMapping_hostPort</a> - The
--   port number on the container instance to reserve for your container.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, the <tt>hostPort</tt> can either be left
--   blank or set to the same value as the <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode, you can specify a non-reserved host port for your container port
--   mapping, or you can omit the <tt>hostPort</tt> (or set it to
--   <tt>0</tt>) while specifying a <tt>containerPort</tt> and your
--   container automatically receives a port in the ephemeral port range
--   for your container instance operating system and Docker version.
--   
--   The default ephemeral port range for Docker version 1.6.0 and later is
--   listed on the instance under
--   <tt>/proc/sys/net/ipv4/ip_local_port_range</tt>. If this kernel
--   parameter is unavailable, the default ephemeral port range from 49153
--   through 65535 is used. Do not attempt to specify a host port in the
--   ephemeral port range as these are reserved for automatic assignment.
--   In general, ports below 32768 are outside of the ephemeral port range.
--   
--   The default ephemeral port range from 49153 through 65535 is always
--   used for Docker versions before 1.6.0.
--   
--   The default reserved ports are 22 for SSH, the Docker ports 2375 and
--   2376, and the Amazon ECS container agent ports 51678-51680. Any host
--   port that was previously specified in a running task is also reserved
--   while the task is running (after a task stops, the host port is
--   released). The current reserved ports are displayed in the
--   <tt>remainingResources</tt> of DescribeContainerInstances output. A
--   container instance can have up to 100 reserved ports at a time,
--   including the default reserved ports. Automatically assigned ports
--   don't count toward the 100 reserved ports limit.
--   
--   <a>$sel:containerPort:PortMapping'</a>,
--   <a>portMapping_containerPort</a> - The port number on the container
--   that is bound to the user-specified or automatically assigned host
--   port.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, exposed ports should be specified using
--   <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode and you specify a container port and not a host port, your
--   container automatically receives a host port in the ephemeral port
--   range. For more information, see <tt>hostPort</tt>. Port mappings that
--   are automatically assigned in this way do not count toward the 100
--   reserved ports limit of a container instance.
newPortMapping :: PortMapping

-- | The protocol used for the port mapping. Valid values are <tt>tcp</tt>
--   and <tt>udp</tt>. The default is <tt>tcp</tt>.
portMapping_protocol :: Lens' PortMapping (Maybe TransportProtocol)

-- | The port number on the container instance to reserve for your
--   container.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, the <tt>hostPort</tt> can either be left
--   blank or set to the same value as the <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode, you can specify a non-reserved host port for your container port
--   mapping, or you can omit the <tt>hostPort</tt> (or set it to
--   <tt>0</tt>) while specifying a <tt>containerPort</tt> and your
--   container automatically receives a port in the ephemeral port range
--   for your container instance operating system and Docker version.
--   
--   The default ephemeral port range for Docker version 1.6.0 and later is
--   listed on the instance under
--   <tt>/proc/sys/net/ipv4/ip_local_port_range</tt>. If this kernel
--   parameter is unavailable, the default ephemeral port range from 49153
--   through 65535 is used. Do not attempt to specify a host port in the
--   ephemeral port range as these are reserved for automatic assignment.
--   In general, ports below 32768 are outside of the ephemeral port range.
--   
--   The default ephemeral port range from 49153 through 65535 is always
--   used for Docker versions before 1.6.0.
--   
--   The default reserved ports are 22 for SSH, the Docker ports 2375 and
--   2376, and the Amazon ECS container agent ports 51678-51680. Any host
--   port that was previously specified in a running task is also reserved
--   while the task is running (after a task stops, the host port is
--   released). The current reserved ports are displayed in the
--   <tt>remainingResources</tt> of DescribeContainerInstances output. A
--   container instance can have up to 100 reserved ports at a time,
--   including the default reserved ports. Automatically assigned ports
--   don't count toward the 100 reserved ports limit.
portMapping_hostPort :: Lens' PortMapping (Maybe Int)

-- | The port number on the container that is bound to the user-specified
--   or automatically assigned host port.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, exposed ports should be specified using
--   <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode and you specify a container port and not a host port, your
--   container automatically receives a host port in the ephemeral port
--   range. For more information, see <tt>hostPort</tt>. Port mappings that
--   are automatically assigned in this way do not count toward the 100
--   reserved ports limit of a container instance.
portMapping_containerPort :: Lens' PortMapping (Maybe Int)
instance GHC.Generics.Generic Amazonka.ECS.Types.PortMapping.PortMapping
instance GHC.Show.Show Amazonka.ECS.Types.PortMapping.PortMapping
instance GHC.Read.Read Amazonka.ECS.Types.PortMapping.PortMapping
instance GHC.Classes.Eq Amazonka.ECS.Types.PortMapping.PortMapping
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.PortMapping.PortMapping
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.PortMapping.PortMapping
instance Control.DeepSeq.NFData Amazonka.ECS.Types.PortMapping.PortMapping
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.PortMapping.PortMapping


module Amazonka.ECS.Types.NetworkBinding

-- | Details on the network bindings between a container and its host
--   container instance. After a task reaches the <tt>RUNNING</tt> status,
--   manual and automatic host and container port assignments are visible
--   in the <tt>networkBindings</tt> section of DescribeTasks API
--   responses.
--   
--   <i>See:</i> <a>newNetworkBinding</a> smart constructor.
data NetworkBinding
NetworkBinding' :: Maybe Text -> Maybe TransportProtocol -> Maybe Int -> Maybe Int -> NetworkBinding

-- | The IP address that the container is bound to on the container
--   instance.
[$sel:bindIP:NetworkBinding'] :: NetworkBinding -> Maybe Text

-- | The protocol used for the network binding.
[$sel:protocol:NetworkBinding'] :: NetworkBinding -> Maybe TransportProtocol

-- | The port number on the host that is used with the network binding.
[$sel:hostPort:NetworkBinding'] :: NetworkBinding -> Maybe Int

-- | The port number on the container that is used with the network
--   binding.
[$sel:containerPort:NetworkBinding'] :: NetworkBinding -> Maybe Int

-- | Create a value of <a>NetworkBinding</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bindIP:NetworkBinding'</a>, <a>networkBinding_bindIP</a> - The
--   IP address that the container is bound to on the container instance.
--   
--   <a>$sel:protocol:NetworkBinding'</a>, <a>networkBinding_protocol</a> -
--   The protocol used for the network binding.
--   
--   <a>$sel:hostPort:NetworkBinding'</a>, <a>networkBinding_hostPort</a> -
--   The port number on the host that is used with the network binding.
--   
--   <a>$sel:containerPort:NetworkBinding'</a>,
--   <a>networkBinding_containerPort</a> - The port number on the container
--   that is used with the network binding.
newNetworkBinding :: NetworkBinding

-- | The IP address that the container is bound to on the container
--   instance.
networkBinding_bindIP :: Lens' NetworkBinding (Maybe Text)

-- | The protocol used for the network binding.
networkBinding_protocol :: Lens' NetworkBinding (Maybe TransportProtocol)

-- | The port number on the host that is used with the network binding.
networkBinding_hostPort :: Lens' NetworkBinding (Maybe Int)

-- | The port number on the container that is used with the network
--   binding.
networkBinding_containerPort :: Lens' NetworkBinding (Maybe Int)
instance GHC.Generics.Generic Amazonka.ECS.Types.NetworkBinding.NetworkBinding
instance GHC.Show.Show Amazonka.ECS.Types.NetworkBinding.NetworkBinding
instance GHC.Read.Read Amazonka.ECS.Types.NetworkBinding.NetworkBinding
instance GHC.Classes.Eq Amazonka.ECS.Types.NetworkBinding.NetworkBinding
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.NetworkBinding.NetworkBinding
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.NetworkBinding.NetworkBinding
instance Control.DeepSeq.NFData Amazonka.ECS.Types.NetworkBinding.NetworkBinding
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.NetworkBinding.NetworkBinding


module Amazonka.ECS.Types.ContainerStateChange

-- | An object representing a change in state for a container.
--   
--   <i>See:</i> <a>newContainerStateChange</a> smart constructor.
data ContainerStateChange
ContainerStateChange' :: Maybe [NetworkBinding] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Text -> ContainerStateChange

-- | Any network bindings associated with the container.
[$sel:networkBindings:ContainerStateChange'] :: ContainerStateChange -> Maybe [NetworkBinding]

-- | The status of the container.
[$sel:status:ContainerStateChange'] :: ContainerStateChange -> Maybe Text

-- | The name of the container.
[$sel:containerName:ContainerStateChange'] :: ContainerStateChange -> Maybe Text

-- | The reason for the state change.
[$sel:reason:ContainerStateChange'] :: ContainerStateChange -> Maybe Text

-- | The container image SHA 256 digest.
[$sel:imageDigest:ContainerStateChange'] :: ContainerStateChange -> Maybe Text

-- | The exit code for the container, if the state change is a result of
--   the container exiting.
[$sel:exitCode:ContainerStateChange'] :: ContainerStateChange -> Maybe Int

-- | The ID of the Docker container.
[$sel:runtimeId:ContainerStateChange'] :: ContainerStateChange -> Maybe Text

-- | Create a value of <a>ContainerStateChange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:networkBindings:ContainerStateChange'</a>,
--   <a>containerStateChange_networkBindings</a> - Any network bindings
--   associated with the container.
--   
--   <a>$sel:status:ContainerStateChange'</a>,
--   <a>containerStateChange_status</a> - The status of the container.
--   
--   <a>$sel:containerName:ContainerStateChange'</a>,
--   <a>containerStateChange_containerName</a> - The name of the container.
--   
--   <a>$sel:reason:ContainerStateChange'</a>,
--   <a>containerStateChange_reason</a> - The reason for the state change.
--   
--   <a>$sel:imageDigest:ContainerStateChange'</a>,
--   <a>containerStateChange_imageDigest</a> - The container image SHA 256
--   digest.
--   
--   <a>$sel:exitCode:ContainerStateChange'</a>,
--   <a>containerStateChange_exitCode</a> - The exit code for the
--   container, if the state change is a result of the container exiting.
--   
--   <a>$sel:runtimeId:ContainerStateChange'</a>,
--   <a>containerStateChange_runtimeId</a> - The ID of the Docker
--   container.
newContainerStateChange :: ContainerStateChange

-- | Any network bindings associated with the container.
containerStateChange_networkBindings :: Lens' ContainerStateChange (Maybe [NetworkBinding])

-- | The status of the container.
containerStateChange_status :: Lens' ContainerStateChange (Maybe Text)

-- | The name of the container.
containerStateChange_containerName :: Lens' ContainerStateChange (Maybe Text)

-- | The reason for the state change.
containerStateChange_reason :: Lens' ContainerStateChange (Maybe Text)

-- | The container image SHA 256 digest.
containerStateChange_imageDigest :: Lens' ContainerStateChange (Maybe Text)

-- | The exit code for the container, if the state change is a result of
--   the container exiting.
containerStateChange_exitCode :: Lens' ContainerStateChange (Maybe Int)

-- | The ID of the Docker container.
containerStateChange_runtimeId :: Lens' ContainerStateChange (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.ContainerStateChange.ContainerStateChange
instance GHC.Show.Show Amazonka.ECS.Types.ContainerStateChange.ContainerStateChange
instance GHC.Read.Read Amazonka.ECS.Types.ContainerStateChange.ContainerStateChange
instance GHC.Classes.Eq Amazonka.ECS.Types.ContainerStateChange.ContainerStateChange
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ContainerStateChange.ContainerStateChange
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ContainerStateChange.ContainerStateChange
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ContainerStateChange.ContainerStateChange


module Amazonka.ECS.Types.Container

-- | A Docker container that is part of a task.
--   
--   <i>See:</i> <a>newContainer</a> smart constructor.
data Container
Container' :: Maybe [Text] -> Maybe [NetworkBinding] -> Maybe [ManagedAgent] -> Maybe Text -> Maybe Text -> Maybe [NetworkInterface] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe HealthStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Container

-- | The IDs of each GPU assigned to the container.
[$sel:gpuIds:Container'] :: Container -> Maybe [Text]

-- | The network bindings associated with the container.
[$sel:networkBindings:Container'] :: Container -> Maybe [NetworkBinding]

-- | The details of any Amazon ECS managed agents associated with the
--   container.
[$sel:managedAgents:Container'] :: Container -> Maybe [ManagedAgent]

-- | The image used for the container.
[$sel:image:Container'] :: Container -> Maybe Text

-- | The Amazon Resource Name (ARN) of the container.
[$sel:containerArn:Container'] :: Container -> Maybe Text

-- | The network interfaces associated with the container.
[$sel:networkInterfaces:Container'] :: Container -> Maybe [NetworkInterface]

-- | The ARN of the task.
[$sel:taskArn:Container'] :: Container -> Maybe Text

-- | The last known status of the container.
[$sel:lastStatus:Container'] :: Container -> Maybe Text

-- | The hard limit (in MiB) of memory set for the container.
[$sel:memory:Container'] :: Container -> Maybe Text

-- | A short (255 max characters) human-readable string to provide
--   additional details about a running or stopped container.
[$sel:reason:Container'] :: Container -> Maybe Text

-- | The name of the container.
[$sel:name:Container'] :: Container -> Maybe Text

-- | The container image manifest digest.
--   
--   The <tt>imageDigest</tt> is only returned if the container is using an
--   image hosted in Amazon ECR, otherwise it is omitted.
[$sel:imageDigest:Container'] :: Container -> Maybe Text

-- | The exit code returned from the container.
[$sel:exitCode:Container'] :: Container -> Maybe Int

-- | The health status of the container. If health checks are not
--   configured for this container in its task definition, then it reports
--   the health status as <tt>UNKNOWN</tt>.
[$sel:healthStatus:Container'] :: Container -> Maybe HealthStatus

-- | The number of CPU units set for the container. The value will be
--   <tt>0</tt> if no value was specified in the container definition when
--   the task definition was registered.
[$sel:cpu:Container'] :: Container -> Maybe Text

-- | The ID of the Docker container.
[$sel:runtimeId:Container'] :: Container -> Maybe Text

-- | The soft limit (in MiB) of memory set for the container.
[$sel:memoryReservation:Container'] :: Container -> Maybe Text

-- | Create a value of <a>Container</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:gpuIds:Container'</a>, <a>container_gpuIds</a> - The IDs of
--   each GPU assigned to the container.
--   
--   <a>$sel:networkBindings:Container'</a>,
--   <a>container_networkBindings</a> - The network bindings associated
--   with the container.
--   
--   <a>$sel:managedAgents:Container'</a>, <a>container_managedAgents</a> -
--   The details of any Amazon ECS managed agents associated with the
--   container.
--   
--   <a>$sel:image:Container'</a>, <a>container_image</a> - The image used
--   for the container.
--   
--   <a>$sel:containerArn:Container'</a>, <a>container_containerArn</a> -
--   The Amazon Resource Name (ARN) of the container.
--   
--   <a>$sel:networkInterfaces:Container'</a>,
--   <a>container_networkInterfaces</a> - The network interfaces associated
--   with the container.
--   
--   <a>$sel:taskArn:Container'</a>, <a>container_taskArn</a> - The ARN of
--   the task.
--   
--   <a>$sel:lastStatus:Container'</a>, <a>container_lastStatus</a> - The
--   last known status of the container.
--   
--   <a>$sel:memory:Container'</a>, <a>container_memory</a> - The hard
--   limit (in MiB) of memory set for the container.
--   
--   <a>$sel:reason:Container'</a>, <a>container_reason</a> - A short (255
--   max characters) human-readable string to provide additional details
--   about a running or stopped container.
--   
--   <a>$sel:name:Container'</a>, <a>container_name</a> - The name of the
--   container.
--   
--   <a>$sel:imageDigest:Container'</a>, <a>container_imageDigest</a> - The
--   container image manifest digest.
--   
--   The <tt>imageDigest</tt> is only returned if the container is using an
--   image hosted in Amazon ECR, otherwise it is omitted.
--   
--   <a>$sel:exitCode:Container'</a>, <a>container_exitCode</a> - The exit
--   code returned from the container.
--   
--   <a>$sel:healthStatus:Container'</a>, <a>container_healthStatus</a> -
--   The health status of the container. If health checks are not
--   configured for this container in its task definition, then it reports
--   the health status as <tt>UNKNOWN</tt>.
--   
--   <a>$sel:cpu:Container'</a>, <a>container_cpu</a> - The number of CPU
--   units set for the container. The value will be <tt>0</tt> if no value
--   was specified in the container definition when the task definition was
--   registered.
--   
--   <a>$sel:runtimeId:Container'</a>, <a>container_runtimeId</a> - The ID
--   of the Docker container.
--   
--   <a>$sel:memoryReservation:Container'</a>,
--   <a>container_memoryReservation</a> - The soft limit (in MiB) of memory
--   set for the container.
newContainer :: Container

-- | The IDs of each GPU assigned to the container.
container_gpuIds :: Lens' Container (Maybe [Text])

-- | The network bindings associated with the container.
container_networkBindings :: Lens' Container (Maybe [NetworkBinding])

-- | The details of any Amazon ECS managed agents associated with the
--   container.
container_managedAgents :: Lens' Container (Maybe [ManagedAgent])

-- | The image used for the container.
container_image :: Lens' Container (Maybe Text)

-- | The Amazon Resource Name (ARN) of the container.
container_containerArn :: Lens' Container (Maybe Text)

-- | The network interfaces associated with the container.
container_networkInterfaces :: Lens' Container (Maybe [NetworkInterface])

-- | The ARN of the task.
container_taskArn :: Lens' Container (Maybe Text)

-- | The last known status of the container.
container_lastStatus :: Lens' Container (Maybe Text)

-- | The hard limit (in MiB) of memory set for the container.
container_memory :: Lens' Container (Maybe Text)

-- | A short (255 max characters) human-readable string to provide
--   additional details about a running or stopped container.
container_reason :: Lens' Container (Maybe Text)

-- | The name of the container.
container_name :: Lens' Container (Maybe Text)

-- | The container image manifest digest.
--   
--   The <tt>imageDigest</tt> is only returned if the container is using an
--   image hosted in Amazon ECR, otherwise it is omitted.
container_imageDigest :: Lens' Container (Maybe Text)

-- | The exit code returned from the container.
container_exitCode :: Lens' Container (Maybe Int)

-- | The health status of the container. If health checks are not
--   configured for this container in its task definition, then it reports
--   the health status as <tt>UNKNOWN</tt>.
container_healthStatus :: Lens' Container (Maybe HealthStatus)

-- | The number of CPU units set for the container. The value will be
--   <tt>0</tt> if no value was specified in the container definition when
--   the task definition was registered.
container_cpu :: Lens' Container (Maybe Text)

-- | The ID of the Docker container.
container_runtimeId :: Lens' Container (Maybe Text)

-- | The soft limit (in MiB) of memory set for the container.
container_memoryReservation :: Lens' Container (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.Container.Container
instance GHC.Show.Show Amazonka.ECS.Types.Container.Container
instance GHC.Read.Read Amazonka.ECS.Types.Container.Container
instance GHC.Classes.Eq Amazonka.ECS.Types.Container.Container
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Container.Container
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Container.Container
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Container.Container


module Amazonka.ECS.Types.Task

-- | Details on a task in a cluster.
--   
--   <i>See:</i> <a>newTask</a> smart constructor.
data Task
Task' :: Maybe POSIX -> Maybe Text -> Maybe TaskOverride -> Maybe [InferenceAccelerator] -> Maybe Text -> Maybe Text -> Maybe [Attachment] -> Maybe POSIX -> Maybe TaskStopCode -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe EphemeralStorage -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe [Container] -> Maybe POSIX -> Maybe Text -> Maybe [Attribute] -> Maybe Integer -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Connectivity -> Maybe POSIX -> Maybe LaunchType -> Maybe Text -> Maybe HealthStatus -> Maybe POSIX -> Maybe Text -> Maybe Bool -> Maybe POSIX -> Maybe [Tag] -> Task

-- | The Unix timestamp for when the task was stopped (the task
--   transitioned from the <tt>RUNNING</tt> state to the <tt>STOPPED</tt>
--   state).
[$sel:stoppedAt:Task'] :: Task -> Maybe POSIX

-- | The desired status of the task. For more information, see <a>Task
--   Lifecycle</a>.
[$sel:desiredStatus:Task'] :: Task -> Maybe Text

-- | One or more container overrides.
[$sel:overrides:Task'] :: Task -> Maybe TaskOverride

-- | The Elastic Inference accelerator associated with the task.
[$sel:inferenceAccelerators:Task'] :: Task -> Maybe [InferenceAccelerator]

-- | The ARN of the cluster that hosts the task.
[$sel:clusterArn:Task'] :: Task -> Maybe Text

-- | The name of the task group associated with the task.
[$sel:group':Task'] :: Task -> Maybe Text

-- | The Elastic Network Adapter associated with the task if the task uses
--   the <tt>awsvpc</tt> network mode.
[$sel:attachments:Task'] :: Task -> Maybe [Attachment]

-- | The Unix timestamp for when the task was created (the task entered the
--   <tt>PENDING</tt> state).
[$sel:createdAt:Task'] :: Task -> Maybe POSIX

-- | The stop code indicating why a task was stopped. The
--   <tt>stoppedReason</tt> may contain additional details.
[$sel:stopCode:Task'] :: Task -> Maybe TaskStopCode

-- | The platform version on which your task is running. A platform version
--   is only specified for tasks using the Fargate launch type. If one is
--   not specified, the <tt>LATEST</tt> platform version is used by
--   default. For more information, see <a>Fargate Platform Versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:platformVersion:Task'] :: Task -> Maybe Text

-- | The Amazon Resource Name (ARN) of the task.
[$sel:taskArn:Task'] :: Task -> Maybe Text

-- | The ARN of the container instances that host the task.
[$sel:containerInstanceArn:Task'] :: Task -> Maybe Text

-- | The Unix timestamp for when the task execution stopped.
[$sel:executionStoppedAt:Task'] :: Task -> Maybe POSIX

-- | The ephemeral storage settings for the task.
[$sel:ephemeralStorage:Task'] :: Task -> Maybe EphemeralStorage

-- | The last known status of the task. For more information, see <a>Task
--   Lifecycle</a>.
[$sel:lastStatus:Task'] :: Task -> Maybe Text

-- | The amount of memory (in MiB) used by the task as expressed in a task
--   definition. It can be expressed as an integer using MiB, for example
--   <tt>1024</tt>. It can also be expressed as a string using GB, for
--   example <tt>1GB</tt> or <tt>1 GB</tt>. String values are converted to
--   an integer indicating the MiB when the task definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
[$sel:memory:Task'] :: Task -> Maybe Text

-- | The Unix timestamp for when the container image pull completed.
[$sel:pullStoppedAt:Task'] :: Task -> Maybe POSIX

-- | The containers associated with the task.
[$sel:containers:Task'] :: Task -> Maybe [Container]

-- | The Unix timestamp for when the task started (the task transitioned
--   from the <tt>PENDING</tt> state to the <tt>RUNNING</tt> state).
[$sel:startedAt:Task'] :: Task -> Maybe POSIX

-- | The availability zone of the task.
[$sel:availabilityZone:Task'] :: Task -> Maybe Text

-- | The attributes of the task
[$sel:attributes:Task'] :: Task -> Maybe [Attribute]

-- | The version counter for the task. Every time a task experiences a
--   change that triggers a CloudWatch event, the version counter is
--   incremented. If you are replicating your Amazon ECS task state with
--   CloudWatch Events, you can compare the version of a task reported by
--   the Amazon ECS API actions with the version reported in CloudWatch
--   Events for the task (inside the <tt>detail</tt> object) to verify that
--   the version in your event stream is current.
[$sel:version:Task'] :: Task -> Maybe Integer

-- | The capacity provider associated with the task.
[$sel:capacityProviderName:Task'] :: Task -> Maybe Text

-- | The tag specified when a task is started. If the task is started by an
--   Amazon ECS service, then the <tt>startedBy</tt> parameter contains the
--   deployment ID of the service that starts it.
[$sel:startedBy:Task'] :: Task -> Maybe Text

-- | The reason that the task was stopped.
[$sel:stoppedReason:Task'] :: Task -> Maybe Text

-- | The connectivity status of a task.
[$sel:connectivity:Task'] :: Task -> Maybe Connectivity

-- | The Unix timestamp for when the task stops (transitions from the
--   <tt>RUNNING</tt> state to <tt>STOPPED</tt>).
[$sel:stoppingAt:Task'] :: Task -> Maybe POSIX

-- | The infrastructure on which your task is running. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:launchType:Task'] :: Task -> Maybe LaunchType

-- | The ARN of the task definition that creates the task.
[$sel:taskDefinitionArn:Task'] :: Task -> Maybe Text

-- | The health status for the task, which is determined by the health of
--   the essential containers in the task. If all essential containers in
--   the task are reporting as <tt>HEALTHY</tt>, then the task status also
--   reports as <tt>HEALTHY</tt>. If any essential containers in the task
--   are reporting as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>, then the task
--   status also reports as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>,
--   accordingly.
--   
--   The Amazon ECS container agent does not monitor or report on Docker
--   health checks that are embedded in a container image (such as those
--   specified in a parent image or from the image's Dockerfile) and not
--   specified in the container definition. Health check parameters that
--   are specified in a container definition override any Docker health
--   checks that exist in the container image.
[$sel:healthStatus:Task'] :: Task -> Maybe HealthStatus

-- | The Unix timestamp for when the task last went into <tt>CONNECTED</tt>
--   status.
[$sel:connectivityAt:Task'] :: Task -> Maybe POSIX

-- | The number of CPU units used by the task as expressed in a task
--   definition. It can be expressed as an integer using CPU units, for
--   example <tt>1024</tt>. It can also be expressed as a string using
--   vCPUs, for example <tt>1 vCPU</tt> or <tt>1 vcpu</tt>. String values
--   are converted to an integer indicating the CPU units when the task
--   definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
[$sel:cpu:Task'] :: Task -> Maybe Text

-- | Whether or not execute command functionality is enabled for this task.
--   If <tt>true</tt>, this enables execute command functionality on all
--   containers in the task.
[$sel:enableExecuteCommand:Task'] :: Task -> Maybe Bool

-- | The Unix timestamp for when the container image pull began.
[$sel:pullStartedAt:Task'] :: Task -> Maybe POSIX

-- | The metadata that you apply to the task to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:Task'] :: Task -> Maybe [Tag]

-- | Create a value of <a>Task</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:stoppedAt:Task'</a>, <a>task_stoppedAt</a> - The Unix
--   timestamp for when the task was stopped (the task transitioned from
--   the <tt>RUNNING</tt> state to the <tt>STOPPED</tt> state).
--   
--   <a>$sel:desiredStatus:Task'</a>, <a>task_desiredStatus</a> - The
--   desired status of the task. For more information, see <a>Task
--   Lifecycle</a>.
--   
--   <a>$sel:overrides:Task'</a>, <a>task_overrides</a> - One or more
--   container overrides.
--   
--   <a>$sel:inferenceAccelerators:Task'</a>,
--   <a>task_inferenceAccelerators</a> - The Elastic Inference accelerator
--   associated with the task.
--   
--   <a>$sel:clusterArn:Task'</a>, <a>task_clusterArn</a> - The ARN of the
--   cluster that hosts the task.
--   
--   <a>$sel:group':Task'</a>, <a>task_group</a> - The name of the task
--   group associated with the task.
--   
--   <a>$sel:attachments:Task'</a>, <a>task_attachments</a> - The Elastic
--   Network Adapter associated with the task if the task uses the
--   <tt>awsvpc</tt> network mode.
--   
--   <a>$sel:createdAt:Task'</a>, <a>task_createdAt</a> - The Unix
--   timestamp for when the task was created (the task entered the
--   <tt>PENDING</tt> state).
--   
--   <a>$sel:stopCode:Task'</a>, <a>task_stopCode</a> - The stop code
--   indicating why a task was stopped. The <tt>stoppedReason</tt> may
--   contain additional details.
--   
--   <a>$sel:platformVersion:Task'</a>, <a>task_platformVersion</a> - The
--   platform version on which your task is running. A platform version is
--   only specified for tasks using the Fargate launch type. If one is not
--   specified, the <tt>LATEST</tt> platform version is used by default.
--   For more information, see <a>Fargate Platform Versions</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:taskArn:Task'</a>, <a>task_taskArn</a> - The Amazon Resource
--   Name (ARN) of the task.
--   
--   <a>$sel:containerInstanceArn:Task'</a>,
--   <a>task_containerInstanceArn</a> - The ARN of the container instances
--   that host the task.
--   
--   <a>$sel:executionStoppedAt:Task'</a>, <a>task_executionStoppedAt</a> -
--   The Unix timestamp for when the task execution stopped.
--   
--   <a>$sel:ephemeralStorage:Task'</a>, <a>task_ephemeralStorage</a> - The
--   ephemeral storage settings for the task.
--   
--   <a>$sel:lastStatus:Task'</a>, <a>task_lastStatus</a> - The last known
--   status of the task. For more information, see <a>Task Lifecycle</a>.
--   
--   <a>$sel:memory:Task'</a>, <a>task_memory</a> - The amount of memory
--   (in MiB) used by the task as expressed in a task definition. It can be
--   expressed as an integer using MiB, for example <tt>1024</tt>. It can
--   also be expressed as a string using GB, for example <tt>1GB</tt> or
--   <tt>1 GB</tt>. String values are converted to an integer indicating
--   the MiB when the task definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
--   
--   <a>$sel:pullStoppedAt:Task'</a>, <a>task_pullStoppedAt</a> - The Unix
--   timestamp for when the container image pull completed.
--   
--   <a>$sel:containers:Task'</a>, <a>task_containers</a> - The containers
--   associated with the task.
--   
--   <a>$sel:startedAt:Task'</a>, <a>task_startedAt</a> - The Unix
--   timestamp for when the task started (the task transitioned from the
--   <tt>PENDING</tt> state to the <tt>RUNNING</tt> state).
--   
--   <a>$sel:availabilityZone:Task'</a>, <a>task_availabilityZone</a> - The
--   availability zone of the task.
--   
--   <a>$sel:attributes:Task'</a>, <a>task_attributes</a> - The attributes
--   of the task
--   
--   <a>$sel:version:Task'</a>, <a>task_version</a> - The version counter
--   for the task. Every time a task experiences a change that triggers a
--   CloudWatch event, the version counter is incremented. If you are
--   replicating your Amazon ECS task state with CloudWatch Events, you can
--   compare the version of a task reported by the Amazon ECS API actions
--   with the version reported in CloudWatch Events for the task (inside
--   the <tt>detail</tt> object) to verify that the version in your event
--   stream is current.
--   
--   <a>$sel:capacityProviderName:Task'</a>,
--   <a>task_capacityProviderName</a> - The capacity provider associated
--   with the task.
--   
--   <a>$sel:startedBy:Task'</a>, <a>task_startedBy</a> - The tag specified
--   when a task is started. If the task is started by an Amazon ECS
--   service, then the <tt>startedBy</tt> parameter contains the deployment
--   ID of the service that starts it.
--   
--   <a>$sel:stoppedReason:Task'</a>, <a>task_stoppedReason</a> - The
--   reason that the task was stopped.
--   
--   <a>$sel:connectivity:Task'</a>, <a>task_connectivity</a> - The
--   connectivity status of a task.
--   
--   <a>$sel:stoppingAt:Task'</a>, <a>task_stoppingAt</a> - The Unix
--   timestamp for when the task stops (transitions from the
--   <tt>RUNNING</tt> state to <tt>STOPPED</tt>).
--   
--   <a>$sel:launchType:Task'</a>, <a>task_launchType</a> - The
--   infrastructure on which your task is running. For more information,
--   see <a>Amazon ECS launch types</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:taskDefinitionArn:Task'</a>, <a>task_taskDefinitionArn</a> -
--   The ARN of the task definition that creates the task.
--   
--   <a>$sel:healthStatus:Task'</a>, <a>task_healthStatus</a> - The health
--   status for the task, which is determined by the health of the
--   essential containers in the task. If all essential containers in the
--   task are reporting as <tt>HEALTHY</tt>, then the task status also
--   reports as <tt>HEALTHY</tt>. If any essential containers in the task
--   are reporting as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>, then the task
--   status also reports as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>,
--   accordingly.
--   
--   The Amazon ECS container agent does not monitor or report on Docker
--   health checks that are embedded in a container image (such as those
--   specified in a parent image or from the image's Dockerfile) and not
--   specified in the container definition. Health check parameters that
--   are specified in a container definition override any Docker health
--   checks that exist in the container image.
--   
--   <a>$sel:connectivityAt:Task'</a>, <a>task_connectivityAt</a> - The
--   Unix timestamp for when the task last went into <tt>CONNECTED</tt>
--   status.
--   
--   <a>$sel:cpu:Task'</a>, <a>task_cpu</a> - The number of CPU units used
--   by the task as expressed in a task definition. It can be expressed as
--   an integer using CPU units, for example <tt>1024</tt>. It can also be
--   expressed as a string using vCPUs, for example <tt>1 vCPU</tt> or
--   <tt>1 vcpu</tt>. String values are converted to an integer indicating
--   the CPU units when the task definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
--   
--   <a>$sel:enableExecuteCommand:Task'</a>,
--   <a>task_enableExecuteCommand</a> - Whether or not execute command
--   functionality is enabled for this task. If <tt>true</tt>, this enables
--   execute command functionality on all containers in the task.
--   
--   <a>$sel:pullStartedAt:Task'</a>, <a>task_pullStartedAt</a> - The Unix
--   timestamp for when the container image pull began.
--   
--   <a>$sel:tags:Task'</a>, <a>task_tags</a> - The metadata that you apply
--   to the task to help you categorize and organize them. Each tag
--   consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newTask :: Task

-- | The Unix timestamp for when the task was stopped (the task
--   transitioned from the <tt>RUNNING</tt> state to the <tt>STOPPED</tt>
--   state).
task_stoppedAt :: Lens' Task (Maybe UTCTime)

-- | The desired status of the task. For more information, see <a>Task
--   Lifecycle</a>.
task_desiredStatus :: Lens' Task (Maybe Text)

-- | One or more container overrides.
task_overrides :: Lens' Task (Maybe TaskOverride)

-- | The Elastic Inference accelerator associated with the task.
task_inferenceAccelerators :: Lens' Task (Maybe [InferenceAccelerator])

-- | The ARN of the cluster that hosts the task.
task_clusterArn :: Lens' Task (Maybe Text)

-- | The name of the task group associated with the task.
task_group :: Lens' Task (Maybe Text)

-- | The Elastic Network Adapter associated with the task if the task uses
--   the <tt>awsvpc</tt> network mode.
task_attachments :: Lens' Task (Maybe [Attachment])

-- | The Unix timestamp for when the task was created (the task entered the
--   <tt>PENDING</tt> state).
task_createdAt :: Lens' Task (Maybe UTCTime)

-- | The stop code indicating why a task was stopped. The
--   <tt>stoppedReason</tt> may contain additional details.
task_stopCode :: Lens' Task (Maybe TaskStopCode)

-- | The platform version on which your task is running. A platform version
--   is only specified for tasks using the Fargate launch type. If one is
--   not specified, the <tt>LATEST</tt> platform version is used by
--   default. For more information, see <a>Fargate Platform Versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
task_platformVersion :: Lens' Task (Maybe Text)

-- | The Amazon Resource Name (ARN) of the task.
task_taskArn :: Lens' Task (Maybe Text)

-- | The ARN of the container instances that host the task.
task_containerInstanceArn :: Lens' Task (Maybe Text)

-- | The Unix timestamp for when the task execution stopped.
task_executionStoppedAt :: Lens' Task (Maybe UTCTime)

-- | The ephemeral storage settings for the task.
task_ephemeralStorage :: Lens' Task (Maybe EphemeralStorage)

-- | The last known status of the task. For more information, see <a>Task
--   Lifecycle</a>.
task_lastStatus :: Lens' Task (Maybe Text)

-- | The amount of memory (in MiB) used by the task as expressed in a task
--   definition. It can be expressed as an integer using MiB, for example
--   <tt>1024</tt>. It can also be expressed as a string using GB, for
--   example <tt>1GB</tt> or <tt>1 GB</tt>. String values are converted to
--   an integer indicating the MiB when the task definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
task_memory :: Lens' Task (Maybe Text)

-- | The Unix timestamp for when the container image pull completed.
task_pullStoppedAt :: Lens' Task (Maybe UTCTime)

-- | The containers associated with the task.
task_containers :: Lens' Task (Maybe [Container])

-- | The Unix timestamp for when the task started (the task transitioned
--   from the <tt>PENDING</tt> state to the <tt>RUNNING</tt> state).
task_startedAt :: Lens' Task (Maybe UTCTime)

-- | The availability zone of the task.
task_availabilityZone :: Lens' Task (Maybe Text)

-- | The attributes of the task
task_attributes :: Lens' Task (Maybe [Attribute])

-- | The version counter for the task. Every time a task experiences a
--   change that triggers a CloudWatch event, the version counter is
--   incremented. If you are replicating your Amazon ECS task state with
--   CloudWatch Events, you can compare the version of a task reported by
--   the Amazon ECS API actions with the version reported in CloudWatch
--   Events for the task (inside the <tt>detail</tt> object) to verify that
--   the version in your event stream is current.
task_version :: Lens' Task (Maybe Integer)

-- | The capacity provider associated with the task.
task_capacityProviderName :: Lens' Task (Maybe Text)

-- | The tag specified when a task is started. If the task is started by an
--   Amazon ECS service, then the <tt>startedBy</tt> parameter contains the
--   deployment ID of the service that starts it.
task_startedBy :: Lens' Task (Maybe Text)

-- | The reason that the task was stopped.
task_stoppedReason :: Lens' Task (Maybe Text)

-- | The connectivity status of a task.
task_connectivity :: Lens' Task (Maybe Connectivity)

-- | The Unix timestamp for when the task stops (transitions from the
--   <tt>RUNNING</tt> state to <tt>STOPPED</tt>).
task_stoppingAt :: Lens' Task (Maybe UTCTime)

-- | The infrastructure on which your task is running. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
task_launchType :: Lens' Task (Maybe LaunchType)

-- | The ARN of the task definition that creates the task.
task_taskDefinitionArn :: Lens' Task (Maybe Text)

-- | The health status for the task, which is determined by the health of
--   the essential containers in the task. If all essential containers in
--   the task are reporting as <tt>HEALTHY</tt>, then the task status also
--   reports as <tt>HEALTHY</tt>. If any essential containers in the task
--   are reporting as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>, then the task
--   status also reports as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>,
--   accordingly.
--   
--   The Amazon ECS container agent does not monitor or report on Docker
--   health checks that are embedded in a container image (such as those
--   specified in a parent image or from the image's Dockerfile) and not
--   specified in the container definition. Health check parameters that
--   are specified in a container definition override any Docker health
--   checks that exist in the container image.
task_healthStatus :: Lens' Task (Maybe HealthStatus)

-- | The Unix timestamp for when the task last went into <tt>CONNECTED</tt>
--   status.
task_connectivityAt :: Lens' Task (Maybe UTCTime)

-- | The number of CPU units used by the task as expressed in a task
--   definition. It can be expressed as an integer using CPU units, for
--   example <tt>1024</tt>. It can also be expressed as a string using
--   vCPUs, for example <tt>1 vCPU</tt> or <tt>1 vcpu</tt>. String values
--   are converted to an integer indicating the CPU units when the task
--   definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
task_cpu :: Lens' Task (Maybe Text)

-- | Whether or not execute command functionality is enabled for this task.
--   If <tt>true</tt>, this enables execute command functionality on all
--   containers in the task.
task_enableExecuteCommand :: Lens' Task (Maybe Bool)

-- | The Unix timestamp for when the container image pull began.
task_pullStartedAt :: Lens' Task (Maybe UTCTime)

-- | The metadata that you apply to the task to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
task_tags :: Lens' Task (Maybe [Tag])
instance GHC.Generics.Generic Amazonka.ECS.Types.Task.Task
instance GHC.Show.Show Amazonka.ECS.Types.Task.Task
instance GHC.Read.Read Amazonka.ECS.Types.Task.Task
instance GHC.Classes.Eq Amazonka.ECS.Types.Task.Task
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Task.Task
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Task.Task
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Task.Task


module Amazonka.ECS.Types.UlimitName
newtype UlimitName
UlimitName' :: Text -> UlimitName
[fromUlimitName] :: UlimitName -> Text
pattern UlimitName_Core :: UlimitName
pattern UlimitName_Cpu :: UlimitName
pattern UlimitName_Data :: UlimitName
pattern UlimitName_Fsize :: UlimitName
pattern UlimitName_Locks :: UlimitName
pattern UlimitName_Memlock :: UlimitName
pattern UlimitName_Msgqueue :: UlimitName
pattern UlimitName_Nice :: UlimitName
pattern UlimitName_Nofile :: UlimitName
pattern UlimitName_Nproc :: UlimitName
pattern UlimitName_Rss :: UlimitName
pattern UlimitName_Rtprio :: UlimitName
pattern UlimitName_Rttime :: UlimitName
pattern UlimitName_Sigpending :: UlimitName
pattern UlimitName_Stack :: UlimitName
instance Amazonka.Data.XML.ToXML Amazonka.ECS.Types.UlimitName.UlimitName
instance Amazonka.Data.XML.FromXML Amazonka.ECS.Types.UlimitName.UlimitName
instance Data.Aeson.Types.ToJSON.ToJSONKey Amazonka.ECS.Types.UlimitName.UlimitName
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.UlimitName.UlimitName
instance Data.Aeson.Types.FromJSON.FromJSONKey Amazonka.ECS.Types.UlimitName.UlimitName
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.UlimitName.UlimitName
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.Types.UlimitName.UlimitName
instance Amazonka.Data.Headers.ToHeader Amazonka.ECS.Types.UlimitName.UlimitName
instance Amazonka.Data.Log.ToLog Amazonka.ECS.Types.UlimitName.UlimitName
instance Amazonka.Data.ByteString.ToByteString Amazonka.ECS.Types.UlimitName.UlimitName
instance Amazonka.Data.Text.ToText Amazonka.ECS.Types.UlimitName.UlimitName
instance Amazonka.Data.Text.FromText Amazonka.ECS.Types.UlimitName.UlimitName
instance Control.DeepSeq.NFData Amazonka.ECS.Types.UlimitName.UlimitName
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.UlimitName.UlimitName
instance GHC.Generics.Generic Amazonka.ECS.Types.UlimitName.UlimitName
instance GHC.Classes.Ord Amazonka.ECS.Types.UlimitName.UlimitName
instance GHC.Classes.Eq Amazonka.ECS.Types.UlimitName.UlimitName
instance GHC.Read.Read Amazonka.ECS.Types.UlimitName.UlimitName
instance GHC.Show.Show Amazonka.ECS.Types.UlimitName.UlimitName


module Amazonka.ECS.Types.Ulimit

-- | The <tt>ulimit</tt> settings to pass to the container.
--   
--   Amazon ECS tasks hosted on Fargate use the default resource limit
--   values set by the operating system with the exception of the
--   <tt>nofile</tt> resource limit parameter which Fargate overrides. The
--   <tt>nofile</tt> resource limit sets a restriction on the number of
--   open files that a container can use. The default <tt>nofile</tt> soft
--   limit is <tt>1024</tt> and hard limit is <tt>4096</tt>.
--   
--   <i>See:</i> <a>newUlimit</a> smart constructor.
data Ulimit
Ulimit' :: UlimitName -> Int -> Int -> Ulimit

-- | The <tt>type</tt> of the <tt>ulimit</tt>.
[$sel:name:Ulimit'] :: Ulimit -> UlimitName

-- | The soft limit for the ulimit type.
[$sel:softLimit:Ulimit'] :: Ulimit -> Int

-- | The hard limit for the ulimit type.
[$sel:hardLimit:Ulimit'] :: Ulimit -> Int

-- | Create a value of <a>Ulimit</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:Ulimit'</a>, <a>ulimit_name</a> - The <tt>type</tt> of
--   the <tt>ulimit</tt>.
--   
--   <a>$sel:softLimit:Ulimit'</a>, <a>ulimit_softLimit</a> - The soft
--   limit for the ulimit type.
--   
--   <a>$sel:hardLimit:Ulimit'</a>, <a>ulimit_hardLimit</a> - The hard
--   limit for the ulimit type.
newUlimit :: UlimitName -> Int -> Int -> Ulimit

-- | The <tt>type</tt> of the <tt>ulimit</tt>.
ulimit_name :: Lens' Ulimit UlimitName

-- | The soft limit for the ulimit type.
ulimit_softLimit :: Lens' Ulimit Int

-- | The hard limit for the ulimit type.
ulimit_hardLimit :: Lens' Ulimit Int
instance GHC.Generics.Generic Amazonka.ECS.Types.Ulimit.Ulimit
instance GHC.Show.Show Amazonka.ECS.Types.Ulimit.Ulimit
instance GHC.Read.Read Amazonka.ECS.Types.Ulimit.Ulimit
instance GHC.Classes.Eq Amazonka.ECS.Types.Ulimit.Ulimit
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Ulimit.Ulimit
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Ulimit.Ulimit
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Ulimit.Ulimit
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.Ulimit.Ulimit


module Amazonka.ECS.Types.VersionInfo

-- | The Docker and Amazon ECS container agent version information about a
--   container instance.
--   
--   <i>See:</i> <a>newVersionInfo</a> smart constructor.
data VersionInfo
VersionInfo' :: Maybe Text -> Maybe Text -> Maybe Text -> VersionInfo

-- | The Git commit hash for the Amazon ECS container agent build on the
--   <a>amazon-ecs-agent</a> GitHub repository.
[$sel:agentHash:VersionInfo'] :: VersionInfo -> Maybe Text

-- | The version number of the Amazon ECS container agent.
[$sel:agentVersion:VersionInfo'] :: VersionInfo -> Maybe Text

-- | The Docker version running on the container instance.
[$sel:dockerVersion:VersionInfo'] :: VersionInfo -> Maybe Text

-- | Create a value of <a>VersionInfo</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:agentHash:VersionInfo'</a>, <a>versionInfo_agentHash</a> - The
--   Git commit hash for the Amazon ECS container agent build on the
--   <a>amazon-ecs-agent</a> GitHub repository.
--   
--   <a>$sel:agentVersion:VersionInfo'</a>, <a>versionInfo_agentVersion</a>
--   - The version number of the Amazon ECS container agent.
--   
--   <a>$sel:dockerVersion:VersionInfo'</a>,
--   <a>versionInfo_dockerVersion</a> - The Docker version running on the
--   container instance.
newVersionInfo :: VersionInfo

-- | The Git commit hash for the Amazon ECS container agent build on the
--   <a>amazon-ecs-agent</a> GitHub repository.
versionInfo_agentHash :: Lens' VersionInfo (Maybe Text)

-- | The version number of the Amazon ECS container agent.
versionInfo_agentVersion :: Lens' VersionInfo (Maybe Text)

-- | The Docker version running on the container instance.
versionInfo_dockerVersion :: Lens' VersionInfo (Maybe Text)
instance GHC.Generics.Generic Amazonka.ECS.Types.VersionInfo.VersionInfo
instance GHC.Show.Show Amazonka.ECS.Types.VersionInfo.VersionInfo
instance GHC.Read.Read Amazonka.ECS.Types.VersionInfo.VersionInfo
instance GHC.Classes.Eq Amazonka.ECS.Types.VersionInfo.VersionInfo
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.VersionInfo.VersionInfo
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.VersionInfo.VersionInfo
instance Control.DeepSeq.NFData Amazonka.ECS.Types.VersionInfo.VersionInfo
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.VersionInfo.VersionInfo


module Amazonka.ECS.Types.ContainerInstance

-- | An EC2 instance that is running the Amazon ECS agent and has been
--   registered with a cluster.
--   
--   <i>See:</i> <a>newContainerInstance</a> smart constructor.
data ContainerInstance
ContainerInstance' :: Maybe Text -> Maybe [Attachment] -> Maybe Int -> Maybe [Resource] -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe VersionInfo -> Maybe AgentUpdateStatus -> Maybe [Attribute] -> Maybe Integer -> Maybe Int -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe [Tag] -> Maybe [Resource] -> ContainerInstance

-- | The status of the container instance. The valid values are
--   <tt>REGISTERING</tt>, <tt>REGISTRATION_FAILED</tt>, <tt>ACTIVE</tt>,
--   <tt>INACTIVE</tt>, <tt>DEREGISTERING</tt>, or <tt>DRAINING</tt>.
--   
--   If your account has opted in to the <tt>awsvpcTrunking</tt> account
--   setting, then any newly registered container instance will transition
--   to a <tt>REGISTERING</tt> status while the trunk elastic network
--   interface is provisioned for the instance. If the registration fails,
--   the instance will transition to a <tt>REGISTRATION_FAILED</tt> status.
--   You can describe the container instance and see the reason for failure
--   in the <tt>statusReason</tt> parameter. Once the container instance is
--   terminated, the instance transitions to a <tt>DEREGISTERING</tt>
--   status while the trunk elastic network interface is deprovisioned. The
--   instance then transitions to an <tt>INACTIVE</tt> status.
--   
--   The <tt>ACTIVE</tt> status indicates that the container instance can
--   accept tasks. The <tt>DRAINING</tt> indicates that new tasks are not
--   placed on the container instance and any service tasks running on the
--   container instance are removed if possible. For more information, see
--   <a>Container Instance Draining</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
[$sel:status:ContainerInstance'] :: ContainerInstance -> Maybe Text

-- | The resources attached to a container instance, such as elastic
--   network interfaces.
[$sel:attachments:ContainerInstance'] :: ContainerInstance -> Maybe [Attachment]

-- | The number of tasks on the container instance that are in the
--   <tt>RUNNING</tt> status.
[$sel:runningTasksCount:ContainerInstance'] :: ContainerInstance -> Maybe Int

-- | For CPU and memory resource types, this parameter describes the
--   remaining CPU and memory that has not already been allocated to tasks
--   and is therefore available for new tasks. For port resource types,
--   this parameter describes the ports that were reserved by the Amazon
--   ECS container agent (at instance registration time) and any task
--   containers that have reserved port mappings on the host (with the
--   <tt>host</tt> or <tt>bridge</tt> network mode). Any port that is not
--   specified here is available for new tasks.
[$sel:remainingResources:ContainerInstance'] :: ContainerInstance -> Maybe [Resource]

-- | The ID of the container instance. For Amazon EC2 instances, this value
--   is the Amazon EC2 instance ID. For external instances, this value is
--   the Amazon Web Services Systems Manager managed instance ID.
[$sel:ec2InstanceId:ContainerInstance'] :: ContainerInstance -> Maybe Text

-- | The Amazon Resource Name (ARN) of the container instance. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the container instance, the Amazon Web Services account ID of the
--   container instance owner, the <tt>container-instance</tt> namespace,
--   and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
[$sel:containerInstanceArn:ContainerInstance'] :: ContainerInstance -> Maybe Text

-- | This parameter returns <tt>true</tt> if the agent is connected to
--   Amazon ECS. Registered instances with an agent that may be unhealthy
--   or stopped return <tt>false</tt>. Only instances connected to an agent
--   can accept placement requests.
[$sel:agentConnected:ContainerInstance'] :: ContainerInstance -> Maybe Bool

-- | The version information for the Amazon ECS container agent and Docker
--   daemon running on the container instance.
[$sel:versionInfo:ContainerInstance'] :: ContainerInstance -> Maybe VersionInfo

-- | The status of the most recent agent update. If an update has never
--   been requested, this value is <tt>NULL</tt>.
[$sel:agentUpdateStatus:ContainerInstance'] :: ContainerInstance -> Maybe AgentUpdateStatus

-- | The attributes set for the container instance, either by the Amazon
--   ECS container agent at instance registration or manually with the
--   PutAttributes operation.
[$sel:attributes:ContainerInstance'] :: ContainerInstance -> Maybe [Attribute]

-- | The version counter for the container instance. Every time a container
--   instance experiences a change that triggers a CloudWatch event, the
--   version counter is incremented. If you are replicating your Amazon ECS
--   container instance state with CloudWatch Events, you can compare the
--   version of a container instance reported by the Amazon ECS APIs with
--   the version reported in CloudWatch Events for the container instance
--   (inside the <tt>detail</tt> object) to verify that the version in your
--   event stream is current.
[$sel:version:ContainerInstance'] :: ContainerInstance -> Maybe Integer

-- | The number of tasks on the container instance that are in the
--   <tt>PENDING</tt> status.
[$sel:pendingTasksCount:ContainerInstance'] :: ContainerInstance -> Maybe Int

-- | The capacity provider associated with the container instance.
[$sel:capacityProviderName:ContainerInstance'] :: ContainerInstance -> Maybe Text

-- | The Unix timestamp for when the container instance was registered.
[$sel:registeredAt:ContainerInstance'] :: ContainerInstance -> Maybe POSIX

-- | The reason that the container instance reached its current status.
[$sel:statusReason:ContainerInstance'] :: ContainerInstance -> Maybe Text

-- | The metadata that you apply to the container instance to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:ContainerInstance'] :: ContainerInstance -> Maybe [Tag]

-- | For CPU and memory resource types, this parameter describes the amount
--   of each resource that was available on the container instance when the
--   container agent registered it with Amazon ECS. This value represents
--   the total amount of CPU and memory that can be allocated on this
--   container instance to tasks. For port resource types, this parameter
--   describes the ports that were reserved by the Amazon ECS container
--   agent when it registered the container instance with Amazon ECS.
[$sel:registeredResources:ContainerInstance'] :: ContainerInstance -> Maybe [Resource]

-- | Create a value of <a>ContainerInstance</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ContainerInstance'</a>, <a>containerInstance_status</a>
--   - The status of the container instance. The valid values are
--   <tt>REGISTERING</tt>, <tt>REGISTRATION_FAILED</tt>, <tt>ACTIVE</tt>,
--   <tt>INACTIVE</tt>, <tt>DEREGISTERING</tt>, or <tt>DRAINING</tt>.
--   
--   If your account has opted in to the <tt>awsvpcTrunking</tt> account
--   setting, then any newly registered container instance will transition
--   to a <tt>REGISTERING</tt> status while the trunk elastic network
--   interface is provisioned for the instance. If the registration fails,
--   the instance will transition to a <tt>REGISTRATION_FAILED</tt> status.
--   You can describe the container instance and see the reason for failure
--   in the <tt>statusReason</tt> parameter. Once the container instance is
--   terminated, the instance transitions to a <tt>DEREGISTERING</tt>
--   status while the trunk elastic network interface is deprovisioned. The
--   instance then transitions to an <tt>INACTIVE</tt> status.
--   
--   The <tt>ACTIVE</tt> status indicates that the container instance can
--   accept tasks. The <tt>DRAINING</tt> indicates that new tasks are not
--   placed on the container instance and any service tasks running on the
--   container instance are removed if possible. For more information, see
--   <a>Container Instance Draining</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:attachments:ContainerInstance'</a>,
--   <a>containerInstance_attachments</a> - The resources attached to a
--   container instance, such as elastic network interfaces.
--   
--   <a>$sel:runningTasksCount:ContainerInstance'</a>,
--   <a>containerInstance_runningTasksCount</a> - The number of tasks on
--   the container instance that are in the <tt>RUNNING</tt> status.
--   
--   <a>$sel:remainingResources:ContainerInstance'</a>,
--   <a>containerInstance_remainingResources</a> - For CPU and memory
--   resource types, this parameter describes the remaining CPU and memory
--   that has not already been allocated to tasks and is therefore
--   available for new tasks. For port resource types, this parameter
--   describes the ports that were reserved by the Amazon ECS container
--   agent (at instance registration time) and any task containers that
--   have reserved port mappings on the host (with the <tt>host</tt> or
--   <tt>bridge</tt> network mode). Any port that is not specified here is
--   available for new tasks.
--   
--   <a>$sel:ec2InstanceId:ContainerInstance'</a>,
--   <a>containerInstance_ec2InstanceId</a> - The ID of the container
--   instance. For Amazon EC2 instances, this value is the Amazon EC2
--   instance ID. For external instances, this value is the Amazon Web
--   Services Systems Manager managed instance ID.
--   
--   <a>$sel:containerInstanceArn:ContainerInstance'</a>,
--   <a>containerInstance_containerInstanceArn</a> - The Amazon Resource
--   Name (ARN) of the container instance. The ARN contains the
--   <tt>arn:aws:ecs</tt> namespace, followed by the Region of the
--   container instance, the Amazon Web Services account ID of the
--   container instance owner, the <tt>container-instance</tt> namespace,
--   and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
--   
--   <a>$sel:agentConnected:ContainerInstance'</a>,
--   <a>containerInstance_agentConnected</a> - This parameter returns
--   <tt>true</tt> if the agent is connected to Amazon ECS. Registered
--   instances with an agent that may be unhealthy or stopped return
--   <tt>false</tt>. Only instances connected to an agent can accept
--   placement requests.
--   
--   <a>$sel:versionInfo:ContainerInstance'</a>,
--   <a>containerInstance_versionInfo</a> - The version information for the
--   Amazon ECS container agent and Docker daemon running on the container
--   instance.
--   
--   <a>$sel:agentUpdateStatus:ContainerInstance'</a>,
--   <a>containerInstance_agentUpdateStatus</a> - The status of the most
--   recent agent update. If an update has never been requested, this value
--   is <tt>NULL</tt>.
--   
--   <a>$sel:attributes:ContainerInstance'</a>,
--   <a>containerInstance_attributes</a> - The attributes set for the
--   container instance, either by the Amazon ECS container agent at
--   instance registration or manually with the PutAttributes operation.
--   
--   <a>$sel:version:ContainerInstance'</a>,
--   <a>containerInstance_version</a> - The version counter for the
--   container instance. Every time a container instance experiences a
--   change that triggers a CloudWatch event, the version counter is
--   incremented. If you are replicating your Amazon ECS container instance
--   state with CloudWatch Events, you can compare the version of a
--   container instance reported by the Amazon ECS APIs with the version
--   reported in CloudWatch Events for the container instance (inside the
--   <tt>detail</tt> object) to verify that the version in your event
--   stream is current.
--   
--   <a>$sel:pendingTasksCount:ContainerInstance'</a>,
--   <a>containerInstance_pendingTasksCount</a> - The number of tasks on
--   the container instance that are in the <tt>PENDING</tt> status.
--   
--   <a>$sel:capacityProviderName:ContainerInstance'</a>,
--   <a>containerInstance_capacityProviderName</a> - The capacity provider
--   associated with the container instance.
--   
--   <a>$sel:registeredAt:ContainerInstance'</a>,
--   <a>containerInstance_registeredAt</a> - The Unix timestamp for when
--   the container instance was registered.
--   
--   <a>$sel:statusReason:ContainerInstance'</a>,
--   <a>containerInstance_statusReason</a> - The reason that the container
--   instance reached its current status.
--   
--   <a>$sel:tags:ContainerInstance'</a>, <a>containerInstance_tags</a> -
--   The metadata that you apply to the container instance to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:registeredResources:ContainerInstance'</a>,
--   <a>containerInstance_registeredResources</a> - For CPU and memory
--   resource types, this parameter describes the amount of each resource
--   that was available on the container instance when the container agent
--   registered it with Amazon ECS. This value represents the total amount
--   of CPU and memory that can be allocated on this container instance to
--   tasks. For port resource types, this parameter describes the ports
--   that were reserved by the Amazon ECS container agent when it
--   registered the container instance with Amazon ECS.
newContainerInstance :: ContainerInstance

-- | The status of the container instance. The valid values are
--   <tt>REGISTERING</tt>, <tt>REGISTRATION_FAILED</tt>, <tt>ACTIVE</tt>,
--   <tt>INACTIVE</tt>, <tt>DEREGISTERING</tt>, or <tt>DRAINING</tt>.
--   
--   If your account has opted in to the <tt>awsvpcTrunking</tt> account
--   setting, then any newly registered container instance will transition
--   to a <tt>REGISTERING</tt> status while the trunk elastic network
--   interface is provisioned for the instance. If the registration fails,
--   the instance will transition to a <tt>REGISTRATION_FAILED</tt> status.
--   You can describe the container instance and see the reason for failure
--   in the <tt>statusReason</tt> parameter. Once the container instance is
--   terminated, the instance transitions to a <tt>DEREGISTERING</tt>
--   status while the trunk elastic network interface is deprovisioned. The
--   instance then transitions to an <tt>INACTIVE</tt> status.
--   
--   The <tt>ACTIVE</tt> status indicates that the container instance can
--   accept tasks. The <tt>DRAINING</tt> indicates that new tasks are not
--   placed on the container instance and any service tasks running on the
--   container instance are removed if possible. For more information, see
--   <a>Container Instance Draining</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
containerInstance_status :: Lens' ContainerInstance (Maybe Text)

-- | The resources attached to a container instance, such as elastic
--   network interfaces.
containerInstance_attachments :: Lens' ContainerInstance (Maybe [Attachment])

-- | The number of tasks on the container instance that are in the
--   <tt>RUNNING</tt> status.
containerInstance_runningTasksCount :: Lens' ContainerInstance (Maybe Int)

-- | For CPU and memory resource types, this parameter describes the
--   remaining CPU and memory that has not already been allocated to tasks
--   and is therefore available for new tasks. For port resource types,
--   this parameter describes the ports that were reserved by the Amazon
--   ECS container agent (at instance registration time) and any task
--   containers that have reserved port mappings on the host (with the
--   <tt>host</tt> or <tt>bridge</tt> network mode). Any port that is not
--   specified here is available for new tasks.
containerInstance_remainingResources :: Lens' ContainerInstance (Maybe [Resource])

-- | The ID of the container instance. For Amazon EC2 instances, this value
--   is the Amazon EC2 instance ID. For external instances, this value is
--   the Amazon Web Services Systems Manager managed instance ID.
containerInstance_ec2InstanceId :: Lens' ContainerInstance (Maybe Text)

-- | The Amazon Resource Name (ARN) of the container instance. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the container instance, the Amazon Web Services account ID of the
--   container instance owner, the <tt>container-instance</tt> namespace,
--   and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
containerInstance_containerInstanceArn :: Lens' ContainerInstance (Maybe Text)

-- | This parameter returns <tt>true</tt> if the agent is connected to
--   Amazon ECS. Registered instances with an agent that may be unhealthy
--   or stopped return <tt>false</tt>. Only instances connected to an agent
--   can accept placement requests.
containerInstance_agentConnected :: Lens' ContainerInstance (Maybe Bool)

-- | The version information for the Amazon ECS container agent and Docker
--   daemon running on the container instance.
containerInstance_versionInfo :: Lens' ContainerInstance (Maybe VersionInfo)

-- | The status of the most recent agent update. If an update has never
--   been requested, this value is <tt>NULL</tt>.
containerInstance_agentUpdateStatus :: Lens' ContainerInstance (Maybe AgentUpdateStatus)

-- | The attributes set for the container instance, either by the Amazon
--   ECS container agent at instance registration or manually with the
--   PutAttributes operation.
containerInstance_attributes :: Lens' ContainerInstance (Maybe [Attribute])

-- | The version counter for the container instance. Every time a container
--   instance experiences a change that triggers a CloudWatch event, the
--   version counter is incremented. If you are replicating your Amazon ECS
--   container instance state with CloudWatch Events, you can compare the
--   version of a container instance reported by the Amazon ECS APIs with
--   the version reported in CloudWatch Events for the container instance
--   (inside the <tt>detail</tt> object) to verify that the version in your
--   event stream is current.
containerInstance_version :: Lens' ContainerInstance (Maybe Integer)

-- | The number of tasks on the container instance that are in the
--   <tt>PENDING</tt> status.
containerInstance_pendingTasksCount :: Lens' ContainerInstance (Maybe Int)

-- | The capacity provider associated with the container instance.
containerInstance_capacityProviderName :: Lens' ContainerInstance (Maybe Text)

-- | The Unix timestamp for when the container instance was registered.
containerInstance_registeredAt :: Lens' ContainerInstance (Maybe UTCTime)

-- | The reason that the container instance reached its current status.
containerInstance_statusReason :: Lens' ContainerInstance (Maybe Text)

-- | The metadata that you apply to the container instance to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
containerInstance_tags :: Lens' ContainerInstance (Maybe [Tag])

-- | For CPU and memory resource types, this parameter describes the amount
--   of each resource that was available on the container instance when the
--   container agent registered it with Amazon ECS. This value represents
--   the total amount of CPU and memory that can be allocated on this
--   container instance to tasks. For port resource types, this parameter
--   describes the ports that were reserved by the Amazon ECS container
--   agent when it registered the container instance with Amazon ECS.
containerInstance_registeredResources :: Lens' ContainerInstance (Maybe [Resource])
instance GHC.Generics.Generic Amazonka.ECS.Types.ContainerInstance.ContainerInstance
instance GHC.Show.Show Amazonka.ECS.Types.ContainerInstance.ContainerInstance
instance GHC.Read.Read Amazonka.ECS.Types.ContainerInstance.ContainerInstance
instance GHC.Classes.Eq Amazonka.ECS.Types.ContainerInstance.ContainerInstance
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ContainerInstance.ContainerInstance
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ContainerInstance.ContainerInstance
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ContainerInstance.ContainerInstance


module Amazonka.ECS.Types.Volume

-- | A data volume used in a task definition. For tasks that use the Amazon
--   Elastic File System (Amazon EFS), specify an
--   <tt>efsVolumeConfiguration</tt>. For Windows tasks that use Amazon FSx
--   for Windows File Server file system, specify a
--   <tt>fsxWindowsFileServerVolumeConfiguration</tt>. For tasks that use a
--   Docker volume, specify a <tt>DockerVolumeConfiguration</tt>. For tasks
--   that use a bind mount host volume, specify a <tt>host</tt> and
--   optional <tt>sourcePath</tt>. For more information, see <a>Using Data
--   Volumes in Tasks</a>.
--   
--   <i>See:</i> <a>newVolume</a> smart constructor.
data Volume
Volume' :: Maybe DockerVolumeConfiguration -> Maybe FSxWindowsFileServerVolumeConfiguration -> Maybe Text -> Maybe EFSVolumeConfiguration -> Maybe HostVolumeProperties -> Volume

-- | This parameter is specified when you are using Docker volumes.
--   
--   Windows containers only support the use of the <tt>local</tt> driver.
--   To use bind mounts, specify the <tt>host</tt> parameter instead.
--   
--   Docker volumes are not supported by tasks run on Fargate.
[$sel:dockerVolumeConfiguration:Volume'] :: Volume -> Maybe DockerVolumeConfiguration

-- | This parameter is specified when you are using Amazon FSx for Windows
--   File Server file system for task storage.
[$sel:fsxWindowsFileServerVolumeConfiguration:Volume'] :: Volume -> Maybe FSxWindowsFileServerVolumeConfiguration

-- | The name of the volume. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. This name is referenced
--   in the <tt>sourceVolume</tt> parameter of container definition
--   <tt>mountPoints</tt>.
[$sel:name:Volume'] :: Volume -> Maybe Text

-- | This parameter is specified when you are using an Amazon Elastic File
--   System file system for task storage.
[$sel:efsVolumeConfiguration:Volume'] :: Volume -> Maybe EFSVolumeConfiguration

-- | This parameter is specified when you are using bind mount host
--   volumes. The contents of the <tt>host</tt> parameter determine whether
--   your bind mount host volume persists on the host container instance
--   and where it is stored. If the <tt>host</tt> parameter is empty, then
--   the Docker daemon assigns a host path for your data volume. However,
--   the data is not guaranteed to persist after the containers associated
--   with it stop running.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives. For
--   example, you can mount <tt>C:\my\path:C:\my\path</tt> and
--   <tt>D:\:D:\</tt>, but not <tt>D:\my\path:C:\my\path</tt> or
--   <tt>D:\:C:\my\path</tt>.
[$sel:host:Volume'] :: Volume -> Maybe HostVolumeProperties

-- | Create a value of <a>Volume</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dockerVolumeConfiguration:Volume'</a>,
--   <a>volume_dockerVolumeConfiguration</a> - This parameter is specified
--   when you are using Docker volumes.
--   
--   Windows containers only support the use of the <tt>local</tt> driver.
--   To use bind mounts, specify the <tt>host</tt> parameter instead.
--   
--   Docker volumes are not supported by tasks run on Fargate.
--   
--   <a>$sel:fsxWindowsFileServerVolumeConfiguration:Volume'</a>,
--   <a>volume_fsxWindowsFileServerVolumeConfiguration</a> - This parameter
--   is specified when you are using Amazon FSx for Windows File Server
--   file system for task storage.
--   
--   <a>$sel:name:Volume'</a>, <a>volume_name</a> - The name of the volume.
--   Up to 255 letters (uppercase and lowercase), numbers, underscores, and
--   hyphens are allowed. This name is referenced in the
--   <tt>sourceVolume</tt> parameter of container definition
--   <tt>mountPoints</tt>.
--   
--   <a>$sel:efsVolumeConfiguration:Volume'</a>,
--   <a>volume_efsVolumeConfiguration</a> - This parameter is specified
--   when you are using an Amazon Elastic File System file system for task
--   storage.
--   
--   <a>$sel:host:Volume'</a>, <a>volume_host</a> - This parameter is
--   specified when you are using bind mount host volumes. The contents of
--   the <tt>host</tt> parameter determine whether your bind mount host
--   volume persists on the host container instance and where it is stored.
--   If the <tt>host</tt> parameter is empty, then the Docker daemon
--   assigns a host path for your data volume. However, the data is not
--   guaranteed to persist after the containers associated with it stop
--   running.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives. For
--   example, you can mount <tt>C:\my\path:C:\my\path</tt> and
--   <tt>D:\:D:\</tt>, but not <tt>D:\my\path:C:\my\path</tt> or
--   <tt>D:\:C:\my\path</tt>.
newVolume :: Volume

-- | This parameter is specified when you are using Docker volumes.
--   
--   Windows containers only support the use of the <tt>local</tt> driver.
--   To use bind mounts, specify the <tt>host</tt> parameter instead.
--   
--   Docker volumes are not supported by tasks run on Fargate.
volume_dockerVolumeConfiguration :: Lens' Volume (Maybe DockerVolumeConfiguration)

-- | This parameter is specified when you are using Amazon FSx for Windows
--   File Server file system for task storage.
volume_fsxWindowsFileServerVolumeConfiguration :: Lens' Volume (Maybe FSxWindowsFileServerVolumeConfiguration)

-- | The name of the volume. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. This name is referenced
--   in the <tt>sourceVolume</tt> parameter of container definition
--   <tt>mountPoints</tt>.
volume_name :: Lens' Volume (Maybe Text)

-- | This parameter is specified when you are using an Amazon Elastic File
--   System file system for task storage.
volume_efsVolumeConfiguration :: Lens' Volume (Maybe EFSVolumeConfiguration)

-- | This parameter is specified when you are using bind mount host
--   volumes. The contents of the <tt>host</tt> parameter determine whether
--   your bind mount host volume persists on the host container instance
--   and where it is stored. If the <tt>host</tt> parameter is empty, then
--   the Docker daemon assigns a host path for your data volume. However,
--   the data is not guaranteed to persist after the containers associated
--   with it stop running.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives. For
--   example, you can mount <tt>C:\my\path:C:\my\path</tt> and
--   <tt>D:\:D:\</tt>, but not <tt>D:\my\path:C:\my\path</tt> or
--   <tt>D:\:C:\my\path</tt>.
volume_host :: Lens' Volume (Maybe HostVolumeProperties)
instance GHC.Generics.Generic Amazonka.ECS.Types.Volume.Volume
instance GHC.Show.Show Amazonka.ECS.Types.Volume.Volume
instance GHC.Read.Read Amazonka.ECS.Types.Volume.Volume
instance GHC.Classes.Eq Amazonka.ECS.Types.Volume.Volume
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.Volume.Volume
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.Volume.Volume
instance Control.DeepSeq.NFData Amazonka.ECS.Types.Volume.Volume
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.Volume.Volume


module Amazonka.ECS.Types.VolumeFrom

-- | Details on a data volume from another container in the same task
--   definition.
--   
--   <i>See:</i> <a>newVolumeFrom</a> smart constructor.
data VolumeFrom
VolumeFrom' :: Maybe Text -> Maybe Bool -> VolumeFrom

-- | The name of another container within the same task definition from
--   which to mount volumes.
[$sel:sourceContainer:VolumeFrom'] :: VolumeFrom -> Maybe Text

-- | If this value is <tt>true</tt>, the container has read-only access to
--   the volume. If this value is <tt>false</tt>, then the container can
--   write to the volume. The default value is <tt>false</tt>.
[$sel:readOnly:VolumeFrom'] :: VolumeFrom -> Maybe Bool

-- | Create a value of <a>VolumeFrom</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourceContainer:VolumeFrom'</a>,
--   <a>volumeFrom_sourceContainer</a> - The name of another container
--   within the same task definition from which to mount volumes.
--   
--   <a>$sel:readOnly:VolumeFrom'</a>, <a>volumeFrom_readOnly</a> - If this
--   value is <tt>true</tt>, the container has read-only access to the
--   volume. If this value is <tt>false</tt>, then the container can write
--   to the volume. The default value is <tt>false</tt>.
newVolumeFrom :: VolumeFrom

-- | The name of another container within the same task definition from
--   which to mount volumes.
volumeFrom_sourceContainer :: Lens' VolumeFrom (Maybe Text)

-- | If this value is <tt>true</tt>, the container has read-only access to
--   the volume. If this value is <tt>false</tt>, then the container can
--   write to the volume. The default value is <tt>false</tt>.
volumeFrom_readOnly :: Lens' VolumeFrom (Maybe Bool)
instance GHC.Generics.Generic Amazonka.ECS.Types.VolumeFrom.VolumeFrom
instance GHC.Show.Show Amazonka.ECS.Types.VolumeFrom.VolumeFrom
instance GHC.Read.Read Amazonka.ECS.Types.VolumeFrom.VolumeFrom
instance GHC.Classes.Eq Amazonka.ECS.Types.VolumeFrom.VolumeFrom
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.VolumeFrom.VolumeFrom
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.VolumeFrom.VolumeFrom
instance Control.DeepSeq.NFData Amazonka.ECS.Types.VolumeFrom.VolumeFrom
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.VolumeFrom.VolumeFrom


module Amazonka.ECS.Types.ContainerDefinition

-- | Container definitions are used in task definitions to describe the
--   different containers that are launched as part of a task.
--   
--   <i>See:</i> <a>newContainerDefinition</a> smart constructor.
data ContainerDefinition
ContainerDefinition' :: Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe RepositoryCredentials -> Maybe [Text] -> Maybe HealthCheck -> Maybe Bool -> Maybe [Secret] -> Maybe [VolumeFrom] -> Maybe [KeyValuePair] -> Maybe [EnvironmentFile] -> Maybe [Text] -> Maybe Text -> Maybe [Ulimit] -> Maybe Int -> Maybe Bool -> Maybe [PortMapping] -> Maybe [ResourceRequirement] -> Maybe (HashMap Text Text) -> Maybe [HostEntry] -> Maybe Int -> Maybe [SystemControl] -> Maybe Text -> Maybe FirelensConfiguration -> Maybe [Text] -> Maybe LogConfiguration -> Maybe LinuxParameters -> Maybe Bool -> Maybe [ContainerDependency] -> Maybe Text -> Maybe [Text] -> Maybe [MountPoint] -> Maybe Bool -> Maybe Int -> Maybe [Text] -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> ContainerDefinition

-- | The image used to start a container. This string is passed directly to
--   the Docker daemon. Images in the Docker Hub registry are available by
--   default. Other repositories are specified with either <tt>
--   repository-url/image:tag </tt> or <tt> repository-url/image@digest
--   </tt>. Up to 255 letters (uppercase and lowercase), numbers, hyphens,
--   underscores, colons, periods, forward slashes, and number signs are
--   allowed. This parameter maps to <tt>Image</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>IMAGE</tt> parameter of <a>docker run</a>.
--   
--   <ul>
--   <li>When a new task starts, the Amazon ECS container agent pulls the
--   latest version of the specified image and tag for the container to
--   use. However, subsequent updates to a repository image are not
--   propagated to already running tasks.</li>
--   <li>Images in Amazon ECR repositories can be specified by either using
--   the full <tt>registry/repository:tag</tt> or
--   <tt>registry/repository@digest</tt>. For example,
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;:latest</tt>
--   or
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE</tt>.</li>
--   <li>Images in official repositories on Docker Hub use a single name
--   (for example, <tt>ubuntu</tt> or <tt>mongo</tt>).</li>
--   <li>Images in other repositories on Docker Hub are qualified with an
--   organization name (for example,
--   <tt>amazon/amazon-ecs-agent</tt>).</li>
--   <li>Images in other online repositories are qualified further by a
--   domain name (for example, <tt>quay.io/assemblyline/ubuntu</tt>).</li>
--   </ul>
[$sel:image:ContainerDefinition'] :: ContainerDefinition -> Maybe Text

-- | The command that is passed to the container. This parameter maps to
--   <tt>Cmd</tt> in the <a>Create a container</a> section of the <a>Docker
--   Remote API</a> and the <tt>COMMAND</tt> parameter to <a>docker
--   run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#cmd</a>. If there
--   are multiple arguments, each argument should be a separated string in
--   the array.
[$sel:command:ContainerDefinition'] :: ContainerDefinition -> Maybe [Text]

-- | The hostname to use for your container. This parameter maps to
--   <tt>Hostname</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--hostname</tt> option to
--   <a>docker run</a>.
--   
--   The <tt>hostname</tt> parameter is not supported if you are using the
--   <tt>awsvpc</tt> network mode.
[$sel:hostname:ContainerDefinition'] :: ContainerDefinition -> Maybe Text

-- | The private repository authentication credentials to use.
[$sel:repositoryCredentials:ContainerDefinition'] :: ContainerDefinition -> Maybe RepositoryCredentials

-- | A list of strings to provide custom labels for SELinux and AppArmor
--   multi-level security systems. This field is not valid for containers
--   in tasks using the Fargate launch type.
--   
--   With Windows containers, this parameter can be used to reference a
--   credential spec file when configuring a container for Active Directory
--   authentication. For more information, see <a>Using gMSAs for Windows
--   Containers</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   This parameter maps to <tt>SecurityOpt</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--security-opt</tt> option to <a>docker run</a>.
--   
--   The Amazon ECS container agent running on a container instance must
--   register with the <tt>ECS_SELINUX_CAPABLE=true</tt> or
--   <tt>ECS_APPARMOR_CAPABLE=true</tt> environment variables before
--   containers placed on that instance can use these security options. For
--   more information, see <a>Amazon ECS Container Agent Configuration</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For more information about valid values, see <a>Docker Run Security
--   Configuration</a>.
--   
--   Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value"
--   | "credentialspec:CredentialSpecFilePath"
[$sel:dockerSecurityOptions:ContainerDefinition'] :: ContainerDefinition -> Maybe [Text]

-- | The container health check command and associated configuration
--   parameters for the container. This parameter maps to
--   <tt>HealthCheck</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>HEALTHCHECK</tt> parameter of
--   <a>docker run</a>.
[$sel:healthCheck:ContainerDefinition'] :: ContainerDefinition -> Maybe HealthCheck

-- | When this parameter is true, networking is disabled within the
--   container. This parameter maps to <tt>NetworkDisabled</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
--   
--   This parameter is not supported for Windows containers.
[$sel:disableNetworking:ContainerDefinition'] :: ContainerDefinition -> Maybe Bool

-- | The secrets to pass to the container. For more information, see
--   <a>Specifying Sensitive Data</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
[$sel:secrets:ContainerDefinition'] :: ContainerDefinition -> Maybe [Secret]

-- | Data volumes to mount from another container. This parameter maps to
--   <tt>VolumesFrom</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--volumes-from</tt> option to
--   <a>docker run</a>.
[$sel:volumesFrom:ContainerDefinition'] :: ContainerDefinition -> Maybe [VolumeFrom]

-- | The environment variables to pass to a container. This parameter maps
--   to <tt>Env</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--env</tt> option to <a>docker
--   run</a>.
--   
--   We do not recommend using plaintext environment variables for
--   sensitive information, such as credential data.
[$sel:environment:ContainerDefinition'] :: ContainerDefinition -> Maybe [KeyValuePair]

-- | A list of files containing the environment variables to pass to a
--   container. This parameter maps to the <tt>--env-file</tt> option to
--   <a>docker run</a>.
--   
--   You can specify up to ten environment files. The file must have a
--   <tt>.env</tt> file extension. Each line in an environment file should
--   contain an environment variable in <tt>VARIABLE=VALUE</tt> format.
--   Lines beginning with <tt>#</tt> are treated as comments and are
--   ignored. For more information on the environment variable file syntax,
--   see <a>Declare default environment variables in file</a>.
--   
--   If there are environment variables specified using the
--   <tt>environment</tt> parameter in a container definition, they take
--   precedence over the variables contained within an environment file. If
--   multiple environment files are specified that contain the same
--   variable, they are processed from the top down. It is recommended to
--   use unique variable names. For more information, see <a>Specifying
--   Environment Variables</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
[$sel:environmentFiles:ContainerDefinition'] :: ContainerDefinition -> Maybe [EnvironmentFile]

-- | Early versions of the Amazon ECS container agent do not properly
--   handle <tt>entryPoint</tt> parameters. If you have problems using
--   <tt>entryPoint</tt>, update your container agent or enter your
--   commands and arguments as <tt>command</tt> array items instead.
--   
--   The entry point that is passed to the container. This parameter maps
--   to <tt>Entrypoint</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--entrypoint</tt> option to
--   <a>docker run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#entrypoint</a>.
[$sel:entryPoint:ContainerDefinition'] :: ContainerDefinition -> Maybe [Text]

-- | The working directory in which to run commands inside the container.
--   This parameter maps to <tt>WorkingDir</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--workdir</tt> option to <a>docker run</a>.
[$sel:workingDirectory:ContainerDefinition'] :: ContainerDefinition -> Maybe Text

-- | A list of <tt>ulimits</tt> to set in the container. If a ulimit value
--   is specified in a task definition, it will override the default values
--   set by Docker. This parameter maps to <tt>Ulimits</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--ulimit</tt> option to <a>docker run</a>. Valid naming values
--   are displayed in the Ulimit data type.
--   
--   Amazon ECS tasks hosted on Fargate use the default resource limit
--   values set by the operating system with the exception of the
--   <tt>nofile</tt> resource limit parameter which Fargate overrides. The
--   <tt>nofile</tt> resource limit sets a restriction on the number of
--   open files that a container can use. The default <tt>nofile</tt> soft
--   limit is <tt>1024</tt> and hard limit is <tt>4096</tt>.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   This parameter is not supported for Windows containers.
[$sel:ulimits:ContainerDefinition'] :: ContainerDefinition -> Maybe [Ulimit]

-- | Time duration (in seconds) to wait before the container is forcefully
--   killed if it doesn't exit normally on its own.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version 1.3.0 or later. The max stop timeout value is 120
--   seconds and if the parameter is not specified, the default value of 30
--   seconds is used.
--   
--   For tasks using the EC2 launch type, if the <tt>stopTimeout</tt>
--   parameter is not specified, the value set for the Amazon ECS container
--   agent configuration variable <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> is
--   used by default. If neither the <tt>stopTimeout</tt> parameter or the
--   <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> agent configuration variable are
--   set, then the default values of 30 seconds for Linux containers and 30
--   seconds on Windows containers are used. Your container instances
--   require at least version 1.26.0 of the container agent to enable a
--   container stop timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:stopTimeout:ContainerDefinition'] :: ContainerDefinition -> Maybe Int

-- | When this parameter is true, the container is given elevated
--   privileges on the host container instance (similar to the
--   <tt>root</tt> user). This parameter maps to <tt>Privileged</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--privileged</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
[$sel:privileged:ContainerDefinition'] :: ContainerDefinition -> Maybe Bool

-- | The list of port mappings for the container. Port mappings allow
--   containers to access ports on the host container instance to send or
--   receive traffic.
--   
--   For task definitions that use the <tt>awsvpc</tt> network mode, you
--   should only specify the <tt>containerPort</tt>. The <tt>hostPort</tt>
--   can be left blank or it must be the same value as the
--   <tt>containerPort</tt>.
--   
--   Port mappings on Windows use the <tt>NetNAT</tt> gateway address
--   rather than <tt>localhost</tt>. There is no loopback for port mappings
--   on Windows, so you cannot access a container's mapped port from the
--   host itself.
--   
--   This parameter maps to <tt>PortBindings</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--publish</tt> option to <a>docker run</a>. If the network mode of
--   a task definition is set to <tt>none</tt>, then you can't specify port
--   mappings. If the network mode of a task definition is set to
--   <tt>host</tt>, then host ports must either be undefined or they must
--   match the container port in the port mapping.
--   
--   After a task reaches the <tt>RUNNING</tt> status, manual and automatic
--   host and container port assignments are visible in the <b>Network
--   Bindings</b> section of a container description for a selected task in
--   the Amazon ECS console. The assignments are also visible in the
--   <tt>networkBindings</tt> section DescribeTasks responses.
[$sel:portMappings:ContainerDefinition'] :: ContainerDefinition -> Maybe [PortMapping]

-- | The type and amount of a resource to assign to a container. The only
--   supported resource is a GPU.
[$sel:resourceRequirements:ContainerDefinition'] :: ContainerDefinition -> Maybe [ResourceRequirement]

-- | A key/value map of labels to add to the container. This parameter maps
--   to <tt>Labels</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--label</tt> option to <a>docker
--   run</a>. This parameter requires version 1.18 of the Docker Remote API
--   or greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
[$sel:dockerLabels:ContainerDefinition'] :: ContainerDefinition -> Maybe (HashMap Text Text)

-- | A list of hostnames and IP address mappings to append to the
--   <tt>/etc/hosts</tt> file on the container. This parameter maps to
--   <tt>ExtraHosts</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--add-host</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks that
--   use the <tt>awsvpc</tt> network mode.
[$sel:extraHosts:ContainerDefinition'] :: ContainerDefinition -> Maybe [HostEntry]

-- | The amount (in MiB) of memory to present to the container. If your
--   container attempts to exceed the memory specified here, the container
--   is killed. The total amount of memory reserved for all containers
--   within a task must be lower than the task <tt>memory</tt> value, if
--   one is specified. This parameter maps to <tt>Memory</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--memory</tt> option to <a>docker run</a>.
--   
--   If using the Fargate launch type, this parameter is optional.
--   
--   If using the EC2 launch type, you must specify either a task-level
--   memory value or a container-level memory value. If you specify both a
--   container-level <tt>memory</tt> and <tt>memoryReservation</tt> value,
--   <tt>memory</tt> must be greater than <tt>memoryReservation</tt>. If
--   you specify <tt>memoryReservation</tt>, then that value is subtracted
--   from the available memory resources for the container instance on
--   which the container is placed. Otherwise, the value of <tt>memory</tt>
--   is used.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
[$sel:memory:ContainerDefinition'] :: ContainerDefinition -> Maybe Int

-- | A list of namespaced kernel parameters to set in the container. This
--   parameter maps to <tt>Sysctls</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--sysctl</tt>
--   option to <a>docker run</a>.
--   
--   It is not recommended that you specify network-related
--   <tt>systemControls</tt> parameters for multiple containers in a single
--   task that also uses either the <tt>awsvpc</tt> or <tt>host</tt>
--   network modes. For tasks that use the <tt>awsvpc</tt> network mode,
--   the container that is started last determines which
--   <tt>systemControls</tt> parameters take effect. For tasks that use the
--   <tt>host</tt> network mode, it changes the container instance's
--   namespaced kernel parameters as well as the containers.
[$sel:systemControls:ContainerDefinition'] :: ContainerDefinition -> Maybe [SystemControl]

-- | The user to use inside the container. This parameter maps to
--   <tt>User</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--user</tt> option to <a>docker
--   run</a>.
--   
--   When running tasks using the <tt>host</tt> network mode, you should
--   not run containers using the root user (UID 0). It is considered best
--   practice to use a non-root user.
--   
--   You can specify the <tt>user</tt> using the following formats. If
--   specifying a UID or GID, you must specify it as a positive integer.
--   
--   <ul>
--   <li><pre>user</pre></li>
--   <li><pre>user:group</pre></li>
--   <li><pre>uid</pre></li>
--   <li><pre>uid:gid</pre></li>
--   <li><pre>user:gid</pre></li>
--   <li><pre>uid:group</pre></li>
--   </ul>
--   
--   This parameter is not supported for Windows containers.
[$sel:user:ContainerDefinition'] :: ContainerDefinition -> Maybe Text

-- | The FireLens configuration for the container. This is used to specify
--   and configure a log router for container logs. For more information,
--   see <a>Custom Log Routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
[$sel:firelensConfiguration:ContainerDefinition'] :: ContainerDefinition -> Maybe FirelensConfiguration

-- | A list of DNS search domains that are presented to the container. This
--   parameter maps to <tt>DnsSearch</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--dns-search</tt>
--   option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
[$sel:dnsSearchDomains:ContainerDefinition'] :: ContainerDefinition -> Maybe [Text]

-- | The log configuration specification for the container.
--   
--   This parameter maps to <tt>LogConfig</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--log-driver</tt> option to <a>docker run</a>. By default,
--   containers use the same logging driver that the Docker daemon uses.
--   However the container may use a different logging driver than the
--   Docker daemon by specifying a log driver with this parameter in the
--   container definition. To use a different logging driver for a
--   container, the log system must be configured properly on the container
--   instance (or on a different log server for remote logging options).
--   For more information on the options for different supported log
--   drivers, see <a>Configure logging drivers</a> in the Docker
--   documentation.
--   
--   Amazon ECS currently supports a subset of the logging drivers
--   available to the Docker daemon (shown in the LogConfiguration data
--   type). Additional log drivers may be available in future releases of
--   the Amazon ECS container agent.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   The Amazon ECS container agent running on a container instance must
--   register the logging drivers available on that instance with the
--   <tt>ECS_AVAILABLE_LOGGING_DRIVERS</tt> environment variable before
--   containers placed on that instance can use these log configuration
--   options. For more information, see <a>Amazon ECS Container Agent
--   Configuration</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:logConfiguration:ContainerDefinition'] :: ContainerDefinition -> Maybe LogConfiguration

-- | Linux-specific modifications that are applied to the container, such
--   as Linux kernel capabilities. For more information see
--   KernelCapabilities.
--   
--   This parameter is not supported for Windows containers.
[$sel:linuxParameters:ContainerDefinition'] :: ContainerDefinition -> Maybe LinuxParameters

-- | When this parameter is <tt>true</tt>, a TTY is allocated. This
--   parameter maps to <tt>Tty</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--tty</tt> option
--   to <a>docker run</a>.
[$sel:pseudoTerminal:ContainerDefinition'] :: ContainerDefinition -> Maybe Bool

-- | The dependencies defined for container startup and shutdown. A
--   container can contain multiple dependencies. When a dependency is
--   defined for container startup, for container shutdown it is reversed.
--   
--   For tasks using the EC2 launch type, the container instances require
--   at least version 1.26.0 of the container agent to enable container
--   dependencies. However, we recommend using the latest container agent
--   version. For information about checking your agent version and
--   updating to the latest version, see <a>Updating the Amazon ECS
--   Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version <tt>1.3.0</tt> or later.
[$sel:dependsOn:ContainerDefinition'] :: ContainerDefinition -> Maybe [ContainerDependency]

-- | The name of a container. If you are linking multiple containers
--   together in a task definition, the <tt>name</tt> of one container can
--   be entered in the <tt>links</tt> of another container to connect the
--   containers. Up to 255 letters (uppercase and lowercase), numbers,
--   underscores, and hyphens are allowed. This parameter maps to
--   <tt>name</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--name</tt> option to <a>docker
--   run</a>.
[$sel:name:ContainerDefinition'] :: ContainerDefinition -> Maybe Text

-- | A list of DNS servers that are presented to the container. This
--   parameter maps to <tt>Dns</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--dns</tt> option
--   to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
[$sel:dnsServers:ContainerDefinition'] :: ContainerDefinition -> Maybe [Text]

-- | The mount points for data volumes in your container.
--   
--   This parameter maps to <tt>Volumes</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--volume</tt> option to <a>docker run</a>.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives.
[$sel:mountPoints:ContainerDefinition'] :: ContainerDefinition -> Maybe [MountPoint]

-- | When this parameter is <tt>true</tt>, this allows you to deploy
--   containerized applications that require <tt>stdin</tt> or a
--   <tt>tty</tt> to be allocated. This parameter maps to
--   <tt>OpenStdin</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--interactive</tt> option to
--   <a>docker run</a>.
[$sel:interactive:ContainerDefinition'] :: ContainerDefinition -> Maybe Bool

-- | Time duration (in seconds) to wait before giving up on resolving
--   dependencies for a container. For example, you specify two containers
--   in a task definition with containerA having a dependency on containerB
--   reaching a <tt>COMPLETE</tt>, <tt>SUCCESS</tt>, or <tt>HEALTHY</tt>
--   status. If a <tt>startTimeout</tt> value is specified for containerB
--   and it does not reach the desired status within that time then
--   containerA will give up and not start. This results in the task
--   transitioning to a <tt>STOPPED</tt> state.
--   
--   When the <tt>ECS_CONTAINER_START_TIMEOUT</tt> container agent
--   configuration variable is used, it is enforced indendently from this
--   start timeout value.
--   
--   For tasks using the Fargate launch type, this parameter requires that
--   the task or service uses platform version 1.3.0 or later.
--   
--   For tasks using the EC2 launch type, your container instances require
--   at least version <tt>1.26.0</tt> of the container agent to enable a
--   container start timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version <tt>1.26.0-1</tt> of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:startTimeout:ContainerDefinition'] :: ContainerDefinition -> Maybe Int

-- | The <tt>links</tt> parameter allows containers to communicate with
--   each other without the need for port mappings. This parameter is only
--   supported if the network mode of a task definition is <tt>bridge</tt>.
--   The <tt>name:internalName</tt> construct is analogous to
--   <tt>name:alias</tt> in Docker links. Up to 255 letters (uppercase and
--   lowercase), numbers, underscores, and hyphens are allowed. For more
--   information about linking Docker containers, go to <a>Legacy container
--   links</a> in the Docker documentation. This parameter maps to
--   <tt>Links</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--link</tt> option to <a>docker
--   run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   Containers that are collocated on a single container instance may be
--   able to communicate with each other without requiring links or host
--   port mappings. Network isolation is achieved on the container instance
--   using security groups and VPC settings.
[$sel:links:ContainerDefinition'] :: ContainerDefinition -> Maybe [Text]

-- | When this parameter is true, the container is given read-only access
--   to its root file system. This parameter maps to
--   <tt>ReadonlyRootfs</tt> in the <a>Create a container</a> section of
--   the <a>Docker Remote API</a> and the <tt>--read-only</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
[$sel:readonlyRootFilesystem:ContainerDefinition'] :: ContainerDefinition -> Maybe Bool

-- | If the <tt>essential</tt> parameter of a container is marked as
--   <tt>true</tt>, and that container fails or stops for any reason, all
--   other containers that are part of the task are stopped. If the
--   <tt>essential</tt> parameter of a container is marked as
--   <tt>false</tt>, then its failure does not affect the rest of the
--   containers in a task. If this parameter is omitted, a container is
--   assumed to be essential.
--   
--   All tasks must have at least one essential container. If you have an
--   application that is composed of multiple containers, you should group
--   containers that are used for a common purpose into components, and
--   separate the different components into multiple task definitions. For
--   more information, see <a>Application Architecture</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:essential:ContainerDefinition'] :: ContainerDefinition -> Maybe Bool

-- | The number of <tt>cpu</tt> units reserved for the container. This
--   parameter maps to <tt>CpuShares</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--cpu-shares</tt>
--   option to <a>docker run</a>.
--   
--   This field is optional for tasks using the Fargate launch type, and
--   the only requirement is that the total amount of CPU reserved for all
--   containers within a task be lower than the task-level <tt>cpu</tt>
--   value.
--   
--   You can determine the number of CPU units that are available per EC2
--   instance type by multiplying the vCPUs listed for that instance type
--   on the <a>Amazon EC2 Instances</a> detail page by 1,024.
--   
--   Linux containers share unallocated CPU units with other containers on
--   the container instance with the same ratio as their allocated amount.
--   For example, if you run a single-container task on a single-core
--   instance type with 512 CPU units specified for that container, and
--   that is the only task running on the container instance, that
--   container could use the full 1,024 CPU unit share at any given time.
--   However, if you launched another copy of the same task on that
--   container instance, each task would be guaranteed a minimum of 512 CPU
--   units when needed, and each container could float to higher CPU usage
--   if the other container was not using it, but if both tasks were 100%
--   active all of the time, they would be limited to 512 CPU units.
--   
--   On Linux container instances, the Docker daemon on the container
--   instance uses the CPU value to calculate the relative CPU share ratios
--   for running containers. For more information, see <a>CPU share
--   constraint</a> in the Docker documentation. The minimum valid CPU
--   share value that the Linux kernel allows is 2. However, the CPU
--   parameter is not required, and you can use CPU values below 2 in your
--   container definitions. For CPU values below 2 (including null), the
--   behavior varies based on your Amazon ECS container agent version:
--   
--   <ul>
--   <li><b>Agent versions less than or equal to 1.1.0:</b> Null and zero
--   CPU values are passed to Docker as 0, which Docker then converts to
--   1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the
--   Linux kernel converts to two CPU shares.</li>
--   <li><b>Agent versions greater than or equal to 1.2.0:</b> Null, zero,
--   and CPU values of 1 are passed to Docker as 2.</li>
--   </ul>
--   
--   On Windows container instances, the CPU limit is enforced as an
--   absolute limit, or a quota. Windows containers only have access to the
--   specified amount of CPU that is described in the task definition. A
--   null or zero CPU value is passed to Docker as <tt>0</tt>, which
--   Windows interprets as 1% of one CPU.
[$sel:cpu:ContainerDefinition'] :: ContainerDefinition -> Maybe Int

-- | The soft limit (in MiB) of memory to reserve for the container. When
--   system memory is under heavy contention, Docker attempts to keep the
--   container memory to this soft limit. However, your container can
--   consume more memory when it needs to, up to either the hard limit
--   specified with the <tt>memory</tt> parameter (if applicable), or all
--   of the available memory on the container instance, whichever comes
--   first. This parameter maps to <tt>MemoryReservation</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--memory-reservation</tt> option to <a>docker run</a>.
--   
--   If a task-level memory value is not specified, you must specify a
--   non-zero integer for one or both of <tt>memory</tt> or
--   <tt>memoryReservation</tt> in a container definition. If you specify
--   both, <tt>memory</tt> must be greater than <tt>memoryReservation</tt>.
--   If you specify <tt>memoryReservation</tt>, then that value is
--   subtracted from the available memory resources for the container
--   instance on which the container is placed. Otherwise, the value of
--   <tt>memory</tt> is used.
--   
--   For example, if your container normally uses 128 MiB of memory, but
--   occasionally bursts to 256 MiB of memory for short periods of time,
--   you can set a <tt>memoryReservation</tt> of 128 MiB, and a
--   <tt>memory</tt> hard limit of 300 MiB. This configuration would allow
--   the container to only reserve 128 MiB of memory from the remaining
--   resources on the container instance, but also allow the container to
--   consume more memory resources when needed.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
[$sel:memoryReservation:ContainerDefinition'] :: ContainerDefinition -> Maybe Int

-- | Create a value of <a>ContainerDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:image:ContainerDefinition'</a>,
--   <a>containerDefinition_image</a> - The image used to start a
--   container. This string is passed directly to the Docker daemon. Images
--   in the Docker Hub registry are available by default. Other
--   repositories are specified with either <tt> repository-url/image:tag
--   </tt> or <tt> repository-url/image@digest </tt>. Up to 255 letters
--   (uppercase and lowercase), numbers, hyphens, underscores, colons,
--   periods, forward slashes, and number signs are allowed. This parameter
--   maps to <tt>Image</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>IMAGE</tt> parameter of <a>docker
--   run</a>.
--   
--   <ul>
--   <li>When a new task starts, the Amazon ECS container agent pulls the
--   latest version of the specified image and tag for the container to
--   use. However, subsequent updates to a repository image are not
--   propagated to already running tasks.</li>
--   <li>Images in Amazon ECR repositories can be specified by either using
--   the full <tt>registry/repository:tag</tt> or
--   <tt>registry/repository@digest</tt>. For example,
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;:latest</tt>
--   or
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE</tt>.</li>
--   <li>Images in official repositories on Docker Hub use a single name
--   (for example, <tt>ubuntu</tt> or <tt>mongo</tt>).</li>
--   <li>Images in other repositories on Docker Hub are qualified with an
--   organization name (for example,
--   <tt>amazon/amazon-ecs-agent</tt>).</li>
--   <li>Images in other online repositories are qualified further by a
--   domain name (for example, <tt>quay.io/assemblyline/ubuntu</tt>).</li>
--   </ul>
--   
--   <a>$sel:command:ContainerDefinition'</a>,
--   <a>containerDefinition_command</a> - The command that is passed to the
--   container. This parameter maps to <tt>Cmd</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>COMMAND</tt> parameter to <a>docker run</a>. For more information,
--   see <a>https://docs.docker.com/engine/reference/builder/#cmd</a>. If
--   there are multiple arguments, each argument should be a separated
--   string in the array.
--   
--   <a>$sel:hostname:ContainerDefinition'</a>,
--   <a>containerDefinition_hostname</a> - The hostname to use for your
--   container. This parameter maps to <tt>Hostname</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--hostname</tt> option to <a>docker run</a>.
--   
--   The <tt>hostname</tt> parameter is not supported if you are using the
--   <tt>awsvpc</tt> network mode.
--   
--   <a>$sel:repositoryCredentials:ContainerDefinition'</a>,
--   <a>containerDefinition_repositoryCredentials</a> - The private
--   repository authentication credentials to use.
--   
--   <a>$sel:dockerSecurityOptions:ContainerDefinition'</a>,
--   <a>containerDefinition_dockerSecurityOptions</a> - A list of strings
--   to provide custom labels for SELinux and AppArmor multi-level security
--   systems. This field is not valid for containers in tasks using the
--   Fargate launch type.
--   
--   With Windows containers, this parameter can be used to reference a
--   credential spec file when configuring a container for Active Directory
--   authentication. For more information, see <a>Using gMSAs for Windows
--   Containers</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   This parameter maps to <tt>SecurityOpt</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--security-opt</tt> option to <a>docker run</a>.
--   
--   The Amazon ECS container agent running on a container instance must
--   register with the <tt>ECS_SELINUX_CAPABLE=true</tt> or
--   <tt>ECS_APPARMOR_CAPABLE=true</tt> environment variables before
--   containers placed on that instance can use these security options. For
--   more information, see <a>Amazon ECS Container Agent Configuration</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For more information about valid values, see <a>Docker Run Security
--   Configuration</a>.
--   
--   Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value"
--   | "credentialspec:CredentialSpecFilePath"
--   
--   <a>$sel:healthCheck:ContainerDefinition'</a>,
--   <a>containerDefinition_healthCheck</a> - The container health check
--   command and associated configuration parameters for the container.
--   This parameter maps to <tt>HealthCheck</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>HEALTHCHECK</tt> parameter of <a>docker run</a>.
--   
--   <a>$sel:disableNetworking:ContainerDefinition'</a>,
--   <a>containerDefinition_disableNetworking</a> - When this parameter is
--   true, networking is disabled within the container. This parameter maps
--   to <tt>NetworkDisabled</tt> in the <a>Create a container</a> section
--   of the <a>Docker Remote API</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:secrets:ContainerDefinition'</a>,
--   <a>containerDefinition_secrets</a> - The secrets to pass to the
--   container. For more information, see <a>Specifying Sensitive Data</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:volumesFrom:ContainerDefinition'</a>,
--   <a>containerDefinition_volumesFrom</a> - Data volumes to mount from
--   another container. This parameter maps to <tt>VolumesFrom</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--volumes-from</tt> option to <a>docker run</a>.
--   
--   <a>$sel:environment:ContainerDefinition'</a>,
--   <a>containerDefinition_environment</a> - The environment variables to
--   pass to a container. This parameter maps to <tt>Env</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--env</tt> option to <a>docker run</a>.
--   
--   We do not recommend using plaintext environment variables for
--   sensitive information, such as credential data.
--   
--   <a>$sel:environmentFiles:ContainerDefinition'</a>,
--   <a>containerDefinition_environmentFiles</a> - A list of files
--   containing the environment variables to pass to a container. This
--   parameter maps to the <tt>--env-file</tt> option to <a>docker run</a>.
--   
--   You can specify up to ten environment files. The file must have a
--   <tt>.env</tt> file extension. Each line in an environment file should
--   contain an environment variable in <tt>VARIABLE=VALUE</tt> format.
--   Lines beginning with <tt>#</tt> are treated as comments and are
--   ignored. For more information on the environment variable file syntax,
--   see <a>Declare default environment variables in file</a>.
--   
--   If there are environment variables specified using the
--   <tt>environment</tt> parameter in a container definition, they take
--   precedence over the variables contained within an environment file. If
--   multiple environment files are specified that contain the same
--   variable, they are processed from the top down. It is recommended to
--   use unique variable names. For more information, see <a>Specifying
--   Environment Variables</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <a>$sel:entryPoint:ContainerDefinition'</a>,
--   <a>containerDefinition_entryPoint</a> - Early versions of the Amazon
--   ECS container agent do not properly handle <tt>entryPoint</tt>
--   parameters. If you have problems using <tt>entryPoint</tt>, update
--   your container agent or enter your commands and arguments as
--   <tt>command</tt> array items instead.
--   
--   The entry point that is passed to the container. This parameter maps
--   to <tt>Entrypoint</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--entrypoint</tt> option to
--   <a>docker run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#entrypoint</a>.
--   
--   <a>$sel:workingDirectory:ContainerDefinition'</a>,
--   <a>containerDefinition_workingDirectory</a> - The working directory in
--   which to run commands inside the container. This parameter maps to
--   <tt>WorkingDir</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--workdir</tt> option to
--   <a>docker run</a>.
--   
--   <a>$sel:ulimits:ContainerDefinition'</a>,
--   <a>containerDefinition_ulimits</a> - A list of <tt>ulimits</tt> to set
--   in the container. If a ulimit value is specified in a task definition,
--   it will override the default values set by Docker. This parameter maps
--   to <tt>Ulimits</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--ulimit</tt> option to <a>docker
--   run</a>. Valid naming values are displayed in the Ulimit data type.
--   
--   Amazon ECS tasks hosted on Fargate use the default resource limit
--   values set by the operating system with the exception of the
--   <tt>nofile</tt> resource limit parameter which Fargate overrides. The
--   <tt>nofile</tt> resource limit sets a restriction on the number of
--   open files that a container can use. The default <tt>nofile</tt> soft
--   limit is <tt>1024</tt> and hard limit is <tt>4096</tt>.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:stopTimeout:ContainerDefinition'</a>,
--   <a>containerDefinition_stopTimeout</a> - Time duration (in seconds) to
--   wait before the container is forcefully killed if it doesn't exit
--   normally on its own.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version 1.3.0 or later. The max stop timeout value is 120
--   seconds and if the parameter is not specified, the default value of 30
--   seconds is used.
--   
--   For tasks using the EC2 launch type, if the <tt>stopTimeout</tt>
--   parameter is not specified, the value set for the Amazon ECS container
--   agent configuration variable <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> is
--   used by default. If neither the <tt>stopTimeout</tt> parameter or the
--   <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> agent configuration variable are
--   set, then the default values of 30 seconds for Linux containers and 30
--   seconds on Windows containers are used. Your container instances
--   require at least version 1.26.0 of the container agent to enable a
--   container stop timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:privileged:ContainerDefinition'</a>,
--   <a>containerDefinition_privileged</a> - When this parameter is true,
--   the container is given elevated privileges on the host container
--   instance (similar to the <tt>root</tt> user). This parameter maps to
--   <tt>Privileged</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--privileged</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:portMappings:ContainerDefinition'</a>,
--   <a>containerDefinition_portMappings</a> - The list of port mappings
--   for the container. Port mappings allow containers to access ports on
--   the host container instance to send or receive traffic.
--   
--   For task definitions that use the <tt>awsvpc</tt> network mode, you
--   should only specify the <tt>containerPort</tt>. The <tt>hostPort</tt>
--   can be left blank or it must be the same value as the
--   <tt>containerPort</tt>.
--   
--   Port mappings on Windows use the <tt>NetNAT</tt> gateway address
--   rather than <tt>localhost</tt>. There is no loopback for port mappings
--   on Windows, so you cannot access a container's mapped port from the
--   host itself.
--   
--   This parameter maps to <tt>PortBindings</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--publish</tt> option to <a>docker run</a>. If the network mode of
--   a task definition is set to <tt>none</tt>, then you can't specify port
--   mappings. If the network mode of a task definition is set to
--   <tt>host</tt>, then host ports must either be undefined or they must
--   match the container port in the port mapping.
--   
--   After a task reaches the <tt>RUNNING</tt> status, manual and automatic
--   host and container port assignments are visible in the <b>Network
--   Bindings</b> section of a container description for a selected task in
--   the Amazon ECS console. The assignments are also visible in the
--   <tt>networkBindings</tt> section DescribeTasks responses.
--   
--   <a>$sel:resourceRequirements:ContainerDefinition'</a>,
--   <a>containerDefinition_resourceRequirements</a> - The type and amount
--   of a resource to assign to a container. The only supported resource is
--   a GPU.
--   
--   <a>$sel:dockerLabels:ContainerDefinition'</a>,
--   <a>containerDefinition_dockerLabels</a> - A key/value map of labels to
--   add to the container. This parameter maps to <tt>Labels</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--label</tt> option to <a>docker run</a>. This parameter
--   requires version 1.18 of the Docker Remote API or greater on your
--   container instance. To check the Docker Remote API version on your
--   container instance, log in to your container instance and run the
--   following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   <a>$sel:extraHosts:ContainerDefinition'</a>,
--   <a>containerDefinition_extraHosts</a> - A list of hostnames and IP
--   address mappings to append to the <tt>/etc/hosts</tt> file on the
--   container. This parameter maps to <tt>ExtraHosts</tt> in the <a>Create
--   a container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--add-host</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks that
--   use the <tt>awsvpc</tt> network mode.
--   
--   <a>$sel:memory:ContainerDefinition'</a>,
--   <a>containerDefinition_memory</a> - The amount (in MiB) of memory to
--   present to the container. If your container attempts to exceed the
--   memory specified here, the container is killed. The total amount of
--   memory reserved for all containers within a task must be lower than
--   the task <tt>memory</tt> value, if one is specified. This parameter
--   maps to <tt>Memory</tt> in the <a>Create a container</a> section of
--   the <a>Docker Remote API</a> and the <tt>--memory</tt> option to
--   <a>docker run</a>.
--   
--   If using the Fargate launch type, this parameter is optional.
--   
--   If using the EC2 launch type, you must specify either a task-level
--   memory value or a container-level memory value. If you specify both a
--   container-level <tt>memory</tt> and <tt>memoryReservation</tt> value,
--   <tt>memory</tt> must be greater than <tt>memoryReservation</tt>. If
--   you specify <tt>memoryReservation</tt>, then that value is subtracted
--   from the available memory resources for the container instance on
--   which the container is placed. Otherwise, the value of <tt>memory</tt>
--   is used.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
--   
--   <a>$sel:systemControls:ContainerDefinition'</a>,
--   <a>containerDefinition_systemControls</a> - A list of namespaced
--   kernel parameters to set in the container. This parameter maps to
--   <tt>Sysctls</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--sysctl</tt> option to <a>docker
--   run</a>.
--   
--   It is not recommended that you specify network-related
--   <tt>systemControls</tt> parameters for multiple containers in a single
--   task that also uses either the <tt>awsvpc</tt> or <tt>host</tt>
--   network modes. For tasks that use the <tt>awsvpc</tt> network mode,
--   the container that is started last determines which
--   <tt>systemControls</tt> parameters take effect. For tasks that use the
--   <tt>host</tt> network mode, it changes the container instance's
--   namespaced kernel parameters as well as the containers.
--   
--   <a>$sel:user:ContainerDefinition'</a>, <a>containerDefinition_user</a>
--   - The user to use inside the container. This parameter maps to
--   <tt>User</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--user</tt> option to <a>docker
--   run</a>.
--   
--   When running tasks using the <tt>host</tt> network mode, you should
--   not run containers using the root user (UID 0). It is considered best
--   practice to use a non-root user.
--   
--   You can specify the <tt>user</tt> using the following formats. If
--   specifying a UID or GID, you must specify it as a positive integer.
--   
--   <ul>
--   <li><pre>user</pre></li>
--   <li><pre>user:group</pre></li>
--   <li><pre>uid</pre></li>
--   <li><pre>uid:gid</pre></li>
--   <li><pre>user:gid</pre></li>
--   <li><pre>uid:group</pre></li>
--   </ul>
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:firelensConfiguration:ContainerDefinition'</a>,
--   <a>containerDefinition_firelensConfiguration</a> - The FireLens
--   configuration for the container. This is used to specify and configure
--   a log router for container logs. For more information, see <a>Custom
--   Log Routing</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:dnsSearchDomains:ContainerDefinition'</a>,
--   <a>containerDefinition_dnsSearchDomains</a> - A list of DNS search
--   domains that are presented to the container. This parameter maps to
--   <tt>DnsSearch</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--dns-search</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:logConfiguration:ContainerDefinition'</a>,
--   <a>containerDefinition_logConfiguration</a> - The log configuration
--   specification for the container.
--   
--   This parameter maps to <tt>LogConfig</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--log-driver</tt> option to <a>docker run</a>. By default,
--   containers use the same logging driver that the Docker daemon uses.
--   However the container may use a different logging driver than the
--   Docker daemon by specifying a log driver with this parameter in the
--   container definition. To use a different logging driver for a
--   container, the log system must be configured properly on the container
--   instance (or on a different log server for remote logging options).
--   For more information on the options for different supported log
--   drivers, see <a>Configure logging drivers</a> in the Docker
--   documentation.
--   
--   Amazon ECS currently supports a subset of the logging drivers
--   available to the Docker daemon (shown in the LogConfiguration data
--   type). Additional log drivers may be available in future releases of
--   the Amazon ECS container agent.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   The Amazon ECS container agent running on a container instance must
--   register the logging drivers available on that instance with the
--   <tt>ECS_AVAILABLE_LOGGING_DRIVERS</tt> environment variable before
--   containers placed on that instance can use these log configuration
--   options. For more information, see <a>Amazon ECS Container Agent
--   Configuration</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:linuxParameters:ContainerDefinition'</a>,
--   <a>containerDefinition_linuxParameters</a> - Linux-specific
--   modifications that are applied to the container, such as Linux kernel
--   capabilities. For more information see KernelCapabilities.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:pseudoTerminal:ContainerDefinition'</a>,
--   <a>containerDefinition_pseudoTerminal</a> - When this parameter is
--   <tt>true</tt>, a TTY is allocated. This parameter maps to <tt>Tty</tt>
--   in the <a>Create a container</a> section of the <a>Docker Remote
--   API</a> and the <tt>--tty</tt> option to <a>docker run</a>.
--   
--   <a>$sel:dependsOn:ContainerDefinition'</a>,
--   <a>containerDefinition_dependsOn</a> - The dependencies defined for
--   container startup and shutdown. A container can contain multiple
--   dependencies. When a dependency is defined for container startup, for
--   container shutdown it is reversed.
--   
--   For tasks using the EC2 launch type, the container instances require
--   at least version 1.26.0 of the container agent to enable container
--   dependencies. However, we recommend using the latest container agent
--   version. For information about checking your agent version and
--   updating to the latest version, see <a>Updating the Amazon ECS
--   Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version <tt>1.3.0</tt> or later.
--   
--   <a>$sel:name:ContainerDefinition'</a>, <a>containerDefinition_name</a>
--   - The name of a container. If you are linking multiple containers
--   together in a task definition, the <tt>name</tt> of one container can
--   be entered in the <tt>links</tt> of another container to connect the
--   containers. Up to 255 letters (uppercase and lowercase), numbers,
--   underscores, and hyphens are allowed. This parameter maps to
--   <tt>name</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--name</tt> option to <a>docker
--   run</a>.
--   
--   <a>$sel:dnsServers:ContainerDefinition'</a>,
--   <a>containerDefinition_dnsServers</a> - A list of DNS servers that are
--   presented to the container. This parameter maps to <tt>Dns</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--dns</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:mountPoints:ContainerDefinition'</a>,
--   <a>containerDefinition_mountPoints</a> - The mount points for data
--   volumes in your container.
--   
--   This parameter maps to <tt>Volumes</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--volume</tt> option to <a>docker run</a>.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives.
--   
--   <a>$sel:interactive:ContainerDefinition'</a>,
--   <a>containerDefinition_interactive</a> - When this parameter is
--   <tt>true</tt>, this allows you to deploy containerized applications
--   that require <tt>stdin</tt> or a <tt>tty</tt> to be allocated. This
--   parameter maps to <tt>OpenStdin</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--interactive</tt>
--   option to <a>docker run</a>.
--   
--   <a>$sel:startTimeout:ContainerDefinition'</a>,
--   <a>containerDefinition_startTimeout</a> - Time duration (in seconds)
--   to wait before giving up on resolving dependencies for a container.
--   For example, you specify two containers in a task definition with
--   containerA having a dependency on containerB reaching a
--   <tt>COMPLETE</tt>, <tt>SUCCESS</tt>, or <tt>HEALTHY</tt> status. If a
--   <tt>startTimeout</tt> value is specified for containerB and it does
--   not reach the desired status within that time then containerA will
--   give up and not start. This results in the task transitioning to a
--   <tt>STOPPED</tt> state.
--   
--   When the <tt>ECS_CONTAINER_START_TIMEOUT</tt> container agent
--   configuration variable is used, it is enforced indendently from this
--   start timeout value.
--   
--   For tasks using the Fargate launch type, this parameter requires that
--   the task or service uses platform version 1.3.0 or later.
--   
--   For tasks using the EC2 launch type, your container instances require
--   at least version <tt>1.26.0</tt> of the container agent to enable a
--   container start timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version <tt>1.26.0-1</tt> of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:links:ContainerDefinition'</a>,
--   <a>containerDefinition_links</a> - The <tt>links</tt> parameter allows
--   containers to communicate with each other without the need for port
--   mappings. This parameter is only supported if the network mode of a
--   task definition is <tt>bridge</tt>. The <tt>name:internalName</tt>
--   construct is analogous to <tt>name:alias</tt> in Docker links. Up to
--   255 letters (uppercase and lowercase), numbers, underscores, and
--   hyphens are allowed. For more information about linking Docker
--   containers, go to <a>Legacy container links</a> in the Docker
--   documentation. This parameter maps to <tt>Links</tt> in the <a>Create
--   a container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--link</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   Containers that are collocated on a single container instance may be
--   able to communicate with each other without requiring links or host
--   port mappings. Network isolation is achieved on the container instance
--   using security groups and VPC settings.
--   
--   <a>$sel:readonlyRootFilesystem:ContainerDefinition'</a>,
--   <a>containerDefinition_readonlyRootFilesystem</a> - When this
--   parameter is true, the container is given read-only access to its root
--   file system. This parameter maps to <tt>ReadonlyRootfs</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--read-only</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:essential:ContainerDefinition'</a>,
--   <a>containerDefinition_essential</a> - If the <tt>essential</tt>
--   parameter of a container is marked as <tt>true</tt>, and that
--   container fails or stops for any reason, all other containers that are
--   part of the task are stopped. If the <tt>essential</tt> parameter of a
--   container is marked as <tt>false</tt>, then its failure does not
--   affect the rest of the containers in a task. If this parameter is
--   omitted, a container is assumed to be essential.
--   
--   All tasks must have at least one essential container. If you have an
--   application that is composed of multiple containers, you should group
--   containers that are used for a common purpose into components, and
--   separate the different components into multiple task definitions. For
--   more information, see <a>Application Architecture</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:cpu:ContainerDefinition'</a>, <a>containerDefinition_cpu</a> -
--   The number of <tt>cpu</tt> units reserved for the container. This
--   parameter maps to <tt>CpuShares</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--cpu-shares</tt>
--   option to <a>docker run</a>.
--   
--   This field is optional for tasks using the Fargate launch type, and
--   the only requirement is that the total amount of CPU reserved for all
--   containers within a task be lower than the task-level <tt>cpu</tt>
--   value.
--   
--   You can determine the number of CPU units that are available per EC2
--   instance type by multiplying the vCPUs listed for that instance type
--   on the <a>Amazon EC2 Instances</a> detail page by 1,024.
--   
--   Linux containers share unallocated CPU units with other containers on
--   the container instance with the same ratio as their allocated amount.
--   For example, if you run a single-container task on a single-core
--   instance type with 512 CPU units specified for that container, and
--   that is the only task running on the container instance, that
--   container could use the full 1,024 CPU unit share at any given time.
--   However, if you launched another copy of the same task on that
--   container instance, each task would be guaranteed a minimum of 512 CPU
--   units when needed, and each container could float to higher CPU usage
--   if the other container was not using it, but if both tasks were 100%
--   active all of the time, they would be limited to 512 CPU units.
--   
--   On Linux container instances, the Docker daemon on the container
--   instance uses the CPU value to calculate the relative CPU share ratios
--   for running containers. For more information, see <a>CPU share
--   constraint</a> in the Docker documentation. The minimum valid CPU
--   share value that the Linux kernel allows is 2. However, the CPU
--   parameter is not required, and you can use CPU values below 2 in your
--   container definitions. For CPU values below 2 (including null), the
--   behavior varies based on your Amazon ECS container agent version:
--   
--   <ul>
--   <li><b>Agent versions less than or equal to 1.1.0:</b> Null and zero
--   CPU values are passed to Docker as 0, which Docker then converts to
--   1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the
--   Linux kernel converts to two CPU shares.</li>
--   <li><b>Agent versions greater than or equal to 1.2.0:</b> Null, zero,
--   and CPU values of 1 are passed to Docker as 2.</li>
--   </ul>
--   
--   On Windows container instances, the CPU limit is enforced as an
--   absolute limit, or a quota. Windows containers only have access to the
--   specified amount of CPU that is described in the task definition. A
--   null or zero CPU value is passed to Docker as <tt>0</tt>, which
--   Windows interprets as 1% of one CPU.
--   
--   <a>$sel:memoryReservation:ContainerDefinition'</a>,
--   <a>containerDefinition_memoryReservation</a> - The soft limit (in MiB)
--   of memory to reserve for the container. When system memory is under
--   heavy contention, Docker attempts to keep the container memory to this
--   soft limit. However, your container can consume more memory when it
--   needs to, up to either the hard limit specified with the
--   <tt>memory</tt> parameter (if applicable), or all of the available
--   memory on the container instance, whichever comes first. This
--   parameter maps to <tt>MemoryReservation</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--memory-reservation</tt> option to <a>docker run</a>.
--   
--   If a task-level memory value is not specified, you must specify a
--   non-zero integer for one or both of <tt>memory</tt> or
--   <tt>memoryReservation</tt> in a container definition. If you specify
--   both, <tt>memory</tt> must be greater than <tt>memoryReservation</tt>.
--   If you specify <tt>memoryReservation</tt>, then that value is
--   subtracted from the available memory resources for the container
--   instance on which the container is placed. Otherwise, the value of
--   <tt>memory</tt> is used.
--   
--   For example, if your container normally uses 128 MiB of memory, but
--   occasionally bursts to 256 MiB of memory for short periods of time,
--   you can set a <tt>memoryReservation</tt> of 128 MiB, and a
--   <tt>memory</tt> hard limit of 300 MiB. This configuration would allow
--   the container to only reserve 128 MiB of memory from the remaining
--   resources on the container instance, but also allow the container to
--   consume more memory resources when needed.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
newContainerDefinition :: ContainerDefinition

-- | The image used to start a container. This string is passed directly to
--   the Docker daemon. Images in the Docker Hub registry are available by
--   default. Other repositories are specified with either <tt>
--   repository-url/image:tag </tt> or <tt> repository-url/image@digest
--   </tt>. Up to 255 letters (uppercase and lowercase), numbers, hyphens,
--   underscores, colons, periods, forward slashes, and number signs are
--   allowed. This parameter maps to <tt>Image</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>IMAGE</tt> parameter of <a>docker run</a>.
--   
--   <ul>
--   <li>When a new task starts, the Amazon ECS container agent pulls the
--   latest version of the specified image and tag for the container to
--   use. However, subsequent updates to a repository image are not
--   propagated to already running tasks.</li>
--   <li>Images in Amazon ECR repositories can be specified by either using
--   the full <tt>registry/repository:tag</tt> or
--   <tt>registry/repository@digest</tt>. For example,
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;:latest</tt>
--   or
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE</tt>.</li>
--   <li>Images in official repositories on Docker Hub use a single name
--   (for example, <tt>ubuntu</tt> or <tt>mongo</tt>).</li>
--   <li>Images in other repositories on Docker Hub are qualified with an
--   organization name (for example,
--   <tt>amazon/amazon-ecs-agent</tt>).</li>
--   <li>Images in other online repositories are qualified further by a
--   domain name (for example, <tt>quay.io/assemblyline/ubuntu</tt>).</li>
--   </ul>
containerDefinition_image :: Lens' ContainerDefinition (Maybe Text)

-- | The command that is passed to the container. This parameter maps to
--   <tt>Cmd</tt> in the <a>Create a container</a> section of the <a>Docker
--   Remote API</a> and the <tt>COMMAND</tt> parameter to <a>docker
--   run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#cmd</a>. If there
--   are multiple arguments, each argument should be a separated string in
--   the array.
containerDefinition_command :: Lens' ContainerDefinition (Maybe [Text])

-- | The hostname to use for your container. This parameter maps to
--   <tt>Hostname</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--hostname</tt> option to
--   <a>docker run</a>.
--   
--   The <tt>hostname</tt> parameter is not supported if you are using the
--   <tt>awsvpc</tt> network mode.
containerDefinition_hostname :: Lens' ContainerDefinition (Maybe Text)

-- | The private repository authentication credentials to use.
containerDefinition_repositoryCredentials :: Lens' ContainerDefinition (Maybe RepositoryCredentials)

-- | A list of strings to provide custom labels for SELinux and AppArmor
--   multi-level security systems. This field is not valid for containers
--   in tasks using the Fargate launch type.
--   
--   With Windows containers, this parameter can be used to reference a
--   credential spec file when configuring a container for Active Directory
--   authentication. For more information, see <a>Using gMSAs for Windows
--   Containers</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   This parameter maps to <tt>SecurityOpt</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--security-opt</tt> option to <a>docker run</a>.
--   
--   The Amazon ECS container agent running on a container instance must
--   register with the <tt>ECS_SELINUX_CAPABLE=true</tt> or
--   <tt>ECS_APPARMOR_CAPABLE=true</tt> environment variables before
--   containers placed on that instance can use these security options. For
--   more information, see <a>Amazon ECS Container Agent Configuration</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For more information about valid values, see <a>Docker Run Security
--   Configuration</a>.
--   
--   Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value"
--   | "credentialspec:CredentialSpecFilePath"
containerDefinition_dockerSecurityOptions :: Lens' ContainerDefinition (Maybe [Text])

-- | The container health check command and associated configuration
--   parameters for the container. This parameter maps to
--   <tt>HealthCheck</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>HEALTHCHECK</tt> parameter of
--   <a>docker run</a>.
containerDefinition_healthCheck :: Lens' ContainerDefinition (Maybe HealthCheck)

-- | When this parameter is true, networking is disabled within the
--   container. This parameter maps to <tt>NetworkDisabled</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_disableNetworking :: Lens' ContainerDefinition (Maybe Bool)

-- | The secrets to pass to the container. For more information, see
--   <a>Specifying Sensitive Data</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
containerDefinition_secrets :: Lens' ContainerDefinition (Maybe [Secret])

-- | Data volumes to mount from another container. This parameter maps to
--   <tt>VolumesFrom</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--volumes-from</tt> option to
--   <a>docker run</a>.
containerDefinition_volumesFrom :: Lens' ContainerDefinition (Maybe [VolumeFrom])

-- | The environment variables to pass to a container. This parameter maps
--   to <tt>Env</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--env</tt> option to <a>docker
--   run</a>.
--   
--   We do not recommend using plaintext environment variables for
--   sensitive information, such as credential data.
containerDefinition_environment :: Lens' ContainerDefinition (Maybe [KeyValuePair])

-- | A list of files containing the environment variables to pass to a
--   container. This parameter maps to the <tt>--env-file</tt> option to
--   <a>docker run</a>.
--   
--   You can specify up to ten environment files. The file must have a
--   <tt>.env</tt> file extension. Each line in an environment file should
--   contain an environment variable in <tt>VARIABLE=VALUE</tt> format.
--   Lines beginning with <tt>#</tt> are treated as comments and are
--   ignored. For more information on the environment variable file syntax,
--   see <a>Declare default environment variables in file</a>.
--   
--   If there are environment variables specified using the
--   <tt>environment</tt> parameter in a container definition, they take
--   precedence over the variables contained within an environment file. If
--   multiple environment files are specified that contain the same
--   variable, they are processed from the top down. It is recommended to
--   use unique variable names. For more information, see <a>Specifying
--   Environment Variables</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
containerDefinition_environmentFiles :: Lens' ContainerDefinition (Maybe [EnvironmentFile])

-- | Early versions of the Amazon ECS container agent do not properly
--   handle <tt>entryPoint</tt> parameters. If you have problems using
--   <tt>entryPoint</tt>, update your container agent or enter your
--   commands and arguments as <tt>command</tt> array items instead.
--   
--   The entry point that is passed to the container. This parameter maps
--   to <tt>Entrypoint</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--entrypoint</tt> option to
--   <a>docker run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#entrypoint</a>.
containerDefinition_entryPoint :: Lens' ContainerDefinition (Maybe [Text])

-- | The working directory in which to run commands inside the container.
--   This parameter maps to <tt>WorkingDir</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--workdir</tt> option to <a>docker run</a>.
containerDefinition_workingDirectory :: Lens' ContainerDefinition (Maybe Text)

-- | A list of <tt>ulimits</tt> to set in the container. If a ulimit value
--   is specified in a task definition, it will override the default values
--   set by Docker. This parameter maps to <tt>Ulimits</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--ulimit</tt> option to <a>docker run</a>. Valid naming values
--   are displayed in the Ulimit data type.
--   
--   Amazon ECS tasks hosted on Fargate use the default resource limit
--   values set by the operating system with the exception of the
--   <tt>nofile</tt> resource limit parameter which Fargate overrides. The
--   <tt>nofile</tt> resource limit sets a restriction on the number of
--   open files that a container can use. The default <tt>nofile</tt> soft
--   limit is <tt>1024</tt> and hard limit is <tt>4096</tt>.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   This parameter is not supported for Windows containers.
containerDefinition_ulimits :: Lens' ContainerDefinition (Maybe [Ulimit])

-- | Time duration (in seconds) to wait before the container is forcefully
--   killed if it doesn't exit normally on its own.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version 1.3.0 or later. The max stop timeout value is 120
--   seconds and if the parameter is not specified, the default value of 30
--   seconds is used.
--   
--   For tasks using the EC2 launch type, if the <tt>stopTimeout</tt>
--   parameter is not specified, the value set for the Amazon ECS container
--   agent configuration variable <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> is
--   used by default. If neither the <tt>stopTimeout</tt> parameter or the
--   <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> agent configuration variable are
--   set, then the default values of 30 seconds for Linux containers and 30
--   seconds on Windows containers are used. Your container instances
--   require at least version 1.26.0 of the container agent to enable a
--   container stop timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
containerDefinition_stopTimeout :: Lens' ContainerDefinition (Maybe Int)

-- | When this parameter is true, the container is given elevated
--   privileges on the host container instance (similar to the
--   <tt>root</tt> user). This parameter maps to <tt>Privileged</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--privileged</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
containerDefinition_privileged :: Lens' ContainerDefinition (Maybe Bool)

-- | The list of port mappings for the container. Port mappings allow
--   containers to access ports on the host container instance to send or
--   receive traffic.
--   
--   For task definitions that use the <tt>awsvpc</tt> network mode, you
--   should only specify the <tt>containerPort</tt>. The <tt>hostPort</tt>
--   can be left blank or it must be the same value as the
--   <tt>containerPort</tt>.
--   
--   Port mappings on Windows use the <tt>NetNAT</tt> gateway address
--   rather than <tt>localhost</tt>. There is no loopback for port mappings
--   on Windows, so you cannot access a container's mapped port from the
--   host itself.
--   
--   This parameter maps to <tt>PortBindings</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--publish</tt> option to <a>docker run</a>. If the network mode of
--   a task definition is set to <tt>none</tt>, then you can't specify port
--   mappings. If the network mode of a task definition is set to
--   <tt>host</tt>, then host ports must either be undefined or they must
--   match the container port in the port mapping.
--   
--   After a task reaches the <tt>RUNNING</tt> status, manual and automatic
--   host and container port assignments are visible in the <b>Network
--   Bindings</b> section of a container description for a selected task in
--   the Amazon ECS console. The assignments are also visible in the
--   <tt>networkBindings</tt> section DescribeTasks responses.
containerDefinition_portMappings :: Lens' ContainerDefinition (Maybe [PortMapping])

-- | The type and amount of a resource to assign to a container. The only
--   supported resource is a GPU.
containerDefinition_resourceRequirements :: Lens' ContainerDefinition (Maybe [ResourceRequirement])

-- | A key/value map of labels to add to the container. This parameter maps
--   to <tt>Labels</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--label</tt> option to <a>docker
--   run</a>. This parameter requires version 1.18 of the Docker Remote API
--   or greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
containerDefinition_dockerLabels :: Lens' ContainerDefinition (Maybe (HashMap Text Text))

-- | A list of hostnames and IP address mappings to append to the
--   <tt>/etc/hosts</tt> file on the container. This parameter maps to
--   <tt>ExtraHosts</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--add-host</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks that
--   use the <tt>awsvpc</tt> network mode.
containerDefinition_extraHosts :: Lens' ContainerDefinition (Maybe [HostEntry])

-- | The amount (in MiB) of memory to present to the container. If your
--   container attempts to exceed the memory specified here, the container
--   is killed. The total amount of memory reserved for all containers
--   within a task must be lower than the task <tt>memory</tt> value, if
--   one is specified. This parameter maps to <tt>Memory</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--memory</tt> option to <a>docker run</a>.
--   
--   If using the Fargate launch type, this parameter is optional.
--   
--   If using the EC2 launch type, you must specify either a task-level
--   memory value or a container-level memory value. If you specify both a
--   container-level <tt>memory</tt> and <tt>memoryReservation</tt> value,
--   <tt>memory</tt> must be greater than <tt>memoryReservation</tt>. If
--   you specify <tt>memoryReservation</tt>, then that value is subtracted
--   from the available memory resources for the container instance on
--   which the container is placed. Otherwise, the value of <tt>memory</tt>
--   is used.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
containerDefinition_memory :: Lens' ContainerDefinition (Maybe Int)

-- | A list of namespaced kernel parameters to set in the container. This
--   parameter maps to <tt>Sysctls</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--sysctl</tt>
--   option to <a>docker run</a>.
--   
--   It is not recommended that you specify network-related
--   <tt>systemControls</tt> parameters for multiple containers in a single
--   task that also uses either the <tt>awsvpc</tt> or <tt>host</tt>
--   network modes. For tasks that use the <tt>awsvpc</tt> network mode,
--   the container that is started last determines which
--   <tt>systemControls</tt> parameters take effect. For tasks that use the
--   <tt>host</tt> network mode, it changes the container instance's
--   namespaced kernel parameters as well as the containers.
containerDefinition_systemControls :: Lens' ContainerDefinition (Maybe [SystemControl])

-- | The user to use inside the container. This parameter maps to
--   <tt>User</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--user</tt> option to <a>docker
--   run</a>.
--   
--   When running tasks using the <tt>host</tt> network mode, you should
--   not run containers using the root user (UID 0). It is considered best
--   practice to use a non-root user.
--   
--   You can specify the <tt>user</tt> using the following formats. If
--   specifying a UID or GID, you must specify it as a positive integer.
--   
--   <ul>
--   <li><pre>user</pre></li>
--   <li><pre>user:group</pre></li>
--   <li><pre>uid</pre></li>
--   <li><pre>uid:gid</pre></li>
--   <li><pre>user:gid</pre></li>
--   <li><pre>uid:group</pre></li>
--   </ul>
--   
--   This parameter is not supported for Windows containers.
containerDefinition_user :: Lens' ContainerDefinition (Maybe Text)

-- | The FireLens configuration for the container. This is used to specify
--   and configure a log router for container logs. For more information,
--   see <a>Custom Log Routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
containerDefinition_firelensConfiguration :: Lens' ContainerDefinition (Maybe FirelensConfiguration)

-- | A list of DNS search domains that are presented to the container. This
--   parameter maps to <tt>DnsSearch</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--dns-search</tt>
--   option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_dnsSearchDomains :: Lens' ContainerDefinition (Maybe [Text])

-- | The log configuration specification for the container.
--   
--   This parameter maps to <tt>LogConfig</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--log-driver</tt> option to <a>docker run</a>. By default,
--   containers use the same logging driver that the Docker daemon uses.
--   However the container may use a different logging driver than the
--   Docker daemon by specifying a log driver with this parameter in the
--   container definition. To use a different logging driver for a
--   container, the log system must be configured properly on the container
--   instance (or on a different log server for remote logging options).
--   For more information on the options for different supported log
--   drivers, see <a>Configure logging drivers</a> in the Docker
--   documentation.
--   
--   Amazon ECS currently supports a subset of the logging drivers
--   available to the Docker daemon (shown in the LogConfiguration data
--   type). Additional log drivers may be available in future releases of
--   the Amazon ECS container agent.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   The Amazon ECS container agent running on a container instance must
--   register the logging drivers available on that instance with the
--   <tt>ECS_AVAILABLE_LOGGING_DRIVERS</tt> environment variable before
--   containers placed on that instance can use these log configuration
--   options. For more information, see <a>Amazon ECS Container Agent
--   Configuration</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
containerDefinition_logConfiguration :: Lens' ContainerDefinition (Maybe LogConfiguration)

-- | Linux-specific modifications that are applied to the container, such
--   as Linux kernel capabilities. For more information see
--   KernelCapabilities.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_linuxParameters :: Lens' ContainerDefinition (Maybe LinuxParameters)

-- | When this parameter is <tt>true</tt>, a TTY is allocated. This
--   parameter maps to <tt>Tty</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--tty</tt> option
--   to <a>docker run</a>.
containerDefinition_pseudoTerminal :: Lens' ContainerDefinition (Maybe Bool)

-- | The dependencies defined for container startup and shutdown. A
--   container can contain multiple dependencies. When a dependency is
--   defined for container startup, for container shutdown it is reversed.
--   
--   For tasks using the EC2 launch type, the container instances require
--   at least version 1.26.0 of the container agent to enable container
--   dependencies. However, we recommend using the latest container agent
--   version. For information about checking your agent version and
--   updating to the latest version, see <a>Updating the Amazon ECS
--   Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version <tt>1.3.0</tt> or later.
containerDefinition_dependsOn :: Lens' ContainerDefinition (Maybe [ContainerDependency])

-- | The name of a container. If you are linking multiple containers
--   together in a task definition, the <tt>name</tt> of one container can
--   be entered in the <tt>links</tt> of another container to connect the
--   containers. Up to 255 letters (uppercase and lowercase), numbers,
--   underscores, and hyphens are allowed. This parameter maps to
--   <tt>name</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--name</tt> option to <a>docker
--   run</a>.
containerDefinition_name :: Lens' ContainerDefinition (Maybe Text)

-- | A list of DNS servers that are presented to the container. This
--   parameter maps to <tt>Dns</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--dns</tt> option
--   to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_dnsServers :: Lens' ContainerDefinition (Maybe [Text])

-- | The mount points for data volumes in your container.
--   
--   This parameter maps to <tt>Volumes</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--volume</tt> option to <a>docker run</a>.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives.
containerDefinition_mountPoints :: Lens' ContainerDefinition (Maybe [MountPoint])

-- | When this parameter is <tt>true</tt>, this allows you to deploy
--   containerized applications that require <tt>stdin</tt> or a
--   <tt>tty</tt> to be allocated. This parameter maps to
--   <tt>OpenStdin</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--interactive</tt> option to
--   <a>docker run</a>.
containerDefinition_interactive :: Lens' ContainerDefinition (Maybe Bool)

-- | Time duration (in seconds) to wait before giving up on resolving
--   dependencies for a container. For example, you specify two containers
--   in a task definition with containerA having a dependency on containerB
--   reaching a <tt>COMPLETE</tt>, <tt>SUCCESS</tt>, or <tt>HEALTHY</tt>
--   status. If a <tt>startTimeout</tt> value is specified for containerB
--   and it does not reach the desired status within that time then
--   containerA will give up and not start. This results in the task
--   transitioning to a <tt>STOPPED</tt> state.
--   
--   When the <tt>ECS_CONTAINER_START_TIMEOUT</tt> container agent
--   configuration variable is used, it is enforced indendently from this
--   start timeout value.
--   
--   For tasks using the Fargate launch type, this parameter requires that
--   the task or service uses platform version 1.3.0 or later.
--   
--   For tasks using the EC2 launch type, your container instances require
--   at least version <tt>1.26.0</tt> of the container agent to enable a
--   container start timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version <tt>1.26.0-1</tt> of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
containerDefinition_startTimeout :: Lens' ContainerDefinition (Maybe Int)

-- | The <tt>links</tt> parameter allows containers to communicate with
--   each other without the need for port mappings. This parameter is only
--   supported if the network mode of a task definition is <tt>bridge</tt>.
--   The <tt>name:internalName</tt> construct is analogous to
--   <tt>name:alias</tt> in Docker links. Up to 255 letters (uppercase and
--   lowercase), numbers, underscores, and hyphens are allowed. For more
--   information about linking Docker containers, go to <a>Legacy container
--   links</a> in the Docker documentation. This parameter maps to
--   <tt>Links</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--link</tt> option to <a>docker
--   run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   Containers that are collocated on a single container instance may be
--   able to communicate with each other without requiring links or host
--   port mappings. Network isolation is achieved on the container instance
--   using security groups and VPC settings.
containerDefinition_links :: Lens' ContainerDefinition (Maybe [Text])

-- | When this parameter is true, the container is given read-only access
--   to its root file system. This parameter maps to
--   <tt>ReadonlyRootfs</tt> in the <a>Create a container</a> section of
--   the <a>Docker Remote API</a> and the <tt>--read-only</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_readonlyRootFilesystem :: Lens' ContainerDefinition (Maybe Bool)

-- | If the <tt>essential</tt> parameter of a container is marked as
--   <tt>true</tt>, and that container fails or stops for any reason, all
--   other containers that are part of the task are stopped. If the
--   <tt>essential</tt> parameter of a container is marked as
--   <tt>false</tt>, then its failure does not affect the rest of the
--   containers in a task. If this parameter is omitted, a container is
--   assumed to be essential.
--   
--   All tasks must have at least one essential container. If you have an
--   application that is composed of multiple containers, you should group
--   containers that are used for a common purpose into components, and
--   separate the different components into multiple task definitions. For
--   more information, see <a>Application Architecture</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
containerDefinition_essential :: Lens' ContainerDefinition (Maybe Bool)

-- | The number of <tt>cpu</tt> units reserved for the container. This
--   parameter maps to <tt>CpuShares</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--cpu-shares</tt>
--   option to <a>docker run</a>.
--   
--   This field is optional for tasks using the Fargate launch type, and
--   the only requirement is that the total amount of CPU reserved for all
--   containers within a task be lower than the task-level <tt>cpu</tt>
--   value.
--   
--   You can determine the number of CPU units that are available per EC2
--   instance type by multiplying the vCPUs listed for that instance type
--   on the <a>Amazon EC2 Instances</a> detail page by 1,024.
--   
--   Linux containers share unallocated CPU units with other containers on
--   the container instance with the same ratio as their allocated amount.
--   For example, if you run a single-container task on a single-core
--   instance type with 512 CPU units specified for that container, and
--   that is the only task running on the container instance, that
--   container could use the full 1,024 CPU unit share at any given time.
--   However, if you launched another copy of the same task on that
--   container instance, each task would be guaranteed a minimum of 512 CPU
--   units when needed, and each container could float to higher CPU usage
--   if the other container was not using it, but if both tasks were 100%
--   active all of the time, they would be limited to 512 CPU units.
--   
--   On Linux container instances, the Docker daemon on the container
--   instance uses the CPU value to calculate the relative CPU share ratios
--   for running containers. For more information, see <a>CPU share
--   constraint</a> in the Docker documentation. The minimum valid CPU
--   share value that the Linux kernel allows is 2. However, the CPU
--   parameter is not required, and you can use CPU values below 2 in your
--   container definitions. For CPU values below 2 (including null), the
--   behavior varies based on your Amazon ECS container agent version:
--   
--   <ul>
--   <li><b>Agent versions less than or equal to 1.1.0:</b> Null and zero
--   CPU values are passed to Docker as 0, which Docker then converts to
--   1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the
--   Linux kernel converts to two CPU shares.</li>
--   <li><b>Agent versions greater than or equal to 1.2.0:</b> Null, zero,
--   and CPU values of 1 are passed to Docker as 2.</li>
--   </ul>
--   
--   On Windows container instances, the CPU limit is enforced as an
--   absolute limit, or a quota. Windows containers only have access to the
--   specified amount of CPU that is described in the task definition. A
--   null or zero CPU value is passed to Docker as <tt>0</tt>, which
--   Windows interprets as 1% of one CPU.
containerDefinition_cpu :: Lens' ContainerDefinition (Maybe Int)

-- | The soft limit (in MiB) of memory to reserve for the container. When
--   system memory is under heavy contention, Docker attempts to keep the
--   container memory to this soft limit. However, your container can
--   consume more memory when it needs to, up to either the hard limit
--   specified with the <tt>memory</tt> parameter (if applicable), or all
--   of the available memory on the container instance, whichever comes
--   first. This parameter maps to <tt>MemoryReservation</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--memory-reservation</tt> option to <a>docker run</a>.
--   
--   If a task-level memory value is not specified, you must specify a
--   non-zero integer for one or both of <tt>memory</tt> or
--   <tt>memoryReservation</tt> in a container definition. If you specify
--   both, <tt>memory</tt> must be greater than <tt>memoryReservation</tt>.
--   If you specify <tt>memoryReservation</tt>, then that value is
--   subtracted from the available memory resources for the container
--   instance on which the container is placed. Otherwise, the value of
--   <tt>memory</tt> is used.
--   
--   For example, if your container normally uses 128 MiB of memory, but
--   occasionally bursts to 256 MiB of memory for short periods of time,
--   you can set a <tt>memoryReservation</tt> of 128 MiB, and a
--   <tt>memory</tt> hard limit of 300 MiB. This configuration would allow
--   the container to only reserve 128 MiB of memory from the remaining
--   resources on the container instance, but also allow the container to
--   consume more memory resources when needed.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
containerDefinition_memoryReservation :: Lens' ContainerDefinition (Maybe Int)
instance GHC.Generics.Generic Amazonka.ECS.Types.ContainerDefinition.ContainerDefinition
instance GHC.Show.Show Amazonka.ECS.Types.ContainerDefinition.ContainerDefinition
instance GHC.Read.Read Amazonka.ECS.Types.ContainerDefinition.ContainerDefinition
instance GHC.Classes.Eq Amazonka.ECS.Types.ContainerDefinition.ContainerDefinition
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.ContainerDefinition.ContainerDefinition
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.ContainerDefinition.ContainerDefinition
instance Control.DeepSeq.NFData Amazonka.ECS.Types.ContainerDefinition.ContainerDefinition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.Types.ContainerDefinition.ContainerDefinition


module Amazonka.ECS.Types.TaskDefinition

-- | The details of a task definition which describes the container and
--   volume definitions of an Amazon Elastic Container Service task. You
--   can specify which Docker images to use, the required resources, and
--   other configurations related to launching the task definition through
--   an Amazon ECS service or task.
--   
--   <i>See:</i> <a>newTaskDefinition</a> smart constructor.
data TaskDefinition
TaskDefinition' :: Maybe TaskDefinitionStatus -> Maybe [InferenceAccelerator] -> Maybe Text -> Maybe [Compatibility] -> Maybe EphemeralStorage -> Maybe PidMode -> Maybe Text -> Maybe IpcMode -> Maybe [ContainerDefinition] -> Maybe Text -> Maybe ProxyConfiguration -> Maybe Text -> Maybe POSIX -> Maybe [TaskDefinitionPlacementConstraint] -> Maybe POSIX -> Maybe NetworkMode -> Maybe Text -> Maybe [Compatibility] -> Maybe Text -> Maybe Int -> Maybe [Volume] -> Maybe Text -> Maybe [Attribute] -> TaskDefinition

-- | The status of the task definition.
[$sel:status:TaskDefinition'] :: TaskDefinition -> Maybe TaskDefinitionStatus

-- | The Elastic Inference accelerator associated with the task.
[$sel:inferenceAccelerators:TaskDefinition'] :: TaskDefinition -> Maybe [InferenceAccelerator]

-- | The Amazon Resource Name (ARN) of the task execution role that grants
--   the Amazon ECS container agent permission to make Amazon Web Services
--   API calls on your behalf. The task execution IAM role is required
--   depending on the requirements of your task. For more information, see
--   <a>Amazon ECS task execution IAM role</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
[$sel:executionRoleArn:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The task launch types the task definition was validated against. To
--   determine which task launch types the task definition is validated
--   for, see the TaskDefinition$compatibilities parameter.
[$sel:requiresCompatibilities:TaskDefinition'] :: TaskDefinition -> Maybe [Compatibility]

-- | The ephemeral storage settings to use for tasks run with the task
--   definition.
[$sel:ephemeralStorage:TaskDefinition'] :: TaskDefinition -> Maybe EphemeralStorage

-- | The process namespace to use for the containers in the task. The valid
--   values are <tt>host</tt> or <tt>task</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> PID mode on the same container instance share the same
--   process namespace with the host Amazon EC2 instance. If <tt>task</tt>
--   is specified, all containers within the specified task share the same
--   process namespace. If no value is specified, the default is a private
--   namespace. For more information, see <a>PID settings</a> in the
--   <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
[$sel:pidMode:TaskDefinition'] :: TaskDefinition -> Maybe PidMode

-- | The name of a family that this task definition is registered to. Up to
--   255 letters (uppercase and lowercase), numbers, hyphens, and
--   underscores are allowed.
--   
--   A family groups multiple versions of a task definition. Amazon ECS
--   gives the first task definition that you registered to a family a
--   revision number of 1. Amazon ECS gives sequential revision numbers to
--   each task definition that you add.
[$sel:family:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The IPC resource namespace to use for the containers in the task. The
--   valid values are <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If
--   <tt>host</tt> is specified, then all containers within the tasks that
--   specified the <tt>host</tt> IPC mode on the same container instance
--   share the same IPC resources with the host Amazon EC2 instance. If
--   <tt>task</tt> is specified, all containers within the specified task
--   share the same IPC resources. If <tt>none</tt> is specified, then IPC
--   resources within the containers of a task are private and not shared
--   with other containers in a task or on the container instance. If no
--   value is specified, then the IPC resource namespace sharing depends on
--   the Docker daemon setting on the container instance. For more
--   information, see <a>IPC settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
[$sel:ipcMode:TaskDefinition'] :: TaskDefinition -> Maybe IpcMode

-- | A list of container definitions in JSON format that describe the
--   different containers that make up your task. For more information
--   about container definition parameters and defaults, see <a>Amazon ECS
--   Task Definitions</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
[$sel:containerDefinitions:TaskDefinition'] :: TaskDefinition -> Maybe [ContainerDefinition]

-- | The amount (in MiB) of memory used by the task.
--   
--   If your tasks will be run on Amazon EC2 instances, you must specify
--   either a task-level memory value or a container-level memory value.
--   This field is optional and any value can be used. If a task-level
--   memory value is specified then the container-level memory value is
--   optional. For more information regarding container-level memory and
--   memory reservation, see <a>ContainerDefinition</a>.
--   
--   If your tasks will be run on Fargate, this field is required and you
--   must use one of the following values, which determines your range of
--   valid values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
[$sel:memory:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The configuration details for the App Mesh proxy.
--   
--   Your Amazon ECS container instances require at least version 1.26.0 of
--   the container agent and at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package to enable a proxy configuration. If your
--   container instances are launched from the Amazon ECS-optimized AMI
--   version <tt>20190301</tt> or later, then they contain the required
--   versions of the container agent and <tt>ecs-init</tt>. For more
--   information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:proxyConfiguration:TaskDefinition'] :: TaskDefinition -> Maybe ProxyConfiguration

-- | The short name or full Amazon Resource Name (ARN) of the Identity and
--   Access Management role that grants containers in the task permission
--   to call Amazon Web Services APIs on your behalf. For more information,
--   see <a>Amazon ECS Task Role</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   IAM roles for tasks on Windows require that the
--   <tt>-EnableTaskIAMRole</tt> option is set when you launch the Amazon
--   ECS-optimized Windows AMI. Your containers must also run some
--   configuration code in order to take advantage of the feature. For more
--   information, see <a>Windows IAM roles for tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:taskRoleArn:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The Unix timestamp for when the task definition was deregistered.
[$sel:deregisteredAt:TaskDefinition'] :: TaskDefinition -> Maybe POSIX

-- | An array of placement constraint objects to use for tasks.
--   
--   This parameter is not supported for tasks run on Fargate.
[$sel:placementConstraints:TaskDefinition'] :: TaskDefinition -> Maybe [TaskDefinitionPlacementConstraint]

-- | The Unix timestamp for when the task definition was registered.
[$sel:registeredAt:TaskDefinition'] :: TaskDefinition -> Maybe POSIX

-- | The Docker networking mode to use for the containers in the task. The
--   valid values are <tt>none</tt>, <tt>bridge</tt>, <tt>awsvpc</tt>, and
--   <tt>host</tt>. If no network mode is specified, the default is
--   <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
[$sel:networkMode:TaskDefinition'] :: TaskDefinition -> Maybe NetworkMode

-- | The full Amazon Resource Name (ARN) of the task definition.
[$sel:taskDefinitionArn:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The task launch types the task definition validated against during
--   task definition registration. For more information, see <a>Amazon ECS
--   launch types</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:compatibilities:TaskDefinition'] :: TaskDefinition -> Maybe [Compatibility]

-- | The principal that registered the task definition.
[$sel:registeredBy:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The revision of the task in a particular family. The revision is a
--   version number of a task definition in a family. When you register a
--   task definition for the first time, the revision is <tt>1</tt>. Each
--   time that you register a new revision of a task definition in the same
--   family, the revision value always increases by one, even if you have
--   deregistered previous revisions in this family.
[$sel:revision:TaskDefinition'] :: TaskDefinition -> Maybe Int

-- | The list of data volume definitions for the task. For more
--   information, see <a>Using data volumes in tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>host</tt> and <tt>sourcePath</tt> parameters are not supported
--   for tasks run on Fargate.
[$sel:volumes:TaskDefinition'] :: TaskDefinition -> Maybe [Volume]

-- | The number of <tt>cpu</tt> units used by the task. If you are using
--   the EC2 launch type, this field is optional and any value can be used.
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of valid values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
[$sel:cpu:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The container instance attributes required by your task. When an
--   Amazon EC2 instance is registered to your cluster, the Amazon ECS
--   container agent assigns some standard attributes to the instance. You
--   can apply custom attributes, specified as key-value pairs using the
--   Amazon ECS console or the PutAttributes API. These attributes are used
--   when considering task placement for tasks hosted on Amazon EC2
--   instances. For more information, see <a>Attributes</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   This parameter is not supported for tasks run on Fargate.
[$sel:requiresAttributes:TaskDefinition'] :: TaskDefinition -> Maybe [Attribute]

-- | Create a value of <a>TaskDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:TaskDefinition'</a>, <a>taskDefinition_status</a> - The
--   status of the task definition.
--   
--   <a>$sel:inferenceAccelerators:TaskDefinition'</a>,
--   <a>taskDefinition_inferenceAccelerators</a> - The Elastic Inference
--   accelerator associated with the task.
--   
--   <a>$sel:executionRoleArn:TaskDefinition'</a>,
--   <a>taskDefinition_executionRoleArn</a> - The Amazon Resource Name
--   (ARN) of the task execution role that grants the Amazon ECS container
--   agent permission to make Amazon Web Services API calls on your behalf.
--   The task execution IAM role is required depending on the requirements
--   of your task. For more information, see <a>Amazon ECS task execution
--   IAM role</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:requiresCompatibilities:TaskDefinition'</a>,
--   <a>taskDefinition_requiresCompatibilities</a> - The task launch types
--   the task definition was validated against. To determine which task
--   launch types the task definition is validated for, see the
--   TaskDefinition$compatibilities parameter.
--   
--   <a>$sel:ephemeralStorage:TaskDefinition'</a>,
--   <a>taskDefinition_ephemeralStorage</a> - The ephemeral storage
--   settings to use for tasks run with the task definition.
--   
--   <a>$sel:pidMode:TaskDefinition'</a>, <a>taskDefinition_pidMode</a> -
--   The process namespace to use for the containers in the task. The valid
--   values are <tt>host</tt> or <tt>task</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> PID mode on the same container instance share the same
--   process namespace with the host Amazon EC2 instance. If <tt>task</tt>
--   is specified, all containers within the specified task share the same
--   process namespace. If no value is specified, the default is a private
--   namespace. For more information, see <a>PID settings</a> in the
--   <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:family:TaskDefinition'</a>, <a>taskDefinition_family</a> - The
--   name of a family that this task definition is registered to. Up to 255
--   letters (uppercase and lowercase), numbers, hyphens, and underscores
--   are allowed.
--   
--   A family groups multiple versions of a task definition. Amazon ECS
--   gives the first task definition that you registered to a family a
--   revision number of 1. Amazon ECS gives sequential revision numbers to
--   each task definition that you add.
--   
--   <a>$sel:ipcMode:TaskDefinition'</a>, <a>taskDefinition_ipcMode</a> -
--   The IPC resource namespace to use for the containers in the task. The
--   valid values are <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If
--   <tt>host</tt> is specified, then all containers within the tasks that
--   specified the <tt>host</tt> IPC mode on the same container instance
--   share the same IPC resources with the host Amazon EC2 instance. If
--   <tt>task</tt> is specified, all containers within the specified task
--   share the same IPC resources. If <tt>none</tt> is specified, then IPC
--   resources within the containers of a task are private and not shared
--   with other containers in a task or on the container instance. If no
--   value is specified, then the IPC resource namespace sharing depends on
--   the Docker daemon setting on the container instance. For more
--   information, see <a>IPC settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:containerDefinitions:TaskDefinition'</a>,
--   <a>taskDefinition_containerDefinitions</a> - A list of container
--   definitions in JSON format that describe the different containers that
--   make up your task. For more information about container definition
--   parameters and defaults, see <a>Amazon ECS Task Definitions</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:memory:TaskDefinition'</a>, <a>taskDefinition_memory</a> - The
--   amount (in MiB) of memory used by the task.
--   
--   If your tasks will be run on Amazon EC2 instances, you must specify
--   either a task-level memory value or a container-level memory value.
--   This field is optional and any value can be used. If a task-level
--   memory value is specified then the container-level memory value is
--   optional. For more information regarding container-level memory and
--   memory reservation, see <a>ContainerDefinition</a>.
--   
--   If your tasks will be run on Fargate, this field is required and you
--   must use one of the following values, which determines your range of
--   valid values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
--   
--   <a>$sel:proxyConfiguration:TaskDefinition'</a>,
--   <a>taskDefinition_proxyConfiguration</a> - The configuration details
--   for the App Mesh proxy.
--   
--   Your Amazon ECS container instances require at least version 1.26.0 of
--   the container agent and at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package to enable a proxy configuration. If your
--   container instances are launched from the Amazon ECS-optimized AMI
--   version <tt>20190301</tt> or later, then they contain the required
--   versions of the container agent and <tt>ecs-init</tt>. For more
--   information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:taskRoleArn:TaskDefinition'</a>,
--   <a>taskDefinition_taskRoleArn</a> - The short name or full Amazon
--   Resource Name (ARN) of the Identity and Access Management role that
--   grants containers in the task permission to call Amazon Web Services
--   APIs on your behalf. For more information, see <a>Amazon ECS Task
--   Role</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   IAM roles for tasks on Windows require that the
--   <tt>-EnableTaskIAMRole</tt> option is set when you launch the Amazon
--   ECS-optimized Windows AMI. Your containers must also run some
--   configuration code in order to take advantage of the feature. For more
--   information, see <a>Windows IAM roles for tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:deregisteredAt:TaskDefinition'</a>,
--   <a>taskDefinition_deregisteredAt</a> - The Unix timestamp for when the
--   task definition was deregistered.
--   
--   <a>$sel:placementConstraints:TaskDefinition'</a>,
--   <a>taskDefinition_placementConstraints</a> - An array of placement
--   constraint objects to use for tasks.
--   
--   This parameter is not supported for tasks run on Fargate.
--   
--   <a>$sel:registeredAt:TaskDefinition'</a>,
--   <a>taskDefinition_registeredAt</a> - The Unix timestamp for when the
--   task definition was registered.
--   
--   <a>$sel:networkMode:TaskDefinition'</a>,
--   <a>taskDefinition_networkMode</a> - The Docker networking mode to use
--   for the containers in the task. The valid values are <tt>none</tt>,
--   <tt>bridge</tt>, <tt>awsvpc</tt>, and <tt>host</tt>. If no network
--   mode is specified, the default is <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
--   
--   <a>$sel:taskDefinitionArn:TaskDefinition'</a>,
--   <a>taskDefinition_taskDefinitionArn</a> - The full Amazon Resource
--   Name (ARN) of the task definition.
--   
--   <a>$sel:compatibilities:TaskDefinition'</a>,
--   <a>taskDefinition_compatibilities</a> - The task launch types the task
--   definition validated against during task definition registration. For
--   more information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:registeredBy:TaskDefinition'</a>,
--   <a>taskDefinition_registeredBy</a> - The principal that registered the
--   task definition.
--   
--   <a>$sel:revision:TaskDefinition'</a>, <a>taskDefinition_revision</a> -
--   The revision of the task in a particular family. The revision is a
--   version number of a task definition in a family. When you register a
--   task definition for the first time, the revision is <tt>1</tt>. Each
--   time that you register a new revision of a task definition in the same
--   family, the revision value always increases by one, even if you have
--   deregistered previous revisions in this family.
--   
--   <a>$sel:volumes:TaskDefinition'</a>, <a>taskDefinition_volumes</a> -
--   The list of data volume definitions for the task. For more
--   information, see <a>Using data volumes in tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>host</tt> and <tt>sourcePath</tt> parameters are not supported
--   for tasks run on Fargate.
--   
--   <a>$sel:cpu:TaskDefinition'</a>, <a>taskDefinition_cpu</a> - The
--   number of <tt>cpu</tt> units used by the task. If you are using the
--   EC2 launch type, this field is optional and any value can be used. If
--   you are using the Fargate launch type, this field is required and you
--   must use one of the following values, which determines your range of
--   valid values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
--   
--   <a>$sel:requiresAttributes:TaskDefinition'</a>,
--   <a>taskDefinition_requiresAttributes</a> - The container instance
--   attributes required by your task. When an Amazon EC2 instance is
--   registered to your cluster, the Amazon ECS container agent assigns
--   some standard attributes to the instance. You can apply custom
--   attributes, specified as key-value pairs using the Amazon ECS console
--   or the PutAttributes API. These attributes are used when considering
--   task placement for tasks hosted on Amazon EC2 instances. For more
--   information, see <a>Attributes</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   This parameter is not supported for tasks run on Fargate.
newTaskDefinition :: TaskDefinition

-- | The status of the task definition.
taskDefinition_status :: Lens' TaskDefinition (Maybe TaskDefinitionStatus)

-- | The Elastic Inference accelerator associated with the task.
taskDefinition_inferenceAccelerators :: Lens' TaskDefinition (Maybe [InferenceAccelerator])

-- | The Amazon Resource Name (ARN) of the task execution role that grants
--   the Amazon ECS container agent permission to make Amazon Web Services
--   API calls on your behalf. The task execution IAM role is required
--   depending on the requirements of your task. For more information, see
--   <a>Amazon ECS task execution IAM role</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
taskDefinition_executionRoleArn :: Lens' TaskDefinition (Maybe Text)

-- | The task launch types the task definition was validated against. To
--   determine which task launch types the task definition is validated
--   for, see the TaskDefinition$compatibilities parameter.
taskDefinition_requiresCompatibilities :: Lens' TaskDefinition (Maybe [Compatibility])

-- | The ephemeral storage settings to use for tasks run with the task
--   definition.
taskDefinition_ephemeralStorage :: Lens' TaskDefinition (Maybe EphemeralStorage)

-- | The process namespace to use for the containers in the task. The valid
--   values are <tt>host</tt> or <tt>task</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> PID mode on the same container instance share the same
--   process namespace with the host Amazon EC2 instance. If <tt>task</tt>
--   is specified, all containers within the specified task share the same
--   process namespace. If no value is specified, the default is a private
--   namespace. For more information, see <a>PID settings</a> in the
--   <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
taskDefinition_pidMode :: Lens' TaskDefinition (Maybe PidMode)

-- | The name of a family that this task definition is registered to. Up to
--   255 letters (uppercase and lowercase), numbers, hyphens, and
--   underscores are allowed.
--   
--   A family groups multiple versions of a task definition. Amazon ECS
--   gives the first task definition that you registered to a family a
--   revision number of 1. Amazon ECS gives sequential revision numbers to
--   each task definition that you add.
taskDefinition_family :: Lens' TaskDefinition (Maybe Text)

-- | The IPC resource namespace to use for the containers in the task. The
--   valid values are <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If
--   <tt>host</tt> is specified, then all containers within the tasks that
--   specified the <tt>host</tt> IPC mode on the same container instance
--   share the same IPC resources with the host Amazon EC2 instance. If
--   <tt>task</tt> is specified, all containers within the specified task
--   share the same IPC resources. If <tt>none</tt> is specified, then IPC
--   resources within the containers of a task are private and not shared
--   with other containers in a task or on the container instance. If no
--   value is specified, then the IPC resource namespace sharing depends on
--   the Docker daemon setting on the container instance. For more
--   information, see <a>IPC settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
taskDefinition_ipcMode :: Lens' TaskDefinition (Maybe IpcMode)

-- | A list of container definitions in JSON format that describe the
--   different containers that make up your task. For more information
--   about container definition parameters and defaults, see <a>Amazon ECS
--   Task Definitions</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
taskDefinition_containerDefinitions :: Lens' TaskDefinition (Maybe [ContainerDefinition])

-- | The amount (in MiB) of memory used by the task.
--   
--   If your tasks will be run on Amazon EC2 instances, you must specify
--   either a task-level memory value or a container-level memory value.
--   This field is optional and any value can be used. If a task-level
--   memory value is specified then the container-level memory value is
--   optional. For more information regarding container-level memory and
--   memory reservation, see <a>ContainerDefinition</a>.
--   
--   If your tasks will be run on Fargate, this field is required and you
--   must use one of the following values, which determines your range of
--   valid values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
taskDefinition_memory :: Lens' TaskDefinition (Maybe Text)

-- | The configuration details for the App Mesh proxy.
--   
--   Your Amazon ECS container instances require at least version 1.26.0 of
--   the container agent and at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package to enable a proxy configuration. If your
--   container instances are launched from the Amazon ECS-optimized AMI
--   version <tt>20190301</tt> or later, then they contain the required
--   versions of the container agent and <tt>ecs-init</tt>. For more
--   information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
taskDefinition_proxyConfiguration :: Lens' TaskDefinition (Maybe ProxyConfiguration)

-- | The short name or full Amazon Resource Name (ARN) of the Identity and
--   Access Management role that grants containers in the task permission
--   to call Amazon Web Services APIs on your behalf. For more information,
--   see <a>Amazon ECS Task Role</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   IAM roles for tasks on Windows require that the
--   <tt>-EnableTaskIAMRole</tt> option is set when you launch the Amazon
--   ECS-optimized Windows AMI. Your containers must also run some
--   configuration code in order to take advantage of the feature. For more
--   information, see <a>Windows IAM roles for tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
taskDefinition_taskRoleArn :: Lens' TaskDefinition (Maybe Text)

-- | The Unix timestamp for when the task definition was deregistered.
taskDefinition_deregisteredAt :: Lens' TaskDefinition (Maybe UTCTime)

-- | An array of placement constraint objects to use for tasks.
--   
--   This parameter is not supported for tasks run on Fargate.
taskDefinition_placementConstraints :: Lens' TaskDefinition (Maybe [TaskDefinitionPlacementConstraint])

-- | The Unix timestamp for when the task definition was registered.
taskDefinition_registeredAt :: Lens' TaskDefinition (Maybe UTCTime)

-- | The Docker networking mode to use for the containers in the task. The
--   valid values are <tt>none</tt>, <tt>bridge</tt>, <tt>awsvpc</tt>, and
--   <tt>host</tt>. If no network mode is specified, the default is
--   <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
taskDefinition_networkMode :: Lens' TaskDefinition (Maybe NetworkMode)

-- | The full Amazon Resource Name (ARN) of the task definition.
taskDefinition_taskDefinitionArn :: Lens' TaskDefinition (Maybe Text)

-- | The task launch types the task definition validated against during
--   task definition registration. For more information, see <a>Amazon ECS
--   launch types</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
taskDefinition_compatibilities :: Lens' TaskDefinition (Maybe [Compatibility])

-- | The principal that registered the task definition.
taskDefinition_registeredBy :: Lens' TaskDefinition (Maybe Text)

-- | The revision of the task in a particular family. The revision is a
--   version number of a task definition in a family. When you register a
--   task definition for the first time, the revision is <tt>1</tt>. Each
--   time that you register a new revision of a task definition in the same
--   family, the revision value always increases by one, even if you have
--   deregistered previous revisions in this family.
taskDefinition_revision :: Lens' TaskDefinition (Maybe Int)

-- | The list of data volume definitions for the task. For more
--   information, see <a>Using data volumes in tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>host</tt> and <tt>sourcePath</tt> parameters are not supported
--   for tasks run on Fargate.
taskDefinition_volumes :: Lens' TaskDefinition (Maybe [Volume])

-- | The number of <tt>cpu</tt> units used by the task. If you are using
--   the EC2 launch type, this field is optional and any value can be used.
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of valid values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
taskDefinition_cpu :: Lens' TaskDefinition (Maybe Text)

-- | The container instance attributes required by your task. When an
--   Amazon EC2 instance is registered to your cluster, the Amazon ECS
--   container agent assigns some standard attributes to the instance. You
--   can apply custom attributes, specified as key-value pairs using the
--   Amazon ECS console or the PutAttributes API. These attributes are used
--   when considering task placement for tasks hosted on Amazon EC2
--   instances. For more information, see <a>Attributes</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   This parameter is not supported for tasks run on Fargate.
taskDefinition_requiresAttributes :: Lens' TaskDefinition (Maybe [Attribute])
instance GHC.Generics.Generic Amazonka.ECS.Types.TaskDefinition.TaskDefinition
instance GHC.Show.Show Amazonka.ECS.Types.TaskDefinition.TaskDefinition
instance GHC.Read.Read Amazonka.ECS.Types.TaskDefinition.TaskDefinition
instance GHC.Classes.Eq Amazonka.ECS.Types.TaskDefinition.TaskDefinition
instance Data.Aeson.Types.FromJSON.FromJSON Amazonka.ECS.Types.TaskDefinition.TaskDefinition
instance Data.Hashable.Class.Hashable Amazonka.ECS.Types.TaskDefinition.TaskDefinition
instance Control.DeepSeq.NFData Amazonka.ECS.Types.TaskDefinition.TaskDefinition


module Amazonka.ECS.Types

-- | API version <tt>2014-11-13</tt> of the Amazon EC2 Container Service
--   SDK configuration.
defaultService :: Service

-- | You do not have authorization to perform the requested action.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified parameter is invalid. Review the available parameters
--   for the API request.
_InvalidParameterException :: AsError a => Getting (First ServiceError) a ServiceError

-- | These errors are usually caused by a server issue.
_ServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You cannot delete a cluster that has active tasks.
_ClusterContainsTasksException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified platform version does not exist.
_PlatformUnknownException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You cannot delete a cluster that contains services. First, update the
--   service to reduce its desired task count to 0 and then delete the
--   service. For more information, see UpdateService and DeleteService.
_ClusterContainsServicesException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified task set could not be found. You can view your available
--   task sets with DescribeTaskSets. Task sets are specific to each
--   cluster, service and Region.
_TaskSetNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You cannot delete a cluster that has registered container instances.
--   First, deregister the container instances before you can delete the
--   cluster. For more information, see DeregisterContainerInstance.
_ClusterContainsContainerInstancesException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified service is not active. You can't update a service that
--   is inactive. If you have previously deleted a service, you can
--   re-create it with CreateService.
_ServiceNotActiveException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified cluster could not be found. You can view your available
--   clusters with ListClusters. Amazon ECS clusters are Region-specific.
_ClusterNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is no update available for this Amazon ECS container agent. This
--   could be because the agent is already running the latest version, or
--   it is so old that there is no update path to the current version.
_NoUpdateAvailableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified task is not supported in this Region.
_UnsupportedFeatureException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified service could not be found. You can view your available
--   services with ListServices. Amazon ECS services are cluster-specific
--   and Region-specific.
_ServiceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified platform version does not satisfy the task definition's
--   required capabilities.
_PlatformTaskDefinitionIncompatibilityException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Amazon ECS is unable to determine the current version of the Amazon
--   ECS container agent on the container instance and does not have enough
--   information to proceed with an update. This could be because the agent
--   running on the container instance is an older or custom version that
--   does not use our version information.
_MissingVersionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is already a current Amazon ECS container agent update in
--   progress on the specified container instance. If the container agent
--   becomes disconnected while it is in a transitional stage, such as
--   <tt>PENDING</tt> or <tt>STAGING</tt>, the update process can get stuck
--   in that state. However, when the agent reconnects, it resumes where it
--   stopped previously.
_UpdateInProgressException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The target container is not properly configured with the execute
--   command agent or the container is no longer active or running.
_TargetNotConnectedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your Amazon Web Services account has been blocked. For more
--   information, contact <a>Amazon Web Services Support</a>.
_BlockedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified target could not be found. You can view your available
--   container instances with ListContainerInstances. Amazon ECS container
--   instances are cluster-specific and Region-specific.
_TargetNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You can apply up to 10 custom attributes per resource. You can view
--   the attributes of a resource with ListAttributes. You can remove
--   existing attributes on a resource with DeleteAttributes.
_AttributeLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | These errors are usually caused by a client action, such as using an
--   action or resource on behalf of a user that doesn't have permissions
--   to use the action or resource, or specifying an identifier that is not
--   valid.
_ClientException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified resource could not be found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The limit for the resource has been exceeded.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified resource is in-use and cannot be removed.
_ResourceInUseException :: AsError a => Getting (First ServiceError) a ServiceError
newtype AgentUpdateStatus
AgentUpdateStatus' :: Text -> AgentUpdateStatus
[fromAgentUpdateStatus] :: AgentUpdateStatus -> Text
pattern AgentUpdateStatus_FAILED :: AgentUpdateStatus
pattern AgentUpdateStatus_PENDING :: AgentUpdateStatus
pattern AgentUpdateStatus_STAGED :: AgentUpdateStatus
pattern AgentUpdateStatus_STAGING :: AgentUpdateStatus
pattern AgentUpdateStatus_UPDATED :: AgentUpdateStatus
pattern AgentUpdateStatus_UPDATING :: AgentUpdateStatus
newtype AssignPublicIp
AssignPublicIp' :: Text -> AssignPublicIp
[fromAssignPublicIp] :: AssignPublicIp -> Text
pattern AssignPublicIp_DISABLED :: AssignPublicIp
pattern AssignPublicIp_ENABLED :: AssignPublicIp
newtype CapacityProviderField
CapacityProviderField' :: Text -> CapacityProviderField
[fromCapacityProviderField] :: CapacityProviderField -> Text
pattern CapacityProviderField_TAGS :: CapacityProviderField
newtype CapacityProviderStatus
CapacityProviderStatus' :: Text -> CapacityProviderStatus
[fromCapacityProviderStatus] :: CapacityProviderStatus -> Text
pattern CapacityProviderStatus_ACTIVE :: CapacityProviderStatus
pattern CapacityProviderStatus_INACTIVE :: CapacityProviderStatus
newtype CapacityProviderUpdateStatus
CapacityProviderUpdateStatus' :: Text -> CapacityProviderUpdateStatus
[fromCapacityProviderUpdateStatus] :: CapacityProviderUpdateStatus -> Text
pattern CapacityProviderUpdateStatus_DELETE_COMPLETE :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_DELETE_FAILED :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_DELETE_IN_PROGRESS :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_UPDATE_COMPLETE :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_UPDATE_FAILED :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_UPDATE_IN_PROGRESS :: CapacityProviderUpdateStatus
newtype ClusterField
ClusterField' :: Text -> ClusterField
[fromClusterField] :: ClusterField -> Text
pattern ClusterField_ATTACHMENTS :: ClusterField
pattern ClusterField_CONFIGURATIONS :: ClusterField
pattern ClusterField_SETTINGS :: ClusterField
pattern ClusterField_STATISTICS :: ClusterField
pattern ClusterField_TAGS :: ClusterField
newtype ClusterSettingName
ClusterSettingName' :: Text -> ClusterSettingName
[fromClusterSettingName] :: ClusterSettingName -> Text
pattern ClusterSettingName_ContainerInsights :: ClusterSettingName
newtype Compatibility
Compatibility' :: Text -> Compatibility
[fromCompatibility] :: Compatibility -> Text
pattern Compatibility_EC2 :: Compatibility
pattern Compatibility_EXTERNAL :: Compatibility
pattern Compatibility_FARGATE :: Compatibility
newtype Connectivity
Connectivity' :: Text -> Connectivity
[fromConnectivity] :: Connectivity -> Text
pattern Connectivity_CONNECTED :: Connectivity
pattern Connectivity_DISCONNECTED :: Connectivity
newtype ContainerCondition
ContainerCondition' :: Text -> ContainerCondition
[fromContainerCondition] :: ContainerCondition -> Text
pattern ContainerCondition_COMPLETE :: ContainerCondition
pattern ContainerCondition_HEALTHY :: ContainerCondition
pattern ContainerCondition_START :: ContainerCondition
pattern ContainerCondition_SUCCESS :: ContainerCondition
newtype ContainerInstanceField
ContainerInstanceField' :: Text -> ContainerInstanceField
[fromContainerInstanceField] :: ContainerInstanceField -> Text
pattern ContainerInstanceField_TAGS :: ContainerInstanceField
newtype ContainerInstanceStatus
ContainerInstanceStatus' :: Text -> ContainerInstanceStatus
[fromContainerInstanceStatus] :: ContainerInstanceStatus -> Text
pattern ContainerInstanceStatus_ACTIVE :: ContainerInstanceStatus
pattern ContainerInstanceStatus_DEREGISTERING :: ContainerInstanceStatus
pattern ContainerInstanceStatus_DRAINING :: ContainerInstanceStatus
pattern ContainerInstanceStatus_REGISTERING :: ContainerInstanceStatus
pattern ContainerInstanceStatus_REGISTRATION_FAILED :: ContainerInstanceStatus
newtype DeploymentControllerType
DeploymentControllerType' :: Text -> DeploymentControllerType
[fromDeploymentControllerType] :: DeploymentControllerType -> Text
pattern DeploymentControllerType_CODE_DEPLOY :: DeploymentControllerType
pattern DeploymentControllerType_ECS :: DeploymentControllerType
pattern DeploymentControllerType_EXTERNAL :: DeploymentControllerType
newtype DeploymentRolloutState
DeploymentRolloutState' :: Text -> DeploymentRolloutState
[fromDeploymentRolloutState] :: DeploymentRolloutState -> Text
pattern DeploymentRolloutState_COMPLETED :: DeploymentRolloutState
pattern DeploymentRolloutState_FAILED :: DeploymentRolloutState
pattern DeploymentRolloutState_IN_PROGRESS :: DeploymentRolloutState
newtype DesiredStatus
DesiredStatus' :: Text -> DesiredStatus
[fromDesiredStatus] :: DesiredStatus -> Text
pattern DesiredStatus_PENDING :: DesiredStatus
pattern DesiredStatus_RUNNING :: DesiredStatus
pattern DesiredStatus_STOPPED :: DesiredStatus
newtype DeviceCgroupPermission
DeviceCgroupPermission' :: Text -> DeviceCgroupPermission
[fromDeviceCgroupPermission] :: DeviceCgroupPermission -> Text
pattern DeviceCgroupPermission_Mknod :: DeviceCgroupPermission
pattern DeviceCgroupPermission_Read :: DeviceCgroupPermission
pattern DeviceCgroupPermission_Write :: DeviceCgroupPermission
newtype EFSAuthorizationConfigIAM
EFSAuthorizationConfigIAM' :: Text -> EFSAuthorizationConfigIAM
[fromEFSAuthorizationConfigIAM] :: EFSAuthorizationConfigIAM -> Text
pattern EFSAuthorizationConfigIAM_DISABLED :: EFSAuthorizationConfigIAM
pattern EFSAuthorizationConfigIAM_ENABLED :: EFSAuthorizationConfigIAM
newtype EFSTransitEncryption
EFSTransitEncryption' :: Text -> EFSTransitEncryption
[fromEFSTransitEncryption] :: EFSTransitEncryption -> Text
pattern EFSTransitEncryption_DISABLED :: EFSTransitEncryption
pattern EFSTransitEncryption_ENABLED :: EFSTransitEncryption
newtype EnvironmentFileType
EnvironmentFileType' :: Text -> EnvironmentFileType
[fromEnvironmentFileType] :: EnvironmentFileType -> Text
pattern EnvironmentFileType_S3 :: EnvironmentFileType
newtype ExecuteCommandLogging
ExecuteCommandLogging' :: Text -> ExecuteCommandLogging
[fromExecuteCommandLogging] :: ExecuteCommandLogging -> Text
pattern ExecuteCommandLogging_DEFAULT :: ExecuteCommandLogging
pattern ExecuteCommandLogging_NONE :: ExecuteCommandLogging
pattern ExecuteCommandLogging_OVERRIDE :: ExecuteCommandLogging
newtype FirelensConfigurationType
FirelensConfigurationType' :: Text -> FirelensConfigurationType
[fromFirelensConfigurationType] :: FirelensConfigurationType -> Text
pattern FirelensConfigurationType_Fluentbit :: FirelensConfigurationType
pattern FirelensConfigurationType_Fluentd :: FirelensConfigurationType
newtype HealthStatus
HealthStatus' :: Text -> HealthStatus
[fromHealthStatus] :: HealthStatus -> Text
pattern HealthStatus_HEALTHY :: HealthStatus
pattern HealthStatus_UNHEALTHY :: HealthStatus
pattern HealthStatus_UNKNOWN :: HealthStatus
newtype IpcMode
IpcMode' :: Text -> IpcMode
[fromIpcMode] :: IpcMode -> Text
pattern IpcMode_Host :: IpcMode
pattern IpcMode_None :: IpcMode
pattern IpcMode_Task :: IpcMode
newtype LaunchType
LaunchType' :: Text -> LaunchType
[fromLaunchType] :: LaunchType -> Text
pattern LaunchType_EC2 :: LaunchType
pattern LaunchType_EXTERNAL :: LaunchType
pattern LaunchType_FARGATE :: LaunchType
newtype LogDriver
LogDriver' :: Text -> LogDriver
[fromLogDriver] :: LogDriver -> Text
pattern LogDriver_Awsfirelens :: LogDriver
pattern LogDriver_Awslogs :: LogDriver
pattern LogDriver_Fluentd :: LogDriver
pattern LogDriver_Gelf :: LogDriver
pattern LogDriver_Journald :: LogDriver
pattern LogDriver_Json_file :: LogDriver
pattern LogDriver_Splunk :: LogDriver
pattern LogDriver_Syslog :: LogDriver
newtype ManagedAgentName
ManagedAgentName' :: Text -> ManagedAgentName
[fromManagedAgentName] :: ManagedAgentName -> Text
pattern ManagedAgentName_ExecuteCommandAgent :: ManagedAgentName
newtype ManagedScalingStatus
ManagedScalingStatus' :: Text -> ManagedScalingStatus
[fromManagedScalingStatus] :: ManagedScalingStatus -> Text
pattern ManagedScalingStatus_DISABLED :: ManagedScalingStatus
pattern ManagedScalingStatus_ENABLED :: ManagedScalingStatus
newtype ManagedTerminationProtection
ManagedTerminationProtection' :: Text -> ManagedTerminationProtection
[fromManagedTerminationProtection] :: ManagedTerminationProtection -> Text
pattern ManagedTerminationProtection_DISABLED :: ManagedTerminationProtection
pattern ManagedTerminationProtection_ENABLED :: ManagedTerminationProtection
newtype NetworkMode
NetworkMode' :: Text -> NetworkMode
[fromNetworkMode] :: NetworkMode -> Text
pattern NetworkMode_Awsvpc :: NetworkMode
pattern NetworkMode_Bridge :: NetworkMode
pattern NetworkMode_Host :: NetworkMode
pattern NetworkMode_None :: NetworkMode
newtype PidMode
PidMode' :: Text -> PidMode
[fromPidMode] :: PidMode -> Text
pattern PidMode_Host :: PidMode
pattern PidMode_Task :: PidMode
newtype PlacementConstraintType
PlacementConstraintType' :: Text -> PlacementConstraintType
[fromPlacementConstraintType] :: PlacementConstraintType -> Text
pattern PlacementConstraintType_DistinctInstance :: PlacementConstraintType
pattern PlacementConstraintType_MemberOf :: PlacementConstraintType
newtype PlacementStrategyType
PlacementStrategyType' :: Text -> PlacementStrategyType
[fromPlacementStrategyType] :: PlacementStrategyType -> Text
pattern PlacementStrategyType_Binpack :: PlacementStrategyType
pattern PlacementStrategyType_Random :: PlacementStrategyType
pattern PlacementStrategyType_Spread :: PlacementStrategyType
newtype PlatformDeviceType
PlatformDeviceType' :: Text -> PlatformDeviceType
[fromPlatformDeviceType] :: PlatformDeviceType -> Text
pattern PlatformDeviceType_GPU :: PlatformDeviceType
newtype PropagateTags
PropagateTags' :: Text -> PropagateTags
[fromPropagateTags] :: PropagateTags -> Text
pattern PropagateTags_SERVICE :: PropagateTags
pattern PropagateTags_TASK_DEFINITION :: PropagateTags
newtype ProxyConfigurationType
ProxyConfigurationType' :: Text -> ProxyConfigurationType
[fromProxyConfigurationType] :: ProxyConfigurationType -> Text
pattern ProxyConfigurationType_APPMESH :: ProxyConfigurationType
newtype ResourceType
ResourceType' :: Text -> ResourceType
[fromResourceType] :: ResourceType -> Text
pattern ResourceType_GPU :: ResourceType
pattern ResourceType_InferenceAccelerator :: ResourceType
newtype ScaleUnit
ScaleUnit' :: Text -> ScaleUnit
[fromScaleUnit] :: ScaleUnit -> Text
pattern ScaleUnit_PERCENT :: ScaleUnit
newtype SchedulingStrategy
SchedulingStrategy' :: Text -> SchedulingStrategy
[fromSchedulingStrategy] :: SchedulingStrategy -> Text
pattern SchedulingStrategy_DAEMON :: SchedulingStrategy
pattern SchedulingStrategy_REPLICA :: SchedulingStrategy
newtype Scope
Scope' :: Text -> Scope
[fromScope] :: Scope -> Text
pattern Scope_Shared :: Scope
pattern Scope_Task :: Scope
newtype ServiceField
ServiceField' :: Text -> ServiceField
[fromServiceField] :: ServiceField -> Text
pattern ServiceField_TAGS :: ServiceField
newtype SettingName
SettingName' :: Text -> SettingName
[fromSettingName] :: SettingName -> Text
pattern SettingName_AwsvpcTrunking :: SettingName
pattern SettingName_ContainerInsights :: SettingName
pattern SettingName_ContainerInstanceLongArnFormat :: SettingName
pattern SettingName_ServiceLongArnFormat :: SettingName
pattern SettingName_TaskLongArnFormat :: SettingName
newtype SortOrder
SortOrder' :: Text -> SortOrder
[fromSortOrder] :: SortOrder -> Text
pattern SortOrder_ASC :: SortOrder
pattern SortOrder_DESC :: SortOrder
newtype StabilityStatus
StabilityStatus' :: Text -> StabilityStatus
[fromStabilityStatus] :: StabilityStatus -> Text
pattern StabilityStatus_STABILIZING :: StabilityStatus
pattern StabilityStatus_STEADY_STATE :: StabilityStatus
newtype TargetType
TargetType' :: Text -> TargetType
[fromTargetType] :: TargetType -> Text
pattern TargetType_Container_instance :: TargetType
newtype TaskDefinitionFamilyStatus
TaskDefinitionFamilyStatus' :: Text -> TaskDefinitionFamilyStatus
[fromTaskDefinitionFamilyStatus] :: TaskDefinitionFamilyStatus -> Text
pattern TaskDefinitionFamilyStatus_ACTIVE :: TaskDefinitionFamilyStatus
pattern TaskDefinitionFamilyStatus_ALL :: TaskDefinitionFamilyStatus
pattern TaskDefinitionFamilyStatus_INACTIVE :: TaskDefinitionFamilyStatus
newtype TaskDefinitionField
TaskDefinitionField' :: Text -> TaskDefinitionField
[fromTaskDefinitionField] :: TaskDefinitionField -> Text
pattern TaskDefinitionField_TAGS :: TaskDefinitionField
newtype TaskDefinitionPlacementConstraintType
TaskDefinitionPlacementConstraintType' :: Text -> TaskDefinitionPlacementConstraintType
[fromTaskDefinitionPlacementConstraintType] :: TaskDefinitionPlacementConstraintType -> Text
pattern TaskDefinitionPlacementConstraintType_MemberOf :: TaskDefinitionPlacementConstraintType
newtype TaskDefinitionStatus
TaskDefinitionStatus' :: Text -> TaskDefinitionStatus
[fromTaskDefinitionStatus] :: TaskDefinitionStatus -> Text
pattern TaskDefinitionStatus_ACTIVE :: TaskDefinitionStatus
pattern TaskDefinitionStatus_INACTIVE :: TaskDefinitionStatus
newtype TaskField
TaskField' :: Text -> TaskField
[fromTaskField] :: TaskField -> Text
pattern TaskField_TAGS :: TaskField
newtype TaskSetField
TaskSetField' :: Text -> TaskSetField
[fromTaskSetField] :: TaskSetField -> Text
pattern TaskSetField_TAGS :: TaskSetField
newtype TaskStopCode
TaskStopCode' :: Text -> TaskStopCode
[fromTaskStopCode] :: TaskStopCode -> Text
pattern TaskStopCode_EssentialContainerExited :: TaskStopCode
pattern TaskStopCode_TaskFailedToStart :: TaskStopCode
pattern TaskStopCode_UserInitiated :: TaskStopCode
newtype TransportProtocol
TransportProtocol' :: Text -> TransportProtocol
[fromTransportProtocol] :: TransportProtocol -> Text
pattern TransportProtocol_Tcp :: TransportProtocol
pattern TransportProtocol_Udp :: TransportProtocol
newtype UlimitName
UlimitName' :: Text -> UlimitName
[fromUlimitName] :: UlimitName -> Text
pattern UlimitName_Core :: UlimitName
pattern UlimitName_Cpu :: UlimitName
pattern UlimitName_Data :: UlimitName
pattern UlimitName_Fsize :: UlimitName
pattern UlimitName_Locks :: UlimitName
pattern UlimitName_Memlock :: UlimitName
pattern UlimitName_Msgqueue :: UlimitName
pattern UlimitName_Nice :: UlimitName
pattern UlimitName_Nofile :: UlimitName
pattern UlimitName_Nproc :: UlimitName
pattern UlimitName_Rss :: UlimitName
pattern UlimitName_Rtprio :: UlimitName
pattern UlimitName_Rttime :: UlimitName
pattern UlimitName_Sigpending :: UlimitName
pattern UlimitName_Stack :: UlimitName

-- | An object representing a container instance or task attachment.
--   
--   <i>See:</i> <a>newAttachment</a> smart constructor.
data Attachment
Attachment' :: Maybe Text -> Maybe [KeyValuePair] -> Maybe Text -> Maybe Text -> Attachment

-- | The status of the attachment. Valid values are <tt>PRECREATED</tt>,
--   <tt>CREATED</tt>, <tt>ATTACHING</tt>, <tt>ATTACHED</tt>,
--   <tt>DETACHING</tt>, <tt>DETACHED</tt>, and <tt>DELETED</tt>.
[$sel:status:Attachment'] :: Attachment -> Maybe Text

-- | Details of the attachment. For elastic network interfaces, this
--   includes the network interface ID, the MAC address, the subnet ID, and
--   the private IPv4 address.
[$sel:details:Attachment'] :: Attachment -> Maybe [KeyValuePair]

-- | The unique identifier for the attachment.
[$sel:id:Attachment'] :: Attachment -> Maybe Text

-- | The type of the attachment, such as <tt>ElasticNetworkInterface</tt>.
[$sel:type':Attachment'] :: Attachment -> Maybe Text

-- | Create a value of <a>Attachment</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:Attachment'</a>, <a>attachment_status</a> - The status
--   of the attachment. Valid values are <tt>PRECREATED</tt>,
--   <tt>CREATED</tt>, <tt>ATTACHING</tt>, <tt>ATTACHED</tt>,
--   <tt>DETACHING</tt>, <tt>DETACHED</tt>, and <tt>DELETED</tt>.
--   
--   <a>$sel:details:Attachment'</a>, <a>attachment_details</a> - Details
--   of the attachment. For elastic network interfaces, this includes the
--   network interface ID, the MAC address, the subnet ID, and the private
--   IPv4 address.
--   
--   <a>$sel:id:Attachment'</a>, <a>attachment_id</a> - The unique
--   identifier for the attachment.
--   
--   <a>$sel:type':Attachment'</a>, <a>attachment_type</a> - The type of
--   the attachment, such as <tt>ElasticNetworkInterface</tt>.
newAttachment :: Attachment

-- | The status of the attachment. Valid values are <tt>PRECREATED</tt>,
--   <tt>CREATED</tt>, <tt>ATTACHING</tt>, <tt>ATTACHED</tt>,
--   <tt>DETACHING</tt>, <tt>DETACHED</tt>, and <tt>DELETED</tt>.
attachment_status :: Lens' Attachment (Maybe Text)

-- | Details of the attachment. For elastic network interfaces, this
--   includes the network interface ID, the MAC address, the subnet ID, and
--   the private IPv4 address.
attachment_details :: Lens' Attachment (Maybe [KeyValuePair])

-- | The unique identifier for the attachment.
attachment_id :: Lens' Attachment (Maybe Text)

-- | The type of the attachment, such as <tt>ElasticNetworkInterface</tt>.
attachment_type :: Lens' Attachment (Maybe Text)

-- | An object representing a change in state for a task attachment.
--   
--   <i>See:</i> <a>newAttachmentStateChange</a> smart constructor.
data AttachmentStateChange
AttachmentStateChange' :: Text -> Text -> AttachmentStateChange

-- | The Amazon Resource Name (ARN) of the attachment.
[$sel:attachmentArn:AttachmentStateChange'] :: AttachmentStateChange -> Text

-- | The status of the attachment.
[$sel:status:AttachmentStateChange'] :: AttachmentStateChange -> Text

-- | Create a value of <a>AttachmentStateChange</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attachmentArn:AttachmentStateChange'</a>,
--   <a>attachmentStateChange_attachmentArn</a> - The Amazon Resource Name
--   (ARN) of the attachment.
--   
--   <a>$sel:status:AttachmentStateChange'</a>,
--   <a>attachmentStateChange_status</a> - The status of the attachment.
newAttachmentStateChange :: Text -> Text -> AttachmentStateChange

-- | The Amazon Resource Name (ARN) of the attachment.
attachmentStateChange_attachmentArn :: Lens' AttachmentStateChange Text

-- | The status of the attachment.
attachmentStateChange_status :: Lens' AttachmentStateChange Text

-- | An attribute is a name-value pair associated with an Amazon ECS
--   object. Attributes enable you to extend the Amazon ECS data model by
--   adding custom metadata to your resources. For more information, see
--   <a>Attributes</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <i>See:</i> <a>newAttribute</a> smart constructor.
data Attribute
Attribute' :: Maybe Text -> Maybe Text -> Maybe TargetType -> Text -> Attribute

-- | The ID of the target. You can specify the short form ID for a resource
--   or the full Amazon Resource Name (ARN).
[$sel:targetId:Attribute'] :: Attribute -> Maybe Text

-- | The value of the attribute. The <tt>value</tt> must contain between 1
--   and 128 characters and may contain letters (uppercase and lowercase),
--   numbers, hyphens, underscores, periods, at signs (@), forward slashes,
--   back slashes, colons, or spaces. The value cannot contain any leading
--   or trailing whitespace.
[$sel:value:Attribute'] :: Attribute -> Maybe Text

-- | The type of the target with which to attach the attribute. This
--   parameter is required if you use the short form ID for a resource
--   instead of the full ARN.
[$sel:targetType:Attribute'] :: Attribute -> Maybe TargetType

-- | The name of the attribute. The <tt>name</tt> must contain between 1
--   and 128 characters and name may contain letters (uppercase and
--   lowercase), numbers, hyphens, underscores, forward slashes, back
--   slashes, or periods.
[$sel:name:Attribute'] :: Attribute -> Text

-- | Create a value of <a>Attribute</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targetId:Attribute'</a>, <a>attribute_targetId</a> - The ID of
--   the target. You can specify the short form ID for a resource or the
--   full Amazon Resource Name (ARN).
--   
--   <a>$sel:value:Attribute'</a>, <a>attribute_value</a> - The value of
--   the attribute. The <tt>value</tt> must contain between 1 and 128
--   characters and may contain letters (uppercase and lowercase), numbers,
--   hyphens, underscores, periods, at signs (@), forward slashes, back
--   slashes, colons, or spaces. The value cannot contain any leading or
--   trailing whitespace.
--   
--   <a>$sel:targetType:Attribute'</a>, <a>attribute_targetType</a> - The
--   type of the target with which to attach the attribute. This parameter
--   is required if you use the short form ID for a resource instead of the
--   full ARN.
--   
--   <a>$sel:name:Attribute'</a>, <a>attribute_name</a> - The name of the
--   attribute. The <tt>name</tt> must contain between 1 and 128 characters
--   and name may contain letters (uppercase and lowercase), numbers,
--   hyphens, underscores, forward slashes, back slashes, or periods.
newAttribute :: Text -> Attribute

-- | The ID of the target. You can specify the short form ID for a resource
--   or the full Amazon Resource Name (ARN).
attribute_targetId :: Lens' Attribute (Maybe Text)

-- | The value of the attribute. The <tt>value</tt> must contain between 1
--   and 128 characters and may contain letters (uppercase and lowercase),
--   numbers, hyphens, underscores, periods, at signs (@), forward slashes,
--   back slashes, colons, or spaces. The value cannot contain any leading
--   or trailing whitespace.
attribute_value :: Lens' Attribute (Maybe Text)

-- | The type of the target with which to attach the attribute. This
--   parameter is required if you use the short form ID for a resource
--   instead of the full ARN.
attribute_targetType :: Lens' Attribute (Maybe TargetType)

-- | The name of the attribute. The <tt>name</tt> must contain between 1
--   and 128 characters and name may contain letters (uppercase and
--   lowercase), numbers, hyphens, underscores, forward slashes, back
--   slashes, or periods.
attribute_name :: Lens' Attribute Text

-- | The details of the Auto Scaling group for the capacity provider.
--   
--   <i>See:</i> <a>newAutoScalingGroupProvider</a> smart constructor.
data AutoScalingGroupProvider
AutoScalingGroupProvider' :: Maybe ManagedScaling -> Maybe ManagedTerminationProtection -> Text -> AutoScalingGroupProvider

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
[$sel:managedScaling:AutoScalingGroupProvider'] :: AutoScalingGroupProvider -> Maybe ManagedScaling

-- | The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
[$sel:managedTerminationProtection:AutoScalingGroupProvider'] :: AutoScalingGroupProvider -> Maybe ManagedTerminationProtection

-- | The Amazon Resource Name (ARN) that identifies the Auto Scaling group.
[$sel:autoScalingGroupArn:AutoScalingGroupProvider'] :: AutoScalingGroupProvider -> Text

-- | Create a value of <a>AutoScalingGroupProvider</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:managedScaling:AutoScalingGroupProvider'</a>,
--   <a>autoScalingGroupProvider_managedScaling</a> - The managed scaling
--   settings for the Auto Scaling group capacity provider.
--   
--   <a>$sel:managedTerminationProtection:AutoScalingGroupProvider'</a>,
--   <a>autoScalingGroupProvider_managedTerminationProtection</a> - The
--   managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
--   
--   <a>$sel:autoScalingGroupArn:AutoScalingGroupProvider'</a>,
--   <a>autoScalingGroupProvider_autoScalingGroupArn</a> - The Amazon
--   Resource Name (ARN) that identifies the Auto Scaling group.
newAutoScalingGroupProvider :: Text -> AutoScalingGroupProvider

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
autoScalingGroupProvider_managedScaling :: Lens' AutoScalingGroupProvider (Maybe ManagedScaling)

-- | The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
autoScalingGroupProvider_managedTerminationProtection :: Lens' AutoScalingGroupProvider (Maybe ManagedTerminationProtection)

-- | The Amazon Resource Name (ARN) that identifies the Auto Scaling group.
autoScalingGroupProvider_autoScalingGroupArn :: Lens' AutoScalingGroupProvider Text

-- | The details of the Auto Scaling group capacity provider to update.
--   
--   <i>See:</i> <a>newAutoScalingGroupProviderUpdate</a> smart
--   constructor.
data AutoScalingGroupProviderUpdate
AutoScalingGroupProviderUpdate' :: Maybe ManagedScaling -> Maybe ManagedTerminationProtection -> AutoScalingGroupProviderUpdate

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
[$sel:managedScaling:AutoScalingGroupProviderUpdate'] :: AutoScalingGroupProviderUpdate -> Maybe ManagedScaling

-- | The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
[$sel:managedTerminationProtection:AutoScalingGroupProviderUpdate'] :: AutoScalingGroupProviderUpdate -> Maybe ManagedTerminationProtection

-- | Create a value of <a>AutoScalingGroupProviderUpdate</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:managedScaling:AutoScalingGroupProviderUpdate'</a>,
--   <a>autoScalingGroupProviderUpdate_managedScaling</a> - The managed
--   scaling settings for the Auto Scaling group capacity provider.
--   
--   
--   <a>$sel:managedTerminationProtection:AutoScalingGroupProviderUpdate'</a>,
--   <a>autoScalingGroupProviderUpdate_managedTerminationProtection</a> -
--   The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
newAutoScalingGroupProviderUpdate :: AutoScalingGroupProviderUpdate

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
autoScalingGroupProviderUpdate_managedScaling :: Lens' AutoScalingGroupProviderUpdate (Maybe ManagedScaling)

-- | The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
autoScalingGroupProviderUpdate_managedTerminationProtection :: Lens' AutoScalingGroupProviderUpdate (Maybe ManagedTerminationProtection)

-- | An object representing the networking details for a task or service.
--   
--   <i>See:</i> <a>newAwsVpcConfiguration</a> smart constructor.
data AwsVpcConfiguration
AwsVpcConfiguration' :: Maybe [Text] -> Maybe AssignPublicIp -> [Text] -> AwsVpcConfiguration

-- | The IDs of the security groups associated with the task or service. If
--   you do not specify a security group, the default security group for
--   the VPC is used. There is a limit of 5 security groups that can be
--   specified per <tt>AwsVpcConfiguration</tt>.
--   
--   All specified security groups must be from the same VPC.
[$sel:securityGroups:AwsVpcConfiguration'] :: AwsVpcConfiguration -> Maybe [Text]

-- | Whether the task's elastic network interface receives a public IP
--   address. The default value is <tt>DISABLED</tt>.
[$sel:assignPublicIp:AwsVpcConfiguration'] :: AwsVpcConfiguration -> Maybe AssignPublicIp

-- | The IDs of the subnets associated with the task or service. There is a
--   limit of 16 subnets that can be specified per
--   <tt>AwsVpcConfiguration</tt>.
--   
--   All specified subnets must be from the same VPC.
[$sel:subnets:AwsVpcConfiguration'] :: AwsVpcConfiguration -> [Text]

-- | Create a value of <a>AwsVpcConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:securityGroups:AwsVpcConfiguration'</a>,
--   <a>awsVpcConfiguration_securityGroups</a> - The IDs of the security
--   groups associated with the task or service. If you do not specify a
--   security group, the default security group for the VPC is used. There
--   is a limit of 5 security groups that can be specified per
--   <tt>AwsVpcConfiguration</tt>.
--   
--   All specified security groups must be from the same VPC.
--   
--   <a>$sel:assignPublicIp:AwsVpcConfiguration'</a>,
--   <a>awsVpcConfiguration_assignPublicIp</a> - Whether the task's elastic
--   network interface receives a public IP address. The default value is
--   <tt>DISABLED</tt>.
--   
--   <a>$sel:subnets:AwsVpcConfiguration'</a>,
--   <a>awsVpcConfiguration_subnets</a> - The IDs of the subnets associated
--   with the task or service. There is a limit of 16 subnets that can be
--   specified per <tt>AwsVpcConfiguration</tt>.
--   
--   All specified subnets must be from the same VPC.
newAwsVpcConfiguration :: AwsVpcConfiguration

-- | The IDs of the security groups associated with the task or service. If
--   you do not specify a security group, the default security group for
--   the VPC is used. There is a limit of 5 security groups that can be
--   specified per <tt>AwsVpcConfiguration</tt>.
--   
--   All specified security groups must be from the same VPC.
awsVpcConfiguration_securityGroups :: Lens' AwsVpcConfiguration (Maybe [Text])

-- | Whether the task's elastic network interface receives a public IP
--   address. The default value is <tt>DISABLED</tt>.
awsVpcConfiguration_assignPublicIp :: Lens' AwsVpcConfiguration (Maybe AssignPublicIp)

-- | The IDs of the subnets associated with the task or service. There is a
--   limit of 16 subnets that can be specified per
--   <tt>AwsVpcConfiguration</tt>.
--   
--   All specified subnets must be from the same VPC.
awsVpcConfiguration_subnets :: Lens' AwsVpcConfiguration [Text]

-- | The details of a capacity provider.
--   
--   <i>See:</i> <a>newCapacityProvider</a> smart constructor.
data CapacityProvider
CapacityProvider' :: Maybe CapacityProviderStatus -> Maybe Text -> Maybe AutoScalingGroupProvider -> Maybe Text -> Maybe CapacityProviderUpdateStatus -> Maybe Text -> Maybe [Tag] -> CapacityProvider

-- | The current status of the capacity provider. Only capacity providers
--   in an <tt>ACTIVE</tt> state can be used in a cluster. When a capacity
--   provider is successfully deleted, it will have an <tt>INACTIVE</tt>
--   status.
[$sel:status:CapacityProvider'] :: CapacityProvider -> Maybe CapacityProviderStatus

-- | The update status reason. This provides further details about the
--   update status for the capacity provider.
[$sel:updateStatusReason:CapacityProvider'] :: CapacityProvider -> Maybe Text

-- | The Auto Scaling group settings for the capacity provider.
[$sel:autoScalingGroupProvider:CapacityProvider'] :: CapacityProvider -> Maybe AutoScalingGroupProvider

-- | The name of the capacity provider.
[$sel:name:CapacityProvider'] :: CapacityProvider -> Maybe Text

-- | The update status of the capacity provider. The following are the
--   possible states that will be returned.
--   
--   <ul>
--   <li><i>DELETE_IN_PROGRESS</i> The capacity provider is in the process
--   of being deleted.</li>
--   <li><i>DELETE_COMPLETE</i> The capacity provider has been successfully
--   deleted and will have an <tt>INACTIVE</tt> status.</li>
--   <li><i>DELETE_FAILED</i> The capacity provider was unable to be
--   deleted. The update status reason will provide further details about
--   why the delete failed.</li>
--   </ul>
[$sel:updateStatus:CapacityProvider'] :: CapacityProvider -> Maybe CapacityProviderUpdateStatus

-- | The Amazon Resource Name (ARN) that identifies the capacity provider.
[$sel:capacityProviderArn:CapacityProvider'] :: CapacityProvider -> Maybe Text

-- | The metadata that you apply to the capacity provider to help you
--   categorize and organize it. Each tag consists of a key and an optional
--   value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:CapacityProvider'] :: CapacityProvider -> Maybe [Tag]

-- | Create a value of <a>CapacityProvider</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CapacityProvider'</a>, <a>capacityProvider_status</a> -
--   The current status of the capacity provider. Only capacity providers
--   in an <tt>ACTIVE</tt> state can be used in a cluster. When a capacity
--   provider is successfully deleted, it will have an <tt>INACTIVE</tt>
--   status.
--   
--   <a>$sel:updateStatusReason:CapacityProvider'</a>,
--   <a>capacityProvider_updateStatusReason</a> - The update status reason.
--   This provides further details about the update status for the capacity
--   provider.
--   
--   <a>$sel:autoScalingGroupProvider:CapacityProvider'</a>,
--   <a>capacityProvider_autoScalingGroupProvider</a> - The Auto Scaling
--   group settings for the capacity provider.
--   
--   <a>$sel:name:CapacityProvider'</a>, <a>capacityProvider_name</a> - The
--   name of the capacity provider.
--   
--   <a>$sel:updateStatus:CapacityProvider'</a>,
--   <a>capacityProvider_updateStatus</a> - The update status of the
--   capacity provider. The following are the possible states that will be
--   returned.
--   
--   <ul>
--   <li><i>DELETE_IN_PROGRESS</i> The capacity provider is in the process
--   of being deleted.</li>
--   <li><i>DELETE_COMPLETE</i> The capacity provider has been successfully
--   deleted and will have an <tt>INACTIVE</tt> status.</li>
--   <li><i>DELETE_FAILED</i> The capacity provider was unable to be
--   deleted. The update status reason will provide further details about
--   why the delete failed.</li>
--   </ul>
--   
--   <a>$sel:capacityProviderArn:CapacityProvider'</a>,
--   <a>capacityProvider_capacityProviderArn</a> - The Amazon Resource Name
--   (ARN) that identifies the capacity provider.
--   
--   <a>$sel:tags:CapacityProvider'</a>, <a>capacityProvider_tags</a> - The
--   metadata that you apply to the capacity provider to help you
--   categorize and organize it. Each tag consists of a key and an optional
--   value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newCapacityProvider :: CapacityProvider

-- | The current status of the capacity provider. Only capacity providers
--   in an <tt>ACTIVE</tt> state can be used in a cluster. When a capacity
--   provider is successfully deleted, it will have an <tt>INACTIVE</tt>
--   status.
capacityProvider_status :: Lens' CapacityProvider (Maybe CapacityProviderStatus)

-- | The update status reason. This provides further details about the
--   update status for the capacity provider.
capacityProvider_updateStatusReason :: Lens' CapacityProvider (Maybe Text)

-- | The Auto Scaling group settings for the capacity provider.
capacityProvider_autoScalingGroupProvider :: Lens' CapacityProvider (Maybe AutoScalingGroupProvider)

-- | The name of the capacity provider.
capacityProvider_name :: Lens' CapacityProvider (Maybe Text)

-- | The update status of the capacity provider. The following are the
--   possible states that will be returned.
--   
--   <ul>
--   <li><i>DELETE_IN_PROGRESS</i> The capacity provider is in the process
--   of being deleted.</li>
--   <li><i>DELETE_COMPLETE</i> The capacity provider has been successfully
--   deleted and will have an <tt>INACTIVE</tt> status.</li>
--   <li><i>DELETE_FAILED</i> The capacity provider was unable to be
--   deleted. The update status reason will provide further details about
--   why the delete failed.</li>
--   </ul>
capacityProvider_updateStatus :: Lens' CapacityProvider (Maybe CapacityProviderUpdateStatus)

-- | The Amazon Resource Name (ARN) that identifies the capacity provider.
capacityProvider_capacityProviderArn :: Lens' CapacityProvider (Maybe Text)

-- | The metadata that you apply to the capacity provider to help you
--   categorize and organize it. Each tag consists of a key and an optional
--   value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
capacityProvider_tags :: Lens' CapacityProvider (Maybe [Tag])

-- | The details of a capacity provider strategy. A capacity provider
--   strategy can be set when using the RunTask or CreateCluster APIs or as
--   the default capacity provider strategy for a cluster with the
--   CreateCluster API.
--   
--   Only capacity providers that are already associated with a cluster and
--   have an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status can be used in a
--   capacity provider strategy. The PutClusterCapacityProviders API is
--   used to associate a capacity provider with a cluster.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New Auto Scaling group
--   capacity providers can be created with the CreateCapacityProvider API
--   operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used in a capacity provider
--   strategy.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
--   
--   <i>See:</i> <a>newCapacityProviderStrategyItem</a> smart constructor.
data CapacityProviderStrategyItem
CapacityProviderStrategyItem' :: Maybe Natural -> Maybe Natural -> Text -> CapacityProviderStrategyItem

-- | The <i>base</i> value designates how many tasks, at a minimum, to run
--   on the specified capacity provider. Only one capacity provider in a
--   capacity provider strategy can have a <i>base</i> defined. If no value
--   is specified, the default value of <tt>0</tt> is used.
[$sel:base:CapacityProviderStrategyItem'] :: CapacityProviderStrategyItem -> Maybe Natural

-- | The <i>weight</i> value designates the relative percentage of the
--   total number of tasks launched that should use the specified capacity
--   provider. The <tt>weight</tt> value is taken into consideration after
--   the <tt>base</tt> value, if defined, is satisfied.
--   
--   If no <tt>weight</tt> value is specified, the default value of
--   <tt>0</tt> is used. When multiple capacity providers are specified
--   within a capacity provider strategy, at least one of the capacity
--   providers must have a weight value greater than zero and any capacity
--   providers with a weight of <tt>0</tt> will not be used to place tasks.
--   If you specify multiple capacity providers in a strategy that all have
--   a weight of <tt>0</tt>, any <tt>RunTask</tt> or <tt>CreateService</tt>
--   actions using the capacity provider strategy will fail.
--   
--   An example scenario for using weights is defining a strategy that
--   contains two capacity providers and both have a weight of <tt>1</tt>,
--   then when the <tt>base</tt> is satisfied, the tasks will be split
--   evenly across the two capacity providers. Using that same logic, if
--   you specify a weight of <tt>1</tt> for <i>capacityProviderA</i> and a
--   weight of <tt>4</tt> for <i>capacityProviderB</i>, then for every one
--   task that is run using <i>capacityProviderA</i>, four tasks would use
--   <i>capacityProviderB</i>.
[$sel:weight:CapacityProviderStrategyItem'] :: CapacityProviderStrategyItem -> Maybe Natural

-- | The short name of the capacity provider.
[$sel:capacityProvider:CapacityProviderStrategyItem'] :: CapacityProviderStrategyItem -> Text

-- | Create a value of <a>CapacityProviderStrategyItem</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:base:CapacityProviderStrategyItem'</a>,
--   <a>capacityProviderStrategyItem_base</a> - The <i>base</i> value
--   designates how many tasks, at a minimum, to run on the specified
--   capacity provider. Only one capacity provider in a capacity provider
--   strategy can have a <i>base</i> defined. If no value is specified, the
--   default value of <tt>0</tt> is used.
--   
--   <a>$sel:weight:CapacityProviderStrategyItem'</a>,
--   <a>capacityProviderStrategyItem_weight</a> - The <i>weight</i> value
--   designates the relative percentage of the total number of tasks
--   launched that should use the specified capacity provider. The
--   <tt>weight</tt> value is taken into consideration after the
--   <tt>base</tt> value, if defined, is satisfied.
--   
--   If no <tt>weight</tt> value is specified, the default value of
--   <tt>0</tt> is used. When multiple capacity providers are specified
--   within a capacity provider strategy, at least one of the capacity
--   providers must have a weight value greater than zero and any capacity
--   providers with a weight of <tt>0</tt> will not be used to place tasks.
--   If you specify multiple capacity providers in a strategy that all have
--   a weight of <tt>0</tt>, any <tt>RunTask</tt> or <tt>CreateService</tt>
--   actions using the capacity provider strategy will fail.
--   
--   An example scenario for using weights is defining a strategy that
--   contains two capacity providers and both have a weight of <tt>1</tt>,
--   then when the <tt>base</tt> is satisfied, the tasks will be split
--   evenly across the two capacity providers. Using that same logic, if
--   you specify a weight of <tt>1</tt> for <i>capacityProviderA</i> and a
--   weight of <tt>4</tt> for <i>capacityProviderB</i>, then for every one
--   task that is run using <i>capacityProviderA</i>, four tasks would use
--   <i>capacityProviderB</i>.
--   
--   <a>$sel:capacityProvider:CapacityProviderStrategyItem'</a>,
--   <a>capacityProviderStrategyItem_capacityProvider</a> - The short name
--   of the capacity provider.
newCapacityProviderStrategyItem :: Text -> CapacityProviderStrategyItem

-- | The <i>base</i> value designates how many tasks, at a minimum, to run
--   on the specified capacity provider. Only one capacity provider in a
--   capacity provider strategy can have a <i>base</i> defined. If no value
--   is specified, the default value of <tt>0</tt> is used.
capacityProviderStrategyItem_base :: Lens' CapacityProviderStrategyItem (Maybe Natural)

-- | The <i>weight</i> value designates the relative percentage of the
--   total number of tasks launched that should use the specified capacity
--   provider. The <tt>weight</tt> value is taken into consideration after
--   the <tt>base</tt> value, if defined, is satisfied.
--   
--   If no <tt>weight</tt> value is specified, the default value of
--   <tt>0</tt> is used. When multiple capacity providers are specified
--   within a capacity provider strategy, at least one of the capacity
--   providers must have a weight value greater than zero and any capacity
--   providers with a weight of <tt>0</tt> will not be used to place tasks.
--   If you specify multiple capacity providers in a strategy that all have
--   a weight of <tt>0</tt>, any <tt>RunTask</tt> or <tt>CreateService</tt>
--   actions using the capacity provider strategy will fail.
--   
--   An example scenario for using weights is defining a strategy that
--   contains two capacity providers and both have a weight of <tt>1</tt>,
--   then when the <tt>base</tt> is satisfied, the tasks will be split
--   evenly across the two capacity providers. Using that same logic, if
--   you specify a weight of <tt>1</tt> for <i>capacityProviderA</i> and a
--   weight of <tt>4</tt> for <i>capacityProviderB</i>, then for every one
--   task that is run using <i>capacityProviderA</i>, four tasks would use
--   <i>capacityProviderB</i>.
capacityProviderStrategyItem_weight :: Lens' CapacityProviderStrategyItem (Maybe Natural)

-- | The short name of the capacity provider.
capacityProviderStrategyItem_capacityProvider :: Lens' CapacityProviderStrategyItem Text

-- | A regional grouping of one or more container instances on which you
--   can run task requests. Each account receives a default cluster the
--   first time you use the Amazon ECS service, but you may also create
--   other clusters. Clusters may contain more than one instance type
--   simultaneously.
--   
--   <i>See:</i> <a>newCluster</a> smart constructor.
data Cluster
Cluster' :: Maybe Text -> Maybe Text -> Maybe [Attachment] -> Maybe Int -> Maybe [CapacityProviderStrategyItem] -> Maybe [ClusterSetting] -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe [KeyValuePair] -> Maybe ClusterConfiguration -> Maybe Text -> Maybe [Text] -> Maybe Int -> Maybe [Tag] -> Cluster

-- | The status of the cluster. The following are the possible states that
--   will be returned.
--   
--   <ul>
--   <li><i>ACTIVE</i> The cluster is ready to accept tasks and if
--   applicable you can register container instances with the cluster.</li>
--   <li><i>PROVISIONING</i> The cluster has capacity providers associated
--   with it and the resources needed for the capacity provider are being
--   created.</li>
--   <li><i>DEPROVISIONING</i> The cluster has capacity providers
--   associated with it and the resources needed for the capacity provider
--   are being deleted.</li>
--   <li><i>FAILED</i> The cluster has capacity providers associated with
--   it and the resources needed for the capacity provider have failed to
--   create.</li>
--   <li><i>INACTIVE</i> The cluster has been deleted. Clusters with an
--   <tt>INACTIVE</tt> status may remain discoverable in your account for a
--   period of time. However, this behavior is subject to change in the
--   future, so you should not rely on <tt>INACTIVE</tt> clusters
--   persisting.</li>
--   </ul>
[$sel:status:Cluster'] :: Cluster -> Maybe Text

-- | The Amazon Resource Name (ARN) that identifies the cluster. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the cluster, the Amazon Web Services account ID of the cluster owner,
--   the <tt>cluster</tt> namespace, and then the cluster name. For
--   example, <tt>arn:aws:ecs:region:012345678910:cluster/test</tt>.
[$sel:clusterArn:Cluster'] :: Cluster -> Maybe Text

-- | The resources attached to a cluster. When using a capacity provider
--   with a cluster, the Auto Scaling plan that is created will be returned
--   as a cluster attachment.
[$sel:attachments:Cluster'] :: Cluster -> Maybe [Attachment]

-- | The number of tasks in the cluster that are in the <tt>RUNNING</tt>
--   state.
[$sel:runningTasksCount:Cluster'] :: Cluster -> Maybe Int

-- | The default capacity provider strategy for the cluster. When services
--   or tasks are run in the cluster with no launch type or capacity
--   provider strategy specified, the default capacity provider strategy is
--   used.
[$sel:defaultCapacityProviderStrategy:Cluster'] :: Cluster -> Maybe [CapacityProviderStrategyItem]

-- | The settings for the cluster. This parameter indicates whether
--   CloudWatch Container Insights is enabled or disabled for a cluster.
[$sel:settings:Cluster'] :: Cluster -> Maybe [ClusterSetting]

-- | The number of container instances registered into the cluster. This
--   includes container instances in both <tt>ACTIVE</tt> and
--   <tt>DRAINING</tt> status.
[$sel:registeredContainerInstancesCount:Cluster'] :: Cluster -> Maybe Int

-- | The number of tasks in the cluster that are in the <tt>PENDING</tt>
--   state.
[$sel:pendingTasksCount:Cluster'] :: Cluster -> Maybe Int

-- | A user-generated string that you use to identify your cluster.
[$sel:clusterName:Cluster'] :: Cluster -> Maybe Text

-- | Additional information about your clusters that are separated by
--   launch type, including:
--   
--   <ul>
--   <li>runningEC2TasksCount</li>
--   <li>RunningFargateTasksCount</li>
--   <li>pendingEC2TasksCount</li>
--   <li>pendingFargateTasksCount</li>
--   <li>activeEC2ServiceCount</li>
--   <li>activeFargateServiceCount</li>
--   <li>drainingEC2ServiceCount</li>
--   <li>drainingFargateServiceCount</li>
--   </ul>
[$sel:statistics:Cluster'] :: Cluster -> Maybe [KeyValuePair]

-- | The execute command configuration for the cluster.
[$sel:configuration:Cluster'] :: Cluster -> Maybe ClusterConfiguration

-- | The status of the capacity providers associated with the cluster. The
--   following are the states that will be returned:
--   
--   <ul>
--   <li><i>UPDATE_IN_PROGRESS</i> The available capacity providers for the
--   cluster are updating. This occurs when the Auto Scaling plan is
--   provisioning or deprovisioning.</li>
--   <li><i>UPDATE_COMPLETE</i> The capacity providers have successfully
--   updated.</li>
--   <li><i>UPDATE_FAILED</i> The capacity provider updates failed.</li>
--   </ul>
[$sel:attachmentsStatus:Cluster'] :: Cluster -> Maybe Text

-- | The capacity providers associated with the cluster.
[$sel:capacityProviders:Cluster'] :: Cluster -> Maybe [Text]

-- | The number of services that are running on the cluster in an
--   <tt>ACTIVE</tt> state. You can view these services with ListServices.
[$sel:activeServicesCount:Cluster'] :: Cluster -> Maybe Int

-- | The metadata that you apply to the cluster to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:Cluster'] :: Cluster -> Maybe [Tag]

-- | Create a value of <a>Cluster</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:Cluster'</a>, <a>cluster_status</a> - The status of the
--   cluster. The following are the possible states that will be returned.
--   
--   <ul>
--   <li><i>ACTIVE</i> The cluster is ready to accept tasks and if
--   applicable you can register container instances with the cluster.</li>
--   <li><i>PROVISIONING</i> The cluster has capacity providers associated
--   with it and the resources needed for the capacity provider are being
--   created.</li>
--   <li><i>DEPROVISIONING</i> The cluster has capacity providers
--   associated with it and the resources needed for the capacity provider
--   are being deleted.</li>
--   <li><i>FAILED</i> The cluster has capacity providers associated with
--   it and the resources needed for the capacity provider have failed to
--   create.</li>
--   <li><i>INACTIVE</i> The cluster has been deleted. Clusters with an
--   <tt>INACTIVE</tt> status may remain discoverable in your account for a
--   period of time. However, this behavior is subject to change in the
--   future, so you should not rely on <tt>INACTIVE</tt> clusters
--   persisting.</li>
--   </ul>
--   
--   <a>$sel:clusterArn:Cluster'</a>, <a>cluster_clusterArn</a> - The
--   Amazon Resource Name (ARN) that identifies the cluster. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the cluster, the Amazon Web Services account ID of the cluster owner,
--   the <tt>cluster</tt> namespace, and then the cluster name. For
--   example, <tt>arn:aws:ecs:region:012345678910:cluster/test</tt>.
--   
--   <a>$sel:attachments:Cluster'</a>, <a>cluster_attachments</a> - The
--   resources attached to a cluster. When using a capacity provider with a
--   cluster, the Auto Scaling plan that is created will be returned as a
--   cluster attachment.
--   
--   <a>$sel:runningTasksCount:Cluster'</a>,
--   <a>cluster_runningTasksCount</a> - The number of tasks in the cluster
--   that are in the <tt>RUNNING</tt> state.
--   
--   <a>$sel:defaultCapacityProviderStrategy:Cluster'</a>,
--   <a>cluster_defaultCapacityProviderStrategy</a> - The default capacity
--   provider strategy for the cluster. When services or tasks are run in
--   the cluster with no launch type or capacity provider strategy
--   specified, the default capacity provider strategy is used.
--   
--   <a>$sel:settings:Cluster'</a>, <a>cluster_settings</a> - The settings
--   for the cluster. This parameter indicates whether CloudWatch Container
--   Insights is enabled or disabled for a cluster.
--   
--   <a>$sel:registeredContainerInstancesCount:Cluster'</a>,
--   <a>cluster_registeredContainerInstancesCount</a> - The number of
--   container instances registered into the cluster. This includes
--   container instances in both <tt>ACTIVE</tt> and <tt>DRAINING</tt>
--   status.
--   
--   <a>$sel:pendingTasksCount:Cluster'</a>,
--   <a>cluster_pendingTasksCount</a> - The number of tasks in the cluster
--   that are in the <tt>PENDING</tt> state.
--   
--   <a>$sel:clusterName:Cluster'</a>, <a>cluster_clusterName</a> - A
--   user-generated string that you use to identify your cluster.
--   
--   <a>$sel:statistics:Cluster'</a>, <a>cluster_statistics</a> -
--   Additional information about your clusters that are separated by
--   launch type, including:
--   
--   <ul>
--   <li>runningEC2TasksCount</li>
--   <li>RunningFargateTasksCount</li>
--   <li>pendingEC2TasksCount</li>
--   <li>pendingFargateTasksCount</li>
--   <li>activeEC2ServiceCount</li>
--   <li>activeFargateServiceCount</li>
--   <li>drainingEC2ServiceCount</li>
--   <li>drainingFargateServiceCount</li>
--   </ul>
--   
--   <a>$sel:configuration:Cluster'</a>, <a>cluster_configuration</a> - The
--   execute command configuration for the cluster.
--   
--   <a>$sel:attachmentsStatus:Cluster'</a>,
--   <a>cluster_attachmentsStatus</a> - The status of the capacity
--   providers associated with the cluster. The following are the states
--   that will be returned:
--   
--   <ul>
--   <li><i>UPDATE_IN_PROGRESS</i> The available capacity providers for the
--   cluster are updating. This occurs when the Auto Scaling plan is
--   provisioning or deprovisioning.</li>
--   <li><i>UPDATE_COMPLETE</i> The capacity providers have successfully
--   updated.</li>
--   <li><i>UPDATE_FAILED</i> The capacity provider updates failed.</li>
--   </ul>
--   
--   <a>$sel:capacityProviders:Cluster'</a>,
--   <a>cluster_capacityProviders</a> - The capacity providers associated
--   with the cluster.
--   
--   <a>$sel:activeServicesCount:Cluster'</a>,
--   <a>cluster_activeServicesCount</a> - The number of services that are
--   running on the cluster in an <tt>ACTIVE</tt> state. You can view these
--   services with ListServices.
--   
--   <a>$sel:tags:Cluster'</a>, <a>cluster_tags</a> - The metadata that you
--   apply to the cluster to help you categorize and organize them. Each
--   tag consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newCluster :: Cluster

-- | The status of the cluster. The following are the possible states that
--   will be returned.
--   
--   <ul>
--   <li><i>ACTIVE</i> The cluster is ready to accept tasks and if
--   applicable you can register container instances with the cluster.</li>
--   <li><i>PROVISIONING</i> The cluster has capacity providers associated
--   with it and the resources needed for the capacity provider are being
--   created.</li>
--   <li><i>DEPROVISIONING</i> The cluster has capacity providers
--   associated with it and the resources needed for the capacity provider
--   are being deleted.</li>
--   <li><i>FAILED</i> The cluster has capacity providers associated with
--   it and the resources needed for the capacity provider have failed to
--   create.</li>
--   <li><i>INACTIVE</i> The cluster has been deleted. Clusters with an
--   <tt>INACTIVE</tt> status may remain discoverable in your account for a
--   period of time. However, this behavior is subject to change in the
--   future, so you should not rely on <tt>INACTIVE</tt> clusters
--   persisting.</li>
--   </ul>
cluster_status :: Lens' Cluster (Maybe Text)

-- | The Amazon Resource Name (ARN) that identifies the cluster. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the cluster, the Amazon Web Services account ID of the cluster owner,
--   the <tt>cluster</tt> namespace, and then the cluster name. For
--   example, <tt>arn:aws:ecs:region:012345678910:cluster/test</tt>.
cluster_clusterArn :: Lens' Cluster (Maybe Text)

-- | The resources attached to a cluster. When using a capacity provider
--   with a cluster, the Auto Scaling plan that is created will be returned
--   as a cluster attachment.
cluster_attachments :: Lens' Cluster (Maybe [Attachment])

-- | The number of tasks in the cluster that are in the <tt>RUNNING</tt>
--   state.
cluster_runningTasksCount :: Lens' Cluster (Maybe Int)

-- | The default capacity provider strategy for the cluster. When services
--   or tasks are run in the cluster with no launch type or capacity
--   provider strategy specified, the default capacity provider strategy is
--   used.
cluster_defaultCapacityProviderStrategy :: Lens' Cluster (Maybe [CapacityProviderStrategyItem])

-- | The settings for the cluster. This parameter indicates whether
--   CloudWatch Container Insights is enabled or disabled for a cluster.
cluster_settings :: Lens' Cluster (Maybe [ClusterSetting])

-- | The number of container instances registered into the cluster. This
--   includes container instances in both <tt>ACTIVE</tt> and
--   <tt>DRAINING</tt> status.
cluster_registeredContainerInstancesCount :: Lens' Cluster (Maybe Int)

-- | The number of tasks in the cluster that are in the <tt>PENDING</tt>
--   state.
cluster_pendingTasksCount :: Lens' Cluster (Maybe Int)

-- | A user-generated string that you use to identify your cluster.
cluster_clusterName :: Lens' Cluster (Maybe Text)

-- | Additional information about your clusters that are separated by
--   launch type, including:
--   
--   <ul>
--   <li>runningEC2TasksCount</li>
--   <li>RunningFargateTasksCount</li>
--   <li>pendingEC2TasksCount</li>
--   <li>pendingFargateTasksCount</li>
--   <li>activeEC2ServiceCount</li>
--   <li>activeFargateServiceCount</li>
--   <li>drainingEC2ServiceCount</li>
--   <li>drainingFargateServiceCount</li>
--   </ul>
cluster_statistics :: Lens' Cluster (Maybe [KeyValuePair])

-- | The execute command configuration for the cluster.
cluster_configuration :: Lens' Cluster (Maybe ClusterConfiguration)

-- | The status of the capacity providers associated with the cluster. The
--   following are the states that will be returned:
--   
--   <ul>
--   <li><i>UPDATE_IN_PROGRESS</i> The available capacity providers for the
--   cluster are updating. This occurs when the Auto Scaling plan is
--   provisioning or deprovisioning.</li>
--   <li><i>UPDATE_COMPLETE</i> The capacity providers have successfully
--   updated.</li>
--   <li><i>UPDATE_FAILED</i> The capacity provider updates failed.</li>
--   </ul>
cluster_attachmentsStatus :: Lens' Cluster (Maybe Text)

-- | The capacity providers associated with the cluster.
cluster_capacityProviders :: Lens' Cluster (Maybe [Text])

-- | The number of services that are running on the cluster in an
--   <tt>ACTIVE</tt> state. You can view these services with ListServices.
cluster_activeServicesCount :: Lens' Cluster (Maybe Int)

-- | The metadata that you apply to the cluster to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
cluster_tags :: Lens' Cluster (Maybe [Tag])

-- | The execute command configuration for the cluster.
--   
--   <i>See:</i> <a>newClusterConfiguration</a> smart constructor.
data ClusterConfiguration
ClusterConfiguration' :: Maybe ExecuteCommandConfiguration -> ClusterConfiguration

-- | The details of the execute command configuration.
[$sel:executeCommandConfiguration:ClusterConfiguration'] :: ClusterConfiguration -> Maybe ExecuteCommandConfiguration

-- | Create a value of <a>ClusterConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:executeCommandConfiguration:ClusterConfiguration'</a>,
--   <a>clusterConfiguration_executeCommandConfiguration</a> - The details
--   of the execute command configuration.
newClusterConfiguration :: ClusterConfiguration

-- | The details of the execute command configuration.
clusterConfiguration_executeCommandConfiguration :: Lens' ClusterConfiguration (Maybe ExecuteCommandConfiguration)

-- | The settings to use when creating a cluster. This parameter is used to
--   enable CloudWatch Container Insights for a cluster.
--   
--   <i>See:</i> <a>newClusterSetting</a> smart constructor.
data ClusterSetting
ClusterSetting' :: Maybe Text -> Maybe ClusterSettingName -> ClusterSetting

-- | The value to set for the cluster setting. The supported values are
--   <tt>enabled</tt> and <tt>disabled</tt>. If <tt>enabled</tt> is
--   specified, CloudWatch Container Insights will be enabled for the
--   cluster, otherwise it will be disabled unless the
--   <tt>containerInsights</tt> account setting is enabled. If a cluster
--   value is specified, it will override the <tt>containerInsights</tt>
--   value set with PutAccountSetting or PutAccountSettingDefault.
[$sel:value:ClusterSetting'] :: ClusterSetting -> Maybe Text

-- | The name of the cluster setting. The only supported value is
--   <tt>containerInsights</tt>.
[$sel:name:ClusterSetting'] :: ClusterSetting -> Maybe ClusterSettingName

-- | Create a value of <a>ClusterSetting</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:ClusterSetting'</a>, <a>clusterSetting_value</a> - The
--   value to set for the cluster setting. The supported values are
--   <tt>enabled</tt> and <tt>disabled</tt>. If <tt>enabled</tt> is
--   specified, CloudWatch Container Insights will be enabled for the
--   cluster, otherwise it will be disabled unless the
--   <tt>containerInsights</tt> account setting is enabled. If a cluster
--   value is specified, it will override the <tt>containerInsights</tt>
--   value set with PutAccountSetting or PutAccountSettingDefault.
--   
--   <a>$sel:name:ClusterSetting'</a>, <a>clusterSetting_name</a> - The
--   name of the cluster setting. The only supported value is
--   <tt>containerInsights</tt>.
newClusterSetting :: ClusterSetting

-- | The value to set for the cluster setting. The supported values are
--   <tt>enabled</tt> and <tt>disabled</tt>. If <tt>enabled</tt> is
--   specified, CloudWatch Container Insights will be enabled for the
--   cluster, otherwise it will be disabled unless the
--   <tt>containerInsights</tt> account setting is enabled. If a cluster
--   value is specified, it will override the <tt>containerInsights</tt>
--   value set with PutAccountSetting or PutAccountSettingDefault.
clusterSetting_value :: Lens' ClusterSetting (Maybe Text)

-- | The name of the cluster setting. The only supported value is
--   <tt>containerInsights</tt>.
clusterSetting_name :: Lens' ClusterSetting (Maybe ClusterSettingName)

-- | A Docker container that is part of a task.
--   
--   <i>See:</i> <a>newContainer</a> smart constructor.
data Container
Container' :: Maybe [Text] -> Maybe [NetworkBinding] -> Maybe [ManagedAgent] -> Maybe Text -> Maybe Text -> Maybe [NetworkInterface] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe HealthStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Container

-- | The IDs of each GPU assigned to the container.
[$sel:gpuIds:Container'] :: Container -> Maybe [Text]

-- | The network bindings associated with the container.
[$sel:networkBindings:Container'] :: Container -> Maybe [NetworkBinding]

-- | The details of any Amazon ECS managed agents associated with the
--   container.
[$sel:managedAgents:Container'] :: Container -> Maybe [ManagedAgent]

-- | The image used for the container.
[$sel:image:Container'] :: Container -> Maybe Text

-- | The Amazon Resource Name (ARN) of the container.
[$sel:containerArn:Container'] :: Container -> Maybe Text

-- | The network interfaces associated with the container.
[$sel:networkInterfaces:Container'] :: Container -> Maybe [NetworkInterface]

-- | The ARN of the task.
[$sel:taskArn:Container'] :: Container -> Maybe Text

-- | The last known status of the container.
[$sel:lastStatus:Container'] :: Container -> Maybe Text

-- | The hard limit (in MiB) of memory set for the container.
[$sel:memory:Container'] :: Container -> Maybe Text

-- | A short (255 max characters) human-readable string to provide
--   additional details about a running or stopped container.
[$sel:reason:Container'] :: Container -> Maybe Text

-- | The name of the container.
[$sel:name:Container'] :: Container -> Maybe Text

-- | The container image manifest digest.
--   
--   The <tt>imageDigest</tt> is only returned if the container is using an
--   image hosted in Amazon ECR, otherwise it is omitted.
[$sel:imageDigest:Container'] :: Container -> Maybe Text

-- | The exit code returned from the container.
[$sel:exitCode:Container'] :: Container -> Maybe Int

-- | The health status of the container. If health checks are not
--   configured for this container in its task definition, then it reports
--   the health status as <tt>UNKNOWN</tt>.
[$sel:healthStatus:Container'] :: Container -> Maybe HealthStatus

-- | The number of CPU units set for the container. The value will be
--   <tt>0</tt> if no value was specified in the container definition when
--   the task definition was registered.
[$sel:cpu:Container'] :: Container -> Maybe Text

-- | The ID of the Docker container.
[$sel:runtimeId:Container'] :: Container -> Maybe Text

-- | The soft limit (in MiB) of memory set for the container.
[$sel:memoryReservation:Container'] :: Container -> Maybe Text

-- | Create a value of <a>Container</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:gpuIds:Container'</a>, <a>container_gpuIds</a> - The IDs of
--   each GPU assigned to the container.
--   
--   <a>$sel:networkBindings:Container'</a>,
--   <a>container_networkBindings</a> - The network bindings associated
--   with the container.
--   
--   <a>$sel:managedAgents:Container'</a>, <a>container_managedAgents</a> -
--   The details of any Amazon ECS managed agents associated with the
--   container.
--   
--   <a>$sel:image:Container'</a>, <a>container_image</a> - The image used
--   for the container.
--   
--   <a>$sel:containerArn:Container'</a>, <a>container_containerArn</a> -
--   The Amazon Resource Name (ARN) of the container.
--   
--   <a>$sel:networkInterfaces:Container'</a>,
--   <a>container_networkInterfaces</a> - The network interfaces associated
--   with the container.
--   
--   <a>$sel:taskArn:Container'</a>, <a>container_taskArn</a> - The ARN of
--   the task.
--   
--   <a>$sel:lastStatus:Container'</a>, <a>container_lastStatus</a> - The
--   last known status of the container.
--   
--   <a>$sel:memory:Container'</a>, <a>container_memory</a> - The hard
--   limit (in MiB) of memory set for the container.
--   
--   <a>$sel:reason:Container'</a>, <a>container_reason</a> - A short (255
--   max characters) human-readable string to provide additional details
--   about a running or stopped container.
--   
--   <a>$sel:name:Container'</a>, <a>container_name</a> - The name of the
--   container.
--   
--   <a>$sel:imageDigest:Container'</a>, <a>container_imageDigest</a> - The
--   container image manifest digest.
--   
--   The <tt>imageDigest</tt> is only returned if the container is using an
--   image hosted in Amazon ECR, otherwise it is omitted.
--   
--   <a>$sel:exitCode:Container'</a>, <a>container_exitCode</a> - The exit
--   code returned from the container.
--   
--   <a>$sel:healthStatus:Container'</a>, <a>container_healthStatus</a> -
--   The health status of the container. If health checks are not
--   configured for this container in its task definition, then it reports
--   the health status as <tt>UNKNOWN</tt>.
--   
--   <a>$sel:cpu:Container'</a>, <a>container_cpu</a> - The number of CPU
--   units set for the container. The value will be <tt>0</tt> if no value
--   was specified in the container definition when the task definition was
--   registered.
--   
--   <a>$sel:runtimeId:Container'</a>, <a>container_runtimeId</a> - The ID
--   of the Docker container.
--   
--   <a>$sel:memoryReservation:Container'</a>,
--   <a>container_memoryReservation</a> - The soft limit (in MiB) of memory
--   set for the container.
newContainer :: Container

-- | The IDs of each GPU assigned to the container.
container_gpuIds :: Lens' Container (Maybe [Text])

-- | The network bindings associated with the container.
container_networkBindings :: Lens' Container (Maybe [NetworkBinding])

-- | The details of any Amazon ECS managed agents associated with the
--   container.
container_managedAgents :: Lens' Container (Maybe [ManagedAgent])

-- | The image used for the container.
container_image :: Lens' Container (Maybe Text)

-- | The Amazon Resource Name (ARN) of the container.
container_containerArn :: Lens' Container (Maybe Text)

-- | The network interfaces associated with the container.
container_networkInterfaces :: Lens' Container (Maybe [NetworkInterface])

-- | The ARN of the task.
container_taskArn :: Lens' Container (Maybe Text)

-- | The last known status of the container.
container_lastStatus :: Lens' Container (Maybe Text)

-- | The hard limit (in MiB) of memory set for the container.
container_memory :: Lens' Container (Maybe Text)

-- | A short (255 max characters) human-readable string to provide
--   additional details about a running or stopped container.
container_reason :: Lens' Container (Maybe Text)

-- | The name of the container.
container_name :: Lens' Container (Maybe Text)

-- | The container image manifest digest.
--   
--   The <tt>imageDigest</tt> is only returned if the container is using an
--   image hosted in Amazon ECR, otherwise it is omitted.
container_imageDigest :: Lens' Container (Maybe Text)

-- | The exit code returned from the container.
container_exitCode :: Lens' Container (Maybe Int)

-- | The health status of the container. If health checks are not
--   configured for this container in its task definition, then it reports
--   the health status as <tt>UNKNOWN</tt>.
container_healthStatus :: Lens' Container (Maybe HealthStatus)

-- | The number of CPU units set for the container. The value will be
--   <tt>0</tt> if no value was specified in the container definition when
--   the task definition was registered.
container_cpu :: Lens' Container (Maybe Text)

-- | The ID of the Docker container.
container_runtimeId :: Lens' Container (Maybe Text)

-- | The soft limit (in MiB) of memory set for the container.
container_memoryReservation :: Lens' Container (Maybe Text)

-- | Container definitions are used in task definitions to describe the
--   different containers that are launched as part of a task.
--   
--   <i>See:</i> <a>newContainerDefinition</a> smart constructor.
data ContainerDefinition
ContainerDefinition' :: Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe RepositoryCredentials -> Maybe [Text] -> Maybe HealthCheck -> Maybe Bool -> Maybe [Secret] -> Maybe [VolumeFrom] -> Maybe [KeyValuePair] -> Maybe [EnvironmentFile] -> Maybe [Text] -> Maybe Text -> Maybe [Ulimit] -> Maybe Int -> Maybe Bool -> Maybe [PortMapping] -> Maybe [ResourceRequirement] -> Maybe (HashMap Text Text) -> Maybe [HostEntry] -> Maybe Int -> Maybe [SystemControl] -> Maybe Text -> Maybe FirelensConfiguration -> Maybe [Text] -> Maybe LogConfiguration -> Maybe LinuxParameters -> Maybe Bool -> Maybe [ContainerDependency] -> Maybe Text -> Maybe [Text] -> Maybe [MountPoint] -> Maybe Bool -> Maybe Int -> Maybe [Text] -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> ContainerDefinition

-- | The image used to start a container. This string is passed directly to
--   the Docker daemon. Images in the Docker Hub registry are available by
--   default. Other repositories are specified with either <tt>
--   repository-url/image:tag </tt> or <tt> repository-url/image@digest
--   </tt>. Up to 255 letters (uppercase and lowercase), numbers, hyphens,
--   underscores, colons, periods, forward slashes, and number signs are
--   allowed. This parameter maps to <tt>Image</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>IMAGE</tt> parameter of <a>docker run</a>.
--   
--   <ul>
--   <li>When a new task starts, the Amazon ECS container agent pulls the
--   latest version of the specified image and tag for the container to
--   use. However, subsequent updates to a repository image are not
--   propagated to already running tasks.</li>
--   <li>Images in Amazon ECR repositories can be specified by either using
--   the full <tt>registry/repository:tag</tt> or
--   <tt>registry/repository@digest</tt>. For example,
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;:latest</tt>
--   or
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE</tt>.</li>
--   <li>Images in official repositories on Docker Hub use a single name
--   (for example, <tt>ubuntu</tt> or <tt>mongo</tt>).</li>
--   <li>Images in other repositories on Docker Hub are qualified with an
--   organization name (for example,
--   <tt>amazon/amazon-ecs-agent</tt>).</li>
--   <li>Images in other online repositories are qualified further by a
--   domain name (for example, <tt>quay.io/assemblyline/ubuntu</tt>).</li>
--   </ul>
[$sel:image:ContainerDefinition'] :: ContainerDefinition -> Maybe Text

-- | The command that is passed to the container. This parameter maps to
--   <tt>Cmd</tt> in the <a>Create a container</a> section of the <a>Docker
--   Remote API</a> and the <tt>COMMAND</tt> parameter to <a>docker
--   run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#cmd</a>. If there
--   are multiple arguments, each argument should be a separated string in
--   the array.
[$sel:command:ContainerDefinition'] :: ContainerDefinition -> Maybe [Text]

-- | The hostname to use for your container. This parameter maps to
--   <tt>Hostname</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--hostname</tt> option to
--   <a>docker run</a>.
--   
--   The <tt>hostname</tt> parameter is not supported if you are using the
--   <tt>awsvpc</tt> network mode.
[$sel:hostname:ContainerDefinition'] :: ContainerDefinition -> Maybe Text

-- | The private repository authentication credentials to use.
[$sel:repositoryCredentials:ContainerDefinition'] :: ContainerDefinition -> Maybe RepositoryCredentials

-- | A list of strings to provide custom labels for SELinux and AppArmor
--   multi-level security systems. This field is not valid for containers
--   in tasks using the Fargate launch type.
--   
--   With Windows containers, this parameter can be used to reference a
--   credential spec file when configuring a container for Active Directory
--   authentication. For more information, see <a>Using gMSAs for Windows
--   Containers</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   This parameter maps to <tt>SecurityOpt</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--security-opt</tt> option to <a>docker run</a>.
--   
--   The Amazon ECS container agent running on a container instance must
--   register with the <tt>ECS_SELINUX_CAPABLE=true</tt> or
--   <tt>ECS_APPARMOR_CAPABLE=true</tt> environment variables before
--   containers placed on that instance can use these security options. For
--   more information, see <a>Amazon ECS Container Agent Configuration</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For more information about valid values, see <a>Docker Run Security
--   Configuration</a>.
--   
--   Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value"
--   | "credentialspec:CredentialSpecFilePath"
[$sel:dockerSecurityOptions:ContainerDefinition'] :: ContainerDefinition -> Maybe [Text]

-- | The container health check command and associated configuration
--   parameters for the container. This parameter maps to
--   <tt>HealthCheck</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>HEALTHCHECK</tt> parameter of
--   <a>docker run</a>.
[$sel:healthCheck:ContainerDefinition'] :: ContainerDefinition -> Maybe HealthCheck

-- | When this parameter is true, networking is disabled within the
--   container. This parameter maps to <tt>NetworkDisabled</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
--   
--   This parameter is not supported for Windows containers.
[$sel:disableNetworking:ContainerDefinition'] :: ContainerDefinition -> Maybe Bool

-- | The secrets to pass to the container. For more information, see
--   <a>Specifying Sensitive Data</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
[$sel:secrets:ContainerDefinition'] :: ContainerDefinition -> Maybe [Secret]

-- | Data volumes to mount from another container. This parameter maps to
--   <tt>VolumesFrom</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--volumes-from</tt> option to
--   <a>docker run</a>.
[$sel:volumesFrom:ContainerDefinition'] :: ContainerDefinition -> Maybe [VolumeFrom]

-- | The environment variables to pass to a container. This parameter maps
--   to <tt>Env</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--env</tt> option to <a>docker
--   run</a>.
--   
--   We do not recommend using plaintext environment variables for
--   sensitive information, such as credential data.
[$sel:environment:ContainerDefinition'] :: ContainerDefinition -> Maybe [KeyValuePair]

-- | A list of files containing the environment variables to pass to a
--   container. This parameter maps to the <tt>--env-file</tt> option to
--   <a>docker run</a>.
--   
--   You can specify up to ten environment files. The file must have a
--   <tt>.env</tt> file extension. Each line in an environment file should
--   contain an environment variable in <tt>VARIABLE=VALUE</tt> format.
--   Lines beginning with <tt>#</tt> are treated as comments and are
--   ignored. For more information on the environment variable file syntax,
--   see <a>Declare default environment variables in file</a>.
--   
--   If there are environment variables specified using the
--   <tt>environment</tt> parameter in a container definition, they take
--   precedence over the variables contained within an environment file. If
--   multiple environment files are specified that contain the same
--   variable, they are processed from the top down. It is recommended to
--   use unique variable names. For more information, see <a>Specifying
--   Environment Variables</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
[$sel:environmentFiles:ContainerDefinition'] :: ContainerDefinition -> Maybe [EnvironmentFile]

-- | Early versions of the Amazon ECS container agent do not properly
--   handle <tt>entryPoint</tt> parameters. If you have problems using
--   <tt>entryPoint</tt>, update your container agent or enter your
--   commands and arguments as <tt>command</tt> array items instead.
--   
--   The entry point that is passed to the container. This parameter maps
--   to <tt>Entrypoint</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--entrypoint</tt> option to
--   <a>docker run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#entrypoint</a>.
[$sel:entryPoint:ContainerDefinition'] :: ContainerDefinition -> Maybe [Text]

-- | The working directory in which to run commands inside the container.
--   This parameter maps to <tt>WorkingDir</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--workdir</tt> option to <a>docker run</a>.
[$sel:workingDirectory:ContainerDefinition'] :: ContainerDefinition -> Maybe Text

-- | A list of <tt>ulimits</tt> to set in the container. If a ulimit value
--   is specified in a task definition, it will override the default values
--   set by Docker. This parameter maps to <tt>Ulimits</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--ulimit</tt> option to <a>docker run</a>. Valid naming values
--   are displayed in the Ulimit data type.
--   
--   Amazon ECS tasks hosted on Fargate use the default resource limit
--   values set by the operating system with the exception of the
--   <tt>nofile</tt> resource limit parameter which Fargate overrides. The
--   <tt>nofile</tt> resource limit sets a restriction on the number of
--   open files that a container can use. The default <tt>nofile</tt> soft
--   limit is <tt>1024</tt> and hard limit is <tt>4096</tt>.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   This parameter is not supported for Windows containers.
[$sel:ulimits:ContainerDefinition'] :: ContainerDefinition -> Maybe [Ulimit]

-- | Time duration (in seconds) to wait before the container is forcefully
--   killed if it doesn't exit normally on its own.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version 1.3.0 or later. The max stop timeout value is 120
--   seconds and if the parameter is not specified, the default value of 30
--   seconds is used.
--   
--   For tasks using the EC2 launch type, if the <tt>stopTimeout</tt>
--   parameter is not specified, the value set for the Amazon ECS container
--   agent configuration variable <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> is
--   used by default. If neither the <tt>stopTimeout</tt> parameter or the
--   <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> agent configuration variable are
--   set, then the default values of 30 seconds for Linux containers and 30
--   seconds on Windows containers are used. Your container instances
--   require at least version 1.26.0 of the container agent to enable a
--   container stop timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:stopTimeout:ContainerDefinition'] :: ContainerDefinition -> Maybe Int

-- | When this parameter is true, the container is given elevated
--   privileges on the host container instance (similar to the
--   <tt>root</tt> user). This parameter maps to <tt>Privileged</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--privileged</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
[$sel:privileged:ContainerDefinition'] :: ContainerDefinition -> Maybe Bool

-- | The list of port mappings for the container. Port mappings allow
--   containers to access ports on the host container instance to send or
--   receive traffic.
--   
--   For task definitions that use the <tt>awsvpc</tt> network mode, you
--   should only specify the <tt>containerPort</tt>. The <tt>hostPort</tt>
--   can be left blank or it must be the same value as the
--   <tt>containerPort</tt>.
--   
--   Port mappings on Windows use the <tt>NetNAT</tt> gateway address
--   rather than <tt>localhost</tt>. There is no loopback for port mappings
--   on Windows, so you cannot access a container's mapped port from the
--   host itself.
--   
--   This parameter maps to <tt>PortBindings</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--publish</tt> option to <a>docker run</a>. If the network mode of
--   a task definition is set to <tt>none</tt>, then you can't specify port
--   mappings. If the network mode of a task definition is set to
--   <tt>host</tt>, then host ports must either be undefined or they must
--   match the container port in the port mapping.
--   
--   After a task reaches the <tt>RUNNING</tt> status, manual and automatic
--   host and container port assignments are visible in the <b>Network
--   Bindings</b> section of a container description for a selected task in
--   the Amazon ECS console. The assignments are also visible in the
--   <tt>networkBindings</tt> section DescribeTasks responses.
[$sel:portMappings:ContainerDefinition'] :: ContainerDefinition -> Maybe [PortMapping]

-- | The type and amount of a resource to assign to a container. The only
--   supported resource is a GPU.
[$sel:resourceRequirements:ContainerDefinition'] :: ContainerDefinition -> Maybe [ResourceRequirement]

-- | A key/value map of labels to add to the container. This parameter maps
--   to <tt>Labels</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--label</tt> option to <a>docker
--   run</a>. This parameter requires version 1.18 of the Docker Remote API
--   or greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
[$sel:dockerLabels:ContainerDefinition'] :: ContainerDefinition -> Maybe (HashMap Text Text)

-- | A list of hostnames and IP address mappings to append to the
--   <tt>/etc/hosts</tt> file on the container. This parameter maps to
--   <tt>ExtraHosts</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--add-host</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks that
--   use the <tt>awsvpc</tt> network mode.
[$sel:extraHosts:ContainerDefinition'] :: ContainerDefinition -> Maybe [HostEntry]

-- | The amount (in MiB) of memory to present to the container. If your
--   container attempts to exceed the memory specified here, the container
--   is killed. The total amount of memory reserved for all containers
--   within a task must be lower than the task <tt>memory</tt> value, if
--   one is specified. This parameter maps to <tt>Memory</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--memory</tt> option to <a>docker run</a>.
--   
--   If using the Fargate launch type, this parameter is optional.
--   
--   If using the EC2 launch type, you must specify either a task-level
--   memory value or a container-level memory value. If you specify both a
--   container-level <tt>memory</tt> and <tt>memoryReservation</tt> value,
--   <tt>memory</tt> must be greater than <tt>memoryReservation</tt>. If
--   you specify <tt>memoryReservation</tt>, then that value is subtracted
--   from the available memory resources for the container instance on
--   which the container is placed. Otherwise, the value of <tt>memory</tt>
--   is used.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
[$sel:memory:ContainerDefinition'] :: ContainerDefinition -> Maybe Int

-- | A list of namespaced kernel parameters to set in the container. This
--   parameter maps to <tt>Sysctls</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--sysctl</tt>
--   option to <a>docker run</a>.
--   
--   It is not recommended that you specify network-related
--   <tt>systemControls</tt> parameters for multiple containers in a single
--   task that also uses either the <tt>awsvpc</tt> or <tt>host</tt>
--   network modes. For tasks that use the <tt>awsvpc</tt> network mode,
--   the container that is started last determines which
--   <tt>systemControls</tt> parameters take effect. For tasks that use the
--   <tt>host</tt> network mode, it changes the container instance's
--   namespaced kernel parameters as well as the containers.
[$sel:systemControls:ContainerDefinition'] :: ContainerDefinition -> Maybe [SystemControl]

-- | The user to use inside the container. This parameter maps to
--   <tt>User</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--user</tt> option to <a>docker
--   run</a>.
--   
--   When running tasks using the <tt>host</tt> network mode, you should
--   not run containers using the root user (UID 0). It is considered best
--   practice to use a non-root user.
--   
--   You can specify the <tt>user</tt> using the following formats. If
--   specifying a UID or GID, you must specify it as a positive integer.
--   
--   <ul>
--   <li><pre>user</pre></li>
--   <li><pre>user:group</pre></li>
--   <li><pre>uid</pre></li>
--   <li><pre>uid:gid</pre></li>
--   <li><pre>user:gid</pre></li>
--   <li><pre>uid:group</pre></li>
--   </ul>
--   
--   This parameter is not supported for Windows containers.
[$sel:user:ContainerDefinition'] :: ContainerDefinition -> Maybe Text

-- | The FireLens configuration for the container. This is used to specify
--   and configure a log router for container logs. For more information,
--   see <a>Custom Log Routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
[$sel:firelensConfiguration:ContainerDefinition'] :: ContainerDefinition -> Maybe FirelensConfiguration

-- | A list of DNS search domains that are presented to the container. This
--   parameter maps to <tt>DnsSearch</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--dns-search</tt>
--   option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
[$sel:dnsSearchDomains:ContainerDefinition'] :: ContainerDefinition -> Maybe [Text]

-- | The log configuration specification for the container.
--   
--   This parameter maps to <tt>LogConfig</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--log-driver</tt> option to <a>docker run</a>. By default,
--   containers use the same logging driver that the Docker daemon uses.
--   However the container may use a different logging driver than the
--   Docker daemon by specifying a log driver with this parameter in the
--   container definition. To use a different logging driver for a
--   container, the log system must be configured properly on the container
--   instance (or on a different log server for remote logging options).
--   For more information on the options for different supported log
--   drivers, see <a>Configure logging drivers</a> in the Docker
--   documentation.
--   
--   Amazon ECS currently supports a subset of the logging drivers
--   available to the Docker daemon (shown in the LogConfiguration data
--   type). Additional log drivers may be available in future releases of
--   the Amazon ECS container agent.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   The Amazon ECS container agent running on a container instance must
--   register the logging drivers available on that instance with the
--   <tt>ECS_AVAILABLE_LOGGING_DRIVERS</tt> environment variable before
--   containers placed on that instance can use these log configuration
--   options. For more information, see <a>Amazon ECS Container Agent
--   Configuration</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:logConfiguration:ContainerDefinition'] :: ContainerDefinition -> Maybe LogConfiguration

-- | Linux-specific modifications that are applied to the container, such
--   as Linux kernel capabilities. For more information see
--   KernelCapabilities.
--   
--   This parameter is not supported for Windows containers.
[$sel:linuxParameters:ContainerDefinition'] :: ContainerDefinition -> Maybe LinuxParameters

-- | When this parameter is <tt>true</tt>, a TTY is allocated. This
--   parameter maps to <tt>Tty</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--tty</tt> option
--   to <a>docker run</a>.
[$sel:pseudoTerminal:ContainerDefinition'] :: ContainerDefinition -> Maybe Bool

-- | The dependencies defined for container startup and shutdown. A
--   container can contain multiple dependencies. When a dependency is
--   defined for container startup, for container shutdown it is reversed.
--   
--   For tasks using the EC2 launch type, the container instances require
--   at least version 1.26.0 of the container agent to enable container
--   dependencies. However, we recommend using the latest container agent
--   version. For information about checking your agent version and
--   updating to the latest version, see <a>Updating the Amazon ECS
--   Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version <tt>1.3.0</tt> or later.
[$sel:dependsOn:ContainerDefinition'] :: ContainerDefinition -> Maybe [ContainerDependency]

-- | The name of a container. If you are linking multiple containers
--   together in a task definition, the <tt>name</tt> of one container can
--   be entered in the <tt>links</tt> of another container to connect the
--   containers. Up to 255 letters (uppercase and lowercase), numbers,
--   underscores, and hyphens are allowed. This parameter maps to
--   <tt>name</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--name</tt> option to <a>docker
--   run</a>.
[$sel:name:ContainerDefinition'] :: ContainerDefinition -> Maybe Text

-- | A list of DNS servers that are presented to the container. This
--   parameter maps to <tt>Dns</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--dns</tt> option
--   to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
[$sel:dnsServers:ContainerDefinition'] :: ContainerDefinition -> Maybe [Text]

-- | The mount points for data volumes in your container.
--   
--   This parameter maps to <tt>Volumes</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--volume</tt> option to <a>docker run</a>.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives.
[$sel:mountPoints:ContainerDefinition'] :: ContainerDefinition -> Maybe [MountPoint]

-- | When this parameter is <tt>true</tt>, this allows you to deploy
--   containerized applications that require <tt>stdin</tt> or a
--   <tt>tty</tt> to be allocated. This parameter maps to
--   <tt>OpenStdin</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--interactive</tt> option to
--   <a>docker run</a>.
[$sel:interactive:ContainerDefinition'] :: ContainerDefinition -> Maybe Bool

-- | Time duration (in seconds) to wait before giving up on resolving
--   dependencies for a container. For example, you specify two containers
--   in a task definition with containerA having a dependency on containerB
--   reaching a <tt>COMPLETE</tt>, <tt>SUCCESS</tt>, or <tt>HEALTHY</tt>
--   status. If a <tt>startTimeout</tt> value is specified for containerB
--   and it does not reach the desired status within that time then
--   containerA will give up and not start. This results in the task
--   transitioning to a <tt>STOPPED</tt> state.
--   
--   When the <tt>ECS_CONTAINER_START_TIMEOUT</tt> container agent
--   configuration variable is used, it is enforced indendently from this
--   start timeout value.
--   
--   For tasks using the Fargate launch type, this parameter requires that
--   the task or service uses platform version 1.3.0 or later.
--   
--   For tasks using the EC2 launch type, your container instances require
--   at least version <tt>1.26.0</tt> of the container agent to enable a
--   container start timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version <tt>1.26.0-1</tt> of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:startTimeout:ContainerDefinition'] :: ContainerDefinition -> Maybe Int

-- | The <tt>links</tt> parameter allows containers to communicate with
--   each other without the need for port mappings. This parameter is only
--   supported if the network mode of a task definition is <tt>bridge</tt>.
--   The <tt>name:internalName</tt> construct is analogous to
--   <tt>name:alias</tt> in Docker links. Up to 255 letters (uppercase and
--   lowercase), numbers, underscores, and hyphens are allowed. For more
--   information about linking Docker containers, go to <a>Legacy container
--   links</a> in the Docker documentation. This parameter maps to
--   <tt>Links</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--link</tt> option to <a>docker
--   run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   Containers that are collocated on a single container instance may be
--   able to communicate with each other without requiring links or host
--   port mappings. Network isolation is achieved on the container instance
--   using security groups and VPC settings.
[$sel:links:ContainerDefinition'] :: ContainerDefinition -> Maybe [Text]

-- | When this parameter is true, the container is given read-only access
--   to its root file system. This parameter maps to
--   <tt>ReadonlyRootfs</tt> in the <a>Create a container</a> section of
--   the <a>Docker Remote API</a> and the <tt>--read-only</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
[$sel:readonlyRootFilesystem:ContainerDefinition'] :: ContainerDefinition -> Maybe Bool

-- | If the <tt>essential</tt> parameter of a container is marked as
--   <tt>true</tt>, and that container fails or stops for any reason, all
--   other containers that are part of the task are stopped. If the
--   <tt>essential</tt> parameter of a container is marked as
--   <tt>false</tt>, then its failure does not affect the rest of the
--   containers in a task. If this parameter is omitted, a container is
--   assumed to be essential.
--   
--   All tasks must have at least one essential container. If you have an
--   application that is composed of multiple containers, you should group
--   containers that are used for a common purpose into components, and
--   separate the different components into multiple task definitions. For
--   more information, see <a>Application Architecture</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:essential:ContainerDefinition'] :: ContainerDefinition -> Maybe Bool

-- | The number of <tt>cpu</tt> units reserved for the container. This
--   parameter maps to <tt>CpuShares</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--cpu-shares</tt>
--   option to <a>docker run</a>.
--   
--   This field is optional for tasks using the Fargate launch type, and
--   the only requirement is that the total amount of CPU reserved for all
--   containers within a task be lower than the task-level <tt>cpu</tt>
--   value.
--   
--   You can determine the number of CPU units that are available per EC2
--   instance type by multiplying the vCPUs listed for that instance type
--   on the <a>Amazon EC2 Instances</a> detail page by 1,024.
--   
--   Linux containers share unallocated CPU units with other containers on
--   the container instance with the same ratio as their allocated amount.
--   For example, if you run a single-container task on a single-core
--   instance type with 512 CPU units specified for that container, and
--   that is the only task running on the container instance, that
--   container could use the full 1,024 CPU unit share at any given time.
--   However, if you launched another copy of the same task on that
--   container instance, each task would be guaranteed a minimum of 512 CPU
--   units when needed, and each container could float to higher CPU usage
--   if the other container was not using it, but if both tasks were 100%
--   active all of the time, they would be limited to 512 CPU units.
--   
--   On Linux container instances, the Docker daemon on the container
--   instance uses the CPU value to calculate the relative CPU share ratios
--   for running containers. For more information, see <a>CPU share
--   constraint</a> in the Docker documentation. The minimum valid CPU
--   share value that the Linux kernel allows is 2. However, the CPU
--   parameter is not required, and you can use CPU values below 2 in your
--   container definitions. For CPU values below 2 (including null), the
--   behavior varies based on your Amazon ECS container agent version:
--   
--   <ul>
--   <li><b>Agent versions less than or equal to 1.1.0:</b> Null and zero
--   CPU values are passed to Docker as 0, which Docker then converts to
--   1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the
--   Linux kernel converts to two CPU shares.</li>
--   <li><b>Agent versions greater than or equal to 1.2.0:</b> Null, zero,
--   and CPU values of 1 are passed to Docker as 2.</li>
--   </ul>
--   
--   On Windows container instances, the CPU limit is enforced as an
--   absolute limit, or a quota. Windows containers only have access to the
--   specified amount of CPU that is described in the task definition. A
--   null or zero CPU value is passed to Docker as <tt>0</tt>, which
--   Windows interprets as 1% of one CPU.
[$sel:cpu:ContainerDefinition'] :: ContainerDefinition -> Maybe Int

-- | The soft limit (in MiB) of memory to reserve for the container. When
--   system memory is under heavy contention, Docker attempts to keep the
--   container memory to this soft limit. However, your container can
--   consume more memory when it needs to, up to either the hard limit
--   specified with the <tt>memory</tt> parameter (if applicable), or all
--   of the available memory on the container instance, whichever comes
--   first. This parameter maps to <tt>MemoryReservation</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--memory-reservation</tt> option to <a>docker run</a>.
--   
--   If a task-level memory value is not specified, you must specify a
--   non-zero integer for one or both of <tt>memory</tt> or
--   <tt>memoryReservation</tt> in a container definition. If you specify
--   both, <tt>memory</tt> must be greater than <tt>memoryReservation</tt>.
--   If you specify <tt>memoryReservation</tt>, then that value is
--   subtracted from the available memory resources for the container
--   instance on which the container is placed. Otherwise, the value of
--   <tt>memory</tt> is used.
--   
--   For example, if your container normally uses 128 MiB of memory, but
--   occasionally bursts to 256 MiB of memory for short periods of time,
--   you can set a <tt>memoryReservation</tt> of 128 MiB, and a
--   <tt>memory</tt> hard limit of 300 MiB. This configuration would allow
--   the container to only reserve 128 MiB of memory from the remaining
--   resources on the container instance, but also allow the container to
--   consume more memory resources when needed.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
[$sel:memoryReservation:ContainerDefinition'] :: ContainerDefinition -> Maybe Int

-- | Create a value of <a>ContainerDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:image:ContainerDefinition'</a>,
--   <a>containerDefinition_image</a> - The image used to start a
--   container. This string is passed directly to the Docker daemon. Images
--   in the Docker Hub registry are available by default. Other
--   repositories are specified with either <tt> repository-url/image:tag
--   </tt> or <tt> repository-url/image@digest </tt>. Up to 255 letters
--   (uppercase and lowercase), numbers, hyphens, underscores, colons,
--   periods, forward slashes, and number signs are allowed. This parameter
--   maps to <tt>Image</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>IMAGE</tt> parameter of <a>docker
--   run</a>.
--   
--   <ul>
--   <li>When a new task starts, the Amazon ECS container agent pulls the
--   latest version of the specified image and tag for the container to
--   use. However, subsequent updates to a repository image are not
--   propagated to already running tasks.</li>
--   <li>Images in Amazon ECR repositories can be specified by either using
--   the full <tt>registry/repository:tag</tt> or
--   <tt>registry/repository@digest</tt>. For example,
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;:latest</tt>
--   or
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE</tt>.</li>
--   <li>Images in official repositories on Docker Hub use a single name
--   (for example, <tt>ubuntu</tt> or <tt>mongo</tt>).</li>
--   <li>Images in other repositories on Docker Hub are qualified with an
--   organization name (for example,
--   <tt>amazon/amazon-ecs-agent</tt>).</li>
--   <li>Images in other online repositories are qualified further by a
--   domain name (for example, <tt>quay.io/assemblyline/ubuntu</tt>).</li>
--   </ul>
--   
--   <a>$sel:command:ContainerDefinition'</a>,
--   <a>containerDefinition_command</a> - The command that is passed to the
--   container. This parameter maps to <tt>Cmd</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>COMMAND</tt> parameter to <a>docker run</a>. For more information,
--   see <a>https://docs.docker.com/engine/reference/builder/#cmd</a>. If
--   there are multiple arguments, each argument should be a separated
--   string in the array.
--   
--   <a>$sel:hostname:ContainerDefinition'</a>,
--   <a>containerDefinition_hostname</a> - The hostname to use for your
--   container. This parameter maps to <tt>Hostname</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--hostname</tt> option to <a>docker run</a>.
--   
--   The <tt>hostname</tt> parameter is not supported if you are using the
--   <tt>awsvpc</tt> network mode.
--   
--   <a>$sel:repositoryCredentials:ContainerDefinition'</a>,
--   <a>containerDefinition_repositoryCredentials</a> - The private
--   repository authentication credentials to use.
--   
--   <a>$sel:dockerSecurityOptions:ContainerDefinition'</a>,
--   <a>containerDefinition_dockerSecurityOptions</a> - A list of strings
--   to provide custom labels for SELinux and AppArmor multi-level security
--   systems. This field is not valid for containers in tasks using the
--   Fargate launch type.
--   
--   With Windows containers, this parameter can be used to reference a
--   credential spec file when configuring a container for Active Directory
--   authentication. For more information, see <a>Using gMSAs for Windows
--   Containers</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   This parameter maps to <tt>SecurityOpt</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--security-opt</tt> option to <a>docker run</a>.
--   
--   The Amazon ECS container agent running on a container instance must
--   register with the <tt>ECS_SELINUX_CAPABLE=true</tt> or
--   <tt>ECS_APPARMOR_CAPABLE=true</tt> environment variables before
--   containers placed on that instance can use these security options. For
--   more information, see <a>Amazon ECS Container Agent Configuration</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For more information about valid values, see <a>Docker Run Security
--   Configuration</a>.
--   
--   Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value"
--   | "credentialspec:CredentialSpecFilePath"
--   
--   <a>$sel:healthCheck:ContainerDefinition'</a>,
--   <a>containerDefinition_healthCheck</a> - The container health check
--   command and associated configuration parameters for the container.
--   This parameter maps to <tt>HealthCheck</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>HEALTHCHECK</tt> parameter of <a>docker run</a>.
--   
--   <a>$sel:disableNetworking:ContainerDefinition'</a>,
--   <a>containerDefinition_disableNetworking</a> - When this parameter is
--   true, networking is disabled within the container. This parameter maps
--   to <tt>NetworkDisabled</tt> in the <a>Create a container</a> section
--   of the <a>Docker Remote API</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:secrets:ContainerDefinition'</a>,
--   <a>containerDefinition_secrets</a> - The secrets to pass to the
--   container. For more information, see <a>Specifying Sensitive Data</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:volumesFrom:ContainerDefinition'</a>,
--   <a>containerDefinition_volumesFrom</a> - Data volumes to mount from
--   another container. This parameter maps to <tt>VolumesFrom</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--volumes-from</tt> option to <a>docker run</a>.
--   
--   <a>$sel:environment:ContainerDefinition'</a>,
--   <a>containerDefinition_environment</a> - The environment variables to
--   pass to a container. This parameter maps to <tt>Env</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--env</tt> option to <a>docker run</a>.
--   
--   We do not recommend using plaintext environment variables for
--   sensitive information, such as credential data.
--   
--   <a>$sel:environmentFiles:ContainerDefinition'</a>,
--   <a>containerDefinition_environmentFiles</a> - A list of files
--   containing the environment variables to pass to a container. This
--   parameter maps to the <tt>--env-file</tt> option to <a>docker run</a>.
--   
--   You can specify up to ten environment files. The file must have a
--   <tt>.env</tt> file extension. Each line in an environment file should
--   contain an environment variable in <tt>VARIABLE=VALUE</tt> format.
--   Lines beginning with <tt>#</tt> are treated as comments and are
--   ignored. For more information on the environment variable file syntax,
--   see <a>Declare default environment variables in file</a>.
--   
--   If there are environment variables specified using the
--   <tt>environment</tt> parameter in a container definition, they take
--   precedence over the variables contained within an environment file. If
--   multiple environment files are specified that contain the same
--   variable, they are processed from the top down. It is recommended to
--   use unique variable names. For more information, see <a>Specifying
--   Environment Variables</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <a>$sel:entryPoint:ContainerDefinition'</a>,
--   <a>containerDefinition_entryPoint</a> - Early versions of the Amazon
--   ECS container agent do not properly handle <tt>entryPoint</tt>
--   parameters. If you have problems using <tt>entryPoint</tt>, update
--   your container agent or enter your commands and arguments as
--   <tt>command</tt> array items instead.
--   
--   The entry point that is passed to the container. This parameter maps
--   to <tt>Entrypoint</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--entrypoint</tt> option to
--   <a>docker run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#entrypoint</a>.
--   
--   <a>$sel:workingDirectory:ContainerDefinition'</a>,
--   <a>containerDefinition_workingDirectory</a> - The working directory in
--   which to run commands inside the container. This parameter maps to
--   <tt>WorkingDir</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--workdir</tt> option to
--   <a>docker run</a>.
--   
--   <a>$sel:ulimits:ContainerDefinition'</a>,
--   <a>containerDefinition_ulimits</a> - A list of <tt>ulimits</tt> to set
--   in the container. If a ulimit value is specified in a task definition,
--   it will override the default values set by Docker. This parameter maps
--   to <tt>Ulimits</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--ulimit</tt> option to <a>docker
--   run</a>. Valid naming values are displayed in the Ulimit data type.
--   
--   Amazon ECS tasks hosted on Fargate use the default resource limit
--   values set by the operating system with the exception of the
--   <tt>nofile</tt> resource limit parameter which Fargate overrides. The
--   <tt>nofile</tt> resource limit sets a restriction on the number of
--   open files that a container can use. The default <tt>nofile</tt> soft
--   limit is <tt>1024</tt> and hard limit is <tt>4096</tt>.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:stopTimeout:ContainerDefinition'</a>,
--   <a>containerDefinition_stopTimeout</a> - Time duration (in seconds) to
--   wait before the container is forcefully killed if it doesn't exit
--   normally on its own.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version 1.3.0 or later. The max stop timeout value is 120
--   seconds and if the parameter is not specified, the default value of 30
--   seconds is used.
--   
--   For tasks using the EC2 launch type, if the <tt>stopTimeout</tt>
--   parameter is not specified, the value set for the Amazon ECS container
--   agent configuration variable <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> is
--   used by default. If neither the <tt>stopTimeout</tt> parameter or the
--   <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> agent configuration variable are
--   set, then the default values of 30 seconds for Linux containers and 30
--   seconds on Windows containers are used. Your container instances
--   require at least version 1.26.0 of the container agent to enable a
--   container stop timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:privileged:ContainerDefinition'</a>,
--   <a>containerDefinition_privileged</a> - When this parameter is true,
--   the container is given elevated privileges on the host container
--   instance (similar to the <tt>root</tt> user). This parameter maps to
--   <tt>Privileged</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--privileged</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:portMappings:ContainerDefinition'</a>,
--   <a>containerDefinition_portMappings</a> - The list of port mappings
--   for the container. Port mappings allow containers to access ports on
--   the host container instance to send or receive traffic.
--   
--   For task definitions that use the <tt>awsvpc</tt> network mode, you
--   should only specify the <tt>containerPort</tt>. The <tt>hostPort</tt>
--   can be left blank or it must be the same value as the
--   <tt>containerPort</tt>.
--   
--   Port mappings on Windows use the <tt>NetNAT</tt> gateway address
--   rather than <tt>localhost</tt>. There is no loopback for port mappings
--   on Windows, so you cannot access a container's mapped port from the
--   host itself.
--   
--   This parameter maps to <tt>PortBindings</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--publish</tt> option to <a>docker run</a>. If the network mode of
--   a task definition is set to <tt>none</tt>, then you can't specify port
--   mappings. If the network mode of a task definition is set to
--   <tt>host</tt>, then host ports must either be undefined or they must
--   match the container port in the port mapping.
--   
--   After a task reaches the <tt>RUNNING</tt> status, manual and automatic
--   host and container port assignments are visible in the <b>Network
--   Bindings</b> section of a container description for a selected task in
--   the Amazon ECS console. The assignments are also visible in the
--   <tt>networkBindings</tt> section DescribeTasks responses.
--   
--   <a>$sel:resourceRequirements:ContainerDefinition'</a>,
--   <a>containerDefinition_resourceRequirements</a> - The type and amount
--   of a resource to assign to a container. The only supported resource is
--   a GPU.
--   
--   <a>$sel:dockerLabels:ContainerDefinition'</a>,
--   <a>containerDefinition_dockerLabels</a> - A key/value map of labels to
--   add to the container. This parameter maps to <tt>Labels</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--label</tt> option to <a>docker run</a>. This parameter
--   requires version 1.18 of the Docker Remote API or greater on your
--   container instance. To check the Docker Remote API version on your
--   container instance, log in to your container instance and run the
--   following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   <a>$sel:extraHosts:ContainerDefinition'</a>,
--   <a>containerDefinition_extraHosts</a> - A list of hostnames and IP
--   address mappings to append to the <tt>/etc/hosts</tt> file on the
--   container. This parameter maps to <tt>ExtraHosts</tt> in the <a>Create
--   a container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--add-host</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks that
--   use the <tt>awsvpc</tt> network mode.
--   
--   <a>$sel:memory:ContainerDefinition'</a>,
--   <a>containerDefinition_memory</a> - The amount (in MiB) of memory to
--   present to the container. If your container attempts to exceed the
--   memory specified here, the container is killed. The total amount of
--   memory reserved for all containers within a task must be lower than
--   the task <tt>memory</tt> value, if one is specified. This parameter
--   maps to <tt>Memory</tt> in the <a>Create a container</a> section of
--   the <a>Docker Remote API</a> and the <tt>--memory</tt> option to
--   <a>docker run</a>.
--   
--   If using the Fargate launch type, this parameter is optional.
--   
--   If using the EC2 launch type, you must specify either a task-level
--   memory value or a container-level memory value. If you specify both a
--   container-level <tt>memory</tt> and <tt>memoryReservation</tt> value,
--   <tt>memory</tt> must be greater than <tt>memoryReservation</tt>. If
--   you specify <tt>memoryReservation</tt>, then that value is subtracted
--   from the available memory resources for the container instance on
--   which the container is placed. Otherwise, the value of <tt>memory</tt>
--   is used.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
--   
--   <a>$sel:systemControls:ContainerDefinition'</a>,
--   <a>containerDefinition_systemControls</a> - A list of namespaced
--   kernel parameters to set in the container. This parameter maps to
--   <tt>Sysctls</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--sysctl</tt> option to <a>docker
--   run</a>.
--   
--   It is not recommended that you specify network-related
--   <tt>systemControls</tt> parameters for multiple containers in a single
--   task that also uses either the <tt>awsvpc</tt> or <tt>host</tt>
--   network modes. For tasks that use the <tt>awsvpc</tt> network mode,
--   the container that is started last determines which
--   <tt>systemControls</tt> parameters take effect. For tasks that use the
--   <tt>host</tt> network mode, it changes the container instance's
--   namespaced kernel parameters as well as the containers.
--   
--   <a>$sel:user:ContainerDefinition'</a>, <a>containerDefinition_user</a>
--   - The user to use inside the container. This parameter maps to
--   <tt>User</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--user</tt> option to <a>docker
--   run</a>.
--   
--   When running tasks using the <tt>host</tt> network mode, you should
--   not run containers using the root user (UID 0). It is considered best
--   practice to use a non-root user.
--   
--   You can specify the <tt>user</tt> using the following formats. If
--   specifying a UID or GID, you must specify it as a positive integer.
--   
--   <ul>
--   <li><pre>user</pre></li>
--   <li><pre>user:group</pre></li>
--   <li><pre>uid</pre></li>
--   <li><pre>uid:gid</pre></li>
--   <li><pre>user:gid</pre></li>
--   <li><pre>uid:group</pre></li>
--   </ul>
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:firelensConfiguration:ContainerDefinition'</a>,
--   <a>containerDefinition_firelensConfiguration</a> - The FireLens
--   configuration for the container. This is used to specify and configure
--   a log router for container logs. For more information, see <a>Custom
--   Log Routing</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:dnsSearchDomains:ContainerDefinition'</a>,
--   <a>containerDefinition_dnsSearchDomains</a> - A list of DNS search
--   domains that are presented to the container. This parameter maps to
--   <tt>DnsSearch</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--dns-search</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:logConfiguration:ContainerDefinition'</a>,
--   <a>containerDefinition_logConfiguration</a> - The log configuration
--   specification for the container.
--   
--   This parameter maps to <tt>LogConfig</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--log-driver</tt> option to <a>docker run</a>. By default,
--   containers use the same logging driver that the Docker daemon uses.
--   However the container may use a different logging driver than the
--   Docker daemon by specifying a log driver with this parameter in the
--   container definition. To use a different logging driver for a
--   container, the log system must be configured properly on the container
--   instance (or on a different log server for remote logging options).
--   For more information on the options for different supported log
--   drivers, see <a>Configure logging drivers</a> in the Docker
--   documentation.
--   
--   Amazon ECS currently supports a subset of the logging drivers
--   available to the Docker daemon (shown in the LogConfiguration data
--   type). Additional log drivers may be available in future releases of
--   the Amazon ECS container agent.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   The Amazon ECS container agent running on a container instance must
--   register the logging drivers available on that instance with the
--   <tt>ECS_AVAILABLE_LOGGING_DRIVERS</tt> environment variable before
--   containers placed on that instance can use these log configuration
--   options. For more information, see <a>Amazon ECS Container Agent
--   Configuration</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:linuxParameters:ContainerDefinition'</a>,
--   <a>containerDefinition_linuxParameters</a> - Linux-specific
--   modifications that are applied to the container, such as Linux kernel
--   capabilities. For more information see KernelCapabilities.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:pseudoTerminal:ContainerDefinition'</a>,
--   <a>containerDefinition_pseudoTerminal</a> - When this parameter is
--   <tt>true</tt>, a TTY is allocated. This parameter maps to <tt>Tty</tt>
--   in the <a>Create a container</a> section of the <a>Docker Remote
--   API</a> and the <tt>--tty</tt> option to <a>docker run</a>.
--   
--   <a>$sel:dependsOn:ContainerDefinition'</a>,
--   <a>containerDefinition_dependsOn</a> - The dependencies defined for
--   container startup and shutdown. A container can contain multiple
--   dependencies. When a dependency is defined for container startup, for
--   container shutdown it is reversed.
--   
--   For tasks using the EC2 launch type, the container instances require
--   at least version 1.26.0 of the container agent to enable container
--   dependencies. However, we recommend using the latest container agent
--   version. For information about checking your agent version and
--   updating to the latest version, see <a>Updating the Amazon ECS
--   Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version <tt>1.3.0</tt> or later.
--   
--   <a>$sel:name:ContainerDefinition'</a>, <a>containerDefinition_name</a>
--   - The name of a container. If you are linking multiple containers
--   together in a task definition, the <tt>name</tt> of one container can
--   be entered in the <tt>links</tt> of another container to connect the
--   containers. Up to 255 letters (uppercase and lowercase), numbers,
--   underscores, and hyphens are allowed. This parameter maps to
--   <tt>name</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--name</tt> option to <a>docker
--   run</a>.
--   
--   <a>$sel:dnsServers:ContainerDefinition'</a>,
--   <a>containerDefinition_dnsServers</a> - A list of DNS servers that are
--   presented to the container. This parameter maps to <tt>Dns</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--dns</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:mountPoints:ContainerDefinition'</a>,
--   <a>containerDefinition_mountPoints</a> - The mount points for data
--   volumes in your container.
--   
--   This parameter maps to <tt>Volumes</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--volume</tt> option to <a>docker run</a>.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives.
--   
--   <a>$sel:interactive:ContainerDefinition'</a>,
--   <a>containerDefinition_interactive</a> - When this parameter is
--   <tt>true</tt>, this allows you to deploy containerized applications
--   that require <tt>stdin</tt> or a <tt>tty</tt> to be allocated. This
--   parameter maps to <tt>OpenStdin</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--interactive</tt>
--   option to <a>docker run</a>.
--   
--   <a>$sel:startTimeout:ContainerDefinition'</a>,
--   <a>containerDefinition_startTimeout</a> - Time duration (in seconds)
--   to wait before giving up on resolving dependencies for a container.
--   For example, you specify two containers in a task definition with
--   containerA having a dependency on containerB reaching a
--   <tt>COMPLETE</tt>, <tt>SUCCESS</tt>, or <tt>HEALTHY</tt> status. If a
--   <tt>startTimeout</tt> value is specified for containerB and it does
--   not reach the desired status within that time then containerA will
--   give up and not start. This results in the task transitioning to a
--   <tt>STOPPED</tt> state.
--   
--   When the <tt>ECS_CONTAINER_START_TIMEOUT</tt> container agent
--   configuration variable is used, it is enforced indendently from this
--   start timeout value.
--   
--   For tasks using the Fargate launch type, this parameter requires that
--   the task or service uses platform version 1.3.0 or later.
--   
--   For tasks using the EC2 launch type, your container instances require
--   at least version <tt>1.26.0</tt> of the container agent to enable a
--   container start timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version <tt>1.26.0-1</tt> of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:links:ContainerDefinition'</a>,
--   <a>containerDefinition_links</a> - The <tt>links</tt> parameter allows
--   containers to communicate with each other without the need for port
--   mappings. This parameter is only supported if the network mode of a
--   task definition is <tt>bridge</tt>. The <tt>name:internalName</tt>
--   construct is analogous to <tt>name:alias</tt> in Docker links. Up to
--   255 letters (uppercase and lowercase), numbers, underscores, and
--   hyphens are allowed. For more information about linking Docker
--   containers, go to <a>Legacy container links</a> in the Docker
--   documentation. This parameter maps to <tt>Links</tt> in the <a>Create
--   a container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--link</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   Containers that are collocated on a single container instance may be
--   able to communicate with each other without requiring links or host
--   port mappings. Network isolation is achieved on the container instance
--   using security groups and VPC settings.
--   
--   <a>$sel:readonlyRootFilesystem:ContainerDefinition'</a>,
--   <a>containerDefinition_readonlyRootFilesystem</a> - When this
--   parameter is true, the container is given read-only access to its root
--   file system. This parameter maps to <tt>ReadonlyRootfs</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--read-only</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:essential:ContainerDefinition'</a>,
--   <a>containerDefinition_essential</a> - If the <tt>essential</tt>
--   parameter of a container is marked as <tt>true</tt>, and that
--   container fails or stops for any reason, all other containers that are
--   part of the task are stopped. If the <tt>essential</tt> parameter of a
--   container is marked as <tt>false</tt>, then its failure does not
--   affect the rest of the containers in a task. If this parameter is
--   omitted, a container is assumed to be essential.
--   
--   All tasks must have at least one essential container. If you have an
--   application that is composed of multiple containers, you should group
--   containers that are used for a common purpose into components, and
--   separate the different components into multiple task definitions. For
--   more information, see <a>Application Architecture</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:cpu:ContainerDefinition'</a>, <a>containerDefinition_cpu</a> -
--   The number of <tt>cpu</tt> units reserved for the container. This
--   parameter maps to <tt>CpuShares</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--cpu-shares</tt>
--   option to <a>docker run</a>.
--   
--   This field is optional for tasks using the Fargate launch type, and
--   the only requirement is that the total amount of CPU reserved for all
--   containers within a task be lower than the task-level <tt>cpu</tt>
--   value.
--   
--   You can determine the number of CPU units that are available per EC2
--   instance type by multiplying the vCPUs listed for that instance type
--   on the <a>Amazon EC2 Instances</a> detail page by 1,024.
--   
--   Linux containers share unallocated CPU units with other containers on
--   the container instance with the same ratio as their allocated amount.
--   For example, if you run a single-container task on a single-core
--   instance type with 512 CPU units specified for that container, and
--   that is the only task running on the container instance, that
--   container could use the full 1,024 CPU unit share at any given time.
--   However, if you launched another copy of the same task on that
--   container instance, each task would be guaranteed a minimum of 512 CPU
--   units when needed, and each container could float to higher CPU usage
--   if the other container was not using it, but if both tasks were 100%
--   active all of the time, they would be limited to 512 CPU units.
--   
--   On Linux container instances, the Docker daemon on the container
--   instance uses the CPU value to calculate the relative CPU share ratios
--   for running containers. For more information, see <a>CPU share
--   constraint</a> in the Docker documentation. The minimum valid CPU
--   share value that the Linux kernel allows is 2. However, the CPU
--   parameter is not required, and you can use CPU values below 2 in your
--   container definitions. For CPU values below 2 (including null), the
--   behavior varies based on your Amazon ECS container agent version:
--   
--   <ul>
--   <li><b>Agent versions less than or equal to 1.1.0:</b> Null and zero
--   CPU values are passed to Docker as 0, which Docker then converts to
--   1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the
--   Linux kernel converts to two CPU shares.</li>
--   <li><b>Agent versions greater than or equal to 1.2.0:</b> Null, zero,
--   and CPU values of 1 are passed to Docker as 2.</li>
--   </ul>
--   
--   On Windows container instances, the CPU limit is enforced as an
--   absolute limit, or a quota. Windows containers only have access to the
--   specified amount of CPU that is described in the task definition. A
--   null or zero CPU value is passed to Docker as <tt>0</tt>, which
--   Windows interprets as 1% of one CPU.
--   
--   <a>$sel:memoryReservation:ContainerDefinition'</a>,
--   <a>containerDefinition_memoryReservation</a> - The soft limit (in MiB)
--   of memory to reserve for the container. When system memory is under
--   heavy contention, Docker attempts to keep the container memory to this
--   soft limit. However, your container can consume more memory when it
--   needs to, up to either the hard limit specified with the
--   <tt>memory</tt> parameter (if applicable), or all of the available
--   memory on the container instance, whichever comes first. This
--   parameter maps to <tt>MemoryReservation</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--memory-reservation</tt> option to <a>docker run</a>.
--   
--   If a task-level memory value is not specified, you must specify a
--   non-zero integer for one or both of <tt>memory</tt> or
--   <tt>memoryReservation</tt> in a container definition. If you specify
--   both, <tt>memory</tt> must be greater than <tt>memoryReservation</tt>.
--   If you specify <tt>memoryReservation</tt>, then that value is
--   subtracted from the available memory resources for the container
--   instance on which the container is placed. Otherwise, the value of
--   <tt>memory</tt> is used.
--   
--   For example, if your container normally uses 128 MiB of memory, but
--   occasionally bursts to 256 MiB of memory for short periods of time,
--   you can set a <tt>memoryReservation</tt> of 128 MiB, and a
--   <tt>memory</tt> hard limit of 300 MiB. This configuration would allow
--   the container to only reserve 128 MiB of memory from the remaining
--   resources on the container instance, but also allow the container to
--   consume more memory resources when needed.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
newContainerDefinition :: ContainerDefinition

-- | The image used to start a container. This string is passed directly to
--   the Docker daemon. Images in the Docker Hub registry are available by
--   default. Other repositories are specified with either <tt>
--   repository-url/image:tag </tt> or <tt> repository-url/image@digest
--   </tt>. Up to 255 letters (uppercase and lowercase), numbers, hyphens,
--   underscores, colons, periods, forward slashes, and number signs are
--   allowed. This parameter maps to <tt>Image</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>IMAGE</tt> parameter of <a>docker run</a>.
--   
--   <ul>
--   <li>When a new task starts, the Amazon ECS container agent pulls the
--   latest version of the specified image and tag for the container to
--   use. However, subsequent updates to a repository image are not
--   propagated to already running tasks.</li>
--   <li>Images in Amazon ECR repositories can be specified by either using
--   the full <tt>registry/repository:tag</tt> or
--   <tt>registry/repository@digest</tt>. For example,
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;:latest</tt>
--   or
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE</tt>.</li>
--   <li>Images in official repositories on Docker Hub use a single name
--   (for example, <tt>ubuntu</tt> or <tt>mongo</tt>).</li>
--   <li>Images in other repositories on Docker Hub are qualified with an
--   organization name (for example,
--   <tt>amazon/amazon-ecs-agent</tt>).</li>
--   <li>Images in other online repositories are qualified further by a
--   domain name (for example, <tt>quay.io/assemblyline/ubuntu</tt>).</li>
--   </ul>
containerDefinition_image :: Lens' ContainerDefinition (Maybe Text)

-- | The command that is passed to the container. This parameter maps to
--   <tt>Cmd</tt> in the <a>Create a container</a> section of the <a>Docker
--   Remote API</a> and the <tt>COMMAND</tt> parameter to <a>docker
--   run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#cmd</a>. If there
--   are multiple arguments, each argument should be a separated string in
--   the array.
containerDefinition_command :: Lens' ContainerDefinition (Maybe [Text])

-- | The hostname to use for your container. This parameter maps to
--   <tt>Hostname</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--hostname</tt> option to
--   <a>docker run</a>.
--   
--   The <tt>hostname</tt> parameter is not supported if you are using the
--   <tt>awsvpc</tt> network mode.
containerDefinition_hostname :: Lens' ContainerDefinition (Maybe Text)

-- | The private repository authentication credentials to use.
containerDefinition_repositoryCredentials :: Lens' ContainerDefinition (Maybe RepositoryCredentials)

-- | A list of strings to provide custom labels for SELinux and AppArmor
--   multi-level security systems. This field is not valid for containers
--   in tasks using the Fargate launch type.
--   
--   With Windows containers, this parameter can be used to reference a
--   credential spec file when configuring a container for Active Directory
--   authentication. For more information, see <a>Using gMSAs for Windows
--   Containers</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   This parameter maps to <tt>SecurityOpt</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--security-opt</tt> option to <a>docker run</a>.
--   
--   The Amazon ECS container agent running on a container instance must
--   register with the <tt>ECS_SELINUX_CAPABLE=true</tt> or
--   <tt>ECS_APPARMOR_CAPABLE=true</tt> environment variables before
--   containers placed on that instance can use these security options. For
--   more information, see <a>Amazon ECS Container Agent Configuration</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For more information about valid values, see <a>Docker Run Security
--   Configuration</a>.
--   
--   Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value"
--   | "credentialspec:CredentialSpecFilePath"
containerDefinition_dockerSecurityOptions :: Lens' ContainerDefinition (Maybe [Text])

-- | The container health check command and associated configuration
--   parameters for the container. This parameter maps to
--   <tt>HealthCheck</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>HEALTHCHECK</tt> parameter of
--   <a>docker run</a>.
containerDefinition_healthCheck :: Lens' ContainerDefinition (Maybe HealthCheck)

-- | When this parameter is true, networking is disabled within the
--   container. This parameter maps to <tt>NetworkDisabled</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_disableNetworking :: Lens' ContainerDefinition (Maybe Bool)

-- | The secrets to pass to the container. For more information, see
--   <a>Specifying Sensitive Data</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
containerDefinition_secrets :: Lens' ContainerDefinition (Maybe [Secret])

-- | Data volumes to mount from another container. This parameter maps to
--   <tt>VolumesFrom</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--volumes-from</tt> option to
--   <a>docker run</a>.
containerDefinition_volumesFrom :: Lens' ContainerDefinition (Maybe [VolumeFrom])

-- | The environment variables to pass to a container. This parameter maps
--   to <tt>Env</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--env</tt> option to <a>docker
--   run</a>.
--   
--   We do not recommend using plaintext environment variables for
--   sensitive information, such as credential data.
containerDefinition_environment :: Lens' ContainerDefinition (Maybe [KeyValuePair])

-- | A list of files containing the environment variables to pass to a
--   container. This parameter maps to the <tt>--env-file</tt> option to
--   <a>docker run</a>.
--   
--   You can specify up to ten environment files. The file must have a
--   <tt>.env</tt> file extension. Each line in an environment file should
--   contain an environment variable in <tt>VARIABLE=VALUE</tt> format.
--   Lines beginning with <tt>#</tt> are treated as comments and are
--   ignored. For more information on the environment variable file syntax,
--   see <a>Declare default environment variables in file</a>.
--   
--   If there are environment variables specified using the
--   <tt>environment</tt> parameter in a container definition, they take
--   precedence over the variables contained within an environment file. If
--   multiple environment files are specified that contain the same
--   variable, they are processed from the top down. It is recommended to
--   use unique variable names. For more information, see <a>Specifying
--   Environment Variables</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
containerDefinition_environmentFiles :: Lens' ContainerDefinition (Maybe [EnvironmentFile])

-- | Early versions of the Amazon ECS container agent do not properly
--   handle <tt>entryPoint</tt> parameters. If you have problems using
--   <tt>entryPoint</tt>, update your container agent or enter your
--   commands and arguments as <tt>command</tt> array items instead.
--   
--   The entry point that is passed to the container. This parameter maps
--   to <tt>Entrypoint</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--entrypoint</tt> option to
--   <a>docker run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#entrypoint</a>.
containerDefinition_entryPoint :: Lens' ContainerDefinition (Maybe [Text])

-- | The working directory in which to run commands inside the container.
--   This parameter maps to <tt>WorkingDir</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--workdir</tt> option to <a>docker run</a>.
containerDefinition_workingDirectory :: Lens' ContainerDefinition (Maybe Text)

-- | A list of <tt>ulimits</tt> to set in the container. If a ulimit value
--   is specified in a task definition, it will override the default values
--   set by Docker. This parameter maps to <tt>Ulimits</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--ulimit</tt> option to <a>docker run</a>. Valid naming values
--   are displayed in the Ulimit data type.
--   
--   Amazon ECS tasks hosted on Fargate use the default resource limit
--   values set by the operating system with the exception of the
--   <tt>nofile</tt> resource limit parameter which Fargate overrides. The
--   <tt>nofile</tt> resource limit sets a restriction on the number of
--   open files that a container can use. The default <tt>nofile</tt> soft
--   limit is <tt>1024</tt> and hard limit is <tt>4096</tt>.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   This parameter is not supported for Windows containers.
containerDefinition_ulimits :: Lens' ContainerDefinition (Maybe [Ulimit])

-- | Time duration (in seconds) to wait before the container is forcefully
--   killed if it doesn't exit normally on its own.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version 1.3.0 or later. The max stop timeout value is 120
--   seconds and if the parameter is not specified, the default value of 30
--   seconds is used.
--   
--   For tasks using the EC2 launch type, if the <tt>stopTimeout</tt>
--   parameter is not specified, the value set for the Amazon ECS container
--   agent configuration variable <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> is
--   used by default. If neither the <tt>stopTimeout</tt> parameter or the
--   <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> agent configuration variable are
--   set, then the default values of 30 seconds for Linux containers and 30
--   seconds on Windows containers are used. Your container instances
--   require at least version 1.26.0 of the container agent to enable a
--   container stop timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
containerDefinition_stopTimeout :: Lens' ContainerDefinition (Maybe Int)

-- | When this parameter is true, the container is given elevated
--   privileges on the host container instance (similar to the
--   <tt>root</tt> user). This parameter maps to <tt>Privileged</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--privileged</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
containerDefinition_privileged :: Lens' ContainerDefinition (Maybe Bool)

-- | The list of port mappings for the container. Port mappings allow
--   containers to access ports on the host container instance to send or
--   receive traffic.
--   
--   For task definitions that use the <tt>awsvpc</tt> network mode, you
--   should only specify the <tt>containerPort</tt>. The <tt>hostPort</tt>
--   can be left blank or it must be the same value as the
--   <tt>containerPort</tt>.
--   
--   Port mappings on Windows use the <tt>NetNAT</tt> gateway address
--   rather than <tt>localhost</tt>. There is no loopback for port mappings
--   on Windows, so you cannot access a container's mapped port from the
--   host itself.
--   
--   This parameter maps to <tt>PortBindings</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--publish</tt> option to <a>docker run</a>. If the network mode of
--   a task definition is set to <tt>none</tt>, then you can't specify port
--   mappings. If the network mode of a task definition is set to
--   <tt>host</tt>, then host ports must either be undefined or they must
--   match the container port in the port mapping.
--   
--   After a task reaches the <tt>RUNNING</tt> status, manual and automatic
--   host and container port assignments are visible in the <b>Network
--   Bindings</b> section of a container description for a selected task in
--   the Amazon ECS console. The assignments are also visible in the
--   <tt>networkBindings</tt> section DescribeTasks responses.
containerDefinition_portMappings :: Lens' ContainerDefinition (Maybe [PortMapping])

-- | The type and amount of a resource to assign to a container. The only
--   supported resource is a GPU.
containerDefinition_resourceRequirements :: Lens' ContainerDefinition (Maybe [ResourceRequirement])

-- | A key/value map of labels to add to the container. This parameter maps
--   to <tt>Labels</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--label</tt> option to <a>docker
--   run</a>. This parameter requires version 1.18 of the Docker Remote API
--   or greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
containerDefinition_dockerLabels :: Lens' ContainerDefinition (Maybe (HashMap Text Text))

-- | A list of hostnames and IP address mappings to append to the
--   <tt>/etc/hosts</tt> file on the container. This parameter maps to
--   <tt>ExtraHosts</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--add-host</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks that
--   use the <tt>awsvpc</tt> network mode.
containerDefinition_extraHosts :: Lens' ContainerDefinition (Maybe [HostEntry])

-- | The amount (in MiB) of memory to present to the container. If your
--   container attempts to exceed the memory specified here, the container
--   is killed. The total amount of memory reserved for all containers
--   within a task must be lower than the task <tt>memory</tt> value, if
--   one is specified. This parameter maps to <tt>Memory</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--memory</tt> option to <a>docker run</a>.
--   
--   If using the Fargate launch type, this parameter is optional.
--   
--   If using the EC2 launch type, you must specify either a task-level
--   memory value or a container-level memory value. If you specify both a
--   container-level <tt>memory</tt> and <tt>memoryReservation</tt> value,
--   <tt>memory</tt> must be greater than <tt>memoryReservation</tt>. If
--   you specify <tt>memoryReservation</tt>, then that value is subtracted
--   from the available memory resources for the container instance on
--   which the container is placed. Otherwise, the value of <tt>memory</tt>
--   is used.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
containerDefinition_memory :: Lens' ContainerDefinition (Maybe Int)

-- | A list of namespaced kernel parameters to set in the container. This
--   parameter maps to <tt>Sysctls</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--sysctl</tt>
--   option to <a>docker run</a>.
--   
--   It is not recommended that you specify network-related
--   <tt>systemControls</tt> parameters for multiple containers in a single
--   task that also uses either the <tt>awsvpc</tt> or <tt>host</tt>
--   network modes. For tasks that use the <tt>awsvpc</tt> network mode,
--   the container that is started last determines which
--   <tt>systemControls</tt> parameters take effect. For tasks that use the
--   <tt>host</tt> network mode, it changes the container instance's
--   namespaced kernel parameters as well as the containers.
containerDefinition_systemControls :: Lens' ContainerDefinition (Maybe [SystemControl])

-- | The user to use inside the container. This parameter maps to
--   <tt>User</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--user</tt> option to <a>docker
--   run</a>.
--   
--   When running tasks using the <tt>host</tt> network mode, you should
--   not run containers using the root user (UID 0). It is considered best
--   practice to use a non-root user.
--   
--   You can specify the <tt>user</tt> using the following formats. If
--   specifying a UID or GID, you must specify it as a positive integer.
--   
--   <ul>
--   <li><pre>user</pre></li>
--   <li><pre>user:group</pre></li>
--   <li><pre>uid</pre></li>
--   <li><pre>uid:gid</pre></li>
--   <li><pre>user:gid</pre></li>
--   <li><pre>uid:group</pre></li>
--   </ul>
--   
--   This parameter is not supported for Windows containers.
containerDefinition_user :: Lens' ContainerDefinition (Maybe Text)

-- | The FireLens configuration for the container. This is used to specify
--   and configure a log router for container logs. For more information,
--   see <a>Custom Log Routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
containerDefinition_firelensConfiguration :: Lens' ContainerDefinition (Maybe FirelensConfiguration)

-- | A list of DNS search domains that are presented to the container. This
--   parameter maps to <tt>DnsSearch</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--dns-search</tt>
--   option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_dnsSearchDomains :: Lens' ContainerDefinition (Maybe [Text])

-- | The log configuration specification for the container.
--   
--   This parameter maps to <tt>LogConfig</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--log-driver</tt> option to <a>docker run</a>. By default,
--   containers use the same logging driver that the Docker daemon uses.
--   However the container may use a different logging driver than the
--   Docker daemon by specifying a log driver with this parameter in the
--   container definition. To use a different logging driver for a
--   container, the log system must be configured properly on the container
--   instance (or on a different log server for remote logging options).
--   For more information on the options for different supported log
--   drivers, see <a>Configure logging drivers</a> in the Docker
--   documentation.
--   
--   Amazon ECS currently supports a subset of the logging drivers
--   available to the Docker daemon (shown in the LogConfiguration data
--   type). Additional log drivers may be available in future releases of
--   the Amazon ECS container agent.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   The Amazon ECS container agent running on a container instance must
--   register the logging drivers available on that instance with the
--   <tt>ECS_AVAILABLE_LOGGING_DRIVERS</tt> environment variable before
--   containers placed on that instance can use these log configuration
--   options. For more information, see <a>Amazon ECS Container Agent
--   Configuration</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
containerDefinition_logConfiguration :: Lens' ContainerDefinition (Maybe LogConfiguration)

-- | Linux-specific modifications that are applied to the container, such
--   as Linux kernel capabilities. For more information see
--   KernelCapabilities.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_linuxParameters :: Lens' ContainerDefinition (Maybe LinuxParameters)

-- | When this parameter is <tt>true</tt>, a TTY is allocated. This
--   parameter maps to <tt>Tty</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--tty</tt> option
--   to <a>docker run</a>.
containerDefinition_pseudoTerminal :: Lens' ContainerDefinition (Maybe Bool)

-- | The dependencies defined for container startup and shutdown. A
--   container can contain multiple dependencies. When a dependency is
--   defined for container startup, for container shutdown it is reversed.
--   
--   For tasks using the EC2 launch type, the container instances require
--   at least version 1.26.0 of the container agent to enable container
--   dependencies. However, we recommend using the latest container agent
--   version. For information about checking your agent version and
--   updating to the latest version, see <a>Updating the Amazon ECS
--   Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version <tt>1.3.0</tt> or later.
containerDefinition_dependsOn :: Lens' ContainerDefinition (Maybe [ContainerDependency])

-- | The name of a container. If you are linking multiple containers
--   together in a task definition, the <tt>name</tt> of one container can
--   be entered in the <tt>links</tt> of another container to connect the
--   containers. Up to 255 letters (uppercase and lowercase), numbers,
--   underscores, and hyphens are allowed. This parameter maps to
--   <tt>name</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--name</tt> option to <a>docker
--   run</a>.
containerDefinition_name :: Lens' ContainerDefinition (Maybe Text)

-- | A list of DNS servers that are presented to the container. This
--   parameter maps to <tt>Dns</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--dns</tt> option
--   to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_dnsServers :: Lens' ContainerDefinition (Maybe [Text])

-- | The mount points for data volumes in your container.
--   
--   This parameter maps to <tt>Volumes</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--volume</tt> option to <a>docker run</a>.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives.
containerDefinition_mountPoints :: Lens' ContainerDefinition (Maybe [MountPoint])

-- | When this parameter is <tt>true</tt>, this allows you to deploy
--   containerized applications that require <tt>stdin</tt> or a
--   <tt>tty</tt> to be allocated. This parameter maps to
--   <tt>OpenStdin</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--interactive</tt> option to
--   <a>docker run</a>.
containerDefinition_interactive :: Lens' ContainerDefinition (Maybe Bool)

-- | Time duration (in seconds) to wait before giving up on resolving
--   dependencies for a container. For example, you specify two containers
--   in a task definition with containerA having a dependency on containerB
--   reaching a <tt>COMPLETE</tt>, <tt>SUCCESS</tt>, or <tt>HEALTHY</tt>
--   status. If a <tt>startTimeout</tt> value is specified for containerB
--   and it does not reach the desired status within that time then
--   containerA will give up and not start. This results in the task
--   transitioning to a <tt>STOPPED</tt> state.
--   
--   When the <tt>ECS_CONTAINER_START_TIMEOUT</tt> container agent
--   configuration variable is used, it is enforced indendently from this
--   start timeout value.
--   
--   For tasks using the Fargate launch type, this parameter requires that
--   the task or service uses platform version 1.3.0 or later.
--   
--   For tasks using the EC2 launch type, your container instances require
--   at least version <tt>1.26.0</tt> of the container agent to enable a
--   container start timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version <tt>1.26.0-1</tt> of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
containerDefinition_startTimeout :: Lens' ContainerDefinition (Maybe Int)

-- | The <tt>links</tt> parameter allows containers to communicate with
--   each other without the need for port mappings. This parameter is only
--   supported if the network mode of a task definition is <tt>bridge</tt>.
--   The <tt>name:internalName</tt> construct is analogous to
--   <tt>name:alias</tt> in Docker links. Up to 255 letters (uppercase and
--   lowercase), numbers, underscores, and hyphens are allowed. For more
--   information about linking Docker containers, go to <a>Legacy container
--   links</a> in the Docker documentation. This parameter maps to
--   <tt>Links</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--link</tt> option to <a>docker
--   run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   Containers that are collocated on a single container instance may be
--   able to communicate with each other without requiring links or host
--   port mappings. Network isolation is achieved on the container instance
--   using security groups and VPC settings.
containerDefinition_links :: Lens' ContainerDefinition (Maybe [Text])

-- | When this parameter is true, the container is given read-only access
--   to its root file system. This parameter maps to
--   <tt>ReadonlyRootfs</tt> in the <a>Create a container</a> section of
--   the <a>Docker Remote API</a> and the <tt>--read-only</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_readonlyRootFilesystem :: Lens' ContainerDefinition (Maybe Bool)

-- | If the <tt>essential</tt> parameter of a container is marked as
--   <tt>true</tt>, and that container fails or stops for any reason, all
--   other containers that are part of the task are stopped. If the
--   <tt>essential</tt> parameter of a container is marked as
--   <tt>false</tt>, then its failure does not affect the rest of the
--   containers in a task. If this parameter is omitted, a container is
--   assumed to be essential.
--   
--   All tasks must have at least one essential container. If you have an
--   application that is composed of multiple containers, you should group
--   containers that are used for a common purpose into components, and
--   separate the different components into multiple task definitions. For
--   more information, see <a>Application Architecture</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
containerDefinition_essential :: Lens' ContainerDefinition (Maybe Bool)

-- | The number of <tt>cpu</tt> units reserved for the container. This
--   parameter maps to <tt>CpuShares</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--cpu-shares</tt>
--   option to <a>docker run</a>.
--   
--   This field is optional for tasks using the Fargate launch type, and
--   the only requirement is that the total amount of CPU reserved for all
--   containers within a task be lower than the task-level <tt>cpu</tt>
--   value.
--   
--   You can determine the number of CPU units that are available per EC2
--   instance type by multiplying the vCPUs listed for that instance type
--   on the <a>Amazon EC2 Instances</a> detail page by 1,024.
--   
--   Linux containers share unallocated CPU units with other containers on
--   the container instance with the same ratio as their allocated amount.
--   For example, if you run a single-container task on a single-core
--   instance type with 512 CPU units specified for that container, and
--   that is the only task running on the container instance, that
--   container could use the full 1,024 CPU unit share at any given time.
--   However, if you launched another copy of the same task on that
--   container instance, each task would be guaranteed a minimum of 512 CPU
--   units when needed, and each container could float to higher CPU usage
--   if the other container was not using it, but if both tasks were 100%
--   active all of the time, they would be limited to 512 CPU units.
--   
--   On Linux container instances, the Docker daemon on the container
--   instance uses the CPU value to calculate the relative CPU share ratios
--   for running containers. For more information, see <a>CPU share
--   constraint</a> in the Docker documentation. The minimum valid CPU
--   share value that the Linux kernel allows is 2. However, the CPU
--   parameter is not required, and you can use CPU values below 2 in your
--   container definitions. For CPU values below 2 (including null), the
--   behavior varies based on your Amazon ECS container agent version:
--   
--   <ul>
--   <li><b>Agent versions less than or equal to 1.1.0:</b> Null and zero
--   CPU values are passed to Docker as 0, which Docker then converts to
--   1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the
--   Linux kernel converts to two CPU shares.</li>
--   <li><b>Agent versions greater than or equal to 1.2.0:</b> Null, zero,
--   and CPU values of 1 are passed to Docker as 2.</li>
--   </ul>
--   
--   On Windows container instances, the CPU limit is enforced as an
--   absolute limit, or a quota. Windows containers only have access to the
--   specified amount of CPU that is described in the task definition. A
--   null or zero CPU value is passed to Docker as <tt>0</tt>, which
--   Windows interprets as 1% of one CPU.
containerDefinition_cpu :: Lens' ContainerDefinition (Maybe Int)

-- | The soft limit (in MiB) of memory to reserve for the container. When
--   system memory is under heavy contention, Docker attempts to keep the
--   container memory to this soft limit. However, your container can
--   consume more memory when it needs to, up to either the hard limit
--   specified with the <tt>memory</tt> parameter (if applicable), or all
--   of the available memory on the container instance, whichever comes
--   first. This parameter maps to <tt>MemoryReservation</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--memory-reservation</tt> option to <a>docker run</a>.
--   
--   If a task-level memory value is not specified, you must specify a
--   non-zero integer for one or both of <tt>memory</tt> or
--   <tt>memoryReservation</tt> in a container definition. If you specify
--   both, <tt>memory</tt> must be greater than <tt>memoryReservation</tt>.
--   If you specify <tt>memoryReservation</tt>, then that value is
--   subtracted from the available memory resources for the container
--   instance on which the container is placed. Otherwise, the value of
--   <tt>memory</tt> is used.
--   
--   For example, if your container normally uses 128 MiB of memory, but
--   occasionally bursts to 256 MiB of memory for short periods of time,
--   you can set a <tt>memoryReservation</tt> of 128 MiB, and a
--   <tt>memory</tt> hard limit of 300 MiB. This configuration would allow
--   the container to only reserve 128 MiB of memory from the remaining
--   resources on the container instance, but also allow the container to
--   consume more memory resources when needed.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
containerDefinition_memoryReservation :: Lens' ContainerDefinition (Maybe Int)

-- | The dependencies defined for container startup and shutdown. A
--   container can contain multiple dependencies. When a dependency is
--   defined for container startup, for container shutdown it is reversed.
--   
--   Your Amazon ECS container instances require at least version 1.26.0 of
--   the container agent to enable container dependencies. However, we
--   recommend using the latest container agent version. For information
--   about checking your agent version and updating to the latest version,
--   see <a>Updating the Amazon ECS Container Agent</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>. If you are using an
--   Amazon ECS-optimized Linux AMI, your instance needs at least version
--   1.26.0-1 of the <tt>ecs-init</tt> package. If your container instances
--   are launched from version <tt>20190301</tt> or later, then they
--   contain the required versions of the container agent and
--   <tt>ecs-init</tt>. For more information, see <a>Amazon ECS-optimized
--   Linux AMI</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   For tasks using the Fargate launch type, this parameter requires that
--   the task or service uses platform version 1.3.0 or later.
--   
--   <i>See:</i> <a>newContainerDependency</a> smart constructor.
data ContainerDependency
ContainerDependency' :: Text -> ContainerCondition -> ContainerDependency

-- | The name of a container.
[$sel:containerName:ContainerDependency'] :: ContainerDependency -> Text

-- | The dependency condition of the container. The following are the
--   available conditions and their behavior:
--   
--   <ul>
--   <li><tt>START</tt> - This condition emulates the behavior of links and
--   volumes today. It validates that a dependent container is started
--   before permitting other containers to start.</li>
--   <li><tt>COMPLETE</tt> - This condition validates that a dependent
--   container runs to completion (exits) before permitting other
--   containers to start. This can be useful for nonessential containers
--   that run a script and then exit. This condition cannot be set on an
--   essential container.</li>
--   <li><tt>SUCCESS</tt> - This condition is the same as
--   <tt>COMPLETE</tt>, but it also requires that the container exits with
--   a <tt>zero</tt> status. This condition cannot be set on an essential
--   container.</li>
--   <li><tt>HEALTHY</tt> - This condition validates that the dependent
--   container passes its Docker health check before permitting other
--   containers to start. This requires that the dependent container has
--   health checks configured. This condition is confirmed only at task
--   startup.</li>
--   </ul>
[$sel:condition:ContainerDependency'] :: ContainerDependency -> ContainerCondition

-- | Create a value of <a>ContainerDependency</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:ContainerDependency'</a>,
--   <a>containerDependency_containerName</a> - The name of a container.
--   
--   <a>$sel:condition:ContainerDependency'</a>,
--   <a>containerDependency_condition</a> - The dependency condition of the
--   container. The following are the available conditions and their
--   behavior:
--   
--   <ul>
--   <li><tt>START</tt> - This condition emulates the behavior of links and
--   volumes today. It validates that a dependent container is started
--   before permitting other containers to start.</li>
--   <li><tt>COMPLETE</tt> - This condition validates that a dependent
--   container runs to completion (exits) before permitting other
--   containers to start. This can be useful for nonessential containers
--   that run a script and then exit. This condition cannot be set on an
--   essential container.</li>
--   <li><tt>SUCCESS</tt> - This condition is the same as
--   <tt>COMPLETE</tt>, but it also requires that the container exits with
--   a <tt>zero</tt> status. This condition cannot be set on an essential
--   container.</li>
--   <li><tt>HEALTHY</tt> - This condition validates that the dependent
--   container passes its Docker health check before permitting other
--   containers to start. This requires that the dependent container has
--   health checks configured. This condition is confirmed only at task
--   startup.</li>
--   </ul>
newContainerDependency :: Text -> ContainerCondition -> ContainerDependency

-- | The name of a container.
containerDependency_containerName :: Lens' ContainerDependency Text

-- | The dependency condition of the container. The following are the
--   available conditions and their behavior:
--   
--   <ul>
--   <li><tt>START</tt> - This condition emulates the behavior of links and
--   volumes today. It validates that a dependent container is started
--   before permitting other containers to start.</li>
--   <li><tt>COMPLETE</tt> - This condition validates that a dependent
--   container runs to completion (exits) before permitting other
--   containers to start. This can be useful for nonessential containers
--   that run a script and then exit. This condition cannot be set on an
--   essential container.</li>
--   <li><tt>SUCCESS</tt> - This condition is the same as
--   <tt>COMPLETE</tt>, but it also requires that the container exits with
--   a <tt>zero</tt> status. This condition cannot be set on an essential
--   container.</li>
--   <li><tt>HEALTHY</tt> - This condition validates that the dependent
--   container passes its Docker health check before permitting other
--   containers to start. This requires that the dependent container has
--   health checks configured. This condition is confirmed only at task
--   startup.</li>
--   </ul>
containerDependency_condition :: Lens' ContainerDependency ContainerCondition

-- | An EC2 instance that is running the Amazon ECS agent and has been
--   registered with a cluster.
--   
--   <i>See:</i> <a>newContainerInstance</a> smart constructor.
data ContainerInstance
ContainerInstance' :: Maybe Text -> Maybe [Attachment] -> Maybe Int -> Maybe [Resource] -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe VersionInfo -> Maybe AgentUpdateStatus -> Maybe [Attribute] -> Maybe Integer -> Maybe Int -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe [Tag] -> Maybe [Resource] -> ContainerInstance

-- | The status of the container instance. The valid values are
--   <tt>REGISTERING</tt>, <tt>REGISTRATION_FAILED</tt>, <tt>ACTIVE</tt>,
--   <tt>INACTIVE</tt>, <tt>DEREGISTERING</tt>, or <tt>DRAINING</tt>.
--   
--   If your account has opted in to the <tt>awsvpcTrunking</tt> account
--   setting, then any newly registered container instance will transition
--   to a <tt>REGISTERING</tt> status while the trunk elastic network
--   interface is provisioned for the instance. If the registration fails,
--   the instance will transition to a <tt>REGISTRATION_FAILED</tt> status.
--   You can describe the container instance and see the reason for failure
--   in the <tt>statusReason</tt> parameter. Once the container instance is
--   terminated, the instance transitions to a <tt>DEREGISTERING</tt>
--   status while the trunk elastic network interface is deprovisioned. The
--   instance then transitions to an <tt>INACTIVE</tt> status.
--   
--   The <tt>ACTIVE</tt> status indicates that the container instance can
--   accept tasks. The <tt>DRAINING</tt> indicates that new tasks are not
--   placed on the container instance and any service tasks running on the
--   container instance are removed if possible. For more information, see
--   <a>Container Instance Draining</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
[$sel:status:ContainerInstance'] :: ContainerInstance -> Maybe Text

-- | The resources attached to a container instance, such as elastic
--   network interfaces.
[$sel:attachments:ContainerInstance'] :: ContainerInstance -> Maybe [Attachment]

-- | The number of tasks on the container instance that are in the
--   <tt>RUNNING</tt> status.
[$sel:runningTasksCount:ContainerInstance'] :: ContainerInstance -> Maybe Int

-- | For CPU and memory resource types, this parameter describes the
--   remaining CPU and memory that has not already been allocated to tasks
--   and is therefore available for new tasks. For port resource types,
--   this parameter describes the ports that were reserved by the Amazon
--   ECS container agent (at instance registration time) and any task
--   containers that have reserved port mappings on the host (with the
--   <tt>host</tt> or <tt>bridge</tt> network mode). Any port that is not
--   specified here is available for new tasks.
[$sel:remainingResources:ContainerInstance'] :: ContainerInstance -> Maybe [Resource]

-- | The ID of the container instance. For Amazon EC2 instances, this value
--   is the Amazon EC2 instance ID. For external instances, this value is
--   the Amazon Web Services Systems Manager managed instance ID.
[$sel:ec2InstanceId:ContainerInstance'] :: ContainerInstance -> Maybe Text

-- | The Amazon Resource Name (ARN) of the container instance. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the container instance, the Amazon Web Services account ID of the
--   container instance owner, the <tt>container-instance</tt> namespace,
--   and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
[$sel:containerInstanceArn:ContainerInstance'] :: ContainerInstance -> Maybe Text

-- | This parameter returns <tt>true</tt> if the agent is connected to
--   Amazon ECS. Registered instances with an agent that may be unhealthy
--   or stopped return <tt>false</tt>. Only instances connected to an agent
--   can accept placement requests.
[$sel:agentConnected:ContainerInstance'] :: ContainerInstance -> Maybe Bool

-- | The version information for the Amazon ECS container agent and Docker
--   daemon running on the container instance.
[$sel:versionInfo:ContainerInstance'] :: ContainerInstance -> Maybe VersionInfo

-- | The status of the most recent agent update. If an update has never
--   been requested, this value is <tt>NULL</tt>.
[$sel:agentUpdateStatus:ContainerInstance'] :: ContainerInstance -> Maybe AgentUpdateStatus

-- | The attributes set for the container instance, either by the Amazon
--   ECS container agent at instance registration or manually with the
--   PutAttributes operation.
[$sel:attributes:ContainerInstance'] :: ContainerInstance -> Maybe [Attribute]

-- | The version counter for the container instance. Every time a container
--   instance experiences a change that triggers a CloudWatch event, the
--   version counter is incremented. If you are replicating your Amazon ECS
--   container instance state with CloudWatch Events, you can compare the
--   version of a container instance reported by the Amazon ECS APIs with
--   the version reported in CloudWatch Events for the container instance
--   (inside the <tt>detail</tt> object) to verify that the version in your
--   event stream is current.
[$sel:version:ContainerInstance'] :: ContainerInstance -> Maybe Integer

-- | The number of tasks on the container instance that are in the
--   <tt>PENDING</tt> status.
[$sel:pendingTasksCount:ContainerInstance'] :: ContainerInstance -> Maybe Int

-- | The capacity provider associated with the container instance.
[$sel:capacityProviderName:ContainerInstance'] :: ContainerInstance -> Maybe Text

-- | The Unix timestamp for when the container instance was registered.
[$sel:registeredAt:ContainerInstance'] :: ContainerInstance -> Maybe POSIX

-- | The reason that the container instance reached its current status.
[$sel:statusReason:ContainerInstance'] :: ContainerInstance -> Maybe Text

-- | The metadata that you apply to the container instance to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:ContainerInstance'] :: ContainerInstance -> Maybe [Tag]

-- | For CPU and memory resource types, this parameter describes the amount
--   of each resource that was available on the container instance when the
--   container agent registered it with Amazon ECS. This value represents
--   the total amount of CPU and memory that can be allocated on this
--   container instance to tasks. For port resource types, this parameter
--   describes the ports that were reserved by the Amazon ECS container
--   agent when it registered the container instance with Amazon ECS.
[$sel:registeredResources:ContainerInstance'] :: ContainerInstance -> Maybe [Resource]

-- | Create a value of <a>ContainerInstance</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ContainerInstance'</a>, <a>containerInstance_status</a>
--   - The status of the container instance. The valid values are
--   <tt>REGISTERING</tt>, <tt>REGISTRATION_FAILED</tt>, <tt>ACTIVE</tt>,
--   <tt>INACTIVE</tt>, <tt>DEREGISTERING</tt>, or <tt>DRAINING</tt>.
--   
--   If your account has opted in to the <tt>awsvpcTrunking</tt> account
--   setting, then any newly registered container instance will transition
--   to a <tt>REGISTERING</tt> status while the trunk elastic network
--   interface is provisioned for the instance. If the registration fails,
--   the instance will transition to a <tt>REGISTRATION_FAILED</tt> status.
--   You can describe the container instance and see the reason for failure
--   in the <tt>statusReason</tt> parameter. Once the container instance is
--   terminated, the instance transitions to a <tt>DEREGISTERING</tt>
--   status while the trunk elastic network interface is deprovisioned. The
--   instance then transitions to an <tt>INACTIVE</tt> status.
--   
--   The <tt>ACTIVE</tt> status indicates that the container instance can
--   accept tasks. The <tt>DRAINING</tt> indicates that new tasks are not
--   placed on the container instance and any service tasks running on the
--   container instance are removed if possible. For more information, see
--   <a>Container Instance Draining</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:attachments:ContainerInstance'</a>,
--   <a>containerInstance_attachments</a> - The resources attached to a
--   container instance, such as elastic network interfaces.
--   
--   <a>$sel:runningTasksCount:ContainerInstance'</a>,
--   <a>containerInstance_runningTasksCount</a> - The number of tasks on
--   the container instance that are in the <tt>RUNNING</tt> status.
--   
--   <a>$sel:remainingResources:ContainerInstance'</a>,
--   <a>containerInstance_remainingResources</a> - For CPU and memory
--   resource types, this parameter describes the remaining CPU and memory
--   that has not already been allocated to tasks and is therefore
--   available for new tasks. For port resource types, this parameter
--   describes the ports that were reserved by the Amazon ECS container
--   agent (at instance registration time) and any task containers that
--   have reserved port mappings on the host (with the <tt>host</tt> or
--   <tt>bridge</tt> network mode). Any port that is not specified here is
--   available for new tasks.
--   
--   <a>$sel:ec2InstanceId:ContainerInstance'</a>,
--   <a>containerInstance_ec2InstanceId</a> - The ID of the container
--   instance. For Amazon EC2 instances, this value is the Amazon EC2
--   instance ID. For external instances, this value is the Amazon Web
--   Services Systems Manager managed instance ID.
--   
--   <a>$sel:containerInstanceArn:ContainerInstance'</a>,
--   <a>containerInstance_containerInstanceArn</a> - The Amazon Resource
--   Name (ARN) of the container instance. The ARN contains the
--   <tt>arn:aws:ecs</tt> namespace, followed by the Region of the
--   container instance, the Amazon Web Services account ID of the
--   container instance owner, the <tt>container-instance</tt> namespace,
--   and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
--   
--   <a>$sel:agentConnected:ContainerInstance'</a>,
--   <a>containerInstance_agentConnected</a> - This parameter returns
--   <tt>true</tt> if the agent is connected to Amazon ECS. Registered
--   instances with an agent that may be unhealthy or stopped return
--   <tt>false</tt>. Only instances connected to an agent can accept
--   placement requests.
--   
--   <a>$sel:versionInfo:ContainerInstance'</a>,
--   <a>containerInstance_versionInfo</a> - The version information for the
--   Amazon ECS container agent and Docker daemon running on the container
--   instance.
--   
--   <a>$sel:agentUpdateStatus:ContainerInstance'</a>,
--   <a>containerInstance_agentUpdateStatus</a> - The status of the most
--   recent agent update. If an update has never been requested, this value
--   is <tt>NULL</tt>.
--   
--   <a>$sel:attributes:ContainerInstance'</a>,
--   <a>containerInstance_attributes</a> - The attributes set for the
--   container instance, either by the Amazon ECS container agent at
--   instance registration or manually with the PutAttributes operation.
--   
--   <a>$sel:version:ContainerInstance'</a>,
--   <a>containerInstance_version</a> - The version counter for the
--   container instance. Every time a container instance experiences a
--   change that triggers a CloudWatch event, the version counter is
--   incremented. If you are replicating your Amazon ECS container instance
--   state with CloudWatch Events, you can compare the version of a
--   container instance reported by the Amazon ECS APIs with the version
--   reported in CloudWatch Events for the container instance (inside the
--   <tt>detail</tt> object) to verify that the version in your event
--   stream is current.
--   
--   <a>$sel:pendingTasksCount:ContainerInstance'</a>,
--   <a>containerInstance_pendingTasksCount</a> - The number of tasks on
--   the container instance that are in the <tt>PENDING</tt> status.
--   
--   <a>$sel:capacityProviderName:ContainerInstance'</a>,
--   <a>containerInstance_capacityProviderName</a> - The capacity provider
--   associated with the container instance.
--   
--   <a>$sel:registeredAt:ContainerInstance'</a>,
--   <a>containerInstance_registeredAt</a> - The Unix timestamp for when
--   the container instance was registered.
--   
--   <a>$sel:statusReason:ContainerInstance'</a>,
--   <a>containerInstance_statusReason</a> - The reason that the container
--   instance reached its current status.
--   
--   <a>$sel:tags:ContainerInstance'</a>, <a>containerInstance_tags</a> -
--   The metadata that you apply to the container instance to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:registeredResources:ContainerInstance'</a>,
--   <a>containerInstance_registeredResources</a> - For CPU and memory
--   resource types, this parameter describes the amount of each resource
--   that was available on the container instance when the container agent
--   registered it with Amazon ECS. This value represents the total amount
--   of CPU and memory that can be allocated on this container instance to
--   tasks. For port resource types, this parameter describes the ports
--   that were reserved by the Amazon ECS container agent when it
--   registered the container instance with Amazon ECS.
newContainerInstance :: ContainerInstance

-- | The status of the container instance. The valid values are
--   <tt>REGISTERING</tt>, <tt>REGISTRATION_FAILED</tt>, <tt>ACTIVE</tt>,
--   <tt>INACTIVE</tt>, <tt>DEREGISTERING</tt>, or <tt>DRAINING</tt>.
--   
--   If your account has opted in to the <tt>awsvpcTrunking</tt> account
--   setting, then any newly registered container instance will transition
--   to a <tt>REGISTERING</tt> status while the trunk elastic network
--   interface is provisioned for the instance. If the registration fails,
--   the instance will transition to a <tt>REGISTRATION_FAILED</tt> status.
--   You can describe the container instance and see the reason for failure
--   in the <tt>statusReason</tt> parameter. Once the container instance is
--   terminated, the instance transitions to a <tt>DEREGISTERING</tt>
--   status while the trunk elastic network interface is deprovisioned. The
--   instance then transitions to an <tt>INACTIVE</tt> status.
--   
--   The <tt>ACTIVE</tt> status indicates that the container instance can
--   accept tasks. The <tt>DRAINING</tt> indicates that new tasks are not
--   placed on the container instance and any service tasks running on the
--   container instance are removed if possible. For more information, see
--   <a>Container Instance Draining</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
containerInstance_status :: Lens' ContainerInstance (Maybe Text)

-- | The resources attached to a container instance, such as elastic
--   network interfaces.
containerInstance_attachments :: Lens' ContainerInstance (Maybe [Attachment])

-- | The number of tasks on the container instance that are in the
--   <tt>RUNNING</tt> status.
containerInstance_runningTasksCount :: Lens' ContainerInstance (Maybe Int)

-- | For CPU and memory resource types, this parameter describes the
--   remaining CPU and memory that has not already been allocated to tasks
--   and is therefore available for new tasks. For port resource types,
--   this parameter describes the ports that were reserved by the Amazon
--   ECS container agent (at instance registration time) and any task
--   containers that have reserved port mappings on the host (with the
--   <tt>host</tt> or <tt>bridge</tt> network mode). Any port that is not
--   specified here is available for new tasks.
containerInstance_remainingResources :: Lens' ContainerInstance (Maybe [Resource])

-- | The ID of the container instance. For Amazon EC2 instances, this value
--   is the Amazon EC2 instance ID. For external instances, this value is
--   the Amazon Web Services Systems Manager managed instance ID.
containerInstance_ec2InstanceId :: Lens' ContainerInstance (Maybe Text)

-- | The Amazon Resource Name (ARN) of the container instance. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the container instance, the Amazon Web Services account ID of the
--   container instance owner, the <tt>container-instance</tt> namespace,
--   and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
containerInstance_containerInstanceArn :: Lens' ContainerInstance (Maybe Text)

-- | This parameter returns <tt>true</tt> if the agent is connected to
--   Amazon ECS. Registered instances with an agent that may be unhealthy
--   or stopped return <tt>false</tt>. Only instances connected to an agent
--   can accept placement requests.
containerInstance_agentConnected :: Lens' ContainerInstance (Maybe Bool)

-- | The version information for the Amazon ECS container agent and Docker
--   daemon running on the container instance.
containerInstance_versionInfo :: Lens' ContainerInstance (Maybe VersionInfo)

-- | The status of the most recent agent update. If an update has never
--   been requested, this value is <tt>NULL</tt>.
containerInstance_agentUpdateStatus :: Lens' ContainerInstance (Maybe AgentUpdateStatus)

-- | The attributes set for the container instance, either by the Amazon
--   ECS container agent at instance registration or manually with the
--   PutAttributes operation.
containerInstance_attributes :: Lens' ContainerInstance (Maybe [Attribute])

-- | The version counter for the container instance. Every time a container
--   instance experiences a change that triggers a CloudWatch event, the
--   version counter is incremented. If you are replicating your Amazon ECS
--   container instance state with CloudWatch Events, you can compare the
--   version of a container instance reported by the Amazon ECS APIs with
--   the version reported in CloudWatch Events for the container instance
--   (inside the <tt>detail</tt> object) to verify that the version in your
--   event stream is current.
containerInstance_version :: Lens' ContainerInstance (Maybe Integer)

-- | The number of tasks on the container instance that are in the
--   <tt>PENDING</tt> status.
containerInstance_pendingTasksCount :: Lens' ContainerInstance (Maybe Int)

-- | The capacity provider associated with the container instance.
containerInstance_capacityProviderName :: Lens' ContainerInstance (Maybe Text)

-- | The Unix timestamp for when the container instance was registered.
containerInstance_registeredAt :: Lens' ContainerInstance (Maybe UTCTime)

-- | The reason that the container instance reached its current status.
containerInstance_statusReason :: Lens' ContainerInstance (Maybe Text)

-- | The metadata that you apply to the container instance to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
containerInstance_tags :: Lens' ContainerInstance (Maybe [Tag])

-- | For CPU and memory resource types, this parameter describes the amount
--   of each resource that was available on the container instance when the
--   container agent registered it with Amazon ECS. This value represents
--   the total amount of CPU and memory that can be allocated on this
--   container instance to tasks. For port resource types, this parameter
--   describes the ports that were reserved by the Amazon ECS container
--   agent when it registered the container instance with Amazon ECS.
containerInstance_registeredResources :: Lens' ContainerInstance (Maybe [Resource])

-- | The overrides that should be sent to a container. An empty container
--   override can be passed in. An example of an empty container override
--   would be <tt>{"containerOverrides": [ ] }</tt>. If a non-empty
--   container override is specified, the <tt>name</tt> parameter must be
--   included.
--   
--   <i>See:</i> <a>newContainerOverride</a> smart constructor.
data ContainerOverride
ContainerOverride' :: Maybe [Text] -> Maybe [KeyValuePair] -> Maybe [EnvironmentFile] -> Maybe [ResourceRequirement] -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe Int -> ContainerOverride

-- | The command to send to the container that overrides the default
--   command from the Docker image or the task definition. You must also
--   specify a container name.
[$sel:command:ContainerOverride'] :: ContainerOverride -> Maybe [Text]

-- | The environment variables to send to the container. You can add new
--   environment variables, which are added to the container at launch, or
--   you can override the existing environment variables from the Docker
--   image or the task definition. You must also specify a container name.
[$sel:environment:ContainerOverride'] :: ContainerOverride -> Maybe [KeyValuePair]

-- | A list of files containing the environment variables to pass to a
--   container, instead of the value from the container definition.
[$sel:environmentFiles:ContainerOverride'] :: ContainerOverride -> Maybe [EnvironmentFile]

-- | The type and amount of a resource to assign to a container, instead of
--   the default value from the task definition. The only supported
--   resource is a GPU.
[$sel:resourceRequirements:ContainerOverride'] :: ContainerOverride -> Maybe [ResourceRequirement]

-- | The hard limit (in MiB) of memory to present to the container, instead
--   of the default value from the task definition. If your container
--   attempts to exceed the memory specified here, the container is killed.
--   You must also specify a container name.
[$sel:memory:ContainerOverride'] :: ContainerOverride -> Maybe Int

-- | The name of the container that receives the override. This parameter
--   is required if any override is specified.
[$sel:name:ContainerOverride'] :: ContainerOverride -> Maybe Text

-- | The number of <tt>cpu</tt> units reserved for the container, instead
--   of the default value from the task definition. You must also specify a
--   container name.
[$sel:cpu:ContainerOverride'] :: ContainerOverride -> Maybe Int

-- | The soft limit (in MiB) of memory to reserve for the container,
--   instead of the default value from the task definition. You must also
--   specify a container name.
[$sel:memoryReservation:ContainerOverride'] :: ContainerOverride -> Maybe Int

-- | Create a value of <a>ContainerOverride</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:command:ContainerOverride'</a>,
--   <a>containerOverride_command</a> - The command to send to the
--   container that overrides the default command from the Docker image or
--   the task definition. You must also specify a container name.
--   
--   <a>$sel:environment:ContainerOverride'</a>,
--   <a>containerOverride_environment</a> - The environment variables to
--   send to the container. You can add new environment variables, which
--   are added to the container at launch, or you can override the existing
--   environment variables from the Docker image or the task definition.
--   You must also specify a container name.
--   
--   <a>$sel:environmentFiles:ContainerOverride'</a>,
--   <a>containerOverride_environmentFiles</a> - A list of files containing
--   the environment variables to pass to a container, instead of the value
--   from the container definition.
--   
--   <a>$sel:resourceRequirements:ContainerOverride'</a>,
--   <a>containerOverride_resourceRequirements</a> - The type and amount of
--   a resource to assign to a container, instead of the default value from
--   the task definition. The only supported resource is a GPU.
--   
--   <a>$sel:memory:ContainerOverride'</a>, <a>containerOverride_memory</a>
--   - The hard limit (in MiB) of memory to present to the container,
--   instead of the default value from the task definition. If your
--   container attempts to exceed the memory specified here, the container
--   is killed. You must also specify a container name.
--   
--   <a>$sel:name:ContainerOverride'</a>, <a>containerOverride_name</a> -
--   The name of the container that receives the override. This parameter
--   is required if any override is specified.
--   
--   <a>$sel:cpu:ContainerOverride'</a>, <a>containerOverride_cpu</a> - The
--   number of <tt>cpu</tt> units reserved for the container, instead of
--   the default value from the task definition. You must also specify a
--   container name.
--   
--   <a>$sel:memoryReservation:ContainerOverride'</a>,
--   <a>containerOverride_memoryReservation</a> - The soft limit (in MiB)
--   of memory to reserve for the container, instead of the default value
--   from the task definition. You must also specify a container name.
newContainerOverride :: ContainerOverride

-- | The command to send to the container that overrides the default
--   command from the Docker image or the task definition. You must also
--   specify a container name.
containerOverride_command :: Lens' ContainerOverride (Maybe [Text])

-- | The environment variables to send to the container. You can add new
--   environment variables, which are added to the container at launch, or
--   you can override the existing environment variables from the Docker
--   image or the task definition. You must also specify a container name.
containerOverride_environment :: Lens' ContainerOverride (Maybe [KeyValuePair])

-- | A list of files containing the environment variables to pass to a
--   container, instead of the value from the container definition.
containerOverride_environmentFiles :: Lens' ContainerOverride (Maybe [EnvironmentFile])

-- | The type and amount of a resource to assign to a container, instead of
--   the default value from the task definition. The only supported
--   resource is a GPU.
containerOverride_resourceRequirements :: Lens' ContainerOverride (Maybe [ResourceRequirement])

-- | The hard limit (in MiB) of memory to present to the container, instead
--   of the default value from the task definition. If your container
--   attempts to exceed the memory specified here, the container is killed.
--   You must also specify a container name.
containerOverride_memory :: Lens' ContainerOverride (Maybe Int)

-- | The name of the container that receives the override. This parameter
--   is required if any override is specified.
containerOverride_name :: Lens' ContainerOverride (Maybe Text)

-- | The number of <tt>cpu</tt> units reserved for the container, instead
--   of the default value from the task definition. You must also specify a
--   container name.
containerOverride_cpu :: Lens' ContainerOverride (Maybe Int)

-- | The soft limit (in MiB) of memory to reserve for the container,
--   instead of the default value from the task definition. You must also
--   specify a container name.
containerOverride_memoryReservation :: Lens' ContainerOverride (Maybe Int)

-- | Details on a service within a cluster
--   
--   <i>See:</i> <a>newContainerService</a> smart constructor.
data ContainerService
ContainerService' :: Maybe [TaskSet] -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe PropagateTags -> Maybe POSIX -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe [LoadBalancer] -> Maybe Int -> Maybe [PlacementConstraint] -> Maybe [ServiceEvent] -> Maybe [PlacementStrategy] -> Maybe [Deployment] -> Maybe Text -> Maybe DeploymentController -> Maybe LaunchType -> Maybe Text -> Maybe Text -> Maybe SchedulingStrategy -> Maybe Int -> Maybe NetworkConfiguration -> Maybe [ServiceRegistry] -> Maybe [CapacityProviderStrategyItem] -> Maybe Bool -> Maybe [Tag] -> Maybe Text -> Maybe DeploymentConfiguration -> ContainerService

-- | Information about a set of Amazon ECS tasks in either an CodeDeploy or
--   an <tt>EXTERNAL</tt> deployment. An Amazon ECS task set includes
--   details such as the desired number of tasks, how many tasks are
--   running, and whether the task set serves production traffic.
[$sel:taskSets:ContainerService'] :: ContainerService -> Maybe [TaskSet]

-- | The number of tasks in the cluster that are in the <tt>RUNNING</tt>
--   state.
[$sel:runningCount:ContainerService'] :: ContainerService -> Maybe Int

-- | The status of the service. The valid values are <tt>ACTIVE</tt>,
--   <tt>DRAINING</tt>, or <tt>INACTIVE</tt>.
[$sel:status:ContainerService'] :: ContainerService -> Maybe Text

-- | The Amazon Resource Name (ARN) of the cluster that hosts the service.
[$sel:clusterArn:ContainerService'] :: ContainerService -> Maybe Text

-- | Specifies whether to propagate the tags from the task definition or
--   the service to the task. If no value is specified, the tags are not
--   propagated.
[$sel:propagateTags:ContainerService'] :: ContainerService -> Maybe PropagateTags

-- | The Unix timestamp for when the service was created.
[$sel:createdAt:ContainerService'] :: ContainerService -> Maybe POSIX

-- | The platform version on which to run your service. A platform version
--   is only specified for tasks hosted on Fargate. If one is not
--   specified, the <tt>LATEST</tt> platform version is used by default.
--   For more information, see <a>Fargate Platform Versions</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:platformVersion:ContainerService'] :: ContainerService -> Maybe Text

-- | Specifies whether to enable Amazon ECS managed tags for the tasks in
--   the service. For more information, see <a>Tagging Your Amazon ECS
--   Resources</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:enableECSManagedTags:ContainerService'] :: ContainerService -> Maybe Bool

-- | The principal that created the service.
[$sel:createdBy:ContainerService'] :: ContainerService -> Maybe Text

-- | The desired number of instantiations of the task definition to keep
--   running on the service. This value is specified when the service is
--   created with CreateService, and it can be modified with UpdateService.
[$sel:desiredCount:ContainerService'] :: ContainerService -> Maybe Int

-- | A list of Elastic Load Balancing load balancer objects, containing the
--   load balancer name, the container name (as it appears in a container
--   definition), and the container port to access from the load balancer.
[$sel:loadBalancers:ContainerService'] :: ContainerService -> Maybe [LoadBalancer]

-- | The number of tasks in the cluster that are in the <tt>PENDING</tt>
--   state.
[$sel:pendingCount:ContainerService'] :: ContainerService -> Maybe Int

-- | The placement constraints for the tasks in the service.
[$sel:placementConstraints:ContainerService'] :: ContainerService -> Maybe [PlacementConstraint]

-- | The event stream for your service. A maximum of 100 of the latest
--   events are displayed.
[$sel:events:ContainerService'] :: ContainerService -> Maybe [ServiceEvent]

-- | The placement strategy that determines how tasks for the service are
--   placed.
[$sel:placementStrategy:ContainerService'] :: ContainerService -> Maybe [PlacementStrategy]

-- | The current state of deployments for the service.
[$sel:deployments:ContainerService'] :: ContainerService -> Maybe [Deployment]

-- | The name of your service. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. Service names must be
--   unique within a cluster, but you can have similarly named services in
--   multiple clusters within a Region or across multiple Regions.
[$sel:serviceName:ContainerService'] :: ContainerService -> Maybe Text

-- | The deployment controller type the service is using. When using the
--   DescribeServices API, this field is omitted if the service is using
--   the <tt>ECS</tt> deployment controller type.
[$sel:deploymentController:ContainerService'] :: ContainerService -> Maybe DeploymentController

-- | The launch type the service is using. When using the DescribeServices
--   API, this field is omitted if the service was created using a capacity
--   provider strategy.
[$sel:launchType:ContainerService'] :: ContainerService -> Maybe LaunchType

-- | The ARN that identifies the service. The ARN contains the
--   <tt>arn:aws:ecs</tt> namespace, followed by the Region of the service,
--   the Amazon Web Services account ID of the service owner, the
--   <tt>service</tt> namespace, and then the service name. For example,
--   <tt>arn:aws:ecs:region:012345678910:service/my-service</tt>.
[$sel:serviceArn:ContainerService'] :: ContainerService -> Maybe Text

-- | The task definition to use for tasks in the service. This value is
--   specified when the service is created with CreateService, and it can
--   be modified with UpdateService.
[$sel:taskDefinition:ContainerService'] :: ContainerService -> Maybe Text

-- | The scheduling strategy to use for the service. For more information,
--   see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement
--   constraints.Fargate tasks do not support the <tt>DAEMON</tt>
--   scheduling strategy.</li>
--   </ul>
[$sel:schedulingStrategy:ContainerService'] :: ContainerService -> Maybe SchedulingStrategy

-- | The period of time, in seconds, that the Amazon ECS service scheduler
--   ignores unhealthy Elastic Load Balancing target health checks after a
--   task has first started.
[$sel:healthCheckGracePeriodSeconds:ContainerService'] :: ContainerService -> Maybe Int

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
[$sel:networkConfiguration:ContainerService'] :: ContainerService -> Maybe NetworkConfiguration

-- | The details of the service discovery registries to assign to this
--   service. For more information, see <a>Service Discovery</a>.
[$sel:serviceRegistries:ContainerService'] :: ContainerService -> Maybe [ServiceRegistry]

-- | The capacity provider strategy the service is using. When using the
--   DescribeServices API, this field is omitted if the service was created
--   using a launch type.
[$sel:capacityProviderStrategy:ContainerService'] :: ContainerService -> Maybe [CapacityProviderStrategyItem]

-- | Whether or not the execute command functionality is enabled for the
--   service. If <tt>true</tt>, the execute command functionality is
--   enabled for all containers in tasks as part of the service.
[$sel:enableExecuteCommand:ContainerService'] :: ContainerService -> Maybe Bool

-- | The metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:ContainerService'] :: ContainerService -> Maybe [Tag]

-- | The ARN of the IAM role associated with the service that allows the
--   Amazon ECS container agent to register container instances with an
--   Elastic Load Balancing load balancer.
[$sel:roleArn:ContainerService'] :: ContainerService -> Maybe Text

-- | Optional deployment parameters that control how many tasks run during
--   the deployment and the ordering of stopping and starting tasks.
[$sel:deploymentConfiguration:ContainerService'] :: ContainerService -> Maybe DeploymentConfiguration

-- | Create a value of <a>ContainerService</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSets:ContainerService'</a>,
--   <a>containerService_taskSets</a> - Information about a set of Amazon
--   ECS tasks in either an CodeDeploy or an <tt>EXTERNAL</tt> deployment.
--   An Amazon ECS task set includes details such as the desired number of
--   tasks, how many tasks are running, and whether the task set serves
--   production traffic.
--   
--   <a>$sel:runningCount:ContainerService'</a>,
--   <a>containerService_runningCount</a> - The number of tasks in the
--   cluster that are in the <tt>RUNNING</tt> state.
--   
--   <a>$sel:status:ContainerService'</a>, <a>containerService_status</a> -
--   The status of the service. The valid values are <tt>ACTIVE</tt>,
--   <tt>DRAINING</tt>, or <tt>INACTIVE</tt>.
--   
--   <a>$sel:clusterArn:ContainerService'</a>,
--   <a>containerService_clusterArn</a> - The Amazon Resource Name (ARN) of
--   the cluster that hosts the service.
--   
--   <a>$sel:propagateTags:ContainerService'</a>,
--   <a>containerService_propagateTags</a> - Specifies whether to propagate
--   the tags from the task definition or the service to the task. If no
--   value is specified, the tags are not propagated.
--   
--   <a>$sel:createdAt:ContainerService'</a>,
--   <a>containerService_createdAt</a> - The Unix timestamp for when the
--   service was created.
--   
--   <a>$sel:platformVersion:ContainerService'</a>,
--   <a>containerService_platformVersion</a> - The platform version on
--   which to run your service. A platform version is only specified for
--   tasks hosted on Fargate. If one is not specified, the <tt>LATEST</tt>
--   platform version is used by default. For more information, see
--   <a>Fargate Platform Versions</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:enableECSManagedTags:ContainerService'</a>,
--   <a>containerService_enableECSManagedTags</a> - Specifies whether to
--   enable Amazon ECS managed tags for the tasks in the service. For more
--   information, see <a>Tagging Your Amazon ECS Resources</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:createdBy:ContainerService'</a>,
--   <a>containerService_createdBy</a> - The principal that created the
--   service.
--   
--   <a>$sel:desiredCount:ContainerService'</a>,
--   <a>containerService_desiredCount</a> - The desired number of
--   instantiations of the task definition to keep running on the service.
--   This value is specified when the service is created with
--   CreateService, and it can be modified with UpdateService.
--   
--   <a>$sel:loadBalancers:ContainerService'</a>,
--   <a>containerService_loadBalancers</a> - A list of Elastic Load
--   Balancing load balancer objects, containing the load balancer name,
--   the container name (as it appears in a container definition), and the
--   container port to access from the load balancer.
--   
--   <a>$sel:pendingCount:ContainerService'</a>,
--   <a>containerService_pendingCount</a> - The number of tasks in the
--   cluster that are in the <tt>PENDING</tt> state.
--   
--   <a>$sel:placementConstraints:ContainerService'</a>,
--   <a>containerService_placementConstraints</a> - The placement
--   constraints for the tasks in the service.
--   
--   <a>$sel:events:ContainerService'</a>, <a>containerService_events</a> -
--   The event stream for your service. A maximum of 100 of the latest
--   events are displayed.
--   
--   <a>$sel:placementStrategy:ContainerService'</a>,
--   <a>containerService_placementStrategy</a> - The placement strategy
--   that determines how tasks for the service are placed.
--   
--   <a>$sel:deployments:ContainerService'</a>,
--   <a>containerService_deployments</a> - The current state of deployments
--   for the service.
--   
--   <a>$sel:serviceName:ContainerService'</a>,
--   <a>containerService_serviceName</a> - The name of your service. Up to
--   255 letters (uppercase and lowercase), numbers, underscores, and
--   hyphens are allowed. Service names must be unique within a cluster,
--   but you can have similarly named services in multiple clusters within
--   a Region or across multiple Regions.
--   
--   <a>$sel:deploymentController:ContainerService'</a>,
--   <a>containerService_deploymentController</a> - The deployment
--   controller type the service is using. When using the DescribeServices
--   API, this field is omitted if the service is using the <tt>ECS</tt>
--   deployment controller type.
--   
--   <a>$sel:launchType:ContainerService'</a>,
--   <a>containerService_launchType</a> - The launch type the service is
--   using. When using the DescribeServices API, this field is omitted if
--   the service was created using a capacity provider strategy.
--   
--   <a>$sel:serviceArn:ContainerService'</a>,
--   <a>containerService_serviceArn</a> - The ARN that identifies the
--   service. The ARN contains the <tt>arn:aws:ecs</tt> namespace, followed
--   by the Region of the service, the Amazon Web Services account ID of
--   the service owner, the <tt>service</tt> namespace, and then the
--   service name. For example,
--   <tt>arn:aws:ecs:region:012345678910:service/my-service</tt>.
--   
--   <a>$sel:taskDefinition:ContainerService'</a>,
--   <a>containerService_taskDefinition</a> - The task definition to use
--   for tasks in the service. This value is specified when the service is
--   created with CreateService, and it can be modified with UpdateService.
--   
--   <a>$sel:schedulingStrategy:ContainerService'</a>,
--   <a>containerService_schedulingStrategy</a> - The scheduling strategy
--   to use for the service. For more information, see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement
--   constraints.Fargate tasks do not support the <tt>DAEMON</tt>
--   scheduling strategy.</li>
--   </ul>
--   
--   <a>$sel:healthCheckGracePeriodSeconds:ContainerService'</a>,
--   <a>containerService_healthCheckGracePeriodSeconds</a> - The period of
--   time, in seconds, that the Amazon ECS service scheduler ignores
--   unhealthy Elastic Load Balancing target health checks after a task has
--   first started.
--   
--   <a>$sel:networkConfiguration:ContainerService'</a>,
--   <a>containerService_networkConfiguration</a> - The VPC subnet and
--   security group configuration for tasks that receive their own elastic
--   network interface by using the <tt>awsvpc</tt> networking mode.
--   
--   <a>$sel:serviceRegistries:ContainerService'</a>,
--   <a>containerService_serviceRegistries</a> - The details of the service
--   discovery registries to assign to this service. For more information,
--   see <a>Service Discovery</a>.
--   
--   <a>$sel:capacityProviderStrategy:ContainerService'</a>,
--   <a>containerService_capacityProviderStrategy</a> - The capacity
--   provider strategy the service is using. When using the
--   DescribeServices API, this field is omitted if the service was created
--   using a launch type.
--   
--   <a>$sel:enableExecuteCommand:ContainerService'</a>,
--   <a>containerService_enableExecuteCommand</a> - Whether or not the
--   execute command functionality is enabled for the service. If
--   <tt>true</tt>, the execute command functionality is enabled for all
--   containers in tasks as part of the service.
--   
--   <a>$sel:tags:ContainerService'</a>, <a>containerService_tags</a> - The
--   metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:roleArn:ContainerService'</a>, <a>containerService_roleArn</a>
--   - The ARN of the IAM role associated with the service that allows the
--   Amazon ECS container agent to register container instances with an
--   Elastic Load Balancing load balancer.
--   
--   <a>$sel:deploymentConfiguration:ContainerService'</a>,
--   <a>containerService_deploymentConfiguration</a> - Optional deployment
--   parameters that control how many tasks run during the deployment and
--   the ordering of stopping and starting tasks.
newContainerService :: ContainerService

-- | Information about a set of Amazon ECS tasks in either an CodeDeploy or
--   an <tt>EXTERNAL</tt> deployment. An Amazon ECS task set includes
--   details such as the desired number of tasks, how many tasks are
--   running, and whether the task set serves production traffic.
containerService_taskSets :: Lens' ContainerService (Maybe [TaskSet])

-- | The number of tasks in the cluster that are in the <tt>RUNNING</tt>
--   state.
containerService_runningCount :: Lens' ContainerService (Maybe Int)

-- | The status of the service. The valid values are <tt>ACTIVE</tt>,
--   <tt>DRAINING</tt>, or <tt>INACTIVE</tt>.
containerService_status :: Lens' ContainerService (Maybe Text)

-- | The Amazon Resource Name (ARN) of the cluster that hosts the service.
containerService_clusterArn :: Lens' ContainerService (Maybe Text)

-- | Specifies whether to propagate the tags from the task definition or
--   the service to the task. If no value is specified, the tags are not
--   propagated.
containerService_propagateTags :: Lens' ContainerService (Maybe PropagateTags)

-- | The Unix timestamp for when the service was created.
containerService_createdAt :: Lens' ContainerService (Maybe UTCTime)

-- | The platform version on which to run your service. A platform version
--   is only specified for tasks hosted on Fargate. If one is not
--   specified, the <tt>LATEST</tt> platform version is used by default.
--   For more information, see <a>Fargate Platform Versions</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
containerService_platformVersion :: Lens' ContainerService (Maybe Text)

-- | Specifies whether to enable Amazon ECS managed tags for the tasks in
--   the service. For more information, see <a>Tagging Your Amazon ECS
--   Resources</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
containerService_enableECSManagedTags :: Lens' ContainerService (Maybe Bool)

-- | The principal that created the service.
containerService_createdBy :: Lens' ContainerService (Maybe Text)

-- | The desired number of instantiations of the task definition to keep
--   running on the service. This value is specified when the service is
--   created with CreateService, and it can be modified with UpdateService.
containerService_desiredCount :: Lens' ContainerService (Maybe Int)

-- | A list of Elastic Load Balancing load balancer objects, containing the
--   load balancer name, the container name (as it appears in a container
--   definition), and the container port to access from the load balancer.
containerService_loadBalancers :: Lens' ContainerService (Maybe [LoadBalancer])

-- | The number of tasks in the cluster that are in the <tt>PENDING</tt>
--   state.
containerService_pendingCount :: Lens' ContainerService (Maybe Int)

-- | The placement constraints for the tasks in the service.
containerService_placementConstraints :: Lens' ContainerService (Maybe [PlacementConstraint])

-- | The event stream for your service. A maximum of 100 of the latest
--   events are displayed.
containerService_events :: Lens' ContainerService (Maybe [ServiceEvent])

-- | The placement strategy that determines how tasks for the service are
--   placed.
containerService_placementStrategy :: Lens' ContainerService (Maybe [PlacementStrategy])

-- | The current state of deployments for the service.
containerService_deployments :: Lens' ContainerService (Maybe [Deployment])

-- | The name of your service. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. Service names must be
--   unique within a cluster, but you can have similarly named services in
--   multiple clusters within a Region or across multiple Regions.
containerService_serviceName :: Lens' ContainerService (Maybe Text)

-- | The deployment controller type the service is using. When using the
--   DescribeServices API, this field is omitted if the service is using
--   the <tt>ECS</tt> deployment controller type.
containerService_deploymentController :: Lens' ContainerService (Maybe DeploymentController)

-- | The launch type the service is using. When using the DescribeServices
--   API, this field is omitted if the service was created using a capacity
--   provider strategy.
containerService_launchType :: Lens' ContainerService (Maybe LaunchType)

-- | The ARN that identifies the service. The ARN contains the
--   <tt>arn:aws:ecs</tt> namespace, followed by the Region of the service,
--   the Amazon Web Services account ID of the service owner, the
--   <tt>service</tt> namespace, and then the service name. For example,
--   <tt>arn:aws:ecs:region:012345678910:service/my-service</tt>.
containerService_serviceArn :: Lens' ContainerService (Maybe Text)

-- | The task definition to use for tasks in the service. This value is
--   specified when the service is created with CreateService, and it can
--   be modified with UpdateService.
containerService_taskDefinition :: Lens' ContainerService (Maybe Text)

-- | The scheduling strategy to use for the service. For more information,
--   see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement
--   constraints.Fargate tasks do not support the <tt>DAEMON</tt>
--   scheduling strategy.</li>
--   </ul>
containerService_schedulingStrategy :: Lens' ContainerService (Maybe SchedulingStrategy)

-- | The period of time, in seconds, that the Amazon ECS service scheduler
--   ignores unhealthy Elastic Load Balancing target health checks after a
--   task has first started.
containerService_healthCheckGracePeriodSeconds :: Lens' ContainerService (Maybe Int)

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
containerService_networkConfiguration :: Lens' ContainerService (Maybe NetworkConfiguration)

-- | The details of the service discovery registries to assign to this
--   service. For more information, see <a>Service Discovery</a>.
containerService_serviceRegistries :: Lens' ContainerService (Maybe [ServiceRegistry])

-- | The capacity provider strategy the service is using. When using the
--   DescribeServices API, this field is omitted if the service was created
--   using a launch type.
containerService_capacityProviderStrategy :: Lens' ContainerService (Maybe [CapacityProviderStrategyItem])

-- | Whether or not the execute command functionality is enabled for the
--   service. If <tt>true</tt>, the execute command functionality is
--   enabled for all containers in tasks as part of the service.
containerService_enableExecuteCommand :: Lens' ContainerService (Maybe Bool)

-- | The metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
containerService_tags :: Lens' ContainerService (Maybe [Tag])

-- | The ARN of the IAM role associated with the service that allows the
--   Amazon ECS container agent to register container instances with an
--   Elastic Load Balancing load balancer.
containerService_roleArn :: Lens' ContainerService (Maybe Text)

-- | Optional deployment parameters that control how many tasks run during
--   the deployment and the ordering of stopping and starting tasks.
containerService_deploymentConfiguration :: Lens' ContainerService (Maybe DeploymentConfiguration)

-- | An object representing a change in state for a container.
--   
--   <i>See:</i> <a>newContainerStateChange</a> smart constructor.
data ContainerStateChange
ContainerStateChange' :: Maybe [NetworkBinding] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Text -> ContainerStateChange

-- | Any network bindings associated with the container.
[$sel:networkBindings:ContainerStateChange'] :: ContainerStateChange -> Maybe [NetworkBinding]

-- | The status of the container.
[$sel:status:ContainerStateChange'] :: ContainerStateChange -> Maybe Text

-- | The name of the container.
[$sel:containerName:ContainerStateChange'] :: ContainerStateChange -> Maybe Text

-- | The reason for the state change.
[$sel:reason:ContainerStateChange'] :: ContainerStateChange -> Maybe Text

-- | The container image SHA 256 digest.
[$sel:imageDigest:ContainerStateChange'] :: ContainerStateChange -> Maybe Text

-- | The exit code for the container, if the state change is a result of
--   the container exiting.
[$sel:exitCode:ContainerStateChange'] :: ContainerStateChange -> Maybe Int

-- | The ID of the Docker container.
[$sel:runtimeId:ContainerStateChange'] :: ContainerStateChange -> Maybe Text

-- | Create a value of <a>ContainerStateChange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:networkBindings:ContainerStateChange'</a>,
--   <a>containerStateChange_networkBindings</a> - Any network bindings
--   associated with the container.
--   
--   <a>$sel:status:ContainerStateChange'</a>,
--   <a>containerStateChange_status</a> - The status of the container.
--   
--   <a>$sel:containerName:ContainerStateChange'</a>,
--   <a>containerStateChange_containerName</a> - The name of the container.
--   
--   <a>$sel:reason:ContainerStateChange'</a>,
--   <a>containerStateChange_reason</a> - The reason for the state change.
--   
--   <a>$sel:imageDigest:ContainerStateChange'</a>,
--   <a>containerStateChange_imageDigest</a> - The container image SHA 256
--   digest.
--   
--   <a>$sel:exitCode:ContainerStateChange'</a>,
--   <a>containerStateChange_exitCode</a> - The exit code for the
--   container, if the state change is a result of the container exiting.
--   
--   <a>$sel:runtimeId:ContainerStateChange'</a>,
--   <a>containerStateChange_runtimeId</a> - The ID of the Docker
--   container.
newContainerStateChange :: ContainerStateChange

-- | Any network bindings associated with the container.
containerStateChange_networkBindings :: Lens' ContainerStateChange (Maybe [NetworkBinding])

-- | The status of the container.
containerStateChange_status :: Lens' ContainerStateChange (Maybe Text)

-- | The name of the container.
containerStateChange_containerName :: Lens' ContainerStateChange (Maybe Text)

-- | The reason for the state change.
containerStateChange_reason :: Lens' ContainerStateChange (Maybe Text)

-- | The container image SHA 256 digest.
containerStateChange_imageDigest :: Lens' ContainerStateChange (Maybe Text)

-- | The exit code for the container, if the state change is a result of
--   the container exiting.
containerStateChange_exitCode :: Lens' ContainerStateChange (Maybe Int)

-- | The ID of the Docker container.
containerStateChange_runtimeId :: Lens' ContainerStateChange (Maybe Text)

-- | The details of an Amazon ECS service deployment. This is used only
--   when a service uses the <tt>ECS</tt> deployment controller type.
--   
--   <i>See:</i> <a>newDeployment</a> smart constructor.
data Deployment
Deployment' :: Maybe DeploymentRolloutState -> Maybe Int -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe LaunchType -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe NetworkConfiguration -> Maybe [CapacityProviderStrategyItem] -> Deployment

-- | The <tt>rolloutState</tt> of a service is only returned for services
--   that use the rolling update (<tt>ECS</tt>) deployment type that are
--   not behind a Classic Load Balancer.
--   
--   The rollout state of the deployment. When a service deployment is
--   started, it begins in an <tt>IN_PROGRESS</tt> state. When the service
--   reaches a steady state, the deployment will transition to a
--   <tt>COMPLETED</tt> state. If the service fails to reach a steady state
--   and circuit breaker is enabled, the deployment will transition to a
--   <tt>FAILED</tt> state. A deployment in <tt>FAILED</tt> state will
--   launch no new tasks. For more information, see
--   DeploymentCircuitBreaker.
[$sel:rolloutState:Deployment'] :: Deployment -> Maybe DeploymentRolloutState

-- | The number of tasks in the deployment that are in the <tt>RUNNING</tt>
--   status.
[$sel:runningCount:Deployment'] :: Deployment -> Maybe Int

-- | The status of the deployment. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The most recent deployment of a service.</li>
--   <li><i>ACTIVE</i> A service deployment that still has running tasks,
--   but are in the process of being replaced with a new <tt>PRIMARY</tt>
--   deployment.</li>
--   <li><i>INACTIVE</i> A deployment that has been completely
--   replaced.</li>
--   </ul>
[$sel:status:Deployment'] :: Deployment -> Maybe Text

-- | The Unix timestamp for when the service deployment was created.
[$sel:createdAt:Deployment'] :: Deployment -> Maybe POSIX

-- | The platform version on which your tasks in the service are running. A
--   platform version is only specified for tasks using the Fargate launch
--   type. If one is not specified, the <tt>LATEST</tt> platform version is
--   used by default. For more information, see <a>Fargate Platform
--   Versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:platformVersion:Deployment'] :: Deployment -> Maybe Text

-- | The most recent desired count of tasks that was specified for the
--   service to deploy or maintain.
[$sel:desiredCount:Deployment'] :: Deployment -> Maybe Int

-- | The number of tasks in the deployment that are in the <tt>PENDING</tt>
--   status.
[$sel:pendingCount:Deployment'] :: Deployment -> Maybe Int

-- | The ID of the deployment.
[$sel:id:Deployment'] :: Deployment -> Maybe Text

-- | The number of consecutively failed tasks in the deployment. A task is
--   considered a failure if the service scheduler can't launch the task,
--   the task doesn't transition to a <tt>RUNNING</tt> state, or if it
--   fails any of its defined health checks and is stopped.
--   
--   Once a service deployment has one or more successfully running tasks,
--   the failed task count resets to zero and stops being evaluated.
[$sel:failedTasks:Deployment'] :: Deployment -> Maybe Int

-- | The launch type the tasks in the service are using. For more
--   information, see <a>Amazon ECS Launch Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:launchType:Deployment'] :: Deployment -> Maybe LaunchType

-- | The Unix timestamp for when the service deployment was last updated.
[$sel:updatedAt:Deployment'] :: Deployment -> Maybe POSIX

-- | The most recent task definition that was specified for the tasks in
--   the service to use.
[$sel:taskDefinition:Deployment'] :: Deployment -> Maybe Text

-- | A description of the rollout state of a deployment.
[$sel:rolloutStateReason:Deployment'] :: Deployment -> Maybe Text

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
[$sel:networkConfiguration:Deployment'] :: Deployment -> Maybe NetworkConfiguration

-- | The capacity provider strategy that the deployment is using.
[$sel:capacityProviderStrategy:Deployment'] :: Deployment -> Maybe [CapacityProviderStrategyItem]

-- | Create a value of <a>Deployment</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rolloutState:Deployment'</a>, <a>deployment_rolloutState</a> -
--   The <tt>rolloutState</tt> of a service is only returned for services
--   that use the rolling update (<tt>ECS</tt>) deployment type that are
--   not behind a Classic Load Balancer.
--   
--   The rollout state of the deployment. When a service deployment is
--   started, it begins in an <tt>IN_PROGRESS</tt> state. When the service
--   reaches a steady state, the deployment will transition to a
--   <tt>COMPLETED</tt> state. If the service fails to reach a steady state
--   and circuit breaker is enabled, the deployment will transition to a
--   <tt>FAILED</tt> state. A deployment in <tt>FAILED</tt> state will
--   launch no new tasks. For more information, see
--   DeploymentCircuitBreaker.
--   
--   <a>$sel:runningCount:Deployment'</a>, <a>deployment_runningCount</a> -
--   The number of tasks in the deployment that are in the <tt>RUNNING</tt>
--   status.
--   
--   <a>$sel:status:Deployment'</a>, <a>deployment_status</a> - The status
--   of the deployment. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The most recent deployment of a service.</li>
--   <li><i>ACTIVE</i> A service deployment that still has running tasks,
--   but are in the process of being replaced with a new <tt>PRIMARY</tt>
--   deployment.</li>
--   <li><i>INACTIVE</i> A deployment that has been completely
--   replaced.</li>
--   </ul>
--   
--   <a>$sel:createdAt:Deployment'</a>, <a>deployment_createdAt</a> - The
--   Unix timestamp for when the service deployment was created.
--   
--   <a>$sel:platformVersion:Deployment'</a>,
--   <a>deployment_platformVersion</a> - The platform version on which your
--   tasks in the service are running. A platform version is only specified
--   for tasks using the Fargate launch type. If one is not specified, the
--   <tt>LATEST</tt> platform version is used by default. For more
--   information, see <a>Fargate Platform Versions</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:desiredCount:Deployment'</a>, <a>deployment_desiredCount</a> -
--   The most recent desired count of tasks that was specified for the
--   service to deploy or maintain.
--   
--   <a>$sel:pendingCount:Deployment'</a>, <a>deployment_pendingCount</a> -
--   The number of tasks in the deployment that are in the <tt>PENDING</tt>
--   status.
--   
--   <a>$sel:id:Deployment'</a>, <a>deployment_id</a> - The ID of the
--   deployment.
--   
--   <a>$sel:failedTasks:Deployment'</a>, <a>deployment_failedTasks</a> -
--   The number of consecutively failed tasks in the deployment. A task is
--   considered a failure if the service scheduler can't launch the task,
--   the task doesn't transition to a <tt>RUNNING</tt> state, or if it
--   fails any of its defined health checks and is stopped.
--   
--   Once a service deployment has one or more successfully running tasks,
--   the failed task count resets to zero and stops being evaluated.
--   
--   <a>$sel:launchType:Deployment'</a>, <a>deployment_launchType</a> - The
--   launch type the tasks in the service are using. For more information,
--   see <a>Amazon ECS Launch Types</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:updatedAt:Deployment'</a>, <a>deployment_updatedAt</a> - The
--   Unix timestamp for when the service deployment was last updated.
--   
--   <a>$sel:taskDefinition:Deployment'</a>,
--   <a>deployment_taskDefinition</a> - The most recent task definition
--   that was specified for the tasks in the service to use.
--   
--   <a>$sel:rolloutStateReason:Deployment'</a>,
--   <a>deployment_rolloutStateReason</a> - A description of the rollout
--   state of a deployment.
--   
--   <a>$sel:networkConfiguration:Deployment'</a>,
--   <a>deployment_networkConfiguration</a> - The VPC subnet and security
--   group configuration for tasks that receive their own elastic network
--   interface by using the <tt>awsvpc</tt> networking mode.
--   
--   <a>$sel:capacityProviderStrategy:Deployment'</a>,
--   <a>deployment_capacityProviderStrategy</a> - The capacity provider
--   strategy that the deployment is using.
newDeployment :: Deployment

-- | The <tt>rolloutState</tt> of a service is only returned for services
--   that use the rolling update (<tt>ECS</tt>) deployment type that are
--   not behind a Classic Load Balancer.
--   
--   The rollout state of the deployment. When a service deployment is
--   started, it begins in an <tt>IN_PROGRESS</tt> state. When the service
--   reaches a steady state, the deployment will transition to a
--   <tt>COMPLETED</tt> state. If the service fails to reach a steady state
--   and circuit breaker is enabled, the deployment will transition to a
--   <tt>FAILED</tt> state. A deployment in <tt>FAILED</tt> state will
--   launch no new tasks. For more information, see
--   DeploymentCircuitBreaker.
deployment_rolloutState :: Lens' Deployment (Maybe DeploymentRolloutState)

-- | The number of tasks in the deployment that are in the <tt>RUNNING</tt>
--   status.
deployment_runningCount :: Lens' Deployment (Maybe Int)

-- | The status of the deployment. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The most recent deployment of a service.</li>
--   <li><i>ACTIVE</i> A service deployment that still has running tasks,
--   but are in the process of being replaced with a new <tt>PRIMARY</tt>
--   deployment.</li>
--   <li><i>INACTIVE</i> A deployment that has been completely
--   replaced.</li>
--   </ul>
deployment_status :: Lens' Deployment (Maybe Text)

-- | The Unix timestamp for when the service deployment was created.
deployment_createdAt :: Lens' Deployment (Maybe UTCTime)

-- | The platform version on which your tasks in the service are running. A
--   platform version is only specified for tasks using the Fargate launch
--   type. If one is not specified, the <tt>LATEST</tt> platform version is
--   used by default. For more information, see <a>Fargate Platform
--   Versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
deployment_platformVersion :: Lens' Deployment (Maybe Text)

-- | The most recent desired count of tasks that was specified for the
--   service to deploy or maintain.
deployment_desiredCount :: Lens' Deployment (Maybe Int)

-- | The number of tasks in the deployment that are in the <tt>PENDING</tt>
--   status.
deployment_pendingCount :: Lens' Deployment (Maybe Int)

-- | The ID of the deployment.
deployment_id :: Lens' Deployment (Maybe Text)

-- | The number of consecutively failed tasks in the deployment. A task is
--   considered a failure if the service scheduler can't launch the task,
--   the task doesn't transition to a <tt>RUNNING</tt> state, or if it
--   fails any of its defined health checks and is stopped.
--   
--   Once a service deployment has one or more successfully running tasks,
--   the failed task count resets to zero and stops being evaluated.
deployment_failedTasks :: Lens' Deployment (Maybe Int)

-- | The launch type the tasks in the service are using. For more
--   information, see <a>Amazon ECS Launch Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
deployment_launchType :: Lens' Deployment (Maybe LaunchType)

-- | The Unix timestamp for when the service deployment was last updated.
deployment_updatedAt :: Lens' Deployment (Maybe UTCTime)

-- | The most recent task definition that was specified for the tasks in
--   the service to use.
deployment_taskDefinition :: Lens' Deployment (Maybe Text)

-- | A description of the rollout state of a deployment.
deployment_rolloutStateReason :: Lens' Deployment (Maybe Text)

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
deployment_networkConfiguration :: Lens' Deployment (Maybe NetworkConfiguration)

-- | The capacity provider strategy that the deployment is using.
deployment_capacityProviderStrategy :: Lens' Deployment (Maybe [CapacityProviderStrategyItem])

-- | The deployment circuit breaker can only be used for services using the
--   rolling update (<tt>ECS</tt>) deployment type that are not behind a
--   Classic Load Balancer.
--   
--   The <b>deployment circuit breaker</b> determines whether a service
--   deployment will fail if the service can't reach a steady state. If
--   enabled, a service deployment will transition to a failed state and
--   stop launching new tasks. You can also enable Amazon ECS to roll back
--   your service to the last completed deployment after a failure. For
--   more information, see <a>Rolling update</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newDeploymentCircuitBreaker</a> smart constructor.
data DeploymentCircuitBreaker
DeploymentCircuitBreaker' :: Bool -> Bool -> DeploymentCircuitBreaker

-- | Whether to enable the deployment circuit breaker logic for the
--   service.
[$sel:enable:DeploymentCircuitBreaker'] :: DeploymentCircuitBreaker -> Bool

-- | Whether to enable Amazon ECS to roll back the service if a service
--   deployment fails. If rollback is enabled, when a service deployment
--   fails, the service is rolled back to the last deployment that
--   completed successfully.
[$sel:rollback:DeploymentCircuitBreaker'] :: DeploymentCircuitBreaker -> Bool

-- | Create a value of <a>DeploymentCircuitBreaker</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enable:DeploymentCircuitBreaker'</a>,
--   <a>deploymentCircuitBreaker_enable</a> - Whether to enable the
--   deployment circuit breaker logic for the service.
--   
--   <a>$sel:rollback:DeploymentCircuitBreaker'</a>,
--   <a>deploymentCircuitBreaker_rollback</a> - Whether to enable Amazon
--   ECS to roll back the service if a service deployment fails. If
--   rollback is enabled, when a service deployment fails, the service is
--   rolled back to the last deployment that completed successfully.
newDeploymentCircuitBreaker :: Bool -> Bool -> DeploymentCircuitBreaker

-- | Whether to enable the deployment circuit breaker logic for the
--   service.
deploymentCircuitBreaker_enable :: Lens' DeploymentCircuitBreaker Bool

-- | Whether to enable Amazon ECS to roll back the service if a service
--   deployment fails. If rollback is enabled, when a service deployment
--   fails, the service is rolled back to the last deployment that
--   completed successfully.
deploymentCircuitBreaker_rollback :: Lens' DeploymentCircuitBreaker Bool

-- | Optional deployment parameters that control how many tasks run during
--   a deployment and the ordering of stopping and starting tasks.
--   
--   <i>See:</i> <a>newDeploymentConfiguration</a> smart constructor.
data DeploymentConfiguration
DeploymentConfiguration' :: Maybe Int -> Maybe Int -> Maybe DeploymentCircuitBreaker -> DeploymentConfiguration

-- | If a service is using the rolling update (<tt>ECS</tt>) deployment
--   type, the <b>minimum healthy percent</b> represents a lower limit on
--   the number of tasks in a service that must remain in the
--   <tt>RUNNING</tt> state during a deployment, as a percentage of the
--   desired number of tasks (rounded up to the nearest integer), and while
--   any container instances are in the <tt>DRAINING</tt> state if the
--   service contains tasks using the EC2 launch type. This parameter
--   enables you to deploy without using additional cluster capacity. For
--   example, if your service has a desired number of four tasks and a
--   minimum healthy percent of 50%, the scheduler may stop two existing
--   tasks to free up cluster capacity before starting two new tasks. Tasks
--   for services that <i>do not</i> use a load balancer are considered
--   healthy if they are in the <tt>RUNNING</tt> state; tasks for services
--   that <i>do</i> use a load balancer are considered healthy if they are
--   in the <tt>RUNNING</tt> state and they are reported as healthy by the
--   load balancer. The default value for minimum healthy percent is 100%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __minimum healthy percent__ value is set to the default
--   value and is used to define the lower limit on the number of the tasks
--   in the service that remain in the <tt>RUNNING</tt> state while the
--   container instances are in the <tt>DRAINING</tt> state. If the tasks
--   in the service use the Fargate launch type, the minimum healthy
--   percent value is not used, although it is returned when describing
--   your service.
[$sel:minimumHealthyPercent:DeploymentConfiguration'] :: DeploymentConfiguration -> Maybe Int

-- | If a service is using the rolling update (<tt>ECS</tt>) deployment
--   type, the <b>maximum percent</b> parameter represents an upper limit
--   on the number of tasks in a service that are allowed in the
--   <tt>RUNNING</tt> or <tt>PENDING</tt> state during a deployment, as a
--   percentage of the desired number of tasks (rounded down to the nearest
--   integer), and while any container instances are in the
--   <tt>DRAINING</tt> state if the service contains tasks using the EC2
--   launch type. This parameter enables you to define the deployment batch
--   size. For example, if your service has a desired number of four tasks
--   and a maximum percent value of 200%, the scheduler may start four new
--   tasks before stopping the four older tasks (provided that the cluster
--   resources required to do this are available). The default value for
--   maximum percent is 200%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __maximum percent__ value is set to the default value and is
--   used to define the upper limit on the number of the tasks in the
--   service that remain in the <tt>RUNNING</tt> state while the container
--   instances are in the <tt>DRAINING</tt> state. If the tasks in the
--   service use the Fargate launch type, the maximum percent value is not
--   used, although it is returned when describing your service.
[$sel:maximumPercent:DeploymentConfiguration'] :: DeploymentConfiguration -> Maybe Int

-- | The deployment circuit breaker can only be used for services using the
--   rolling update (<tt>ECS</tt>) deployment type.
--   
--   The <b>deployment circuit breaker</b> determines whether a service
--   deployment will fail if the service can't reach a steady state. If
--   deployment circuit breaker is enabled, a service deployment will
--   transition to a failed state and stop launching new tasks. If rollback
--   is enabled, when a service deployment fails, the service is rolled
--   back to the last deployment that completed successfully.
[$sel:deploymentCircuitBreaker:DeploymentConfiguration'] :: DeploymentConfiguration -> Maybe DeploymentCircuitBreaker

-- | Create a value of <a>DeploymentConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:minimumHealthyPercent:DeploymentConfiguration'</a>,
--   <a>deploymentConfiguration_minimumHealthyPercent</a> - If a service is
--   using the rolling update (<tt>ECS</tt>) deployment type, the
--   <b>minimum healthy percent</b> represents a lower limit on the number
--   of tasks in a service that must remain in the <tt>RUNNING</tt> state
--   during a deployment, as a percentage of the desired number of tasks
--   (rounded up to the nearest integer), and while any container instances
--   are in the <tt>DRAINING</tt> state if the service contains tasks using
--   the EC2 launch type. This parameter enables you to deploy without
--   using additional cluster capacity. For example, if your service has a
--   desired number of four tasks and a minimum healthy percent of 50%, the
--   scheduler may stop two existing tasks to free up cluster capacity
--   before starting two new tasks. Tasks for services that <i>do not</i>
--   use a load balancer are considered healthy if they are in the
--   <tt>RUNNING</tt> state; tasks for services that <i>do</i> use a load
--   balancer are considered healthy if they are in the <tt>RUNNING</tt>
--   state and they are reported as healthy by the load balancer. The
--   default value for minimum healthy percent is 100%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __minimum healthy percent__ value is set to the default
--   value and is used to define the lower limit on the number of the tasks
--   in the service that remain in the <tt>RUNNING</tt> state while the
--   container instances are in the <tt>DRAINING</tt> state. If the tasks
--   in the service use the Fargate launch type, the minimum healthy
--   percent value is not used, although it is returned when describing
--   your service.
--   
--   <a>$sel:maximumPercent:DeploymentConfiguration'</a>,
--   <a>deploymentConfiguration_maximumPercent</a> - If a service is using
--   the rolling update (<tt>ECS</tt>) deployment type, the <b>maximum
--   percent</b> parameter represents an upper limit on the number of tasks
--   in a service that are allowed in the <tt>RUNNING</tt> or
--   <tt>PENDING</tt> state during a deployment, as a percentage of the
--   desired number of tasks (rounded down to the nearest integer), and
--   while any container instances are in the <tt>DRAINING</tt> state if
--   the service contains tasks using the EC2 launch type. This parameter
--   enables you to define the deployment batch size. For example, if your
--   service has a desired number of four tasks and a maximum percent value
--   of 200%, the scheduler may start four new tasks before stopping the
--   four older tasks (provided that the cluster resources required to do
--   this are available). The default value for maximum percent is 200%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __maximum percent__ value is set to the default value and is
--   used to define the upper limit on the number of the tasks in the
--   service that remain in the <tt>RUNNING</tt> state while the container
--   instances are in the <tt>DRAINING</tt> state. If the tasks in the
--   service use the Fargate launch type, the maximum percent value is not
--   used, although it is returned when describing your service.
--   
--   <a>$sel:deploymentCircuitBreaker:DeploymentConfiguration'</a>,
--   <a>deploymentConfiguration_deploymentCircuitBreaker</a> - The
--   deployment circuit breaker can only be used for services using the
--   rolling update (<tt>ECS</tt>) deployment type.
--   
--   The <b>deployment circuit breaker</b> determines whether a service
--   deployment will fail if the service can't reach a steady state. If
--   deployment circuit breaker is enabled, a service deployment will
--   transition to a failed state and stop launching new tasks. If rollback
--   is enabled, when a service deployment fails, the service is rolled
--   back to the last deployment that completed successfully.
newDeploymentConfiguration :: DeploymentConfiguration

-- | If a service is using the rolling update (<tt>ECS</tt>) deployment
--   type, the <b>minimum healthy percent</b> represents a lower limit on
--   the number of tasks in a service that must remain in the
--   <tt>RUNNING</tt> state during a deployment, as a percentage of the
--   desired number of tasks (rounded up to the nearest integer), and while
--   any container instances are in the <tt>DRAINING</tt> state if the
--   service contains tasks using the EC2 launch type. This parameter
--   enables you to deploy without using additional cluster capacity. For
--   example, if your service has a desired number of four tasks and a
--   minimum healthy percent of 50%, the scheduler may stop two existing
--   tasks to free up cluster capacity before starting two new tasks. Tasks
--   for services that <i>do not</i> use a load balancer are considered
--   healthy if they are in the <tt>RUNNING</tt> state; tasks for services
--   that <i>do</i> use a load balancer are considered healthy if they are
--   in the <tt>RUNNING</tt> state and they are reported as healthy by the
--   load balancer. The default value for minimum healthy percent is 100%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __minimum healthy percent__ value is set to the default
--   value and is used to define the lower limit on the number of the tasks
--   in the service that remain in the <tt>RUNNING</tt> state while the
--   container instances are in the <tt>DRAINING</tt> state. If the tasks
--   in the service use the Fargate launch type, the minimum healthy
--   percent value is not used, although it is returned when describing
--   your service.
deploymentConfiguration_minimumHealthyPercent :: Lens' DeploymentConfiguration (Maybe Int)

-- | If a service is using the rolling update (<tt>ECS</tt>) deployment
--   type, the <b>maximum percent</b> parameter represents an upper limit
--   on the number of tasks in a service that are allowed in the
--   <tt>RUNNING</tt> or <tt>PENDING</tt> state during a deployment, as a
--   percentage of the desired number of tasks (rounded down to the nearest
--   integer), and while any container instances are in the
--   <tt>DRAINING</tt> state if the service contains tasks using the EC2
--   launch type. This parameter enables you to define the deployment batch
--   size. For example, if your service has a desired number of four tasks
--   and a maximum percent value of 200%, the scheduler may start four new
--   tasks before stopping the four older tasks (provided that the cluster
--   resources required to do this are available). The default value for
--   maximum percent is 200%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __maximum percent__ value is set to the default value and is
--   used to define the upper limit on the number of the tasks in the
--   service that remain in the <tt>RUNNING</tt> state while the container
--   instances are in the <tt>DRAINING</tt> state. If the tasks in the
--   service use the Fargate launch type, the maximum percent value is not
--   used, although it is returned when describing your service.
deploymentConfiguration_maximumPercent :: Lens' DeploymentConfiguration (Maybe Int)

-- | The deployment circuit breaker can only be used for services using the
--   rolling update (<tt>ECS</tt>) deployment type.
--   
--   The <b>deployment circuit breaker</b> determines whether a service
--   deployment will fail if the service can't reach a steady state. If
--   deployment circuit breaker is enabled, a service deployment will
--   transition to a failed state and stop launching new tasks. If rollback
--   is enabled, when a service deployment fails, the service is rolled
--   back to the last deployment that completed successfully.
deploymentConfiguration_deploymentCircuitBreaker :: Lens' DeploymentConfiguration (Maybe DeploymentCircuitBreaker)

-- | The deployment controller to use for the service. For more
--   information, see <a>Amazon ECS Deployment Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newDeploymentController</a> smart constructor.
data DeploymentController
DeploymentController' :: DeploymentControllerType -> DeploymentController

-- | The deployment controller type to use.
--   
--   There are three deployment controller types available:
--   
--   <ul>
--   <li><i>ECS</i> The rolling update (<tt>ECS</tt>) deployment type
--   involves replacing the current running version of the container with
--   the latest version. The number of containers Amazon ECS adds or
--   removes from the service during a rolling update is controlled by
--   adjusting the minimum and maximum number of healthy tasks allowed
--   during a service deployment, as specified in the
--   DeploymentConfiguration.</li>
--   <li><i>CODE_DEPLOY</i> The blue/green (<tt>CODE_DEPLOY</tt>)
--   deployment type uses the blue/green deployment model powered by
--   CodeDeploy, which allows you to verify a new deployment of a service
--   before sending production traffic to it.</li>
--   <li><i>EXTERNAL</i> The external (<tt>EXTERNAL</tt>) deployment type
--   enables you to use any third-party deployment controller for full
--   control over the deployment process for an Amazon ECS service.</li>
--   </ul>
[$sel:type':DeploymentController'] :: DeploymentController -> DeploymentControllerType

-- | Create a value of <a>DeploymentController</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':DeploymentController'</a>,
--   <a>deploymentController_type</a> - The deployment controller type to
--   use.
--   
--   There are three deployment controller types available:
--   
--   <ul>
--   <li><i>ECS</i> The rolling update (<tt>ECS</tt>) deployment type
--   involves replacing the current running version of the container with
--   the latest version. The number of containers Amazon ECS adds or
--   removes from the service during a rolling update is controlled by
--   adjusting the minimum and maximum number of healthy tasks allowed
--   during a service deployment, as specified in the
--   DeploymentConfiguration.</li>
--   <li><i>CODE_DEPLOY</i> The blue/green (<tt>CODE_DEPLOY</tt>)
--   deployment type uses the blue/green deployment model powered by
--   CodeDeploy, which allows you to verify a new deployment of a service
--   before sending production traffic to it.</li>
--   <li><i>EXTERNAL</i> The external (<tt>EXTERNAL</tt>) deployment type
--   enables you to use any third-party deployment controller for full
--   control over the deployment process for an Amazon ECS service.</li>
--   </ul>
newDeploymentController :: DeploymentControllerType -> DeploymentController

-- | The deployment controller type to use.
--   
--   There are three deployment controller types available:
--   
--   <ul>
--   <li><i>ECS</i> The rolling update (<tt>ECS</tt>) deployment type
--   involves replacing the current running version of the container with
--   the latest version. The number of containers Amazon ECS adds or
--   removes from the service during a rolling update is controlled by
--   adjusting the minimum and maximum number of healthy tasks allowed
--   during a service deployment, as specified in the
--   DeploymentConfiguration.</li>
--   <li><i>CODE_DEPLOY</i> The blue/green (<tt>CODE_DEPLOY</tt>)
--   deployment type uses the blue/green deployment model powered by
--   CodeDeploy, which allows you to verify a new deployment of a service
--   before sending production traffic to it.</li>
--   <li><i>EXTERNAL</i> The external (<tt>EXTERNAL</tt>) deployment type
--   enables you to use any third-party deployment controller for full
--   control over the deployment process for an Amazon ECS service.</li>
--   </ul>
deploymentController_type :: Lens' DeploymentController DeploymentControllerType

-- | An object representing a container instance host device.
--   
--   <i>See:</i> <a>newDevice</a> smart constructor.
data Device
Device' :: Maybe Text -> Maybe [DeviceCgroupPermission] -> Text -> Device

-- | The path inside the container at which to expose the host device.
[$sel:containerPath:Device'] :: Device -> Maybe Text

-- | The explicit permissions to provide to the container for the device.
--   By default, the container has permissions for <tt>read</tt>,
--   <tt>write</tt>, and <tt>mknod</tt> for the device.
[$sel:permissions:Device'] :: Device -> Maybe [DeviceCgroupPermission]

-- | The path for the device on the host container instance.
[$sel:hostPath:Device'] :: Device -> Text

-- | Create a value of <a>Device</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerPath:Device'</a>, <a>device_containerPath</a> - The
--   path inside the container at which to expose the host device.
--   
--   <a>$sel:permissions:Device'</a>, <a>device_permissions</a> - The
--   explicit permissions to provide to the container for the device. By
--   default, the container has permissions for <tt>read</tt>,
--   <tt>write</tt>, and <tt>mknod</tt> for the device.
--   
--   <a>$sel:hostPath:Device'</a>, <a>device_hostPath</a> - The path for
--   the device on the host container instance.
newDevice :: Text -> Device

-- | The path inside the container at which to expose the host device.
device_containerPath :: Lens' Device (Maybe Text)

-- | The explicit permissions to provide to the container for the device.
--   By default, the container has permissions for <tt>read</tt>,
--   <tt>write</tt>, and <tt>mknod</tt> for the device.
device_permissions :: Lens' Device (Maybe [DeviceCgroupPermission])

-- | The path for the device on the host container instance.
device_hostPath :: Lens' Device Text

-- | This parameter is specified when you are using Docker volumes. Docker
--   volumes are only supported when you are using the EC2 launch type.
--   Windows containers only support the use of the <tt>local</tt> driver.
--   To use bind mounts, specify a <tt>host</tt> instead.
--   
--   <i>See:</i> <a>newDockerVolumeConfiguration</a> smart constructor.
data DockerVolumeConfiguration
DockerVolumeConfiguration' :: Maybe (HashMap Text Text) -> Maybe Text -> Maybe Scope -> Maybe (HashMap Text Text) -> Maybe Bool -> DockerVolumeConfiguration

-- | A map of Docker driver-specific options passed through. This parameter
--   maps to <tt>DriverOpts</tt> in the <a>Create a volume</a> section of
--   the <a>Docker Remote API</a> and the <tt>xxopt</tt> option to
--   <a>docker volume create</a>.
[$sel:driverOpts:DockerVolumeConfiguration'] :: DockerVolumeConfiguration -> Maybe (HashMap Text Text)

-- | The Docker volume driver to use. The driver value must match the
--   driver name provided by Docker because it is used for task placement.
--   If the driver was installed using the Docker plugin CLI, use
--   <tt>docker plugin ls</tt> to retrieve the driver name from your
--   container instance. If the driver was installed using another method,
--   use Docker plugin discovery to retrieve the driver name. For more
--   information, see <a>Docker plugin discovery</a>. This parameter maps
--   to <tt>Driver</tt> in the <a>Create a volume</a> section of the
--   <a>Docker Remote API</a> and the <tt>xxdriver</tt> option to <a>docker
--   volume create</a>.
[$sel:driver:DockerVolumeConfiguration'] :: DockerVolumeConfiguration -> Maybe Text

-- | The scope for the Docker volume that determines its lifecycle. Docker
--   volumes that are scoped to a <tt>task</tt> are automatically
--   provisioned when the task starts and destroyed when the task stops.
--   Docker volumes that are scoped as <tt>shared</tt> persist after the
--   task stops.
[$sel:scope:DockerVolumeConfiguration'] :: DockerVolumeConfiguration -> Maybe Scope

-- | Custom metadata to add to your Docker volume. This parameter maps to
--   <tt>Labels</tt> in the <a>Create a volume</a> section of the <a>Docker
--   Remote API</a> and the <tt>xxlabel</tt> option to <a>docker volume
--   create</a>.
[$sel:labels:DockerVolumeConfiguration'] :: DockerVolumeConfiguration -> Maybe (HashMap Text Text)

-- | If this value is <tt>true</tt>, the Docker volume is created if it
--   does not already exist.
--   
--   This field is only used if the <tt>scope</tt> is <tt>shared</tt>.
[$sel:autoprovision:DockerVolumeConfiguration'] :: DockerVolumeConfiguration -> Maybe Bool

-- | Create a value of <a>DockerVolumeConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:driverOpts:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_driverOpts</a> - A map of Docker
--   driver-specific options passed through. This parameter maps to
--   <tt>DriverOpts</tt> in the <a>Create a volume</a> section of the
--   <a>Docker Remote API</a> and the <tt>xxopt</tt> option to <a>docker
--   volume create</a>.
--   
--   <a>$sel:driver:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_driver</a> - The Docker volume driver to
--   use. The driver value must match the driver name provided by Docker
--   because it is used for task placement. If the driver was installed
--   using the Docker plugin CLI, use <tt>docker plugin ls</tt> to retrieve
--   the driver name from your container instance. If the driver was
--   installed using another method, use Docker plugin discovery to
--   retrieve the driver name. For more information, see <a>Docker plugin
--   discovery</a>. This parameter maps to <tt>Driver</tt> in the <a>Create
--   a volume</a> section of the <a>Docker Remote API</a> and the
--   <tt>xxdriver</tt> option to <a>docker volume create</a>.
--   
--   <a>$sel:scope:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_scope</a> - The scope for the Docker
--   volume that determines its lifecycle. Docker volumes that are scoped
--   to a <tt>task</tt> are automatically provisioned when the task starts
--   and destroyed when the task stops. Docker volumes that are scoped as
--   <tt>shared</tt> persist after the task stops.
--   
--   <a>$sel:labels:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_labels</a> - Custom metadata to add to
--   your Docker volume. This parameter maps to <tt>Labels</tt> in the
--   <a>Create a volume</a> section of the <a>Docker Remote API</a> and the
--   <tt>xxlabel</tt> option to <a>docker volume create</a>.
--   
--   <a>$sel:autoprovision:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_autoprovision</a> - If this value is
--   <tt>true</tt>, the Docker volume is created if it does not already
--   exist.
--   
--   This field is only used if the <tt>scope</tt> is <tt>shared</tt>.
newDockerVolumeConfiguration :: DockerVolumeConfiguration

-- | A map of Docker driver-specific options passed through. This parameter
--   maps to <tt>DriverOpts</tt> in the <a>Create a volume</a> section of
--   the <a>Docker Remote API</a> and the <tt>xxopt</tt> option to
--   <a>docker volume create</a>.
dockerVolumeConfiguration_driverOpts :: Lens' DockerVolumeConfiguration (Maybe (HashMap Text Text))

-- | The Docker volume driver to use. The driver value must match the
--   driver name provided by Docker because it is used for task placement.
--   If the driver was installed using the Docker plugin CLI, use
--   <tt>docker plugin ls</tt> to retrieve the driver name from your
--   container instance. If the driver was installed using another method,
--   use Docker plugin discovery to retrieve the driver name. For more
--   information, see <a>Docker plugin discovery</a>. This parameter maps
--   to <tt>Driver</tt> in the <a>Create a volume</a> section of the
--   <a>Docker Remote API</a> and the <tt>xxdriver</tt> option to <a>docker
--   volume create</a>.
dockerVolumeConfiguration_driver :: Lens' DockerVolumeConfiguration (Maybe Text)

-- | The scope for the Docker volume that determines its lifecycle. Docker
--   volumes that are scoped to a <tt>task</tt> are automatically
--   provisioned when the task starts and destroyed when the task stops.
--   Docker volumes that are scoped as <tt>shared</tt> persist after the
--   task stops.
dockerVolumeConfiguration_scope :: Lens' DockerVolumeConfiguration (Maybe Scope)

-- | Custom metadata to add to your Docker volume. This parameter maps to
--   <tt>Labels</tt> in the <a>Create a volume</a> section of the <a>Docker
--   Remote API</a> and the <tt>xxlabel</tt> option to <a>docker volume
--   create</a>.
dockerVolumeConfiguration_labels :: Lens' DockerVolumeConfiguration (Maybe (HashMap Text Text))

-- | If this value is <tt>true</tt>, the Docker volume is created if it
--   does not already exist.
--   
--   This field is only used if the <tt>scope</tt> is <tt>shared</tt>.
dockerVolumeConfiguration_autoprovision :: Lens' DockerVolumeConfiguration (Maybe Bool)

-- | The authorization configuration details for the Amazon EFS file
--   system.
--   
--   <i>See:</i> <a>newEFSAuthorizationConfig</a> smart constructor.
data EFSAuthorizationConfig
EFSAuthorizationConfig' :: Maybe Text -> Maybe EFSAuthorizationConfigIAM -> EFSAuthorizationConfig

-- | The Amazon EFS access point ID to use. If an access point is
--   specified, the root directory value specified in the
--   <tt>EFSVolumeConfiguration</tt> must either be omitted or set to
--   <tt>/</tt> which will enforce the path set on the EFS access point. If
--   an access point is used, transit encryption must be enabled in the
--   <tt>EFSVolumeConfiguration</tt>. For more information, see <a>Working
--   with Amazon EFS Access Points</a> in the <i>Amazon Elastic File System
--   User Guide</i>.
[$sel:accessPointId:EFSAuthorizationConfig'] :: EFSAuthorizationConfig -> Maybe Text

-- | Whether or not to use the Amazon ECS task IAM role defined in a task
--   definition when mounting the Amazon EFS file system. If enabled,
--   transit encryption must be enabled in the
--   <tt>EFSVolumeConfiguration</tt>. If this parameter is omitted, the
--   default value of <tt>DISABLED</tt> is used. For more information, see
--   <a>Using Amazon EFS Access Points</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
[$sel:iam:EFSAuthorizationConfig'] :: EFSAuthorizationConfig -> Maybe EFSAuthorizationConfigIAM

-- | Create a value of <a>EFSAuthorizationConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:accessPointId:EFSAuthorizationConfig'</a>,
--   <a>eFSAuthorizationConfig_accessPointId</a> - The Amazon EFS access
--   point ID to use. If an access point is specified, the root directory
--   value specified in the <tt>EFSVolumeConfiguration</tt> must either be
--   omitted or set to <tt>/</tt> which will enforce the path set on the
--   EFS access point. If an access point is used, transit encryption must
--   be enabled in the <tt>EFSVolumeConfiguration</tt>. For more
--   information, see <a>Working with Amazon EFS Access Points</a> in the
--   <i>Amazon Elastic File System User Guide</i>.
--   
--   <a>$sel:iam:EFSAuthorizationConfig'</a>,
--   <a>eFSAuthorizationConfig_iam</a> - Whether or not to use the Amazon
--   ECS task IAM role defined in a task definition when mounting the
--   Amazon EFS file system. If enabled, transit encryption must be enabled
--   in the <tt>EFSVolumeConfiguration</tt>. If this parameter is omitted,
--   the default value of <tt>DISABLED</tt> is used. For more information,
--   see <a>Using Amazon EFS Access Points</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
newEFSAuthorizationConfig :: EFSAuthorizationConfig

-- | The Amazon EFS access point ID to use. If an access point is
--   specified, the root directory value specified in the
--   <tt>EFSVolumeConfiguration</tt> must either be omitted or set to
--   <tt>/</tt> which will enforce the path set on the EFS access point. If
--   an access point is used, transit encryption must be enabled in the
--   <tt>EFSVolumeConfiguration</tt>. For more information, see <a>Working
--   with Amazon EFS Access Points</a> in the <i>Amazon Elastic File System
--   User Guide</i>.
eFSAuthorizationConfig_accessPointId :: Lens' EFSAuthorizationConfig (Maybe Text)

-- | Whether or not to use the Amazon ECS task IAM role defined in a task
--   definition when mounting the Amazon EFS file system. If enabled,
--   transit encryption must be enabled in the
--   <tt>EFSVolumeConfiguration</tt>. If this parameter is omitted, the
--   default value of <tt>DISABLED</tt> is used. For more information, see
--   <a>Using Amazon EFS Access Points</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
eFSAuthorizationConfig_iam :: Lens' EFSAuthorizationConfig (Maybe EFSAuthorizationConfigIAM)

-- | This parameter is specified when you are using an Amazon Elastic File
--   System file system for task storage. For more information, see
--   <a>Amazon EFS Volumes</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newEFSVolumeConfiguration</a> smart constructor.
data EFSVolumeConfiguration
EFSVolumeConfiguration' :: Maybe Text -> Maybe EFSTransitEncryption -> Maybe EFSAuthorizationConfig -> Maybe Int -> Text -> EFSVolumeConfiguration

-- | The directory within the Amazon EFS file system to mount as the root
--   directory inside the host. If this parameter is omitted, the root of
--   the Amazon EFS volume will be used. Specifying <tt>/</tt> will have
--   the same effect as omitting this parameter.
--   
--   If an EFS access point is specified in the
--   <tt>authorizationConfig</tt>, the root directory parameter must either
--   be omitted or set to <tt>/</tt> which will enforce the path set on the
--   EFS access point.
[$sel:rootDirectory:EFSVolumeConfiguration'] :: EFSVolumeConfiguration -> Maybe Text

-- | Whether or not to enable encryption for Amazon EFS data in transit
--   between the Amazon ECS host and the Amazon EFS server. Transit
--   encryption must be enabled if Amazon EFS IAM authorization is used. If
--   this parameter is omitted, the default value of <tt>DISABLED</tt> is
--   used. For more information, see <a>Encrypting Data in Transit</a> in
--   the <i>Amazon Elastic File System User Guide</i>.
[$sel:transitEncryption:EFSVolumeConfiguration'] :: EFSVolumeConfiguration -> Maybe EFSTransitEncryption

-- | The authorization configuration details for the Amazon EFS file
--   system.
[$sel:authorizationConfig:EFSVolumeConfiguration'] :: EFSVolumeConfiguration -> Maybe EFSAuthorizationConfig

-- | The port to use when sending encrypted data between the Amazon ECS
--   host and the Amazon EFS server. If you do not specify a transit
--   encryption port, it will use the port selection strategy that the
--   Amazon EFS mount helper uses. For more information, see <a>EFS Mount
--   Helper</a> in the <i>Amazon Elastic File System User Guide</i>.
[$sel:transitEncryptionPort:EFSVolumeConfiguration'] :: EFSVolumeConfiguration -> Maybe Int

-- | The Amazon EFS file system ID to use.
[$sel:fileSystemId:EFSVolumeConfiguration'] :: EFSVolumeConfiguration -> Text

-- | Create a value of <a>EFSVolumeConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rootDirectory:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_rootDirectory</a> - The directory within the
--   Amazon EFS file system to mount as the root directory inside the host.
--   If this parameter is omitted, the root of the Amazon EFS volume will
--   be used. Specifying <tt>/</tt> will have the same effect as omitting
--   this parameter.
--   
--   If an EFS access point is specified in the
--   <tt>authorizationConfig</tt>, the root directory parameter must either
--   be omitted or set to <tt>/</tt> which will enforce the path set on the
--   EFS access point.
--   
--   <a>$sel:transitEncryption:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_transitEncryption</a> - Whether or not to
--   enable encryption for Amazon EFS data in transit between the Amazon
--   ECS host and the Amazon EFS server. Transit encryption must be enabled
--   if Amazon EFS IAM authorization is used. If this parameter is omitted,
--   the default value of <tt>DISABLED</tt> is used. For more information,
--   see <a>Encrypting Data in Transit</a> in the <i>Amazon Elastic File
--   System User Guide</i>.
--   
--   <a>$sel:authorizationConfig:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_authorizationConfig</a> - The authorization
--   configuration details for the Amazon EFS file system.
--   
--   <a>$sel:transitEncryptionPort:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_transitEncryptionPort</a> - The port to use
--   when sending encrypted data between the Amazon ECS host and the Amazon
--   EFS server. If you do not specify a transit encryption port, it will
--   use the port selection strategy that the Amazon EFS mount helper uses.
--   For more information, see <a>EFS Mount Helper</a> in the <i>Amazon
--   Elastic File System User Guide</i>.
--   
--   <a>$sel:fileSystemId:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_fileSystemId</a> - The Amazon EFS file
--   system ID to use.
newEFSVolumeConfiguration :: Text -> EFSVolumeConfiguration

-- | The directory within the Amazon EFS file system to mount as the root
--   directory inside the host. If this parameter is omitted, the root of
--   the Amazon EFS volume will be used. Specifying <tt>/</tt> will have
--   the same effect as omitting this parameter.
--   
--   If an EFS access point is specified in the
--   <tt>authorizationConfig</tt>, the root directory parameter must either
--   be omitted or set to <tt>/</tt> which will enforce the path set on the
--   EFS access point.
eFSVolumeConfiguration_rootDirectory :: Lens' EFSVolumeConfiguration (Maybe Text)

-- | Whether or not to enable encryption for Amazon EFS data in transit
--   between the Amazon ECS host and the Amazon EFS server. Transit
--   encryption must be enabled if Amazon EFS IAM authorization is used. If
--   this parameter is omitted, the default value of <tt>DISABLED</tt> is
--   used. For more information, see <a>Encrypting Data in Transit</a> in
--   the <i>Amazon Elastic File System User Guide</i>.
eFSVolumeConfiguration_transitEncryption :: Lens' EFSVolumeConfiguration (Maybe EFSTransitEncryption)

-- | The authorization configuration details for the Amazon EFS file
--   system.
eFSVolumeConfiguration_authorizationConfig :: Lens' EFSVolumeConfiguration (Maybe EFSAuthorizationConfig)

-- | The port to use when sending encrypted data between the Amazon ECS
--   host and the Amazon EFS server. If you do not specify a transit
--   encryption port, it will use the port selection strategy that the
--   Amazon EFS mount helper uses. For more information, see <a>EFS Mount
--   Helper</a> in the <i>Amazon Elastic File System User Guide</i>.
eFSVolumeConfiguration_transitEncryptionPort :: Lens' EFSVolumeConfiguration (Maybe Int)

-- | The Amazon EFS file system ID to use.
eFSVolumeConfiguration_fileSystemId :: Lens' EFSVolumeConfiguration Text

-- | A list of files containing the environment variables to pass to a
--   container. You can specify up to ten environment files. The file must
--   have a <tt>.env</tt> file extension. Each line in an environment file
--   should contain an environment variable in <tt>VARIABLE=VALUE</tt>
--   format. Lines beginning with <tt>#</tt> are treated as comments and
--   are ignored. For more information on the environment variable file
--   syntax, see <a>Declare default environment variables in file</a>.
--   
--   If there are environment variables specified using the
--   <tt>environment</tt> parameter in a container definition, they take
--   precedence over the variables contained within an environment file. If
--   multiple environment files are specified that contain the same
--   variable, they are processed from the top down. It is recommended to
--   use unique variable names. For more information, see <a>Specifying
--   environment variables</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   This field is only valid for containers in Fargate tasks that use
--   platform version <tt>1.4.0</tt> or later.
--   
--   <i>See:</i> <a>newEnvironmentFile</a> smart constructor.
data EnvironmentFile
EnvironmentFile' :: Text -> EnvironmentFileType -> EnvironmentFile

-- | The Amazon Resource Name (ARN) of the Amazon S3 object containing the
--   environment variable file.
[$sel:value:EnvironmentFile'] :: EnvironmentFile -> Text

-- | The file type to use. The only supported value is <tt>s3</tt>.
[$sel:type':EnvironmentFile'] :: EnvironmentFile -> EnvironmentFileType

-- | Create a value of <a>EnvironmentFile</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:EnvironmentFile'</a>, <a>environmentFile_value</a> - The
--   Amazon Resource Name (ARN) of the Amazon S3 object containing the
--   environment variable file.
--   
--   <a>$sel:type':EnvironmentFile'</a>, <a>environmentFile_type</a> - The
--   file type to use. The only supported value is <tt>s3</tt>.
newEnvironmentFile :: Text -> EnvironmentFileType -> EnvironmentFile

-- | The Amazon Resource Name (ARN) of the Amazon S3 object containing the
--   environment variable file.
environmentFile_value :: Lens' EnvironmentFile Text

-- | The file type to use. The only supported value is <tt>s3</tt>.
environmentFile_type :: Lens' EnvironmentFile EnvironmentFileType

-- | The amount of ephemeral storage to allocate for the task. This
--   parameter is used to expand the total amount of ephemeral storage
--   available, beyond the default amount, for tasks hosted on Fargate. For
--   more information, see <a>Fargate task storage</a> in the <i>Amazon ECS
--   User Guide for Fargate</i>.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
--   
--   <i>See:</i> <a>newEphemeralStorage</a> smart constructor.
data EphemeralStorage
EphemeralStorage' :: Int -> EphemeralStorage

-- | The total amount, in GiB, of ephemeral storage to set for the task.
--   The minimum supported value is <tt>21</tt> GiB and the maximum
--   supported value is <tt>200</tt> GiB.
[$sel:sizeInGiB:EphemeralStorage'] :: EphemeralStorage -> Int

-- | Create a value of <a>EphemeralStorage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sizeInGiB:EphemeralStorage'</a>,
--   <a>ephemeralStorage_sizeInGiB</a> - The total amount, in GiB, of
--   ephemeral storage to set for the task. The minimum supported value is
--   <tt>21</tt> GiB and the maximum supported value is <tt>200</tt> GiB.
newEphemeralStorage :: Int -> EphemeralStorage

-- | The total amount, in GiB, of ephemeral storage to set for the task.
--   The minimum supported value is <tt>21</tt> GiB and the maximum
--   supported value is <tt>200</tt> GiB.
ephemeralStorage_sizeInGiB :: Lens' EphemeralStorage Int

-- | The details of the execute command configuration.
--   
--   <i>See:</i> <a>newExecuteCommandConfiguration</a> smart constructor.
data ExecuteCommandConfiguration
ExecuteCommandConfiguration' :: Maybe ExecuteCommandLogConfiguration -> Maybe Text -> Maybe ExecuteCommandLogging -> ExecuteCommandConfiguration

-- | The log configuration for the results of the execute command actions.
--   The logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When
--   <tt>logging=OVERRIDE</tt> is specified, a <tt>logConfiguration</tt>
--   must be provided.
[$sel:logConfiguration:ExecuteCommandConfiguration'] :: ExecuteCommandConfiguration -> Maybe ExecuteCommandLogConfiguration

-- | Specify an Key Management Service key ID to encrypt the data between
--   the local client and the container.
[$sel:kmsKeyId:ExecuteCommandConfiguration'] :: ExecuteCommandConfiguration -> Maybe Text

-- | The log setting to use for redirecting logs for your execute command
--   results. The following log settings are available.
--   
--   <ul>
--   <li><tt>NONE</tt>: The execute command session is not logged.</li>
--   <li><tt>DEFAULT</tt>: The <tt>awslogs</tt> configuration in the task
--   definition is used. If no logging parameter is specified, it defaults
--   to this value. If no <tt>awslogs</tt> log driver is configured in the
--   task definition, the output won't be logged.</li>
--   <li><tt>OVERRIDE</tt>: Specify the logging details as a part of
--   <tt>logConfiguration</tt>. If the <tt>OVERRIDE</tt> logging option is
--   specified, the <tt>logConfiguration</tt> is required.</li>
--   </ul>
[$sel:logging:ExecuteCommandConfiguration'] :: ExecuteCommandConfiguration -> Maybe ExecuteCommandLogging

-- | Create a value of <a>ExecuteCommandConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logConfiguration:ExecuteCommandConfiguration'</a>,
--   <a>executeCommandConfiguration_logConfiguration</a> - The log
--   configuration for the results of the execute command actions. The logs
--   can be sent to CloudWatch Logs or an Amazon S3 bucket. When
--   <tt>logging=OVERRIDE</tt> is specified, a <tt>logConfiguration</tt>
--   must be provided.
--   
--   <a>$sel:kmsKeyId:ExecuteCommandConfiguration'</a>,
--   <a>executeCommandConfiguration_kmsKeyId</a> - Specify an Key
--   Management Service key ID to encrypt the data between the local client
--   and the container.
--   
--   <a>$sel:logging:ExecuteCommandConfiguration'</a>,
--   <a>executeCommandConfiguration_logging</a> - The log setting to use
--   for redirecting logs for your execute command results. The following
--   log settings are available.
--   
--   <ul>
--   <li><tt>NONE</tt>: The execute command session is not logged.</li>
--   <li><tt>DEFAULT</tt>: The <tt>awslogs</tt> configuration in the task
--   definition is used. If no logging parameter is specified, it defaults
--   to this value. If no <tt>awslogs</tt> log driver is configured in the
--   task definition, the output won't be logged.</li>
--   <li><tt>OVERRIDE</tt>: Specify the logging details as a part of
--   <tt>logConfiguration</tt>. If the <tt>OVERRIDE</tt> logging option is
--   specified, the <tt>logConfiguration</tt> is required.</li>
--   </ul>
newExecuteCommandConfiguration :: ExecuteCommandConfiguration

-- | The log configuration for the results of the execute command actions.
--   The logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When
--   <tt>logging=OVERRIDE</tt> is specified, a <tt>logConfiguration</tt>
--   must be provided.
executeCommandConfiguration_logConfiguration :: Lens' ExecuteCommandConfiguration (Maybe ExecuteCommandLogConfiguration)

-- | Specify an Key Management Service key ID to encrypt the data between
--   the local client and the container.
executeCommandConfiguration_kmsKeyId :: Lens' ExecuteCommandConfiguration (Maybe Text)

-- | The log setting to use for redirecting logs for your execute command
--   results. The following log settings are available.
--   
--   <ul>
--   <li><tt>NONE</tt>: The execute command session is not logged.</li>
--   <li><tt>DEFAULT</tt>: The <tt>awslogs</tt> configuration in the task
--   definition is used. If no logging parameter is specified, it defaults
--   to this value. If no <tt>awslogs</tt> log driver is configured in the
--   task definition, the output won't be logged.</li>
--   <li><tt>OVERRIDE</tt>: Specify the logging details as a part of
--   <tt>logConfiguration</tt>. If the <tt>OVERRIDE</tt> logging option is
--   specified, the <tt>logConfiguration</tt> is required.</li>
--   </ul>
executeCommandConfiguration_logging :: Lens' ExecuteCommandConfiguration (Maybe ExecuteCommandLogging)

-- | The log configuration for the results of the execute command actions.
--   The logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
--   
--   <i>See:</i> <a>newExecuteCommandLogConfiguration</a> smart
--   constructor.
data ExecuteCommandLogConfiguration
ExecuteCommandLogConfiguration' :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> ExecuteCommandLogConfiguration

-- | The name of the CloudWatch log group to send logs to.
--   
--   The CloudWatch log group must already be created.
[$sel:cloudWatchLogGroupName:ExecuteCommandLogConfiguration'] :: ExecuteCommandLogConfiguration -> Maybe Text

-- | An optional folder in the S3 bucket to place logs in.
[$sel:s3KeyPrefix:ExecuteCommandLogConfiguration'] :: ExecuteCommandLogConfiguration -> Maybe Text

-- | Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
[$sel:cloudWatchEncryptionEnabled:ExecuteCommandLogConfiguration'] :: ExecuteCommandLogConfiguration -> Maybe Bool

-- | Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
[$sel:s3EncryptionEnabled:ExecuteCommandLogConfiguration'] :: ExecuteCommandLogConfiguration -> Maybe Bool

-- | The name of the S3 bucket to send logs to.
--   
--   The S3 bucket must already be created.
[$sel:s3BucketName:ExecuteCommandLogConfiguration'] :: ExecuteCommandLogConfiguration -> Maybe Text

-- | Create a value of <a>ExecuteCommandLogConfiguration</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cloudWatchLogGroupName:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_cloudWatchLogGroupName</a> - The
--   name of the CloudWatch log group to send logs to.
--   
--   The CloudWatch log group must already be created.
--   
--   <a>$sel:s3KeyPrefix:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_s3KeyPrefix</a> - An optional folder
--   in the S3 bucket to place logs in.
--   
--   
--   <a>$sel:cloudWatchEncryptionEnabled:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_cloudWatchEncryptionEnabled</a> -
--   Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
--   
--   <a>$sel:s3EncryptionEnabled:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_s3EncryptionEnabled</a> - Whether or
--   not to enable encryption on the CloudWatch logs. If not specified,
--   encryption will be disabled.
--   
--   <a>$sel:s3BucketName:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_s3BucketName</a> - The name of the
--   S3 bucket to send logs to.
--   
--   The S3 bucket must already be created.
newExecuteCommandLogConfiguration :: ExecuteCommandLogConfiguration

-- | The name of the CloudWatch log group to send logs to.
--   
--   The CloudWatch log group must already be created.
executeCommandLogConfiguration_cloudWatchLogGroupName :: Lens' ExecuteCommandLogConfiguration (Maybe Text)

-- | An optional folder in the S3 bucket to place logs in.
executeCommandLogConfiguration_s3KeyPrefix :: Lens' ExecuteCommandLogConfiguration (Maybe Text)

-- | Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
executeCommandLogConfiguration_cloudWatchEncryptionEnabled :: Lens' ExecuteCommandLogConfiguration (Maybe Bool)

-- | Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
executeCommandLogConfiguration_s3EncryptionEnabled :: Lens' ExecuteCommandLogConfiguration (Maybe Bool)

-- | The name of the S3 bucket to send logs to.
--   
--   The S3 bucket must already be created.
executeCommandLogConfiguration_s3BucketName :: Lens' ExecuteCommandLogConfiguration (Maybe Text)

-- | The authorization configuration details for Amazon FSx for Windows
--   File Server file system. See
--   <a>FSxWindowsFileServerVolumeConfiguration</a> in the <i>Amazon
--   Elastic Container Service API Reference</i>.
--   
--   For more information and the input format, see <a>Amazon FSx for
--   Windows File Server Volumes</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newFSxWindowsFileServerAuthorizationConfig</a> smart
--   constructor.
data FSxWindowsFileServerAuthorizationConfig
FSxWindowsFileServerAuthorizationConfig' :: Text -> Text -> FSxWindowsFileServerAuthorizationConfig

-- | The authorization credential option to use. The authorization
--   credential options can be provided using either the Amazon Resource
--   Name (ARN) of an Secrets Manager secret or SSM Parameter Store
--   parameter. The ARNs refer to the stored credentials.
[$sel:credentialsParameter:FSxWindowsFileServerAuthorizationConfig'] :: FSxWindowsFileServerAuthorizationConfig -> Text

-- | A fully qualified domain name hosted by an <a>Directory Service</a>
--   Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon
--   EC2.
[$sel:domain:FSxWindowsFileServerAuthorizationConfig'] :: FSxWindowsFileServerAuthorizationConfig -> Text

-- | Create a value of <a>FSxWindowsFileServerAuthorizationConfig</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:credentialsParameter:FSxWindowsFileServerAuthorizationConfig'</a>,
--   <a>fSxWindowsFileServerAuthorizationConfig_credentialsParameter</a> -
--   The authorization credential option to use. The authorization
--   credential options can be provided using either the Amazon Resource
--   Name (ARN) of an Secrets Manager secret or SSM Parameter Store
--   parameter. The ARNs refer to the stored credentials.
--   
--   <a>$sel:domain:FSxWindowsFileServerAuthorizationConfig'</a>,
--   <a>fSxWindowsFileServerAuthorizationConfig_domain</a> - A fully
--   qualified domain name hosted by an <a>Directory Service</a> Managed
--   Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
newFSxWindowsFileServerAuthorizationConfig :: Text -> Text -> FSxWindowsFileServerAuthorizationConfig

-- | The authorization credential option to use. The authorization
--   credential options can be provided using either the Amazon Resource
--   Name (ARN) of an Secrets Manager secret or SSM Parameter Store
--   parameter. The ARNs refer to the stored credentials.
fSxWindowsFileServerAuthorizationConfig_credentialsParameter :: Lens' FSxWindowsFileServerAuthorizationConfig Text

-- | A fully qualified domain name hosted by an <a>Directory Service</a>
--   Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon
--   EC2.
fSxWindowsFileServerAuthorizationConfig_domain :: Lens' FSxWindowsFileServerAuthorizationConfig Text

-- | This parameter is specified when you are using <a>Amazon FSx for
--   Windows File Server</a> file system for task storage.
--   
--   For more information and the input format, see <a>Amazon FSx for
--   Windows File Server Volumes</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newFSxWindowsFileServerVolumeConfiguration</a> smart
--   constructor.
data FSxWindowsFileServerVolumeConfiguration
FSxWindowsFileServerVolumeConfiguration' :: Text -> Text -> FSxWindowsFileServerAuthorizationConfig -> FSxWindowsFileServerVolumeConfiguration

-- | The Amazon FSx for Windows File Server file system ID to use.
[$sel:fileSystemId:FSxWindowsFileServerVolumeConfiguration'] :: FSxWindowsFileServerVolumeConfiguration -> Text

-- | The directory within the Amazon FSx for Windows File Server file
--   system to mount as the root directory inside the host.
[$sel:rootDirectory:FSxWindowsFileServerVolumeConfiguration'] :: FSxWindowsFileServerVolumeConfiguration -> Text

-- | The authorization configuration details for the Amazon FSx for Windows
--   File Server file system.
[$sel:authorizationConfig:FSxWindowsFileServerVolumeConfiguration'] :: FSxWindowsFileServerVolumeConfiguration -> FSxWindowsFileServerAuthorizationConfig

-- | Create a value of <a>FSxWindowsFileServerVolumeConfiguration</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:fileSystemId:FSxWindowsFileServerVolumeConfiguration'</a>,
--   <a>fSxWindowsFileServerVolumeConfiguration_fileSystemId</a> - The
--   Amazon FSx for Windows File Server file system ID to use.
--   
--   <a>$sel:rootDirectory:FSxWindowsFileServerVolumeConfiguration'</a>,
--   <a>fSxWindowsFileServerVolumeConfiguration_rootDirectory</a> - The
--   directory within the Amazon FSx for Windows File Server file system to
--   mount as the root directory inside the host.
--   
--   
--   <a>$sel:authorizationConfig:FSxWindowsFileServerVolumeConfiguration'</a>,
--   <a>fSxWindowsFileServerVolumeConfiguration_authorizationConfig</a> -
--   The authorization configuration details for the Amazon FSx for Windows
--   File Server file system.
newFSxWindowsFileServerVolumeConfiguration :: Text -> Text -> FSxWindowsFileServerAuthorizationConfig -> FSxWindowsFileServerVolumeConfiguration

-- | The Amazon FSx for Windows File Server file system ID to use.
fSxWindowsFileServerVolumeConfiguration_fileSystemId :: Lens' FSxWindowsFileServerVolumeConfiguration Text

-- | The directory within the Amazon FSx for Windows File Server file
--   system to mount as the root directory inside the host.
fSxWindowsFileServerVolumeConfiguration_rootDirectory :: Lens' FSxWindowsFileServerVolumeConfiguration Text

-- | The authorization configuration details for the Amazon FSx for Windows
--   File Server file system.
fSxWindowsFileServerVolumeConfiguration_authorizationConfig :: Lens' FSxWindowsFileServerVolumeConfiguration FSxWindowsFileServerAuthorizationConfig

-- | A failed resource. For a list of common causes, see <a>API failure
--   reasons</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <i>See:</i> <a>newFailure</a> smart constructor.
data Failure
Failure' :: Maybe Text -> Maybe Text -> Maybe Text -> Failure

-- | The Amazon Resource Name (ARN) of the failed resource.
[$sel:arn:Failure'] :: Failure -> Maybe Text

-- | The reason for the failure.
[$sel:reason:Failure'] :: Failure -> Maybe Text

-- | The details of the failure.
[$sel:detail:Failure'] :: Failure -> Maybe Text

-- | Create a value of <a>Failure</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:Failure'</a>, <a>failure_arn</a> - The Amazon Resource
--   Name (ARN) of the failed resource.
--   
--   <a>$sel:reason:Failure'</a>, <a>failure_reason</a> - The reason for
--   the failure.
--   
--   <a>$sel:detail:Failure'</a>, <a>failure_detail</a> - The details of
--   the failure.
newFailure :: Failure

-- | The Amazon Resource Name (ARN) of the failed resource.
failure_arn :: Lens' Failure (Maybe Text)

-- | The reason for the failure.
failure_reason :: Lens' Failure (Maybe Text)

-- | The details of the failure.
failure_detail :: Lens' Failure (Maybe Text)

-- | The FireLens configuration for the container. This is used to specify
--   and configure a log router for container logs. For more information,
--   see <a>Custom Log Routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newFirelensConfiguration</a> smart constructor.
data FirelensConfiguration
FirelensConfiguration' :: Maybe (HashMap Text Text) -> FirelensConfigurationType -> FirelensConfiguration

-- | The options to use when configuring the log router. This field is
--   optional and can be used to specify a custom configuration file or to
--   add additional metadata, such as the task, task definition, cluster,
--   and container instance details to the log event. If specified, the
--   syntax to use is
--   <tt>"options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}</tt>.
--   For more information, see <a>Creating a Task Definition that Uses a
--   FireLens Configuration</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   Tasks hosted on Fargate only support the <tt>file</tt> configuration
--   file type.
[$sel:options:FirelensConfiguration'] :: FirelensConfiguration -> Maybe (HashMap Text Text)

-- | The log router to use. The valid values are <tt>fluentd</tt> or
--   <tt>fluentbit</tt>.
[$sel:type':FirelensConfiguration'] :: FirelensConfiguration -> FirelensConfigurationType

-- | Create a value of <a>FirelensConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:options:FirelensConfiguration'</a>,
--   <a>firelensConfiguration_options</a> - The options to use when
--   configuring the log router. This field is optional and can be used to
--   specify a custom configuration file or to add additional metadata,
--   such as the task, task definition, cluster, and container instance
--   details to the log event. If specified, the syntax to use is
--   <tt>"options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}</tt>.
--   For more information, see <a>Creating a Task Definition that Uses a
--   FireLens Configuration</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   Tasks hosted on Fargate only support the <tt>file</tt> configuration
--   file type.
--   
--   <a>$sel:type':FirelensConfiguration'</a>,
--   <a>firelensConfiguration_type</a> - The log router to use. The valid
--   values are <tt>fluentd</tt> or <tt>fluentbit</tt>.
newFirelensConfiguration :: FirelensConfigurationType -> FirelensConfiguration

-- | The options to use when configuring the log router. This field is
--   optional and can be used to specify a custom configuration file or to
--   add additional metadata, such as the task, task definition, cluster,
--   and container instance details to the log event. If specified, the
--   syntax to use is
--   <tt>"options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}</tt>.
--   For more information, see <a>Creating a Task Definition that Uses a
--   FireLens Configuration</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   Tasks hosted on Fargate only support the <tt>file</tt> configuration
--   file type.
firelensConfiguration_options :: Lens' FirelensConfiguration (Maybe (HashMap Text Text))

-- | The log router to use. The valid values are <tt>fluentd</tt> or
--   <tt>fluentbit</tt>.
firelensConfiguration_type :: Lens' FirelensConfiguration FirelensConfigurationType

-- | An object representing a container health check. Health check
--   parameters that are specified in a container definition override any
--   Docker health checks that exist in the container image (such as those
--   specified in a parent image or from the image's Dockerfile).
--   
--   You can view the health status of both individual containers and a
--   task with the DescribeTasks API operation or when viewing the task
--   details in the console.
--   
--   The following describes the possible <tt>healthStatus</tt> values for
--   a container:
--   
--   <ul>
--   <li><tt>HEALTHY</tt>-The container health check has passed
--   successfully.</li>
--   <li><tt>UNHEALTHY</tt>-The container health check has failed.</li>
--   <li><tt>UNKNOWN</tt>-The container health check is being evaluated or
--   there is no container health check defined.</li>
--   </ul>
--   
--   The following describes the possible <tt>healthStatus</tt> values for
--   a task. The container health check status of nonessential containers
--   do not have an effect on the health status of a task.
--   
--   <ul>
--   <li><tt>HEALTHY</tt>-All essential containers within the task have
--   passed their health checks.</li>
--   <li><tt>UNHEALTHY</tt>-One or more essential containers have failed
--   their health check.</li>
--   <li><tt>UNKNOWN</tt>-The essential containers within the task are
--   still having their health checks evaluated or there are no container
--   health checks defined.</li>
--   </ul>
--   
--   If a task is run manually, and not as part of a service, the task will
--   continue its lifecycle regardless of its health status. For tasks that
--   are part of a service, if the task reports as unhealthy then the task
--   will be stopped and the service scheduler will replace it.
--   
--   The following are notes about container health check support:
--   
--   <ul>
--   <li>Container health checks require version 1.17.0 or greater of the
--   Amazon ECS container agent. For more information, see <a>Updating the
--   Amazon ECS Container Agent</a>.</li>
--   <li>Container health checks are supported for Fargate tasks if you are
--   using platform version 1.1.0 or greater. For more information, see
--   <a>Fargate Platform Versions</a>.</li>
--   <li>Container health checks are not supported for tasks that are part
--   of a service that is configured to use a Classic Load Balancer.</li>
--   </ul>
--   
--   <i>See:</i> <a>newHealthCheck</a> smart constructor.
data HealthCheck
HealthCheck' :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> [Text] -> HealthCheck

-- | The optional grace period within which to provide containers time to
--   bootstrap before failed health checks count towards the maximum number
--   of retries. You may specify between 0 and 300 seconds. The
--   <tt>startPeriod</tt> is disabled by default.
--   
--   If a health check succeeds within the <tt>startPeriod</tt>, then the
--   container is considered healthy and any subsequent failures count
--   toward the maximum number of retries.
[$sel:startPeriod:HealthCheck'] :: HealthCheck -> Maybe Int

-- | The number of times to retry a failed health check before the
--   container is considered unhealthy. You may specify between 1 and 10
--   retries. The default value is 3.
[$sel:retries:HealthCheck'] :: HealthCheck -> Maybe Int

-- | The time period in seconds between each health check execution. You
--   may specify between 5 and 300 seconds. The default value is 30
--   seconds.
[$sel:interval:HealthCheck'] :: HealthCheck -> Maybe Int

-- | The time period in seconds to wait for a health check to succeed
--   before it is considered a failure. You may specify between 2 and 60
--   seconds. The default value is 5.
[$sel:timeout:HealthCheck'] :: HealthCheck -> Maybe Int

-- | A string array representing the command that the container runs to
--   determine if it is healthy. The string array must start with
--   <tt>CMD</tt> to execute the command arguments directly, or
--   <tt>CMD-SHELL</tt> to run the command with the container's default
--   shell.
--   
--   When you use the Amazon Web Services Management Console JSON panel,
--   the Command Line Interface, or the APIs, you should enclose the list
--   of commands in brackets, as shown below.
--   
--   <pre>
--   [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
--   </pre>
--   
--   You do not need to include the brackets when you use the Amazon Web
--   Services Management Consoleas shown below.
--   
--   <pre>
--   "CMD-SHELL", "curl -f http://localhost/ || exit 1"
--   </pre>
--   
--   An exit code of 0 indicates success, and non-zero exit code indicates
--   failure. For more information, see <tt>HealthCheck</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
[$sel:command:HealthCheck'] :: HealthCheck -> [Text]

-- | Create a value of <a>HealthCheck</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:startPeriod:HealthCheck'</a>, <a>healthCheck_startPeriod</a> -
--   The optional grace period within which to provide containers time to
--   bootstrap before failed health checks count towards the maximum number
--   of retries. You may specify between 0 and 300 seconds. The
--   <tt>startPeriod</tt> is disabled by default.
--   
--   If a health check succeeds within the <tt>startPeriod</tt>, then the
--   container is considered healthy and any subsequent failures count
--   toward the maximum number of retries.
--   
--   <a>$sel:retries:HealthCheck'</a>, <a>healthCheck_retries</a> - The
--   number of times to retry a failed health check before the container is
--   considered unhealthy. You may specify between 1 and 10 retries. The
--   default value is 3.
--   
--   <a>$sel:interval:HealthCheck'</a>, <a>healthCheck_interval</a> - The
--   time period in seconds between each health check execution. You may
--   specify between 5 and 300 seconds. The default value is 30 seconds.
--   
--   <a>$sel:timeout:HealthCheck'</a>, <a>healthCheck_timeout</a> - The
--   time period in seconds to wait for a health check to succeed before it
--   is considered a failure. You may specify between 2 and 60 seconds. The
--   default value is 5.
--   
--   <a>$sel:command:HealthCheck'</a>, <a>healthCheck_command</a> - A
--   string array representing the command that the container runs to
--   determine if it is healthy. The string array must start with
--   <tt>CMD</tt> to execute the command arguments directly, or
--   <tt>CMD-SHELL</tt> to run the command with the container's default
--   shell.
--   
--   When you use the Amazon Web Services Management Console JSON panel,
--   the Command Line Interface, or the APIs, you should enclose the list
--   of commands in brackets, as shown below.
--   
--   <pre>
--   [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
--   </pre>
--   
--   You do not need to include the brackets when you use the Amazon Web
--   Services Management Consoleas shown below.
--   
--   <pre>
--   "CMD-SHELL", "curl -f http://localhost/ || exit 1"
--   </pre>
--   
--   An exit code of 0 indicates success, and non-zero exit code indicates
--   failure. For more information, see <tt>HealthCheck</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
newHealthCheck :: HealthCheck

-- | The optional grace period within which to provide containers time to
--   bootstrap before failed health checks count towards the maximum number
--   of retries. You may specify between 0 and 300 seconds. The
--   <tt>startPeriod</tt> is disabled by default.
--   
--   If a health check succeeds within the <tt>startPeriod</tt>, then the
--   container is considered healthy and any subsequent failures count
--   toward the maximum number of retries.
healthCheck_startPeriod :: Lens' HealthCheck (Maybe Int)

-- | The number of times to retry a failed health check before the
--   container is considered unhealthy. You may specify between 1 and 10
--   retries. The default value is 3.
healthCheck_retries :: Lens' HealthCheck (Maybe Int)

-- | The time period in seconds between each health check execution. You
--   may specify between 5 and 300 seconds. The default value is 30
--   seconds.
healthCheck_interval :: Lens' HealthCheck (Maybe Int)

-- | The time period in seconds to wait for a health check to succeed
--   before it is considered a failure. You may specify between 2 and 60
--   seconds. The default value is 5.
healthCheck_timeout :: Lens' HealthCheck (Maybe Int)

-- | A string array representing the command that the container runs to
--   determine if it is healthy. The string array must start with
--   <tt>CMD</tt> to execute the command arguments directly, or
--   <tt>CMD-SHELL</tt> to run the command with the container's default
--   shell.
--   
--   When you use the Amazon Web Services Management Console JSON panel,
--   the Command Line Interface, or the APIs, you should enclose the list
--   of commands in brackets, as shown below.
--   
--   <pre>
--   [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
--   </pre>
--   
--   You do not need to include the brackets when you use the Amazon Web
--   Services Management Consoleas shown below.
--   
--   <pre>
--   "CMD-SHELL", "curl -f http://localhost/ || exit 1"
--   </pre>
--   
--   An exit code of 0 indicates success, and non-zero exit code indicates
--   failure. For more information, see <tt>HealthCheck</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
healthCheck_command :: Lens' HealthCheck [Text]

-- | Hostnames and IP address entries that are added to the
--   <tt>/etc/hosts</tt> file of a container via the <tt>extraHosts</tt>
--   parameter of its ContainerDefinition.
--   
--   <i>See:</i> <a>newHostEntry</a> smart constructor.
data HostEntry
HostEntry' :: Text -> Text -> HostEntry

-- | The hostname to use in the <tt>/etc/hosts</tt> entry.
[$sel:hostname:HostEntry'] :: HostEntry -> Text

-- | The IP address to use in the <tt>/etc/hosts</tt> entry.
[$sel:ipAddress:HostEntry'] :: HostEntry -> Text

-- | Create a value of <a>HostEntry</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:hostname:HostEntry'</a>, <a>hostEntry_hostname</a> - The
--   hostname to use in the <tt>/etc/hosts</tt> entry.
--   
--   <a>$sel:ipAddress:HostEntry'</a>, <a>hostEntry_ipAddress</a> - The IP
--   address to use in the <tt>/etc/hosts</tt> entry.
newHostEntry :: Text -> Text -> HostEntry

-- | The hostname to use in the <tt>/etc/hosts</tt> entry.
hostEntry_hostname :: Lens' HostEntry Text

-- | The IP address to use in the <tt>/etc/hosts</tt> entry.
hostEntry_ipAddress :: Lens' HostEntry Text

-- | Details on a container instance bind mount host volume.
--   
--   <i>See:</i> <a>newHostVolumeProperties</a> smart constructor.
data HostVolumeProperties
HostVolumeProperties' :: Maybe Text -> HostVolumeProperties

-- | When the <tt>host</tt> parameter is used, specify a
--   <tt>sourcePath</tt> to declare the path on the host container instance
--   that is presented to the container. If this parameter is empty, then
--   the Docker daemon has assigned a host path for you. If the
--   <tt>host</tt> parameter contains a <tt>sourcePath</tt> file location,
--   then the data volume persists at the specified location on the host
--   container instance until you delete it manually. If the
--   <tt>sourcePath</tt> value does not exist on the host container
--   instance, the Docker daemon creates it. If the location does exist,
--   the contents of the source path folder are exported.
--   
--   If you are using the Fargate launch type, the <tt>sourcePath</tt>
--   parameter is not supported.
[$sel:sourcePath:HostVolumeProperties'] :: HostVolumeProperties -> Maybe Text

-- | Create a value of <a>HostVolumeProperties</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourcePath:HostVolumeProperties'</a>,
--   <a>hostVolumeProperties_sourcePath</a> - When the <tt>host</tt>
--   parameter is used, specify a <tt>sourcePath</tt> to declare the path
--   on the host container instance that is presented to the container. If
--   this parameter is empty, then the Docker daemon has assigned a host
--   path for you. If the <tt>host</tt> parameter contains a
--   <tt>sourcePath</tt> file location, then the data volume persists at
--   the specified location on the host container instance until you delete
--   it manually. If the <tt>sourcePath</tt> value does not exist on the
--   host container instance, the Docker daemon creates it. If the location
--   does exist, the contents of the source path folder are exported.
--   
--   If you are using the Fargate launch type, the <tt>sourcePath</tt>
--   parameter is not supported.
newHostVolumeProperties :: HostVolumeProperties

-- | When the <tt>host</tt> parameter is used, specify a
--   <tt>sourcePath</tt> to declare the path on the host container instance
--   that is presented to the container. If this parameter is empty, then
--   the Docker daemon has assigned a host path for you. If the
--   <tt>host</tt> parameter contains a <tt>sourcePath</tt> file location,
--   then the data volume persists at the specified location on the host
--   container instance until you delete it manually. If the
--   <tt>sourcePath</tt> value does not exist on the host container
--   instance, the Docker daemon creates it. If the location does exist,
--   the contents of the source path folder are exported.
--   
--   If you are using the Fargate launch type, the <tt>sourcePath</tt>
--   parameter is not supported.
hostVolumeProperties_sourcePath :: Lens' HostVolumeProperties (Maybe Text)

-- | Details on a Elastic Inference accelerator. For more information, see
--   <a>Working with Amazon Elastic Inference on Amazon ECS</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newInferenceAccelerator</a> smart constructor.
data InferenceAccelerator
InferenceAccelerator' :: Text -> Text -> InferenceAccelerator

-- | The Elastic Inference accelerator device name. The <tt>deviceName</tt>
--   must also be referenced in a container definition as a
--   ResourceRequirement.
[$sel:deviceName:InferenceAccelerator'] :: InferenceAccelerator -> Text

-- | The Elastic Inference accelerator type to use.
[$sel:deviceType:InferenceAccelerator'] :: InferenceAccelerator -> Text

-- | Create a value of <a>InferenceAccelerator</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deviceName:InferenceAccelerator'</a>,
--   <a>inferenceAccelerator_deviceName</a> - The Elastic Inference
--   accelerator device name. The <tt>deviceName</tt> must also be
--   referenced in a container definition as a ResourceRequirement.
--   
--   <a>$sel:deviceType:InferenceAccelerator'</a>,
--   <a>inferenceAccelerator_deviceType</a> - The Elastic Inference
--   accelerator type to use.
newInferenceAccelerator :: Text -> Text -> InferenceAccelerator

-- | The Elastic Inference accelerator device name. The <tt>deviceName</tt>
--   must also be referenced in a container definition as a
--   ResourceRequirement.
inferenceAccelerator_deviceName :: Lens' InferenceAccelerator Text

-- | The Elastic Inference accelerator type to use.
inferenceAccelerator_deviceType :: Lens' InferenceAccelerator Text

-- | Details on an Elastic Inference accelerator task override. This
--   parameter is used to override the Elastic Inference accelerator
--   specified in the task definition. For more information, see <a>Working
--   with Amazon Elastic Inference on Amazon ECS</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newInferenceAcceleratorOverride</a> smart constructor.
data InferenceAcceleratorOverride
InferenceAcceleratorOverride' :: Maybe Text -> Maybe Text -> InferenceAcceleratorOverride

-- | The Elastic Inference accelerator device name to override for the
--   task. This parameter must match a <tt>deviceName</tt> specified in the
--   task definition.
[$sel:deviceName:InferenceAcceleratorOverride'] :: InferenceAcceleratorOverride -> Maybe Text

-- | The Elastic Inference accelerator type to use.
[$sel:deviceType:InferenceAcceleratorOverride'] :: InferenceAcceleratorOverride -> Maybe Text

-- | Create a value of <a>InferenceAcceleratorOverride</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deviceName:InferenceAcceleratorOverride'</a>,
--   <a>inferenceAcceleratorOverride_deviceName</a> - The Elastic Inference
--   accelerator device name to override for the task. This parameter must
--   match a <tt>deviceName</tt> specified in the task definition.
--   
--   <a>$sel:deviceType:InferenceAcceleratorOverride'</a>,
--   <a>inferenceAcceleratorOverride_deviceType</a> - The Elastic Inference
--   accelerator type to use.
newInferenceAcceleratorOverride :: InferenceAcceleratorOverride

-- | The Elastic Inference accelerator device name to override for the
--   task. This parameter must match a <tt>deviceName</tt> specified in the
--   task definition.
inferenceAcceleratorOverride_deviceName :: Lens' InferenceAcceleratorOverride (Maybe Text)

-- | The Elastic Inference accelerator type to use.
inferenceAcceleratorOverride_deviceType :: Lens' InferenceAcceleratorOverride (Maybe Text)

-- | The Linux capabilities for the container that are added to or dropped
--   from the default configuration provided by Docker. For more
--   information on the default capabilities and the non-default available
--   capabilities, see <a>Runtime privilege and Linux capabilities</a> in
--   the <i>Docker run reference</i>. For more detailed information on
--   these Linux capabilities, see the <a>capabilities(7)</a> Linux manual
--   page.
--   
--   <i>See:</i> <a>newKernelCapabilities</a> smart constructor.
data KernelCapabilities
KernelCapabilities' :: Maybe [Text] -> Maybe [Text] -> KernelCapabilities

-- | The Linux capabilities for the container that have been removed from
--   the default configuration provided by Docker. This parameter maps to
--   <tt>CapDrop</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-drop</tt> option to
--   <a>docker run</a>.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
[$sel:drop:KernelCapabilities'] :: KernelCapabilities -> Maybe [Text]

-- | The Linux capabilities for the container that have been added to the
--   default configuration provided by Docker. This parameter maps to
--   <tt>CapAdd</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-add</tt> option to
--   <a>docker run</a>.
--   
--   Tasks launched on Fargate only support adding the <tt>SYS_PTRACE</tt>
--   kernel capability.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
[$sel:add:KernelCapabilities'] :: KernelCapabilities -> Maybe [Text]

-- | Create a value of <a>KernelCapabilities</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:drop:KernelCapabilities'</a>, <a>kernelCapabilities_drop</a> -
--   The Linux capabilities for the container that have been removed from
--   the default configuration provided by Docker. This parameter maps to
--   <tt>CapDrop</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-drop</tt> option to
--   <a>docker run</a>.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
--   
--   <a>$sel:add:KernelCapabilities'</a>, <a>kernelCapabilities_add</a> -
--   The Linux capabilities for the container that have been added to the
--   default configuration provided by Docker. This parameter maps to
--   <tt>CapAdd</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-add</tt> option to
--   <a>docker run</a>.
--   
--   Tasks launched on Fargate only support adding the <tt>SYS_PTRACE</tt>
--   kernel capability.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
newKernelCapabilities :: KernelCapabilities

-- | The Linux capabilities for the container that have been removed from
--   the default configuration provided by Docker. This parameter maps to
--   <tt>CapDrop</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-drop</tt> option to
--   <a>docker run</a>.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
kernelCapabilities_drop :: Lens' KernelCapabilities (Maybe [Text])

-- | The Linux capabilities for the container that have been added to the
--   default configuration provided by Docker. This parameter maps to
--   <tt>CapAdd</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-add</tt> option to
--   <a>docker run</a>.
--   
--   Tasks launched on Fargate only support adding the <tt>SYS_PTRACE</tt>
--   kernel capability.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
kernelCapabilities_add :: Lens' KernelCapabilities (Maybe [Text])

-- | A key-value pair object.
--   
--   <i>See:</i> <a>newKeyValuePair</a> smart constructor.
data KeyValuePair
KeyValuePair' :: Maybe Text -> Maybe Text -> KeyValuePair

-- | The value of the key-value pair. For environment variables, this is
--   the value of the environment variable.
[$sel:value:KeyValuePair'] :: KeyValuePair -> Maybe Text

-- | The name of the key-value pair. For environment variables, this is the
--   name of the environment variable.
[$sel:name:KeyValuePair'] :: KeyValuePair -> Maybe Text

-- | Create a value of <a>KeyValuePair</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:KeyValuePair'</a>, <a>keyValuePair_value</a> - The value
--   of the key-value pair. For environment variables, this is the value of
--   the environment variable.
--   
--   <a>$sel:name:KeyValuePair'</a>, <a>keyValuePair_name</a> - The name of
--   the key-value pair. For environment variables, this is the name of the
--   environment variable.
newKeyValuePair :: KeyValuePair

-- | The value of the key-value pair. For environment variables, this is
--   the value of the environment variable.
keyValuePair_value :: Lens' KeyValuePair (Maybe Text)

-- | The name of the key-value pair. For environment variables, this is the
--   name of the environment variable.
keyValuePair_name :: Lens' KeyValuePair (Maybe Text)

-- | Linux-specific options that are applied to the container, such as
--   Linux KernelCapabilities.
--   
--   <i>See:</i> <a>newLinuxParameters</a> smart constructor.
data LinuxParameters
LinuxParameters' :: Maybe Int -> Maybe Bool -> Maybe [Tmpfs] -> Maybe Int -> Maybe [Device] -> Maybe KernelCapabilities -> Maybe Int -> LinuxParameters

-- | The value for the size (in MiB) of the <tt>/dev/shm</tt> volume. This
--   parameter maps to the <tt>--shm-size</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>sharedMemorySize</tt> parameter is not supported.
[$sel:sharedMemorySize:LinuxParameters'] :: LinuxParameters -> Maybe Int

-- | Run an <tt>init</tt> process inside the container that forwards
--   signals and reaps processes. This parameter maps to the
--   <tt>--init</tt> option to <a>docker run</a>. This parameter requires
--   version 1.25 of the Docker Remote API or greater on your container
--   instance. To check the Docker Remote API version on your container
--   instance, log in to your container instance and run the following
--   command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
[$sel:initProcessEnabled:LinuxParameters'] :: LinuxParameters -> Maybe Bool

-- | The container path, mount options, and size (in MiB) of the tmpfs
--   mount. This parameter maps to the <tt>--tmpfs</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>tmpfs</tt> parameter is not supported.
[$sel:tmpfs:LinuxParameters'] :: LinuxParameters -> Maybe [Tmpfs]

-- | This allows you to tune a container's memory swappiness behavior. A
--   <tt>swappiness</tt> value of <tt>0</tt> will cause swapping to not
--   happen unless absolutely necessary. A <tt>swappiness</tt> value of
--   <tt>100</tt> will cause pages to be swapped very aggressively.
--   Accepted values are whole numbers between <tt>0</tt> and <tt>100</tt>.
--   If the <tt>swappiness</tt> parameter is not specified, a default value
--   of <tt>60</tt> is used. If a value is not specified for
--   <tt>maxSwap</tt> then this parameter is ignored. This parameter maps
--   to the <tt>--memory-swappiness</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>swappiness</tt> parameter is not supported.
[$sel:swappiness:LinuxParameters'] :: LinuxParameters -> Maybe Int

-- | Any host devices to expose to the container. This parameter maps to
--   <tt>Devices</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--device</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>devices</tt> parameter is not supported.
[$sel:devices:LinuxParameters'] :: LinuxParameters -> Maybe [Device]

-- | The Linux capabilities for the container that are added to or dropped
--   from the default configuration provided by Docker.
--   
--   For tasks that use the Fargate launch type, <tt>capabilities</tt> is
--   supported for all platform versions but the <tt>add</tt> parameter is
--   only supported if using platform version 1.4.0 or later.
[$sel:capabilities:LinuxParameters'] :: LinuxParameters -> Maybe KernelCapabilities

-- | The total amount of swap memory (in MiB) a container can use. This
--   parameter will be translated to the <tt>--memory-swap</tt> option to
--   <a>docker run</a> where the value would be the sum of the container
--   memory plus the <tt>maxSwap</tt> value.
--   
--   If a <tt>maxSwap</tt> value of <tt>0</tt> is specified, the container
--   will not use swap. Accepted values are <tt>0</tt> or any positive
--   integer. If the <tt>maxSwap</tt> parameter is omitted, the container
--   will use the swap configuration for the container instance it is
--   running on. A <tt>maxSwap</tt> value must be set for the
--   <tt>swappiness</tt> parameter to be used.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>maxSwap</tt> parameter is not supported.
[$sel:maxSwap:LinuxParameters'] :: LinuxParameters -> Maybe Int

-- | Create a value of <a>LinuxParameters</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sharedMemorySize:LinuxParameters'</a>,
--   <a>linuxParameters_sharedMemorySize</a> - The value for the size (in
--   MiB) of the <tt>/dev/shm</tt> volume. This parameter maps to the
--   <tt>--shm-size</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>sharedMemorySize</tt> parameter is not supported.
--   
--   <a>$sel:initProcessEnabled:LinuxParameters'</a>,
--   <a>linuxParameters_initProcessEnabled</a> - Run an <tt>init</tt>
--   process inside the container that forwards signals and reaps
--   processes. This parameter maps to the <tt>--init</tt> option to
--   <a>docker run</a>. This parameter requires version 1.25 of the Docker
--   Remote API or greater on your container instance. To check the Docker
--   Remote API version on your container instance, log in to your
--   container instance and run the following command: <tt>sudo docker
--   version --format '{{.Server.APIVersion}}'</tt>
--   
--   <a>$sel:tmpfs:LinuxParameters'</a>, <a>linuxParameters_tmpfs</a> - The
--   container path, mount options, and size (in MiB) of the tmpfs mount.
--   This parameter maps to the <tt>--tmpfs</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>tmpfs</tt> parameter is not supported.
--   
--   <a>$sel:swappiness:LinuxParameters'</a>,
--   <a>linuxParameters_swappiness</a> - This allows you to tune a
--   container's memory swappiness behavior. A <tt>swappiness</tt> value of
--   <tt>0</tt> will cause swapping to not happen unless absolutely
--   necessary. A <tt>swappiness</tt> value of <tt>100</tt> will cause
--   pages to be swapped very aggressively. Accepted values are whole
--   numbers between <tt>0</tt> and <tt>100</tt>. If the
--   <tt>swappiness</tt> parameter is not specified, a default value of
--   <tt>60</tt> is used. If a value is not specified for <tt>maxSwap</tt>
--   then this parameter is ignored. This parameter maps to the
--   <tt>--memory-swappiness</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>swappiness</tt> parameter is not supported.
--   
--   <a>$sel:devices:LinuxParameters'</a>, <a>linuxParameters_devices</a> -
--   Any host devices to expose to the container. This parameter maps to
--   <tt>Devices</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--device</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>devices</tt> parameter is not supported.
--   
--   <a>$sel:capabilities:LinuxParameters'</a>,
--   <a>linuxParameters_capabilities</a> - The Linux capabilities for the
--   container that are added to or dropped from the default configuration
--   provided by Docker.
--   
--   For tasks that use the Fargate launch type, <tt>capabilities</tt> is
--   supported for all platform versions but the <tt>add</tt> parameter is
--   only supported if using platform version 1.4.0 or later.
--   
--   <a>$sel:maxSwap:LinuxParameters'</a>, <a>linuxParameters_maxSwap</a> -
--   The total amount of swap memory (in MiB) a container can use. This
--   parameter will be translated to the <tt>--memory-swap</tt> option to
--   <a>docker run</a> where the value would be the sum of the container
--   memory plus the <tt>maxSwap</tt> value.
--   
--   If a <tt>maxSwap</tt> value of <tt>0</tt> is specified, the container
--   will not use swap. Accepted values are <tt>0</tt> or any positive
--   integer. If the <tt>maxSwap</tt> parameter is omitted, the container
--   will use the swap configuration for the container instance it is
--   running on. A <tt>maxSwap</tt> value must be set for the
--   <tt>swappiness</tt> parameter to be used.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>maxSwap</tt> parameter is not supported.
newLinuxParameters :: LinuxParameters

-- | The value for the size (in MiB) of the <tt>/dev/shm</tt> volume. This
--   parameter maps to the <tt>--shm-size</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>sharedMemorySize</tt> parameter is not supported.
linuxParameters_sharedMemorySize :: Lens' LinuxParameters (Maybe Int)

-- | Run an <tt>init</tt> process inside the container that forwards
--   signals and reaps processes. This parameter maps to the
--   <tt>--init</tt> option to <a>docker run</a>. This parameter requires
--   version 1.25 of the Docker Remote API or greater on your container
--   instance. To check the Docker Remote API version on your container
--   instance, log in to your container instance and run the following
--   command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
linuxParameters_initProcessEnabled :: Lens' LinuxParameters (Maybe Bool)

-- | The container path, mount options, and size (in MiB) of the tmpfs
--   mount. This parameter maps to the <tt>--tmpfs</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>tmpfs</tt> parameter is not supported.
linuxParameters_tmpfs :: Lens' LinuxParameters (Maybe [Tmpfs])

-- | This allows you to tune a container's memory swappiness behavior. A
--   <tt>swappiness</tt> value of <tt>0</tt> will cause swapping to not
--   happen unless absolutely necessary. A <tt>swappiness</tt> value of
--   <tt>100</tt> will cause pages to be swapped very aggressively.
--   Accepted values are whole numbers between <tt>0</tt> and <tt>100</tt>.
--   If the <tt>swappiness</tt> parameter is not specified, a default value
--   of <tt>60</tt> is used. If a value is not specified for
--   <tt>maxSwap</tt> then this parameter is ignored. This parameter maps
--   to the <tt>--memory-swappiness</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>swappiness</tt> parameter is not supported.
linuxParameters_swappiness :: Lens' LinuxParameters (Maybe Int)

-- | Any host devices to expose to the container. This parameter maps to
--   <tt>Devices</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--device</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>devices</tt> parameter is not supported.
linuxParameters_devices :: Lens' LinuxParameters (Maybe [Device])

-- | The Linux capabilities for the container that are added to or dropped
--   from the default configuration provided by Docker.
--   
--   For tasks that use the Fargate launch type, <tt>capabilities</tt> is
--   supported for all platform versions but the <tt>add</tt> parameter is
--   only supported if using platform version 1.4.0 or later.
linuxParameters_capabilities :: Lens' LinuxParameters (Maybe KernelCapabilities)

-- | The total amount of swap memory (in MiB) a container can use. This
--   parameter will be translated to the <tt>--memory-swap</tt> option to
--   <a>docker run</a> where the value would be the sum of the container
--   memory plus the <tt>maxSwap</tt> value.
--   
--   If a <tt>maxSwap</tt> value of <tt>0</tt> is specified, the container
--   will not use swap. Accepted values are <tt>0</tt> or any positive
--   integer. If the <tt>maxSwap</tt> parameter is omitted, the container
--   will use the swap configuration for the container instance it is
--   running on. A <tt>maxSwap</tt> value must be set for the
--   <tt>swappiness</tt> parameter to be used.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>maxSwap</tt> parameter is not supported.
linuxParameters_maxSwap :: Lens' LinuxParameters (Maybe Int)

-- | The load balancer configuration to use with a service or task set.
--   
--   For specific notes and restrictions regarding the use of load
--   balancers with services and task sets, see the CreateService and
--   CreateTaskSet actions.
--   
--   <i>See:</i> <a>newLoadBalancer</a> smart constructor.
data LoadBalancer
LoadBalancer' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> LoadBalancer

-- | The name of the load balancer to associate with the Amazon ECS service
--   or task set.
--   
--   A load balancer name is only specified when using a Classic Load
--   Balancer. If you are using an Application Load Balancer or a Network
--   Load Balancer the load balancer name parameter should be omitted.
[$sel:loadBalancerName:LoadBalancer'] :: LoadBalancer -> Maybe Text

-- | The name of the container (as it appears in a container definition) to
--   associate with the load balancer.
[$sel:containerName:LoadBalancer'] :: LoadBalancer -> Maybe Text

-- | The full Amazon Resource Name (ARN) of the Elastic Load Balancing
--   target group or groups associated with a service or task set.
--   
--   A target group ARN is only specified when using an Application Load
--   Balancer or Network Load Balancer. If you are using a Classic Load
--   Balancer the target group ARN should be omitted.
--   
--   For services using the <tt>ECS</tt> deployment controller, you can
--   specify one or multiple target groups. For more information, see
--   <a>Registering Multiple Target Groups with a Service</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For services using the <tt>CODE_DEPLOY</tt> deployment controller, you
--   are required to define two target groups for the load balancer. For
--   more information, see <a>Blue/Green Deployment with CodeDeploy</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your service's task definition uses the <tt>awsvpc</tt> network
--   mode (which is required for the Fargate launch type), you must choose
--   <tt>ip</tt> as the target type, not <tt>instance</tt>, when creating
--   your target groups because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
[$sel:targetGroupArn:LoadBalancer'] :: LoadBalancer -> Maybe Text

-- | The port on the container to associate with the load balancer. This
--   port must correspond to a <tt>containerPort</tt> in the task
--   definition the tasks in the service are using. For tasks that use the
--   EC2 launch type, the container instance they are launched on must
--   allow ingress traffic on the <tt>hostPort</tt> of the port mapping.
[$sel:containerPort:LoadBalancer'] :: LoadBalancer -> Maybe Int

-- | Create a value of <a>LoadBalancer</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:loadBalancerName:LoadBalancer'</a>,
--   <a>loadBalancer_loadBalancerName</a> - The name of the load balancer
--   to associate with the Amazon ECS service or task set.
--   
--   A load balancer name is only specified when using a Classic Load
--   Balancer. If you are using an Application Load Balancer or a Network
--   Load Balancer the load balancer name parameter should be omitted.
--   
--   <a>$sel:containerName:LoadBalancer'</a>,
--   <a>loadBalancer_containerName</a> - The name of the container (as it
--   appears in a container definition) to associate with the load
--   balancer.
--   
--   <a>$sel:targetGroupArn:LoadBalancer'</a>,
--   <a>loadBalancer_targetGroupArn</a> - The full Amazon Resource Name
--   (ARN) of the Elastic Load Balancing target group or groups associated
--   with a service or task set.
--   
--   A target group ARN is only specified when using an Application Load
--   Balancer or Network Load Balancer. If you are using a Classic Load
--   Balancer the target group ARN should be omitted.
--   
--   For services using the <tt>ECS</tt> deployment controller, you can
--   specify one or multiple target groups. For more information, see
--   <a>Registering Multiple Target Groups with a Service</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For services using the <tt>CODE_DEPLOY</tt> deployment controller, you
--   are required to define two target groups for the load balancer. For
--   more information, see <a>Blue/Green Deployment with CodeDeploy</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your service's task definition uses the <tt>awsvpc</tt> network
--   mode (which is required for the Fargate launch type), you must choose
--   <tt>ip</tt> as the target type, not <tt>instance</tt>, when creating
--   your target groups because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
--   
--   <a>$sel:containerPort:LoadBalancer'</a>,
--   <a>loadBalancer_containerPort</a> - The port on the container to
--   associate with the load balancer. This port must correspond to a
--   <tt>containerPort</tt> in the task definition the tasks in the service
--   are using. For tasks that use the EC2 launch type, the container
--   instance they are launched on must allow ingress traffic on the
--   <tt>hostPort</tt> of the port mapping.
newLoadBalancer :: LoadBalancer

-- | The name of the load balancer to associate with the Amazon ECS service
--   or task set.
--   
--   A load balancer name is only specified when using a Classic Load
--   Balancer. If you are using an Application Load Balancer or a Network
--   Load Balancer the load balancer name parameter should be omitted.
loadBalancer_loadBalancerName :: Lens' LoadBalancer (Maybe Text)

-- | The name of the container (as it appears in a container definition) to
--   associate with the load balancer.
loadBalancer_containerName :: Lens' LoadBalancer (Maybe Text)

-- | The full Amazon Resource Name (ARN) of the Elastic Load Balancing
--   target group or groups associated with a service or task set.
--   
--   A target group ARN is only specified when using an Application Load
--   Balancer or Network Load Balancer. If you are using a Classic Load
--   Balancer the target group ARN should be omitted.
--   
--   For services using the <tt>ECS</tt> deployment controller, you can
--   specify one or multiple target groups. For more information, see
--   <a>Registering Multiple Target Groups with a Service</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For services using the <tt>CODE_DEPLOY</tt> deployment controller, you
--   are required to define two target groups for the load balancer. For
--   more information, see <a>Blue/Green Deployment with CodeDeploy</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your service's task definition uses the <tt>awsvpc</tt> network
--   mode (which is required for the Fargate launch type), you must choose
--   <tt>ip</tt> as the target type, not <tt>instance</tt>, when creating
--   your target groups because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
loadBalancer_targetGroupArn :: Lens' LoadBalancer (Maybe Text)

-- | The port on the container to associate with the load balancer. This
--   port must correspond to a <tt>containerPort</tt> in the task
--   definition the tasks in the service are using. For tasks that use the
--   EC2 launch type, the container instance they are launched on must
--   allow ingress traffic on the <tt>hostPort</tt> of the port mapping.
loadBalancer_containerPort :: Lens' LoadBalancer (Maybe Int)

-- | The log configuration for the container. This parameter maps to
--   <tt>LogConfig</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--log-driver</tt> option to
--   <a>docker run</a> .
--   
--   By default, containers use the same logging driver that the Docker
--   daemon uses; however the container may use a different logging driver
--   than the Docker daemon by specifying a log driver configuration in the
--   container definition. For more information on the options for
--   different supported log drivers, see <a>Configure logging drivers</a>
--   in the Docker documentation.
--   
--   The following should be noted when specifying a log configuration for
--   your containers:
--   
--   <ul>
--   <li>Amazon ECS currently supports a subset of the logging drivers
--   available to the Docker daemon (shown in the valid values below).
--   Additional log drivers may be available in future releases of the
--   Amazon ECS container agent.</li>
--   <li>This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance.</li>
--   <li>For tasks hosted on Amazon EC2 instances, the Amazon ECS container
--   agent must register the available logging drivers with the
--   <tt>ECS_AVAILABLE_LOGGING_DRIVERS</tt> environment variable before
--   containers placed on that instance can use these log configuration
--   options. For more information, see <a>Amazon ECS container agent
--   configuration</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.</li>
--   <li>For tasks on Fargate, because you do not have access to the
--   underlying infrastructure your tasks are hosted on, any additional
--   software needed will have to be installed outside of the task. For
--   example, the Fluentd output aggregators or a remote host running
--   Logstash to send Gelf logs to.</li>
--   </ul>
--   
--   <i>See:</i> <a>newLogConfiguration</a> smart constructor.
data LogConfiguration
LogConfiguration' :: Maybe (HashMap Text Text) -> Maybe [Secret] -> LogDriver -> LogConfiguration

-- | The configuration options to send to the log driver. This parameter
--   requires version 1.19 of the Docker Remote API or greater on your
--   container instance. To check the Docker Remote API version on your
--   container instance, log in to your container instance and run the
--   following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
[$sel:options:LogConfiguration'] :: LogConfiguration -> Maybe (HashMap Text Text)

-- | The secrets to pass to the log configuration. For more information,
--   see <a>Specifying Sensitive Data</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
[$sel:secretOptions:LogConfiguration'] :: LogConfiguration -> Maybe [Secret]

-- | The log driver to use for the container.
--   
--   For tasks on Fargate, the supported log drivers are <tt>awslogs</tt>,
--   <tt>splunk</tt>, and <tt>awsfirelens</tt>.
--   
--   For tasks hosted on Amazon EC2 instances, the supported log drivers
--   are <tt>awslogs</tt>, <tt>fluentd</tt>, <tt>gelf</tt>,
--   <tt>json-file</tt>, <tt>journald</tt>,
--   <tt>logentries</tt>,<tt>syslog</tt>, <tt>splunk</tt>, and
--   <tt>awsfirelens</tt>.
--   
--   For more information about using the <tt>awslogs</tt> log driver, see
--   <a>Using the awslogs log driver</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   For more information about using the <tt>awsfirelens</tt> log driver,
--   see <a>Custom log routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   If you have a custom driver that is not listed, you can fork the
--   Amazon ECS container agent project that is <a>available on GitHub</a>
--   and customize it to work with that driver. We encourage you to submit
--   pull requests for changes that you would like to have included.
--   However, we do not currently provide support for running modified
--   copies of this software.
[$sel:logDriver:LogConfiguration'] :: LogConfiguration -> LogDriver

-- | Create a value of <a>LogConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:options:LogConfiguration'</a>, <a>logConfiguration_options</a>
--   - The configuration options to send to the log driver. This parameter
--   requires version 1.19 of the Docker Remote API or greater on your
--   container instance. To check the Docker Remote API version on your
--   container instance, log in to your container instance and run the
--   following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   <a>$sel:secretOptions:LogConfiguration'</a>,
--   <a>logConfiguration_secretOptions</a> - The secrets to pass to the log
--   configuration. For more information, see <a>Specifying Sensitive
--   Data</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:logDriver:LogConfiguration'</a>,
--   <a>logConfiguration_logDriver</a> - The log driver to use for the
--   container.
--   
--   For tasks on Fargate, the supported log drivers are <tt>awslogs</tt>,
--   <tt>splunk</tt>, and <tt>awsfirelens</tt>.
--   
--   For tasks hosted on Amazon EC2 instances, the supported log drivers
--   are <tt>awslogs</tt>, <tt>fluentd</tt>, <tt>gelf</tt>,
--   <tt>json-file</tt>, <tt>journald</tt>,
--   <tt>logentries</tt>,<tt>syslog</tt>, <tt>splunk</tt>, and
--   <tt>awsfirelens</tt>.
--   
--   For more information about using the <tt>awslogs</tt> log driver, see
--   <a>Using the awslogs log driver</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   For more information about using the <tt>awsfirelens</tt> log driver,
--   see <a>Custom log routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   If you have a custom driver that is not listed, you can fork the
--   Amazon ECS container agent project that is <a>available on GitHub</a>
--   and customize it to work with that driver. We encourage you to submit
--   pull requests for changes that you would like to have included.
--   However, we do not currently provide support for running modified
--   copies of this software.
newLogConfiguration :: LogDriver -> LogConfiguration

-- | The configuration options to send to the log driver. This parameter
--   requires version 1.19 of the Docker Remote API or greater on your
--   container instance. To check the Docker Remote API version on your
--   container instance, log in to your container instance and run the
--   following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
logConfiguration_options :: Lens' LogConfiguration (Maybe (HashMap Text Text))

-- | The secrets to pass to the log configuration. For more information,
--   see <a>Specifying Sensitive Data</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
logConfiguration_secretOptions :: Lens' LogConfiguration (Maybe [Secret])

-- | The log driver to use for the container.
--   
--   For tasks on Fargate, the supported log drivers are <tt>awslogs</tt>,
--   <tt>splunk</tt>, and <tt>awsfirelens</tt>.
--   
--   For tasks hosted on Amazon EC2 instances, the supported log drivers
--   are <tt>awslogs</tt>, <tt>fluentd</tt>, <tt>gelf</tt>,
--   <tt>json-file</tt>, <tt>journald</tt>,
--   <tt>logentries</tt>,<tt>syslog</tt>, <tt>splunk</tt>, and
--   <tt>awsfirelens</tt>.
--   
--   For more information about using the <tt>awslogs</tt> log driver, see
--   <a>Using the awslogs log driver</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   For more information about using the <tt>awsfirelens</tt> log driver,
--   see <a>Custom log routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   If you have a custom driver that is not listed, you can fork the
--   Amazon ECS container agent project that is <a>available on GitHub</a>
--   and customize it to work with that driver. We encourage you to submit
--   pull requests for changes that you would like to have included.
--   However, we do not currently provide support for running modified
--   copies of this software.
logConfiguration_logDriver :: Lens' LogConfiguration LogDriver

-- | Details about the managed agent status for the container.
--   
--   <i>See:</i> <a>newManagedAgent</a> smart constructor.
data ManagedAgent
ManagedAgent' :: Maybe Text -> Maybe Text -> Maybe ManagedAgentName -> Maybe POSIX -> ManagedAgent

-- | The last known status of the managed agent.
[$sel:lastStatus:ManagedAgent'] :: ManagedAgent -> Maybe Text

-- | The reason for why the managed agent is in the state it is in.
[$sel:reason:ManagedAgent'] :: ManagedAgent -> Maybe Text

-- | The name of the managed agent. When the execute command feature is
--   enabled, the managed agent name is <tt>ExecuteCommandAgent</tt>.
[$sel:name:ManagedAgent'] :: ManagedAgent -> Maybe ManagedAgentName

-- | The Unix timestamp for when the managed agent was last started.
[$sel:lastStartedAt:ManagedAgent'] :: ManagedAgent -> Maybe POSIX

-- | Create a value of <a>ManagedAgent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastStatus:ManagedAgent'</a>, <a>managedAgent_lastStatus</a> -
--   The last known status of the managed agent.
--   
--   <a>$sel:reason:ManagedAgent'</a>, <a>managedAgent_reason</a> - The
--   reason for why the managed agent is in the state it is in.
--   
--   <a>$sel:name:ManagedAgent'</a>, <a>managedAgent_name</a> - The name of
--   the managed agent. When the execute command feature is enabled, the
--   managed agent name is <tt>ExecuteCommandAgent</tt>.
--   
--   <a>$sel:lastStartedAt:ManagedAgent'</a>,
--   <a>managedAgent_lastStartedAt</a> - The Unix timestamp for when the
--   managed agent was last started.
newManagedAgent :: ManagedAgent

-- | The last known status of the managed agent.
managedAgent_lastStatus :: Lens' ManagedAgent (Maybe Text)

-- | The reason for why the managed agent is in the state it is in.
managedAgent_reason :: Lens' ManagedAgent (Maybe Text)

-- | The name of the managed agent. When the execute command feature is
--   enabled, the managed agent name is <tt>ExecuteCommandAgent</tt>.
managedAgent_name :: Lens' ManagedAgent (Maybe ManagedAgentName)

-- | The Unix timestamp for when the managed agent was last started.
managedAgent_lastStartedAt :: Lens' ManagedAgent (Maybe UTCTime)

-- | An object representing a change in state for a managed agent.
--   
--   <i>See:</i> <a>newManagedAgentStateChange</a> smart constructor.
data ManagedAgentStateChange
ManagedAgentStateChange' :: Maybe Text -> Text -> ManagedAgentName -> Text -> ManagedAgentStateChange

-- | The reason for the status of the managed agent.
[$sel:reason:ManagedAgentStateChange'] :: ManagedAgentStateChange -> Maybe Text

-- | The name of the container associated with the managed agent.
[$sel:containerName:ManagedAgentStateChange'] :: ManagedAgentStateChange -> Text

-- | The name of the managed agent.
[$sel:managedAgentName:ManagedAgentStateChange'] :: ManagedAgentStateChange -> ManagedAgentName

-- | The status of the managed agent.
[$sel:status:ManagedAgentStateChange'] :: ManagedAgentStateChange -> Text

-- | Create a value of <a>ManagedAgentStateChange</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:reason:ManagedAgentStateChange'</a>,
--   <a>managedAgentStateChange_reason</a> - The reason for the status of
--   the managed agent.
--   
--   <a>$sel:containerName:ManagedAgentStateChange'</a>,
--   <a>managedAgentStateChange_containerName</a> - The name of the
--   container associated with the managed agent.
--   
--   <a>$sel:managedAgentName:ManagedAgentStateChange'</a>,
--   <a>managedAgentStateChange_managedAgentName</a> - The name of the
--   managed agent.
--   
--   <a>$sel:status:ManagedAgentStateChange'</a>,
--   <a>managedAgentStateChange_status</a> - The status of the managed
--   agent.
newManagedAgentStateChange :: Text -> ManagedAgentName -> Text -> ManagedAgentStateChange

-- | The reason for the status of the managed agent.
managedAgentStateChange_reason :: Lens' ManagedAgentStateChange (Maybe Text)

-- | The name of the container associated with the managed agent.
managedAgentStateChange_containerName :: Lens' ManagedAgentStateChange Text

-- | The name of the managed agent.
managedAgentStateChange_managedAgentName :: Lens' ManagedAgentStateChange ManagedAgentName

-- | The status of the managed agent.
managedAgentStateChange_status :: Lens' ManagedAgentStateChange Text

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
--   
--   When managed scaling is enabled, Amazon ECS manages the scale-in and
--   scale-out actions of the Auto Scaling group. Amazon ECS manages a
--   target tracking scaling policy using an Amazon ECS-managed CloudWatch
--   metric with the specified <tt>targetCapacity</tt> value as the target
--   value for the metric. For more information, see <a>Using Managed
--   Scaling</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   If managed scaling is disabled, the user must manage the scaling of
--   the Auto Scaling group.
--   
--   <i>See:</i> <a>newManagedScaling</a> smart constructor.
data ManagedScaling
ManagedScaling' :: Maybe ManagedScalingStatus -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Natural -> ManagedScaling

-- | Whether or not to enable managed scaling for the capacity provider.
[$sel:status:ManagedScaling'] :: ManagedScaling -> Maybe ManagedScalingStatus

-- | The maximum number of container instances that Amazon ECS will scale
--   in or scale out at one time. If this parameter is omitted, the default
--   value of <tt>10000</tt> is used.
[$sel:maximumScalingStepSize:ManagedScaling'] :: ManagedScaling -> Maybe Natural

-- | The target capacity value for the capacity provider. The specified
--   value must be greater than <tt>0</tt> and less than or equal to
--   <tt>100</tt>. A value of <tt>100</tt> will result in the Amazon EC2
--   instances in your Auto Scaling group being completely utilized.
[$sel:targetCapacity:ManagedScaling'] :: ManagedScaling -> Maybe Natural

-- | The minimum number of container instances that Amazon ECS will scale
--   in or scale out at one time. If this parameter is omitted, the default
--   value of <tt>1</tt> is used.
[$sel:minimumScalingStepSize:ManagedScaling'] :: ManagedScaling -> Maybe Natural

-- | The period of time, in seconds, after a newly launched Amazon EC2
--   instance can contribute to CloudWatch metrics for Auto Scaling group.
--   If this parameter is omitted, the default value of <tt>300</tt>
--   seconds is used.
[$sel:instanceWarmupPeriod:ManagedScaling'] :: ManagedScaling -> Maybe Natural

-- | Create a value of <a>ManagedScaling</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ManagedScaling'</a>, <a>managedScaling_status</a> -
--   Whether or not to enable managed scaling for the capacity provider.
--   
--   <a>$sel:maximumScalingStepSize:ManagedScaling'</a>,
--   <a>managedScaling_maximumScalingStepSize</a> - The maximum number of
--   container instances that Amazon ECS will scale in or scale out at one
--   time. If this parameter is omitted, the default value of
--   <tt>10000</tt> is used.
--   
--   <a>$sel:targetCapacity:ManagedScaling'</a>,
--   <a>managedScaling_targetCapacity</a> - The target capacity value for
--   the capacity provider. The specified value must be greater than
--   <tt>0</tt> and less than or equal to <tt>100</tt>. A value of
--   <tt>100</tt> will result in the Amazon EC2 instances in your Auto
--   Scaling group being completely utilized.
--   
--   <a>$sel:minimumScalingStepSize:ManagedScaling'</a>,
--   <a>managedScaling_minimumScalingStepSize</a> - The minimum number of
--   container instances that Amazon ECS will scale in or scale out at one
--   time. If this parameter is omitted, the default value of <tt>1</tt> is
--   used.
--   
--   <a>$sel:instanceWarmupPeriod:ManagedScaling'</a>,
--   <a>managedScaling_instanceWarmupPeriod</a> - The period of time, in
--   seconds, after a newly launched Amazon EC2 instance can contribute to
--   CloudWatch metrics for Auto Scaling group. If this parameter is
--   omitted, the default value of <tt>300</tt> seconds is used.
newManagedScaling :: ManagedScaling

-- | Whether or not to enable managed scaling for the capacity provider.
managedScaling_status :: Lens' ManagedScaling (Maybe ManagedScalingStatus)

-- | The maximum number of container instances that Amazon ECS will scale
--   in or scale out at one time. If this parameter is omitted, the default
--   value of <tt>10000</tt> is used.
managedScaling_maximumScalingStepSize :: Lens' ManagedScaling (Maybe Natural)

-- | The target capacity value for the capacity provider. The specified
--   value must be greater than <tt>0</tt> and less than or equal to
--   <tt>100</tt>. A value of <tt>100</tt> will result in the Amazon EC2
--   instances in your Auto Scaling group being completely utilized.
managedScaling_targetCapacity :: Lens' ManagedScaling (Maybe Natural)

-- | The minimum number of container instances that Amazon ECS will scale
--   in or scale out at one time. If this parameter is omitted, the default
--   value of <tt>1</tt> is used.
managedScaling_minimumScalingStepSize :: Lens' ManagedScaling (Maybe Natural)

-- | The period of time, in seconds, after a newly launched Amazon EC2
--   instance can contribute to CloudWatch metrics for Auto Scaling group.
--   If this parameter is omitted, the default value of <tt>300</tt>
--   seconds is used.
managedScaling_instanceWarmupPeriod :: Lens' ManagedScaling (Maybe Natural)

-- | Details on a volume mount point that is used in a container
--   definition.
--   
--   <i>See:</i> <a>newMountPoint</a> smart constructor.
data MountPoint
MountPoint' :: Maybe Text -> Maybe Text -> Maybe Bool -> MountPoint

-- | The path on the container to mount the host volume at.
[$sel:containerPath:MountPoint'] :: MountPoint -> Maybe Text

-- | The name of the volume to mount. Must be a volume name referenced in
--   the <tt>name</tt> parameter of task definition <tt>volume</tt>.
[$sel:sourceVolume:MountPoint'] :: MountPoint -> Maybe Text

-- | If this value is <tt>true</tt>, the container has read-only access to
--   the volume. If this value is <tt>false</tt>, then the container can
--   write to the volume. The default value is <tt>false</tt>.
[$sel:readOnly:MountPoint'] :: MountPoint -> Maybe Bool

-- | Create a value of <a>MountPoint</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerPath:MountPoint'</a>, <a>mountPoint_containerPath</a>
--   - The path on the container to mount the host volume at.
--   
--   <a>$sel:sourceVolume:MountPoint'</a>, <a>mountPoint_sourceVolume</a> -
--   The name of the volume to mount. Must be a volume name referenced in
--   the <tt>name</tt> parameter of task definition <tt>volume</tt>.
--   
--   <a>$sel:readOnly:MountPoint'</a>, <a>mountPoint_readOnly</a> - If this
--   value is <tt>true</tt>, the container has read-only access to the
--   volume. If this value is <tt>false</tt>, then the container can write
--   to the volume. The default value is <tt>false</tt>.
newMountPoint :: MountPoint

-- | The path on the container to mount the host volume at.
mountPoint_containerPath :: Lens' MountPoint (Maybe Text)

-- | The name of the volume to mount. Must be a volume name referenced in
--   the <tt>name</tt> parameter of task definition <tt>volume</tt>.
mountPoint_sourceVolume :: Lens' MountPoint (Maybe Text)

-- | If this value is <tt>true</tt>, the container has read-only access to
--   the volume. If this value is <tt>false</tt>, then the container can
--   write to the volume. The default value is <tt>false</tt>.
mountPoint_readOnly :: Lens' MountPoint (Maybe Bool)

-- | Details on the network bindings between a container and its host
--   container instance. After a task reaches the <tt>RUNNING</tt> status,
--   manual and automatic host and container port assignments are visible
--   in the <tt>networkBindings</tt> section of DescribeTasks API
--   responses.
--   
--   <i>See:</i> <a>newNetworkBinding</a> smart constructor.
data NetworkBinding
NetworkBinding' :: Maybe Text -> Maybe TransportProtocol -> Maybe Int -> Maybe Int -> NetworkBinding

-- | The IP address that the container is bound to on the container
--   instance.
[$sel:bindIP:NetworkBinding'] :: NetworkBinding -> Maybe Text

-- | The protocol used for the network binding.
[$sel:protocol:NetworkBinding'] :: NetworkBinding -> Maybe TransportProtocol

-- | The port number on the host that is used with the network binding.
[$sel:hostPort:NetworkBinding'] :: NetworkBinding -> Maybe Int

-- | The port number on the container that is used with the network
--   binding.
[$sel:containerPort:NetworkBinding'] :: NetworkBinding -> Maybe Int

-- | Create a value of <a>NetworkBinding</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bindIP:NetworkBinding'</a>, <a>networkBinding_bindIP</a> - The
--   IP address that the container is bound to on the container instance.
--   
--   <a>$sel:protocol:NetworkBinding'</a>, <a>networkBinding_protocol</a> -
--   The protocol used for the network binding.
--   
--   <a>$sel:hostPort:NetworkBinding'</a>, <a>networkBinding_hostPort</a> -
--   The port number on the host that is used with the network binding.
--   
--   <a>$sel:containerPort:NetworkBinding'</a>,
--   <a>networkBinding_containerPort</a> - The port number on the container
--   that is used with the network binding.
newNetworkBinding :: NetworkBinding

-- | The IP address that the container is bound to on the container
--   instance.
networkBinding_bindIP :: Lens' NetworkBinding (Maybe Text)

-- | The protocol used for the network binding.
networkBinding_protocol :: Lens' NetworkBinding (Maybe TransportProtocol)

-- | The port number on the host that is used with the network binding.
networkBinding_hostPort :: Lens' NetworkBinding (Maybe Int)

-- | The port number on the container that is used with the network
--   binding.
networkBinding_containerPort :: Lens' NetworkBinding (Maybe Int)

-- | An object representing the network configuration for a task or
--   service.
--   
--   <i>See:</i> <a>newNetworkConfiguration</a> smart constructor.
data NetworkConfiguration
NetworkConfiguration' :: Maybe AwsVpcConfiguration -> NetworkConfiguration

-- | The VPC subnets and security groups associated with a task.
--   
--   All specified subnets and security groups must be from the same VPC.
[$sel:awsvpcConfiguration:NetworkConfiguration'] :: NetworkConfiguration -> Maybe AwsVpcConfiguration

-- | Create a value of <a>NetworkConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:awsvpcConfiguration:NetworkConfiguration'</a>,
--   <a>networkConfiguration_awsvpcConfiguration</a> - The VPC subnets and
--   security groups associated with a task.
--   
--   All specified subnets and security groups must be from the same VPC.
newNetworkConfiguration :: NetworkConfiguration

-- | The VPC subnets and security groups associated with a task.
--   
--   All specified subnets and security groups must be from the same VPC.
networkConfiguration_awsvpcConfiguration :: Lens' NetworkConfiguration (Maybe AwsVpcConfiguration)

-- | An object representing the elastic network interface for tasks that
--   use the <tt>awsvpc</tt> network mode.
--   
--   <i>See:</i> <a>newNetworkInterface</a> smart constructor.
data NetworkInterface
NetworkInterface' :: Maybe Text -> Maybe Text -> Maybe Text -> NetworkInterface

-- | The private IPv6 address for the network interface.
[$sel:ipv6Address:NetworkInterface'] :: NetworkInterface -> Maybe Text

-- | The private IPv4 address for the network interface.
[$sel:privateIpv4Address:NetworkInterface'] :: NetworkInterface -> Maybe Text

-- | The attachment ID for the network interface.
[$sel:attachmentId:NetworkInterface'] :: NetworkInterface -> Maybe Text

-- | Create a value of <a>NetworkInterface</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ipv6Address:NetworkInterface'</a>,
--   <a>networkInterface_ipv6Address</a> - The private IPv6 address for the
--   network interface.
--   
--   <a>$sel:privateIpv4Address:NetworkInterface'</a>,
--   <a>networkInterface_privateIpv4Address</a> - The private IPv4 address
--   for the network interface.
--   
--   <a>$sel:attachmentId:NetworkInterface'</a>,
--   <a>networkInterface_attachmentId</a> - The attachment ID for the
--   network interface.
newNetworkInterface :: NetworkInterface

-- | The private IPv6 address for the network interface.
networkInterface_ipv6Address :: Lens' NetworkInterface (Maybe Text)

-- | The private IPv4 address for the network interface.
networkInterface_privateIpv4Address :: Lens' NetworkInterface (Maybe Text)

-- | The attachment ID for the network interface.
networkInterface_attachmentId :: Lens' NetworkInterface (Maybe Text)

-- | An object representing a constraint on task placement. For more
--   information, see <a>Task Placement Constraints</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   If you are using the Fargate launch type, task placement constraints
--   are not supported.
--   
--   <i>See:</i> <a>newPlacementConstraint</a> smart constructor.
data PlacementConstraint
PlacementConstraint' :: Maybe Text -> Maybe PlacementConstraintType -> PlacementConstraint

-- | A cluster query language expression to apply to the constraint. The
--   expression can have a maximum length of 2000 characters. You can't
--   specify an expression if the constraint type is
--   <tt>distinctInstance</tt>. For more information, see <a>Cluster query
--   language</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:expression:PlacementConstraint'] :: PlacementConstraint -> Maybe Text

-- | The type of constraint. Use <tt>distinctInstance</tt> to ensure that
--   each task in a particular group is running on a different container
--   instance. Use <tt>memberOf</tt> to restrict the selection to a group
--   of valid candidates.
[$sel:type':PlacementConstraint'] :: PlacementConstraint -> Maybe PlacementConstraintType

-- | Create a value of <a>PlacementConstraint</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expression:PlacementConstraint'</a>,
--   <a>placementConstraint_expression</a> - A cluster query language
--   expression to apply to the constraint. The expression can have a
--   maximum length of 2000 characters. You can't specify an expression if
--   the constraint type is <tt>distinctInstance</tt>. For more
--   information, see <a>Cluster query language</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:type':PlacementConstraint'</a>,
--   <a>placementConstraint_type</a> - The type of constraint. Use
--   <tt>distinctInstance</tt> to ensure that each task in a particular
--   group is running on a different container instance. Use
--   <tt>memberOf</tt> to restrict the selection to a group of valid
--   candidates.
newPlacementConstraint :: PlacementConstraint

-- | A cluster query language expression to apply to the constraint. The
--   expression can have a maximum length of 2000 characters. You can't
--   specify an expression if the constraint type is
--   <tt>distinctInstance</tt>. For more information, see <a>Cluster query
--   language</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
placementConstraint_expression :: Lens' PlacementConstraint (Maybe Text)

-- | The type of constraint. Use <tt>distinctInstance</tt> to ensure that
--   each task in a particular group is running on a different container
--   instance. Use <tt>memberOf</tt> to restrict the selection to a group
--   of valid candidates.
placementConstraint_type :: Lens' PlacementConstraint (Maybe PlacementConstraintType)

-- | The task placement strategy for a task or service. For more
--   information, see <a>Task Placement Strategies</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newPlacementStrategy</a> smart constructor.
data PlacementStrategy
PlacementStrategy' :: Maybe Text -> Maybe PlacementStrategyType -> PlacementStrategy

-- | The field to apply the placement strategy against. For the
--   <tt>spread</tt> placement strategy, valid values are
--   <tt>instanceId</tt> (or <tt>host</tt>, which has the same effect), or
--   any platform or custom attribute that is applied to a container
--   instance, such as <tt>attribute:ecs.availability-zone</tt>. For the
--   <tt>binpack</tt> placement strategy, valid values are <tt>cpu</tt> and
--   <tt>memory</tt>. For the <tt>random</tt> placement strategy, this
--   field is not used.
[$sel:field:PlacementStrategy'] :: PlacementStrategy -> Maybe Text

-- | The type of placement strategy. The <tt>random</tt> placement strategy
--   randomly places tasks on available candidates. The <tt>spread</tt>
--   placement strategy spreads placement across available candidates
--   evenly based on the <tt>field</tt> parameter. The <tt>binpack</tt>
--   strategy places tasks on available candidates that have the least
--   available amount of the resource that is specified with the
--   <tt>field</tt> parameter. For example, if you binpack on memory, a
--   task is placed on the instance with the least amount of remaining
--   memory (but still enough to run the task).
[$sel:type':PlacementStrategy'] :: PlacementStrategy -> Maybe PlacementStrategyType

-- | Create a value of <a>PlacementStrategy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:field:PlacementStrategy'</a>, <a>placementStrategy_field</a> -
--   The field to apply the placement strategy against. For the
--   <tt>spread</tt> placement strategy, valid values are
--   <tt>instanceId</tt> (or <tt>host</tt>, which has the same effect), or
--   any platform or custom attribute that is applied to a container
--   instance, such as <tt>attribute:ecs.availability-zone</tt>. For the
--   <tt>binpack</tt> placement strategy, valid values are <tt>cpu</tt> and
--   <tt>memory</tt>. For the <tt>random</tt> placement strategy, this
--   field is not used.
--   
--   <a>$sel:type':PlacementStrategy'</a>, <a>placementStrategy_type</a> -
--   The type of placement strategy. The <tt>random</tt> placement strategy
--   randomly places tasks on available candidates. The <tt>spread</tt>
--   placement strategy spreads placement across available candidates
--   evenly based on the <tt>field</tt> parameter. The <tt>binpack</tt>
--   strategy places tasks on available candidates that have the least
--   available amount of the resource that is specified with the
--   <tt>field</tt> parameter. For example, if you binpack on memory, a
--   task is placed on the instance with the least amount of remaining
--   memory (but still enough to run the task).
newPlacementStrategy :: PlacementStrategy

-- | The field to apply the placement strategy against. For the
--   <tt>spread</tt> placement strategy, valid values are
--   <tt>instanceId</tt> (or <tt>host</tt>, which has the same effect), or
--   any platform or custom attribute that is applied to a container
--   instance, such as <tt>attribute:ecs.availability-zone</tt>. For the
--   <tt>binpack</tt> placement strategy, valid values are <tt>cpu</tt> and
--   <tt>memory</tt>. For the <tt>random</tt> placement strategy, this
--   field is not used.
placementStrategy_field :: Lens' PlacementStrategy (Maybe Text)

-- | The type of placement strategy. The <tt>random</tt> placement strategy
--   randomly places tasks on available candidates. The <tt>spread</tt>
--   placement strategy spreads placement across available candidates
--   evenly based on the <tt>field</tt> parameter. The <tt>binpack</tt>
--   strategy places tasks on available candidates that have the least
--   available amount of the resource that is specified with the
--   <tt>field</tt> parameter. For example, if you binpack on memory, a
--   task is placed on the instance with the least amount of remaining
--   memory (but still enough to run the task).
placementStrategy_type :: Lens' PlacementStrategy (Maybe PlacementStrategyType)

-- | The devices that are available on the container instance. The only
--   supported device type is a GPU.
--   
--   <i>See:</i> <a>newPlatformDevice</a> smart constructor.
data PlatformDevice
PlatformDevice' :: Text -> PlatformDeviceType -> PlatformDevice

-- | The ID for the GPU(s) on the container instance. The available GPU IDs
--   can also be obtained on the container instance in the
--   <tt>/var/lib/ecs/gpu/nvidia_gpu_info.json</tt> file.
[$sel:id:PlatformDevice'] :: PlatformDevice -> Text

-- | The type of device that is available on the container instance. The
--   only supported value is <tt>GPU</tt>.
[$sel:type':PlatformDevice'] :: PlatformDevice -> PlatformDeviceType

-- | Create a value of <a>PlatformDevice</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:PlatformDevice'</a>, <a>platformDevice_id</a> - The ID for
--   the GPU(s) on the container instance. The available GPU IDs can also
--   be obtained on the container instance in the
--   <tt>/var/lib/ecs/gpu/nvidia_gpu_info.json</tt> file.
--   
--   <a>$sel:type':PlatformDevice'</a>, <a>platformDevice_type</a> - The
--   type of device that is available on the container instance. The only
--   supported value is <tt>GPU</tt>.
newPlatformDevice :: Text -> PlatformDeviceType -> PlatformDevice

-- | The ID for the GPU(s) on the container instance. The available GPU IDs
--   can also be obtained on the container instance in the
--   <tt>/var/lib/ecs/gpu/nvidia_gpu_info.json</tt> file.
platformDevice_id :: Lens' PlatformDevice Text

-- | The type of device that is available on the container instance. The
--   only supported value is <tt>GPU</tt>.
platformDevice_type :: Lens' PlatformDevice PlatformDeviceType

-- | Port mappings allow containers to access ports on the host container
--   instance to send or receive traffic. Port mappings are specified as
--   part of the container definition.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, exposed ports should be specified using
--   <tt>containerPort</tt>. The <tt>hostPort</tt> can be left blank or it
--   must be the same value as the <tt>containerPort</tt>.
--   
--   You cannot expose the same container port for multiple protocols. An
--   error will be returned if this is attempted
--   
--   After a task reaches the <tt>RUNNING</tt> status, manual and automatic
--   host and container port assignments are visible in the
--   <tt>networkBindings</tt> section of DescribeTasks API responses.
--   
--   <i>See:</i> <a>newPortMapping</a> smart constructor.
data PortMapping
PortMapping' :: Maybe TransportProtocol -> Maybe Int -> Maybe Int -> PortMapping

-- | The protocol used for the port mapping. Valid values are <tt>tcp</tt>
--   and <tt>udp</tt>. The default is <tt>tcp</tt>.
[$sel:protocol:PortMapping'] :: PortMapping -> Maybe TransportProtocol

-- | The port number on the container instance to reserve for your
--   container.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, the <tt>hostPort</tt> can either be left
--   blank or set to the same value as the <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode, you can specify a non-reserved host port for your container port
--   mapping, or you can omit the <tt>hostPort</tt> (or set it to
--   <tt>0</tt>) while specifying a <tt>containerPort</tt> and your
--   container automatically receives a port in the ephemeral port range
--   for your container instance operating system and Docker version.
--   
--   The default ephemeral port range for Docker version 1.6.0 and later is
--   listed on the instance under
--   <tt>/proc/sys/net/ipv4/ip_local_port_range</tt>. If this kernel
--   parameter is unavailable, the default ephemeral port range from 49153
--   through 65535 is used. Do not attempt to specify a host port in the
--   ephemeral port range as these are reserved for automatic assignment.
--   In general, ports below 32768 are outside of the ephemeral port range.
--   
--   The default ephemeral port range from 49153 through 65535 is always
--   used for Docker versions before 1.6.0.
--   
--   The default reserved ports are 22 for SSH, the Docker ports 2375 and
--   2376, and the Amazon ECS container agent ports 51678-51680. Any host
--   port that was previously specified in a running task is also reserved
--   while the task is running (after a task stops, the host port is
--   released). The current reserved ports are displayed in the
--   <tt>remainingResources</tt> of DescribeContainerInstances output. A
--   container instance can have up to 100 reserved ports at a time,
--   including the default reserved ports. Automatically assigned ports
--   don't count toward the 100 reserved ports limit.
[$sel:hostPort:PortMapping'] :: PortMapping -> Maybe Int

-- | The port number on the container that is bound to the user-specified
--   or automatically assigned host port.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, exposed ports should be specified using
--   <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode and you specify a container port and not a host port, your
--   container automatically receives a host port in the ephemeral port
--   range. For more information, see <tt>hostPort</tt>. Port mappings that
--   are automatically assigned in this way do not count toward the 100
--   reserved ports limit of a container instance.
[$sel:containerPort:PortMapping'] :: PortMapping -> Maybe Int

-- | Create a value of <a>PortMapping</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocol:PortMapping'</a>, <a>portMapping_protocol</a> - The
--   protocol used for the port mapping. Valid values are <tt>tcp</tt> and
--   <tt>udp</tt>. The default is <tt>tcp</tt>.
--   
--   <a>$sel:hostPort:PortMapping'</a>, <a>portMapping_hostPort</a> - The
--   port number on the container instance to reserve for your container.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, the <tt>hostPort</tt> can either be left
--   blank or set to the same value as the <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode, you can specify a non-reserved host port for your container port
--   mapping, or you can omit the <tt>hostPort</tt> (or set it to
--   <tt>0</tt>) while specifying a <tt>containerPort</tt> and your
--   container automatically receives a port in the ephemeral port range
--   for your container instance operating system and Docker version.
--   
--   The default ephemeral port range for Docker version 1.6.0 and later is
--   listed on the instance under
--   <tt>/proc/sys/net/ipv4/ip_local_port_range</tt>. If this kernel
--   parameter is unavailable, the default ephemeral port range from 49153
--   through 65535 is used. Do not attempt to specify a host port in the
--   ephemeral port range as these are reserved for automatic assignment.
--   In general, ports below 32768 are outside of the ephemeral port range.
--   
--   The default ephemeral port range from 49153 through 65535 is always
--   used for Docker versions before 1.6.0.
--   
--   The default reserved ports are 22 for SSH, the Docker ports 2375 and
--   2376, and the Amazon ECS container agent ports 51678-51680. Any host
--   port that was previously specified in a running task is also reserved
--   while the task is running (after a task stops, the host port is
--   released). The current reserved ports are displayed in the
--   <tt>remainingResources</tt> of DescribeContainerInstances output. A
--   container instance can have up to 100 reserved ports at a time,
--   including the default reserved ports. Automatically assigned ports
--   don't count toward the 100 reserved ports limit.
--   
--   <a>$sel:containerPort:PortMapping'</a>,
--   <a>portMapping_containerPort</a> - The port number on the container
--   that is bound to the user-specified or automatically assigned host
--   port.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, exposed ports should be specified using
--   <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode and you specify a container port and not a host port, your
--   container automatically receives a host port in the ephemeral port
--   range. For more information, see <tt>hostPort</tt>. Port mappings that
--   are automatically assigned in this way do not count toward the 100
--   reserved ports limit of a container instance.
newPortMapping :: PortMapping

-- | The protocol used for the port mapping. Valid values are <tt>tcp</tt>
--   and <tt>udp</tt>. The default is <tt>tcp</tt>.
portMapping_protocol :: Lens' PortMapping (Maybe TransportProtocol)

-- | The port number on the container instance to reserve for your
--   container.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, the <tt>hostPort</tt> can either be left
--   blank or set to the same value as the <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode, you can specify a non-reserved host port for your container port
--   mapping, or you can omit the <tt>hostPort</tt> (or set it to
--   <tt>0</tt>) while specifying a <tt>containerPort</tt> and your
--   container automatically receives a port in the ephemeral port range
--   for your container instance operating system and Docker version.
--   
--   The default ephemeral port range for Docker version 1.6.0 and later is
--   listed on the instance under
--   <tt>/proc/sys/net/ipv4/ip_local_port_range</tt>. If this kernel
--   parameter is unavailable, the default ephemeral port range from 49153
--   through 65535 is used. Do not attempt to specify a host port in the
--   ephemeral port range as these are reserved for automatic assignment.
--   In general, ports below 32768 are outside of the ephemeral port range.
--   
--   The default ephemeral port range from 49153 through 65535 is always
--   used for Docker versions before 1.6.0.
--   
--   The default reserved ports are 22 for SSH, the Docker ports 2375 and
--   2376, and the Amazon ECS container agent ports 51678-51680. Any host
--   port that was previously specified in a running task is also reserved
--   while the task is running (after a task stops, the host port is
--   released). The current reserved ports are displayed in the
--   <tt>remainingResources</tt> of DescribeContainerInstances output. A
--   container instance can have up to 100 reserved ports at a time,
--   including the default reserved ports. Automatically assigned ports
--   don't count toward the 100 reserved ports limit.
portMapping_hostPort :: Lens' PortMapping (Maybe Int)

-- | The port number on the container that is bound to the user-specified
--   or automatically assigned host port.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, exposed ports should be specified using
--   <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode and you specify a container port and not a host port, your
--   container automatically receives a host port in the ephemeral port
--   range. For more information, see <tt>hostPort</tt>. Port mappings that
--   are automatically assigned in this way do not count toward the 100
--   reserved ports limit of a container instance.
portMapping_containerPort :: Lens' PortMapping (Maybe Int)

-- | The configuration details for the App Mesh proxy.
--   
--   For tasks using the EC2 launch type, the container instances require
--   at least version 1.26.0 of the container agent and at least version
--   1.26.0-1 of the <tt>ecs-init</tt> package to enable a proxy
--   configuration. If your container instances are launched from the
--   Amazon ECS-optimized AMI version <tt>20190301</tt> or later, then they
--   contain the required versions of the container agent and
--   <tt>ecs-init</tt>. For more information, see <a>Amazon ECS-optimized
--   Linux AMI</a>
--   
--   <i>See:</i> <a>newProxyConfiguration</a> smart constructor.
data ProxyConfiguration
ProxyConfiguration' :: Maybe ProxyConfigurationType -> Maybe [KeyValuePair] -> Text -> ProxyConfiguration

-- | The proxy type. The only supported value is <tt>APPMESH</tt>.
[$sel:type':ProxyConfiguration'] :: ProxyConfiguration -> Maybe ProxyConfigurationType

-- | The set of network configuration parameters to provide the Container
--   Network Interface (CNI) plugin, specified as key-value pairs.
--   
--   <ul>
--   <li><tt>IgnoredUID</tt> - (Required) The user ID (UID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredGID</tt> is specified, this field can be empty.</li>
--   <li><tt>IgnoredGID</tt> - (Required) The group ID (GID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredUID</tt> is specified, this field can be empty.</li>
--   <li><tt>AppPorts</tt> - (Required) The list of ports that the
--   application uses. Network traffic to these ports is forwarded to the
--   <tt>ProxyIngressPort</tt> and <tt>ProxyEgressPort</tt>.</li>
--   <li><tt>ProxyIngressPort</tt> - (Required) Specifies the port that
--   incoming traffic to the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>ProxyEgressPort</tt> - (Required) Specifies the port that
--   outgoing traffic from the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>EgressIgnoredPorts</tt> - (Required) The egress traffic going
--   to the specified ports is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   <li><tt>EgressIgnoredIPs</tt> - (Required) The egress traffic going to
--   the specified IP addresses is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   </ul>
[$sel:properties:ProxyConfiguration'] :: ProxyConfiguration -> Maybe [KeyValuePair]

-- | The name of the container that will serve as the App Mesh proxy.
[$sel:containerName:ProxyConfiguration'] :: ProxyConfiguration -> Text

-- | Create a value of <a>ProxyConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':ProxyConfiguration'</a>, <a>proxyConfiguration_type</a>
--   - The proxy type. The only supported value is <tt>APPMESH</tt>.
--   
--   <a>$sel:properties:ProxyConfiguration'</a>,
--   <a>proxyConfiguration_properties</a> - The set of network
--   configuration parameters to provide the Container Network Interface
--   (CNI) plugin, specified as key-value pairs.
--   
--   <ul>
--   <li><tt>IgnoredUID</tt> - (Required) The user ID (UID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredGID</tt> is specified, this field can be empty.</li>
--   <li><tt>IgnoredGID</tt> - (Required) The group ID (GID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredUID</tt> is specified, this field can be empty.</li>
--   <li><tt>AppPorts</tt> - (Required) The list of ports that the
--   application uses. Network traffic to these ports is forwarded to the
--   <tt>ProxyIngressPort</tt> and <tt>ProxyEgressPort</tt>.</li>
--   <li><tt>ProxyIngressPort</tt> - (Required) Specifies the port that
--   incoming traffic to the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>ProxyEgressPort</tt> - (Required) Specifies the port that
--   outgoing traffic from the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>EgressIgnoredPorts</tt> - (Required) The egress traffic going
--   to the specified ports is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   <li><tt>EgressIgnoredIPs</tt> - (Required) The egress traffic going to
--   the specified IP addresses is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   </ul>
--   
--   <a>$sel:containerName:ProxyConfiguration'</a>,
--   <a>proxyConfiguration_containerName</a> - The name of the container
--   that will serve as the App Mesh proxy.
newProxyConfiguration :: Text -> ProxyConfiguration

-- | The proxy type. The only supported value is <tt>APPMESH</tt>.
proxyConfiguration_type :: Lens' ProxyConfiguration (Maybe ProxyConfigurationType)

-- | The set of network configuration parameters to provide the Container
--   Network Interface (CNI) plugin, specified as key-value pairs.
--   
--   <ul>
--   <li><tt>IgnoredUID</tt> - (Required) The user ID (UID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredGID</tt> is specified, this field can be empty.</li>
--   <li><tt>IgnoredGID</tt> - (Required) The group ID (GID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredUID</tt> is specified, this field can be empty.</li>
--   <li><tt>AppPorts</tt> - (Required) The list of ports that the
--   application uses. Network traffic to these ports is forwarded to the
--   <tt>ProxyIngressPort</tt> and <tt>ProxyEgressPort</tt>.</li>
--   <li><tt>ProxyIngressPort</tt> - (Required) Specifies the port that
--   incoming traffic to the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>ProxyEgressPort</tt> - (Required) Specifies the port that
--   outgoing traffic from the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>EgressIgnoredPorts</tt> - (Required) The egress traffic going
--   to the specified ports is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   <li><tt>EgressIgnoredIPs</tt> - (Required) The egress traffic going to
--   the specified IP addresses is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   </ul>
proxyConfiguration_properties :: Lens' ProxyConfiguration (Maybe [KeyValuePair])

-- | The name of the container that will serve as the App Mesh proxy.
proxyConfiguration_containerName :: Lens' ProxyConfiguration Text

-- | The repository credentials for private registry authentication.
--   
--   <i>See:</i> <a>newRepositoryCredentials</a> smart constructor.
data RepositoryCredentials
RepositoryCredentials' :: Text -> RepositoryCredentials

-- | The Amazon Resource Name (ARN) of the secret containing the private
--   repository credentials.
--   
--   When you are using the Amazon ECS API, CLI, or Amazon Web Services
--   SDK, if the secret exists in the same Region as the task that you are
--   launching then you can use either the full ARN or the name of the
--   secret. When you are using the Amazon Web Services Management Console,
--   you must specify the full ARN of the secret.
[$sel:credentialsParameter:RepositoryCredentials'] :: RepositoryCredentials -> Text

-- | Create a value of <a>RepositoryCredentials</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:credentialsParameter:RepositoryCredentials'</a>,
--   <a>repositoryCredentials_credentialsParameter</a> - The Amazon
--   Resource Name (ARN) of the secret containing the private repository
--   credentials.
--   
--   When you are using the Amazon ECS API, CLI, or Amazon Web Services
--   SDK, if the secret exists in the same Region as the task that you are
--   launching then you can use either the full ARN or the name of the
--   secret. When you are using the Amazon Web Services Management Console,
--   you must specify the full ARN of the secret.
newRepositoryCredentials :: Text -> RepositoryCredentials

-- | The Amazon Resource Name (ARN) of the secret containing the private
--   repository credentials.
--   
--   When you are using the Amazon ECS API, CLI, or Amazon Web Services
--   SDK, if the secret exists in the same Region as the task that you are
--   launching then you can use either the full ARN or the name of the
--   secret. When you are using the Amazon Web Services Management Console,
--   you must specify the full ARN of the secret.
repositoryCredentials_credentialsParameter :: Lens' RepositoryCredentials Text

-- | Describes the resources available for a container instance.
--   
--   <i>See:</i> <a>newResource</a> smart constructor.
data Resource
Resource' :: Maybe [Text] -> Maybe Int -> Maybe Double -> Maybe Integer -> Maybe Text -> Maybe Text -> Resource

-- | When the <tt>stringSetValue</tt> type is set, the value of the
--   resource must be a string type.
[$sel:stringSetValue:Resource'] :: Resource -> Maybe [Text]

-- | When the <tt>integerValue</tt> type is set, the value of the resource
--   must be an integer.
[$sel:integerValue:Resource'] :: Resource -> Maybe Int

-- | When the <tt>doubleValue</tt> type is set, the value of the resource
--   must be a double precision floating-point type.
[$sel:doubleValue:Resource'] :: Resource -> Maybe Double

-- | When the <tt>longValue</tt> type is set, the value of the resource
--   must be an extended precision floating-point type.
[$sel:longValue:Resource'] :: Resource -> Maybe Integer

-- | The name of the resource, such as <tt>CPU</tt>, <tt>MEMORY</tt>,
--   <tt>PORTS</tt>, <tt>PORTS_UDP</tt>, or a user-defined resource.
[$sel:name:Resource'] :: Resource -> Maybe Text

-- | The type of the resource, such as <tt>INTEGER</tt>, <tt>DOUBLE</tt>,
--   <tt>LONG</tt>, or <tt>STRINGSET</tt>.
[$sel:type':Resource'] :: Resource -> Maybe Text

-- | Create a value of <a>Resource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:stringSetValue:Resource'</a>, <a>resource_stringSetValue</a> -
--   When the <tt>stringSetValue</tt> type is set, the value of the
--   resource must be a string type.
--   
--   <a>$sel:integerValue:Resource'</a>, <a>resource_integerValue</a> -
--   When the <tt>integerValue</tt> type is set, the value of the resource
--   must be an integer.
--   
--   <a>$sel:doubleValue:Resource'</a>, <a>resource_doubleValue</a> - When
--   the <tt>doubleValue</tt> type is set, the value of the resource must
--   be a double precision floating-point type.
--   
--   <a>$sel:longValue:Resource'</a>, <a>resource_longValue</a> - When the
--   <tt>longValue</tt> type is set, the value of the resource must be an
--   extended precision floating-point type.
--   
--   <a>$sel:name:Resource'</a>, <a>resource_name</a> - The name of the
--   resource, such as <tt>CPU</tt>, <tt>MEMORY</tt>, <tt>PORTS</tt>,
--   <tt>PORTS_UDP</tt>, or a user-defined resource.
--   
--   <a>$sel:type':Resource'</a>, <a>resource_type</a> - The type of the
--   resource, such as <tt>INTEGER</tt>, <tt>DOUBLE</tt>, <tt>LONG</tt>, or
--   <tt>STRINGSET</tt>.
newResource :: Resource

-- | When the <tt>stringSetValue</tt> type is set, the value of the
--   resource must be a string type.
resource_stringSetValue :: Lens' Resource (Maybe [Text])

-- | When the <tt>integerValue</tt> type is set, the value of the resource
--   must be an integer.
resource_integerValue :: Lens' Resource (Maybe Int)

-- | When the <tt>doubleValue</tt> type is set, the value of the resource
--   must be a double precision floating-point type.
resource_doubleValue :: Lens' Resource (Maybe Double)

-- | When the <tt>longValue</tt> type is set, the value of the resource
--   must be an extended precision floating-point type.
resource_longValue :: Lens' Resource (Maybe Integer)

-- | The name of the resource, such as <tt>CPU</tt>, <tt>MEMORY</tt>,
--   <tt>PORTS</tt>, <tt>PORTS_UDP</tt>, or a user-defined resource.
resource_name :: Lens' Resource (Maybe Text)

-- | The type of the resource, such as <tt>INTEGER</tt>, <tt>DOUBLE</tt>,
--   <tt>LONG</tt>, or <tt>STRINGSET</tt>.
resource_type :: Lens' Resource (Maybe Text)

-- | The type and amount of a resource to assign to a container. The
--   supported resource types are GPUs and Elastic Inference accelerators.
--   For more information, see <a>Working with GPUs on Amazon ECS</a> or
--   <a>Working with Amazon Elastic Inference on Amazon ECS</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>
--   
--   <i>See:</i> <a>newResourceRequirement</a> smart constructor.
data ResourceRequirement
ResourceRequirement' :: Text -> ResourceType -> ResourceRequirement

-- | The value for the specified resource type.
--   
--   If the <tt>GPU</tt> type is used, the value is the number of physical
--   <tt>GPUs</tt> the Amazon ECS container agent will reserve for the
--   container. The number of GPUs reserved for all containers in a task
--   should not exceed the number of available GPUs on the container
--   instance the task is launched on.
--   
--   If the <tt>InferenceAccelerator</tt> type is used, the <tt>value</tt>
--   should match the <tt>deviceName</tt> for an InferenceAccelerator
--   specified in a task definition.
[$sel:value:ResourceRequirement'] :: ResourceRequirement -> Text

-- | The type of resource to assign to a container. The supported values
--   are <tt>GPU</tt> or <tt>InferenceAccelerator</tt>.
[$sel:type':ResourceRequirement'] :: ResourceRequirement -> ResourceType

-- | Create a value of <a>ResourceRequirement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:ResourceRequirement'</a>,
--   <a>resourceRequirement_value</a> - The value for the specified
--   resource type.
--   
--   If the <tt>GPU</tt> type is used, the value is the number of physical
--   <tt>GPUs</tt> the Amazon ECS container agent will reserve for the
--   container. The number of GPUs reserved for all containers in a task
--   should not exceed the number of available GPUs on the container
--   instance the task is launched on.
--   
--   If the <tt>InferenceAccelerator</tt> type is used, the <tt>value</tt>
--   should match the <tt>deviceName</tt> for an InferenceAccelerator
--   specified in a task definition.
--   
--   <a>$sel:type':ResourceRequirement'</a>,
--   <a>resourceRequirement_type</a> - The type of resource to assign to a
--   container. The supported values are <tt>GPU</tt> or
--   <tt>InferenceAccelerator</tt>.
newResourceRequirement :: Text -> ResourceType -> ResourceRequirement

-- | The value for the specified resource type.
--   
--   If the <tt>GPU</tt> type is used, the value is the number of physical
--   <tt>GPUs</tt> the Amazon ECS container agent will reserve for the
--   container. The number of GPUs reserved for all containers in a task
--   should not exceed the number of available GPUs on the container
--   instance the task is launched on.
--   
--   If the <tt>InferenceAccelerator</tt> type is used, the <tt>value</tt>
--   should match the <tt>deviceName</tt> for an InferenceAccelerator
--   specified in a task definition.
resourceRequirement_value :: Lens' ResourceRequirement Text

-- | The type of resource to assign to a container. The supported values
--   are <tt>GPU</tt> or <tt>InferenceAccelerator</tt>.
resourceRequirement_type :: Lens' ResourceRequirement ResourceType

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
--   
--   <i>See:</i> <a>newScale</a> smart constructor.
data Scale
Scale' :: Maybe Double -> Maybe ScaleUnit -> Scale

-- | The value, specified as a percent total of a service's
--   <tt>desiredCount</tt>, to scale the task set. Accepted values are
--   numbers between 0 and 100.
[$sel:value:Scale'] :: Scale -> Maybe Double

-- | The unit of measure for the scale value.
[$sel:unit:Scale'] :: Scale -> Maybe ScaleUnit

-- | Create a value of <a>Scale</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Scale'</a>, <a>scale_value</a> - The value, specified as
--   a percent total of a service's <tt>desiredCount</tt>, to scale the
--   task set. Accepted values are numbers between 0 and 100.
--   
--   <a>$sel:unit:Scale'</a>, <a>scale_unit</a> - The unit of measure for
--   the scale value.
newScale :: Scale

-- | The value, specified as a percent total of a service's
--   <tt>desiredCount</tt>, to scale the task set. Accepted values are
--   numbers between 0 and 100.
scale_value :: Lens' Scale (Maybe Double)

-- | The unit of measure for the scale value.
scale_unit :: Lens' Scale (Maybe ScaleUnit)

-- | An object representing the secret to expose to your container. Secrets
--   can be exposed to a container in the following ways:
--   
--   <ul>
--   <li>To inject sensitive data into your containers as environment
--   variables, use the <tt>secrets</tt> container definition
--   parameter.</li>
--   <li>To reference sensitive information in the log configuration of a
--   container, use the <tt>secretOptions</tt> container definition
--   parameter.</li>
--   </ul>
--   
--   For more information, see <a>Specifying Sensitive Data</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newSecret</a> smart constructor.
data Secret
Secret' :: Text -> Text -> Secret

-- | The name of the secret.
[$sel:name:Secret'] :: Secret -> Text

-- | The secret to expose to the container. The supported values are either
--   the full ARN of the Secrets Manager secret or the full ARN of the
--   parameter in the SSM Parameter Store.
--   
--   If the SSM Parameter Store parameter exists in the same Region as the
--   task you are launching, then you can use either the full ARN or name
--   of the parameter. If the parameter exists in a different Region, then
--   the full ARN must be specified.
[$sel:valueFrom:Secret'] :: Secret -> Text

-- | Create a value of <a>Secret</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:Secret'</a>, <a>secret_name</a> - The name of the secret.
--   
--   <a>$sel:valueFrom:Secret'</a>, <a>secret_valueFrom</a> - The secret to
--   expose to the container. The supported values are either the full ARN
--   of the Secrets Manager secret or the full ARN of the parameter in the
--   SSM Parameter Store.
--   
--   If the SSM Parameter Store parameter exists in the same Region as the
--   task you are launching, then you can use either the full ARN or name
--   of the parameter. If the parameter exists in a different Region, then
--   the full ARN must be specified.
newSecret :: Text -> Text -> Secret

-- | The name of the secret.
secret_name :: Lens' Secret Text

-- | The secret to expose to the container. The supported values are either
--   the full ARN of the Secrets Manager secret or the full ARN of the
--   parameter in the SSM Parameter Store.
--   
--   If the SSM Parameter Store parameter exists in the same Region as the
--   task you are launching, then you can use either the full ARN or name
--   of the parameter. If the parameter exists in a different Region, then
--   the full ARN must be specified.
secret_valueFrom :: Lens' Secret Text

-- | Details on an event associated with a service.
--   
--   <i>See:</i> <a>newServiceEvent</a> smart constructor.
data ServiceEvent
ServiceEvent' :: Maybe POSIX -> Maybe Text -> Maybe Text -> ServiceEvent

-- | The Unix timestamp for when the event was triggered.
[$sel:createdAt:ServiceEvent'] :: ServiceEvent -> Maybe POSIX

-- | The ID string of the event.
[$sel:id:ServiceEvent'] :: ServiceEvent -> Maybe Text

-- | The event message.
[$sel:message:ServiceEvent'] :: ServiceEvent -> Maybe Text

-- | Create a value of <a>ServiceEvent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:createdAt:ServiceEvent'</a>, <a>serviceEvent_createdAt</a> -
--   The Unix timestamp for when the event was triggered.
--   
--   <a>$sel:id:ServiceEvent'</a>, <a>serviceEvent_id</a> - The ID string
--   of the event.
--   
--   <a>$sel:message:ServiceEvent'</a>, <a>serviceEvent_message</a> - The
--   event message.
newServiceEvent :: ServiceEvent

-- | The Unix timestamp for when the event was triggered.
serviceEvent_createdAt :: Lens' ServiceEvent (Maybe UTCTime)

-- | The ID string of the event.
serviceEvent_id :: Lens' ServiceEvent (Maybe Text)

-- | The event message.
serviceEvent_message :: Lens' ServiceEvent (Maybe Text)

-- | Details of the service registry.
--   
--   <i>See:</i> <a>newServiceRegistry</a> smart constructor.
data ServiceRegistry
ServiceRegistry' :: Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> ServiceRegistry

-- | The Amazon Resource Name (ARN) of the service registry. The currently
--   supported service registry is Cloud Map. For more information, see
--   <a>CreateService</a>.
[$sel:registryArn:ServiceRegistry'] :: ServiceRegistry -> Maybe Text

-- | The container name value, already specified in the task definition, to
--   be used for your service discovery service. If the task definition
--   that your service task specifies uses the <tt>bridge</tt> or
--   <tt>host</tt> network mode, you must specify a <tt>containerName</tt>
--   and <tt>containerPort</tt> combination from the task definition. If
--   the task definition that your service task specifies uses the
--   <tt>awsvpc</tt> network mode and a type SRV DNS record is used, you
--   must specify either a <tt>containerName</tt> and
--   <tt>containerPort</tt> combination or a <tt>port</tt> value, but not
--   both.
[$sel:containerName:ServiceRegistry'] :: ServiceRegistry -> Maybe Text

-- | The port value, already specified in the task definition, to be used
--   for your service discovery service. If the task definition your
--   service task specifies uses the <tt>bridge</tt> or <tt>host</tt>
--   network mode, you must specify a <tt>containerName</tt> and
--   <tt>containerPort</tt> combination from the task definition. If the
--   task definition your service task specifies uses the <tt>awsvpc</tt>
--   network mode and a type SRV DNS record is used, you must specify
--   either a <tt>containerName</tt> and <tt>containerPort</tt> combination
--   or a <tt>port</tt> value, but not both.
[$sel:containerPort:ServiceRegistry'] :: ServiceRegistry -> Maybe Int

-- | The port value used if your service discovery service specified an SRV
--   record. This field may be used if both the <tt>awsvpc</tt> network
--   mode and SRV records are used.
[$sel:port:ServiceRegistry'] :: ServiceRegistry -> Maybe Int

-- | Create a value of <a>ServiceRegistry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryArn:ServiceRegistry'</a>,
--   <a>serviceRegistry_registryArn</a> - The Amazon Resource Name (ARN) of
--   the service registry. The currently supported service registry is
--   Cloud Map. For more information, see <a>CreateService</a>.
--   
--   <a>$sel:containerName:ServiceRegistry'</a>,
--   <a>serviceRegistry_containerName</a> - The container name value,
--   already specified in the task definition, to be used for your service
--   discovery service. If the task definition that your service task
--   specifies uses the <tt>bridge</tt> or <tt>host</tt> network mode, you
--   must specify a <tt>containerName</tt> and <tt>containerPort</tt>
--   combination from the task definition. If the task definition that your
--   service task specifies uses the <tt>awsvpc</tt> network mode and a
--   type SRV DNS record is used, you must specify either a
--   <tt>containerName</tt> and <tt>containerPort</tt> combination or a
--   <tt>port</tt> value, but not both.
--   
--   <a>$sel:containerPort:ServiceRegistry'</a>,
--   <a>serviceRegistry_containerPort</a> - The port value, already
--   specified in the task definition, to be used for your service
--   discovery service. If the task definition your service task specifies
--   uses the <tt>bridge</tt> or <tt>host</tt> network mode, you must
--   specify a <tt>containerName</tt> and <tt>containerPort</tt>
--   combination from the task definition. If the task definition your
--   service task specifies uses the <tt>awsvpc</tt> network mode and a
--   type SRV DNS record is used, you must specify either a
--   <tt>containerName</tt> and <tt>containerPort</tt> combination or a
--   <tt>port</tt> value, but not both.
--   
--   <a>$sel:port:ServiceRegistry'</a>, <a>serviceRegistry_port</a> - The
--   port value used if your service discovery service specified an SRV
--   record. This field may be used if both the <tt>awsvpc</tt> network
--   mode and SRV records are used.
newServiceRegistry :: ServiceRegistry

-- | The Amazon Resource Name (ARN) of the service registry. The currently
--   supported service registry is Cloud Map. For more information, see
--   <a>CreateService</a>.
serviceRegistry_registryArn :: Lens' ServiceRegistry (Maybe Text)

-- | The container name value, already specified in the task definition, to
--   be used for your service discovery service. If the task definition
--   that your service task specifies uses the <tt>bridge</tt> or
--   <tt>host</tt> network mode, you must specify a <tt>containerName</tt>
--   and <tt>containerPort</tt> combination from the task definition. If
--   the task definition that your service task specifies uses the
--   <tt>awsvpc</tt> network mode and a type SRV DNS record is used, you
--   must specify either a <tt>containerName</tt> and
--   <tt>containerPort</tt> combination or a <tt>port</tt> value, but not
--   both.
serviceRegistry_containerName :: Lens' ServiceRegistry (Maybe Text)

-- | The port value, already specified in the task definition, to be used
--   for your service discovery service. If the task definition your
--   service task specifies uses the <tt>bridge</tt> or <tt>host</tt>
--   network mode, you must specify a <tt>containerName</tt> and
--   <tt>containerPort</tt> combination from the task definition. If the
--   task definition your service task specifies uses the <tt>awsvpc</tt>
--   network mode and a type SRV DNS record is used, you must specify
--   either a <tt>containerName</tt> and <tt>containerPort</tt> combination
--   or a <tt>port</tt> value, but not both.
serviceRegistry_containerPort :: Lens' ServiceRegistry (Maybe Int)

-- | The port value used if your service discovery service specified an SRV
--   record. This field may be used if both the <tt>awsvpc</tt> network
--   mode and SRV records are used.
serviceRegistry_port :: Lens' ServiceRegistry (Maybe Int)

-- | The details of the execute command session.
--   
--   <i>See:</i> <a>newSession</a> smart constructor.
data Session
Session' :: Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Session

-- | A URL back to managed agent on the container that the SSM Session
--   Manager client uses to send commands and receive output from the
--   container.
[$sel:streamUrl:Session'] :: Session -> Maybe Text

-- | An encrypted token value containing session and caller information.
--   Used to authenticate the connection to the container.
[$sel:tokenValue:Session'] :: Session -> Maybe (Sensitive Text)

-- | The ID of the execute command session.
[$sel:sessionId:Session'] :: Session -> Maybe Text

-- | Create a value of <a>Session</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamUrl:Session'</a>, <a>session_streamUrl</a> - A URL back
--   to managed agent on the container that the SSM Session Manager client
--   uses to send commands and receive output from the container.
--   
--   <a>$sel:tokenValue:Session'</a>, <a>session_tokenValue</a> - An
--   encrypted token value containing session and caller information. Used
--   to authenticate the connection to the container.
--   
--   <a>$sel:sessionId:Session'</a>, <a>session_sessionId</a> - The ID of
--   the execute command session.
newSession :: Session

-- | A URL back to managed agent on the container that the SSM Session
--   Manager client uses to send commands and receive output from the
--   container.
session_streamUrl :: Lens' Session (Maybe Text)

-- | An encrypted token value containing session and caller information.
--   Used to authenticate the connection to the container.
session_tokenValue :: Lens' Session (Maybe Text)

-- | The ID of the execute command session.
session_sessionId :: Lens' Session (Maybe Text)

-- | The current account setting for a resource.
--   
--   <i>See:</i> <a>newSetting</a> smart constructor.
data Setting
Setting' :: Maybe Text -> Maybe SettingName -> Maybe Text -> Setting

-- | Whether the account setting is enabled or disabled for the specified
--   resource.
[$sel:value:Setting'] :: Setting -> Maybe Text

-- | The Amazon ECS resource name.
[$sel:name:Setting'] :: Setting -> Maybe SettingName

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If this field is omitted, the authenticated user is
--   assumed.
[$sel:principalArn:Setting'] :: Setting -> Maybe Text

-- | Create a value of <a>Setting</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Setting'</a>, <a>setting_value</a> - Whether the account
--   setting is enabled or disabled for the specified resource.
--   
--   <a>$sel:name:Setting'</a>, <a>setting_name</a> - The Amazon ECS
--   resource name.
--   
--   <a>$sel:principalArn:Setting'</a>, <a>setting_principalArn</a> - The
--   ARN of the principal, which can be an IAM user, IAM role, or the root
--   user. If this field is omitted, the authenticated user is assumed.
newSetting :: Setting

-- | Whether the account setting is enabled or disabled for the specified
--   resource.
setting_value :: Lens' Setting (Maybe Text)

-- | The Amazon ECS resource name.
setting_name :: Lens' Setting (Maybe SettingName)

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If this field is omitted, the authenticated user is
--   assumed.
setting_principalArn :: Lens' Setting (Maybe Text)

-- | A list of namespaced kernel parameters to set in the container. This
--   parameter maps to <tt>Sysctls</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--sysctl</tt>
--   option to <a>docker run</a>.
--   
--   It is not recommended that you specify network-related
--   <tt>systemControls</tt> parameters for multiple containers in a single
--   task that also uses either the <tt>awsvpc</tt> or <tt>host</tt>
--   network mode for the following reasons:
--   
--   <ul>
--   <li>For tasks that use the <tt>awsvpc</tt> network mode, if you set
--   <tt>systemControls</tt> for any container, it applies to all
--   containers in the task. If you set different <tt>systemControls</tt>
--   for multiple containers in a single task, the container that is
--   started last determines which <tt>systemControls</tt> take
--   effect.</li>
--   <li>For tasks that use the <tt>host</tt> network mode, the
--   <tt>systemControls</tt> parameter applies to the container instance's
--   kernel parameter as well as that of all containers of any tasks
--   running on that container instance.</li>
--   </ul>
--   
--   <i>See:</i> <a>newSystemControl</a> smart constructor.
data SystemControl
SystemControl' :: Maybe Text -> Maybe Text -> SystemControl

-- | The value for the namespaced kernel parameter specified in
--   <tt>namespace</tt>.
[$sel:value:SystemControl'] :: SystemControl -> Maybe Text

-- | The namespaced kernel parameter for which to set a <tt>value</tt>.
[$sel:namespace:SystemControl'] :: SystemControl -> Maybe Text

-- | Create a value of <a>SystemControl</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:SystemControl'</a>, <a>systemControl_value</a> - The
--   value for the namespaced kernel parameter specified in
--   <tt>namespace</tt>.
--   
--   <a>$sel:namespace:SystemControl'</a>, <a>systemControl_namespace</a> -
--   The namespaced kernel parameter for which to set a <tt>value</tt>.
newSystemControl :: SystemControl

-- | The value for the namespaced kernel parameter specified in
--   <tt>namespace</tt>.
systemControl_value :: Lens' SystemControl (Maybe Text)

-- | The namespaced kernel parameter for which to set a <tt>value</tt>.
systemControl_namespace :: Lens' SystemControl (Maybe Text)

-- | The metadata that you apply to a resource to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
[$sel:value:Tag'] :: Tag -> Maybe Text

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
[$sel:key:Tag'] :: Tag -> Maybe Text

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The optional part of a
--   key-value pair that make up a tag. A <tt>value</tt> acts as a
--   descriptor within a tag category (key).
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - One part of a key-value pair
--   that make up a tag. A <tt>key</tt> is a general label that acts like a
--   category for more specific tag values.
newTag :: Tag

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
tag_value :: Lens' Tag (Maybe Text)

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
tag_key :: Lens' Tag (Maybe Text)

-- | Details on a task in a cluster.
--   
--   <i>See:</i> <a>newTask</a> smart constructor.
data Task
Task' :: Maybe POSIX -> Maybe Text -> Maybe TaskOverride -> Maybe [InferenceAccelerator] -> Maybe Text -> Maybe Text -> Maybe [Attachment] -> Maybe POSIX -> Maybe TaskStopCode -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe EphemeralStorage -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe [Container] -> Maybe POSIX -> Maybe Text -> Maybe [Attribute] -> Maybe Integer -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Connectivity -> Maybe POSIX -> Maybe LaunchType -> Maybe Text -> Maybe HealthStatus -> Maybe POSIX -> Maybe Text -> Maybe Bool -> Maybe POSIX -> Maybe [Tag] -> Task

-- | The Unix timestamp for when the task was stopped (the task
--   transitioned from the <tt>RUNNING</tt> state to the <tt>STOPPED</tt>
--   state).
[$sel:stoppedAt:Task'] :: Task -> Maybe POSIX

-- | The desired status of the task. For more information, see <a>Task
--   Lifecycle</a>.
[$sel:desiredStatus:Task'] :: Task -> Maybe Text

-- | One or more container overrides.
[$sel:overrides:Task'] :: Task -> Maybe TaskOverride

-- | The Elastic Inference accelerator associated with the task.
[$sel:inferenceAccelerators:Task'] :: Task -> Maybe [InferenceAccelerator]

-- | The ARN of the cluster that hosts the task.
[$sel:clusterArn:Task'] :: Task -> Maybe Text

-- | The name of the task group associated with the task.
[$sel:group':Task'] :: Task -> Maybe Text

-- | The Elastic Network Adapter associated with the task if the task uses
--   the <tt>awsvpc</tt> network mode.
[$sel:attachments:Task'] :: Task -> Maybe [Attachment]

-- | The Unix timestamp for when the task was created (the task entered the
--   <tt>PENDING</tt> state).
[$sel:createdAt:Task'] :: Task -> Maybe POSIX

-- | The stop code indicating why a task was stopped. The
--   <tt>stoppedReason</tt> may contain additional details.
[$sel:stopCode:Task'] :: Task -> Maybe TaskStopCode

-- | The platform version on which your task is running. A platform version
--   is only specified for tasks using the Fargate launch type. If one is
--   not specified, the <tt>LATEST</tt> platform version is used by
--   default. For more information, see <a>Fargate Platform Versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:platformVersion:Task'] :: Task -> Maybe Text

-- | The Amazon Resource Name (ARN) of the task.
[$sel:taskArn:Task'] :: Task -> Maybe Text

-- | The ARN of the container instances that host the task.
[$sel:containerInstanceArn:Task'] :: Task -> Maybe Text

-- | The Unix timestamp for when the task execution stopped.
[$sel:executionStoppedAt:Task'] :: Task -> Maybe POSIX

-- | The ephemeral storage settings for the task.
[$sel:ephemeralStorage:Task'] :: Task -> Maybe EphemeralStorage

-- | The last known status of the task. For more information, see <a>Task
--   Lifecycle</a>.
[$sel:lastStatus:Task'] :: Task -> Maybe Text

-- | The amount of memory (in MiB) used by the task as expressed in a task
--   definition. It can be expressed as an integer using MiB, for example
--   <tt>1024</tt>. It can also be expressed as a string using GB, for
--   example <tt>1GB</tt> or <tt>1 GB</tt>. String values are converted to
--   an integer indicating the MiB when the task definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
[$sel:memory:Task'] :: Task -> Maybe Text

-- | The Unix timestamp for when the container image pull completed.
[$sel:pullStoppedAt:Task'] :: Task -> Maybe POSIX

-- | The containers associated with the task.
[$sel:containers:Task'] :: Task -> Maybe [Container]

-- | The Unix timestamp for when the task started (the task transitioned
--   from the <tt>PENDING</tt> state to the <tt>RUNNING</tt> state).
[$sel:startedAt:Task'] :: Task -> Maybe POSIX

-- | The availability zone of the task.
[$sel:availabilityZone:Task'] :: Task -> Maybe Text

-- | The attributes of the task
[$sel:attributes:Task'] :: Task -> Maybe [Attribute]

-- | The version counter for the task. Every time a task experiences a
--   change that triggers a CloudWatch event, the version counter is
--   incremented. If you are replicating your Amazon ECS task state with
--   CloudWatch Events, you can compare the version of a task reported by
--   the Amazon ECS API actions with the version reported in CloudWatch
--   Events for the task (inside the <tt>detail</tt> object) to verify that
--   the version in your event stream is current.
[$sel:version:Task'] :: Task -> Maybe Integer

-- | The capacity provider associated with the task.
[$sel:capacityProviderName:Task'] :: Task -> Maybe Text

-- | The tag specified when a task is started. If the task is started by an
--   Amazon ECS service, then the <tt>startedBy</tt> parameter contains the
--   deployment ID of the service that starts it.
[$sel:startedBy:Task'] :: Task -> Maybe Text

-- | The reason that the task was stopped.
[$sel:stoppedReason:Task'] :: Task -> Maybe Text

-- | The connectivity status of a task.
[$sel:connectivity:Task'] :: Task -> Maybe Connectivity

-- | The Unix timestamp for when the task stops (transitions from the
--   <tt>RUNNING</tt> state to <tt>STOPPED</tt>).
[$sel:stoppingAt:Task'] :: Task -> Maybe POSIX

-- | The infrastructure on which your task is running. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:launchType:Task'] :: Task -> Maybe LaunchType

-- | The ARN of the task definition that creates the task.
[$sel:taskDefinitionArn:Task'] :: Task -> Maybe Text

-- | The health status for the task, which is determined by the health of
--   the essential containers in the task. If all essential containers in
--   the task are reporting as <tt>HEALTHY</tt>, then the task status also
--   reports as <tt>HEALTHY</tt>. If any essential containers in the task
--   are reporting as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>, then the task
--   status also reports as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>,
--   accordingly.
--   
--   The Amazon ECS container agent does not monitor or report on Docker
--   health checks that are embedded in a container image (such as those
--   specified in a parent image or from the image's Dockerfile) and not
--   specified in the container definition. Health check parameters that
--   are specified in a container definition override any Docker health
--   checks that exist in the container image.
[$sel:healthStatus:Task'] :: Task -> Maybe HealthStatus

-- | The Unix timestamp for when the task last went into <tt>CONNECTED</tt>
--   status.
[$sel:connectivityAt:Task'] :: Task -> Maybe POSIX

-- | The number of CPU units used by the task as expressed in a task
--   definition. It can be expressed as an integer using CPU units, for
--   example <tt>1024</tt>. It can also be expressed as a string using
--   vCPUs, for example <tt>1 vCPU</tt> or <tt>1 vcpu</tt>. String values
--   are converted to an integer indicating the CPU units when the task
--   definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
[$sel:cpu:Task'] :: Task -> Maybe Text

-- | Whether or not execute command functionality is enabled for this task.
--   If <tt>true</tt>, this enables execute command functionality on all
--   containers in the task.
[$sel:enableExecuteCommand:Task'] :: Task -> Maybe Bool

-- | The Unix timestamp for when the container image pull began.
[$sel:pullStartedAt:Task'] :: Task -> Maybe POSIX

-- | The metadata that you apply to the task to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:Task'] :: Task -> Maybe [Tag]

-- | Create a value of <a>Task</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:stoppedAt:Task'</a>, <a>task_stoppedAt</a> - The Unix
--   timestamp for when the task was stopped (the task transitioned from
--   the <tt>RUNNING</tt> state to the <tt>STOPPED</tt> state).
--   
--   <a>$sel:desiredStatus:Task'</a>, <a>task_desiredStatus</a> - The
--   desired status of the task. For more information, see <a>Task
--   Lifecycle</a>.
--   
--   <a>$sel:overrides:Task'</a>, <a>task_overrides</a> - One or more
--   container overrides.
--   
--   <a>$sel:inferenceAccelerators:Task'</a>,
--   <a>task_inferenceAccelerators</a> - The Elastic Inference accelerator
--   associated with the task.
--   
--   <a>$sel:clusterArn:Task'</a>, <a>task_clusterArn</a> - The ARN of the
--   cluster that hosts the task.
--   
--   <a>$sel:group':Task'</a>, <a>task_group</a> - The name of the task
--   group associated with the task.
--   
--   <a>$sel:attachments:Task'</a>, <a>task_attachments</a> - The Elastic
--   Network Adapter associated with the task if the task uses the
--   <tt>awsvpc</tt> network mode.
--   
--   <a>$sel:createdAt:Task'</a>, <a>task_createdAt</a> - The Unix
--   timestamp for when the task was created (the task entered the
--   <tt>PENDING</tt> state).
--   
--   <a>$sel:stopCode:Task'</a>, <a>task_stopCode</a> - The stop code
--   indicating why a task was stopped. The <tt>stoppedReason</tt> may
--   contain additional details.
--   
--   <a>$sel:platformVersion:Task'</a>, <a>task_platformVersion</a> - The
--   platform version on which your task is running. A platform version is
--   only specified for tasks using the Fargate launch type. If one is not
--   specified, the <tt>LATEST</tt> platform version is used by default.
--   For more information, see <a>Fargate Platform Versions</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:taskArn:Task'</a>, <a>task_taskArn</a> - The Amazon Resource
--   Name (ARN) of the task.
--   
--   <a>$sel:containerInstanceArn:Task'</a>,
--   <a>task_containerInstanceArn</a> - The ARN of the container instances
--   that host the task.
--   
--   <a>$sel:executionStoppedAt:Task'</a>, <a>task_executionStoppedAt</a> -
--   The Unix timestamp for when the task execution stopped.
--   
--   <a>$sel:ephemeralStorage:Task'</a>, <a>task_ephemeralStorage</a> - The
--   ephemeral storage settings for the task.
--   
--   <a>$sel:lastStatus:Task'</a>, <a>task_lastStatus</a> - The last known
--   status of the task. For more information, see <a>Task Lifecycle</a>.
--   
--   <a>$sel:memory:Task'</a>, <a>task_memory</a> - The amount of memory
--   (in MiB) used by the task as expressed in a task definition. It can be
--   expressed as an integer using MiB, for example <tt>1024</tt>. It can
--   also be expressed as a string using GB, for example <tt>1GB</tt> or
--   <tt>1 GB</tt>. String values are converted to an integer indicating
--   the MiB when the task definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
--   
--   <a>$sel:pullStoppedAt:Task'</a>, <a>task_pullStoppedAt</a> - The Unix
--   timestamp for when the container image pull completed.
--   
--   <a>$sel:containers:Task'</a>, <a>task_containers</a> - The containers
--   associated with the task.
--   
--   <a>$sel:startedAt:Task'</a>, <a>task_startedAt</a> - The Unix
--   timestamp for when the task started (the task transitioned from the
--   <tt>PENDING</tt> state to the <tt>RUNNING</tt> state).
--   
--   <a>$sel:availabilityZone:Task'</a>, <a>task_availabilityZone</a> - The
--   availability zone of the task.
--   
--   <a>$sel:attributes:Task'</a>, <a>task_attributes</a> - The attributes
--   of the task
--   
--   <a>$sel:version:Task'</a>, <a>task_version</a> - The version counter
--   for the task. Every time a task experiences a change that triggers a
--   CloudWatch event, the version counter is incremented. If you are
--   replicating your Amazon ECS task state with CloudWatch Events, you can
--   compare the version of a task reported by the Amazon ECS API actions
--   with the version reported in CloudWatch Events for the task (inside
--   the <tt>detail</tt> object) to verify that the version in your event
--   stream is current.
--   
--   <a>$sel:capacityProviderName:Task'</a>,
--   <a>task_capacityProviderName</a> - The capacity provider associated
--   with the task.
--   
--   <a>$sel:startedBy:Task'</a>, <a>task_startedBy</a> - The tag specified
--   when a task is started. If the task is started by an Amazon ECS
--   service, then the <tt>startedBy</tt> parameter contains the deployment
--   ID of the service that starts it.
--   
--   <a>$sel:stoppedReason:Task'</a>, <a>task_stoppedReason</a> - The
--   reason that the task was stopped.
--   
--   <a>$sel:connectivity:Task'</a>, <a>task_connectivity</a> - The
--   connectivity status of a task.
--   
--   <a>$sel:stoppingAt:Task'</a>, <a>task_stoppingAt</a> - The Unix
--   timestamp for when the task stops (transitions from the
--   <tt>RUNNING</tt> state to <tt>STOPPED</tt>).
--   
--   <a>$sel:launchType:Task'</a>, <a>task_launchType</a> - The
--   infrastructure on which your task is running. For more information,
--   see <a>Amazon ECS launch types</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:taskDefinitionArn:Task'</a>, <a>task_taskDefinitionArn</a> -
--   The ARN of the task definition that creates the task.
--   
--   <a>$sel:healthStatus:Task'</a>, <a>task_healthStatus</a> - The health
--   status for the task, which is determined by the health of the
--   essential containers in the task. If all essential containers in the
--   task are reporting as <tt>HEALTHY</tt>, then the task status also
--   reports as <tt>HEALTHY</tt>. If any essential containers in the task
--   are reporting as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>, then the task
--   status also reports as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>,
--   accordingly.
--   
--   The Amazon ECS container agent does not monitor or report on Docker
--   health checks that are embedded in a container image (such as those
--   specified in a parent image or from the image's Dockerfile) and not
--   specified in the container definition. Health check parameters that
--   are specified in a container definition override any Docker health
--   checks that exist in the container image.
--   
--   <a>$sel:connectivityAt:Task'</a>, <a>task_connectivityAt</a> - The
--   Unix timestamp for when the task last went into <tt>CONNECTED</tt>
--   status.
--   
--   <a>$sel:cpu:Task'</a>, <a>task_cpu</a> - The number of CPU units used
--   by the task as expressed in a task definition. It can be expressed as
--   an integer using CPU units, for example <tt>1024</tt>. It can also be
--   expressed as a string using vCPUs, for example <tt>1 vCPU</tt> or
--   <tt>1 vcpu</tt>. String values are converted to an integer indicating
--   the CPU units when the task definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
--   
--   <a>$sel:enableExecuteCommand:Task'</a>,
--   <a>task_enableExecuteCommand</a> - Whether or not execute command
--   functionality is enabled for this task. If <tt>true</tt>, this enables
--   execute command functionality on all containers in the task.
--   
--   <a>$sel:pullStartedAt:Task'</a>, <a>task_pullStartedAt</a> - The Unix
--   timestamp for when the container image pull began.
--   
--   <a>$sel:tags:Task'</a>, <a>task_tags</a> - The metadata that you apply
--   to the task to help you categorize and organize them. Each tag
--   consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newTask :: Task

-- | The Unix timestamp for when the task was stopped (the task
--   transitioned from the <tt>RUNNING</tt> state to the <tt>STOPPED</tt>
--   state).
task_stoppedAt :: Lens' Task (Maybe UTCTime)

-- | The desired status of the task. For more information, see <a>Task
--   Lifecycle</a>.
task_desiredStatus :: Lens' Task (Maybe Text)

-- | One or more container overrides.
task_overrides :: Lens' Task (Maybe TaskOverride)

-- | The Elastic Inference accelerator associated with the task.
task_inferenceAccelerators :: Lens' Task (Maybe [InferenceAccelerator])

-- | The ARN of the cluster that hosts the task.
task_clusterArn :: Lens' Task (Maybe Text)

-- | The name of the task group associated with the task.
task_group :: Lens' Task (Maybe Text)

-- | The Elastic Network Adapter associated with the task if the task uses
--   the <tt>awsvpc</tt> network mode.
task_attachments :: Lens' Task (Maybe [Attachment])

-- | The Unix timestamp for when the task was created (the task entered the
--   <tt>PENDING</tt> state).
task_createdAt :: Lens' Task (Maybe UTCTime)

-- | The stop code indicating why a task was stopped. The
--   <tt>stoppedReason</tt> may contain additional details.
task_stopCode :: Lens' Task (Maybe TaskStopCode)

-- | The platform version on which your task is running. A platform version
--   is only specified for tasks using the Fargate launch type. If one is
--   not specified, the <tt>LATEST</tt> platform version is used by
--   default. For more information, see <a>Fargate Platform Versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
task_platformVersion :: Lens' Task (Maybe Text)

-- | The Amazon Resource Name (ARN) of the task.
task_taskArn :: Lens' Task (Maybe Text)

-- | The ARN of the container instances that host the task.
task_containerInstanceArn :: Lens' Task (Maybe Text)

-- | The Unix timestamp for when the task execution stopped.
task_executionStoppedAt :: Lens' Task (Maybe UTCTime)

-- | The ephemeral storage settings for the task.
task_ephemeralStorage :: Lens' Task (Maybe EphemeralStorage)

-- | The last known status of the task. For more information, see <a>Task
--   Lifecycle</a>.
task_lastStatus :: Lens' Task (Maybe Text)

-- | The amount of memory (in MiB) used by the task as expressed in a task
--   definition. It can be expressed as an integer using MiB, for example
--   <tt>1024</tt>. It can also be expressed as a string using GB, for
--   example <tt>1GB</tt> or <tt>1 GB</tt>. String values are converted to
--   an integer indicating the MiB when the task definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
task_memory :: Lens' Task (Maybe Text)

-- | The Unix timestamp for when the container image pull completed.
task_pullStoppedAt :: Lens' Task (Maybe UTCTime)

-- | The containers associated with the task.
task_containers :: Lens' Task (Maybe [Container])

-- | The Unix timestamp for when the task started (the task transitioned
--   from the <tt>PENDING</tt> state to the <tt>RUNNING</tt> state).
task_startedAt :: Lens' Task (Maybe UTCTime)

-- | The availability zone of the task.
task_availabilityZone :: Lens' Task (Maybe Text)

-- | The attributes of the task
task_attributes :: Lens' Task (Maybe [Attribute])

-- | The version counter for the task. Every time a task experiences a
--   change that triggers a CloudWatch event, the version counter is
--   incremented. If you are replicating your Amazon ECS task state with
--   CloudWatch Events, you can compare the version of a task reported by
--   the Amazon ECS API actions with the version reported in CloudWatch
--   Events for the task (inside the <tt>detail</tt> object) to verify that
--   the version in your event stream is current.
task_version :: Lens' Task (Maybe Integer)

-- | The capacity provider associated with the task.
task_capacityProviderName :: Lens' Task (Maybe Text)

-- | The tag specified when a task is started. If the task is started by an
--   Amazon ECS service, then the <tt>startedBy</tt> parameter contains the
--   deployment ID of the service that starts it.
task_startedBy :: Lens' Task (Maybe Text)

-- | The reason that the task was stopped.
task_stoppedReason :: Lens' Task (Maybe Text)

-- | The connectivity status of a task.
task_connectivity :: Lens' Task (Maybe Connectivity)

-- | The Unix timestamp for when the task stops (transitions from the
--   <tt>RUNNING</tt> state to <tt>STOPPED</tt>).
task_stoppingAt :: Lens' Task (Maybe UTCTime)

-- | The infrastructure on which your task is running. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
task_launchType :: Lens' Task (Maybe LaunchType)

-- | The ARN of the task definition that creates the task.
task_taskDefinitionArn :: Lens' Task (Maybe Text)

-- | The health status for the task, which is determined by the health of
--   the essential containers in the task. If all essential containers in
--   the task are reporting as <tt>HEALTHY</tt>, then the task status also
--   reports as <tt>HEALTHY</tt>. If any essential containers in the task
--   are reporting as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>, then the task
--   status also reports as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>,
--   accordingly.
--   
--   The Amazon ECS container agent does not monitor or report on Docker
--   health checks that are embedded in a container image (such as those
--   specified in a parent image or from the image's Dockerfile) and not
--   specified in the container definition. Health check parameters that
--   are specified in a container definition override any Docker health
--   checks that exist in the container image.
task_healthStatus :: Lens' Task (Maybe HealthStatus)

-- | The Unix timestamp for when the task last went into <tt>CONNECTED</tt>
--   status.
task_connectivityAt :: Lens' Task (Maybe UTCTime)

-- | The number of CPU units used by the task as expressed in a task
--   definition. It can be expressed as an integer using CPU units, for
--   example <tt>1024</tt>. It can also be expressed as a string using
--   vCPUs, for example <tt>1 vCPU</tt> or <tt>1 vcpu</tt>. String values
--   are converted to an integer indicating the CPU units when the task
--   definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
task_cpu :: Lens' Task (Maybe Text)

-- | Whether or not execute command functionality is enabled for this task.
--   If <tt>true</tt>, this enables execute command functionality on all
--   containers in the task.
task_enableExecuteCommand :: Lens' Task (Maybe Bool)

-- | The Unix timestamp for when the container image pull began.
task_pullStartedAt :: Lens' Task (Maybe UTCTime)

-- | The metadata that you apply to the task to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
task_tags :: Lens' Task (Maybe [Tag])

-- | The details of a task definition which describes the container and
--   volume definitions of an Amazon Elastic Container Service task. You
--   can specify which Docker images to use, the required resources, and
--   other configurations related to launching the task definition through
--   an Amazon ECS service or task.
--   
--   <i>See:</i> <a>newTaskDefinition</a> smart constructor.
data TaskDefinition
TaskDefinition' :: Maybe TaskDefinitionStatus -> Maybe [InferenceAccelerator] -> Maybe Text -> Maybe [Compatibility] -> Maybe EphemeralStorage -> Maybe PidMode -> Maybe Text -> Maybe IpcMode -> Maybe [ContainerDefinition] -> Maybe Text -> Maybe ProxyConfiguration -> Maybe Text -> Maybe POSIX -> Maybe [TaskDefinitionPlacementConstraint] -> Maybe POSIX -> Maybe NetworkMode -> Maybe Text -> Maybe [Compatibility] -> Maybe Text -> Maybe Int -> Maybe [Volume] -> Maybe Text -> Maybe [Attribute] -> TaskDefinition

-- | The status of the task definition.
[$sel:status:TaskDefinition'] :: TaskDefinition -> Maybe TaskDefinitionStatus

-- | The Elastic Inference accelerator associated with the task.
[$sel:inferenceAccelerators:TaskDefinition'] :: TaskDefinition -> Maybe [InferenceAccelerator]

-- | The Amazon Resource Name (ARN) of the task execution role that grants
--   the Amazon ECS container agent permission to make Amazon Web Services
--   API calls on your behalf. The task execution IAM role is required
--   depending on the requirements of your task. For more information, see
--   <a>Amazon ECS task execution IAM role</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
[$sel:executionRoleArn:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The task launch types the task definition was validated against. To
--   determine which task launch types the task definition is validated
--   for, see the TaskDefinition$compatibilities parameter.
[$sel:requiresCompatibilities:TaskDefinition'] :: TaskDefinition -> Maybe [Compatibility]

-- | The ephemeral storage settings to use for tasks run with the task
--   definition.
[$sel:ephemeralStorage:TaskDefinition'] :: TaskDefinition -> Maybe EphemeralStorage

-- | The process namespace to use for the containers in the task. The valid
--   values are <tt>host</tt> or <tt>task</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> PID mode on the same container instance share the same
--   process namespace with the host Amazon EC2 instance. If <tt>task</tt>
--   is specified, all containers within the specified task share the same
--   process namespace. If no value is specified, the default is a private
--   namespace. For more information, see <a>PID settings</a> in the
--   <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
[$sel:pidMode:TaskDefinition'] :: TaskDefinition -> Maybe PidMode

-- | The name of a family that this task definition is registered to. Up to
--   255 letters (uppercase and lowercase), numbers, hyphens, and
--   underscores are allowed.
--   
--   A family groups multiple versions of a task definition. Amazon ECS
--   gives the first task definition that you registered to a family a
--   revision number of 1. Amazon ECS gives sequential revision numbers to
--   each task definition that you add.
[$sel:family:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The IPC resource namespace to use for the containers in the task. The
--   valid values are <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If
--   <tt>host</tt> is specified, then all containers within the tasks that
--   specified the <tt>host</tt> IPC mode on the same container instance
--   share the same IPC resources with the host Amazon EC2 instance. If
--   <tt>task</tt> is specified, all containers within the specified task
--   share the same IPC resources. If <tt>none</tt> is specified, then IPC
--   resources within the containers of a task are private and not shared
--   with other containers in a task or on the container instance. If no
--   value is specified, then the IPC resource namespace sharing depends on
--   the Docker daemon setting on the container instance. For more
--   information, see <a>IPC settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
[$sel:ipcMode:TaskDefinition'] :: TaskDefinition -> Maybe IpcMode

-- | A list of container definitions in JSON format that describe the
--   different containers that make up your task. For more information
--   about container definition parameters and defaults, see <a>Amazon ECS
--   Task Definitions</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
[$sel:containerDefinitions:TaskDefinition'] :: TaskDefinition -> Maybe [ContainerDefinition]

-- | The amount (in MiB) of memory used by the task.
--   
--   If your tasks will be run on Amazon EC2 instances, you must specify
--   either a task-level memory value or a container-level memory value.
--   This field is optional and any value can be used. If a task-level
--   memory value is specified then the container-level memory value is
--   optional. For more information regarding container-level memory and
--   memory reservation, see <a>ContainerDefinition</a>.
--   
--   If your tasks will be run on Fargate, this field is required and you
--   must use one of the following values, which determines your range of
--   valid values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
[$sel:memory:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The configuration details for the App Mesh proxy.
--   
--   Your Amazon ECS container instances require at least version 1.26.0 of
--   the container agent and at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package to enable a proxy configuration. If your
--   container instances are launched from the Amazon ECS-optimized AMI
--   version <tt>20190301</tt> or later, then they contain the required
--   versions of the container agent and <tt>ecs-init</tt>. For more
--   information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:proxyConfiguration:TaskDefinition'] :: TaskDefinition -> Maybe ProxyConfiguration

-- | The short name or full Amazon Resource Name (ARN) of the Identity and
--   Access Management role that grants containers in the task permission
--   to call Amazon Web Services APIs on your behalf. For more information,
--   see <a>Amazon ECS Task Role</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   IAM roles for tasks on Windows require that the
--   <tt>-EnableTaskIAMRole</tt> option is set when you launch the Amazon
--   ECS-optimized Windows AMI. Your containers must also run some
--   configuration code in order to take advantage of the feature. For more
--   information, see <a>Windows IAM roles for tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:taskRoleArn:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The Unix timestamp for when the task definition was deregistered.
[$sel:deregisteredAt:TaskDefinition'] :: TaskDefinition -> Maybe POSIX

-- | An array of placement constraint objects to use for tasks.
--   
--   This parameter is not supported for tasks run on Fargate.
[$sel:placementConstraints:TaskDefinition'] :: TaskDefinition -> Maybe [TaskDefinitionPlacementConstraint]

-- | The Unix timestamp for when the task definition was registered.
[$sel:registeredAt:TaskDefinition'] :: TaskDefinition -> Maybe POSIX

-- | The Docker networking mode to use for the containers in the task. The
--   valid values are <tt>none</tt>, <tt>bridge</tt>, <tt>awsvpc</tt>, and
--   <tt>host</tt>. If no network mode is specified, the default is
--   <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
[$sel:networkMode:TaskDefinition'] :: TaskDefinition -> Maybe NetworkMode

-- | The full Amazon Resource Name (ARN) of the task definition.
[$sel:taskDefinitionArn:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The task launch types the task definition validated against during
--   task definition registration. For more information, see <a>Amazon ECS
--   launch types</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:compatibilities:TaskDefinition'] :: TaskDefinition -> Maybe [Compatibility]

-- | The principal that registered the task definition.
[$sel:registeredBy:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The revision of the task in a particular family. The revision is a
--   version number of a task definition in a family. When you register a
--   task definition for the first time, the revision is <tt>1</tt>. Each
--   time that you register a new revision of a task definition in the same
--   family, the revision value always increases by one, even if you have
--   deregistered previous revisions in this family.
[$sel:revision:TaskDefinition'] :: TaskDefinition -> Maybe Int

-- | The list of data volume definitions for the task. For more
--   information, see <a>Using data volumes in tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>host</tt> and <tt>sourcePath</tt> parameters are not supported
--   for tasks run on Fargate.
[$sel:volumes:TaskDefinition'] :: TaskDefinition -> Maybe [Volume]

-- | The number of <tt>cpu</tt> units used by the task. If you are using
--   the EC2 launch type, this field is optional and any value can be used.
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of valid values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
[$sel:cpu:TaskDefinition'] :: TaskDefinition -> Maybe Text

-- | The container instance attributes required by your task. When an
--   Amazon EC2 instance is registered to your cluster, the Amazon ECS
--   container agent assigns some standard attributes to the instance. You
--   can apply custom attributes, specified as key-value pairs using the
--   Amazon ECS console or the PutAttributes API. These attributes are used
--   when considering task placement for tasks hosted on Amazon EC2
--   instances. For more information, see <a>Attributes</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   This parameter is not supported for tasks run on Fargate.
[$sel:requiresAttributes:TaskDefinition'] :: TaskDefinition -> Maybe [Attribute]

-- | Create a value of <a>TaskDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:TaskDefinition'</a>, <a>taskDefinition_status</a> - The
--   status of the task definition.
--   
--   <a>$sel:inferenceAccelerators:TaskDefinition'</a>,
--   <a>taskDefinition_inferenceAccelerators</a> - The Elastic Inference
--   accelerator associated with the task.
--   
--   <a>$sel:executionRoleArn:TaskDefinition'</a>,
--   <a>taskDefinition_executionRoleArn</a> - The Amazon Resource Name
--   (ARN) of the task execution role that grants the Amazon ECS container
--   agent permission to make Amazon Web Services API calls on your behalf.
--   The task execution IAM role is required depending on the requirements
--   of your task. For more information, see <a>Amazon ECS task execution
--   IAM role</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:requiresCompatibilities:TaskDefinition'</a>,
--   <a>taskDefinition_requiresCompatibilities</a> - The task launch types
--   the task definition was validated against. To determine which task
--   launch types the task definition is validated for, see the
--   TaskDefinition$compatibilities parameter.
--   
--   <a>$sel:ephemeralStorage:TaskDefinition'</a>,
--   <a>taskDefinition_ephemeralStorage</a> - The ephemeral storage
--   settings to use for tasks run with the task definition.
--   
--   <a>$sel:pidMode:TaskDefinition'</a>, <a>taskDefinition_pidMode</a> -
--   The process namespace to use for the containers in the task. The valid
--   values are <tt>host</tt> or <tt>task</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> PID mode on the same container instance share the same
--   process namespace with the host Amazon EC2 instance. If <tt>task</tt>
--   is specified, all containers within the specified task share the same
--   process namespace. If no value is specified, the default is a private
--   namespace. For more information, see <a>PID settings</a> in the
--   <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:family:TaskDefinition'</a>, <a>taskDefinition_family</a> - The
--   name of a family that this task definition is registered to. Up to 255
--   letters (uppercase and lowercase), numbers, hyphens, and underscores
--   are allowed.
--   
--   A family groups multiple versions of a task definition. Amazon ECS
--   gives the first task definition that you registered to a family a
--   revision number of 1. Amazon ECS gives sequential revision numbers to
--   each task definition that you add.
--   
--   <a>$sel:ipcMode:TaskDefinition'</a>, <a>taskDefinition_ipcMode</a> -
--   The IPC resource namespace to use for the containers in the task. The
--   valid values are <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If
--   <tt>host</tt> is specified, then all containers within the tasks that
--   specified the <tt>host</tt> IPC mode on the same container instance
--   share the same IPC resources with the host Amazon EC2 instance. If
--   <tt>task</tt> is specified, all containers within the specified task
--   share the same IPC resources. If <tt>none</tt> is specified, then IPC
--   resources within the containers of a task are private and not shared
--   with other containers in a task or on the container instance. If no
--   value is specified, then the IPC resource namespace sharing depends on
--   the Docker daemon setting on the container instance. For more
--   information, see <a>IPC settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:containerDefinitions:TaskDefinition'</a>,
--   <a>taskDefinition_containerDefinitions</a> - A list of container
--   definitions in JSON format that describe the different containers that
--   make up your task. For more information about container definition
--   parameters and defaults, see <a>Amazon ECS Task Definitions</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:memory:TaskDefinition'</a>, <a>taskDefinition_memory</a> - The
--   amount (in MiB) of memory used by the task.
--   
--   If your tasks will be run on Amazon EC2 instances, you must specify
--   either a task-level memory value or a container-level memory value.
--   This field is optional and any value can be used. If a task-level
--   memory value is specified then the container-level memory value is
--   optional. For more information regarding container-level memory and
--   memory reservation, see <a>ContainerDefinition</a>.
--   
--   If your tasks will be run on Fargate, this field is required and you
--   must use one of the following values, which determines your range of
--   valid values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
--   
--   <a>$sel:proxyConfiguration:TaskDefinition'</a>,
--   <a>taskDefinition_proxyConfiguration</a> - The configuration details
--   for the App Mesh proxy.
--   
--   Your Amazon ECS container instances require at least version 1.26.0 of
--   the container agent and at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package to enable a proxy configuration. If your
--   container instances are launched from the Amazon ECS-optimized AMI
--   version <tt>20190301</tt> or later, then they contain the required
--   versions of the container agent and <tt>ecs-init</tt>. For more
--   information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:taskRoleArn:TaskDefinition'</a>,
--   <a>taskDefinition_taskRoleArn</a> - The short name or full Amazon
--   Resource Name (ARN) of the Identity and Access Management role that
--   grants containers in the task permission to call Amazon Web Services
--   APIs on your behalf. For more information, see <a>Amazon ECS Task
--   Role</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   IAM roles for tasks on Windows require that the
--   <tt>-EnableTaskIAMRole</tt> option is set when you launch the Amazon
--   ECS-optimized Windows AMI. Your containers must also run some
--   configuration code in order to take advantage of the feature. For more
--   information, see <a>Windows IAM roles for tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:deregisteredAt:TaskDefinition'</a>,
--   <a>taskDefinition_deregisteredAt</a> - The Unix timestamp for when the
--   task definition was deregistered.
--   
--   <a>$sel:placementConstraints:TaskDefinition'</a>,
--   <a>taskDefinition_placementConstraints</a> - An array of placement
--   constraint objects to use for tasks.
--   
--   This parameter is not supported for tasks run on Fargate.
--   
--   <a>$sel:registeredAt:TaskDefinition'</a>,
--   <a>taskDefinition_registeredAt</a> - The Unix timestamp for when the
--   task definition was registered.
--   
--   <a>$sel:networkMode:TaskDefinition'</a>,
--   <a>taskDefinition_networkMode</a> - The Docker networking mode to use
--   for the containers in the task. The valid values are <tt>none</tt>,
--   <tt>bridge</tt>, <tt>awsvpc</tt>, and <tt>host</tt>. If no network
--   mode is specified, the default is <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
--   
--   <a>$sel:taskDefinitionArn:TaskDefinition'</a>,
--   <a>taskDefinition_taskDefinitionArn</a> - The full Amazon Resource
--   Name (ARN) of the task definition.
--   
--   <a>$sel:compatibilities:TaskDefinition'</a>,
--   <a>taskDefinition_compatibilities</a> - The task launch types the task
--   definition validated against during task definition registration. For
--   more information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:registeredBy:TaskDefinition'</a>,
--   <a>taskDefinition_registeredBy</a> - The principal that registered the
--   task definition.
--   
--   <a>$sel:revision:TaskDefinition'</a>, <a>taskDefinition_revision</a> -
--   The revision of the task in a particular family. The revision is a
--   version number of a task definition in a family. When you register a
--   task definition for the first time, the revision is <tt>1</tt>. Each
--   time that you register a new revision of a task definition in the same
--   family, the revision value always increases by one, even if you have
--   deregistered previous revisions in this family.
--   
--   <a>$sel:volumes:TaskDefinition'</a>, <a>taskDefinition_volumes</a> -
--   The list of data volume definitions for the task. For more
--   information, see <a>Using data volumes in tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>host</tt> and <tt>sourcePath</tt> parameters are not supported
--   for tasks run on Fargate.
--   
--   <a>$sel:cpu:TaskDefinition'</a>, <a>taskDefinition_cpu</a> - The
--   number of <tt>cpu</tt> units used by the task. If you are using the
--   EC2 launch type, this field is optional and any value can be used. If
--   you are using the Fargate launch type, this field is required and you
--   must use one of the following values, which determines your range of
--   valid values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
--   
--   <a>$sel:requiresAttributes:TaskDefinition'</a>,
--   <a>taskDefinition_requiresAttributes</a> - The container instance
--   attributes required by your task. When an Amazon EC2 instance is
--   registered to your cluster, the Amazon ECS container agent assigns
--   some standard attributes to the instance. You can apply custom
--   attributes, specified as key-value pairs using the Amazon ECS console
--   or the PutAttributes API. These attributes are used when considering
--   task placement for tasks hosted on Amazon EC2 instances. For more
--   information, see <a>Attributes</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   This parameter is not supported for tasks run on Fargate.
newTaskDefinition :: TaskDefinition

-- | The status of the task definition.
taskDefinition_status :: Lens' TaskDefinition (Maybe TaskDefinitionStatus)

-- | The Elastic Inference accelerator associated with the task.
taskDefinition_inferenceAccelerators :: Lens' TaskDefinition (Maybe [InferenceAccelerator])

-- | The Amazon Resource Name (ARN) of the task execution role that grants
--   the Amazon ECS container agent permission to make Amazon Web Services
--   API calls on your behalf. The task execution IAM role is required
--   depending on the requirements of your task. For more information, see
--   <a>Amazon ECS task execution IAM role</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
taskDefinition_executionRoleArn :: Lens' TaskDefinition (Maybe Text)

-- | The task launch types the task definition was validated against. To
--   determine which task launch types the task definition is validated
--   for, see the TaskDefinition$compatibilities parameter.
taskDefinition_requiresCompatibilities :: Lens' TaskDefinition (Maybe [Compatibility])

-- | The ephemeral storage settings to use for tasks run with the task
--   definition.
taskDefinition_ephemeralStorage :: Lens' TaskDefinition (Maybe EphemeralStorage)

-- | The process namespace to use for the containers in the task. The valid
--   values are <tt>host</tt> or <tt>task</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> PID mode on the same container instance share the same
--   process namespace with the host Amazon EC2 instance. If <tt>task</tt>
--   is specified, all containers within the specified task share the same
--   process namespace. If no value is specified, the default is a private
--   namespace. For more information, see <a>PID settings</a> in the
--   <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
taskDefinition_pidMode :: Lens' TaskDefinition (Maybe PidMode)

-- | The name of a family that this task definition is registered to. Up to
--   255 letters (uppercase and lowercase), numbers, hyphens, and
--   underscores are allowed.
--   
--   A family groups multiple versions of a task definition. Amazon ECS
--   gives the first task definition that you registered to a family a
--   revision number of 1. Amazon ECS gives sequential revision numbers to
--   each task definition that you add.
taskDefinition_family :: Lens' TaskDefinition (Maybe Text)

-- | The IPC resource namespace to use for the containers in the task. The
--   valid values are <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If
--   <tt>host</tt> is specified, then all containers within the tasks that
--   specified the <tt>host</tt> IPC mode on the same container instance
--   share the same IPC resources with the host Amazon EC2 instance. If
--   <tt>task</tt> is specified, all containers within the specified task
--   share the same IPC resources. If <tt>none</tt> is specified, then IPC
--   resources within the containers of a task are private and not shared
--   with other containers in a task or on the container instance. If no
--   value is specified, then the IPC resource namespace sharing depends on
--   the Docker daemon setting on the container instance. For more
--   information, see <a>IPC settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
taskDefinition_ipcMode :: Lens' TaskDefinition (Maybe IpcMode)

-- | A list of container definitions in JSON format that describe the
--   different containers that make up your task. For more information
--   about container definition parameters and defaults, see <a>Amazon ECS
--   Task Definitions</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
taskDefinition_containerDefinitions :: Lens' TaskDefinition (Maybe [ContainerDefinition])

-- | The amount (in MiB) of memory used by the task.
--   
--   If your tasks will be run on Amazon EC2 instances, you must specify
--   either a task-level memory value or a container-level memory value.
--   This field is optional and any value can be used. If a task-level
--   memory value is specified then the container-level memory value is
--   optional. For more information regarding container-level memory and
--   memory reservation, see <a>ContainerDefinition</a>.
--   
--   If your tasks will be run on Fargate, this field is required and you
--   must use one of the following values, which determines your range of
--   valid values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
taskDefinition_memory :: Lens' TaskDefinition (Maybe Text)

-- | The configuration details for the App Mesh proxy.
--   
--   Your Amazon ECS container instances require at least version 1.26.0 of
--   the container agent and at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package to enable a proxy configuration. If your
--   container instances are launched from the Amazon ECS-optimized AMI
--   version <tt>20190301</tt> or later, then they contain the required
--   versions of the container agent and <tt>ecs-init</tt>. For more
--   information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
taskDefinition_proxyConfiguration :: Lens' TaskDefinition (Maybe ProxyConfiguration)

-- | The short name or full Amazon Resource Name (ARN) of the Identity and
--   Access Management role that grants containers in the task permission
--   to call Amazon Web Services APIs on your behalf. For more information,
--   see <a>Amazon ECS Task Role</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   IAM roles for tasks on Windows require that the
--   <tt>-EnableTaskIAMRole</tt> option is set when you launch the Amazon
--   ECS-optimized Windows AMI. Your containers must also run some
--   configuration code in order to take advantage of the feature. For more
--   information, see <a>Windows IAM roles for tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
taskDefinition_taskRoleArn :: Lens' TaskDefinition (Maybe Text)

-- | The Unix timestamp for when the task definition was deregistered.
taskDefinition_deregisteredAt :: Lens' TaskDefinition (Maybe UTCTime)

-- | An array of placement constraint objects to use for tasks.
--   
--   This parameter is not supported for tasks run on Fargate.
taskDefinition_placementConstraints :: Lens' TaskDefinition (Maybe [TaskDefinitionPlacementConstraint])

-- | The Unix timestamp for when the task definition was registered.
taskDefinition_registeredAt :: Lens' TaskDefinition (Maybe UTCTime)

-- | The Docker networking mode to use for the containers in the task. The
--   valid values are <tt>none</tt>, <tt>bridge</tt>, <tt>awsvpc</tt>, and
--   <tt>host</tt>. If no network mode is specified, the default is
--   <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
taskDefinition_networkMode :: Lens' TaskDefinition (Maybe NetworkMode)

-- | The full Amazon Resource Name (ARN) of the task definition.
taskDefinition_taskDefinitionArn :: Lens' TaskDefinition (Maybe Text)

-- | The task launch types the task definition validated against during
--   task definition registration. For more information, see <a>Amazon ECS
--   launch types</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
taskDefinition_compatibilities :: Lens' TaskDefinition (Maybe [Compatibility])

-- | The principal that registered the task definition.
taskDefinition_registeredBy :: Lens' TaskDefinition (Maybe Text)

-- | The revision of the task in a particular family. The revision is a
--   version number of a task definition in a family. When you register a
--   task definition for the first time, the revision is <tt>1</tt>. Each
--   time that you register a new revision of a task definition in the same
--   family, the revision value always increases by one, even if you have
--   deregistered previous revisions in this family.
taskDefinition_revision :: Lens' TaskDefinition (Maybe Int)

-- | The list of data volume definitions for the task. For more
--   information, see <a>Using data volumes in tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>host</tt> and <tt>sourcePath</tt> parameters are not supported
--   for tasks run on Fargate.
taskDefinition_volumes :: Lens' TaskDefinition (Maybe [Volume])

-- | The number of <tt>cpu</tt> units used by the task. If you are using
--   the EC2 launch type, this field is optional and any value can be used.
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of valid values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
taskDefinition_cpu :: Lens' TaskDefinition (Maybe Text)

-- | The container instance attributes required by your task. When an
--   Amazon EC2 instance is registered to your cluster, the Amazon ECS
--   container agent assigns some standard attributes to the instance. You
--   can apply custom attributes, specified as key-value pairs using the
--   Amazon ECS console or the PutAttributes API. These attributes are used
--   when considering task placement for tasks hosted on Amazon EC2
--   instances. For more information, see <a>Attributes</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   This parameter is not supported for tasks run on Fargate.
taskDefinition_requiresAttributes :: Lens' TaskDefinition (Maybe [Attribute])

-- | An object representing a constraint on task placement in the task
--   definition. For more information, see <a>Task placement
--   constraints</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   Task placement constraints are not supported for tasks run on Fargate.
--   
--   <i>See:</i> <a>newTaskDefinitionPlacementConstraint</a> smart
--   constructor.
data TaskDefinitionPlacementConstraint
TaskDefinitionPlacementConstraint' :: Maybe Text -> Maybe TaskDefinitionPlacementConstraintType -> TaskDefinitionPlacementConstraint

-- | A cluster query language expression to apply to the constraint. For
--   more information, see <a>Cluster query language</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:expression:TaskDefinitionPlacementConstraint'] :: TaskDefinitionPlacementConstraint -> Maybe Text

-- | The type of constraint. The <tt>MemberOf</tt> constraint restricts
--   selection to be from a group of valid candidates.
[$sel:type':TaskDefinitionPlacementConstraint'] :: TaskDefinitionPlacementConstraint -> Maybe TaskDefinitionPlacementConstraintType

-- | Create a value of <a>TaskDefinitionPlacementConstraint</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expression:TaskDefinitionPlacementConstraint'</a>,
--   <a>taskDefinitionPlacementConstraint_expression</a> - A cluster query
--   language expression to apply to the constraint. For more information,
--   see <a>Cluster query language</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:type':TaskDefinitionPlacementConstraint'</a>,
--   <a>taskDefinitionPlacementConstraint_type</a> - The type of
--   constraint. The <tt>MemberOf</tt> constraint restricts selection to be
--   from a group of valid candidates.
newTaskDefinitionPlacementConstraint :: TaskDefinitionPlacementConstraint

-- | A cluster query language expression to apply to the constraint. For
--   more information, see <a>Cluster query language</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
taskDefinitionPlacementConstraint_expression :: Lens' TaskDefinitionPlacementConstraint (Maybe Text)

-- | The type of constraint. The <tt>MemberOf</tt> constraint restricts
--   selection to be from a group of valid candidates.
taskDefinitionPlacementConstraint_type :: Lens' TaskDefinitionPlacementConstraint (Maybe TaskDefinitionPlacementConstraintType)

-- | The overrides associated with a task.
--   
--   <i>See:</i> <a>newTaskOverride</a> smart constructor.
data TaskOverride
TaskOverride' :: Maybe [ContainerOverride] -> Maybe Text -> Maybe EphemeralStorage -> Maybe Text -> Maybe Text -> Maybe [InferenceAcceleratorOverride] -> Maybe Text -> TaskOverride

-- | One or more container overrides sent to a task.
[$sel:containerOverrides:TaskOverride'] :: TaskOverride -> Maybe [ContainerOverride]

-- | The Amazon Resource Name (ARN) of the task execution IAM role override
--   for the task. For more information, see <a>Amazon ECS task execution
--   IAM role</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:executionRoleArn:TaskOverride'] :: TaskOverride -> Maybe Text

-- | The ephemeral storage setting override for the task.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
[$sel:ephemeralStorage:TaskOverride'] :: TaskOverride -> Maybe EphemeralStorage

-- | The memory override for the task.
[$sel:memory:TaskOverride'] :: TaskOverride -> Maybe Text

-- | The Amazon Resource Name (ARN) of the IAM role that containers in this
--   task can assume. All containers in this task are granted the
--   permissions that are specified in this role. For more information, see
--   <a>IAM Role for Tasks</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
[$sel:taskRoleArn:TaskOverride'] :: TaskOverride -> Maybe Text

-- | The Elastic Inference accelerator override for the task.
[$sel:inferenceAcceleratorOverrides:TaskOverride'] :: TaskOverride -> Maybe [InferenceAcceleratorOverride]

-- | The cpu override for the task.
[$sel:cpu:TaskOverride'] :: TaskOverride -> Maybe Text

-- | Create a value of <a>TaskOverride</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerOverrides:TaskOverride'</a>,
--   <a>taskOverride_containerOverrides</a> - One or more container
--   overrides sent to a task.
--   
--   <a>$sel:executionRoleArn:TaskOverride'</a>,
--   <a>taskOverride_executionRoleArn</a> - The Amazon Resource Name (ARN)
--   of the task execution IAM role override for the task. For more
--   information, see <a>Amazon ECS task execution IAM role</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:ephemeralStorage:TaskOverride'</a>,
--   <a>taskOverride_ephemeralStorage</a> - The ephemeral storage setting
--   override for the task.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
--   
--   <a>$sel:memory:TaskOverride'</a>, <a>taskOverride_memory</a> - The
--   memory override for the task.
--   
--   <a>$sel:taskRoleArn:TaskOverride'</a>, <a>taskOverride_taskRoleArn</a>
--   - The Amazon Resource Name (ARN) of the IAM role that containers in
--   this task can assume. All containers in this task are granted the
--   permissions that are specified in this role. For more information, see
--   <a>IAM Role for Tasks</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <a>$sel:inferenceAcceleratorOverrides:TaskOverride'</a>,
--   <a>taskOverride_inferenceAcceleratorOverrides</a> - The Elastic
--   Inference accelerator override for the task.
--   
--   <a>$sel:cpu:TaskOverride'</a>, <a>taskOverride_cpu</a> - The cpu
--   override for the task.
newTaskOverride :: TaskOverride

-- | One or more container overrides sent to a task.
taskOverride_containerOverrides :: Lens' TaskOverride (Maybe [ContainerOverride])

-- | The Amazon Resource Name (ARN) of the task execution IAM role override
--   for the task. For more information, see <a>Amazon ECS task execution
--   IAM role</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
taskOverride_executionRoleArn :: Lens' TaskOverride (Maybe Text)

-- | The ephemeral storage setting override for the task.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
taskOverride_ephemeralStorage :: Lens' TaskOverride (Maybe EphemeralStorage)

-- | The memory override for the task.
taskOverride_memory :: Lens' TaskOverride (Maybe Text)

-- | The Amazon Resource Name (ARN) of the IAM role that containers in this
--   task can assume. All containers in this task are granted the
--   permissions that are specified in this role. For more information, see
--   <a>IAM Role for Tasks</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
taskOverride_taskRoleArn :: Lens' TaskOverride (Maybe Text)

-- | The Elastic Inference accelerator override for the task.
taskOverride_inferenceAcceleratorOverrides :: Lens' TaskOverride (Maybe [InferenceAcceleratorOverride])

-- | The cpu override for the task.
taskOverride_cpu :: Lens' TaskOverride (Maybe Text)

-- | Information about a set of Amazon ECS tasks in either an CodeDeploy or
--   an <tt>EXTERNAL</tt> deployment. An Amazon ECS task set includes
--   details such as the desired number of tasks, how many tasks are
--   running, and whether the task set serves production traffic.
--   
--   <i>See:</i> <a>newTaskSet</a> smart constructor.
data TaskSet
TaskSet' :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe POSIX -> Maybe Text -> Maybe Scale -> Maybe [LoadBalancer] -> Maybe POSIX -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe LaunchType -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe NetworkConfiguration -> Maybe [ServiceRegistry] -> Maybe [CapacityProviderStrategyItem] -> Maybe StabilityStatus -> Maybe [Tag] -> TaskSet

-- | The number of tasks in the task set that are in the <tt>RUNNING</tt>
--   status during a deployment. A task in the <tt>RUNNING</tt> state is
--   running and ready for use.
[$sel:runningCount:TaskSet'] :: TaskSet -> Maybe Int

-- | The status of the task set. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The task set is serving production traffic.</li>
--   <li><i>ACTIVE</i> The task set is not serving production traffic.</li>
--   <li><i>DRAINING</i> The tasks in the task set are being stopped and
--   their corresponding targets are being deregistered from their target
--   group.</li>
--   </ul>
[$sel:status:TaskSet'] :: TaskSet -> Maybe Text

-- | The Amazon Resource Name (ARN) of the cluster that the service that
--   hosts the task set exists in.
[$sel:clusterArn:TaskSet'] :: TaskSet -> Maybe Text

-- | The computed desired count for the task set. This is calculated by
--   multiplying the service's <tt>desiredCount</tt> by the task set's
--   <tt>scale</tt> percentage. The result is always rounded up. For
--   example, if the computed desired count is 1.2, it rounds up to 2
--   tasks.
[$sel:computedDesiredCount:TaskSet'] :: TaskSet -> Maybe Int

-- | The Unix timestamp for when the task set was created.
[$sel:createdAt:TaskSet'] :: TaskSet -> Maybe POSIX

-- | The Fargate platform version on which the tasks in the task set are
--   running. A platform version is only specified for tasks run on
--   Fargate. For more information, see <a>Fargate platform versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:platformVersion:TaskSet'] :: TaskSet -> Maybe Text

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
[$sel:scale:TaskSet'] :: TaskSet -> Maybe Scale

-- | Details on a load balancer that is used with a task set.
[$sel:loadBalancers:TaskSet'] :: TaskSet -> Maybe [LoadBalancer]

-- | The Unix timestamp for when the task set stability status was
--   retrieved.
[$sel:stabilityStatusAt:TaskSet'] :: TaskSet -> Maybe POSIX

-- | The number of tasks in the task set that are in the <tt>PENDING</tt>
--   status during a deployment. A task in the <tt>PENDING</tt> state is
--   preparing to enter the <tt>RUNNING</tt> state. A task set enters the
--   <tt>PENDING</tt> status when it launches for the first time or when it
--   is restarted after being in the <tt>STOPPED</tt> state.
[$sel:pendingCount:TaskSet'] :: TaskSet -> Maybe Int

-- | The Amazon Resource Name (ARN) of the task set.
[$sel:taskSetArn:TaskSet'] :: TaskSet -> Maybe Text

-- | The tag specified when a task set is started. If the task set is
--   created by an CodeDeploy deployment, the <tt>startedBy</tt> parameter
--   is <tt>CODE_DEPLOY</tt>. For a task set created for an external
--   deployment, the startedBy field isn't used.
[$sel:startedBy:TaskSet'] :: TaskSet -> Maybe Text

-- | The ID of the task set.
[$sel:id:TaskSet'] :: TaskSet -> Maybe Text

-- | The launch type the tasks in the task set are using. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:launchType:TaskSet'] :: TaskSet -> Maybe LaunchType

-- | The Unix timestamp for when the task set was last updated.
[$sel:updatedAt:TaskSet'] :: TaskSet -> Maybe POSIX

-- | The Amazon Resource Name (ARN) of the service the task set exists in.
[$sel:serviceArn:TaskSet'] :: TaskSet -> Maybe Text

-- | The task definition the task set is using.
[$sel:taskDefinition:TaskSet'] :: TaskSet -> Maybe Text

-- | The external ID associated with the task set.
--   
--   If a task set is created by an CodeDeploy deployment, the
--   <tt>externalId</tt> parameter contains the CodeDeploy deployment ID.
--   
--   If a task set is created for an external deployment and is associated
--   with a service discovery registry, the <tt>externalId</tt> parameter
--   contains the <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute.
[$sel:externalId:TaskSet'] :: TaskSet -> Maybe Text

-- | The network configuration for the task set.
[$sel:networkConfiguration:TaskSet'] :: TaskSet -> Maybe NetworkConfiguration

-- | The details of the service discovery registries to assign to this task
--   set. For more information, see <a>Service discovery</a>.
[$sel:serviceRegistries:TaskSet'] :: TaskSet -> Maybe [ServiceRegistry]

-- | The capacity provider strategy associated with the task set.
[$sel:capacityProviderStrategy:TaskSet'] :: TaskSet -> Maybe [CapacityProviderStrategyItem]

-- | The stability status, which indicates whether the task set has reached
--   a steady state. If the following conditions are met, the task set will
--   be in <tt>STEADY_STATE</tt>:
--   
--   <ul>
--   <li>The task <tt>runningCount</tt> is equal to the
--   <tt>computedDesiredCount</tt>.</li>
--   <li>The <tt>pendingCount</tt> is <tt>0</tt>.</li>
--   <li>There are no tasks running on container instances in the
--   <tt>DRAINING</tt> status.</li>
--   <li>All tasks are reporting a healthy status from the load balancers,
--   service discovery, and container health checks.</li>
--   </ul>
--   
--   If any of those conditions are not met, the stability status returns
--   <tt>STABILIZING</tt>.
[$sel:stabilityStatus:TaskSet'] :: TaskSet -> Maybe StabilityStatus

-- | The metadata that you apply to the task set to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:TaskSet'] :: TaskSet -> Maybe [Tag]

-- | Create a value of <a>TaskSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:runningCount:TaskSet'</a>, <a>taskSet_runningCount</a> - The
--   number of tasks in the task set that are in the <tt>RUNNING</tt>
--   status during a deployment. A task in the <tt>RUNNING</tt> state is
--   running and ready for use.
--   
--   <a>$sel:status:TaskSet'</a>, <a>taskSet_status</a> - The status of the
--   task set. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The task set is serving production traffic.</li>
--   <li><i>ACTIVE</i> The task set is not serving production traffic.</li>
--   <li><i>DRAINING</i> The tasks in the task set are being stopped and
--   their corresponding targets are being deregistered from their target
--   group.</li>
--   </ul>
--   
--   <a>$sel:clusterArn:TaskSet'</a>, <a>taskSet_clusterArn</a> - The
--   Amazon Resource Name (ARN) of the cluster that the service that hosts
--   the task set exists in.
--   
--   <a>$sel:computedDesiredCount:TaskSet'</a>,
--   <a>taskSet_computedDesiredCount</a> - The computed desired count for
--   the task set. This is calculated by multiplying the service's
--   <tt>desiredCount</tt> by the task set's <tt>scale</tt> percentage. The
--   result is always rounded up. For example, if the computed desired
--   count is 1.2, it rounds up to 2 tasks.
--   
--   <a>$sel:createdAt:TaskSet'</a>, <a>taskSet_createdAt</a> - The Unix
--   timestamp for when the task set was created.
--   
--   <a>$sel:platformVersion:TaskSet'</a>, <a>taskSet_platformVersion</a> -
--   The Fargate platform version on which the tasks in the task set are
--   running. A platform version is only specified for tasks run on
--   Fargate. For more information, see <a>Fargate platform versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:scale:TaskSet'</a>, <a>taskSet_scale</a> - A floating-point
--   percentage of the desired number of tasks to place and keep running in
--   the task set.
--   
--   <a>$sel:loadBalancers:TaskSet'</a>, <a>taskSet_loadBalancers</a> -
--   Details on a load balancer that is used with a task set.
--   
--   <a>$sel:stabilityStatusAt:TaskSet'</a>,
--   <a>taskSet_stabilityStatusAt</a> - The Unix timestamp for when the
--   task set stability status was retrieved.
--   
--   <a>$sel:pendingCount:TaskSet'</a>, <a>taskSet_pendingCount</a> - The
--   number of tasks in the task set that are in the <tt>PENDING</tt>
--   status during a deployment. A task in the <tt>PENDING</tt> state is
--   preparing to enter the <tt>RUNNING</tt> state. A task set enters the
--   <tt>PENDING</tt> status when it launches for the first time or when it
--   is restarted after being in the <tt>STOPPED</tt> state.
--   
--   <a>$sel:taskSetArn:TaskSet'</a>, <a>taskSet_taskSetArn</a> - The
--   Amazon Resource Name (ARN) of the task set.
--   
--   <a>$sel:startedBy:TaskSet'</a>, <a>taskSet_startedBy</a> - The tag
--   specified when a task set is started. If the task set is created by an
--   CodeDeploy deployment, the <tt>startedBy</tt> parameter is
--   <tt>CODE_DEPLOY</tt>. For a task set created for an external
--   deployment, the startedBy field isn't used.
--   
--   <a>$sel:id:TaskSet'</a>, <a>taskSet_id</a> - The ID of the task set.
--   
--   <a>$sel:launchType:TaskSet'</a>, <a>taskSet_launchType</a> - The
--   launch type the tasks in the task set are using. For more information,
--   see <a>Amazon ECS launch types</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:updatedAt:TaskSet'</a>, <a>taskSet_updatedAt</a> - The Unix
--   timestamp for when the task set was last updated.
--   
--   <a>$sel:serviceArn:TaskSet'</a>, <a>taskSet_serviceArn</a> - The
--   Amazon Resource Name (ARN) of the service the task set exists in.
--   
--   <a>$sel:taskDefinition:TaskSet'</a>, <a>taskSet_taskDefinition</a> -
--   The task definition the task set is using.
--   
--   <a>$sel:externalId:TaskSet'</a>, <a>taskSet_externalId</a> - The
--   external ID associated with the task set.
--   
--   If a task set is created by an CodeDeploy deployment, the
--   <tt>externalId</tt> parameter contains the CodeDeploy deployment ID.
--   
--   If a task set is created for an external deployment and is associated
--   with a service discovery registry, the <tt>externalId</tt> parameter
--   contains the <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute.
--   
--   <a>$sel:networkConfiguration:TaskSet'</a>,
--   <a>taskSet_networkConfiguration</a> - The network configuration for
--   the task set.
--   
--   <a>$sel:serviceRegistries:TaskSet'</a>,
--   <a>taskSet_serviceRegistries</a> - The details of the service
--   discovery registries to assign to this task set. For more information,
--   see <a>Service discovery</a>.
--   
--   <a>$sel:capacityProviderStrategy:TaskSet'</a>,
--   <a>taskSet_capacityProviderStrategy</a> - The capacity provider
--   strategy associated with the task set.
--   
--   <a>$sel:stabilityStatus:TaskSet'</a>, <a>taskSet_stabilityStatus</a> -
--   The stability status, which indicates whether the task set has reached
--   a steady state. If the following conditions are met, the task set will
--   be in <tt>STEADY_STATE</tt>:
--   
--   <ul>
--   <li>The task <tt>runningCount</tt> is equal to the
--   <tt>computedDesiredCount</tt>.</li>
--   <li>The <tt>pendingCount</tt> is <tt>0</tt>.</li>
--   <li>There are no tasks running on container instances in the
--   <tt>DRAINING</tt> status.</li>
--   <li>All tasks are reporting a healthy status from the load balancers,
--   service discovery, and container health checks.</li>
--   </ul>
--   
--   If any of those conditions are not met, the stability status returns
--   <tt>STABILIZING</tt>.
--   
--   <a>$sel:tags:TaskSet'</a>, <a>taskSet_tags</a> - The metadata that you
--   apply to the task set to help you categorize and organize them. Each
--   tag consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newTaskSet :: TaskSet

-- | The number of tasks in the task set that are in the <tt>RUNNING</tt>
--   status during a deployment. A task in the <tt>RUNNING</tt> state is
--   running and ready for use.
taskSet_runningCount :: Lens' TaskSet (Maybe Int)

-- | The status of the task set. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The task set is serving production traffic.</li>
--   <li><i>ACTIVE</i> The task set is not serving production traffic.</li>
--   <li><i>DRAINING</i> The tasks in the task set are being stopped and
--   their corresponding targets are being deregistered from their target
--   group.</li>
--   </ul>
taskSet_status :: Lens' TaskSet (Maybe Text)

-- | The Amazon Resource Name (ARN) of the cluster that the service that
--   hosts the task set exists in.
taskSet_clusterArn :: Lens' TaskSet (Maybe Text)

-- | The computed desired count for the task set. This is calculated by
--   multiplying the service's <tt>desiredCount</tt> by the task set's
--   <tt>scale</tt> percentage. The result is always rounded up. For
--   example, if the computed desired count is 1.2, it rounds up to 2
--   tasks.
taskSet_computedDesiredCount :: Lens' TaskSet (Maybe Int)

-- | The Unix timestamp for when the task set was created.
taskSet_createdAt :: Lens' TaskSet (Maybe UTCTime)

-- | The Fargate platform version on which the tasks in the task set are
--   running. A platform version is only specified for tasks run on
--   Fargate. For more information, see <a>Fargate platform versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
taskSet_platformVersion :: Lens' TaskSet (Maybe Text)

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
taskSet_scale :: Lens' TaskSet (Maybe Scale)

-- | Details on a load balancer that is used with a task set.
taskSet_loadBalancers :: Lens' TaskSet (Maybe [LoadBalancer])

-- | The Unix timestamp for when the task set stability status was
--   retrieved.
taskSet_stabilityStatusAt :: Lens' TaskSet (Maybe UTCTime)

-- | The number of tasks in the task set that are in the <tt>PENDING</tt>
--   status during a deployment. A task in the <tt>PENDING</tt> state is
--   preparing to enter the <tt>RUNNING</tt> state. A task set enters the
--   <tt>PENDING</tt> status when it launches for the first time or when it
--   is restarted after being in the <tt>STOPPED</tt> state.
taskSet_pendingCount :: Lens' TaskSet (Maybe Int)

-- | The Amazon Resource Name (ARN) of the task set.
taskSet_taskSetArn :: Lens' TaskSet (Maybe Text)

-- | The tag specified when a task set is started. If the task set is
--   created by an CodeDeploy deployment, the <tt>startedBy</tt> parameter
--   is <tt>CODE_DEPLOY</tt>. For a task set created for an external
--   deployment, the startedBy field isn't used.
taskSet_startedBy :: Lens' TaskSet (Maybe Text)

-- | The ID of the task set.
taskSet_id :: Lens' TaskSet (Maybe Text)

-- | The launch type the tasks in the task set are using. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
taskSet_launchType :: Lens' TaskSet (Maybe LaunchType)

-- | The Unix timestamp for when the task set was last updated.
taskSet_updatedAt :: Lens' TaskSet (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the service the task set exists in.
taskSet_serviceArn :: Lens' TaskSet (Maybe Text)

-- | The task definition the task set is using.
taskSet_taskDefinition :: Lens' TaskSet (Maybe Text)

-- | The external ID associated with the task set.
--   
--   If a task set is created by an CodeDeploy deployment, the
--   <tt>externalId</tt> parameter contains the CodeDeploy deployment ID.
--   
--   If a task set is created for an external deployment and is associated
--   with a service discovery registry, the <tt>externalId</tt> parameter
--   contains the <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute.
taskSet_externalId :: Lens' TaskSet (Maybe Text)

-- | The network configuration for the task set.
taskSet_networkConfiguration :: Lens' TaskSet (Maybe NetworkConfiguration)

-- | The details of the service discovery registries to assign to this task
--   set. For more information, see <a>Service discovery</a>.
taskSet_serviceRegistries :: Lens' TaskSet (Maybe [ServiceRegistry])

-- | The capacity provider strategy associated with the task set.
taskSet_capacityProviderStrategy :: Lens' TaskSet (Maybe [CapacityProviderStrategyItem])

-- | The stability status, which indicates whether the task set has reached
--   a steady state. If the following conditions are met, the task set will
--   be in <tt>STEADY_STATE</tt>:
--   
--   <ul>
--   <li>The task <tt>runningCount</tt> is equal to the
--   <tt>computedDesiredCount</tt>.</li>
--   <li>The <tt>pendingCount</tt> is <tt>0</tt>.</li>
--   <li>There are no tasks running on container instances in the
--   <tt>DRAINING</tt> status.</li>
--   <li>All tasks are reporting a healthy status from the load balancers,
--   service discovery, and container health checks.</li>
--   </ul>
--   
--   If any of those conditions are not met, the stability status returns
--   <tt>STABILIZING</tt>.
taskSet_stabilityStatus :: Lens' TaskSet (Maybe StabilityStatus)

-- | The metadata that you apply to the task set to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
taskSet_tags :: Lens' TaskSet (Maybe [Tag])

-- | The container path, mount options, and size of the tmpfs mount.
--   
--   <i>See:</i> <a>newTmpfs</a> smart constructor.
data Tmpfs
Tmpfs' :: Maybe [Text] -> Text -> Int -> Tmpfs

-- | The list of tmpfs volume mount options.
--   
--   Valid values: <tt>"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev"
--   | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" |
--   "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" |
--   "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" |
--   "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" |
--   "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" |
--   "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"</tt>
[$sel:mountOptions:Tmpfs'] :: Tmpfs -> Maybe [Text]

-- | The absolute file path where the tmpfs volume is to be mounted.
[$sel:containerPath:Tmpfs'] :: Tmpfs -> Text

-- | The maximum size (in MiB) of the tmpfs volume.
[$sel:size:Tmpfs'] :: Tmpfs -> Int

-- | Create a value of <a>Tmpfs</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mountOptions:Tmpfs'</a>, <a>tmpfs_mountOptions</a> - The list
--   of tmpfs volume mount options.
--   
--   Valid values: <tt>"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev"
--   | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" |
--   "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" |
--   "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" |
--   "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" |
--   "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" |
--   "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"</tt>
--   
--   <a>$sel:containerPath:Tmpfs'</a>, <a>tmpfs_containerPath</a> - The
--   absolute file path where the tmpfs volume is to be mounted.
--   
--   <a>$sel:size:Tmpfs'</a>, <a>tmpfs_size</a> - The maximum size (in MiB)
--   of the tmpfs volume.
newTmpfs :: Text -> Int -> Tmpfs

-- | The list of tmpfs volume mount options.
--   
--   Valid values: <tt>"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev"
--   | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" |
--   "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" |
--   "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" |
--   "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" |
--   "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" |
--   "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"</tt>
tmpfs_mountOptions :: Lens' Tmpfs (Maybe [Text])

-- | The absolute file path where the tmpfs volume is to be mounted.
tmpfs_containerPath :: Lens' Tmpfs Text

-- | The maximum size (in MiB) of the tmpfs volume.
tmpfs_size :: Lens' Tmpfs Int

-- | The <tt>ulimit</tt> settings to pass to the container.
--   
--   Amazon ECS tasks hosted on Fargate use the default resource limit
--   values set by the operating system with the exception of the
--   <tt>nofile</tt> resource limit parameter which Fargate overrides. The
--   <tt>nofile</tt> resource limit sets a restriction on the number of
--   open files that a container can use. The default <tt>nofile</tt> soft
--   limit is <tt>1024</tt> and hard limit is <tt>4096</tt>.
--   
--   <i>See:</i> <a>newUlimit</a> smart constructor.
data Ulimit
Ulimit' :: UlimitName -> Int -> Int -> Ulimit

-- | The <tt>type</tt> of the <tt>ulimit</tt>.
[$sel:name:Ulimit'] :: Ulimit -> UlimitName

-- | The soft limit for the ulimit type.
[$sel:softLimit:Ulimit'] :: Ulimit -> Int

-- | The hard limit for the ulimit type.
[$sel:hardLimit:Ulimit'] :: Ulimit -> Int

-- | Create a value of <a>Ulimit</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:Ulimit'</a>, <a>ulimit_name</a> - The <tt>type</tt> of
--   the <tt>ulimit</tt>.
--   
--   <a>$sel:softLimit:Ulimit'</a>, <a>ulimit_softLimit</a> - The soft
--   limit for the ulimit type.
--   
--   <a>$sel:hardLimit:Ulimit'</a>, <a>ulimit_hardLimit</a> - The hard
--   limit for the ulimit type.
newUlimit :: UlimitName -> Int -> Int -> Ulimit

-- | The <tt>type</tt> of the <tt>ulimit</tt>.
ulimit_name :: Lens' Ulimit UlimitName

-- | The soft limit for the ulimit type.
ulimit_softLimit :: Lens' Ulimit Int

-- | The hard limit for the ulimit type.
ulimit_hardLimit :: Lens' Ulimit Int

-- | The Docker and Amazon ECS container agent version information about a
--   container instance.
--   
--   <i>See:</i> <a>newVersionInfo</a> smart constructor.
data VersionInfo
VersionInfo' :: Maybe Text -> Maybe Text -> Maybe Text -> VersionInfo

-- | The Git commit hash for the Amazon ECS container agent build on the
--   <a>amazon-ecs-agent</a> GitHub repository.
[$sel:agentHash:VersionInfo'] :: VersionInfo -> Maybe Text

-- | The version number of the Amazon ECS container agent.
[$sel:agentVersion:VersionInfo'] :: VersionInfo -> Maybe Text

-- | The Docker version running on the container instance.
[$sel:dockerVersion:VersionInfo'] :: VersionInfo -> Maybe Text

-- | Create a value of <a>VersionInfo</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:agentHash:VersionInfo'</a>, <a>versionInfo_agentHash</a> - The
--   Git commit hash for the Amazon ECS container agent build on the
--   <a>amazon-ecs-agent</a> GitHub repository.
--   
--   <a>$sel:agentVersion:VersionInfo'</a>, <a>versionInfo_agentVersion</a>
--   - The version number of the Amazon ECS container agent.
--   
--   <a>$sel:dockerVersion:VersionInfo'</a>,
--   <a>versionInfo_dockerVersion</a> - The Docker version running on the
--   container instance.
newVersionInfo :: VersionInfo

-- | The Git commit hash for the Amazon ECS container agent build on the
--   <a>amazon-ecs-agent</a> GitHub repository.
versionInfo_agentHash :: Lens' VersionInfo (Maybe Text)

-- | The version number of the Amazon ECS container agent.
versionInfo_agentVersion :: Lens' VersionInfo (Maybe Text)

-- | The Docker version running on the container instance.
versionInfo_dockerVersion :: Lens' VersionInfo (Maybe Text)

-- | A data volume used in a task definition. For tasks that use the Amazon
--   Elastic File System (Amazon EFS), specify an
--   <tt>efsVolumeConfiguration</tt>. For Windows tasks that use Amazon FSx
--   for Windows File Server file system, specify a
--   <tt>fsxWindowsFileServerVolumeConfiguration</tt>. For tasks that use a
--   Docker volume, specify a <tt>DockerVolumeConfiguration</tt>. For tasks
--   that use a bind mount host volume, specify a <tt>host</tt> and
--   optional <tt>sourcePath</tt>. For more information, see <a>Using Data
--   Volumes in Tasks</a>.
--   
--   <i>See:</i> <a>newVolume</a> smart constructor.
data Volume
Volume' :: Maybe DockerVolumeConfiguration -> Maybe FSxWindowsFileServerVolumeConfiguration -> Maybe Text -> Maybe EFSVolumeConfiguration -> Maybe HostVolumeProperties -> Volume

-- | This parameter is specified when you are using Docker volumes.
--   
--   Windows containers only support the use of the <tt>local</tt> driver.
--   To use bind mounts, specify the <tt>host</tt> parameter instead.
--   
--   Docker volumes are not supported by tasks run on Fargate.
[$sel:dockerVolumeConfiguration:Volume'] :: Volume -> Maybe DockerVolumeConfiguration

-- | This parameter is specified when you are using Amazon FSx for Windows
--   File Server file system for task storage.
[$sel:fsxWindowsFileServerVolumeConfiguration:Volume'] :: Volume -> Maybe FSxWindowsFileServerVolumeConfiguration

-- | The name of the volume. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. This name is referenced
--   in the <tt>sourceVolume</tt> parameter of container definition
--   <tt>mountPoints</tt>.
[$sel:name:Volume'] :: Volume -> Maybe Text

-- | This parameter is specified when you are using an Amazon Elastic File
--   System file system for task storage.
[$sel:efsVolumeConfiguration:Volume'] :: Volume -> Maybe EFSVolumeConfiguration

-- | This parameter is specified when you are using bind mount host
--   volumes. The contents of the <tt>host</tt> parameter determine whether
--   your bind mount host volume persists on the host container instance
--   and where it is stored. If the <tt>host</tt> parameter is empty, then
--   the Docker daemon assigns a host path for your data volume. However,
--   the data is not guaranteed to persist after the containers associated
--   with it stop running.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives. For
--   example, you can mount <tt>C:\my\path:C:\my\path</tt> and
--   <tt>D:\:D:\</tt>, but not <tt>D:\my\path:C:\my\path</tt> or
--   <tt>D:\:C:\my\path</tt>.
[$sel:host:Volume'] :: Volume -> Maybe HostVolumeProperties

-- | Create a value of <a>Volume</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dockerVolumeConfiguration:Volume'</a>,
--   <a>volume_dockerVolumeConfiguration</a> - This parameter is specified
--   when you are using Docker volumes.
--   
--   Windows containers only support the use of the <tt>local</tt> driver.
--   To use bind mounts, specify the <tt>host</tt> parameter instead.
--   
--   Docker volumes are not supported by tasks run on Fargate.
--   
--   <a>$sel:fsxWindowsFileServerVolumeConfiguration:Volume'</a>,
--   <a>volume_fsxWindowsFileServerVolumeConfiguration</a> - This parameter
--   is specified when you are using Amazon FSx for Windows File Server
--   file system for task storage.
--   
--   <a>$sel:name:Volume'</a>, <a>volume_name</a> - The name of the volume.
--   Up to 255 letters (uppercase and lowercase), numbers, underscores, and
--   hyphens are allowed. This name is referenced in the
--   <tt>sourceVolume</tt> parameter of container definition
--   <tt>mountPoints</tt>.
--   
--   <a>$sel:efsVolumeConfiguration:Volume'</a>,
--   <a>volume_efsVolumeConfiguration</a> - This parameter is specified
--   when you are using an Amazon Elastic File System file system for task
--   storage.
--   
--   <a>$sel:host:Volume'</a>, <a>volume_host</a> - This parameter is
--   specified when you are using bind mount host volumes. The contents of
--   the <tt>host</tt> parameter determine whether your bind mount host
--   volume persists on the host container instance and where it is stored.
--   If the <tt>host</tt> parameter is empty, then the Docker daemon
--   assigns a host path for your data volume. However, the data is not
--   guaranteed to persist after the containers associated with it stop
--   running.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives. For
--   example, you can mount <tt>C:\my\path:C:\my\path</tt> and
--   <tt>D:\:D:\</tt>, but not <tt>D:\my\path:C:\my\path</tt> or
--   <tt>D:\:C:\my\path</tt>.
newVolume :: Volume

-- | This parameter is specified when you are using Docker volumes.
--   
--   Windows containers only support the use of the <tt>local</tt> driver.
--   To use bind mounts, specify the <tt>host</tt> parameter instead.
--   
--   Docker volumes are not supported by tasks run on Fargate.
volume_dockerVolumeConfiguration :: Lens' Volume (Maybe DockerVolumeConfiguration)

-- | This parameter is specified when you are using Amazon FSx for Windows
--   File Server file system for task storage.
volume_fsxWindowsFileServerVolumeConfiguration :: Lens' Volume (Maybe FSxWindowsFileServerVolumeConfiguration)

-- | The name of the volume. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. This name is referenced
--   in the <tt>sourceVolume</tt> parameter of container definition
--   <tt>mountPoints</tt>.
volume_name :: Lens' Volume (Maybe Text)

-- | This parameter is specified when you are using an Amazon Elastic File
--   System file system for task storage.
volume_efsVolumeConfiguration :: Lens' Volume (Maybe EFSVolumeConfiguration)

-- | This parameter is specified when you are using bind mount host
--   volumes. The contents of the <tt>host</tt> parameter determine whether
--   your bind mount host volume persists on the host container instance
--   and where it is stored. If the <tt>host</tt> parameter is empty, then
--   the Docker daemon assigns a host path for your data volume. However,
--   the data is not guaranteed to persist after the containers associated
--   with it stop running.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives. For
--   example, you can mount <tt>C:\my\path:C:\my\path</tt> and
--   <tt>D:\:D:\</tt>, but not <tt>D:\my\path:C:\my\path</tt> or
--   <tt>D:\:C:\my\path</tt>.
volume_host :: Lens' Volume (Maybe HostVolumeProperties)

-- | Details on a data volume from another container in the same task
--   definition.
--   
--   <i>See:</i> <a>newVolumeFrom</a> smart constructor.
data VolumeFrom
VolumeFrom' :: Maybe Text -> Maybe Bool -> VolumeFrom

-- | The name of another container within the same task definition from
--   which to mount volumes.
[$sel:sourceContainer:VolumeFrom'] :: VolumeFrom -> Maybe Text

-- | If this value is <tt>true</tt>, the container has read-only access to
--   the volume. If this value is <tt>false</tt>, then the container can
--   write to the volume. The default value is <tt>false</tt>.
[$sel:readOnly:VolumeFrom'] :: VolumeFrom -> Maybe Bool

-- | Create a value of <a>VolumeFrom</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourceContainer:VolumeFrom'</a>,
--   <a>volumeFrom_sourceContainer</a> - The name of another container
--   within the same task definition from which to mount volumes.
--   
--   <a>$sel:readOnly:VolumeFrom'</a>, <a>volumeFrom_readOnly</a> - If this
--   value is <tt>true</tt>, the container has read-only access to the
--   volume. If this value is <tt>false</tt>, then the container can write
--   to the volume. The default value is <tt>false</tt>.
newVolumeFrom :: VolumeFrom

-- | The name of another container within the same task definition from
--   which to mount volumes.
volumeFrom_sourceContainer :: Lens' VolumeFrom (Maybe Text)

-- | If this value is <tt>true</tt>, the container has read-only access to
--   the volume. If this value is <tt>false</tt>, then the container can
--   write to the volume. The default value is <tt>false</tt>.
volumeFrom_readOnly :: Lens' VolumeFrom (Maybe Bool)


-- | Associates the specified tags to a resource with the specified
--   <tt>resourceArn</tt>. If existing tags on a resource are not specified
--   in the request parameters, they are not changed. When a resource is
--   deleted, the tags associated with that resource are deleted as well.
module Amazonka.ECS.TagResource

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | The Amazon Resource Name (ARN) of the resource to which to add tags.
--   Currently, the supported resources are Amazon ECS capacity providers,
--   tasks, services, task definitions, clusters, and container instances.
[$sel:resourceArn:TagResource'] :: TagResource -> Text

-- | The tags to add to the resource. A tag is an array of key-value pairs.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:TagResource'] :: TagResource -> [Tag]

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the resource to which to add tags.
--   Currently, the supported resources are Amazon ECS capacity providers,
--   tasks, services, task definitions, clusters, and container instances.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - The tags to
--   add to the resource. A tag is an array of key-value pairs.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newTagResource :: Text -> TagResource

-- | The Amazon Resource Name (ARN) of the resource to which to add tags.
--   Currently, the supported resources are Amazon ECS capacity providers,
--   tasks, services, task definitions, clusters, and container instances.
tagResource_resourceArn :: Lens' TagResource Text

-- | The tags to add to the resource. A tag is an array of key-value pairs.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
tagResource_tags :: Lens' TagResource [Tag]

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:TagResourceResponse'] :: TagResourceResponse -> Int

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int
instance GHC.Generics.Generic Amazonka.ECS.TagResource.TagResource
instance GHC.Show.Show Amazonka.ECS.TagResource.TagResource
instance GHC.Read.Read Amazonka.ECS.TagResource.TagResource
instance GHC.Classes.Eq Amazonka.ECS.TagResource.TagResource
instance GHC.Generics.Generic Amazonka.ECS.TagResource.TagResourceResponse
instance GHC.Show.Show Amazonka.ECS.TagResource.TagResourceResponse
instance GHC.Read.Read Amazonka.ECS.TagResource.TagResourceResponse
instance GHC.Classes.Eq Amazonka.ECS.TagResource.TagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.ECS.TagResource.TagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.TagResource.TagResource
instance Control.DeepSeq.NFData Amazonka.ECS.TagResource.TagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.TagResource.TagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.TagResource.TagResource
instance Amazonka.Data.Path.ToPath Amazonka.ECS.TagResource.TagResource
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.TagResource.TagResource


-- | This action is only used by the Amazon ECS agent, and it is not
--   intended for use outside of the agent.
--   
--   Sent to acknowledge that a task changed states.
module Amazonka.ECS.SubmitTaskStateChange

-- | <i>See:</i> <a>newSubmitTaskStateChange</a> smart constructor.
data SubmitTaskStateChange
SubmitTaskStateChange' :: Maybe Text -> Maybe [ManagedAgentStateChange] -> Maybe Text -> Maybe [AttachmentStateChange] -> Maybe POSIX -> Maybe POSIX -> Maybe [ContainerStateChange] -> Maybe Text -> Maybe Text -> Maybe POSIX -> SubmitTaskStateChange

-- | The status of the state change request.
[$sel:status:SubmitTaskStateChange'] :: SubmitTaskStateChange -> Maybe Text

-- | The details for the managed agent associated with the task.
[$sel:managedAgents:SubmitTaskStateChange'] :: SubmitTaskStateChange -> Maybe [ManagedAgentStateChange]

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the task.
[$sel:cluster:SubmitTaskStateChange'] :: SubmitTaskStateChange -> Maybe Text

-- | Any attachments associated with the state change request.
[$sel:attachments:SubmitTaskStateChange'] :: SubmitTaskStateChange -> Maybe [AttachmentStateChange]

-- | The Unix timestamp for when the task execution stopped.
[$sel:executionStoppedAt:SubmitTaskStateChange'] :: SubmitTaskStateChange -> Maybe POSIX

-- | The Unix timestamp for when the container image pull completed.
[$sel:pullStoppedAt:SubmitTaskStateChange'] :: SubmitTaskStateChange -> Maybe POSIX

-- | Any containers associated with the state change request.
[$sel:containers:SubmitTaskStateChange'] :: SubmitTaskStateChange -> Maybe [ContainerStateChange]

-- | The reason for the state change request.
[$sel:reason:SubmitTaskStateChange'] :: SubmitTaskStateChange -> Maybe Text

-- | The task ID or full ARN of the task in the state change request.
[$sel:task:SubmitTaskStateChange'] :: SubmitTaskStateChange -> Maybe Text

-- | The Unix timestamp for when the container image pull began.
[$sel:pullStartedAt:SubmitTaskStateChange'] :: SubmitTaskStateChange -> Maybe POSIX

-- | Create a value of <a>SubmitTaskStateChange</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_status</a> - The status of the state change
--   request.
--   
--   <a>$sel:managedAgents:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_managedAgents</a> - The details for the
--   managed agent associated with the task.
--   
--   <a>$sel:cluster:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_cluster</a> - The short name or full Amazon
--   Resource Name (ARN) of the cluster that hosts the task.
--   
--   <a>$sel:attachments:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_attachments</a> - Any attachments associated
--   with the state change request.
--   
--   <a>$sel:executionStoppedAt:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_executionStoppedAt</a> - The Unix timestamp
--   for when the task execution stopped.
--   
--   <a>$sel:pullStoppedAt:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_pullStoppedAt</a> - The Unix timestamp for
--   when the container image pull completed.
--   
--   <a>$sel:containers:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_containers</a> - Any containers associated
--   with the state change request.
--   
--   <a>$sel:reason:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_reason</a> - The reason for the state change
--   request.
--   
--   <a>$sel:task:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_task</a> - The task ID or full ARN of the
--   task in the state change request.
--   
--   <a>$sel:pullStartedAt:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_pullStartedAt</a> - The Unix timestamp for
--   when the container image pull began.
newSubmitTaskStateChange :: SubmitTaskStateChange

-- | The status of the state change request.
submitTaskStateChange_status :: Lens' SubmitTaskStateChange (Maybe Text)

-- | The details for the managed agent associated with the task.
submitTaskStateChange_managedAgents :: Lens' SubmitTaskStateChange (Maybe [ManagedAgentStateChange])

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the task.
submitTaskStateChange_cluster :: Lens' SubmitTaskStateChange (Maybe Text)

-- | Any attachments associated with the state change request.
submitTaskStateChange_attachments :: Lens' SubmitTaskStateChange (Maybe [AttachmentStateChange])

-- | The Unix timestamp for when the task execution stopped.
submitTaskStateChange_executionStoppedAt :: Lens' SubmitTaskStateChange (Maybe UTCTime)

-- | The Unix timestamp for when the container image pull completed.
submitTaskStateChange_pullStoppedAt :: Lens' SubmitTaskStateChange (Maybe UTCTime)

-- | Any containers associated with the state change request.
submitTaskStateChange_containers :: Lens' SubmitTaskStateChange (Maybe [ContainerStateChange])

-- | The reason for the state change request.
submitTaskStateChange_reason :: Lens' SubmitTaskStateChange (Maybe Text)

-- | The task ID or full ARN of the task in the state change request.
submitTaskStateChange_task :: Lens' SubmitTaskStateChange (Maybe Text)

-- | The Unix timestamp for when the container image pull began.
submitTaskStateChange_pullStartedAt :: Lens' SubmitTaskStateChange (Maybe UTCTime)

-- | <i>See:</i> <a>newSubmitTaskStateChangeResponse</a> smart constructor.
data SubmitTaskStateChangeResponse
SubmitTaskStateChangeResponse' :: Maybe Text -> Int -> SubmitTaskStateChangeResponse

-- | Acknowledgement of the state change.
[$sel:acknowledgment:SubmitTaskStateChangeResponse'] :: SubmitTaskStateChangeResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:SubmitTaskStateChangeResponse'] :: SubmitTaskStateChangeResponse -> Int

-- | Create a value of <a>SubmitTaskStateChangeResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:acknowledgment:SubmitTaskStateChangeResponse'</a>,
--   <a>submitTaskStateChangeResponse_acknowledgment</a> - Acknowledgement
--   of the state change.
--   
--   <a>$sel:httpStatus:SubmitTaskStateChangeResponse'</a>,
--   <a>submitTaskStateChangeResponse_httpStatus</a> - The response's http
--   status code.
newSubmitTaskStateChangeResponse :: Int -> SubmitTaskStateChangeResponse

-- | Acknowledgement of the state change.
submitTaskStateChangeResponse_acknowledgment :: Lens' SubmitTaskStateChangeResponse (Maybe Text)

-- | The response's http status code.
submitTaskStateChangeResponse_httpStatus :: Lens' SubmitTaskStateChangeResponse Int
instance GHC.Generics.Generic Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChange
instance GHC.Show.Show Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChange
instance GHC.Read.Read Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChange
instance GHC.Classes.Eq Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChange
instance GHC.Generics.Generic Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChangeResponse
instance GHC.Show.Show Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChangeResponse
instance GHC.Read.Read Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChangeResponse
instance GHC.Classes.Eq Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChangeResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChange
instance Control.DeepSeq.NFData Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChangeResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChange
instance Control.DeepSeq.NFData Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChange
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChange
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChange
instance Amazonka.Data.Path.ToPath Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChange
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.SubmitTaskStateChange.SubmitTaskStateChange


-- | This action is only used by the Amazon ECS agent, and it is not
--   intended for use outside of the agent.
--   
--   Sent to acknowledge that a container changed states.
module Amazonka.ECS.SubmitContainerStateChange

-- | <i>See:</i> <a>newSubmitContainerStateChange</a> smart constructor.
data SubmitContainerStateChange
SubmitContainerStateChange' :: Maybe [NetworkBinding] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Text -> SubmitContainerStateChange

-- | The network bindings of the container.
[$sel:networkBindings:SubmitContainerStateChange'] :: SubmitContainerStateChange -> Maybe [NetworkBinding]

-- | The status of the state change request.
[$sel:status:SubmitContainerStateChange'] :: SubmitContainerStateChange -> Maybe Text

-- | The short name or full ARN of the cluster that hosts the container.
[$sel:cluster:SubmitContainerStateChange'] :: SubmitContainerStateChange -> Maybe Text

-- | The name of the container.
[$sel:containerName:SubmitContainerStateChange'] :: SubmitContainerStateChange -> Maybe Text

-- | The reason for the state change request.
[$sel:reason:SubmitContainerStateChange'] :: SubmitContainerStateChange -> Maybe Text

-- | The exit code returned for the state change request.
[$sel:exitCode:SubmitContainerStateChange'] :: SubmitContainerStateChange -> Maybe Int

-- | The task ID or full Amazon Resource Name (ARN) of the task that hosts
--   the container.
[$sel:task:SubmitContainerStateChange'] :: SubmitContainerStateChange -> Maybe Text

-- | The ID of the Docker container.
[$sel:runtimeId:SubmitContainerStateChange'] :: SubmitContainerStateChange -> Maybe Text

-- | Create a value of <a>SubmitContainerStateChange</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:networkBindings:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_networkBindings</a> - The network
--   bindings of the container.
--   
--   <a>$sel:status:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_status</a> - The status of the state
--   change request.
--   
--   <a>$sel:cluster:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_cluster</a> - The short name or full ARN
--   of the cluster that hosts the container.
--   
--   <a>$sel:containerName:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_containerName</a> - The name of the
--   container.
--   
--   <a>$sel:reason:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_reason</a> - The reason for the state
--   change request.
--   
--   <a>$sel:exitCode:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_exitCode</a> - The exit code returned
--   for the state change request.
--   
--   <a>$sel:task:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_task</a> - The task ID or full Amazon
--   Resource Name (ARN) of the task that hosts the container.
--   
--   <a>$sel:runtimeId:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_runtimeId</a> - The ID of the Docker
--   container.
newSubmitContainerStateChange :: SubmitContainerStateChange

-- | The network bindings of the container.
submitContainerStateChange_networkBindings :: Lens' SubmitContainerStateChange (Maybe [NetworkBinding])

-- | The status of the state change request.
submitContainerStateChange_status :: Lens' SubmitContainerStateChange (Maybe Text)

-- | The short name or full ARN of the cluster that hosts the container.
submitContainerStateChange_cluster :: Lens' SubmitContainerStateChange (Maybe Text)

-- | The name of the container.
submitContainerStateChange_containerName :: Lens' SubmitContainerStateChange (Maybe Text)

-- | The reason for the state change request.
submitContainerStateChange_reason :: Lens' SubmitContainerStateChange (Maybe Text)

-- | The exit code returned for the state change request.
submitContainerStateChange_exitCode :: Lens' SubmitContainerStateChange (Maybe Int)

-- | The task ID or full Amazon Resource Name (ARN) of the task that hosts
--   the container.
submitContainerStateChange_task :: Lens' SubmitContainerStateChange (Maybe Text)

-- | The ID of the Docker container.
submitContainerStateChange_runtimeId :: Lens' SubmitContainerStateChange (Maybe Text)

-- | <i>See:</i> <a>newSubmitContainerStateChangeResponse</a> smart
--   constructor.
data SubmitContainerStateChangeResponse
SubmitContainerStateChangeResponse' :: Maybe Text -> Int -> SubmitContainerStateChangeResponse

-- | Acknowledgement of the state change.
[$sel:acknowledgment:SubmitContainerStateChangeResponse'] :: SubmitContainerStateChangeResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:SubmitContainerStateChangeResponse'] :: SubmitContainerStateChangeResponse -> Int

-- | Create a value of <a>SubmitContainerStateChangeResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:acknowledgment:SubmitContainerStateChangeResponse'</a>,
--   <a>submitContainerStateChangeResponse_acknowledgment</a> -
--   Acknowledgement of the state change.
--   
--   <a>$sel:httpStatus:SubmitContainerStateChangeResponse'</a>,
--   <a>submitContainerStateChangeResponse_httpStatus</a> - The response's
--   http status code.
newSubmitContainerStateChangeResponse :: Int -> SubmitContainerStateChangeResponse

-- | Acknowledgement of the state change.
submitContainerStateChangeResponse_acknowledgment :: Lens' SubmitContainerStateChangeResponse (Maybe Text)

-- | The response's http status code.
submitContainerStateChangeResponse_httpStatus :: Lens' SubmitContainerStateChangeResponse Int
instance GHC.Generics.Generic Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChange
instance GHC.Show.Show Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChange
instance GHC.Read.Read Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChange
instance GHC.Classes.Eq Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChange
instance GHC.Generics.Generic Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChangeResponse
instance GHC.Show.Show Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChangeResponse
instance GHC.Read.Read Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChangeResponse
instance GHC.Classes.Eq Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChangeResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChange
instance Control.DeepSeq.NFData Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChangeResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChange
instance Control.DeepSeq.NFData Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChange
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChange
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChange
instance Amazonka.Data.Path.ToPath Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChange
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.SubmitContainerStateChange.SubmitContainerStateChange


-- | This action is only used by the Amazon ECS agent, and it is not
--   intended for use outside of the agent.
--   
--   Sent to acknowledge that an attachment changed states.
module Amazonka.ECS.SubmitAttachmentStateChanges

-- | <i>See:</i> <a>newSubmitAttachmentStateChanges</a> smart constructor.
data SubmitAttachmentStateChanges
SubmitAttachmentStateChanges' :: Maybe Text -> [AttachmentStateChange] -> SubmitAttachmentStateChanges

-- | The short name or full ARN of the cluster that hosts the container
--   instance the attachment belongs to.
[$sel:cluster:SubmitAttachmentStateChanges'] :: SubmitAttachmentStateChanges -> Maybe Text

-- | Any attachments associated with the state change request.
[$sel:attachments:SubmitAttachmentStateChanges'] :: SubmitAttachmentStateChanges -> [AttachmentStateChange]

-- | Create a value of <a>SubmitAttachmentStateChanges</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:SubmitAttachmentStateChanges'</a>,
--   <a>submitAttachmentStateChanges_cluster</a> - The short name or full
--   ARN of the cluster that hosts the container instance the attachment
--   belongs to.
--   
--   <a>$sel:attachments:SubmitAttachmentStateChanges'</a>,
--   <a>submitAttachmentStateChanges_attachments</a> - Any attachments
--   associated with the state change request.
newSubmitAttachmentStateChanges :: SubmitAttachmentStateChanges

-- | The short name or full ARN of the cluster that hosts the container
--   instance the attachment belongs to.
submitAttachmentStateChanges_cluster :: Lens' SubmitAttachmentStateChanges (Maybe Text)

-- | Any attachments associated with the state change request.
submitAttachmentStateChanges_attachments :: Lens' SubmitAttachmentStateChanges [AttachmentStateChange]

-- | <i>See:</i> <a>newSubmitAttachmentStateChangesResponse</a> smart
--   constructor.
data SubmitAttachmentStateChangesResponse
SubmitAttachmentStateChangesResponse' :: Maybe Text -> Int -> SubmitAttachmentStateChangesResponse

-- | Acknowledgement of the state change.
[$sel:acknowledgment:SubmitAttachmentStateChangesResponse'] :: SubmitAttachmentStateChangesResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:SubmitAttachmentStateChangesResponse'] :: SubmitAttachmentStateChangesResponse -> Int

-- | Create a value of <a>SubmitAttachmentStateChangesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:acknowledgment:SubmitAttachmentStateChangesResponse'</a>,
--   <a>submitAttachmentStateChangesResponse_acknowledgment</a> -
--   Acknowledgement of the state change.
--   
--   <a>$sel:httpStatus:SubmitAttachmentStateChangesResponse'</a>,
--   <a>submitAttachmentStateChangesResponse_httpStatus</a> - The
--   response's http status code.
newSubmitAttachmentStateChangesResponse :: Int -> SubmitAttachmentStateChangesResponse

-- | Acknowledgement of the state change.
submitAttachmentStateChangesResponse_acknowledgment :: Lens' SubmitAttachmentStateChangesResponse (Maybe Text)

-- | The response's http status code.
submitAttachmentStateChangesResponse_httpStatus :: Lens' SubmitAttachmentStateChangesResponse Int
instance GHC.Generics.Generic Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChanges
instance GHC.Show.Show Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChanges
instance GHC.Read.Read Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChanges
instance GHC.Classes.Eq Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChanges
instance GHC.Generics.Generic Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChangesResponse
instance GHC.Show.Show Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChangesResponse
instance GHC.Read.Read Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChangesResponse
instance GHC.Classes.Eq Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChangesResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChanges
instance Control.DeepSeq.NFData Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChangesResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChanges
instance Control.DeepSeq.NFData Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChanges
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChanges
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChanges
instance Amazonka.Data.Path.ToPath Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChanges
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.SubmitAttachmentStateChanges.SubmitAttachmentStateChanges


-- | Stops a running task. Any tags associated with the task will be
--   deleted.
--   
--   When StopTask is called on a task, the equivalent of <tt>docker
--   stop</tt> is issued to the containers running in the task. This
--   results in a <tt>SIGTERM</tt> value and a default 30-second timeout,
--   after which the <tt>SIGKILL</tt> value is sent and the containers are
--   forcibly stopped. If the container handles the <tt>SIGTERM</tt> value
--   gracefully and exits within 30 seconds from receiving it, no
--   <tt>SIGKILL</tt> value is sent.
--   
--   The default 30-second timeout can be configured on the Amazon ECS
--   container agent with the <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> variable.
--   For more information, see <a>Amazon ECS Container Agent
--   Configuration</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
module Amazonka.ECS.StopTask

-- | <i>See:</i> <a>newStopTask</a> smart constructor.
data StopTask
StopTask' :: Maybe Text -> Maybe Text -> Text -> StopTask

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the task to stop. If you do not specify a cluster, the default
--   cluster is assumed.
[$sel:cluster:StopTask'] :: StopTask -> Maybe Text

-- | An optional message specified when a task is stopped. For example, if
--   you are using a custom scheduler, you can use this parameter to
--   specify the reason for stopping the task here, and the message appears
--   in subsequent DescribeTasks API operations on this task. Up to 255
--   characters are allowed in this message.
[$sel:reason:StopTask'] :: StopTask -> Maybe Text

-- | The task ID or full Amazon Resource Name (ARN) of the task to stop.
[$sel:task:StopTask'] :: StopTask -> Text

-- | Create a value of <a>StopTask</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:StopTask'</a>, <a>stopTask_cluster</a> - The short
--   name or full Amazon Resource Name (ARN) of the cluster that hosts the
--   task to stop. If you do not specify a cluster, the default cluster is
--   assumed.
--   
--   <a>$sel:reason:StopTask'</a>, <a>stopTask_reason</a> - An optional
--   message specified when a task is stopped. For example, if you are
--   using a custom scheduler, you can use this parameter to specify the
--   reason for stopping the task here, and the message appears in
--   subsequent DescribeTasks API operations on this task. Up to 255
--   characters are allowed in this message.
--   
--   <a>$sel:task:StopTask'</a>, <a>stopTask_task</a> - The task ID or full
--   Amazon Resource Name (ARN) of the task to stop.
newStopTask :: Text -> StopTask

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the task to stop. If you do not specify a cluster, the default
--   cluster is assumed.
stopTask_cluster :: Lens' StopTask (Maybe Text)

-- | An optional message specified when a task is stopped. For example, if
--   you are using a custom scheduler, you can use this parameter to
--   specify the reason for stopping the task here, and the message appears
--   in subsequent DescribeTasks API operations on this task. Up to 255
--   characters are allowed in this message.
stopTask_reason :: Lens' StopTask (Maybe Text)

-- | The task ID or full Amazon Resource Name (ARN) of the task to stop.
stopTask_task :: Lens' StopTask Text

-- | <i>See:</i> <a>newStopTaskResponse</a> smart constructor.
data StopTaskResponse
StopTaskResponse' :: Maybe Task -> Int -> StopTaskResponse

-- | The task that was stopped.
[$sel:task:StopTaskResponse'] :: StopTaskResponse -> Maybe Task

-- | The response's http status code.
[$sel:httpStatus:StopTaskResponse'] :: StopTaskResponse -> Int

-- | Create a value of <a>StopTaskResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:task:StopTask'</a>, <a>stopTaskResponse_task</a> - The task
--   that was stopped.
--   
--   <a>$sel:httpStatus:StopTaskResponse'</a>,
--   <a>stopTaskResponse_httpStatus</a> - The response's http status code.
newStopTaskResponse :: Int -> StopTaskResponse

-- | The task that was stopped.
stopTaskResponse_task :: Lens' StopTaskResponse (Maybe Task)

-- | The response's http status code.
stopTaskResponse_httpStatus :: Lens' StopTaskResponse Int
instance GHC.Generics.Generic Amazonka.ECS.StopTask.StopTask
instance GHC.Show.Show Amazonka.ECS.StopTask.StopTask
instance GHC.Read.Read Amazonka.ECS.StopTask.StopTask
instance GHC.Classes.Eq Amazonka.ECS.StopTask.StopTask
instance GHC.Generics.Generic Amazonka.ECS.StopTask.StopTaskResponse
instance GHC.Show.Show Amazonka.ECS.StopTask.StopTaskResponse
instance GHC.Read.Read Amazonka.ECS.StopTask.StopTaskResponse
instance GHC.Classes.Eq Amazonka.ECS.StopTask.StopTaskResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.StopTask.StopTask
instance Control.DeepSeq.NFData Amazonka.ECS.StopTask.StopTaskResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.StopTask.StopTask
instance Control.DeepSeq.NFData Amazonka.ECS.StopTask.StopTask
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.StopTask.StopTask
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.StopTask.StopTask
instance Amazonka.Data.Path.ToPath Amazonka.ECS.StopTask.StopTask
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.StopTask.StopTask


-- | Starts a new task from the specified task definition on the specified
--   container instance or instances.
--   
--   Alternatively, you can use RunTask to place tasks for you. For more
--   information, see <a>Scheduling Tasks</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
module Amazonka.ECS.StartTask

-- | <i>See:</i> <a>newStartTask</a> smart constructor.
data StartTask
StartTask' :: Maybe TaskOverride -> Maybe Text -> Maybe Text -> Maybe PropagateTags -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe NetworkConfiguration -> Maybe Bool -> Maybe [Tag] -> [Text] -> Text -> StartTask

-- | A list of container overrides in JSON format that specify the name of
--   a container in the specified task definition and the overrides it
--   should receive. You can override the default command for a container
--   (that is specified in the task definition or Docker image) with a
--   <tt>command</tt> override. You can also override existing environment
--   variables (that are specified in the task definition or Docker image)
--   on a container or add new environment variables to it with an
--   <tt>environment</tt> override.
--   
--   A total of 8192 characters are allowed for overrides. This limit
--   includes the JSON formatting characters of the override structure.
[$sel:overrides:StartTask'] :: StartTask -> Maybe TaskOverride

-- | The name of the task group to associate with the task. The default
--   value is the family name of the task definition (for example,
--   family:my-family-name).
[$sel:group':StartTask'] :: StartTask -> Maybe Text

-- | The short name or full Amazon Resource Name (ARN) of the cluster on
--   which to start your task. If you do not specify a cluster, the default
--   cluster is assumed.
[$sel:cluster:StartTask'] :: StartTask -> Maybe Text

-- | Specifies whether to propagate the tags from the task definition or
--   the service to the task. If no value is specified, the tags are not
--   propagated.
[$sel:propagateTags:StartTask'] :: StartTask -> Maybe PropagateTags

-- | Specifies whether to enable Amazon ECS managed tags for the task. For
--   more information, see <a>Tagging Your Amazon ECS Resources</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:enableECSManagedTags:StartTask'] :: StartTask -> Maybe Bool

-- | The reference ID to use for the task.
[$sel:referenceId:StartTask'] :: StartTask -> Maybe Text

-- | An optional tag specified when a task is started. For example, if you
--   automatically trigger a task to run a batch process job, you could
--   apply a unique identifier for that job to your task with the
--   <tt>startedBy</tt> parameter. You can then identify which tasks belong
--   to that job by filtering the results of a ListTasks call with the
--   <tt>startedBy</tt> value. Up to 36 letters (uppercase and lowercase),
--   numbers, hyphens, and underscores are allowed.
--   
--   If a task is started by an Amazon ECS service, then the
--   <tt>startedBy</tt> parameter contains the deployment ID of the service
--   that starts it.
[$sel:startedBy:StartTask'] :: StartTask -> Maybe Text

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
[$sel:networkConfiguration:StartTask'] :: StartTask -> Maybe NetworkConfiguration

-- | Whether or not the execute command functionality is enabled for the
--   task. If <tt>true</tt>, this enables execute command functionality on
--   all containers in the task.
[$sel:enableExecuteCommand:StartTask'] :: StartTask -> Maybe Bool

-- | The metadata that you apply to the task to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:StartTask'] :: StartTask -> Maybe [Tag]

-- | The container instance IDs or full ARN entries for the container
--   instances on which you would like to place your task. You can specify
--   up to 10 container instances.
[$sel:containerInstances:StartTask'] :: StartTask -> [Text]

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to start. If a <tt>revision</tt> is
--   not specified, the latest <tt>ACTIVE</tt> revision is used.
[$sel:taskDefinition:StartTask'] :: StartTask -> Text

-- | Create a value of <a>StartTask</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:overrides:StartTask'</a>, <a>startTask_overrides</a> - A list
--   of container overrides in JSON format that specify the name of a
--   container in the specified task definition and the overrides it should
--   receive. You can override the default command for a container (that is
--   specified in the task definition or Docker image) with a
--   <tt>command</tt> override. You can also override existing environment
--   variables (that are specified in the task definition or Docker image)
--   on a container or add new environment variables to it with an
--   <tt>environment</tt> override.
--   
--   A total of 8192 characters are allowed for overrides. This limit
--   includes the JSON formatting characters of the override structure.
--   
--   <a>$sel:group':StartTask'</a>, <a>startTask_group</a> - The name of
--   the task group to associate with the task. The default value is the
--   family name of the task definition (for example,
--   family:my-family-name).
--   
--   <a>$sel:cluster:StartTask'</a>, <a>startTask_cluster</a> - The short
--   name or full Amazon Resource Name (ARN) of the cluster on which to
--   start your task. If you do not specify a cluster, the default cluster
--   is assumed.
--   
--   <a>$sel:propagateTags:StartTask'</a>, <a>startTask_propagateTags</a> -
--   Specifies whether to propagate the tags from the task definition or
--   the service to the task. If no value is specified, the tags are not
--   propagated.
--   
--   <a>$sel:enableECSManagedTags:StartTask'</a>,
--   <a>startTask_enableECSManagedTags</a> - Specifies whether to enable
--   Amazon ECS managed tags for the task. For more information, see
--   <a>Tagging Your Amazon ECS Resources</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
--   
--   <a>$sel:referenceId:StartTask'</a>, <a>startTask_referenceId</a> - The
--   reference ID to use for the task.
--   
--   <a>$sel:startedBy:StartTask'</a>, <a>startTask_startedBy</a> - An
--   optional tag specified when a task is started. For example, if you
--   automatically trigger a task to run a batch process job, you could
--   apply a unique identifier for that job to your task with the
--   <tt>startedBy</tt> parameter. You can then identify which tasks belong
--   to that job by filtering the results of a ListTasks call with the
--   <tt>startedBy</tt> value. Up to 36 letters (uppercase and lowercase),
--   numbers, hyphens, and underscores are allowed.
--   
--   If a task is started by an Amazon ECS service, then the
--   <tt>startedBy</tt> parameter contains the deployment ID of the service
--   that starts it.
--   
--   <a>$sel:networkConfiguration:StartTask'</a>,
--   <a>startTask_networkConfiguration</a> - The VPC subnet and security
--   group configuration for tasks that receive their own elastic network
--   interface by using the <tt>awsvpc</tt> networking mode.
--   
--   <a>$sel:enableExecuteCommand:StartTask'</a>,
--   <a>startTask_enableExecuteCommand</a> - Whether or not the execute
--   command functionality is enabled for the task. If <tt>true</tt>, this
--   enables execute command functionality on all containers in the task.
--   
--   <a>$sel:tags:StartTask'</a>, <a>startTask_tags</a> - The metadata that
--   you apply to the task to help you categorize and organize them. Each
--   tag consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:containerInstances:StartTask'</a>,
--   <a>startTask_containerInstances</a> - The container instance IDs or
--   full ARN entries for the container instances on which you would like
--   to place your task. You can specify up to 10 container instances.
--   
--   <a>$sel:taskDefinition:StartTask'</a>, <a>startTask_taskDefinition</a>
--   - The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to start. If a <tt>revision</tt> is
--   not specified, the latest <tt>ACTIVE</tt> revision is used.
newStartTask :: Text -> StartTask

-- | A list of container overrides in JSON format that specify the name of
--   a container in the specified task definition and the overrides it
--   should receive. You can override the default command for a container
--   (that is specified in the task definition or Docker image) with a
--   <tt>command</tt> override. You can also override existing environment
--   variables (that are specified in the task definition or Docker image)
--   on a container or add new environment variables to it with an
--   <tt>environment</tt> override.
--   
--   A total of 8192 characters are allowed for overrides. This limit
--   includes the JSON formatting characters of the override structure.
startTask_overrides :: Lens' StartTask (Maybe TaskOverride)

-- | The name of the task group to associate with the task. The default
--   value is the family name of the task definition (for example,
--   family:my-family-name).
startTask_group :: Lens' StartTask (Maybe Text)

-- | The short name or full Amazon Resource Name (ARN) of the cluster on
--   which to start your task. If you do not specify a cluster, the default
--   cluster is assumed.
startTask_cluster :: Lens' StartTask (Maybe Text)

-- | Specifies whether to propagate the tags from the task definition or
--   the service to the task. If no value is specified, the tags are not
--   propagated.
startTask_propagateTags :: Lens' StartTask (Maybe PropagateTags)

-- | Specifies whether to enable Amazon ECS managed tags for the task. For
--   more information, see <a>Tagging Your Amazon ECS Resources</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
startTask_enableECSManagedTags :: Lens' StartTask (Maybe Bool)

-- | The reference ID to use for the task.
startTask_referenceId :: Lens' StartTask (Maybe Text)

-- | An optional tag specified when a task is started. For example, if you
--   automatically trigger a task to run a batch process job, you could
--   apply a unique identifier for that job to your task with the
--   <tt>startedBy</tt> parameter. You can then identify which tasks belong
--   to that job by filtering the results of a ListTasks call with the
--   <tt>startedBy</tt> value. Up to 36 letters (uppercase and lowercase),
--   numbers, hyphens, and underscores are allowed.
--   
--   If a task is started by an Amazon ECS service, then the
--   <tt>startedBy</tt> parameter contains the deployment ID of the service
--   that starts it.
startTask_startedBy :: Lens' StartTask (Maybe Text)

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
startTask_networkConfiguration :: Lens' StartTask (Maybe NetworkConfiguration)

-- | Whether or not the execute command functionality is enabled for the
--   task. If <tt>true</tt>, this enables execute command functionality on
--   all containers in the task.
startTask_enableExecuteCommand :: Lens' StartTask (Maybe Bool)

-- | The metadata that you apply to the task to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
startTask_tags :: Lens' StartTask (Maybe [Tag])

-- | The container instance IDs or full ARN entries for the container
--   instances on which you would like to place your task. You can specify
--   up to 10 container instances.
startTask_containerInstances :: Lens' StartTask [Text]

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to start. If a <tt>revision</tt> is
--   not specified, the latest <tt>ACTIVE</tt> revision is used.
startTask_taskDefinition :: Lens' StartTask Text

-- | <i>See:</i> <a>newStartTaskResponse</a> smart constructor.
data StartTaskResponse
StartTaskResponse' :: Maybe [Failure] -> Maybe [Task] -> Int -> StartTaskResponse

-- | Any failures associated with the call.
[$sel:failures:StartTaskResponse'] :: StartTaskResponse -> Maybe [Failure]

-- | A full description of the tasks that were started. Each task that was
--   successfully placed on your container instances is described.
[$sel:tasks:StartTaskResponse'] :: StartTaskResponse -> Maybe [Task]

-- | The response's http status code.
[$sel:httpStatus:StartTaskResponse'] :: StartTaskResponse -> Int

-- | Create a value of <a>StartTaskResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:StartTaskResponse'</a>,
--   <a>startTaskResponse_failures</a> - Any failures associated with the
--   call.
--   
--   <a>$sel:tasks:StartTaskResponse'</a>, <a>startTaskResponse_tasks</a> -
--   A full description of the tasks that were started. Each task that was
--   successfully placed on your container instances is described.
--   
--   <a>$sel:httpStatus:StartTaskResponse'</a>,
--   <a>startTaskResponse_httpStatus</a> - The response's http status code.
newStartTaskResponse :: Int -> StartTaskResponse

-- | Any failures associated with the call.
startTaskResponse_failures :: Lens' StartTaskResponse (Maybe [Failure])

-- | A full description of the tasks that were started. Each task that was
--   successfully placed on your container instances is described.
startTaskResponse_tasks :: Lens' StartTaskResponse (Maybe [Task])

-- | The response's http status code.
startTaskResponse_httpStatus :: Lens' StartTaskResponse Int
instance GHC.Generics.Generic Amazonka.ECS.StartTask.StartTask
instance GHC.Show.Show Amazonka.ECS.StartTask.StartTask
instance GHC.Read.Read Amazonka.ECS.StartTask.StartTask
instance GHC.Classes.Eq Amazonka.ECS.StartTask.StartTask
instance GHC.Generics.Generic Amazonka.ECS.StartTask.StartTaskResponse
instance GHC.Show.Show Amazonka.ECS.StartTask.StartTaskResponse
instance GHC.Read.Read Amazonka.ECS.StartTask.StartTaskResponse
instance GHC.Classes.Eq Amazonka.ECS.StartTask.StartTaskResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.StartTask.StartTask
instance Control.DeepSeq.NFData Amazonka.ECS.StartTask.StartTaskResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.StartTask.StartTask
instance Control.DeepSeq.NFData Amazonka.ECS.StartTask.StartTask
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.StartTask.StartTask
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.StartTask.StartTask
instance Amazonka.Data.Path.ToPath Amazonka.ECS.StartTask.StartTask
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.StartTask.StartTask


-- | Starts a new task using the specified task definition.
--   
--   You can allow Amazon ECS to place tasks for you, or you can customize
--   how Amazon ECS places tasks using placement constraints and placement
--   strategies. For more information, see <a>Scheduling Tasks</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   Alternatively, you can use StartTask to use your own scheduler or
--   place tasks manually on specific container instances.
--   
--   The Amazon ECS API follows an eventual consistency model, due to the
--   distributed nature of the system supporting the API. This means that
--   the result of an API command you run that affects your Amazon ECS
--   resources might not be immediately visible to all subsequent commands
--   you run. Keep this in mind when you carry out an API command that
--   immediately follows a previous API command.
--   
--   To manage eventual consistency, you can do the following:
--   
--   <ul>
--   <li>Confirm the state of the resource before you run a command to
--   modify it. Run the DescribeTasks command using an exponential backoff
--   algorithm to ensure that you allow enough time for the previous
--   command to propagate through the system. To do this, run the
--   DescribeTasks command repeatedly, starting with a couple of seconds of
--   wait time and increasing gradually up to five minutes of wait
--   time.</li>
--   <li>Add wait time between subsequent commands, even if the
--   DescribeTasks command returns an accurate response. Apply an
--   exponential backoff algorithm starting with a couple of seconds of
--   wait time, and increase gradually up to about five minutes of wait
--   time.</li>
--   </ul>
module Amazonka.ECS.RunTask

-- | <i>See:</i> <a>newRunTask</a> smart constructor.
data RunTask
RunTask' :: Maybe TaskOverride -> Maybe Text -> Maybe Text -> Maybe PropagateTags -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe [PlacementConstraint] -> Maybe [PlacementStrategy] -> Maybe Text -> Maybe LaunchType -> Maybe NetworkConfiguration -> Maybe [CapacityProviderStrategyItem] -> Maybe Bool -> Maybe [Tag] -> Text -> RunTask

-- | A list of container overrides in JSON format that specify the name of
--   a container in the specified task definition and the overrides it
--   should receive. You can override the default command for a container
--   (that is specified in the task definition or Docker image) with a
--   <tt>command</tt> override. You can also override existing environment
--   variables (that are specified in the task definition or Docker image)
--   on a container or add new environment variables to it with an
--   <tt>environment</tt> override.
--   
--   A total of 8192 characters are allowed for overrides. This limit
--   includes the JSON formatting characters of the override structure.
[$sel:overrides:RunTask'] :: RunTask -> Maybe TaskOverride

-- | The name of the task group to associate with the task. The default
--   value is the family name of the task definition (for example,
--   <tt>family:my-family-name</tt>).
[$sel:group':RunTask'] :: RunTask -> Maybe Text

-- | The short name or full Amazon Resource Name (ARN) of the cluster on
--   which to run your task. If you do not specify a cluster, the default
--   cluster is assumed.
[$sel:cluster:RunTask'] :: RunTask -> Maybe Text

-- | Specifies whether to propagate the tags from the task definition to
--   the task. If no value is specified, the tags are not propagated. Tags
--   can only be propagated to the task during task creation. To add tags
--   to a task after task creation, use the TagResource API action.
--   
--   An error will be received if you specify the <tt>SERVICE</tt> option
--   when running a task.
[$sel:propagateTags:RunTask'] :: RunTask -> Maybe PropagateTags

-- | The platform version the task should use. A platform version is only
--   specified for tasks hosted on Fargate. If one is not specified, the
--   <tt>LATEST</tt> platform version is used by default. For more
--   information, see <a>Fargate platform versions</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:platformVersion:RunTask'] :: RunTask -> Maybe Text

-- | Specifies whether to enable Amazon ECS managed tags for the task. For
--   more information, see <a>Tagging Your Amazon ECS Resources</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:enableECSManagedTags:RunTask'] :: RunTask -> Maybe Bool

-- | The number of instantiations of the specified task to place on your
--   cluster. You can specify up to 10 tasks per call.
[$sel:count:RunTask'] :: RunTask -> Maybe Int

-- | The reference ID to use for the task. The reference ID can have a
--   maximum length of 1024 characters.
[$sel:referenceId:RunTask'] :: RunTask -> Maybe Text

-- | An array of placement constraint objects to use for the task. You can
--   specify up to 10 constraints per task (including constraints in the
--   task definition and those specified at runtime).
[$sel:placementConstraints:RunTask'] :: RunTask -> Maybe [PlacementConstraint]

-- | The placement strategy objects to use for the task. You can specify a
--   maximum of 5 strategy rules per task.
[$sel:placementStrategy:RunTask'] :: RunTask -> Maybe [PlacementStrategy]

-- | An optional tag specified when a task is started. For example, if you
--   automatically trigger a task to run a batch process job, you could
--   apply a unique identifier for that job to your task with the
--   <tt>startedBy</tt> parameter. You can then identify which tasks belong
--   to that job by filtering the results of a ListTasks call with the
--   <tt>startedBy</tt> value. Up to 36 letters (uppercase and lowercase),
--   numbers, hyphens, and underscores are allowed.
--   
--   If a task is started by an Amazon ECS service, then the
--   <tt>startedBy</tt> parameter contains the deployment ID of the service
--   that starts it.
[$sel:startedBy:RunTask'] :: RunTask -> Maybe Text

-- | The infrastructure on which to run your standalone task. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>FARGATE</tt> launch type runs your tasks on Fargate On-Demand
--   infrastructure.
--   
--   Fargate Spot infrastructure is available for use but a capacity
--   provider strategy must be used. For more information, see <a>Fargate
--   capacity providers</a> in the <i>Amazon ECS User Guide for
--   Fargate</i>.
--   
--   The <tt>EC2</tt> launch type runs your tasks on Amazon EC2 instances
--   registered to your cluster.
--   
--   The <tt>EXTERNAL</tt> launch type runs your tasks on your on-premise
--   server or virtual machine (VM) capacity registered to your cluster.
--   
--   A task can use either a launch type or a capacity provider strategy.
--   If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
--   
--   When you use cluster auto scaling, you must specify
--   <tt>capacityProviderStrategy</tt> and not <tt>launchType</tt>.
[$sel:launchType:RunTask'] :: RunTask -> Maybe LaunchType

-- | The network configuration for the task. This parameter is required for
--   task definitions that use the <tt>awsvpc</tt> network mode to receive
--   their own elastic network interface, and it is not supported for other
--   network modes. For more information, see <a>Task networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
[$sel:networkConfiguration:RunTask'] :: RunTask -> Maybe NetworkConfiguration

-- | The capacity provider strategy to use for the task.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   When you use cluster auto scaling, you must specify
--   <tt>capacityProviderStrategy</tt> and not <tt>launchType</tt>.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
[$sel:capacityProviderStrategy:RunTask'] :: RunTask -> Maybe [CapacityProviderStrategyItem]

-- | Whether or not to enable the execute command functionality for the
--   containers in this task. If <tt>true</tt>, this enables execute
--   command functionality on all containers in the task.
[$sel:enableExecuteCommand:RunTask'] :: RunTask -> Maybe Bool

-- | The metadata that you apply to the task to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:RunTask'] :: RunTask -> Maybe [Tag]

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to run. If a <tt>revision</tt> is
--   not specified, the latest <tt>ACTIVE</tt> revision is used.
--   
--   The full ARN value must match the value that you specified ias the
--   <tt>Resource</tt> of the IAM principal's permissions policy. For
--   example, if the <tt>Resource</tt> is
--   arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:*,
--   the <tt>taskDefinition</tt> ARN value must be
--   <tt>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName</tt>.
[$sel:taskDefinition:RunTask'] :: RunTask -> Text

-- | Create a value of <a>RunTask</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:overrides:RunTask'</a>, <a>runTask_overrides</a> - A list of
--   container overrides in JSON format that specify the name of a
--   container in the specified task definition and the overrides it should
--   receive. You can override the default command for a container (that is
--   specified in the task definition or Docker image) with a
--   <tt>command</tt> override. You can also override existing environment
--   variables (that are specified in the task definition or Docker image)
--   on a container or add new environment variables to it with an
--   <tt>environment</tt> override.
--   
--   A total of 8192 characters are allowed for overrides. This limit
--   includes the JSON formatting characters of the override structure.
--   
--   <a>$sel:group':RunTask'</a>, <a>runTask_group</a> - The name of the
--   task group to associate with the task. The default value is the family
--   name of the task definition (for example,
--   <tt>family:my-family-name</tt>).
--   
--   <a>$sel:cluster:RunTask'</a>, <a>runTask_cluster</a> - The short name
--   or full Amazon Resource Name (ARN) of the cluster on which to run your
--   task. If you do not specify a cluster, the default cluster is assumed.
--   
--   <a>$sel:propagateTags:RunTask'</a>, <a>runTask_propagateTags</a> -
--   Specifies whether to propagate the tags from the task definition to
--   the task. If no value is specified, the tags are not propagated. Tags
--   can only be propagated to the task during task creation. To add tags
--   to a task after task creation, use the TagResource API action.
--   
--   An error will be received if you specify the <tt>SERVICE</tt> option
--   when running a task.
--   
--   <a>$sel:platformVersion:RunTask'</a>, <a>runTask_platformVersion</a> -
--   The platform version the task should use. A platform version is only
--   specified for tasks hosted on Fargate. If one is not specified, the
--   <tt>LATEST</tt> platform version is used by default. For more
--   information, see <a>Fargate platform versions</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:enableECSManagedTags:RunTask'</a>,
--   <a>runTask_enableECSManagedTags</a> - Specifies whether to enable
--   Amazon ECS managed tags for the task. For more information, see
--   <a>Tagging Your Amazon ECS Resources</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
--   
--   <a>$sel:count:RunTask'</a>, <a>runTask_count</a> - The number of
--   instantiations of the specified task to place on your cluster. You can
--   specify up to 10 tasks per call.
--   
--   <a>$sel:referenceId:RunTask'</a>, <a>runTask_referenceId</a> - The
--   reference ID to use for the task. The reference ID can have a maximum
--   length of 1024 characters.
--   
--   <a>$sel:placementConstraints:RunTask'</a>,
--   <a>runTask_placementConstraints</a> - An array of placement constraint
--   objects to use for the task. You can specify up to 10 constraints per
--   task (including constraints in the task definition and those specified
--   at runtime).
--   
--   <a>$sel:placementStrategy:RunTask'</a>,
--   <a>runTask_placementStrategy</a> - The placement strategy objects to
--   use for the task. You can specify a maximum of 5 strategy rules per
--   task.
--   
--   <a>$sel:startedBy:RunTask'</a>, <a>runTask_startedBy</a> - An optional
--   tag specified when a task is started. For example, if you
--   automatically trigger a task to run a batch process job, you could
--   apply a unique identifier for that job to your task with the
--   <tt>startedBy</tt> parameter. You can then identify which tasks belong
--   to that job by filtering the results of a ListTasks call with the
--   <tt>startedBy</tt> value. Up to 36 letters (uppercase and lowercase),
--   numbers, hyphens, and underscores are allowed.
--   
--   If a task is started by an Amazon ECS service, then the
--   <tt>startedBy</tt> parameter contains the deployment ID of the service
--   that starts it.
--   
--   <a>$sel:launchType:RunTask'</a>, <a>runTask_launchType</a> - The
--   infrastructure on which to run your standalone task. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>FARGATE</tt> launch type runs your tasks on Fargate On-Demand
--   infrastructure.
--   
--   Fargate Spot infrastructure is available for use but a capacity
--   provider strategy must be used. For more information, see <a>Fargate
--   capacity providers</a> in the <i>Amazon ECS User Guide for
--   Fargate</i>.
--   
--   The <tt>EC2</tt> launch type runs your tasks on Amazon EC2 instances
--   registered to your cluster.
--   
--   The <tt>EXTERNAL</tt> launch type runs your tasks on your on-premise
--   server or virtual machine (VM) capacity registered to your cluster.
--   
--   A task can use either a launch type or a capacity provider strategy.
--   If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
--   
--   When you use cluster auto scaling, you must specify
--   <tt>capacityProviderStrategy</tt> and not <tt>launchType</tt>.
--   
--   <a>$sel:networkConfiguration:RunTask'</a>,
--   <a>runTask_networkConfiguration</a> - The network configuration for
--   the task. This parameter is required for task definitions that use the
--   <tt>awsvpc</tt> network mode to receive their own elastic network
--   interface, and it is not supported for other network modes. For more
--   information, see <a>Task networking</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
--   
--   <a>$sel:capacityProviderStrategy:RunTask'</a>,
--   <a>runTask_capacityProviderStrategy</a> - The capacity provider
--   strategy to use for the task.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   When you use cluster auto scaling, you must specify
--   <tt>capacityProviderStrategy</tt> and not <tt>launchType</tt>.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
--   
--   <a>$sel:enableExecuteCommand:RunTask'</a>,
--   <a>runTask_enableExecuteCommand</a> - Whether or not to enable the
--   execute command functionality for the containers in this task. If
--   <tt>true</tt>, this enables execute command functionality on all
--   containers in the task.
--   
--   <a>$sel:tags:RunTask'</a>, <a>runTask_tags</a> - The metadata that you
--   apply to the task to help you categorize and organize them. Each tag
--   consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:taskDefinition:RunTask'</a>, <a>runTask_taskDefinition</a> -
--   The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to run. If a <tt>revision</tt> is
--   not specified, the latest <tt>ACTIVE</tt> revision is used.
--   
--   The full ARN value must match the value that you specified ias the
--   <tt>Resource</tt> of the IAM principal's permissions policy. For
--   example, if the <tt>Resource</tt> is
--   arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:*,
--   the <tt>taskDefinition</tt> ARN value must be
--   <tt>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName</tt>.
newRunTask :: Text -> RunTask

-- | A list of container overrides in JSON format that specify the name of
--   a container in the specified task definition and the overrides it
--   should receive. You can override the default command for a container
--   (that is specified in the task definition or Docker image) with a
--   <tt>command</tt> override. You can also override existing environment
--   variables (that are specified in the task definition or Docker image)
--   on a container or add new environment variables to it with an
--   <tt>environment</tt> override.
--   
--   A total of 8192 characters are allowed for overrides. This limit
--   includes the JSON formatting characters of the override structure.
runTask_overrides :: Lens' RunTask (Maybe TaskOverride)

-- | The name of the task group to associate with the task. The default
--   value is the family name of the task definition (for example,
--   <tt>family:my-family-name</tt>).
runTask_group :: Lens' RunTask (Maybe Text)

-- | The short name or full Amazon Resource Name (ARN) of the cluster on
--   which to run your task. If you do not specify a cluster, the default
--   cluster is assumed.
runTask_cluster :: Lens' RunTask (Maybe Text)

-- | Specifies whether to propagate the tags from the task definition to
--   the task. If no value is specified, the tags are not propagated. Tags
--   can only be propagated to the task during task creation. To add tags
--   to a task after task creation, use the TagResource API action.
--   
--   An error will be received if you specify the <tt>SERVICE</tt> option
--   when running a task.
runTask_propagateTags :: Lens' RunTask (Maybe PropagateTags)

-- | The platform version the task should use. A platform version is only
--   specified for tasks hosted on Fargate. If one is not specified, the
--   <tt>LATEST</tt> platform version is used by default. For more
--   information, see <a>Fargate platform versions</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
runTask_platformVersion :: Lens' RunTask (Maybe Text)

-- | Specifies whether to enable Amazon ECS managed tags for the task. For
--   more information, see <a>Tagging Your Amazon ECS Resources</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
runTask_enableECSManagedTags :: Lens' RunTask (Maybe Bool)

-- | The number of instantiations of the specified task to place on your
--   cluster. You can specify up to 10 tasks per call.
runTask_count :: Lens' RunTask (Maybe Int)

-- | The reference ID to use for the task. The reference ID can have a
--   maximum length of 1024 characters.
runTask_referenceId :: Lens' RunTask (Maybe Text)

-- | An array of placement constraint objects to use for the task. You can
--   specify up to 10 constraints per task (including constraints in the
--   task definition and those specified at runtime).
runTask_placementConstraints :: Lens' RunTask (Maybe [PlacementConstraint])

-- | The placement strategy objects to use for the task. You can specify a
--   maximum of 5 strategy rules per task.
runTask_placementStrategy :: Lens' RunTask (Maybe [PlacementStrategy])

-- | An optional tag specified when a task is started. For example, if you
--   automatically trigger a task to run a batch process job, you could
--   apply a unique identifier for that job to your task with the
--   <tt>startedBy</tt> parameter. You can then identify which tasks belong
--   to that job by filtering the results of a ListTasks call with the
--   <tt>startedBy</tt> value. Up to 36 letters (uppercase and lowercase),
--   numbers, hyphens, and underscores are allowed.
--   
--   If a task is started by an Amazon ECS service, then the
--   <tt>startedBy</tt> parameter contains the deployment ID of the service
--   that starts it.
runTask_startedBy :: Lens' RunTask (Maybe Text)

-- | The infrastructure on which to run your standalone task. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>FARGATE</tt> launch type runs your tasks on Fargate On-Demand
--   infrastructure.
--   
--   Fargate Spot infrastructure is available for use but a capacity
--   provider strategy must be used. For more information, see <a>Fargate
--   capacity providers</a> in the <i>Amazon ECS User Guide for
--   Fargate</i>.
--   
--   The <tt>EC2</tt> launch type runs your tasks on Amazon EC2 instances
--   registered to your cluster.
--   
--   The <tt>EXTERNAL</tt> launch type runs your tasks on your on-premise
--   server or virtual machine (VM) capacity registered to your cluster.
--   
--   A task can use either a launch type or a capacity provider strategy.
--   If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
--   
--   When you use cluster auto scaling, you must specify
--   <tt>capacityProviderStrategy</tt> and not <tt>launchType</tt>.
runTask_launchType :: Lens' RunTask (Maybe LaunchType)

-- | The network configuration for the task. This parameter is required for
--   task definitions that use the <tt>awsvpc</tt> network mode to receive
--   their own elastic network interface, and it is not supported for other
--   network modes. For more information, see <a>Task networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
runTask_networkConfiguration :: Lens' RunTask (Maybe NetworkConfiguration)

-- | The capacity provider strategy to use for the task.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   When you use cluster auto scaling, you must specify
--   <tt>capacityProviderStrategy</tt> and not <tt>launchType</tt>.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
runTask_capacityProviderStrategy :: Lens' RunTask (Maybe [CapacityProviderStrategyItem])

-- | Whether or not to enable the execute command functionality for the
--   containers in this task. If <tt>true</tt>, this enables execute
--   command functionality on all containers in the task.
runTask_enableExecuteCommand :: Lens' RunTask (Maybe Bool)

-- | The metadata that you apply to the task to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
runTask_tags :: Lens' RunTask (Maybe [Tag])

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to run. If a <tt>revision</tt> is
--   not specified, the latest <tt>ACTIVE</tt> revision is used.
--   
--   The full ARN value must match the value that you specified ias the
--   <tt>Resource</tt> of the IAM principal's permissions policy. For
--   example, if the <tt>Resource</tt> is
--   arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:*,
--   the <tt>taskDefinition</tt> ARN value must be
--   <tt>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName</tt>.
runTask_taskDefinition :: Lens' RunTask Text

-- | <i>See:</i> <a>newRunTaskResponse</a> smart constructor.
data RunTaskResponse
RunTaskResponse' :: Maybe [Failure] -> Maybe [Task] -> Int -> RunTaskResponse

-- | Any failures associated with the call.
[$sel:failures:RunTaskResponse'] :: RunTaskResponse -> Maybe [Failure]

-- | A full description of the tasks that were run. The tasks that were
--   successfully placed on your cluster are described here.
[$sel:tasks:RunTaskResponse'] :: RunTaskResponse -> Maybe [Task]

-- | The response's http status code.
[$sel:httpStatus:RunTaskResponse'] :: RunTaskResponse -> Int

-- | Create a value of <a>RunTaskResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:RunTaskResponse'</a>, <a>runTaskResponse_failures</a>
--   - Any failures associated with the call.
--   
--   <a>$sel:tasks:RunTaskResponse'</a>, <a>runTaskResponse_tasks</a> - A
--   full description of the tasks that were run. The tasks that were
--   successfully placed on your cluster are described here.
--   
--   <a>$sel:httpStatus:RunTaskResponse'</a>,
--   <a>runTaskResponse_httpStatus</a> - The response's http status code.
newRunTaskResponse :: Int -> RunTaskResponse

-- | Any failures associated with the call.
runTaskResponse_failures :: Lens' RunTaskResponse (Maybe [Failure])

-- | A full description of the tasks that were run. The tasks that were
--   successfully placed on your cluster are described here.
runTaskResponse_tasks :: Lens' RunTaskResponse (Maybe [Task])

-- | The response's http status code.
runTaskResponse_httpStatus :: Lens' RunTaskResponse Int
instance GHC.Generics.Generic Amazonka.ECS.RunTask.RunTask
instance GHC.Show.Show Amazonka.ECS.RunTask.RunTask
instance GHC.Read.Read Amazonka.ECS.RunTask.RunTask
instance GHC.Classes.Eq Amazonka.ECS.RunTask.RunTask
instance GHC.Generics.Generic Amazonka.ECS.RunTask.RunTaskResponse
instance GHC.Show.Show Amazonka.ECS.RunTask.RunTaskResponse
instance GHC.Read.Read Amazonka.ECS.RunTask.RunTaskResponse
instance GHC.Classes.Eq Amazonka.ECS.RunTask.RunTaskResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.RunTask.RunTask
instance Control.DeepSeq.NFData Amazonka.ECS.RunTask.RunTaskResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.RunTask.RunTask
instance Control.DeepSeq.NFData Amazonka.ECS.RunTask.RunTask
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.RunTask.RunTask
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.RunTask.RunTask
instance Amazonka.Data.Path.ToPath Amazonka.ECS.RunTask.RunTask
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.RunTask.RunTask


-- | Registers a new task definition from the supplied <tt>family</tt> and
--   <tt>containerDefinitions</tt>. Optionally, you can add data volumes to
--   your containers with the <tt>volumes</tt> parameter. For more
--   information about task definition parameters and defaults, see
--   <a>Amazon ECS Task Definitions</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   You can specify an IAM role for your task with the
--   <tt>taskRoleArn</tt> parameter. When you specify an IAM role for a
--   task, its containers can then use the latest versions of the CLI or
--   SDKs to make API requests to the Amazon Web Services services that are
--   specified in the IAM policy associated with the role. For more
--   information, see <a>IAM Roles for Tasks</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
--   
--   You can specify a Docker networking mode for the containers in your
--   task definition with the <tt>networkMode</tt> parameter. The available
--   network modes correspond to those described in <a>Network settings</a>
--   in the Docker run reference. If you specify the <tt>awsvpc</tt>
--   network mode, the task is allocated an elastic network interface, and
--   you must specify a NetworkConfiguration when you create a service or
--   run a task with the task definition. For more information, see <a>Task
--   Networking</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
module Amazonka.ECS.RegisterTaskDefinition

-- | <i>See:</i> <a>newRegisterTaskDefinition</a> smart constructor.
data RegisterTaskDefinition
RegisterTaskDefinition' :: Maybe [InferenceAccelerator] -> Maybe Text -> Maybe [Compatibility] -> Maybe EphemeralStorage -> Maybe PidMode -> Maybe IpcMode -> Maybe Text -> Maybe ProxyConfiguration -> Maybe Text -> Maybe [TaskDefinitionPlacementConstraint] -> Maybe NetworkMode -> Maybe [Volume] -> Maybe Text -> Maybe [Tag] -> Text -> [ContainerDefinition] -> RegisterTaskDefinition

-- | The Elastic Inference accelerators to use for the containers in the
--   task.
[$sel:inferenceAccelerators:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe [InferenceAccelerator]

-- | The Amazon Resource Name (ARN) of the task execution role that grants
--   the Amazon ECS container agent permission to make Amazon Web Services
--   API calls on your behalf. The task execution IAM role is required
--   depending on the requirements of your task. For more information, see
--   <a>Amazon ECS task execution IAM role</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
[$sel:executionRoleArn:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe Text

-- | The task launch type that Amazon ECS should validate the task
--   definition against. A client exception is returned if the task
--   definition doesn't validate against the compatibilities specified. If
--   no value is specified, the parameter is omitted from the response.
[$sel:requiresCompatibilities:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe [Compatibility]

-- | The amount of ephemeral storage to allocate for the task. This
--   parameter is used to expand the total amount of ephemeral storage
--   available, beyond the default amount, for tasks hosted on Fargate. For
--   more information, see <a>Fargate task storage</a> in the <i>Amazon ECS
--   User Guide for Fargate</i>.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
[$sel:ephemeralStorage:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe EphemeralStorage

-- | The process namespace to use for the containers in the task. The valid
--   values are <tt>host</tt> or <tt>task</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> PID mode on the same container instance share the same
--   process namespace with the host Amazon EC2 instance. If <tt>task</tt>
--   is specified, all containers within the specified task share the same
--   process namespace. If no value is specified, the default is a private
--   namespace. For more information, see <a>PID settings</a> in the
--   <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
[$sel:pidMode:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe PidMode

-- | The IPC resource namespace to use for the containers in the task. The
--   valid values are <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If
--   <tt>host</tt> is specified, then all containers within the tasks that
--   specified the <tt>host</tt> IPC mode on the same container instance
--   share the same IPC resources with the host Amazon EC2 instance. If
--   <tt>task</tt> is specified, all containers within the specified task
--   share the same IPC resources. If <tt>none</tt> is specified, then IPC
--   resources within the containers of a task are private and not shared
--   with other containers in a task or on the container instance. If no
--   value is specified, then the IPC resource namespace sharing depends on
--   the Docker daemon setting on the container instance. For more
--   information, see <a>IPC settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
[$sel:ipcMode:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe IpcMode

-- | The amount of memory (in MiB) used by the task. It can be expressed as
--   an integer using MiB, for example <tt>1024</tt>, or as a string using
--   GB, for example <tt>1GB</tt> or <tt>1 GB</tt>, in a task definition.
--   String values are converted to an integer indicating the MiB when the
--   task definition is registered.
--   
--   Task-level CPU and memory parameters are ignored for Windows
--   containers. We recommend specifying container-level resources for
--   Windows containers.
--   
--   If using the EC2 launch type, this field is optional.
--   
--   If using the Fargate launch type, this field is required and you must
--   use one of the following values, which determines your range of
--   supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
[$sel:memory:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe Text

-- | The configuration details for the App Mesh proxy.
--   
--   For tasks hosted on Amazon EC2 instances, the container instances
--   require at least version <tt>1.26.0</tt> of the container agent and at
--   least version <tt>1.26.0-1</tt> of the <tt>ecs-init</tt> package to
--   enable a proxy configuration. If your container instances are launched
--   from the Amazon ECS-optimized AMI version <tt>20190301</tt> or later,
--   then they contain the required versions of the container agent and
--   <tt>ecs-init</tt>. For more information, see <a>Amazon ECS-optimized
--   AMI versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:proxyConfiguration:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe ProxyConfiguration

-- | The short name or full Amazon Resource Name (ARN) of the IAM role that
--   containers in this task can assume. All containers in this task are
--   granted the permissions that are specified in this role. For more
--   information, see <a>IAM Roles for Tasks</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
[$sel:taskRoleArn:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe Text

-- | An array of placement constraint objects to use for the task. You can
--   specify a maximum of 10 constraints per task (this limit includes
--   constraints in the task definition and those specified at runtime).
[$sel:placementConstraints:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe [TaskDefinitionPlacementConstraint]

-- | The Docker networking mode to use for the containers in the task. The
--   valid values are <tt>none</tt>, <tt>bridge</tt>, <tt>awsvpc</tt>, and
--   <tt>host</tt>. If no network mode is specified, the default is
--   <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
[$sel:networkMode:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe NetworkMode

-- | A list of volume definitions in JSON format that containers in your
--   task may use.
[$sel:volumes:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe [Volume]

-- | The number of CPU units used by the task. It can be expressed as an
--   integer using CPU units, for example <tt>1024</tt>, or as a string
--   using vCPUs, for example <tt>1 vCPU</tt> or <tt>1 vcpu</tt>, in a task
--   definition. String values are converted to an integer indicating the
--   CPU units when the task definition is registered.
--   
--   Task-level CPU and memory parameters are ignored for Windows
--   containers. We recommend specifying container-level resources for
--   Windows containers.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
[$sel:cpu:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe Text

-- | The metadata that you apply to the task definition to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Maybe [Tag]

-- | You must specify a <tt>family</tt> for a task definition, which allows
--   you to track multiple versions of the same task definition. The
--   <tt>family</tt> is used as a name for your task definition. Up to 255
--   letters (uppercase and lowercase), numbers, underscores, and hyphens
--   are allowed.
[$sel:family:RegisterTaskDefinition'] :: RegisterTaskDefinition -> Text

-- | A list of container definitions in JSON format that describe the
--   different containers that make up your task.
[$sel:containerDefinitions:RegisterTaskDefinition'] :: RegisterTaskDefinition -> [ContainerDefinition]

-- | Create a value of <a>RegisterTaskDefinition</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:inferenceAccelerators:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_inferenceAccelerators</a> - The Elastic
--   Inference accelerators to use for the containers in the task.
--   
--   <a>$sel:executionRoleArn:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_executionRoleArn</a> - The Amazon Resource
--   Name (ARN) of the task execution role that grants the Amazon ECS
--   container agent permission to make Amazon Web Services API calls on
--   your behalf. The task execution IAM role is required depending on the
--   requirements of your task. For more information, see <a>Amazon ECS
--   task execution IAM role</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <a>$sel:requiresCompatibilities:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_requiresCompatibilities</a> - The task
--   launch type that Amazon ECS should validate the task definition
--   against. A client exception is returned if the task definition doesn't
--   validate against the compatibilities specified. If no value is
--   specified, the parameter is omitted from the response.
--   
--   <a>$sel:ephemeralStorage:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_ephemeralStorage</a> - The amount of
--   ephemeral storage to allocate for the task. This parameter is used to
--   expand the total amount of ephemeral storage available, beyond the
--   default amount, for tasks hosted on Fargate. For more information, see
--   <a>Fargate task storage</a> in the <i>Amazon ECS User Guide for
--   Fargate</i>.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
--   
--   <a>$sel:pidMode:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_pidMode</a> - The process namespace to use
--   for the containers in the task. The valid values are <tt>host</tt> or
--   <tt>task</tt>. If <tt>host</tt> is specified, then all containers
--   within the tasks that specified the <tt>host</tt> PID mode on the same
--   container instance share the same process namespace with the host
--   Amazon EC2 instance. If <tt>task</tt> is specified, all containers
--   within the specified task share the same process namespace. If no
--   value is specified, the default is a private namespace. For more
--   information, see <a>PID settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:ipcMode:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_ipcMode</a> - The IPC resource namespace to
--   use for the containers in the task. The valid values are
--   <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> IPC mode on the same container instance share the same
--   IPC resources with the host Amazon EC2 instance. If <tt>task</tt> is
--   specified, all containers within the specified task share the same IPC
--   resources. If <tt>none</tt> is specified, then IPC resources within
--   the containers of a task are private and not shared with other
--   containers in a task or on the container instance. If no value is
--   specified, then the IPC resource namespace sharing depends on the
--   Docker daemon setting on the container instance. For more information,
--   see <a>IPC settings</a> in the <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:memory:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_memory</a> - The amount of memory (in MiB)
--   used by the task. It can be expressed as an integer using MiB, for
--   example <tt>1024</tt>, or as a string using GB, for example
--   <tt>1GB</tt> or <tt>1 GB</tt>, in a task definition. String values are
--   converted to an integer indicating the MiB when the task definition is
--   registered.
--   
--   Task-level CPU and memory parameters are ignored for Windows
--   containers. We recommend specifying container-level resources for
--   Windows containers.
--   
--   If using the EC2 launch type, this field is optional.
--   
--   If using the Fargate launch type, this field is required and you must
--   use one of the following values, which determines your range of
--   supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
--   
--   <a>$sel:proxyConfiguration:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_proxyConfiguration</a> - The configuration
--   details for the App Mesh proxy.
--   
--   For tasks hosted on Amazon EC2 instances, the container instances
--   require at least version <tt>1.26.0</tt> of the container agent and at
--   least version <tt>1.26.0-1</tt> of the <tt>ecs-init</tt> package to
--   enable a proxy configuration. If your container instances are launched
--   from the Amazon ECS-optimized AMI version <tt>20190301</tt> or later,
--   then they contain the required versions of the container agent and
--   <tt>ecs-init</tt>. For more information, see <a>Amazon ECS-optimized
--   AMI versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:taskRoleArn:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_taskRoleArn</a> - The short name or full
--   Amazon Resource Name (ARN) of the IAM role that containers in this
--   task can assume. All containers in this task are granted the
--   permissions that are specified in this role. For more information, see
--   <a>IAM Roles for Tasks</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <a>$sel:placementConstraints:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_placementConstraints</a> - An array of
--   placement constraint objects to use for the task. You can specify a
--   maximum of 10 constraints per task (this limit includes constraints in
--   the task definition and those specified at runtime).
--   
--   <a>$sel:networkMode:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_networkMode</a> - The Docker networking mode
--   to use for the containers in the task. The valid values are
--   <tt>none</tt>, <tt>bridge</tt>, <tt>awsvpc</tt>, and <tt>host</tt>. If
--   no network mode is specified, the default is <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
--   
--   <a>$sel:volumes:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_volumes</a> - A list of volume definitions
--   in JSON format that containers in your task may use.
--   
--   <a>$sel:cpu:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_cpu</a> - The number of CPU units used by
--   the task. It can be expressed as an integer using CPU units, for
--   example <tt>1024</tt>, or as a string using vCPUs, for example <tt>1
--   vCPU</tt> or <tt>1 vcpu</tt>, in a task definition. String values are
--   converted to an integer indicating the CPU units when the task
--   definition is registered.
--   
--   Task-level CPU and memory parameters are ignored for Windows
--   containers. We recommend specifying container-level resources for
--   Windows containers.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
--   
--   <a>$sel:tags:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_tags</a> - The metadata that you apply to
--   the task definition to help you categorize and organize them. Each tag
--   consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:family:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_family</a> - You must specify a
--   <tt>family</tt> for a task definition, which allows you to track
--   multiple versions of the same task definition. The <tt>family</tt> is
--   used as a name for your task definition. Up to 255 letters (uppercase
--   and lowercase), numbers, underscores, and hyphens are allowed.
--   
--   <a>$sel:containerDefinitions:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_containerDefinitions</a> - A list of
--   container definitions in JSON format that describe the different
--   containers that make up your task.
newRegisterTaskDefinition :: Text -> RegisterTaskDefinition

-- | The Elastic Inference accelerators to use for the containers in the
--   task.
registerTaskDefinition_inferenceAccelerators :: Lens' RegisterTaskDefinition (Maybe [InferenceAccelerator])

-- | The Amazon Resource Name (ARN) of the task execution role that grants
--   the Amazon ECS container agent permission to make Amazon Web Services
--   API calls on your behalf. The task execution IAM role is required
--   depending on the requirements of your task. For more information, see
--   <a>Amazon ECS task execution IAM role</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
registerTaskDefinition_executionRoleArn :: Lens' RegisterTaskDefinition (Maybe Text)

-- | The task launch type that Amazon ECS should validate the task
--   definition against. A client exception is returned if the task
--   definition doesn't validate against the compatibilities specified. If
--   no value is specified, the parameter is omitted from the response.
registerTaskDefinition_requiresCompatibilities :: Lens' RegisterTaskDefinition (Maybe [Compatibility])

-- | The amount of ephemeral storage to allocate for the task. This
--   parameter is used to expand the total amount of ephemeral storage
--   available, beyond the default amount, for tasks hosted on Fargate. For
--   more information, see <a>Fargate task storage</a> in the <i>Amazon ECS
--   User Guide for Fargate</i>.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
registerTaskDefinition_ephemeralStorage :: Lens' RegisterTaskDefinition (Maybe EphemeralStorage)

-- | The process namespace to use for the containers in the task. The valid
--   values are <tt>host</tt> or <tt>task</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> PID mode on the same container instance share the same
--   process namespace with the host Amazon EC2 instance. If <tt>task</tt>
--   is specified, all containers within the specified task share the same
--   process namespace. If no value is specified, the default is a private
--   namespace. For more information, see <a>PID settings</a> in the
--   <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
registerTaskDefinition_pidMode :: Lens' RegisterTaskDefinition (Maybe PidMode)

-- | The IPC resource namespace to use for the containers in the task. The
--   valid values are <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If
--   <tt>host</tt> is specified, then all containers within the tasks that
--   specified the <tt>host</tt> IPC mode on the same container instance
--   share the same IPC resources with the host Amazon EC2 instance. If
--   <tt>task</tt> is specified, all containers within the specified task
--   share the same IPC resources. If <tt>none</tt> is specified, then IPC
--   resources within the containers of a task are private and not shared
--   with other containers in a task or on the container instance. If no
--   value is specified, then the IPC resource namespace sharing depends on
--   the Docker daemon setting on the container instance. For more
--   information, see <a>IPC settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
registerTaskDefinition_ipcMode :: Lens' RegisterTaskDefinition (Maybe IpcMode)

-- | The amount of memory (in MiB) used by the task. It can be expressed as
--   an integer using MiB, for example <tt>1024</tt>, or as a string using
--   GB, for example <tt>1GB</tt> or <tt>1 GB</tt>, in a task definition.
--   String values are converted to an integer indicating the MiB when the
--   task definition is registered.
--   
--   Task-level CPU and memory parameters are ignored for Windows
--   containers. We recommend specifying container-level resources for
--   Windows containers.
--   
--   If using the EC2 launch type, this field is optional.
--   
--   If using the Fargate launch type, this field is required and you must
--   use one of the following values, which determines your range of
--   supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
registerTaskDefinition_memory :: Lens' RegisterTaskDefinition (Maybe Text)

-- | The configuration details for the App Mesh proxy.
--   
--   For tasks hosted on Amazon EC2 instances, the container instances
--   require at least version <tt>1.26.0</tt> of the container agent and at
--   least version <tt>1.26.0-1</tt> of the <tt>ecs-init</tt> package to
--   enable a proxy configuration. If your container instances are launched
--   from the Amazon ECS-optimized AMI version <tt>20190301</tt> or later,
--   then they contain the required versions of the container agent and
--   <tt>ecs-init</tt>. For more information, see <a>Amazon ECS-optimized
--   AMI versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
registerTaskDefinition_proxyConfiguration :: Lens' RegisterTaskDefinition (Maybe ProxyConfiguration)

-- | The short name or full Amazon Resource Name (ARN) of the IAM role that
--   containers in this task can assume. All containers in this task are
--   granted the permissions that are specified in this role. For more
--   information, see <a>IAM Roles for Tasks</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
registerTaskDefinition_taskRoleArn :: Lens' RegisterTaskDefinition (Maybe Text)

-- | An array of placement constraint objects to use for the task. You can
--   specify a maximum of 10 constraints per task (this limit includes
--   constraints in the task definition and those specified at runtime).
registerTaskDefinition_placementConstraints :: Lens' RegisterTaskDefinition (Maybe [TaskDefinitionPlacementConstraint])

-- | The Docker networking mode to use for the containers in the task. The
--   valid values are <tt>none</tt>, <tt>bridge</tt>, <tt>awsvpc</tt>, and
--   <tt>host</tt>. If no network mode is specified, the default is
--   <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
registerTaskDefinition_networkMode :: Lens' RegisterTaskDefinition (Maybe NetworkMode)

-- | A list of volume definitions in JSON format that containers in your
--   task may use.
registerTaskDefinition_volumes :: Lens' RegisterTaskDefinition (Maybe [Volume])

-- | The number of CPU units used by the task. It can be expressed as an
--   integer using CPU units, for example <tt>1024</tt>, or as a string
--   using vCPUs, for example <tt>1 vCPU</tt> or <tt>1 vcpu</tt>, in a task
--   definition. String values are converted to an integer indicating the
--   CPU units when the task definition is registered.
--   
--   Task-level CPU and memory parameters are ignored for Windows
--   containers. We recommend specifying container-level resources for
--   Windows containers.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
registerTaskDefinition_cpu :: Lens' RegisterTaskDefinition (Maybe Text)

-- | The metadata that you apply to the task definition to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
registerTaskDefinition_tags :: Lens' RegisterTaskDefinition (Maybe [Tag])

-- | You must specify a <tt>family</tt> for a task definition, which allows
--   you to track multiple versions of the same task definition. The
--   <tt>family</tt> is used as a name for your task definition. Up to 255
--   letters (uppercase and lowercase), numbers, underscores, and hyphens
--   are allowed.
registerTaskDefinition_family :: Lens' RegisterTaskDefinition Text

-- | A list of container definitions in JSON format that describe the
--   different containers that make up your task.
registerTaskDefinition_containerDefinitions :: Lens' RegisterTaskDefinition [ContainerDefinition]

-- | <i>See:</i> <a>newRegisterTaskDefinitionResponse</a> smart
--   constructor.
data RegisterTaskDefinitionResponse
RegisterTaskDefinitionResponse' :: Maybe TaskDefinition -> Maybe [Tag] -> Int -> RegisterTaskDefinitionResponse

-- | The full description of the registered task definition.
[$sel:taskDefinition:RegisterTaskDefinitionResponse'] :: RegisterTaskDefinitionResponse -> Maybe TaskDefinition

-- | The list of tags associated with the task definition.
[$sel:tags:RegisterTaskDefinitionResponse'] :: RegisterTaskDefinitionResponse -> Maybe [Tag]

-- | The response's http status code.
[$sel:httpStatus:RegisterTaskDefinitionResponse'] :: RegisterTaskDefinitionResponse -> Int

-- | Create a value of <a>RegisterTaskDefinitionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskDefinition:RegisterTaskDefinitionResponse'</a>,
--   <a>registerTaskDefinitionResponse_taskDefinition</a> - The full
--   description of the registered task definition.
--   
--   <a>$sel:tags:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinitionResponse_tags</a> - The list of tags
--   associated with the task definition.
--   
--   <a>$sel:httpStatus:RegisterTaskDefinitionResponse'</a>,
--   <a>registerTaskDefinitionResponse_httpStatus</a> - The response's http
--   status code.
newRegisterTaskDefinitionResponse :: Int -> RegisterTaskDefinitionResponse

-- | The full description of the registered task definition.
registerTaskDefinitionResponse_taskDefinition :: Lens' RegisterTaskDefinitionResponse (Maybe TaskDefinition)

-- | The list of tags associated with the task definition.
registerTaskDefinitionResponse_tags :: Lens' RegisterTaskDefinitionResponse (Maybe [Tag])

-- | The response's http status code.
registerTaskDefinitionResponse_httpStatus :: Lens' RegisterTaskDefinitionResponse Int
instance GHC.Generics.Generic Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinition
instance GHC.Show.Show Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinition
instance GHC.Read.Read Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinition
instance GHC.Classes.Eq Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinition
instance GHC.Generics.Generic Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinitionResponse
instance GHC.Show.Show Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinitionResponse
instance GHC.Read.Read Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinitionResponse
instance GHC.Classes.Eq Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinitionResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinition
instance Control.DeepSeq.NFData Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinitionResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinition
instance Control.DeepSeq.NFData Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinition
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinition
instance Amazonka.Data.Path.ToPath Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinition
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.RegisterTaskDefinition.RegisterTaskDefinition


-- | This action is only used by the Amazon ECS agent, and it is not
--   intended for use outside of the agent.
--   
--   Registers an EC2 instance into the specified cluster. This instance
--   becomes available to place containers on.
module Amazonka.ECS.RegisterContainerInstance

-- | <i>See:</i> <a>newRegisterContainerInstance</a> smart constructor.
data RegisterContainerInstance
RegisterContainerInstance' :: Maybe [PlatformDevice] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe VersionInfo -> Maybe [Attribute] -> Maybe [Resource] -> Maybe [Tag] -> RegisterContainerInstance

-- | The devices that are available on the container instance. The only
--   supported device type is a GPU.
[$sel:platformDevices:RegisterContainerInstance'] :: RegisterContainerInstance -> Maybe [PlatformDevice]

-- | The instance identity document signature for the EC2 instance to
--   register. This signature can be found by running the following command
--   from the instance: <tt>curl
--   http://169.254.169.254/latest/dynamic/instance-identity/signature/</tt>
[$sel:instanceIdentityDocumentSignature:RegisterContainerInstance'] :: RegisterContainerInstance -> Maybe Text

-- | The short name or full Amazon Resource Name (ARN) of the cluster with
--   which to register your container instance. If you do not specify a
--   cluster, the default cluster is assumed.
[$sel:cluster:RegisterContainerInstance'] :: RegisterContainerInstance -> Maybe Text

-- | The instance identity document for the EC2 instance to register. This
--   document can be found by running the following command from the
--   instance: <tt>curl
--   http://169.254.169.254/latest/dynamic/instance-identity/document/</tt>
[$sel:instanceIdentityDocument:RegisterContainerInstance'] :: RegisterContainerInstance -> Maybe Text

-- | The ARN of the container instance (if it was previously registered).
[$sel:containerInstanceArn:RegisterContainerInstance'] :: RegisterContainerInstance -> Maybe Text

-- | The version information for the Amazon ECS container agent and Docker
--   daemon running on the container instance.
[$sel:versionInfo:RegisterContainerInstance'] :: RegisterContainerInstance -> Maybe VersionInfo

-- | The container instance attributes that this container instance
--   supports.
[$sel:attributes:RegisterContainerInstance'] :: RegisterContainerInstance -> Maybe [Attribute]

-- | The resources available on the instance.
[$sel:totalResources:RegisterContainerInstance'] :: RegisterContainerInstance -> Maybe [Resource]

-- | The metadata that you apply to the container instance to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:RegisterContainerInstance'] :: RegisterContainerInstance -> Maybe [Tag]

-- | Create a value of <a>RegisterContainerInstance</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:platformDevices:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_platformDevices</a> - The devices that
--   are available on the container instance. The only supported device
--   type is a GPU.
--   
--   
--   <a>$sel:instanceIdentityDocumentSignature:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_instanceIdentityDocumentSignature</a> -
--   The instance identity document signature for the EC2 instance to
--   register. This signature can be found by running the following command
--   from the instance: <tt>curl
--   http://169.254.169.254/latest/dynamic/instance-identity/signature/</tt>
--   
--   <a>$sel:cluster:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_cluster</a> - The short name or full
--   Amazon Resource Name (ARN) of the cluster with which to register your
--   container instance. If you do not specify a cluster, the default
--   cluster is assumed.
--   
--   <a>$sel:instanceIdentityDocument:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_instanceIdentityDocument</a> - The
--   instance identity document for the EC2 instance to register. This
--   document can be found by running the following command from the
--   instance: <tt>curl
--   http://169.254.169.254/latest/dynamic/instance-identity/document/</tt>
--   
--   <a>$sel:containerInstanceArn:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_containerInstanceArn</a> - The ARN of the
--   container instance (if it was previously registered).
--   
--   <a>$sel:versionInfo:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_versionInfo</a> - The version information
--   for the Amazon ECS container agent and Docker daemon running on the
--   container instance.
--   
--   <a>$sel:attributes:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_attributes</a> - The container instance
--   attributes that this container instance supports.
--   
--   <a>$sel:totalResources:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_totalResources</a> - The resources
--   available on the instance.
--   
--   <a>$sel:tags:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_tags</a> - The metadata that you apply to
--   the container instance to help you categorize and organize them. Each
--   tag consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newRegisterContainerInstance :: RegisterContainerInstance

-- | The devices that are available on the container instance. The only
--   supported device type is a GPU.
registerContainerInstance_platformDevices :: Lens' RegisterContainerInstance (Maybe [PlatformDevice])

-- | The instance identity document signature for the EC2 instance to
--   register. This signature can be found by running the following command
--   from the instance: <tt>curl
--   http://169.254.169.254/latest/dynamic/instance-identity/signature/</tt>
registerContainerInstance_instanceIdentityDocumentSignature :: Lens' RegisterContainerInstance (Maybe Text)

-- | The short name or full Amazon Resource Name (ARN) of the cluster with
--   which to register your container instance. If you do not specify a
--   cluster, the default cluster is assumed.
registerContainerInstance_cluster :: Lens' RegisterContainerInstance (Maybe Text)

-- | The instance identity document for the EC2 instance to register. This
--   document can be found by running the following command from the
--   instance: <tt>curl
--   http://169.254.169.254/latest/dynamic/instance-identity/document/</tt>
registerContainerInstance_instanceIdentityDocument :: Lens' RegisterContainerInstance (Maybe Text)

-- | The ARN of the container instance (if it was previously registered).
registerContainerInstance_containerInstanceArn :: Lens' RegisterContainerInstance (Maybe Text)

-- | The version information for the Amazon ECS container agent and Docker
--   daemon running on the container instance.
registerContainerInstance_versionInfo :: Lens' RegisterContainerInstance (Maybe VersionInfo)

-- | The container instance attributes that this container instance
--   supports.
registerContainerInstance_attributes :: Lens' RegisterContainerInstance (Maybe [Attribute])

-- | The resources available on the instance.
registerContainerInstance_totalResources :: Lens' RegisterContainerInstance (Maybe [Resource])

-- | The metadata that you apply to the container instance to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
registerContainerInstance_tags :: Lens' RegisterContainerInstance (Maybe [Tag])

-- | <i>See:</i> <a>newRegisterContainerInstanceResponse</a> smart
--   constructor.
data RegisterContainerInstanceResponse
RegisterContainerInstanceResponse' :: Maybe ContainerInstance -> Int -> RegisterContainerInstanceResponse

-- | The container instance that was registered.
[$sel:containerInstance:RegisterContainerInstanceResponse'] :: RegisterContainerInstanceResponse -> Maybe ContainerInstance

-- | The response's http status code.
[$sel:httpStatus:RegisterContainerInstanceResponse'] :: RegisterContainerInstanceResponse -> Int

-- | Create a value of <a>RegisterContainerInstanceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerInstance:RegisterContainerInstanceResponse'</a>,
--   <a>registerContainerInstanceResponse_containerInstance</a> - The
--   container instance that was registered.
--   
--   <a>$sel:httpStatus:RegisterContainerInstanceResponse'</a>,
--   <a>registerContainerInstanceResponse_httpStatus</a> - The response's
--   http status code.
newRegisterContainerInstanceResponse :: Int -> RegisterContainerInstanceResponse

-- | The container instance that was registered.
registerContainerInstanceResponse_containerInstance :: Lens' RegisterContainerInstanceResponse (Maybe ContainerInstance)

-- | The response's http status code.
registerContainerInstanceResponse_httpStatus :: Lens' RegisterContainerInstanceResponse Int
instance GHC.Generics.Generic Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstance
instance GHC.Show.Show Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstance
instance GHC.Read.Read Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstance
instance GHC.Classes.Eq Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstance
instance GHC.Generics.Generic Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstanceResponse
instance GHC.Show.Show Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstanceResponse
instance GHC.Read.Read Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstanceResponse
instance GHC.Classes.Eq Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstanceResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstance
instance Control.DeepSeq.NFData Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstanceResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstance
instance Control.DeepSeq.NFData Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstance
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstance
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstance
instance Amazonka.Data.Path.ToPath Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstance
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.RegisterContainerInstance.RegisterContainerInstance


-- | Modifies the available capacity providers and the default capacity
--   provider strategy for a cluster.
--   
--   You must specify both the available capacity providers and a default
--   capacity provider strategy for the cluster. If the specified cluster
--   has existing capacity providers associated with it, you must specify
--   all existing capacity providers in addition to any new ones you want
--   to add. Any existing capacity providers associated with a cluster that
--   are omitted from a PutClusterCapacityProviders API call will be
--   disassociated with the cluster. You can only disassociate an existing
--   capacity provider from a cluster if it's not being used by any
--   existing tasks.
--   
--   When creating a service or running a task on a cluster, if no capacity
--   provider or launch type is specified, then the cluster's default
--   capacity provider strategy is used. It is recommended to define a
--   default capacity provider strategy for your cluster, however you may
--   specify an empty array (<tt>[]</tt>) to bypass defining a default
--   strategy.
module Amazonka.ECS.PutClusterCapacityProviders

-- | <i>See:</i> <a>newPutClusterCapacityProviders</a> smart constructor.
data PutClusterCapacityProviders
PutClusterCapacityProviders' :: Text -> [Text] -> [CapacityProviderStrategyItem] -> PutClusterCapacityProviders

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   modify the capacity provider settings for. If you do not specify a
--   cluster, the default cluster is assumed.
[$sel:cluster:PutClusterCapacityProviders'] :: PutClusterCapacityProviders -> Text

-- | The name of one or more capacity providers to associate with the
--   cluster.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
[$sel:capacityProviders:PutClusterCapacityProviders'] :: PutClusterCapacityProviders -> [Text]

-- | The capacity provider strategy to use by default for the cluster.
--   
--   When creating a service or running a task on a cluster, if no capacity
--   provider or launch type is specified then the default capacity
--   provider strategy for the cluster is used.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
[$sel:defaultCapacityProviderStrategy:PutClusterCapacityProviders'] :: PutClusterCapacityProviders -> [CapacityProviderStrategyItem]

-- | Create a value of <a>PutClusterCapacityProviders</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:PutClusterCapacityProviders'</a>,
--   <a>putClusterCapacityProviders_cluster</a> - The short name or full
--   Amazon Resource Name (ARN) of the cluster to modify the capacity
--   provider settings for. If you do not specify a cluster, the default
--   cluster is assumed.
--   
--   <a>$sel:capacityProviders:PutClusterCapacityProviders'</a>,
--   <a>putClusterCapacityProviders_capacityProviders</a> - The name of one
--   or more capacity providers to associate with the cluster.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   
--   <a>$sel:defaultCapacityProviderStrategy:PutClusterCapacityProviders'</a>,
--   <a>putClusterCapacityProviders_defaultCapacityProviderStrategy</a> -
--   The capacity provider strategy to use by default for the cluster.
--   
--   When creating a service or running a task on a cluster, if no capacity
--   provider or launch type is specified then the default capacity
--   provider strategy for the cluster is used.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
newPutClusterCapacityProviders :: Text -> PutClusterCapacityProviders

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   modify the capacity provider settings for. If you do not specify a
--   cluster, the default cluster is assumed.
putClusterCapacityProviders_cluster :: Lens' PutClusterCapacityProviders Text

-- | The name of one or more capacity providers to associate with the
--   cluster.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
putClusterCapacityProviders_capacityProviders :: Lens' PutClusterCapacityProviders [Text]

-- | The capacity provider strategy to use by default for the cluster.
--   
--   When creating a service or running a task on a cluster, if no capacity
--   provider or launch type is specified then the default capacity
--   provider strategy for the cluster is used.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
putClusterCapacityProviders_defaultCapacityProviderStrategy :: Lens' PutClusterCapacityProviders [CapacityProviderStrategyItem]

-- | <i>See:</i> <a>newPutClusterCapacityProvidersResponse</a> smart
--   constructor.
data PutClusterCapacityProvidersResponse
PutClusterCapacityProvidersResponse' :: Maybe Cluster -> Int -> PutClusterCapacityProvidersResponse

-- | Details about the cluster.
[$sel:cluster:PutClusterCapacityProvidersResponse'] :: PutClusterCapacityProvidersResponse -> Maybe Cluster

-- | The response's http status code.
[$sel:httpStatus:PutClusterCapacityProvidersResponse'] :: PutClusterCapacityProvidersResponse -> Int

-- | Create a value of <a>PutClusterCapacityProvidersResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:PutClusterCapacityProviders'</a>,
--   <a>putClusterCapacityProvidersResponse_cluster</a> - Details about the
--   cluster.
--   
--   <a>$sel:httpStatus:PutClusterCapacityProvidersResponse'</a>,
--   <a>putClusterCapacityProvidersResponse_httpStatus</a> - The response's
--   http status code.
newPutClusterCapacityProvidersResponse :: Int -> PutClusterCapacityProvidersResponse

-- | Details about the cluster.
putClusterCapacityProvidersResponse_cluster :: Lens' PutClusterCapacityProvidersResponse (Maybe Cluster)

-- | The response's http status code.
putClusterCapacityProvidersResponse_httpStatus :: Lens' PutClusterCapacityProvidersResponse Int
instance GHC.Generics.Generic Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProviders
instance GHC.Show.Show Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProviders
instance GHC.Read.Read Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProviders
instance GHC.Classes.Eq Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProviders
instance GHC.Generics.Generic Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProvidersResponse
instance GHC.Show.Show Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProvidersResponse
instance GHC.Read.Read Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProvidersResponse
instance GHC.Classes.Eq Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProvidersResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProviders
instance Control.DeepSeq.NFData Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProvidersResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProviders
instance Control.DeepSeq.NFData Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProviders
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProviders
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProviders
instance Amazonka.Data.Path.ToPath Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProviders
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.PutClusterCapacityProviders.PutClusterCapacityProviders


-- | Create or update an attribute on an Amazon ECS resource. If the
--   attribute does not exist, it is created. If the attribute exists, its
--   value is replaced with the specified value. To delete an attribute,
--   use DeleteAttributes. For more information, see <a>Attributes</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
module Amazonka.ECS.PutAttributes

-- | <i>See:</i> <a>newPutAttributes</a> smart constructor.
data PutAttributes
PutAttributes' :: Maybe Text -> [Attribute] -> PutAttributes

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   contains the resource to apply attributes. If you do not specify a
--   cluster, the default cluster is assumed.
[$sel:cluster:PutAttributes'] :: PutAttributes -> Maybe Text

-- | The attributes to apply to your resource. You can specify up to 10
--   custom attributes per resource. You can specify up to 10 attributes in
--   a single call.
[$sel:attributes:PutAttributes'] :: PutAttributes -> [Attribute]

-- | Create a value of <a>PutAttributes</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:PutAttributes'</a>, <a>putAttributes_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that
--   contains the resource to apply attributes. If you do not specify a
--   cluster, the default cluster is assumed.
--   
--   <a>$sel:attributes:PutAttributes'</a>, <a>putAttributes_attributes</a>
--   - The attributes to apply to your resource. You can specify up to 10
--   custom attributes per resource. You can specify up to 10 attributes in
--   a single call.
newPutAttributes :: PutAttributes

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   contains the resource to apply attributes. If you do not specify a
--   cluster, the default cluster is assumed.
putAttributes_cluster :: Lens' PutAttributes (Maybe Text)

-- | The attributes to apply to your resource. You can specify up to 10
--   custom attributes per resource. You can specify up to 10 attributes in
--   a single call.
putAttributes_attributes :: Lens' PutAttributes [Attribute]

-- | <i>See:</i> <a>newPutAttributesResponse</a> smart constructor.
data PutAttributesResponse
PutAttributesResponse' :: Maybe [Attribute] -> Int -> PutAttributesResponse

-- | The attributes applied to your resource.
[$sel:attributes:PutAttributesResponse'] :: PutAttributesResponse -> Maybe [Attribute]

-- | The response's http status code.
[$sel:httpStatus:PutAttributesResponse'] :: PutAttributesResponse -> Int

-- | Create a value of <a>PutAttributesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributes:PutAttributes'</a>,
--   <a>putAttributesResponse_attributes</a> - The attributes applied to
--   your resource.
--   
--   <a>$sel:httpStatus:PutAttributesResponse'</a>,
--   <a>putAttributesResponse_httpStatus</a> - The response's http status
--   code.
newPutAttributesResponse :: Int -> PutAttributesResponse

-- | The attributes applied to your resource.
putAttributesResponse_attributes :: Lens' PutAttributesResponse (Maybe [Attribute])

-- | The response's http status code.
putAttributesResponse_httpStatus :: Lens' PutAttributesResponse Int
instance GHC.Generics.Generic Amazonka.ECS.PutAttributes.PutAttributes
instance GHC.Show.Show Amazonka.ECS.PutAttributes.PutAttributes
instance GHC.Read.Read Amazonka.ECS.PutAttributes.PutAttributes
instance GHC.Classes.Eq Amazonka.ECS.PutAttributes.PutAttributes
instance GHC.Generics.Generic Amazonka.ECS.PutAttributes.PutAttributesResponse
instance GHC.Show.Show Amazonka.ECS.PutAttributes.PutAttributesResponse
instance GHC.Read.Read Amazonka.ECS.PutAttributes.PutAttributesResponse
instance GHC.Classes.Eq Amazonka.ECS.PutAttributes.PutAttributesResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.PutAttributes.PutAttributes
instance Control.DeepSeq.NFData Amazonka.ECS.PutAttributes.PutAttributesResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.PutAttributes.PutAttributes
instance Control.DeepSeq.NFData Amazonka.ECS.PutAttributes.PutAttributes
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.PutAttributes.PutAttributes
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.PutAttributes.PutAttributes
instance Amazonka.Data.Path.ToPath Amazonka.ECS.PutAttributes.PutAttributes
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.PutAttributes.PutAttributes


-- | Modifies an account setting for all IAM users on an account for whom
--   no individual account setting has been specified. Account settings are
--   set on a per-Region basis.
module Amazonka.ECS.PutAccountSettingDefault

-- | <i>See:</i> <a>newPutAccountSettingDefault</a> smart constructor.
data PutAccountSettingDefault
PutAccountSettingDefault' :: SettingName -> Text -> PutAccountSettingDefault

-- | The resource name for which to modify the account setting. If
--   <tt>serviceLongArnFormat</tt> is specified, the ARN for your Amazon
--   ECS services is affected. If <tt>taskLongArnFormat</tt> is specified,
--   the ARN and resource ID for your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the ENI limit for your Amazon
--   ECS container instances is affected. If <tt>containerInsights</tt> is
--   specified, the default setting for CloudWatch Container Insights for
--   your clusters is affected.
[$sel:name:PutAccountSettingDefault'] :: PutAccountSettingDefault -> SettingName

-- | The account setting value for the specified principal ARN. Accepted
--   values are <tt>enabled</tt> and <tt>disabled</tt>.
[$sel:value:PutAccountSettingDefault'] :: PutAccountSettingDefault -> Text

-- | Create a value of <a>PutAccountSettingDefault</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:PutAccountSettingDefault'</a>,
--   <a>putAccountSettingDefault_name</a> - The resource name for which to
--   modify the account setting. If <tt>serviceLongArnFormat</tt> is
--   specified, the ARN for your Amazon ECS services is affected. If
--   <tt>taskLongArnFormat</tt> is specified, the ARN and resource ID for
--   your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the ENI limit for your Amazon
--   ECS container instances is affected. If <tt>containerInsights</tt> is
--   specified, the default setting for CloudWatch Container Insights for
--   your clusters is affected.
--   
--   <a>$sel:value:PutAccountSettingDefault'</a>,
--   <a>putAccountSettingDefault_value</a> - The account setting value for
--   the specified principal ARN. Accepted values are <tt>enabled</tt> and
--   <tt>disabled</tt>.
newPutAccountSettingDefault :: SettingName -> Text -> PutAccountSettingDefault

-- | The resource name for which to modify the account setting. If
--   <tt>serviceLongArnFormat</tt> is specified, the ARN for your Amazon
--   ECS services is affected. If <tt>taskLongArnFormat</tt> is specified,
--   the ARN and resource ID for your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the ENI limit for your Amazon
--   ECS container instances is affected. If <tt>containerInsights</tt> is
--   specified, the default setting for CloudWatch Container Insights for
--   your clusters is affected.
putAccountSettingDefault_name :: Lens' PutAccountSettingDefault SettingName

-- | The account setting value for the specified principal ARN. Accepted
--   values are <tt>enabled</tt> and <tt>disabled</tt>.
putAccountSettingDefault_value :: Lens' PutAccountSettingDefault Text

-- | <i>See:</i> <a>newPutAccountSettingDefaultResponse</a> smart
--   constructor.
data PutAccountSettingDefaultResponse
PutAccountSettingDefaultResponse' :: Maybe Setting -> Int -> PutAccountSettingDefaultResponse

-- | The current setting for a resource.
[$sel:setting:PutAccountSettingDefaultResponse'] :: PutAccountSettingDefaultResponse -> Maybe Setting

-- | The response's http status code.
[$sel:httpStatus:PutAccountSettingDefaultResponse'] :: PutAccountSettingDefaultResponse -> Int

-- | Create a value of <a>PutAccountSettingDefaultResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:setting:PutAccountSettingDefaultResponse'</a>,
--   <a>putAccountSettingDefaultResponse_setting</a> - The current setting
--   for a resource.
--   
--   <a>$sel:httpStatus:PutAccountSettingDefaultResponse'</a>,
--   <a>putAccountSettingDefaultResponse_httpStatus</a> - The response's
--   http status code.
newPutAccountSettingDefaultResponse :: Int -> PutAccountSettingDefaultResponse

-- | The current setting for a resource.
putAccountSettingDefaultResponse_setting :: Lens' PutAccountSettingDefaultResponse (Maybe Setting)

-- | The response's http status code.
putAccountSettingDefaultResponse_httpStatus :: Lens' PutAccountSettingDefaultResponse Int
instance GHC.Generics.Generic Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefault
instance GHC.Show.Show Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefault
instance GHC.Read.Read Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefault
instance GHC.Classes.Eq Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefault
instance GHC.Generics.Generic Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefaultResponse
instance GHC.Show.Show Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefaultResponse
instance GHC.Read.Read Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefaultResponse
instance GHC.Classes.Eq Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefaultResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefault
instance Control.DeepSeq.NFData Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefaultResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefault
instance Control.DeepSeq.NFData Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefault
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefault
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefault
instance Amazonka.Data.Path.ToPath Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefault
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.PutAccountSettingDefault.PutAccountSettingDefault


-- | Modifies an account setting. Account settings are set on a per-Region
--   basis.
--   
--   If you change the account setting for the root user, the default
--   settings for all of the IAM users and roles for which no individual
--   account setting has been specified are reset. For more information,
--   see <a>Account Settings</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   When <tt>serviceLongArnFormat</tt>, <tt>taskLongArnFormat</tt>, or
--   <tt>containerInstanceLongArnFormat</tt> are specified, the Amazon
--   Resource Name (ARN) and resource ID format of the resource type for a
--   specified IAM user, IAM role, or the root user for an account is
--   affected. The opt-in and opt-out account setting must be set for each
--   Amazon ECS resource separately. The ARN and resource ID format of a
--   resource will be defined by the opt-in status of the IAM user or role
--   that created the resource. You must enable this setting to use Amazon
--   ECS features such as resource tagging.
--   
--   When <tt>awsvpcTrunking</tt> is specified, the elastic network
--   interface (ENI) limit for any new container instances that support the
--   feature is changed. If <tt>awsvpcTrunking</tt> is enabled, any new
--   container instances that support the feature are launched have the
--   increased ENI limits available to them. For more information, see
--   <a>Elastic Network Interface Trunking</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
--   
--   When <tt>containerInsights</tt> is specified, the default setting
--   indicating whether CloudWatch Container Insights is enabled for your
--   clusters is changed. If <tt>containerInsights</tt> is enabled, any new
--   clusters that are created will have Container Insights enabled unless
--   you disable it during cluster creation. For more information, see
--   <a>CloudWatch Container Insights</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
module Amazonka.ECS.PutAccountSetting

-- | <i>See:</i> <a>newPutAccountSetting</a> smart constructor.
data PutAccountSetting
PutAccountSetting' :: Maybe Text -> SettingName -> Text -> PutAccountSetting

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If you specify the root user, it modifies the account
--   setting for all IAM users, IAM roles, and the root user of the account
--   unless an IAM user or role explicitly overrides these settings. If
--   this field is omitted, the setting is changed only for the
--   authenticated user.
--   
--   Federated users assume the account setting of the root user and can't
--   have explicit account settings set for them.
[$sel:principalArn:PutAccountSetting'] :: PutAccountSetting -> Maybe Text

-- | The Amazon ECS resource name for which to modify the account setting.
--   If <tt>serviceLongArnFormat</tt> is specified, the ARN for your Amazon
--   ECS services is affected. If <tt>taskLongArnFormat</tt> is specified,
--   the ARN and resource ID for your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the elastic network interface
--   (ENI) limit for your Amazon ECS container instances is affected. If
--   <tt>containerInsights</tt> is specified, the default setting for
--   CloudWatch Container Insights for your clusters is affected.
[$sel:name:PutAccountSetting'] :: PutAccountSetting -> SettingName

-- | The account setting value for the specified principal ARN. Accepted
--   values are <tt>enabled</tt> and <tt>disabled</tt>.
[$sel:value:PutAccountSetting'] :: PutAccountSetting -> Text

-- | Create a value of <a>PutAccountSetting</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:principalArn:PutAccountSetting'</a>,
--   <a>putAccountSetting_principalArn</a> - The ARN of the principal,
--   which can be an IAM user, IAM role, or the root user. If you specify
--   the root user, it modifies the account setting for all IAM users, IAM
--   roles, and the root user of the account unless an IAM user or role
--   explicitly overrides these settings. If this field is omitted, the
--   setting is changed only for the authenticated user.
--   
--   Federated users assume the account setting of the root user and can't
--   have explicit account settings set for them.
--   
--   <a>$sel:name:PutAccountSetting'</a>, <a>putAccountSetting_name</a> -
--   The Amazon ECS resource name for which to modify the account setting.
--   If <tt>serviceLongArnFormat</tt> is specified, the ARN for your Amazon
--   ECS services is affected. If <tt>taskLongArnFormat</tt> is specified,
--   the ARN and resource ID for your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the elastic network interface
--   (ENI) limit for your Amazon ECS container instances is affected. If
--   <tt>containerInsights</tt> is specified, the default setting for
--   CloudWatch Container Insights for your clusters is affected.
--   
--   <a>$sel:value:PutAccountSetting'</a>, <a>putAccountSetting_value</a> -
--   The account setting value for the specified principal ARN. Accepted
--   values are <tt>enabled</tt> and <tt>disabled</tt>.
newPutAccountSetting :: SettingName -> Text -> PutAccountSetting

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If you specify the root user, it modifies the account
--   setting for all IAM users, IAM roles, and the root user of the account
--   unless an IAM user or role explicitly overrides these settings. If
--   this field is omitted, the setting is changed only for the
--   authenticated user.
--   
--   Federated users assume the account setting of the root user and can't
--   have explicit account settings set for them.
putAccountSetting_principalArn :: Lens' PutAccountSetting (Maybe Text)

-- | The Amazon ECS resource name for which to modify the account setting.
--   If <tt>serviceLongArnFormat</tt> is specified, the ARN for your Amazon
--   ECS services is affected. If <tt>taskLongArnFormat</tt> is specified,
--   the ARN and resource ID for your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the elastic network interface
--   (ENI) limit for your Amazon ECS container instances is affected. If
--   <tt>containerInsights</tt> is specified, the default setting for
--   CloudWatch Container Insights for your clusters is affected.
putAccountSetting_name :: Lens' PutAccountSetting SettingName

-- | The account setting value for the specified principal ARN. Accepted
--   values are <tt>enabled</tt> and <tt>disabled</tt>.
putAccountSetting_value :: Lens' PutAccountSetting Text

-- | <i>See:</i> <a>newPutAccountSettingResponse</a> smart constructor.
data PutAccountSettingResponse
PutAccountSettingResponse' :: Maybe Setting -> Int -> PutAccountSettingResponse

-- | The current account setting for a resource.
[$sel:setting:PutAccountSettingResponse'] :: PutAccountSettingResponse -> Maybe Setting

-- | The response's http status code.
[$sel:httpStatus:PutAccountSettingResponse'] :: PutAccountSettingResponse -> Int

-- | Create a value of <a>PutAccountSettingResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:setting:PutAccountSettingResponse'</a>,
--   <a>putAccountSettingResponse_setting</a> - The current account setting
--   for a resource.
--   
--   <a>$sel:httpStatus:PutAccountSettingResponse'</a>,
--   <a>putAccountSettingResponse_httpStatus</a> - The response's http
--   status code.
newPutAccountSettingResponse :: Int -> PutAccountSettingResponse

-- | The current account setting for a resource.
putAccountSettingResponse_setting :: Lens' PutAccountSettingResponse (Maybe Setting)

-- | The response's http status code.
putAccountSettingResponse_httpStatus :: Lens' PutAccountSettingResponse Int
instance GHC.Generics.Generic Amazonka.ECS.PutAccountSetting.PutAccountSetting
instance GHC.Show.Show Amazonka.ECS.PutAccountSetting.PutAccountSetting
instance GHC.Read.Read Amazonka.ECS.PutAccountSetting.PutAccountSetting
instance GHC.Classes.Eq Amazonka.ECS.PutAccountSetting.PutAccountSetting
instance GHC.Generics.Generic Amazonka.ECS.PutAccountSetting.PutAccountSettingResponse
instance GHC.Show.Show Amazonka.ECS.PutAccountSetting.PutAccountSettingResponse
instance GHC.Read.Read Amazonka.ECS.PutAccountSetting.PutAccountSettingResponse
instance GHC.Classes.Eq Amazonka.ECS.PutAccountSetting.PutAccountSettingResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.PutAccountSetting.PutAccountSetting
instance Control.DeepSeq.NFData Amazonka.ECS.PutAccountSetting.PutAccountSettingResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.PutAccountSetting.PutAccountSetting
instance Control.DeepSeq.NFData Amazonka.ECS.PutAccountSetting.PutAccountSetting
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.PutAccountSetting.PutAccountSetting
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.PutAccountSetting.PutAccountSetting
instance Amazonka.Data.Path.ToPath Amazonka.ECS.PutAccountSetting.PutAccountSetting
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.PutAccountSetting.PutAccountSetting


-- | Returns a list of tasks. You can filter the results by cluster, task
--   definition family, container instance, launch type, what IAM principal
--   started the task, or by the desired status of the task.
--   
--   Recently stopped tasks might appear in the returned results.
--   Currently, stopped tasks appear in the returned results for at least
--   one hour.
--   
--   This operation returns paginated results.
module Amazonka.ECS.ListTasks

-- | <i>See:</i> <a>newListTasks</a> smart constructor.
data ListTasks
ListTasks' :: Maybe DesiredStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe LaunchType -> Maybe Text -> Maybe Int -> ListTasks

-- | The task desired status to use when filtering the <tt>ListTasks</tt>
--   results. Specifying a <tt>desiredStatus</tt> of <tt>STOPPED</tt>
--   limits the results to tasks that Amazon ECS has set the desired status
--   to <tt>STOPPED</tt>. This can be useful for debugging tasks that are
--   not starting properly or have died or finished. The default status
--   filter is <tt>RUNNING</tt>, which shows tasks that Amazon ECS has set
--   the desired status to <tt>RUNNING</tt>.
--   
--   Although you can filter results based on a desired status of
--   <tt>PENDING</tt>, this does not return any results. Amazon ECS never
--   sets the desired status of a task to that value (only a task's
--   <tt>lastStatus</tt> may have a value of <tt>PENDING</tt>).
[$sel:desiredStatus:ListTasks'] :: ListTasks -> Maybe DesiredStatus

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   use when filtering the <tt>ListTasks</tt> results. If you do not
--   specify a cluster, the default cluster is assumed.
[$sel:cluster:ListTasks'] :: ListTasks -> Maybe Text

-- | The name of the task definition family to use when filtering the
--   <tt>ListTasks</tt> results. Specifying a <tt>family</tt> limits the
--   results to tasks that belong to that family.
[$sel:family:ListTasks'] :: ListTasks -> Maybe Text

-- | The <tt>nextToken</tt> value returned from a <tt>ListTasks</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:ListTasks'] :: ListTasks -> Maybe Text

-- | The <tt>startedBy</tt> value with which to filter the task results.
--   Specifying a <tt>startedBy</tt> value limits the results to tasks that
--   were started with that value.
[$sel:startedBy:ListTasks'] :: ListTasks -> Maybe Text

-- | The name of the service to use when filtering the <tt>ListTasks</tt>
--   results. Specifying a <tt>serviceName</tt> limits the results to tasks
--   that belong to that service.
[$sel:serviceName:ListTasks'] :: ListTasks -> Maybe Text

-- | The launch type to use when filtering the <tt>ListTasks</tt> results.
[$sel:launchType:ListTasks'] :: ListTasks -> Maybe LaunchType

-- | The container instance ID or full ARN of the container instance to use
--   when filtering the <tt>ListTasks</tt> results. Specifying a
--   <tt>containerInstance</tt> limits the results to tasks that belong to
--   that container instance.
[$sel:containerInstance:ListTasks'] :: ListTasks -> Maybe Text

-- | The maximum number of task results returned by <tt>ListTasks</tt> in
--   paginated output. When this parameter is used, <tt>ListTasks</tt> only
--   returns <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>ListTasks</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 100. If this parameter is not used, then
--   <tt>ListTasks</tt> returns up to 100 results and a <tt>nextToken</tt>
--   value if applicable.
[$sel:maxResults:ListTasks'] :: ListTasks -> Maybe Int

-- | Create a value of <a>ListTasks</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:desiredStatus:ListTasks'</a>, <a>listTasks_desiredStatus</a> -
--   The task desired status to use when filtering the <tt>ListTasks</tt>
--   results. Specifying a <tt>desiredStatus</tt> of <tt>STOPPED</tt>
--   limits the results to tasks that Amazon ECS has set the desired status
--   to <tt>STOPPED</tt>. This can be useful for debugging tasks that are
--   not starting properly or have died or finished. The default status
--   filter is <tt>RUNNING</tt>, which shows tasks that Amazon ECS has set
--   the desired status to <tt>RUNNING</tt>.
--   
--   Although you can filter results based on a desired status of
--   <tt>PENDING</tt>, this does not return any results. Amazon ECS never
--   sets the desired status of a task to that value (only a task's
--   <tt>lastStatus</tt> may have a value of <tt>PENDING</tt>).
--   
--   <a>$sel:cluster:ListTasks'</a>, <a>listTasks_cluster</a> - The short
--   name or full Amazon Resource Name (ARN) of the cluster to use when
--   filtering the <tt>ListTasks</tt> results. If you do not specify a
--   cluster, the default cluster is assumed.
--   
--   <a>$sel:family:ListTasks'</a>, <a>listTasks_family</a> - The name of
--   the task definition family to use when filtering the
--   <tt>ListTasks</tt> results. Specifying a <tt>family</tt> limits the
--   results to tasks that belong to that family.
--   
--   <a>$sel:nextToken:ListTasks'</a>, <a>listTasks_nextToken</a> - The
--   <tt>nextToken</tt> value returned from a <tt>ListTasks</tt> request
--   indicating that more results are available to fulfill the request and
--   further calls will be needed. If <tt>maxResults</tt> was provided, it
--   is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:startedBy:ListTasks'</a>, <a>listTasks_startedBy</a> - The
--   <tt>startedBy</tt> value with which to filter the task results.
--   Specifying a <tt>startedBy</tt> value limits the results to tasks that
--   were started with that value.
--   
--   <a>$sel:serviceName:ListTasks'</a>, <a>listTasks_serviceName</a> - The
--   name of the service to use when filtering the <tt>ListTasks</tt>
--   results. Specifying a <tt>serviceName</tt> limits the results to tasks
--   that belong to that service.
--   
--   <a>$sel:launchType:ListTasks'</a>, <a>listTasks_launchType</a> - The
--   launch type to use when filtering the <tt>ListTasks</tt> results.
--   
--   <a>$sel:containerInstance:ListTasks'</a>,
--   <a>listTasks_containerInstance</a> - The container instance ID or full
--   ARN of the container instance to use when filtering the
--   <tt>ListTasks</tt> results. Specifying a <tt>containerInstance</tt>
--   limits the results to tasks that belong to that container instance.
--   
--   <a>$sel:maxResults:ListTasks'</a>, <a>listTasks_maxResults</a> - The
--   maximum number of task results returned by <tt>ListTasks</tt> in
--   paginated output. When this parameter is used, <tt>ListTasks</tt> only
--   returns <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>ListTasks</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 100. If this parameter is not used, then
--   <tt>ListTasks</tt> returns up to 100 results and a <tt>nextToken</tt>
--   value if applicable.
newListTasks :: ListTasks

-- | The task desired status to use when filtering the <tt>ListTasks</tt>
--   results. Specifying a <tt>desiredStatus</tt> of <tt>STOPPED</tt>
--   limits the results to tasks that Amazon ECS has set the desired status
--   to <tt>STOPPED</tt>. This can be useful for debugging tasks that are
--   not starting properly or have died or finished. The default status
--   filter is <tt>RUNNING</tt>, which shows tasks that Amazon ECS has set
--   the desired status to <tt>RUNNING</tt>.
--   
--   Although you can filter results based on a desired status of
--   <tt>PENDING</tt>, this does not return any results. Amazon ECS never
--   sets the desired status of a task to that value (only a task's
--   <tt>lastStatus</tt> may have a value of <tt>PENDING</tt>).
listTasks_desiredStatus :: Lens' ListTasks (Maybe DesiredStatus)

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   use when filtering the <tt>ListTasks</tt> results. If you do not
--   specify a cluster, the default cluster is assumed.
listTasks_cluster :: Lens' ListTasks (Maybe Text)

-- | The name of the task definition family to use when filtering the
--   <tt>ListTasks</tt> results. Specifying a <tt>family</tt> limits the
--   results to tasks that belong to that family.
listTasks_family :: Lens' ListTasks (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a <tt>ListTasks</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listTasks_nextToken :: Lens' ListTasks (Maybe Text)

-- | The <tt>startedBy</tt> value with which to filter the task results.
--   Specifying a <tt>startedBy</tt> value limits the results to tasks that
--   were started with that value.
listTasks_startedBy :: Lens' ListTasks (Maybe Text)

-- | The name of the service to use when filtering the <tt>ListTasks</tt>
--   results. Specifying a <tt>serviceName</tt> limits the results to tasks
--   that belong to that service.
listTasks_serviceName :: Lens' ListTasks (Maybe Text)

-- | The launch type to use when filtering the <tt>ListTasks</tt> results.
listTasks_launchType :: Lens' ListTasks (Maybe LaunchType)

-- | The container instance ID or full ARN of the container instance to use
--   when filtering the <tt>ListTasks</tt> results. Specifying a
--   <tt>containerInstance</tt> limits the results to tasks that belong to
--   that container instance.
listTasks_containerInstance :: Lens' ListTasks (Maybe Text)

-- | The maximum number of task results returned by <tt>ListTasks</tt> in
--   paginated output. When this parameter is used, <tt>ListTasks</tt> only
--   returns <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>ListTasks</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 100. If this parameter is not used, then
--   <tt>ListTasks</tt> returns up to 100 results and a <tt>nextToken</tt>
--   value if applicable.
listTasks_maxResults :: Lens' ListTasks (Maybe Int)

-- | <i>See:</i> <a>newListTasksResponse</a> smart constructor.
data ListTasksResponse
ListTasksResponse' :: Maybe Text -> Maybe [Text] -> Int -> ListTasksResponse

-- | The <tt>nextToken</tt> value to include in a future <tt>ListTasks</tt>
--   request. When the results of a <tt>ListTasks</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
[$sel:nextToken:ListTasksResponse'] :: ListTasksResponse -> Maybe Text

-- | The list of task ARN entries for the <tt>ListTasks</tt> request.
[$sel:taskArns:ListTasksResponse'] :: ListTasksResponse -> Maybe [Text]

-- | The response's http status code.
[$sel:httpStatus:ListTasksResponse'] :: ListTasksResponse -> Int

-- | Create a value of <a>ListTasksResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTasks'</a>, <a>listTasksResponse_nextToken</a> -
--   The <tt>nextToken</tt> value to include in a future <tt>ListTasks</tt>
--   request. When the results of a <tt>ListTasks</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:taskArns:ListTasksResponse'</a>,
--   <a>listTasksResponse_taskArns</a> - The list of task ARN entries for
--   the <tt>ListTasks</tt> request.
--   
--   <a>$sel:httpStatus:ListTasksResponse'</a>,
--   <a>listTasksResponse_httpStatus</a> - The response's http status code.
newListTasksResponse :: Int -> ListTasksResponse

-- | The <tt>nextToken</tt> value to include in a future <tt>ListTasks</tt>
--   request. When the results of a <tt>ListTasks</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
listTasksResponse_nextToken :: Lens' ListTasksResponse (Maybe Text)

-- | The list of task ARN entries for the <tt>ListTasks</tt> request.
listTasksResponse_taskArns :: Lens' ListTasksResponse (Maybe [Text])

-- | The response's http status code.
listTasksResponse_httpStatus :: Lens' ListTasksResponse Int
instance GHC.Generics.Generic Amazonka.ECS.ListTasks.ListTasks
instance GHC.Show.Show Amazonka.ECS.ListTasks.ListTasks
instance GHC.Read.Read Amazonka.ECS.ListTasks.ListTasks
instance GHC.Classes.Eq Amazonka.ECS.ListTasks.ListTasks
instance GHC.Generics.Generic Amazonka.ECS.ListTasks.ListTasksResponse
instance GHC.Show.Show Amazonka.ECS.ListTasks.ListTasksResponse
instance GHC.Read.Read Amazonka.ECS.ListTasks.ListTasksResponse
instance GHC.Classes.Eq Amazonka.ECS.ListTasks.ListTasksResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.ListTasks.ListTasks
instance Control.DeepSeq.NFData Amazonka.ECS.ListTasks.ListTasksResponse
instance Amazonka.Pager.AWSPager Amazonka.ECS.ListTasks.ListTasks
instance Data.Hashable.Class.Hashable Amazonka.ECS.ListTasks.ListTasks
instance Control.DeepSeq.NFData Amazonka.ECS.ListTasks.ListTasks
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.ListTasks.ListTasks
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.ListTasks.ListTasks
instance Amazonka.Data.Path.ToPath Amazonka.ECS.ListTasks.ListTasks
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.ListTasks.ListTasks


-- | Returns a list of task definitions that are registered to your
--   account. You can filter the results by family name with the
--   <tt>familyPrefix</tt> parameter or by status with the <tt>status</tt>
--   parameter.
--   
--   This operation returns paginated results.
module Amazonka.ECS.ListTaskDefinitions

-- | <i>See:</i> <a>newListTaskDefinitions</a> smart constructor.
data ListTaskDefinitions
ListTaskDefinitions' :: Maybe TaskDefinitionStatus -> Maybe Text -> Maybe Text -> Maybe SortOrder -> Maybe Int -> ListTaskDefinitions

-- | The task definition status with which to filter the
--   <tt>ListTaskDefinitions</tt> results. By default, only <tt>ACTIVE</tt>
--   task definitions are listed. By setting this parameter to
--   <tt>INACTIVE</tt>, you can view task definitions that are
--   <tt>INACTIVE</tt> as long as an active task or service still
--   references them. If you paginate the resulting output, be sure to keep
--   the <tt>status</tt> value constant in each subsequent request.
[$sel:status:ListTaskDefinitions'] :: ListTaskDefinitions -> Maybe TaskDefinitionStatus

-- | The full family name with which to filter the
--   <tt>ListTaskDefinitions</tt> results. Specifying a
--   <tt>familyPrefix</tt> limits the listed task definitions to task
--   definition revisions that belong to that family.
[$sel:familyPrefix:ListTaskDefinitions'] :: ListTaskDefinitions -> Maybe Text

-- | The <tt>nextToken</tt> value returned from a
--   <tt>ListTaskDefinitions</tt> request indicating that more results are
--   available to fulfill the request and further calls will be needed. If
--   <tt>maxResults</tt> was provided, it is possible the number of results
--   to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:ListTaskDefinitions'] :: ListTaskDefinitions -> Maybe Text

-- | The order in which to sort the results. Valid values are <tt>ASC</tt>
--   and <tt>DESC</tt>. By default (<tt>ASC</tt>), task definitions are
--   listed lexicographically by family name and in ascending numerical
--   order by revision so that the newest task definitions in a family are
--   listed last. Setting this parameter to <tt>DESC</tt> reverses the sort
--   order on family name and revision so that the newest task definitions
--   in a family are listed first.
[$sel:sort:ListTaskDefinitions'] :: ListTaskDefinitions -> Maybe SortOrder

-- | The maximum number of task definition results returned by
--   <tt>ListTaskDefinitions</tt> in paginated output. When this parameter
--   is used, <tt>ListTaskDefinitions</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>ListTaskDefinitions</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListTaskDefinitions</tt> returns up to
--   100 results and a <tt>nextToken</tt> value if applicable.
[$sel:maxResults:ListTaskDefinitions'] :: ListTaskDefinitions -> Maybe Int

-- | Create a value of <a>ListTaskDefinitions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ListTaskDefinitions'</a>,
--   <a>listTaskDefinitions_status</a> - The task definition status with
--   which to filter the <tt>ListTaskDefinitions</tt> results. By default,
--   only <tt>ACTIVE</tt> task definitions are listed. By setting this
--   parameter to <tt>INACTIVE</tt>, you can view task definitions that are
--   <tt>INACTIVE</tt> as long as an active task or service still
--   references them. If you paginate the resulting output, be sure to keep
--   the <tt>status</tt> value constant in each subsequent request.
--   
--   <a>$sel:familyPrefix:ListTaskDefinitions'</a>,
--   <a>listTaskDefinitions_familyPrefix</a> - The full family name with
--   which to filter the <tt>ListTaskDefinitions</tt> results. Specifying a
--   <tt>familyPrefix</tt> limits the listed task definitions to task
--   definition revisions that belong to that family.
--   
--   <a>$sel:nextToken:ListTaskDefinitions'</a>,
--   <a>listTaskDefinitions_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a <tt>ListTaskDefinitions</tt> request indicating that
--   more results are available to fulfill the request and further calls
--   will be needed. If <tt>maxResults</tt> was provided, it is possible
--   the number of results to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:sort:ListTaskDefinitions'</a>, <a>listTaskDefinitions_sort</a>
--   - The order in which to sort the results. Valid values are
--   <tt>ASC</tt> and <tt>DESC</tt>. By default (<tt>ASC</tt>), task
--   definitions are listed lexicographically by family name and in
--   ascending numerical order by revision so that the newest task
--   definitions in a family are listed last. Setting this parameter to
--   <tt>DESC</tt> reverses the sort order on family name and revision so
--   that the newest task definitions in a family are listed first.
--   
--   <a>$sel:maxResults:ListTaskDefinitions'</a>,
--   <a>listTaskDefinitions_maxResults</a> - The maximum number of task
--   definition results returned by <tt>ListTaskDefinitions</tt> in
--   paginated output. When this parameter is used,
--   <tt>ListTaskDefinitions</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListTaskDefinitions</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListTaskDefinitions</tt> returns up to
--   100 results and a <tt>nextToken</tt> value if applicable.
newListTaskDefinitions :: ListTaskDefinitions

-- | The task definition status with which to filter the
--   <tt>ListTaskDefinitions</tt> results. By default, only <tt>ACTIVE</tt>
--   task definitions are listed. By setting this parameter to
--   <tt>INACTIVE</tt>, you can view task definitions that are
--   <tt>INACTIVE</tt> as long as an active task or service still
--   references them. If you paginate the resulting output, be sure to keep
--   the <tt>status</tt> value constant in each subsequent request.
listTaskDefinitions_status :: Lens' ListTaskDefinitions (Maybe TaskDefinitionStatus)

-- | The full family name with which to filter the
--   <tt>ListTaskDefinitions</tt> results. Specifying a
--   <tt>familyPrefix</tt> limits the listed task definitions to task
--   definition revisions that belong to that family.
listTaskDefinitions_familyPrefix :: Lens' ListTaskDefinitions (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a
--   <tt>ListTaskDefinitions</tt> request indicating that more results are
--   available to fulfill the request and further calls will be needed. If
--   <tt>maxResults</tt> was provided, it is possible the number of results
--   to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listTaskDefinitions_nextToken :: Lens' ListTaskDefinitions (Maybe Text)

-- | The order in which to sort the results. Valid values are <tt>ASC</tt>
--   and <tt>DESC</tt>. By default (<tt>ASC</tt>), task definitions are
--   listed lexicographically by family name and in ascending numerical
--   order by revision so that the newest task definitions in a family are
--   listed last. Setting this parameter to <tt>DESC</tt> reverses the sort
--   order on family name and revision so that the newest task definitions
--   in a family are listed first.
listTaskDefinitions_sort :: Lens' ListTaskDefinitions (Maybe SortOrder)

-- | The maximum number of task definition results returned by
--   <tt>ListTaskDefinitions</tt> in paginated output. When this parameter
--   is used, <tt>ListTaskDefinitions</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>ListTaskDefinitions</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListTaskDefinitions</tt> returns up to
--   100 results and a <tt>nextToken</tt> value if applicable.
listTaskDefinitions_maxResults :: Lens' ListTaskDefinitions (Maybe Int)

-- | <i>See:</i> <a>newListTaskDefinitionsResponse</a> smart constructor.
data ListTaskDefinitionsResponse
ListTaskDefinitionsResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListTaskDefinitionsResponse

-- | The list of task definition Amazon Resource Name (ARN) entries for the
--   <tt>ListTaskDefinitions</tt> request.
[$sel:taskDefinitionArns:ListTaskDefinitionsResponse'] :: ListTaskDefinitionsResponse -> Maybe [Text]

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListTaskDefinitions</tt> request. When the results of a
--   <tt>ListTaskDefinitions</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
[$sel:nextToken:ListTaskDefinitionsResponse'] :: ListTaskDefinitionsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListTaskDefinitionsResponse'] :: ListTaskDefinitionsResponse -> Int

-- | Create a value of <a>ListTaskDefinitionsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskDefinitionArns:ListTaskDefinitionsResponse'</a>,
--   <a>listTaskDefinitionsResponse_taskDefinitionArns</a> - The list of
--   task definition Amazon Resource Name (ARN) entries for the
--   <tt>ListTaskDefinitions</tt> request.
--   
--   <a>$sel:nextToken:ListTaskDefinitions'</a>,
--   <a>listTaskDefinitionsResponse_nextToken</a> - The <tt>nextToken</tt>
--   value to include in a future <tt>ListTaskDefinitions</tt> request.
--   When the results of a <tt>ListTaskDefinitions</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:httpStatus:ListTaskDefinitionsResponse'</a>,
--   <a>listTaskDefinitionsResponse_httpStatus</a> - The response's http
--   status code.
newListTaskDefinitionsResponse :: Int -> ListTaskDefinitionsResponse

-- | The list of task definition Amazon Resource Name (ARN) entries for the
--   <tt>ListTaskDefinitions</tt> request.
listTaskDefinitionsResponse_taskDefinitionArns :: Lens' ListTaskDefinitionsResponse (Maybe [Text])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListTaskDefinitions</tt> request. When the results of a
--   <tt>ListTaskDefinitions</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
listTaskDefinitionsResponse_nextToken :: Lens' ListTaskDefinitionsResponse (Maybe Text)

-- | The response's http status code.
listTaskDefinitionsResponse_httpStatus :: Lens' ListTaskDefinitionsResponse Int
instance GHC.Generics.Generic Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitions
instance GHC.Show.Show Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitions
instance GHC.Read.Read Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitions
instance GHC.Classes.Eq Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitions
instance GHC.Generics.Generic Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitionsResponse
instance GHC.Show.Show Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitionsResponse
instance GHC.Read.Read Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitionsResponse
instance GHC.Classes.Eq Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitionsResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitions
instance Control.DeepSeq.NFData Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitionsResponse
instance Amazonka.Pager.AWSPager Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitions
instance Data.Hashable.Class.Hashable Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitions
instance Control.DeepSeq.NFData Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitions
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitions
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitions
instance Amazonka.Data.Path.ToPath Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitions
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.ListTaskDefinitions.ListTaskDefinitions


-- | Returns a list of task definition families that are registered to your
--   account (which may include task definition families that no longer
--   have any <tt>ACTIVE</tt> task definition revisions).
--   
--   You can filter out task definition families that do not contain any
--   <tt>ACTIVE</tt> task definition revisions by setting the
--   <tt>status</tt> parameter to <tt>ACTIVE</tt>. You can also filter the
--   results with the <tt>familyPrefix</tt> parameter.
--   
--   This operation returns paginated results.
module Amazonka.ECS.ListTaskDefinitionFamilies

-- | <i>See:</i> <a>newListTaskDefinitionFamilies</a> smart constructor.
data ListTaskDefinitionFamilies
ListTaskDefinitionFamilies' :: Maybe TaskDefinitionFamilyStatus -> Maybe Text -> Maybe Text -> Maybe Int -> ListTaskDefinitionFamilies

-- | The task definition family status with which to filter the
--   <tt>ListTaskDefinitionFamilies</tt> results. By default, both
--   <tt>ACTIVE</tt> and <tt>INACTIVE</tt> task definition families are
--   listed. If this parameter is set to <tt>ACTIVE</tt>, only task
--   definition families that have an <tt>ACTIVE</tt> task definition
--   revision are returned. If this parameter is set to <tt>INACTIVE</tt>,
--   only task definition families that do not have any <tt>ACTIVE</tt>
--   task definition revisions are returned. If you paginate the resulting
--   output, be sure to keep the <tt>status</tt> value constant in each
--   subsequent request.
[$sel:status:ListTaskDefinitionFamilies'] :: ListTaskDefinitionFamilies -> Maybe TaskDefinitionFamilyStatus

-- | The <tt>familyPrefix</tt> is a string that is used to filter the
--   results of <tt>ListTaskDefinitionFamilies</tt>. If you specify a
--   <tt>familyPrefix</tt>, only task definition family names that begin
--   with the <tt>familyPrefix</tt> string are returned.
[$sel:familyPrefix:ListTaskDefinitionFamilies'] :: ListTaskDefinitionFamilies -> Maybe Text

-- | The <tt>nextToken</tt> value returned from a
--   <tt>ListTaskDefinitionFamilies</tt> request indicating that more
--   results are available to fulfill the request and further calls will be
--   needed. If <tt>maxResults</tt> was provided, it is possible the number
--   of results to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:ListTaskDefinitionFamilies'] :: ListTaskDefinitionFamilies -> Maybe Text

-- | The maximum number of task definition family results returned by
--   <tt>ListTaskDefinitionFamilies</tt> in paginated output. When this
--   parameter is used, <tt>ListTaskDefinitions</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>ListTaskDefinitionFamilies</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListTaskDefinitionFamilies</tt>
--   returns up to 100 results and a <tt>nextToken</tt> value if
--   applicable.
[$sel:maxResults:ListTaskDefinitionFamilies'] :: ListTaskDefinitionFamilies -> Maybe Int

-- | Create a value of <a>ListTaskDefinitionFamilies</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ListTaskDefinitionFamilies'</a>,
--   <a>listTaskDefinitionFamilies_status</a> - The task definition family
--   status with which to filter the <tt>ListTaskDefinitionFamilies</tt>
--   results. By default, both <tt>ACTIVE</tt> and <tt>INACTIVE</tt> task
--   definition families are listed. If this parameter is set to
--   <tt>ACTIVE</tt>, only task definition families that have an
--   <tt>ACTIVE</tt> task definition revision are returned. If this
--   parameter is set to <tt>INACTIVE</tt>, only task definition families
--   that do not have any <tt>ACTIVE</tt> task definition revisions are
--   returned. If you paginate the resulting output, be sure to keep the
--   <tt>status</tt> value constant in each subsequent request.
--   
--   <a>$sel:familyPrefix:ListTaskDefinitionFamilies'</a>,
--   <a>listTaskDefinitionFamilies_familyPrefix</a> - The
--   <tt>familyPrefix</tt> is a string that is used to filter the results
--   of <tt>ListTaskDefinitionFamilies</tt>. If you specify a
--   <tt>familyPrefix</tt>, only task definition family names that begin
--   with the <tt>familyPrefix</tt> string are returned.
--   
--   <a>$sel:nextToken:ListTaskDefinitionFamilies'</a>,
--   <a>listTaskDefinitionFamilies_nextToken</a> - The <tt>nextToken</tt>
--   value returned from a <tt>ListTaskDefinitionFamilies</tt> request
--   indicating that more results are available to fulfill the request and
--   further calls will be needed. If <tt>maxResults</tt> was provided, it
--   is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:maxResults:ListTaskDefinitionFamilies'</a>,
--   <a>listTaskDefinitionFamilies_maxResults</a> - The maximum number of
--   task definition family results returned by
--   <tt>ListTaskDefinitionFamilies</tt> in paginated output. When this
--   parameter is used, <tt>ListTaskDefinitions</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>ListTaskDefinitionFamilies</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListTaskDefinitionFamilies</tt>
--   returns up to 100 results and a <tt>nextToken</tt> value if
--   applicable.
newListTaskDefinitionFamilies :: ListTaskDefinitionFamilies

-- | The task definition family status with which to filter the
--   <tt>ListTaskDefinitionFamilies</tt> results. By default, both
--   <tt>ACTIVE</tt> and <tt>INACTIVE</tt> task definition families are
--   listed. If this parameter is set to <tt>ACTIVE</tt>, only task
--   definition families that have an <tt>ACTIVE</tt> task definition
--   revision are returned. If this parameter is set to <tt>INACTIVE</tt>,
--   only task definition families that do not have any <tt>ACTIVE</tt>
--   task definition revisions are returned. If you paginate the resulting
--   output, be sure to keep the <tt>status</tt> value constant in each
--   subsequent request.
listTaskDefinitionFamilies_status :: Lens' ListTaskDefinitionFamilies (Maybe TaskDefinitionFamilyStatus)

-- | The <tt>familyPrefix</tt> is a string that is used to filter the
--   results of <tt>ListTaskDefinitionFamilies</tt>. If you specify a
--   <tt>familyPrefix</tt>, only task definition family names that begin
--   with the <tt>familyPrefix</tt> string are returned.
listTaskDefinitionFamilies_familyPrefix :: Lens' ListTaskDefinitionFamilies (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a
--   <tt>ListTaskDefinitionFamilies</tt> request indicating that more
--   results are available to fulfill the request and further calls will be
--   needed. If <tt>maxResults</tt> was provided, it is possible the number
--   of results to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listTaskDefinitionFamilies_nextToken :: Lens' ListTaskDefinitionFamilies (Maybe Text)

-- | The maximum number of task definition family results returned by
--   <tt>ListTaskDefinitionFamilies</tt> in paginated output. When this
--   parameter is used, <tt>ListTaskDefinitions</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>ListTaskDefinitionFamilies</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListTaskDefinitionFamilies</tt>
--   returns up to 100 results and a <tt>nextToken</tt> value if
--   applicable.
listTaskDefinitionFamilies_maxResults :: Lens' ListTaskDefinitionFamilies (Maybe Int)

-- | <i>See:</i> <a>newListTaskDefinitionFamiliesResponse</a> smart
--   constructor.
data ListTaskDefinitionFamiliesResponse
ListTaskDefinitionFamiliesResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListTaskDefinitionFamiliesResponse

-- | The list of task definition family names that match the
--   <tt>ListTaskDefinitionFamilies</tt> request.
[$sel:families:ListTaskDefinitionFamiliesResponse'] :: ListTaskDefinitionFamiliesResponse -> Maybe [Text]

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListTaskDefinitionFamilies</tt> request. When the results of a
--   <tt>ListTaskDefinitionFamilies</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
[$sel:nextToken:ListTaskDefinitionFamiliesResponse'] :: ListTaskDefinitionFamiliesResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListTaskDefinitionFamiliesResponse'] :: ListTaskDefinitionFamiliesResponse -> Int

-- | Create a value of <a>ListTaskDefinitionFamiliesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:families:ListTaskDefinitionFamiliesResponse'</a>,
--   <a>listTaskDefinitionFamiliesResponse_families</a> - The list of task
--   definition family names that match the
--   <tt>ListTaskDefinitionFamilies</tt> request.
--   
--   <a>$sel:nextToken:ListTaskDefinitionFamilies'</a>,
--   <a>listTaskDefinitionFamiliesResponse_nextToken</a> - The
--   <tt>nextToken</tt> value to include in a future
--   <tt>ListTaskDefinitionFamilies</tt> request. When the results of a
--   <tt>ListTaskDefinitionFamilies</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:httpStatus:ListTaskDefinitionFamiliesResponse'</a>,
--   <a>listTaskDefinitionFamiliesResponse_httpStatus</a> - The response's
--   http status code.
newListTaskDefinitionFamiliesResponse :: Int -> ListTaskDefinitionFamiliesResponse

-- | The list of task definition family names that match the
--   <tt>ListTaskDefinitionFamilies</tt> request.
listTaskDefinitionFamiliesResponse_families :: Lens' ListTaskDefinitionFamiliesResponse (Maybe [Text])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListTaskDefinitionFamilies</tt> request. When the results of a
--   <tt>ListTaskDefinitionFamilies</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
listTaskDefinitionFamiliesResponse_nextToken :: Lens' ListTaskDefinitionFamiliesResponse (Maybe Text)

-- | The response's http status code.
listTaskDefinitionFamiliesResponse_httpStatus :: Lens' ListTaskDefinitionFamiliesResponse Int
instance GHC.Generics.Generic Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamilies
instance GHC.Show.Show Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamilies
instance GHC.Read.Read Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamilies
instance GHC.Classes.Eq Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamilies
instance GHC.Generics.Generic Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamiliesResponse
instance GHC.Show.Show Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamiliesResponse
instance GHC.Read.Read Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamiliesResponse
instance GHC.Classes.Eq Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamiliesResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamilies
instance Control.DeepSeq.NFData Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamiliesResponse
instance Amazonka.Pager.AWSPager Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamilies
instance Data.Hashable.Class.Hashable Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamilies
instance Control.DeepSeq.NFData Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamilies
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamilies
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamilies
instance Amazonka.Data.Path.ToPath Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamilies
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.ListTaskDefinitionFamilies.ListTaskDefinitionFamilies


-- | List the tags for an Amazon ECS resource.
module Amazonka.ECS.ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | The Amazon Resource Name (ARN) that identifies the resource for which
--   to list the tags. Currently, the supported resources are Amazon ECS
--   tasks, services, task definitions, clusters, and container instances.
[$sel:resourceArn:ListTagsForResource'] :: ListTagsForResource -> Text

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The Amazon Resource Name
--   (ARN) that identifies the resource for which to list the tags.
--   Currently, the supported resources are Amazon ECS tasks, services,
--   task definitions, clusters, and container instances.
newListTagsForResource :: Text -> ListTagsForResource

-- | The Amazon Resource Name (ARN) that identifies the resource for which
--   to list the tags. Currently, the supported resources are Amazon ECS
--   tasks, services, task definitions, clusters, and container instances.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe [Tag] -> Int -> ListTagsForResourceResponse

-- | The tags for the resource.
[$sel:tags:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Maybe [Tag]

-- | The response's http status code.
[$sel:httpStatus:ListTagsForResourceResponse'] :: ListTagsForResourceResponse -> Int

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - The tags for the resource.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | The tags for the resource.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int
instance GHC.Generics.Generic Amazonka.ECS.ListTagsForResource.ListTagsForResource
instance GHC.Show.Show Amazonka.ECS.ListTagsForResource.ListTagsForResource
instance GHC.Read.Read Amazonka.ECS.ListTagsForResource.ListTagsForResource
instance GHC.Classes.Eq Amazonka.ECS.ListTagsForResource.ListTagsForResource
instance GHC.Generics.Generic Amazonka.ECS.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Show.Show Amazonka.ECS.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Read.Read Amazonka.ECS.ListTagsForResource.ListTagsForResourceResponse
instance GHC.Classes.Eq Amazonka.ECS.ListTagsForResource.ListTagsForResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.ECS.ListTagsForResource.ListTagsForResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.ListTagsForResource.ListTagsForResource
instance Control.DeepSeq.NFData Amazonka.ECS.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.ListTagsForResource.ListTagsForResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Path.ToPath Amazonka.ECS.ListTagsForResource.ListTagsForResource
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.ListTagsForResource.ListTagsForResource


-- | Returns a list of services. You can filter the results by cluster,
--   launch type, and scheduling strategy.
--   
--   This operation returns paginated results.
module Amazonka.ECS.ListServices

-- | <i>See:</i> <a>newListServices</a> smart constructor.
data ListServices
ListServices' :: Maybe Text -> Maybe Text -> Maybe LaunchType -> Maybe SchedulingStrategy -> Maybe Int -> ListServices

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   use when filtering the <tt>ListServices</tt> results. If you do not
--   specify a cluster, the default cluster is assumed.
[$sel:cluster:ListServices'] :: ListServices -> Maybe Text

-- | The <tt>nextToken</tt> value returned from a <tt>ListServices</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:ListServices'] :: ListServices -> Maybe Text

-- | The launch type to use when filtering the <tt>ListServices</tt>
--   results.
[$sel:launchType:ListServices'] :: ListServices -> Maybe LaunchType

-- | The scheduling strategy to use when filtering the
--   <tt>ListServices</tt> results.
[$sel:schedulingStrategy:ListServices'] :: ListServices -> Maybe SchedulingStrategy

-- | The maximum number of service results returned by
--   <tt>ListServices</tt> in paginated output. When this parameter is
--   used, <tt>ListServices</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListServices</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListServices</tt> returns up to 10
--   results and a <tt>nextToken</tt> value if applicable.
[$sel:maxResults:ListServices'] :: ListServices -> Maybe Int

-- | Create a value of <a>ListServices</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:ListServices'</a>, <a>listServices_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster to use
--   when filtering the <tt>ListServices</tt> results. If you do not
--   specify a cluster, the default cluster is assumed.
--   
--   <a>$sel:nextToken:ListServices'</a>, <a>listServices_nextToken</a> -
--   The <tt>nextToken</tt> value returned from a <tt>ListServices</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:launchType:ListServices'</a>, <a>listServices_launchType</a> -
--   The launch type to use when filtering the <tt>ListServices</tt>
--   results.
--   
--   <a>$sel:schedulingStrategy:ListServices'</a>,
--   <a>listServices_schedulingStrategy</a> - The scheduling strategy to
--   use when filtering the <tt>ListServices</tt> results.
--   
--   <a>$sel:maxResults:ListServices'</a>, <a>listServices_maxResults</a> -
--   The maximum number of service results returned by
--   <tt>ListServices</tt> in paginated output. When this parameter is
--   used, <tt>ListServices</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListServices</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListServices</tt> returns up to 10
--   results and a <tt>nextToken</tt> value if applicable.
newListServices :: ListServices

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   use when filtering the <tt>ListServices</tt> results. If you do not
--   specify a cluster, the default cluster is assumed.
listServices_cluster :: Lens' ListServices (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a <tt>ListServices</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listServices_nextToken :: Lens' ListServices (Maybe Text)

-- | The launch type to use when filtering the <tt>ListServices</tt>
--   results.
listServices_launchType :: Lens' ListServices (Maybe LaunchType)

-- | The scheduling strategy to use when filtering the
--   <tt>ListServices</tt> results.
listServices_schedulingStrategy :: Lens' ListServices (Maybe SchedulingStrategy)

-- | The maximum number of service results returned by
--   <tt>ListServices</tt> in paginated output. When this parameter is
--   used, <tt>ListServices</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListServices</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListServices</tt> returns up to 10
--   results and a <tt>nextToken</tt> value if applicable.
listServices_maxResults :: Lens' ListServices (Maybe Int)

-- | <i>See:</i> <a>newListServicesResponse</a> smart constructor.
data ListServicesResponse
ListServicesResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListServicesResponse

-- | The list of full ARN entries for each service associated with the
--   specified cluster.
[$sel:serviceArns:ListServicesResponse'] :: ListServicesResponse -> Maybe [Text]

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListServices</tt> request. When the results of a
--   <tt>ListServices</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
[$sel:nextToken:ListServicesResponse'] :: ListServicesResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListServicesResponse'] :: ListServicesResponse -> Int

-- | Create a value of <a>ListServicesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:serviceArns:ListServicesResponse'</a>,
--   <a>listServicesResponse_serviceArns</a> - The list of full ARN entries
--   for each service associated with the specified cluster.
--   
--   <a>$sel:nextToken:ListServices'</a>,
--   <a>listServicesResponse_nextToken</a> - The <tt>nextToken</tt> value
--   to include in a future <tt>ListServices</tt> request. When the results
--   of a <tt>ListServices</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
--   
--   <a>$sel:httpStatus:ListServicesResponse'</a>,
--   <a>listServicesResponse_httpStatus</a> - The response's http status
--   code.
newListServicesResponse :: Int -> ListServicesResponse

-- | The list of full ARN entries for each service associated with the
--   specified cluster.
listServicesResponse_serviceArns :: Lens' ListServicesResponse (Maybe [Text])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListServices</tt> request. When the results of a
--   <tt>ListServices</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
listServicesResponse_nextToken :: Lens' ListServicesResponse (Maybe Text)

-- | The response's http status code.
listServicesResponse_httpStatus :: Lens' ListServicesResponse Int
instance GHC.Generics.Generic Amazonka.ECS.ListServices.ListServices
instance GHC.Show.Show Amazonka.ECS.ListServices.ListServices
instance GHC.Read.Read Amazonka.ECS.ListServices.ListServices
instance GHC.Classes.Eq Amazonka.ECS.ListServices.ListServices
instance GHC.Generics.Generic Amazonka.ECS.ListServices.ListServicesResponse
instance GHC.Show.Show Amazonka.ECS.ListServices.ListServicesResponse
instance GHC.Read.Read Amazonka.ECS.ListServices.ListServicesResponse
instance GHC.Classes.Eq Amazonka.ECS.ListServices.ListServicesResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.ListServices.ListServices
instance Control.DeepSeq.NFData Amazonka.ECS.ListServices.ListServicesResponse
instance Amazonka.Pager.AWSPager Amazonka.ECS.ListServices.ListServices
instance Data.Hashable.Class.Hashable Amazonka.ECS.ListServices.ListServices
instance Control.DeepSeq.NFData Amazonka.ECS.ListServices.ListServices
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.ListServices.ListServices
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.ListServices.ListServices
instance Amazonka.Data.Path.ToPath Amazonka.ECS.ListServices.ListServices
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.ListServices.ListServices


-- | Returns a list of container instances in a specified cluster. You can
--   filter the results of a <tt>ListContainerInstances</tt> operation with
--   cluster query language statements inside the <tt>filter</tt>
--   parameter. For more information, see <a>Cluster Query Language</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   This operation returns paginated results.
module Amazonka.ECS.ListContainerInstances

-- | <i>See:</i> <a>newListContainerInstances</a> smart constructor.
data ListContainerInstances
ListContainerInstances' :: Maybe ContainerInstanceStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> ListContainerInstances

-- | Filters the container instances by status. For example, if you specify
--   the <tt>DRAINING</tt> status, the results include only container
--   instances that have been set to <tt>DRAINING</tt> using
--   UpdateContainerInstancesState. If you do not specify this parameter,
--   the default is to include container instances set to all states other
--   than <tt>INACTIVE</tt>.
[$sel:status:ListContainerInstances'] :: ListContainerInstances -> Maybe ContainerInstanceStatus

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the container instances to list. If you do not specify a
--   cluster, the default cluster is assumed.
[$sel:cluster:ListContainerInstances'] :: ListContainerInstances -> Maybe Text

-- | The <tt>nextToken</tt> value returned from a
--   <tt>ListContainerInstances</tt> request indicating that more results
--   are available to fulfill the request and further calls will be needed.
--   If <tt>maxResults</tt> was provided, it is possible the number of
--   results to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:ListContainerInstances'] :: ListContainerInstances -> Maybe Text

-- | You can filter the results of a <tt>ListContainerInstances</tt>
--   operation with cluster query language statements. For more
--   information, see <a>Cluster Query Language</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
[$sel:filter':ListContainerInstances'] :: ListContainerInstances -> Maybe Text

-- | The maximum number of container instance results returned by
--   <tt>ListContainerInstances</tt> in paginated output. When this
--   parameter is used, <tt>ListContainerInstances</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>ListContainerInstances</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListContainerInstances</tt> returns up
--   to 100 results and a <tt>nextToken</tt> value if applicable.
[$sel:maxResults:ListContainerInstances'] :: ListContainerInstances -> Maybe Int

-- | Create a value of <a>ListContainerInstances</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ListContainerInstances'</a>,
--   <a>listContainerInstances_status</a> - Filters the container instances
--   by status. For example, if you specify the <tt>DRAINING</tt> status,
--   the results include only container instances that have been set to
--   <tt>DRAINING</tt> using UpdateContainerInstancesState. If you do not
--   specify this parameter, the default is to include container instances
--   set to all states other than <tt>INACTIVE</tt>.
--   
--   <a>$sel:cluster:ListContainerInstances'</a>,
--   <a>listContainerInstances_cluster</a> - The short name or full Amazon
--   Resource Name (ARN) of the cluster that hosts the container instances
--   to list. If you do not specify a cluster, the default cluster is
--   assumed.
--   
--   <a>$sel:nextToken:ListContainerInstances'</a>,
--   <a>listContainerInstances_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a <tt>ListContainerInstances</tt> request indicating
--   that more results are available to fulfill the request and further
--   calls will be needed. If <tt>maxResults</tt> was provided, it is
--   possible the number of results to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:filter':ListContainerInstances'</a>,
--   <a>listContainerInstances_filter</a> - You can filter the results of a
--   <tt>ListContainerInstances</tt> operation with cluster query language
--   statements. For more information, see <a>Cluster Query Language</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:maxResults:ListContainerInstances'</a>,
--   <a>listContainerInstances_maxResults</a> - The maximum number of
--   container instance results returned by <tt>ListContainerInstances</tt>
--   in paginated output. When this parameter is used,
--   <tt>ListContainerInstances</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>ListContainerInstances</tt> request with the
--   returned <tt>nextToken</tt> value. This value can be between 1 and
--   100. If this parameter is not used, then
--   <tt>ListContainerInstances</tt> returns up to 100 results and a
--   <tt>nextToken</tt> value if applicable.
newListContainerInstances :: ListContainerInstances

-- | Filters the container instances by status. For example, if you specify
--   the <tt>DRAINING</tt> status, the results include only container
--   instances that have been set to <tt>DRAINING</tt> using
--   UpdateContainerInstancesState. If you do not specify this parameter,
--   the default is to include container instances set to all states other
--   than <tt>INACTIVE</tt>.
listContainerInstances_status :: Lens' ListContainerInstances (Maybe ContainerInstanceStatus)

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the container instances to list. If you do not specify a
--   cluster, the default cluster is assumed.
listContainerInstances_cluster :: Lens' ListContainerInstances (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a
--   <tt>ListContainerInstances</tt> request indicating that more results
--   are available to fulfill the request and further calls will be needed.
--   If <tt>maxResults</tt> was provided, it is possible the number of
--   results to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listContainerInstances_nextToken :: Lens' ListContainerInstances (Maybe Text)

-- | You can filter the results of a <tt>ListContainerInstances</tt>
--   operation with cluster query language statements. For more
--   information, see <a>Cluster Query Language</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
listContainerInstances_filter :: Lens' ListContainerInstances (Maybe Text)

-- | The maximum number of container instance results returned by
--   <tt>ListContainerInstances</tt> in paginated output. When this
--   parameter is used, <tt>ListContainerInstances</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>ListContainerInstances</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListContainerInstances</tt> returns up
--   to 100 results and a <tt>nextToken</tt> value if applicable.
listContainerInstances_maxResults :: Lens' ListContainerInstances (Maybe Int)

-- | <i>See:</i> <a>newListContainerInstancesResponse</a> smart
--   constructor.
data ListContainerInstancesResponse
ListContainerInstancesResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListContainerInstancesResponse

-- | The list of container instances with full ARN entries for each
--   container instance associated with the specified cluster.
[$sel:containerInstanceArns:ListContainerInstancesResponse'] :: ListContainerInstancesResponse -> Maybe [Text]

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListContainerInstances</tt> request. When the results of a
--   <tt>ListContainerInstances</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
[$sel:nextToken:ListContainerInstancesResponse'] :: ListContainerInstancesResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListContainerInstancesResponse'] :: ListContainerInstancesResponse -> Int

-- | Create a value of <a>ListContainerInstancesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerInstanceArns:ListContainerInstancesResponse'</a>,
--   <a>listContainerInstancesResponse_containerInstanceArns</a> - The list
--   of container instances with full ARN entries for each container
--   instance associated with the specified cluster.
--   
--   <a>$sel:nextToken:ListContainerInstances'</a>,
--   <a>listContainerInstancesResponse_nextToken</a> - The
--   <tt>nextToken</tt> value to include in a future
--   <tt>ListContainerInstances</tt> request. When the results of a
--   <tt>ListContainerInstances</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
--   
--   <a>$sel:httpStatus:ListContainerInstancesResponse'</a>,
--   <a>listContainerInstancesResponse_httpStatus</a> - The response's http
--   status code.
newListContainerInstancesResponse :: Int -> ListContainerInstancesResponse

-- | The list of container instances with full ARN entries for each
--   container instance associated with the specified cluster.
listContainerInstancesResponse_containerInstanceArns :: Lens' ListContainerInstancesResponse (Maybe [Text])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListContainerInstances</tt> request. When the results of a
--   <tt>ListContainerInstances</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
listContainerInstancesResponse_nextToken :: Lens' ListContainerInstancesResponse (Maybe Text)

-- | The response's http status code.
listContainerInstancesResponse_httpStatus :: Lens' ListContainerInstancesResponse Int
instance GHC.Generics.Generic Amazonka.ECS.ListContainerInstances.ListContainerInstances
instance GHC.Show.Show Amazonka.ECS.ListContainerInstances.ListContainerInstances
instance GHC.Read.Read Amazonka.ECS.ListContainerInstances.ListContainerInstances
instance GHC.Classes.Eq Amazonka.ECS.ListContainerInstances.ListContainerInstances
instance GHC.Generics.Generic Amazonka.ECS.ListContainerInstances.ListContainerInstancesResponse
instance GHC.Show.Show Amazonka.ECS.ListContainerInstances.ListContainerInstancesResponse
instance GHC.Read.Read Amazonka.ECS.ListContainerInstances.ListContainerInstancesResponse
instance GHC.Classes.Eq Amazonka.ECS.ListContainerInstances.ListContainerInstancesResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.ListContainerInstances.ListContainerInstances
instance Control.DeepSeq.NFData Amazonka.ECS.ListContainerInstances.ListContainerInstancesResponse
instance Amazonka.Pager.AWSPager Amazonka.ECS.ListContainerInstances.ListContainerInstances
instance Data.Hashable.Class.Hashable Amazonka.ECS.ListContainerInstances.ListContainerInstances
instance Control.DeepSeq.NFData Amazonka.ECS.ListContainerInstances.ListContainerInstances
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.ListContainerInstances.ListContainerInstances
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.ListContainerInstances.ListContainerInstances
instance Amazonka.Data.Path.ToPath Amazonka.ECS.ListContainerInstances.ListContainerInstances
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.ListContainerInstances.ListContainerInstances


-- | Returns a list of existing clusters.
--   
--   This operation returns paginated results.
module Amazonka.ECS.ListClusters

-- | <i>See:</i> <a>newListClusters</a> smart constructor.
data ListClusters
ListClusters' :: Maybe Text -> Maybe Int -> ListClusters

-- | The <tt>nextToken</tt> value returned from a <tt>ListClusters</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:ListClusters'] :: ListClusters -> Maybe Text

-- | The maximum number of cluster results returned by
--   <tt>ListClusters</tt> in paginated output. When this parameter is
--   used, <tt>ListClusters</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListClusters</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListClusters</tt> returns up to 100
--   results and a <tt>nextToken</tt> value if applicable.
[$sel:maxResults:ListClusters'] :: ListClusters -> Maybe Int

-- | Create a value of <a>ListClusters</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListClusters'</a>, <a>listClusters_nextToken</a> -
--   The <tt>nextToken</tt> value returned from a <tt>ListClusters</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:maxResults:ListClusters'</a>, <a>listClusters_maxResults</a> -
--   The maximum number of cluster results returned by
--   <tt>ListClusters</tt> in paginated output. When this parameter is
--   used, <tt>ListClusters</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListClusters</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListClusters</tt> returns up to 100
--   results and a <tt>nextToken</tt> value if applicable.
newListClusters :: ListClusters

-- | The <tt>nextToken</tt> value returned from a <tt>ListClusters</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listClusters_nextToken :: Lens' ListClusters (Maybe Text)

-- | The maximum number of cluster results returned by
--   <tt>ListClusters</tt> in paginated output. When this parameter is
--   used, <tt>ListClusters</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListClusters</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListClusters</tt> returns up to 100
--   results and a <tt>nextToken</tt> value if applicable.
listClusters_maxResults :: Lens' ListClusters (Maybe Int)

-- | <i>See:</i> <a>newListClustersResponse</a> smart constructor.
data ListClustersResponse
ListClustersResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListClustersResponse

-- | The list of full Amazon Resource Name (ARN) entries for each cluster
--   associated with your account.
[$sel:clusterArns:ListClustersResponse'] :: ListClustersResponse -> Maybe [Text]

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListClusters</tt> request. When the results of a
--   <tt>ListClusters</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
[$sel:nextToken:ListClustersResponse'] :: ListClustersResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListClustersResponse'] :: ListClustersResponse -> Int

-- | Create a value of <a>ListClustersResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clusterArns:ListClustersResponse'</a>,
--   <a>listClustersResponse_clusterArns</a> - The list of full Amazon
--   Resource Name (ARN) entries for each cluster associated with your
--   account.
--   
--   <a>$sel:nextToken:ListClusters'</a>,
--   <a>listClustersResponse_nextToken</a> - The <tt>nextToken</tt> value
--   to include in a future <tt>ListClusters</tt> request. When the results
--   of a <tt>ListClusters</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
--   
--   <a>$sel:httpStatus:ListClustersResponse'</a>,
--   <a>listClustersResponse_httpStatus</a> - The response's http status
--   code.
newListClustersResponse :: Int -> ListClustersResponse

-- | The list of full Amazon Resource Name (ARN) entries for each cluster
--   associated with your account.
listClustersResponse_clusterArns :: Lens' ListClustersResponse (Maybe [Text])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListClusters</tt> request. When the results of a
--   <tt>ListClusters</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
listClustersResponse_nextToken :: Lens' ListClustersResponse (Maybe Text)

-- | The response's http status code.
listClustersResponse_httpStatus :: Lens' ListClustersResponse Int
instance GHC.Generics.Generic Amazonka.ECS.ListClusters.ListClusters
instance GHC.Show.Show Amazonka.ECS.ListClusters.ListClusters
instance GHC.Read.Read Amazonka.ECS.ListClusters.ListClusters
instance GHC.Classes.Eq Amazonka.ECS.ListClusters.ListClusters
instance GHC.Generics.Generic Amazonka.ECS.ListClusters.ListClustersResponse
instance GHC.Show.Show Amazonka.ECS.ListClusters.ListClustersResponse
instance GHC.Read.Read Amazonka.ECS.ListClusters.ListClustersResponse
instance GHC.Classes.Eq Amazonka.ECS.ListClusters.ListClustersResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.ListClusters.ListClusters
instance Control.DeepSeq.NFData Amazonka.ECS.ListClusters.ListClustersResponse
instance Amazonka.Pager.AWSPager Amazonka.ECS.ListClusters.ListClusters
instance Data.Hashable.Class.Hashable Amazonka.ECS.ListClusters.ListClusters
instance Control.DeepSeq.NFData Amazonka.ECS.ListClusters.ListClusters
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.ListClusters.ListClusters
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.ListClusters.ListClusters
instance Amazonka.Data.Path.ToPath Amazonka.ECS.ListClusters.ListClusters
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.ListClusters.ListClusters


-- | Lists the attributes for Amazon ECS resources within a specified
--   target type and cluster. When you specify a target type and cluster,
--   <tt>ListAttributes</tt> returns a list of attribute objects, one for
--   each attribute on each resource. You can filter the list of results to
--   a single attribute name to only return results that have that name.
--   You can also filter the results by attribute name and value, for
--   example, to see which container instances in a cluster are running a
--   Linux AMI (<tt>ecs.os-type=linux</tt>).
--   
--   This operation returns paginated results.
module Amazonka.ECS.ListAttributes

-- | <i>See:</i> <a>newListAttributes</a> smart constructor.
data ListAttributes
ListAttributes' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> TargetType -> ListAttributes

-- | The value of the attribute with which to filter results. You must also
--   specify an attribute name to use this parameter.
[$sel:attributeValue:ListAttributes'] :: ListAttributes -> Maybe Text

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   list attributes. If you do not specify a cluster, the default cluster
--   is assumed.
[$sel:cluster:ListAttributes'] :: ListAttributes -> Maybe Text

-- | The <tt>nextToken</tt> value returned from a <tt>ListAttributes</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:ListAttributes'] :: ListAttributes -> Maybe Text

-- | The name of the attribute with which to filter the results.
[$sel:attributeName:ListAttributes'] :: ListAttributes -> Maybe Text

-- | The maximum number of cluster results returned by
--   <tt>ListAttributes</tt> in paginated output. When this parameter is
--   used, <tt>ListAttributes</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListAttributes</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListAttributes</tt> returns up to 100
--   results and a <tt>nextToken</tt> value if applicable.
[$sel:maxResults:ListAttributes'] :: ListAttributes -> Maybe Int

-- | The type of the target with which to list attributes.
[$sel:targetType:ListAttributes'] :: ListAttributes -> TargetType

-- | Create a value of <a>ListAttributes</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeValue:ListAttributes'</a>,
--   <a>listAttributes_attributeValue</a> - The value of the attribute with
--   which to filter results. You must also specify an attribute name to
--   use this parameter.
--   
--   <a>$sel:cluster:ListAttributes'</a>, <a>listAttributes_cluster</a> -
--   The short name or full Amazon Resource Name (ARN) of the cluster to
--   list attributes. If you do not specify a cluster, the default cluster
--   is assumed.
--   
--   <a>$sel:nextToken:ListAttributes'</a>, <a>listAttributes_nextToken</a>
--   - The <tt>nextToken</tt> value returned from a <tt>ListAttributes</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:attributeName:ListAttributes'</a>,
--   <a>listAttributes_attributeName</a> - The name of the attribute with
--   which to filter the results.
--   
--   <a>$sel:maxResults:ListAttributes'</a>,
--   <a>listAttributes_maxResults</a> - The maximum number of cluster
--   results returned by <tt>ListAttributes</tt> in paginated output. When
--   this parameter is used, <tt>ListAttributes</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>ListAttributes</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 100. If this parameter is not used, then
--   <tt>ListAttributes</tt> returns up to 100 results and a
--   <tt>nextToken</tt> value if applicable.
--   
--   <a>$sel:targetType:ListAttributes'</a>,
--   <a>listAttributes_targetType</a> - The type of the target with which
--   to list attributes.
newListAttributes :: TargetType -> ListAttributes

-- | The value of the attribute with which to filter results. You must also
--   specify an attribute name to use this parameter.
listAttributes_attributeValue :: Lens' ListAttributes (Maybe Text)

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   list attributes. If you do not specify a cluster, the default cluster
--   is assumed.
listAttributes_cluster :: Lens' ListAttributes (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a <tt>ListAttributes</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listAttributes_nextToken :: Lens' ListAttributes (Maybe Text)

-- | The name of the attribute with which to filter the results.
listAttributes_attributeName :: Lens' ListAttributes (Maybe Text)

-- | The maximum number of cluster results returned by
--   <tt>ListAttributes</tt> in paginated output. When this parameter is
--   used, <tt>ListAttributes</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListAttributes</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListAttributes</tt> returns up to 100
--   results and a <tt>nextToken</tt> value if applicable.
listAttributes_maxResults :: Lens' ListAttributes (Maybe Int)

-- | The type of the target with which to list attributes.
listAttributes_targetType :: Lens' ListAttributes TargetType

-- | <i>See:</i> <a>newListAttributesResponse</a> smart constructor.
data ListAttributesResponse
ListAttributesResponse' :: Maybe Text -> Maybe [Attribute] -> Int -> ListAttributesResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListAttributes</tt> request. When the results of a
--   <tt>ListAttributes</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
[$sel:nextToken:ListAttributesResponse'] :: ListAttributesResponse -> Maybe Text

-- | A list of attribute objects that meet the criteria of the request.
[$sel:attributes:ListAttributesResponse'] :: ListAttributesResponse -> Maybe [Attribute]

-- | The response's http status code.
[$sel:httpStatus:ListAttributesResponse'] :: ListAttributesResponse -> Int

-- | Create a value of <a>ListAttributesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListAttributes'</a>,
--   <a>listAttributesResponse_nextToken</a> - The <tt>nextToken</tt> value
--   to include in a future <tt>ListAttributes</tt> request. When the
--   results of a <tt>ListAttributes</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:attributes:ListAttributesResponse'</a>,
--   <a>listAttributesResponse_attributes</a> - A list of attribute objects
--   that meet the criteria of the request.
--   
--   <a>$sel:httpStatus:ListAttributesResponse'</a>,
--   <a>listAttributesResponse_httpStatus</a> - The response's http status
--   code.
newListAttributesResponse :: Int -> ListAttributesResponse

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListAttributes</tt> request. When the results of a
--   <tt>ListAttributes</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
listAttributesResponse_nextToken :: Lens' ListAttributesResponse (Maybe Text)

-- | A list of attribute objects that meet the criteria of the request.
listAttributesResponse_attributes :: Lens' ListAttributesResponse (Maybe [Attribute])

-- | The response's http status code.
listAttributesResponse_httpStatus :: Lens' ListAttributesResponse Int
instance GHC.Generics.Generic Amazonka.ECS.ListAttributes.ListAttributes
instance GHC.Show.Show Amazonka.ECS.ListAttributes.ListAttributes
instance GHC.Read.Read Amazonka.ECS.ListAttributes.ListAttributes
instance GHC.Classes.Eq Amazonka.ECS.ListAttributes.ListAttributes
instance GHC.Generics.Generic Amazonka.ECS.ListAttributes.ListAttributesResponse
instance GHC.Show.Show Amazonka.ECS.ListAttributes.ListAttributesResponse
instance GHC.Read.Read Amazonka.ECS.ListAttributes.ListAttributesResponse
instance GHC.Classes.Eq Amazonka.ECS.ListAttributes.ListAttributesResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.ListAttributes.ListAttributes
instance Control.DeepSeq.NFData Amazonka.ECS.ListAttributes.ListAttributesResponse
instance Amazonka.Pager.AWSPager Amazonka.ECS.ListAttributes.ListAttributes
instance Data.Hashable.Class.Hashable Amazonka.ECS.ListAttributes.ListAttributes
instance Control.DeepSeq.NFData Amazonka.ECS.ListAttributes.ListAttributes
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.ListAttributes.ListAttributes
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.ListAttributes.ListAttributes
instance Amazonka.Data.Path.ToPath Amazonka.ECS.ListAttributes.ListAttributes
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.ListAttributes.ListAttributes


-- | Lists the account settings for a specified principal.
--   
--   This operation returns paginated results.
module Amazonka.ECS.ListAccountSettings

-- | <i>See:</i> <a>newListAccountSettings</a> smart constructor.
data ListAccountSettings
ListAccountSettings' :: Maybe Text -> Maybe Text -> Maybe SettingName -> Maybe Text -> Maybe Bool -> Maybe Int -> ListAccountSettings

-- | The value of the account settings with which to filter results. You
--   must also specify an account setting name to use this parameter.
[$sel:value:ListAccountSettings'] :: ListAccountSettings -> Maybe Text

-- | The <tt>nextToken</tt> value returned from a
--   <tt>ListAccountSettings</tt> request indicating that more results are
--   available to fulfill the request and further calls will be needed. If
--   <tt>maxResults</tt> was provided, it is possible the number of results
--   to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:ListAccountSettings'] :: ListAccountSettings -> Maybe Text

-- | The name of the account setting you want to list the settings for.
[$sel:name:ListAccountSettings'] :: ListAccountSettings -> Maybe SettingName

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If this field is omitted, the account settings are listed
--   only for the authenticated user.
--   
--   Federated users assume the account setting of the root user and can't
--   have explicit account settings set for them.
[$sel:principalArn:ListAccountSettings'] :: ListAccountSettings -> Maybe Text

-- | Specifies whether to return the effective settings. If <tt>true</tt>,
--   the account settings for the root user or the default setting for the
--   <tt>principalArn</tt> are returned. If <tt>false</tt>, the account
--   settings for the <tt>principalArn</tt> are returned if they are set.
--   Otherwise, no account settings are returned.
[$sel:effectiveSettings:ListAccountSettings'] :: ListAccountSettings -> Maybe Bool

-- | The maximum number of account setting results returned by
--   <tt>ListAccountSettings</tt> in paginated output. When this parameter
--   is used, <tt>ListAccountSettings</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>ListAccountSettings</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 10. If this
--   parameter is not used, then <tt>ListAccountSettings</tt> returns up to
--   10 results and a <tt>nextToken</tt> value if applicable.
[$sel:maxResults:ListAccountSettings'] :: ListAccountSettings -> Maybe Int

-- | Create a value of <a>ListAccountSettings</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:ListAccountSettings'</a>,
--   <a>listAccountSettings_value</a> - The value of the account settings
--   with which to filter results. You must also specify an account setting
--   name to use this parameter.
--   
--   <a>$sel:nextToken:ListAccountSettings'</a>,
--   <a>listAccountSettings_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a <tt>ListAccountSettings</tt> request indicating that
--   more results are available to fulfill the request and further calls
--   will be needed. If <tt>maxResults</tt> was provided, it is possible
--   the number of results to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:name:ListAccountSettings'</a>, <a>listAccountSettings_name</a>
--   - The name of the account setting you want to list the settings for.
--   
--   <a>$sel:principalArn:ListAccountSettings'</a>,
--   <a>listAccountSettings_principalArn</a> - The ARN of the principal,
--   which can be an IAM user, IAM role, or the root user. If this field is
--   omitted, the account settings are listed only for the authenticated
--   user.
--   
--   Federated users assume the account setting of the root user and can't
--   have explicit account settings set for them.
--   
--   <a>$sel:effectiveSettings:ListAccountSettings'</a>,
--   <a>listAccountSettings_effectiveSettings</a> - Specifies whether to
--   return the effective settings. If <tt>true</tt>, the account settings
--   for the root user or the default setting for the <tt>principalArn</tt>
--   are returned. If <tt>false</tt>, the account settings for the
--   <tt>principalArn</tt> are returned if they are set. Otherwise, no
--   account settings are returned.
--   
--   <a>$sel:maxResults:ListAccountSettings'</a>,
--   <a>listAccountSettings_maxResults</a> - The maximum number of account
--   setting results returned by <tt>ListAccountSettings</tt> in paginated
--   output. When this parameter is used, <tt>ListAccountSettings</tt> only
--   returns <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>ListAccountSettings</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 10. If this
--   parameter is not used, then <tt>ListAccountSettings</tt> returns up to
--   10 results and a <tt>nextToken</tt> value if applicable.
newListAccountSettings :: ListAccountSettings

-- | The value of the account settings with which to filter results. You
--   must also specify an account setting name to use this parameter.
listAccountSettings_value :: Lens' ListAccountSettings (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a
--   <tt>ListAccountSettings</tt> request indicating that more results are
--   available to fulfill the request and further calls will be needed. If
--   <tt>maxResults</tt> was provided, it is possible the number of results
--   to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listAccountSettings_nextToken :: Lens' ListAccountSettings (Maybe Text)

-- | The name of the account setting you want to list the settings for.
listAccountSettings_name :: Lens' ListAccountSettings (Maybe SettingName)

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If this field is omitted, the account settings are listed
--   only for the authenticated user.
--   
--   Federated users assume the account setting of the root user and can't
--   have explicit account settings set for them.
listAccountSettings_principalArn :: Lens' ListAccountSettings (Maybe Text)

-- | Specifies whether to return the effective settings. If <tt>true</tt>,
--   the account settings for the root user or the default setting for the
--   <tt>principalArn</tt> are returned. If <tt>false</tt>, the account
--   settings for the <tt>principalArn</tt> are returned if they are set.
--   Otherwise, no account settings are returned.
listAccountSettings_effectiveSettings :: Lens' ListAccountSettings (Maybe Bool)

-- | The maximum number of account setting results returned by
--   <tt>ListAccountSettings</tt> in paginated output. When this parameter
--   is used, <tt>ListAccountSettings</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>ListAccountSettings</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 10. If this
--   parameter is not used, then <tt>ListAccountSettings</tt> returns up to
--   10 results and a <tt>nextToken</tt> value if applicable.
listAccountSettings_maxResults :: Lens' ListAccountSettings (Maybe Int)

-- | <i>See:</i> <a>newListAccountSettingsResponse</a> smart constructor.
data ListAccountSettingsResponse
ListAccountSettingsResponse' :: Maybe [Setting] -> Maybe Text -> Int -> ListAccountSettingsResponse

-- | The account settings for the resource.
[$sel:settings:ListAccountSettingsResponse'] :: ListAccountSettingsResponse -> Maybe [Setting]

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListAccountSettings</tt> request. When the results of a
--   <tt>ListAccountSettings</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
[$sel:nextToken:ListAccountSettingsResponse'] :: ListAccountSettingsResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:ListAccountSettingsResponse'] :: ListAccountSettingsResponse -> Int

-- | Create a value of <a>ListAccountSettingsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:settings:ListAccountSettingsResponse'</a>,
--   <a>listAccountSettingsResponse_settings</a> - The account settings for
--   the resource.
--   
--   <a>$sel:nextToken:ListAccountSettings'</a>,
--   <a>listAccountSettingsResponse_nextToken</a> - The <tt>nextToken</tt>
--   value to include in a future <tt>ListAccountSettings</tt> request.
--   When the results of a <tt>ListAccountSettings</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:httpStatus:ListAccountSettingsResponse'</a>,
--   <a>listAccountSettingsResponse_httpStatus</a> - The response's http
--   status code.
newListAccountSettingsResponse :: Int -> ListAccountSettingsResponse

-- | The account settings for the resource.
listAccountSettingsResponse_settings :: Lens' ListAccountSettingsResponse (Maybe [Setting])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListAccountSettings</tt> request. When the results of a
--   <tt>ListAccountSettings</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
listAccountSettingsResponse_nextToken :: Lens' ListAccountSettingsResponse (Maybe Text)

-- | The response's http status code.
listAccountSettingsResponse_httpStatus :: Lens' ListAccountSettingsResponse Int
instance GHC.Generics.Generic Amazonka.ECS.ListAccountSettings.ListAccountSettings
instance GHC.Show.Show Amazonka.ECS.ListAccountSettings.ListAccountSettings
instance GHC.Read.Read Amazonka.ECS.ListAccountSettings.ListAccountSettings
instance GHC.Classes.Eq Amazonka.ECS.ListAccountSettings.ListAccountSettings
instance GHC.Generics.Generic Amazonka.ECS.ListAccountSettings.ListAccountSettingsResponse
instance GHC.Show.Show Amazonka.ECS.ListAccountSettings.ListAccountSettingsResponse
instance GHC.Read.Read Amazonka.ECS.ListAccountSettings.ListAccountSettingsResponse
instance GHC.Classes.Eq Amazonka.ECS.ListAccountSettings.ListAccountSettingsResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.ListAccountSettings.ListAccountSettings
instance Control.DeepSeq.NFData Amazonka.ECS.ListAccountSettings.ListAccountSettingsResponse
instance Amazonka.Pager.AWSPager Amazonka.ECS.ListAccountSettings.ListAccountSettings
instance Data.Hashable.Class.Hashable Amazonka.ECS.ListAccountSettings.ListAccountSettings
instance Control.DeepSeq.NFData Amazonka.ECS.ListAccountSettings.ListAccountSettings
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.ListAccountSettings.ListAccountSettings
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.ListAccountSettings.ListAccountSettings
instance Amazonka.Data.Path.ToPath Amazonka.ECS.ListAccountSettings.ListAccountSettings
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.ListAccountSettings.ListAccountSettings


-- | Runs a command remotely on a container within a task.
module Amazonka.ECS.ExecuteCommand

-- | <i>See:</i> <a>newExecuteCommand</a> smart constructor.
data ExecuteCommand
ExecuteCommand' :: Maybe Text -> Maybe Text -> Text -> Bool -> Text -> ExecuteCommand

-- | The Amazon Resource Name (ARN) or short name of the cluster the task
--   is running in. If you do not specify a cluster, the default cluster is
--   assumed.
[$sel:cluster:ExecuteCommand'] :: ExecuteCommand -> Maybe Text

-- | The name of the container to execute the command on. A container name
--   only needs to be specified for tasks containing multiple containers.
[$sel:container:ExecuteCommand'] :: ExecuteCommand -> Maybe Text

-- | The command to run on the container.
[$sel:command:ExecuteCommand'] :: ExecuteCommand -> Text

-- | Use this flag to run your command in interactive mode.
[$sel:interactive:ExecuteCommand'] :: ExecuteCommand -> Bool

-- | The Amazon Resource Name (ARN) or ID of the task the container is part
--   of.
[$sel:task:ExecuteCommand'] :: ExecuteCommand -> Text

-- | Create a value of <a>ExecuteCommand</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:ExecuteCommand'</a>, <a>executeCommand_cluster</a> -
--   The Amazon Resource Name (ARN) or short name of the cluster the task
--   is running in. If you do not specify a cluster, the default cluster is
--   assumed.
--   
--   <a>$sel:container:ExecuteCommand'</a>, <a>executeCommand_container</a>
--   - The name of the container to execute the command on. A container
--   name only needs to be specified for tasks containing multiple
--   containers.
--   
--   <a>$sel:command:ExecuteCommand'</a>, <a>executeCommand_command</a> -
--   The command to run on the container.
--   
--   <a>$sel:interactive:ExecuteCommand'</a>,
--   <a>executeCommand_interactive</a> - Use this flag to run your command
--   in interactive mode.
--   
--   <a>$sel:task:ExecuteCommand'</a>, <a>executeCommand_task</a> - The
--   Amazon Resource Name (ARN) or ID of the task the container is part of.
newExecuteCommand :: Text -> Bool -> Text -> ExecuteCommand

-- | The Amazon Resource Name (ARN) or short name of the cluster the task
--   is running in. If you do not specify a cluster, the default cluster is
--   assumed.
executeCommand_cluster :: Lens' ExecuteCommand (Maybe Text)

-- | The name of the container to execute the command on. A container name
--   only needs to be specified for tasks containing multiple containers.
executeCommand_container :: Lens' ExecuteCommand (Maybe Text)

-- | The command to run on the container.
executeCommand_command :: Lens' ExecuteCommand Text

-- | Use this flag to run your command in interactive mode.
executeCommand_interactive :: Lens' ExecuteCommand Bool

-- | The Amazon Resource Name (ARN) or ID of the task the container is part
--   of.
executeCommand_task :: Lens' ExecuteCommand Text

-- | <i>See:</i> <a>newExecuteCommandResponse</a> smart constructor.
data ExecuteCommandResponse
ExecuteCommandResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Session -> Int -> ExecuteCommandResponse

-- | The Amazon Resource Name (ARN) of the cluster.
[$sel:clusterArn:ExecuteCommandResponse'] :: ExecuteCommandResponse -> Maybe Text

-- | The Amazon Resource Name (ARN) of the container.
[$sel:containerArn:ExecuteCommandResponse'] :: ExecuteCommandResponse -> Maybe Text

-- | The Amazon Resource Name (ARN) of the task.
[$sel:taskArn:ExecuteCommandResponse'] :: ExecuteCommandResponse -> Maybe Text

-- | The name of the container.
[$sel:containerName:ExecuteCommandResponse'] :: ExecuteCommandResponse -> Maybe Text

-- | Whether or not the execute command session is running in interactive
--   mode. Amazon ECS only supports initiating interactive sessions, so you
--   must specify <tt>true</tt> for this value.
[$sel:interactive:ExecuteCommandResponse'] :: ExecuteCommandResponse -> Maybe Bool

-- | The details of the SSM session that was created for this instance of
--   execute-command.
[$sel:session:ExecuteCommandResponse'] :: ExecuteCommandResponse -> Maybe Session

-- | The response's http status code.
[$sel:httpStatus:ExecuteCommandResponse'] :: ExecuteCommandResponse -> Int

-- | Create a value of <a>ExecuteCommandResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clusterArn:ExecuteCommandResponse'</a>,
--   <a>executeCommandResponse_clusterArn</a> - The Amazon Resource Name
--   (ARN) of the cluster.
--   
--   <a>$sel:containerArn:ExecuteCommandResponse'</a>,
--   <a>executeCommandResponse_containerArn</a> - The Amazon Resource Name
--   (ARN) of the container.
--   
--   <a>$sel:taskArn:ExecuteCommandResponse'</a>,
--   <a>executeCommandResponse_taskArn</a> - The Amazon Resource Name (ARN)
--   of the task.
--   
--   <a>$sel:containerName:ExecuteCommandResponse'</a>,
--   <a>executeCommandResponse_containerName</a> - The name of the
--   container.
--   
--   <a>$sel:interactive:ExecuteCommand'</a>,
--   <a>executeCommandResponse_interactive</a> - Whether or not the execute
--   command session is running in interactive mode. Amazon ECS only
--   supports initiating interactive sessions, so you must specify
--   <tt>true</tt> for this value.
--   
--   <a>$sel:session:ExecuteCommandResponse'</a>,
--   <a>executeCommandResponse_session</a> - The details of the SSM session
--   that was created for this instance of execute-command.
--   
--   <a>$sel:httpStatus:ExecuteCommandResponse'</a>,
--   <a>executeCommandResponse_httpStatus</a> - The response's http status
--   code.
newExecuteCommandResponse :: Int -> ExecuteCommandResponse

-- | The Amazon Resource Name (ARN) of the cluster.
executeCommandResponse_clusterArn :: Lens' ExecuteCommandResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the container.
executeCommandResponse_containerArn :: Lens' ExecuteCommandResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the task.
executeCommandResponse_taskArn :: Lens' ExecuteCommandResponse (Maybe Text)

-- | The name of the container.
executeCommandResponse_containerName :: Lens' ExecuteCommandResponse (Maybe Text)

-- | Whether or not the execute command session is running in interactive
--   mode. Amazon ECS only supports initiating interactive sessions, so you
--   must specify <tt>true</tt> for this value.
executeCommandResponse_interactive :: Lens' ExecuteCommandResponse (Maybe Bool)

-- | The details of the SSM session that was created for this instance of
--   execute-command.
executeCommandResponse_session :: Lens' ExecuteCommandResponse (Maybe Session)

-- | The response's http status code.
executeCommandResponse_httpStatus :: Lens' ExecuteCommandResponse Int
instance GHC.Generics.Generic Amazonka.ECS.ExecuteCommand.ExecuteCommand
instance GHC.Show.Show Amazonka.ECS.ExecuteCommand.ExecuteCommand
instance GHC.Read.Read Amazonka.ECS.ExecuteCommand.ExecuteCommand
instance GHC.Classes.Eq Amazonka.ECS.ExecuteCommand.ExecuteCommand
instance GHC.Generics.Generic Amazonka.ECS.ExecuteCommand.ExecuteCommandResponse
instance GHC.Show.Show Amazonka.ECS.ExecuteCommand.ExecuteCommandResponse
instance GHC.Classes.Eq Amazonka.ECS.ExecuteCommand.ExecuteCommandResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.ExecuteCommand.ExecuteCommand
instance Control.DeepSeq.NFData Amazonka.ECS.ExecuteCommand.ExecuteCommandResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.ExecuteCommand.ExecuteCommand
instance Control.DeepSeq.NFData Amazonka.ECS.ExecuteCommand.ExecuteCommand
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.ExecuteCommand.ExecuteCommand
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.ExecuteCommand.ExecuteCommand
instance Amazonka.Data.Path.ToPath Amazonka.ECS.ExecuteCommand.ExecuteCommand
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.ExecuteCommand.ExecuteCommand


-- | This action is only used by the Amazon ECS agent, and it is not
--   intended for use outside of the agent.
--   
--   Returns an endpoint for the Amazon ECS agent to poll for updates.
module Amazonka.ECS.DiscoverPollEndpoint

-- | <i>See:</i> <a>newDiscoverPollEndpoint</a> smart constructor.
data DiscoverPollEndpoint
DiscoverPollEndpoint' :: Maybe Text -> Maybe Text -> DiscoverPollEndpoint

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   which the container instance belongs.
[$sel:cluster:DiscoverPollEndpoint'] :: DiscoverPollEndpoint -> Maybe Text

-- | The container instance ID or full ARN of the container instance. The
--   ARN contains the <tt>arn:aws:ecs</tt> namespace, followed by the
--   Region of the container instance, the Amazon Web Services account ID
--   of the container instance owner, the <tt>container-instance</tt>
--   namespace, and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
[$sel:containerInstance:DiscoverPollEndpoint'] :: DiscoverPollEndpoint -> Maybe Text

-- | Create a value of <a>DiscoverPollEndpoint</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:DiscoverPollEndpoint'</a>,
--   <a>discoverPollEndpoint_cluster</a> - The short name or full Amazon
--   Resource Name (ARN) of the cluster to which the container instance
--   belongs.
--   
--   <a>$sel:containerInstance:DiscoverPollEndpoint'</a>,
--   <a>discoverPollEndpoint_containerInstance</a> - The container instance
--   ID or full ARN of the container instance. The ARN contains the
--   <tt>arn:aws:ecs</tt> namespace, followed by the Region of the
--   container instance, the Amazon Web Services account ID of the
--   container instance owner, the <tt>container-instance</tt> namespace,
--   and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
newDiscoverPollEndpoint :: DiscoverPollEndpoint

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   which the container instance belongs.
discoverPollEndpoint_cluster :: Lens' DiscoverPollEndpoint (Maybe Text)

-- | The container instance ID or full ARN of the container instance. The
--   ARN contains the <tt>arn:aws:ecs</tt> namespace, followed by the
--   Region of the container instance, the Amazon Web Services account ID
--   of the container instance owner, the <tt>container-instance</tt>
--   namespace, and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
discoverPollEndpoint_containerInstance :: Lens' DiscoverPollEndpoint (Maybe Text)

-- | <i>See:</i> <a>newDiscoverPollEndpointResponse</a> smart constructor.
data DiscoverPollEndpointResponse
DiscoverPollEndpointResponse' :: Maybe Text -> Maybe Text -> Int -> DiscoverPollEndpointResponse

-- | The telemetry endpoint for the Amazon ECS agent.
[$sel:telemetryEndpoint:DiscoverPollEndpointResponse'] :: DiscoverPollEndpointResponse -> Maybe Text

-- | The endpoint for the Amazon ECS agent to poll.
[$sel:endpoint:DiscoverPollEndpointResponse'] :: DiscoverPollEndpointResponse -> Maybe Text

-- | The response's http status code.
[$sel:httpStatus:DiscoverPollEndpointResponse'] :: DiscoverPollEndpointResponse -> Int

-- | Create a value of <a>DiscoverPollEndpointResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:telemetryEndpoint:DiscoverPollEndpointResponse'</a>,
--   <a>discoverPollEndpointResponse_telemetryEndpoint</a> - The telemetry
--   endpoint for the Amazon ECS agent.
--   
--   <a>$sel:endpoint:DiscoverPollEndpointResponse'</a>,
--   <a>discoverPollEndpointResponse_endpoint</a> - The endpoint for the
--   Amazon ECS agent to poll.
--   
--   <a>$sel:httpStatus:DiscoverPollEndpointResponse'</a>,
--   <a>discoverPollEndpointResponse_httpStatus</a> - The response's http
--   status code.
newDiscoverPollEndpointResponse :: Int -> DiscoverPollEndpointResponse

-- | The telemetry endpoint for the Amazon ECS agent.
discoverPollEndpointResponse_telemetryEndpoint :: Lens' DiscoverPollEndpointResponse (Maybe Text)

-- | The endpoint for the Amazon ECS agent to poll.
discoverPollEndpointResponse_endpoint :: Lens' DiscoverPollEndpointResponse (Maybe Text)

-- | The response's http status code.
discoverPollEndpointResponse_httpStatus :: Lens' DiscoverPollEndpointResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpoint
instance GHC.Show.Show Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpoint
instance GHC.Read.Read Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpoint
instance GHC.Classes.Eq Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpoint
instance GHC.Generics.Generic Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpointResponse
instance GHC.Show.Show Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpointResponse
instance GHC.Read.Read Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpointResponse
instance GHC.Classes.Eq Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpointResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpoint
instance Control.DeepSeq.NFData Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpointResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpoint
instance Control.DeepSeq.NFData Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpoint
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpoint
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpoint
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpoint
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DiscoverPollEndpoint.DiscoverPollEndpoint


-- | Describes a specified task or tasks.
module Amazonka.ECS.DescribeTasks

-- | <i>See:</i> <a>newDescribeTasks</a> smart constructor.
data DescribeTasks
DescribeTasks' :: Maybe [TaskField] -> Maybe Text -> [Text] -> DescribeTasks

-- | Specifies whether you want to see the resource tags for the task. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
[$sel:include:DescribeTasks'] :: DescribeTasks -> Maybe [TaskField]

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the task or tasks to describe. If you do not specify a cluster,
--   the default cluster is assumed. This parameter is required if the task
--   or tasks you are describing were launched in any cluster other than
--   the default cluster.
[$sel:cluster:DescribeTasks'] :: DescribeTasks -> Maybe Text

-- | A list of up to 100 task IDs or full ARN entries.
[$sel:tasks:DescribeTasks'] :: DescribeTasks -> [Text]

-- | Create a value of <a>DescribeTasks</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:include:DescribeTasks'</a>, <a>describeTasks_include</a> -
--   Specifies whether you want to see the resource tags for the task. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
--   
--   <a>$sel:cluster:DescribeTasks'</a>, <a>describeTasks_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the task or tasks to describe. If you do not specify a cluster,
--   the default cluster is assumed. This parameter is required if the task
--   or tasks you are describing were launched in any cluster other than
--   the default cluster.
--   
--   <a>$sel:tasks:DescribeTasks'</a>, <a>describeTasks_tasks</a> - A list
--   of up to 100 task IDs or full ARN entries.
newDescribeTasks :: DescribeTasks

-- | Specifies whether you want to see the resource tags for the task. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
describeTasks_include :: Lens' DescribeTasks (Maybe [TaskField])

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the task or tasks to describe. If you do not specify a cluster,
--   the default cluster is assumed. This parameter is required if the task
--   or tasks you are describing were launched in any cluster other than
--   the default cluster.
describeTasks_cluster :: Lens' DescribeTasks (Maybe Text)

-- | A list of up to 100 task IDs or full ARN entries.
describeTasks_tasks :: Lens' DescribeTasks [Text]

-- | <i>See:</i> <a>newDescribeTasksResponse</a> smart constructor.
data DescribeTasksResponse
DescribeTasksResponse' :: Maybe [Failure] -> Maybe [Task] -> Int -> DescribeTasksResponse

-- | Any failures associated with the call.
[$sel:failures:DescribeTasksResponse'] :: DescribeTasksResponse -> Maybe [Failure]

-- | The list of tasks.
[$sel:tasks:DescribeTasksResponse'] :: DescribeTasksResponse -> Maybe [Task]

-- | The response's http status code.
[$sel:httpStatus:DescribeTasksResponse'] :: DescribeTasksResponse -> Int

-- | Create a value of <a>DescribeTasksResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:DescribeTasksResponse'</a>,
--   <a>describeTasksResponse_failures</a> - Any failures associated with
--   the call.
--   
--   <a>$sel:tasks:DescribeTasks'</a>, <a>describeTasksResponse_tasks</a> -
--   The list of tasks.
--   
--   <a>$sel:httpStatus:DescribeTasksResponse'</a>,
--   <a>describeTasksResponse_httpStatus</a> - The response's http status
--   code.
newDescribeTasksResponse :: Int -> DescribeTasksResponse

-- | Any failures associated with the call.
describeTasksResponse_failures :: Lens' DescribeTasksResponse (Maybe [Failure])

-- | The list of tasks.
describeTasksResponse_tasks :: Lens' DescribeTasksResponse (Maybe [Task])

-- | The response's http status code.
describeTasksResponse_httpStatus :: Lens' DescribeTasksResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DescribeTasks.DescribeTasks
instance GHC.Show.Show Amazonka.ECS.DescribeTasks.DescribeTasks
instance GHC.Read.Read Amazonka.ECS.DescribeTasks.DescribeTasks
instance GHC.Classes.Eq Amazonka.ECS.DescribeTasks.DescribeTasks
instance GHC.Generics.Generic Amazonka.ECS.DescribeTasks.DescribeTasksResponse
instance GHC.Show.Show Amazonka.ECS.DescribeTasks.DescribeTasksResponse
instance GHC.Read.Read Amazonka.ECS.DescribeTasks.DescribeTasksResponse
instance GHC.Classes.Eq Amazonka.ECS.DescribeTasks.DescribeTasksResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DescribeTasks.DescribeTasks
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeTasks.DescribeTasksResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DescribeTasks.DescribeTasks
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeTasks.DescribeTasks
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DescribeTasks.DescribeTasks
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DescribeTasks.DescribeTasks
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DescribeTasks.DescribeTasks
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DescribeTasks.DescribeTasks


-- | Describes the task sets in the specified cluster and service. This is
--   used when a service uses the <tt>EXTERNAL</tt> deployment controller
--   type. For more information, see <a>Amazon ECS Deployment Types</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
module Amazonka.ECS.DescribeTaskSets

-- | <i>See:</i> <a>newDescribeTaskSets</a> smart constructor.
data DescribeTaskSets
DescribeTaskSets' :: Maybe [Text] -> Maybe [TaskSetField] -> Text -> Text -> DescribeTaskSets

-- | The ID or full Amazon Resource Name (ARN) of task sets to describe.
[$sel:taskSets:DescribeTaskSets'] :: DescribeTaskSets -> Maybe [Text]

-- | Specifies whether to see the resource tags for the task set. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
[$sel:include:DescribeTaskSets'] :: DescribeTaskSets -> Maybe [TaskSetField]

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task sets exist in.
[$sel:cluster:DescribeTaskSets'] :: DescribeTaskSets -> Text

-- | The short name or full Amazon Resource Name (ARN) of the service that
--   the task sets exist in.
[$sel:service:DescribeTaskSets'] :: DescribeTaskSets -> Text

-- | Create a value of <a>DescribeTaskSets</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSets:DescribeTaskSets'</a>,
--   <a>describeTaskSets_taskSets</a> - The ID or full Amazon Resource Name
--   (ARN) of task sets to describe.
--   
--   <a>$sel:include:DescribeTaskSets'</a>, <a>describeTaskSets_include</a>
--   - Specifies whether to see the resource tags for the task set. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
--   
--   <a>$sel:cluster:DescribeTaskSets'</a>, <a>describeTaskSets_cluster</a>
--   - The short name or full Amazon Resource Name (ARN) of the cluster
--   that hosts the service that the task sets exist in.
--   
--   <a>$sel:service:DescribeTaskSets'</a>, <a>describeTaskSets_service</a>
--   - The short name or full Amazon Resource Name (ARN) of the service
--   that the task sets exist in.
newDescribeTaskSets :: Text -> Text -> DescribeTaskSets

-- | The ID or full Amazon Resource Name (ARN) of task sets to describe.
describeTaskSets_taskSets :: Lens' DescribeTaskSets (Maybe [Text])

-- | Specifies whether to see the resource tags for the task set. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
describeTaskSets_include :: Lens' DescribeTaskSets (Maybe [TaskSetField])

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task sets exist in.
describeTaskSets_cluster :: Lens' DescribeTaskSets Text

-- | The short name or full Amazon Resource Name (ARN) of the service that
--   the task sets exist in.
describeTaskSets_service :: Lens' DescribeTaskSets Text

-- | <i>See:</i> <a>newDescribeTaskSetsResponse</a> smart constructor.
data DescribeTaskSetsResponse
DescribeTaskSetsResponse' :: Maybe [TaskSet] -> Maybe [Failure] -> Int -> DescribeTaskSetsResponse

-- | The list of task sets described.
[$sel:taskSets:DescribeTaskSetsResponse'] :: DescribeTaskSetsResponse -> Maybe [TaskSet]

-- | Any failures associated with the call.
[$sel:failures:DescribeTaskSetsResponse'] :: DescribeTaskSetsResponse -> Maybe [Failure]

-- | The response's http status code.
[$sel:httpStatus:DescribeTaskSetsResponse'] :: DescribeTaskSetsResponse -> Int

-- | Create a value of <a>DescribeTaskSetsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSets:DescribeTaskSets'</a>,
--   <a>describeTaskSetsResponse_taskSets</a> - The list of task sets
--   described.
--   
--   <a>$sel:failures:DescribeTaskSetsResponse'</a>,
--   <a>describeTaskSetsResponse_failures</a> - Any failures associated
--   with the call.
--   
--   <a>$sel:httpStatus:DescribeTaskSetsResponse'</a>,
--   <a>describeTaskSetsResponse_httpStatus</a> - The response's http
--   status code.
newDescribeTaskSetsResponse :: Int -> DescribeTaskSetsResponse

-- | The list of task sets described.
describeTaskSetsResponse_taskSets :: Lens' DescribeTaskSetsResponse (Maybe [TaskSet])

-- | Any failures associated with the call.
describeTaskSetsResponse_failures :: Lens' DescribeTaskSetsResponse (Maybe [Failure])

-- | The response's http status code.
describeTaskSetsResponse_httpStatus :: Lens' DescribeTaskSetsResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DescribeTaskSets.DescribeTaskSets
instance GHC.Show.Show Amazonka.ECS.DescribeTaskSets.DescribeTaskSets
instance GHC.Read.Read Amazonka.ECS.DescribeTaskSets.DescribeTaskSets
instance GHC.Classes.Eq Amazonka.ECS.DescribeTaskSets.DescribeTaskSets
instance GHC.Generics.Generic Amazonka.ECS.DescribeTaskSets.DescribeTaskSetsResponse
instance GHC.Show.Show Amazonka.ECS.DescribeTaskSets.DescribeTaskSetsResponse
instance GHC.Read.Read Amazonka.ECS.DescribeTaskSets.DescribeTaskSetsResponse
instance GHC.Classes.Eq Amazonka.ECS.DescribeTaskSets.DescribeTaskSetsResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DescribeTaskSets.DescribeTaskSets
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeTaskSets.DescribeTaskSetsResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DescribeTaskSets.DescribeTaskSets
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeTaskSets.DescribeTaskSets
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DescribeTaskSets.DescribeTaskSets
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DescribeTaskSets.DescribeTaskSets
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DescribeTaskSets.DescribeTaskSets
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DescribeTaskSets.DescribeTaskSets


-- | Describes a task definition. You can specify a <tt>family</tt> and
--   <tt>revision</tt> to find information about a specific task
--   definition, or you can simply specify the family to find the latest
--   <tt>ACTIVE</tt> revision in that family.
--   
--   You can only describe <tt>INACTIVE</tt> task definitions while an
--   active task or service references them.
module Amazonka.ECS.DescribeTaskDefinition

-- | <i>See:</i> <a>newDescribeTaskDefinition</a> smart constructor.
data DescribeTaskDefinition
DescribeTaskDefinition' :: Maybe [TaskDefinitionField] -> Text -> DescribeTaskDefinition

-- | Specifies whether to see the resource tags for the task definition. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
[$sel:include:DescribeTaskDefinition'] :: DescribeTaskDefinition -> Maybe [TaskDefinitionField]

-- | The <tt>family</tt> for the latest <tt>ACTIVE</tt> revision,
--   <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>) for a
--   specific revision in the family, or full Amazon Resource Name (ARN) of
--   the task definition to describe.
[$sel:taskDefinition:DescribeTaskDefinition'] :: DescribeTaskDefinition -> Text

-- | Create a value of <a>DescribeTaskDefinition</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:include:DescribeTaskDefinition'</a>,
--   <a>describeTaskDefinition_include</a> - Specifies whether to see the
--   resource tags for the task definition. If <tt>TAGS</tt> is specified,
--   the tags are included in the response. If this field is omitted, tags
--   are not included in the response.
--   
--   <a>$sel:taskDefinition:DescribeTaskDefinition'</a>,
--   <a>describeTaskDefinition_taskDefinition</a> - The <tt>family</tt> for
--   the latest <tt>ACTIVE</tt> revision, <tt>family</tt> and
--   <tt>revision</tt> (<tt>family:revision</tt>) for a specific revision
--   in the family, or full Amazon Resource Name (ARN) of the task
--   definition to describe.
newDescribeTaskDefinition :: Text -> DescribeTaskDefinition

-- | Specifies whether to see the resource tags for the task definition. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
describeTaskDefinition_include :: Lens' DescribeTaskDefinition (Maybe [TaskDefinitionField])

-- | The <tt>family</tt> for the latest <tt>ACTIVE</tt> revision,
--   <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>) for a
--   specific revision in the family, or full Amazon Resource Name (ARN) of
--   the task definition to describe.
describeTaskDefinition_taskDefinition :: Lens' DescribeTaskDefinition Text

-- | <i>See:</i> <a>newDescribeTaskDefinitionResponse</a> smart
--   constructor.
data DescribeTaskDefinitionResponse
DescribeTaskDefinitionResponse' :: Maybe TaskDefinition -> Maybe [Tag] -> Int -> DescribeTaskDefinitionResponse

-- | The full task definition description.
[$sel:taskDefinition:DescribeTaskDefinitionResponse'] :: DescribeTaskDefinitionResponse -> Maybe TaskDefinition

-- | The metadata that is applied to the task definition to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:DescribeTaskDefinitionResponse'] :: DescribeTaskDefinitionResponse -> Maybe [Tag]

-- | The response's http status code.
[$sel:httpStatus:DescribeTaskDefinitionResponse'] :: DescribeTaskDefinitionResponse -> Int

-- | Create a value of <a>DescribeTaskDefinitionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskDefinition:DescribeTaskDefinition'</a>,
--   <a>describeTaskDefinitionResponse_taskDefinition</a> - The full task
--   definition description.
--   
--   <a>$sel:tags:DescribeTaskDefinitionResponse'</a>,
--   <a>describeTaskDefinitionResponse_tags</a> - The metadata that is
--   applied to the task definition to help you categorize and organize
--   them. Each tag consists of a key and an optional value, both of which
--   you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:httpStatus:DescribeTaskDefinitionResponse'</a>,
--   <a>describeTaskDefinitionResponse_httpStatus</a> - The response's http
--   status code.
newDescribeTaskDefinitionResponse :: Int -> DescribeTaskDefinitionResponse

-- | The full task definition description.
describeTaskDefinitionResponse_taskDefinition :: Lens' DescribeTaskDefinitionResponse (Maybe TaskDefinition)

-- | The metadata that is applied to the task definition to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
describeTaskDefinitionResponse_tags :: Lens' DescribeTaskDefinitionResponse (Maybe [Tag])

-- | The response's http status code.
describeTaskDefinitionResponse_httpStatus :: Lens' DescribeTaskDefinitionResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinition
instance GHC.Show.Show Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinition
instance GHC.Read.Read Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinition
instance GHC.Classes.Eq Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinition
instance GHC.Generics.Generic Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinitionResponse
instance GHC.Show.Show Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinitionResponse
instance GHC.Read.Read Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinitionResponse
instance GHC.Classes.Eq Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinitionResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinition
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinitionResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinition
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinition
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinition
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinition
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DescribeTaskDefinition.DescribeTaskDefinition


-- | Describes the specified services running in your cluster.
module Amazonka.ECS.DescribeServices

-- | <i>See:</i> <a>newDescribeServices</a> smart constructor.
data DescribeServices
DescribeServices' :: Maybe [ServiceField] -> Maybe Text -> [Text] -> DescribeServices

-- | Specifies whether you want to see the resource tags for the service.
--   If <tt>TAGS</tt> is specified, the tags are included in the response.
--   If this field is omitted, tags are not included in the response.
[$sel:include:DescribeServices'] :: DescribeServices -> Maybe [ServiceField]

-- | The short name or full Amazon Resource Name (ARN)the cluster that
--   hosts the service to describe. If you do not specify a cluster, the
--   default cluster is assumed. This parameter is required if the service
--   or services you are describing were launched in any cluster other than
--   the default cluster.
[$sel:cluster:DescribeServices'] :: DescribeServices -> Maybe Text

-- | A list of services to describe. You may specify up to 10 services to
--   describe in a single operation.
[$sel:services:DescribeServices'] :: DescribeServices -> [Text]

-- | Create a value of <a>DescribeServices</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:include:DescribeServices'</a>, <a>describeServices_include</a>
--   - Specifies whether you want to see the resource tags for the service.
--   If <tt>TAGS</tt> is specified, the tags are included in the response.
--   If this field is omitted, tags are not included in the response.
--   
--   <a>$sel:cluster:DescribeServices'</a>, <a>describeServices_cluster</a>
--   - The short name or full Amazon Resource Name (ARN)the cluster that
--   hosts the service to describe. If you do not specify a cluster, the
--   default cluster is assumed. This parameter is required if the service
--   or services you are describing were launched in any cluster other than
--   the default cluster.
--   
--   <a>$sel:services:DescribeServices'</a>,
--   <a>describeServices_services</a> - A list of services to describe. You
--   may specify up to 10 services to describe in a single operation.
newDescribeServices :: DescribeServices

-- | Specifies whether you want to see the resource tags for the service.
--   If <tt>TAGS</tt> is specified, the tags are included in the response.
--   If this field is omitted, tags are not included in the response.
describeServices_include :: Lens' DescribeServices (Maybe [ServiceField])

-- | The short name or full Amazon Resource Name (ARN)the cluster that
--   hosts the service to describe. If you do not specify a cluster, the
--   default cluster is assumed. This parameter is required if the service
--   or services you are describing were launched in any cluster other than
--   the default cluster.
describeServices_cluster :: Lens' DescribeServices (Maybe Text)

-- | A list of services to describe. You may specify up to 10 services to
--   describe in a single operation.
describeServices_services :: Lens' DescribeServices [Text]

-- | <i>See:</i> <a>newDescribeServicesResponse</a> smart constructor.
data DescribeServicesResponse
DescribeServicesResponse' :: Maybe [Failure] -> Maybe [ContainerService] -> Int -> DescribeServicesResponse

-- | Any failures associated with the call.
[$sel:failures:DescribeServicesResponse'] :: DescribeServicesResponse -> Maybe [Failure]

-- | The list of services described.
[$sel:services:DescribeServicesResponse'] :: DescribeServicesResponse -> Maybe [ContainerService]

-- | The response's http status code.
[$sel:httpStatus:DescribeServicesResponse'] :: DescribeServicesResponse -> Int

-- | Create a value of <a>DescribeServicesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:DescribeServicesResponse'</a>,
--   <a>describeServicesResponse_failures</a> - Any failures associated
--   with the call.
--   
--   <a>$sel:services:DescribeServices'</a>,
--   <a>describeServicesResponse_services</a> - The list of services
--   described.
--   
--   <a>$sel:httpStatus:DescribeServicesResponse'</a>,
--   <a>describeServicesResponse_httpStatus</a> - The response's http
--   status code.
newDescribeServicesResponse :: Int -> DescribeServicesResponse

-- | Any failures associated with the call.
describeServicesResponse_failures :: Lens' DescribeServicesResponse (Maybe [Failure])

-- | The list of services described.
describeServicesResponse_services :: Lens' DescribeServicesResponse (Maybe [ContainerService])

-- | The response's http status code.
describeServicesResponse_httpStatus :: Lens' DescribeServicesResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DescribeServices.DescribeServices
instance GHC.Show.Show Amazonka.ECS.DescribeServices.DescribeServices
instance GHC.Read.Read Amazonka.ECS.DescribeServices.DescribeServices
instance GHC.Classes.Eq Amazonka.ECS.DescribeServices.DescribeServices
instance GHC.Generics.Generic Amazonka.ECS.DescribeServices.DescribeServicesResponse
instance GHC.Show.Show Amazonka.ECS.DescribeServices.DescribeServicesResponse
instance GHC.Read.Read Amazonka.ECS.DescribeServices.DescribeServicesResponse
instance GHC.Classes.Eq Amazonka.ECS.DescribeServices.DescribeServicesResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DescribeServices.DescribeServices
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeServices.DescribeServicesResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DescribeServices.DescribeServices
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeServices.DescribeServices
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DescribeServices.DescribeServices
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DescribeServices.DescribeServices
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DescribeServices.DescribeServices
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DescribeServices.DescribeServices


-- | Describes one or more container instances. Returns metadata about each
--   container instance requested.
module Amazonka.ECS.DescribeContainerInstances

-- | <i>See:</i> <a>newDescribeContainerInstances</a> smart constructor.
data DescribeContainerInstances
DescribeContainerInstances' :: Maybe [ContainerInstanceField] -> Maybe Text -> [Text] -> DescribeContainerInstances

-- | Specifies whether you want to see the resource tags for the container
--   instance. If <tt>TAGS</tt> is specified, the tags are included in the
--   response. If this field is omitted, tags are not included in the
--   response.
[$sel:include:DescribeContainerInstances'] :: DescribeContainerInstances -> Maybe [ContainerInstanceField]

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the container instances to describe. If you do not specify a
--   cluster, the default cluster is assumed. This parameter is required if
--   the container instance or container instances you are describing were
--   launched in any cluster other than the default cluster.
[$sel:cluster:DescribeContainerInstances'] :: DescribeContainerInstances -> Maybe Text

-- | A list of up to 100 container instance IDs or full Amazon Resource
--   Name (ARN) entries.
[$sel:containerInstances:DescribeContainerInstances'] :: DescribeContainerInstances -> [Text]

-- | Create a value of <a>DescribeContainerInstances</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:include:DescribeContainerInstances'</a>,
--   <a>describeContainerInstances_include</a> - Specifies whether you want
--   to see the resource tags for the container instance. If <tt>TAGS</tt>
--   is specified, the tags are included in the response. If this field is
--   omitted, tags are not included in the response.
--   
--   <a>$sel:cluster:DescribeContainerInstances'</a>,
--   <a>describeContainerInstances_cluster</a> - The short name or full
--   Amazon Resource Name (ARN) of the cluster that hosts the container
--   instances to describe. If you do not specify a cluster, the default
--   cluster is assumed. This parameter is required if the container
--   instance or container instances you are describing were launched in
--   any cluster other than the default cluster.
--   
--   <a>$sel:containerInstances:DescribeContainerInstances'</a>,
--   <a>describeContainerInstances_containerInstances</a> - A list of up to
--   100 container instance IDs or full Amazon Resource Name (ARN) entries.
newDescribeContainerInstances :: DescribeContainerInstances

-- | Specifies whether you want to see the resource tags for the container
--   instance. If <tt>TAGS</tt> is specified, the tags are included in the
--   response. If this field is omitted, tags are not included in the
--   response.
describeContainerInstances_include :: Lens' DescribeContainerInstances (Maybe [ContainerInstanceField])

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the container instances to describe. If you do not specify a
--   cluster, the default cluster is assumed. This parameter is required if
--   the container instance or container instances you are describing were
--   launched in any cluster other than the default cluster.
describeContainerInstances_cluster :: Lens' DescribeContainerInstances (Maybe Text)

-- | A list of up to 100 container instance IDs or full Amazon Resource
--   Name (ARN) entries.
describeContainerInstances_containerInstances :: Lens' DescribeContainerInstances [Text]

-- | <i>See:</i> <a>newDescribeContainerInstancesResponse</a> smart
--   constructor.
data DescribeContainerInstancesResponse
DescribeContainerInstancesResponse' :: Maybe [Failure] -> Maybe [ContainerInstance] -> Int -> DescribeContainerInstancesResponse

-- | Any failures associated with the call.
[$sel:failures:DescribeContainerInstancesResponse'] :: DescribeContainerInstancesResponse -> Maybe [Failure]

-- | The list of container instances.
[$sel:containerInstances:DescribeContainerInstancesResponse'] :: DescribeContainerInstancesResponse -> Maybe [ContainerInstance]

-- | The response's http status code.
[$sel:httpStatus:DescribeContainerInstancesResponse'] :: DescribeContainerInstancesResponse -> Int

-- | Create a value of <a>DescribeContainerInstancesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:DescribeContainerInstancesResponse'</a>,
--   <a>describeContainerInstancesResponse_failures</a> - Any failures
--   associated with the call.
--   
--   <a>$sel:containerInstances:DescribeContainerInstances'</a>,
--   <a>describeContainerInstancesResponse_containerInstances</a> - The
--   list of container instances.
--   
--   <a>$sel:httpStatus:DescribeContainerInstancesResponse'</a>,
--   <a>describeContainerInstancesResponse_httpStatus</a> - The response's
--   http status code.
newDescribeContainerInstancesResponse :: Int -> DescribeContainerInstancesResponse

-- | Any failures associated with the call.
describeContainerInstancesResponse_failures :: Lens' DescribeContainerInstancesResponse (Maybe [Failure])

-- | The list of container instances.
describeContainerInstancesResponse_containerInstances :: Lens' DescribeContainerInstancesResponse (Maybe [ContainerInstance])

-- | The response's http status code.
describeContainerInstancesResponse_httpStatus :: Lens' DescribeContainerInstancesResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstances
instance GHC.Show.Show Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstances
instance GHC.Read.Read Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstances
instance GHC.Classes.Eq Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstances
instance GHC.Generics.Generic Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstancesResponse
instance GHC.Show.Show Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstancesResponse
instance GHC.Read.Read Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstancesResponse
instance GHC.Classes.Eq Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstancesResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstances
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstancesResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstances
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstances
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstances
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstances
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstances
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DescribeContainerInstances.DescribeContainerInstances


-- | Describes one or more of your clusters.
module Amazonka.ECS.DescribeClusters

-- | <i>See:</i> <a>newDescribeClusters</a> smart constructor.
data DescribeClusters
DescribeClusters' :: Maybe [ClusterField] -> Maybe [Text] -> DescribeClusters

-- | Whether to include additional information about the clusters in the
--   response. If this field is omitted, this information isn't included.
--   
--   If <tt>ATTACHMENTS</tt> is specified, the attachments for the
--   container instances or tasks within the cluster are included.
--   
--   If <tt>SETTINGS</tt> is specified, the settings for the cluster are
--   included.
--   
--   If <tt>CONFIGURATIONS</tt> is specified, the configuration for the
--   cluster is included.
--   
--   If <tt>STATISTICS</tt> is specified, the task and service count is
--   included, separated by launch type.
--   
--   If <tt>TAGS</tt> is specified, the metadata tags associated with the
--   cluster are included.
[$sel:include:DescribeClusters'] :: DescribeClusters -> Maybe [ClusterField]

-- | A list of up to 100 cluster names or full cluster Amazon Resource Name
--   (ARN) entries. If you do not specify a cluster, the default cluster is
--   assumed.
[$sel:clusters:DescribeClusters'] :: DescribeClusters -> Maybe [Text]

-- | Create a value of <a>DescribeClusters</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:include:DescribeClusters'</a>, <a>describeClusters_include</a>
--   - Whether to include additional information about the clusters in the
--   response. If this field is omitted, this information isn't included.
--   
--   If <tt>ATTACHMENTS</tt> is specified, the attachments for the
--   container instances or tasks within the cluster are included.
--   
--   If <tt>SETTINGS</tt> is specified, the settings for the cluster are
--   included.
--   
--   If <tt>CONFIGURATIONS</tt> is specified, the configuration for the
--   cluster is included.
--   
--   If <tt>STATISTICS</tt> is specified, the task and service count is
--   included, separated by launch type.
--   
--   If <tt>TAGS</tt> is specified, the metadata tags associated with the
--   cluster are included.
--   
--   <a>$sel:clusters:DescribeClusters'</a>,
--   <a>describeClusters_clusters</a> - A list of up to 100 cluster names
--   or full cluster Amazon Resource Name (ARN) entries. If you do not
--   specify a cluster, the default cluster is assumed.
newDescribeClusters :: DescribeClusters

-- | Whether to include additional information about the clusters in the
--   response. If this field is omitted, this information isn't included.
--   
--   If <tt>ATTACHMENTS</tt> is specified, the attachments for the
--   container instances or tasks within the cluster are included.
--   
--   If <tt>SETTINGS</tt> is specified, the settings for the cluster are
--   included.
--   
--   If <tt>CONFIGURATIONS</tt> is specified, the configuration for the
--   cluster is included.
--   
--   If <tt>STATISTICS</tt> is specified, the task and service count is
--   included, separated by launch type.
--   
--   If <tt>TAGS</tt> is specified, the metadata tags associated with the
--   cluster are included.
describeClusters_include :: Lens' DescribeClusters (Maybe [ClusterField])

-- | A list of up to 100 cluster names or full cluster Amazon Resource Name
--   (ARN) entries. If you do not specify a cluster, the default cluster is
--   assumed.
describeClusters_clusters :: Lens' DescribeClusters (Maybe [Text])

-- | <i>See:</i> <a>newDescribeClustersResponse</a> smart constructor.
data DescribeClustersResponse
DescribeClustersResponse' :: Maybe [Failure] -> Maybe [Cluster] -> Int -> DescribeClustersResponse

-- | Any failures associated with the call.
[$sel:failures:DescribeClustersResponse'] :: DescribeClustersResponse -> Maybe [Failure]

-- | The list of clusters.
[$sel:clusters:DescribeClustersResponse'] :: DescribeClustersResponse -> Maybe [Cluster]

-- | The response's http status code.
[$sel:httpStatus:DescribeClustersResponse'] :: DescribeClustersResponse -> Int

-- | Create a value of <a>DescribeClustersResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:DescribeClustersResponse'</a>,
--   <a>describeClustersResponse_failures</a> - Any failures associated
--   with the call.
--   
--   <a>$sel:clusters:DescribeClusters'</a>,
--   <a>describeClustersResponse_clusters</a> - The list of clusters.
--   
--   <a>$sel:httpStatus:DescribeClustersResponse'</a>,
--   <a>describeClustersResponse_httpStatus</a> - The response's http
--   status code.
newDescribeClustersResponse :: Int -> DescribeClustersResponse

-- | Any failures associated with the call.
describeClustersResponse_failures :: Lens' DescribeClustersResponse (Maybe [Failure])

-- | The list of clusters.
describeClustersResponse_clusters :: Lens' DescribeClustersResponse (Maybe [Cluster])

-- | The response's http status code.
describeClustersResponse_httpStatus :: Lens' DescribeClustersResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DescribeClusters.DescribeClusters
instance GHC.Show.Show Amazonka.ECS.DescribeClusters.DescribeClusters
instance GHC.Read.Read Amazonka.ECS.DescribeClusters.DescribeClusters
instance GHC.Classes.Eq Amazonka.ECS.DescribeClusters.DescribeClusters
instance GHC.Generics.Generic Amazonka.ECS.DescribeClusters.DescribeClustersResponse
instance GHC.Show.Show Amazonka.ECS.DescribeClusters.DescribeClustersResponse
instance GHC.Read.Read Amazonka.ECS.DescribeClusters.DescribeClustersResponse
instance GHC.Classes.Eq Amazonka.ECS.DescribeClusters.DescribeClustersResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DescribeClusters.DescribeClusters
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeClusters.DescribeClustersResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DescribeClusters.DescribeClusters
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeClusters.DescribeClusters
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DescribeClusters.DescribeClusters
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DescribeClusters.DescribeClusters
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DescribeClusters.DescribeClusters
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DescribeClusters.DescribeClusters


-- | Describes one or more of your capacity providers.
module Amazonka.ECS.DescribeCapacityProviders

-- | <i>See:</i> <a>newDescribeCapacityProviders</a> smart constructor.
data DescribeCapacityProviders
DescribeCapacityProviders' :: Maybe [CapacityProviderField] -> Maybe Text -> Maybe [Text] -> Maybe Int -> DescribeCapacityProviders

-- | Specifies whether or not you want to see the resource tags for the
--   capacity provider. If <tt>TAGS</tt> is specified, the tags are
--   included in the response. If this field is omitted, tags are not
--   included in the response.
[$sel:include:DescribeCapacityProviders'] :: DescribeCapacityProviders -> Maybe [CapacityProviderField]

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeCapacityProviders</tt> request where <tt>maxResults</tt>
--   was used and the results exceeded the value of that parameter.
--   Pagination continues from the end of the previous results that
--   returned the <tt>nextToken</tt> value.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
[$sel:nextToken:DescribeCapacityProviders'] :: DescribeCapacityProviders -> Maybe Text

-- | The short name or full Amazon Resource Name (ARN) of one or more
--   capacity providers. Up to <tt>100</tt> capacity providers can be
--   described in an action.
[$sel:capacityProviders:DescribeCapacityProviders'] :: DescribeCapacityProviders -> Maybe [Text]

-- | The maximum number of account setting results returned by
--   <tt>DescribeCapacityProviders</tt> in paginated output. When this
--   parameter is used, <tt>DescribeCapacityProviders</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeCapacityProviders</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 10. If this
--   parameter is not used, then <tt>DescribeCapacityProviders</tt> returns
--   up to 10 results and a <tt>nextToken</tt> value if applicable.
[$sel:maxResults:DescribeCapacityProviders'] :: DescribeCapacityProviders -> Maybe Int

-- | Create a value of <a>DescribeCapacityProviders</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:include:DescribeCapacityProviders'</a>,
--   <a>describeCapacityProviders_include</a> - Specifies whether or not
--   you want to see the resource tags for the capacity provider. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
--   
--   <a>$sel:nextToken:DescribeCapacityProviders'</a>,
--   <a>describeCapacityProviders_nextToken</a> - The <tt>nextToken</tt>
--   value returned from a previous paginated
--   <tt>DescribeCapacityProviders</tt> request where <tt>maxResults</tt>
--   was used and the results exceeded the value of that parameter.
--   Pagination continues from the end of the previous results that
--   returned the <tt>nextToken</tt> value.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:capacityProviders:DescribeCapacityProviders'</a>,
--   <a>describeCapacityProviders_capacityProviders</a> - The short name or
--   full Amazon Resource Name (ARN) of one or more capacity providers. Up
--   to <tt>100</tt> capacity providers can be described in an action.
--   
--   <a>$sel:maxResults:DescribeCapacityProviders'</a>,
--   <a>describeCapacityProviders_maxResults</a> - The maximum number of
--   account setting results returned by <tt>DescribeCapacityProviders</tt>
--   in paginated output. When this parameter is used,
--   <tt>DescribeCapacityProviders</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>DescribeCapacityProviders</tt> request with the
--   returned <tt>nextToken</tt> value. This value can be between 1 and 10.
--   If this parameter is not used, then <tt>DescribeCapacityProviders</tt>
--   returns up to 10 results and a <tt>nextToken</tt> value if applicable.
newDescribeCapacityProviders :: DescribeCapacityProviders

-- | Specifies whether or not you want to see the resource tags for the
--   capacity provider. If <tt>TAGS</tt> is specified, the tags are
--   included in the response. If this field is omitted, tags are not
--   included in the response.
describeCapacityProviders_include :: Lens' DescribeCapacityProviders (Maybe [CapacityProviderField])

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeCapacityProviders</tt> request where <tt>maxResults</tt>
--   was used and the results exceeded the value of that parameter.
--   Pagination continues from the end of the previous results that
--   returned the <tt>nextToken</tt> value.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
describeCapacityProviders_nextToken :: Lens' DescribeCapacityProviders (Maybe Text)

-- | The short name or full Amazon Resource Name (ARN) of one or more
--   capacity providers. Up to <tt>100</tt> capacity providers can be
--   described in an action.
describeCapacityProviders_capacityProviders :: Lens' DescribeCapacityProviders (Maybe [Text])

-- | The maximum number of account setting results returned by
--   <tt>DescribeCapacityProviders</tt> in paginated output. When this
--   parameter is used, <tt>DescribeCapacityProviders</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeCapacityProviders</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 10. If this
--   parameter is not used, then <tt>DescribeCapacityProviders</tt> returns
--   up to 10 results and a <tt>nextToken</tt> value if applicable.
describeCapacityProviders_maxResults :: Lens' DescribeCapacityProviders (Maybe Int)

-- | <i>See:</i> <a>newDescribeCapacityProvidersResponse</a> smart
--   constructor.
data DescribeCapacityProvidersResponse
DescribeCapacityProvidersResponse' :: Maybe [Failure] -> Maybe Text -> Maybe [CapacityProvider] -> Int -> DescribeCapacityProvidersResponse

-- | Any failures associated with the call.
[$sel:failures:DescribeCapacityProvidersResponse'] :: DescribeCapacityProvidersResponse -> Maybe [Failure]

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeCapacityProviders</tt> request. When the results of a
--   <tt>DescribeCapacityProviders</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
[$sel:nextToken:DescribeCapacityProvidersResponse'] :: DescribeCapacityProvidersResponse -> Maybe Text

-- | The list of capacity providers.
[$sel:capacityProviders:DescribeCapacityProvidersResponse'] :: DescribeCapacityProvidersResponse -> Maybe [CapacityProvider]

-- | The response's http status code.
[$sel:httpStatus:DescribeCapacityProvidersResponse'] :: DescribeCapacityProvidersResponse -> Int

-- | Create a value of <a>DescribeCapacityProvidersResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:DescribeCapacityProvidersResponse'</a>,
--   <a>describeCapacityProvidersResponse_failures</a> - Any failures
--   associated with the call.
--   
--   <a>$sel:nextToken:DescribeCapacityProviders'</a>,
--   <a>describeCapacityProvidersResponse_nextToken</a> - The
--   <tt>nextToken</tt> value to include in a future
--   <tt>DescribeCapacityProviders</tt> request. When the results of a
--   <tt>DescribeCapacityProviders</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
--   
--   <a>$sel:capacityProviders:DescribeCapacityProviders'</a>,
--   <a>describeCapacityProvidersResponse_capacityProviders</a> - The list
--   of capacity providers.
--   
--   <a>$sel:httpStatus:DescribeCapacityProvidersResponse'</a>,
--   <a>describeCapacityProvidersResponse_httpStatus</a> - The response's
--   http status code.
newDescribeCapacityProvidersResponse :: Int -> DescribeCapacityProvidersResponse

-- | Any failures associated with the call.
describeCapacityProvidersResponse_failures :: Lens' DescribeCapacityProvidersResponse (Maybe [Failure])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeCapacityProviders</tt> request. When the results of a
--   <tt>DescribeCapacityProviders</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
describeCapacityProvidersResponse_nextToken :: Lens' DescribeCapacityProvidersResponse (Maybe Text)

-- | The list of capacity providers.
describeCapacityProvidersResponse_capacityProviders :: Lens' DescribeCapacityProvidersResponse (Maybe [CapacityProvider])

-- | The response's http status code.
describeCapacityProvidersResponse_httpStatus :: Lens' DescribeCapacityProvidersResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProviders
instance GHC.Show.Show Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProviders
instance GHC.Read.Read Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProviders
instance GHC.Classes.Eq Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProviders
instance GHC.Generics.Generic Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProvidersResponse
instance GHC.Show.Show Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProvidersResponse
instance GHC.Read.Read Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProvidersResponse
instance GHC.Classes.Eq Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProvidersResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProviders
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProvidersResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProviders
instance Control.DeepSeq.NFData Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProviders
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProviders
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProviders
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProviders
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DescribeCapacityProviders.DescribeCapacityProviders


-- | Deregisters the specified task definition by family and revision. Upon
--   deregistration, the task definition is marked as <tt>INACTIVE</tt>.
--   Existing tasks and services that reference an <tt>INACTIVE</tt> task
--   definition continue to run without disruption. Existing services that
--   reference an <tt>INACTIVE</tt> task definition can still scale up or
--   down by modifying the service's desired count.
--   
--   You cannot use an <tt>INACTIVE</tt> task definition to run new tasks
--   or create new services, and you cannot update an existing service to
--   reference an <tt>INACTIVE</tt> task definition. However, there may be
--   up to a 10-minute window following deregistration where these
--   restrictions have not yet taken effect.
--   
--   At this time, <tt>INACTIVE</tt> task definitions remain discoverable
--   in your account indefinitely. However, this behavior is subject to
--   change in the future, so you should not rely on <tt>INACTIVE</tt> task
--   definitions persisting beyond the lifecycle of any associated tasks
--   and services.
module Amazonka.ECS.DeregisterTaskDefinition

-- | <i>See:</i> <a>newDeregisterTaskDefinition</a> smart constructor.
data DeregisterTaskDefinition
DeregisterTaskDefinition' :: Text -> DeregisterTaskDefinition

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full Amazon Resource Name (ARN) of the task definition to
--   deregister. You must specify a <tt>revision</tt>.
[$sel:taskDefinition:DeregisterTaskDefinition'] :: DeregisterTaskDefinition -> Text

-- | Create a value of <a>DeregisterTaskDefinition</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskDefinition:DeregisterTaskDefinition'</a>,
--   <a>deregisterTaskDefinition_taskDefinition</a> - The <tt>family</tt>
--   and <tt>revision</tt> (<tt>family:revision</tt>) or full Amazon
--   Resource Name (ARN) of the task definition to deregister. You must
--   specify a <tt>revision</tt>.
newDeregisterTaskDefinition :: Text -> DeregisterTaskDefinition

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full Amazon Resource Name (ARN) of the task definition to
--   deregister. You must specify a <tt>revision</tt>.
deregisterTaskDefinition_taskDefinition :: Lens' DeregisterTaskDefinition Text

-- | <i>See:</i> <a>newDeregisterTaskDefinitionResponse</a> smart
--   constructor.
data DeregisterTaskDefinitionResponse
DeregisterTaskDefinitionResponse' :: Maybe TaskDefinition -> Int -> DeregisterTaskDefinitionResponse

-- | The full description of the deregistered task.
[$sel:taskDefinition:DeregisterTaskDefinitionResponse'] :: DeregisterTaskDefinitionResponse -> Maybe TaskDefinition

-- | The response's http status code.
[$sel:httpStatus:DeregisterTaskDefinitionResponse'] :: DeregisterTaskDefinitionResponse -> Int

-- | Create a value of <a>DeregisterTaskDefinitionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskDefinition:DeregisterTaskDefinition'</a>,
--   <a>deregisterTaskDefinitionResponse_taskDefinition</a> - The full
--   description of the deregistered task.
--   
--   <a>$sel:httpStatus:DeregisterTaskDefinitionResponse'</a>,
--   <a>deregisterTaskDefinitionResponse_httpStatus</a> - The response's
--   http status code.
newDeregisterTaskDefinitionResponse :: Int -> DeregisterTaskDefinitionResponse

-- | The full description of the deregistered task.
deregisterTaskDefinitionResponse_taskDefinition :: Lens' DeregisterTaskDefinitionResponse (Maybe TaskDefinition)

-- | The response's http status code.
deregisterTaskDefinitionResponse_httpStatus :: Lens' DeregisterTaskDefinitionResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinition
instance GHC.Show.Show Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinition
instance GHC.Read.Read Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinition
instance GHC.Classes.Eq Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinition
instance GHC.Generics.Generic Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinitionResponse
instance GHC.Show.Show Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinitionResponse
instance GHC.Read.Read Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinitionResponse
instance GHC.Classes.Eq Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinitionResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinition
instance Control.DeepSeq.NFData Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinitionResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinition
instance Control.DeepSeq.NFData Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinition
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinition
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinition
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinition
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DeregisterTaskDefinition.DeregisterTaskDefinition


-- | Deregisters an Amazon ECS container instance from the specified
--   cluster. This instance is no longer available to run tasks.
--   
--   If you intend to use the container instance for some other purpose
--   after deregistration, you should stop all of the tasks running on the
--   container instance before deregistration. That prevents any orphaned
--   tasks from consuming resources.
--   
--   Deregistering a container instance removes the instance from a
--   cluster, but it does not terminate the EC2 instance. If you are
--   finished using the instance, be sure to terminate it in the Amazon EC2
--   console to stop billing.
--   
--   If you terminate a running container instance, Amazon ECS
--   automatically deregisters the instance from your cluster (stopped
--   container instances or instances with disconnected agents are not
--   automatically deregistered when terminated).
module Amazonka.ECS.DeregisterContainerInstance

-- | <i>See:</i> <a>newDeregisterContainerInstance</a> smart constructor.
data DeregisterContainerInstance
DeregisterContainerInstance' :: Maybe Text -> Maybe Bool -> Text -> DeregisterContainerInstance

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the container instance to deregister. If you do not specify a
--   cluster, the default cluster is assumed.
[$sel:cluster:DeregisterContainerInstance'] :: DeregisterContainerInstance -> Maybe Text

-- | Forces the deregistration of the container instance. If you have tasks
--   running on the container instance when you deregister it with the
--   <tt>force</tt> option, these tasks remain running until you terminate
--   the instance or the tasks stop through some other means, but they are
--   orphaned (no longer monitored or accounted for by Amazon ECS). If an
--   orphaned task on your container instance is part of an Amazon ECS
--   service, then the service scheduler starts another copy of that task,
--   on a different container instance if possible.
--   
--   Any containers in orphaned service tasks that are registered with a
--   Classic Load Balancer or an Application Load Balancer target group are
--   deregistered. They begin connection draining according to the settings
--   on the load balancer or target group.
[$sel:force:DeregisterContainerInstance'] :: DeregisterContainerInstance -> Maybe Bool

-- | The container instance ID or full ARN of the container instance to
--   deregister. The ARN contains the <tt>arn:aws:ecs</tt> namespace,
--   followed by the Region of the container instance, the Amazon Web
--   Services account ID of the container instance owner, the
--   <tt>container-instance</tt> namespace, and then the container instance
--   ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
[$sel:containerInstance:DeregisterContainerInstance'] :: DeregisterContainerInstance -> Text

-- | Create a value of <a>DeregisterContainerInstance</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:DeregisterContainerInstance'</a>,
--   <a>deregisterContainerInstance_cluster</a> - The short name or full
--   Amazon Resource Name (ARN) of the cluster that hosts the container
--   instance to deregister. If you do not specify a cluster, the default
--   cluster is assumed.
--   
--   <a>$sel:force:DeregisterContainerInstance'</a>,
--   <a>deregisterContainerInstance_force</a> - Forces the deregistration
--   of the container instance. If you have tasks running on the container
--   instance when you deregister it with the <tt>force</tt> option, these
--   tasks remain running until you terminate the instance or the tasks
--   stop through some other means, but they are orphaned (no longer
--   monitored or accounted for by Amazon ECS). If an orphaned task on your
--   container instance is part of an Amazon ECS service, then the service
--   scheduler starts another copy of that task, on a different container
--   instance if possible.
--   
--   Any containers in orphaned service tasks that are registered with a
--   Classic Load Balancer or an Application Load Balancer target group are
--   deregistered. They begin connection draining according to the settings
--   on the load balancer or target group.
--   
--   <a>$sel:containerInstance:DeregisterContainerInstance'</a>,
--   <a>deregisterContainerInstance_containerInstance</a> - The container
--   instance ID or full ARN of the container instance to deregister. The
--   ARN contains the <tt>arn:aws:ecs</tt> namespace, followed by the
--   Region of the container instance, the Amazon Web Services account ID
--   of the container instance owner, the <tt>container-instance</tt>
--   namespace, and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
newDeregisterContainerInstance :: Text -> DeregisterContainerInstance

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the container instance to deregister. If you do not specify a
--   cluster, the default cluster is assumed.
deregisterContainerInstance_cluster :: Lens' DeregisterContainerInstance (Maybe Text)

-- | Forces the deregistration of the container instance. If you have tasks
--   running on the container instance when you deregister it with the
--   <tt>force</tt> option, these tasks remain running until you terminate
--   the instance or the tasks stop through some other means, but they are
--   orphaned (no longer monitored or accounted for by Amazon ECS). If an
--   orphaned task on your container instance is part of an Amazon ECS
--   service, then the service scheduler starts another copy of that task,
--   on a different container instance if possible.
--   
--   Any containers in orphaned service tasks that are registered with a
--   Classic Load Balancer or an Application Load Balancer target group are
--   deregistered. They begin connection draining according to the settings
--   on the load balancer or target group.
deregisterContainerInstance_force :: Lens' DeregisterContainerInstance (Maybe Bool)

-- | The container instance ID or full ARN of the container instance to
--   deregister. The ARN contains the <tt>arn:aws:ecs</tt> namespace,
--   followed by the Region of the container instance, the Amazon Web
--   Services account ID of the container instance owner, the
--   <tt>container-instance</tt> namespace, and then the container instance
--   ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
deregisterContainerInstance_containerInstance :: Lens' DeregisterContainerInstance Text

-- | <i>See:</i> <a>newDeregisterContainerInstanceResponse</a> smart
--   constructor.
data DeregisterContainerInstanceResponse
DeregisterContainerInstanceResponse' :: Maybe ContainerInstance -> Int -> DeregisterContainerInstanceResponse

-- | The container instance that was deregistered.
[$sel:containerInstance:DeregisterContainerInstanceResponse'] :: DeregisterContainerInstanceResponse -> Maybe ContainerInstance

-- | The response's http status code.
[$sel:httpStatus:DeregisterContainerInstanceResponse'] :: DeregisterContainerInstanceResponse -> Int

-- | Create a value of <a>DeregisterContainerInstanceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerInstance:DeregisterContainerInstance'</a>,
--   <a>deregisterContainerInstanceResponse_containerInstance</a> - The
--   container instance that was deregistered.
--   
--   <a>$sel:httpStatus:DeregisterContainerInstanceResponse'</a>,
--   <a>deregisterContainerInstanceResponse_httpStatus</a> - The response's
--   http status code.
newDeregisterContainerInstanceResponse :: Int -> DeregisterContainerInstanceResponse

-- | The container instance that was deregistered.
deregisterContainerInstanceResponse_containerInstance :: Lens' DeregisterContainerInstanceResponse (Maybe ContainerInstance)

-- | The response's http status code.
deregisterContainerInstanceResponse_httpStatus :: Lens' DeregisterContainerInstanceResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstance
instance GHC.Show.Show Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstance
instance GHC.Read.Read Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstance
instance GHC.Classes.Eq Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstance
instance GHC.Generics.Generic Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstanceResponse
instance GHC.Show.Show Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstanceResponse
instance GHC.Read.Read Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstanceResponse
instance GHC.Classes.Eq Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstanceResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstance
instance Control.DeepSeq.NFData Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstanceResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstance
instance Control.DeepSeq.NFData Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstance
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstance
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstance
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstance
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DeregisterContainerInstance.DeregisterContainerInstance


-- | Deletes a specified task set within a service. This is used when a
--   service uses the <tt>EXTERNAL</tt> deployment controller type. For
--   more information, see <a>Amazon ECS Deployment Types</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
module Amazonka.ECS.DeleteTaskSet

-- | <i>See:</i> <a>newDeleteTaskSet</a> smart constructor.
data DeleteTaskSet
DeleteTaskSet' :: Maybe Bool -> Text -> Text -> Text -> DeleteTaskSet

-- | If <tt>true</tt>, this allows you to delete a task set even if it
--   hasn't been scaled down to zero.
[$sel:force:DeleteTaskSet'] :: DeleteTaskSet -> Maybe Bool

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in to delete.
[$sel:cluster:DeleteTaskSet'] :: DeleteTaskSet -> Text

-- | The short name or full Amazon Resource Name (ARN) of the service that
--   hosts the task set to delete.
[$sel:service:DeleteTaskSet'] :: DeleteTaskSet -> Text

-- | The task set ID or full Amazon Resource Name (ARN) of the task set to
--   delete.
[$sel:taskSet:DeleteTaskSet'] :: DeleteTaskSet -> Text

-- | Create a value of <a>DeleteTaskSet</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:force:DeleteTaskSet'</a>, <a>deleteTaskSet_force</a> - If
--   <tt>true</tt>, this allows you to delete a task set even if it hasn't
--   been scaled down to zero.
--   
--   <a>$sel:cluster:DeleteTaskSet'</a>, <a>deleteTaskSet_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in to delete.
--   
--   <a>$sel:service:DeleteTaskSet'</a>, <a>deleteTaskSet_service</a> - The
--   short name or full Amazon Resource Name (ARN) of the service that
--   hosts the task set to delete.
--   
--   <a>$sel:taskSet:DeleteTaskSet'</a>, <a>deleteTaskSet_taskSet</a> - The
--   task set ID or full Amazon Resource Name (ARN) of the task set to
--   delete.
newDeleteTaskSet :: Text -> Text -> Text -> DeleteTaskSet

-- | If <tt>true</tt>, this allows you to delete a task set even if it
--   hasn't been scaled down to zero.
deleteTaskSet_force :: Lens' DeleteTaskSet (Maybe Bool)

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in to delete.
deleteTaskSet_cluster :: Lens' DeleteTaskSet Text

-- | The short name or full Amazon Resource Name (ARN) of the service that
--   hosts the task set to delete.
deleteTaskSet_service :: Lens' DeleteTaskSet Text

-- | The task set ID or full Amazon Resource Name (ARN) of the task set to
--   delete.
deleteTaskSet_taskSet :: Lens' DeleteTaskSet Text

-- | <i>See:</i> <a>newDeleteTaskSetResponse</a> smart constructor.
data DeleteTaskSetResponse
DeleteTaskSetResponse' :: Maybe TaskSet -> Int -> DeleteTaskSetResponse

-- | Details about the task set.
[$sel:taskSet:DeleteTaskSetResponse'] :: DeleteTaskSetResponse -> Maybe TaskSet

-- | The response's http status code.
[$sel:httpStatus:DeleteTaskSetResponse'] :: DeleteTaskSetResponse -> Int

-- | Create a value of <a>DeleteTaskSetResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSet:DeleteTaskSet'</a>,
--   <a>deleteTaskSetResponse_taskSet</a> - Details about the task set.
--   
--   <a>$sel:httpStatus:DeleteTaskSetResponse'</a>,
--   <a>deleteTaskSetResponse_httpStatus</a> - The response's http status
--   code.
newDeleteTaskSetResponse :: Int -> DeleteTaskSetResponse

-- | Details about the task set.
deleteTaskSetResponse_taskSet :: Lens' DeleteTaskSetResponse (Maybe TaskSet)

-- | The response's http status code.
deleteTaskSetResponse_httpStatus :: Lens' DeleteTaskSetResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DeleteTaskSet.DeleteTaskSet
instance GHC.Show.Show Amazonka.ECS.DeleteTaskSet.DeleteTaskSet
instance GHC.Read.Read Amazonka.ECS.DeleteTaskSet.DeleteTaskSet
instance GHC.Classes.Eq Amazonka.ECS.DeleteTaskSet.DeleteTaskSet
instance GHC.Generics.Generic Amazonka.ECS.DeleteTaskSet.DeleteTaskSetResponse
instance GHC.Show.Show Amazonka.ECS.DeleteTaskSet.DeleteTaskSetResponse
instance GHC.Read.Read Amazonka.ECS.DeleteTaskSet.DeleteTaskSetResponse
instance GHC.Classes.Eq Amazonka.ECS.DeleteTaskSet.DeleteTaskSetResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DeleteTaskSet.DeleteTaskSet
instance Control.DeepSeq.NFData Amazonka.ECS.DeleteTaskSet.DeleteTaskSetResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DeleteTaskSet.DeleteTaskSet
instance Control.DeepSeq.NFData Amazonka.ECS.DeleteTaskSet.DeleteTaskSet
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DeleteTaskSet.DeleteTaskSet
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DeleteTaskSet.DeleteTaskSet
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DeleteTaskSet.DeleteTaskSet
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DeleteTaskSet.DeleteTaskSet


-- | Deletes a specified service within a cluster. You can delete a service
--   if you have no running tasks in it and the desired task count is zero.
--   If the service is actively maintaining tasks, you cannot delete it,
--   and you must update the service to a desired task count of zero. For
--   more information, see UpdateService.
--   
--   When you delete a service, if there are still running tasks that
--   require cleanup, the service status moves from <tt>ACTIVE</tt> to
--   <tt>DRAINING</tt>, and the service is no longer visible in the console
--   or in the ListServices API operation. After all tasks have
--   transitioned to either <tt>STOPPING</tt> or <tt>STOPPED</tt> status,
--   the service status moves from <tt>DRAINING</tt> to <tt>INACTIVE</tt>.
--   Services in the <tt>DRAINING</tt> or <tt>INACTIVE</tt> status can
--   still be viewed with the DescribeServices API operation. However, in
--   the future, <tt>INACTIVE</tt> services may be cleaned up and purged
--   from Amazon ECS record keeping, and DescribeServices calls on those
--   services return a <tt>ServiceNotFoundException</tt> error.
--   
--   If you attempt to create a new service with the same name as an
--   existing service in either <tt>ACTIVE</tt> or <tt>DRAINING</tt>
--   status, you receive an error.
module Amazonka.ECS.DeleteService

-- | <i>See:</i> <a>newDeleteService</a> smart constructor.
data DeleteService
DeleteService' :: Maybe Text -> Maybe Bool -> Text -> DeleteService

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service to delete. If you do not specify a cluster, the
--   default cluster is assumed.
[$sel:cluster:DeleteService'] :: DeleteService -> Maybe Text

-- | If <tt>true</tt>, allows you to delete a service even if it has not
--   been scaled down to zero tasks. It is only necessary to use this if
--   the service is using the <tt>REPLICA</tt> scheduling strategy.
[$sel:force:DeleteService'] :: DeleteService -> Maybe Bool

-- | The name of the service to delete.
[$sel:service:DeleteService'] :: DeleteService -> Text

-- | Create a value of <a>DeleteService</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:DeleteService'</a>, <a>deleteService_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service to delete. If you do not specify a cluster, the
--   default cluster is assumed.
--   
--   <a>$sel:force:DeleteService'</a>, <a>deleteService_force</a> - If
--   <tt>true</tt>, allows you to delete a service even if it has not been
--   scaled down to zero tasks. It is only necessary to use this if the
--   service is using the <tt>REPLICA</tt> scheduling strategy.
--   
--   <a>$sel:service:DeleteService'</a>, <a>deleteService_service</a> - The
--   name of the service to delete.
newDeleteService :: Text -> DeleteService

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service to delete. If you do not specify a cluster, the
--   default cluster is assumed.
deleteService_cluster :: Lens' DeleteService (Maybe Text)

-- | If <tt>true</tt>, allows you to delete a service even if it has not
--   been scaled down to zero tasks. It is only necessary to use this if
--   the service is using the <tt>REPLICA</tt> scheduling strategy.
deleteService_force :: Lens' DeleteService (Maybe Bool)

-- | The name of the service to delete.
deleteService_service :: Lens' DeleteService Text

-- | <i>See:</i> <a>newDeleteServiceResponse</a> smart constructor.
data DeleteServiceResponse
DeleteServiceResponse' :: Maybe ContainerService -> Int -> DeleteServiceResponse

-- | The full description of the deleted service.
[$sel:service:DeleteServiceResponse'] :: DeleteServiceResponse -> Maybe ContainerService

-- | The response's http status code.
[$sel:httpStatus:DeleteServiceResponse'] :: DeleteServiceResponse -> Int

-- | Create a value of <a>DeleteServiceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:service:DeleteService'</a>,
--   <a>deleteServiceResponse_service</a> - The full description of the
--   deleted service.
--   
--   <a>$sel:httpStatus:DeleteServiceResponse'</a>,
--   <a>deleteServiceResponse_httpStatus</a> - The response's http status
--   code.
newDeleteServiceResponse :: Int -> DeleteServiceResponse

-- | The full description of the deleted service.
deleteServiceResponse_service :: Lens' DeleteServiceResponse (Maybe ContainerService)

-- | The response's http status code.
deleteServiceResponse_httpStatus :: Lens' DeleteServiceResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DeleteService.DeleteService
instance GHC.Show.Show Amazonka.ECS.DeleteService.DeleteService
instance GHC.Read.Read Amazonka.ECS.DeleteService.DeleteService
instance GHC.Classes.Eq Amazonka.ECS.DeleteService.DeleteService
instance GHC.Generics.Generic Amazonka.ECS.DeleteService.DeleteServiceResponse
instance GHC.Show.Show Amazonka.ECS.DeleteService.DeleteServiceResponse
instance GHC.Read.Read Amazonka.ECS.DeleteService.DeleteServiceResponse
instance GHC.Classes.Eq Amazonka.ECS.DeleteService.DeleteServiceResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DeleteService.DeleteService
instance Control.DeepSeq.NFData Amazonka.ECS.DeleteService.DeleteServiceResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DeleteService.DeleteService
instance Control.DeepSeq.NFData Amazonka.ECS.DeleteService.DeleteService
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DeleteService.DeleteService
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DeleteService.DeleteService
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DeleteService.DeleteService
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DeleteService.DeleteService


-- | Deletes the specified cluster. The cluster will transition to the
--   <tt>INACTIVE</tt> state. Clusters with an <tt>INACTIVE</tt> status may
--   remain discoverable in your account for a period of time. However,
--   this behavior is subject to change in the future, so you should not
--   rely on <tt>INACTIVE</tt> clusters persisting.
--   
--   You must deregister all container instances from this cluster before
--   you may delete it. You can list the container instances in a cluster
--   with ListContainerInstances and deregister them with
--   DeregisterContainerInstance.
module Amazonka.ECS.DeleteCluster

-- | <i>See:</i> <a>newDeleteCluster</a> smart constructor.
data DeleteCluster
DeleteCluster' :: Text -> DeleteCluster

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   delete.
[$sel:cluster:DeleteCluster'] :: DeleteCluster -> Text

-- | Create a value of <a>DeleteCluster</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:DeleteCluster'</a>, <a>deleteCluster_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster to
--   delete.
newDeleteCluster :: Text -> DeleteCluster

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   delete.
deleteCluster_cluster :: Lens' DeleteCluster Text

-- | <i>See:</i> <a>newDeleteClusterResponse</a> smart constructor.
data DeleteClusterResponse
DeleteClusterResponse' :: Maybe Cluster -> Int -> DeleteClusterResponse

-- | The full description of the deleted cluster.
[$sel:cluster:DeleteClusterResponse'] :: DeleteClusterResponse -> Maybe Cluster

-- | The response's http status code.
[$sel:httpStatus:DeleteClusterResponse'] :: DeleteClusterResponse -> Int

-- | Create a value of <a>DeleteClusterResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:DeleteCluster'</a>,
--   <a>deleteClusterResponse_cluster</a> - The full description of the
--   deleted cluster.
--   
--   <a>$sel:httpStatus:DeleteClusterResponse'</a>,
--   <a>deleteClusterResponse_httpStatus</a> - The response's http status
--   code.
newDeleteClusterResponse :: Int -> DeleteClusterResponse

-- | The full description of the deleted cluster.
deleteClusterResponse_cluster :: Lens' DeleteClusterResponse (Maybe Cluster)

-- | The response's http status code.
deleteClusterResponse_httpStatus :: Lens' DeleteClusterResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DeleteCluster.DeleteCluster
instance GHC.Show.Show Amazonka.ECS.DeleteCluster.DeleteCluster
instance GHC.Read.Read Amazonka.ECS.DeleteCluster.DeleteCluster
instance GHC.Classes.Eq Amazonka.ECS.DeleteCluster.DeleteCluster
instance GHC.Generics.Generic Amazonka.ECS.DeleteCluster.DeleteClusterResponse
instance GHC.Show.Show Amazonka.ECS.DeleteCluster.DeleteClusterResponse
instance GHC.Read.Read Amazonka.ECS.DeleteCluster.DeleteClusterResponse
instance GHC.Classes.Eq Amazonka.ECS.DeleteCluster.DeleteClusterResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DeleteCluster.DeleteCluster
instance Control.DeepSeq.NFData Amazonka.ECS.DeleteCluster.DeleteClusterResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DeleteCluster.DeleteCluster
instance Control.DeepSeq.NFData Amazonka.ECS.DeleteCluster.DeleteCluster
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DeleteCluster.DeleteCluster
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DeleteCluster.DeleteCluster
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DeleteCluster.DeleteCluster
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DeleteCluster.DeleteCluster


-- | Deletes the specified capacity provider.
--   
--   The <tt>FARGATE</tt> and <tt>FARGATE_SPOT</tt> capacity providers are
--   reserved and cannot be deleted. You can disassociate them from a
--   cluster using either the PutClusterCapacityProviders API or by
--   deleting the cluster.
--   
--   Prior to a capacity provider being deleted, the capacity provider must
--   be removed from the capacity provider strategy from all services. The
--   UpdateService API can be used to remove a capacity provider from a
--   service's capacity provider strategy. When updating a service, the
--   <tt>forceNewDeployment</tt> option can be used to ensure that any
--   tasks using the Amazon EC2 instance capacity provided by the capacity
--   provider are transitioned to use the capacity from the remaining
--   capacity providers. Only capacity providers that are not associated
--   with a cluster can be deleted. To remove a capacity provider from a
--   cluster, you can either use PutClusterCapacityProviders or delete the
--   cluster.
module Amazonka.ECS.DeleteCapacityProvider

-- | <i>See:</i> <a>newDeleteCapacityProvider</a> smart constructor.
data DeleteCapacityProvider
DeleteCapacityProvider' :: Text -> DeleteCapacityProvider

-- | The short name or full Amazon Resource Name (ARN) of the capacity
--   provider to delete.
[$sel:capacityProvider:DeleteCapacityProvider'] :: DeleteCapacityProvider -> Text

-- | Create a value of <a>DeleteCapacityProvider</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:capacityProvider:DeleteCapacityProvider'</a>,
--   <a>deleteCapacityProvider_capacityProvider</a> - The short name or
--   full Amazon Resource Name (ARN) of the capacity provider to delete.
newDeleteCapacityProvider :: Text -> DeleteCapacityProvider

-- | The short name or full Amazon Resource Name (ARN) of the capacity
--   provider to delete.
deleteCapacityProvider_capacityProvider :: Lens' DeleteCapacityProvider Text

-- | <i>See:</i> <a>newDeleteCapacityProviderResponse</a> smart
--   constructor.
data DeleteCapacityProviderResponse
DeleteCapacityProviderResponse' :: Maybe CapacityProvider -> Int -> DeleteCapacityProviderResponse

-- | The details of the capacity provider.
[$sel:capacityProvider:DeleteCapacityProviderResponse'] :: DeleteCapacityProviderResponse -> Maybe CapacityProvider

-- | The response's http status code.
[$sel:httpStatus:DeleteCapacityProviderResponse'] :: DeleteCapacityProviderResponse -> Int

-- | Create a value of <a>DeleteCapacityProviderResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:capacityProvider:DeleteCapacityProvider'</a>,
--   <a>deleteCapacityProviderResponse_capacityProvider</a> - The details
--   of the capacity provider.
--   
--   <a>$sel:httpStatus:DeleteCapacityProviderResponse'</a>,
--   <a>deleteCapacityProviderResponse_httpStatus</a> - The response's http
--   status code.
newDeleteCapacityProviderResponse :: Int -> DeleteCapacityProviderResponse

-- | The details of the capacity provider.
deleteCapacityProviderResponse_capacityProvider :: Lens' DeleteCapacityProviderResponse (Maybe CapacityProvider)

-- | The response's http status code.
deleteCapacityProviderResponse_httpStatus :: Lens' DeleteCapacityProviderResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProvider
instance GHC.Show.Show Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProvider
instance GHC.Read.Read Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProvider
instance GHC.Classes.Eq Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProvider
instance GHC.Generics.Generic Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProviderResponse
instance GHC.Show.Show Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProviderResponse
instance GHC.Read.Read Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProviderResponse
instance GHC.Classes.Eq Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProviderResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProvider
instance Control.DeepSeq.NFData Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProviderResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProvider
instance Control.DeepSeq.NFData Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProvider
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProvider
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProvider
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProvider
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DeleteCapacityProvider.DeleteCapacityProvider


-- | Deletes one or more custom attributes from an Amazon ECS resource.
module Amazonka.ECS.DeleteAttributes

-- | <i>See:</i> <a>newDeleteAttributes</a> smart constructor.
data DeleteAttributes
DeleteAttributes' :: Maybe Text -> [Attribute] -> DeleteAttributes

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   contains the resource to delete attributes. If you do not specify a
--   cluster, the default cluster is assumed.
[$sel:cluster:DeleteAttributes'] :: DeleteAttributes -> Maybe Text

-- | The attributes to delete from your resource. You can specify up to 10
--   attributes per request. For custom attributes, specify the attribute
--   name and target ID, but do not specify the value. If you specify the
--   target ID using the short form, you must also specify the target type.
[$sel:attributes:DeleteAttributes'] :: DeleteAttributes -> [Attribute]

-- | Create a value of <a>DeleteAttributes</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:DeleteAttributes'</a>, <a>deleteAttributes_cluster</a>
--   - The short name or full Amazon Resource Name (ARN) of the cluster
--   that contains the resource to delete attributes. If you do not specify
--   a cluster, the default cluster is assumed.
--   
--   <a>$sel:attributes:DeleteAttributes'</a>,
--   <a>deleteAttributes_attributes</a> - The attributes to delete from
--   your resource. You can specify up to 10 attributes per request. For
--   custom attributes, specify the attribute name and target ID, but do
--   not specify the value. If you specify the target ID using the short
--   form, you must also specify the target type.
newDeleteAttributes :: DeleteAttributes

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   contains the resource to delete attributes. If you do not specify a
--   cluster, the default cluster is assumed.
deleteAttributes_cluster :: Lens' DeleteAttributes (Maybe Text)

-- | The attributes to delete from your resource. You can specify up to 10
--   attributes per request. For custom attributes, specify the attribute
--   name and target ID, but do not specify the value. If you specify the
--   target ID using the short form, you must also specify the target type.
deleteAttributes_attributes :: Lens' DeleteAttributes [Attribute]

-- | <i>See:</i> <a>newDeleteAttributesResponse</a> smart constructor.
data DeleteAttributesResponse
DeleteAttributesResponse' :: Maybe [Attribute] -> Int -> DeleteAttributesResponse

-- | A list of attribute objects that were successfully deleted from your
--   resource.
[$sel:attributes:DeleteAttributesResponse'] :: DeleteAttributesResponse -> Maybe [Attribute]

-- | The response's http status code.
[$sel:httpStatus:DeleteAttributesResponse'] :: DeleteAttributesResponse -> Int

-- | Create a value of <a>DeleteAttributesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributes:DeleteAttributes'</a>,
--   <a>deleteAttributesResponse_attributes</a> - A list of attribute
--   objects that were successfully deleted from your resource.
--   
--   <a>$sel:httpStatus:DeleteAttributesResponse'</a>,
--   <a>deleteAttributesResponse_httpStatus</a> - The response's http
--   status code.
newDeleteAttributesResponse :: Int -> DeleteAttributesResponse

-- | A list of attribute objects that were successfully deleted from your
--   resource.
deleteAttributesResponse_attributes :: Lens' DeleteAttributesResponse (Maybe [Attribute])

-- | The response's http status code.
deleteAttributesResponse_httpStatus :: Lens' DeleteAttributesResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DeleteAttributes.DeleteAttributes
instance GHC.Show.Show Amazonka.ECS.DeleteAttributes.DeleteAttributes
instance GHC.Read.Read Amazonka.ECS.DeleteAttributes.DeleteAttributes
instance GHC.Classes.Eq Amazonka.ECS.DeleteAttributes.DeleteAttributes
instance GHC.Generics.Generic Amazonka.ECS.DeleteAttributes.DeleteAttributesResponse
instance GHC.Show.Show Amazonka.ECS.DeleteAttributes.DeleteAttributesResponse
instance GHC.Read.Read Amazonka.ECS.DeleteAttributes.DeleteAttributesResponse
instance GHC.Classes.Eq Amazonka.ECS.DeleteAttributes.DeleteAttributesResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DeleteAttributes.DeleteAttributes
instance Control.DeepSeq.NFData Amazonka.ECS.DeleteAttributes.DeleteAttributesResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DeleteAttributes.DeleteAttributes
instance Control.DeepSeq.NFData Amazonka.ECS.DeleteAttributes.DeleteAttributes
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DeleteAttributes.DeleteAttributes
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DeleteAttributes.DeleteAttributes
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DeleteAttributes.DeleteAttributes
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DeleteAttributes.DeleteAttributes


-- | Disables an account setting for a specified IAM user, IAM role, or the
--   root user for an account.
module Amazonka.ECS.DeleteAccountSetting

-- | <i>See:</i> <a>newDeleteAccountSetting</a> smart constructor.
data DeleteAccountSetting
DeleteAccountSetting' :: Maybe Text -> SettingName -> DeleteAccountSetting

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If you specify the root user, it disables the account
--   setting for all IAM users, IAM roles, and the root user of the account
--   unless an IAM user or role explicitly overrides these settings. If
--   this field is omitted, the setting is changed only for the
--   authenticated user.
[$sel:principalArn:DeleteAccountSetting'] :: DeleteAccountSetting -> Maybe Text

-- | The resource name for which to disable the account setting. If
--   <tt>serviceLongArnFormat</tt> is specified, the ARN for your Amazon
--   ECS services is affected. If <tt>taskLongArnFormat</tt> is specified,
--   the ARN and resource ID for your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the ENI limit for your Amazon
--   ECS container instances is affected.
[$sel:name:DeleteAccountSetting'] :: DeleteAccountSetting -> SettingName

-- | Create a value of <a>DeleteAccountSetting</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:principalArn:DeleteAccountSetting'</a>,
--   <a>deleteAccountSetting_principalArn</a> - The ARN of the principal,
--   which can be an IAM user, IAM role, or the root user. If you specify
--   the root user, it disables the account setting for all IAM users, IAM
--   roles, and the root user of the account unless an IAM user or role
--   explicitly overrides these settings. If this field is omitted, the
--   setting is changed only for the authenticated user.
--   
--   <a>$sel:name:DeleteAccountSetting'</a>,
--   <a>deleteAccountSetting_name</a> - The resource name for which to
--   disable the account setting. If <tt>serviceLongArnFormat</tt> is
--   specified, the ARN for your Amazon ECS services is affected. If
--   <tt>taskLongArnFormat</tt> is specified, the ARN and resource ID for
--   your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the ENI limit for your Amazon
--   ECS container instances is affected.
newDeleteAccountSetting :: SettingName -> DeleteAccountSetting

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If you specify the root user, it disables the account
--   setting for all IAM users, IAM roles, and the root user of the account
--   unless an IAM user or role explicitly overrides these settings. If
--   this field is omitted, the setting is changed only for the
--   authenticated user.
deleteAccountSetting_principalArn :: Lens' DeleteAccountSetting (Maybe Text)

-- | The resource name for which to disable the account setting. If
--   <tt>serviceLongArnFormat</tt> is specified, the ARN for your Amazon
--   ECS services is affected. If <tt>taskLongArnFormat</tt> is specified,
--   the ARN and resource ID for your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the ENI limit for your Amazon
--   ECS container instances is affected.
deleteAccountSetting_name :: Lens' DeleteAccountSetting SettingName

-- | <i>See:</i> <a>newDeleteAccountSettingResponse</a> smart constructor.
data DeleteAccountSettingResponse
DeleteAccountSettingResponse' :: Maybe Setting -> Int -> DeleteAccountSettingResponse

-- | The account setting for the specified principal ARN.
[$sel:setting:DeleteAccountSettingResponse'] :: DeleteAccountSettingResponse -> Maybe Setting

-- | The response's http status code.
[$sel:httpStatus:DeleteAccountSettingResponse'] :: DeleteAccountSettingResponse -> Int

-- | Create a value of <a>DeleteAccountSettingResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:setting:DeleteAccountSettingResponse'</a>,
--   <a>deleteAccountSettingResponse_setting</a> - The account setting for
--   the specified principal ARN.
--   
--   <a>$sel:httpStatus:DeleteAccountSettingResponse'</a>,
--   <a>deleteAccountSettingResponse_httpStatus</a> - The response's http
--   status code.
newDeleteAccountSettingResponse :: Int -> DeleteAccountSettingResponse

-- | The account setting for the specified principal ARN.
deleteAccountSettingResponse_setting :: Lens' DeleteAccountSettingResponse (Maybe Setting)

-- | The response's http status code.
deleteAccountSettingResponse_httpStatus :: Lens' DeleteAccountSettingResponse Int
instance GHC.Generics.Generic Amazonka.ECS.DeleteAccountSetting.DeleteAccountSetting
instance GHC.Show.Show Amazonka.ECS.DeleteAccountSetting.DeleteAccountSetting
instance GHC.Read.Read Amazonka.ECS.DeleteAccountSetting.DeleteAccountSetting
instance GHC.Classes.Eq Amazonka.ECS.DeleteAccountSetting.DeleteAccountSetting
instance GHC.Generics.Generic Amazonka.ECS.DeleteAccountSetting.DeleteAccountSettingResponse
instance GHC.Show.Show Amazonka.ECS.DeleteAccountSetting.DeleteAccountSettingResponse
instance GHC.Read.Read Amazonka.ECS.DeleteAccountSetting.DeleteAccountSettingResponse
instance GHC.Classes.Eq Amazonka.ECS.DeleteAccountSetting.DeleteAccountSettingResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.DeleteAccountSetting.DeleteAccountSetting
instance Control.DeepSeq.NFData Amazonka.ECS.DeleteAccountSetting.DeleteAccountSettingResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.DeleteAccountSetting.DeleteAccountSetting
instance Control.DeepSeq.NFData Amazonka.ECS.DeleteAccountSetting.DeleteAccountSetting
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.DeleteAccountSetting.DeleteAccountSetting
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.DeleteAccountSetting.DeleteAccountSetting
instance Amazonka.Data.Path.ToPath Amazonka.ECS.DeleteAccountSetting.DeleteAccountSetting
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.DeleteAccountSetting.DeleteAccountSetting


-- | Create a task set in the specified cluster and service. This is used
--   when a service uses the <tt>EXTERNAL</tt> deployment controller type.
--   For more information, see <a>Amazon ECS Deployment Types</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
module Amazonka.ECS.CreateTaskSet

-- | <i>See:</i> <a>newCreateTaskSet</a> smart constructor.
data CreateTaskSet
CreateTaskSet' :: Maybe Text -> Maybe Text -> Maybe Scale -> Maybe [LoadBalancer] -> Maybe LaunchType -> Maybe Text -> Maybe NetworkConfiguration -> Maybe [ServiceRegistry] -> Maybe [CapacityProviderStrategyItem] -> Maybe [Tag] -> Text -> Text -> Text -> CreateTaskSet

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request. Up to 32 ASCII characters are allowed.
[$sel:clientToken:CreateTaskSet'] :: CreateTaskSet -> Maybe Text

-- | The platform version that the tasks in the task set should use. A
--   platform version is specified only for tasks using the Fargate launch
--   type. If one isn't specified, the <tt>LATEST</tt> platform version is
--   used by default.
[$sel:platformVersion:CreateTaskSet'] :: CreateTaskSet -> Maybe Text

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
[$sel:scale:CreateTaskSet'] :: CreateTaskSet -> Maybe Scale

-- | A load balancer object representing the load balancer to use with the
--   task set. The supported load balancer types are either an Application
--   Load Balancer or a Network Load Balancer.
[$sel:loadBalancers:CreateTaskSet'] :: CreateTaskSet -> Maybe [LoadBalancer]

-- | The launch type that new tasks in the task set will use. For more
--   information, see <a>Amazon ECS Launch Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
[$sel:launchType:CreateTaskSet'] :: CreateTaskSet -> Maybe LaunchType

-- | An optional non-unique tag that identifies this task set in external
--   systems. If the task set is associated with a service discovery
--   registry, the tasks in this task set will have the
--   <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute set to the
--   provided value.
[$sel:externalId:CreateTaskSet'] :: CreateTaskSet -> Maybe Text

-- | An object representing the network configuration for a task set.
[$sel:networkConfiguration:CreateTaskSet'] :: CreateTaskSet -> Maybe NetworkConfiguration

-- | The details of the service discovery registries to assign to this task
--   set. For more information, see <a>Service Discovery</a>.
[$sel:serviceRegistries:CreateTaskSet'] :: CreateTaskSet -> Maybe [ServiceRegistry]

-- | The capacity provider strategy to use for the task set.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
[$sel:capacityProviderStrategy:CreateTaskSet'] :: CreateTaskSet -> Maybe [CapacityProviderStrategyItem]

-- | The metadata that you apply to the task set to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. When a service is deleted, the tags are deleted
--   as well.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:CreateTaskSet'] :: CreateTaskSet -> Maybe [Tag]

-- | The short name or full Amazon Resource Name (ARN) of the service to
--   create the task set in.
[$sel:service:CreateTaskSet'] :: CreateTaskSet -> Text

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service to create the task set in.
[$sel:cluster:CreateTaskSet'] :: CreateTaskSet -> Text

-- | The task definition for the tasks in the task set to use.
[$sel:taskDefinition:CreateTaskSet'] :: CreateTaskSet -> Text

-- | Create a value of <a>CreateTaskSet</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:CreateTaskSet'</a>,
--   <a>createTaskSet_clientToken</a> - Unique, case-sensitive identifier
--   that you provide to ensure the idempotency of the request. Up to 32
--   ASCII characters are allowed.
--   
--   <a>$sel:platformVersion:CreateTaskSet'</a>,
--   <a>createTaskSet_platformVersion</a> - The platform version that the
--   tasks in the task set should use. A platform version is specified only
--   for tasks using the Fargate launch type. If one isn't specified, the
--   <tt>LATEST</tt> platform version is used by default.
--   
--   <a>$sel:scale:CreateTaskSet'</a>, <a>createTaskSet_scale</a> - A
--   floating-point percentage of the desired number of tasks to place and
--   keep running in the task set.
--   
--   <a>$sel:loadBalancers:CreateTaskSet'</a>,
--   <a>createTaskSet_loadBalancers</a> - A load balancer object
--   representing the load balancer to use with the task set. The supported
--   load balancer types are either an Application Load Balancer or a
--   Network Load Balancer.
--   
--   <a>$sel:launchType:CreateTaskSet'</a>, <a>createTaskSet_launchType</a>
--   - The launch type that new tasks in the task set will use. For more
--   information, see <a>Amazon ECS Launch Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
--   
--   <a>$sel:externalId:CreateTaskSet'</a>, <a>createTaskSet_externalId</a>
--   - An optional non-unique tag that identifies this task set in external
--   systems. If the task set is associated with a service discovery
--   registry, the tasks in this task set will have the
--   <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute set to the
--   provided value.
--   
--   <a>$sel:networkConfiguration:CreateTaskSet'</a>,
--   <a>createTaskSet_networkConfiguration</a> - An object representing the
--   network configuration for a task set.
--   
--   <a>$sel:serviceRegistries:CreateTaskSet'</a>,
--   <a>createTaskSet_serviceRegistries</a> - The details of the service
--   discovery registries to assign to this task set. For more information,
--   see <a>Service Discovery</a>.
--   
--   <a>$sel:capacityProviderStrategy:CreateTaskSet'</a>,
--   <a>createTaskSet_capacityProviderStrategy</a> - The capacity provider
--   strategy to use for the task set.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
--   
--   <a>$sel:tags:CreateTaskSet'</a>, <a>createTaskSet_tags</a> - The
--   metadata that you apply to the task set to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. When a service is deleted, the tags are deleted
--   as well.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:service:CreateTaskSet'</a>, <a>createTaskSet_service</a> - The
--   short name or full Amazon Resource Name (ARN) of the service to create
--   the task set in.
--   
--   <a>$sel:cluster:CreateTaskSet'</a>, <a>createTaskSet_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service to create the task set in.
--   
--   <a>$sel:taskDefinition:CreateTaskSet'</a>,
--   <a>createTaskSet_taskDefinition</a> - The task definition for the
--   tasks in the task set to use.
newCreateTaskSet :: Text -> Text -> Text -> CreateTaskSet

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request. Up to 32 ASCII characters are allowed.
createTaskSet_clientToken :: Lens' CreateTaskSet (Maybe Text)

-- | The platform version that the tasks in the task set should use. A
--   platform version is specified only for tasks using the Fargate launch
--   type. If one isn't specified, the <tt>LATEST</tt> platform version is
--   used by default.
createTaskSet_platformVersion :: Lens' CreateTaskSet (Maybe Text)

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
createTaskSet_scale :: Lens' CreateTaskSet (Maybe Scale)

-- | A load balancer object representing the load balancer to use with the
--   task set. The supported load balancer types are either an Application
--   Load Balancer or a Network Load Balancer.
createTaskSet_loadBalancers :: Lens' CreateTaskSet (Maybe [LoadBalancer])

-- | The launch type that new tasks in the task set will use. For more
--   information, see <a>Amazon ECS Launch Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
createTaskSet_launchType :: Lens' CreateTaskSet (Maybe LaunchType)

-- | An optional non-unique tag that identifies this task set in external
--   systems. If the task set is associated with a service discovery
--   registry, the tasks in this task set will have the
--   <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute set to the
--   provided value.
createTaskSet_externalId :: Lens' CreateTaskSet (Maybe Text)

-- | An object representing the network configuration for a task set.
createTaskSet_networkConfiguration :: Lens' CreateTaskSet (Maybe NetworkConfiguration)

-- | The details of the service discovery registries to assign to this task
--   set. For more information, see <a>Service Discovery</a>.
createTaskSet_serviceRegistries :: Lens' CreateTaskSet (Maybe [ServiceRegistry])

-- | The capacity provider strategy to use for the task set.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
createTaskSet_capacityProviderStrategy :: Lens' CreateTaskSet (Maybe [CapacityProviderStrategyItem])

-- | The metadata that you apply to the task set to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. When a service is deleted, the tags are deleted
--   as well.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
createTaskSet_tags :: Lens' CreateTaskSet (Maybe [Tag])

-- | The short name or full Amazon Resource Name (ARN) of the service to
--   create the task set in.
createTaskSet_service :: Lens' CreateTaskSet Text

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service to create the task set in.
createTaskSet_cluster :: Lens' CreateTaskSet Text

-- | The task definition for the tasks in the task set to use.
createTaskSet_taskDefinition :: Lens' CreateTaskSet Text

-- | <i>See:</i> <a>newCreateTaskSetResponse</a> smart constructor.
data CreateTaskSetResponse
CreateTaskSetResponse' :: Maybe TaskSet -> Int -> CreateTaskSetResponse

-- | Information about a set of Amazon ECS tasks in either an CodeDeploy or
--   an <tt>EXTERNAL</tt> deployment. A task set includes details such as
--   the desired number of tasks, how many tasks are running, and whether
--   the task set serves production traffic.
[$sel:taskSet:CreateTaskSetResponse'] :: CreateTaskSetResponse -> Maybe TaskSet

-- | The response's http status code.
[$sel:httpStatus:CreateTaskSetResponse'] :: CreateTaskSetResponse -> Int

-- | Create a value of <a>CreateTaskSetResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSet:CreateTaskSetResponse'</a>,
--   <a>createTaskSetResponse_taskSet</a> - Information about a set of
--   Amazon ECS tasks in either an CodeDeploy or an <tt>EXTERNAL</tt>
--   deployment. A task set includes details such as the desired number of
--   tasks, how many tasks are running, and whether the task set serves
--   production traffic.
--   
--   <a>$sel:httpStatus:CreateTaskSetResponse'</a>,
--   <a>createTaskSetResponse_httpStatus</a> - The response's http status
--   code.
newCreateTaskSetResponse :: Int -> CreateTaskSetResponse

-- | Information about a set of Amazon ECS tasks in either an CodeDeploy or
--   an <tt>EXTERNAL</tt> deployment. A task set includes details such as
--   the desired number of tasks, how many tasks are running, and whether
--   the task set serves production traffic.
createTaskSetResponse_taskSet :: Lens' CreateTaskSetResponse (Maybe TaskSet)

-- | The response's http status code.
createTaskSetResponse_httpStatus :: Lens' CreateTaskSetResponse Int
instance GHC.Generics.Generic Amazonka.ECS.CreateTaskSet.CreateTaskSet
instance GHC.Show.Show Amazonka.ECS.CreateTaskSet.CreateTaskSet
instance GHC.Read.Read Amazonka.ECS.CreateTaskSet.CreateTaskSet
instance GHC.Classes.Eq Amazonka.ECS.CreateTaskSet.CreateTaskSet
instance GHC.Generics.Generic Amazonka.ECS.CreateTaskSet.CreateTaskSetResponse
instance GHC.Show.Show Amazonka.ECS.CreateTaskSet.CreateTaskSetResponse
instance GHC.Read.Read Amazonka.ECS.CreateTaskSet.CreateTaskSetResponse
instance GHC.Classes.Eq Amazonka.ECS.CreateTaskSet.CreateTaskSetResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.CreateTaskSet.CreateTaskSet
instance Control.DeepSeq.NFData Amazonka.ECS.CreateTaskSet.CreateTaskSetResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.CreateTaskSet.CreateTaskSet
instance Control.DeepSeq.NFData Amazonka.ECS.CreateTaskSet.CreateTaskSet
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.CreateTaskSet.CreateTaskSet
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.CreateTaskSet.CreateTaskSet
instance Amazonka.Data.Path.ToPath Amazonka.ECS.CreateTaskSet.CreateTaskSet
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.CreateTaskSet.CreateTaskSet


-- | Runs and maintains a desired number of tasks from a specified task
--   definition. If the number of tasks running in a service drops below
--   the <tt>desiredCount</tt>, Amazon ECS runs another copy of the task in
--   the specified cluster. To update an existing service, see the
--   UpdateService action.
--   
--   In addition to maintaining the desired count of tasks in your service,
--   you can optionally run your service behind one or more load balancers.
--   The load balancers distribute traffic across the tasks that are
--   associated with the service. For more information, see <a>Service Load
--   Balancing</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   Tasks for services that <i>do not</i> use a load balancer are
--   considered healthy if they're in the <tt>RUNNING</tt> state. Tasks for
--   services that <i>do</i> use a load balancer are considered healthy if
--   they're in the <tt>RUNNING</tt> state and the container instance that
--   they're hosted on is reported as healthy by the load balancer.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt> - The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions. For more information, see <a>Service Scheduler
--   Concepts</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.</li>
--   <li><tt>DAEMON</tt> - The daemon scheduling strategy deploys exactly
--   one task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement constraints.
--   When using this strategy, you don't need to specify a desired number
--   of tasks, a task placement strategy, or use Service Auto Scaling
--   policies. For more information, see <a>Service Scheduler Concepts</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.</li>
--   </ul>
--   
--   You can optionally specify a deployment configuration for your
--   service. The deployment is triggered by changing properties, such as
--   the task definition or the desired count of a service, with an
--   UpdateService operation. The default value for a replica service for
--   <tt>minimumHealthyPercent</tt> is 100%. The default value for a daemon
--   service for <tt>minimumHealthyPercent</tt> is 0%.
--   
--   If a service is using the <tt>ECS</tt> deployment controller, the
--   minimum healthy percent represents a lower limit on the number of
--   tasks in a service that must remain in the <tt>RUNNING</tt> state
--   during a deployment, as a percentage of the desired number of tasks
--   (rounded up to the nearest integer), and while any container instances
--   are in the <tt>DRAINING</tt> state if the service contains tasks using
--   the EC2 launch type. This parameter enables you to deploy without
--   using additional cluster capacity. For example, if your service has a
--   desired number of four tasks and a minimum healthy percent of 50%, the
--   scheduler might stop two existing tasks to free up cluster capacity
--   before starting two new tasks. Tasks for services that <i>do not</i>
--   use a load balancer are considered healthy if they're in the
--   <tt>RUNNING</tt> state. Tasks for services that <i>do</i> use a load
--   balancer are considered healthy if they're in the <tt>RUNNING</tt>
--   state and they're reported as healthy by the load balancer. The
--   default value for minimum healthy percent is 100%.
--   
--   If a service is using the <tt>ECS</tt> deployment controller, the
--   __maximum percent__ parameter represents an upper limit on the number
--   of tasks in a service that are allowed in the <tt>RUNNING</tt> or
--   <tt>PENDING</tt> state during a deployment, as a percentage of the
--   desired number of tasks (rounded down to the nearest integer), and
--   while any container instances are in the <tt>DRAINING</tt> state if
--   the service contains tasks using the EC2 launch type. This parameter
--   enables you to define the deployment batch size. For example, if your
--   service has a desired number of four tasks and a maximum percent value
--   of 200%, the scheduler may start four new tasks before stopping the
--   four older tasks (provided that the cluster resources required to do
--   this are available). The default value for maximum percent is 200%.
--   
--   If a service is using either the <tt>CODE_DEPLOY</tt> or
--   <tt>EXTERNAL</tt> deployment controller types and tasks that use the
--   EC2 launch type, the __minimum healthy percent<b> and </b>maximum
--   percent__ values are used only to define the lower and upper limit on
--   the number of the tasks in the service that remain in the
--   <tt>RUNNING</tt> state while the container instances are in the
--   <tt>DRAINING</tt> state. If the tasks in the service use the Fargate
--   launch type, the minimum healthy percent and maximum percent values
--   aren't used, although they're currently visible when describing your
--   service.
--   
--   When creating a service that uses the <tt>EXTERNAL</tt> deployment
--   controller, you can specify only parameters that aren't controlled at
--   the task set level. The only required parameter is the service name.
--   You control your services using the CreateTaskSet operation. For more
--   information, see <a>Amazon ECS Deployment Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   When the service scheduler launches new tasks, it determines task
--   placement in your cluster using the following logic:
--   
--   <ul>
--   <li>Determine which of the container instances in your cluster can
--   support your service's task definition (for example, they have the
--   required CPU, memory, ports, and container instance attributes).</li>
--   <li>By default, the service scheduler attempts to balance tasks across
--   Availability Zones in this manner (although you can choose a different
--   placement strategy) with the <tt>placementStrategy</tt>
--   parameter):<ul><li>Sort the valid container instances, giving priority
--   to instances that have the fewest number of running tasks for this
--   service in their respective Availability Zone. For example, if zone A
--   has one running service task and zones B and C each have zero, valid
--   container instances in either zone B or C are considered optimal for
--   placement.</li><li>Place the new service task on a valid container
--   instance in an optimal Availability Zone (based on the previous
--   steps), favoring container instances with the fewest number of running
--   tasks for this service.</li></ul></li>
--   </ul>
module Amazonka.ECS.CreateService

-- | <i>See:</i> <a>newCreateService</a> smart constructor.
data CreateService
CreateService' :: Maybe Text -> Maybe Text -> Maybe PropagateTags -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe [LoadBalancer] -> Maybe Text -> Maybe [PlacementConstraint] -> Maybe [PlacementStrategy] -> Maybe DeploymentController -> Maybe LaunchType -> Maybe Text -> Maybe SchedulingStrategy -> Maybe Int -> Maybe NetworkConfiguration -> Maybe [ServiceRegistry] -> Maybe [CapacityProviderStrategyItem] -> Maybe Bool -> Maybe [Tag] -> Maybe DeploymentConfiguration -> Text -> CreateService

-- | The short name or full Amazon Resource Name (ARN) of the cluster on
--   which to run your service. If you do not specify a cluster, the
--   default cluster is assumed.
[$sel:cluster:CreateService'] :: CreateService -> Maybe Text

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request. Up to 32 ASCII characters are allowed.
[$sel:clientToken:CreateService'] :: CreateService -> Maybe Text

-- | Specifies whether to propagate the tags from the task definition or
--   the service to the tasks in the service. If no value is specified, the
--   tags are not propagated. Tags can only be propagated to the tasks
--   within the service during service creation. To add tags to a task
--   after service creation or task creation, use the TagResource API
--   action.
[$sel:propagateTags:CreateService'] :: CreateService -> Maybe PropagateTags

-- | The platform version that your tasks in the service are running on. A
--   platform version is specified only for tasks using the Fargate launch
--   type. If one isn't specified, the <tt>LATEST</tt> platform version is
--   used by default. For more information, see <a>Fargate platform
--   versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:platformVersion:CreateService'] :: CreateService -> Maybe Text

-- | Specifies whether to enable Amazon ECS managed tags for the tasks
--   within the service. For more information, see <a>Tagging Your Amazon
--   ECS Resources</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:enableECSManagedTags:CreateService'] :: CreateService -> Maybe Bool

-- | The number of instantiations of the specified task definition to place
--   and keep running on your cluster.
--   
--   This is required if <tt>schedulingStrategy</tt> is <tt>REPLICA</tt> or
--   is not specified. If <tt>schedulingStrategy</tt> is <tt>DAEMON</tt>
--   then this is not required.
[$sel:desiredCount:CreateService'] :: CreateService -> Maybe Int

-- | A load balancer object representing the load balancers to use with
--   your service. For more information, see <a>Service Load Balancing</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the service is using the rolling update (<tt>ECS</tt>) deployment
--   controller and using either an Application Load Balancer or Network
--   Load Balancer, you must specify one or more target group ARNs to
--   attach to the service. The service-linked role is required for
--   services that make use of multiple target groups. For more
--   information, see <a>Using service-linked roles for Amazon ECS</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the service is using the <tt>CODE_DEPLOY</tt> deployment
--   controller, the service is required to use either an Application Load
--   Balancer or Network Load Balancer. When creating an CodeDeploy
--   deployment group, you specify two target groups (referred to as a
--   <tt>targetGroupPair</tt>). During a deployment, CodeDeploy determines
--   which task set in your service has the status <tt>PRIMARY</tt> and
--   associates one target group with it, and then associates the other
--   target group with the replacement task set. The load balancer can also
--   have up to two listeners: a required listener for production traffic
--   and an optional listener that allows you perform validation tests with
--   Lambda functions before routing production traffic to it.
--   
--   After you create a service using the <tt>ECS</tt> deployment
--   controller, the load balancer name or target group ARN, container
--   name, and container port specified in the service definition are
--   immutable. If you are using the <tt>CODE_DEPLOY</tt> deployment
--   controller, these values can be changed when updating the service.
--   
--   For Application Load Balancers and Network Load Balancers, this object
--   must contain the load balancer target group ARN, the container name
--   (as it appears in a container definition), and the container port to
--   access from the load balancer. The load balancer name parameter must
--   be omitted. When a task from this service is placed on a container
--   instance, the container instance and port combination is registered as
--   a target in the target group specified here.
--   
--   For Classic Load Balancers, this object must contain the load balancer
--   name, the container name (as it appears in a container definition),
--   and the container port to access from the load balancer. The target
--   group ARN parameter must be omitted. When a task from this service is
--   placed on a container instance, the container instance is registered
--   with the load balancer specified here.
--   
--   Services with tasks that use the <tt>awsvpc</tt> network mode (for
--   example, those with the Fargate launch type) only support Application
--   Load Balancers and Network Load Balancers. Classic Load Balancers are
--   not supported. Also, when you create any target groups for these
--   services, you must choose <tt>ip</tt> as the target type, not
--   <tt>instance</tt>, because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
[$sel:loadBalancers:CreateService'] :: CreateService -> Maybe [LoadBalancer]

-- | The name or full Amazon Resource Name (ARN) of the IAM role that
--   allows Amazon ECS to make calls to your load balancer on your behalf.
--   This parameter is only permitted if you are using a load balancer with
--   your service and your task definition does not use the <tt>awsvpc</tt>
--   network mode. If you specify the <tt>role</tt> parameter, you must
--   also specify a load balancer object with the <tt>loadBalancers</tt>
--   parameter.
--   
--   If your account has already created the Amazon ECS service-linked
--   role, that role is used by default for your service unless you specify
--   a role here. The service-linked role is required if your task
--   definition uses the <tt>awsvpc</tt> network mode or if the service is
--   configured to use service discovery, an external deployment
--   controller, multiple target groups, or Elastic Inference accelerators
--   in which case you should not specify a role here. For more
--   information, see <a>Using service-linked roles for Amazon ECS</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your specified role has a path other than <tt>/</tt>, then you must
--   either specify the full role ARN (this is recommended) or prefix the
--   role name with the path. For example, if a role with the name
--   <tt>bar</tt> has a path of <tt>/foo/</tt> then you would specify
--   <tt>/foo/bar</tt> as the role name. For more information, see
--   <a>Friendly names and paths</a> in the <i>IAM User Guide</i>.
[$sel:role':CreateService'] :: CreateService -> Maybe Text

-- | An array of placement constraint objects to use for tasks in your
--   service. You can specify a maximum of 10 constraints per task (this
--   limit includes constraints in the task definition and those specified
--   at runtime).
[$sel:placementConstraints:CreateService'] :: CreateService -> Maybe [PlacementConstraint]

-- | The placement strategy objects to use for tasks in your service. You
--   can specify a maximum of 5 strategy rules per service.
[$sel:placementStrategy:CreateService'] :: CreateService -> Maybe [PlacementStrategy]

-- | The deployment controller to use for the service. If no deployment
--   controller is specified, the default value of <tt>ECS</tt> is used.
[$sel:deploymentController:CreateService'] :: CreateService -> Maybe DeploymentController

-- | The infrastructure on which to run your service. For more information,
--   see <a>Amazon ECS launch types</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   The <tt>FARGATE</tt> launch type runs your tasks on Fargate On-Demand
--   infrastructure.
--   
--   Fargate Spot infrastructure is available for use but a capacity
--   provider strategy must be used. For more information, see <a>Fargate
--   capacity providers</a> in the <i>Amazon ECS User Guide for
--   Fargate</i>.
--   
--   The <tt>EC2</tt> launch type runs your tasks on Amazon EC2 instances
--   registered to your cluster.
--   
--   The <tt>EXTERNAL</tt> launch type runs your tasks on your on-premise
--   server or virtual machine (VM) capacity registered to your cluster.
--   
--   A service can use either a launch type or a capacity provider
--   strategy. If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
[$sel:launchType:CreateService'] :: CreateService -> Maybe LaunchType

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to run in your service. If a
--   <tt>revision</tt> is not specified, the latest <tt>ACTIVE</tt>
--   revision is used.
--   
--   A task definition must be specified if the service is using either the
--   <tt>ECS</tt> or <tt>CODE_DEPLOY</tt> deployment controllers.
[$sel:taskDefinition:CreateService'] :: CreateService -> Maybe Text

-- | The scheduling strategy to use for the service. For more information,
--   see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions. This scheduler strategy is required if the
--   service is using the <tt>CODE_DEPLOY</tt> or <tt>EXTERNAL</tt>
--   deployment controller types.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement constraints.
--   When you're using this strategy, you don't need to specify a desired
--   number of tasks, a task placement strategy, or use Service Auto
--   Scaling policies.Tasks using the Fargate launch type or the
--   <tt>CODE_DEPLOY</tt> or <tt>EXTERNAL</tt> deployment controller types
--   don't support the <tt>DAEMON</tt> scheduling strategy.</li>
--   </ul>
[$sel:schedulingStrategy:CreateService'] :: CreateService -> Maybe SchedulingStrategy

-- | The period of time, in seconds, that the Amazon ECS service scheduler
--   should ignore unhealthy Elastic Load Balancing target health checks
--   after a task has first started. This is only used when your service is
--   configured to use a load balancer. If your service has a load balancer
--   defined and you don't specify a health check grace period value, the
--   default value of <tt>0</tt> is used.
--   
--   If your service's tasks take a while to start and respond to Elastic
--   Load Balancing health checks, you can specify a health check grace
--   period of up to 2,147,483,647 seconds. During that time, the Amazon
--   ECS service scheduler ignores health check status. This grace period
--   can prevent the service scheduler from marking tasks as unhealthy and
--   stopping them before they have time to come up.
[$sel:healthCheckGracePeriodSeconds:CreateService'] :: CreateService -> Maybe Int

-- | The network configuration for the service. This parameter is required
--   for task definitions that use the <tt>awsvpc</tt> network mode to
--   receive their own elastic network interface, and it is not supported
--   for other network modes. For more information, see <a>Task
--   networking</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
[$sel:networkConfiguration:CreateService'] :: CreateService -> Maybe NetworkConfiguration

-- | The details of the service discovery registry to associate with this
--   service. For more information, see <a>Service discovery</a>.
--   
--   Each service may be associated with one service registry. Multiple
--   service registries per service isn't supported.
[$sel:serviceRegistries:CreateService'] :: CreateService -> Maybe [ServiceRegistry]

-- | The capacity provider strategy to use for the service.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
[$sel:capacityProviderStrategy:CreateService'] :: CreateService -> Maybe [CapacityProviderStrategyItem]

-- | Whether or not the execute command functionality is enabled for the
--   service. If <tt>true</tt>, this enables execute command functionality
--   on all containers in the service tasks.
[$sel:enableExecuteCommand:CreateService'] :: CreateService -> Maybe Bool

-- | The metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. When a service is deleted, the tags are deleted
--   as well.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:CreateService'] :: CreateService -> Maybe [Tag]

-- | Optional deployment parameters that control how many tasks run during
--   the deployment and the ordering of stopping and starting tasks.
[$sel:deploymentConfiguration:CreateService'] :: CreateService -> Maybe DeploymentConfiguration

-- | The name of your service. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. Service names must be
--   unique within a cluster, but you can have similarly named services in
--   multiple clusters within a Region or across multiple Regions.
[$sel:serviceName:CreateService'] :: CreateService -> Text

-- | Create a value of <a>CreateService</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:CreateService'</a>, <a>createService_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster on which
--   to run your service. If you do not specify a cluster, the default
--   cluster is assumed.
--   
--   <a>$sel:clientToken:CreateService'</a>,
--   <a>createService_clientToken</a> - Unique, case-sensitive identifier
--   that you provide to ensure the idempotency of the request. Up to 32
--   ASCII characters are allowed.
--   
--   <a>$sel:propagateTags:CreateService'</a>,
--   <a>createService_propagateTags</a> - Specifies whether to propagate
--   the tags from the task definition or the service to the tasks in the
--   service. If no value is specified, the tags are not propagated. Tags
--   can only be propagated to the tasks within the service during service
--   creation. To add tags to a task after service creation or task
--   creation, use the TagResource API action.
--   
--   <a>$sel:platformVersion:CreateService'</a>,
--   <a>createService_platformVersion</a> - The platform version that your
--   tasks in the service are running on. A platform version is specified
--   only for tasks using the Fargate launch type. If one isn't specified,
--   the <tt>LATEST</tt> platform version is used by default. For more
--   information, see <a>Fargate platform versions</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:enableECSManagedTags:CreateService'</a>,
--   <a>createService_enableECSManagedTags</a> - Specifies whether to
--   enable Amazon ECS managed tags for the tasks within the service. For
--   more information, see <a>Tagging Your Amazon ECS Resources</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:desiredCount:CreateService'</a>,
--   <a>createService_desiredCount</a> - The number of instantiations of
--   the specified task definition to place and keep running on your
--   cluster.
--   
--   This is required if <tt>schedulingStrategy</tt> is <tt>REPLICA</tt> or
--   is not specified. If <tt>schedulingStrategy</tt> is <tt>DAEMON</tt>
--   then this is not required.
--   
--   <a>$sel:loadBalancers:CreateService'</a>,
--   <a>createService_loadBalancers</a> - A load balancer object
--   representing the load balancers to use with your service. For more
--   information, see <a>Service Load Balancing</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   If the service is using the rolling update (<tt>ECS</tt>) deployment
--   controller and using either an Application Load Balancer or Network
--   Load Balancer, you must specify one or more target group ARNs to
--   attach to the service. The service-linked role is required for
--   services that make use of multiple target groups. For more
--   information, see <a>Using service-linked roles for Amazon ECS</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the service is using the <tt>CODE_DEPLOY</tt> deployment
--   controller, the service is required to use either an Application Load
--   Balancer or Network Load Balancer. When creating an CodeDeploy
--   deployment group, you specify two target groups (referred to as a
--   <tt>targetGroupPair</tt>). During a deployment, CodeDeploy determines
--   which task set in your service has the status <tt>PRIMARY</tt> and
--   associates one target group with it, and then associates the other
--   target group with the replacement task set. The load balancer can also
--   have up to two listeners: a required listener for production traffic
--   and an optional listener that allows you perform validation tests with
--   Lambda functions before routing production traffic to it.
--   
--   After you create a service using the <tt>ECS</tt> deployment
--   controller, the load balancer name or target group ARN, container
--   name, and container port specified in the service definition are
--   immutable. If you are using the <tt>CODE_DEPLOY</tt> deployment
--   controller, these values can be changed when updating the service.
--   
--   For Application Load Balancers and Network Load Balancers, this object
--   must contain the load balancer target group ARN, the container name
--   (as it appears in a container definition), and the container port to
--   access from the load balancer. The load balancer name parameter must
--   be omitted. When a task from this service is placed on a container
--   instance, the container instance and port combination is registered as
--   a target in the target group specified here.
--   
--   For Classic Load Balancers, this object must contain the load balancer
--   name, the container name (as it appears in a container definition),
--   and the container port to access from the load balancer. The target
--   group ARN parameter must be omitted. When a task from this service is
--   placed on a container instance, the container instance is registered
--   with the load balancer specified here.
--   
--   Services with tasks that use the <tt>awsvpc</tt> network mode (for
--   example, those with the Fargate launch type) only support Application
--   Load Balancers and Network Load Balancers. Classic Load Balancers are
--   not supported. Also, when you create any target groups for these
--   services, you must choose <tt>ip</tt> as the target type, not
--   <tt>instance</tt>, because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
--   
--   <a>$sel:role':CreateService'</a>, <a>createService_role</a> - The name
--   or full Amazon Resource Name (ARN) of the IAM role that allows Amazon
--   ECS to make calls to your load balancer on your behalf. This parameter
--   is only permitted if you are using a load balancer with your service
--   and your task definition does not use the <tt>awsvpc</tt> network
--   mode. If you specify the <tt>role</tt> parameter, you must also
--   specify a load balancer object with the <tt>loadBalancers</tt>
--   parameter.
--   
--   If your account has already created the Amazon ECS service-linked
--   role, that role is used by default for your service unless you specify
--   a role here. The service-linked role is required if your task
--   definition uses the <tt>awsvpc</tt> network mode or if the service is
--   configured to use service discovery, an external deployment
--   controller, multiple target groups, or Elastic Inference accelerators
--   in which case you should not specify a role here. For more
--   information, see <a>Using service-linked roles for Amazon ECS</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your specified role has a path other than <tt>/</tt>, then you must
--   either specify the full role ARN (this is recommended) or prefix the
--   role name with the path. For example, if a role with the name
--   <tt>bar</tt> has a path of <tt>/foo/</tt> then you would specify
--   <tt>/foo/bar</tt> as the role name. For more information, see
--   <a>Friendly names and paths</a> in the <i>IAM User Guide</i>.
--   
--   <a>$sel:placementConstraints:CreateService'</a>,
--   <a>createService_placementConstraints</a> - An array of placement
--   constraint objects to use for tasks in your service. You can specify a
--   maximum of 10 constraints per task (this limit includes constraints in
--   the task definition and those specified at runtime).
--   
--   <a>$sel:placementStrategy:CreateService'</a>,
--   <a>createService_placementStrategy</a> - The placement strategy
--   objects to use for tasks in your service. You can specify a maximum of
--   5 strategy rules per service.
--   
--   <a>$sel:deploymentController:CreateService'</a>,
--   <a>createService_deploymentController</a> - The deployment controller
--   to use for the service. If no deployment controller is specified, the
--   default value of <tt>ECS</tt> is used.
--   
--   <a>$sel:launchType:CreateService'</a>, <a>createService_launchType</a>
--   - The infrastructure on which to run your service. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>FARGATE</tt> launch type runs your tasks on Fargate On-Demand
--   infrastructure.
--   
--   Fargate Spot infrastructure is available for use but a capacity
--   provider strategy must be used. For more information, see <a>Fargate
--   capacity providers</a> in the <i>Amazon ECS User Guide for
--   Fargate</i>.
--   
--   The <tt>EC2</tt> launch type runs your tasks on Amazon EC2 instances
--   registered to your cluster.
--   
--   The <tt>EXTERNAL</tt> launch type runs your tasks on your on-premise
--   server or virtual machine (VM) capacity registered to your cluster.
--   
--   A service can use either a launch type or a capacity provider
--   strategy. If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
--   
--   <a>$sel:taskDefinition:CreateService'</a>,
--   <a>createService_taskDefinition</a> - The <tt>family</tt> and
--   <tt>revision</tt> (<tt>family:revision</tt>) or full ARN of the task
--   definition to run in your service. If a <tt>revision</tt> is not
--   specified, the latest <tt>ACTIVE</tt> revision is used.
--   
--   A task definition must be specified if the service is using either the
--   <tt>ECS</tt> or <tt>CODE_DEPLOY</tt> deployment controllers.
--   
--   <a>$sel:schedulingStrategy:CreateService'</a>,
--   <a>createService_schedulingStrategy</a> - The scheduling strategy to
--   use for the service. For more information, see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions. This scheduler strategy is required if the
--   service is using the <tt>CODE_DEPLOY</tt> or <tt>EXTERNAL</tt>
--   deployment controller types.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement constraints.
--   When you're using this strategy, you don't need to specify a desired
--   number of tasks, a task placement strategy, or use Service Auto
--   Scaling policies.Tasks using the Fargate launch type or the
--   <tt>CODE_DEPLOY</tt> or <tt>EXTERNAL</tt> deployment controller types
--   don't support the <tt>DAEMON</tt> scheduling strategy.</li>
--   </ul>
--   
--   <a>$sel:healthCheckGracePeriodSeconds:CreateService'</a>,
--   <a>createService_healthCheckGracePeriodSeconds</a> - The period of
--   time, in seconds, that the Amazon ECS service scheduler should ignore
--   unhealthy Elastic Load Balancing target health checks after a task has
--   first started. This is only used when your service is configured to
--   use a load balancer. If your service has a load balancer defined and
--   you don't specify a health check grace period value, the default value
--   of <tt>0</tt> is used.
--   
--   If your service's tasks take a while to start and respond to Elastic
--   Load Balancing health checks, you can specify a health check grace
--   period of up to 2,147,483,647 seconds. During that time, the Amazon
--   ECS service scheduler ignores health check status. This grace period
--   can prevent the service scheduler from marking tasks as unhealthy and
--   stopping them before they have time to come up.
--   
--   <a>$sel:networkConfiguration:CreateService'</a>,
--   <a>createService_networkConfiguration</a> - The network configuration
--   for the service. This parameter is required for task definitions that
--   use the <tt>awsvpc</tt> network mode to receive their own elastic
--   network interface, and it is not supported for other network modes.
--   For more information, see <a>Task networking</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:serviceRegistries:CreateService'</a>,
--   <a>createService_serviceRegistries</a> - The details of the service
--   discovery registry to associate with this service. For more
--   information, see <a>Service discovery</a>.
--   
--   Each service may be associated with one service registry. Multiple
--   service registries per service isn't supported.
--   
--   <a>$sel:capacityProviderStrategy:CreateService'</a>,
--   <a>createService_capacityProviderStrategy</a> - The capacity provider
--   strategy to use for the service.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
--   
--   <a>$sel:enableExecuteCommand:CreateService'</a>,
--   <a>createService_enableExecuteCommand</a> - Whether or not the execute
--   command functionality is enabled for the service. If <tt>true</tt>,
--   this enables execute command functionality on all containers in the
--   service tasks.
--   
--   <a>$sel:tags:CreateService'</a>, <a>createService_tags</a> - The
--   metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. When a service is deleted, the tags are deleted
--   as well.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:deploymentConfiguration:CreateService'</a>,
--   <a>createService_deploymentConfiguration</a> - Optional deployment
--   parameters that control how many tasks run during the deployment and
--   the ordering of stopping and starting tasks.
--   
--   <a>$sel:serviceName:CreateService'</a>,
--   <a>createService_serviceName</a> - The name of your service. Up to 255
--   letters (uppercase and lowercase), numbers, underscores, and hyphens
--   are allowed. Service names must be unique within a cluster, but you
--   can have similarly named services in multiple clusters within a Region
--   or across multiple Regions.
newCreateService :: Text -> CreateService

-- | The short name or full Amazon Resource Name (ARN) of the cluster on
--   which to run your service. If you do not specify a cluster, the
--   default cluster is assumed.
createService_cluster :: Lens' CreateService (Maybe Text)

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request. Up to 32 ASCII characters are allowed.
createService_clientToken :: Lens' CreateService (Maybe Text)

-- | Specifies whether to propagate the tags from the task definition or
--   the service to the tasks in the service. If no value is specified, the
--   tags are not propagated. Tags can only be propagated to the tasks
--   within the service during service creation. To add tags to a task
--   after service creation or task creation, use the TagResource API
--   action.
createService_propagateTags :: Lens' CreateService (Maybe PropagateTags)

-- | The platform version that your tasks in the service are running on. A
--   platform version is specified only for tasks using the Fargate launch
--   type. If one isn't specified, the <tt>LATEST</tt> platform version is
--   used by default. For more information, see <a>Fargate platform
--   versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
createService_platformVersion :: Lens' CreateService (Maybe Text)

-- | Specifies whether to enable Amazon ECS managed tags for the tasks
--   within the service. For more information, see <a>Tagging Your Amazon
--   ECS Resources</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
createService_enableECSManagedTags :: Lens' CreateService (Maybe Bool)

-- | The number of instantiations of the specified task definition to place
--   and keep running on your cluster.
--   
--   This is required if <tt>schedulingStrategy</tt> is <tt>REPLICA</tt> or
--   is not specified. If <tt>schedulingStrategy</tt> is <tt>DAEMON</tt>
--   then this is not required.
createService_desiredCount :: Lens' CreateService (Maybe Int)

-- | A load balancer object representing the load balancers to use with
--   your service. For more information, see <a>Service Load Balancing</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the service is using the rolling update (<tt>ECS</tt>) deployment
--   controller and using either an Application Load Balancer or Network
--   Load Balancer, you must specify one or more target group ARNs to
--   attach to the service. The service-linked role is required for
--   services that make use of multiple target groups. For more
--   information, see <a>Using service-linked roles for Amazon ECS</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the service is using the <tt>CODE_DEPLOY</tt> deployment
--   controller, the service is required to use either an Application Load
--   Balancer or Network Load Balancer. When creating an CodeDeploy
--   deployment group, you specify two target groups (referred to as a
--   <tt>targetGroupPair</tt>). During a deployment, CodeDeploy determines
--   which task set in your service has the status <tt>PRIMARY</tt> and
--   associates one target group with it, and then associates the other
--   target group with the replacement task set. The load balancer can also
--   have up to two listeners: a required listener for production traffic
--   and an optional listener that allows you perform validation tests with
--   Lambda functions before routing production traffic to it.
--   
--   After you create a service using the <tt>ECS</tt> deployment
--   controller, the load balancer name or target group ARN, container
--   name, and container port specified in the service definition are
--   immutable. If you are using the <tt>CODE_DEPLOY</tt> deployment
--   controller, these values can be changed when updating the service.
--   
--   For Application Load Balancers and Network Load Balancers, this object
--   must contain the load balancer target group ARN, the container name
--   (as it appears in a container definition), and the container port to
--   access from the load balancer. The load balancer name parameter must
--   be omitted. When a task from this service is placed on a container
--   instance, the container instance and port combination is registered as
--   a target in the target group specified here.
--   
--   For Classic Load Balancers, this object must contain the load balancer
--   name, the container name (as it appears in a container definition),
--   and the container port to access from the load balancer. The target
--   group ARN parameter must be omitted. When a task from this service is
--   placed on a container instance, the container instance is registered
--   with the load balancer specified here.
--   
--   Services with tasks that use the <tt>awsvpc</tt> network mode (for
--   example, those with the Fargate launch type) only support Application
--   Load Balancers and Network Load Balancers. Classic Load Balancers are
--   not supported. Also, when you create any target groups for these
--   services, you must choose <tt>ip</tt> as the target type, not
--   <tt>instance</tt>, because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
createService_loadBalancers :: Lens' CreateService (Maybe [LoadBalancer])

-- | The name or full Amazon Resource Name (ARN) of the IAM role that
--   allows Amazon ECS to make calls to your load balancer on your behalf.
--   This parameter is only permitted if you are using a load balancer with
--   your service and your task definition does not use the <tt>awsvpc</tt>
--   network mode. If you specify the <tt>role</tt> parameter, you must
--   also specify a load balancer object with the <tt>loadBalancers</tt>
--   parameter.
--   
--   If your account has already created the Amazon ECS service-linked
--   role, that role is used by default for your service unless you specify
--   a role here. The service-linked role is required if your task
--   definition uses the <tt>awsvpc</tt> network mode or if the service is
--   configured to use service discovery, an external deployment
--   controller, multiple target groups, or Elastic Inference accelerators
--   in which case you should not specify a role here. For more
--   information, see <a>Using service-linked roles for Amazon ECS</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your specified role has a path other than <tt>/</tt>, then you must
--   either specify the full role ARN (this is recommended) or prefix the
--   role name with the path. For example, if a role with the name
--   <tt>bar</tt> has a path of <tt>/foo/</tt> then you would specify
--   <tt>/foo/bar</tt> as the role name. For more information, see
--   <a>Friendly names and paths</a> in the <i>IAM User Guide</i>.
createService_role :: Lens' CreateService (Maybe Text)

-- | An array of placement constraint objects to use for tasks in your
--   service. You can specify a maximum of 10 constraints per task (this
--   limit includes constraints in the task definition and those specified
--   at runtime).
createService_placementConstraints :: Lens' CreateService (Maybe [PlacementConstraint])

-- | The placement strategy objects to use for tasks in your service. You
--   can specify a maximum of 5 strategy rules per service.
createService_placementStrategy :: Lens' CreateService (Maybe [PlacementStrategy])

-- | The deployment controller to use for the service. If no deployment
--   controller is specified, the default value of <tt>ECS</tt> is used.
createService_deploymentController :: Lens' CreateService (Maybe DeploymentController)

-- | The infrastructure on which to run your service. For more information,
--   see <a>Amazon ECS launch types</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   The <tt>FARGATE</tt> launch type runs your tasks on Fargate On-Demand
--   infrastructure.
--   
--   Fargate Spot infrastructure is available for use but a capacity
--   provider strategy must be used. For more information, see <a>Fargate
--   capacity providers</a> in the <i>Amazon ECS User Guide for
--   Fargate</i>.
--   
--   The <tt>EC2</tt> launch type runs your tasks on Amazon EC2 instances
--   registered to your cluster.
--   
--   The <tt>EXTERNAL</tt> launch type runs your tasks on your on-premise
--   server or virtual machine (VM) capacity registered to your cluster.
--   
--   A service can use either a launch type or a capacity provider
--   strategy. If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
createService_launchType :: Lens' CreateService (Maybe LaunchType)

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to run in your service. If a
--   <tt>revision</tt> is not specified, the latest <tt>ACTIVE</tt>
--   revision is used.
--   
--   A task definition must be specified if the service is using either the
--   <tt>ECS</tt> or <tt>CODE_DEPLOY</tt> deployment controllers.
createService_taskDefinition :: Lens' CreateService (Maybe Text)

-- | The scheduling strategy to use for the service. For more information,
--   see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions. This scheduler strategy is required if the
--   service is using the <tt>CODE_DEPLOY</tt> or <tt>EXTERNAL</tt>
--   deployment controller types.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement constraints.
--   When you're using this strategy, you don't need to specify a desired
--   number of tasks, a task placement strategy, or use Service Auto
--   Scaling policies.Tasks using the Fargate launch type or the
--   <tt>CODE_DEPLOY</tt> or <tt>EXTERNAL</tt> deployment controller types
--   don't support the <tt>DAEMON</tt> scheduling strategy.</li>
--   </ul>
createService_schedulingStrategy :: Lens' CreateService (Maybe SchedulingStrategy)

-- | The period of time, in seconds, that the Amazon ECS service scheduler
--   should ignore unhealthy Elastic Load Balancing target health checks
--   after a task has first started. This is only used when your service is
--   configured to use a load balancer. If your service has a load balancer
--   defined and you don't specify a health check grace period value, the
--   default value of <tt>0</tt> is used.
--   
--   If your service's tasks take a while to start and respond to Elastic
--   Load Balancing health checks, you can specify a health check grace
--   period of up to 2,147,483,647 seconds. During that time, the Amazon
--   ECS service scheduler ignores health check status. This grace period
--   can prevent the service scheduler from marking tasks as unhealthy and
--   stopping them before they have time to come up.
createService_healthCheckGracePeriodSeconds :: Lens' CreateService (Maybe Int)

-- | The network configuration for the service. This parameter is required
--   for task definitions that use the <tt>awsvpc</tt> network mode to
--   receive their own elastic network interface, and it is not supported
--   for other network modes. For more information, see <a>Task
--   networking</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
createService_networkConfiguration :: Lens' CreateService (Maybe NetworkConfiguration)

-- | The details of the service discovery registry to associate with this
--   service. For more information, see <a>Service discovery</a>.
--   
--   Each service may be associated with one service registry. Multiple
--   service registries per service isn't supported.
createService_serviceRegistries :: Lens' CreateService (Maybe [ServiceRegistry])

-- | The capacity provider strategy to use for the service.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
createService_capacityProviderStrategy :: Lens' CreateService (Maybe [CapacityProviderStrategyItem])

-- | Whether or not the execute command functionality is enabled for the
--   service. If <tt>true</tt>, this enables execute command functionality
--   on all containers in the service tasks.
createService_enableExecuteCommand :: Lens' CreateService (Maybe Bool)

-- | The metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. When a service is deleted, the tags are deleted
--   as well.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
createService_tags :: Lens' CreateService (Maybe [Tag])

-- | Optional deployment parameters that control how many tasks run during
--   the deployment and the ordering of stopping and starting tasks.
createService_deploymentConfiguration :: Lens' CreateService (Maybe DeploymentConfiguration)

-- | The name of your service. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. Service names must be
--   unique within a cluster, but you can have similarly named services in
--   multiple clusters within a Region or across multiple Regions.
createService_serviceName :: Lens' CreateService Text

-- | <i>See:</i> <a>newCreateServiceResponse</a> smart constructor.
data CreateServiceResponse
CreateServiceResponse' :: Maybe ContainerService -> Int -> CreateServiceResponse

-- | The full description of your service following the create call.
--   
--   A service will return either a <tt>capacityProviderStrategy</tt> or
--   <tt>launchType</tt> parameter, but not both, depending on which one
--   was specified during creation.
--   
--   If a service is using the <tt>ECS</tt> deployment controller, the
--   <tt>deploymentController</tt> and <tt>taskSets</tt> parameters will
--   not be returned.
--   
--   If the service is using the <tt>CODE_DEPLOY</tt> deployment
--   controller, the <tt>deploymentController</tt>, <tt>taskSets</tt> and
--   <tt>deployments</tt> parameters will be returned, however the
--   <tt>deployments</tt> parameter will be an empty list.
[$sel:service:CreateServiceResponse'] :: CreateServiceResponse -> Maybe ContainerService

-- | The response's http status code.
[$sel:httpStatus:CreateServiceResponse'] :: CreateServiceResponse -> Int

-- | Create a value of <a>CreateServiceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:service:CreateServiceResponse'</a>,
--   <a>createServiceResponse_service</a> - The full description of your
--   service following the create call.
--   
--   A service will return either a <tt>capacityProviderStrategy</tt> or
--   <tt>launchType</tt> parameter, but not both, depending on which one
--   was specified during creation.
--   
--   If a service is using the <tt>ECS</tt> deployment controller, the
--   <tt>deploymentController</tt> and <tt>taskSets</tt> parameters will
--   not be returned.
--   
--   If the service is using the <tt>CODE_DEPLOY</tt> deployment
--   controller, the <tt>deploymentController</tt>, <tt>taskSets</tt> and
--   <tt>deployments</tt> parameters will be returned, however the
--   <tt>deployments</tt> parameter will be an empty list.
--   
--   <a>$sel:httpStatus:CreateServiceResponse'</a>,
--   <a>createServiceResponse_httpStatus</a> - The response's http status
--   code.
newCreateServiceResponse :: Int -> CreateServiceResponse

-- | The full description of your service following the create call.
--   
--   A service will return either a <tt>capacityProviderStrategy</tt> or
--   <tt>launchType</tt> parameter, but not both, depending on which one
--   was specified during creation.
--   
--   If a service is using the <tt>ECS</tt> deployment controller, the
--   <tt>deploymentController</tt> and <tt>taskSets</tt> parameters will
--   not be returned.
--   
--   If the service is using the <tt>CODE_DEPLOY</tt> deployment
--   controller, the <tt>deploymentController</tt>, <tt>taskSets</tt> and
--   <tt>deployments</tt> parameters will be returned, however the
--   <tt>deployments</tt> parameter will be an empty list.
createServiceResponse_service :: Lens' CreateServiceResponse (Maybe ContainerService)

-- | The response's http status code.
createServiceResponse_httpStatus :: Lens' CreateServiceResponse Int
instance GHC.Generics.Generic Amazonka.ECS.CreateService.CreateService
instance GHC.Show.Show Amazonka.ECS.CreateService.CreateService
instance GHC.Read.Read Amazonka.ECS.CreateService.CreateService
instance GHC.Classes.Eq Amazonka.ECS.CreateService.CreateService
instance GHC.Generics.Generic Amazonka.ECS.CreateService.CreateServiceResponse
instance GHC.Show.Show Amazonka.ECS.CreateService.CreateServiceResponse
instance GHC.Read.Read Amazonka.ECS.CreateService.CreateServiceResponse
instance GHC.Classes.Eq Amazonka.ECS.CreateService.CreateServiceResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.CreateService.CreateService
instance Control.DeepSeq.NFData Amazonka.ECS.CreateService.CreateServiceResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.CreateService.CreateService
instance Control.DeepSeq.NFData Amazonka.ECS.CreateService.CreateService
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.CreateService.CreateService
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.CreateService.CreateService
instance Amazonka.Data.Path.ToPath Amazonka.ECS.CreateService.CreateService
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.CreateService.CreateService


-- | Creates a new Amazon ECS cluster. By default, your account receives a
--   <tt>default</tt> cluster when you launch your first container
--   instance. However, you can create your own cluster with a unique name
--   with the <tt>CreateCluster</tt> action.
--   
--   When you call the CreateCluster API operation, Amazon ECS attempts to
--   create the Amazon ECS service-linked role for your account so that
--   required resources in other Amazon Web Services services can be
--   managed on your behalf. However, if the IAM user that makes the call
--   does not have permissions to create the service-linked role, it is not
--   created. For more information, see <a>Using Service-Linked Roles for
--   Amazon ECS</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
module Amazonka.ECS.CreateCluster

-- | <i>See:</i> <a>newCreateCluster</a> smart constructor.
data CreateCluster
CreateCluster' :: Maybe [CapacityProviderStrategyItem] -> Maybe [ClusterSetting] -> Maybe Text -> Maybe ClusterConfiguration -> Maybe [Text] -> Maybe [Tag] -> CreateCluster

-- | The capacity provider strategy to set as the default for the cluster.
--   When a default capacity provider strategy is set for a cluster, when
--   calling the RunTask or CreateService APIs with no capacity provider
--   strategy or launch type specified, the default capacity provider
--   strategy for the cluster is used.
--   
--   If a default capacity provider strategy is not defined for a cluster
--   during creation, it can be defined later with the
--   PutClusterCapacityProviders API operation.
[$sel:defaultCapacityProviderStrategy:CreateCluster'] :: CreateCluster -> Maybe [CapacityProviderStrategyItem]

-- | The setting to use when creating a cluster. This parameter is used to
--   enable CloudWatch Container Insights for a cluster. If this value is
--   specified, it will override the <tt>containerInsights</tt> value set
--   with PutAccountSetting or PutAccountSettingDefault.
[$sel:settings:CreateCluster'] :: CreateCluster -> Maybe [ClusterSetting]

-- | The name of your cluster. If you do not specify a name for your
--   cluster, you create a cluster named <tt>default</tt>. Up to 255
--   letters (uppercase and lowercase), numbers, underscores, and hyphens
--   are allowed.
[$sel:clusterName:CreateCluster'] :: CreateCluster -> Maybe Text

-- | The execute command configuration for the cluster.
[$sel:configuration:CreateCluster'] :: CreateCluster -> Maybe ClusterConfiguration

-- | The short name of one or more capacity providers to associate with the
--   cluster. A capacity provider must be associated with a cluster before
--   it can be included as part of the default capacity provider strategy
--   of the cluster or used in a capacity provider strategy when calling
--   the CreateService or RunTask actions.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created and not already associated
--   with another cluster. New Auto Scaling group capacity providers can be
--   created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
[$sel:capacityProviders:CreateCluster'] :: CreateCluster -> Maybe [Text]

-- | The metadata that you apply to the cluster to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:CreateCluster'] :: CreateCluster -> Maybe [Tag]

-- | Create a value of <a>CreateCluster</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:defaultCapacityProviderStrategy:CreateCluster'</a>,
--   <a>createCluster_defaultCapacityProviderStrategy</a> - The capacity
--   provider strategy to set as the default for the cluster. When a
--   default capacity provider strategy is set for a cluster, when calling
--   the RunTask or CreateService APIs with no capacity provider strategy
--   or launch type specified, the default capacity provider strategy for
--   the cluster is used.
--   
--   If a default capacity provider strategy is not defined for a cluster
--   during creation, it can be defined later with the
--   PutClusterCapacityProviders API operation.
--   
--   <a>$sel:settings:CreateCluster'</a>, <a>createCluster_settings</a> -
--   The setting to use when creating a cluster. This parameter is used to
--   enable CloudWatch Container Insights for a cluster. If this value is
--   specified, it will override the <tt>containerInsights</tt> value set
--   with PutAccountSetting or PutAccountSettingDefault.
--   
--   <a>$sel:clusterName:CreateCluster'</a>,
--   <a>createCluster_clusterName</a> - The name of your cluster. If you do
--   not specify a name for your cluster, you create a cluster named
--   <tt>default</tt>. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed.
--   
--   <a>$sel:configuration:CreateCluster'</a>,
--   <a>createCluster_configuration</a> - The execute command configuration
--   for the cluster.
--   
--   <a>$sel:capacityProviders:CreateCluster'</a>,
--   <a>createCluster_capacityProviders</a> - The short name of one or more
--   capacity providers to associate with the cluster. A capacity provider
--   must be associated with a cluster before it can be included as part of
--   the default capacity provider strategy of the cluster or used in a
--   capacity provider strategy when calling the CreateService or RunTask
--   actions.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created and not already associated
--   with another cluster. New Auto Scaling group capacity providers can be
--   created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
--   
--   <a>$sel:tags:CreateCluster'</a>, <a>createCluster_tags</a> - The
--   metadata that you apply to the cluster to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newCreateCluster :: CreateCluster

-- | The capacity provider strategy to set as the default for the cluster.
--   When a default capacity provider strategy is set for a cluster, when
--   calling the RunTask or CreateService APIs with no capacity provider
--   strategy or launch type specified, the default capacity provider
--   strategy for the cluster is used.
--   
--   If a default capacity provider strategy is not defined for a cluster
--   during creation, it can be defined later with the
--   PutClusterCapacityProviders API operation.
createCluster_defaultCapacityProviderStrategy :: Lens' CreateCluster (Maybe [CapacityProviderStrategyItem])

-- | The setting to use when creating a cluster. This parameter is used to
--   enable CloudWatch Container Insights for a cluster. If this value is
--   specified, it will override the <tt>containerInsights</tt> value set
--   with PutAccountSetting or PutAccountSettingDefault.
createCluster_settings :: Lens' CreateCluster (Maybe [ClusterSetting])

-- | The name of your cluster. If you do not specify a name for your
--   cluster, you create a cluster named <tt>default</tt>. Up to 255
--   letters (uppercase and lowercase), numbers, underscores, and hyphens
--   are allowed.
createCluster_clusterName :: Lens' CreateCluster (Maybe Text)

-- | The execute command configuration for the cluster.
createCluster_configuration :: Lens' CreateCluster (Maybe ClusterConfiguration)

-- | The short name of one or more capacity providers to associate with the
--   cluster. A capacity provider must be associated with a cluster before
--   it can be included as part of the default capacity provider strategy
--   of the cluster or used in a capacity provider strategy when calling
--   the CreateService or RunTask actions.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created and not already associated
--   with another cluster. New Auto Scaling group capacity providers can be
--   created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
createCluster_capacityProviders :: Lens' CreateCluster (Maybe [Text])

-- | The metadata that you apply to the cluster to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
createCluster_tags :: Lens' CreateCluster (Maybe [Tag])

-- | <i>See:</i> <a>newCreateClusterResponse</a> smart constructor.
data CreateClusterResponse
CreateClusterResponse' :: Maybe Cluster -> Int -> CreateClusterResponse

-- | The full description of your new cluster.
[$sel:cluster:CreateClusterResponse'] :: CreateClusterResponse -> Maybe Cluster

-- | The response's http status code.
[$sel:httpStatus:CreateClusterResponse'] :: CreateClusterResponse -> Int

-- | Create a value of <a>CreateClusterResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:CreateClusterResponse'</a>,
--   <a>createClusterResponse_cluster</a> - The full description of your
--   new cluster.
--   
--   <a>$sel:httpStatus:CreateClusterResponse'</a>,
--   <a>createClusterResponse_httpStatus</a> - The response's http status
--   code.
newCreateClusterResponse :: Int -> CreateClusterResponse

-- | The full description of your new cluster.
createClusterResponse_cluster :: Lens' CreateClusterResponse (Maybe Cluster)

-- | The response's http status code.
createClusterResponse_httpStatus :: Lens' CreateClusterResponse Int
instance GHC.Generics.Generic Amazonka.ECS.CreateCluster.CreateCluster
instance GHC.Show.Show Amazonka.ECS.CreateCluster.CreateCluster
instance GHC.Read.Read Amazonka.ECS.CreateCluster.CreateCluster
instance GHC.Classes.Eq Amazonka.ECS.CreateCluster.CreateCluster
instance GHC.Generics.Generic Amazonka.ECS.CreateCluster.CreateClusterResponse
instance GHC.Show.Show Amazonka.ECS.CreateCluster.CreateClusterResponse
instance GHC.Read.Read Amazonka.ECS.CreateCluster.CreateClusterResponse
instance GHC.Classes.Eq Amazonka.ECS.CreateCluster.CreateClusterResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.CreateCluster.CreateCluster
instance Control.DeepSeq.NFData Amazonka.ECS.CreateCluster.CreateClusterResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.CreateCluster.CreateCluster
instance Control.DeepSeq.NFData Amazonka.ECS.CreateCluster.CreateCluster
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.CreateCluster.CreateCluster
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.CreateCluster.CreateCluster
instance Amazonka.Data.Path.ToPath Amazonka.ECS.CreateCluster.CreateCluster
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.CreateCluster.CreateCluster


-- | Creates a new capacity provider. Capacity providers are associated
--   with an Amazon ECS cluster and are used in capacity provider
--   strategies to facilitate cluster auto scaling.
--   
--   Only capacity providers using an Auto Scaling group can be created.
--   Amazon ECS tasks on Fargate use the <tt>FARGATE</tt> and
--   <tt>FARGATE_SPOT</tt> capacity providers which are already created and
--   available to all accounts in Regions supported by Fargate.
module Amazonka.ECS.CreateCapacityProvider

-- | <i>See:</i> <a>newCreateCapacityProvider</a> smart constructor.
data CreateCapacityProvider
CreateCapacityProvider' :: Maybe [Tag] -> Text -> AutoScalingGroupProvider -> CreateCapacityProvider

-- | The metadata that you apply to the capacity provider to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
[$sel:tags:CreateCapacityProvider'] :: CreateCapacityProvider -> Maybe [Tag]

-- | The name of the capacity provider. Up to 255 characters are allowed,
--   including letters (upper and lowercase), numbers, underscores, and
--   hyphens. The name cannot be prefixed with "<tt>aws</tt>",
--   "<tt>ecs</tt>", or "<tt>fargate</tt>".
[$sel:name:CreateCapacityProvider'] :: CreateCapacityProvider -> Text

-- | The details of the Auto Scaling group for the capacity provider.
[$sel:autoScalingGroupProvider:CreateCapacityProvider'] :: CreateCapacityProvider -> AutoScalingGroupProvider

-- | Create a value of <a>CreateCapacityProvider</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:CreateCapacityProvider'</a>,
--   <a>createCapacityProvider_tags</a> - The metadata that you apply to
--   the capacity provider to help you categorize and organize them. Each
--   tag consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:name:CreateCapacityProvider'</a>,
--   <a>createCapacityProvider_name</a> - The name of the capacity
--   provider. Up to 255 characters are allowed, including letters (upper
--   and lowercase), numbers, underscores, and hyphens. The name cannot be
--   prefixed with "<tt>aws</tt>", "<tt>ecs</tt>", or "<tt>fargate</tt>".
--   
--   <a>$sel:autoScalingGroupProvider:CreateCapacityProvider'</a>,
--   <a>createCapacityProvider_autoScalingGroupProvider</a> - The details
--   of the Auto Scaling group for the capacity provider.
newCreateCapacityProvider :: Text -> AutoScalingGroupProvider -> CreateCapacityProvider

-- | The metadata that you apply to the capacity provider to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
createCapacityProvider_tags :: Lens' CreateCapacityProvider (Maybe [Tag])

-- | The name of the capacity provider. Up to 255 characters are allowed,
--   including letters (upper and lowercase), numbers, underscores, and
--   hyphens. The name cannot be prefixed with "<tt>aws</tt>",
--   "<tt>ecs</tt>", or "<tt>fargate</tt>".
createCapacityProvider_name :: Lens' CreateCapacityProvider Text

-- | The details of the Auto Scaling group for the capacity provider.
createCapacityProvider_autoScalingGroupProvider :: Lens' CreateCapacityProvider AutoScalingGroupProvider

-- | <i>See:</i> <a>newCreateCapacityProviderResponse</a> smart
--   constructor.
data CreateCapacityProviderResponse
CreateCapacityProviderResponse' :: Maybe CapacityProvider -> Int -> CreateCapacityProviderResponse

-- | The full description of the new capacity provider.
[$sel:capacityProvider:CreateCapacityProviderResponse'] :: CreateCapacityProviderResponse -> Maybe CapacityProvider

-- | The response's http status code.
[$sel:httpStatus:CreateCapacityProviderResponse'] :: CreateCapacityProviderResponse -> Int

-- | Create a value of <a>CreateCapacityProviderResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:capacityProvider:CreateCapacityProviderResponse'</a>,
--   <a>createCapacityProviderResponse_capacityProvider</a> - The full
--   description of the new capacity provider.
--   
--   <a>$sel:httpStatus:CreateCapacityProviderResponse'</a>,
--   <a>createCapacityProviderResponse_httpStatus</a> - The response's http
--   status code.
newCreateCapacityProviderResponse :: Int -> CreateCapacityProviderResponse

-- | The full description of the new capacity provider.
createCapacityProviderResponse_capacityProvider :: Lens' CreateCapacityProviderResponse (Maybe CapacityProvider)

-- | The response's http status code.
createCapacityProviderResponse_httpStatus :: Lens' CreateCapacityProviderResponse Int
instance GHC.Generics.Generic Amazonka.ECS.CreateCapacityProvider.CreateCapacityProvider
instance GHC.Show.Show Amazonka.ECS.CreateCapacityProvider.CreateCapacityProvider
instance GHC.Read.Read Amazonka.ECS.CreateCapacityProvider.CreateCapacityProvider
instance GHC.Classes.Eq Amazonka.ECS.CreateCapacityProvider.CreateCapacityProvider
instance GHC.Generics.Generic Amazonka.ECS.CreateCapacityProvider.CreateCapacityProviderResponse
instance GHC.Show.Show Amazonka.ECS.CreateCapacityProvider.CreateCapacityProviderResponse
instance GHC.Read.Read Amazonka.ECS.CreateCapacityProvider.CreateCapacityProviderResponse
instance GHC.Classes.Eq Amazonka.ECS.CreateCapacityProvider.CreateCapacityProviderResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.CreateCapacityProvider.CreateCapacityProvider
instance Control.DeepSeq.NFData Amazonka.ECS.CreateCapacityProvider.CreateCapacityProviderResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.CreateCapacityProvider.CreateCapacityProvider
instance Control.DeepSeq.NFData Amazonka.ECS.CreateCapacityProvider.CreateCapacityProvider
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.CreateCapacityProvider.CreateCapacityProvider
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.CreateCapacityProvider.CreateCapacityProvider
instance Amazonka.Data.Path.ToPath Amazonka.ECS.CreateCapacityProvider.CreateCapacityProvider
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.CreateCapacityProvider.CreateCapacityProvider


-- | Deletes specified tags from a resource.
module Amazonka.ECS.UntagResource

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | The Amazon Resource Name (ARN) of the resource from which to delete
--   tags. Currently, the supported resources are Amazon ECS capacity
--   providers, tasks, services, task definitions, clusters, and container
--   instances.
[$sel:resourceArn:UntagResource'] :: UntagResource -> Text

-- | The keys of the tags to be removed.
[$sel:tagKeys:UntagResource'] :: UntagResource -> [Text]

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The Amazon Resource Name (ARN) of
--   the resource from which to delete tags. Currently, the supported
--   resources are Amazon ECS capacity providers, tasks, services, task
--   definitions, clusters, and container instances.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - The
--   keys of the tags to be removed.
newUntagResource :: Text -> UntagResource

-- | The Amazon Resource Name (ARN) of the resource from which to delete
--   tags. Currently, the supported resources are Amazon ECS capacity
--   providers, tasks, services, task definitions, clusters, and container
--   instances.
untagResource_resourceArn :: Lens' UntagResource Text

-- | The keys of the tags to be removed.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | The response's http status code.
[$sel:httpStatus:UntagResourceResponse'] :: UntagResourceResponse -> Int

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int
instance GHC.Generics.Generic Amazonka.ECS.UntagResource.UntagResource
instance GHC.Show.Show Amazonka.ECS.UntagResource.UntagResource
instance GHC.Read.Read Amazonka.ECS.UntagResource.UntagResource
instance GHC.Classes.Eq Amazonka.ECS.UntagResource.UntagResource
instance GHC.Generics.Generic Amazonka.ECS.UntagResource.UntagResourceResponse
instance GHC.Show.Show Amazonka.ECS.UntagResource.UntagResourceResponse
instance GHC.Read.Read Amazonka.ECS.UntagResource.UntagResourceResponse
instance GHC.Classes.Eq Amazonka.ECS.UntagResource.UntagResourceResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.ECS.UntagResource.UntagResourceResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.UntagResource.UntagResource
instance Control.DeepSeq.NFData Amazonka.ECS.UntagResource.UntagResource
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.UntagResource.UntagResource
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.UntagResource.UntagResource
instance Amazonka.Data.Path.ToPath Amazonka.ECS.UntagResource.UntagResource
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.UntagResource.UntagResource


-- | Modifies the parameters for a capacity provider.
module Amazonka.ECS.UpdateCapacityProvider

-- | <i>See:</i> <a>newUpdateCapacityProvider</a> smart constructor.
data UpdateCapacityProvider
UpdateCapacityProvider' :: Text -> AutoScalingGroupProviderUpdate -> UpdateCapacityProvider

-- | The name of the capacity provider to update.
[$sel:name:UpdateCapacityProvider'] :: UpdateCapacityProvider -> Text

-- | An object representing the parameters to update for the Auto Scaling
--   group capacity provider.
[$sel:autoScalingGroupProvider:UpdateCapacityProvider'] :: UpdateCapacityProvider -> AutoScalingGroupProviderUpdate

-- | Create a value of <a>UpdateCapacityProvider</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:UpdateCapacityProvider'</a>,
--   <a>updateCapacityProvider_name</a> - The name of the capacity provider
--   to update.
--   
--   <a>$sel:autoScalingGroupProvider:UpdateCapacityProvider'</a>,
--   <a>updateCapacityProvider_autoScalingGroupProvider</a> - An object
--   representing the parameters to update for the Auto Scaling group
--   capacity provider.
newUpdateCapacityProvider :: Text -> AutoScalingGroupProviderUpdate -> UpdateCapacityProvider

-- | The name of the capacity provider to update.
updateCapacityProvider_name :: Lens' UpdateCapacityProvider Text

-- | An object representing the parameters to update for the Auto Scaling
--   group capacity provider.
updateCapacityProvider_autoScalingGroupProvider :: Lens' UpdateCapacityProvider AutoScalingGroupProviderUpdate

-- | <i>See:</i> <a>newUpdateCapacityProviderResponse</a> smart
--   constructor.
data UpdateCapacityProviderResponse
UpdateCapacityProviderResponse' :: Maybe CapacityProvider -> Int -> UpdateCapacityProviderResponse

-- | Details about the capacity provider.
[$sel:capacityProvider:UpdateCapacityProviderResponse'] :: UpdateCapacityProviderResponse -> Maybe CapacityProvider

-- | The response's http status code.
[$sel:httpStatus:UpdateCapacityProviderResponse'] :: UpdateCapacityProviderResponse -> Int

-- | Create a value of <a>UpdateCapacityProviderResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:capacityProvider:UpdateCapacityProviderResponse'</a>,
--   <a>updateCapacityProviderResponse_capacityProvider</a> - Details about
--   the capacity provider.
--   
--   <a>$sel:httpStatus:UpdateCapacityProviderResponse'</a>,
--   <a>updateCapacityProviderResponse_httpStatus</a> - The response's http
--   status code.
newUpdateCapacityProviderResponse :: Int -> UpdateCapacityProviderResponse

-- | Details about the capacity provider.
updateCapacityProviderResponse_capacityProvider :: Lens' UpdateCapacityProviderResponse (Maybe CapacityProvider)

-- | The response's http status code.
updateCapacityProviderResponse_httpStatus :: Lens' UpdateCapacityProviderResponse Int
instance GHC.Generics.Generic Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProvider
instance GHC.Show.Show Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProvider
instance GHC.Read.Read Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProvider
instance GHC.Classes.Eq Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProvider
instance GHC.Generics.Generic Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProviderResponse
instance GHC.Show.Show Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProviderResponse
instance GHC.Read.Read Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProviderResponse
instance GHC.Classes.Eq Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProviderResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProvider
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProviderResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProvider
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProvider
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProvider
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProvider
instance Amazonka.Data.Path.ToPath Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProvider
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.UpdateCapacityProvider.UpdateCapacityProvider


-- | Updates the cluster.
module Amazonka.ECS.UpdateCluster

-- | <i>See:</i> <a>newUpdateCluster</a> smart constructor.
data UpdateCluster
UpdateCluster' :: Maybe [ClusterSetting] -> Maybe ClusterConfiguration -> Text -> UpdateCluster

-- | The cluster settings for your cluster.
[$sel:settings:UpdateCluster'] :: UpdateCluster -> Maybe [ClusterSetting]

-- | The execute command configuration for the cluster.
[$sel:configuration:UpdateCluster'] :: UpdateCluster -> Maybe ClusterConfiguration

-- | The name of the cluster to modify the settings for.
[$sel:cluster:UpdateCluster'] :: UpdateCluster -> Text

-- | Create a value of <a>UpdateCluster</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:settings:UpdateCluster'</a>, <a>updateCluster_settings</a> -
--   The cluster settings for your cluster.
--   
--   <a>$sel:configuration:UpdateCluster'</a>,
--   <a>updateCluster_configuration</a> - The execute command configuration
--   for the cluster.
--   
--   <a>$sel:cluster:UpdateCluster'</a>, <a>updateCluster_cluster</a> - The
--   name of the cluster to modify the settings for.
newUpdateCluster :: Text -> UpdateCluster

-- | The cluster settings for your cluster.
updateCluster_settings :: Lens' UpdateCluster (Maybe [ClusterSetting])

-- | The execute command configuration for the cluster.
updateCluster_configuration :: Lens' UpdateCluster (Maybe ClusterConfiguration)

-- | The name of the cluster to modify the settings for.
updateCluster_cluster :: Lens' UpdateCluster Text

-- | <i>See:</i> <a>newUpdateClusterResponse</a> smart constructor.
data UpdateClusterResponse
UpdateClusterResponse' :: Maybe Cluster -> Int -> UpdateClusterResponse

-- | Details about the cluster.
[$sel:cluster:UpdateClusterResponse'] :: UpdateClusterResponse -> Maybe Cluster

-- | The response's http status code.
[$sel:httpStatus:UpdateClusterResponse'] :: UpdateClusterResponse -> Int

-- | Create a value of <a>UpdateClusterResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateCluster'</a>,
--   <a>updateClusterResponse_cluster</a> - Details about the cluster.
--   
--   <a>$sel:httpStatus:UpdateClusterResponse'</a>,
--   <a>updateClusterResponse_httpStatus</a> - The response's http status
--   code.
newUpdateClusterResponse :: Int -> UpdateClusterResponse

-- | Details about the cluster.
updateClusterResponse_cluster :: Lens' UpdateClusterResponse (Maybe Cluster)

-- | The response's http status code.
updateClusterResponse_httpStatus :: Lens' UpdateClusterResponse Int
instance GHC.Generics.Generic Amazonka.ECS.UpdateCluster.UpdateCluster
instance GHC.Show.Show Amazonka.ECS.UpdateCluster.UpdateCluster
instance GHC.Read.Read Amazonka.ECS.UpdateCluster.UpdateCluster
instance GHC.Classes.Eq Amazonka.ECS.UpdateCluster.UpdateCluster
instance GHC.Generics.Generic Amazonka.ECS.UpdateCluster.UpdateClusterResponse
instance GHC.Show.Show Amazonka.ECS.UpdateCluster.UpdateClusterResponse
instance GHC.Read.Read Amazonka.ECS.UpdateCluster.UpdateClusterResponse
instance GHC.Classes.Eq Amazonka.ECS.UpdateCluster.UpdateClusterResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.UpdateCluster.UpdateCluster
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateCluster.UpdateClusterResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.UpdateCluster.UpdateCluster
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateCluster.UpdateCluster
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.UpdateCluster.UpdateCluster
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.UpdateCluster.UpdateCluster
instance Amazonka.Data.Path.ToPath Amazonka.ECS.UpdateCluster.UpdateCluster
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.UpdateCluster.UpdateCluster


-- | Modifies the settings to use for a cluster.
module Amazonka.ECS.UpdateClusterSettings

-- | <i>See:</i> <a>newUpdateClusterSettings</a> smart constructor.
data UpdateClusterSettings
UpdateClusterSettings' :: Text -> [ClusterSetting] -> UpdateClusterSettings

-- | The name of the cluster to modify the settings for.
[$sel:cluster:UpdateClusterSettings'] :: UpdateClusterSettings -> Text

-- | The setting to use by default for a cluster. This parameter is used to
--   enable CloudWatch Container Insights for a cluster. If this value is
--   specified, it will override the <tt>containerInsights</tt> value set
--   with PutAccountSetting or PutAccountSettingDefault.
[$sel:settings:UpdateClusterSettings'] :: UpdateClusterSettings -> [ClusterSetting]

-- | Create a value of <a>UpdateClusterSettings</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateClusterSettings'</a>,
--   <a>updateClusterSettings_cluster</a> - The name of the cluster to
--   modify the settings for.
--   
--   <a>$sel:settings:UpdateClusterSettings'</a>,
--   <a>updateClusterSettings_settings</a> - The setting to use by default
--   for a cluster. This parameter is used to enable CloudWatch Container
--   Insights for a cluster. If this value is specified, it will override
--   the <tt>containerInsights</tt> value set with PutAccountSetting or
--   PutAccountSettingDefault.
newUpdateClusterSettings :: Text -> UpdateClusterSettings

-- | The name of the cluster to modify the settings for.
updateClusterSettings_cluster :: Lens' UpdateClusterSettings Text

-- | The setting to use by default for a cluster. This parameter is used to
--   enable CloudWatch Container Insights for a cluster. If this value is
--   specified, it will override the <tt>containerInsights</tt> value set
--   with PutAccountSetting or PutAccountSettingDefault.
updateClusterSettings_settings :: Lens' UpdateClusterSettings [ClusterSetting]

-- | <i>See:</i> <a>newUpdateClusterSettingsResponse</a> smart constructor.
data UpdateClusterSettingsResponse
UpdateClusterSettingsResponse' :: Maybe Cluster -> Int -> UpdateClusterSettingsResponse

-- | Details about the cluster
[$sel:cluster:UpdateClusterSettingsResponse'] :: UpdateClusterSettingsResponse -> Maybe Cluster

-- | The response's http status code.
[$sel:httpStatus:UpdateClusterSettingsResponse'] :: UpdateClusterSettingsResponse -> Int

-- | Create a value of <a>UpdateClusterSettingsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateClusterSettings'</a>,
--   <a>updateClusterSettingsResponse_cluster</a> - Details about the
--   cluster
--   
--   <a>$sel:httpStatus:UpdateClusterSettingsResponse'</a>,
--   <a>updateClusterSettingsResponse_httpStatus</a> - The response's http
--   status code.
newUpdateClusterSettingsResponse :: Int -> UpdateClusterSettingsResponse

-- | Details about the cluster
updateClusterSettingsResponse_cluster :: Lens' UpdateClusterSettingsResponse (Maybe Cluster)

-- | The response's http status code.
updateClusterSettingsResponse_httpStatus :: Lens' UpdateClusterSettingsResponse Int
instance GHC.Generics.Generic Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettings
instance GHC.Show.Show Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettings
instance GHC.Read.Read Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettings
instance GHC.Classes.Eq Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettings
instance GHC.Generics.Generic Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettingsResponse
instance GHC.Show.Show Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettingsResponse
instance GHC.Read.Read Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettingsResponse
instance GHC.Classes.Eq Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettingsResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettings
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettingsResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettings
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettings
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettings
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettings
instance Amazonka.Data.Path.ToPath Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettings
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.UpdateClusterSettings.UpdateClusterSettings


-- | Updates the Amazon ECS container agent on a specified container
--   instance. Updating the Amazon ECS container agent does not interrupt
--   running tasks or services on the container instance. The process for
--   updating the agent differs depending on whether your container
--   instance was launched with the Amazon ECS-optimized AMI or another
--   operating system.
--   
--   The <tt>UpdateContainerAgent</tt> API isn't supported for container
--   instances using the Amazon ECS-optimized Amazon Linux 2 (arm64) AMI.
--   To update the container agent, you can update the <tt>ecs-init</tt>
--   package which will update the agent. For more information, see
--   <a>Updating the Amazon ECS container agent</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>UpdateContainerAgent</tt> API requires an Amazon ECS-optimized
--   AMI or Amazon Linux AMI with the <tt>ecs-init</tt> service installed
--   and running. For help updating the Amazon ECS container agent on other
--   operating systems, see <a>Manually updating the Amazon ECS container
--   agent</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
module Amazonka.ECS.UpdateContainerAgent

-- | <i>See:</i> <a>newUpdateContainerAgent</a> smart constructor.
data UpdateContainerAgent
UpdateContainerAgent' :: Maybe Text -> Text -> UpdateContainerAgent

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   your container instance is running on. If you do not specify a
--   cluster, the default cluster is assumed.
[$sel:cluster:UpdateContainerAgent'] :: UpdateContainerAgent -> Maybe Text

-- | The container instance ID or full ARN entries for the container
--   instance on which you would like to update the Amazon ECS container
--   agent.
[$sel:containerInstance:UpdateContainerAgent'] :: UpdateContainerAgent -> Text

-- | Create a value of <a>UpdateContainerAgent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateContainerAgent'</a>,
--   <a>updateContainerAgent_cluster</a> - The short name or full Amazon
--   Resource Name (ARN) of the cluster that your container instance is
--   running on. If you do not specify a cluster, the default cluster is
--   assumed.
--   
--   <a>$sel:containerInstance:UpdateContainerAgent'</a>,
--   <a>updateContainerAgent_containerInstance</a> - The container instance
--   ID or full ARN entries for the container instance on which you would
--   like to update the Amazon ECS container agent.
newUpdateContainerAgent :: Text -> UpdateContainerAgent

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   your container instance is running on. If you do not specify a
--   cluster, the default cluster is assumed.
updateContainerAgent_cluster :: Lens' UpdateContainerAgent (Maybe Text)

-- | The container instance ID or full ARN entries for the container
--   instance on which you would like to update the Amazon ECS container
--   agent.
updateContainerAgent_containerInstance :: Lens' UpdateContainerAgent Text

-- | <i>See:</i> <a>newUpdateContainerAgentResponse</a> smart constructor.
data UpdateContainerAgentResponse
UpdateContainerAgentResponse' :: Maybe ContainerInstance -> Int -> UpdateContainerAgentResponse

-- | The container instance for which the container agent was updated.
[$sel:containerInstance:UpdateContainerAgentResponse'] :: UpdateContainerAgentResponse -> Maybe ContainerInstance

-- | The response's http status code.
[$sel:httpStatus:UpdateContainerAgentResponse'] :: UpdateContainerAgentResponse -> Int

-- | Create a value of <a>UpdateContainerAgentResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerInstance:UpdateContainerAgent'</a>,
--   <a>updateContainerAgentResponse_containerInstance</a> - The container
--   instance for which the container agent was updated.
--   
--   <a>$sel:httpStatus:UpdateContainerAgentResponse'</a>,
--   <a>updateContainerAgentResponse_httpStatus</a> - The response's http
--   status code.
newUpdateContainerAgentResponse :: Int -> UpdateContainerAgentResponse

-- | The container instance for which the container agent was updated.
updateContainerAgentResponse_containerInstance :: Lens' UpdateContainerAgentResponse (Maybe ContainerInstance)

-- | The response's http status code.
updateContainerAgentResponse_httpStatus :: Lens' UpdateContainerAgentResponse Int
instance GHC.Generics.Generic Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgent
instance GHC.Show.Show Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgent
instance GHC.Read.Read Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgent
instance GHC.Classes.Eq Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgent
instance GHC.Generics.Generic Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgentResponse
instance GHC.Show.Show Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgentResponse
instance GHC.Read.Read Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgentResponse
instance GHC.Classes.Eq Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgentResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgent
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgentResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgent
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgent
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgent
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgent
instance Amazonka.Data.Path.ToPath Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgent
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.UpdateContainerAgent.UpdateContainerAgent


-- | Modifies the status of an Amazon ECS container instance.
--   
--   Once a container instance has reached an <tt>ACTIVE</tt> state, you
--   can change the status of a container instance to <tt>DRAINING</tt> to
--   manually remove an instance from a cluster, for example to perform
--   system updates, update the Docker daemon, or scale down the cluster
--   size.
--   
--   A container instance cannot be changed to <tt>DRAINING</tt> until it
--   has reached an <tt>ACTIVE</tt> status. If the instance is in any other
--   status, an error will be received.
--   
--   When you set a container instance to <tt>DRAINING</tt>, Amazon ECS
--   prevents new tasks from being scheduled for placement on the container
--   instance and replacement service tasks are started on other container
--   instances in the cluster if the resources are available. Service tasks
--   on the container instance that are in the <tt>PENDING</tt> state are
--   stopped immediately.
--   
--   Service tasks on the container instance that are in the
--   <tt>RUNNING</tt> state are stopped and replaced according to the
--   service's deployment configuration parameters,
--   <tt>minimumHealthyPercent</tt> and <tt>maximumPercent</tt>. You can
--   change the deployment configuration of your service using
--   UpdateService.
--   
--   <ul>
--   <li>If <tt>minimumHealthyPercent</tt> is below 100%, the scheduler can
--   ignore <tt>desiredCount</tt> temporarily during task replacement. For
--   example, <tt>desiredCount</tt> is four tasks, a minimum of 50% allows
--   the scheduler to stop two existing tasks before starting two new
--   tasks. If the minimum is 100%, the service scheduler can't remove
--   existing tasks until the replacement tasks are considered healthy.
--   Tasks for services that do not use a load balancer are considered
--   healthy if they are in the <tt>RUNNING</tt> state. Tasks for services
--   that use a load balancer are considered healthy if they are in the
--   <tt>RUNNING</tt> state and the container instance they are hosted on
--   is reported as healthy by the load balancer.</li>
--   <li>The <tt>maximumPercent</tt> parameter represents an upper limit on
--   the number of running tasks during task replacement, which enables you
--   to define the replacement batch size. For example, if
--   <tt>desiredCount</tt> is four tasks, a maximum of 200% starts four new
--   tasks before stopping the four tasks to be drained, provided that the
--   cluster resources required to do this are available. If the maximum is
--   100%, then replacement tasks can't start until the draining tasks have
--   stopped.</li>
--   </ul>
--   
--   Any <tt>PENDING</tt> or <tt>RUNNING</tt> tasks that do not belong to a
--   service are not affected. You must wait for them to finish or stop
--   them manually.
--   
--   A container instance has completed draining when it has no more
--   <tt>RUNNING</tt> tasks. You can verify this using ListTasks.
--   
--   When a container instance has been drained, you can set a container
--   instance to <tt>ACTIVE</tt> status and once it has reached that status
--   the Amazon ECS scheduler can begin scheduling tasks on the instance
--   again.
module Amazonka.ECS.UpdateContainerInstancesState

-- | <i>See:</i> <a>newUpdateContainerInstancesState</a> smart constructor.
data UpdateContainerInstancesState
UpdateContainerInstancesState' :: Maybe Text -> [Text] -> ContainerInstanceStatus -> UpdateContainerInstancesState

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the container instance to update. If you do not specify a
--   cluster, the default cluster is assumed.
[$sel:cluster:UpdateContainerInstancesState'] :: UpdateContainerInstancesState -> Maybe Text

-- | A list of container instance IDs or full ARN entries.
[$sel:containerInstances:UpdateContainerInstancesState'] :: UpdateContainerInstancesState -> [Text]

-- | The container instance state with which to update the container
--   instance. The only valid values for this action are <tt>ACTIVE</tt>
--   and <tt>DRAINING</tt>. A container instance can only be updated to
--   <tt>DRAINING</tt> status once it has reached an <tt>ACTIVE</tt> state.
--   If a container instance is in <tt>REGISTERING</tt>,
--   <tt>DEREGISTERING</tt>, or <tt>REGISTRATION_FAILED</tt> state you can
--   describe the container instance but will be unable to update the
--   container instance state.
[$sel:status:UpdateContainerInstancesState'] :: UpdateContainerInstancesState -> ContainerInstanceStatus

-- | Create a value of <a>UpdateContainerInstancesState</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateContainerInstancesState'</a>,
--   <a>updateContainerInstancesState_cluster</a> - The short name or full
--   Amazon Resource Name (ARN) of the cluster that hosts the container
--   instance to update. If you do not specify a cluster, the default
--   cluster is assumed.
--   
--   <a>$sel:containerInstances:UpdateContainerInstancesState'</a>,
--   <a>updateContainerInstancesState_containerInstances</a> - A list of
--   container instance IDs or full ARN entries.
--   
--   <a>$sel:status:UpdateContainerInstancesState'</a>,
--   <a>updateContainerInstancesState_status</a> - The container instance
--   state with which to update the container instance. The only valid
--   values for this action are <tt>ACTIVE</tt> and <tt>DRAINING</tt>. A
--   container instance can only be updated to <tt>DRAINING</tt> status
--   once it has reached an <tt>ACTIVE</tt> state. If a container instance
--   is in <tt>REGISTERING</tt>, <tt>DEREGISTERING</tt>, or
--   <tt>REGISTRATION_FAILED</tt> state you can describe the container
--   instance but will be unable to update the container instance state.
newUpdateContainerInstancesState :: ContainerInstanceStatus -> UpdateContainerInstancesState

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the container instance to update. If you do not specify a
--   cluster, the default cluster is assumed.
updateContainerInstancesState_cluster :: Lens' UpdateContainerInstancesState (Maybe Text)

-- | A list of container instance IDs or full ARN entries.
updateContainerInstancesState_containerInstances :: Lens' UpdateContainerInstancesState [Text]

-- | The container instance state with which to update the container
--   instance. The only valid values for this action are <tt>ACTIVE</tt>
--   and <tt>DRAINING</tt>. A container instance can only be updated to
--   <tt>DRAINING</tt> status once it has reached an <tt>ACTIVE</tt> state.
--   If a container instance is in <tt>REGISTERING</tt>,
--   <tt>DEREGISTERING</tt>, or <tt>REGISTRATION_FAILED</tt> state you can
--   describe the container instance but will be unable to update the
--   container instance state.
updateContainerInstancesState_status :: Lens' UpdateContainerInstancesState ContainerInstanceStatus

-- | <i>See:</i> <a>newUpdateContainerInstancesStateResponse</a> smart
--   constructor.
data UpdateContainerInstancesStateResponse
UpdateContainerInstancesStateResponse' :: Maybe [Failure] -> Maybe [ContainerInstance] -> Int -> UpdateContainerInstancesStateResponse

-- | Any failures associated with the call.
[$sel:failures:UpdateContainerInstancesStateResponse'] :: UpdateContainerInstancesStateResponse -> Maybe [Failure]

-- | The list of container instances.
[$sel:containerInstances:UpdateContainerInstancesStateResponse'] :: UpdateContainerInstancesStateResponse -> Maybe [ContainerInstance]

-- | The response's http status code.
[$sel:httpStatus:UpdateContainerInstancesStateResponse'] :: UpdateContainerInstancesStateResponse -> Int

-- | Create a value of <a>UpdateContainerInstancesStateResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:UpdateContainerInstancesStateResponse'</a>,
--   <a>updateContainerInstancesStateResponse_failures</a> - Any failures
--   associated with the call.
--   
--   <a>$sel:containerInstances:UpdateContainerInstancesState'</a>,
--   <a>updateContainerInstancesStateResponse_containerInstances</a> - The
--   list of container instances.
--   
--   <a>$sel:httpStatus:UpdateContainerInstancesStateResponse'</a>,
--   <a>updateContainerInstancesStateResponse_httpStatus</a> - The
--   response's http status code.
newUpdateContainerInstancesStateResponse :: Int -> UpdateContainerInstancesStateResponse

-- | Any failures associated with the call.
updateContainerInstancesStateResponse_failures :: Lens' UpdateContainerInstancesStateResponse (Maybe [Failure])

-- | The list of container instances.
updateContainerInstancesStateResponse_containerInstances :: Lens' UpdateContainerInstancesStateResponse (Maybe [ContainerInstance])

-- | The response's http status code.
updateContainerInstancesStateResponse_httpStatus :: Lens' UpdateContainerInstancesStateResponse Int
instance GHC.Generics.Generic Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesState
instance GHC.Show.Show Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesState
instance GHC.Read.Read Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesState
instance GHC.Classes.Eq Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesState
instance GHC.Generics.Generic Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesStateResponse
instance GHC.Show.Show Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesStateResponse
instance GHC.Read.Read Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesStateResponse
instance GHC.Classes.Eq Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesStateResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesState
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesStateResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesState
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesState
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesState
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesState
instance Amazonka.Data.Path.ToPath Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesState
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.UpdateContainerInstancesState.UpdateContainerInstancesState


-- | Updating the task placement strategies and constraints on an Amazon
--   ECS service remains in preview and is a Beta Service as defined by and
--   subject to the Beta Service Participation Service Terms located at
--   <a>https://aws.amazon.com/service-terms</a> ("Beta Terms"). These Beta
--   Terms apply to your participation in this preview.
--   
--   Modifies the parameters of a service.
--   
--   For services using the rolling update (<tt>ECS</tt>) deployment
--   controller, the desired count, deployment configuration, network
--   configuration, task placement constraints and strategies, or task
--   definition used can be updated.
--   
--   For services using the blue/green (<tt>CODE_DEPLOY</tt>) deployment
--   controller, only the desired count, deployment configuration, task
--   placement constraints and strategies, and health check grace period
--   can be updated using this API. If the network configuration, platform
--   version, or task definition need to be updated, a new CodeDeploy
--   deployment should be created. For more information, see
--   <a>CreateDeployment</a> in the <i>CodeDeploy API Reference</i>.
--   
--   For services using an external deployment controller, you can update
--   only the desired count, task placement constraints and strategies, and
--   health check grace period using this API. If the launch type, load
--   balancer, network configuration, platform version, or task definition
--   need to be updated, you should create a new task set. For more
--   information, see CreateTaskSet.
--   
--   You can add to or subtract from the number of instantiations of a task
--   definition in a service by specifying the cluster that the service is
--   running in and a new <tt>desiredCount</tt> parameter.
--   
--   If you have updated the Docker image of your application, you can
--   create a new task definition with that image and deploy it to your
--   service. The service scheduler uses the minimum healthy percent and
--   maximum percent parameters (in the service's deployment configuration)
--   to determine the deployment strategy.
--   
--   If your updated Docker image uses the same tag as what is in the
--   existing task definition for your service (for example,
--   <tt>my_image:latest</tt>), you do not need to create a new revision of
--   your task definition. You can update the service using the
--   <tt>forceNewDeployment</tt> option. The new tasks launched by the
--   deployment pull the current image/tag combination from your repository
--   when they start.
--   
--   You can also update the deployment configuration of a service. When a
--   deployment is triggered by updating the task definition of a service,
--   the service scheduler uses the deployment configuration parameters,
--   <tt>minimumHealthyPercent</tt> and <tt>maximumPercent</tt>, to
--   determine the deployment strategy.
--   
--   <ul>
--   <li>If <tt>minimumHealthyPercent</tt> is below 100%, the scheduler can
--   ignore <tt>desiredCount</tt> temporarily during a deployment. For
--   example, if <tt>desiredCount</tt> is four tasks, a minimum of 50%
--   allows the scheduler to stop two existing tasks before starting two
--   new tasks. Tasks for services that do not use a load balancer are
--   considered healthy if they are in the <tt>RUNNING</tt> state. Tasks
--   for services that use a load balancer are considered healthy if they
--   are in the <tt>RUNNING</tt> state and the container instance they are
--   hosted on is reported as healthy by the load balancer.</li>
--   <li>The <tt>maximumPercent</tt> parameter represents an upper limit on
--   the number of running tasks during a deployment, which enables you to
--   define the deployment batch size. For example, if
--   <tt>desiredCount</tt> is four tasks, a maximum of 200% starts four new
--   tasks before stopping the four older tasks (provided that the cluster
--   resources required to do this are available).</li>
--   </ul>
--   
--   When UpdateService stops a task during a deployment, the equivalent of
--   <tt>docker stop</tt> is issued to the containers running in the task.
--   This results in a <tt>SIGTERM</tt> and a 30-second timeout, after
--   which <tt>SIGKILL</tt> is sent and the containers are forcibly
--   stopped. If the container handles the <tt>SIGTERM</tt> gracefully and
--   exits within 30 seconds from receiving it, no <tt>SIGKILL</tt> is
--   sent.
--   
--   When the service scheduler launches new tasks, it determines task
--   placement in your cluster with the following logic:
--   
--   <ul>
--   <li>Determine which of the container instances in your cluster can
--   support your service's task definition (for example, they have the
--   required CPU, memory, ports, and container instance attributes).</li>
--   <li>By default, the service scheduler attempts to balance tasks across
--   Availability Zones in this manner (although you can choose a different
--   placement strategy):<ul><li>Sort the valid container instances by the
--   fewest number of running tasks for this service in the same
--   Availability Zone as the instance. For example, if zone A has one
--   running service task and zones B and C each have zero, valid container
--   instances in either zone B or C are considered optimal for
--   placement.</li><li>Place the new service task on a valid container
--   instance in an optimal Availability Zone (based on the previous
--   steps), favoring container instances with the fewest number of running
--   tasks for this service.</li></ul></li>
--   </ul>
--   
--   When the service scheduler stops running tasks, it attempts to
--   maintain balance across the Availability Zones in your cluster using
--   the following logic:
--   
--   <ul>
--   <li>Sort the container instances by the largest number of running
--   tasks for this service in the same Availability Zone as the instance.
--   For example, if zone A has one running service task and zones B and C
--   each have two, container instances in either zone B or C are
--   considered optimal for termination.</li>
--   <li>Stop the task on a container instance in an optimal Availability
--   Zone (based on the previous steps), favoring container instances with
--   the largest number of running tasks for this service.</li>
--   </ul>
module Amazonka.ECS.UpdateService

-- | <i>See:</i> <a>newUpdateService</a> smart constructor.
data UpdateService
UpdateService' :: Maybe Text -> Maybe Text -> Maybe Int -> Maybe [PlacementConstraint] -> Maybe [PlacementStrategy] -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe NetworkConfiguration -> Maybe [CapacityProviderStrategyItem] -> Maybe Bool -> Maybe DeploymentConfiguration -> Text -> UpdateService

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   your service is running on. If you do not specify a cluster, the
--   default cluster is assumed.
[$sel:cluster:UpdateService'] :: UpdateService -> Maybe Text

-- | The platform version on which your tasks in the service are running. A
--   platform version is only specified for tasks using the Fargate launch
--   type. If a platform version is not specified, the <tt>LATEST</tt>
--   platform version is used by default. For more information, see
--   <a>Fargate Platform Versions</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
[$sel:platformVersion:UpdateService'] :: UpdateService -> Maybe Text

-- | The number of instantiations of the task to place and keep running in
--   your service.
[$sel:desiredCount:UpdateService'] :: UpdateService -> Maybe Int

-- | An array of task placement constraint objects to update the service to
--   use. If no value is specified, the existing placement constraints for
--   the service will remain unchanged. If this value is specified, it will
--   override any existing placement constraints defined for the service.
--   To remove all existing placement constraints, specify an empty array.
--   
--   You can specify a maximum of 10 constraints per task (this limit
--   includes constraints in the task definition and those specified at
--   runtime).
[$sel:placementConstraints:UpdateService'] :: UpdateService -> Maybe [PlacementConstraint]

-- | The task placement strategy objects to update the service to use. If
--   no value is specified, the existing placement strategy for the service
--   will remain unchanged. If this value is specified, it will override
--   the existing placement strategy defined for the service. To remove an
--   existing placement strategy, specify an empty object.
--   
--   You can specify a maximum of five strategy rules per service.
[$sel:placementStrategy:UpdateService'] :: UpdateService -> Maybe [PlacementStrategy]

-- | Whether to force a new deployment of the service. Deployments are not
--   forced by default. You can use this option to trigger a new deployment
--   with no service definition changes. For example, you can update a
--   service's tasks to use a newer Docker image with the same image/tag
--   combination (<tt>my_image:latest</tt>) or to roll Fargate tasks onto a
--   newer platform version.
[$sel:forceNewDeployment:UpdateService'] :: UpdateService -> Maybe Bool

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to run in your service. If a
--   <tt>revision</tt> is not specified, the latest <tt>ACTIVE</tt>
--   revision is used. If you modify the task definition with
--   <tt>UpdateService</tt>, Amazon ECS spawns a task with the new version
--   of the task definition and then stops an old task after the new
--   version is running.
[$sel:taskDefinition:UpdateService'] :: UpdateService -> Maybe Text

-- | The period of time, in seconds, that the Amazon ECS service scheduler
--   should ignore unhealthy Elastic Load Balancing target health checks
--   after a task has first started. This is only valid if your service is
--   configured to use a load balancer. If your service's tasks take a
--   while to start and respond to Elastic Load Balancing health checks,
--   you can specify a health check grace period of up to 2,147,483,647
--   seconds. During that time, the Amazon ECS service scheduler ignores
--   the Elastic Load Balancing health check status. This grace period can
--   prevent the ECS service scheduler from marking tasks as unhealthy and
--   stopping them before they have time to come up.
[$sel:healthCheckGracePeriodSeconds:UpdateService'] :: UpdateService -> Maybe Int

-- | An object representing the network configuration for the service.
[$sel:networkConfiguration:UpdateService'] :: UpdateService -> Maybe NetworkConfiguration

-- | The capacity provider strategy to update the service to use.
--   
--   If the service is using the default capacity provider strategy for the
--   cluster, the service can be updated to use one or more capacity
--   providers as opposed to the default capacity provider strategy.
--   However, when a service is using a capacity provider strategy that is
--   not the default capacity provider strategy, the service cannot be
--   updated to use the cluster's default capacity provider strategy.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
[$sel:capacityProviderStrategy:UpdateService'] :: UpdateService -> Maybe [CapacityProviderStrategyItem]

-- | If <tt>true</tt>, this enables execute command functionality on all
--   task containers.
--   
--   If you do not want to override the value that was set when the service
--   was created, you can set this to <tt>null</tt> when performing this
--   action.
[$sel:enableExecuteCommand:UpdateService'] :: UpdateService -> Maybe Bool

-- | Optional deployment parameters that control how many tasks run during
--   the deployment and the ordering of stopping and starting tasks.
[$sel:deploymentConfiguration:UpdateService'] :: UpdateService -> Maybe DeploymentConfiguration

-- | The name of the service to update.
[$sel:service:UpdateService'] :: UpdateService -> Text

-- | Create a value of <a>UpdateService</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateService'</a>, <a>updateService_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that your
--   service is running on. If you do not specify a cluster, the default
--   cluster is assumed.
--   
--   <a>$sel:platformVersion:UpdateService'</a>,
--   <a>updateService_platformVersion</a> - The platform version on which
--   your tasks in the service are running. A platform version is only
--   specified for tasks using the Fargate launch type. If a platform
--   version is not specified, the <tt>LATEST</tt> platform version is used
--   by default. For more information, see <a>Fargate Platform Versions</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:desiredCount:UpdateService'</a>,
--   <a>updateService_desiredCount</a> - The number of instantiations of
--   the task to place and keep running in your service.
--   
--   <a>$sel:placementConstraints:UpdateService'</a>,
--   <a>updateService_placementConstraints</a> - An array of task placement
--   constraint objects to update the service to use. If no value is
--   specified, the existing placement constraints for the service will
--   remain unchanged. If this value is specified, it will override any
--   existing placement constraints defined for the service. To remove all
--   existing placement constraints, specify an empty array.
--   
--   You can specify a maximum of 10 constraints per task (this limit
--   includes constraints in the task definition and those specified at
--   runtime).
--   
--   <a>$sel:placementStrategy:UpdateService'</a>,
--   <a>updateService_placementStrategy</a> - The task placement strategy
--   objects to update the service to use. If no value is specified, the
--   existing placement strategy for the service will remain unchanged. If
--   this value is specified, it will override the existing placement
--   strategy defined for the service. To remove an existing placement
--   strategy, specify an empty object.
--   
--   You can specify a maximum of five strategy rules per service.
--   
--   <a>$sel:forceNewDeployment:UpdateService'</a>,
--   <a>updateService_forceNewDeployment</a> - Whether to force a new
--   deployment of the service. Deployments are not forced by default. You
--   can use this option to trigger a new deployment with no service
--   definition changes. For example, you can update a service's tasks to
--   use a newer Docker image with the same image/tag combination
--   (<tt>my_image:latest</tt>) or to roll Fargate tasks onto a newer
--   platform version.
--   
--   <a>$sel:taskDefinition:UpdateService'</a>,
--   <a>updateService_taskDefinition</a> - The <tt>family</tt> and
--   <tt>revision</tt> (<tt>family:revision</tt>) or full ARN of the task
--   definition to run in your service. If a <tt>revision</tt> is not
--   specified, the latest <tt>ACTIVE</tt> revision is used. If you modify
--   the task definition with <tt>UpdateService</tt>, Amazon ECS spawns a
--   task with the new version of the task definition and then stops an old
--   task after the new version is running.
--   
--   <a>$sel:healthCheckGracePeriodSeconds:UpdateService'</a>,
--   <a>updateService_healthCheckGracePeriodSeconds</a> - The period of
--   time, in seconds, that the Amazon ECS service scheduler should ignore
--   unhealthy Elastic Load Balancing target health checks after a task has
--   first started. This is only valid if your service is configured to use
--   a load balancer. If your service's tasks take a while to start and
--   respond to Elastic Load Balancing health checks, you can specify a
--   health check grace period of up to 2,147,483,647 seconds. During that
--   time, the Amazon ECS service scheduler ignores the Elastic Load
--   Balancing health check status. This grace period can prevent the ECS
--   service scheduler from marking tasks as unhealthy and stopping them
--   before they have time to come up.
--   
--   <a>$sel:networkConfiguration:UpdateService'</a>,
--   <a>updateService_networkConfiguration</a> - An object representing the
--   network configuration for the service.
--   
--   <a>$sel:capacityProviderStrategy:UpdateService'</a>,
--   <a>updateService_capacityProviderStrategy</a> - The capacity provider
--   strategy to update the service to use.
--   
--   If the service is using the default capacity provider strategy for the
--   cluster, the service can be updated to use one or more capacity
--   providers as opposed to the default capacity provider strategy.
--   However, when a service is using a capacity provider strategy that is
--   not the default capacity provider strategy, the service cannot be
--   updated to use the cluster's default capacity provider strategy.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
--   
--   <a>$sel:enableExecuteCommand:UpdateService'</a>,
--   <a>updateService_enableExecuteCommand</a> - If <tt>true</tt>, this
--   enables execute command functionality on all task containers.
--   
--   If you do not want to override the value that was set when the service
--   was created, you can set this to <tt>null</tt> when performing this
--   action.
--   
--   <a>$sel:deploymentConfiguration:UpdateService'</a>,
--   <a>updateService_deploymentConfiguration</a> - Optional deployment
--   parameters that control how many tasks run during the deployment and
--   the ordering of stopping and starting tasks.
--   
--   <a>$sel:service:UpdateService'</a>, <a>updateService_service</a> - The
--   name of the service to update.
newUpdateService :: Text -> UpdateService

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   your service is running on. If you do not specify a cluster, the
--   default cluster is assumed.
updateService_cluster :: Lens' UpdateService (Maybe Text)

-- | The platform version on which your tasks in the service are running. A
--   platform version is only specified for tasks using the Fargate launch
--   type. If a platform version is not specified, the <tt>LATEST</tt>
--   platform version is used by default. For more information, see
--   <a>Fargate Platform Versions</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
updateService_platformVersion :: Lens' UpdateService (Maybe Text)

-- | The number of instantiations of the task to place and keep running in
--   your service.
updateService_desiredCount :: Lens' UpdateService (Maybe Int)

-- | An array of task placement constraint objects to update the service to
--   use. If no value is specified, the existing placement constraints for
--   the service will remain unchanged. If this value is specified, it will
--   override any existing placement constraints defined for the service.
--   To remove all existing placement constraints, specify an empty array.
--   
--   You can specify a maximum of 10 constraints per task (this limit
--   includes constraints in the task definition and those specified at
--   runtime).
updateService_placementConstraints :: Lens' UpdateService (Maybe [PlacementConstraint])

-- | The task placement strategy objects to update the service to use. If
--   no value is specified, the existing placement strategy for the service
--   will remain unchanged. If this value is specified, it will override
--   the existing placement strategy defined for the service. To remove an
--   existing placement strategy, specify an empty object.
--   
--   You can specify a maximum of five strategy rules per service.
updateService_placementStrategy :: Lens' UpdateService (Maybe [PlacementStrategy])

-- | Whether to force a new deployment of the service. Deployments are not
--   forced by default. You can use this option to trigger a new deployment
--   with no service definition changes. For example, you can update a
--   service's tasks to use a newer Docker image with the same image/tag
--   combination (<tt>my_image:latest</tt>) or to roll Fargate tasks onto a
--   newer platform version.
updateService_forceNewDeployment :: Lens' UpdateService (Maybe Bool)

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to run in your service. If a
--   <tt>revision</tt> is not specified, the latest <tt>ACTIVE</tt>
--   revision is used. If you modify the task definition with
--   <tt>UpdateService</tt>, Amazon ECS spawns a task with the new version
--   of the task definition and then stops an old task after the new
--   version is running.
updateService_taskDefinition :: Lens' UpdateService (Maybe Text)

-- | The period of time, in seconds, that the Amazon ECS service scheduler
--   should ignore unhealthy Elastic Load Balancing target health checks
--   after a task has first started. This is only valid if your service is
--   configured to use a load balancer. If your service's tasks take a
--   while to start and respond to Elastic Load Balancing health checks,
--   you can specify a health check grace period of up to 2,147,483,647
--   seconds. During that time, the Amazon ECS service scheduler ignores
--   the Elastic Load Balancing health check status. This grace period can
--   prevent the ECS service scheduler from marking tasks as unhealthy and
--   stopping them before they have time to come up.
updateService_healthCheckGracePeriodSeconds :: Lens' UpdateService (Maybe Int)

-- | An object representing the network configuration for the service.
updateService_networkConfiguration :: Lens' UpdateService (Maybe NetworkConfiguration)

-- | The capacity provider strategy to update the service to use.
--   
--   If the service is using the default capacity provider strategy for the
--   cluster, the service can be updated to use one or more capacity
--   providers as opposed to the default capacity provider strategy.
--   However, when a service is using a capacity provider strategy that is
--   not the default capacity provider strategy, the service cannot be
--   updated to use the cluster's default capacity provider strategy.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
updateService_capacityProviderStrategy :: Lens' UpdateService (Maybe [CapacityProviderStrategyItem])

-- | If <tt>true</tt>, this enables execute command functionality on all
--   task containers.
--   
--   If you do not want to override the value that was set when the service
--   was created, you can set this to <tt>null</tt> when performing this
--   action.
updateService_enableExecuteCommand :: Lens' UpdateService (Maybe Bool)

-- | Optional deployment parameters that control how many tasks run during
--   the deployment and the ordering of stopping and starting tasks.
updateService_deploymentConfiguration :: Lens' UpdateService (Maybe DeploymentConfiguration)

-- | The name of the service to update.
updateService_service :: Lens' UpdateService Text

-- | <i>See:</i> <a>newUpdateServiceResponse</a> smart constructor.
data UpdateServiceResponse
UpdateServiceResponse' :: Maybe ContainerService -> Int -> UpdateServiceResponse

-- | The full description of your service following the update call.
[$sel:service:UpdateServiceResponse'] :: UpdateServiceResponse -> Maybe ContainerService

-- | The response's http status code.
[$sel:httpStatus:UpdateServiceResponse'] :: UpdateServiceResponse -> Int

-- | Create a value of <a>UpdateServiceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:service:UpdateService'</a>,
--   <a>updateServiceResponse_service</a> - The full description of your
--   service following the update call.
--   
--   <a>$sel:httpStatus:UpdateServiceResponse'</a>,
--   <a>updateServiceResponse_httpStatus</a> - The response's http status
--   code.
newUpdateServiceResponse :: Int -> UpdateServiceResponse

-- | The full description of your service following the update call.
updateServiceResponse_service :: Lens' UpdateServiceResponse (Maybe ContainerService)

-- | The response's http status code.
updateServiceResponse_httpStatus :: Lens' UpdateServiceResponse Int
instance GHC.Generics.Generic Amazonka.ECS.UpdateService.UpdateService
instance GHC.Show.Show Amazonka.ECS.UpdateService.UpdateService
instance GHC.Read.Read Amazonka.ECS.UpdateService.UpdateService
instance GHC.Classes.Eq Amazonka.ECS.UpdateService.UpdateService
instance GHC.Generics.Generic Amazonka.ECS.UpdateService.UpdateServiceResponse
instance GHC.Show.Show Amazonka.ECS.UpdateService.UpdateServiceResponse
instance GHC.Read.Read Amazonka.ECS.UpdateService.UpdateServiceResponse
instance GHC.Classes.Eq Amazonka.ECS.UpdateService.UpdateServiceResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.UpdateService.UpdateService
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateService.UpdateServiceResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.UpdateService.UpdateService
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateService.UpdateService
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.UpdateService.UpdateService
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.UpdateService.UpdateService
instance Amazonka.Data.Path.ToPath Amazonka.ECS.UpdateService.UpdateService
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.UpdateService.UpdateService


-- | Modifies which task set in a service is the primary task set. Any
--   parameters that are updated on the primary task set in a service will
--   transition to the service. This is used when a service uses the
--   <tt>EXTERNAL</tt> deployment controller type. For more information,
--   see <a>Amazon ECS Deployment Types</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
module Amazonka.ECS.UpdateServicePrimaryTaskSet

-- | <i>See:</i> <a>newUpdateServicePrimaryTaskSet</a> smart constructor.
data UpdateServicePrimaryTaskSet
UpdateServicePrimaryTaskSet' :: Text -> Text -> Text -> UpdateServicePrimaryTaskSet

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in.
[$sel:cluster:UpdateServicePrimaryTaskSet'] :: UpdateServicePrimaryTaskSet -> Text

-- | The short name or full Amazon Resource Name (ARN) of the service that
--   the task set exists in.
[$sel:service:UpdateServicePrimaryTaskSet'] :: UpdateServicePrimaryTaskSet -> Text

-- | The short name or full Amazon Resource Name (ARN) of the task set to
--   set as the primary task set in the deployment.
[$sel:primaryTaskSet:UpdateServicePrimaryTaskSet'] :: UpdateServicePrimaryTaskSet -> Text

-- | Create a value of <a>UpdateServicePrimaryTaskSet</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateServicePrimaryTaskSet'</a>,
--   <a>updateServicePrimaryTaskSet_cluster</a> - The short name or full
--   Amazon Resource Name (ARN) of the cluster that hosts the service that
--   the task set exists in.
--   
--   <a>$sel:service:UpdateServicePrimaryTaskSet'</a>,
--   <a>updateServicePrimaryTaskSet_service</a> - The short name or full
--   Amazon Resource Name (ARN) of the service that the task set exists in.
--   
--   <a>$sel:primaryTaskSet:UpdateServicePrimaryTaskSet'</a>,
--   <a>updateServicePrimaryTaskSet_primaryTaskSet</a> - The short name or
--   full Amazon Resource Name (ARN) of the task set to set as the primary
--   task set in the deployment.
newUpdateServicePrimaryTaskSet :: Text -> Text -> Text -> UpdateServicePrimaryTaskSet

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in.
updateServicePrimaryTaskSet_cluster :: Lens' UpdateServicePrimaryTaskSet Text

-- | The short name or full Amazon Resource Name (ARN) of the service that
--   the task set exists in.
updateServicePrimaryTaskSet_service :: Lens' UpdateServicePrimaryTaskSet Text

-- | The short name or full Amazon Resource Name (ARN) of the task set to
--   set as the primary task set in the deployment.
updateServicePrimaryTaskSet_primaryTaskSet :: Lens' UpdateServicePrimaryTaskSet Text

-- | <i>See:</i> <a>newUpdateServicePrimaryTaskSetResponse</a> smart
--   constructor.
data UpdateServicePrimaryTaskSetResponse
UpdateServicePrimaryTaskSetResponse' :: Maybe TaskSet -> Int -> UpdateServicePrimaryTaskSetResponse

-- | Details about the task set.
[$sel:taskSet:UpdateServicePrimaryTaskSetResponse'] :: UpdateServicePrimaryTaskSetResponse -> Maybe TaskSet

-- | The response's http status code.
[$sel:httpStatus:UpdateServicePrimaryTaskSetResponse'] :: UpdateServicePrimaryTaskSetResponse -> Int

-- | Create a value of <a>UpdateServicePrimaryTaskSetResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSet:UpdateServicePrimaryTaskSetResponse'</a>,
--   <a>updateServicePrimaryTaskSetResponse_taskSet</a> - Details about the
--   task set.
--   
--   <a>$sel:httpStatus:UpdateServicePrimaryTaskSetResponse'</a>,
--   <a>updateServicePrimaryTaskSetResponse_httpStatus</a> - The response's
--   http status code.
newUpdateServicePrimaryTaskSetResponse :: Int -> UpdateServicePrimaryTaskSetResponse

-- | Details about the task set.
updateServicePrimaryTaskSetResponse_taskSet :: Lens' UpdateServicePrimaryTaskSetResponse (Maybe TaskSet)

-- | The response's http status code.
updateServicePrimaryTaskSetResponse_httpStatus :: Lens' UpdateServicePrimaryTaskSetResponse Int
instance GHC.Generics.Generic Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSet
instance GHC.Show.Show Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSet
instance GHC.Read.Read Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSet
instance GHC.Classes.Eq Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSet
instance GHC.Generics.Generic Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSetResponse
instance GHC.Show.Show Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSetResponse
instance GHC.Read.Read Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSetResponse
instance GHC.Classes.Eq Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSetResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSet
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSetResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSet
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSet
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSet
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSet
instance Amazonka.Data.Path.ToPath Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSet
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.UpdateServicePrimaryTaskSet.UpdateServicePrimaryTaskSet


-- | Modifies a task set. This is used when a service uses the
--   <tt>EXTERNAL</tt> deployment controller type. For more information,
--   see <a>Amazon ECS Deployment Types</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
module Amazonka.ECS.UpdateTaskSet

-- | <i>See:</i> <a>newUpdateTaskSet</a> smart constructor.
data UpdateTaskSet
UpdateTaskSet' :: Text -> Text -> Text -> Scale -> UpdateTaskSet

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in.
[$sel:cluster:UpdateTaskSet'] :: UpdateTaskSet -> Text

-- | The short name or full Amazon Resource Name (ARN) of the service that
--   the task set exists in.
[$sel:service:UpdateTaskSet'] :: UpdateTaskSet -> Text

-- | The short name or full Amazon Resource Name (ARN) of the task set to
--   update.
[$sel:taskSet:UpdateTaskSet'] :: UpdateTaskSet -> Text

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
[$sel:scale:UpdateTaskSet'] :: UpdateTaskSet -> Scale

-- | Create a value of <a>UpdateTaskSet</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateTaskSet'</a>, <a>updateTaskSet_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in.
--   
--   <a>$sel:service:UpdateTaskSet'</a>, <a>updateTaskSet_service</a> - The
--   short name or full Amazon Resource Name (ARN) of the service that the
--   task set exists in.
--   
--   <a>$sel:taskSet:UpdateTaskSet'</a>, <a>updateTaskSet_taskSet</a> - The
--   short name or full Amazon Resource Name (ARN) of the task set to
--   update.
--   
--   <a>$sel:scale:UpdateTaskSet'</a>, <a>updateTaskSet_scale</a> - A
--   floating-point percentage of the desired number of tasks to place and
--   keep running in the task set.
newUpdateTaskSet :: Text -> Text -> Text -> Scale -> UpdateTaskSet

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in.
updateTaskSet_cluster :: Lens' UpdateTaskSet Text

-- | The short name or full Amazon Resource Name (ARN) of the service that
--   the task set exists in.
updateTaskSet_service :: Lens' UpdateTaskSet Text

-- | The short name or full Amazon Resource Name (ARN) of the task set to
--   update.
updateTaskSet_taskSet :: Lens' UpdateTaskSet Text

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
updateTaskSet_scale :: Lens' UpdateTaskSet Scale

-- | <i>See:</i> <a>newUpdateTaskSetResponse</a> smart constructor.
data UpdateTaskSetResponse
UpdateTaskSetResponse' :: Maybe TaskSet -> Int -> UpdateTaskSetResponse

-- | Details about the task set.
[$sel:taskSet:UpdateTaskSetResponse'] :: UpdateTaskSetResponse -> Maybe TaskSet

-- | The response's http status code.
[$sel:httpStatus:UpdateTaskSetResponse'] :: UpdateTaskSetResponse -> Int

-- | Create a value of <a>UpdateTaskSetResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSet:UpdateTaskSet'</a>,
--   <a>updateTaskSetResponse_taskSet</a> - Details about the task set.
--   
--   <a>$sel:httpStatus:UpdateTaskSetResponse'</a>,
--   <a>updateTaskSetResponse_httpStatus</a> - The response's http status
--   code.
newUpdateTaskSetResponse :: Int -> UpdateTaskSetResponse

-- | Details about the task set.
updateTaskSetResponse_taskSet :: Lens' UpdateTaskSetResponse (Maybe TaskSet)

-- | The response's http status code.
updateTaskSetResponse_httpStatus :: Lens' UpdateTaskSetResponse Int
instance GHC.Generics.Generic Amazonka.ECS.UpdateTaskSet.UpdateTaskSet
instance GHC.Show.Show Amazonka.ECS.UpdateTaskSet.UpdateTaskSet
instance GHC.Read.Read Amazonka.ECS.UpdateTaskSet.UpdateTaskSet
instance GHC.Classes.Eq Amazonka.ECS.UpdateTaskSet.UpdateTaskSet
instance GHC.Generics.Generic Amazonka.ECS.UpdateTaskSet.UpdateTaskSetResponse
instance GHC.Show.Show Amazonka.ECS.UpdateTaskSet.UpdateTaskSetResponse
instance GHC.Read.Read Amazonka.ECS.UpdateTaskSet.UpdateTaskSetResponse
instance GHC.Classes.Eq Amazonka.ECS.UpdateTaskSet.UpdateTaskSetResponse
instance Amazonka.Types.AWSRequest Amazonka.ECS.UpdateTaskSet.UpdateTaskSet
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateTaskSet.UpdateTaskSetResponse
instance Data.Hashable.Class.Hashable Amazonka.ECS.UpdateTaskSet.UpdateTaskSet
instance Control.DeepSeq.NFData Amazonka.ECS.UpdateTaskSet.UpdateTaskSet
instance Amazonka.Data.Headers.ToHeaders Amazonka.ECS.UpdateTaskSet.UpdateTaskSet
instance Data.Aeson.Types.ToJSON.ToJSON Amazonka.ECS.UpdateTaskSet.UpdateTaskSet
instance Amazonka.Data.Path.ToPath Amazonka.ECS.UpdateTaskSet.UpdateTaskSet
instance Amazonka.Data.Query.ToQuery Amazonka.ECS.UpdateTaskSet.UpdateTaskSet


module Amazonka.ECS.Lens

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   use when filtering the <tt>ListServices</tt> results. If you do not
--   specify a cluster, the default cluster is assumed.
listServices_cluster :: Lens' ListServices (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a <tt>ListServices</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listServices_nextToken :: Lens' ListServices (Maybe Text)

-- | The launch type to use when filtering the <tt>ListServices</tt>
--   results.
listServices_launchType :: Lens' ListServices (Maybe LaunchType)

-- | The scheduling strategy to use when filtering the
--   <tt>ListServices</tt> results.
listServices_schedulingStrategy :: Lens' ListServices (Maybe SchedulingStrategy)

-- | The maximum number of service results returned by
--   <tt>ListServices</tt> in paginated output. When this parameter is
--   used, <tt>ListServices</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListServices</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListServices</tt> returns up to 10
--   results and a <tt>nextToken</tt> value if applicable.
listServices_maxResults :: Lens' ListServices (Maybe Int)

-- | The list of full ARN entries for each service associated with the
--   specified cluster.
listServicesResponse_serviceArns :: Lens' ListServicesResponse (Maybe [Text])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListServices</tt> request. When the results of a
--   <tt>ListServices</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
listServicesResponse_nextToken :: Lens' ListServicesResponse (Maybe Text)

-- | The response's http status code.
listServicesResponse_httpStatus :: Lens' ListServicesResponse Int

-- | Whether to include additional information about the clusters in the
--   response. If this field is omitted, this information isn't included.
--   
--   If <tt>ATTACHMENTS</tt> is specified, the attachments for the
--   container instances or tasks within the cluster are included.
--   
--   If <tt>SETTINGS</tt> is specified, the settings for the cluster are
--   included.
--   
--   If <tt>CONFIGURATIONS</tt> is specified, the configuration for the
--   cluster is included.
--   
--   If <tt>STATISTICS</tt> is specified, the task and service count is
--   included, separated by launch type.
--   
--   If <tt>TAGS</tt> is specified, the metadata tags associated with the
--   cluster are included.
describeClusters_include :: Lens' DescribeClusters (Maybe [ClusterField])

-- | A list of up to 100 cluster names or full cluster Amazon Resource Name
--   (ARN) entries. If you do not specify a cluster, the default cluster is
--   assumed.
describeClusters_clusters :: Lens' DescribeClusters (Maybe [Text])

-- | Any failures associated with the call.
describeClustersResponse_failures :: Lens' DescribeClustersResponse (Maybe [Failure])

-- | The list of clusters.
describeClustersResponse_clusters :: Lens' DescribeClustersResponse (Maybe [Cluster])

-- | The response's http status code.
describeClustersResponse_httpStatus :: Lens' DescribeClustersResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service to delete. If you do not specify a cluster, the
--   default cluster is assumed.
deleteService_cluster :: Lens' DeleteService (Maybe Text)

-- | If <tt>true</tt>, allows you to delete a service even if it has not
--   been scaled down to zero tasks. It is only necessary to use this if
--   the service is using the <tt>REPLICA</tt> scheduling strategy.
deleteService_force :: Lens' DeleteService (Maybe Bool)

-- | The name of the service to delete.
deleteService_service :: Lens' DeleteService Text

-- | The full description of the deleted service.
deleteServiceResponse_service :: Lens' DeleteServiceResponse (Maybe ContainerService)

-- | The response's http status code.
deleteServiceResponse_httpStatus :: Lens' DeleteServiceResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   your service is running on. If you do not specify a cluster, the
--   default cluster is assumed.
updateService_cluster :: Lens' UpdateService (Maybe Text)

-- | The platform version on which your tasks in the service are running. A
--   platform version is only specified for tasks using the Fargate launch
--   type. If a platform version is not specified, the <tt>LATEST</tt>
--   platform version is used by default. For more information, see
--   <a>Fargate Platform Versions</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
updateService_platformVersion :: Lens' UpdateService (Maybe Text)

-- | The number of instantiations of the task to place and keep running in
--   your service.
updateService_desiredCount :: Lens' UpdateService (Maybe Int)

-- | An array of task placement constraint objects to update the service to
--   use. If no value is specified, the existing placement constraints for
--   the service will remain unchanged. If this value is specified, it will
--   override any existing placement constraints defined for the service.
--   To remove all existing placement constraints, specify an empty array.
--   
--   You can specify a maximum of 10 constraints per task (this limit
--   includes constraints in the task definition and those specified at
--   runtime).
updateService_placementConstraints :: Lens' UpdateService (Maybe [PlacementConstraint])

-- | The task placement strategy objects to update the service to use. If
--   no value is specified, the existing placement strategy for the service
--   will remain unchanged. If this value is specified, it will override
--   the existing placement strategy defined for the service. To remove an
--   existing placement strategy, specify an empty object.
--   
--   You can specify a maximum of five strategy rules per service.
updateService_placementStrategy :: Lens' UpdateService (Maybe [PlacementStrategy])

-- | Whether to force a new deployment of the service. Deployments are not
--   forced by default. You can use this option to trigger a new deployment
--   with no service definition changes. For example, you can update a
--   service's tasks to use a newer Docker image with the same image/tag
--   combination (<tt>my_image:latest</tt>) or to roll Fargate tasks onto a
--   newer platform version.
updateService_forceNewDeployment :: Lens' UpdateService (Maybe Bool)

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to run in your service. If a
--   <tt>revision</tt> is not specified, the latest <tt>ACTIVE</tt>
--   revision is used. If you modify the task definition with
--   <tt>UpdateService</tt>, Amazon ECS spawns a task with the new version
--   of the task definition and then stops an old task after the new
--   version is running.
updateService_taskDefinition :: Lens' UpdateService (Maybe Text)

-- | The period of time, in seconds, that the Amazon ECS service scheduler
--   should ignore unhealthy Elastic Load Balancing target health checks
--   after a task has first started. This is only valid if your service is
--   configured to use a load balancer. If your service's tasks take a
--   while to start and respond to Elastic Load Balancing health checks,
--   you can specify a health check grace period of up to 2,147,483,647
--   seconds. During that time, the Amazon ECS service scheduler ignores
--   the Elastic Load Balancing health check status. This grace period can
--   prevent the ECS service scheduler from marking tasks as unhealthy and
--   stopping them before they have time to come up.
updateService_healthCheckGracePeriodSeconds :: Lens' UpdateService (Maybe Int)

-- | An object representing the network configuration for the service.
updateService_networkConfiguration :: Lens' UpdateService (Maybe NetworkConfiguration)

-- | The capacity provider strategy to update the service to use.
--   
--   If the service is using the default capacity provider strategy for the
--   cluster, the service can be updated to use one or more capacity
--   providers as opposed to the default capacity provider strategy.
--   However, when a service is using a capacity provider strategy that is
--   not the default capacity provider strategy, the service cannot be
--   updated to use the cluster's default capacity provider strategy.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
updateService_capacityProviderStrategy :: Lens' UpdateService (Maybe [CapacityProviderStrategyItem])

-- | If <tt>true</tt>, this enables execute command functionality on all
--   task containers.
--   
--   If you do not want to override the value that was set when the service
--   was created, you can set this to <tt>null</tt> when performing this
--   action.
updateService_enableExecuteCommand :: Lens' UpdateService (Maybe Bool)

-- | Optional deployment parameters that control how many tasks run during
--   the deployment and the ordering of stopping and starting tasks.
updateService_deploymentConfiguration :: Lens' UpdateService (Maybe DeploymentConfiguration)

-- | The name of the service to update.
updateService_service :: Lens' UpdateService Text

-- | The full description of your service following the update call.
updateServiceResponse_service :: Lens' UpdateServiceResponse (Maybe ContainerService)

-- | The response's http status code.
updateServiceResponse_httpStatus :: Lens' UpdateServiceResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   which the container instance belongs.
discoverPollEndpoint_cluster :: Lens' DiscoverPollEndpoint (Maybe Text)

-- | The container instance ID or full ARN of the container instance. The
--   ARN contains the <tt>arn:aws:ecs</tt> namespace, followed by the
--   Region of the container instance, the Amazon Web Services account ID
--   of the container instance owner, the <tt>container-instance</tt>
--   namespace, and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
discoverPollEndpoint_containerInstance :: Lens' DiscoverPollEndpoint (Maybe Text)

-- | The telemetry endpoint for the Amazon ECS agent.
discoverPollEndpointResponse_telemetryEndpoint :: Lens' DiscoverPollEndpointResponse (Maybe Text)

-- | The endpoint for the Amazon ECS agent to poll.
discoverPollEndpointResponse_endpoint :: Lens' DiscoverPollEndpointResponse (Maybe Text)

-- | The response's http status code.
discoverPollEndpointResponse_httpStatus :: Lens' DiscoverPollEndpointResponse Int

-- | The short name or full ARN of the cluster that hosts the container
--   instance the attachment belongs to.
submitAttachmentStateChanges_cluster :: Lens' SubmitAttachmentStateChanges (Maybe Text)

-- | Any attachments associated with the state change request.
submitAttachmentStateChanges_attachments :: Lens' SubmitAttachmentStateChanges [AttachmentStateChange]

-- | Acknowledgement of the state change.
submitAttachmentStateChangesResponse_acknowledgment :: Lens' SubmitAttachmentStateChangesResponse (Maybe Text)

-- | The response's http status code.
submitAttachmentStateChangesResponse_httpStatus :: Lens' SubmitAttachmentStateChangesResponse Int

-- | The network bindings of the container.
submitContainerStateChange_networkBindings :: Lens' SubmitContainerStateChange (Maybe [NetworkBinding])

-- | The status of the state change request.
submitContainerStateChange_status :: Lens' SubmitContainerStateChange (Maybe Text)

-- | The short name or full ARN of the cluster that hosts the container.
submitContainerStateChange_cluster :: Lens' SubmitContainerStateChange (Maybe Text)

-- | The name of the container.
submitContainerStateChange_containerName :: Lens' SubmitContainerStateChange (Maybe Text)

-- | The reason for the state change request.
submitContainerStateChange_reason :: Lens' SubmitContainerStateChange (Maybe Text)

-- | The exit code returned for the state change request.
submitContainerStateChange_exitCode :: Lens' SubmitContainerStateChange (Maybe Int)

-- | The task ID or full Amazon Resource Name (ARN) of the task that hosts
--   the container.
submitContainerStateChange_task :: Lens' SubmitContainerStateChange (Maybe Text)

-- | The ID of the Docker container.
submitContainerStateChange_runtimeId :: Lens' SubmitContainerStateChange (Maybe Text)

-- | Acknowledgement of the state change.
submitContainerStateChangeResponse_acknowledgment :: Lens' SubmitContainerStateChangeResponse (Maybe Text)

-- | The response's http status code.
submitContainerStateChangeResponse_httpStatus :: Lens' SubmitContainerStateChangeResponse Int

-- | The Amazon Resource Name (ARN) that identifies the resource for which
--   to list the tags. Currently, the supported resources are Amazon ECS
--   tasks, services, task definitions, clusters, and container instances.
listTagsForResource_resourceArn :: Lens' ListTagsForResource Text

-- | The tags for the resource.
listTagsForResourceResponse_tags :: Lens' ListTagsForResourceResponse (Maybe [Tag])

-- | The response's http status code.
listTagsForResourceResponse_httpStatus :: Lens' ListTagsForResourceResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the task to stop. If you do not specify a cluster, the default
--   cluster is assumed.
stopTask_cluster :: Lens' StopTask (Maybe Text)

-- | An optional message specified when a task is stopped. For example, if
--   you are using a custom scheduler, you can use this parameter to
--   specify the reason for stopping the task here, and the message appears
--   in subsequent DescribeTasks API operations on this task. Up to 255
--   characters are allowed in this message.
stopTask_reason :: Lens' StopTask (Maybe Text)

-- | The task ID or full Amazon Resource Name (ARN) of the task to stop.
stopTask_task :: Lens' StopTask Text

-- | The task that was stopped.
stopTaskResponse_task :: Lens' StopTaskResponse (Maybe Task)

-- | The response's http status code.
stopTaskResponse_httpStatus :: Lens' StopTaskResponse Int

-- | Specifies whether to see the resource tags for the task definition. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
describeTaskDefinition_include :: Lens' DescribeTaskDefinition (Maybe [TaskDefinitionField])

-- | The <tt>family</tt> for the latest <tt>ACTIVE</tt> revision,
--   <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>) for a
--   specific revision in the family, or full Amazon Resource Name (ARN) of
--   the task definition to describe.
describeTaskDefinition_taskDefinition :: Lens' DescribeTaskDefinition Text

-- | The full task definition description.
describeTaskDefinitionResponse_taskDefinition :: Lens' DescribeTaskDefinitionResponse (Maybe TaskDefinition)

-- | The metadata that is applied to the task definition to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
describeTaskDefinitionResponse_tags :: Lens' DescribeTaskDefinitionResponse (Maybe [Tag])

-- | The response's http status code.
describeTaskDefinitionResponse_httpStatus :: Lens' DescribeTaskDefinitionResponse Int

-- | The status of the state change request.
submitTaskStateChange_status :: Lens' SubmitTaskStateChange (Maybe Text)

-- | The details for the managed agent associated with the task.
submitTaskStateChange_managedAgents :: Lens' SubmitTaskStateChange (Maybe [ManagedAgentStateChange])

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the task.
submitTaskStateChange_cluster :: Lens' SubmitTaskStateChange (Maybe Text)

-- | Any attachments associated with the state change request.
submitTaskStateChange_attachments :: Lens' SubmitTaskStateChange (Maybe [AttachmentStateChange])

-- | The Unix timestamp for when the task execution stopped.
submitTaskStateChange_executionStoppedAt :: Lens' SubmitTaskStateChange (Maybe UTCTime)

-- | The Unix timestamp for when the container image pull completed.
submitTaskStateChange_pullStoppedAt :: Lens' SubmitTaskStateChange (Maybe UTCTime)

-- | Any containers associated with the state change request.
submitTaskStateChange_containers :: Lens' SubmitTaskStateChange (Maybe [ContainerStateChange])

-- | The reason for the state change request.
submitTaskStateChange_reason :: Lens' SubmitTaskStateChange (Maybe Text)

-- | The task ID or full ARN of the task in the state change request.
submitTaskStateChange_task :: Lens' SubmitTaskStateChange (Maybe Text)

-- | The Unix timestamp for when the container image pull began.
submitTaskStateChange_pullStartedAt :: Lens' SubmitTaskStateChange (Maybe UTCTime)

-- | Acknowledgement of the state change.
submitTaskStateChangeResponse_acknowledgment :: Lens' SubmitTaskStateChangeResponse (Maybe Text)

-- | The response's http status code.
submitTaskStateChangeResponse_httpStatus :: Lens' SubmitTaskStateChangeResponse Int

-- | Specifies whether you want to see the resource tags for the container
--   instance. If <tt>TAGS</tt> is specified, the tags are included in the
--   response. If this field is omitted, tags are not included in the
--   response.
describeContainerInstances_include :: Lens' DescribeContainerInstances (Maybe [ContainerInstanceField])

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the container instances to describe. If you do not specify a
--   cluster, the default cluster is assumed. This parameter is required if
--   the container instance or container instances you are describing were
--   launched in any cluster other than the default cluster.
describeContainerInstances_cluster :: Lens' DescribeContainerInstances (Maybe Text)

-- | A list of up to 100 container instance IDs or full Amazon Resource
--   Name (ARN) entries.
describeContainerInstances_containerInstances :: Lens' DescribeContainerInstances [Text]

-- | Any failures associated with the call.
describeContainerInstancesResponse_failures :: Lens' DescribeContainerInstancesResponse (Maybe [Failure])

-- | The list of container instances.
describeContainerInstancesResponse_containerInstances :: Lens' DescribeContainerInstancesResponse (Maybe [ContainerInstance])

-- | The response's http status code.
describeContainerInstancesResponse_httpStatus :: Lens' DescribeContainerInstancesResponse Int

-- | Specifies whether or not you want to see the resource tags for the
--   capacity provider. If <tt>TAGS</tt> is specified, the tags are
--   included in the response. If this field is omitted, tags are not
--   included in the response.
describeCapacityProviders_include :: Lens' DescribeCapacityProviders (Maybe [CapacityProviderField])

-- | The <tt>nextToken</tt> value returned from a previous paginated
--   <tt>DescribeCapacityProviders</tt> request where <tt>maxResults</tt>
--   was used and the results exceeded the value of that parameter.
--   Pagination continues from the end of the previous results that
--   returned the <tt>nextToken</tt> value.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
describeCapacityProviders_nextToken :: Lens' DescribeCapacityProviders (Maybe Text)

-- | The short name or full Amazon Resource Name (ARN) of one or more
--   capacity providers. Up to <tt>100</tt> capacity providers can be
--   described in an action.
describeCapacityProviders_capacityProviders :: Lens' DescribeCapacityProviders (Maybe [Text])

-- | The maximum number of account setting results returned by
--   <tt>DescribeCapacityProviders</tt> in paginated output. When this
--   parameter is used, <tt>DescribeCapacityProviders</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>DescribeCapacityProviders</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 10. If this
--   parameter is not used, then <tt>DescribeCapacityProviders</tt> returns
--   up to 10 results and a <tt>nextToken</tt> value if applicable.
describeCapacityProviders_maxResults :: Lens' DescribeCapacityProviders (Maybe Int)

-- | Any failures associated with the call.
describeCapacityProvidersResponse_failures :: Lens' DescribeCapacityProvidersResponse (Maybe [Failure])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>DescribeCapacityProviders</tt> request. When the results of a
--   <tt>DescribeCapacityProviders</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
describeCapacityProvidersResponse_nextToken :: Lens' DescribeCapacityProvidersResponse (Maybe Text)

-- | The list of capacity providers.
describeCapacityProvidersResponse_capacityProviders :: Lens' DescribeCapacityProvidersResponse (Maybe [CapacityProvider])

-- | The response's http status code.
describeCapacityProvidersResponse_httpStatus :: Lens' DescribeCapacityProvidersResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the container instance to update. If you do not specify a
--   cluster, the default cluster is assumed.
updateContainerInstancesState_cluster :: Lens' UpdateContainerInstancesState (Maybe Text)

-- | A list of container instance IDs or full ARN entries.
updateContainerInstancesState_containerInstances :: Lens' UpdateContainerInstancesState [Text]

-- | The container instance state with which to update the container
--   instance. The only valid values for this action are <tt>ACTIVE</tt>
--   and <tt>DRAINING</tt>. A container instance can only be updated to
--   <tt>DRAINING</tt> status once it has reached an <tt>ACTIVE</tt> state.
--   If a container instance is in <tt>REGISTERING</tt>,
--   <tt>DEREGISTERING</tt>, or <tt>REGISTRATION_FAILED</tt> state you can
--   describe the container instance but will be unable to update the
--   container instance state.
updateContainerInstancesState_status :: Lens' UpdateContainerInstancesState ContainerInstanceStatus

-- | Any failures associated with the call.
updateContainerInstancesStateResponse_failures :: Lens' UpdateContainerInstancesStateResponse (Maybe [Failure])

-- | The list of container instances.
updateContainerInstancesStateResponse_containerInstances :: Lens' UpdateContainerInstancesStateResponse (Maybe [ContainerInstance])

-- | The response's http status code.
updateContainerInstancesStateResponse_httpStatus :: Lens' UpdateContainerInstancesStateResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   delete.
deleteCluster_cluster :: Lens' DeleteCluster Text

-- | The full description of the deleted cluster.
deleteClusterResponse_cluster :: Lens' DeleteClusterResponse (Maybe Cluster)

-- | The response's http status code.
deleteClusterResponse_httpStatus :: Lens' DeleteClusterResponse Int

-- | The cluster settings for your cluster.
updateCluster_settings :: Lens' UpdateCluster (Maybe [ClusterSetting])

-- | The execute command configuration for the cluster.
updateCluster_configuration :: Lens' UpdateCluster (Maybe ClusterConfiguration)

-- | The name of the cluster to modify the settings for.
updateCluster_cluster :: Lens' UpdateCluster Text

-- | Details about the cluster.
updateClusterResponse_cluster :: Lens' UpdateClusterResponse (Maybe Cluster)

-- | The response's http status code.
updateClusterResponse_httpStatus :: Lens' UpdateClusterResponse Int

-- | The capacity provider strategy to set as the default for the cluster.
--   When a default capacity provider strategy is set for a cluster, when
--   calling the RunTask or CreateService APIs with no capacity provider
--   strategy or launch type specified, the default capacity provider
--   strategy for the cluster is used.
--   
--   If a default capacity provider strategy is not defined for a cluster
--   during creation, it can be defined later with the
--   PutClusterCapacityProviders API operation.
createCluster_defaultCapacityProviderStrategy :: Lens' CreateCluster (Maybe [CapacityProviderStrategyItem])

-- | The setting to use when creating a cluster. This parameter is used to
--   enable CloudWatch Container Insights for a cluster. If this value is
--   specified, it will override the <tt>containerInsights</tt> value set
--   with PutAccountSetting or PutAccountSettingDefault.
createCluster_settings :: Lens' CreateCluster (Maybe [ClusterSetting])

-- | The name of your cluster. If you do not specify a name for your
--   cluster, you create a cluster named <tt>default</tt>. Up to 255
--   letters (uppercase and lowercase), numbers, underscores, and hyphens
--   are allowed.
createCluster_clusterName :: Lens' CreateCluster (Maybe Text)

-- | The execute command configuration for the cluster.
createCluster_configuration :: Lens' CreateCluster (Maybe ClusterConfiguration)

-- | The short name of one or more capacity providers to associate with the
--   cluster. A capacity provider must be associated with a cluster before
--   it can be included as part of the default capacity provider strategy
--   of the cluster or used in a capacity provider strategy when calling
--   the CreateService or RunTask actions.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created and not already associated
--   with another cluster. New Auto Scaling group capacity providers can be
--   created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
createCluster_capacityProviders :: Lens' CreateCluster (Maybe [Text])

-- | The metadata that you apply to the cluster to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
createCluster_tags :: Lens' CreateCluster (Maybe [Tag])

-- | The full description of your new cluster.
createClusterResponse_cluster :: Lens' CreateClusterResponse (Maybe Cluster)

-- | The response's http status code.
createClusterResponse_httpStatus :: Lens' CreateClusterResponse Int

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If you specify the root user, it modifies the account
--   setting for all IAM users, IAM roles, and the root user of the account
--   unless an IAM user or role explicitly overrides these settings. If
--   this field is omitted, the setting is changed only for the
--   authenticated user.
--   
--   Federated users assume the account setting of the root user and can't
--   have explicit account settings set for them.
putAccountSetting_principalArn :: Lens' PutAccountSetting (Maybe Text)

-- | The Amazon ECS resource name for which to modify the account setting.
--   If <tt>serviceLongArnFormat</tt> is specified, the ARN for your Amazon
--   ECS services is affected. If <tt>taskLongArnFormat</tt> is specified,
--   the ARN and resource ID for your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the elastic network interface
--   (ENI) limit for your Amazon ECS container instances is affected. If
--   <tt>containerInsights</tt> is specified, the default setting for
--   CloudWatch Container Insights for your clusters is affected.
putAccountSetting_name :: Lens' PutAccountSetting SettingName

-- | The account setting value for the specified principal ARN. Accepted
--   values are <tt>enabled</tt> and <tt>disabled</tt>.
putAccountSetting_value :: Lens' PutAccountSetting Text

-- | The current account setting for a resource.
putAccountSettingResponse_setting :: Lens' PutAccountSettingResponse (Maybe Setting)

-- | The response's http status code.
putAccountSettingResponse_httpStatus :: Lens' PutAccountSettingResponse Int

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If you specify the root user, it disables the account
--   setting for all IAM users, IAM roles, and the root user of the account
--   unless an IAM user or role explicitly overrides these settings. If
--   this field is omitted, the setting is changed only for the
--   authenticated user.
deleteAccountSetting_principalArn :: Lens' DeleteAccountSetting (Maybe Text)

-- | The resource name for which to disable the account setting. If
--   <tt>serviceLongArnFormat</tt> is specified, the ARN for your Amazon
--   ECS services is affected. If <tt>taskLongArnFormat</tt> is specified,
--   the ARN and resource ID for your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the ENI limit for your Amazon
--   ECS container instances is affected.
deleteAccountSetting_name :: Lens' DeleteAccountSetting SettingName

-- | The account setting for the specified principal ARN.
deleteAccountSettingResponse_setting :: Lens' DeleteAccountSettingResponse (Maybe Setting)

-- | The response's http status code.
deleteAccountSettingResponse_httpStatus :: Lens' DeleteAccountSettingResponse Int

-- | The task definition status with which to filter the
--   <tt>ListTaskDefinitions</tt> results. By default, only <tt>ACTIVE</tt>
--   task definitions are listed. By setting this parameter to
--   <tt>INACTIVE</tt>, you can view task definitions that are
--   <tt>INACTIVE</tt> as long as an active task or service still
--   references them. If you paginate the resulting output, be sure to keep
--   the <tt>status</tt> value constant in each subsequent request.
listTaskDefinitions_status :: Lens' ListTaskDefinitions (Maybe TaskDefinitionStatus)

-- | The full family name with which to filter the
--   <tt>ListTaskDefinitions</tt> results. Specifying a
--   <tt>familyPrefix</tt> limits the listed task definitions to task
--   definition revisions that belong to that family.
listTaskDefinitions_familyPrefix :: Lens' ListTaskDefinitions (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a
--   <tt>ListTaskDefinitions</tt> request indicating that more results are
--   available to fulfill the request and further calls will be needed. If
--   <tt>maxResults</tt> was provided, it is possible the number of results
--   to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listTaskDefinitions_nextToken :: Lens' ListTaskDefinitions (Maybe Text)

-- | The order in which to sort the results. Valid values are <tt>ASC</tt>
--   and <tt>DESC</tt>. By default (<tt>ASC</tt>), task definitions are
--   listed lexicographically by family name and in ascending numerical
--   order by revision so that the newest task definitions in a family are
--   listed last. Setting this parameter to <tt>DESC</tt> reverses the sort
--   order on family name and revision so that the newest task definitions
--   in a family are listed first.
listTaskDefinitions_sort :: Lens' ListTaskDefinitions (Maybe SortOrder)

-- | The maximum number of task definition results returned by
--   <tt>ListTaskDefinitions</tt> in paginated output. When this parameter
--   is used, <tt>ListTaskDefinitions</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>ListTaskDefinitions</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListTaskDefinitions</tt> returns up to
--   100 results and a <tt>nextToken</tt> value if applicable.
listTaskDefinitions_maxResults :: Lens' ListTaskDefinitions (Maybe Int)

-- | The list of task definition Amazon Resource Name (ARN) entries for the
--   <tt>ListTaskDefinitions</tt> request.
listTaskDefinitionsResponse_taskDefinitionArns :: Lens' ListTaskDefinitionsResponse (Maybe [Text])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListTaskDefinitions</tt> request. When the results of a
--   <tt>ListTaskDefinitions</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
listTaskDefinitionsResponse_nextToken :: Lens' ListTaskDefinitionsResponse (Maybe Text)

-- | The response's http status code.
listTaskDefinitionsResponse_httpStatus :: Lens' ListTaskDefinitionsResponse Int

-- | A list of container overrides in JSON format that specify the name of
--   a container in the specified task definition and the overrides it
--   should receive. You can override the default command for a container
--   (that is specified in the task definition or Docker image) with a
--   <tt>command</tt> override. You can also override existing environment
--   variables (that are specified in the task definition or Docker image)
--   on a container or add new environment variables to it with an
--   <tt>environment</tt> override.
--   
--   A total of 8192 characters are allowed for overrides. This limit
--   includes the JSON formatting characters of the override structure.
runTask_overrides :: Lens' RunTask (Maybe TaskOverride)

-- | The name of the task group to associate with the task. The default
--   value is the family name of the task definition (for example,
--   <tt>family:my-family-name</tt>).
runTask_group :: Lens' RunTask (Maybe Text)

-- | The short name or full Amazon Resource Name (ARN) of the cluster on
--   which to run your task. If you do not specify a cluster, the default
--   cluster is assumed.
runTask_cluster :: Lens' RunTask (Maybe Text)

-- | Specifies whether to propagate the tags from the task definition to
--   the task. If no value is specified, the tags are not propagated. Tags
--   can only be propagated to the task during task creation. To add tags
--   to a task after task creation, use the TagResource API action.
--   
--   An error will be received if you specify the <tt>SERVICE</tt> option
--   when running a task.
runTask_propagateTags :: Lens' RunTask (Maybe PropagateTags)

-- | The platform version the task should use. A platform version is only
--   specified for tasks hosted on Fargate. If one is not specified, the
--   <tt>LATEST</tt> platform version is used by default. For more
--   information, see <a>Fargate platform versions</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
runTask_platformVersion :: Lens' RunTask (Maybe Text)

-- | Specifies whether to enable Amazon ECS managed tags for the task. For
--   more information, see <a>Tagging Your Amazon ECS Resources</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
runTask_enableECSManagedTags :: Lens' RunTask (Maybe Bool)

-- | The number of instantiations of the specified task to place on your
--   cluster. You can specify up to 10 tasks per call.
runTask_count :: Lens' RunTask (Maybe Int)

-- | The reference ID to use for the task. The reference ID can have a
--   maximum length of 1024 characters.
runTask_referenceId :: Lens' RunTask (Maybe Text)

-- | An array of placement constraint objects to use for the task. You can
--   specify up to 10 constraints per task (including constraints in the
--   task definition and those specified at runtime).
runTask_placementConstraints :: Lens' RunTask (Maybe [PlacementConstraint])

-- | The placement strategy objects to use for the task. You can specify a
--   maximum of 5 strategy rules per task.
runTask_placementStrategy :: Lens' RunTask (Maybe [PlacementStrategy])

-- | An optional tag specified when a task is started. For example, if you
--   automatically trigger a task to run a batch process job, you could
--   apply a unique identifier for that job to your task with the
--   <tt>startedBy</tt> parameter. You can then identify which tasks belong
--   to that job by filtering the results of a ListTasks call with the
--   <tt>startedBy</tt> value. Up to 36 letters (uppercase and lowercase),
--   numbers, hyphens, and underscores are allowed.
--   
--   If a task is started by an Amazon ECS service, then the
--   <tt>startedBy</tt> parameter contains the deployment ID of the service
--   that starts it.
runTask_startedBy :: Lens' RunTask (Maybe Text)

-- | The infrastructure on which to run your standalone task. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>FARGATE</tt> launch type runs your tasks on Fargate On-Demand
--   infrastructure.
--   
--   Fargate Spot infrastructure is available for use but a capacity
--   provider strategy must be used. For more information, see <a>Fargate
--   capacity providers</a> in the <i>Amazon ECS User Guide for
--   Fargate</i>.
--   
--   The <tt>EC2</tt> launch type runs your tasks on Amazon EC2 instances
--   registered to your cluster.
--   
--   The <tt>EXTERNAL</tt> launch type runs your tasks on your on-premise
--   server or virtual machine (VM) capacity registered to your cluster.
--   
--   A task can use either a launch type or a capacity provider strategy.
--   If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
--   
--   When you use cluster auto scaling, you must specify
--   <tt>capacityProviderStrategy</tt> and not <tt>launchType</tt>.
runTask_launchType :: Lens' RunTask (Maybe LaunchType)

-- | The network configuration for the task. This parameter is required for
--   task definitions that use the <tt>awsvpc</tt> network mode to receive
--   their own elastic network interface, and it is not supported for other
--   network modes. For more information, see <a>Task networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
runTask_networkConfiguration :: Lens' RunTask (Maybe NetworkConfiguration)

-- | The capacity provider strategy to use for the task.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   When you use cluster auto scaling, you must specify
--   <tt>capacityProviderStrategy</tt> and not <tt>launchType</tt>.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
runTask_capacityProviderStrategy :: Lens' RunTask (Maybe [CapacityProviderStrategyItem])

-- | Whether or not to enable the execute command functionality for the
--   containers in this task. If <tt>true</tt>, this enables execute
--   command functionality on all containers in the task.
runTask_enableExecuteCommand :: Lens' RunTask (Maybe Bool)

-- | The metadata that you apply to the task to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
runTask_tags :: Lens' RunTask (Maybe [Tag])

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to run. If a <tt>revision</tt> is
--   not specified, the latest <tt>ACTIVE</tt> revision is used.
--   
--   The full ARN value must match the value that you specified ias the
--   <tt>Resource</tt> of the IAM principal's permissions policy. For
--   example, if the <tt>Resource</tt> is
--   arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:*,
--   the <tt>taskDefinition</tt> ARN value must be
--   <tt>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName</tt>.
runTask_taskDefinition :: Lens' RunTask Text

-- | Any failures associated with the call.
runTaskResponse_failures :: Lens' RunTaskResponse (Maybe [Failure])

-- | A full description of the tasks that were run. The tasks that were
--   successfully placed on your cluster are described here.
runTaskResponse_tasks :: Lens' RunTaskResponse (Maybe [Task])

-- | The response's http status code.
runTaskResponse_httpStatus :: Lens' RunTaskResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the capacity
--   provider to delete.
deleteCapacityProvider_capacityProvider :: Lens' DeleteCapacityProvider Text

-- | The details of the capacity provider.
deleteCapacityProviderResponse_capacityProvider :: Lens' DeleteCapacityProviderResponse (Maybe CapacityProvider)

-- | The response's http status code.
deleteCapacityProviderResponse_httpStatus :: Lens' DeleteCapacityProviderResponse Int

-- | The task desired status to use when filtering the <tt>ListTasks</tt>
--   results. Specifying a <tt>desiredStatus</tt> of <tt>STOPPED</tt>
--   limits the results to tasks that Amazon ECS has set the desired status
--   to <tt>STOPPED</tt>. This can be useful for debugging tasks that are
--   not starting properly or have died or finished. The default status
--   filter is <tt>RUNNING</tt>, which shows tasks that Amazon ECS has set
--   the desired status to <tt>RUNNING</tt>.
--   
--   Although you can filter results based on a desired status of
--   <tt>PENDING</tt>, this does not return any results. Amazon ECS never
--   sets the desired status of a task to that value (only a task's
--   <tt>lastStatus</tt> may have a value of <tt>PENDING</tt>).
listTasks_desiredStatus :: Lens' ListTasks (Maybe DesiredStatus)

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   use when filtering the <tt>ListTasks</tt> results. If you do not
--   specify a cluster, the default cluster is assumed.
listTasks_cluster :: Lens' ListTasks (Maybe Text)

-- | The name of the task definition family to use when filtering the
--   <tt>ListTasks</tt> results. Specifying a <tt>family</tt> limits the
--   results to tasks that belong to that family.
listTasks_family :: Lens' ListTasks (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a <tt>ListTasks</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listTasks_nextToken :: Lens' ListTasks (Maybe Text)

-- | The <tt>startedBy</tt> value with which to filter the task results.
--   Specifying a <tt>startedBy</tt> value limits the results to tasks that
--   were started with that value.
listTasks_startedBy :: Lens' ListTasks (Maybe Text)

-- | The name of the service to use when filtering the <tt>ListTasks</tt>
--   results. Specifying a <tt>serviceName</tt> limits the results to tasks
--   that belong to that service.
listTasks_serviceName :: Lens' ListTasks (Maybe Text)

-- | The launch type to use when filtering the <tt>ListTasks</tt> results.
listTasks_launchType :: Lens' ListTasks (Maybe LaunchType)

-- | The container instance ID or full ARN of the container instance to use
--   when filtering the <tt>ListTasks</tt> results. Specifying a
--   <tt>containerInstance</tt> limits the results to tasks that belong to
--   that container instance.
listTasks_containerInstance :: Lens' ListTasks (Maybe Text)

-- | The maximum number of task results returned by <tt>ListTasks</tt> in
--   paginated output. When this parameter is used, <tt>ListTasks</tt> only
--   returns <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>ListTasks</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 100. If this parameter is not used, then
--   <tt>ListTasks</tt> returns up to 100 results and a <tt>nextToken</tt>
--   value if applicable.
listTasks_maxResults :: Lens' ListTasks (Maybe Int)

-- | The <tt>nextToken</tt> value to include in a future <tt>ListTasks</tt>
--   request. When the results of a <tt>ListTasks</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
listTasksResponse_nextToken :: Lens' ListTasksResponse (Maybe Text)

-- | The list of task ARN entries for the <tt>ListTasks</tt> request.
listTasksResponse_taskArns :: Lens' ListTasksResponse (Maybe [Text])

-- | The response's http status code.
listTasksResponse_httpStatus :: Lens' ListTasksResponse Int

-- | The name of the capacity provider to update.
updateCapacityProvider_name :: Lens' UpdateCapacityProvider Text

-- | An object representing the parameters to update for the Auto Scaling
--   group capacity provider.
updateCapacityProvider_autoScalingGroupProvider :: Lens' UpdateCapacityProvider AutoScalingGroupProviderUpdate

-- | Details about the capacity provider.
updateCapacityProviderResponse_capacityProvider :: Lens' UpdateCapacityProviderResponse (Maybe CapacityProvider)

-- | The response's http status code.
updateCapacityProviderResponse_httpStatus :: Lens' UpdateCapacityProviderResponse Int

-- | The devices that are available on the container instance. The only
--   supported device type is a GPU.
registerContainerInstance_platformDevices :: Lens' RegisterContainerInstance (Maybe [PlatformDevice])

-- | The instance identity document signature for the EC2 instance to
--   register. This signature can be found by running the following command
--   from the instance: <tt>curl
--   http://169.254.169.254/latest/dynamic/instance-identity/signature/</tt>
registerContainerInstance_instanceIdentityDocumentSignature :: Lens' RegisterContainerInstance (Maybe Text)

-- | The short name or full Amazon Resource Name (ARN) of the cluster with
--   which to register your container instance. If you do not specify a
--   cluster, the default cluster is assumed.
registerContainerInstance_cluster :: Lens' RegisterContainerInstance (Maybe Text)

-- | The instance identity document for the EC2 instance to register. This
--   document can be found by running the following command from the
--   instance: <tt>curl
--   http://169.254.169.254/latest/dynamic/instance-identity/document/</tt>
registerContainerInstance_instanceIdentityDocument :: Lens' RegisterContainerInstance (Maybe Text)

-- | The ARN of the container instance (if it was previously registered).
registerContainerInstance_containerInstanceArn :: Lens' RegisterContainerInstance (Maybe Text)

-- | The version information for the Amazon ECS container agent and Docker
--   daemon running on the container instance.
registerContainerInstance_versionInfo :: Lens' RegisterContainerInstance (Maybe VersionInfo)

-- | The container instance attributes that this container instance
--   supports.
registerContainerInstance_attributes :: Lens' RegisterContainerInstance (Maybe [Attribute])

-- | The resources available on the instance.
registerContainerInstance_totalResources :: Lens' RegisterContainerInstance (Maybe [Resource])

-- | The metadata that you apply to the container instance to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
registerContainerInstance_tags :: Lens' RegisterContainerInstance (Maybe [Tag])

-- | The container instance that was registered.
registerContainerInstanceResponse_containerInstance :: Lens' RegisterContainerInstanceResponse (Maybe ContainerInstance)

-- | The response's http status code.
registerContainerInstanceResponse_httpStatus :: Lens' RegisterContainerInstanceResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   your container instance is running on. If you do not specify a
--   cluster, the default cluster is assumed.
updateContainerAgent_cluster :: Lens' UpdateContainerAgent (Maybe Text)

-- | The container instance ID or full ARN entries for the container
--   instance on which you would like to update the Amazon ECS container
--   agent.
updateContainerAgent_containerInstance :: Lens' UpdateContainerAgent Text

-- | The container instance for which the container agent was updated.
updateContainerAgentResponse_containerInstance :: Lens' UpdateContainerAgentResponse (Maybe ContainerInstance)

-- | The response's http status code.
updateContainerAgentResponse_httpStatus :: Lens' UpdateContainerAgentResponse Int

-- | Filters the container instances by status. For example, if you specify
--   the <tt>DRAINING</tt> status, the results include only container
--   instances that have been set to <tt>DRAINING</tt> using
--   UpdateContainerInstancesState. If you do not specify this parameter,
--   the default is to include container instances set to all states other
--   than <tt>INACTIVE</tt>.
listContainerInstances_status :: Lens' ListContainerInstances (Maybe ContainerInstanceStatus)

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the container instances to list. If you do not specify a
--   cluster, the default cluster is assumed.
listContainerInstances_cluster :: Lens' ListContainerInstances (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a
--   <tt>ListContainerInstances</tt> request indicating that more results
--   are available to fulfill the request and further calls will be needed.
--   If <tt>maxResults</tt> was provided, it is possible the number of
--   results to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listContainerInstances_nextToken :: Lens' ListContainerInstances (Maybe Text)

-- | You can filter the results of a <tt>ListContainerInstances</tt>
--   operation with cluster query language statements. For more
--   information, see <a>Cluster Query Language</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
listContainerInstances_filter :: Lens' ListContainerInstances (Maybe Text)

-- | The maximum number of container instance results returned by
--   <tt>ListContainerInstances</tt> in paginated output. When this
--   parameter is used, <tt>ListContainerInstances</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>ListContainerInstances</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListContainerInstances</tt> returns up
--   to 100 results and a <tt>nextToken</tt> value if applicable.
listContainerInstances_maxResults :: Lens' ListContainerInstances (Maybe Int)

-- | The list of container instances with full ARN entries for each
--   container instance associated with the specified cluster.
listContainerInstancesResponse_containerInstanceArns :: Lens' ListContainerInstancesResponse (Maybe [Text])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListContainerInstances</tt> request. When the results of a
--   <tt>ListContainerInstances</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
listContainerInstancesResponse_nextToken :: Lens' ListContainerInstancesResponse (Maybe Text)

-- | The response's http status code.
listContainerInstancesResponse_httpStatus :: Lens' ListContainerInstancesResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in.
updateServicePrimaryTaskSet_cluster :: Lens' UpdateServicePrimaryTaskSet Text

-- | The short name or full Amazon Resource Name (ARN) of the service that
--   the task set exists in.
updateServicePrimaryTaskSet_service :: Lens' UpdateServicePrimaryTaskSet Text

-- | The short name or full Amazon Resource Name (ARN) of the task set to
--   set as the primary task set in the deployment.
updateServicePrimaryTaskSet_primaryTaskSet :: Lens' UpdateServicePrimaryTaskSet Text

-- | Details about the task set.
updateServicePrimaryTaskSetResponse_taskSet :: Lens' UpdateServicePrimaryTaskSetResponse (Maybe TaskSet)

-- | The response's http status code.
updateServicePrimaryTaskSetResponse_httpStatus :: Lens' UpdateServicePrimaryTaskSetResponse Int

-- | The task definition family status with which to filter the
--   <tt>ListTaskDefinitionFamilies</tt> results. By default, both
--   <tt>ACTIVE</tt> and <tt>INACTIVE</tt> task definition families are
--   listed. If this parameter is set to <tt>ACTIVE</tt>, only task
--   definition families that have an <tt>ACTIVE</tt> task definition
--   revision are returned. If this parameter is set to <tt>INACTIVE</tt>,
--   only task definition families that do not have any <tt>ACTIVE</tt>
--   task definition revisions are returned. If you paginate the resulting
--   output, be sure to keep the <tt>status</tt> value constant in each
--   subsequent request.
listTaskDefinitionFamilies_status :: Lens' ListTaskDefinitionFamilies (Maybe TaskDefinitionFamilyStatus)

-- | The <tt>familyPrefix</tt> is a string that is used to filter the
--   results of <tt>ListTaskDefinitionFamilies</tt>. If you specify a
--   <tt>familyPrefix</tt>, only task definition family names that begin
--   with the <tt>familyPrefix</tt> string are returned.
listTaskDefinitionFamilies_familyPrefix :: Lens' ListTaskDefinitionFamilies (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a
--   <tt>ListTaskDefinitionFamilies</tt> request indicating that more
--   results are available to fulfill the request and further calls will be
--   needed. If <tt>maxResults</tt> was provided, it is possible the number
--   of results to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listTaskDefinitionFamilies_nextToken :: Lens' ListTaskDefinitionFamilies (Maybe Text)

-- | The maximum number of task definition family results returned by
--   <tt>ListTaskDefinitionFamilies</tt> in paginated output. When this
--   parameter is used, <tt>ListTaskDefinitions</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>ListTaskDefinitionFamilies</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListTaskDefinitionFamilies</tt>
--   returns up to 100 results and a <tt>nextToken</tt> value if
--   applicable.
listTaskDefinitionFamilies_maxResults :: Lens' ListTaskDefinitionFamilies (Maybe Int)

-- | The list of task definition family names that match the
--   <tt>ListTaskDefinitionFamilies</tt> request.
listTaskDefinitionFamiliesResponse_families :: Lens' ListTaskDefinitionFamiliesResponse (Maybe [Text])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListTaskDefinitionFamilies</tt> request. When the results of a
--   <tt>ListTaskDefinitionFamilies</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
listTaskDefinitionFamiliesResponse_nextToken :: Lens' ListTaskDefinitionFamiliesResponse (Maybe Text)

-- | The response's http status code.
listTaskDefinitionFamiliesResponse_httpStatus :: Lens' ListTaskDefinitionFamiliesResponse Int

-- | A list of container overrides in JSON format that specify the name of
--   a container in the specified task definition and the overrides it
--   should receive. You can override the default command for a container
--   (that is specified in the task definition or Docker image) with a
--   <tt>command</tt> override. You can also override existing environment
--   variables (that are specified in the task definition or Docker image)
--   on a container or add new environment variables to it with an
--   <tt>environment</tt> override.
--   
--   A total of 8192 characters are allowed for overrides. This limit
--   includes the JSON formatting characters of the override structure.
startTask_overrides :: Lens' StartTask (Maybe TaskOverride)

-- | The name of the task group to associate with the task. The default
--   value is the family name of the task definition (for example,
--   family:my-family-name).
startTask_group :: Lens' StartTask (Maybe Text)

-- | The short name or full Amazon Resource Name (ARN) of the cluster on
--   which to start your task. If you do not specify a cluster, the default
--   cluster is assumed.
startTask_cluster :: Lens' StartTask (Maybe Text)

-- | Specifies whether to propagate the tags from the task definition or
--   the service to the task. If no value is specified, the tags are not
--   propagated.
startTask_propagateTags :: Lens' StartTask (Maybe PropagateTags)

-- | Specifies whether to enable Amazon ECS managed tags for the task. For
--   more information, see <a>Tagging Your Amazon ECS Resources</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
startTask_enableECSManagedTags :: Lens' StartTask (Maybe Bool)

-- | The reference ID to use for the task.
startTask_referenceId :: Lens' StartTask (Maybe Text)

-- | An optional tag specified when a task is started. For example, if you
--   automatically trigger a task to run a batch process job, you could
--   apply a unique identifier for that job to your task with the
--   <tt>startedBy</tt> parameter. You can then identify which tasks belong
--   to that job by filtering the results of a ListTasks call with the
--   <tt>startedBy</tt> value. Up to 36 letters (uppercase and lowercase),
--   numbers, hyphens, and underscores are allowed.
--   
--   If a task is started by an Amazon ECS service, then the
--   <tt>startedBy</tt> parameter contains the deployment ID of the service
--   that starts it.
startTask_startedBy :: Lens' StartTask (Maybe Text)

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
startTask_networkConfiguration :: Lens' StartTask (Maybe NetworkConfiguration)

-- | Whether or not the execute command functionality is enabled for the
--   task. If <tt>true</tt>, this enables execute command functionality on
--   all containers in the task.
startTask_enableExecuteCommand :: Lens' StartTask (Maybe Bool)

-- | The metadata that you apply to the task to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
startTask_tags :: Lens' StartTask (Maybe [Tag])

-- | The container instance IDs or full ARN entries for the container
--   instances on which you would like to place your task. You can specify
--   up to 10 container instances.
startTask_containerInstances :: Lens' StartTask [Text]

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to start. If a <tt>revision</tt> is
--   not specified, the latest <tt>ACTIVE</tt> revision is used.
startTask_taskDefinition :: Lens' StartTask Text

-- | Any failures associated with the call.
startTaskResponse_failures :: Lens' StartTaskResponse (Maybe [Failure])

-- | A full description of the tasks that were started. Each task that was
--   successfully placed on your container instances is described.
startTaskResponse_tasks :: Lens' StartTaskResponse (Maybe [Task])

-- | The response's http status code.
startTaskResponse_httpStatus :: Lens' StartTaskResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   modify the capacity provider settings for. If you do not specify a
--   cluster, the default cluster is assumed.
putClusterCapacityProviders_cluster :: Lens' PutClusterCapacityProviders Text

-- | The name of one or more capacity providers to associate with the
--   cluster.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
putClusterCapacityProviders_capacityProviders :: Lens' PutClusterCapacityProviders [Text]

-- | The capacity provider strategy to use by default for the cluster.
--   
--   When creating a service or running a task on a cluster, if no capacity
--   provider or launch type is specified then the default capacity
--   provider strategy for the cluster is used.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
putClusterCapacityProviders_defaultCapacityProviderStrategy :: Lens' PutClusterCapacityProviders [CapacityProviderStrategyItem]

-- | Details about the cluster.
putClusterCapacityProvidersResponse_cluster :: Lens' PutClusterCapacityProvidersResponse (Maybe Cluster)

-- | The response's http status code.
putClusterCapacityProvidersResponse_httpStatus :: Lens' PutClusterCapacityProvidersResponse Int

-- | The resource name for which to modify the account setting. If
--   <tt>serviceLongArnFormat</tt> is specified, the ARN for your Amazon
--   ECS services is affected. If <tt>taskLongArnFormat</tt> is specified,
--   the ARN and resource ID for your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the ENI limit for your Amazon
--   ECS container instances is affected. If <tt>containerInsights</tt> is
--   specified, the default setting for CloudWatch Container Insights for
--   your clusters is affected.
putAccountSettingDefault_name :: Lens' PutAccountSettingDefault SettingName

-- | The account setting value for the specified principal ARN. Accepted
--   values are <tt>enabled</tt> and <tt>disabled</tt>.
putAccountSettingDefault_value :: Lens' PutAccountSettingDefault Text

-- | The current setting for a resource.
putAccountSettingDefaultResponse_setting :: Lens' PutAccountSettingDefaultResponse (Maybe Setting)

-- | The response's http status code.
putAccountSettingDefaultResponse_httpStatus :: Lens' PutAccountSettingDefaultResponse Int

-- | The value of the attribute with which to filter results. You must also
--   specify an attribute name to use this parameter.
listAttributes_attributeValue :: Lens' ListAttributes (Maybe Text)

-- | The short name or full Amazon Resource Name (ARN) of the cluster to
--   list attributes. If you do not specify a cluster, the default cluster
--   is assumed.
listAttributes_cluster :: Lens' ListAttributes (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a <tt>ListAttributes</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listAttributes_nextToken :: Lens' ListAttributes (Maybe Text)

-- | The name of the attribute with which to filter the results.
listAttributes_attributeName :: Lens' ListAttributes (Maybe Text)

-- | The maximum number of cluster results returned by
--   <tt>ListAttributes</tt> in paginated output. When this parameter is
--   used, <tt>ListAttributes</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListAttributes</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListAttributes</tt> returns up to 100
--   results and a <tt>nextToken</tt> value if applicable.
listAttributes_maxResults :: Lens' ListAttributes (Maybe Int)

-- | The type of the target with which to list attributes.
listAttributes_targetType :: Lens' ListAttributes TargetType

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListAttributes</tt> request. When the results of a
--   <tt>ListAttributes</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
listAttributesResponse_nextToken :: Lens' ListAttributesResponse (Maybe Text)

-- | A list of attribute objects that meet the criteria of the request.
listAttributesResponse_attributes :: Lens' ListAttributesResponse (Maybe [Attribute])

-- | The response's http status code.
listAttributesResponse_httpStatus :: Lens' ListAttributesResponse Int

-- | The Amazon Resource Name (ARN) or short name of the cluster the task
--   is running in. If you do not specify a cluster, the default cluster is
--   assumed.
executeCommand_cluster :: Lens' ExecuteCommand (Maybe Text)

-- | The name of the container to execute the command on. A container name
--   only needs to be specified for tasks containing multiple containers.
executeCommand_container :: Lens' ExecuteCommand (Maybe Text)

-- | The command to run on the container.
executeCommand_command :: Lens' ExecuteCommand Text

-- | Use this flag to run your command in interactive mode.
executeCommand_interactive :: Lens' ExecuteCommand Bool

-- | The Amazon Resource Name (ARN) or ID of the task the container is part
--   of.
executeCommand_task :: Lens' ExecuteCommand Text

-- | The Amazon Resource Name (ARN) of the cluster.
executeCommandResponse_clusterArn :: Lens' ExecuteCommandResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the container.
executeCommandResponse_containerArn :: Lens' ExecuteCommandResponse (Maybe Text)

-- | The Amazon Resource Name (ARN) of the task.
executeCommandResponse_taskArn :: Lens' ExecuteCommandResponse (Maybe Text)

-- | The name of the container.
executeCommandResponse_containerName :: Lens' ExecuteCommandResponse (Maybe Text)

-- | Whether or not the execute command session is running in interactive
--   mode. Amazon ECS only supports initiating interactive sessions, so you
--   must specify <tt>true</tt> for this value.
executeCommandResponse_interactive :: Lens' ExecuteCommandResponse (Maybe Bool)

-- | The details of the SSM session that was created for this instance of
--   execute-command.
executeCommandResponse_session :: Lens' ExecuteCommandResponse (Maybe Session)

-- | The response's http status code.
executeCommandResponse_httpStatus :: Lens' ExecuteCommandResponse Int

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full Amazon Resource Name (ARN) of the task definition to
--   deregister. You must specify a <tt>revision</tt>.
deregisterTaskDefinition_taskDefinition :: Lens' DeregisterTaskDefinition Text

-- | The full description of the deregistered task.
deregisterTaskDefinitionResponse_taskDefinition :: Lens' DeregisterTaskDefinitionResponse (Maybe TaskDefinition)

-- | The response's http status code.
deregisterTaskDefinitionResponse_httpStatus :: Lens' DeregisterTaskDefinitionResponse Int

-- | The Amazon Resource Name (ARN) of the resource to which to add tags.
--   Currently, the supported resources are Amazon ECS capacity providers,
--   tasks, services, task definitions, clusters, and container instances.
tagResource_resourceArn :: Lens' TagResource Text

-- | The tags to add to the resource. A tag is an array of key-value pairs.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
tagResource_tags :: Lens' TagResource [Tag]

-- | The response's http status code.
tagResourceResponse_httpStatus :: Lens' TagResourceResponse Int

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request. Up to 32 ASCII characters are allowed.
createTaskSet_clientToken :: Lens' CreateTaskSet (Maybe Text)

-- | The platform version that the tasks in the task set should use. A
--   platform version is specified only for tasks using the Fargate launch
--   type. If one isn't specified, the <tt>LATEST</tt> platform version is
--   used by default.
createTaskSet_platformVersion :: Lens' CreateTaskSet (Maybe Text)

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
createTaskSet_scale :: Lens' CreateTaskSet (Maybe Scale)

-- | A load balancer object representing the load balancer to use with the
--   task set. The supported load balancer types are either an Application
--   Load Balancer or a Network Load Balancer.
createTaskSet_loadBalancers :: Lens' CreateTaskSet (Maybe [LoadBalancer])

-- | The launch type that new tasks in the task set will use. For more
--   information, see <a>Amazon ECS Launch Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
createTaskSet_launchType :: Lens' CreateTaskSet (Maybe LaunchType)

-- | An optional non-unique tag that identifies this task set in external
--   systems. If the task set is associated with a service discovery
--   registry, the tasks in this task set will have the
--   <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute set to the
--   provided value.
createTaskSet_externalId :: Lens' CreateTaskSet (Maybe Text)

-- | An object representing the network configuration for a task set.
createTaskSet_networkConfiguration :: Lens' CreateTaskSet (Maybe NetworkConfiguration)

-- | The details of the service discovery registries to assign to this task
--   set. For more information, see <a>Service Discovery</a>.
createTaskSet_serviceRegistries :: Lens' CreateTaskSet (Maybe [ServiceRegistry])

-- | The capacity provider strategy to use for the task set.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
createTaskSet_capacityProviderStrategy :: Lens' CreateTaskSet (Maybe [CapacityProviderStrategyItem])

-- | The metadata that you apply to the task set to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. When a service is deleted, the tags are deleted
--   as well.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
createTaskSet_tags :: Lens' CreateTaskSet (Maybe [Tag])

-- | The short name or full Amazon Resource Name (ARN) of the service to
--   create the task set in.
createTaskSet_service :: Lens' CreateTaskSet Text

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service to create the task set in.
createTaskSet_cluster :: Lens' CreateTaskSet Text

-- | The task definition for the tasks in the task set to use.
createTaskSet_taskDefinition :: Lens' CreateTaskSet Text

-- | Information about a set of Amazon ECS tasks in either an CodeDeploy or
--   an <tt>EXTERNAL</tt> deployment. A task set includes details such as
--   the desired number of tasks, how many tasks are running, and whether
--   the task set serves production traffic.
createTaskSetResponse_taskSet :: Lens' CreateTaskSetResponse (Maybe TaskSet)

-- | The response's http status code.
createTaskSetResponse_httpStatus :: Lens' CreateTaskSetResponse Int

-- | Specifies whether you want to see the resource tags for the task. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
describeTasks_include :: Lens' DescribeTasks (Maybe [TaskField])

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the task or tasks to describe. If you do not specify a cluster,
--   the default cluster is assumed. This parameter is required if the task
--   or tasks you are describing were launched in any cluster other than
--   the default cluster.
describeTasks_cluster :: Lens' DescribeTasks (Maybe Text)

-- | A list of up to 100 task IDs or full ARN entries.
describeTasks_tasks :: Lens' DescribeTasks [Text]

-- | Any failures associated with the call.
describeTasksResponse_failures :: Lens' DescribeTasksResponse (Maybe [Failure])

-- | The list of tasks.
describeTasksResponse_tasks :: Lens' DescribeTasksResponse (Maybe [Task])

-- | The response's http status code.
describeTasksResponse_httpStatus :: Lens' DescribeTasksResponse Int

-- | The <tt>nextToken</tt> value returned from a <tt>ListClusters</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listClusters_nextToken :: Lens' ListClusters (Maybe Text)

-- | The maximum number of cluster results returned by
--   <tt>ListClusters</tt> in paginated output. When this parameter is
--   used, <tt>ListClusters</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListClusters</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListClusters</tt> returns up to 100
--   results and a <tt>nextToken</tt> value if applicable.
listClusters_maxResults :: Lens' ListClusters (Maybe Int)

-- | The list of full Amazon Resource Name (ARN) entries for each cluster
--   associated with your account.
listClustersResponse_clusterArns :: Lens' ListClustersResponse (Maybe [Text])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListClusters</tt> request. When the results of a
--   <tt>ListClusters</tt> request exceed <tt>maxResults</tt>, this value
--   can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
listClustersResponse_nextToken :: Lens' ListClustersResponse (Maybe Text)

-- | The response's http status code.
listClustersResponse_httpStatus :: Lens' ListClustersResponse Int

-- | The Amazon Resource Name (ARN) of the resource from which to delete
--   tags. Currently, the supported resources are Amazon ECS capacity
--   providers, tasks, services, task definitions, clusters, and container
--   instances.
untagResource_resourceArn :: Lens' UntagResource Text

-- | The keys of the tags to be removed.
untagResource_tagKeys :: Lens' UntagResource [Text]

-- | The response's http status code.
untagResourceResponse_httpStatus :: Lens' UntagResourceResponse Int

-- | Specifies whether you want to see the resource tags for the service.
--   If <tt>TAGS</tt> is specified, the tags are included in the response.
--   If this field is omitted, tags are not included in the response.
describeServices_include :: Lens' DescribeServices (Maybe [ServiceField])

-- | The short name or full Amazon Resource Name (ARN)the cluster that
--   hosts the service to describe. If you do not specify a cluster, the
--   default cluster is assumed. This parameter is required if the service
--   or services you are describing were launched in any cluster other than
--   the default cluster.
describeServices_cluster :: Lens' DescribeServices (Maybe Text)

-- | A list of services to describe. You may specify up to 10 services to
--   describe in a single operation.
describeServices_services :: Lens' DescribeServices [Text]

-- | Any failures associated with the call.
describeServicesResponse_failures :: Lens' DescribeServicesResponse (Maybe [Failure])

-- | The list of services described.
describeServicesResponse_services :: Lens' DescribeServicesResponse (Maybe [ContainerService])

-- | The response's http status code.
describeServicesResponse_httpStatus :: Lens' DescribeServicesResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the container instance to deregister. If you do not specify a
--   cluster, the default cluster is assumed.
deregisterContainerInstance_cluster :: Lens' DeregisterContainerInstance (Maybe Text)

-- | Forces the deregistration of the container instance. If you have tasks
--   running on the container instance when you deregister it with the
--   <tt>force</tt> option, these tasks remain running until you terminate
--   the instance or the tasks stop through some other means, but they are
--   orphaned (no longer monitored or accounted for by Amazon ECS). If an
--   orphaned task on your container instance is part of an Amazon ECS
--   service, then the service scheduler starts another copy of that task,
--   on a different container instance if possible.
--   
--   Any containers in orphaned service tasks that are registered with a
--   Classic Load Balancer or an Application Load Balancer target group are
--   deregistered. They begin connection draining according to the settings
--   on the load balancer or target group.
deregisterContainerInstance_force :: Lens' DeregisterContainerInstance (Maybe Bool)

-- | The container instance ID or full ARN of the container instance to
--   deregister. The ARN contains the <tt>arn:aws:ecs</tt> namespace,
--   followed by the Region of the container instance, the Amazon Web
--   Services account ID of the container instance owner, the
--   <tt>container-instance</tt> namespace, and then the container instance
--   ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
deregisterContainerInstance_containerInstance :: Lens' DeregisterContainerInstance Text

-- | The container instance that was deregistered.
deregisterContainerInstanceResponse_containerInstance :: Lens' DeregisterContainerInstanceResponse (Maybe ContainerInstance)

-- | The response's http status code.
deregisterContainerInstanceResponse_httpStatus :: Lens' DeregisterContainerInstanceResponse Int

-- | The name of the cluster to modify the settings for.
updateClusterSettings_cluster :: Lens' UpdateClusterSettings Text

-- | The setting to use by default for a cluster. This parameter is used to
--   enable CloudWatch Container Insights for a cluster. If this value is
--   specified, it will override the <tt>containerInsights</tt> value set
--   with PutAccountSetting or PutAccountSettingDefault.
updateClusterSettings_settings :: Lens' UpdateClusterSettings [ClusterSetting]

-- | Details about the cluster
updateClusterSettingsResponse_cluster :: Lens' UpdateClusterSettingsResponse (Maybe Cluster)

-- | The response's http status code.
updateClusterSettingsResponse_httpStatus :: Lens' UpdateClusterSettingsResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   contains the resource to delete attributes. If you do not specify a
--   cluster, the default cluster is assumed.
deleteAttributes_cluster :: Lens' DeleteAttributes (Maybe Text)

-- | The attributes to delete from your resource. You can specify up to 10
--   attributes per request. For custom attributes, specify the attribute
--   name and target ID, but do not specify the value. If you specify the
--   target ID using the short form, you must also specify the target type.
deleteAttributes_attributes :: Lens' DeleteAttributes [Attribute]

-- | A list of attribute objects that were successfully deleted from your
--   resource.
deleteAttributesResponse_attributes :: Lens' DeleteAttributesResponse (Maybe [Attribute])

-- | The response's http status code.
deleteAttributesResponse_httpStatus :: Lens' DeleteAttributesResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   contains the resource to apply attributes. If you do not specify a
--   cluster, the default cluster is assumed.
putAttributes_cluster :: Lens' PutAttributes (Maybe Text)

-- | The attributes to apply to your resource. You can specify up to 10
--   custom attributes per resource. You can specify up to 10 attributes in
--   a single call.
putAttributes_attributes :: Lens' PutAttributes [Attribute]

-- | The attributes applied to your resource.
putAttributesResponse_attributes :: Lens' PutAttributesResponse (Maybe [Attribute])

-- | The response's http status code.
putAttributesResponse_httpStatus :: Lens' PutAttributesResponse Int

-- | The value of the account settings with which to filter results. You
--   must also specify an account setting name to use this parameter.
listAccountSettings_value :: Lens' ListAccountSettings (Maybe Text)

-- | The <tt>nextToken</tt> value returned from a
--   <tt>ListAccountSettings</tt> request indicating that more results are
--   available to fulfill the request and further calls will be needed. If
--   <tt>maxResults</tt> was provided, it is possible the number of results
--   to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
listAccountSettings_nextToken :: Lens' ListAccountSettings (Maybe Text)

-- | The name of the account setting you want to list the settings for.
listAccountSettings_name :: Lens' ListAccountSettings (Maybe SettingName)

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If this field is omitted, the account settings are listed
--   only for the authenticated user.
--   
--   Federated users assume the account setting of the root user and can't
--   have explicit account settings set for them.
listAccountSettings_principalArn :: Lens' ListAccountSettings (Maybe Text)

-- | Specifies whether to return the effective settings. If <tt>true</tt>,
--   the account settings for the root user or the default setting for the
--   <tt>principalArn</tt> are returned. If <tt>false</tt>, the account
--   settings for the <tt>principalArn</tt> are returned if they are set.
--   Otherwise, no account settings are returned.
listAccountSettings_effectiveSettings :: Lens' ListAccountSettings (Maybe Bool)

-- | The maximum number of account setting results returned by
--   <tt>ListAccountSettings</tt> in paginated output. When this parameter
--   is used, <tt>ListAccountSettings</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>ListAccountSettings</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 10. If this
--   parameter is not used, then <tt>ListAccountSettings</tt> returns up to
--   10 results and a <tt>nextToken</tt> value if applicable.
listAccountSettings_maxResults :: Lens' ListAccountSettings (Maybe Int)

-- | The account settings for the resource.
listAccountSettingsResponse_settings :: Lens' ListAccountSettingsResponse (Maybe [Setting])

-- | The <tt>nextToken</tt> value to include in a future
--   <tt>ListAccountSettings</tt> request. When the results of a
--   <tt>ListAccountSettings</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
listAccountSettingsResponse_nextToken :: Lens' ListAccountSettingsResponse (Maybe Text)

-- | The response's http status code.
listAccountSettingsResponse_httpStatus :: Lens' ListAccountSettingsResponse Int

-- | If <tt>true</tt>, this allows you to delete a task set even if it
--   hasn't been scaled down to zero.
deleteTaskSet_force :: Lens' DeleteTaskSet (Maybe Bool)

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in to delete.
deleteTaskSet_cluster :: Lens' DeleteTaskSet Text

-- | The short name or full Amazon Resource Name (ARN) of the service that
--   hosts the task set to delete.
deleteTaskSet_service :: Lens' DeleteTaskSet Text

-- | The task set ID or full Amazon Resource Name (ARN) of the task set to
--   delete.
deleteTaskSet_taskSet :: Lens' DeleteTaskSet Text

-- | Details about the task set.
deleteTaskSetResponse_taskSet :: Lens' DeleteTaskSetResponse (Maybe TaskSet)

-- | The response's http status code.
deleteTaskSetResponse_httpStatus :: Lens' DeleteTaskSetResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in.
updateTaskSet_cluster :: Lens' UpdateTaskSet Text

-- | The short name or full Amazon Resource Name (ARN) of the service that
--   the task set exists in.
updateTaskSet_service :: Lens' UpdateTaskSet Text

-- | The short name or full Amazon Resource Name (ARN) of the task set to
--   update.
updateTaskSet_taskSet :: Lens' UpdateTaskSet Text

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
updateTaskSet_scale :: Lens' UpdateTaskSet Scale

-- | Details about the task set.
updateTaskSetResponse_taskSet :: Lens' UpdateTaskSetResponse (Maybe TaskSet)

-- | The response's http status code.
updateTaskSetResponse_httpStatus :: Lens' UpdateTaskSetResponse Int

-- | The metadata that you apply to the capacity provider to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
createCapacityProvider_tags :: Lens' CreateCapacityProvider (Maybe [Tag])

-- | The name of the capacity provider. Up to 255 characters are allowed,
--   including letters (upper and lowercase), numbers, underscores, and
--   hyphens. The name cannot be prefixed with "<tt>aws</tt>",
--   "<tt>ecs</tt>", or "<tt>fargate</tt>".
createCapacityProvider_name :: Lens' CreateCapacityProvider Text

-- | The details of the Auto Scaling group for the capacity provider.
createCapacityProvider_autoScalingGroupProvider :: Lens' CreateCapacityProvider AutoScalingGroupProvider

-- | The full description of the new capacity provider.
createCapacityProviderResponse_capacityProvider :: Lens' CreateCapacityProviderResponse (Maybe CapacityProvider)

-- | The response's http status code.
createCapacityProviderResponse_httpStatus :: Lens' CreateCapacityProviderResponse Int

-- | The ID or full Amazon Resource Name (ARN) of task sets to describe.
describeTaskSets_taskSets :: Lens' DescribeTaskSets (Maybe [Text])

-- | Specifies whether to see the resource tags for the task set. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
describeTaskSets_include :: Lens' DescribeTaskSets (Maybe [TaskSetField])

-- | The short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task sets exist in.
describeTaskSets_cluster :: Lens' DescribeTaskSets Text

-- | The short name or full Amazon Resource Name (ARN) of the service that
--   the task sets exist in.
describeTaskSets_service :: Lens' DescribeTaskSets Text

-- | The list of task sets described.
describeTaskSetsResponse_taskSets :: Lens' DescribeTaskSetsResponse (Maybe [TaskSet])

-- | Any failures associated with the call.
describeTaskSetsResponse_failures :: Lens' DescribeTaskSetsResponse (Maybe [Failure])

-- | The response's http status code.
describeTaskSetsResponse_httpStatus :: Lens' DescribeTaskSetsResponse Int

-- | The Elastic Inference accelerators to use for the containers in the
--   task.
registerTaskDefinition_inferenceAccelerators :: Lens' RegisterTaskDefinition (Maybe [InferenceAccelerator])

-- | The Amazon Resource Name (ARN) of the task execution role that grants
--   the Amazon ECS container agent permission to make Amazon Web Services
--   API calls on your behalf. The task execution IAM role is required
--   depending on the requirements of your task. For more information, see
--   <a>Amazon ECS task execution IAM role</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
registerTaskDefinition_executionRoleArn :: Lens' RegisterTaskDefinition (Maybe Text)

-- | The task launch type that Amazon ECS should validate the task
--   definition against. A client exception is returned if the task
--   definition doesn't validate against the compatibilities specified. If
--   no value is specified, the parameter is omitted from the response.
registerTaskDefinition_requiresCompatibilities :: Lens' RegisterTaskDefinition (Maybe [Compatibility])

-- | The amount of ephemeral storage to allocate for the task. This
--   parameter is used to expand the total amount of ephemeral storage
--   available, beyond the default amount, for tasks hosted on Fargate. For
--   more information, see <a>Fargate task storage</a> in the <i>Amazon ECS
--   User Guide for Fargate</i>.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
registerTaskDefinition_ephemeralStorage :: Lens' RegisterTaskDefinition (Maybe EphemeralStorage)

-- | The process namespace to use for the containers in the task. The valid
--   values are <tt>host</tt> or <tt>task</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> PID mode on the same container instance share the same
--   process namespace with the host Amazon EC2 instance. If <tt>task</tt>
--   is specified, all containers within the specified task share the same
--   process namespace. If no value is specified, the default is a private
--   namespace. For more information, see <a>PID settings</a> in the
--   <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
registerTaskDefinition_pidMode :: Lens' RegisterTaskDefinition (Maybe PidMode)

-- | The IPC resource namespace to use for the containers in the task. The
--   valid values are <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If
--   <tt>host</tt> is specified, then all containers within the tasks that
--   specified the <tt>host</tt> IPC mode on the same container instance
--   share the same IPC resources with the host Amazon EC2 instance. If
--   <tt>task</tt> is specified, all containers within the specified task
--   share the same IPC resources. If <tt>none</tt> is specified, then IPC
--   resources within the containers of a task are private and not shared
--   with other containers in a task or on the container instance. If no
--   value is specified, then the IPC resource namespace sharing depends on
--   the Docker daemon setting on the container instance. For more
--   information, see <a>IPC settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
registerTaskDefinition_ipcMode :: Lens' RegisterTaskDefinition (Maybe IpcMode)

-- | The amount of memory (in MiB) used by the task. It can be expressed as
--   an integer using MiB, for example <tt>1024</tt>, or as a string using
--   GB, for example <tt>1GB</tt> or <tt>1 GB</tt>, in a task definition.
--   String values are converted to an integer indicating the MiB when the
--   task definition is registered.
--   
--   Task-level CPU and memory parameters are ignored for Windows
--   containers. We recommend specifying container-level resources for
--   Windows containers.
--   
--   If using the EC2 launch type, this field is optional.
--   
--   If using the Fargate launch type, this field is required and you must
--   use one of the following values, which determines your range of
--   supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
registerTaskDefinition_memory :: Lens' RegisterTaskDefinition (Maybe Text)

-- | The configuration details for the App Mesh proxy.
--   
--   For tasks hosted on Amazon EC2 instances, the container instances
--   require at least version <tt>1.26.0</tt> of the container agent and at
--   least version <tt>1.26.0-1</tt> of the <tt>ecs-init</tt> package to
--   enable a proxy configuration. If your container instances are launched
--   from the Amazon ECS-optimized AMI version <tt>20190301</tt> or later,
--   then they contain the required versions of the container agent and
--   <tt>ecs-init</tt>. For more information, see <a>Amazon ECS-optimized
--   AMI versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
registerTaskDefinition_proxyConfiguration :: Lens' RegisterTaskDefinition (Maybe ProxyConfiguration)

-- | The short name or full Amazon Resource Name (ARN) of the IAM role that
--   containers in this task can assume. All containers in this task are
--   granted the permissions that are specified in this role. For more
--   information, see <a>IAM Roles for Tasks</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
registerTaskDefinition_taskRoleArn :: Lens' RegisterTaskDefinition (Maybe Text)

-- | An array of placement constraint objects to use for the task. You can
--   specify a maximum of 10 constraints per task (this limit includes
--   constraints in the task definition and those specified at runtime).
registerTaskDefinition_placementConstraints :: Lens' RegisterTaskDefinition (Maybe [TaskDefinitionPlacementConstraint])

-- | The Docker networking mode to use for the containers in the task. The
--   valid values are <tt>none</tt>, <tt>bridge</tt>, <tt>awsvpc</tt>, and
--   <tt>host</tt>. If no network mode is specified, the default is
--   <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
registerTaskDefinition_networkMode :: Lens' RegisterTaskDefinition (Maybe NetworkMode)

-- | A list of volume definitions in JSON format that containers in your
--   task may use.
registerTaskDefinition_volumes :: Lens' RegisterTaskDefinition (Maybe [Volume])

-- | The number of CPU units used by the task. It can be expressed as an
--   integer using CPU units, for example <tt>1024</tt>, or as a string
--   using vCPUs, for example <tt>1 vCPU</tt> or <tt>1 vcpu</tt>, in a task
--   definition. String values are converted to an integer indicating the
--   CPU units when the task definition is registered.
--   
--   Task-level CPU and memory parameters are ignored for Windows
--   containers. We recommend specifying container-level resources for
--   Windows containers.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
registerTaskDefinition_cpu :: Lens' RegisterTaskDefinition (Maybe Text)

-- | The metadata that you apply to the task definition to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
registerTaskDefinition_tags :: Lens' RegisterTaskDefinition (Maybe [Tag])

-- | You must specify a <tt>family</tt> for a task definition, which allows
--   you to track multiple versions of the same task definition. The
--   <tt>family</tt> is used as a name for your task definition. Up to 255
--   letters (uppercase and lowercase), numbers, underscores, and hyphens
--   are allowed.
registerTaskDefinition_family :: Lens' RegisterTaskDefinition Text

-- | A list of container definitions in JSON format that describe the
--   different containers that make up your task.
registerTaskDefinition_containerDefinitions :: Lens' RegisterTaskDefinition [ContainerDefinition]

-- | The full description of the registered task definition.
registerTaskDefinitionResponse_taskDefinition :: Lens' RegisterTaskDefinitionResponse (Maybe TaskDefinition)

-- | The list of tags associated with the task definition.
registerTaskDefinitionResponse_tags :: Lens' RegisterTaskDefinitionResponse (Maybe [Tag])

-- | The response's http status code.
registerTaskDefinitionResponse_httpStatus :: Lens' RegisterTaskDefinitionResponse Int

-- | The short name or full Amazon Resource Name (ARN) of the cluster on
--   which to run your service. If you do not specify a cluster, the
--   default cluster is assumed.
createService_cluster :: Lens' CreateService (Maybe Text)

-- | Unique, case-sensitive identifier that you provide to ensure the
--   idempotency of the request. Up to 32 ASCII characters are allowed.
createService_clientToken :: Lens' CreateService (Maybe Text)

-- | Specifies whether to propagate the tags from the task definition or
--   the service to the tasks in the service. If no value is specified, the
--   tags are not propagated. Tags can only be propagated to the tasks
--   within the service during service creation. To add tags to a task
--   after service creation or task creation, use the TagResource API
--   action.
createService_propagateTags :: Lens' CreateService (Maybe PropagateTags)

-- | The platform version that your tasks in the service are running on. A
--   platform version is specified only for tasks using the Fargate launch
--   type. If one isn't specified, the <tt>LATEST</tt> platform version is
--   used by default. For more information, see <a>Fargate platform
--   versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
createService_platformVersion :: Lens' CreateService (Maybe Text)

-- | Specifies whether to enable Amazon ECS managed tags for the tasks
--   within the service. For more information, see <a>Tagging Your Amazon
--   ECS Resources</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
createService_enableECSManagedTags :: Lens' CreateService (Maybe Bool)

-- | The number of instantiations of the specified task definition to place
--   and keep running on your cluster.
--   
--   This is required if <tt>schedulingStrategy</tt> is <tt>REPLICA</tt> or
--   is not specified. If <tt>schedulingStrategy</tt> is <tt>DAEMON</tt>
--   then this is not required.
createService_desiredCount :: Lens' CreateService (Maybe Int)

-- | A load balancer object representing the load balancers to use with
--   your service. For more information, see <a>Service Load Balancing</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the service is using the rolling update (<tt>ECS</tt>) deployment
--   controller and using either an Application Load Balancer or Network
--   Load Balancer, you must specify one or more target group ARNs to
--   attach to the service. The service-linked role is required for
--   services that make use of multiple target groups. For more
--   information, see <a>Using service-linked roles for Amazon ECS</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the service is using the <tt>CODE_DEPLOY</tt> deployment
--   controller, the service is required to use either an Application Load
--   Balancer or Network Load Balancer. When creating an CodeDeploy
--   deployment group, you specify two target groups (referred to as a
--   <tt>targetGroupPair</tt>). During a deployment, CodeDeploy determines
--   which task set in your service has the status <tt>PRIMARY</tt> and
--   associates one target group with it, and then associates the other
--   target group with the replacement task set. The load balancer can also
--   have up to two listeners: a required listener for production traffic
--   and an optional listener that allows you perform validation tests with
--   Lambda functions before routing production traffic to it.
--   
--   After you create a service using the <tt>ECS</tt> deployment
--   controller, the load balancer name or target group ARN, container
--   name, and container port specified in the service definition are
--   immutable. If you are using the <tt>CODE_DEPLOY</tt> deployment
--   controller, these values can be changed when updating the service.
--   
--   For Application Load Balancers and Network Load Balancers, this object
--   must contain the load balancer target group ARN, the container name
--   (as it appears in a container definition), and the container port to
--   access from the load balancer. The load balancer name parameter must
--   be omitted. When a task from this service is placed on a container
--   instance, the container instance and port combination is registered as
--   a target in the target group specified here.
--   
--   For Classic Load Balancers, this object must contain the load balancer
--   name, the container name (as it appears in a container definition),
--   and the container port to access from the load balancer. The target
--   group ARN parameter must be omitted. When a task from this service is
--   placed on a container instance, the container instance is registered
--   with the load balancer specified here.
--   
--   Services with tasks that use the <tt>awsvpc</tt> network mode (for
--   example, those with the Fargate launch type) only support Application
--   Load Balancers and Network Load Balancers. Classic Load Balancers are
--   not supported. Also, when you create any target groups for these
--   services, you must choose <tt>ip</tt> as the target type, not
--   <tt>instance</tt>, because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
createService_loadBalancers :: Lens' CreateService (Maybe [LoadBalancer])

-- | The name or full Amazon Resource Name (ARN) of the IAM role that
--   allows Amazon ECS to make calls to your load balancer on your behalf.
--   This parameter is only permitted if you are using a load balancer with
--   your service and your task definition does not use the <tt>awsvpc</tt>
--   network mode. If you specify the <tt>role</tt> parameter, you must
--   also specify a load balancer object with the <tt>loadBalancers</tt>
--   parameter.
--   
--   If your account has already created the Amazon ECS service-linked
--   role, that role is used by default for your service unless you specify
--   a role here. The service-linked role is required if your task
--   definition uses the <tt>awsvpc</tt> network mode or if the service is
--   configured to use service discovery, an external deployment
--   controller, multiple target groups, or Elastic Inference accelerators
--   in which case you should not specify a role here. For more
--   information, see <a>Using service-linked roles for Amazon ECS</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your specified role has a path other than <tt>/</tt>, then you must
--   either specify the full role ARN (this is recommended) or prefix the
--   role name with the path. For example, if a role with the name
--   <tt>bar</tt> has a path of <tt>/foo/</tt> then you would specify
--   <tt>/foo/bar</tt> as the role name. For more information, see
--   <a>Friendly names and paths</a> in the <i>IAM User Guide</i>.
createService_role :: Lens' CreateService (Maybe Text)

-- | An array of placement constraint objects to use for tasks in your
--   service. You can specify a maximum of 10 constraints per task (this
--   limit includes constraints in the task definition and those specified
--   at runtime).
createService_placementConstraints :: Lens' CreateService (Maybe [PlacementConstraint])

-- | The placement strategy objects to use for tasks in your service. You
--   can specify a maximum of 5 strategy rules per service.
createService_placementStrategy :: Lens' CreateService (Maybe [PlacementStrategy])

-- | The deployment controller to use for the service. If no deployment
--   controller is specified, the default value of <tt>ECS</tt> is used.
createService_deploymentController :: Lens' CreateService (Maybe DeploymentController)

-- | The infrastructure on which to run your service. For more information,
--   see <a>Amazon ECS launch types</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   The <tt>FARGATE</tt> launch type runs your tasks on Fargate On-Demand
--   infrastructure.
--   
--   Fargate Spot infrastructure is available for use but a capacity
--   provider strategy must be used. For more information, see <a>Fargate
--   capacity providers</a> in the <i>Amazon ECS User Guide for
--   Fargate</i>.
--   
--   The <tt>EC2</tt> launch type runs your tasks on Amazon EC2 instances
--   registered to your cluster.
--   
--   The <tt>EXTERNAL</tt> launch type runs your tasks on your on-premise
--   server or virtual machine (VM) capacity registered to your cluster.
--   
--   A service can use either a launch type or a capacity provider
--   strategy. If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
createService_launchType :: Lens' CreateService (Maybe LaunchType)

-- | The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to run in your service. If a
--   <tt>revision</tt> is not specified, the latest <tt>ACTIVE</tt>
--   revision is used.
--   
--   A task definition must be specified if the service is using either the
--   <tt>ECS</tt> or <tt>CODE_DEPLOY</tt> deployment controllers.
createService_taskDefinition :: Lens' CreateService (Maybe Text)

-- | The scheduling strategy to use for the service. For more information,
--   see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions. This scheduler strategy is required if the
--   service is using the <tt>CODE_DEPLOY</tt> or <tt>EXTERNAL</tt>
--   deployment controller types.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement constraints.
--   When you're using this strategy, you don't need to specify a desired
--   number of tasks, a task placement strategy, or use Service Auto
--   Scaling policies.Tasks using the Fargate launch type or the
--   <tt>CODE_DEPLOY</tt> or <tt>EXTERNAL</tt> deployment controller types
--   don't support the <tt>DAEMON</tt> scheduling strategy.</li>
--   </ul>
createService_schedulingStrategy :: Lens' CreateService (Maybe SchedulingStrategy)

-- | The period of time, in seconds, that the Amazon ECS service scheduler
--   should ignore unhealthy Elastic Load Balancing target health checks
--   after a task has first started. This is only used when your service is
--   configured to use a load balancer. If your service has a load balancer
--   defined and you don't specify a health check grace period value, the
--   default value of <tt>0</tt> is used.
--   
--   If your service's tasks take a while to start and respond to Elastic
--   Load Balancing health checks, you can specify a health check grace
--   period of up to 2,147,483,647 seconds. During that time, the Amazon
--   ECS service scheduler ignores health check status. This grace period
--   can prevent the service scheduler from marking tasks as unhealthy and
--   stopping them before they have time to come up.
createService_healthCheckGracePeriodSeconds :: Lens' CreateService (Maybe Int)

-- | The network configuration for the service. This parameter is required
--   for task definitions that use the <tt>awsvpc</tt> network mode to
--   receive their own elastic network interface, and it is not supported
--   for other network modes. For more information, see <a>Task
--   networking</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
createService_networkConfiguration :: Lens' CreateService (Maybe NetworkConfiguration)

-- | The details of the service discovery registry to associate with this
--   service. For more information, see <a>Service discovery</a>.
--   
--   Each service may be associated with one service registry. Multiple
--   service registries per service isn't supported.
createService_serviceRegistries :: Lens' CreateService (Maybe [ServiceRegistry])

-- | The capacity provider strategy to use for the service.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
createService_capacityProviderStrategy :: Lens' CreateService (Maybe [CapacityProviderStrategyItem])

-- | Whether or not the execute command functionality is enabled for the
--   service. If <tt>true</tt>, this enables execute command functionality
--   on all containers in the service tasks.
createService_enableExecuteCommand :: Lens' CreateService (Maybe Bool)

-- | The metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. When a service is deleted, the tags are deleted
--   as well.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
createService_tags :: Lens' CreateService (Maybe [Tag])

-- | Optional deployment parameters that control how many tasks run during
--   the deployment and the ordering of stopping and starting tasks.
createService_deploymentConfiguration :: Lens' CreateService (Maybe DeploymentConfiguration)

-- | The name of your service. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. Service names must be
--   unique within a cluster, but you can have similarly named services in
--   multiple clusters within a Region or across multiple Regions.
createService_serviceName :: Lens' CreateService Text

-- | The full description of your service following the create call.
--   
--   A service will return either a <tt>capacityProviderStrategy</tt> or
--   <tt>launchType</tt> parameter, but not both, depending on which one
--   was specified during creation.
--   
--   If a service is using the <tt>ECS</tt> deployment controller, the
--   <tt>deploymentController</tt> and <tt>taskSets</tt> parameters will
--   not be returned.
--   
--   If the service is using the <tt>CODE_DEPLOY</tt> deployment
--   controller, the <tt>deploymentController</tt>, <tt>taskSets</tt> and
--   <tt>deployments</tt> parameters will be returned, however the
--   <tt>deployments</tt> parameter will be an empty list.
createServiceResponse_service :: Lens' CreateServiceResponse (Maybe ContainerService)

-- | The response's http status code.
createServiceResponse_httpStatus :: Lens' CreateServiceResponse Int

-- | The status of the attachment. Valid values are <tt>PRECREATED</tt>,
--   <tt>CREATED</tt>, <tt>ATTACHING</tt>, <tt>ATTACHED</tt>,
--   <tt>DETACHING</tt>, <tt>DETACHED</tt>, and <tt>DELETED</tt>.
attachment_status :: Lens' Attachment (Maybe Text)

-- | Details of the attachment. For elastic network interfaces, this
--   includes the network interface ID, the MAC address, the subnet ID, and
--   the private IPv4 address.
attachment_details :: Lens' Attachment (Maybe [KeyValuePair])

-- | The unique identifier for the attachment.
attachment_id :: Lens' Attachment (Maybe Text)

-- | The type of the attachment, such as <tt>ElasticNetworkInterface</tt>.
attachment_type :: Lens' Attachment (Maybe Text)

-- | The Amazon Resource Name (ARN) of the attachment.
attachmentStateChange_attachmentArn :: Lens' AttachmentStateChange Text

-- | The status of the attachment.
attachmentStateChange_status :: Lens' AttachmentStateChange Text

-- | The ID of the target. You can specify the short form ID for a resource
--   or the full Amazon Resource Name (ARN).
attribute_targetId :: Lens' Attribute (Maybe Text)

-- | The value of the attribute. The <tt>value</tt> must contain between 1
--   and 128 characters and may contain letters (uppercase and lowercase),
--   numbers, hyphens, underscores, periods, at signs (@), forward slashes,
--   back slashes, colons, or spaces. The value cannot contain any leading
--   or trailing whitespace.
attribute_value :: Lens' Attribute (Maybe Text)

-- | The type of the target with which to attach the attribute. This
--   parameter is required if you use the short form ID for a resource
--   instead of the full ARN.
attribute_targetType :: Lens' Attribute (Maybe TargetType)

-- | The name of the attribute. The <tt>name</tt> must contain between 1
--   and 128 characters and name may contain letters (uppercase and
--   lowercase), numbers, hyphens, underscores, forward slashes, back
--   slashes, or periods.
attribute_name :: Lens' Attribute Text

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
autoScalingGroupProvider_managedScaling :: Lens' AutoScalingGroupProvider (Maybe ManagedScaling)

-- | The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
autoScalingGroupProvider_managedTerminationProtection :: Lens' AutoScalingGroupProvider (Maybe ManagedTerminationProtection)

-- | The Amazon Resource Name (ARN) that identifies the Auto Scaling group.
autoScalingGroupProvider_autoScalingGroupArn :: Lens' AutoScalingGroupProvider Text

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
autoScalingGroupProviderUpdate_managedScaling :: Lens' AutoScalingGroupProviderUpdate (Maybe ManagedScaling)

-- | The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
autoScalingGroupProviderUpdate_managedTerminationProtection :: Lens' AutoScalingGroupProviderUpdate (Maybe ManagedTerminationProtection)

-- | The IDs of the security groups associated with the task or service. If
--   you do not specify a security group, the default security group for
--   the VPC is used. There is a limit of 5 security groups that can be
--   specified per <tt>AwsVpcConfiguration</tt>.
--   
--   All specified security groups must be from the same VPC.
awsVpcConfiguration_securityGroups :: Lens' AwsVpcConfiguration (Maybe [Text])

-- | Whether the task's elastic network interface receives a public IP
--   address. The default value is <tt>DISABLED</tt>.
awsVpcConfiguration_assignPublicIp :: Lens' AwsVpcConfiguration (Maybe AssignPublicIp)

-- | The IDs of the subnets associated with the task or service. There is a
--   limit of 16 subnets that can be specified per
--   <tt>AwsVpcConfiguration</tt>.
--   
--   All specified subnets must be from the same VPC.
awsVpcConfiguration_subnets :: Lens' AwsVpcConfiguration [Text]

-- | The current status of the capacity provider. Only capacity providers
--   in an <tt>ACTIVE</tt> state can be used in a cluster. When a capacity
--   provider is successfully deleted, it will have an <tt>INACTIVE</tt>
--   status.
capacityProvider_status :: Lens' CapacityProvider (Maybe CapacityProviderStatus)

-- | The update status reason. This provides further details about the
--   update status for the capacity provider.
capacityProvider_updateStatusReason :: Lens' CapacityProvider (Maybe Text)

-- | The Auto Scaling group settings for the capacity provider.
capacityProvider_autoScalingGroupProvider :: Lens' CapacityProvider (Maybe AutoScalingGroupProvider)

-- | The name of the capacity provider.
capacityProvider_name :: Lens' CapacityProvider (Maybe Text)

-- | The update status of the capacity provider. The following are the
--   possible states that will be returned.
--   
--   <ul>
--   <li><i>DELETE_IN_PROGRESS</i> The capacity provider is in the process
--   of being deleted.</li>
--   <li><i>DELETE_COMPLETE</i> The capacity provider has been successfully
--   deleted and will have an <tt>INACTIVE</tt> status.</li>
--   <li><i>DELETE_FAILED</i> The capacity provider was unable to be
--   deleted. The update status reason will provide further details about
--   why the delete failed.</li>
--   </ul>
capacityProvider_updateStatus :: Lens' CapacityProvider (Maybe CapacityProviderUpdateStatus)

-- | The Amazon Resource Name (ARN) that identifies the capacity provider.
capacityProvider_capacityProviderArn :: Lens' CapacityProvider (Maybe Text)

-- | The metadata that you apply to the capacity provider to help you
--   categorize and organize it. Each tag consists of a key and an optional
--   value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
capacityProvider_tags :: Lens' CapacityProvider (Maybe [Tag])

-- | The <i>base</i> value designates how many tasks, at a minimum, to run
--   on the specified capacity provider. Only one capacity provider in a
--   capacity provider strategy can have a <i>base</i> defined. If no value
--   is specified, the default value of <tt>0</tt> is used.
capacityProviderStrategyItem_base :: Lens' CapacityProviderStrategyItem (Maybe Natural)

-- | The <i>weight</i> value designates the relative percentage of the
--   total number of tasks launched that should use the specified capacity
--   provider. The <tt>weight</tt> value is taken into consideration after
--   the <tt>base</tt> value, if defined, is satisfied.
--   
--   If no <tt>weight</tt> value is specified, the default value of
--   <tt>0</tt> is used. When multiple capacity providers are specified
--   within a capacity provider strategy, at least one of the capacity
--   providers must have a weight value greater than zero and any capacity
--   providers with a weight of <tt>0</tt> will not be used to place tasks.
--   If you specify multiple capacity providers in a strategy that all have
--   a weight of <tt>0</tt>, any <tt>RunTask</tt> or <tt>CreateService</tt>
--   actions using the capacity provider strategy will fail.
--   
--   An example scenario for using weights is defining a strategy that
--   contains two capacity providers and both have a weight of <tt>1</tt>,
--   then when the <tt>base</tt> is satisfied, the tasks will be split
--   evenly across the two capacity providers. Using that same logic, if
--   you specify a weight of <tt>1</tt> for <i>capacityProviderA</i> and a
--   weight of <tt>4</tt> for <i>capacityProviderB</i>, then for every one
--   task that is run using <i>capacityProviderA</i>, four tasks would use
--   <i>capacityProviderB</i>.
capacityProviderStrategyItem_weight :: Lens' CapacityProviderStrategyItem (Maybe Natural)

-- | The short name of the capacity provider.
capacityProviderStrategyItem_capacityProvider :: Lens' CapacityProviderStrategyItem Text

-- | The status of the cluster. The following are the possible states that
--   will be returned.
--   
--   <ul>
--   <li><i>ACTIVE</i> The cluster is ready to accept tasks and if
--   applicable you can register container instances with the cluster.</li>
--   <li><i>PROVISIONING</i> The cluster has capacity providers associated
--   with it and the resources needed for the capacity provider are being
--   created.</li>
--   <li><i>DEPROVISIONING</i> The cluster has capacity providers
--   associated with it and the resources needed for the capacity provider
--   are being deleted.</li>
--   <li><i>FAILED</i> The cluster has capacity providers associated with
--   it and the resources needed for the capacity provider have failed to
--   create.</li>
--   <li><i>INACTIVE</i> The cluster has been deleted. Clusters with an
--   <tt>INACTIVE</tt> status may remain discoverable in your account for a
--   period of time. However, this behavior is subject to change in the
--   future, so you should not rely on <tt>INACTIVE</tt> clusters
--   persisting.</li>
--   </ul>
cluster_status :: Lens' Cluster (Maybe Text)

-- | The Amazon Resource Name (ARN) that identifies the cluster. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the cluster, the Amazon Web Services account ID of the cluster owner,
--   the <tt>cluster</tt> namespace, and then the cluster name. For
--   example, <tt>arn:aws:ecs:region:012345678910:cluster/test</tt>.
cluster_clusterArn :: Lens' Cluster (Maybe Text)

-- | The resources attached to a cluster. When using a capacity provider
--   with a cluster, the Auto Scaling plan that is created will be returned
--   as a cluster attachment.
cluster_attachments :: Lens' Cluster (Maybe [Attachment])

-- | The number of tasks in the cluster that are in the <tt>RUNNING</tt>
--   state.
cluster_runningTasksCount :: Lens' Cluster (Maybe Int)

-- | The default capacity provider strategy for the cluster. When services
--   or tasks are run in the cluster with no launch type or capacity
--   provider strategy specified, the default capacity provider strategy is
--   used.
cluster_defaultCapacityProviderStrategy :: Lens' Cluster (Maybe [CapacityProviderStrategyItem])

-- | The settings for the cluster. This parameter indicates whether
--   CloudWatch Container Insights is enabled or disabled for a cluster.
cluster_settings :: Lens' Cluster (Maybe [ClusterSetting])

-- | The number of container instances registered into the cluster. This
--   includes container instances in both <tt>ACTIVE</tt> and
--   <tt>DRAINING</tt> status.
cluster_registeredContainerInstancesCount :: Lens' Cluster (Maybe Int)

-- | The number of tasks in the cluster that are in the <tt>PENDING</tt>
--   state.
cluster_pendingTasksCount :: Lens' Cluster (Maybe Int)

-- | A user-generated string that you use to identify your cluster.
cluster_clusterName :: Lens' Cluster (Maybe Text)

-- | Additional information about your clusters that are separated by
--   launch type, including:
--   
--   <ul>
--   <li>runningEC2TasksCount</li>
--   <li>RunningFargateTasksCount</li>
--   <li>pendingEC2TasksCount</li>
--   <li>pendingFargateTasksCount</li>
--   <li>activeEC2ServiceCount</li>
--   <li>activeFargateServiceCount</li>
--   <li>drainingEC2ServiceCount</li>
--   <li>drainingFargateServiceCount</li>
--   </ul>
cluster_statistics :: Lens' Cluster (Maybe [KeyValuePair])

-- | The execute command configuration for the cluster.
cluster_configuration :: Lens' Cluster (Maybe ClusterConfiguration)

-- | The status of the capacity providers associated with the cluster. The
--   following are the states that will be returned:
--   
--   <ul>
--   <li><i>UPDATE_IN_PROGRESS</i> The available capacity providers for the
--   cluster are updating. This occurs when the Auto Scaling plan is
--   provisioning or deprovisioning.</li>
--   <li><i>UPDATE_COMPLETE</i> The capacity providers have successfully
--   updated.</li>
--   <li><i>UPDATE_FAILED</i> The capacity provider updates failed.</li>
--   </ul>
cluster_attachmentsStatus :: Lens' Cluster (Maybe Text)

-- | The capacity providers associated with the cluster.
cluster_capacityProviders :: Lens' Cluster (Maybe [Text])

-- | The number of services that are running on the cluster in an
--   <tt>ACTIVE</tt> state. You can view these services with ListServices.
cluster_activeServicesCount :: Lens' Cluster (Maybe Int)

-- | The metadata that you apply to the cluster to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
cluster_tags :: Lens' Cluster (Maybe [Tag])

-- | The details of the execute command configuration.
clusterConfiguration_executeCommandConfiguration :: Lens' ClusterConfiguration (Maybe ExecuteCommandConfiguration)

-- | The value to set for the cluster setting. The supported values are
--   <tt>enabled</tt> and <tt>disabled</tt>. If <tt>enabled</tt> is
--   specified, CloudWatch Container Insights will be enabled for the
--   cluster, otherwise it will be disabled unless the
--   <tt>containerInsights</tt> account setting is enabled. If a cluster
--   value is specified, it will override the <tt>containerInsights</tt>
--   value set with PutAccountSetting or PutAccountSettingDefault.
clusterSetting_value :: Lens' ClusterSetting (Maybe Text)

-- | The name of the cluster setting. The only supported value is
--   <tt>containerInsights</tt>.
clusterSetting_name :: Lens' ClusterSetting (Maybe ClusterSettingName)

-- | The IDs of each GPU assigned to the container.
container_gpuIds :: Lens' Container (Maybe [Text])

-- | The network bindings associated with the container.
container_networkBindings :: Lens' Container (Maybe [NetworkBinding])

-- | The details of any Amazon ECS managed agents associated with the
--   container.
container_managedAgents :: Lens' Container (Maybe [ManagedAgent])

-- | The image used for the container.
container_image :: Lens' Container (Maybe Text)

-- | The Amazon Resource Name (ARN) of the container.
container_containerArn :: Lens' Container (Maybe Text)

-- | The network interfaces associated with the container.
container_networkInterfaces :: Lens' Container (Maybe [NetworkInterface])

-- | The ARN of the task.
container_taskArn :: Lens' Container (Maybe Text)

-- | The last known status of the container.
container_lastStatus :: Lens' Container (Maybe Text)

-- | The hard limit (in MiB) of memory set for the container.
container_memory :: Lens' Container (Maybe Text)

-- | A short (255 max characters) human-readable string to provide
--   additional details about a running or stopped container.
container_reason :: Lens' Container (Maybe Text)

-- | The name of the container.
container_name :: Lens' Container (Maybe Text)

-- | The container image manifest digest.
--   
--   The <tt>imageDigest</tt> is only returned if the container is using an
--   image hosted in Amazon ECR, otherwise it is omitted.
container_imageDigest :: Lens' Container (Maybe Text)

-- | The exit code returned from the container.
container_exitCode :: Lens' Container (Maybe Int)

-- | The health status of the container. If health checks are not
--   configured for this container in its task definition, then it reports
--   the health status as <tt>UNKNOWN</tt>.
container_healthStatus :: Lens' Container (Maybe HealthStatus)

-- | The number of CPU units set for the container. The value will be
--   <tt>0</tt> if no value was specified in the container definition when
--   the task definition was registered.
container_cpu :: Lens' Container (Maybe Text)

-- | The ID of the Docker container.
container_runtimeId :: Lens' Container (Maybe Text)

-- | The soft limit (in MiB) of memory set for the container.
container_memoryReservation :: Lens' Container (Maybe Text)

-- | The image used to start a container. This string is passed directly to
--   the Docker daemon. Images in the Docker Hub registry are available by
--   default. Other repositories are specified with either <tt>
--   repository-url/image:tag </tt> or <tt> repository-url/image@digest
--   </tt>. Up to 255 letters (uppercase and lowercase), numbers, hyphens,
--   underscores, colons, periods, forward slashes, and number signs are
--   allowed. This parameter maps to <tt>Image</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>IMAGE</tt> parameter of <a>docker run</a>.
--   
--   <ul>
--   <li>When a new task starts, the Amazon ECS container agent pulls the
--   latest version of the specified image and tag for the container to
--   use. However, subsequent updates to a repository image are not
--   propagated to already running tasks.</li>
--   <li>Images in Amazon ECR repositories can be specified by either using
--   the full <tt>registry/repository:tag</tt> or
--   <tt>registry/repository@digest</tt>. For example,
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;:latest</tt>
--   or
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE</tt>.</li>
--   <li>Images in official repositories on Docker Hub use a single name
--   (for example, <tt>ubuntu</tt> or <tt>mongo</tt>).</li>
--   <li>Images in other repositories on Docker Hub are qualified with an
--   organization name (for example,
--   <tt>amazon/amazon-ecs-agent</tt>).</li>
--   <li>Images in other online repositories are qualified further by a
--   domain name (for example, <tt>quay.io/assemblyline/ubuntu</tt>).</li>
--   </ul>
containerDefinition_image :: Lens' ContainerDefinition (Maybe Text)

-- | The command that is passed to the container. This parameter maps to
--   <tt>Cmd</tt> in the <a>Create a container</a> section of the <a>Docker
--   Remote API</a> and the <tt>COMMAND</tt> parameter to <a>docker
--   run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#cmd</a>. If there
--   are multiple arguments, each argument should be a separated string in
--   the array.
containerDefinition_command :: Lens' ContainerDefinition (Maybe [Text])

-- | The hostname to use for your container. This parameter maps to
--   <tt>Hostname</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--hostname</tt> option to
--   <a>docker run</a>.
--   
--   The <tt>hostname</tt> parameter is not supported if you are using the
--   <tt>awsvpc</tt> network mode.
containerDefinition_hostname :: Lens' ContainerDefinition (Maybe Text)

-- | The private repository authentication credentials to use.
containerDefinition_repositoryCredentials :: Lens' ContainerDefinition (Maybe RepositoryCredentials)

-- | A list of strings to provide custom labels for SELinux and AppArmor
--   multi-level security systems. This field is not valid for containers
--   in tasks using the Fargate launch type.
--   
--   With Windows containers, this parameter can be used to reference a
--   credential spec file when configuring a container for Active Directory
--   authentication. For more information, see <a>Using gMSAs for Windows
--   Containers</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   This parameter maps to <tt>SecurityOpt</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--security-opt</tt> option to <a>docker run</a>.
--   
--   The Amazon ECS container agent running on a container instance must
--   register with the <tt>ECS_SELINUX_CAPABLE=true</tt> or
--   <tt>ECS_APPARMOR_CAPABLE=true</tt> environment variables before
--   containers placed on that instance can use these security options. For
--   more information, see <a>Amazon ECS Container Agent Configuration</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For more information about valid values, see <a>Docker Run Security
--   Configuration</a>.
--   
--   Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value"
--   | "credentialspec:CredentialSpecFilePath"
containerDefinition_dockerSecurityOptions :: Lens' ContainerDefinition (Maybe [Text])

-- | The container health check command and associated configuration
--   parameters for the container. This parameter maps to
--   <tt>HealthCheck</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>HEALTHCHECK</tt> parameter of
--   <a>docker run</a>.
containerDefinition_healthCheck :: Lens' ContainerDefinition (Maybe HealthCheck)

-- | When this parameter is true, networking is disabled within the
--   container. This parameter maps to <tt>NetworkDisabled</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_disableNetworking :: Lens' ContainerDefinition (Maybe Bool)

-- | The secrets to pass to the container. For more information, see
--   <a>Specifying Sensitive Data</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
containerDefinition_secrets :: Lens' ContainerDefinition (Maybe [Secret])

-- | Data volumes to mount from another container. This parameter maps to
--   <tt>VolumesFrom</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--volumes-from</tt> option to
--   <a>docker run</a>.
containerDefinition_volumesFrom :: Lens' ContainerDefinition (Maybe [VolumeFrom])

-- | The environment variables to pass to a container. This parameter maps
--   to <tt>Env</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--env</tt> option to <a>docker
--   run</a>.
--   
--   We do not recommend using plaintext environment variables for
--   sensitive information, such as credential data.
containerDefinition_environment :: Lens' ContainerDefinition (Maybe [KeyValuePair])

-- | A list of files containing the environment variables to pass to a
--   container. This parameter maps to the <tt>--env-file</tt> option to
--   <a>docker run</a>.
--   
--   You can specify up to ten environment files. The file must have a
--   <tt>.env</tt> file extension. Each line in an environment file should
--   contain an environment variable in <tt>VARIABLE=VALUE</tt> format.
--   Lines beginning with <tt>#</tt> are treated as comments and are
--   ignored. For more information on the environment variable file syntax,
--   see <a>Declare default environment variables in file</a>.
--   
--   If there are environment variables specified using the
--   <tt>environment</tt> parameter in a container definition, they take
--   precedence over the variables contained within an environment file. If
--   multiple environment files are specified that contain the same
--   variable, they are processed from the top down. It is recommended to
--   use unique variable names. For more information, see <a>Specifying
--   Environment Variables</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
containerDefinition_environmentFiles :: Lens' ContainerDefinition (Maybe [EnvironmentFile])

-- | Early versions of the Amazon ECS container agent do not properly
--   handle <tt>entryPoint</tt> parameters. If you have problems using
--   <tt>entryPoint</tt>, update your container agent or enter your
--   commands and arguments as <tt>command</tt> array items instead.
--   
--   The entry point that is passed to the container. This parameter maps
--   to <tt>Entrypoint</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--entrypoint</tt> option to
--   <a>docker run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#entrypoint</a>.
containerDefinition_entryPoint :: Lens' ContainerDefinition (Maybe [Text])

-- | The working directory in which to run commands inside the container.
--   This parameter maps to <tt>WorkingDir</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--workdir</tt> option to <a>docker run</a>.
containerDefinition_workingDirectory :: Lens' ContainerDefinition (Maybe Text)

-- | A list of <tt>ulimits</tt> to set in the container. If a ulimit value
--   is specified in a task definition, it will override the default values
--   set by Docker. This parameter maps to <tt>Ulimits</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--ulimit</tt> option to <a>docker run</a>. Valid naming values
--   are displayed in the Ulimit data type.
--   
--   Amazon ECS tasks hosted on Fargate use the default resource limit
--   values set by the operating system with the exception of the
--   <tt>nofile</tt> resource limit parameter which Fargate overrides. The
--   <tt>nofile</tt> resource limit sets a restriction on the number of
--   open files that a container can use. The default <tt>nofile</tt> soft
--   limit is <tt>1024</tt> and hard limit is <tt>4096</tt>.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   This parameter is not supported for Windows containers.
containerDefinition_ulimits :: Lens' ContainerDefinition (Maybe [Ulimit])

-- | Time duration (in seconds) to wait before the container is forcefully
--   killed if it doesn't exit normally on its own.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version 1.3.0 or later. The max stop timeout value is 120
--   seconds and if the parameter is not specified, the default value of 30
--   seconds is used.
--   
--   For tasks using the EC2 launch type, if the <tt>stopTimeout</tt>
--   parameter is not specified, the value set for the Amazon ECS container
--   agent configuration variable <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> is
--   used by default. If neither the <tt>stopTimeout</tt> parameter or the
--   <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> agent configuration variable are
--   set, then the default values of 30 seconds for Linux containers and 30
--   seconds on Windows containers are used. Your container instances
--   require at least version 1.26.0 of the container agent to enable a
--   container stop timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
containerDefinition_stopTimeout :: Lens' ContainerDefinition (Maybe Int)

-- | When this parameter is true, the container is given elevated
--   privileges on the host container instance (similar to the
--   <tt>root</tt> user). This parameter maps to <tt>Privileged</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--privileged</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
containerDefinition_privileged :: Lens' ContainerDefinition (Maybe Bool)

-- | The list of port mappings for the container. Port mappings allow
--   containers to access ports on the host container instance to send or
--   receive traffic.
--   
--   For task definitions that use the <tt>awsvpc</tt> network mode, you
--   should only specify the <tt>containerPort</tt>. The <tt>hostPort</tt>
--   can be left blank or it must be the same value as the
--   <tt>containerPort</tt>.
--   
--   Port mappings on Windows use the <tt>NetNAT</tt> gateway address
--   rather than <tt>localhost</tt>. There is no loopback for port mappings
--   on Windows, so you cannot access a container's mapped port from the
--   host itself.
--   
--   This parameter maps to <tt>PortBindings</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--publish</tt> option to <a>docker run</a>. If the network mode of
--   a task definition is set to <tt>none</tt>, then you can't specify port
--   mappings. If the network mode of a task definition is set to
--   <tt>host</tt>, then host ports must either be undefined or they must
--   match the container port in the port mapping.
--   
--   After a task reaches the <tt>RUNNING</tt> status, manual and automatic
--   host and container port assignments are visible in the <b>Network
--   Bindings</b> section of a container description for a selected task in
--   the Amazon ECS console. The assignments are also visible in the
--   <tt>networkBindings</tt> section DescribeTasks responses.
containerDefinition_portMappings :: Lens' ContainerDefinition (Maybe [PortMapping])

-- | The type and amount of a resource to assign to a container. The only
--   supported resource is a GPU.
containerDefinition_resourceRequirements :: Lens' ContainerDefinition (Maybe [ResourceRequirement])

-- | A key/value map of labels to add to the container. This parameter maps
--   to <tt>Labels</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--label</tt> option to <a>docker
--   run</a>. This parameter requires version 1.18 of the Docker Remote API
--   or greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
containerDefinition_dockerLabels :: Lens' ContainerDefinition (Maybe (HashMap Text Text))

-- | A list of hostnames and IP address mappings to append to the
--   <tt>/etc/hosts</tt> file on the container. This parameter maps to
--   <tt>ExtraHosts</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--add-host</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks that
--   use the <tt>awsvpc</tt> network mode.
containerDefinition_extraHosts :: Lens' ContainerDefinition (Maybe [HostEntry])

-- | The amount (in MiB) of memory to present to the container. If your
--   container attempts to exceed the memory specified here, the container
--   is killed. The total amount of memory reserved for all containers
--   within a task must be lower than the task <tt>memory</tt> value, if
--   one is specified. This parameter maps to <tt>Memory</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--memory</tt> option to <a>docker run</a>.
--   
--   If using the Fargate launch type, this parameter is optional.
--   
--   If using the EC2 launch type, you must specify either a task-level
--   memory value or a container-level memory value. If you specify both a
--   container-level <tt>memory</tt> and <tt>memoryReservation</tt> value,
--   <tt>memory</tt> must be greater than <tt>memoryReservation</tt>. If
--   you specify <tt>memoryReservation</tt>, then that value is subtracted
--   from the available memory resources for the container instance on
--   which the container is placed. Otherwise, the value of <tt>memory</tt>
--   is used.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
containerDefinition_memory :: Lens' ContainerDefinition (Maybe Int)

-- | A list of namespaced kernel parameters to set in the container. This
--   parameter maps to <tt>Sysctls</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--sysctl</tt>
--   option to <a>docker run</a>.
--   
--   It is not recommended that you specify network-related
--   <tt>systemControls</tt> parameters for multiple containers in a single
--   task that also uses either the <tt>awsvpc</tt> or <tt>host</tt>
--   network modes. For tasks that use the <tt>awsvpc</tt> network mode,
--   the container that is started last determines which
--   <tt>systemControls</tt> parameters take effect. For tasks that use the
--   <tt>host</tt> network mode, it changes the container instance's
--   namespaced kernel parameters as well as the containers.
containerDefinition_systemControls :: Lens' ContainerDefinition (Maybe [SystemControl])

-- | The user to use inside the container. This parameter maps to
--   <tt>User</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--user</tt> option to <a>docker
--   run</a>.
--   
--   When running tasks using the <tt>host</tt> network mode, you should
--   not run containers using the root user (UID 0). It is considered best
--   practice to use a non-root user.
--   
--   You can specify the <tt>user</tt> using the following formats. If
--   specifying a UID or GID, you must specify it as a positive integer.
--   
--   <ul>
--   <li><pre>user</pre></li>
--   <li><pre>user:group</pre></li>
--   <li><pre>uid</pre></li>
--   <li><pre>uid:gid</pre></li>
--   <li><pre>user:gid</pre></li>
--   <li><pre>uid:group</pre></li>
--   </ul>
--   
--   This parameter is not supported for Windows containers.
containerDefinition_user :: Lens' ContainerDefinition (Maybe Text)

-- | The FireLens configuration for the container. This is used to specify
--   and configure a log router for container logs. For more information,
--   see <a>Custom Log Routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
containerDefinition_firelensConfiguration :: Lens' ContainerDefinition (Maybe FirelensConfiguration)

-- | A list of DNS search domains that are presented to the container. This
--   parameter maps to <tt>DnsSearch</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--dns-search</tt>
--   option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_dnsSearchDomains :: Lens' ContainerDefinition (Maybe [Text])

-- | The log configuration specification for the container.
--   
--   This parameter maps to <tt>LogConfig</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--log-driver</tt> option to <a>docker run</a>. By default,
--   containers use the same logging driver that the Docker daemon uses.
--   However the container may use a different logging driver than the
--   Docker daemon by specifying a log driver with this parameter in the
--   container definition. To use a different logging driver for a
--   container, the log system must be configured properly on the container
--   instance (or on a different log server for remote logging options).
--   For more information on the options for different supported log
--   drivers, see <a>Configure logging drivers</a> in the Docker
--   documentation.
--   
--   Amazon ECS currently supports a subset of the logging drivers
--   available to the Docker daemon (shown in the LogConfiguration data
--   type). Additional log drivers may be available in future releases of
--   the Amazon ECS container agent.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   The Amazon ECS container agent running on a container instance must
--   register the logging drivers available on that instance with the
--   <tt>ECS_AVAILABLE_LOGGING_DRIVERS</tt> environment variable before
--   containers placed on that instance can use these log configuration
--   options. For more information, see <a>Amazon ECS Container Agent
--   Configuration</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
containerDefinition_logConfiguration :: Lens' ContainerDefinition (Maybe LogConfiguration)

-- | Linux-specific modifications that are applied to the container, such
--   as Linux kernel capabilities. For more information see
--   KernelCapabilities.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_linuxParameters :: Lens' ContainerDefinition (Maybe LinuxParameters)

-- | When this parameter is <tt>true</tt>, a TTY is allocated. This
--   parameter maps to <tt>Tty</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--tty</tt> option
--   to <a>docker run</a>.
containerDefinition_pseudoTerminal :: Lens' ContainerDefinition (Maybe Bool)

-- | The dependencies defined for container startup and shutdown. A
--   container can contain multiple dependencies. When a dependency is
--   defined for container startup, for container shutdown it is reversed.
--   
--   For tasks using the EC2 launch type, the container instances require
--   at least version 1.26.0 of the container agent to enable container
--   dependencies. However, we recommend using the latest container agent
--   version. For information about checking your agent version and
--   updating to the latest version, see <a>Updating the Amazon ECS
--   Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version <tt>1.3.0</tt> or later.
containerDefinition_dependsOn :: Lens' ContainerDefinition (Maybe [ContainerDependency])

-- | The name of a container. If you are linking multiple containers
--   together in a task definition, the <tt>name</tt> of one container can
--   be entered in the <tt>links</tt> of another container to connect the
--   containers. Up to 255 letters (uppercase and lowercase), numbers,
--   underscores, and hyphens are allowed. This parameter maps to
--   <tt>name</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--name</tt> option to <a>docker
--   run</a>.
containerDefinition_name :: Lens' ContainerDefinition (Maybe Text)

-- | A list of DNS servers that are presented to the container. This
--   parameter maps to <tt>Dns</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--dns</tt> option
--   to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_dnsServers :: Lens' ContainerDefinition (Maybe [Text])

-- | The mount points for data volumes in your container.
--   
--   This parameter maps to <tt>Volumes</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--volume</tt> option to <a>docker run</a>.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives.
containerDefinition_mountPoints :: Lens' ContainerDefinition (Maybe [MountPoint])

-- | When this parameter is <tt>true</tt>, this allows you to deploy
--   containerized applications that require <tt>stdin</tt> or a
--   <tt>tty</tt> to be allocated. This parameter maps to
--   <tt>OpenStdin</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--interactive</tt> option to
--   <a>docker run</a>.
containerDefinition_interactive :: Lens' ContainerDefinition (Maybe Bool)

-- | Time duration (in seconds) to wait before giving up on resolving
--   dependencies for a container. For example, you specify two containers
--   in a task definition with containerA having a dependency on containerB
--   reaching a <tt>COMPLETE</tt>, <tt>SUCCESS</tt>, or <tt>HEALTHY</tt>
--   status. If a <tt>startTimeout</tt> value is specified for containerB
--   and it does not reach the desired status within that time then
--   containerA will give up and not start. This results in the task
--   transitioning to a <tt>STOPPED</tt> state.
--   
--   When the <tt>ECS_CONTAINER_START_TIMEOUT</tt> container agent
--   configuration variable is used, it is enforced indendently from this
--   start timeout value.
--   
--   For tasks using the Fargate launch type, this parameter requires that
--   the task or service uses platform version 1.3.0 or later.
--   
--   For tasks using the EC2 launch type, your container instances require
--   at least version <tt>1.26.0</tt> of the container agent to enable a
--   container start timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version <tt>1.26.0-1</tt> of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
containerDefinition_startTimeout :: Lens' ContainerDefinition (Maybe Int)

-- | The <tt>links</tt> parameter allows containers to communicate with
--   each other without the need for port mappings. This parameter is only
--   supported if the network mode of a task definition is <tt>bridge</tt>.
--   The <tt>name:internalName</tt> construct is analogous to
--   <tt>name:alias</tt> in Docker links. Up to 255 letters (uppercase and
--   lowercase), numbers, underscores, and hyphens are allowed. For more
--   information about linking Docker containers, go to <a>Legacy container
--   links</a> in the Docker documentation. This parameter maps to
--   <tt>Links</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--link</tt> option to <a>docker
--   run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   Containers that are collocated on a single container instance may be
--   able to communicate with each other without requiring links or host
--   port mappings. Network isolation is achieved on the container instance
--   using security groups and VPC settings.
containerDefinition_links :: Lens' ContainerDefinition (Maybe [Text])

-- | When this parameter is true, the container is given read-only access
--   to its root file system. This parameter maps to
--   <tt>ReadonlyRootfs</tt> in the <a>Create a container</a> section of
--   the <a>Docker Remote API</a> and the <tt>--read-only</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
containerDefinition_readonlyRootFilesystem :: Lens' ContainerDefinition (Maybe Bool)

-- | If the <tt>essential</tt> parameter of a container is marked as
--   <tt>true</tt>, and that container fails or stops for any reason, all
--   other containers that are part of the task are stopped. If the
--   <tt>essential</tt> parameter of a container is marked as
--   <tt>false</tt>, then its failure does not affect the rest of the
--   containers in a task. If this parameter is omitted, a container is
--   assumed to be essential.
--   
--   All tasks must have at least one essential container. If you have an
--   application that is composed of multiple containers, you should group
--   containers that are used for a common purpose into components, and
--   separate the different components into multiple task definitions. For
--   more information, see <a>Application Architecture</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
containerDefinition_essential :: Lens' ContainerDefinition (Maybe Bool)

-- | The number of <tt>cpu</tt> units reserved for the container. This
--   parameter maps to <tt>CpuShares</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--cpu-shares</tt>
--   option to <a>docker run</a>.
--   
--   This field is optional for tasks using the Fargate launch type, and
--   the only requirement is that the total amount of CPU reserved for all
--   containers within a task be lower than the task-level <tt>cpu</tt>
--   value.
--   
--   You can determine the number of CPU units that are available per EC2
--   instance type by multiplying the vCPUs listed for that instance type
--   on the <a>Amazon EC2 Instances</a> detail page by 1,024.
--   
--   Linux containers share unallocated CPU units with other containers on
--   the container instance with the same ratio as their allocated amount.
--   For example, if you run a single-container task on a single-core
--   instance type with 512 CPU units specified for that container, and
--   that is the only task running on the container instance, that
--   container could use the full 1,024 CPU unit share at any given time.
--   However, if you launched another copy of the same task on that
--   container instance, each task would be guaranteed a minimum of 512 CPU
--   units when needed, and each container could float to higher CPU usage
--   if the other container was not using it, but if both tasks were 100%
--   active all of the time, they would be limited to 512 CPU units.
--   
--   On Linux container instances, the Docker daemon on the container
--   instance uses the CPU value to calculate the relative CPU share ratios
--   for running containers. For more information, see <a>CPU share
--   constraint</a> in the Docker documentation. The minimum valid CPU
--   share value that the Linux kernel allows is 2. However, the CPU
--   parameter is not required, and you can use CPU values below 2 in your
--   container definitions. For CPU values below 2 (including null), the
--   behavior varies based on your Amazon ECS container agent version:
--   
--   <ul>
--   <li><b>Agent versions less than or equal to 1.1.0:</b> Null and zero
--   CPU values are passed to Docker as 0, which Docker then converts to
--   1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the
--   Linux kernel converts to two CPU shares.</li>
--   <li><b>Agent versions greater than or equal to 1.2.0:</b> Null, zero,
--   and CPU values of 1 are passed to Docker as 2.</li>
--   </ul>
--   
--   On Windows container instances, the CPU limit is enforced as an
--   absolute limit, or a quota. Windows containers only have access to the
--   specified amount of CPU that is described in the task definition. A
--   null or zero CPU value is passed to Docker as <tt>0</tt>, which
--   Windows interprets as 1% of one CPU.
containerDefinition_cpu :: Lens' ContainerDefinition (Maybe Int)

-- | The soft limit (in MiB) of memory to reserve for the container. When
--   system memory is under heavy contention, Docker attempts to keep the
--   container memory to this soft limit. However, your container can
--   consume more memory when it needs to, up to either the hard limit
--   specified with the <tt>memory</tt> parameter (if applicable), or all
--   of the available memory on the container instance, whichever comes
--   first. This parameter maps to <tt>MemoryReservation</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--memory-reservation</tt> option to <a>docker run</a>.
--   
--   If a task-level memory value is not specified, you must specify a
--   non-zero integer for one or both of <tt>memory</tt> or
--   <tt>memoryReservation</tt> in a container definition. If you specify
--   both, <tt>memory</tt> must be greater than <tt>memoryReservation</tt>.
--   If you specify <tt>memoryReservation</tt>, then that value is
--   subtracted from the available memory resources for the container
--   instance on which the container is placed. Otherwise, the value of
--   <tt>memory</tt> is used.
--   
--   For example, if your container normally uses 128 MiB of memory, but
--   occasionally bursts to 256 MiB of memory for short periods of time,
--   you can set a <tt>memoryReservation</tt> of 128 MiB, and a
--   <tt>memory</tt> hard limit of 300 MiB. This configuration would allow
--   the container to only reserve 128 MiB of memory from the remaining
--   resources on the container instance, but also allow the container to
--   consume more memory resources when needed.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
containerDefinition_memoryReservation :: Lens' ContainerDefinition (Maybe Int)

-- | The name of a container.
containerDependency_containerName :: Lens' ContainerDependency Text

-- | The dependency condition of the container. The following are the
--   available conditions and their behavior:
--   
--   <ul>
--   <li><tt>START</tt> - This condition emulates the behavior of links and
--   volumes today. It validates that a dependent container is started
--   before permitting other containers to start.</li>
--   <li><tt>COMPLETE</tt> - This condition validates that a dependent
--   container runs to completion (exits) before permitting other
--   containers to start. This can be useful for nonessential containers
--   that run a script and then exit. This condition cannot be set on an
--   essential container.</li>
--   <li><tt>SUCCESS</tt> - This condition is the same as
--   <tt>COMPLETE</tt>, but it also requires that the container exits with
--   a <tt>zero</tt> status. This condition cannot be set on an essential
--   container.</li>
--   <li><tt>HEALTHY</tt> - This condition validates that the dependent
--   container passes its Docker health check before permitting other
--   containers to start. This requires that the dependent container has
--   health checks configured. This condition is confirmed only at task
--   startup.</li>
--   </ul>
containerDependency_condition :: Lens' ContainerDependency ContainerCondition

-- | The status of the container instance. The valid values are
--   <tt>REGISTERING</tt>, <tt>REGISTRATION_FAILED</tt>, <tt>ACTIVE</tt>,
--   <tt>INACTIVE</tt>, <tt>DEREGISTERING</tt>, or <tt>DRAINING</tt>.
--   
--   If your account has opted in to the <tt>awsvpcTrunking</tt> account
--   setting, then any newly registered container instance will transition
--   to a <tt>REGISTERING</tt> status while the trunk elastic network
--   interface is provisioned for the instance. If the registration fails,
--   the instance will transition to a <tt>REGISTRATION_FAILED</tt> status.
--   You can describe the container instance and see the reason for failure
--   in the <tt>statusReason</tt> parameter. Once the container instance is
--   terminated, the instance transitions to a <tt>DEREGISTERING</tt>
--   status while the trunk elastic network interface is deprovisioned. The
--   instance then transitions to an <tt>INACTIVE</tt> status.
--   
--   The <tt>ACTIVE</tt> status indicates that the container instance can
--   accept tasks. The <tt>DRAINING</tt> indicates that new tasks are not
--   placed on the container instance and any service tasks running on the
--   container instance are removed if possible. For more information, see
--   <a>Container Instance Draining</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
containerInstance_status :: Lens' ContainerInstance (Maybe Text)

-- | The resources attached to a container instance, such as elastic
--   network interfaces.
containerInstance_attachments :: Lens' ContainerInstance (Maybe [Attachment])

-- | The number of tasks on the container instance that are in the
--   <tt>RUNNING</tt> status.
containerInstance_runningTasksCount :: Lens' ContainerInstance (Maybe Int)

-- | For CPU and memory resource types, this parameter describes the
--   remaining CPU and memory that has not already been allocated to tasks
--   and is therefore available for new tasks. For port resource types,
--   this parameter describes the ports that were reserved by the Amazon
--   ECS container agent (at instance registration time) and any task
--   containers that have reserved port mappings on the host (with the
--   <tt>host</tt> or <tt>bridge</tt> network mode). Any port that is not
--   specified here is available for new tasks.
containerInstance_remainingResources :: Lens' ContainerInstance (Maybe [Resource])

-- | The ID of the container instance. For Amazon EC2 instances, this value
--   is the Amazon EC2 instance ID. For external instances, this value is
--   the Amazon Web Services Systems Manager managed instance ID.
containerInstance_ec2InstanceId :: Lens' ContainerInstance (Maybe Text)

-- | The Amazon Resource Name (ARN) of the container instance. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the container instance, the Amazon Web Services account ID of the
--   container instance owner, the <tt>container-instance</tt> namespace,
--   and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
containerInstance_containerInstanceArn :: Lens' ContainerInstance (Maybe Text)

-- | This parameter returns <tt>true</tt> if the agent is connected to
--   Amazon ECS. Registered instances with an agent that may be unhealthy
--   or stopped return <tt>false</tt>. Only instances connected to an agent
--   can accept placement requests.
containerInstance_agentConnected :: Lens' ContainerInstance (Maybe Bool)

-- | The version information for the Amazon ECS container agent and Docker
--   daemon running on the container instance.
containerInstance_versionInfo :: Lens' ContainerInstance (Maybe VersionInfo)

-- | The status of the most recent agent update. If an update has never
--   been requested, this value is <tt>NULL</tt>.
containerInstance_agentUpdateStatus :: Lens' ContainerInstance (Maybe AgentUpdateStatus)

-- | The attributes set for the container instance, either by the Amazon
--   ECS container agent at instance registration or manually with the
--   PutAttributes operation.
containerInstance_attributes :: Lens' ContainerInstance (Maybe [Attribute])

-- | The version counter for the container instance. Every time a container
--   instance experiences a change that triggers a CloudWatch event, the
--   version counter is incremented. If you are replicating your Amazon ECS
--   container instance state with CloudWatch Events, you can compare the
--   version of a container instance reported by the Amazon ECS APIs with
--   the version reported in CloudWatch Events for the container instance
--   (inside the <tt>detail</tt> object) to verify that the version in your
--   event stream is current.
containerInstance_version :: Lens' ContainerInstance (Maybe Integer)

-- | The number of tasks on the container instance that are in the
--   <tt>PENDING</tt> status.
containerInstance_pendingTasksCount :: Lens' ContainerInstance (Maybe Int)

-- | The capacity provider associated with the container instance.
containerInstance_capacityProviderName :: Lens' ContainerInstance (Maybe Text)

-- | The Unix timestamp for when the container instance was registered.
containerInstance_registeredAt :: Lens' ContainerInstance (Maybe UTCTime)

-- | The reason that the container instance reached its current status.
containerInstance_statusReason :: Lens' ContainerInstance (Maybe Text)

-- | The metadata that you apply to the container instance to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
containerInstance_tags :: Lens' ContainerInstance (Maybe [Tag])

-- | For CPU and memory resource types, this parameter describes the amount
--   of each resource that was available on the container instance when the
--   container agent registered it with Amazon ECS. This value represents
--   the total amount of CPU and memory that can be allocated on this
--   container instance to tasks. For port resource types, this parameter
--   describes the ports that were reserved by the Amazon ECS container
--   agent when it registered the container instance with Amazon ECS.
containerInstance_registeredResources :: Lens' ContainerInstance (Maybe [Resource])

-- | The command to send to the container that overrides the default
--   command from the Docker image or the task definition. You must also
--   specify a container name.
containerOverride_command :: Lens' ContainerOverride (Maybe [Text])

-- | The environment variables to send to the container. You can add new
--   environment variables, which are added to the container at launch, or
--   you can override the existing environment variables from the Docker
--   image or the task definition. You must also specify a container name.
containerOverride_environment :: Lens' ContainerOverride (Maybe [KeyValuePair])

-- | A list of files containing the environment variables to pass to a
--   container, instead of the value from the container definition.
containerOverride_environmentFiles :: Lens' ContainerOverride (Maybe [EnvironmentFile])

-- | The type and amount of a resource to assign to a container, instead of
--   the default value from the task definition. The only supported
--   resource is a GPU.
containerOverride_resourceRequirements :: Lens' ContainerOverride (Maybe [ResourceRequirement])

-- | The hard limit (in MiB) of memory to present to the container, instead
--   of the default value from the task definition. If your container
--   attempts to exceed the memory specified here, the container is killed.
--   You must also specify a container name.
containerOverride_memory :: Lens' ContainerOverride (Maybe Int)

-- | The name of the container that receives the override. This parameter
--   is required if any override is specified.
containerOverride_name :: Lens' ContainerOverride (Maybe Text)

-- | The number of <tt>cpu</tt> units reserved for the container, instead
--   of the default value from the task definition. You must also specify a
--   container name.
containerOverride_cpu :: Lens' ContainerOverride (Maybe Int)

-- | The soft limit (in MiB) of memory to reserve for the container,
--   instead of the default value from the task definition. You must also
--   specify a container name.
containerOverride_memoryReservation :: Lens' ContainerOverride (Maybe Int)

-- | Information about a set of Amazon ECS tasks in either an CodeDeploy or
--   an <tt>EXTERNAL</tt> deployment. An Amazon ECS task set includes
--   details such as the desired number of tasks, how many tasks are
--   running, and whether the task set serves production traffic.
containerService_taskSets :: Lens' ContainerService (Maybe [TaskSet])

-- | The number of tasks in the cluster that are in the <tt>RUNNING</tt>
--   state.
containerService_runningCount :: Lens' ContainerService (Maybe Int)

-- | The status of the service. The valid values are <tt>ACTIVE</tt>,
--   <tt>DRAINING</tt>, or <tt>INACTIVE</tt>.
containerService_status :: Lens' ContainerService (Maybe Text)

-- | The Amazon Resource Name (ARN) of the cluster that hosts the service.
containerService_clusterArn :: Lens' ContainerService (Maybe Text)

-- | Specifies whether to propagate the tags from the task definition or
--   the service to the task. If no value is specified, the tags are not
--   propagated.
containerService_propagateTags :: Lens' ContainerService (Maybe PropagateTags)

-- | The Unix timestamp for when the service was created.
containerService_createdAt :: Lens' ContainerService (Maybe UTCTime)

-- | The platform version on which to run your service. A platform version
--   is only specified for tasks hosted on Fargate. If one is not
--   specified, the <tt>LATEST</tt> platform version is used by default.
--   For more information, see <a>Fargate Platform Versions</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
containerService_platformVersion :: Lens' ContainerService (Maybe Text)

-- | Specifies whether to enable Amazon ECS managed tags for the tasks in
--   the service. For more information, see <a>Tagging Your Amazon ECS
--   Resources</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
containerService_enableECSManagedTags :: Lens' ContainerService (Maybe Bool)

-- | The principal that created the service.
containerService_createdBy :: Lens' ContainerService (Maybe Text)

-- | The desired number of instantiations of the task definition to keep
--   running on the service. This value is specified when the service is
--   created with CreateService, and it can be modified with UpdateService.
containerService_desiredCount :: Lens' ContainerService (Maybe Int)

-- | A list of Elastic Load Balancing load balancer objects, containing the
--   load balancer name, the container name (as it appears in a container
--   definition), and the container port to access from the load balancer.
containerService_loadBalancers :: Lens' ContainerService (Maybe [LoadBalancer])

-- | The number of tasks in the cluster that are in the <tt>PENDING</tt>
--   state.
containerService_pendingCount :: Lens' ContainerService (Maybe Int)

-- | The placement constraints for the tasks in the service.
containerService_placementConstraints :: Lens' ContainerService (Maybe [PlacementConstraint])

-- | The event stream for your service. A maximum of 100 of the latest
--   events are displayed.
containerService_events :: Lens' ContainerService (Maybe [ServiceEvent])

-- | The placement strategy that determines how tasks for the service are
--   placed.
containerService_placementStrategy :: Lens' ContainerService (Maybe [PlacementStrategy])

-- | The current state of deployments for the service.
containerService_deployments :: Lens' ContainerService (Maybe [Deployment])

-- | The name of your service. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. Service names must be
--   unique within a cluster, but you can have similarly named services in
--   multiple clusters within a Region or across multiple Regions.
containerService_serviceName :: Lens' ContainerService (Maybe Text)

-- | The deployment controller type the service is using. When using the
--   DescribeServices API, this field is omitted if the service is using
--   the <tt>ECS</tt> deployment controller type.
containerService_deploymentController :: Lens' ContainerService (Maybe DeploymentController)

-- | The launch type the service is using. When using the DescribeServices
--   API, this field is omitted if the service was created using a capacity
--   provider strategy.
containerService_launchType :: Lens' ContainerService (Maybe LaunchType)

-- | The ARN that identifies the service. The ARN contains the
--   <tt>arn:aws:ecs</tt> namespace, followed by the Region of the service,
--   the Amazon Web Services account ID of the service owner, the
--   <tt>service</tt> namespace, and then the service name. For example,
--   <tt>arn:aws:ecs:region:012345678910:service/my-service</tt>.
containerService_serviceArn :: Lens' ContainerService (Maybe Text)

-- | The task definition to use for tasks in the service. This value is
--   specified when the service is created with CreateService, and it can
--   be modified with UpdateService.
containerService_taskDefinition :: Lens' ContainerService (Maybe Text)

-- | The scheduling strategy to use for the service. For more information,
--   see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement
--   constraints.Fargate tasks do not support the <tt>DAEMON</tt>
--   scheduling strategy.</li>
--   </ul>
containerService_schedulingStrategy :: Lens' ContainerService (Maybe SchedulingStrategy)

-- | The period of time, in seconds, that the Amazon ECS service scheduler
--   ignores unhealthy Elastic Load Balancing target health checks after a
--   task has first started.
containerService_healthCheckGracePeriodSeconds :: Lens' ContainerService (Maybe Int)

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
containerService_networkConfiguration :: Lens' ContainerService (Maybe NetworkConfiguration)

-- | The details of the service discovery registries to assign to this
--   service. For more information, see <a>Service Discovery</a>.
containerService_serviceRegistries :: Lens' ContainerService (Maybe [ServiceRegistry])

-- | The capacity provider strategy the service is using. When using the
--   DescribeServices API, this field is omitted if the service was created
--   using a launch type.
containerService_capacityProviderStrategy :: Lens' ContainerService (Maybe [CapacityProviderStrategyItem])

-- | Whether or not the execute command functionality is enabled for the
--   service. If <tt>true</tt>, the execute command functionality is
--   enabled for all containers in tasks as part of the service.
containerService_enableExecuteCommand :: Lens' ContainerService (Maybe Bool)

-- | The metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
containerService_tags :: Lens' ContainerService (Maybe [Tag])

-- | The ARN of the IAM role associated with the service that allows the
--   Amazon ECS container agent to register container instances with an
--   Elastic Load Balancing load balancer.
containerService_roleArn :: Lens' ContainerService (Maybe Text)

-- | Optional deployment parameters that control how many tasks run during
--   the deployment and the ordering of stopping and starting tasks.
containerService_deploymentConfiguration :: Lens' ContainerService (Maybe DeploymentConfiguration)

-- | Any network bindings associated with the container.
containerStateChange_networkBindings :: Lens' ContainerStateChange (Maybe [NetworkBinding])

-- | The status of the container.
containerStateChange_status :: Lens' ContainerStateChange (Maybe Text)

-- | The name of the container.
containerStateChange_containerName :: Lens' ContainerStateChange (Maybe Text)

-- | The reason for the state change.
containerStateChange_reason :: Lens' ContainerStateChange (Maybe Text)

-- | The container image SHA 256 digest.
containerStateChange_imageDigest :: Lens' ContainerStateChange (Maybe Text)

-- | The exit code for the container, if the state change is a result of
--   the container exiting.
containerStateChange_exitCode :: Lens' ContainerStateChange (Maybe Int)

-- | The ID of the Docker container.
containerStateChange_runtimeId :: Lens' ContainerStateChange (Maybe Text)

-- | The <tt>rolloutState</tt> of a service is only returned for services
--   that use the rolling update (<tt>ECS</tt>) deployment type that are
--   not behind a Classic Load Balancer.
--   
--   The rollout state of the deployment. When a service deployment is
--   started, it begins in an <tt>IN_PROGRESS</tt> state. When the service
--   reaches a steady state, the deployment will transition to a
--   <tt>COMPLETED</tt> state. If the service fails to reach a steady state
--   and circuit breaker is enabled, the deployment will transition to a
--   <tt>FAILED</tt> state. A deployment in <tt>FAILED</tt> state will
--   launch no new tasks. For more information, see
--   DeploymentCircuitBreaker.
deployment_rolloutState :: Lens' Deployment (Maybe DeploymentRolloutState)

-- | The number of tasks in the deployment that are in the <tt>RUNNING</tt>
--   status.
deployment_runningCount :: Lens' Deployment (Maybe Int)

-- | The status of the deployment. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The most recent deployment of a service.</li>
--   <li><i>ACTIVE</i> A service deployment that still has running tasks,
--   but are in the process of being replaced with a new <tt>PRIMARY</tt>
--   deployment.</li>
--   <li><i>INACTIVE</i> A deployment that has been completely
--   replaced.</li>
--   </ul>
deployment_status :: Lens' Deployment (Maybe Text)

-- | The Unix timestamp for when the service deployment was created.
deployment_createdAt :: Lens' Deployment (Maybe UTCTime)

-- | The platform version on which your tasks in the service are running. A
--   platform version is only specified for tasks using the Fargate launch
--   type. If one is not specified, the <tt>LATEST</tt> platform version is
--   used by default. For more information, see <a>Fargate Platform
--   Versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
deployment_platformVersion :: Lens' Deployment (Maybe Text)

-- | The most recent desired count of tasks that was specified for the
--   service to deploy or maintain.
deployment_desiredCount :: Lens' Deployment (Maybe Int)

-- | The number of tasks in the deployment that are in the <tt>PENDING</tt>
--   status.
deployment_pendingCount :: Lens' Deployment (Maybe Int)

-- | The ID of the deployment.
deployment_id :: Lens' Deployment (Maybe Text)

-- | The number of consecutively failed tasks in the deployment. A task is
--   considered a failure if the service scheduler can't launch the task,
--   the task doesn't transition to a <tt>RUNNING</tt> state, or if it
--   fails any of its defined health checks and is stopped.
--   
--   Once a service deployment has one or more successfully running tasks,
--   the failed task count resets to zero and stops being evaluated.
deployment_failedTasks :: Lens' Deployment (Maybe Int)

-- | The launch type the tasks in the service are using. For more
--   information, see <a>Amazon ECS Launch Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
deployment_launchType :: Lens' Deployment (Maybe LaunchType)

-- | The Unix timestamp for when the service deployment was last updated.
deployment_updatedAt :: Lens' Deployment (Maybe UTCTime)

-- | The most recent task definition that was specified for the tasks in
--   the service to use.
deployment_taskDefinition :: Lens' Deployment (Maybe Text)

-- | A description of the rollout state of a deployment.
deployment_rolloutStateReason :: Lens' Deployment (Maybe Text)

-- | The VPC subnet and security group configuration for tasks that receive
--   their own elastic network interface by using the <tt>awsvpc</tt>
--   networking mode.
deployment_networkConfiguration :: Lens' Deployment (Maybe NetworkConfiguration)

-- | The capacity provider strategy that the deployment is using.
deployment_capacityProviderStrategy :: Lens' Deployment (Maybe [CapacityProviderStrategyItem])

-- | Whether to enable the deployment circuit breaker logic for the
--   service.
deploymentCircuitBreaker_enable :: Lens' DeploymentCircuitBreaker Bool

-- | Whether to enable Amazon ECS to roll back the service if a service
--   deployment fails. If rollback is enabled, when a service deployment
--   fails, the service is rolled back to the last deployment that
--   completed successfully.
deploymentCircuitBreaker_rollback :: Lens' DeploymentCircuitBreaker Bool

-- | If a service is using the rolling update (<tt>ECS</tt>) deployment
--   type, the <b>minimum healthy percent</b> represents a lower limit on
--   the number of tasks in a service that must remain in the
--   <tt>RUNNING</tt> state during a deployment, as a percentage of the
--   desired number of tasks (rounded up to the nearest integer), and while
--   any container instances are in the <tt>DRAINING</tt> state if the
--   service contains tasks using the EC2 launch type. This parameter
--   enables you to deploy without using additional cluster capacity. For
--   example, if your service has a desired number of four tasks and a
--   minimum healthy percent of 50%, the scheduler may stop two existing
--   tasks to free up cluster capacity before starting two new tasks. Tasks
--   for services that <i>do not</i> use a load balancer are considered
--   healthy if they are in the <tt>RUNNING</tt> state; tasks for services
--   that <i>do</i> use a load balancer are considered healthy if they are
--   in the <tt>RUNNING</tt> state and they are reported as healthy by the
--   load balancer. The default value for minimum healthy percent is 100%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __minimum healthy percent__ value is set to the default
--   value and is used to define the lower limit on the number of the tasks
--   in the service that remain in the <tt>RUNNING</tt> state while the
--   container instances are in the <tt>DRAINING</tt> state. If the tasks
--   in the service use the Fargate launch type, the minimum healthy
--   percent value is not used, although it is returned when describing
--   your service.
deploymentConfiguration_minimumHealthyPercent :: Lens' DeploymentConfiguration (Maybe Int)

-- | If a service is using the rolling update (<tt>ECS</tt>) deployment
--   type, the <b>maximum percent</b> parameter represents an upper limit
--   on the number of tasks in a service that are allowed in the
--   <tt>RUNNING</tt> or <tt>PENDING</tt> state during a deployment, as a
--   percentage of the desired number of tasks (rounded down to the nearest
--   integer), and while any container instances are in the
--   <tt>DRAINING</tt> state if the service contains tasks using the EC2
--   launch type. This parameter enables you to define the deployment batch
--   size. For example, if your service has a desired number of four tasks
--   and a maximum percent value of 200%, the scheduler may start four new
--   tasks before stopping the four older tasks (provided that the cluster
--   resources required to do this are available). The default value for
--   maximum percent is 200%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __maximum percent__ value is set to the default value and is
--   used to define the upper limit on the number of the tasks in the
--   service that remain in the <tt>RUNNING</tt> state while the container
--   instances are in the <tt>DRAINING</tt> state. If the tasks in the
--   service use the Fargate launch type, the maximum percent value is not
--   used, although it is returned when describing your service.
deploymentConfiguration_maximumPercent :: Lens' DeploymentConfiguration (Maybe Int)

-- | The deployment circuit breaker can only be used for services using the
--   rolling update (<tt>ECS</tt>) deployment type.
--   
--   The <b>deployment circuit breaker</b> determines whether a service
--   deployment will fail if the service can't reach a steady state. If
--   deployment circuit breaker is enabled, a service deployment will
--   transition to a failed state and stop launching new tasks. If rollback
--   is enabled, when a service deployment fails, the service is rolled
--   back to the last deployment that completed successfully.
deploymentConfiguration_deploymentCircuitBreaker :: Lens' DeploymentConfiguration (Maybe DeploymentCircuitBreaker)

-- | The deployment controller type to use.
--   
--   There are three deployment controller types available:
--   
--   <ul>
--   <li><i>ECS</i> The rolling update (<tt>ECS</tt>) deployment type
--   involves replacing the current running version of the container with
--   the latest version. The number of containers Amazon ECS adds or
--   removes from the service during a rolling update is controlled by
--   adjusting the minimum and maximum number of healthy tasks allowed
--   during a service deployment, as specified in the
--   DeploymentConfiguration.</li>
--   <li><i>CODE_DEPLOY</i> The blue/green (<tt>CODE_DEPLOY</tt>)
--   deployment type uses the blue/green deployment model powered by
--   CodeDeploy, which allows you to verify a new deployment of a service
--   before sending production traffic to it.</li>
--   <li><i>EXTERNAL</i> The external (<tt>EXTERNAL</tt>) deployment type
--   enables you to use any third-party deployment controller for full
--   control over the deployment process for an Amazon ECS service.</li>
--   </ul>
deploymentController_type :: Lens' DeploymentController DeploymentControllerType

-- | The path inside the container at which to expose the host device.
device_containerPath :: Lens' Device (Maybe Text)

-- | The explicit permissions to provide to the container for the device.
--   By default, the container has permissions for <tt>read</tt>,
--   <tt>write</tt>, and <tt>mknod</tt> for the device.
device_permissions :: Lens' Device (Maybe [DeviceCgroupPermission])

-- | The path for the device on the host container instance.
device_hostPath :: Lens' Device Text

-- | A map of Docker driver-specific options passed through. This parameter
--   maps to <tt>DriverOpts</tt> in the <a>Create a volume</a> section of
--   the <a>Docker Remote API</a> and the <tt>xxopt</tt> option to
--   <a>docker volume create</a>.
dockerVolumeConfiguration_driverOpts :: Lens' DockerVolumeConfiguration (Maybe (HashMap Text Text))

-- | The Docker volume driver to use. The driver value must match the
--   driver name provided by Docker because it is used for task placement.
--   If the driver was installed using the Docker plugin CLI, use
--   <tt>docker plugin ls</tt> to retrieve the driver name from your
--   container instance. If the driver was installed using another method,
--   use Docker plugin discovery to retrieve the driver name. For more
--   information, see <a>Docker plugin discovery</a>. This parameter maps
--   to <tt>Driver</tt> in the <a>Create a volume</a> section of the
--   <a>Docker Remote API</a> and the <tt>xxdriver</tt> option to <a>docker
--   volume create</a>.
dockerVolumeConfiguration_driver :: Lens' DockerVolumeConfiguration (Maybe Text)

-- | The scope for the Docker volume that determines its lifecycle. Docker
--   volumes that are scoped to a <tt>task</tt> are automatically
--   provisioned when the task starts and destroyed when the task stops.
--   Docker volumes that are scoped as <tt>shared</tt> persist after the
--   task stops.
dockerVolumeConfiguration_scope :: Lens' DockerVolumeConfiguration (Maybe Scope)

-- | Custom metadata to add to your Docker volume. This parameter maps to
--   <tt>Labels</tt> in the <a>Create a volume</a> section of the <a>Docker
--   Remote API</a> and the <tt>xxlabel</tt> option to <a>docker volume
--   create</a>.
dockerVolumeConfiguration_labels :: Lens' DockerVolumeConfiguration (Maybe (HashMap Text Text))

-- | If this value is <tt>true</tt>, the Docker volume is created if it
--   does not already exist.
--   
--   This field is only used if the <tt>scope</tt> is <tt>shared</tt>.
dockerVolumeConfiguration_autoprovision :: Lens' DockerVolumeConfiguration (Maybe Bool)

-- | The Amazon EFS access point ID to use. If an access point is
--   specified, the root directory value specified in the
--   <tt>EFSVolumeConfiguration</tt> must either be omitted or set to
--   <tt>/</tt> which will enforce the path set on the EFS access point. If
--   an access point is used, transit encryption must be enabled in the
--   <tt>EFSVolumeConfiguration</tt>. For more information, see <a>Working
--   with Amazon EFS Access Points</a> in the <i>Amazon Elastic File System
--   User Guide</i>.
eFSAuthorizationConfig_accessPointId :: Lens' EFSAuthorizationConfig (Maybe Text)

-- | Whether or not to use the Amazon ECS task IAM role defined in a task
--   definition when mounting the Amazon EFS file system. If enabled,
--   transit encryption must be enabled in the
--   <tt>EFSVolumeConfiguration</tt>. If this parameter is omitted, the
--   default value of <tt>DISABLED</tt> is used. For more information, see
--   <a>Using Amazon EFS Access Points</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
eFSAuthorizationConfig_iam :: Lens' EFSAuthorizationConfig (Maybe EFSAuthorizationConfigIAM)

-- | The directory within the Amazon EFS file system to mount as the root
--   directory inside the host. If this parameter is omitted, the root of
--   the Amazon EFS volume will be used. Specifying <tt>/</tt> will have
--   the same effect as omitting this parameter.
--   
--   If an EFS access point is specified in the
--   <tt>authorizationConfig</tt>, the root directory parameter must either
--   be omitted or set to <tt>/</tt> which will enforce the path set on the
--   EFS access point.
eFSVolumeConfiguration_rootDirectory :: Lens' EFSVolumeConfiguration (Maybe Text)

-- | Whether or not to enable encryption for Amazon EFS data in transit
--   between the Amazon ECS host and the Amazon EFS server. Transit
--   encryption must be enabled if Amazon EFS IAM authorization is used. If
--   this parameter is omitted, the default value of <tt>DISABLED</tt> is
--   used. For more information, see <a>Encrypting Data in Transit</a> in
--   the <i>Amazon Elastic File System User Guide</i>.
eFSVolumeConfiguration_transitEncryption :: Lens' EFSVolumeConfiguration (Maybe EFSTransitEncryption)

-- | The authorization configuration details for the Amazon EFS file
--   system.
eFSVolumeConfiguration_authorizationConfig :: Lens' EFSVolumeConfiguration (Maybe EFSAuthorizationConfig)

-- | The port to use when sending encrypted data between the Amazon ECS
--   host and the Amazon EFS server. If you do not specify a transit
--   encryption port, it will use the port selection strategy that the
--   Amazon EFS mount helper uses. For more information, see <a>EFS Mount
--   Helper</a> in the <i>Amazon Elastic File System User Guide</i>.
eFSVolumeConfiguration_transitEncryptionPort :: Lens' EFSVolumeConfiguration (Maybe Int)

-- | The Amazon EFS file system ID to use.
eFSVolumeConfiguration_fileSystemId :: Lens' EFSVolumeConfiguration Text

-- | The Amazon Resource Name (ARN) of the Amazon S3 object containing the
--   environment variable file.
environmentFile_value :: Lens' EnvironmentFile Text

-- | The file type to use. The only supported value is <tt>s3</tt>.
environmentFile_type :: Lens' EnvironmentFile EnvironmentFileType

-- | The total amount, in GiB, of ephemeral storage to set for the task.
--   The minimum supported value is <tt>21</tt> GiB and the maximum
--   supported value is <tt>200</tt> GiB.
ephemeralStorage_sizeInGiB :: Lens' EphemeralStorage Int

-- | The log configuration for the results of the execute command actions.
--   The logs can be sent to CloudWatch Logs or an Amazon S3 bucket. When
--   <tt>logging=OVERRIDE</tt> is specified, a <tt>logConfiguration</tt>
--   must be provided.
executeCommandConfiguration_logConfiguration :: Lens' ExecuteCommandConfiguration (Maybe ExecuteCommandLogConfiguration)

-- | Specify an Key Management Service key ID to encrypt the data between
--   the local client and the container.
executeCommandConfiguration_kmsKeyId :: Lens' ExecuteCommandConfiguration (Maybe Text)

-- | The log setting to use for redirecting logs for your execute command
--   results. The following log settings are available.
--   
--   <ul>
--   <li><tt>NONE</tt>: The execute command session is not logged.</li>
--   <li><tt>DEFAULT</tt>: The <tt>awslogs</tt> configuration in the task
--   definition is used. If no logging parameter is specified, it defaults
--   to this value. If no <tt>awslogs</tt> log driver is configured in the
--   task definition, the output won't be logged.</li>
--   <li><tt>OVERRIDE</tt>: Specify the logging details as a part of
--   <tt>logConfiguration</tt>. If the <tt>OVERRIDE</tt> logging option is
--   specified, the <tt>logConfiguration</tt> is required.</li>
--   </ul>
executeCommandConfiguration_logging :: Lens' ExecuteCommandConfiguration (Maybe ExecuteCommandLogging)

-- | The name of the CloudWatch log group to send logs to.
--   
--   The CloudWatch log group must already be created.
executeCommandLogConfiguration_cloudWatchLogGroupName :: Lens' ExecuteCommandLogConfiguration (Maybe Text)

-- | An optional folder in the S3 bucket to place logs in.
executeCommandLogConfiguration_s3KeyPrefix :: Lens' ExecuteCommandLogConfiguration (Maybe Text)

-- | Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
executeCommandLogConfiguration_cloudWatchEncryptionEnabled :: Lens' ExecuteCommandLogConfiguration (Maybe Bool)

-- | Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
executeCommandLogConfiguration_s3EncryptionEnabled :: Lens' ExecuteCommandLogConfiguration (Maybe Bool)

-- | The name of the S3 bucket to send logs to.
--   
--   The S3 bucket must already be created.
executeCommandLogConfiguration_s3BucketName :: Lens' ExecuteCommandLogConfiguration (Maybe Text)

-- | The authorization credential option to use. The authorization
--   credential options can be provided using either the Amazon Resource
--   Name (ARN) of an Secrets Manager secret or SSM Parameter Store
--   parameter. The ARNs refer to the stored credentials.
fSxWindowsFileServerAuthorizationConfig_credentialsParameter :: Lens' FSxWindowsFileServerAuthorizationConfig Text

-- | A fully qualified domain name hosted by an <a>Directory Service</a>
--   Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon
--   EC2.
fSxWindowsFileServerAuthorizationConfig_domain :: Lens' FSxWindowsFileServerAuthorizationConfig Text

-- | The Amazon FSx for Windows File Server file system ID to use.
fSxWindowsFileServerVolumeConfiguration_fileSystemId :: Lens' FSxWindowsFileServerVolumeConfiguration Text

-- | The directory within the Amazon FSx for Windows File Server file
--   system to mount as the root directory inside the host.
fSxWindowsFileServerVolumeConfiguration_rootDirectory :: Lens' FSxWindowsFileServerVolumeConfiguration Text

-- | The authorization configuration details for the Amazon FSx for Windows
--   File Server file system.
fSxWindowsFileServerVolumeConfiguration_authorizationConfig :: Lens' FSxWindowsFileServerVolumeConfiguration FSxWindowsFileServerAuthorizationConfig

-- | The Amazon Resource Name (ARN) of the failed resource.
failure_arn :: Lens' Failure (Maybe Text)

-- | The reason for the failure.
failure_reason :: Lens' Failure (Maybe Text)

-- | The details of the failure.
failure_detail :: Lens' Failure (Maybe Text)

-- | The options to use when configuring the log router. This field is
--   optional and can be used to specify a custom configuration file or to
--   add additional metadata, such as the task, task definition, cluster,
--   and container instance details to the log event. If specified, the
--   syntax to use is
--   <tt>"options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}</tt>.
--   For more information, see <a>Creating a Task Definition that Uses a
--   FireLens Configuration</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   Tasks hosted on Fargate only support the <tt>file</tt> configuration
--   file type.
firelensConfiguration_options :: Lens' FirelensConfiguration (Maybe (HashMap Text Text))

-- | The log router to use. The valid values are <tt>fluentd</tt> or
--   <tt>fluentbit</tt>.
firelensConfiguration_type :: Lens' FirelensConfiguration FirelensConfigurationType

-- | The optional grace period within which to provide containers time to
--   bootstrap before failed health checks count towards the maximum number
--   of retries. You may specify between 0 and 300 seconds. The
--   <tt>startPeriod</tt> is disabled by default.
--   
--   If a health check succeeds within the <tt>startPeriod</tt>, then the
--   container is considered healthy and any subsequent failures count
--   toward the maximum number of retries.
healthCheck_startPeriod :: Lens' HealthCheck (Maybe Int)

-- | The number of times to retry a failed health check before the
--   container is considered unhealthy. You may specify between 1 and 10
--   retries. The default value is 3.
healthCheck_retries :: Lens' HealthCheck (Maybe Int)

-- | The time period in seconds between each health check execution. You
--   may specify between 5 and 300 seconds. The default value is 30
--   seconds.
healthCheck_interval :: Lens' HealthCheck (Maybe Int)

-- | The time period in seconds to wait for a health check to succeed
--   before it is considered a failure. You may specify between 2 and 60
--   seconds. The default value is 5.
healthCheck_timeout :: Lens' HealthCheck (Maybe Int)

-- | A string array representing the command that the container runs to
--   determine if it is healthy. The string array must start with
--   <tt>CMD</tt> to execute the command arguments directly, or
--   <tt>CMD-SHELL</tt> to run the command with the container's default
--   shell.
--   
--   When you use the Amazon Web Services Management Console JSON panel,
--   the Command Line Interface, or the APIs, you should enclose the list
--   of commands in brackets, as shown below.
--   
--   <pre>
--   [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
--   </pre>
--   
--   You do not need to include the brackets when you use the Amazon Web
--   Services Management Consoleas shown below.
--   
--   <pre>
--   "CMD-SHELL", "curl -f http://localhost/ || exit 1"
--   </pre>
--   
--   An exit code of 0 indicates success, and non-zero exit code indicates
--   failure. For more information, see <tt>HealthCheck</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
healthCheck_command :: Lens' HealthCheck [Text]

-- | The hostname to use in the <tt>/etc/hosts</tt> entry.
hostEntry_hostname :: Lens' HostEntry Text

-- | The IP address to use in the <tt>/etc/hosts</tt> entry.
hostEntry_ipAddress :: Lens' HostEntry Text

-- | When the <tt>host</tt> parameter is used, specify a
--   <tt>sourcePath</tt> to declare the path on the host container instance
--   that is presented to the container. If this parameter is empty, then
--   the Docker daemon has assigned a host path for you. If the
--   <tt>host</tt> parameter contains a <tt>sourcePath</tt> file location,
--   then the data volume persists at the specified location on the host
--   container instance until you delete it manually. If the
--   <tt>sourcePath</tt> value does not exist on the host container
--   instance, the Docker daemon creates it. If the location does exist,
--   the contents of the source path folder are exported.
--   
--   If you are using the Fargate launch type, the <tt>sourcePath</tt>
--   parameter is not supported.
hostVolumeProperties_sourcePath :: Lens' HostVolumeProperties (Maybe Text)

-- | The Elastic Inference accelerator device name. The <tt>deviceName</tt>
--   must also be referenced in a container definition as a
--   ResourceRequirement.
inferenceAccelerator_deviceName :: Lens' InferenceAccelerator Text

-- | The Elastic Inference accelerator type to use.
inferenceAccelerator_deviceType :: Lens' InferenceAccelerator Text

-- | The Elastic Inference accelerator device name to override for the
--   task. This parameter must match a <tt>deviceName</tt> specified in the
--   task definition.
inferenceAcceleratorOverride_deviceName :: Lens' InferenceAcceleratorOverride (Maybe Text)

-- | The Elastic Inference accelerator type to use.
inferenceAcceleratorOverride_deviceType :: Lens' InferenceAcceleratorOverride (Maybe Text)

-- | The Linux capabilities for the container that have been removed from
--   the default configuration provided by Docker. This parameter maps to
--   <tt>CapDrop</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-drop</tt> option to
--   <a>docker run</a>.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
kernelCapabilities_drop :: Lens' KernelCapabilities (Maybe [Text])

-- | The Linux capabilities for the container that have been added to the
--   default configuration provided by Docker. This parameter maps to
--   <tt>CapAdd</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-add</tt> option to
--   <a>docker run</a>.
--   
--   Tasks launched on Fargate only support adding the <tt>SYS_PTRACE</tt>
--   kernel capability.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
kernelCapabilities_add :: Lens' KernelCapabilities (Maybe [Text])

-- | The value of the key-value pair. For environment variables, this is
--   the value of the environment variable.
keyValuePair_value :: Lens' KeyValuePair (Maybe Text)

-- | The name of the key-value pair. For environment variables, this is the
--   name of the environment variable.
keyValuePair_name :: Lens' KeyValuePair (Maybe Text)

-- | The value for the size (in MiB) of the <tt>/dev/shm</tt> volume. This
--   parameter maps to the <tt>--shm-size</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>sharedMemorySize</tt> parameter is not supported.
linuxParameters_sharedMemorySize :: Lens' LinuxParameters (Maybe Int)

-- | Run an <tt>init</tt> process inside the container that forwards
--   signals and reaps processes. This parameter maps to the
--   <tt>--init</tt> option to <a>docker run</a>. This parameter requires
--   version 1.25 of the Docker Remote API or greater on your container
--   instance. To check the Docker Remote API version on your container
--   instance, log in to your container instance and run the following
--   command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
linuxParameters_initProcessEnabled :: Lens' LinuxParameters (Maybe Bool)

-- | The container path, mount options, and size (in MiB) of the tmpfs
--   mount. This parameter maps to the <tt>--tmpfs</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>tmpfs</tt> parameter is not supported.
linuxParameters_tmpfs :: Lens' LinuxParameters (Maybe [Tmpfs])

-- | This allows you to tune a container's memory swappiness behavior. A
--   <tt>swappiness</tt> value of <tt>0</tt> will cause swapping to not
--   happen unless absolutely necessary. A <tt>swappiness</tt> value of
--   <tt>100</tt> will cause pages to be swapped very aggressively.
--   Accepted values are whole numbers between <tt>0</tt> and <tt>100</tt>.
--   If the <tt>swappiness</tt> parameter is not specified, a default value
--   of <tt>60</tt> is used. If a value is not specified for
--   <tt>maxSwap</tt> then this parameter is ignored. This parameter maps
--   to the <tt>--memory-swappiness</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>swappiness</tt> parameter is not supported.
linuxParameters_swappiness :: Lens' LinuxParameters (Maybe Int)

-- | Any host devices to expose to the container. This parameter maps to
--   <tt>Devices</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--device</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>devices</tt> parameter is not supported.
linuxParameters_devices :: Lens' LinuxParameters (Maybe [Device])

-- | The Linux capabilities for the container that are added to or dropped
--   from the default configuration provided by Docker.
--   
--   For tasks that use the Fargate launch type, <tt>capabilities</tt> is
--   supported for all platform versions but the <tt>add</tt> parameter is
--   only supported if using platform version 1.4.0 or later.
linuxParameters_capabilities :: Lens' LinuxParameters (Maybe KernelCapabilities)

-- | The total amount of swap memory (in MiB) a container can use. This
--   parameter will be translated to the <tt>--memory-swap</tt> option to
--   <a>docker run</a> where the value would be the sum of the container
--   memory plus the <tt>maxSwap</tt> value.
--   
--   If a <tt>maxSwap</tt> value of <tt>0</tt> is specified, the container
--   will not use swap. Accepted values are <tt>0</tt> or any positive
--   integer. If the <tt>maxSwap</tt> parameter is omitted, the container
--   will use the swap configuration for the container instance it is
--   running on. A <tt>maxSwap</tt> value must be set for the
--   <tt>swappiness</tt> parameter to be used.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>maxSwap</tt> parameter is not supported.
linuxParameters_maxSwap :: Lens' LinuxParameters (Maybe Int)

-- | The name of the load balancer to associate with the Amazon ECS service
--   or task set.
--   
--   A load balancer name is only specified when using a Classic Load
--   Balancer. If you are using an Application Load Balancer or a Network
--   Load Balancer the load balancer name parameter should be omitted.
loadBalancer_loadBalancerName :: Lens' LoadBalancer (Maybe Text)

-- | The name of the container (as it appears in a container definition) to
--   associate with the load balancer.
loadBalancer_containerName :: Lens' LoadBalancer (Maybe Text)

-- | The full Amazon Resource Name (ARN) of the Elastic Load Balancing
--   target group or groups associated with a service or task set.
--   
--   A target group ARN is only specified when using an Application Load
--   Balancer or Network Load Balancer. If you are using a Classic Load
--   Balancer the target group ARN should be omitted.
--   
--   For services using the <tt>ECS</tt> deployment controller, you can
--   specify one or multiple target groups. For more information, see
--   <a>Registering Multiple Target Groups with a Service</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For services using the <tt>CODE_DEPLOY</tt> deployment controller, you
--   are required to define two target groups for the load balancer. For
--   more information, see <a>Blue/Green Deployment with CodeDeploy</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your service's task definition uses the <tt>awsvpc</tt> network
--   mode (which is required for the Fargate launch type), you must choose
--   <tt>ip</tt> as the target type, not <tt>instance</tt>, when creating
--   your target groups because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
loadBalancer_targetGroupArn :: Lens' LoadBalancer (Maybe Text)

-- | The port on the container to associate with the load balancer. This
--   port must correspond to a <tt>containerPort</tt> in the task
--   definition the tasks in the service are using. For tasks that use the
--   EC2 launch type, the container instance they are launched on must
--   allow ingress traffic on the <tt>hostPort</tt> of the port mapping.
loadBalancer_containerPort :: Lens' LoadBalancer (Maybe Int)

-- | The configuration options to send to the log driver. This parameter
--   requires version 1.19 of the Docker Remote API or greater on your
--   container instance. To check the Docker Remote API version on your
--   container instance, log in to your container instance and run the
--   following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
logConfiguration_options :: Lens' LogConfiguration (Maybe (HashMap Text Text))

-- | The secrets to pass to the log configuration. For more information,
--   see <a>Specifying Sensitive Data</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
logConfiguration_secretOptions :: Lens' LogConfiguration (Maybe [Secret])

-- | The log driver to use for the container.
--   
--   For tasks on Fargate, the supported log drivers are <tt>awslogs</tt>,
--   <tt>splunk</tt>, and <tt>awsfirelens</tt>.
--   
--   For tasks hosted on Amazon EC2 instances, the supported log drivers
--   are <tt>awslogs</tt>, <tt>fluentd</tt>, <tt>gelf</tt>,
--   <tt>json-file</tt>, <tt>journald</tt>,
--   <tt>logentries</tt>,<tt>syslog</tt>, <tt>splunk</tt>, and
--   <tt>awsfirelens</tt>.
--   
--   For more information about using the <tt>awslogs</tt> log driver, see
--   <a>Using the awslogs log driver</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   For more information about using the <tt>awsfirelens</tt> log driver,
--   see <a>Custom log routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   If you have a custom driver that is not listed, you can fork the
--   Amazon ECS container agent project that is <a>available on GitHub</a>
--   and customize it to work with that driver. We encourage you to submit
--   pull requests for changes that you would like to have included.
--   However, we do not currently provide support for running modified
--   copies of this software.
logConfiguration_logDriver :: Lens' LogConfiguration LogDriver

-- | The last known status of the managed agent.
managedAgent_lastStatus :: Lens' ManagedAgent (Maybe Text)

-- | The reason for why the managed agent is in the state it is in.
managedAgent_reason :: Lens' ManagedAgent (Maybe Text)

-- | The name of the managed agent. When the execute command feature is
--   enabled, the managed agent name is <tt>ExecuteCommandAgent</tt>.
managedAgent_name :: Lens' ManagedAgent (Maybe ManagedAgentName)

-- | The Unix timestamp for when the managed agent was last started.
managedAgent_lastStartedAt :: Lens' ManagedAgent (Maybe UTCTime)

-- | The reason for the status of the managed agent.
managedAgentStateChange_reason :: Lens' ManagedAgentStateChange (Maybe Text)

-- | The name of the container associated with the managed agent.
managedAgentStateChange_containerName :: Lens' ManagedAgentStateChange Text

-- | The name of the managed agent.
managedAgentStateChange_managedAgentName :: Lens' ManagedAgentStateChange ManagedAgentName

-- | The status of the managed agent.
managedAgentStateChange_status :: Lens' ManagedAgentStateChange Text

-- | Whether or not to enable managed scaling for the capacity provider.
managedScaling_status :: Lens' ManagedScaling (Maybe ManagedScalingStatus)

-- | The maximum number of container instances that Amazon ECS will scale
--   in or scale out at one time. If this parameter is omitted, the default
--   value of <tt>10000</tt> is used.
managedScaling_maximumScalingStepSize :: Lens' ManagedScaling (Maybe Natural)

-- | The target capacity value for the capacity provider. The specified
--   value must be greater than <tt>0</tt> and less than or equal to
--   <tt>100</tt>. A value of <tt>100</tt> will result in the Amazon EC2
--   instances in your Auto Scaling group being completely utilized.
managedScaling_targetCapacity :: Lens' ManagedScaling (Maybe Natural)

-- | The minimum number of container instances that Amazon ECS will scale
--   in or scale out at one time. If this parameter is omitted, the default
--   value of <tt>1</tt> is used.
managedScaling_minimumScalingStepSize :: Lens' ManagedScaling (Maybe Natural)

-- | The period of time, in seconds, after a newly launched Amazon EC2
--   instance can contribute to CloudWatch metrics for Auto Scaling group.
--   If this parameter is omitted, the default value of <tt>300</tt>
--   seconds is used.
managedScaling_instanceWarmupPeriod :: Lens' ManagedScaling (Maybe Natural)

-- | The path on the container to mount the host volume at.
mountPoint_containerPath :: Lens' MountPoint (Maybe Text)

-- | The name of the volume to mount. Must be a volume name referenced in
--   the <tt>name</tt> parameter of task definition <tt>volume</tt>.
mountPoint_sourceVolume :: Lens' MountPoint (Maybe Text)

-- | If this value is <tt>true</tt>, the container has read-only access to
--   the volume. If this value is <tt>false</tt>, then the container can
--   write to the volume. The default value is <tt>false</tt>.
mountPoint_readOnly :: Lens' MountPoint (Maybe Bool)

-- | The IP address that the container is bound to on the container
--   instance.
networkBinding_bindIP :: Lens' NetworkBinding (Maybe Text)

-- | The protocol used for the network binding.
networkBinding_protocol :: Lens' NetworkBinding (Maybe TransportProtocol)

-- | The port number on the host that is used with the network binding.
networkBinding_hostPort :: Lens' NetworkBinding (Maybe Int)

-- | The port number on the container that is used with the network
--   binding.
networkBinding_containerPort :: Lens' NetworkBinding (Maybe Int)

-- | The VPC subnets and security groups associated with a task.
--   
--   All specified subnets and security groups must be from the same VPC.
networkConfiguration_awsvpcConfiguration :: Lens' NetworkConfiguration (Maybe AwsVpcConfiguration)

-- | The private IPv6 address for the network interface.
networkInterface_ipv6Address :: Lens' NetworkInterface (Maybe Text)

-- | The private IPv4 address for the network interface.
networkInterface_privateIpv4Address :: Lens' NetworkInterface (Maybe Text)

-- | The attachment ID for the network interface.
networkInterface_attachmentId :: Lens' NetworkInterface (Maybe Text)

-- | A cluster query language expression to apply to the constraint. The
--   expression can have a maximum length of 2000 characters. You can't
--   specify an expression if the constraint type is
--   <tt>distinctInstance</tt>. For more information, see <a>Cluster query
--   language</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
placementConstraint_expression :: Lens' PlacementConstraint (Maybe Text)

-- | The type of constraint. Use <tt>distinctInstance</tt> to ensure that
--   each task in a particular group is running on a different container
--   instance. Use <tt>memberOf</tt> to restrict the selection to a group
--   of valid candidates.
placementConstraint_type :: Lens' PlacementConstraint (Maybe PlacementConstraintType)

-- | The field to apply the placement strategy against. For the
--   <tt>spread</tt> placement strategy, valid values are
--   <tt>instanceId</tt> (or <tt>host</tt>, which has the same effect), or
--   any platform or custom attribute that is applied to a container
--   instance, such as <tt>attribute:ecs.availability-zone</tt>. For the
--   <tt>binpack</tt> placement strategy, valid values are <tt>cpu</tt> and
--   <tt>memory</tt>. For the <tt>random</tt> placement strategy, this
--   field is not used.
placementStrategy_field :: Lens' PlacementStrategy (Maybe Text)

-- | The type of placement strategy. The <tt>random</tt> placement strategy
--   randomly places tasks on available candidates. The <tt>spread</tt>
--   placement strategy spreads placement across available candidates
--   evenly based on the <tt>field</tt> parameter. The <tt>binpack</tt>
--   strategy places tasks on available candidates that have the least
--   available amount of the resource that is specified with the
--   <tt>field</tt> parameter. For example, if you binpack on memory, a
--   task is placed on the instance with the least amount of remaining
--   memory (but still enough to run the task).
placementStrategy_type :: Lens' PlacementStrategy (Maybe PlacementStrategyType)

-- | The ID for the GPU(s) on the container instance. The available GPU IDs
--   can also be obtained on the container instance in the
--   <tt>/var/lib/ecs/gpu/nvidia_gpu_info.json</tt> file.
platformDevice_id :: Lens' PlatformDevice Text

-- | The type of device that is available on the container instance. The
--   only supported value is <tt>GPU</tt>.
platformDevice_type :: Lens' PlatformDevice PlatformDeviceType

-- | The protocol used for the port mapping. Valid values are <tt>tcp</tt>
--   and <tt>udp</tt>. The default is <tt>tcp</tt>.
portMapping_protocol :: Lens' PortMapping (Maybe TransportProtocol)

-- | The port number on the container instance to reserve for your
--   container.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, the <tt>hostPort</tt> can either be left
--   blank or set to the same value as the <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode, you can specify a non-reserved host port for your container port
--   mapping, or you can omit the <tt>hostPort</tt> (or set it to
--   <tt>0</tt>) while specifying a <tt>containerPort</tt> and your
--   container automatically receives a port in the ephemeral port range
--   for your container instance operating system and Docker version.
--   
--   The default ephemeral port range for Docker version 1.6.0 and later is
--   listed on the instance under
--   <tt>/proc/sys/net/ipv4/ip_local_port_range</tt>. If this kernel
--   parameter is unavailable, the default ephemeral port range from 49153
--   through 65535 is used. Do not attempt to specify a host port in the
--   ephemeral port range as these are reserved for automatic assignment.
--   In general, ports below 32768 are outside of the ephemeral port range.
--   
--   The default ephemeral port range from 49153 through 65535 is always
--   used for Docker versions before 1.6.0.
--   
--   The default reserved ports are 22 for SSH, the Docker ports 2375 and
--   2376, and the Amazon ECS container agent ports 51678-51680. Any host
--   port that was previously specified in a running task is also reserved
--   while the task is running (after a task stops, the host port is
--   released). The current reserved ports are displayed in the
--   <tt>remainingResources</tt> of DescribeContainerInstances output. A
--   container instance can have up to 100 reserved ports at a time,
--   including the default reserved ports. Automatically assigned ports
--   don't count toward the 100 reserved ports limit.
portMapping_hostPort :: Lens' PortMapping (Maybe Int)

-- | The port number on the container that is bound to the user-specified
--   or automatically assigned host port.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, exposed ports should be specified using
--   <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode and you specify a container port and not a host port, your
--   container automatically receives a host port in the ephemeral port
--   range. For more information, see <tt>hostPort</tt>. Port mappings that
--   are automatically assigned in this way do not count toward the 100
--   reserved ports limit of a container instance.
portMapping_containerPort :: Lens' PortMapping (Maybe Int)

-- | The proxy type. The only supported value is <tt>APPMESH</tt>.
proxyConfiguration_type :: Lens' ProxyConfiguration (Maybe ProxyConfigurationType)

-- | The set of network configuration parameters to provide the Container
--   Network Interface (CNI) plugin, specified as key-value pairs.
--   
--   <ul>
--   <li><tt>IgnoredUID</tt> - (Required) The user ID (UID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredGID</tt> is specified, this field can be empty.</li>
--   <li><tt>IgnoredGID</tt> - (Required) The group ID (GID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredUID</tt> is specified, this field can be empty.</li>
--   <li><tt>AppPorts</tt> - (Required) The list of ports that the
--   application uses. Network traffic to these ports is forwarded to the
--   <tt>ProxyIngressPort</tt> and <tt>ProxyEgressPort</tt>.</li>
--   <li><tt>ProxyIngressPort</tt> - (Required) Specifies the port that
--   incoming traffic to the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>ProxyEgressPort</tt> - (Required) Specifies the port that
--   outgoing traffic from the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>EgressIgnoredPorts</tt> - (Required) The egress traffic going
--   to the specified ports is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   <li><tt>EgressIgnoredIPs</tt> - (Required) The egress traffic going to
--   the specified IP addresses is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   </ul>
proxyConfiguration_properties :: Lens' ProxyConfiguration (Maybe [KeyValuePair])

-- | The name of the container that will serve as the App Mesh proxy.
proxyConfiguration_containerName :: Lens' ProxyConfiguration Text

-- | The Amazon Resource Name (ARN) of the secret containing the private
--   repository credentials.
--   
--   When you are using the Amazon ECS API, CLI, or Amazon Web Services
--   SDK, if the secret exists in the same Region as the task that you are
--   launching then you can use either the full ARN or the name of the
--   secret. When you are using the Amazon Web Services Management Console,
--   you must specify the full ARN of the secret.
repositoryCredentials_credentialsParameter :: Lens' RepositoryCredentials Text

-- | When the <tt>stringSetValue</tt> type is set, the value of the
--   resource must be a string type.
resource_stringSetValue :: Lens' Resource (Maybe [Text])

-- | When the <tt>integerValue</tt> type is set, the value of the resource
--   must be an integer.
resource_integerValue :: Lens' Resource (Maybe Int)

-- | When the <tt>doubleValue</tt> type is set, the value of the resource
--   must be a double precision floating-point type.
resource_doubleValue :: Lens' Resource (Maybe Double)

-- | When the <tt>longValue</tt> type is set, the value of the resource
--   must be an extended precision floating-point type.
resource_longValue :: Lens' Resource (Maybe Integer)

-- | The name of the resource, such as <tt>CPU</tt>, <tt>MEMORY</tt>,
--   <tt>PORTS</tt>, <tt>PORTS_UDP</tt>, or a user-defined resource.
resource_name :: Lens' Resource (Maybe Text)

-- | The type of the resource, such as <tt>INTEGER</tt>, <tt>DOUBLE</tt>,
--   <tt>LONG</tt>, or <tt>STRINGSET</tt>.
resource_type :: Lens' Resource (Maybe Text)

-- | The value for the specified resource type.
--   
--   If the <tt>GPU</tt> type is used, the value is the number of physical
--   <tt>GPUs</tt> the Amazon ECS container agent will reserve for the
--   container. The number of GPUs reserved for all containers in a task
--   should not exceed the number of available GPUs on the container
--   instance the task is launched on.
--   
--   If the <tt>InferenceAccelerator</tt> type is used, the <tt>value</tt>
--   should match the <tt>deviceName</tt> for an InferenceAccelerator
--   specified in a task definition.
resourceRequirement_value :: Lens' ResourceRequirement Text

-- | The type of resource to assign to a container. The supported values
--   are <tt>GPU</tt> or <tt>InferenceAccelerator</tt>.
resourceRequirement_type :: Lens' ResourceRequirement ResourceType

-- | The value, specified as a percent total of a service's
--   <tt>desiredCount</tt>, to scale the task set. Accepted values are
--   numbers between 0 and 100.
scale_value :: Lens' Scale (Maybe Double)

-- | The unit of measure for the scale value.
scale_unit :: Lens' Scale (Maybe ScaleUnit)

-- | The name of the secret.
secret_name :: Lens' Secret Text

-- | The secret to expose to the container. The supported values are either
--   the full ARN of the Secrets Manager secret or the full ARN of the
--   parameter in the SSM Parameter Store.
--   
--   If the SSM Parameter Store parameter exists in the same Region as the
--   task you are launching, then you can use either the full ARN or name
--   of the parameter. If the parameter exists in a different Region, then
--   the full ARN must be specified.
secret_valueFrom :: Lens' Secret Text

-- | The Unix timestamp for when the event was triggered.
serviceEvent_createdAt :: Lens' ServiceEvent (Maybe UTCTime)

-- | The ID string of the event.
serviceEvent_id :: Lens' ServiceEvent (Maybe Text)

-- | The event message.
serviceEvent_message :: Lens' ServiceEvent (Maybe Text)

-- | The Amazon Resource Name (ARN) of the service registry. The currently
--   supported service registry is Cloud Map. For more information, see
--   <a>CreateService</a>.
serviceRegistry_registryArn :: Lens' ServiceRegistry (Maybe Text)

-- | The container name value, already specified in the task definition, to
--   be used for your service discovery service. If the task definition
--   that your service task specifies uses the <tt>bridge</tt> or
--   <tt>host</tt> network mode, you must specify a <tt>containerName</tt>
--   and <tt>containerPort</tt> combination from the task definition. If
--   the task definition that your service task specifies uses the
--   <tt>awsvpc</tt> network mode and a type SRV DNS record is used, you
--   must specify either a <tt>containerName</tt> and
--   <tt>containerPort</tt> combination or a <tt>port</tt> value, but not
--   both.
serviceRegistry_containerName :: Lens' ServiceRegistry (Maybe Text)

-- | The port value, already specified in the task definition, to be used
--   for your service discovery service. If the task definition your
--   service task specifies uses the <tt>bridge</tt> or <tt>host</tt>
--   network mode, you must specify a <tt>containerName</tt> and
--   <tt>containerPort</tt> combination from the task definition. If the
--   task definition your service task specifies uses the <tt>awsvpc</tt>
--   network mode and a type SRV DNS record is used, you must specify
--   either a <tt>containerName</tt> and <tt>containerPort</tt> combination
--   or a <tt>port</tt> value, but not both.
serviceRegistry_containerPort :: Lens' ServiceRegistry (Maybe Int)

-- | The port value used if your service discovery service specified an SRV
--   record. This field may be used if both the <tt>awsvpc</tt> network
--   mode and SRV records are used.
serviceRegistry_port :: Lens' ServiceRegistry (Maybe Int)

-- | A URL back to managed agent on the container that the SSM Session
--   Manager client uses to send commands and receive output from the
--   container.
session_streamUrl :: Lens' Session (Maybe Text)

-- | An encrypted token value containing session and caller information.
--   Used to authenticate the connection to the container.
session_tokenValue :: Lens' Session (Maybe Text)

-- | The ID of the execute command session.
session_sessionId :: Lens' Session (Maybe Text)

-- | Whether the account setting is enabled or disabled for the specified
--   resource.
setting_value :: Lens' Setting (Maybe Text)

-- | The Amazon ECS resource name.
setting_name :: Lens' Setting (Maybe SettingName)

-- | The ARN of the principal, which can be an IAM user, IAM role, or the
--   root user. If this field is omitted, the authenticated user is
--   assumed.
setting_principalArn :: Lens' Setting (Maybe Text)

-- | The value for the namespaced kernel parameter specified in
--   <tt>namespace</tt>.
systemControl_value :: Lens' SystemControl (Maybe Text)

-- | The namespaced kernel parameter for which to set a <tt>value</tt>.
systemControl_namespace :: Lens' SystemControl (Maybe Text)

-- | The optional part of a key-value pair that make up a tag. A
--   <tt>value</tt> acts as a descriptor within a tag category (key).
tag_value :: Lens' Tag (Maybe Text)

-- | One part of a key-value pair that make up a tag. A <tt>key</tt> is a
--   general label that acts like a category for more specific tag values.
tag_key :: Lens' Tag (Maybe Text)

-- | The Unix timestamp for when the task was stopped (the task
--   transitioned from the <tt>RUNNING</tt> state to the <tt>STOPPED</tt>
--   state).
task_stoppedAt :: Lens' Task (Maybe UTCTime)

-- | The desired status of the task. For more information, see <a>Task
--   Lifecycle</a>.
task_desiredStatus :: Lens' Task (Maybe Text)

-- | One or more container overrides.
task_overrides :: Lens' Task (Maybe TaskOverride)

-- | The Elastic Inference accelerator associated with the task.
task_inferenceAccelerators :: Lens' Task (Maybe [InferenceAccelerator])

-- | The ARN of the cluster that hosts the task.
task_clusterArn :: Lens' Task (Maybe Text)

-- | The name of the task group associated with the task.
task_group :: Lens' Task (Maybe Text)

-- | The Elastic Network Adapter associated with the task if the task uses
--   the <tt>awsvpc</tt> network mode.
task_attachments :: Lens' Task (Maybe [Attachment])

-- | The Unix timestamp for when the task was created (the task entered the
--   <tt>PENDING</tt> state).
task_createdAt :: Lens' Task (Maybe UTCTime)

-- | The stop code indicating why a task was stopped. The
--   <tt>stoppedReason</tt> may contain additional details.
task_stopCode :: Lens' Task (Maybe TaskStopCode)

-- | The platform version on which your task is running. A platform version
--   is only specified for tasks using the Fargate launch type. If one is
--   not specified, the <tt>LATEST</tt> platform version is used by
--   default. For more information, see <a>Fargate Platform Versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
task_platformVersion :: Lens' Task (Maybe Text)

-- | The Amazon Resource Name (ARN) of the task.
task_taskArn :: Lens' Task (Maybe Text)

-- | The ARN of the container instances that host the task.
task_containerInstanceArn :: Lens' Task (Maybe Text)

-- | The Unix timestamp for when the task execution stopped.
task_executionStoppedAt :: Lens' Task (Maybe UTCTime)

-- | The ephemeral storage settings for the task.
task_ephemeralStorage :: Lens' Task (Maybe EphemeralStorage)

-- | The last known status of the task. For more information, see <a>Task
--   Lifecycle</a>.
task_lastStatus :: Lens' Task (Maybe Text)

-- | The amount of memory (in MiB) used by the task as expressed in a task
--   definition. It can be expressed as an integer using MiB, for example
--   <tt>1024</tt>. It can also be expressed as a string using GB, for
--   example <tt>1GB</tt> or <tt>1 GB</tt>. String values are converted to
--   an integer indicating the MiB when the task definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
task_memory :: Lens' Task (Maybe Text)

-- | The Unix timestamp for when the container image pull completed.
task_pullStoppedAt :: Lens' Task (Maybe UTCTime)

-- | The containers associated with the task.
task_containers :: Lens' Task (Maybe [Container])

-- | The Unix timestamp for when the task started (the task transitioned
--   from the <tt>PENDING</tt> state to the <tt>RUNNING</tt> state).
task_startedAt :: Lens' Task (Maybe UTCTime)

-- | The availability zone of the task.
task_availabilityZone :: Lens' Task (Maybe Text)

-- | The attributes of the task
task_attributes :: Lens' Task (Maybe [Attribute])

-- | The version counter for the task. Every time a task experiences a
--   change that triggers a CloudWatch event, the version counter is
--   incremented. If you are replicating your Amazon ECS task state with
--   CloudWatch Events, you can compare the version of a task reported by
--   the Amazon ECS API actions with the version reported in CloudWatch
--   Events for the task (inside the <tt>detail</tt> object) to verify that
--   the version in your event stream is current.
task_version :: Lens' Task (Maybe Integer)

-- | The capacity provider associated with the task.
task_capacityProviderName :: Lens' Task (Maybe Text)

-- | The tag specified when a task is started. If the task is started by an
--   Amazon ECS service, then the <tt>startedBy</tt> parameter contains the
--   deployment ID of the service that starts it.
task_startedBy :: Lens' Task (Maybe Text)

-- | The reason that the task was stopped.
task_stoppedReason :: Lens' Task (Maybe Text)

-- | The connectivity status of a task.
task_connectivity :: Lens' Task (Maybe Connectivity)

-- | The Unix timestamp for when the task stops (transitions from the
--   <tt>RUNNING</tt> state to <tt>STOPPED</tt>).
task_stoppingAt :: Lens' Task (Maybe UTCTime)

-- | The infrastructure on which your task is running. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
task_launchType :: Lens' Task (Maybe LaunchType)

-- | The ARN of the task definition that creates the task.
task_taskDefinitionArn :: Lens' Task (Maybe Text)

-- | The health status for the task, which is determined by the health of
--   the essential containers in the task. If all essential containers in
--   the task are reporting as <tt>HEALTHY</tt>, then the task status also
--   reports as <tt>HEALTHY</tt>. If any essential containers in the task
--   are reporting as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>, then the task
--   status also reports as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>,
--   accordingly.
--   
--   The Amazon ECS container agent does not monitor or report on Docker
--   health checks that are embedded in a container image (such as those
--   specified in a parent image or from the image's Dockerfile) and not
--   specified in the container definition. Health check parameters that
--   are specified in a container definition override any Docker health
--   checks that exist in the container image.
task_healthStatus :: Lens' Task (Maybe HealthStatus)

-- | The Unix timestamp for when the task last went into <tt>CONNECTED</tt>
--   status.
task_connectivityAt :: Lens' Task (Maybe UTCTime)

-- | The number of CPU units used by the task as expressed in a task
--   definition. It can be expressed as an integer using CPU units, for
--   example <tt>1024</tt>. It can also be expressed as a string using
--   vCPUs, for example <tt>1 vCPU</tt> or <tt>1 vcpu</tt>. String values
--   are converted to an integer indicating the CPU units when the task
--   definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
task_cpu :: Lens' Task (Maybe Text)

-- | Whether or not execute command functionality is enabled for this task.
--   If <tt>true</tt>, this enables execute command functionality on all
--   containers in the task.
task_enableExecuteCommand :: Lens' Task (Maybe Bool)

-- | The Unix timestamp for when the container image pull began.
task_pullStartedAt :: Lens' Task (Maybe UTCTime)

-- | The metadata that you apply to the task to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
task_tags :: Lens' Task (Maybe [Tag])

-- | The status of the task definition.
taskDefinition_status :: Lens' TaskDefinition (Maybe TaskDefinitionStatus)

-- | The Elastic Inference accelerator associated with the task.
taskDefinition_inferenceAccelerators :: Lens' TaskDefinition (Maybe [InferenceAccelerator])

-- | The Amazon Resource Name (ARN) of the task execution role that grants
--   the Amazon ECS container agent permission to make Amazon Web Services
--   API calls on your behalf. The task execution IAM role is required
--   depending on the requirements of your task. For more information, see
--   <a>Amazon ECS task execution IAM role</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
taskDefinition_executionRoleArn :: Lens' TaskDefinition (Maybe Text)

-- | The task launch types the task definition was validated against. To
--   determine which task launch types the task definition is validated
--   for, see the TaskDefinition$compatibilities parameter.
taskDefinition_requiresCompatibilities :: Lens' TaskDefinition (Maybe [Compatibility])

-- | The ephemeral storage settings to use for tasks run with the task
--   definition.
taskDefinition_ephemeralStorage :: Lens' TaskDefinition (Maybe EphemeralStorage)

-- | The process namespace to use for the containers in the task. The valid
--   values are <tt>host</tt> or <tt>task</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> PID mode on the same container instance share the same
--   process namespace with the host Amazon EC2 instance. If <tt>task</tt>
--   is specified, all containers within the specified task share the same
--   process namespace. If no value is specified, the default is a private
--   namespace. For more information, see <a>PID settings</a> in the
--   <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
taskDefinition_pidMode :: Lens' TaskDefinition (Maybe PidMode)

-- | The name of a family that this task definition is registered to. Up to
--   255 letters (uppercase and lowercase), numbers, hyphens, and
--   underscores are allowed.
--   
--   A family groups multiple versions of a task definition. Amazon ECS
--   gives the first task definition that you registered to a family a
--   revision number of 1. Amazon ECS gives sequential revision numbers to
--   each task definition that you add.
taskDefinition_family :: Lens' TaskDefinition (Maybe Text)

-- | The IPC resource namespace to use for the containers in the task. The
--   valid values are <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If
--   <tt>host</tt> is specified, then all containers within the tasks that
--   specified the <tt>host</tt> IPC mode on the same container instance
--   share the same IPC resources with the host Amazon EC2 instance. If
--   <tt>task</tt> is specified, all containers within the specified task
--   share the same IPC resources. If <tt>none</tt> is specified, then IPC
--   resources within the containers of a task are private and not shared
--   with other containers in a task or on the container instance. If no
--   value is specified, then the IPC resource namespace sharing depends on
--   the Docker daemon setting on the container instance. For more
--   information, see <a>IPC settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
taskDefinition_ipcMode :: Lens' TaskDefinition (Maybe IpcMode)

-- | A list of container definitions in JSON format that describe the
--   different containers that make up your task. For more information
--   about container definition parameters and defaults, see <a>Amazon ECS
--   Task Definitions</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
taskDefinition_containerDefinitions :: Lens' TaskDefinition (Maybe [ContainerDefinition])

-- | The amount (in MiB) of memory used by the task.
--   
--   If your tasks will be run on Amazon EC2 instances, you must specify
--   either a task-level memory value or a container-level memory value.
--   This field is optional and any value can be used. If a task-level
--   memory value is specified then the container-level memory value is
--   optional. For more information regarding container-level memory and
--   memory reservation, see <a>ContainerDefinition</a>.
--   
--   If your tasks will be run on Fargate, this field is required and you
--   must use one of the following values, which determines your range of
--   valid values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
taskDefinition_memory :: Lens' TaskDefinition (Maybe Text)

-- | The configuration details for the App Mesh proxy.
--   
--   Your Amazon ECS container instances require at least version 1.26.0 of
--   the container agent and at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package to enable a proxy configuration. If your
--   container instances are launched from the Amazon ECS-optimized AMI
--   version <tt>20190301</tt> or later, then they contain the required
--   versions of the container agent and <tt>ecs-init</tt>. For more
--   information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
taskDefinition_proxyConfiguration :: Lens' TaskDefinition (Maybe ProxyConfiguration)

-- | The short name or full Amazon Resource Name (ARN) of the Identity and
--   Access Management role that grants containers in the task permission
--   to call Amazon Web Services APIs on your behalf. For more information,
--   see <a>Amazon ECS Task Role</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   IAM roles for tasks on Windows require that the
--   <tt>-EnableTaskIAMRole</tt> option is set when you launch the Amazon
--   ECS-optimized Windows AMI. Your containers must also run some
--   configuration code in order to take advantage of the feature. For more
--   information, see <a>Windows IAM roles for tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
taskDefinition_taskRoleArn :: Lens' TaskDefinition (Maybe Text)

-- | The Unix timestamp for when the task definition was deregistered.
taskDefinition_deregisteredAt :: Lens' TaskDefinition (Maybe UTCTime)

-- | An array of placement constraint objects to use for tasks.
--   
--   This parameter is not supported for tasks run on Fargate.
taskDefinition_placementConstraints :: Lens' TaskDefinition (Maybe [TaskDefinitionPlacementConstraint])

-- | The Unix timestamp for when the task definition was registered.
taskDefinition_registeredAt :: Lens' TaskDefinition (Maybe UTCTime)

-- | The Docker networking mode to use for the containers in the task. The
--   valid values are <tt>none</tt>, <tt>bridge</tt>, <tt>awsvpc</tt>, and
--   <tt>host</tt>. If no network mode is specified, the default is
--   <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
taskDefinition_networkMode :: Lens' TaskDefinition (Maybe NetworkMode)

-- | The full Amazon Resource Name (ARN) of the task definition.
taskDefinition_taskDefinitionArn :: Lens' TaskDefinition (Maybe Text)

-- | The task launch types the task definition validated against during
--   task definition registration. For more information, see <a>Amazon ECS
--   launch types</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
taskDefinition_compatibilities :: Lens' TaskDefinition (Maybe [Compatibility])

-- | The principal that registered the task definition.
taskDefinition_registeredBy :: Lens' TaskDefinition (Maybe Text)

-- | The revision of the task in a particular family. The revision is a
--   version number of a task definition in a family. When you register a
--   task definition for the first time, the revision is <tt>1</tt>. Each
--   time that you register a new revision of a task definition in the same
--   family, the revision value always increases by one, even if you have
--   deregistered previous revisions in this family.
taskDefinition_revision :: Lens' TaskDefinition (Maybe Int)

-- | The list of data volume definitions for the task. For more
--   information, see <a>Using data volumes in tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>host</tt> and <tt>sourcePath</tt> parameters are not supported
--   for tasks run on Fargate.
taskDefinition_volumes :: Lens' TaskDefinition (Maybe [Volume])

-- | The number of <tt>cpu</tt> units used by the task. If you are using
--   the EC2 launch type, this field is optional and any value can be used.
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of valid values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
taskDefinition_cpu :: Lens' TaskDefinition (Maybe Text)

-- | The container instance attributes required by your task. When an
--   Amazon EC2 instance is registered to your cluster, the Amazon ECS
--   container agent assigns some standard attributes to the instance. You
--   can apply custom attributes, specified as key-value pairs using the
--   Amazon ECS console or the PutAttributes API. These attributes are used
--   when considering task placement for tasks hosted on Amazon EC2
--   instances. For more information, see <a>Attributes</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   This parameter is not supported for tasks run on Fargate.
taskDefinition_requiresAttributes :: Lens' TaskDefinition (Maybe [Attribute])

-- | A cluster query language expression to apply to the constraint. For
--   more information, see <a>Cluster query language</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
taskDefinitionPlacementConstraint_expression :: Lens' TaskDefinitionPlacementConstraint (Maybe Text)

-- | The type of constraint. The <tt>MemberOf</tt> constraint restricts
--   selection to be from a group of valid candidates.
taskDefinitionPlacementConstraint_type :: Lens' TaskDefinitionPlacementConstraint (Maybe TaskDefinitionPlacementConstraintType)

-- | One or more container overrides sent to a task.
taskOverride_containerOverrides :: Lens' TaskOverride (Maybe [ContainerOverride])

-- | The Amazon Resource Name (ARN) of the task execution IAM role override
--   for the task. For more information, see <a>Amazon ECS task execution
--   IAM role</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
taskOverride_executionRoleArn :: Lens' TaskOverride (Maybe Text)

-- | The ephemeral storage setting override for the task.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
taskOverride_ephemeralStorage :: Lens' TaskOverride (Maybe EphemeralStorage)

-- | The memory override for the task.
taskOverride_memory :: Lens' TaskOverride (Maybe Text)

-- | The Amazon Resource Name (ARN) of the IAM role that containers in this
--   task can assume. All containers in this task are granted the
--   permissions that are specified in this role. For more information, see
--   <a>IAM Role for Tasks</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
taskOverride_taskRoleArn :: Lens' TaskOverride (Maybe Text)

-- | The Elastic Inference accelerator override for the task.
taskOverride_inferenceAcceleratorOverrides :: Lens' TaskOverride (Maybe [InferenceAcceleratorOverride])

-- | The cpu override for the task.
taskOverride_cpu :: Lens' TaskOverride (Maybe Text)

-- | The number of tasks in the task set that are in the <tt>RUNNING</tt>
--   status during a deployment. A task in the <tt>RUNNING</tt> state is
--   running and ready for use.
taskSet_runningCount :: Lens' TaskSet (Maybe Int)

-- | The status of the task set. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The task set is serving production traffic.</li>
--   <li><i>ACTIVE</i> The task set is not serving production traffic.</li>
--   <li><i>DRAINING</i> The tasks in the task set are being stopped and
--   their corresponding targets are being deregistered from their target
--   group.</li>
--   </ul>
taskSet_status :: Lens' TaskSet (Maybe Text)

-- | The Amazon Resource Name (ARN) of the cluster that the service that
--   hosts the task set exists in.
taskSet_clusterArn :: Lens' TaskSet (Maybe Text)

-- | The computed desired count for the task set. This is calculated by
--   multiplying the service's <tt>desiredCount</tt> by the task set's
--   <tt>scale</tt> percentage. The result is always rounded up. For
--   example, if the computed desired count is 1.2, it rounds up to 2
--   tasks.
taskSet_computedDesiredCount :: Lens' TaskSet (Maybe Int)

-- | The Unix timestamp for when the task set was created.
taskSet_createdAt :: Lens' TaskSet (Maybe UTCTime)

-- | The Fargate platform version on which the tasks in the task set are
--   running. A platform version is only specified for tasks run on
--   Fargate. For more information, see <a>Fargate platform versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
taskSet_platformVersion :: Lens' TaskSet (Maybe Text)

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
taskSet_scale :: Lens' TaskSet (Maybe Scale)

-- | Details on a load balancer that is used with a task set.
taskSet_loadBalancers :: Lens' TaskSet (Maybe [LoadBalancer])

-- | The Unix timestamp for when the task set stability status was
--   retrieved.
taskSet_stabilityStatusAt :: Lens' TaskSet (Maybe UTCTime)

-- | The number of tasks in the task set that are in the <tt>PENDING</tt>
--   status during a deployment. A task in the <tt>PENDING</tt> state is
--   preparing to enter the <tt>RUNNING</tt> state. A task set enters the
--   <tt>PENDING</tt> status when it launches for the first time or when it
--   is restarted after being in the <tt>STOPPED</tt> state.
taskSet_pendingCount :: Lens' TaskSet (Maybe Int)

-- | The Amazon Resource Name (ARN) of the task set.
taskSet_taskSetArn :: Lens' TaskSet (Maybe Text)

-- | The tag specified when a task set is started. If the task set is
--   created by an CodeDeploy deployment, the <tt>startedBy</tt> parameter
--   is <tt>CODE_DEPLOY</tt>. For a task set created for an external
--   deployment, the startedBy field isn't used.
taskSet_startedBy :: Lens' TaskSet (Maybe Text)

-- | The ID of the task set.
taskSet_id :: Lens' TaskSet (Maybe Text)

-- | The launch type the tasks in the task set are using. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
taskSet_launchType :: Lens' TaskSet (Maybe LaunchType)

-- | The Unix timestamp for when the task set was last updated.
taskSet_updatedAt :: Lens' TaskSet (Maybe UTCTime)

-- | The Amazon Resource Name (ARN) of the service the task set exists in.
taskSet_serviceArn :: Lens' TaskSet (Maybe Text)

-- | The task definition the task set is using.
taskSet_taskDefinition :: Lens' TaskSet (Maybe Text)

-- | The external ID associated with the task set.
--   
--   If a task set is created by an CodeDeploy deployment, the
--   <tt>externalId</tt> parameter contains the CodeDeploy deployment ID.
--   
--   If a task set is created for an external deployment and is associated
--   with a service discovery registry, the <tt>externalId</tt> parameter
--   contains the <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute.
taskSet_externalId :: Lens' TaskSet (Maybe Text)

-- | The network configuration for the task set.
taskSet_networkConfiguration :: Lens' TaskSet (Maybe NetworkConfiguration)

-- | The details of the service discovery registries to assign to this task
--   set. For more information, see <a>Service discovery</a>.
taskSet_serviceRegistries :: Lens' TaskSet (Maybe [ServiceRegistry])

-- | The capacity provider strategy associated with the task set.
taskSet_capacityProviderStrategy :: Lens' TaskSet (Maybe [CapacityProviderStrategyItem])

-- | The stability status, which indicates whether the task set has reached
--   a steady state. If the following conditions are met, the task set will
--   be in <tt>STEADY_STATE</tt>:
--   
--   <ul>
--   <li>The task <tt>runningCount</tt> is equal to the
--   <tt>computedDesiredCount</tt>.</li>
--   <li>The <tt>pendingCount</tt> is <tt>0</tt>.</li>
--   <li>There are no tasks running on container instances in the
--   <tt>DRAINING</tt> status.</li>
--   <li>All tasks are reporting a healthy status from the load balancers,
--   service discovery, and container health checks.</li>
--   </ul>
--   
--   If any of those conditions are not met, the stability status returns
--   <tt>STABILIZING</tt>.
taskSet_stabilityStatus :: Lens' TaskSet (Maybe StabilityStatus)

-- | The metadata that you apply to the task set to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
taskSet_tags :: Lens' TaskSet (Maybe [Tag])

-- | The list of tmpfs volume mount options.
--   
--   Valid values: <tt>"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev"
--   | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" |
--   "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" |
--   "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" |
--   "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" |
--   "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" |
--   "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"</tt>
tmpfs_mountOptions :: Lens' Tmpfs (Maybe [Text])

-- | The absolute file path where the tmpfs volume is to be mounted.
tmpfs_containerPath :: Lens' Tmpfs Text

-- | The maximum size (in MiB) of the tmpfs volume.
tmpfs_size :: Lens' Tmpfs Int

-- | The <tt>type</tt> of the <tt>ulimit</tt>.
ulimit_name :: Lens' Ulimit UlimitName

-- | The soft limit for the ulimit type.
ulimit_softLimit :: Lens' Ulimit Int

-- | The hard limit for the ulimit type.
ulimit_hardLimit :: Lens' Ulimit Int

-- | The Git commit hash for the Amazon ECS container agent build on the
--   <a>amazon-ecs-agent</a> GitHub repository.
versionInfo_agentHash :: Lens' VersionInfo (Maybe Text)

-- | The version number of the Amazon ECS container agent.
versionInfo_agentVersion :: Lens' VersionInfo (Maybe Text)

-- | The Docker version running on the container instance.
versionInfo_dockerVersion :: Lens' VersionInfo (Maybe Text)

-- | This parameter is specified when you are using Docker volumes.
--   
--   Windows containers only support the use of the <tt>local</tt> driver.
--   To use bind mounts, specify the <tt>host</tt> parameter instead.
--   
--   Docker volumes are not supported by tasks run on Fargate.
volume_dockerVolumeConfiguration :: Lens' Volume (Maybe DockerVolumeConfiguration)

-- | This parameter is specified when you are using Amazon FSx for Windows
--   File Server file system for task storage.
volume_fsxWindowsFileServerVolumeConfiguration :: Lens' Volume (Maybe FSxWindowsFileServerVolumeConfiguration)

-- | The name of the volume. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed. This name is referenced
--   in the <tt>sourceVolume</tt> parameter of container definition
--   <tt>mountPoints</tt>.
volume_name :: Lens' Volume (Maybe Text)

-- | This parameter is specified when you are using an Amazon Elastic File
--   System file system for task storage.
volume_efsVolumeConfiguration :: Lens' Volume (Maybe EFSVolumeConfiguration)

-- | This parameter is specified when you are using bind mount host
--   volumes. The contents of the <tt>host</tt> parameter determine whether
--   your bind mount host volume persists on the host container instance
--   and where it is stored. If the <tt>host</tt> parameter is empty, then
--   the Docker daemon assigns a host path for your data volume. However,
--   the data is not guaranteed to persist after the containers associated
--   with it stop running.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives. For
--   example, you can mount <tt>C:\my\path:C:\my\path</tt> and
--   <tt>D:\:D:\</tt>, but not <tt>D:\my\path:C:\my\path</tt> or
--   <tt>D:\:C:\my\path</tt>.
volume_host :: Lens' Volume (Maybe HostVolumeProperties)

-- | The name of another container within the same task definition from
--   which to mount volumes.
volumeFrom_sourceContainer :: Lens' VolumeFrom (Maybe Text)

-- | If this value is <tt>true</tt>, the container has read-only access to
--   the volume. If this value is <tt>false</tt>, then the container can
--   write to the volume. The default value is <tt>false</tt>.
volumeFrom_readOnly :: Lens' VolumeFrom (Maybe Bool)


module Amazonka.ECS.Waiters

-- | Polls <a>DescribeServices</a> every 15 seconds until a successful
--   state is reached. An error is returned after 40 failed checks.
newServicesInactive :: Wait DescribeServices

-- | Polls <a>DescribeTasks</a> every 6 seconds until a successful state is
--   reached. An error is returned after 100 failed checks.
newTasksRunning :: Wait DescribeTasks

-- | Polls <a>DescribeTasks</a> every 6 seconds until a successful state is
--   reached. An error is returned after 100 failed checks.
newTasksStopped :: Wait DescribeTasks


-- | Derived from API version <tt>2014-11-13</tt> of the AWS service
--   descriptions, licensed under Apache 2.0.
--   
--   Amazon Elastic Container Service
--   
--   Amazon Elastic Container Service (Amazon ECS) is a highly scalable,
--   fast, container management service that makes it easy to run, stop,
--   and manage Docker containers on a cluster. You can host your cluster
--   on a serverless infrastructure that is managed by Amazon ECS by
--   launching your services or tasks on Fargate. For more control, you can
--   host your tasks on a cluster of Amazon Elastic Compute Cloud (Amazon
--   EC2) instances that you manage.
--   
--   Amazon ECS makes it easy to launch and stop container-based
--   applications with simple API calls, allows you to get the state of
--   your cluster from a centralized service, and gives you access to many
--   familiar Amazon EC2 features.
--   
--   You can use Amazon ECS to schedule the placement of containers across
--   your cluster based on your resource needs, isolation policies, and
--   availability requirements. Amazon ECS eliminates the need for you to
--   operate your own cluster management and configuration management
--   systems or worry about scaling your management infrastructure.
module Amazonka.ECS

-- | API version <tt>2014-11-13</tt> of the Amazon EC2 Container Service
--   SDK configuration.
defaultService :: Service

-- | You do not have authorization to perform the requested action.
_AccessDeniedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified parameter is invalid. Review the available parameters
--   for the API request.
_InvalidParameterException :: AsError a => Getting (First ServiceError) a ServiceError

-- | These errors are usually caused by a server issue.
_ServerException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You cannot delete a cluster that has active tasks.
_ClusterContainsTasksException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified platform version does not exist.
_PlatformUnknownException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You cannot delete a cluster that contains services. First, update the
--   service to reduce its desired task count to 0 and then delete the
--   service. For more information, see UpdateService and DeleteService.
_ClusterContainsServicesException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified task set could not be found. You can view your available
--   task sets with DescribeTaskSets. Task sets are specific to each
--   cluster, service and Region.
_TaskSetNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You cannot delete a cluster that has registered container instances.
--   First, deregister the container instances before you can delete the
--   cluster. For more information, see DeregisterContainerInstance.
_ClusterContainsContainerInstancesException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified service is not active. You can't update a service that
--   is inactive. If you have previously deleted a service, you can
--   re-create it with CreateService.
_ServiceNotActiveException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified cluster could not be found. You can view your available
--   clusters with ListClusters. Amazon ECS clusters are Region-specific.
_ClusterNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is no update available for this Amazon ECS container agent. This
--   could be because the agent is already running the latest version, or
--   it is so old that there is no update path to the current version.
_NoUpdateAvailableException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified task is not supported in this Region.
_UnsupportedFeatureException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified service could not be found. You can view your available
--   services with ListServices. Amazon ECS services are cluster-specific
--   and Region-specific.
_ServiceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified platform version does not satisfy the task definition's
--   required capabilities.
_PlatformTaskDefinitionIncompatibilityException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Amazon ECS is unable to determine the current version of the Amazon
--   ECS container agent on the container instance and does not have enough
--   information to proceed with an update. This could be because the agent
--   running on the container instance is an older or custom version that
--   does not use our version information.
_MissingVersionException :: AsError a => Getting (First ServiceError) a ServiceError

-- | There is already a current Amazon ECS container agent update in
--   progress on the specified container instance. If the container agent
--   becomes disconnected while it is in a transitional stage, such as
--   <tt>PENDING</tt> or <tt>STAGING</tt>, the update process can get stuck
--   in that state. However, when the agent reconnects, it resumes where it
--   stopped previously.
_UpdateInProgressException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The target container is not properly configured with the execute
--   command agent or the container is no longer active or running.
_TargetNotConnectedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Your Amazon Web Services account has been blocked. For more
--   information, contact <a>Amazon Web Services Support</a>.
_BlockedException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified target could not be found. You can view your available
--   container instances with ListContainerInstances. Amazon ECS container
--   instances are cluster-specific and Region-specific.
_TargetNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | You can apply up to 10 custom attributes per resource. You can view
--   the attributes of a resource with ListAttributes. You can remove
--   existing attributes on a resource with DeleteAttributes.
_AttributeLimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | These errors are usually caused by a client action, such as using an
--   action or resource on behalf of a user that doesn't have permissions
--   to use the action or resource, or specifying an identifier that is not
--   valid.
_ClientException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified resource could not be found.
_ResourceNotFoundException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The limit for the resource has been exceeded.
_LimitExceededException :: AsError a => Getting (First ServiceError) a ServiceError

-- | The specified resource is in-use and cannot be removed.
_ResourceInUseException :: AsError a => Getting (First ServiceError) a ServiceError

-- | Polls <a>DescribeServices</a> every 15 seconds until a successful
--   state is reached. An error is returned after 40 failed checks.
newServicesInactive :: Wait DescribeServices

-- | Polls <a>DescribeTasks</a> every 6 seconds until a successful state is
--   reached. An error is returned after 100 failed checks.
newTasksRunning :: Wait DescribeTasks

-- | Polls <a>DescribeTasks</a> every 6 seconds until a successful state is
--   reached. An error is returned after 100 failed checks.
newTasksStopped :: Wait DescribeTasks

-- | <i>See:</i> <a>newListServices</a> smart constructor.
data ListServices
ListServices' :: Maybe Text -> Maybe Text -> Maybe LaunchType -> Maybe SchedulingStrategy -> Maybe Int -> ListServices

-- | Create a value of <a>ListServices</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:ListServices'</a>, <a>listServices_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster to use
--   when filtering the <tt>ListServices</tt> results. If you do not
--   specify a cluster, the default cluster is assumed.
--   
--   <a>$sel:nextToken:ListServices'</a>, <a>listServices_nextToken</a> -
--   The <tt>nextToken</tt> value returned from a <tt>ListServices</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:launchType:ListServices'</a>, <a>listServices_launchType</a> -
--   The launch type to use when filtering the <tt>ListServices</tt>
--   results.
--   
--   <a>$sel:schedulingStrategy:ListServices'</a>,
--   <a>listServices_schedulingStrategy</a> - The scheduling strategy to
--   use when filtering the <tt>ListServices</tt> results.
--   
--   <a>$sel:maxResults:ListServices'</a>, <a>listServices_maxResults</a> -
--   The maximum number of service results returned by
--   <tt>ListServices</tt> in paginated output. When this parameter is
--   used, <tt>ListServices</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListServices</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListServices</tt> returns up to 10
--   results and a <tt>nextToken</tt> value if applicable.
newListServices :: ListServices

-- | <i>See:</i> <a>newListServicesResponse</a> smart constructor.
data ListServicesResponse
ListServicesResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListServicesResponse

-- | Create a value of <a>ListServicesResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:serviceArns:ListServicesResponse'</a>,
--   <a>listServicesResponse_serviceArns</a> - The list of full ARN entries
--   for each service associated with the specified cluster.
--   
--   <a>$sel:nextToken:ListServices'</a>,
--   <a>listServicesResponse_nextToken</a> - The <tt>nextToken</tt> value
--   to include in a future <tt>ListServices</tt> request. When the results
--   of a <tt>ListServices</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
--   
--   <a>$sel:httpStatus:ListServicesResponse'</a>,
--   <a>listServicesResponse_httpStatus</a> - The response's http status
--   code.
newListServicesResponse :: Int -> ListServicesResponse

-- | <i>See:</i> <a>newDescribeClusters</a> smart constructor.
data DescribeClusters
DescribeClusters' :: Maybe [ClusterField] -> Maybe [Text] -> DescribeClusters

-- | Create a value of <a>DescribeClusters</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:include:DescribeClusters'</a>, <a>describeClusters_include</a>
--   - Whether to include additional information about the clusters in the
--   response. If this field is omitted, this information isn't included.
--   
--   If <tt>ATTACHMENTS</tt> is specified, the attachments for the
--   container instances or tasks within the cluster are included.
--   
--   If <tt>SETTINGS</tt> is specified, the settings for the cluster are
--   included.
--   
--   If <tt>CONFIGURATIONS</tt> is specified, the configuration for the
--   cluster is included.
--   
--   If <tt>STATISTICS</tt> is specified, the task and service count is
--   included, separated by launch type.
--   
--   If <tt>TAGS</tt> is specified, the metadata tags associated with the
--   cluster are included.
--   
--   <a>$sel:clusters:DescribeClusters'</a>,
--   <a>describeClusters_clusters</a> - A list of up to 100 cluster names
--   or full cluster Amazon Resource Name (ARN) entries. If you do not
--   specify a cluster, the default cluster is assumed.
newDescribeClusters :: DescribeClusters

-- | <i>See:</i> <a>newDescribeClustersResponse</a> smart constructor.
data DescribeClustersResponse
DescribeClustersResponse' :: Maybe [Failure] -> Maybe [Cluster] -> Int -> DescribeClustersResponse

-- | Create a value of <a>DescribeClustersResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:DescribeClustersResponse'</a>,
--   <a>describeClustersResponse_failures</a> - Any failures associated
--   with the call.
--   
--   <a>$sel:clusters:DescribeClusters'</a>,
--   <a>describeClustersResponse_clusters</a> - The list of clusters.
--   
--   <a>$sel:httpStatus:DescribeClustersResponse'</a>,
--   <a>describeClustersResponse_httpStatus</a> - The response's http
--   status code.
newDescribeClustersResponse :: Int -> DescribeClustersResponse

-- | <i>See:</i> <a>newDeleteService</a> smart constructor.
data DeleteService
DeleteService' :: Maybe Text -> Maybe Bool -> Text -> DeleteService

-- | Create a value of <a>DeleteService</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:DeleteService'</a>, <a>deleteService_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service to delete. If you do not specify a cluster, the
--   default cluster is assumed.
--   
--   <a>$sel:force:DeleteService'</a>, <a>deleteService_force</a> - If
--   <tt>true</tt>, allows you to delete a service even if it has not been
--   scaled down to zero tasks. It is only necessary to use this if the
--   service is using the <tt>REPLICA</tt> scheduling strategy.
--   
--   <a>$sel:service:DeleteService'</a>, <a>deleteService_service</a> - The
--   name of the service to delete.
newDeleteService :: Text -> DeleteService

-- | <i>See:</i> <a>newDeleteServiceResponse</a> smart constructor.
data DeleteServiceResponse
DeleteServiceResponse' :: Maybe ContainerService -> Int -> DeleteServiceResponse

-- | Create a value of <a>DeleteServiceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:service:DeleteService'</a>,
--   <a>deleteServiceResponse_service</a> - The full description of the
--   deleted service.
--   
--   <a>$sel:httpStatus:DeleteServiceResponse'</a>,
--   <a>deleteServiceResponse_httpStatus</a> - The response's http status
--   code.
newDeleteServiceResponse :: Int -> DeleteServiceResponse

-- | <i>See:</i> <a>newUpdateService</a> smart constructor.
data UpdateService
UpdateService' :: Maybe Text -> Maybe Text -> Maybe Int -> Maybe [PlacementConstraint] -> Maybe [PlacementStrategy] -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe NetworkConfiguration -> Maybe [CapacityProviderStrategyItem] -> Maybe Bool -> Maybe DeploymentConfiguration -> Text -> UpdateService

-- | Create a value of <a>UpdateService</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateService'</a>, <a>updateService_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that your
--   service is running on. If you do not specify a cluster, the default
--   cluster is assumed.
--   
--   <a>$sel:platformVersion:UpdateService'</a>,
--   <a>updateService_platformVersion</a> - The platform version on which
--   your tasks in the service are running. A platform version is only
--   specified for tasks using the Fargate launch type. If a platform
--   version is not specified, the <tt>LATEST</tt> platform version is used
--   by default. For more information, see <a>Fargate Platform Versions</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:desiredCount:UpdateService'</a>,
--   <a>updateService_desiredCount</a> - The number of instantiations of
--   the task to place and keep running in your service.
--   
--   <a>$sel:placementConstraints:UpdateService'</a>,
--   <a>updateService_placementConstraints</a> - An array of task placement
--   constraint objects to update the service to use. If no value is
--   specified, the existing placement constraints for the service will
--   remain unchanged. If this value is specified, it will override any
--   existing placement constraints defined for the service. To remove all
--   existing placement constraints, specify an empty array.
--   
--   You can specify a maximum of 10 constraints per task (this limit
--   includes constraints in the task definition and those specified at
--   runtime).
--   
--   <a>$sel:placementStrategy:UpdateService'</a>,
--   <a>updateService_placementStrategy</a> - The task placement strategy
--   objects to update the service to use. If no value is specified, the
--   existing placement strategy for the service will remain unchanged. If
--   this value is specified, it will override the existing placement
--   strategy defined for the service. To remove an existing placement
--   strategy, specify an empty object.
--   
--   You can specify a maximum of five strategy rules per service.
--   
--   <a>$sel:forceNewDeployment:UpdateService'</a>,
--   <a>updateService_forceNewDeployment</a> - Whether to force a new
--   deployment of the service. Deployments are not forced by default. You
--   can use this option to trigger a new deployment with no service
--   definition changes. For example, you can update a service's tasks to
--   use a newer Docker image with the same image/tag combination
--   (<tt>my_image:latest</tt>) or to roll Fargate tasks onto a newer
--   platform version.
--   
--   <a>$sel:taskDefinition:UpdateService'</a>,
--   <a>updateService_taskDefinition</a> - The <tt>family</tt> and
--   <tt>revision</tt> (<tt>family:revision</tt>) or full ARN of the task
--   definition to run in your service. If a <tt>revision</tt> is not
--   specified, the latest <tt>ACTIVE</tt> revision is used. If you modify
--   the task definition with <tt>UpdateService</tt>, Amazon ECS spawns a
--   task with the new version of the task definition and then stops an old
--   task after the new version is running.
--   
--   <a>$sel:healthCheckGracePeriodSeconds:UpdateService'</a>,
--   <a>updateService_healthCheckGracePeriodSeconds</a> - The period of
--   time, in seconds, that the Amazon ECS service scheduler should ignore
--   unhealthy Elastic Load Balancing target health checks after a task has
--   first started. This is only valid if your service is configured to use
--   a load balancer. If your service's tasks take a while to start and
--   respond to Elastic Load Balancing health checks, you can specify a
--   health check grace period of up to 2,147,483,647 seconds. During that
--   time, the Amazon ECS service scheduler ignores the Elastic Load
--   Balancing health check status. This grace period can prevent the ECS
--   service scheduler from marking tasks as unhealthy and stopping them
--   before they have time to come up.
--   
--   <a>$sel:networkConfiguration:UpdateService'</a>,
--   <a>updateService_networkConfiguration</a> - An object representing the
--   network configuration for the service.
--   
--   <a>$sel:capacityProviderStrategy:UpdateService'</a>,
--   <a>updateService_capacityProviderStrategy</a> - The capacity provider
--   strategy to update the service to use.
--   
--   If the service is using the default capacity provider strategy for the
--   cluster, the service can be updated to use one or more capacity
--   providers as opposed to the default capacity provider strategy.
--   However, when a service is using a capacity provider strategy that is
--   not the default capacity provider strategy, the service cannot be
--   updated to use the cluster's default capacity provider strategy.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
--   
--   <a>$sel:enableExecuteCommand:UpdateService'</a>,
--   <a>updateService_enableExecuteCommand</a> - If <tt>true</tt>, this
--   enables execute command functionality on all task containers.
--   
--   If you do not want to override the value that was set when the service
--   was created, you can set this to <tt>null</tt> when performing this
--   action.
--   
--   <a>$sel:deploymentConfiguration:UpdateService'</a>,
--   <a>updateService_deploymentConfiguration</a> - Optional deployment
--   parameters that control how many tasks run during the deployment and
--   the ordering of stopping and starting tasks.
--   
--   <a>$sel:service:UpdateService'</a>, <a>updateService_service</a> - The
--   name of the service to update.
newUpdateService :: Text -> UpdateService

-- | <i>See:</i> <a>newUpdateServiceResponse</a> smart constructor.
data UpdateServiceResponse
UpdateServiceResponse' :: Maybe ContainerService -> Int -> UpdateServiceResponse

-- | Create a value of <a>UpdateServiceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:service:UpdateService'</a>,
--   <a>updateServiceResponse_service</a> - The full description of your
--   service following the update call.
--   
--   <a>$sel:httpStatus:UpdateServiceResponse'</a>,
--   <a>updateServiceResponse_httpStatus</a> - The response's http status
--   code.
newUpdateServiceResponse :: Int -> UpdateServiceResponse

-- | <i>See:</i> <a>newDiscoverPollEndpoint</a> smart constructor.
data DiscoverPollEndpoint
DiscoverPollEndpoint' :: Maybe Text -> Maybe Text -> DiscoverPollEndpoint

-- | Create a value of <a>DiscoverPollEndpoint</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:DiscoverPollEndpoint'</a>,
--   <a>discoverPollEndpoint_cluster</a> - The short name or full Amazon
--   Resource Name (ARN) of the cluster to which the container instance
--   belongs.
--   
--   <a>$sel:containerInstance:DiscoverPollEndpoint'</a>,
--   <a>discoverPollEndpoint_containerInstance</a> - The container instance
--   ID or full ARN of the container instance. The ARN contains the
--   <tt>arn:aws:ecs</tt> namespace, followed by the Region of the
--   container instance, the Amazon Web Services account ID of the
--   container instance owner, the <tt>container-instance</tt> namespace,
--   and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
newDiscoverPollEndpoint :: DiscoverPollEndpoint

-- | <i>See:</i> <a>newDiscoverPollEndpointResponse</a> smart constructor.
data DiscoverPollEndpointResponse
DiscoverPollEndpointResponse' :: Maybe Text -> Maybe Text -> Int -> DiscoverPollEndpointResponse

-- | Create a value of <a>DiscoverPollEndpointResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:telemetryEndpoint:DiscoverPollEndpointResponse'</a>,
--   <a>discoverPollEndpointResponse_telemetryEndpoint</a> - The telemetry
--   endpoint for the Amazon ECS agent.
--   
--   <a>$sel:endpoint:DiscoverPollEndpointResponse'</a>,
--   <a>discoverPollEndpointResponse_endpoint</a> - The endpoint for the
--   Amazon ECS agent to poll.
--   
--   <a>$sel:httpStatus:DiscoverPollEndpointResponse'</a>,
--   <a>discoverPollEndpointResponse_httpStatus</a> - The response's http
--   status code.
newDiscoverPollEndpointResponse :: Int -> DiscoverPollEndpointResponse

-- | <i>See:</i> <a>newSubmitAttachmentStateChanges</a> smart constructor.
data SubmitAttachmentStateChanges
SubmitAttachmentStateChanges' :: Maybe Text -> [AttachmentStateChange] -> SubmitAttachmentStateChanges

-- | Create a value of <a>SubmitAttachmentStateChanges</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:SubmitAttachmentStateChanges'</a>,
--   <a>submitAttachmentStateChanges_cluster</a> - The short name or full
--   ARN of the cluster that hosts the container instance the attachment
--   belongs to.
--   
--   <a>$sel:attachments:SubmitAttachmentStateChanges'</a>,
--   <a>submitAttachmentStateChanges_attachments</a> - Any attachments
--   associated with the state change request.
newSubmitAttachmentStateChanges :: SubmitAttachmentStateChanges

-- | <i>See:</i> <a>newSubmitAttachmentStateChangesResponse</a> smart
--   constructor.
data SubmitAttachmentStateChangesResponse
SubmitAttachmentStateChangesResponse' :: Maybe Text -> Int -> SubmitAttachmentStateChangesResponse

-- | Create a value of <a>SubmitAttachmentStateChangesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:acknowledgment:SubmitAttachmentStateChangesResponse'</a>,
--   <a>submitAttachmentStateChangesResponse_acknowledgment</a> -
--   Acknowledgement of the state change.
--   
--   <a>$sel:httpStatus:SubmitAttachmentStateChangesResponse'</a>,
--   <a>submitAttachmentStateChangesResponse_httpStatus</a> - The
--   response's http status code.
newSubmitAttachmentStateChangesResponse :: Int -> SubmitAttachmentStateChangesResponse

-- | <i>See:</i> <a>newSubmitContainerStateChange</a> smart constructor.
data SubmitContainerStateChange
SubmitContainerStateChange' :: Maybe [NetworkBinding] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Text -> SubmitContainerStateChange

-- | Create a value of <a>SubmitContainerStateChange</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:networkBindings:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_networkBindings</a> - The network
--   bindings of the container.
--   
--   <a>$sel:status:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_status</a> - The status of the state
--   change request.
--   
--   <a>$sel:cluster:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_cluster</a> - The short name or full ARN
--   of the cluster that hosts the container.
--   
--   <a>$sel:containerName:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_containerName</a> - The name of the
--   container.
--   
--   <a>$sel:reason:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_reason</a> - The reason for the state
--   change request.
--   
--   <a>$sel:exitCode:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_exitCode</a> - The exit code returned
--   for the state change request.
--   
--   <a>$sel:task:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_task</a> - The task ID or full Amazon
--   Resource Name (ARN) of the task that hosts the container.
--   
--   <a>$sel:runtimeId:SubmitContainerStateChange'</a>,
--   <a>submitContainerStateChange_runtimeId</a> - The ID of the Docker
--   container.
newSubmitContainerStateChange :: SubmitContainerStateChange

-- | <i>See:</i> <a>newSubmitContainerStateChangeResponse</a> smart
--   constructor.
data SubmitContainerStateChangeResponse
SubmitContainerStateChangeResponse' :: Maybe Text -> Int -> SubmitContainerStateChangeResponse

-- | Create a value of <a>SubmitContainerStateChangeResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:acknowledgment:SubmitContainerStateChangeResponse'</a>,
--   <a>submitContainerStateChangeResponse_acknowledgment</a> -
--   Acknowledgement of the state change.
--   
--   <a>$sel:httpStatus:SubmitContainerStateChangeResponse'</a>,
--   <a>submitContainerStateChangeResponse_httpStatus</a> - The response's
--   http status code.
newSubmitContainerStateChangeResponse :: Int -> SubmitContainerStateChangeResponse

-- | <i>See:</i> <a>newListTagsForResource</a> smart constructor.
data ListTagsForResource
ListTagsForResource' :: Text -> ListTagsForResource

-- | Create a value of <a>ListTagsForResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:ListTagsForResource'</a>,
--   <a>listTagsForResource_resourceArn</a> - The Amazon Resource Name
--   (ARN) that identifies the resource for which to list the tags.
--   Currently, the supported resources are Amazon ECS tasks, services,
--   task definitions, clusters, and container instances.
newListTagsForResource :: Text -> ListTagsForResource

-- | <i>See:</i> <a>newListTagsForResourceResponse</a> smart constructor.
data ListTagsForResourceResponse
ListTagsForResourceResponse' :: Maybe [Tag] -> Int -> ListTagsForResourceResponse

-- | Create a value of <a>ListTagsForResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_tags</a> - The tags for the resource.
--   
--   <a>$sel:httpStatus:ListTagsForResourceResponse'</a>,
--   <a>listTagsForResourceResponse_httpStatus</a> - The response's http
--   status code.
newListTagsForResourceResponse :: Int -> ListTagsForResourceResponse

-- | <i>See:</i> <a>newStopTask</a> smart constructor.
data StopTask
StopTask' :: Maybe Text -> Maybe Text -> Text -> StopTask

-- | Create a value of <a>StopTask</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:StopTask'</a>, <a>stopTask_cluster</a> - The short
--   name or full Amazon Resource Name (ARN) of the cluster that hosts the
--   task to stop. If you do not specify a cluster, the default cluster is
--   assumed.
--   
--   <a>$sel:reason:StopTask'</a>, <a>stopTask_reason</a> - An optional
--   message specified when a task is stopped. For example, if you are
--   using a custom scheduler, you can use this parameter to specify the
--   reason for stopping the task here, and the message appears in
--   subsequent DescribeTasks API operations on this task. Up to 255
--   characters are allowed in this message.
--   
--   <a>$sel:task:StopTask'</a>, <a>stopTask_task</a> - The task ID or full
--   Amazon Resource Name (ARN) of the task to stop.
newStopTask :: Text -> StopTask

-- | <i>See:</i> <a>newStopTaskResponse</a> smart constructor.
data StopTaskResponse
StopTaskResponse' :: Maybe Task -> Int -> StopTaskResponse

-- | Create a value of <a>StopTaskResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:task:StopTask'</a>, <a>stopTaskResponse_task</a> - The task
--   that was stopped.
--   
--   <a>$sel:httpStatus:StopTaskResponse'</a>,
--   <a>stopTaskResponse_httpStatus</a> - The response's http status code.
newStopTaskResponse :: Int -> StopTaskResponse

-- | <i>See:</i> <a>newDescribeTaskDefinition</a> smart constructor.
data DescribeTaskDefinition
DescribeTaskDefinition' :: Maybe [TaskDefinitionField] -> Text -> DescribeTaskDefinition

-- | Create a value of <a>DescribeTaskDefinition</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:include:DescribeTaskDefinition'</a>,
--   <a>describeTaskDefinition_include</a> - Specifies whether to see the
--   resource tags for the task definition. If <tt>TAGS</tt> is specified,
--   the tags are included in the response. If this field is omitted, tags
--   are not included in the response.
--   
--   <a>$sel:taskDefinition:DescribeTaskDefinition'</a>,
--   <a>describeTaskDefinition_taskDefinition</a> - The <tt>family</tt> for
--   the latest <tt>ACTIVE</tt> revision, <tt>family</tt> and
--   <tt>revision</tt> (<tt>family:revision</tt>) for a specific revision
--   in the family, or full Amazon Resource Name (ARN) of the task
--   definition to describe.
newDescribeTaskDefinition :: Text -> DescribeTaskDefinition

-- | <i>See:</i> <a>newDescribeTaskDefinitionResponse</a> smart
--   constructor.
data DescribeTaskDefinitionResponse
DescribeTaskDefinitionResponse' :: Maybe TaskDefinition -> Maybe [Tag] -> Int -> DescribeTaskDefinitionResponse

-- | Create a value of <a>DescribeTaskDefinitionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskDefinition:DescribeTaskDefinition'</a>,
--   <a>describeTaskDefinitionResponse_taskDefinition</a> - The full task
--   definition description.
--   
--   <a>$sel:tags:DescribeTaskDefinitionResponse'</a>,
--   <a>describeTaskDefinitionResponse_tags</a> - The metadata that is
--   applied to the task definition to help you categorize and organize
--   them. Each tag consists of a key and an optional value, both of which
--   you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:httpStatus:DescribeTaskDefinitionResponse'</a>,
--   <a>describeTaskDefinitionResponse_httpStatus</a> - The response's http
--   status code.
newDescribeTaskDefinitionResponse :: Int -> DescribeTaskDefinitionResponse

-- | <i>See:</i> <a>newSubmitTaskStateChange</a> smart constructor.
data SubmitTaskStateChange
SubmitTaskStateChange' :: Maybe Text -> Maybe [ManagedAgentStateChange] -> Maybe Text -> Maybe [AttachmentStateChange] -> Maybe POSIX -> Maybe POSIX -> Maybe [ContainerStateChange] -> Maybe Text -> Maybe Text -> Maybe POSIX -> SubmitTaskStateChange

-- | Create a value of <a>SubmitTaskStateChange</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_status</a> - The status of the state change
--   request.
--   
--   <a>$sel:managedAgents:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_managedAgents</a> - The details for the
--   managed agent associated with the task.
--   
--   <a>$sel:cluster:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_cluster</a> - The short name or full Amazon
--   Resource Name (ARN) of the cluster that hosts the task.
--   
--   <a>$sel:attachments:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_attachments</a> - Any attachments associated
--   with the state change request.
--   
--   <a>$sel:executionStoppedAt:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_executionStoppedAt</a> - The Unix timestamp
--   for when the task execution stopped.
--   
--   <a>$sel:pullStoppedAt:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_pullStoppedAt</a> - The Unix timestamp for
--   when the container image pull completed.
--   
--   <a>$sel:containers:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_containers</a> - Any containers associated
--   with the state change request.
--   
--   <a>$sel:reason:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_reason</a> - The reason for the state change
--   request.
--   
--   <a>$sel:task:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_task</a> - The task ID or full ARN of the
--   task in the state change request.
--   
--   <a>$sel:pullStartedAt:SubmitTaskStateChange'</a>,
--   <a>submitTaskStateChange_pullStartedAt</a> - The Unix timestamp for
--   when the container image pull began.
newSubmitTaskStateChange :: SubmitTaskStateChange

-- | <i>See:</i> <a>newSubmitTaskStateChangeResponse</a> smart constructor.
data SubmitTaskStateChangeResponse
SubmitTaskStateChangeResponse' :: Maybe Text -> Int -> SubmitTaskStateChangeResponse

-- | Create a value of <a>SubmitTaskStateChangeResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:acknowledgment:SubmitTaskStateChangeResponse'</a>,
--   <a>submitTaskStateChangeResponse_acknowledgment</a> - Acknowledgement
--   of the state change.
--   
--   <a>$sel:httpStatus:SubmitTaskStateChangeResponse'</a>,
--   <a>submitTaskStateChangeResponse_httpStatus</a> - The response's http
--   status code.
newSubmitTaskStateChangeResponse :: Int -> SubmitTaskStateChangeResponse

-- | <i>See:</i> <a>newDescribeContainerInstances</a> smart constructor.
data DescribeContainerInstances
DescribeContainerInstances' :: Maybe [ContainerInstanceField] -> Maybe Text -> [Text] -> DescribeContainerInstances

-- | Create a value of <a>DescribeContainerInstances</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:include:DescribeContainerInstances'</a>,
--   <a>describeContainerInstances_include</a> - Specifies whether you want
--   to see the resource tags for the container instance. If <tt>TAGS</tt>
--   is specified, the tags are included in the response. If this field is
--   omitted, tags are not included in the response.
--   
--   <a>$sel:cluster:DescribeContainerInstances'</a>,
--   <a>describeContainerInstances_cluster</a> - The short name or full
--   Amazon Resource Name (ARN) of the cluster that hosts the container
--   instances to describe. If you do not specify a cluster, the default
--   cluster is assumed. This parameter is required if the container
--   instance or container instances you are describing were launched in
--   any cluster other than the default cluster.
--   
--   <a>$sel:containerInstances:DescribeContainerInstances'</a>,
--   <a>describeContainerInstances_containerInstances</a> - A list of up to
--   100 container instance IDs or full Amazon Resource Name (ARN) entries.
newDescribeContainerInstances :: DescribeContainerInstances

-- | <i>See:</i> <a>newDescribeContainerInstancesResponse</a> smart
--   constructor.
data DescribeContainerInstancesResponse
DescribeContainerInstancesResponse' :: Maybe [Failure] -> Maybe [ContainerInstance] -> Int -> DescribeContainerInstancesResponse

-- | Create a value of <a>DescribeContainerInstancesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:DescribeContainerInstancesResponse'</a>,
--   <a>describeContainerInstancesResponse_failures</a> - Any failures
--   associated with the call.
--   
--   <a>$sel:containerInstances:DescribeContainerInstances'</a>,
--   <a>describeContainerInstancesResponse_containerInstances</a> - The
--   list of container instances.
--   
--   <a>$sel:httpStatus:DescribeContainerInstancesResponse'</a>,
--   <a>describeContainerInstancesResponse_httpStatus</a> - The response's
--   http status code.
newDescribeContainerInstancesResponse :: Int -> DescribeContainerInstancesResponse

-- | <i>See:</i> <a>newDescribeCapacityProviders</a> smart constructor.
data DescribeCapacityProviders
DescribeCapacityProviders' :: Maybe [CapacityProviderField] -> Maybe Text -> Maybe [Text] -> Maybe Int -> DescribeCapacityProviders

-- | Create a value of <a>DescribeCapacityProviders</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:include:DescribeCapacityProviders'</a>,
--   <a>describeCapacityProviders_include</a> - Specifies whether or not
--   you want to see the resource tags for the capacity provider. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
--   
--   <a>$sel:nextToken:DescribeCapacityProviders'</a>,
--   <a>describeCapacityProviders_nextToken</a> - The <tt>nextToken</tt>
--   value returned from a previous paginated
--   <tt>DescribeCapacityProviders</tt> request where <tt>maxResults</tt>
--   was used and the results exceeded the value of that parameter.
--   Pagination continues from the end of the previous results that
--   returned the <tt>nextToken</tt> value.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:capacityProviders:DescribeCapacityProviders'</a>,
--   <a>describeCapacityProviders_capacityProviders</a> - The short name or
--   full Amazon Resource Name (ARN) of one or more capacity providers. Up
--   to <tt>100</tt> capacity providers can be described in an action.
--   
--   <a>$sel:maxResults:DescribeCapacityProviders'</a>,
--   <a>describeCapacityProviders_maxResults</a> - The maximum number of
--   account setting results returned by <tt>DescribeCapacityProviders</tt>
--   in paginated output. When this parameter is used,
--   <tt>DescribeCapacityProviders</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>DescribeCapacityProviders</tt> request with the
--   returned <tt>nextToken</tt> value. This value can be between 1 and 10.
--   If this parameter is not used, then <tt>DescribeCapacityProviders</tt>
--   returns up to 10 results and a <tt>nextToken</tt> value if applicable.
newDescribeCapacityProviders :: DescribeCapacityProviders

-- | <i>See:</i> <a>newDescribeCapacityProvidersResponse</a> smart
--   constructor.
data DescribeCapacityProvidersResponse
DescribeCapacityProvidersResponse' :: Maybe [Failure] -> Maybe Text -> Maybe [CapacityProvider] -> Int -> DescribeCapacityProvidersResponse

-- | Create a value of <a>DescribeCapacityProvidersResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:DescribeCapacityProvidersResponse'</a>,
--   <a>describeCapacityProvidersResponse_failures</a> - Any failures
--   associated with the call.
--   
--   <a>$sel:nextToken:DescribeCapacityProviders'</a>,
--   <a>describeCapacityProvidersResponse_nextToken</a> - The
--   <tt>nextToken</tt> value to include in a future
--   <tt>DescribeCapacityProviders</tt> request. When the results of a
--   <tt>DescribeCapacityProviders</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
--   
--   <a>$sel:capacityProviders:DescribeCapacityProviders'</a>,
--   <a>describeCapacityProvidersResponse_capacityProviders</a> - The list
--   of capacity providers.
--   
--   <a>$sel:httpStatus:DescribeCapacityProvidersResponse'</a>,
--   <a>describeCapacityProvidersResponse_httpStatus</a> - The response's
--   http status code.
newDescribeCapacityProvidersResponse :: Int -> DescribeCapacityProvidersResponse

-- | <i>See:</i> <a>newUpdateContainerInstancesState</a> smart constructor.
data UpdateContainerInstancesState
UpdateContainerInstancesState' :: Maybe Text -> [Text] -> ContainerInstanceStatus -> UpdateContainerInstancesState

-- | Create a value of <a>UpdateContainerInstancesState</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateContainerInstancesState'</a>,
--   <a>updateContainerInstancesState_cluster</a> - The short name or full
--   Amazon Resource Name (ARN) of the cluster that hosts the container
--   instance to update. If you do not specify a cluster, the default
--   cluster is assumed.
--   
--   <a>$sel:containerInstances:UpdateContainerInstancesState'</a>,
--   <a>updateContainerInstancesState_containerInstances</a> - A list of
--   container instance IDs or full ARN entries.
--   
--   <a>$sel:status:UpdateContainerInstancesState'</a>,
--   <a>updateContainerInstancesState_status</a> - The container instance
--   state with which to update the container instance. The only valid
--   values for this action are <tt>ACTIVE</tt> and <tt>DRAINING</tt>. A
--   container instance can only be updated to <tt>DRAINING</tt> status
--   once it has reached an <tt>ACTIVE</tt> state. If a container instance
--   is in <tt>REGISTERING</tt>, <tt>DEREGISTERING</tt>, or
--   <tt>REGISTRATION_FAILED</tt> state you can describe the container
--   instance but will be unable to update the container instance state.
newUpdateContainerInstancesState :: ContainerInstanceStatus -> UpdateContainerInstancesState

-- | <i>See:</i> <a>newUpdateContainerInstancesStateResponse</a> smart
--   constructor.
data UpdateContainerInstancesStateResponse
UpdateContainerInstancesStateResponse' :: Maybe [Failure] -> Maybe [ContainerInstance] -> Int -> UpdateContainerInstancesStateResponse

-- | Create a value of <a>UpdateContainerInstancesStateResponse</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:UpdateContainerInstancesStateResponse'</a>,
--   <a>updateContainerInstancesStateResponse_failures</a> - Any failures
--   associated with the call.
--   
--   <a>$sel:containerInstances:UpdateContainerInstancesState'</a>,
--   <a>updateContainerInstancesStateResponse_containerInstances</a> - The
--   list of container instances.
--   
--   <a>$sel:httpStatus:UpdateContainerInstancesStateResponse'</a>,
--   <a>updateContainerInstancesStateResponse_httpStatus</a> - The
--   response's http status code.
newUpdateContainerInstancesStateResponse :: Int -> UpdateContainerInstancesStateResponse

-- | <i>See:</i> <a>newDeleteCluster</a> smart constructor.
data DeleteCluster
DeleteCluster' :: Text -> DeleteCluster

-- | Create a value of <a>DeleteCluster</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:DeleteCluster'</a>, <a>deleteCluster_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster to
--   delete.
newDeleteCluster :: Text -> DeleteCluster

-- | <i>See:</i> <a>newDeleteClusterResponse</a> smart constructor.
data DeleteClusterResponse
DeleteClusterResponse' :: Maybe Cluster -> Int -> DeleteClusterResponse

-- | Create a value of <a>DeleteClusterResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:DeleteCluster'</a>,
--   <a>deleteClusterResponse_cluster</a> - The full description of the
--   deleted cluster.
--   
--   <a>$sel:httpStatus:DeleteClusterResponse'</a>,
--   <a>deleteClusterResponse_httpStatus</a> - The response's http status
--   code.
newDeleteClusterResponse :: Int -> DeleteClusterResponse

-- | <i>See:</i> <a>newUpdateCluster</a> smart constructor.
data UpdateCluster
UpdateCluster' :: Maybe [ClusterSetting] -> Maybe ClusterConfiguration -> Text -> UpdateCluster

-- | Create a value of <a>UpdateCluster</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:settings:UpdateCluster'</a>, <a>updateCluster_settings</a> -
--   The cluster settings for your cluster.
--   
--   <a>$sel:configuration:UpdateCluster'</a>,
--   <a>updateCluster_configuration</a> - The execute command configuration
--   for the cluster.
--   
--   <a>$sel:cluster:UpdateCluster'</a>, <a>updateCluster_cluster</a> - The
--   name of the cluster to modify the settings for.
newUpdateCluster :: Text -> UpdateCluster

-- | <i>See:</i> <a>newUpdateClusterResponse</a> smart constructor.
data UpdateClusterResponse
UpdateClusterResponse' :: Maybe Cluster -> Int -> UpdateClusterResponse

-- | Create a value of <a>UpdateClusterResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateCluster'</a>,
--   <a>updateClusterResponse_cluster</a> - Details about the cluster.
--   
--   <a>$sel:httpStatus:UpdateClusterResponse'</a>,
--   <a>updateClusterResponse_httpStatus</a> - The response's http status
--   code.
newUpdateClusterResponse :: Int -> UpdateClusterResponse

-- | <i>See:</i> <a>newCreateCluster</a> smart constructor.
data CreateCluster
CreateCluster' :: Maybe [CapacityProviderStrategyItem] -> Maybe [ClusterSetting] -> Maybe Text -> Maybe ClusterConfiguration -> Maybe [Text] -> Maybe [Tag] -> CreateCluster

-- | Create a value of <a>CreateCluster</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:defaultCapacityProviderStrategy:CreateCluster'</a>,
--   <a>createCluster_defaultCapacityProviderStrategy</a> - The capacity
--   provider strategy to set as the default for the cluster. When a
--   default capacity provider strategy is set for a cluster, when calling
--   the RunTask or CreateService APIs with no capacity provider strategy
--   or launch type specified, the default capacity provider strategy for
--   the cluster is used.
--   
--   If a default capacity provider strategy is not defined for a cluster
--   during creation, it can be defined later with the
--   PutClusterCapacityProviders API operation.
--   
--   <a>$sel:settings:CreateCluster'</a>, <a>createCluster_settings</a> -
--   The setting to use when creating a cluster. This parameter is used to
--   enable CloudWatch Container Insights for a cluster. If this value is
--   specified, it will override the <tt>containerInsights</tt> value set
--   with PutAccountSetting or PutAccountSettingDefault.
--   
--   <a>$sel:clusterName:CreateCluster'</a>,
--   <a>createCluster_clusterName</a> - The name of your cluster. If you do
--   not specify a name for your cluster, you create a cluster named
--   <tt>default</tt>. Up to 255 letters (uppercase and lowercase),
--   numbers, underscores, and hyphens are allowed.
--   
--   <a>$sel:configuration:CreateCluster'</a>,
--   <a>createCluster_configuration</a> - The execute command configuration
--   for the cluster.
--   
--   <a>$sel:capacityProviders:CreateCluster'</a>,
--   <a>createCluster_capacityProviders</a> - The short name of one or more
--   capacity providers to associate with the cluster. A capacity provider
--   must be associated with a cluster before it can be included as part of
--   the default capacity provider strategy of the cluster or used in a
--   capacity provider strategy when calling the CreateService or RunTask
--   actions.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created and not already associated
--   with another cluster. New Auto Scaling group capacity providers can be
--   created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
--   
--   <a>$sel:tags:CreateCluster'</a>, <a>createCluster_tags</a> - The
--   metadata that you apply to the cluster to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newCreateCluster :: CreateCluster

-- | <i>See:</i> <a>newCreateClusterResponse</a> smart constructor.
data CreateClusterResponse
CreateClusterResponse' :: Maybe Cluster -> Int -> CreateClusterResponse

-- | Create a value of <a>CreateClusterResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:CreateClusterResponse'</a>,
--   <a>createClusterResponse_cluster</a> - The full description of your
--   new cluster.
--   
--   <a>$sel:httpStatus:CreateClusterResponse'</a>,
--   <a>createClusterResponse_httpStatus</a> - The response's http status
--   code.
newCreateClusterResponse :: Int -> CreateClusterResponse

-- | <i>See:</i> <a>newPutAccountSetting</a> smart constructor.
data PutAccountSetting
PutAccountSetting' :: Maybe Text -> SettingName -> Text -> PutAccountSetting

-- | Create a value of <a>PutAccountSetting</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:principalArn:PutAccountSetting'</a>,
--   <a>putAccountSetting_principalArn</a> - The ARN of the principal,
--   which can be an IAM user, IAM role, or the root user. If you specify
--   the root user, it modifies the account setting for all IAM users, IAM
--   roles, and the root user of the account unless an IAM user or role
--   explicitly overrides these settings. If this field is omitted, the
--   setting is changed only for the authenticated user.
--   
--   Federated users assume the account setting of the root user and can't
--   have explicit account settings set for them.
--   
--   <a>$sel:name:PutAccountSetting'</a>, <a>putAccountSetting_name</a> -
--   The Amazon ECS resource name for which to modify the account setting.
--   If <tt>serviceLongArnFormat</tt> is specified, the ARN for your Amazon
--   ECS services is affected. If <tt>taskLongArnFormat</tt> is specified,
--   the ARN and resource ID for your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the elastic network interface
--   (ENI) limit for your Amazon ECS container instances is affected. If
--   <tt>containerInsights</tt> is specified, the default setting for
--   CloudWatch Container Insights for your clusters is affected.
--   
--   <a>$sel:value:PutAccountSetting'</a>, <a>putAccountSetting_value</a> -
--   The account setting value for the specified principal ARN. Accepted
--   values are <tt>enabled</tt> and <tt>disabled</tt>.
newPutAccountSetting :: SettingName -> Text -> PutAccountSetting

-- | <i>See:</i> <a>newPutAccountSettingResponse</a> smart constructor.
data PutAccountSettingResponse
PutAccountSettingResponse' :: Maybe Setting -> Int -> PutAccountSettingResponse

-- | Create a value of <a>PutAccountSettingResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:setting:PutAccountSettingResponse'</a>,
--   <a>putAccountSettingResponse_setting</a> - The current account setting
--   for a resource.
--   
--   <a>$sel:httpStatus:PutAccountSettingResponse'</a>,
--   <a>putAccountSettingResponse_httpStatus</a> - The response's http
--   status code.
newPutAccountSettingResponse :: Int -> PutAccountSettingResponse

-- | <i>See:</i> <a>newDeleteAccountSetting</a> smart constructor.
data DeleteAccountSetting
DeleteAccountSetting' :: Maybe Text -> SettingName -> DeleteAccountSetting

-- | Create a value of <a>DeleteAccountSetting</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:principalArn:DeleteAccountSetting'</a>,
--   <a>deleteAccountSetting_principalArn</a> - The ARN of the principal,
--   which can be an IAM user, IAM role, or the root user. If you specify
--   the root user, it disables the account setting for all IAM users, IAM
--   roles, and the root user of the account unless an IAM user or role
--   explicitly overrides these settings. If this field is omitted, the
--   setting is changed only for the authenticated user.
--   
--   <a>$sel:name:DeleteAccountSetting'</a>,
--   <a>deleteAccountSetting_name</a> - The resource name for which to
--   disable the account setting. If <tt>serviceLongArnFormat</tt> is
--   specified, the ARN for your Amazon ECS services is affected. If
--   <tt>taskLongArnFormat</tt> is specified, the ARN and resource ID for
--   your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the ENI limit for your Amazon
--   ECS container instances is affected.
newDeleteAccountSetting :: SettingName -> DeleteAccountSetting

-- | <i>See:</i> <a>newDeleteAccountSettingResponse</a> smart constructor.
data DeleteAccountSettingResponse
DeleteAccountSettingResponse' :: Maybe Setting -> Int -> DeleteAccountSettingResponse

-- | Create a value of <a>DeleteAccountSettingResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:setting:DeleteAccountSettingResponse'</a>,
--   <a>deleteAccountSettingResponse_setting</a> - The account setting for
--   the specified principal ARN.
--   
--   <a>$sel:httpStatus:DeleteAccountSettingResponse'</a>,
--   <a>deleteAccountSettingResponse_httpStatus</a> - The response's http
--   status code.
newDeleteAccountSettingResponse :: Int -> DeleteAccountSettingResponse

-- | <i>See:</i> <a>newListTaskDefinitions</a> smart constructor.
data ListTaskDefinitions
ListTaskDefinitions' :: Maybe TaskDefinitionStatus -> Maybe Text -> Maybe Text -> Maybe SortOrder -> Maybe Int -> ListTaskDefinitions

-- | Create a value of <a>ListTaskDefinitions</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ListTaskDefinitions'</a>,
--   <a>listTaskDefinitions_status</a> - The task definition status with
--   which to filter the <tt>ListTaskDefinitions</tt> results. By default,
--   only <tt>ACTIVE</tt> task definitions are listed. By setting this
--   parameter to <tt>INACTIVE</tt>, you can view task definitions that are
--   <tt>INACTIVE</tt> as long as an active task or service still
--   references them. If you paginate the resulting output, be sure to keep
--   the <tt>status</tt> value constant in each subsequent request.
--   
--   <a>$sel:familyPrefix:ListTaskDefinitions'</a>,
--   <a>listTaskDefinitions_familyPrefix</a> - The full family name with
--   which to filter the <tt>ListTaskDefinitions</tt> results. Specifying a
--   <tt>familyPrefix</tt> limits the listed task definitions to task
--   definition revisions that belong to that family.
--   
--   <a>$sel:nextToken:ListTaskDefinitions'</a>,
--   <a>listTaskDefinitions_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a <tt>ListTaskDefinitions</tt> request indicating that
--   more results are available to fulfill the request and further calls
--   will be needed. If <tt>maxResults</tt> was provided, it is possible
--   the number of results to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:sort:ListTaskDefinitions'</a>, <a>listTaskDefinitions_sort</a>
--   - The order in which to sort the results. Valid values are
--   <tt>ASC</tt> and <tt>DESC</tt>. By default (<tt>ASC</tt>), task
--   definitions are listed lexicographically by family name and in
--   ascending numerical order by revision so that the newest task
--   definitions in a family are listed last. Setting this parameter to
--   <tt>DESC</tt> reverses the sort order on family name and revision so
--   that the newest task definitions in a family are listed first.
--   
--   <a>$sel:maxResults:ListTaskDefinitions'</a>,
--   <a>listTaskDefinitions_maxResults</a> - The maximum number of task
--   definition results returned by <tt>ListTaskDefinitions</tt> in
--   paginated output. When this parameter is used,
--   <tt>ListTaskDefinitions</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListTaskDefinitions</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListTaskDefinitions</tt> returns up to
--   100 results and a <tt>nextToken</tt> value if applicable.
newListTaskDefinitions :: ListTaskDefinitions

-- | <i>See:</i> <a>newListTaskDefinitionsResponse</a> smart constructor.
data ListTaskDefinitionsResponse
ListTaskDefinitionsResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListTaskDefinitionsResponse

-- | Create a value of <a>ListTaskDefinitionsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskDefinitionArns:ListTaskDefinitionsResponse'</a>,
--   <a>listTaskDefinitionsResponse_taskDefinitionArns</a> - The list of
--   task definition Amazon Resource Name (ARN) entries for the
--   <tt>ListTaskDefinitions</tt> request.
--   
--   <a>$sel:nextToken:ListTaskDefinitions'</a>,
--   <a>listTaskDefinitionsResponse_nextToken</a> - The <tt>nextToken</tt>
--   value to include in a future <tt>ListTaskDefinitions</tt> request.
--   When the results of a <tt>ListTaskDefinitions</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:httpStatus:ListTaskDefinitionsResponse'</a>,
--   <a>listTaskDefinitionsResponse_httpStatus</a> - The response's http
--   status code.
newListTaskDefinitionsResponse :: Int -> ListTaskDefinitionsResponse

-- | <i>See:</i> <a>newRunTask</a> smart constructor.
data RunTask
RunTask' :: Maybe TaskOverride -> Maybe Text -> Maybe Text -> Maybe PropagateTags -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe [PlacementConstraint] -> Maybe [PlacementStrategy] -> Maybe Text -> Maybe LaunchType -> Maybe NetworkConfiguration -> Maybe [CapacityProviderStrategyItem] -> Maybe Bool -> Maybe [Tag] -> Text -> RunTask

-- | Create a value of <a>RunTask</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:overrides:RunTask'</a>, <a>runTask_overrides</a> - A list of
--   container overrides in JSON format that specify the name of a
--   container in the specified task definition and the overrides it should
--   receive. You can override the default command for a container (that is
--   specified in the task definition or Docker image) with a
--   <tt>command</tt> override. You can also override existing environment
--   variables (that are specified in the task definition or Docker image)
--   on a container or add new environment variables to it with an
--   <tt>environment</tt> override.
--   
--   A total of 8192 characters are allowed for overrides. This limit
--   includes the JSON formatting characters of the override structure.
--   
--   <a>$sel:group':RunTask'</a>, <a>runTask_group</a> - The name of the
--   task group to associate with the task. The default value is the family
--   name of the task definition (for example,
--   <tt>family:my-family-name</tt>).
--   
--   <a>$sel:cluster:RunTask'</a>, <a>runTask_cluster</a> - The short name
--   or full Amazon Resource Name (ARN) of the cluster on which to run your
--   task. If you do not specify a cluster, the default cluster is assumed.
--   
--   <a>$sel:propagateTags:RunTask'</a>, <a>runTask_propagateTags</a> -
--   Specifies whether to propagate the tags from the task definition to
--   the task. If no value is specified, the tags are not propagated. Tags
--   can only be propagated to the task during task creation. To add tags
--   to a task after task creation, use the TagResource API action.
--   
--   An error will be received if you specify the <tt>SERVICE</tt> option
--   when running a task.
--   
--   <a>$sel:platformVersion:RunTask'</a>, <a>runTask_platformVersion</a> -
--   The platform version the task should use. A platform version is only
--   specified for tasks hosted on Fargate. If one is not specified, the
--   <tt>LATEST</tt> platform version is used by default. For more
--   information, see <a>Fargate platform versions</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:enableECSManagedTags:RunTask'</a>,
--   <a>runTask_enableECSManagedTags</a> - Specifies whether to enable
--   Amazon ECS managed tags for the task. For more information, see
--   <a>Tagging Your Amazon ECS Resources</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
--   
--   <a>$sel:count:RunTask'</a>, <a>runTask_count</a> - The number of
--   instantiations of the specified task to place on your cluster. You can
--   specify up to 10 tasks per call.
--   
--   <a>$sel:referenceId:RunTask'</a>, <a>runTask_referenceId</a> - The
--   reference ID to use for the task. The reference ID can have a maximum
--   length of 1024 characters.
--   
--   <a>$sel:placementConstraints:RunTask'</a>,
--   <a>runTask_placementConstraints</a> - An array of placement constraint
--   objects to use for the task. You can specify up to 10 constraints per
--   task (including constraints in the task definition and those specified
--   at runtime).
--   
--   <a>$sel:placementStrategy:RunTask'</a>,
--   <a>runTask_placementStrategy</a> - The placement strategy objects to
--   use for the task. You can specify a maximum of 5 strategy rules per
--   task.
--   
--   <a>$sel:startedBy:RunTask'</a>, <a>runTask_startedBy</a> - An optional
--   tag specified when a task is started. For example, if you
--   automatically trigger a task to run a batch process job, you could
--   apply a unique identifier for that job to your task with the
--   <tt>startedBy</tt> parameter. You can then identify which tasks belong
--   to that job by filtering the results of a ListTasks call with the
--   <tt>startedBy</tt> value. Up to 36 letters (uppercase and lowercase),
--   numbers, hyphens, and underscores are allowed.
--   
--   If a task is started by an Amazon ECS service, then the
--   <tt>startedBy</tt> parameter contains the deployment ID of the service
--   that starts it.
--   
--   <a>$sel:launchType:RunTask'</a>, <a>runTask_launchType</a> - The
--   infrastructure on which to run your standalone task. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>FARGATE</tt> launch type runs your tasks on Fargate On-Demand
--   infrastructure.
--   
--   Fargate Spot infrastructure is available for use but a capacity
--   provider strategy must be used. For more information, see <a>Fargate
--   capacity providers</a> in the <i>Amazon ECS User Guide for
--   Fargate</i>.
--   
--   The <tt>EC2</tt> launch type runs your tasks on Amazon EC2 instances
--   registered to your cluster.
--   
--   The <tt>EXTERNAL</tt> launch type runs your tasks on your on-premise
--   server or virtual machine (VM) capacity registered to your cluster.
--   
--   A task can use either a launch type or a capacity provider strategy.
--   If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
--   
--   When you use cluster auto scaling, you must specify
--   <tt>capacityProviderStrategy</tt> and not <tt>launchType</tt>.
--   
--   <a>$sel:networkConfiguration:RunTask'</a>,
--   <a>runTask_networkConfiguration</a> - The network configuration for
--   the task. This parameter is required for task definitions that use the
--   <tt>awsvpc</tt> network mode to receive their own elastic network
--   interface, and it is not supported for other network modes. For more
--   information, see <a>Task networking</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
--   
--   <a>$sel:capacityProviderStrategy:RunTask'</a>,
--   <a>runTask_capacityProviderStrategy</a> - The capacity provider
--   strategy to use for the task.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   When you use cluster auto scaling, you must specify
--   <tt>capacityProviderStrategy</tt> and not <tt>launchType</tt>.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
--   
--   <a>$sel:enableExecuteCommand:RunTask'</a>,
--   <a>runTask_enableExecuteCommand</a> - Whether or not to enable the
--   execute command functionality for the containers in this task. If
--   <tt>true</tt>, this enables execute command functionality on all
--   containers in the task.
--   
--   <a>$sel:tags:RunTask'</a>, <a>runTask_tags</a> - The metadata that you
--   apply to the task to help you categorize and organize them. Each tag
--   consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:taskDefinition:RunTask'</a>, <a>runTask_taskDefinition</a> -
--   The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to run. If a <tt>revision</tt> is
--   not specified, the latest <tt>ACTIVE</tt> revision is used.
--   
--   The full ARN value must match the value that you specified ias the
--   <tt>Resource</tt> of the IAM principal's permissions policy. For
--   example, if the <tt>Resource</tt> is
--   arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:*,
--   the <tt>taskDefinition</tt> ARN value must be
--   <tt>arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName</tt>.
newRunTask :: Text -> RunTask

-- | <i>See:</i> <a>newRunTaskResponse</a> smart constructor.
data RunTaskResponse
RunTaskResponse' :: Maybe [Failure] -> Maybe [Task] -> Int -> RunTaskResponse

-- | Create a value of <a>RunTaskResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:RunTaskResponse'</a>, <a>runTaskResponse_failures</a>
--   - Any failures associated with the call.
--   
--   <a>$sel:tasks:RunTaskResponse'</a>, <a>runTaskResponse_tasks</a> - A
--   full description of the tasks that were run. The tasks that were
--   successfully placed on your cluster are described here.
--   
--   <a>$sel:httpStatus:RunTaskResponse'</a>,
--   <a>runTaskResponse_httpStatus</a> - The response's http status code.
newRunTaskResponse :: Int -> RunTaskResponse

-- | <i>See:</i> <a>newDeleteCapacityProvider</a> smart constructor.
data DeleteCapacityProvider
DeleteCapacityProvider' :: Text -> DeleteCapacityProvider

-- | Create a value of <a>DeleteCapacityProvider</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:capacityProvider:DeleteCapacityProvider'</a>,
--   <a>deleteCapacityProvider_capacityProvider</a> - The short name or
--   full Amazon Resource Name (ARN) of the capacity provider to delete.
newDeleteCapacityProvider :: Text -> DeleteCapacityProvider

-- | <i>See:</i> <a>newDeleteCapacityProviderResponse</a> smart
--   constructor.
data DeleteCapacityProviderResponse
DeleteCapacityProviderResponse' :: Maybe CapacityProvider -> Int -> DeleteCapacityProviderResponse

-- | Create a value of <a>DeleteCapacityProviderResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:capacityProvider:DeleteCapacityProvider'</a>,
--   <a>deleteCapacityProviderResponse_capacityProvider</a> - The details
--   of the capacity provider.
--   
--   <a>$sel:httpStatus:DeleteCapacityProviderResponse'</a>,
--   <a>deleteCapacityProviderResponse_httpStatus</a> - The response's http
--   status code.
newDeleteCapacityProviderResponse :: Int -> DeleteCapacityProviderResponse

-- | <i>See:</i> <a>newListTasks</a> smart constructor.
data ListTasks
ListTasks' :: Maybe DesiredStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe LaunchType -> Maybe Text -> Maybe Int -> ListTasks

-- | Create a value of <a>ListTasks</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:desiredStatus:ListTasks'</a>, <a>listTasks_desiredStatus</a> -
--   The task desired status to use when filtering the <tt>ListTasks</tt>
--   results. Specifying a <tt>desiredStatus</tt> of <tt>STOPPED</tt>
--   limits the results to tasks that Amazon ECS has set the desired status
--   to <tt>STOPPED</tt>. This can be useful for debugging tasks that are
--   not starting properly or have died or finished. The default status
--   filter is <tt>RUNNING</tt>, which shows tasks that Amazon ECS has set
--   the desired status to <tt>RUNNING</tt>.
--   
--   Although you can filter results based on a desired status of
--   <tt>PENDING</tt>, this does not return any results. Amazon ECS never
--   sets the desired status of a task to that value (only a task's
--   <tt>lastStatus</tt> may have a value of <tt>PENDING</tt>).
--   
--   <a>$sel:cluster:ListTasks'</a>, <a>listTasks_cluster</a> - The short
--   name or full Amazon Resource Name (ARN) of the cluster to use when
--   filtering the <tt>ListTasks</tt> results. If you do not specify a
--   cluster, the default cluster is assumed.
--   
--   <a>$sel:family:ListTasks'</a>, <a>listTasks_family</a> - The name of
--   the task definition family to use when filtering the
--   <tt>ListTasks</tt> results. Specifying a <tt>family</tt> limits the
--   results to tasks that belong to that family.
--   
--   <a>$sel:nextToken:ListTasks'</a>, <a>listTasks_nextToken</a> - The
--   <tt>nextToken</tt> value returned from a <tt>ListTasks</tt> request
--   indicating that more results are available to fulfill the request and
--   further calls will be needed. If <tt>maxResults</tt> was provided, it
--   is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:startedBy:ListTasks'</a>, <a>listTasks_startedBy</a> - The
--   <tt>startedBy</tt> value with which to filter the task results.
--   Specifying a <tt>startedBy</tt> value limits the results to tasks that
--   were started with that value.
--   
--   <a>$sel:serviceName:ListTasks'</a>, <a>listTasks_serviceName</a> - The
--   name of the service to use when filtering the <tt>ListTasks</tt>
--   results. Specifying a <tt>serviceName</tt> limits the results to tasks
--   that belong to that service.
--   
--   <a>$sel:launchType:ListTasks'</a>, <a>listTasks_launchType</a> - The
--   launch type to use when filtering the <tt>ListTasks</tt> results.
--   
--   <a>$sel:containerInstance:ListTasks'</a>,
--   <a>listTasks_containerInstance</a> - The container instance ID or full
--   ARN of the container instance to use when filtering the
--   <tt>ListTasks</tt> results. Specifying a <tt>containerInstance</tt>
--   limits the results to tasks that belong to that container instance.
--   
--   <a>$sel:maxResults:ListTasks'</a>, <a>listTasks_maxResults</a> - The
--   maximum number of task results returned by <tt>ListTasks</tt> in
--   paginated output. When this parameter is used, <tt>ListTasks</tt> only
--   returns <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>ListTasks</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 100. If this parameter is not used, then
--   <tt>ListTasks</tt> returns up to 100 results and a <tt>nextToken</tt>
--   value if applicable.
newListTasks :: ListTasks

-- | <i>See:</i> <a>newListTasksResponse</a> smart constructor.
data ListTasksResponse
ListTasksResponse' :: Maybe Text -> Maybe [Text] -> Int -> ListTasksResponse

-- | Create a value of <a>ListTasksResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListTasks'</a>, <a>listTasksResponse_nextToken</a> -
--   The <tt>nextToken</tt> value to include in a future <tt>ListTasks</tt>
--   request. When the results of a <tt>ListTasks</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:taskArns:ListTasksResponse'</a>,
--   <a>listTasksResponse_taskArns</a> - The list of task ARN entries for
--   the <tt>ListTasks</tt> request.
--   
--   <a>$sel:httpStatus:ListTasksResponse'</a>,
--   <a>listTasksResponse_httpStatus</a> - The response's http status code.
newListTasksResponse :: Int -> ListTasksResponse

-- | <i>See:</i> <a>newUpdateCapacityProvider</a> smart constructor.
data UpdateCapacityProvider
UpdateCapacityProvider' :: Text -> AutoScalingGroupProviderUpdate -> UpdateCapacityProvider

-- | Create a value of <a>UpdateCapacityProvider</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:UpdateCapacityProvider'</a>,
--   <a>updateCapacityProvider_name</a> - The name of the capacity provider
--   to update.
--   
--   <a>$sel:autoScalingGroupProvider:UpdateCapacityProvider'</a>,
--   <a>updateCapacityProvider_autoScalingGroupProvider</a> - An object
--   representing the parameters to update for the Auto Scaling group
--   capacity provider.
newUpdateCapacityProvider :: Text -> AutoScalingGroupProviderUpdate -> UpdateCapacityProvider

-- | <i>See:</i> <a>newUpdateCapacityProviderResponse</a> smart
--   constructor.
data UpdateCapacityProviderResponse
UpdateCapacityProviderResponse' :: Maybe CapacityProvider -> Int -> UpdateCapacityProviderResponse

-- | Create a value of <a>UpdateCapacityProviderResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:capacityProvider:UpdateCapacityProviderResponse'</a>,
--   <a>updateCapacityProviderResponse_capacityProvider</a> - Details about
--   the capacity provider.
--   
--   <a>$sel:httpStatus:UpdateCapacityProviderResponse'</a>,
--   <a>updateCapacityProviderResponse_httpStatus</a> - The response's http
--   status code.
newUpdateCapacityProviderResponse :: Int -> UpdateCapacityProviderResponse

-- | <i>See:</i> <a>newRegisterContainerInstance</a> smart constructor.
data RegisterContainerInstance
RegisterContainerInstance' :: Maybe [PlatformDevice] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe VersionInfo -> Maybe [Attribute] -> Maybe [Resource] -> Maybe [Tag] -> RegisterContainerInstance

-- | Create a value of <a>RegisterContainerInstance</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:platformDevices:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_platformDevices</a> - The devices that
--   are available on the container instance. The only supported device
--   type is a GPU.
--   
--   
--   <a>$sel:instanceIdentityDocumentSignature:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_instanceIdentityDocumentSignature</a> -
--   The instance identity document signature for the EC2 instance to
--   register. This signature can be found by running the following command
--   from the instance: <tt>curl
--   http://169.254.169.254/latest/dynamic/instance-identity/signature/</tt>
--   
--   <a>$sel:cluster:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_cluster</a> - The short name or full
--   Amazon Resource Name (ARN) of the cluster with which to register your
--   container instance. If you do not specify a cluster, the default
--   cluster is assumed.
--   
--   <a>$sel:instanceIdentityDocument:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_instanceIdentityDocument</a> - The
--   instance identity document for the EC2 instance to register. This
--   document can be found by running the following command from the
--   instance: <tt>curl
--   http://169.254.169.254/latest/dynamic/instance-identity/document/</tt>
--   
--   <a>$sel:containerInstanceArn:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_containerInstanceArn</a> - The ARN of the
--   container instance (if it was previously registered).
--   
--   <a>$sel:versionInfo:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_versionInfo</a> - The version information
--   for the Amazon ECS container agent and Docker daemon running on the
--   container instance.
--   
--   <a>$sel:attributes:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_attributes</a> - The container instance
--   attributes that this container instance supports.
--   
--   <a>$sel:totalResources:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_totalResources</a> - The resources
--   available on the instance.
--   
--   <a>$sel:tags:RegisterContainerInstance'</a>,
--   <a>registerContainerInstance_tags</a> - The metadata that you apply to
--   the container instance to help you categorize and organize them. Each
--   tag consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newRegisterContainerInstance :: RegisterContainerInstance

-- | <i>See:</i> <a>newRegisterContainerInstanceResponse</a> smart
--   constructor.
data RegisterContainerInstanceResponse
RegisterContainerInstanceResponse' :: Maybe ContainerInstance -> Int -> RegisterContainerInstanceResponse

-- | Create a value of <a>RegisterContainerInstanceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerInstance:RegisterContainerInstanceResponse'</a>,
--   <a>registerContainerInstanceResponse_containerInstance</a> - The
--   container instance that was registered.
--   
--   <a>$sel:httpStatus:RegisterContainerInstanceResponse'</a>,
--   <a>registerContainerInstanceResponse_httpStatus</a> - The response's
--   http status code.
newRegisterContainerInstanceResponse :: Int -> RegisterContainerInstanceResponse

-- | <i>See:</i> <a>newUpdateContainerAgent</a> smart constructor.
data UpdateContainerAgent
UpdateContainerAgent' :: Maybe Text -> Text -> UpdateContainerAgent

-- | Create a value of <a>UpdateContainerAgent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateContainerAgent'</a>,
--   <a>updateContainerAgent_cluster</a> - The short name or full Amazon
--   Resource Name (ARN) of the cluster that your container instance is
--   running on. If you do not specify a cluster, the default cluster is
--   assumed.
--   
--   <a>$sel:containerInstance:UpdateContainerAgent'</a>,
--   <a>updateContainerAgent_containerInstance</a> - The container instance
--   ID or full ARN entries for the container instance on which you would
--   like to update the Amazon ECS container agent.
newUpdateContainerAgent :: Text -> UpdateContainerAgent

-- | <i>See:</i> <a>newUpdateContainerAgentResponse</a> smart constructor.
data UpdateContainerAgentResponse
UpdateContainerAgentResponse' :: Maybe ContainerInstance -> Int -> UpdateContainerAgentResponse

-- | Create a value of <a>UpdateContainerAgentResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerInstance:UpdateContainerAgent'</a>,
--   <a>updateContainerAgentResponse_containerInstance</a> - The container
--   instance for which the container agent was updated.
--   
--   <a>$sel:httpStatus:UpdateContainerAgentResponse'</a>,
--   <a>updateContainerAgentResponse_httpStatus</a> - The response's http
--   status code.
newUpdateContainerAgentResponse :: Int -> UpdateContainerAgentResponse

-- | <i>See:</i> <a>newListContainerInstances</a> smart constructor.
data ListContainerInstances
ListContainerInstances' :: Maybe ContainerInstanceStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> ListContainerInstances

-- | Create a value of <a>ListContainerInstances</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ListContainerInstances'</a>,
--   <a>listContainerInstances_status</a> - Filters the container instances
--   by status. For example, if you specify the <tt>DRAINING</tt> status,
--   the results include only container instances that have been set to
--   <tt>DRAINING</tt> using UpdateContainerInstancesState. If you do not
--   specify this parameter, the default is to include container instances
--   set to all states other than <tt>INACTIVE</tt>.
--   
--   <a>$sel:cluster:ListContainerInstances'</a>,
--   <a>listContainerInstances_cluster</a> - The short name or full Amazon
--   Resource Name (ARN) of the cluster that hosts the container instances
--   to list. If you do not specify a cluster, the default cluster is
--   assumed.
--   
--   <a>$sel:nextToken:ListContainerInstances'</a>,
--   <a>listContainerInstances_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a <tt>ListContainerInstances</tt> request indicating
--   that more results are available to fulfill the request and further
--   calls will be needed. If <tt>maxResults</tt> was provided, it is
--   possible the number of results to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:filter':ListContainerInstances'</a>,
--   <a>listContainerInstances_filter</a> - You can filter the results of a
--   <tt>ListContainerInstances</tt> operation with cluster query language
--   statements. For more information, see <a>Cluster Query Language</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:maxResults:ListContainerInstances'</a>,
--   <a>listContainerInstances_maxResults</a> - The maximum number of
--   container instance results returned by <tt>ListContainerInstances</tt>
--   in paginated output. When this parameter is used,
--   <tt>ListContainerInstances</tt> only returns <tt>maxResults</tt>
--   results in a single page along with a <tt>nextToken</tt> response
--   element. The remaining results of the initial request can be seen by
--   sending another <tt>ListContainerInstances</tt> request with the
--   returned <tt>nextToken</tt> value. This value can be between 1 and
--   100. If this parameter is not used, then
--   <tt>ListContainerInstances</tt> returns up to 100 results and a
--   <tt>nextToken</tt> value if applicable.
newListContainerInstances :: ListContainerInstances

-- | <i>See:</i> <a>newListContainerInstancesResponse</a> smart
--   constructor.
data ListContainerInstancesResponse
ListContainerInstancesResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListContainerInstancesResponse

-- | Create a value of <a>ListContainerInstancesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerInstanceArns:ListContainerInstancesResponse'</a>,
--   <a>listContainerInstancesResponse_containerInstanceArns</a> - The list
--   of container instances with full ARN entries for each container
--   instance associated with the specified cluster.
--   
--   <a>$sel:nextToken:ListContainerInstances'</a>,
--   <a>listContainerInstancesResponse_nextToken</a> - The
--   <tt>nextToken</tt> value to include in a future
--   <tt>ListContainerInstances</tt> request. When the results of a
--   <tt>ListContainerInstances</tt> request exceed <tt>maxResults</tt>,
--   this value can be used to retrieve the next page of results. This
--   value is <tt>null</tt> when there are no more results to return.
--   
--   <a>$sel:httpStatus:ListContainerInstancesResponse'</a>,
--   <a>listContainerInstancesResponse_httpStatus</a> - The response's http
--   status code.
newListContainerInstancesResponse :: Int -> ListContainerInstancesResponse

-- | <i>See:</i> <a>newUpdateServicePrimaryTaskSet</a> smart constructor.
data UpdateServicePrimaryTaskSet
UpdateServicePrimaryTaskSet' :: Text -> Text -> Text -> UpdateServicePrimaryTaskSet

-- | Create a value of <a>UpdateServicePrimaryTaskSet</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateServicePrimaryTaskSet'</a>,
--   <a>updateServicePrimaryTaskSet_cluster</a> - The short name or full
--   Amazon Resource Name (ARN) of the cluster that hosts the service that
--   the task set exists in.
--   
--   <a>$sel:service:UpdateServicePrimaryTaskSet'</a>,
--   <a>updateServicePrimaryTaskSet_service</a> - The short name or full
--   Amazon Resource Name (ARN) of the service that the task set exists in.
--   
--   <a>$sel:primaryTaskSet:UpdateServicePrimaryTaskSet'</a>,
--   <a>updateServicePrimaryTaskSet_primaryTaskSet</a> - The short name or
--   full Amazon Resource Name (ARN) of the task set to set as the primary
--   task set in the deployment.
newUpdateServicePrimaryTaskSet :: Text -> Text -> Text -> UpdateServicePrimaryTaskSet

-- | <i>See:</i> <a>newUpdateServicePrimaryTaskSetResponse</a> smart
--   constructor.
data UpdateServicePrimaryTaskSetResponse
UpdateServicePrimaryTaskSetResponse' :: Maybe TaskSet -> Int -> UpdateServicePrimaryTaskSetResponse

-- | Create a value of <a>UpdateServicePrimaryTaskSetResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSet:UpdateServicePrimaryTaskSetResponse'</a>,
--   <a>updateServicePrimaryTaskSetResponse_taskSet</a> - Details about the
--   task set.
--   
--   <a>$sel:httpStatus:UpdateServicePrimaryTaskSetResponse'</a>,
--   <a>updateServicePrimaryTaskSetResponse_httpStatus</a> - The response's
--   http status code.
newUpdateServicePrimaryTaskSetResponse :: Int -> UpdateServicePrimaryTaskSetResponse

-- | <i>See:</i> <a>newListTaskDefinitionFamilies</a> smart constructor.
data ListTaskDefinitionFamilies
ListTaskDefinitionFamilies' :: Maybe TaskDefinitionFamilyStatus -> Maybe Text -> Maybe Text -> Maybe Int -> ListTaskDefinitionFamilies

-- | Create a value of <a>ListTaskDefinitionFamilies</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ListTaskDefinitionFamilies'</a>,
--   <a>listTaskDefinitionFamilies_status</a> - The task definition family
--   status with which to filter the <tt>ListTaskDefinitionFamilies</tt>
--   results. By default, both <tt>ACTIVE</tt> and <tt>INACTIVE</tt> task
--   definition families are listed. If this parameter is set to
--   <tt>ACTIVE</tt>, only task definition families that have an
--   <tt>ACTIVE</tt> task definition revision are returned. If this
--   parameter is set to <tt>INACTIVE</tt>, only task definition families
--   that do not have any <tt>ACTIVE</tt> task definition revisions are
--   returned. If you paginate the resulting output, be sure to keep the
--   <tt>status</tt> value constant in each subsequent request.
--   
--   <a>$sel:familyPrefix:ListTaskDefinitionFamilies'</a>,
--   <a>listTaskDefinitionFamilies_familyPrefix</a> - The
--   <tt>familyPrefix</tt> is a string that is used to filter the results
--   of <tt>ListTaskDefinitionFamilies</tt>. If you specify a
--   <tt>familyPrefix</tt>, only task definition family names that begin
--   with the <tt>familyPrefix</tt> string are returned.
--   
--   <a>$sel:nextToken:ListTaskDefinitionFamilies'</a>,
--   <a>listTaskDefinitionFamilies_nextToken</a> - The <tt>nextToken</tt>
--   value returned from a <tt>ListTaskDefinitionFamilies</tt> request
--   indicating that more results are available to fulfill the request and
--   further calls will be needed. If <tt>maxResults</tt> was provided, it
--   is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:maxResults:ListTaskDefinitionFamilies'</a>,
--   <a>listTaskDefinitionFamilies_maxResults</a> - The maximum number of
--   task definition family results returned by
--   <tt>ListTaskDefinitionFamilies</tt> in paginated output. When this
--   parameter is used, <tt>ListTaskDefinitions</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>ListTaskDefinitionFamilies</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListTaskDefinitionFamilies</tt>
--   returns up to 100 results and a <tt>nextToken</tt> value if
--   applicable.
newListTaskDefinitionFamilies :: ListTaskDefinitionFamilies

-- | <i>See:</i> <a>newListTaskDefinitionFamiliesResponse</a> smart
--   constructor.
data ListTaskDefinitionFamiliesResponse
ListTaskDefinitionFamiliesResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListTaskDefinitionFamiliesResponse

-- | Create a value of <a>ListTaskDefinitionFamiliesResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:families:ListTaskDefinitionFamiliesResponse'</a>,
--   <a>listTaskDefinitionFamiliesResponse_families</a> - The list of task
--   definition family names that match the
--   <tt>ListTaskDefinitionFamilies</tt> request.
--   
--   <a>$sel:nextToken:ListTaskDefinitionFamilies'</a>,
--   <a>listTaskDefinitionFamiliesResponse_nextToken</a> - The
--   <tt>nextToken</tt> value to include in a future
--   <tt>ListTaskDefinitionFamilies</tt> request. When the results of a
--   <tt>ListTaskDefinitionFamilies</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:httpStatus:ListTaskDefinitionFamiliesResponse'</a>,
--   <a>listTaskDefinitionFamiliesResponse_httpStatus</a> - The response's
--   http status code.
newListTaskDefinitionFamiliesResponse :: Int -> ListTaskDefinitionFamiliesResponse

-- | <i>See:</i> <a>newStartTask</a> smart constructor.
data StartTask
StartTask' :: Maybe TaskOverride -> Maybe Text -> Maybe Text -> Maybe PropagateTags -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe NetworkConfiguration -> Maybe Bool -> Maybe [Tag] -> [Text] -> Text -> StartTask

-- | Create a value of <a>StartTask</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:overrides:StartTask'</a>, <a>startTask_overrides</a> - A list
--   of container overrides in JSON format that specify the name of a
--   container in the specified task definition and the overrides it should
--   receive. You can override the default command for a container (that is
--   specified in the task definition or Docker image) with a
--   <tt>command</tt> override. You can also override existing environment
--   variables (that are specified in the task definition or Docker image)
--   on a container or add new environment variables to it with an
--   <tt>environment</tt> override.
--   
--   A total of 8192 characters are allowed for overrides. This limit
--   includes the JSON formatting characters of the override structure.
--   
--   <a>$sel:group':StartTask'</a>, <a>startTask_group</a> - The name of
--   the task group to associate with the task. The default value is the
--   family name of the task definition (for example,
--   family:my-family-name).
--   
--   <a>$sel:cluster:StartTask'</a>, <a>startTask_cluster</a> - The short
--   name or full Amazon Resource Name (ARN) of the cluster on which to
--   start your task. If you do not specify a cluster, the default cluster
--   is assumed.
--   
--   <a>$sel:propagateTags:StartTask'</a>, <a>startTask_propagateTags</a> -
--   Specifies whether to propagate the tags from the task definition or
--   the service to the task. If no value is specified, the tags are not
--   propagated.
--   
--   <a>$sel:enableECSManagedTags:StartTask'</a>,
--   <a>startTask_enableECSManagedTags</a> - Specifies whether to enable
--   Amazon ECS managed tags for the task. For more information, see
--   <a>Tagging Your Amazon ECS Resources</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
--   
--   <a>$sel:referenceId:StartTask'</a>, <a>startTask_referenceId</a> - The
--   reference ID to use for the task.
--   
--   <a>$sel:startedBy:StartTask'</a>, <a>startTask_startedBy</a> - An
--   optional tag specified when a task is started. For example, if you
--   automatically trigger a task to run a batch process job, you could
--   apply a unique identifier for that job to your task with the
--   <tt>startedBy</tt> parameter. You can then identify which tasks belong
--   to that job by filtering the results of a ListTasks call with the
--   <tt>startedBy</tt> value. Up to 36 letters (uppercase and lowercase),
--   numbers, hyphens, and underscores are allowed.
--   
--   If a task is started by an Amazon ECS service, then the
--   <tt>startedBy</tt> parameter contains the deployment ID of the service
--   that starts it.
--   
--   <a>$sel:networkConfiguration:StartTask'</a>,
--   <a>startTask_networkConfiguration</a> - The VPC subnet and security
--   group configuration for tasks that receive their own elastic network
--   interface by using the <tt>awsvpc</tt> networking mode.
--   
--   <a>$sel:enableExecuteCommand:StartTask'</a>,
--   <a>startTask_enableExecuteCommand</a> - Whether or not the execute
--   command functionality is enabled for the task. If <tt>true</tt>, this
--   enables execute command functionality on all containers in the task.
--   
--   <a>$sel:tags:StartTask'</a>, <a>startTask_tags</a> - The metadata that
--   you apply to the task to help you categorize and organize them. Each
--   tag consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:containerInstances:StartTask'</a>,
--   <a>startTask_containerInstances</a> - The container instance IDs or
--   full ARN entries for the container instances on which you would like
--   to place your task. You can specify up to 10 container instances.
--   
--   <a>$sel:taskDefinition:StartTask'</a>, <a>startTask_taskDefinition</a>
--   - The <tt>family</tt> and <tt>revision</tt> (<tt>family:revision</tt>)
--   or full ARN of the task definition to start. If a <tt>revision</tt> is
--   not specified, the latest <tt>ACTIVE</tt> revision is used.
newStartTask :: Text -> StartTask

-- | <i>See:</i> <a>newStartTaskResponse</a> smart constructor.
data StartTaskResponse
StartTaskResponse' :: Maybe [Failure] -> Maybe [Task] -> Int -> StartTaskResponse

-- | Create a value of <a>StartTaskResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:StartTaskResponse'</a>,
--   <a>startTaskResponse_failures</a> - Any failures associated with the
--   call.
--   
--   <a>$sel:tasks:StartTaskResponse'</a>, <a>startTaskResponse_tasks</a> -
--   A full description of the tasks that were started. Each task that was
--   successfully placed on your container instances is described.
--   
--   <a>$sel:httpStatus:StartTaskResponse'</a>,
--   <a>startTaskResponse_httpStatus</a> - The response's http status code.
newStartTaskResponse :: Int -> StartTaskResponse

-- | <i>See:</i> <a>newPutClusterCapacityProviders</a> smart constructor.
data PutClusterCapacityProviders
PutClusterCapacityProviders' :: Text -> [Text] -> [CapacityProviderStrategyItem] -> PutClusterCapacityProviders

-- | Create a value of <a>PutClusterCapacityProviders</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:PutClusterCapacityProviders'</a>,
--   <a>putClusterCapacityProviders_cluster</a> - The short name or full
--   Amazon Resource Name (ARN) of the cluster to modify the capacity
--   provider settings for. If you do not specify a cluster, the default
--   cluster is assumed.
--   
--   <a>$sel:capacityProviders:PutClusterCapacityProviders'</a>,
--   <a>putClusterCapacityProviders_capacityProviders</a> - The name of one
--   or more capacity providers to associate with the cluster.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   
--   <a>$sel:defaultCapacityProviderStrategy:PutClusterCapacityProviders'</a>,
--   <a>putClusterCapacityProviders_defaultCapacityProviderStrategy</a> -
--   The capacity provider strategy to use by default for the cluster.
--   
--   When creating a service or running a task on a cluster, if no capacity
--   provider or launch type is specified then the default capacity
--   provider strategy for the cluster is used.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
newPutClusterCapacityProviders :: Text -> PutClusterCapacityProviders

-- | <i>See:</i> <a>newPutClusterCapacityProvidersResponse</a> smart
--   constructor.
data PutClusterCapacityProvidersResponse
PutClusterCapacityProvidersResponse' :: Maybe Cluster -> Int -> PutClusterCapacityProvidersResponse

-- | Create a value of <a>PutClusterCapacityProvidersResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:PutClusterCapacityProviders'</a>,
--   <a>putClusterCapacityProvidersResponse_cluster</a> - Details about the
--   cluster.
--   
--   <a>$sel:httpStatus:PutClusterCapacityProvidersResponse'</a>,
--   <a>putClusterCapacityProvidersResponse_httpStatus</a> - The response's
--   http status code.
newPutClusterCapacityProvidersResponse :: Int -> PutClusterCapacityProvidersResponse

-- | <i>See:</i> <a>newPutAccountSettingDefault</a> smart constructor.
data PutAccountSettingDefault
PutAccountSettingDefault' :: SettingName -> Text -> PutAccountSettingDefault

-- | Create a value of <a>PutAccountSettingDefault</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:PutAccountSettingDefault'</a>,
--   <a>putAccountSettingDefault_name</a> - The resource name for which to
--   modify the account setting. If <tt>serviceLongArnFormat</tt> is
--   specified, the ARN for your Amazon ECS services is affected. If
--   <tt>taskLongArnFormat</tt> is specified, the ARN and resource ID for
--   your Amazon ECS tasks is affected. If
--   <tt>containerInstanceLongArnFormat</tt> is specified, the ARN and
--   resource ID for your Amazon ECS container instances is affected. If
--   <tt>awsvpcTrunking</tt> is specified, the ENI limit for your Amazon
--   ECS container instances is affected. If <tt>containerInsights</tt> is
--   specified, the default setting for CloudWatch Container Insights for
--   your clusters is affected.
--   
--   <a>$sel:value:PutAccountSettingDefault'</a>,
--   <a>putAccountSettingDefault_value</a> - The account setting value for
--   the specified principal ARN. Accepted values are <tt>enabled</tt> and
--   <tt>disabled</tt>.
newPutAccountSettingDefault :: SettingName -> Text -> PutAccountSettingDefault

-- | <i>See:</i> <a>newPutAccountSettingDefaultResponse</a> smart
--   constructor.
data PutAccountSettingDefaultResponse
PutAccountSettingDefaultResponse' :: Maybe Setting -> Int -> PutAccountSettingDefaultResponse

-- | Create a value of <a>PutAccountSettingDefaultResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:setting:PutAccountSettingDefaultResponse'</a>,
--   <a>putAccountSettingDefaultResponse_setting</a> - The current setting
--   for a resource.
--   
--   <a>$sel:httpStatus:PutAccountSettingDefaultResponse'</a>,
--   <a>putAccountSettingDefaultResponse_httpStatus</a> - The response's
--   http status code.
newPutAccountSettingDefaultResponse :: Int -> PutAccountSettingDefaultResponse

-- | <i>See:</i> <a>newListAttributes</a> smart constructor.
data ListAttributes
ListAttributes' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> TargetType -> ListAttributes

-- | Create a value of <a>ListAttributes</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributeValue:ListAttributes'</a>,
--   <a>listAttributes_attributeValue</a> - The value of the attribute with
--   which to filter results. You must also specify an attribute name to
--   use this parameter.
--   
--   <a>$sel:cluster:ListAttributes'</a>, <a>listAttributes_cluster</a> -
--   The short name or full Amazon Resource Name (ARN) of the cluster to
--   list attributes. If you do not specify a cluster, the default cluster
--   is assumed.
--   
--   <a>$sel:nextToken:ListAttributes'</a>, <a>listAttributes_nextToken</a>
--   - The <tt>nextToken</tt> value returned from a <tt>ListAttributes</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:attributeName:ListAttributes'</a>,
--   <a>listAttributes_attributeName</a> - The name of the attribute with
--   which to filter the results.
--   
--   <a>$sel:maxResults:ListAttributes'</a>,
--   <a>listAttributes_maxResults</a> - The maximum number of cluster
--   results returned by <tt>ListAttributes</tt> in paginated output. When
--   this parameter is used, <tt>ListAttributes</tt> only returns
--   <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another <tt>ListAttributes</tt>
--   request with the returned <tt>nextToken</tt> value. This value can be
--   between 1 and 100. If this parameter is not used, then
--   <tt>ListAttributes</tt> returns up to 100 results and a
--   <tt>nextToken</tt> value if applicable.
--   
--   <a>$sel:targetType:ListAttributes'</a>,
--   <a>listAttributes_targetType</a> - The type of the target with which
--   to list attributes.
newListAttributes :: TargetType -> ListAttributes

-- | <i>See:</i> <a>newListAttributesResponse</a> smart constructor.
data ListAttributesResponse
ListAttributesResponse' :: Maybe Text -> Maybe [Attribute] -> Int -> ListAttributesResponse

-- | Create a value of <a>ListAttributesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListAttributes'</a>,
--   <a>listAttributesResponse_nextToken</a> - The <tt>nextToken</tt> value
--   to include in a future <tt>ListAttributes</tt> request. When the
--   results of a <tt>ListAttributes</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:attributes:ListAttributesResponse'</a>,
--   <a>listAttributesResponse_attributes</a> - A list of attribute objects
--   that meet the criteria of the request.
--   
--   <a>$sel:httpStatus:ListAttributesResponse'</a>,
--   <a>listAttributesResponse_httpStatus</a> - The response's http status
--   code.
newListAttributesResponse :: Int -> ListAttributesResponse

-- | <i>See:</i> <a>newExecuteCommand</a> smart constructor.
data ExecuteCommand
ExecuteCommand' :: Maybe Text -> Maybe Text -> Text -> Bool -> Text -> ExecuteCommand

-- | Create a value of <a>ExecuteCommand</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:ExecuteCommand'</a>, <a>executeCommand_cluster</a> -
--   The Amazon Resource Name (ARN) or short name of the cluster the task
--   is running in. If you do not specify a cluster, the default cluster is
--   assumed.
--   
--   <a>$sel:container:ExecuteCommand'</a>, <a>executeCommand_container</a>
--   - The name of the container to execute the command on. A container
--   name only needs to be specified for tasks containing multiple
--   containers.
--   
--   <a>$sel:command:ExecuteCommand'</a>, <a>executeCommand_command</a> -
--   The command to run on the container.
--   
--   <a>$sel:interactive:ExecuteCommand'</a>,
--   <a>executeCommand_interactive</a> - Use this flag to run your command
--   in interactive mode.
--   
--   <a>$sel:task:ExecuteCommand'</a>, <a>executeCommand_task</a> - The
--   Amazon Resource Name (ARN) or ID of the task the container is part of.
newExecuteCommand :: Text -> Bool -> Text -> ExecuteCommand

-- | <i>See:</i> <a>newExecuteCommandResponse</a> smart constructor.
data ExecuteCommandResponse
ExecuteCommandResponse' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Session -> Int -> ExecuteCommandResponse

-- | Create a value of <a>ExecuteCommandResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clusterArn:ExecuteCommandResponse'</a>,
--   <a>executeCommandResponse_clusterArn</a> - The Amazon Resource Name
--   (ARN) of the cluster.
--   
--   <a>$sel:containerArn:ExecuteCommandResponse'</a>,
--   <a>executeCommandResponse_containerArn</a> - The Amazon Resource Name
--   (ARN) of the container.
--   
--   <a>$sel:taskArn:ExecuteCommandResponse'</a>,
--   <a>executeCommandResponse_taskArn</a> - The Amazon Resource Name (ARN)
--   of the task.
--   
--   <a>$sel:containerName:ExecuteCommandResponse'</a>,
--   <a>executeCommandResponse_containerName</a> - The name of the
--   container.
--   
--   <a>$sel:interactive:ExecuteCommand'</a>,
--   <a>executeCommandResponse_interactive</a> - Whether or not the execute
--   command session is running in interactive mode. Amazon ECS only
--   supports initiating interactive sessions, so you must specify
--   <tt>true</tt> for this value.
--   
--   <a>$sel:session:ExecuteCommandResponse'</a>,
--   <a>executeCommandResponse_session</a> - The details of the SSM session
--   that was created for this instance of execute-command.
--   
--   <a>$sel:httpStatus:ExecuteCommandResponse'</a>,
--   <a>executeCommandResponse_httpStatus</a> - The response's http status
--   code.
newExecuteCommandResponse :: Int -> ExecuteCommandResponse

-- | <i>See:</i> <a>newDeregisterTaskDefinition</a> smart constructor.
data DeregisterTaskDefinition
DeregisterTaskDefinition' :: Text -> DeregisterTaskDefinition

-- | Create a value of <a>DeregisterTaskDefinition</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskDefinition:DeregisterTaskDefinition'</a>,
--   <a>deregisterTaskDefinition_taskDefinition</a> - The <tt>family</tt>
--   and <tt>revision</tt> (<tt>family:revision</tt>) or full Amazon
--   Resource Name (ARN) of the task definition to deregister. You must
--   specify a <tt>revision</tt>.
newDeregisterTaskDefinition :: Text -> DeregisterTaskDefinition

-- | <i>See:</i> <a>newDeregisterTaskDefinitionResponse</a> smart
--   constructor.
data DeregisterTaskDefinitionResponse
DeregisterTaskDefinitionResponse' :: Maybe TaskDefinition -> Int -> DeregisterTaskDefinitionResponse

-- | Create a value of <a>DeregisterTaskDefinitionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskDefinition:DeregisterTaskDefinition'</a>,
--   <a>deregisterTaskDefinitionResponse_taskDefinition</a> - The full
--   description of the deregistered task.
--   
--   <a>$sel:httpStatus:DeregisterTaskDefinitionResponse'</a>,
--   <a>deregisterTaskDefinitionResponse_httpStatus</a> - The response's
--   http status code.
newDeregisterTaskDefinitionResponse :: Int -> DeregisterTaskDefinitionResponse

-- | <i>See:</i> <a>newTagResource</a> smart constructor.
data TagResource
TagResource' :: Text -> [Tag] -> TagResource

-- | Create a value of <a>TagResource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:TagResource'</a>, <a>tagResource_resourceArn</a> -
--   The Amazon Resource Name (ARN) of the resource to which to add tags.
--   Currently, the supported resources are Amazon ECS capacity providers,
--   tasks, services, task definitions, clusters, and container instances.
--   
--   <a>$sel:tags:TagResource'</a>, <a>tagResource_tags</a> - The tags to
--   add to the resource. A tag is an array of key-value pairs.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newTagResource :: Text -> TagResource

-- | <i>See:</i> <a>newTagResourceResponse</a> smart constructor.
data TagResourceResponse
TagResourceResponse' :: Int -> TagResourceResponse

-- | Create a value of <a>TagResourceResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:TagResourceResponse'</a>,
--   <a>tagResourceResponse_httpStatus</a> - The response's http status
--   code.
newTagResourceResponse :: Int -> TagResourceResponse

-- | <i>See:</i> <a>newCreateTaskSet</a> smart constructor.
data CreateTaskSet
CreateTaskSet' :: Maybe Text -> Maybe Text -> Maybe Scale -> Maybe [LoadBalancer] -> Maybe LaunchType -> Maybe Text -> Maybe NetworkConfiguration -> Maybe [ServiceRegistry] -> Maybe [CapacityProviderStrategyItem] -> Maybe [Tag] -> Text -> Text -> Text -> CreateTaskSet

-- | Create a value of <a>CreateTaskSet</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clientToken:CreateTaskSet'</a>,
--   <a>createTaskSet_clientToken</a> - Unique, case-sensitive identifier
--   that you provide to ensure the idempotency of the request. Up to 32
--   ASCII characters are allowed.
--   
--   <a>$sel:platformVersion:CreateTaskSet'</a>,
--   <a>createTaskSet_platformVersion</a> - The platform version that the
--   tasks in the task set should use. A platform version is specified only
--   for tasks using the Fargate launch type. If one isn't specified, the
--   <tt>LATEST</tt> platform version is used by default.
--   
--   <a>$sel:scale:CreateTaskSet'</a>, <a>createTaskSet_scale</a> - A
--   floating-point percentage of the desired number of tasks to place and
--   keep running in the task set.
--   
--   <a>$sel:loadBalancers:CreateTaskSet'</a>,
--   <a>createTaskSet_loadBalancers</a> - A load balancer object
--   representing the load balancer to use with the task set. The supported
--   load balancer types are either an Application Load Balancer or a
--   Network Load Balancer.
--   
--   <a>$sel:launchType:CreateTaskSet'</a>, <a>createTaskSet_launchType</a>
--   - The launch type that new tasks in the task set will use. For more
--   information, see <a>Amazon ECS Launch Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
--   
--   <a>$sel:externalId:CreateTaskSet'</a>, <a>createTaskSet_externalId</a>
--   - An optional non-unique tag that identifies this task set in external
--   systems. If the task set is associated with a service discovery
--   registry, the tasks in this task set will have the
--   <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute set to the
--   provided value.
--   
--   <a>$sel:networkConfiguration:CreateTaskSet'</a>,
--   <a>createTaskSet_networkConfiguration</a> - An object representing the
--   network configuration for a task set.
--   
--   <a>$sel:serviceRegistries:CreateTaskSet'</a>,
--   <a>createTaskSet_serviceRegistries</a> - The details of the service
--   discovery registries to assign to this task set. For more information,
--   see <a>Service Discovery</a>.
--   
--   <a>$sel:capacityProviderStrategy:CreateTaskSet'</a>,
--   <a>createTaskSet_capacityProviderStrategy</a> - The capacity provider
--   strategy to use for the task set.
--   
--   A capacity provider strategy consists of one or more capacity
--   providers along with the <tt>base</tt> and <tt>weight</tt> to assign
--   to them. A capacity provider must be associated with the cluster to be
--   used in a capacity provider strategy. The PutClusterCapacityProviders
--   API is used to associate a capacity provider with a cluster. Only
--   capacity providers with an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status
--   can be used.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New capacity providers can
--   be created with the CreateCapacityProvider API operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used.
--   
--   The PutClusterCapacityProviders API operation is used to update the
--   list of available capacity providers for a cluster after the cluster
--   is created.
--   
--   <a>$sel:tags:CreateTaskSet'</a>, <a>createTaskSet_tags</a> - The
--   metadata that you apply to the task set to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. When a service is deleted, the tags are deleted
--   as well.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:service:CreateTaskSet'</a>, <a>createTaskSet_service</a> - The
--   short name or full Amazon Resource Name (ARN) of the service to create
--   the task set in.
--   
--   <a>$sel:cluster:CreateTaskSet'</a>, <a>createTaskSet_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service to create the task set in.
--   
--   <a>$sel:taskDefinition:CreateTaskSet'</a>,
--   <a>createTaskSet_taskDefinition</a> - The task definition for the
--   tasks in the task set to use.
newCreateTaskSet :: Text -> Text -> Text -> CreateTaskSet

-- | <i>See:</i> <a>newCreateTaskSetResponse</a> smart constructor.
data CreateTaskSetResponse
CreateTaskSetResponse' :: Maybe TaskSet -> Int -> CreateTaskSetResponse

-- | Create a value of <a>CreateTaskSetResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSet:CreateTaskSetResponse'</a>,
--   <a>createTaskSetResponse_taskSet</a> - Information about a set of
--   Amazon ECS tasks in either an CodeDeploy or an <tt>EXTERNAL</tt>
--   deployment. A task set includes details such as the desired number of
--   tasks, how many tasks are running, and whether the task set serves
--   production traffic.
--   
--   <a>$sel:httpStatus:CreateTaskSetResponse'</a>,
--   <a>createTaskSetResponse_httpStatus</a> - The response's http status
--   code.
newCreateTaskSetResponse :: Int -> CreateTaskSetResponse

-- | <i>See:</i> <a>newDescribeTasks</a> smart constructor.
data DescribeTasks
DescribeTasks' :: Maybe [TaskField] -> Maybe Text -> [Text] -> DescribeTasks

-- | Create a value of <a>DescribeTasks</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:include:DescribeTasks'</a>, <a>describeTasks_include</a> -
--   Specifies whether you want to see the resource tags for the task. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
--   
--   <a>$sel:cluster:DescribeTasks'</a>, <a>describeTasks_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the task or tasks to describe. If you do not specify a cluster,
--   the default cluster is assumed. This parameter is required if the task
--   or tasks you are describing were launched in any cluster other than
--   the default cluster.
--   
--   <a>$sel:tasks:DescribeTasks'</a>, <a>describeTasks_tasks</a> - A list
--   of up to 100 task IDs or full ARN entries.
newDescribeTasks :: DescribeTasks

-- | <i>See:</i> <a>newDescribeTasksResponse</a> smart constructor.
data DescribeTasksResponse
DescribeTasksResponse' :: Maybe [Failure] -> Maybe [Task] -> Int -> DescribeTasksResponse

-- | Create a value of <a>DescribeTasksResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:DescribeTasksResponse'</a>,
--   <a>describeTasksResponse_failures</a> - Any failures associated with
--   the call.
--   
--   <a>$sel:tasks:DescribeTasks'</a>, <a>describeTasksResponse_tasks</a> -
--   The list of tasks.
--   
--   <a>$sel:httpStatus:DescribeTasksResponse'</a>,
--   <a>describeTasksResponse_httpStatus</a> - The response's http status
--   code.
newDescribeTasksResponse :: Int -> DescribeTasksResponse

-- | <i>See:</i> <a>newListClusters</a> smart constructor.
data ListClusters
ListClusters' :: Maybe Text -> Maybe Int -> ListClusters

-- | Create a value of <a>ListClusters</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:nextToken:ListClusters'</a>, <a>listClusters_nextToken</a> -
--   The <tt>nextToken</tt> value returned from a <tt>ListClusters</tt>
--   request indicating that more results are available to fulfill the
--   request and further calls will be needed. If <tt>maxResults</tt> was
--   provided, it is possible the number of results to be fewer than
--   <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:maxResults:ListClusters'</a>, <a>listClusters_maxResults</a> -
--   The maximum number of cluster results returned by
--   <tt>ListClusters</tt> in paginated output. When this parameter is
--   used, <tt>ListClusters</tt> only returns <tt>maxResults</tt> results
--   in a single page along with a <tt>nextToken</tt> response element. The
--   remaining results of the initial request can be seen by sending
--   another <tt>ListClusters</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 100. If this
--   parameter is not used, then <tt>ListClusters</tt> returns up to 100
--   results and a <tt>nextToken</tt> value if applicable.
newListClusters :: ListClusters

-- | <i>See:</i> <a>newListClustersResponse</a> smart constructor.
data ListClustersResponse
ListClustersResponse' :: Maybe [Text] -> Maybe Text -> Int -> ListClustersResponse

-- | Create a value of <a>ListClustersResponse</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:clusterArns:ListClustersResponse'</a>,
--   <a>listClustersResponse_clusterArns</a> - The list of full Amazon
--   Resource Name (ARN) entries for each cluster associated with your
--   account.
--   
--   <a>$sel:nextToken:ListClusters'</a>,
--   <a>listClustersResponse_nextToken</a> - The <tt>nextToken</tt> value
--   to include in a future <tt>ListClusters</tt> request. When the results
--   of a <tt>ListClusters</tt> request exceed <tt>maxResults</tt>, this
--   value can be used to retrieve the next page of results. This value is
--   <tt>null</tt> when there are no more results to return.
--   
--   <a>$sel:httpStatus:ListClustersResponse'</a>,
--   <a>listClustersResponse_httpStatus</a> - The response's http status
--   code.
newListClustersResponse :: Int -> ListClustersResponse

-- | <i>See:</i> <a>newUntagResource</a> smart constructor.
data UntagResource
UntagResource' :: Text -> [Text] -> UntagResource

-- | Create a value of <a>UntagResource</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:resourceArn:UntagResource'</a>,
--   <a>untagResource_resourceArn</a> - The Amazon Resource Name (ARN) of
--   the resource from which to delete tags. Currently, the supported
--   resources are Amazon ECS capacity providers, tasks, services, task
--   definitions, clusters, and container instances.
--   
--   <a>$sel:tagKeys:UntagResource'</a>, <a>untagResource_tagKeys</a> - The
--   keys of the tags to be removed.
newUntagResource :: Text -> UntagResource

-- | <i>See:</i> <a>newUntagResourceResponse</a> smart constructor.
data UntagResourceResponse
UntagResourceResponse' :: Int -> UntagResourceResponse

-- | Create a value of <a>UntagResourceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:httpStatus:UntagResourceResponse'</a>,
--   <a>untagResourceResponse_httpStatus</a> - The response's http status
--   code.
newUntagResourceResponse :: Int -> UntagResourceResponse

-- | <i>See:</i> <a>newDescribeServices</a> smart constructor.
data DescribeServices
DescribeServices' :: Maybe [ServiceField] -> Maybe Text -> [Text] -> DescribeServices

-- | Create a value of <a>DescribeServices</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:include:DescribeServices'</a>, <a>describeServices_include</a>
--   - Specifies whether you want to see the resource tags for the service.
--   If <tt>TAGS</tt> is specified, the tags are included in the response.
--   If this field is omitted, tags are not included in the response.
--   
--   <a>$sel:cluster:DescribeServices'</a>, <a>describeServices_cluster</a>
--   - The short name or full Amazon Resource Name (ARN)the cluster that
--   hosts the service to describe. If you do not specify a cluster, the
--   default cluster is assumed. This parameter is required if the service
--   or services you are describing were launched in any cluster other than
--   the default cluster.
--   
--   <a>$sel:services:DescribeServices'</a>,
--   <a>describeServices_services</a> - A list of services to describe. You
--   may specify up to 10 services to describe in a single operation.
newDescribeServices :: DescribeServices

-- | <i>See:</i> <a>newDescribeServicesResponse</a> smart constructor.
data DescribeServicesResponse
DescribeServicesResponse' :: Maybe [Failure] -> Maybe [ContainerService] -> Int -> DescribeServicesResponse

-- | Create a value of <a>DescribeServicesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:failures:DescribeServicesResponse'</a>,
--   <a>describeServicesResponse_failures</a> - Any failures associated
--   with the call.
--   
--   <a>$sel:services:DescribeServices'</a>,
--   <a>describeServicesResponse_services</a> - The list of services
--   described.
--   
--   <a>$sel:httpStatus:DescribeServicesResponse'</a>,
--   <a>describeServicesResponse_httpStatus</a> - The response's http
--   status code.
newDescribeServicesResponse :: Int -> DescribeServicesResponse

-- | <i>See:</i> <a>newDeregisterContainerInstance</a> smart constructor.
data DeregisterContainerInstance
DeregisterContainerInstance' :: Maybe Text -> Maybe Bool -> Text -> DeregisterContainerInstance

-- | Create a value of <a>DeregisterContainerInstance</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:DeregisterContainerInstance'</a>,
--   <a>deregisterContainerInstance_cluster</a> - The short name or full
--   Amazon Resource Name (ARN) of the cluster that hosts the container
--   instance to deregister. If you do not specify a cluster, the default
--   cluster is assumed.
--   
--   <a>$sel:force:DeregisterContainerInstance'</a>,
--   <a>deregisterContainerInstance_force</a> - Forces the deregistration
--   of the container instance. If you have tasks running on the container
--   instance when you deregister it with the <tt>force</tt> option, these
--   tasks remain running until you terminate the instance or the tasks
--   stop through some other means, but they are orphaned (no longer
--   monitored or accounted for by Amazon ECS). If an orphaned task on your
--   container instance is part of an Amazon ECS service, then the service
--   scheduler starts another copy of that task, on a different container
--   instance if possible.
--   
--   Any containers in orphaned service tasks that are registered with a
--   Classic Load Balancer or an Application Load Balancer target group are
--   deregistered. They begin connection draining according to the settings
--   on the load balancer or target group.
--   
--   <a>$sel:containerInstance:DeregisterContainerInstance'</a>,
--   <a>deregisterContainerInstance_containerInstance</a> - The container
--   instance ID or full ARN of the container instance to deregister. The
--   ARN contains the <tt>arn:aws:ecs</tt> namespace, followed by the
--   Region of the container instance, the Amazon Web Services account ID
--   of the container instance owner, the <tt>container-instance</tt>
--   namespace, and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
newDeregisterContainerInstance :: Text -> DeregisterContainerInstance

-- | <i>See:</i> <a>newDeregisterContainerInstanceResponse</a> smart
--   constructor.
data DeregisterContainerInstanceResponse
DeregisterContainerInstanceResponse' :: Maybe ContainerInstance -> Int -> DeregisterContainerInstanceResponse

-- | Create a value of <a>DeregisterContainerInstanceResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerInstance:DeregisterContainerInstance'</a>,
--   <a>deregisterContainerInstanceResponse_containerInstance</a> - The
--   container instance that was deregistered.
--   
--   <a>$sel:httpStatus:DeregisterContainerInstanceResponse'</a>,
--   <a>deregisterContainerInstanceResponse_httpStatus</a> - The response's
--   http status code.
newDeregisterContainerInstanceResponse :: Int -> DeregisterContainerInstanceResponse

-- | <i>See:</i> <a>newUpdateClusterSettings</a> smart constructor.
data UpdateClusterSettings
UpdateClusterSettings' :: Text -> [ClusterSetting] -> UpdateClusterSettings

-- | Create a value of <a>UpdateClusterSettings</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateClusterSettings'</a>,
--   <a>updateClusterSettings_cluster</a> - The name of the cluster to
--   modify the settings for.
--   
--   <a>$sel:settings:UpdateClusterSettings'</a>,
--   <a>updateClusterSettings_settings</a> - The setting to use by default
--   for a cluster. This parameter is used to enable CloudWatch Container
--   Insights for a cluster. If this value is specified, it will override
--   the <tt>containerInsights</tt> value set with PutAccountSetting or
--   PutAccountSettingDefault.
newUpdateClusterSettings :: Text -> UpdateClusterSettings

-- | <i>See:</i> <a>newUpdateClusterSettingsResponse</a> smart constructor.
data UpdateClusterSettingsResponse
UpdateClusterSettingsResponse' :: Maybe Cluster -> Int -> UpdateClusterSettingsResponse

-- | Create a value of <a>UpdateClusterSettingsResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateClusterSettings'</a>,
--   <a>updateClusterSettingsResponse_cluster</a> - Details about the
--   cluster
--   
--   <a>$sel:httpStatus:UpdateClusterSettingsResponse'</a>,
--   <a>updateClusterSettingsResponse_httpStatus</a> - The response's http
--   status code.
newUpdateClusterSettingsResponse :: Int -> UpdateClusterSettingsResponse

-- | <i>See:</i> <a>newDeleteAttributes</a> smart constructor.
data DeleteAttributes
DeleteAttributes' :: Maybe Text -> [Attribute] -> DeleteAttributes

-- | Create a value of <a>DeleteAttributes</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:DeleteAttributes'</a>, <a>deleteAttributes_cluster</a>
--   - The short name or full Amazon Resource Name (ARN) of the cluster
--   that contains the resource to delete attributes. If you do not specify
--   a cluster, the default cluster is assumed.
--   
--   <a>$sel:attributes:DeleteAttributes'</a>,
--   <a>deleteAttributes_attributes</a> - The attributes to delete from
--   your resource. You can specify up to 10 attributes per request. For
--   custom attributes, specify the attribute name and target ID, but do
--   not specify the value. If you specify the target ID using the short
--   form, you must also specify the target type.
newDeleteAttributes :: DeleteAttributes

-- | <i>See:</i> <a>newDeleteAttributesResponse</a> smart constructor.
data DeleteAttributesResponse
DeleteAttributesResponse' :: Maybe [Attribute] -> Int -> DeleteAttributesResponse

-- | Create a value of <a>DeleteAttributesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributes:DeleteAttributes'</a>,
--   <a>deleteAttributesResponse_attributes</a> - A list of attribute
--   objects that were successfully deleted from your resource.
--   
--   <a>$sel:httpStatus:DeleteAttributesResponse'</a>,
--   <a>deleteAttributesResponse_httpStatus</a> - The response's http
--   status code.
newDeleteAttributesResponse :: Int -> DeleteAttributesResponse

-- | <i>See:</i> <a>newPutAttributes</a> smart constructor.
data PutAttributes
PutAttributes' :: Maybe Text -> [Attribute] -> PutAttributes

-- | Create a value of <a>PutAttributes</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:PutAttributes'</a>, <a>putAttributes_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that
--   contains the resource to apply attributes. If you do not specify a
--   cluster, the default cluster is assumed.
--   
--   <a>$sel:attributes:PutAttributes'</a>, <a>putAttributes_attributes</a>
--   - The attributes to apply to your resource. You can specify up to 10
--   custom attributes per resource. You can specify up to 10 attributes in
--   a single call.
newPutAttributes :: PutAttributes

-- | <i>See:</i> <a>newPutAttributesResponse</a> smart constructor.
data PutAttributesResponse
PutAttributesResponse' :: Maybe [Attribute] -> Int -> PutAttributesResponse

-- | Create a value of <a>PutAttributesResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attributes:PutAttributes'</a>,
--   <a>putAttributesResponse_attributes</a> - The attributes applied to
--   your resource.
--   
--   <a>$sel:httpStatus:PutAttributesResponse'</a>,
--   <a>putAttributesResponse_httpStatus</a> - The response's http status
--   code.
newPutAttributesResponse :: Int -> PutAttributesResponse

-- | <i>See:</i> <a>newListAccountSettings</a> smart constructor.
data ListAccountSettings
ListAccountSettings' :: Maybe Text -> Maybe Text -> Maybe SettingName -> Maybe Text -> Maybe Bool -> Maybe Int -> ListAccountSettings

-- | Create a value of <a>ListAccountSettings</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:ListAccountSettings'</a>,
--   <a>listAccountSettings_value</a> - The value of the account settings
--   with which to filter results. You must also specify an account setting
--   name to use this parameter.
--   
--   <a>$sel:nextToken:ListAccountSettings'</a>,
--   <a>listAccountSettings_nextToken</a> - The <tt>nextToken</tt> value
--   returned from a <tt>ListAccountSettings</tt> request indicating that
--   more results are available to fulfill the request and further calls
--   will be needed. If <tt>maxResults</tt> was provided, it is possible
--   the number of results to be fewer than <tt>maxResults</tt>.
--   
--   This token should be treated as an opaque identifier that is only used
--   to retrieve the next items in a list and not for other programmatic
--   purposes.
--   
--   <a>$sel:name:ListAccountSettings'</a>, <a>listAccountSettings_name</a>
--   - The name of the account setting you want to list the settings for.
--   
--   <a>$sel:principalArn:ListAccountSettings'</a>,
--   <a>listAccountSettings_principalArn</a> - The ARN of the principal,
--   which can be an IAM user, IAM role, or the root user. If this field is
--   omitted, the account settings are listed only for the authenticated
--   user.
--   
--   Federated users assume the account setting of the root user and can't
--   have explicit account settings set for them.
--   
--   <a>$sel:effectiveSettings:ListAccountSettings'</a>,
--   <a>listAccountSettings_effectiveSettings</a> - Specifies whether to
--   return the effective settings. If <tt>true</tt>, the account settings
--   for the root user or the default setting for the <tt>principalArn</tt>
--   are returned. If <tt>false</tt>, the account settings for the
--   <tt>principalArn</tt> are returned if they are set. Otherwise, no
--   account settings are returned.
--   
--   <a>$sel:maxResults:ListAccountSettings'</a>,
--   <a>listAccountSettings_maxResults</a> - The maximum number of account
--   setting results returned by <tt>ListAccountSettings</tt> in paginated
--   output. When this parameter is used, <tt>ListAccountSettings</tt> only
--   returns <tt>maxResults</tt> results in a single page along with a
--   <tt>nextToken</tt> response element. The remaining results of the
--   initial request can be seen by sending another
--   <tt>ListAccountSettings</tt> request with the returned
--   <tt>nextToken</tt> value. This value can be between 1 and 10. If this
--   parameter is not used, then <tt>ListAccountSettings</tt> returns up to
--   10 results and a <tt>nextToken</tt> value if applicable.
newListAccountSettings :: ListAccountSettings

-- | <i>See:</i> <a>newListAccountSettingsResponse</a> smart constructor.
data ListAccountSettingsResponse
ListAccountSettingsResponse' :: Maybe [Setting] -> Maybe Text -> Int -> ListAccountSettingsResponse

-- | Create a value of <a>ListAccountSettingsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:settings:ListAccountSettingsResponse'</a>,
--   <a>listAccountSettingsResponse_settings</a> - The account settings for
--   the resource.
--   
--   <a>$sel:nextToken:ListAccountSettings'</a>,
--   <a>listAccountSettingsResponse_nextToken</a> - The <tt>nextToken</tt>
--   value to include in a future <tt>ListAccountSettings</tt> request.
--   When the results of a <tt>ListAccountSettings</tt> request exceed
--   <tt>maxResults</tt>, this value can be used to retrieve the next page
--   of results. This value is <tt>null</tt> when there are no more results
--   to return.
--   
--   <a>$sel:httpStatus:ListAccountSettingsResponse'</a>,
--   <a>listAccountSettingsResponse_httpStatus</a> - The response's http
--   status code.
newListAccountSettingsResponse :: Int -> ListAccountSettingsResponse

-- | <i>See:</i> <a>newDeleteTaskSet</a> smart constructor.
data DeleteTaskSet
DeleteTaskSet' :: Maybe Bool -> Text -> Text -> Text -> DeleteTaskSet

-- | Create a value of <a>DeleteTaskSet</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:force:DeleteTaskSet'</a>, <a>deleteTaskSet_force</a> - If
--   <tt>true</tt>, this allows you to delete a task set even if it hasn't
--   been scaled down to zero.
--   
--   <a>$sel:cluster:DeleteTaskSet'</a>, <a>deleteTaskSet_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in to delete.
--   
--   <a>$sel:service:DeleteTaskSet'</a>, <a>deleteTaskSet_service</a> - The
--   short name or full Amazon Resource Name (ARN) of the service that
--   hosts the task set to delete.
--   
--   <a>$sel:taskSet:DeleteTaskSet'</a>, <a>deleteTaskSet_taskSet</a> - The
--   task set ID or full Amazon Resource Name (ARN) of the task set to
--   delete.
newDeleteTaskSet :: Text -> Text -> Text -> DeleteTaskSet

-- | <i>See:</i> <a>newDeleteTaskSetResponse</a> smart constructor.
data DeleteTaskSetResponse
DeleteTaskSetResponse' :: Maybe TaskSet -> Int -> DeleteTaskSetResponse

-- | Create a value of <a>DeleteTaskSetResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSet:DeleteTaskSet'</a>,
--   <a>deleteTaskSetResponse_taskSet</a> - Details about the task set.
--   
--   <a>$sel:httpStatus:DeleteTaskSetResponse'</a>,
--   <a>deleteTaskSetResponse_httpStatus</a> - The response's http status
--   code.
newDeleteTaskSetResponse :: Int -> DeleteTaskSetResponse

-- | <i>See:</i> <a>newUpdateTaskSet</a> smart constructor.
data UpdateTaskSet
UpdateTaskSet' :: Text -> Text -> Text -> Scale -> UpdateTaskSet

-- | Create a value of <a>UpdateTaskSet</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:UpdateTaskSet'</a>, <a>updateTaskSet_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster that
--   hosts the service that the task set exists in.
--   
--   <a>$sel:service:UpdateTaskSet'</a>, <a>updateTaskSet_service</a> - The
--   short name or full Amazon Resource Name (ARN) of the service that the
--   task set exists in.
--   
--   <a>$sel:taskSet:UpdateTaskSet'</a>, <a>updateTaskSet_taskSet</a> - The
--   short name or full Amazon Resource Name (ARN) of the task set to
--   update.
--   
--   <a>$sel:scale:UpdateTaskSet'</a>, <a>updateTaskSet_scale</a> - A
--   floating-point percentage of the desired number of tasks to place and
--   keep running in the task set.
newUpdateTaskSet :: Text -> Text -> Text -> Scale -> UpdateTaskSet

-- | <i>See:</i> <a>newUpdateTaskSetResponse</a> smart constructor.
data UpdateTaskSetResponse
UpdateTaskSetResponse' :: Maybe TaskSet -> Int -> UpdateTaskSetResponse

-- | Create a value of <a>UpdateTaskSetResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSet:UpdateTaskSet'</a>,
--   <a>updateTaskSetResponse_taskSet</a> - Details about the task set.
--   
--   <a>$sel:httpStatus:UpdateTaskSetResponse'</a>,
--   <a>updateTaskSetResponse_httpStatus</a> - The response's http status
--   code.
newUpdateTaskSetResponse :: Int -> UpdateTaskSetResponse

-- | <i>See:</i> <a>newCreateCapacityProvider</a> smart constructor.
data CreateCapacityProvider
CreateCapacityProvider' :: Maybe [Tag] -> Text -> AutoScalingGroupProvider -> CreateCapacityProvider

-- | Create a value of <a>CreateCapacityProvider</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:tags:CreateCapacityProvider'</a>,
--   <a>createCapacityProvider_tags</a> - The metadata that you apply to
--   the capacity provider to help you categorize and organize them. Each
--   tag consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:name:CreateCapacityProvider'</a>,
--   <a>createCapacityProvider_name</a> - The name of the capacity
--   provider. Up to 255 characters are allowed, including letters (upper
--   and lowercase), numbers, underscores, and hyphens. The name cannot be
--   prefixed with "<tt>aws</tt>", "<tt>ecs</tt>", or "<tt>fargate</tt>".
--   
--   <a>$sel:autoScalingGroupProvider:CreateCapacityProvider'</a>,
--   <a>createCapacityProvider_autoScalingGroupProvider</a> - The details
--   of the Auto Scaling group for the capacity provider.
newCreateCapacityProvider :: Text -> AutoScalingGroupProvider -> CreateCapacityProvider

-- | <i>See:</i> <a>newCreateCapacityProviderResponse</a> smart
--   constructor.
data CreateCapacityProviderResponse
CreateCapacityProviderResponse' :: Maybe CapacityProvider -> Int -> CreateCapacityProviderResponse

-- | Create a value of <a>CreateCapacityProviderResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:capacityProvider:CreateCapacityProviderResponse'</a>,
--   <a>createCapacityProviderResponse_capacityProvider</a> - The full
--   description of the new capacity provider.
--   
--   <a>$sel:httpStatus:CreateCapacityProviderResponse'</a>,
--   <a>createCapacityProviderResponse_httpStatus</a> - The response's http
--   status code.
newCreateCapacityProviderResponse :: Int -> CreateCapacityProviderResponse

-- | <i>See:</i> <a>newDescribeTaskSets</a> smart constructor.
data DescribeTaskSets
DescribeTaskSets' :: Maybe [Text] -> Maybe [TaskSetField] -> Text -> Text -> DescribeTaskSets

-- | Create a value of <a>DescribeTaskSets</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSets:DescribeTaskSets'</a>,
--   <a>describeTaskSets_taskSets</a> - The ID or full Amazon Resource Name
--   (ARN) of task sets to describe.
--   
--   <a>$sel:include:DescribeTaskSets'</a>, <a>describeTaskSets_include</a>
--   - Specifies whether to see the resource tags for the task set. If
--   <tt>TAGS</tt> is specified, the tags are included in the response. If
--   this field is omitted, tags are not included in the response.
--   
--   <a>$sel:cluster:DescribeTaskSets'</a>, <a>describeTaskSets_cluster</a>
--   - The short name or full Amazon Resource Name (ARN) of the cluster
--   that hosts the service that the task sets exist in.
--   
--   <a>$sel:service:DescribeTaskSets'</a>, <a>describeTaskSets_service</a>
--   - The short name or full Amazon Resource Name (ARN) of the service
--   that the task sets exist in.
newDescribeTaskSets :: Text -> Text -> DescribeTaskSets

-- | <i>See:</i> <a>newDescribeTaskSetsResponse</a> smart constructor.
data DescribeTaskSetsResponse
DescribeTaskSetsResponse' :: Maybe [TaskSet] -> Maybe [Failure] -> Int -> DescribeTaskSetsResponse

-- | Create a value of <a>DescribeTaskSetsResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSets:DescribeTaskSets'</a>,
--   <a>describeTaskSetsResponse_taskSets</a> - The list of task sets
--   described.
--   
--   <a>$sel:failures:DescribeTaskSetsResponse'</a>,
--   <a>describeTaskSetsResponse_failures</a> - Any failures associated
--   with the call.
--   
--   <a>$sel:httpStatus:DescribeTaskSetsResponse'</a>,
--   <a>describeTaskSetsResponse_httpStatus</a> - The response's http
--   status code.
newDescribeTaskSetsResponse :: Int -> DescribeTaskSetsResponse

-- | <i>See:</i> <a>newRegisterTaskDefinition</a> smart constructor.
data RegisterTaskDefinition
RegisterTaskDefinition' :: Maybe [InferenceAccelerator] -> Maybe Text -> Maybe [Compatibility] -> Maybe EphemeralStorage -> Maybe PidMode -> Maybe IpcMode -> Maybe Text -> Maybe ProxyConfiguration -> Maybe Text -> Maybe [TaskDefinitionPlacementConstraint] -> Maybe NetworkMode -> Maybe [Volume] -> Maybe Text -> Maybe [Tag] -> Text -> [ContainerDefinition] -> RegisterTaskDefinition

-- | Create a value of <a>RegisterTaskDefinition</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:inferenceAccelerators:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_inferenceAccelerators</a> - The Elastic
--   Inference accelerators to use for the containers in the task.
--   
--   <a>$sel:executionRoleArn:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_executionRoleArn</a> - The Amazon Resource
--   Name (ARN) of the task execution role that grants the Amazon ECS
--   container agent permission to make Amazon Web Services API calls on
--   your behalf. The task execution IAM role is required depending on the
--   requirements of your task. For more information, see <a>Amazon ECS
--   task execution IAM role</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <a>$sel:requiresCompatibilities:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_requiresCompatibilities</a> - The task
--   launch type that Amazon ECS should validate the task definition
--   against. A client exception is returned if the task definition doesn't
--   validate against the compatibilities specified. If no value is
--   specified, the parameter is omitted from the response.
--   
--   <a>$sel:ephemeralStorage:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_ephemeralStorage</a> - The amount of
--   ephemeral storage to allocate for the task. This parameter is used to
--   expand the total amount of ephemeral storage available, beyond the
--   default amount, for tasks hosted on Fargate. For more information, see
--   <a>Fargate task storage</a> in the <i>Amazon ECS User Guide for
--   Fargate</i>.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
--   
--   <a>$sel:pidMode:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_pidMode</a> - The process namespace to use
--   for the containers in the task. The valid values are <tt>host</tt> or
--   <tt>task</tt>. If <tt>host</tt> is specified, then all containers
--   within the tasks that specified the <tt>host</tt> PID mode on the same
--   container instance share the same process namespace with the host
--   Amazon EC2 instance. If <tt>task</tt> is specified, all containers
--   within the specified task share the same process namespace. If no
--   value is specified, the default is a private namespace. For more
--   information, see <a>PID settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:ipcMode:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_ipcMode</a> - The IPC resource namespace to
--   use for the containers in the task. The valid values are
--   <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> IPC mode on the same container instance share the same
--   IPC resources with the host Amazon EC2 instance. If <tt>task</tt> is
--   specified, all containers within the specified task share the same IPC
--   resources. If <tt>none</tt> is specified, then IPC resources within
--   the containers of a task are private and not shared with other
--   containers in a task or on the container instance. If no value is
--   specified, then the IPC resource namespace sharing depends on the
--   Docker daemon setting on the container instance. For more information,
--   see <a>IPC settings</a> in the <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:memory:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_memory</a> - The amount of memory (in MiB)
--   used by the task. It can be expressed as an integer using MiB, for
--   example <tt>1024</tt>, or as a string using GB, for example
--   <tt>1GB</tt> or <tt>1 GB</tt>, in a task definition. String values are
--   converted to an integer indicating the MiB when the task definition is
--   registered.
--   
--   Task-level CPU and memory parameters are ignored for Windows
--   containers. We recommend specifying container-level resources for
--   Windows containers.
--   
--   If using the EC2 launch type, this field is optional.
--   
--   If using the Fargate launch type, this field is required and you must
--   use one of the following values, which determines your range of
--   supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
--   
--   <a>$sel:proxyConfiguration:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_proxyConfiguration</a> - The configuration
--   details for the App Mesh proxy.
--   
--   For tasks hosted on Amazon EC2 instances, the container instances
--   require at least version <tt>1.26.0</tt> of the container agent and at
--   least version <tt>1.26.0-1</tt> of the <tt>ecs-init</tt> package to
--   enable a proxy configuration. If your container instances are launched
--   from the Amazon ECS-optimized AMI version <tt>20190301</tt> or later,
--   then they contain the required versions of the container agent and
--   <tt>ecs-init</tt>. For more information, see <a>Amazon ECS-optimized
--   AMI versions</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:taskRoleArn:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_taskRoleArn</a> - The short name or full
--   Amazon Resource Name (ARN) of the IAM role that containers in this
--   task can assume. All containers in this task are granted the
--   permissions that are specified in this role. For more information, see
--   <a>IAM Roles for Tasks</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <a>$sel:placementConstraints:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_placementConstraints</a> - An array of
--   placement constraint objects to use for the task. You can specify a
--   maximum of 10 constraints per task (this limit includes constraints in
--   the task definition and those specified at runtime).
--   
--   <a>$sel:networkMode:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_networkMode</a> - The Docker networking mode
--   to use for the containers in the task. The valid values are
--   <tt>none</tt>, <tt>bridge</tt>, <tt>awsvpc</tt>, and <tt>host</tt>. If
--   no network mode is specified, the default is <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
--   
--   <a>$sel:volumes:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_volumes</a> - A list of volume definitions
--   in JSON format that containers in your task may use.
--   
--   <a>$sel:cpu:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_cpu</a> - The number of CPU units used by
--   the task. It can be expressed as an integer using CPU units, for
--   example <tt>1024</tt>, or as a string using vCPUs, for example <tt>1
--   vCPU</tt> or <tt>1 vcpu</tt>, in a task definition. String values are
--   converted to an integer indicating the CPU units when the task
--   definition is registered.
--   
--   Task-level CPU and memory parameters are ignored for Windows
--   containers. We recommend specifying container-level resources for
--   Windows containers.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
--   
--   <a>$sel:tags:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_tags</a> - The metadata that you apply to
--   the task definition to help you categorize and organize them. Each tag
--   consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:family:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_family</a> - You must specify a
--   <tt>family</tt> for a task definition, which allows you to track
--   multiple versions of the same task definition. The <tt>family</tt> is
--   used as a name for your task definition. Up to 255 letters (uppercase
--   and lowercase), numbers, underscores, and hyphens are allowed.
--   
--   <a>$sel:containerDefinitions:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinition_containerDefinitions</a> - A list of
--   container definitions in JSON format that describe the different
--   containers that make up your task.
newRegisterTaskDefinition :: Text -> RegisterTaskDefinition

-- | <i>See:</i> <a>newRegisterTaskDefinitionResponse</a> smart
--   constructor.
data RegisterTaskDefinitionResponse
RegisterTaskDefinitionResponse' :: Maybe TaskDefinition -> Maybe [Tag] -> Int -> RegisterTaskDefinitionResponse

-- | Create a value of <a>RegisterTaskDefinitionResponse</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskDefinition:RegisterTaskDefinitionResponse'</a>,
--   <a>registerTaskDefinitionResponse_taskDefinition</a> - The full
--   description of the registered task definition.
--   
--   <a>$sel:tags:RegisterTaskDefinition'</a>,
--   <a>registerTaskDefinitionResponse_tags</a> - The list of tags
--   associated with the task definition.
--   
--   <a>$sel:httpStatus:RegisterTaskDefinitionResponse'</a>,
--   <a>registerTaskDefinitionResponse_httpStatus</a> - The response's http
--   status code.
newRegisterTaskDefinitionResponse :: Int -> RegisterTaskDefinitionResponse

-- | <i>See:</i> <a>newCreateService</a> smart constructor.
data CreateService
CreateService' :: Maybe Text -> Maybe Text -> Maybe PropagateTags -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe [LoadBalancer] -> Maybe Text -> Maybe [PlacementConstraint] -> Maybe [PlacementStrategy] -> Maybe DeploymentController -> Maybe LaunchType -> Maybe Text -> Maybe SchedulingStrategy -> Maybe Int -> Maybe NetworkConfiguration -> Maybe [ServiceRegistry] -> Maybe [CapacityProviderStrategyItem] -> Maybe Bool -> Maybe [Tag] -> Maybe DeploymentConfiguration -> Text -> CreateService

-- | Create a value of <a>CreateService</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cluster:CreateService'</a>, <a>createService_cluster</a> - The
--   short name or full Amazon Resource Name (ARN) of the cluster on which
--   to run your service. If you do not specify a cluster, the default
--   cluster is assumed.
--   
--   <a>$sel:clientToken:CreateService'</a>,
--   <a>createService_clientToken</a> - Unique, case-sensitive identifier
--   that you provide to ensure the idempotency of the request. Up to 32
--   ASCII characters are allowed.
--   
--   <a>$sel:propagateTags:CreateService'</a>,
--   <a>createService_propagateTags</a> - Specifies whether to propagate
--   the tags from the task definition or the service to the tasks in the
--   service. If no value is specified, the tags are not propagated. Tags
--   can only be propagated to the tasks within the service during service
--   creation. To add tags to a task after service creation or task
--   creation, use the TagResource API action.
--   
--   <a>$sel:platformVersion:CreateService'</a>,
--   <a>createService_platformVersion</a> - The platform version that your
--   tasks in the service are running on. A platform version is specified
--   only for tasks using the Fargate launch type. If one isn't specified,
--   the <tt>LATEST</tt> platform version is used by default. For more
--   information, see <a>Fargate platform versions</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:enableECSManagedTags:CreateService'</a>,
--   <a>createService_enableECSManagedTags</a> - Specifies whether to
--   enable Amazon ECS managed tags for the tasks within the service. For
--   more information, see <a>Tagging Your Amazon ECS Resources</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:desiredCount:CreateService'</a>,
--   <a>createService_desiredCount</a> - The number of instantiations of
--   the specified task definition to place and keep running on your
--   cluster.
--   
--   This is required if <tt>schedulingStrategy</tt> is <tt>REPLICA</tt> or
--   is not specified. If <tt>schedulingStrategy</tt> is <tt>DAEMON</tt>
--   then this is not required.
--   
--   <a>$sel:loadBalancers:CreateService'</a>,
--   <a>createService_loadBalancers</a> - A load balancer object
--   representing the load balancers to use with your service. For more
--   information, see <a>Service Load Balancing</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   If the service is using the rolling update (<tt>ECS</tt>) deployment
--   controller and using either an Application Load Balancer or Network
--   Load Balancer, you must specify one or more target group ARNs to
--   attach to the service. The service-linked role is required for
--   services that make use of multiple target groups. For more
--   information, see <a>Using service-linked roles for Amazon ECS</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the service is using the <tt>CODE_DEPLOY</tt> deployment
--   controller, the service is required to use either an Application Load
--   Balancer or Network Load Balancer. When creating an CodeDeploy
--   deployment group, you specify two target groups (referred to as a
--   <tt>targetGroupPair</tt>). During a deployment, CodeDeploy determines
--   which task set in your service has the status <tt>PRIMARY</tt> and
--   associates one target group with it, and then associates the other
--   target group with the replacement task set. The load balancer can also
--   have up to two listeners: a required listener for production traffic
--   and an optional listener that allows you perform validation tests with
--   Lambda functions before routing production traffic to it.
--   
--   After you create a service using the <tt>ECS</tt> deployment
--   controller, the load balancer name or target group ARN, container
--   name, and container port specified in the service definition are
--   immutable. If you are using the <tt>CODE_DEPLOY</tt> deployment
--   controller, these values can be changed when updating the service.
--   
--   For Application Load Balancers and Network Load Balancers, this object
--   must contain the load balancer target group ARN, the container name
--   (as it appears in a container definition), and the container port to
--   access from the load balancer. The load balancer name parameter must
--   be omitted. When a task from this service is placed on a container
--   instance, the container instance and port combination is registered as
--   a target in the target group specified here.
--   
--   For Classic Load Balancers, this object must contain the load balancer
--   name, the container name (as it appears in a container definition),
--   and the container port to access from the load balancer. The target
--   group ARN parameter must be omitted. When a task from this service is
--   placed on a container instance, the container instance is registered
--   with the load balancer specified here.
--   
--   Services with tasks that use the <tt>awsvpc</tt> network mode (for
--   example, those with the Fargate launch type) only support Application
--   Load Balancers and Network Load Balancers. Classic Load Balancers are
--   not supported. Also, when you create any target groups for these
--   services, you must choose <tt>ip</tt> as the target type, not
--   <tt>instance</tt>, because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
--   
--   <a>$sel:role':CreateService'</a>, <a>createService_role</a> - The name
--   or full Amazon Resource Name (ARN) of the IAM role that allows Amazon
--   ECS to make calls to your load balancer on your behalf. This parameter
--   is only permitted if you are using a load balancer with your service
--   and your task definition does not use the <tt>awsvpc</tt> network
--   mode. If you specify the <tt>role</tt> parameter, you must also
--   specify a load balancer object with the <tt>loadBalancers</tt>
--   parameter.
--   
--   If your account has already created the Amazon ECS service-linked
--   role, that role is used by default for your service unless you specify
--   a role here. The service-linked role is required if your task
--   definition uses the <tt>awsvpc</tt> network mode or if the service is
--   configured to use service discovery, an external deployment
--   controller, multiple target groups, or Elastic Inference accelerators
--   in which case you should not specify a role here. For more
--   information, see <a>Using service-linked roles for Amazon ECS</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your specified role has a path other than <tt>/</tt>, then you must
--   either specify the full role ARN (this is recommended) or prefix the
--   role name with the path. For example, if a role with the name
--   <tt>bar</tt> has a path of <tt>/foo/</tt> then you would specify
--   <tt>/foo/bar</tt> as the role name. For more information, see
--   <a>Friendly names and paths</a> in the <i>IAM User Guide</i>.
--   
--   <a>$sel:placementConstraints:CreateService'</a>,
--   <a>createService_placementConstraints</a> - An array of placement
--   constraint objects to use for tasks in your service. You can specify a
--   maximum of 10 constraints per task (this limit includes constraints in
--   the task definition and those specified at runtime).
--   
--   <a>$sel:placementStrategy:CreateService'</a>,
--   <a>createService_placementStrategy</a> - The placement strategy
--   objects to use for tasks in your service. You can specify a maximum of
--   5 strategy rules per service.
--   
--   <a>$sel:deploymentController:CreateService'</a>,
--   <a>createService_deploymentController</a> - The deployment controller
--   to use for the service. If no deployment controller is specified, the
--   default value of <tt>ECS</tt> is used.
--   
--   <a>$sel:launchType:CreateService'</a>, <a>createService_launchType</a>
--   - The infrastructure on which to run your service. For more
--   information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>FARGATE</tt> launch type runs your tasks on Fargate On-Demand
--   infrastructure.
--   
--   Fargate Spot infrastructure is available for use but a capacity
--   provider strategy must be used. For more information, see <a>Fargate
--   capacity providers</a> in the <i>Amazon ECS User Guide for
--   Fargate</i>.
--   
--   The <tt>EC2</tt> launch type runs your tasks on Amazon EC2 instances
--   registered to your cluster.
--   
--   The <tt>EXTERNAL</tt> launch type runs your tasks on your on-premise
--   server or virtual machine (VM) capacity registered to your cluster.
--   
--   A service can use either a launch type or a capacity provider
--   strategy. If a <tt>launchType</tt> is specified, the
--   <tt>capacityProviderStrategy</tt> parameter must be omitted.
--   
--   <a>$sel:taskDefinition:CreateService'</a>,
--   <a>createService_taskDefinition</a> - The <tt>family</tt> and
--   <tt>revision</tt> (<tt>family:revision</tt>) or full ARN of the task
--   definition to run in your service. If a <tt>revision</tt> is not
--   specified, the latest <tt>ACTIVE</tt> revision is used.
--   
--   A task definition must be specified if the service is using either the
--   <tt>ECS</tt> or <tt>CODE_DEPLOY</tt> deployment controllers.
--   
--   <a>$sel:schedulingStrategy:CreateService'</a>,
--   <a>createService_schedulingStrategy</a> - The scheduling strategy to
--   use for the service. For more information, see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions. This scheduler strategy is required if the
--   service is using the <tt>CODE_DEPLOY</tt> or <tt>EXTERNAL</tt>
--   deployment controller types.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement constraints.
--   When you're using this strategy, you don't need to specify a desired
--   number of tasks, a task placement strategy, or use Service Auto
--   Scaling policies.Tasks using the Fargate launch type or the
--   <tt>CODE_DEPLOY</tt> or <tt>EXTERNAL</tt> deployment controller types
--   don't support the <tt>DAEMON</tt> scheduling strategy.</li>
--   </ul>
--   
--   <a>$sel:healthCheckGracePeriodSeconds:CreateService'</a>,
--   <a>createService_healthCheckGracePeriodSeconds</a> - The period of
--   time, in seconds, that the Amazon ECS service scheduler should ignore
--   unhealthy Elastic Load Balancing target health checks after a task has
--   first started. This is only used when your service is configured to
--   use a load balancer. If your service has a load balancer defined and
--   you don't specify a health check grace period value, the default value
--   of <tt>0</tt> is used.
--   
--   If your service's tasks take a while to start and respond to Elastic
--   Load Balancing health checks, you can specify a health check grace
--   period of up to 2,147,483,647 seconds. During that time, the Amazon
--   ECS service scheduler ignores health check status. This grace period
--   can prevent the service scheduler from marking tasks as unhealthy and
--   stopping them before they have time to come up.
--   
--   <a>$sel:networkConfiguration:CreateService'</a>,
--   <a>createService_networkConfiguration</a> - The network configuration
--   for the service. This parameter is required for task definitions that
--   use the <tt>awsvpc</tt> network mode to receive their own elastic
--   network interface, and it is not supported for other network modes.
--   For more information, see <a>Task networking</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:serviceRegistries:CreateService'</a>,
--   <a>createService_serviceRegistries</a> - The details of the service
--   discovery registry to associate with this service. For more
--   information, see <a>Service discovery</a>.
--   
--   Each service may be associated with one service registry. Multiple
--   service registries per service isn't supported.
--   
--   <a>$sel:capacityProviderStrategy:CreateService'</a>,
--   <a>createService_capacityProviderStrategy</a> - The capacity provider
--   strategy to use for the service.
--   
--   If a <tt>capacityProviderStrategy</tt> is specified, the
--   <tt>launchType</tt> parameter must be omitted. If no
--   <tt>capacityProviderStrategy</tt> or <tt>launchType</tt> is specified,
--   the <tt>defaultCapacityProviderStrategy</tt> for the cluster is used.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
--   
--   <a>$sel:enableExecuteCommand:CreateService'</a>,
--   <a>createService_enableExecuteCommand</a> - Whether or not the execute
--   command functionality is enabled for the service. If <tt>true</tt>,
--   this enables execute command functionality on all containers in the
--   service tasks.
--   
--   <a>$sel:tags:CreateService'</a>, <a>createService_tags</a> - The
--   metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define. When a service is deleted, the tags are deleted
--   as well.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:deploymentConfiguration:CreateService'</a>,
--   <a>createService_deploymentConfiguration</a> - Optional deployment
--   parameters that control how many tasks run during the deployment and
--   the ordering of stopping and starting tasks.
--   
--   <a>$sel:serviceName:CreateService'</a>,
--   <a>createService_serviceName</a> - The name of your service. Up to 255
--   letters (uppercase and lowercase), numbers, underscores, and hyphens
--   are allowed. Service names must be unique within a cluster, but you
--   can have similarly named services in multiple clusters within a Region
--   or across multiple Regions.
newCreateService :: Text -> CreateService

-- | <i>See:</i> <a>newCreateServiceResponse</a> smart constructor.
data CreateServiceResponse
CreateServiceResponse' :: Maybe ContainerService -> Int -> CreateServiceResponse

-- | Create a value of <a>CreateServiceResponse</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:service:CreateServiceResponse'</a>,
--   <a>createServiceResponse_service</a> - The full description of your
--   service following the create call.
--   
--   A service will return either a <tt>capacityProviderStrategy</tt> or
--   <tt>launchType</tt> parameter, but not both, depending on which one
--   was specified during creation.
--   
--   If a service is using the <tt>ECS</tt> deployment controller, the
--   <tt>deploymentController</tt> and <tt>taskSets</tt> parameters will
--   not be returned.
--   
--   If the service is using the <tt>CODE_DEPLOY</tt> deployment
--   controller, the <tt>deploymentController</tt>, <tt>taskSets</tt> and
--   <tt>deployments</tt> parameters will be returned, however the
--   <tt>deployments</tt> parameter will be an empty list.
--   
--   <a>$sel:httpStatus:CreateServiceResponse'</a>,
--   <a>createServiceResponse_httpStatus</a> - The response's http status
--   code.
newCreateServiceResponse :: Int -> CreateServiceResponse
newtype AgentUpdateStatus
AgentUpdateStatus' :: Text -> AgentUpdateStatus
[fromAgentUpdateStatus] :: AgentUpdateStatus -> Text
pattern AgentUpdateStatus_FAILED :: AgentUpdateStatus
pattern AgentUpdateStatus_PENDING :: AgentUpdateStatus
pattern AgentUpdateStatus_STAGED :: AgentUpdateStatus
pattern AgentUpdateStatus_STAGING :: AgentUpdateStatus
pattern AgentUpdateStatus_UPDATED :: AgentUpdateStatus
pattern AgentUpdateStatus_UPDATING :: AgentUpdateStatus
newtype AssignPublicIp
AssignPublicIp' :: Text -> AssignPublicIp
[fromAssignPublicIp] :: AssignPublicIp -> Text
pattern AssignPublicIp_DISABLED :: AssignPublicIp
pattern AssignPublicIp_ENABLED :: AssignPublicIp
newtype CapacityProviderField
CapacityProviderField' :: Text -> CapacityProviderField
[fromCapacityProviderField] :: CapacityProviderField -> Text
pattern CapacityProviderField_TAGS :: CapacityProviderField
newtype CapacityProviderStatus
CapacityProviderStatus' :: Text -> CapacityProviderStatus
[fromCapacityProviderStatus] :: CapacityProviderStatus -> Text
pattern CapacityProviderStatus_ACTIVE :: CapacityProviderStatus
pattern CapacityProviderStatus_INACTIVE :: CapacityProviderStatus
newtype CapacityProviderUpdateStatus
CapacityProviderUpdateStatus' :: Text -> CapacityProviderUpdateStatus
[fromCapacityProviderUpdateStatus] :: CapacityProviderUpdateStatus -> Text
pattern CapacityProviderUpdateStatus_DELETE_COMPLETE :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_DELETE_FAILED :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_DELETE_IN_PROGRESS :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_UPDATE_COMPLETE :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_UPDATE_FAILED :: CapacityProviderUpdateStatus
pattern CapacityProviderUpdateStatus_UPDATE_IN_PROGRESS :: CapacityProviderUpdateStatus
newtype ClusterField
ClusterField' :: Text -> ClusterField
[fromClusterField] :: ClusterField -> Text
pattern ClusterField_ATTACHMENTS :: ClusterField
pattern ClusterField_CONFIGURATIONS :: ClusterField
pattern ClusterField_SETTINGS :: ClusterField
pattern ClusterField_STATISTICS :: ClusterField
pattern ClusterField_TAGS :: ClusterField
newtype ClusterSettingName
ClusterSettingName' :: Text -> ClusterSettingName
[fromClusterSettingName] :: ClusterSettingName -> Text
pattern ClusterSettingName_ContainerInsights :: ClusterSettingName
newtype Compatibility
Compatibility' :: Text -> Compatibility
[fromCompatibility] :: Compatibility -> Text
pattern Compatibility_EC2 :: Compatibility
pattern Compatibility_EXTERNAL :: Compatibility
pattern Compatibility_FARGATE :: Compatibility
newtype Connectivity
Connectivity' :: Text -> Connectivity
[fromConnectivity] :: Connectivity -> Text
pattern Connectivity_CONNECTED :: Connectivity
pattern Connectivity_DISCONNECTED :: Connectivity
newtype ContainerCondition
ContainerCondition' :: Text -> ContainerCondition
[fromContainerCondition] :: ContainerCondition -> Text
pattern ContainerCondition_COMPLETE :: ContainerCondition
pattern ContainerCondition_HEALTHY :: ContainerCondition
pattern ContainerCondition_START :: ContainerCondition
pattern ContainerCondition_SUCCESS :: ContainerCondition
newtype ContainerInstanceField
ContainerInstanceField' :: Text -> ContainerInstanceField
[fromContainerInstanceField] :: ContainerInstanceField -> Text
pattern ContainerInstanceField_TAGS :: ContainerInstanceField
newtype ContainerInstanceStatus
ContainerInstanceStatus' :: Text -> ContainerInstanceStatus
[fromContainerInstanceStatus] :: ContainerInstanceStatus -> Text
pattern ContainerInstanceStatus_ACTIVE :: ContainerInstanceStatus
pattern ContainerInstanceStatus_DEREGISTERING :: ContainerInstanceStatus
pattern ContainerInstanceStatus_DRAINING :: ContainerInstanceStatus
pattern ContainerInstanceStatus_REGISTERING :: ContainerInstanceStatus
pattern ContainerInstanceStatus_REGISTRATION_FAILED :: ContainerInstanceStatus
newtype DeploymentControllerType
DeploymentControllerType' :: Text -> DeploymentControllerType
[fromDeploymentControllerType] :: DeploymentControllerType -> Text
pattern DeploymentControllerType_CODE_DEPLOY :: DeploymentControllerType
pattern DeploymentControllerType_ECS :: DeploymentControllerType
pattern DeploymentControllerType_EXTERNAL :: DeploymentControllerType
newtype DeploymentRolloutState
DeploymentRolloutState' :: Text -> DeploymentRolloutState
[fromDeploymentRolloutState] :: DeploymentRolloutState -> Text
pattern DeploymentRolloutState_COMPLETED :: DeploymentRolloutState
pattern DeploymentRolloutState_FAILED :: DeploymentRolloutState
pattern DeploymentRolloutState_IN_PROGRESS :: DeploymentRolloutState
newtype DesiredStatus
DesiredStatus' :: Text -> DesiredStatus
[fromDesiredStatus] :: DesiredStatus -> Text
pattern DesiredStatus_PENDING :: DesiredStatus
pattern DesiredStatus_RUNNING :: DesiredStatus
pattern DesiredStatus_STOPPED :: DesiredStatus
newtype DeviceCgroupPermission
DeviceCgroupPermission' :: Text -> DeviceCgroupPermission
[fromDeviceCgroupPermission] :: DeviceCgroupPermission -> Text
pattern DeviceCgroupPermission_Mknod :: DeviceCgroupPermission
pattern DeviceCgroupPermission_Read :: DeviceCgroupPermission
pattern DeviceCgroupPermission_Write :: DeviceCgroupPermission
newtype EFSAuthorizationConfigIAM
EFSAuthorizationConfigIAM' :: Text -> EFSAuthorizationConfigIAM
[fromEFSAuthorizationConfigIAM] :: EFSAuthorizationConfigIAM -> Text
pattern EFSAuthorizationConfigIAM_DISABLED :: EFSAuthorizationConfigIAM
pattern EFSAuthorizationConfigIAM_ENABLED :: EFSAuthorizationConfigIAM
newtype EFSTransitEncryption
EFSTransitEncryption' :: Text -> EFSTransitEncryption
[fromEFSTransitEncryption] :: EFSTransitEncryption -> Text
pattern EFSTransitEncryption_DISABLED :: EFSTransitEncryption
pattern EFSTransitEncryption_ENABLED :: EFSTransitEncryption
newtype EnvironmentFileType
EnvironmentFileType' :: Text -> EnvironmentFileType
[fromEnvironmentFileType] :: EnvironmentFileType -> Text
pattern EnvironmentFileType_S3 :: EnvironmentFileType
newtype ExecuteCommandLogging
ExecuteCommandLogging' :: Text -> ExecuteCommandLogging
[fromExecuteCommandLogging] :: ExecuteCommandLogging -> Text
pattern ExecuteCommandLogging_DEFAULT :: ExecuteCommandLogging
pattern ExecuteCommandLogging_NONE :: ExecuteCommandLogging
pattern ExecuteCommandLogging_OVERRIDE :: ExecuteCommandLogging
newtype FirelensConfigurationType
FirelensConfigurationType' :: Text -> FirelensConfigurationType
[fromFirelensConfigurationType] :: FirelensConfigurationType -> Text
pattern FirelensConfigurationType_Fluentbit :: FirelensConfigurationType
pattern FirelensConfigurationType_Fluentd :: FirelensConfigurationType
newtype HealthStatus
HealthStatus' :: Text -> HealthStatus
[fromHealthStatus] :: HealthStatus -> Text
pattern HealthStatus_HEALTHY :: HealthStatus
pattern HealthStatus_UNHEALTHY :: HealthStatus
pattern HealthStatus_UNKNOWN :: HealthStatus
newtype IpcMode
IpcMode' :: Text -> IpcMode
[fromIpcMode] :: IpcMode -> Text
pattern IpcMode_Host :: IpcMode
pattern IpcMode_None :: IpcMode
pattern IpcMode_Task :: IpcMode
newtype LaunchType
LaunchType' :: Text -> LaunchType
[fromLaunchType] :: LaunchType -> Text
pattern LaunchType_EC2 :: LaunchType
pattern LaunchType_EXTERNAL :: LaunchType
pattern LaunchType_FARGATE :: LaunchType
newtype LogDriver
LogDriver' :: Text -> LogDriver
[fromLogDriver] :: LogDriver -> Text
pattern LogDriver_Awsfirelens :: LogDriver
pattern LogDriver_Awslogs :: LogDriver
pattern LogDriver_Fluentd :: LogDriver
pattern LogDriver_Gelf :: LogDriver
pattern LogDriver_Journald :: LogDriver
pattern LogDriver_Json_file :: LogDriver
pattern LogDriver_Splunk :: LogDriver
pattern LogDriver_Syslog :: LogDriver
newtype ManagedAgentName
ManagedAgentName' :: Text -> ManagedAgentName
[fromManagedAgentName] :: ManagedAgentName -> Text
pattern ManagedAgentName_ExecuteCommandAgent :: ManagedAgentName
newtype ManagedScalingStatus
ManagedScalingStatus' :: Text -> ManagedScalingStatus
[fromManagedScalingStatus] :: ManagedScalingStatus -> Text
pattern ManagedScalingStatus_DISABLED :: ManagedScalingStatus
pattern ManagedScalingStatus_ENABLED :: ManagedScalingStatus
newtype ManagedTerminationProtection
ManagedTerminationProtection' :: Text -> ManagedTerminationProtection
[fromManagedTerminationProtection] :: ManagedTerminationProtection -> Text
pattern ManagedTerminationProtection_DISABLED :: ManagedTerminationProtection
pattern ManagedTerminationProtection_ENABLED :: ManagedTerminationProtection
newtype NetworkMode
NetworkMode' :: Text -> NetworkMode
[fromNetworkMode] :: NetworkMode -> Text
pattern NetworkMode_Awsvpc :: NetworkMode
pattern NetworkMode_Bridge :: NetworkMode
pattern NetworkMode_Host :: NetworkMode
pattern NetworkMode_None :: NetworkMode
newtype PidMode
PidMode' :: Text -> PidMode
[fromPidMode] :: PidMode -> Text
pattern PidMode_Host :: PidMode
pattern PidMode_Task :: PidMode
newtype PlacementConstraintType
PlacementConstraintType' :: Text -> PlacementConstraintType
[fromPlacementConstraintType] :: PlacementConstraintType -> Text
pattern PlacementConstraintType_DistinctInstance :: PlacementConstraintType
pattern PlacementConstraintType_MemberOf :: PlacementConstraintType
newtype PlacementStrategyType
PlacementStrategyType' :: Text -> PlacementStrategyType
[fromPlacementStrategyType] :: PlacementStrategyType -> Text
pattern PlacementStrategyType_Binpack :: PlacementStrategyType
pattern PlacementStrategyType_Random :: PlacementStrategyType
pattern PlacementStrategyType_Spread :: PlacementStrategyType
newtype PlatformDeviceType
PlatformDeviceType' :: Text -> PlatformDeviceType
[fromPlatformDeviceType] :: PlatformDeviceType -> Text
pattern PlatformDeviceType_GPU :: PlatformDeviceType
newtype PropagateTags
PropagateTags' :: Text -> PropagateTags
[fromPropagateTags] :: PropagateTags -> Text
pattern PropagateTags_SERVICE :: PropagateTags
pattern PropagateTags_TASK_DEFINITION :: PropagateTags
newtype ProxyConfigurationType
ProxyConfigurationType' :: Text -> ProxyConfigurationType
[fromProxyConfigurationType] :: ProxyConfigurationType -> Text
pattern ProxyConfigurationType_APPMESH :: ProxyConfigurationType
newtype ResourceType
ResourceType' :: Text -> ResourceType
[fromResourceType] :: ResourceType -> Text
pattern ResourceType_GPU :: ResourceType
pattern ResourceType_InferenceAccelerator :: ResourceType
newtype ScaleUnit
ScaleUnit' :: Text -> ScaleUnit
[fromScaleUnit] :: ScaleUnit -> Text
pattern ScaleUnit_PERCENT :: ScaleUnit
newtype SchedulingStrategy
SchedulingStrategy' :: Text -> SchedulingStrategy
[fromSchedulingStrategy] :: SchedulingStrategy -> Text
pattern SchedulingStrategy_DAEMON :: SchedulingStrategy
pattern SchedulingStrategy_REPLICA :: SchedulingStrategy
newtype Scope
Scope' :: Text -> Scope
[fromScope] :: Scope -> Text
pattern Scope_Shared :: Scope
pattern Scope_Task :: Scope
newtype ServiceField
ServiceField' :: Text -> ServiceField
[fromServiceField] :: ServiceField -> Text
pattern ServiceField_TAGS :: ServiceField
newtype SettingName
SettingName' :: Text -> SettingName
[fromSettingName] :: SettingName -> Text
pattern SettingName_AwsvpcTrunking :: SettingName
pattern SettingName_ContainerInsights :: SettingName
pattern SettingName_ContainerInstanceLongArnFormat :: SettingName
pattern SettingName_ServiceLongArnFormat :: SettingName
pattern SettingName_TaskLongArnFormat :: SettingName
newtype SortOrder
SortOrder' :: Text -> SortOrder
[fromSortOrder] :: SortOrder -> Text
pattern SortOrder_ASC :: SortOrder
pattern SortOrder_DESC :: SortOrder
newtype StabilityStatus
StabilityStatus' :: Text -> StabilityStatus
[fromStabilityStatus] :: StabilityStatus -> Text
pattern StabilityStatus_STABILIZING :: StabilityStatus
pattern StabilityStatus_STEADY_STATE :: StabilityStatus
newtype TargetType
TargetType' :: Text -> TargetType
[fromTargetType] :: TargetType -> Text
pattern TargetType_Container_instance :: TargetType
newtype TaskDefinitionFamilyStatus
TaskDefinitionFamilyStatus' :: Text -> TaskDefinitionFamilyStatus
[fromTaskDefinitionFamilyStatus] :: TaskDefinitionFamilyStatus -> Text
pattern TaskDefinitionFamilyStatus_ACTIVE :: TaskDefinitionFamilyStatus
pattern TaskDefinitionFamilyStatus_ALL :: TaskDefinitionFamilyStatus
pattern TaskDefinitionFamilyStatus_INACTIVE :: TaskDefinitionFamilyStatus
newtype TaskDefinitionField
TaskDefinitionField' :: Text -> TaskDefinitionField
[fromTaskDefinitionField] :: TaskDefinitionField -> Text
pattern TaskDefinitionField_TAGS :: TaskDefinitionField
newtype TaskDefinitionPlacementConstraintType
TaskDefinitionPlacementConstraintType' :: Text -> TaskDefinitionPlacementConstraintType
[fromTaskDefinitionPlacementConstraintType] :: TaskDefinitionPlacementConstraintType -> Text
pattern TaskDefinitionPlacementConstraintType_MemberOf :: TaskDefinitionPlacementConstraintType
newtype TaskDefinitionStatus
TaskDefinitionStatus' :: Text -> TaskDefinitionStatus
[fromTaskDefinitionStatus] :: TaskDefinitionStatus -> Text
pattern TaskDefinitionStatus_ACTIVE :: TaskDefinitionStatus
pattern TaskDefinitionStatus_INACTIVE :: TaskDefinitionStatus
newtype TaskField
TaskField' :: Text -> TaskField
[fromTaskField] :: TaskField -> Text
pattern TaskField_TAGS :: TaskField
newtype TaskSetField
TaskSetField' :: Text -> TaskSetField
[fromTaskSetField] :: TaskSetField -> Text
pattern TaskSetField_TAGS :: TaskSetField
newtype TaskStopCode
TaskStopCode' :: Text -> TaskStopCode
[fromTaskStopCode] :: TaskStopCode -> Text
pattern TaskStopCode_EssentialContainerExited :: TaskStopCode
pattern TaskStopCode_TaskFailedToStart :: TaskStopCode
pattern TaskStopCode_UserInitiated :: TaskStopCode
newtype TransportProtocol
TransportProtocol' :: Text -> TransportProtocol
[fromTransportProtocol] :: TransportProtocol -> Text
pattern TransportProtocol_Tcp :: TransportProtocol
pattern TransportProtocol_Udp :: TransportProtocol
newtype UlimitName
UlimitName' :: Text -> UlimitName
[fromUlimitName] :: UlimitName -> Text
pattern UlimitName_Core :: UlimitName
pattern UlimitName_Cpu :: UlimitName
pattern UlimitName_Data :: UlimitName
pattern UlimitName_Fsize :: UlimitName
pattern UlimitName_Locks :: UlimitName
pattern UlimitName_Memlock :: UlimitName
pattern UlimitName_Msgqueue :: UlimitName
pattern UlimitName_Nice :: UlimitName
pattern UlimitName_Nofile :: UlimitName
pattern UlimitName_Nproc :: UlimitName
pattern UlimitName_Rss :: UlimitName
pattern UlimitName_Rtprio :: UlimitName
pattern UlimitName_Rttime :: UlimitName
pattern UlimitName_Sigpending :: UlimitName
pattern UlimitName_Stack :: UlimitName

-- | An object representing a container instance or task attachment.
--   
--   <i>See:</i> <a>newAttachment</a> smart constructor.
data Attachment
Attachment' :: Maybe Text -> Maybe [KeyValuePair] -> Maybe Text -> Maybe Text -> Attachment

-- | Create a value of <a>Attachment</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:Attachment'</a>, <a>attachment_status</a> - The status
--   of the attachment. Valid values are <tt>PRECREATED</tt>,
--   <tt>CREATED</tt>, <tt>ATTACHING</tt>, <tt>ATTACHED</tt>,
--   <tt>DETACHING</tt>, <tt>DETACHED</tt>, and <tt>DELETED</tt>.
--   
--   <a>$sel:details:Attachment'</a>, <a>attachment_details</a> - Details
--   of the attachment. For elastic network interfaces, this includes the
--   network interface ID, the MAC address, the subnet ID, and the private
--   IPv4 address.
--   
--   <a>$sel:id:Attachment'</a>, <a>attachment_id</a> - The unique
--   identifier for the attachment.
--   
--   <a>$sel:type':Attachment'</a>, <a>attachment_type</a> - The type of
--   the attachment, such as <tt>ElasticNetworkInterface</tt>.
newAttachment :: Attachment

-- | An object representing a change in state for a task attachment.
--   
--   <i>See:</i> <a>newAttachmentStateChange</a> smart constructor.
data AttachmentStateChange
AttachmentStateChange' :: Text -> Text -> AttachmentStateChange

-- | Create a value of <a>AttachmentStateChange</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:attachmentArn:AttachmentStateChange'</a>,
--   <a>attachmentStateChange_attachmentArn</a> - The Amazon Resource Name
--   (ARN) of the attachment.
--   
--   <a>$sel:status:AttachmentStateChange'</a>,
--   <a>attachmentStateChange_status</a> - The status of the attachment.
newAttachmentStateChange :: Text -> Text -> AttachmentStateChange

-- | An attribute is a name-value pair associated with an Amazon ECS
--   object. Attributes enable you to extend the Amazon ECS data model by
--   adding custom metadata to your resources. For more information, see
--   <a>Attributes</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <i>See:</i> <a>newAttribute</a> smart constructor.
data Attribute
Attribute' :: Maybe Text -> Maybe Text -> Maybe TargetType -> Text -> Attribute

-- | Create a value of <a>Attribute</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:targetId:Attribute'</a>, <a>attribute_targetId</a> - The ID of
--   the target. You can specify the short form ID for a resource or the
--   full Amazon Resource Name (ARN).
--   
--   <a>$sel:value:Attribute'</a>, <a>attribute_value</a> - The value of
--   the attribute. The <tt>value</tt> must contain between 1 and 128
--   characters and may contain letters (uppercase and lowercase), numbers,
--   hyphens, underscores, periods, at signs (@), forward slashes, back
--   slashes, colons, or spaces. The value cannot contain any leading or
--   trailing whitespace.
--   
--   <a>$sel:targetType:Attribute'</a>, <a>attribute_targetType</a> - The
--   type of the target with which to attach the attribute. This parameter
--   is required if you use the short form ID for a resource instead of the
--   full ARN.
--   
--   <a>$sel:name:Attribute'</a>, <a>attribute_name</a> - The name of the
--   attribute. The <tt>name</tt> must contain between 1 and 128 characters
--   and name may contain letters (uppercase and lowercase), numbers,
--   hyphens, underscores, forward slashes, back slashes, or periods.
newAttribute :: Text -> Attribute

-- | The details of the Auto Scaling group for the capacity provider.
--   
--   <i>See:</i> <a>newAutoScalingGroupProvider</a> smart constructor.
data AutoScalingGroupProvider
AutoScalingGroupProvider' :: Maybe ManagedScaling -> Maybe ManagedTerminationProtection -> Text -> AutoScalingGroupProvider

-- | Create a value of <a>AutoScalingGroupProvider</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:managedScaling:AutoScalingGroupProvider'</a>,
--   <a>autoScalingGroupProvider_managedScaling</a> - The managed scaling
--   settings for the Auto Scaling group capacity provider.
--   
--   <a>$sel:managedTerminationProtection:AutoScalingGroupProvider'</a>,
--   <a>autoScalingGroupProvider_managedTerminationProtection</a> - The
--   managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
--   
--   <a>$sel:autoScalingGroupArn:AutoScalingGroupProvider'</a>,
--   <a>autoScalingGroupProvider_autoScalingGroupArn</a> - The Amazon
--   Resource Name (ARN) that identifies the Auto Scaling group.
newAutoScalingGroupProvider :: Text -> AutoScalingGroupProvider

-- | The details of the Auto Scaling group capacity provider to update.
--   
--   <i>See:</i> <a>newAutoScalingGroupProviderUpdate</a> smart
--   constructor.
data AutoScalingGroupProviderUpdate
AutoScalingGroupProviderUpdate' :: Maybe ManagedScaling -> Maybe ManagedTerminationProtection -> AutoScalingGroupProviderUpdate

-- | Create a value of <a>AutoScalingGroupProviderUpdate</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:managedScaling:AutoScalingGroupProviderUpdate'</a>,
--   <a>autoScalingGroupProviderUpdate_managedScaling</a> - The managed
--   scaling settings for the Auto Scaling group capacity provider.
--   
--   
--   <a>$sel:managedTerminationProtection:AutoScalingGroupProviderUpdate'</a>,
--   <a>autoScalingGroupProviderUpdate_managedTerminationProtection</a> -
--   The managed termination protection setting to use for the Auto Scaling
--   group capacity provider. This determines whether the Auto Scaling
--   group has managed termination protection.
--   
--   When using managed termination protection, managed scaling must also
--   be used otherwise managed termination protection will not work.
--   
--   When managed termination protection is enabled, Amazon ECS prevents
--   the Amazon EC2 instances in an Auto Scaling group that contain tasks
--   from being terminated during a scale-in action. The Auto Scaling group
--   and each instance in the Auto Scaling group must have instance
--   protection from scale-in actions enabled as well. For more
--   information, see <a>Instance Protection</a> in the <i>Auto Scaling
--   User Guide</i>.
--   
--   When managed termination protection is disabled, your Amazon EC2
--   instances are not protected from termination when the Auto Scaling
--   group scales in.
newAutoScalingGroupProviderUpdate :: AutoScalingGroupProviderUpdate

-- | An object representing the networking details for a task or service.
--   
--   <i>See:</i> <a>newAwsVpcConfiguration</a> smart constructor.
data AwsVpcConfiguration
AwsVpcConfiguration' :: Maybe [Text] -> Maybe AssignPublicIp -> [Text] -> AwsVpcConfiguration

-- | Create a value of <a>AwsVpcConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:securityGroups:AwsVpcConfiguration'</a>,
--   <a>awsVpcConfiguration_securityGroups</a> - The IDs of the security
--   groups associated with the task or service. If you do not specify a
--   security group, the default security group for the VPC is used. There
--   is a limit of 5 security groups that can be specified per
--   <tt>AwsVpcConfiguration</tt>.
--   
--   All specified security groups must be from the same VPC.
--   
--   <a>$sel:assignPublicIp:AwsVpcConfiguration'</a>,
--   <a>awsVpcConfiguration_assignPublicIp</a> - Whether the task's elastic
--   network interface receives a public IP address. The default value is
--   <tt>DISABLED</tt>.
--   
--   <a>$sel:subnets:AwsVpcConfiguration'</a>,
--   <a>awsVpcConfiguration_subnets</a> - The IDs of the subnets associated
--   with the task or service. There is a limit of 16 subnets that can be
--   specified per <tt>AwsVpcConfiguration</tt>.
--   
--   All specified subnets must be from the same VPC.
newAwsVpcConfiguration :: AwsVpcConfiguration

-- | The details of a capacity provider.
--   
--   <i>See:</i> <a>newCapacityProvider</a> smart constructor.
data CapacityProvider
CapacityProvider' :: Maybe CapacityProviderStatus -> Maybe Text -> Maybe AutoScalingGroupProvider -> Maybe Text -> Maybe CapacityProviderUpdateStatus -> Maybe Text -> Maybe [Tag] -> CapacityProvider

-- | Create a value of <a>CapacityProvider</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:CapacityProvider'</a>, <a>capacityProvider_status</a> -
--   The current status of the capacity provider. Only capacity providers
--   in an <tt>ACTIVE</tt> state can be used in a cluster. When a capacity
--   provider is successfully deleted, it will have an <tt>INACTIVE</tt>
--   status.
--   
--   <a>$sel:updateStatusReason:CapacityProvider'</a>,
--   <a>capacityProvider_updateStatusReason</a> - The update status reason.
--   This provides further details about the update status for the capacity
--   provider.
--   
--   <a>$sel:autoScalingGroupProvider:CapacityProvider'</a>,
--   <a>capacityProvider_autoScalingGroupProvider</a> - The Auto Scaling
--   group settings for the capacity provider.
--   
--   <a>$sel:name:CapacityProvider'</a>, <a>capacityProvider_name</a> - The
--   name of the capacity provider.
--   
--   <a>$sel:updateStatus:CapacityProvider'</a>,
--   <a>capacityProvider_updateStatus</a> - The update status of the
--   capacity provider. The following are the possible states that will be
--   returned.
--   
--   <ul>
--   <li><i>DELETE_IN_PROGRESS</i> The capacity provider is in the process
--   of being deleted.</li>
--   <li><i>DELETE_COMPLETE</i> The capacity provider has been successfully
--   deleted and will have an <tt>INACTIVE</tt> status.</li>
--   <li><i>DELETE_FAILED</i> The capacity provider was unable to be
--   deleted. The update status reason will provide further details about
--   why the delete failed.</li>
--   </ul>
--   
--   <a>$sel:capacityProviderArn:CapacityProvider'</a>,
--   <a>capacityProvider_capacityProviderArn</a> - The Amazon Resource Name
--   (ARN) that identifies the capacity provider.
--   
--   <a>$sel:tags:CapacityProvider'</a>, <a>capacityProvider_tags</a> - The
--   metadata that you apply to the capacity provider to help you
--   categorize and organize it. Each tag consists of a key and an optional
--   value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newCapacityProvider :: CapacityProvider

-- | The details of a capacity provider strategy. A capacity provider
--   strategy can be set when using the RunTask or CreateCluster APIs or as
--   the default capacity provider strategy for a cluster with the
--   CreateCluster API.
--   
--   Only capacity providers that are already associated with a cluster and
--   have an <tt>ACTIVE</tt> or <tt>UPDATING</tt> status can be used in a
--   capacity provider strategy. The PutClusterCapacityProviders API is
--   used to associate a capacity provider with a cluster.
--   
--   If specifying a capacity provider that uses an Auto Scaling group, the
--   capacity provider must already be created. New Auto Scaling group
--   capacity providers can be created with the CreateCapacityProvider API
--   operation.
--   
--   To use a Fargate capacity provider, specify either the
--   <tt>FARGATE</tt> or <tt>FARGATE_SPOT</tt> capacity providers. The
--   Fargate capacity providers are available to all accounts and only need
--   to be associated with a cluster to be used in a capacity provider
--   strategy.
--   
--   A capacity provider strategy may contain a maximum of 6 capacity
--   providers.
--   
--   <i>See:</i> <a>newCapacityProviderStrategyItem</a> smart constructor.
data CapacityProviderStrategyItem
CapacityProviderStrategyItem' :: Maybe Natural -> Maybe Natural -> Text -> CapacityProviderStrategyItem

-- | Create a value of <a>CapacityProviderStrategyItem</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:base:CapacityProviderStrategyItem'</a>,
--   <a>capacityProviderStrategyItem_base</a> - The <i>base</i> value
--   designates how many tasks, at a minimum, to run on the specified
--   capacity provider. Only one capacity provider in a capacity provider
--   strategy can have a <i>base</i> defined. If no value is specified, the
--   default value of <tt>0</tt> is used.
--   
--   <a>$sel:weight:CapacityProviderStrategyItem'</a>,
--   <a>capacityProviderStrategyItem_weight</a> - The <i>weight</i> value
--   designates the relative percentage of the total number of tasks
--   launched that should use the specified capacity provider. The
--   <tt>weight</tt> value is taken into consideration after the
--   <tt>base</tt> value, if defined, is satisfied.
--   
--   If no <tt>weight</tt> value is specified, the default value of
--   <tt>0</tt> is used. When multiple capacity providers are specified
--   within a capacity provider strategy, at least one of the capacity
--   providers must have a weight value greater than zero and any capacity
--   providers with a weight of <tt>0</tt> will not be used to place tasks.
--   If you specify multiple capacity providers in a strategy that all have
--   a weight of <tt>0</tt>, any <tt>RunTask</tt> or <tt>CreateService</tt>
--   actions using the capacity provider strategy will fail.
--   
--   An example scenario for using weights is defining a strategy that
--   contains two capacity providers and both have a weight of <tt>1</tt>,
--   then when the <tt>base</tt> is satisfied, the tasks will be split
--   evenly across the two capacity providers. Using that same logic, if
--   you specify a weight of <tt>1</tt> for <i>capacityProviderA</i> and a
--   weight of <tt>4</tt> for <i>capacityProviderB</i>, then for every one
--   task that is run using <i>capacityProviderA</i>, four tasks would use
--   <i>capacityProviderB</i>.
--   
--   <a>$sel:capacityProvider:CapacityProviderStrategyItem'</a>,
--   <a>capacityProviderStrategyItem_capacityProvider</a> - The short name
--   of the capacity provider.
newCapacityProviderStrategyItem :: Text -> CapacityProviderStrategyItem

-- | A regional grouping of one or more container instances on which you
--   can run task requests. Each account receives a default cluster the
--   first time you use the Amazon ECS service, but you may also create
--   other clusters. Clusters may contain more than one instance type
--   simultaneously.
--   
--   <i>See:</i> <a>newCluster</a> smart constructor.
data Cluster
Cluster' :: Maybe Text -> Maybe Text -> Maybe [Attachment] -> Maybe Int -> Maybe [CapacityProviderStrategyItem] -> Maybe [ClusterSetting] -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe [KeyValuePair] -> Maybe ClusterConfiguration -> Maybe Text -> Maybe [Text] -> Maybe Int -> Maybe [Tag] -> Cluster

-- | Create a value of <a>Cluster</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:Cluster'</a>, <a>cluster_status</a> - The status of the
--   cluster. The following are the possible states that will be returned.
--   
--   <ul>
--   <li><i>ACTIVE</i> The cluster is ready to accept tasks and if
--   applicable you can register container instances with the cluster.</li>
--   <li><i>PROVISIONING</i> The cluster has capacity providers associated
--   with it and the resources needed for the capacity provider are being
--   created.</li>
--   <li><i>DEPROVISIONING</i> The cluster has capacity providers
--   associated with it and the resources needed for the capacity provider
--   are being deleted.</li>
--   <li><i>FAILED</i> The cluster has capacity providers associated with
--   it and the resources needed for the capacity provider have failed to
--   create.</li>
--   <li><i>INACTIVE</i> The cluster has been deleted. Clusters with an
--   <tt>INACTIVE</tt> status may remain discoverable in your account for a
--   period of time. However, this behavior is subject to change in the
--   future, so you should not rely on <tt>INACTIVE</tt> clusters
--   persisting.</li>
--   </ul>
--   
--   <a>$sel:clusterArn:Cluster'</a>, <a>cluster_clusterArn</a> - The
--   Amazon Resource Name (ARN) that identifies the cluster. The ARN
--   contains the <tt>arn:aws:ecs</tt> namespace, followed by the Region of
--   the cluster, the Amazon Web Services account ID of the cluster owner,
--   the <tt>cluster</tt> namespace, and then the cluster name. For
--   example, <tt>arn:aws:ecs:region:012345678910:cluster/test</tt>.
--   
--   <a>$sel:attachments:Cluster'</a>, <a>cluster_attachments</a> - The
--   resources attached to a cluster. When using a capacity provider with a
--   cluster, the Auto Scaling plan that is created will be returned as a
--   cluster attachment.
--   
--   <a>$sel:runningTasksCount:Cluster'</a>,
--   <a>cluster_runningTasksCount</a> - The number of tasks in the cluster
--   that are in the <tt>RUNNING</tt> state.
--   
--   <a>$sel:defaultCapacityProviderStrategy:Cluster'</a>,
--   <a>cluster_defaultCapacityProviderStrategy</a> - The default capacity
--   provider strategy for the cluster. When services or tasks are run in
--   the cluster with no launch type or capacity provider strategy
--   specified, the default capacity provider strategy is used.
--   
--   <a>$sel:settings:Cluster'</a>, <a>cluster_settings</a> - The settings
--   for the cluster. This parameter indicates whether CloudWatch Container
--   Insights is enabled or disabled for a cluster.
--   
--   <a>$sel:registeredContainerInstancesCount:Cluster'</a>,
--   <a>cluster_registeredContainerInstancesCount</a> - The number of
--   container instances registered into the cluster. This includes
--   container instances in both <tt>ACTIVE</tt> and <tt>DRAINING</tt>
--   status.
--   
--   <a>$sel:pendingTasksCount:Cluster'</a>,
--   <a>cluster_pendingTasksCount</a> - The number of tasks in the cluster
--   that are in the <tt>PENDING</tt> state.
--   
--   <a>$sel:clusterName:Cluster'</a>, <a>cluster_clusterName</a> - A
--   user-generated string that you use to identify your cluster.
--   
--   <a>$sel:statistics:Cluster'</a>, <a>cluster_statistics</a> -
--   Additional information about your clusters that are separated by
--   launch type, including:
--   
--   <ul>
--   <li>runningEC2TasksCount</li>
--   <li>RunningFargateTasksCount</li>
--   <li>pendingEC2TasksCount</li>
--   <li>pendingFargateTasksCount</li>
--   <li>activeEC2ServiceCount</li>
--   <li>activeFargateServiceCount</li>
--   <li>drainingEC2ServiceCount</li>
--   <li>drainingFargateServiceCount</li>
--   </ul>
--   
--   <a>$sel:configuration:Cluster'</a>, <a>cluster_configuration</a> - The
--   execute command configuration for the cluster.
--   
--   <a>$sel:attachmentsStatus:Cluster'</a>,
--   <a>cluster_attachmentsStatus</a> - The status of the capacity
--   providers associated with the cluster. The following are the states
--   that will be returned:
--   
--   <ul>
--   <li><i>UPDATE_IN_PROGRESS</i> The available capacity providers for the
--   cluster are updating. This occurs when the Auto Scaling plan is
--   provisioning or deprovisioning.</li>
--   <li><i>UPDATE_COMPLETE</i> The capacity providers have successfully
--   updated.</li>
--   <li><i>UPDATE_FAILED</i> The capacity provider updates failed.</li>
--   </ul>
--   
--   <a>$sel:capacityProviders:Cluster'</a>,
--   <a>cluster_capacityProviders</a> - The capacity providers associated
--   with the cluster.
--   
--   <a>$sel:activeServicesCount:Cluster'</a>,
--   <a>cluster_activeServicesCount</a> - The number of services that are
--   running on the cluster in an <tt>ACTIVE</tt> state. You can view these
--   services with ListServices.
--   
--   <a>$sel:tags:Cluster'</a>, <a>cluster_tags</a> - The metadata that you
--   apply to the cluster to help you categorize and organize them. Each
--   tag consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newCluster :: Cluster

-- | The execute command configuration for the cluster.
--   
--   <i>See:</i> <a>newClusterConfiguration</a> smart constructor.
data ClusterConfiguration
ClusterConfiguration' :: Maybe ExecuteCommandConfiguration -> ClusterConfiguration

-- | Create a value of <a>ClusterConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:executeCommandConfiguration:ClusterConfiguration'</a>,
--   <a>clusterConfiguration_executeCommandConfiguration</a> - The details
--   of the execute command configuration.
newClusterConfiguration :: ClusterConfiguration

-- | The settings to use when creating a cluster. This parameter is used to
--   enable CloudWatch Container Insights for a cluster.
--   
--   <i>See:</i> <a>newClusterSetting</a> smart constructor.
data ClusterSetting
ClusterSetting' :: Maybe Text -> Maybe ClusterSettingName -> ClusterSetting

-- | Create a value of <a>ClusterSetting</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:ClusterSetting'</a>, <a>clusterSetting_value</a> - The
--   value to set for the cluster setting. The supported values are
--   <tt>enabled</tt> and <tt>disabled</tt>. If <tt>enabled</tt> is
--   specified, CloudWatch Container Insights will be enabled for the
--   cluster, otherwise it will be disabled unless the
--   <tt>containerInsights</tt> account setting is enabled. If a cluster
--   value is specified, it will override the <tt>containerInsights</tt>
--   value set with PutAccountSetting or PutAccountSettingDefault.
--   
--   <a>$sel:name:ClusterSetting'</a>, <a>clusterSetting_name</a> - The
--   name of the cluster setting. The only supported value is
--   <tt>containerInsights</tt>.
newClusterSetting :: ClusterSetting

-- | A Docker container that is part of a task.
--   
--   <i>See:</i> <a>newContainer</a> smart constructor.
data Container
Container' :: Maybe [Text] -> Maybe [NetworkBinding] -> Maybe [ManagedAgent] -> Maybe Text -> Maybe Text -> Maybe [NetworkInterface] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe HealthStatus -> Maybe Text -> Maybe Text -> Maybe Text -> Container

-- | Create a value of <a>Container</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:gpuIds:Container'</a>, <a>container_gpuIds</a> - The IDs of
--   each GPU assigned to the container.
--   
--   <a>$sel:networkBindings:Container'</a>,
--   <a>container_networkBindings</a> - The network bindings associated
--   with the container.
--   
--   <a>$sel:managedAgents:Container'</a>, <a>container_managedAgents</a> -
--   The details of any Amazon ECS managed agents associated with the
--   container.
--   
--   <a>$sel:image:Container'</a>, <a>container_image</a> - The image used
--   for the container.
--   
--   <a>$sel:containerArn:Container'</a>, <a>container_containerArn</a> -
--   The Amazon Resource Name (ARN) of the container.
--   
--   <a>$sel:networkInterfaces:Container'</a>,
--   <a>container_networkInterfaces</a> - The network interfaces associated
--   with the container.
--   
--   <a>$sel:taskArn:Container'</a>, <a>container_taskArn</a> - The ARN of
--   the task.
--   
--   <a>$sel:lastStatus:Container'</a>, <a>container_lastStatus</a> - The
--   last known status of the container.
--   
--   <a>$sel:memory:Container'</a>, <a>container_memory</a> - The hard
--   limit (in MiB) of memory set for the container.
--   
--   <a>$sel:reason:Container'</a>, <a>container_reason</a> - A short (255
--   max characters) human-readable string to provide additional details
--   about a running or stopped container.
--   
--   <a>$sel:name:Container'</a>, <a>container_name</a> - The name of the
--   container.
--   
--   <a>$sel:imageDigest:Container'</a>, <a>container_imageDigest</a> - The
--   container image manifest digest.
--   
--   The <tt>imageDigest</tt> is only returned if the container is using an
--   image hosted in Amazon ECR, otherwise it is omitted.
--   
--   <a>$sel:exitCode:Container'</a>, <a>container_exitCode</a> - The exit
--   code returned from the container.
--   
--   <a>$sel:healthStatus:Container'</a>, <a>container_healthStatus</a> -
--   The health status of the container. If health checks are not
--   configured for this container in its task definition, then it reports
--   the health status as <tt>UNKNOWN</tt>.
--   
--   <a>$sel:cpu:Container'</a>, <a>container_cpu</a> - The number of CPU
--   units set for the container. The value will be <tt>0</tt> if no value
--   was specified in the container definition when the task definition was
--   registered.
--   
--   <a>$sel:runtimeId:Container'</a>, <a>container_runtimeId</a> - The ID
--   of the Docker container.
--   
--   <a>$sel:memoryReservation:Container'</a>,
--   <a>container_memoryReservation</a> - The soft limit (in MiB) of memory
--   set for the container.
newContainer :: Container

-- | Container definitions are used in task definitions to describe the
--   different containers that are launched as part of a task.
--   
--   <i>See:</i> <a>newContainerDefinition</a> smart constructor.
data ContainerDefinition
ContainerDefinition' :: Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe RepositoryCredentials -> Maybe [Text] -> Maybe HealthCheck -> Maybe Bool -> Maybe [Secret] -> Maybe [VolumeFrom] -> Maybe [KeyValuePair] -> Maybe [EnvironmentFile] -> Maybe [Text] -> Maybe Text -> Maybe [Ulimit] -> Maybe Int -> Maybe Bool -> Maybe [PortMapping] -> Maybe [ResourceRequirement] -> Maybe (HashMap Text Text) -> Maybe [HostEntry] -> Maybe Int -> Maybe [SystemControl] -> Maybe Text -> Maybe FirelensConfiguration -> Maybe [Text] -> Maybe LogConfiguration -> Maybe LinuxParameters -> Maybe Bool -> Maybe [ContainerDependency] -> Maybe Text -> Maybe [Text] -> Maybe [MountPoint] -> Maybe Bool -> Maybe Int -> Maybe [Text] -> Maybe Bool -> Maybe Bool -> Maybe Int -> Maybe Int -> ContainerDefinition

-- | Create a value of <a>ContainerDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:image:ContainerDefinition'</a>,
--   <a>containerDefinition_image</a> - The image used to start a
--   container. This string is passed directly to the Docker daemon. Images
--   in the Docker Hub registry are available by default. Other
--   repositories are specified with either <tt> repository-url/image:tag
--   </tt> or <tt> repository-url/image@digest </tt>. Up to 255 letters
--   (uppercase and lowercase), numbers, hyphens, underscores, colons,
--   periods, forward slashes, and number signs are allowed. This parameter
--   maps to <tt>Image</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>IMAGE</tt> parameter of <a>docker
--   run</a>.
--   
--   <ul>
--   <li>When a new task starts, the Amazon ECS container agent pulls the
--   latest version of the specified image and tag for the container to
--   use. However, subsequent updates to a repository image are not
--   propagated to already running tasks.</li>
--   <li>Images in Amazon ECR repositories can be specified by either using
--   the full <tt>registry/repository:tag</tt> or
--   <tt>registry/repository@digest</tt>. For example,
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;:latest</tt>
--   or
--   <tt>012345678910.dkr.ecr.&lt;region-name&gt;.amazonaws.com/&lt;repository-name&gt;@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE</tt>.</li>
--   <li>Images in official repositories on Docker Hub use a single name
--   (for example, <tt>ubuntu</tt> or <tt>mongo</tt>).</li>
--   <li>Images in other repositories on Docker Hub are qualified with an
--   organization name (for example,
--   <tt>amazon/amazon-ecs-agent</tt>).</li>
--   <li>Images in other online repositories are qualified further by a
--   domain name (for example, <tt>quay.io/assemblyline/ubuntu</tt>).</li>
--   </ul>
--   
--   <a>$sel:command:ContainerDefinition'</a>,
--   <a>containerDefinition_command</a> - The command that is passed to the
--   container. This parameter maps to <tt>Cmd</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>COMMAND</tt> parameter to <a>docker run</a>. For more information,
--   see <a>https://docs.docker.com/engine/reference/builder/#cmd</a>. If
--   there are multiple arguments, each argument should be a separated
--   string in the array.
--   
--   <a>$sel:hostname:ContainerDefinition'</a>,
--   <a>containerDefinition_hostname</a> - The hostname to use for your
--   container. This parameter maps to <tt>Hostname</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--hostname</tt> option to <a>docker run</a>.
--   
--   The <tt>hostname</tt> parameter is not supported if you are using the
--   <tt>awsvpc</tt> network mode.
--   
--   <a>$sel:repositoryCredentials:ContainerDefinition'</a>,
--   <a>containerDefinition_repositoryCredentials</a> - The private
--   repository authentication credentials to use.
--   
--   <a>$sel:dockerSecurityOptions:ContainerDefinition'</a>,
--   <a>containerDefinition_dockerSecurityOptions</a> - A list of strings
--   to provide custom labels for SELinux and AppArmor multi-level security
--   systems. This field is not valid for containers in tasks using the
--   Fargate launch type.
--   
--   With Windows containers, this parameter can be used to reference a
--   credential spec file when configuring a container for Active Directory
--   authentication. For more information, see <a>Using gMSAs for Windows
--   Containers</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   This parameter maps to <tt>SecurityOpt</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--security-opt</tt> option to <a>docker run</a>.
--   
--   The Amazon ECS container agent running on a container instance must
--   register with the <tt>ECS_SELINUX_CAPABLE=true</tt> or
--   <tt>ECS_APPARMOR_CAPABLE=true</tt> environment variables before
--   containers placed on that instance can use these security options. For
--   more information, see <a>Amazon ECS Container Agent Configuration</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For more information about valid values, see <a>Docker Run Security
--   Configuration</a>.
--   
--   Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value"
--   | "credentialspec:CredentialSpecFilePath"
--   
--   <a>$sel:healthCheck:ContainerDefinition'</a>,
--   <a>containerDefinition_healthCheck</a> - The container health check
--   command and associated configuration parameters for the container.
--   This parameter maps to <tt>HealthCheck</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>HEALTHCHECK</tt> parameter of <a>docker run</a>.
--   
--   <a>$sel:disableNetworking:ContainerDefinition'</a>,
--   <a>containerDefinition_disableNetworking</a> - When this parameter is
--   true, networking is disabled within the container. This parameter maps
--   to <tt>NetworkDisabled</tt> in the <a>Create a container</a> section
--   of the <a>Docker Remote API</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:secrets:ContainerDefinition'</a>,
--   <a>containerDefinition_secrets</a> - The secrets to pass to the
--   container. For more information, see <a>Specifying Sensitive Data</a>
--   in the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:volumesFrom:ContainerDefinition'</a>,
--   <a>containerDefinition_volumesFrom</a> - Data volumes to mount from
--   another container. This parameter maps to <tt>VolumesFrom</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--volumes-from</tt> option to <a>docker run</a>.
--   
--   <a>$sel:environment:ContainerDefinition'</a>,
--   <a>containerDefinition_environment</a> - The environment variables to
--   pass to a container. This parameter maps to <tt>Env</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--env</tt> option to <a>docker run</a>.
--   
--   We do not recommend using plaintext environment variables for
--   sensitive information, such as credential data.
--   
--   <a>$sel:environmentFiles:ContainerDefinition'</a>,
--   <a>containerDefinition_environmentFiles</a> - A list of files
--   containing the environment variables to pass to a container. This
--   parameter maps to the <tt>--env-file</tt> option to <a>docker run</a>.
--   
--   You can specify up to ten environment files. The file must have a
--   <tt>.env</tt> file extension. Each line in an environment file should
--   contain an environment variable in <tt>VARIABLE=VALUE</tt> format.
--   Lines beginning with <tt>#</tt> are treated as comments and are
--   ignored. For more information on the environment variable file syntax,
--   see <a>Declare default environment variables in file</a>.
--   
--   If there are environment variables specified using the
--   <tt>environment</tt> parameter in a container definition, they take
--   precedence over the variables contained within an environment file. If
--   multiple environment files are specified that contain the same
--   variable, they are processed from the top down. It is recommended to
--   use unique variable names. For more information, see <a>Specifying
--   Environment Variables</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <a>$sel:entryPoint:ContainerDefinition'</a>,
--   <a>containerDefinition_entryPoint</a> - Early versions of the Amazon
--   ECS container agent do not properly handle <tt>entryPoint</tt>
--   parameters. If you have problems using <tt>entryPoint</tt>, update
--   your container agent or enter your commands and arguments as
--   <tt>command</tt> array items instead.
--   
--   The entry point that is passed to the container. This parameter maps
--   to <tt>Entrypoint</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--entrypoint</tt> option to
--   <a>docker run</a>. For more information, see
--   <a>https://docs.docker.com/engine/reference/builder/#entrypoint</a>.
--   
--   <a>$sel:workingDirectory:ContainerDefinition'</a>,
--   <a>containerDefinition_workingDirectory</a> - The working directory in
--   which to run commands inside the container. This parameter maps to
--   <tt>WorkingDir</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--workdir</tt> option to
--   <a>docker run</a>.
--   
--   <a>$sel:ulimits:ContainerDefinition'</a>,
--   <a>containerDefinition_ulimits</a> - A list of <tt>ulimits</tt> to set
--   in the container. If a ulimit value is specified in a task definition,
--   it will override the default values set by Docker. This parameter maps
--   to <tt>Ulimits</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--ulimit</tt> option to <a>docker
--   run</a>. Valid naming values are displayed in the Ulimit data type.
--   
--   Amazon ECS tasks hosted on Fargate use the default resource limit
--   values set by the operating system with the exception of the
--   <tt>nofile</tt> resource limit parameter which Fargate overrides. The
--   <tt>nofile</tt> resource limit sets a restriction on the number of
--   open files that a container can use. The default <tt>nofile</tt> soft
--   limit is <tt>1024</tt> and hard limit is <tt>4096</tt>.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:stopTimeout:ContainerDefinition'</a>,
--   <a>containerDefinition_stopTimeout</a> - Time duration (in seconds) to
--   wait before the container is forcefully killed if it doesn't exit
--   normally on its own.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version 1.3.0 or later. The max stop timeout value is 120
--   seconds and if the parameter is not specified, the default value of 30
--   seconds is used.
--   
--   For tasks using the EC2 launch type, if the <tt>stopTimeout</tt>
--   parameter is not specified, the value set for the Amazon ECS container
--   agent configuration variable <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> is
--   used by default. If neither the <tt>stopTimeout</tt> parameter or the
--   <tt>ECS_CONTAINER_STOP_TIMEOUT</tt> agent configuration variable are
--   set, then the default values of 30 seconds for Linux containers and 30
--   seconds on Windows containers are used. Your container instances
--   require at least version 1.26.0 of the container agent to enable a
--   container stop timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:privileged:ContainerDefinition'</a>,
--   <a>containerDefinition_privileged</a> - When this parameter is true,
--   the container is given elevated privileges on the host container
--   instance (similar to the <tt>root</tt> user). This parameter maps to
--   <tt>Privileged</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--privileged</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:portMappings:ContainerDefinition'</a>,
--   <a>containerDefinition_portMappings</a> - The list of port mappings
--   for the container. Port mappings allow containers to access ports on
--   the host container instance to send or receive traffic.
--   
--   For task definitions that use the <tt>awsvpc</tt> network mode, you
--   should only specify the <tt>containerPort</tt>. The <tt>hostPort</tt>
--   can be left blank or it must be the same value as the
--   <tt>containerPort</tt>.
--   
--   Port mappings on Windows use the <tt>NetNAT</tt> gateway address
--   rather than <tt>localhost</tt>. There is no loopback for port mappings
--   on Windows, so you cannot access a container's mapped port from the
--   host itself.
--   
--   This parameter maps to <tt>PortBindings</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--publish</tt> option to <a>docker run</a>. If the network mode of
--   a task definition is set to <tt>none</tt>, then you can't specify port
--   mappings. If the network mode of a task definition is set to
--   <tt>host</tt>, then host ports must either be undefined or they must
--   match the container port in the port mapping.
--   
--   After a task reaches the <tt>RUNNING</tt> status, manual and automatic
--   host and container port assignments are visible in the <b>Network
--   Bindings</b> section of a container description for a selected task in
--   the Amazon ECS console. The assignments are also visible in the
--   <tt>networkBindings</tt> section DescribeTasks responses.
--   
--   <a>$sel:resourceRequirements:ContainerDefinition'</a>,
--   <a>containerDefinition_resourceRequirements</a> - The type and amount
--   of a resource to assign to a container. The only supported resource is
--   a GPU.
--   
--   <a>$sel:dockerLabels:ContainerDefinition'</a>,
--   <a>containerDefinition_dockerLabels</a> - A key/value map of labels to
--   add to the container. This parameter maps to <tt>Labels</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--label</tt> option to <a>docker run</a>. This parameter
--   requires version 1.18 of the Docker Remote API or greater on your
--   container instance. To check the Docker Remote API version on your
--   container instance, log in to your container instance and run the
--   following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   <a>$sel:extraHosts:ContainerDefinition'</a>,
--   <a>containerDefinition_extraHosts</a> - A list of hostnames and IP
--   address mappings to append to the <tt>/etc/hosts</tt> file on the
--   container. This parameter maps to <tt>ExtraHosts</tt> in the <a>Create
--   a container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--add-host</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers or tasks that
--   use the <tt>awsvpc</tt> network mode.
--   
--   <a>$sel:memory:ContainerDefinition'</a>,
--   <a>containerDefinition_memory</a> - The amount (in MiB) of memory to
--   present to the container. If your container attempts to exceed the
--   memory specified here, the container is killed. The total amount of
--   memory reserved for all containers within a task must be lower than
--   the task <tt>memory</tt> value, if one is specified. This parameter
--   maps to <tt>Memory</tt> in the <a>Create a container</a> section of
--   the <a>Docker Remote API</a> and the <tt>--memory</tt> option to
--   <a>docker run</a>.
--   
--   If using the Fargate launch type, this parameter is optional.
--   
--   If using the EC2 launch type, you must specify either a task-level
--   memory value or a container-level memory value. If you specify both a
--   container-level <tt>memory</tt> and <tt>memoryReservation</tt> value,
--   <tt>memory</tt> must be greater than <tt>memoryReservation</tt>. If
--   you specify <tt>memoryReservation</tt>, then that value is subtracted
--   from the available memory resources for the container instance on
--   which the container is placed. Otherwise, the value of <tt>memory</tt>
--   is used.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
--   
--   <a>$sel:systemControls:ContainerDefinition'</a>,
--   <a>containerDefinition_systemControls</a> - A list of namespaced
--   kernel parameters to set in the container. This parameter maps to
--   <tt>Sysctls</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--sysctl</tt> option to <a>docker
--   run</a>.
--   
--   It is not recommended that you specify network-related
--   <tt>systemControls</tt> parameters for multiple containers in a single
--   task that also uses either the <tt>awsvpc</tt> or <tt>host</tt>
--   network modes. For tasks that use the <tt>awsvpc</tt> network mode,
--   the container that is started last determines which
--   <tt>systemControls</tt> parameters take effect. For tasks that use the
--   <tt>host</tt> network mode, it changes the container instance's
--   namespaced kernel parameters as well as the containers.
--   
--   <a>$sel:user:ContainerDefinition'</a>, <a>containerDefinition_user</a>
--   - The user to use inside the container. This parameter maps to
--   <tt>User</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--user</tt> option to <a>docker
--   run</a>.
--   
--   When running tasks using the <tt>host</tt> network mode, you should
--   not run containers using the root user (UID 0). It is considered best
--   practice to use a non-root user.
--   
--   You can specify the <tt>user</tt> using the following formats. If
--   specifying a UID or GID, you must specify it as a positive integer.
--   
--   <ul>
--   <li><pre>user</pre></li>
--   <li><pre>user:group</pre></li>
--   <li><pre>uid</pre></li>
--   <li><pre>uid:gid</pre></li>
--   <li><pre>user:gid</pre></li>
--   <li><pre>uid:group</pre></li>
--   </ul>
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:firelensConfiguration:ContainerDefinition'</a>,
--   <a>containerDefinition_firelensConfiguration</a> - The FireLens
--   configuration for the container. This is used to specify and configure
--   a log router for container logs. For more information, see <a>Custom
--   Log Routing</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:dnsSearchDomains:ContainerDefinition'</a>,
--   <a>containerDefinition_dnsSearchDomains</a> - A list of DNS search
--   domains that are presented to the container. This parameter maps to
--   <tt>DnsSearch</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--dns-search</tt> option to
--   <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:logConfiguration:ContainerDefinition'</a>,
--   <a>containerDefinition_logConfiguration</a> - The log configuration
--   specification for the container.
--   
--   This parameter maps to <tt>LogConfig</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--log-driver</tt> option to <a>docker run</a>. By default,
--   containers use the same logging driver that the Docker daemon uses.
--   However the container may use a different logging driver than the
--   Docker daemon by specifying a log driver with this parameter in the
--   container definition. To use a different logging driver for a
--   container, the log system must be configured properly on the container
--   instance (or on a different log server for remote logging options).
--   For more information on the options for different supported log
--   drivers, see <a>Configure logging drivers</a> in the Docker
--   documentation.
--   
--   Amazon ECS currently supports a subset of the logging drivers
--   available to the Docker daemon (shown in the LogConfiguration data
--   type). Additional log drivers may be available in future releases of
--   the Amazon ECS container agent.
--   
--   This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance. To check the Docker Remote API
--   version on your container instance, log in to your container instance
--   and run the following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   The Amazon ECS container agent running on a container instance must
--   register the logging drivers available on that instance with the
--   <tt>ECS_AVAILABLE_LOGGING_DRIVERS</tt> environment variable before
--   containers placed on that instance can use these log configuration
--   options. For more information, see <a>Amazon ECS Container Agent
--   Configuration</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:linuxParameters:ContainerDefinition'</a>,
--   <a>containerDefinition_linuxParameters</a> - Linux-specific
--   modifications that are applied to the container, such as Linux kernel
--   capabilities. For more information see KernelCapabilities.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:pseudoTerminal:ContainerDefinition'</a>,
--   <a>containerDefinition_pseudoTerminal</a> - When this parameter is
--   <tt>true</tt>, a TTY is allocated. This parameter maps to <tt>Tty</tt>
--   in the <a>Create a container</a> section of the <a>Docker Remote
--   API</a> and the <tt>--tty</tt> option to <a>docker run</a>.
--   
--   <a>$sel:dependsOn:ContainerDefinition'</a>,
--   <a>containerDefinition_dependsOn</a> - The dependencies defined for
--   container startup and shutdown. A container can contain multiple
--   dependencies. When a dependency is defined for container startup, for
--   container shutdown it is reversed.
--   
--   For tasks using the EC2 launch type, the container instances require
--   at least version 1.26.0 of the container agent to enable container
--   dependencies. However, we recommend using the latest container agent
--   version. For information about checking your agent version and
--   updating to the latest version, see <a>Updating the Amazon ECS
--   Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For tasks using the Fargate launch type, the task or service requires
--   platform version <tt>1.3.0</tt> or later.
--   
--   <a>$sel:name:ContainerDefinition'</a>, <a>containerDefinition_name</a>
--   - The name of a container. If you are linking multiple containers
--   together in a task definition, the <tt>name</tt> of one container can
--   be entered in the <tt>links</tt> of another container to connect the
--   containers. Up to 255 letters (uppercase and lowercase), numbers,
--   underscores, and hyphens are allowed. This parameter maps to
--   <tt>name</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--name</tt> option to <a>docker
--   run</a>.
--   
--   <a>$sel:dnsServers:ContainerDefinition'</a>,
--   <a>containerDefinition_dnsServers</a> - A list of DNS servers that are
--   presented to the container. This parameter maps to <tt>Dns</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--dns</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:mountPoints:ContainerDefinition'</a>,
--   <a>containerDefinition_mountPoints</a> - The mount points for data
--   volumes in your container.
--   
--   This parameter maps to <tt>Volumes</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--volume</tt> option to <a>docker run</a>.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives.
--   
--   <a>$sel:interactive:ContainerDefinition'</a>,
--   <a>containerDefinition_interactive</a> - When this parameter is
--   <tt>true</tt>, this allows you to deploy containerized applications
--   that require <tt>stdin</tt> or a <tt>tty</tt> to be allocated. This
--   parameter maps to <tt>OpenStdin</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--interactive</tt>
--   option to <a>docker run</a>.
--   
--   <a>$sel:startTimeout:ContainerDefinition'</a>,
--   <a>containerDefinition_startTimeout</a> - Time duration (in seconds)
--   to wait before giving up on resolving dependencies for a container.
--   For example, you specify two containers in a task definition with
--   containerA having a dependency on containerB reaching a
--   <tt>COMPLETE</tt>, <tt>SUCCESS</tt>, or <tt>HEALTHY</tt> status. If a
--   <tt>startTimeout</tt> value is specified for containerB and it does
--   not reach the desired status within that time then containerA will
--   give up and not start. This results in the task transitioning to a
--   <tt>STOPPED</tt> state.
--   
--   When the <tt>ECS_CONTAINER_START_TIMEOUT</tt> container agent
--   configuration variable is used, it is enforced indendently from this
--   start timeout value.
--   
--   For tasks using the Fargate launch type, this parameter requires that
--   the task or service uses platform version 1.3.0 or later.
--   
--   For tasks using the EC2 launch type, your container instances require
--   at least version <tt>1.26.0</tt> of the container agent to enable a
--   container start timeout value. However, we recommend using the latest
--   container agent version. For information about checking your agent
--   version and updating to the latest version, see <a>Updating the Amazon
--   ECS Container Agent</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>. If you are using an Amazon ECS-optimized Linux
--   AMI, your instance needs at least version <tt>1.26.0-1</tt> of the
--   <tt>ecs-init</tt> package. If your container instances are launched
--   from version <tt>20190301</tt> or later, then they contain the
--   required versions of the container agent and <tt>ecs-init</tt>. For
--   more information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:links:ContainerDefinition'</a>,
--   <a>containerDefinition_links</a> - The <tt>links</tt> parameter allows
--   containers to communicate with each other without the need for port
--   mappings. This parameter is only supported if the network mode of a
--   task definition is <tt>bridge</tt>. The <tt>name:internalName</tt>
--   construct is analogous to <tt>name:alias</tt> in Docker links. Up to
--   255 letters (uppercase and lowercase), numbers, underscores, and
--   hyphens are allowed. For more information about linking Docker
--   containers, go to <a>Legacy container links</a> in the Docker
--   documentation. This parameter maps to <tt>Links</tt> in the <a>Create
--   a container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--link</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   Containers that are collocated on a single container instance may be
--   able to communicate with each other without requiring links or host
--   port mappings. Network isolation is achieved on the container instance
--   using security groups and VPC settings.
--   
--   <a>$sel:readonlyRootFilesystem:ContainerDefinition'</a>,
--   <a>containerDefinition_readonlyRootFilesystem</a> - When this
--   parameter is true, the container is given read-only access to its root
--   file system. This parameter maps to <tt>ReadonlyRootfs</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a> and
--   the <tt>--read-only</tt> option to <a>docker run</a>.
--   
--   This parameter is not supported for Windows containers.
--   
--   <a>$sel:essential:ContainerDefinition'</a>,
--   <a>containerDefinition_essential</a> - If the <tt>essential</tt>
--   parameter of a container is marked as <tt>true</tt>, and that
--   container fails or stops for any reason, all other containers that are
--   part of the task are stopped. If the <tt>essential</tt> parameter of a
--   container is marked as <tt>false</tt>, then its failure does not
--   affect the rest of the containers in a task. If this parameter is
--   omitted, a container is assumed to be essential.
--   
--   All tasks must have at least one essential container. If you have an
--   application that is composed of multiple containers, you should group
--   containers that are used for a common purpose into components, and
--   separate the different components into multiple task definitions. For
--   more information, see <a>Application Architecture</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:cpu:ContainerDefinition'</a>, <a>containerDefinition_cpu</a> -
--   The number of <tt>cpu</tt> units reserved for the container. This
--   parameter maps to <tt>CpuShares</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--cpu-shares</tt>
--   option to <a>docker run</a>.
--   
--   This field is optional for tasks using the Fargate launch type, and
--   the only requirement is that the total amount of CPU reserved for all
--   containers within a task be lower than the task-level <tt>cpu</tt>
--   value.
--   
--   You can determine the number of CPU units that are available per EC2
--   instance type by multiplying the vCPUs listed for that instance type
--   on the <a>Amazon EC2 Instances</a> detail page by 1,024.
--   
--   Linux containers share unallocated CPU units with other containers on
--   the container instance with the same ratio as their allocated amount.
--   For example, if you run a single-container task on a single-core
--   instance type with 512 CPU units specified for that container, and
--   that is the only task running on the container instance, that
--   container could use the full 1,024 CPU unit share at any given time.
--   However, if you launched another copy of the same task on that
--   container instance, each task would be guaranteed a minimum of 512 CPU
--   units when needed, and each container could float to higher CPU usage
--   if the other container was not using it, but if both tasks were 100%
--   active all of the time, they would be limited to 512 CPU units.
--   
--   On Linux container instances, the Docker daemon on the container
--   instance uses the CPU value to calculate the relative CPU share ratios
--   for running containers. For more information, see <a>CPU share
--   constraint</a> in the Docker documentation. The minimum valid CPU
--   share value that the Linux kernel allows is 2. However, the CPU
--   parameter is not required, and you can use CPU values below 2 in your
--   container definitions. For CPU values below 2 (including null), the
--   behavior varies based on your Amazon ECS container agent version:
--   
--   <ul>
--   <li><b>Agent versions less than or equal to 1.1.0:</b> Null and zero
--   CPU values are passed to Docker as 0, which Docker then converts to
--   1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the
--   Linux kernel converts to two CPU shares.</li>
--   <li><b>Agent versions greater than or equal to 1.2.0:</b> Null, zero,
--   and CPU values of 1 are passed to Docker as 2.</li>
--   </ul>
--   
--   On Windows container instances, the CPU limit is enforced as an
--   absolute limit, or a quota. Windows containers only have access to the
--   specified amount of CPU that is described in the task definition. A
--   null or zero CPU value is passed to Docker as <tt>0</tt>, which
--   Windows interprets as 1% of one CPU.
--   
--   <a>$sel:memoryReservation:ContainerDefinition'</a>,
--   <a>containerDefinition_memoryReservation</a> - The soft limit (in MiB)
--   of memory to reserve for the container. When system memory is under
--   heavy contention, Docker attempts to keep the container memory to this
--   soft limit. However, your container can consume more memory when it
--   needs to, up to either the hard limit specified with the
--   <tt>memory</tt> parameter (if applicable), or all of the available
--   memory on the container instance, whichever comes first. This
--   parameter maps to <tt>MemoryReservation</tt> in the <a>Create a
--   container</a> section of the <a>Docker Remote API</a> and the
--   <tt>--memory-reservation</tt> option to <a>docker run</a>.
--   
--   If a task-level memory value is not specified, you must specify a
--   non-zero integer for one or both of <tt>memory</tt> or
--   <tt>memoryReservation</tt> in a container definition. If you specify
--   both, <tt>memory</tt> must be greater than <tt>memoryReservation</tt>.
--   If you specify <tt>memoryReservation</tt>, then that value is
--   subtracted from the available memory resources for the container
--   instance on which the container is placed. Otherwise, the value of
--   <tt>memory</tt> is used.
--   
--   For example, if your container normally uses 128 MiB of memory, but
--   occasionally bursts to 256 MiB of memory for short periods of time,
--   you can set a <tt>memoryReservation</tt> of 128 MiB, and a
--   <tt>memory</tt> hard limit of 300 MiB. This configuration would allow
--   the container to only reserve 128 MiB of memory from the remaining
--   resources on the container instance, but also allow the container to
--   consume more memory resources when needed.
--   
--   The Docker daemon reserves a minimum of 4 MiB of memory for a
--   container, so you should not specify fewer than 4 MiB of memory for
--   your containers.
newContainerDefinition :: ContainerDefinition

-- | The dependencies defined for container startup and shutdown. A
--   container can contain multiple dependencies. When a dependency is
--   defined for container startup, for container shutdown it is reversed.
--   
--   Your Amazon ECS container instances require at least version 1.26.0 of
--   the container agent to enable container dependencies. However, we
--   recommend using the latest container agent version. For information
--   about checking your agent version and updating to the latest version,
--   see <a>Updating the Amazon ECS Container Agent</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>. If you are using an
--   Amazon ECS-optimized Linux AMI, your instance needs at least version
--   1.26.0-1 of the <tt>ecs-init</tt> package. If your container instances
--   are launched from version <tt>20190301</tt> or later, then they
--   contain the required versions of the container agent and
--   <tt>ecs-init</tt>. For more information, see <a>Amazon ECS-optimized
--   Linux AMI</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   For tasks using the Fargate launch type, this parameter requires that
--   the task or service uses platform version 1.3.0 or later.
--   
--   <i>See:</i> <a>newContainerDependency</a> smart constructor.
data ContainerDependency
ContainerDependency' :: Text -> ContainerCondition -> ContainerDependency

-- | Create a value of <a>ContainerDependency</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerName:ContainerDependency'</a>,
--   <a>containerDependency_containerName</a> - The name of a container.
--   
--   <a>$sel:condition:ContainerDependency'</a>,
--   <a>containerDependency_condition</a> - The dependency condition of the
--   container. The following are the available conditions and their
--   behavior:
--   
--   <ul>
--   <li><tt>START</tt> - This condition emulates the behavior of links and
--   volumes today. It validates that a dependent container is started
--   before permitting other containers to start.</li>
--   <li><tt>COMPLETE</tt> - This condition validates that a dependent
--   container runs to completion (exits) before permitting other
--   containers to start. This can be useful for nonessential containers
--   that run a script and then exit. This condition cannot be set on an
--   essential container.</li>
--   <li><tt>SUCCESS</tt> - This condition is the same as
--   <tt>COMPLETE</tt>, but it also requires that the container exits with
--   a <tt>zero</tt> status. This condition cannot be set on an essential
--   container.</li>
--   <li><tt>HEALTHY</tt> - This condition validates that the dependent
--   container passes its Docker health check before permitting other
--   containers to start. This requires that the dependent container has
--   health checks configured. This condition is confirmed only at task
--   startup.</li>
--   </ul>
newContainerDependency :: Text -> ContainerCondition -> ContainerDependency

-- | An EC2 instance that is running the Amazon ECS agent and has been
--   registered with a cluster.
--   
--   <i>See:</i> <a>newContainerInstance</a> smart constructor.
data ContainerInstance
ContainerInstance' :: Maybe Text -> Maybe [Attachment] -> Maybe Int -> Maybe [Resource] -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe VersionInfo -> Maybe AgentUpdateStatus -> Maybe [Attribute] -> Maybe Integer -> Maybe Int -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe [Tag] -> Maybe [Resource] -> ContainerInstance

-- | Create a value of <a>ContainerInstance</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ContainerInstance'</a>, <a>containerInstance_status</a>
--   - The status of the container instance. The valid values are
--   <tt>REGISTERING</tt>, <tt>REGISTRATION_FAILED</tt>, <tt>ACTIVE</tt>,
--   <tt>INACTIVE</tt>, <tt>DEREGISTERING</tt>, or <tt>DRAINING</tt>.
--   
--   If your account has opted in to the <tt>awsvpcTrunking</tt> account
--   setting, then any newly registered container instance will transition
--   to a <tt>REGISTERING</tt> status while the trunk elastic network
--   interface is provisioned for the instance. If the registration fails,
--   the instance will transition to a <tt>REGISTRATION_FAILED</tt> status.
--   You can describe the container instance and see the reason for failure
--   in the <tt>statusReason</tt> parameter. Once the container instance is
--   terminated, the instance transitions to a <tt>DEREGISTERING</tt>
--   status while the trunk elastic network interface is deprovisioned. The
--   instance then transitions to an <tt>INACTIVE</tt> status.
--   
--   The <tt>ACTIVE</tt> status indicates that the container instance can
--   accept tasks. The <tt>DRAINING</tt> indicates that new tasks are not
--   placed on the container instance and any service tasks running on the
--   container instance are removed if possible. For more information, see
--   <a>Container Instance Draining</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:attachments:ContainerInstance'</a>,
--   <a>containerInstance_attachments</a> - The resources attached to a
--   container instance, such as elastic network interfaces.
--   
--   <a>$sel:runningTasksCount:ContainerInstance'</a>,
--   <a>containerInstance_runningTasksCount</a> - The number of tasks on
--   the container instance that are in the <tt>RUNNING</tt> status.
--   
--   <a>$sel:remainingResources:ContainerInstance'</a>,
--   <a>containerInstance_remainingResources</a> - For CPU and memory
--   resource types, this parameter describes the remaining CPU and memory
--   that has not already been allocated to tasks and is therefore
--   available for new tasks. For port resource types, this parameter
--   describes the ports that were reserved by the Amazon ECS container
--   agent (at instance registration time) and any task containers that
--   have reserved port mappings on the host (with the <tt>host</tt> or
--   <tt>bridge</tt> network mode). Any port that is not specified here is
--   available for new tasks.
--   
--   <a>$sel:ec2InstanceId:ContainerInstance'</a>,
--   <a>containerInstance_ec2InstanceId</a> - The ID of the container
--   instance. For Amazon EC2 instances, this value is the Amazon EC2
--   instance ID. For external instances, this value is the Amazon Web
--   Services Systems Manager managed instance ID.
--   
--   <a>$sel:containerInstanceArn:ContainerInstance'</a>,
--   <a>containerInstance_containerInstanceArn</a> - The Amazon Resource
--   Name (ARN) of the container instance. The ARN contains the
--   <tt>arn:aws:ecs</tt> namespace, followed by the Region of the
--   container instance, the Amazon Web Services account ID of the
--   container instance owner, the <tt>container-instance</tt> namespace,
--   and then the container instance ID. For example,
--   <tt>arn:aws:ecs:region:aws_account_id:container-instance/container_instance_ID</tt>.
--   
--   <a>$sel:agentConnected:ContainerInstance'</a>,
--   <a>containerInstance_agentConnected</a> - This parameter returns
--   <tt>true</tt> if the agent is connected to Amazon ECS. Registered
--   instances with an agent that may be unhealthy or stopped return
--   <tt>false</tt>. Only instances connected to an agent can accept
--   placement requests.
--   
--   <a>$sel:versionInfo:ContainerInstance'</a>,
--   <a>containerInstance_versionInfo</a> - The version information for the
--   Amazon ECS container agent and Docker daemon running on the container
--   instance.
--   
--   <a>$sel:agentUpdateStatus:ContainerInstance'</a>,
--   <a>containerInstance_agentUpdateStatus</a> - The status of the most
--   recent agent update. If an update has never been requested, this value
--   is <tt>NULL</tt>.
--   
--   <a>$sel:attributes:ContainerInstance'</a>,
--   <a>containerInstance_attributes</a> - The attributes set for the
--   container instance, either by the Amazon ECS container agent at
--   instance registration or manually with the PutAttributes operation.
--   
--   <a>$sel:version:ContainerInstance'</a>,
--   <a>containerInstance_version</a> - The version counter for the
--   container instance. Every time a container instance experiences a
--   change that triggers a CloudWatch event, the version counter is
--   incremented. If you are replicating your Amazon ECS container instance
--   state with CloudWatch Events, you can compare the version of a
--   container instance reported by the Amazon ECS APIs with the version
--   reported in CloudWatch Events for the container instance (inside the
--   <tt>detail</tt> object) to verify that the version in your event
--   stream is current.
--   
--   <a>$sel:pendingTasksCount:ContainerInstance'</a>,
--   <a>containerInstance_pendingTasksCount</a> - The number of tasks on
--   the container instance that are in the <tt>PENDING</tt> status.
--   
--   <a>$sel:capacityProviderName:ContainerInstance'</a>,
--   <a>containerInstance_capacityProviderName</a> - The capacity provider
--   associated with the container instance.
--   
--   <a>$sel:registeredAt:ContainerInstance'</a>,
--   <a>containerInstance_registeredAt</a> - The Unix timestamp for when
--   the container instance was registered.
--   
--   <a>$sel:statusReason:ContainerInstance'</a>,
--   <a>containerInstance_statusReason</a> - The reason that the container
--   instance reached its current status.
--   
--   <a>$sel:tags:ContainerInstance'</a>, <a>containerInstance_tags</a> -
--   The metadata that you apply to the container instance to help you
--   categorize and organize them. Each tag consists of a key and an
--   optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:registeredResources:ContainerInstance'</a>,
--   <a>containerInstance_registeredResources</a> - For CPU and memory
--   resource types, this parameter describes the amount of each resource
--   that was available on the container instance when the container agent
--   registered it with Amazon ECS. This value represents the total amount
--   of CPU and memory that can be allocated on this container instance to
--   tasks. For port resource types, this parameter describes the ports
--   that were reserved by the Amazon ECS container agent when it
--   registered the container instance with Amazon ECS.
newContainerInstance :: ContainerInstance

-- | The overrides that should be sent to a container. An empty container
--   override can be passed in. An example of an empty container override
--   would be <tt>{"containerOverrides": [ ] }</tt>. If a non-empty
--   container override is specified, the <tt>name</tt> parameter must be
--   included.
--   
--   <i>See:</i> <a>newContainerOverride</a> smart constructor.
data ContainerOverride
ContainerOverride' :: Maybe [Text] -> Maybe [KeyValuePair] -> Maybe [EnvironmentFile] -> Maybe [ResourceRequirement] -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe Int -> ContainerOverride

-- | Create a value of <a>ContainerOverride</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:command:ContainerOverride'</a>,
--   <a>containerOverride_command</a> - The command to send to the
--   container that overrides the default command from the Docker image or
--   the task definition. You must also specify a container name.
--   
--   <a>$sel:environment:ContainerOverride'</a>,
--   <a>containerOverride_environment</a> - The environment variables to
--   send to the container. You can add new environment variables, which
--   are added to the container at launch, or you can override the existing
--   environment variables from the Docker image or the task definition.
--   You must also specify a container name.
--   
--   <a>$sel:environmentFiles:ContainerOverride'</a>,
--   <a>containerOverride_environmentFiles</a> - A list of files containing
--   the environment variables to pass to a container, instead of the value
--   from the container definition.
--   
--   <a>$sel:resourceRequirements:ContainerOverride'</a>,
--   <a>containerOverride_resourceRequirements</a> - The type and amount of
--   a resource to assign to a container, instead of the default value from
--   the task definition. The only supported resource is a GPU.
--   
--   <a>$sel:memory:ContainerOverride'</a>, <a>containerOverride_memory</a>
--   - The hard limit (in MiB) of memory to present to the container,
--   instead of the default value from the task definition. If your
--   container attempts to exceed the memory specified here, the container
--   is killed. You must also specify a container name.
--   
--   <a>$sel:name:ContainerOverride'</a>, <a>containerOverride_name</a> -
--   The name of the container that receives the override. This parameter
--   is required if any override is specified.
--   
--   <a>$sel:cpu:ContainerOverride'</a>, <a>containerOverride_cpu</a> - The
--   number of <tt>cpu</tt> units reserved for the container, instead of
--   the default value from the task definition. You must also specify a
--   container name.
--   
--   <a>$sel:memoryReservation:ContainerOverride'</a>,
--   <a>containerOverride_memoryReservation</a> - The soft limit (in MiB)
--   of memory to reserve for the container, instead of the default value
--   from the task definition. You must also specify a container name.
newContainerOverride :: ContainerOverride

-- | Details on a service within a cluster
--   
--   <i>See:</i> <a>newContainerService</a> smart constructor.
data ContainerService
ContainerService' :: Maybe [TaskSet] -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe PropagateTags -> Maybe POSIX -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe [LoadBalancer] -> Maybe Int -> Maybe [PlacementConstraint] -> Maybe [ServiceEvent] -> Maybe [PlacementStrategy] -> Maybe [Deployment] -> Maybe Text -> Maybe DeploymentController -> Maybe LaunchType -> Maybe Text -> Maybe Text -> Maybe SchedulingStrategy -> Maybe Int -> Maybe NetworkConfiguration -> Maybe [ServiceRegistry] -> Maybe [CapacityProviderStrategyItem] -> Maybe Bool -> Maybe [Tag] -> Maybe Text -> Maybe DeploymentConfiguration -> ContainerService

-- | Create a value of <a>ContainerService</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:taskSets:ContainerService'</a>,
--   <a>containerService_taskSets</a> - Information about a set of Amazon
--   ECS tasks in either an CodeDeploy or an <tt>EXTERNAL</tt> deployment.
--   An Amazon ECS task set includes details such as the desired number of
--   tasks, how many tasks are running, and whether the task set serves
--   production traffic.
--   
--   <a>$sel:runningCount:ContainerService'</a>,
--   <a>containerService_runningCount</a> - The number of tasks in the
--   cluster that are in the <tt>RUNNING</tt> state.
--   
--   <a>$sel:status:ContainerService'</a>, <a>containerService_status</a> -
--   The status of the service. The valid values are <tt>ACTIVE</tt>,
--   <tt>DRAINING</tt>, or <tt>INACTIVE</tt>.
--   
--   <a>$sel:clusterArn:ContainerService'</a>,
--   <a>containerService_clusterArn</a> - The Amazon Resource Name (ARN) of
--   the cluster that hosts the service.
--   
--   <a>$sel:propagateTags:ContainerService'</a>,
--   <a>containerService_propagateTags</a> - Specifies whether to propagate
--   the tags from the task definition or the service to the task. If no
--   value is specified, the tags are not propagated.
--   
--   <a>$sel:createdAt:ContainerService'</a>,
--   <a>containerService_createdAt</a> - The Unix timestamp for when the
--   service was created.
--   
--   <a>$sel:platformVersion:ContainerService'</a>,
--   <a>containerService_platformVersion</a> - The platform version on
--   which to run your service. A platform version is only specified for
--   tasks hosted on Fargate. If one is not specified, the <tt>LATEST</tt>
--   platform version is used by default. For more information, see
--   <a>Fargate Platform Versions</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:enableECSManagedTags:ContainerService'</a>,
--   <a>containerService_enableECSManagedTags</a> - Specifies whether to
--   enable Amazon ECS managed tags for the tasks in the service. For more
--   information, see <a>Tagging Your Amazon ECS Resources</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:createdBy:ContainerService'</a>,
--   <a>containerService_createdBy</a> - The principal that created the
--   service.
--   
--   <a>$sel:desiredCount:ContainerService'</a>,
--   <a>containerService_desiredCount</a> - The desired number of
--   instantiations of the task definition to keep running on the service.
--   This value is specified when the service is created with
--   CreateService, and it can be modified with UpdateService.
--   
--   <a>$sel:loadBalancers:ContainerService'</a>,
--   <a>containerService_loadBalancers</a> - A list of Elastic Load
--   Balancing load balancer objects, containing the load balancer name,
--   the container name (as it appears in a container definition), and the
--   container port to access from the load balancer.
--   
--   <a>$sel:pendingCount:ContainerService'</a>,
--   <a>containerService_pendingCount</a> - The number of tasks in the
--   cluster that are in the <tt>PENDING</tt> state.
--   
--   <a>$sel:placementConstraints:ContainerService'</a>,
--   <a>containerService_placementConstraints</a> - The placement
--   constraints for the tasks in the service.
--   
--   <a>$sel:events:ContainerService'</a>, <a>containerService_events</a> -
--   The event stream for your service. A maximum of 100 of the latest
--   events are displayed.
--   
--   <a>$sel:placementStrategy:ContainerService'</a>,
--   <a>containerService_placementStrategy</a> - The placement strategy
--   that determines how tasks for the service are placed.
--   
--   <a>$sel:deployments:ContainerService'</a>,
--   <a>containerService_deployments</a> - The current state of deployments
--   for the service.
--   
--   <a>$sel:serviceName:ContainerService'</a>,
--   <a>containerService_serviceName</a> - The name of your service. Up to
--   255 letters (uppercase and lowercase), numbers, underscores, and
--   hyphens are allowed. Service names must be unique within a cluster,
--   but you can have similarly named services in multiple clusters within
--   a Region or across multiple Regions.
--   
--   <a>$sel:deploymentController:ContainerService'</a>,
--   <a>containerService_deploymentController</a> - The deployment
--   controller type the service is using. When using the DescribeServices
--   API, this field is omitted if the service is using the <tt>ECS</tt>
--   deployment controller type.
--   
--   <a>$sel:launchType:ContainerService'</a>,
--   <a>containerService_launchType</a> - The launch type the service is
--   using. When using the DescribeServices API, this field is omitted if
--   the service was created using a capacity provider strategy.
--   
--   <a>$sel:serviceArn:ContainerService'</a>,
--   <a>containerService_serviceArn</a> - The ARN that identifies the
--   service. The ARN contains the <tt>arn:aws:ecs</tt> namespace, followed
--   by the Region of the service, the Amazon Web Services account ID of
--   the service owner, the <tt>service</tt> namespace, and then the
--   service name. For example,
--   <tt>arn:aws:ecs:region:012345678910:service/my-service</tt>.
--   
--   <a>$sel:taskDefinition:ContainerService'</a>,
--   <a>containerService_taskDefinition</a> - The task definition to use
--   for tasks in the service. This value is specified when the service is
--   created with CreateService, and it can be modified with UpdateService.
--   
--   <a>$sel:schedulingStrategy:ContainerService'</a>,
--   <a>containerService_schedulingStrategy</a> - The scheduling strategy
--   to use for the service. For more information, see <a>Services</a>.
--   
--   There are two service scheduler strategies available:
--   
--   <ul>
--   <li><tt>REPLICA</tt>-The replica scheduling strategy places and
--   maintains the desired number of tasks across your cluster. By default,
--   the service scheduler spreads tasks across Availability Zones. You can
--   use task placement strategies and constraints to customize task
--   placement decisions.</li>
--   <li><tt>DAEMON</tt>-The daemon scheduling strategy deploys exactly one
--   task on each active container instance that meets all of the task
--   placement constraints that you specify in your cluster. The service
--   scheduler also evaluates the task placement constraints for running
--   tasks and will stop tasks that do not meet the placement
--   constraints.Fargate tasks do not support the <tt>DAEMON</tt>
--   scheduling strategy.</li>
--   </ul>
--   
--   <a>$sel:healthCheckGracePeriodSeconds:ContainerService'</a>,
--   <a>containerService_healthCheckGracePeriodSeconds</a> - The period of
--   time, in seconds, that the Amazon ECS service scheduler ignores
--   unhealthy Elastic Load Balancing target health checks after a task has
--   first started.
--   
--   <a>$sel:networkConfiguration:ContainerService'</a>,
--   <a>containerService_networkConfiguration</a> - The VPC subnet and
--   security group configuration for tasks that receive their own elastic
--   network interface by using the <tt>awsvpc</tt> networking mode.
--   
--   <a>$sel:serviceRegistries:ContainerService'</a>,
--   <a>containerService_serviceRegistries</a> - The details of the service
--   discovery registries to assign to this service. For more information,
--   see <a>Service Discovery</a>.
--   
--   <a>$sel:capacityProviderStrategy:ContainerService'</a>,
--   <a>containerService_capacityProviderStrategy</a> - The capacity
--   provider strategy the service is using. When using the
--   DescribeServices API, this field is omitted if the service was created
--   using a launch type.
--   
--   <a>$sel:enableExecuteCommand:ContainerService'</a>,
--   <a>containerService_enableExecuteCommand</a> - Whether or not the
--   execute command functionality is enabled for the service. If
--   <tt>true</tt>, the execute command functionality is enabled for all
--   containers in tasks as part of the service.
--   
--   <a>$sel:tags:ContainerService'</a>, <a>containerService_tags</a> - The
--   metadata that you apply to the service to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <a>$sel:roleArn:ContainerService'</a>, <a>containerService_roleArn</a>
--   - The ARN of the IAM role associated with the service that allows the
--   Amazon ECS container agent to register container instances with an
--   Elastic Load Balancing load balancer.
--   
--   <a>$sel:deploymentConfiguration:ContainerService'</a>,
--   <a>containerService_deploymentConfiguration</a> - Optional deployment
--   parameters that control how many tasks run during the deployment and
--   the ordering of stopping and starting tasks.
newContainerService :: ContainerService

-- | An object representing a change in state for a container.
--   
--   <i>See:</i> <a>newContainerStateChange</a> smart constructor.
data ContainerStateChange
ContainerStateChange' :: Maybe [NetworkBinding] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Text -> ContainerStateChange

-- | Create a value of <a>ContainerStateChange</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:networkBindings:ContainerStateChange'</a>,
--   <a>containerStateChange_networkBindings</a> - Any network bindings
--   associated with the container.
--   
--   <a>$sel:status:ContainerStateChange'</a>,
--   <a>containerStateChange_status</a> - The status of the container.
--   
--   <a>$sel:containerName:ContainerStateChange'</a>,
--   <a>containerStateChange_containerName</a> - The name of the container.
--   
--   <a>$sel:reason:ContainerStateChange'</a>,
--   <a>containerStateChange_reason</a> - The reason for the state change.
--   
--   <a>$sel:imageDigest:ContainerStateChange'</a>,
--   <a>containerStateChange_imageDigest</a> - The container image SHA 256
--   digest.
--   
--   <a>$sel:exitCode:ContainerStateChange'</a>,
--   <a>containerStateChange_exitCode</a> - The exit code for the
--   container, if the state change is a result of the container exiting.
--   
--   <a>$sel:runtimeId:ContainerStateChange'</a>,
--   <a>containerStateChange_runtimeId</a> - The ID of the Docker
--   container.
newContainerStateChange :: ContainerStateChange

-- | The details of an Amazon ECS service deployment. This is used only
--   when a service uses the <tt>ECS</tt> deployment controller type.
--   
--   <i>See:</i> <a>newDeployment</a> smart constructor.
data Deployment
Deployment' :: Maybe DeploymentRolloutState -> Maybe Int -> Maybe Text -> Maybe POSIX -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe LaunchType -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe NetworkConfiguration -> Maybe [CapacityProviderStrategyItem] -> Deployment

-- | Create a value of <a>Deployment</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rolloutState:Deployment'</a>, <a>deployment_rolloutState</a> -
--   The <tt>rolloutState</tt> of a service is only returned for services
--   that use the rolling update (<tt>ECS</tt>) deployment type that are
--   not behind a Classic Load Balancer.
--   
--   The rollout state of the deployment. When a service deployment is
--   started, it begins in an <tt>IN_PROGRESS</tt> state. When the service
--   reaches a steady state, the deployment will transition to a
--   <tt>COMPLETED</tt> state. If the service fails to reach a steady state
--   and circuit breaker is enabled, the deployment will transition to a
--   <tt>FAILED</tt> state. A deployment in <tt>FAILED</tt> state will
--   launch no new tasks. For more information, see
--   DeploymentCircuitBreaker.
--   
--   <a>$sel:runningCount:Deployment'</a>, <a>deployment_runningCount</a> -
--   The number of tasks in the deployment that are in the <tt>RUNNING</tt>
--   status.
--   
--   <a>$sel:status:Deployment'</a>, <a>deployment_status</a> - The status
--   of the deployment. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The most recent deployment of a service.</li>
--   <li><i>ACTIVE</i> A service deployment that still has running tasks,
--   but are in the process of being replaced with a new <tt>PRIMARY</tt>
--   deployment.</li>
--   <li><i>INACTIVE</i> A deployment that has been completely
--   replaced.</li>
--   </ul>
--   
--   <a>$sel:createdAt:Deployment'</a>, <a>deployment_createdAt</a> - The
--   Unix timestamp for when the service deployment was created.
--   
--   <a>$sel:platformVersion:Deployment'</a>,
--   <a>deployment_platformVersion</a> - The platform version on which your
--   tasks in the service are running. A platform version is only specified
--   for tasks using the Fargate launch type. If one is not specified, the
--   <tt>LATEST</tt> platform version is used by default. For more
--   information, see <a>Fargate Platform Versions</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:desiredCount:Deployment'</a>, <a>deployment_desiredCount</a> -
--   The most recent desired count of tasks that was specified for the
--   service to deploy or maintain.
--   
--   <a>$sel:pendingCount:Deployment'</a>, <a>deployment_pendingCount</a> -
--   The number of tasks in the deployment that are in the <tt>PENDING</tt>
--   status.
--   
--   <a>$sel:id:Deployment'</a>, <a>deployment_id</a> - The ID of the
--   deployment.
--   
--   <a>$sel:failedTasks:Deployment'</a>, <a>deployment_failedTasks</a> -
--   The number of consecutively failed tasks in the deployment. A task is
--   considered a failure if the service scheduler can't launch the task,
--   the task doesn't transition to a <tt>RUNNING</tt> state, or if it
--   fails any of its defined health checks and is stopped.
--   
--   Once a service deployment has one or more successfully running tasks,
--   the failed task count resets to zero and stops being evaluated.
--   
--   <a>$sel:launchType:Deployment'</a>, <a>deployment_launchType</a> - The
--   launch type the tasks in the service are using. For more information,
--   see <a>Amazon ECS Launch Types</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:updatedAt:Deployment'</a>, <a>deployment_updatedAt</a> - The
--   Unix timestamp for when the service deployment was last updated.
--   
--   <a>$sel:taskDefinition:Deployment'</a>,
--   <a>deployment_taskDefinition</a> - The most recent task definition
--   that was specified for the tasks in the service to use.
--   
--   <a>$sel:rolloutStateReason:Deployment'</a>,
--   <a>deployment_rolloutStateReason</a> - A description of the rollout
--   state of a deployment.
--   
--   <a>$sel:networkConfiguration:Deployment'</a>,
--   <a>deployment_networkConfiguration</a> - The VPC subnet and security
--   group configuration for tasks that receive their own elastic network
--   interface by using the <tt>awsvpc</tt> networking mode.
--   
--   <a>$sel:capacityProviderStrategy:Deployment'</a>,
--   <a>deployment_capacityProviderStrategy</a> - The capacity provider
--   strategy that the deployment is using.
newDeployment :: Deployment

-- | The deployment circuit breaker can only be used for services using the
--   rolling update (<tt>ECS</tt>) deployment type that are not behind a
--   Classic Load Balancer.
--   
--   The <b>deployment circuit breaker</b> determines whether a service
--   deployment will fail if the service can't reach a steady state. If
--   enabled, a service deployment will transition to a failed state and
--   stop launching new tasks. You can also enable Amazon ECS to roll back
--   your service to the last completed deployment after a failure. For
--   more information, see <a>Rolling update</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newDeploymentCircuitBreaker</a> smart constructor.
data DeploymentCircuitBreaker
DeploymentCircuitBreaker' :: Bool -> Bool -> DeploymentCircuitBreaker

-- | Create a value of <a>DeploymentCircuitBreaker</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:enable:DeploymentCircuitBreaker'</a>,
--   <a>deploymentCircuitBreaker_enable</a> - Whether to enable the
--   deployment circuit breaker logic for the service.
--   
--   <a>$sel:rollback:DeploymentCircuitBreaker'</a>,
--   <a>deploymentCircuitBreaker_rollback</a> - Whether to enable Amazon
--   ECS to roll back the service if a service deployment fails. If
--   rollback is enabled, when a service deployment fails, the service is
--   rolled back to the last deployment that completed successfully.
newDeploymentCircuitBreaker :: Bool -> Bool -> DeploymentCircuitBreaker

-- | Optional deployment parameters that control how many tasks run during
--   a deployment and the ordering of stopping and starting tasks.
--   
--   <i>See:</i> <a>newDeploymentConfiguration</a> smart constructor.
data DeploymentConfiguration
DeploymentConfiguration' :: Maybe Int -> Maybe Int -> Maybe DeploymentCircuitBreaker -> DeploymentConfiguration

-- | Create a value of <a>DeploymentConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:minimumHealthyPercent:DeploymentConfiguration'</a>,
--   <a>deploymentConfiguration_minimumHealthyPercent</a> - If a service is
--   using the rolling update (<tt>ECS</tt>) deployment type, the
--   <b>minimum healthy percent</b> represents a lower limit on the number
--   of tasks in a service that must remain in the <tt>RUNNING</tt> state
--   during a deployment, as a percentage of the desired number of tasks
--   (rounded up to the nearest integer), and while any container instances
--   are in the <tt>DRAINING</tt> state if the service contains tasks using
--   the EC2 launch type. This parameter enables you to deploy without
--   using additional cluster capacity. For example, if your service has a
--   desired number of four tasks and a minimum healthy percent of 50%, the
--   scheduler may stop two existing tasks to free up cluster capacity
--   before starting two new tasks. Tasks for services that <i>do not</i>
--   use a load balancer are considered healthy if they are in the
--   <tt>RUNNING</tt> state; tasks for services that <i>do</i> use a load
--   balancer are considered healthy if they are in the <tt>RUNNING</tt>
--   state and they are reported as healthy by the load balancer. The
--   default value for minimum healthy percent is 100%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __minimum healthy percent__ value is set to the default
--   value and is used to define the lower limit on the number of the tasks
--   in the service that remain in the <tt>RUNNING</tt> state while the
--   container instances are in the <tt>DRAINING</tt> state. If the tasks
--   in the service use the Fargate launch type, the minimum healthy
--   percent value is not used, although it is returned when describing
--   your service.
--   
--   <a>$sel:maximumPercent:DeploymentConfiguration'</a>,
--   <a>deploymentConfiguration_maximumPercent</a> - If a service is using
--   the rolling update (<tt>ECS</tt>) deployment type, the <b>maximum
--   percent</b> parameter represents an upper limit on the number of tasks
--   in a service that are allowed in the <tt>RUNNING</tt> or
--   <tt>PENDING</tt> state during a deployment, as a percentage of the
--   desired number of tasks (rounded down to the nearest integer), and
--   while any container instances are in the <tt>DRAINING</tt> state if
--   the service contains tasks using the EC2 launch type. This parameter
--   enables you to define the deployment batch size. For example, if your
--   service has a desired number of four tasks and a maximum percent value
--   of 200%, the scheduler may start four new tasks before stopping the
--   four older tasks (provided that the cluster resources required to do
--   this are available). The default value for maximum percent is 200%.
--   
--   If a service is using the blue/green (<tt>CODE_DEPLOY</tt>) or
--   <tt>EXTERNAL</tt> deployment types and tasks that use the EC2 launch
--   type, the __maximum percent__ value is set to the default value and is
--   used to define the upper limit on the number of the tasks in the
--   service that remain in the <tt>RUNNING</tt> state while the container
--   instances are in the <tt>DRAINING</tt> state. If the tasks in the
--   service use the Fargate launch type, the maximum percent value is not
--   used, although it is returned when describing your service.
--   
--   <a>$sel:deploymentCircuitBreaker:DeploymentConfiguration'</a>,
--   <a>deploymentConfiguration_deploymentCircuitBreaker</a> - The
--   deployment circuit breaker can only be used for services using the
--   rolling update (<tt>ECS</tt>) deployment type.
--   
--   The <b>deployment circuit breaker</b> determines whether a service
--   deployment will fail if the service can't reach a steady state. If
--   deployment circuit breaker is enabled, a service deployment will
--   transition to a failed state and stop launching new tasks. If rollback
--   is enabled, when a service deployment fails, the service is rolled
--   back to the last deployment that completed successfully.
newDeploymentConfiguration :: DeploymentConfiguration

-- | The deployment controller to use for the service. For more
--   information, see <a>Amazon ECS Deployment Types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newDeploymentController</a> smart constructor.
data DeploymentController
DeploymentController' :: DeploymentControllerType -> DeploymentController

-- | Create a value of <a>DeploymentController</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':DeploymentController'</a>,
--   <a>deploymentController_type</a> - The deployment controller type to
--   use.
--   
--   There are three deployment controller types available:
--   
--   <ul>
--   <li><i>ECS</i> The rolling update (<tt>ECS</tt>) deployment type
--   involves replacing the current running version of the container with
--   the latest version. The number of containers Amazon ECS adds or
--   removes from the service during a rolling update is controlled by
--   adjusting the minimum and maximum number of healthy tasks allowed
--   during a service deployment, as specified in the
--   DeploymentConfiguration.</li>
--   <li><i>CODE_DEPLOY</i> The blue/green (<tt>CODE_DEPLOY</tt>)
--   deployment type uses the blue/green deployment model powered by
--   CodeDeploy, which allows you to verify a new deployment of a service
--   before sending production traffic to it.</li>
--   <li><i>EXTERNAL</i> The external (<tt>EXTERNAL</tt>) deployment type
--   enables you to use any third-party deployment controller for full
--   control over the deployment process for an Amazon ECS service.</li>
--   </ul>
newDeploymentController :: DeploymentControllerType -> DeploymentController

-- | An object representing a container instance host device.
--   
--   <i>See:</i> <a>newDevice</a> smart constructor.
data Device
Device' :: Maybe Text -> Maybe [DeviceCgroupPermission] -> Text -> Device

-- | Create a value of <a>Device</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerPath:Device'</a>, <a>device_containerPath</a> - The
--   path inside the container at which to expose the host device.
--   
--   <a>$sel:permissions:Device'</a>, <a>device_permissions</a> - The
--   explicit permissions to provide to the container for the device. By
--   default, the container has permissions for <tt>read</tt>,
--   <tt>write</tt>, and <tt>mknod</tt> for the device.
--   
--   <a>$sel:hostPath:Device'</a>, <a>device_hostPath</a> - The path for
--   the device on the host container instance.
newDevice :: Text -> Device

-- | This parameter is specified when you are using Docker volumes. Docker
--   volumes are only supported when you are using the EC2 launch type.
--   Windows containers only support the use of the <tt>local</tt> driver.
--   To use bind mounts, specify a <tt>host</tt> instead.
--   
--   <i>See:</i> <a>newDockerVolumeConfiguration</a> smart constructor.
data DockerVolumeConfiguration
DockerVolumeConfiguration' :: Maybe (HashMap Text Text) -> Maybe Text -> Maybe Scope -> Maybe (HashMap Text Text) -> Maybe Bool -> DockerVolumeConfiguration

-- | Create a value of <a>DockerVolumeConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:driverOpts:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_driverOpts</a> - A map of Docker
--   driver-specific options passed through. This parameter maps to
--   <tt>DriverOpts</tt> in the <a>Create a volume</a> section of the
--   <a>Docker Remote API</a> and the <tt>xxopt</tt> option to <a>docker
--   volume create</a>.
--   
--   <a>$sel:driver:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_driver</a> - The Docker volume driver to
--   use. The driver value must match the driver name provided by Docker
--   because it is used for task placement. If the driver was installed
--   using the Docker plugin CLI, use <tt>docker plugin ls</tt> to retrieve
--   the driver name from your container instance. If the driver was
--   installed using another method, use Docker plugin discovery to
--   retrieve the driver name. For more information, see <a>Docker plugin
--   discovery</a>. This parameter maps to <tt>Driver</tt> in the <a>Create
--   a volume</a> section of the <a>Docker Remote API</a> and the
--   <tt>xxdriver</tt> option to <a>docker volume create</a>.
--   
--   <a>$sel:scope:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_scope</a> - The scope for the Docker
--   volume that determines its lifecycle. Docker volumes that are scoped
--   to a <tt>task</tt> are automatically provisioned when the task starts
--   and destroyed when the task stops. Docker volumes that are scoped as
--   <tt>shared</tt> persist after the task stops.
--   
--   <a>$sel:labels:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_labels</a> - Custom metadata to add to
--   your Docker volume. This parameter maps to <tt>Labels</tt> in the
--   <a>Create a volume</a> section of the <a>Docker Remote API</a> and the
--   <tt>xxlabel</tt> option to <a>docker volume create</a>.
--   
--   <a>$sel:autoprovision:DockerVolumeConfiguration'</a>,
--   <a>dockerVolumeConfiguration_autoprovision</a> - If this value is
--   <tt>true</tt>, the Docker volume is created if it does not already
--   exist.
--   
--   This field is only used if the <tt>scope</tt> is <tt>shared</tt>.
newDockerVolumeConfiguration :: DockerVolumeConfiguration

-- | The authorization configuration details for the Amazon EFS file
--   system.
--   
--   <i>See:</i> <a>newEFSAuthorizationConfig</a> smart constructor.
data EFSAuthorizationConfig
EFSAuthorizationConfig' :: Maybe Text -> Maybe EFSAuthorizationConfigIAM -> EFSAuthorizationConfig

-- | Create a value of <a>EFSAuthorizationConfig</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:accessPointId:EFSAuthorizationConfig'</a>,
--   <a>eFSAuthorizationConfig_accessPointId</a> - The Amazon EFS access
--   point ID to use. If an access point is specified, the root directory
--   value specified in the <tt>EFSVolumeConfiguration</tt> must either be
--   omitted or set to <tt>/</tt> which will enforce the path set on the
--   EFS access point. If an access point is used, transit encryption must
--   be enabled in the <tt>EFSVolumeConfiguration</tt>. For more
--   information, see <a>Working with Amazon EFS Access Points</a> in the
--   <i>Amazon Elastic File System User Guide</i>.
--   
--   <a>$sel:iam:EFSAuthorizationConfig'</a>,
--   <a>eFSAuthorizationConfig_iam</a> - Whether or not to use the Amazon
--   ECS task IAM role defined in a task definition when mounting the
--   Amazon EFS file system. If enabled, transit encryption must be enabled
--   in the <tt>EFSVolumeConfiguration</tt>. If this parameter is omitted,
--   the default value of <tt>DISABLED</tt> is used. For more information,
--   see <a>Using Amazon EFS Access Points</a> in the <i>Amazon Elastic
--   Container Service Developer Guide</i>.
newEFSAuthorizationConfig :: EFSAuthorizationConfig

-- | This parameter is specified when you are using an Amazon Elastic File
--   System file system for task storage. For more information, see
--   <a>Amazon EFS Volumes</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <i>See:</i> <a>newEFSVolumeConfiguration</a> smart constructor.
data EFSVolumeConfiguration
EFSVolumeConfiguration' :: Maybe Text -> Maybe EFSTransitEncryption -> Maybe EFSAuthorizationConfig -> Maybe Int -> Text -> EFSVolumeConfiguration

-- | Create a value of <a>EFSVolumeConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:rootDirectory:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_rootDirectory</a> - The directory within the
--   Amazon EFS file system to mount as the root directory inside the host.
--   If this parameter is omitted, the root of the Amazon EFS volume will
--   be used. Specifying <tt>/</tt> will have the same effect as omitting
--   this parameter.
--   
--   If an EFS access point is specified in the
--   <tt>authorizationConfig</tt>, the root directory parameter must either
--   be omitted or set to <tt>/</tt> which will enforce the path set on the
--   EFS access point.
--   
--   <a>$sel:transitEncryption:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_transitEncryption</a> - Whether or not to
--   enable encryption for Amazon EFS data in transit between the Amazon
--   ECS host and the Amazon EFS server. Transit encryption must be enabled
--   if Amazon EFS IAM authorization is used. If this parameter is omitted,
--   the default value of <tt>DISABLED</tt> is used. For more information,
--   see <a>Encrypting Data in Transit</a> in the <i>Amazon Elastic File
--   System User Guide</i>.
--   
--   <a>$sel:authorizationConfig:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_authorizationConfig</a> - The authorization
--   configuration details for the Amazon EFS file system.
--   
--   <a>$sel:transitEncryptionPort:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_transitEncryptionPort</a> - The port to use
--   when sending encrypted data between the Amazon ECS host and the Amazon
--   EFS server. If you do not specify a transit encryption port, it will
--   use the port selection strategy that the Amazon EFS mount helper uses.
--   For more information, see <a>EFS Mount Helper</a> in the <i>Amazon
--   Elastic File System User Guide</i>.
--   
--   <a>$sel:fileSystemId:EFSVolumeConfiguration'</a>,
--   <a>eFSVolumeConfiguration_fileSystemId</a> - The Amazon EFS file
--   system ID to use.
newEFSVolumeConfiguration :: Text -> EFSVolumeConfiguration

-- | A list of files containing the environment variables to pass to a
--   container. You can specify up to ten environment files. The file must
--   have a <tt>.env</tt> file extension. Each line in an environment file
--   should contain an environment variable in <tt>VARIABLE=VALUE</tt>
--   format. Lines beginning with <tt>#</tt> are treated as comments and
--   are ignored. For more information on the environment variable file
--   syntax, see <a>Declare default environment variables in file</a>.
--   
--   If there are environment variables specified using the
--   <tt>environment</tt> parameter in a container definition, they take
--   precedence over the variables contained within an environment file. If
--   multiple environment files are specified that contain the same
--   variable, they are processed from the top down. It is recommended to
--   use unique variable names. For more information, see <a>Specifying
--   environment variables</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   This field is only valid for containers in Fargate tasks that use
--   platform version <tt>1.4.0</tt> or later.
--   
--   <i>See:</i> <a>newEnvironmentFile</a> smart constructor.
data EnvironmentFile
EnvironmentFile' :: Text -> EnvironmentFileType -> EnvironmentFile

-- | Create a value of <a>EnvironmentFile</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:EnvironmentFile'</a>, <a>environmentFile_value</a> - The
--   Amazon Resource Name (ARN) of the Amazon S3 object containing the
--   environment variable file.
--   
--   <a>$sel:type':EnvironmentFile'</a>, <a>environmentFile_type</a> - The
--   file type to use. The only supported value is <tt>s3</tt>.
newEnvironmentFile :: Text -> EnvironmentFileType -> EnvironmentFile

-- | The amount of ephemeral storage to allocate for the task. This
--   parameter is used to expand the total amount of ephemeral storage
--   available, beyond the default amount, for tasks hosted on Fargate. For
--   more information, see <a>Fargate task storage</a> in the <i>Amazon ECS
--   User Guide for Fargate</i>.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
--   
--   <i>See:</i> <a>newEphemeralStorage</a> smart constructor.
data EphemeralStorage
EphemeralStorage' :: Int -> EphemeralStorage

-- | Create a value of <a>EphemeralStorage</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sizeInGiB:EphemeralStorage'</a>,
--   <a>ephemeralStorage_sizeInGiB</a> - The total amount, in GiB, of
--   ephemeral storage to set for the task. The minimum supported value is
--   <tt>21</tt> GiB and the maximum supported value is <tt>200</tt> GiB.
newEphemeralStorage :: Int -> EphemeralStorage

-- | The details of the execute command configuration.
--   
--   <i>See:</i> <a>newExecuteCommandConfiguration</a> smart constructor.
data ExecuteCommandConfiguration
ExecuteCommandConfiguration' :: Maybe ExecuteCommandLogConfiguration -> Maybe Text -> Maybe ExecuteCommandLogging -> ExecuteCommandConfiguration

-- | Create a value of <a>ExecuteCommandConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:logConfiguration:ExecuteCommandConfiguration'</a>,
--   <a>executeCommandConfiguration_logConfiguration</a> - The log
--   configuration for the results of the execute command actions. The logs
--   can be sent to CloudWatch Logs or an Amazon S3 bucket. When
--   <tt>logging=OVERRIDE</tt> is specified, a <tt>logConfiguration</tt>
--   must be provided.
--   
--   <a>$sel:kmsKeyId:ExecuteCommandConfiguration'</a>,
--   <a>executeCommandConfiguration_kmsKeyId</a> - Specify an Key
--   Management Service key ID to encrypt the data between the local client
--   and the container.
--   
--   <a>$sel:logging:ExecuteCommandConfiguration'</a>,
--   <a>executeCommandConfiguration_logging</a> - The log setting to use
--   for redirecting logs for your execute command results. The following
--   log settings are available.
--   
--   <ul>
--   <li><tt>NONE</tt>: The execute command session is not logged.</li>
--   <li><tt>DEFAULT</tt>: The <tt>awslogs</tt> configuration in the task
--   definition is used. If no logging parameter is specified, it defaults
--   to this value. If no <tt>awslogs</tt> log driver is configured in the
--   task definition, the output won't be logged.</li>
--   <li><tt>OVERRIDE</tt>: Specify the logging details as a part of
--   <tt>logConfiguration</tt>. If the <tt>OVERRIDE</tt> logging option is
--   specified, the <tt>logConfiguration</tt> is required.</li>
--   </ul>
newExecuteCommandConfiguration :: ExecuteCommandConfiguration

-- | The log configuration for the results of the execute command actions.
--   The logs can be sent to CloudWatch Logs or an Amazon S3 bucket.
--   
--   <i>See:</i> <a>newExecuteCommandLogConfiguration</a> smart
--   constructor.
data ExecuteCommandLogConfiguration
ExecuteCommandLogConfiguration' :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> ExecuteCommandLogConfiguration

-- | Create a value of <a>ExecuteCommandLogConfiguration</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:cloudWatchLogGroupName:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_cloudWatchLogGroupName</a> - The
--   name of the CloudWatch log group to send logs to.
--   
--   The CloudWatch log group must already be created.
--   
--   <a>$sel:s3KeyPrefix:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_s3KeyPrefix</a> - An optional folder
--   in the S3 bucket to place logs in.
--   
--   
--   <a>$sel:cloudWatchEncryptionEnabled:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_cloudWatchEncryptionEnabled</a> -
--   Whether or not to enable encryption on the CloudWatch logs. If not
--   specified, encryption will be disabled.
--   
--   <a>$sel:s3EncryptionEnabled:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_s3EncryptionEnabled</a> - Whether or
--   not to enable encryption on the CloudWatch logs. If not specified,
--   encryption will be disabled.
--   
--   <a>$sel:s3BucketName:ExecuteCommandLogConfiguration'</a>,
--   <a>executeCommandLogConfiguration_s3BucketName</a> - The name of the
--   S3 bucket to send logs to.
--   
--   The S3 bucket must already be created.
newExecuteCommandLogConfiguration :: ExecuteCommandLogConfiguration

-- | The authorization configuration details for Amazon FSx for Windows
--   File Server file system. See
--   <a>FSxWindowsFileServerVolumeConfiguration</a> in the <i>Amazon
--   Elastic Container Service API Reference</i>.
--   
--   For more information and the input format, see <a>Amazon FSx for
--   Windows File Server Volumes</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newFSxWindowsFileServerAuthorizationConfig</a> smart
--   constructor.
data FSxWindowsFileServerAuthorizationConfig
FSxWindowsFileServerAuthorizationConfig' :: Text -> Text -> FSxWindowsFileServerAuthorizationConfig

-- | Create a value of <a>FSxWindowsFileServerAuthorizationConfig</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   
--   <a>$sel:credentialsParameter:FSxWindowsFileServerAuthorizationConfig'</a>,
--   <a>fSxWindowsFileServerAuthorizationConfig_credentialsParameter</a> -
--   The authorization credential option to use. The authorization
--   credential options can be provided using either the Amazon Resource
--   Name (ARN) of an Secrets Manager secret or SSM Parameter Store
--   parameter. The ARNs refer to the stored credentials.
--   
--   <a>$sel:domain:FSxWindowsFileServerAuthorizationConfig'</a>,
--   <a>fSxWindowsFileServerAuthorizationConfig_domain</a> - A fully
--   qualified domain name hosted by an <a>Directory Service</a> Managed
--   Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
newFSxWindowsFileServerAuthorizationConfig :: Text -> Text -> FSxWindowsFileServerAuthorizationConfig

-- | This parameter is specified when you are using <a>Amazon FSx for
--   Windows File Server</a> file system for task storage.
--   
--   For more information and the input format, see <a>Amazon FSx for
--   Windows File Server Volumes</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newFSxWindowsFileServerVolumeConfiguration</a> smart
--   constructor.
data FSxWindowsFileServerVolumeConfiguration
FSxWindowsFileServerVolumeConfiguration' :: Text -> Text -> FSxWindowsFileServerAuthorizationConfig -> FSxWindowsFileServerVolumeConfiguration

-- | Create a value of <a>FSxWindowsFileServerVolumeConfiguration</a> with
--   all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:fileSystemId:FSxWindowsFileServerVolumeConfiguration'</a>,
--   <a>fSxWindowsFileServerVolumeConfiguration_fileSystemId</a> - The
--   Amazon FSx for Windows File Server file system ID to use.
--   
--   <a>$sel:rootDirectory:FSxWindowsFileServerVolumeConfiguration'</a>,
--   <a>fSxWindowsFileServerVolumeConfiguration_rootDirectory</a> - The
--   directory within the Amazon FSx for Windows File Server file system to
--   mount as the root directory inside the host.
--   
--   
--   <a>$sel:authorizationConfig:FSxWindowsFileServerVolumeConfiguration'</a>,
--   <a>fSxWindowsFileServerVolumeConfiguration_authorizationConfig</a> -
--   The authorization configuration details for the Amazon FSx for Windows
--   File Server file system.
newFSxWindowsFileServerVolumeConfiguration :: Text -> Text -> FSxWindowsFileServerAuthorizationConfig -> FSxWindowsFileServerVolumeConfiguration

-- | A failed resource. For a list of common causes, see <a>API failure
--   reasons</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <i>See:</i> <a>newFailure</a> smart constructor.
data Failure
Failure' :: Maybe Text -> Maybe Text -> Maybe Text -> Failure

-- | Create a value of <a>Failure</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:arn:Failure'</a>, <a>failure_arn</a> - The Amazon Resource
--   Name (ARN) of the failed resource.
--   
--   <a>$sel:reason:Failure'</a>, <a>failure_reason</a> - The reason for
--   the failure.
--   
--   <a>$sel:detail:Failure'</a>, <a>failure_detail</a> - The details of
--   the failure.
newFailure :: Failure

-- | The FireLens configuration for the container. This is used to specify
--   and configure a log router for container logs. For more information,
--   see <a>Custom Log Routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newFirelensConfiguration</a> smart constructor.
data FirelensConfiguration
FirelensConfiguration' :: Maybe (HashMap Text Text) -> FirelensConfigurationType -> FirelensConfiguration

-- | Create a value of <a>FirelensConfiguration</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:options:FirelensConfiguration'</a>,
--   <a>firelensConfiguration_options</a> - The options to use when
--   configuring the log router. This field is optional and can be used to
--   specify a custom configuration file or to add additional metadata,
--   such as the task, task definition, cluster, and container instance
--   details to the log event. If specified, the syntax to use is
--   <tt>"options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}</tt>.
--   For more information, see <a>Creating a Task Definition that Uses a
--   FireLens Configuration</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   Tasks hosted on Fargate only support the <tt>file</tt> configuration
--   file type.
--   
--   <a>$sel:type':FirelensConfiguration'</a>,
--   <a>firelensConfiguration_type</a> - The log router to use. The valid
--   values are <tt>fluentd</tt> or <tt>fluentbit</tt>.
newFirelensConfiguration :: FirelensConfigurationType -> FirelensConfiguration

-- | An object representing a container health check. Health check
--   parameters that are specified in a container definition override any
--   Docker health checks that exist in the container image (such as those
--   specified in a parent image or from the image's Dockerfile).
--   
--   You can view the health status of both individual containers and a
--   task with the DescribeTasks API operation or when viewing the task
--   details in the console.
--   
--   The following describes the possible <tt>healthStatus</tt> values for
--   a container:
--   
--   <ul>
--   <li><tt>HEALTHY</tt>-The container health check has passed
--   successfully.</li>
--   <li><tt>UNHEALTHY</tt>-The container health check has failed.</li>
--   <li><tt>UNKNOWN</tt>-The container health check is being evaluated or
--   there is no container health check defined.</li>
--   </ul>
--   
--   The following describes the possible <tt>healthStatus</tt> values for
--   a task. The container health check status of nonessential containers
--   do not have an effect on the health status of a task.
--   
--   <ul>
--   <li><tt>HEALTHY</tt>-All essential containers within the task have
--   passed their health checks.</li>
--   <li><tt>UNHEALTHY</tt>-One or more essential containers have failed
--   their health check.</li>
--   <li><tt>UNKNOWN</tt>-The essential containers within the task are
--   still having their health checks evaluated or there are no container
--   health checks defined.</li>
--   </ul>
--   
--   If a task is run manually, and not as part of a service, the task will
--   continue its lifecycle regardless of its health status. For tasks that
--   are part of a service, if the task reports as unhealthy then the task
--   will be stopped and the service scheduler will replace it.
--   
--   The following are notes about container health check support:
--   
--   <ul>
--   <li>Container health checks require version 1.17.0 or greater of the
--   Amazon ECS container agent. For more information, see <a>Updating the
--   Amazon ECS Container Agent</a>.</li>
--   <li>Container health checks are supported for Fargate tasks if you are
--   using platform version 1.1.0 or greater. For more information, see
--   <a>Fargate Platform Versions</a>.</li>
--   <li>Container health checks are not supported for tasks that are part
--   of a service that is configured to use a Classic Load Balancer.</li>
--   </ul>
--   
--   <i>See:</i> <a>newHealthCheck</a> smart constructor.
data HealthCheck
HealthCheck' :: Maybe Int -> Maybe Int -> Maybe Int -> Maybe Int -> [Text] -> HealthCheck

-- | Create a value of <a>HealthCheck</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:startPeriod:HealthCheck'</a>, <a>healthCheck_startPeriod</a> -
--   The optional grace period within which to provide containers time to
--   bootstrap before failed health checks count towards the maximum number
--   of retries. You may specify between 0 and 300 seconds. The
--   <tt>startPeriod</tt> is disabled by default.
--   
--   If a health check succeeds within the <tt>startPeriod</tt>, then the
--   container is considered healthy and any subsequent failures count
--   toward the maximum number of retries.
--   
--   <a>$sel:retries:HealthCheck'</a>, <a>healthCheck_retries</a> - The
--   number of times to retry a failed health check before the container is
--   considered unhealthy. You may specify between 1 and 10 retries. The
--   default value is 3.
--   
--   <a>$sel:interval:HealthCheck'</a>, <a>healthCheck_interval</a> - The
--   time period in seconds between each health check execution. You may
--   specify between 5 and 300 seconds. The default value is 30 seconds.
--   
--   <a>$sel:timeout:HealthCheck'</a>, <a>healthCheck_timeout</a> - The
--   time period in seconds to wait for a health check to succeed before it
--   is considered a failure. You may specify between 2 and 60 seconds. The
--   default value is 5.
--   
--   <a>$sel:command:HealthCheck'</a>, <a>healthCheck_command</a> - A
--   string array representing the command that the container runs to
--   determine if it is healthy. The string array must start with
--   <tt>CMD</tt> to execute the command arguments directly, or
--   <tt>CMD-SHELL</tt> to run the command with the container's default
--   shell.
--   
--   When you use the Amazon Web Services Management Console JSON panel,
--   the Command Line Interface, or the APIs, you should enclose the list
--   of commands in brackets, as shown below.
--   
--   <pre>
--   [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
--   </pre>
--   
--   You do not need to include the brackets when you use the Amazon Web
--   Services Management Consoleas shown below.
--   
--   <pre>
--   "CMD-SHELL", "curl -f http://localhost/ || exit 1"
--   </pre>
--   
--   An exit code of 0 indicates success, and non-zero exit code indicates
--   failure. For more information, see <tt>HealthCheck</tt> in the
--   <a>Create a container</a> section of the <a>Docker Remote API</a>.
newHealthCheck :: HealthCheck

-- | Hostnames and IP address entries that are added to the
--   <tt>/etc/hosts</tt> file of a container via the <tt>extraHosts</tt>
--   parameter of its ContainerDefinition.
--   
--   <i>See:</i> <a>newHostEntry</a> smart constructor.
data HostEntry
HostEntry' :: Text -> Text -> HostEntry

-- | Create a value of <a>HostEntry</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:hostname:HostEntry'</a>, <a>hostEntry_hostname</a> - The
--   hostname to use in the <tt>/etc/hosts</tt> entry.
--   
--   <a>$sel:ipAddress:HostEntry'</a>, <a>hostEntry_ipAddress</a> - The IP
--   address to use in the <tt>/etc/hosts</tt> entry.
newHostEntry :: Text -> Text -> HostEntry

-- | Details on a container instance bind mount host volume.
--   
--   <i>See:</i> <a>newHostVolumeProperties</a> smart constructor.
data HostVolumeProperties
HostVolumeProperties' :: Maybe Text -> HostVolumeProperties

-- | Create a value of <a>HostVolumeProperties</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourcePath:HostVolumeProperties'</a>,
--   <a>hostVolumeProperties_sourcePath</a> - When the <tt>host</tt>
--   parameter is used, specify a <tt>sourcePath</tt> to declare the path
--   on the host container instance that is presented to the container. If
--   this parameter is empty, then the Docker daemon has assigned a host
--   path for you. If the <tt>host</tt> parameter contains a
--   <tt>sourcePath</tt> file location, then the data volume persists at
--   the specified location on the host container instance until you delete
--   it manually. If the <tt>sourcePath</tt> value does not exist on the
--   host container instance, the Docker daemon creates it. If the location
--   does exist, the contents of the source path folder are exported.
--   
--   If you are using the Fargate launch type, the <tt>sourcePath</tt>
--   parameter is not supported.
newHostVolumeProperties :: HostVolumeProperties

-- | Details on a Elastic Inference accelerator. For more information, see
--   <a>Working with Amazon Elastic Inference on Amazon ECS</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newInferenceAccelerator</a> smart constructor.
data InferenceAccelerator
InferenceAccelerator' :: Text -> Text -> InferenceAccelerator

-- | Create a value of <a>InferenceAccelerator</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deviceName:InferenceAccelerator'</a>,
--   <a>inferenceAccelerator_deviceName</a> - The Elastic Inference
--   accelerator device name. The <tt>deviceName</tt> must also be
--   referenced in a container definition as a ResourceRequirement.
--   
--   <a>$sel:deviceType:InferenceAccelerator'</a>,
--   <a>inferenceAccelerator_deviceType</a> - The Elastic Inference
--   accelerator type to use.
newInferenceAccelerator :: Text -> Text -> InferenceAccelerator

-- | Details on an Elastic Inference accelerator task override. This
--   parameter is used to override the Elastic Inference accelerator
--   specified in the task definition. For more information, see <a>Working
--   with Amazon Elastic Inference on Amazon ECS</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newInferenceAcceleratorOverride</a> smart constructor.
data InferenceAcceleratorOverride
InferenceAcceleratorOverride' :: Maybe Text -> Maybe Text -> InferenceAcceleratorOverride

-- | Create a value of <a>InferenceAcceleratorOverride</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:deviceName:InferenceAcceleratorOverride'</a>,
--   <a>inferenceAcceleratorOverride_deviceName</a> - The Elastic Inference
--   accelerator device name to override for the task. This parameter must
--   match a <tt>deviceName</tt> specified in the task definition.
--   
--   <a>$sel:deviceType:InferenceAcceleratorOverride'</a>,
--   <a>inferenceAcceleratorOverride_deviceType</a> - The Elastic Inference
--   accelerator type to use.
newInferenceAcceleratorOverride :: InferenceAcceleratorOverride

-- | The Linux capabilities for the container that are added to or dropped
--   from the default configuration provided by Docker. For more
--   information on the default capabilities and the non-default available
--   capabilities, see <a>Runtime privilege and Linux capabilities</a> in
--   the <i>Docker run reference</i>. For more detailed information on
--   these Linux capabilities, see the <a>capabilities(7)</a> Linux manual
--   page.
--   
--   <i>See:</i> <a>newKernelCapabilities</a> smart constructor.
data KernelCapabilities
KernelCapabilities' :: Maybe [Text] -> Maybe [Text] -> KernelCapabilities

-- | Create a value of <a>KernelCapabilities</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:drop:KernelCapabilities'</a>, <a>kernelCapabilities_drop</a> -
--   The Linux capabilities for the container that have been removed from
--   the default configuration provided by Docker. This parameter maps to
--   <tt>CapDrop</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-drop</tt> option to
--   <a>docker run</a>.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
--   
--   <a>$sel:add:KernelCapabilities'</a>, <a>kernelCapabilities_add</a> -
--   The Linux capabilities for the container that have been added to the
--   default configuration provided by Docker. This parameter maps to
--   <tt>CapAdd</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--cap-add</tt> option to
--   <a>docker run</a>.
--   
--   Tasks launched on Fargate only support adding the <tt>SYS_PTRACE</tt>
--   kernel capability.
--   
--   Valid values: <tt>"ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" |
--   "BLOCK_SUSPEND" | "CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" |
--   "FOWNER" | "FSETID" | "IPC_LOCK" | "IPC_OWNER" | "KILL" | "LEASE" |
--   "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" | "MKNOD" |
--   "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" |
--   "SETFCAP" | "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT"
--   | "SYS_CHROOT" | "SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" |
--   "SYS_PTRACE" | "SYS_RAWIO" | "SYS_RESOURCE" | "SYS_TIME" |
--   "SYS_TTY_CONFIG" | "SYSLOG" | "WAKE_ALARM"</tt>
newKernelCapabilities :: KernelCapabilities

-- | A key-value pair object.
--   
--   <i>See:</i> <a>newKeyValuePair</a> smart constructor.
data KeyValuePair
KeyValuePair' :: Maybe Text -> Maybe Text -> KeyValuePair

-- | Create a value of <a>KeyValuePair</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:KeyValuePair'</a>, <a>keyValuePair_value</a> - The value
--   of the key-value pair. For environment variables, this is the value of
--   the environment variable.
--   
--   <a>$sel:name:KeyValuePair'</a>, <a>keyValuePair_name</a> - The name of
--   the key-value pair. For environment variables, this is the name of the
--   environment variable.
newKeyValuePair :: KeyValuePair

-- | Linux-specific options that are applied to the container, such as
--   Linux KernelCapabilities.
--   
--   <i>See:</i> <a>newLinuxParameters</a> smart constructor.
data LinuxParameters
LinuxParameters' :: Maybe Int -> Maybe Bool -> Maybe [Tmpfs] -> Maybe Int -> Maybe [Device] -> Maybe KernelCapabilities -> Maybe Int -> LinuxParameters

-- | Create a value of <a>LinuxParameters</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sharedMemorySize:LinuxParameters'</a>,
--   <a>linuxParameters_sharedMemorySize</a> - The value for the size (in
--   MiB) of the <tt>/dev/shm</tt> volume. This parameter maps to the
--   <tt>--shm-size</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>sharedMemorySize</tt> parameter is not supported.
--   
--   <a>$sel:initProcessEnabled:LinuxParameters'</a>,
--   <a>linuxParameters_initProcessEnabled</a> - Run an <tt>init</tt>
--   process inside the container that forwards signals and reaps
--   processes. This parameter maps to the <tt>--init</tt> option to
--   <a>docker run</a>. This parameter requires version 1.25 of the Docker
--   Remote API or greater on your container instance. To check the Docker
--   Remote API version on your container instance, log in to your
--   container instance and run the following command: <tt>sudo docker
--   version --format '{{.Server.APIVersion}}'</tt>
--   
--   <a>$sel:tmpfs:LinuxParameters'</a>, <a>linuxParameters_tmpfs</a> - The
--   container path, mount options, and size (in MiB) of the tmpfs mount.
--   This parameter maps to the <tt>--tmpfs</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>tmpfs</tt> parameter is not supported.
--   
--   <a>$sel:swappiness:LinuxParameters'</a>,
--   <a>linuxParameters_swappiness</a> - This allows you to tune a
--   container's memory swappiness behavior. A <tt>swappiness</tt> value of
--   <tt>0</tt> will cause swapping to not happen unless absolutely
--   necessary. A <tt>swappiness</tt> value of <tt>100</tt> will cause
--   pages to be swapped very aggressively. Accepted values are whole
--   numbers between <tt>0</tt> and <tt>100</tt>. If the
--   <tt>swappiness</tt> parameter is not specified, a default value of
--   <tt>60</tt> is used. If a value is not specified for <tt>maxSwap</tt>
--   then this parameter is ignored. This parameter maps to the
--   <tt>--memory-swappiness</tt> option to <a>docker run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>swappiness</tt> parameter is not supported.
--   
--   <a>$sel:devices:LinuxParameters'</a>, <a>linuxParameters_devices</a> -
--   Any host devices to expose to the container. This parameter maps to
--   <tt>Devices</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--device</tt> option to <a>docker
--   run</a>.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>devices</tt> parameter is not supported.
--   
--   <a>$sel:capabilities:LinuxParameters'</a>,
--   <a>linuxParameters_capabilities</a> - The Linux capabilities for the
--   container that are added to or dropped from the default configuration
--   provided by Docker.
--   
--   For tasks that use the Fargate launch type, <tt>capabilities</tt> is
--   supported for all platform versions but the <tt>add</tt> parameter is
--   only supported if using platform version 1.4.0 or later.
--   
--   <a>$sel:maxSwap:LinuxParameters'</a>, <a>linuxParameters_maxSwap</a> -
--   The total amount of swap memory (in MiB) a container can use. This
--   parameter will be translated to the <tt>--memory-swap</tt> option to
--   <a>docker run</a> where the value would be the sum of the container
--   memory plus the <tt>maxSwap</tt> value.
--   
--   If a <tt>maxSwap</tt> value of <tt>0</tt> is specified, the container
--   will not use swap. Accepted values are <tt>0</tt> or any positive
--   integer. If the <tt>maxSwap</tt> parameter is omitted, the container
--   will use the swap configuration for the container instance it is
--   running on. A <tt>maxSwap</tt> value must be set for the
--   <tt>swappiness</tt> parameter to be used.
--   
--   If you are using tasks that use the Fargate launch type, the
--   <tt>maxSwap</tt> parameter is not supported.
newLinuxParameters :: LinuxParameters

-- | The load balancer configuration to use with a service or task set.
--   
--   For specific notes and restrictions regarding the use of load
--   balancers with services and task sets, see the CreateService and
--   CreateTaskSet actions.
--   
--   <i>See:</i> <a>newLoadBalancer</a> smart constructor.
data LoadBalancer
LoadBalancer' :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> LoadBalancer

-- | Create a value of <a>LoadBalancer</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:loadBalancerName:LoadBalancer'</a>,
--   <a>loadBalancer_loadBalancerName</a> - The name of the load balancer
--   to associate with the Amazon ECS service or task set.
--   
--   A load balancer name is only specified when using a Classic Load
--   Balancer. If you are using an Application Load Balancer or a Network
--   Load Balancer the load balancer name parameter should be omitted.
--   
--   <a>$sel:containerName:LoadBalancer'</a>,
--   <a>loadBalancer_containerName</a> - The name of the container (as it
--   appears in a container definition) to associate with the load
--   balancer.
--   
--   <a>$sel:targetGroupArn:LoadBalancer'</a>,
--   <a>loadBalancer_targetGroupArn</a> - The full Amazon Resource Name
--   (ARN) of the Elastic Load Balancing target group or groups associated
--   with a service or task set.
--   
--   A target group ARN is only specified when using an Application Load
--   Balancer or Network Load Balancer. If you are using a Classic Load
--   Balancer the target group ARN should be omitted.
--   
--   For services using the <tt>ECS</tt> deployment controller, you can
--   specify one or multiple target groups. For more information, see
--   <a>Registering Multiple Target Groups with a Service</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   For services using the <tt>CODE_DEPLOY</tt> deployment controller, you
--   are required to define two target groups for the load balancer. For
--   more information, see <a>Blue/Green Deployment with CodeDeploy</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If your service's task definition uses the <tt>awsvpc</tt> network
--   mode (which is required for the Fargate launch type), you must choose
--   <tt>ip</tt> as the target type, not <tt>instance</tt>, when creating
--   your target groups because tasks that use the <tt>awsvpc</tt> network
--   mode are associated with an elastic network interface, not an Amazon
--   EC2 instance.
--   
--   <a>$sel:containerPort:LoadBalancer'</a>,
--   <a>loadBalancer_containerPort</a> - The port on the container to
--   associate with the load balancer. This port must correspond to a
--   <tt>containerPort</tt> in the task definition the tasks in the service
--   are using. For tasks that use the EC2 launch type, the container
--   instance they are launched on must allow ingress traffic on the
--   <tt>hostPort</tt> of the port mapping.
newLoadBalancer :: LoadBalancer

-- | The log configuration for the container. This parameter maps to
--   <tt>LogConfig</tt> in the <a>Create a container</a> section of the
--   <a>Docker Remote API</a> and the <tt>--log-driver</tt> option to
--   <a>docker run</a> .
--   
--   By default, containers use the same logging driver that the Docker
--   daemon uses; however the container may use a different logging driver
--   than the Docker daemon by specifying a log driver configuration in the
--   container definition. For more information on the options for
--   different supported log drivers, see <a>Configure logging drivers</a>
--   in the Docker documentation.
--   
--   The following should be noted when specifying a log configuration for
--   your containers:
--   
--   <ul>
--   <li>Amazon ECS currently supports a subset of the logging drivers
--   available to the Docker daemon (shown in the valid values below).
--   Additional log drivers may be available in future releases of the
--   Amazon ECS container agent.</li>
--   <li>This parameter requires version 1.18 of the Docker Remote API or
--   greater on your container instance.</li>
--   <li>For tasks hosted on Amazon EC2 instances, the Amazon ECS container
--   agent must register the available logging drivers with the
--   <tt>ECS_AVAILABLE_LOGGING_DRIVERS</tt> environment variable before
--   containers placed on that instance can use these log configuration
--   options. For more information, see <a>Amazon ECS container agent
--   configuration</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.</li>
--   <li>For tasks on Fargate, because you do not have access to the
--   underlying infrastructure your tasks are hosted on, any additional
--   software needed will have to be installed outside of the task. For
--   example, the Fluentd output aggregators or a remote host running
--   Logstash to send Gelf logs to.</li>
--   </ul>
--   
--   <i>See:</i> <a>newLogConfiguration</a> smart constructor.
data LogConfiguration
LogConfiguration' :: Maybe (HashMap Text Text) -> Maybe [Secret] -> LogDriver -> LogConfiguration

-- | Create a value of <a>LogConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:options:LogConfiguration'</a>, <a>logConfiguration_options</a>
--   - The configuration options to send to the log driver. This parameter
--   requires version 1.19 of the Docker Remote API or greater on your
--   container instance. To check the Docker Remote API version on your
--   container instance, log in to your container instance and run the
--   following command: <tt>sudo docker version --format
--   '{{.Server.APIVersion}}'</tt>
--   
--   <a>$sel:secretOptions:LogConfiguration'</a>,
--   <a>logConfiguration_secretOptions</a> - The secrets to pass to the log
--   configuration. For more information, see <a>Specifying Sensitive
--   Data</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:logDriver:LogConfiguration'</a>,
--   <a>logConfiguration_logDriver</a> - The log driver to use for the
--   container.
--   
--   For tasks on Fargate, the supported log drivers are <tt>awslogs</tt>,
--   <tt>splunk</tt>, and <tt>awsfirelens</tt>.
--   
--   For tasks hosted on Amazon EC2 instances, the supported log drivers
--   are <tt>awslogs</tt>, <tt>fluentd</tt>, <tt>gelf</tt>,
--   <tt>json-file</tt>, <tt>journald</tt>,
--   <tt>logentries</tt>,<tt>syslog</tt>, <tt>splunk</tt>, and
--   <tt>awsfirelens</tt>.
--   
--   For more information about using the <tt>awslogs</tt> log driver, see
--   <a>Using the awslogs log driver</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   For more information about using the <tt>awsfirelens</tt> log driver,
--   see <a>Custom log routing</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   If you have a custom driver that is not listed, you can fork the
--   Amazon ECS container agent project that is <a>available on GitHub</a>
--   and customize it to work with that driver. We encourage you to submit
--   pull requests for changes that you would like to have included.
--   However, we do not currently provide support for running modified
--   copies of this software.
newLogConfiguration :: LogDriver -> LogConfiguration

-- | Details about the managed agent status for the container.
--   
--   <i>See:</i> <a>newManagedAgent</a> smart constructor.
data ManagedAgent
ManagedAgent' :: Maybe Text -> Maybe Text -> Maybe ManagedAgentName -> Maybe POSIX -> ManagedAgent

-- | Create a value of <a>ManagedAgent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:lastStatus:ManagedAgent'</a>, <a>managedAgent_lastStatus</a> -
--   The last known status of the managed agent.
--   
--   <a>$sel:reason:ManagedAgent'</a>, <a>managedAgent_reason</a> - The
--   reason for why the managed agent is in the state it is in.
--   
--   <a>$sel:name:ManagedAgent'</a>, <a>managedAgent_name</a> - The name of
--   the managed agent. When the execute command feature is enabled, the
--   managed agent name is <tt>ExecuteCommandAgent</tt>.
--   
--   <a>$sel:lastStartedAt:ManagedAgent'</a>,
--   <a>managedAgent_lastStartedAt</a> - The Unix timestamp for when the
--   managed agent was last started.
newManagedAgent :: ManagedAgent

-- | An object representing a change in state for a managed agent.
--   
--   <i>See:</i> <a>newManagedAgentStateChange</a> smart constructor.
data ManagedAgentStateChange
ManagedAgentStateChange' :: Maybe Text -> Text -> ManagedAgentName -> Text -> ManagedAgentStateChange

-- | Create a value of <a>ManagedAgentStateChange</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:reason:ManagedAgentStateChange'</a>,
--   <a>managedAgentStateChange_reason</a> - The reason for the status of
--   the managed agent.
--   
--   <a>$sel:containerName:ManagedAgentStateChange'</a>,
--   <a>managedAgentStateChange_containerName</a> - The name of the
--   container associated with the managed agent.
--   
--   <a>$sel:managedAgentName:ManagedAgentStateChange'</a>,
--   <a>managedAgentStateChange_managedAgentName</a> - The name of the
--   managed agent.
--   
--   <a>$sel:status:ManagedAgentStateChange'</a>,
--   <a>managedAgentStateChange_status</a> - The status of the managed
--   agent.
newManagedAgentStateChange :: Text -> ManagedAgentName -> Text -> ManagedAgentStateChange

-- | The managed scaling settings for the Auto Scaling group capacity
--   provider.
--   
--   When managed scaling is enabled, Amazon ECS manages the scale-in and
--   scale-out actions of the Auto Scaling group. Amazon ECS manages a
--   target tracking scaling policy using an Amazon ECS-managed CloudWatch
--   metric with the specified <tt>targetCapacity</tt> value as the target
--   value for the metric. For more information, see <a>Using Managed
--   Scaling</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   If managed scaling is disabled, the user must manage the scaling of
--   the Auto Scaling group.
--   
--   <i>See:</i> <a>newManagedScaling</a> smart constructor.
data ManagedScaling
ManagedScaling' :: Maybe ManagedScalingStatus -> Maybe Natural -> Maybe Natural -> Maybe Natural -> Maybe Natural -> ManagedScaling

-- | Create a value of <a>ManagedScaling</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:ManagedScaling'</a>, <a>managedScaling_status</a> -
--   Whether or not to enable managed scaling for the capacity provider.
--   
--   <a>$sel:maximumScalingStepSize:ManagedScaling'</a>,
--   <a>managedScaling_maximumScalingStepSize</a> - The maximum number of
--   container instances that Amazon ECS will scale in or scale out at one
--   time. If this parameter is omitted, the default value of
--   <tt>10000</tt> is used.
--   
--   <a>$sel:targetCapacity:ManagedScaling'</a>,
--   <a>managedScaling_targetCapacity</a> - The target capacity value for
--   the capacity provider. The specified value must be greater than
--   <tt>0</tt> and less than or equal to <tt>100</tt>. A value of
--   <tt>100</tt> will result in the Amazon EC2 instances in your Auto
--   Scaling group being completely utilized.
--   
--   <a>$sel:minimumScalingStepSize:ManagedScaling'</a>,
--   <a>managedScaling_minimumScalingStepSize</a> - The minimum number of
--   container instances that Amazon ECS will scale in or scale out at one
--   time. If this parameter is omitted, the default value of <tt>1</tt> is
--   used.
--   
--   <a>$sel:instanceWarmupPeriod:ManagedScaling'</a>,
--   <a>managedScaling_instanceWarmupPeriod</a> - The period of time, in
--   seconds, after a newly launched Amazon EC2 instance can contribute to
--   CloudWatch metrics for Auto Scaling group. If this parameter is
--   omitted, the default value of <tt>300</tt> seconds is used.
newManagedScaling :: ManagedScaling

-- | Details on a volume mount point that is used in a container
--   definition.
--   
--   <i>See:</i> <a>newMountPoint</a> smart constructor.
data MountPoint
MountPoint' :: Maybe Text -> Maybe Text -> Maybe Bool -> MountPoint

-- | Create a value of <a>MountPoint</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerPath:MountPoint'</a>, <a>mountPoint_containerPath</a>
--   - The path on the container to mount the host volume at.
--   
--   <a>$sel:sourceVolume:MountPoint'</a>, <a>mountPoint_sourceVolume</a> -
--   The name of the volume to mount. Must be a volume name referenced in
--   the <tt>name</tt> parameter of task definition <tt>volume</tt>.
--   
--   <a>$sel:readOnly:MountPoint'</a>, <a>mountPoint_readOnly</a> - If this
--   value is <tt>true</tt>, the container has read-only access to the
--   volume. If this value is <tt>false</tt>, then the container can write
--   to the volume. The default value is <tt>false</tt>.
newMountPoint :: MountPoint

-- | Details on the network bindings between a container and its host
--   container instance. After a task reaches the <tt>RUNNING</tt> status,
--   manual and automatic host and container port assignments are visible
--   in the <tt>networkBindings</tt> section of DescribeTasks API
--   responses.
--   
--   <i>See:</i> <a>newNetworkBinding</a> smart constructor.
data NetworkBinding
NetworkBinding' :: Maybe Text -> Maybe TransportProtocol -> Maybe Int -> Maybe Int -> NetworkBinding

-- | Create a value of <a>NetworkBinding</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:bindIP:NetworkBinding'</a>, <a>networkBinding_bindIP</a> - The
--   IP address that the container is bound to on the container instance.
--   
--   <a>$sel:protocol:NetworkBinding'</a>, <a>networkBinding_protocol</a> -
--   The protocol used for the network binding.
--   
--   <a>$sel:hostPort:NetworkBinding'</a>, <a>networkBinding_hostPort</a> -
--   The port number on the host that is used with the network binding.
--   
--   <a>$sel:containerPort:NetworkBinding'</a>,
--   <a>networkBinding_containerPort</a> - The port number on the container
--   that is used with the network binding.
newNetworkBinding :: NetworkBinding

-- | An object representing the network configuration for a task or
--   service.
--   
--   <i>See:</i> <a>newNetworkConfiguration</a> smart constructor.
data NetworkConfiguration
NetworkConfiguration' :: Maybe AwsVpcConfiguration -> NetworkConfiguration

-- | Create a value of <a>NetworkConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:awsvpcConfiguration:NetworkConfiguration'</a>,
--   <a>networkConfiguration_awsvpcConfiguration</a> - The VPC subnets and
--   security groups associated with a task.
--   
--   All specified subnets and security groups must be from the same VPC.
newNetworkConfiguration :: NetworkConfiguration

-- | An object representing the elastic network interface for tasks that
--   use the <tt>awsvpc</tt> network mode.
--   
--   <i>See:</i> <a>newNetworkInterface</a> smart constructor.
data NetworkInterface
NetworkInterface' :: Maybe Text -> Maybe Text -> Maybe Text -> NetworkInterface

-- | Create a value of <a>NetworkInterface</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:ipv6Address:NetworkInterface'</a>,
--   <a>networkInterface_ipv6Address</a> - The private IPv6 address for the
--   network interface.
--   
--   <a>$sel:privateIpv4Address:NetworkInterface'</a>,
--   <a>networkInterface_privateIpv4Address</a> - The private IPv4 address
--   for the network interface.
--   
--   <a>$sel:attachmentId:NetworkInterface'</a>,
--   <a>networkInterface_attachmentId</a> - The attachment ID for the
--   network interface.
newNetworkInterface :: NetworkInterface

-- | An object representing a constraint on task placement. For more
--   information, see <a>Task Placement Constraints</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   If you are using the Fargate launch type, task placement constraints
--   are not supported.
--   
--   <i>See:</i> <a>newPlacementConstraint</a> smart constructor.
data PlacementConstraint
PlacementConstraint' :: Maybe Text -> Maybe PlacementConstraintType -> PlacementConstraint

-- | Create a value of <a>PlacementConstraint</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expression:PlacementConstraint'</a>,
--   <a>placementConstraint_expression</a> - A cluster query language
--   expression to apply to the constraint. The expression can have a
--   maximum length of 2000 characters. You can't specify an expression if
--   the constraint type is <tt>distinctInstance</tt>. For more
--   information, see <a>Cluster query language</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:type':PlacementConstraint'</a>,
--   <a>placementConstraint_type</a> - The type of constraint. Use
--   <tt>distinctInstance</tt> to ensure that each task in a particular
--   group is running on a different container instance. Use
--   <tt>memberOf</tt> to restrict the selection to a group of valid
--   candidates.
newPlacementConstraint :: PlacementConstraint

-- | The task placement strategy for a task or service. For more
--   information, see <a>Task Placement Strategies</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newPlacementStrategy</a> smart constructor.
data PlacementStrategy
PlacementStrategy' :: Maybe Text -> Maybe PlacementStrategyType -> PlacementStrategy

-- | Create a value of <a>PlacementStrategy</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:field:PlacementStrategy'</a>, <a>placementStrategy_field</a> -
--   The field to apply the placement strategy against. For the
--   <tt>spread</tt> placement strategy, valid values are
--   <tt>instanceId</tt> (or <tt>host</tt>, which has the same effect), or
--   any platform or custom attribute that is applied to a container
--   instance, such as <tt>attribute:ecs.availability-zone</tt>. For the
--   <tt>binpack</tt> placement strategy, valid values are <tt>cpu</tt> and
--   <tt>memory</tt>. For the <tt>random</tt> placement strategy, this
--   field is not used.
--   
--   <a>$sel:type':PlacementStrategy'</a>, <a>placementStrategy_type</a> -
--   The type of placement strategy. The <tt>random</tt> placement strategy
--   randomly places tasks on available candidates. The <tt>spread</tt>
--   placement strategy spreads placement across available candidates
--   evenly based on the <tt>field</tt> parameter. The <tt>binpack</tt>
--   strategy places tasks on available candidates that have the least
--   available amount of the resource that is specified with the
--   <tt>field</tt> parameter. For example, if you binpack on memory, a
--   task is placed on the instance with the least amount of remaining
--   memory (but still enough to run the task).
newPlacementStrategy :: PlacementStrategy

-- | The devices that are available on the container instance. The only
--   supported device type is a GPU.
--   
--   <i>See:</i> <a>newPlatformDevice</a> smart constructor.
data PlatformDevice
PlatformDevice' :: Text -> PlatformDeviceType -> PlatformDevice

-- | Create a value of <a>PlatformDevice</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:id:PlatformDevice'</a>, <a>platformDevice_id</a> - The ID for
--   the GPU(s) on the container instance. The available GPU IDs can also
--   be obtained on the container instance in the
--   <tt>/var/lib/ecs/gpu/nvidia_gpu_info.json</tt> file.
--   
--   <a>$sel:type':PlatformDevice'</a>, <a>platformDevice_type</a> - The
--   type of device that is available on the container instance. The only
--   supported value is <tt>GPU</tt>.
newPlatformDevice :: Text -> PlatformDeviceType -> PlatformDevice

-- | Port mappings allow containers to access ports on the host container
--   instance to send or receive traffic. Port mappings are specified as
--   part of the container definition.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, exposed ports should be specified using
--   <tt>containerPort</tt>. The <tt>hostPort</tt> can be left blank or it
--   must be the same value as the <tt>containerPort</tt>.
--   
--   You cannot expose the same container port for multiple protocols. An
--   error will be returned if this is attempted
--   
--   After a task reaches the <tt>RUNNING</tt> status, manual and automatic
--   host and container port assignments are visible in the
--   <tt>networkBindings</tt> section of DescribeTasks API responses.
--   
--   <i>See:</i> <a>newPortMapping</a> smart constructor.
data PortMapping
PortMapping' :: Maybe TransportProtocol -> Maybe Int -> Maybe Int -> PortMapping

-- | Create a value of <a>PortMapping</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:protocol:PortMapping'</a>, <a>portMapping_protocol</a> - The
--   protocol used for the port mapping. Valid values are <tt>tcp</tt> and
--   <tt>udp</tt>. The default is <tt>tcp</tt>.
--   
--   <a>$sel:hostPort:PortMapping'</a>, <a>portMapping_hostPort</a> - The
--   port number on the container instance to reserve for your container.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, the <tt>hostPort</tt> can either be left
--   blank or set to the same value as the <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode, you can specify a non-reserved host port for your container port
--   mapping, or you can omit the <tt>hostPort</tt> (or set it to
--   <tt>0</tt>) while specifying a <tt>containerPort</tt> and your
--   container automatically receives a port in the ephemeral port range
--   for your container instance operating system and Docker version.
--   
--   The default ephemeral port range for Docker version 1.6.0 and later is
--   listed on the instance under
--   <tt>/proc/sys/net/ipv4/ip_local_port_range</tt>. If this kernel
--   parameter is unavailable, the default ephemeral port range from 49153
--   through 65535 is used. Do not attempt to specify a host port in the
--   ephemeral port range as these are reserved for automatic assignment.
--   In general, ports below 32768 are outside of the ephemeral port range.
--   
--   The default ephemeral port range from 49153 through 65535 is always
--   used for Docker versions before 1.6.0.
--   
--   The default reserved ports are 22 for SSH, the Docker ports 2375 and
--   2376, and the Amazon ECS container agent ports 51678-51680. Any host
--   port that was previously specified in a running task is also reserved
--   while the task is running (after a task stops, the host port is
--   released). The current reserved ports are displayed in the
--   <tt>remainingResources</tt> of DescribeContainerInstances output. A
--   container instance can have up to 100 reserved ports at a time,
--   including the default reserved ports. Automatically assigned ports
--   don't count toward the 100 reserved ports limit.
--   
--   <a>$sel:containerPort:PortMapping'</a>,
--   <a>portMapping_containerPort</a> - The port number on the container
--   that is bound to the user-specified or automatically assigned host
--   port.
--   
--   If you are using containers in a task with the <tt>awsvpc</tt> or
--   <tt>host</tt> network mode, exposed ports should be specified using
--   <tt>containerPort</tt>.
--   
--   If you are using containers in a task with the <tt>bridge</tt> network
--   mode and you specify a container port and not a host port, your
--   container automatically receives a host port in the ephemeral port
--   range. For more information, see <tt>hostPort</tt>. Port mappings that
--   are automatically assigned in this way do not count toward the 100
--   reserved ports limit of a container instance.
newPortMapping :: PortMapping

-- | The configuration details for the App Mesh proxy.
--   
--   For tasks using the EC2 launch type, the container instances require
--   at least version 1.26.0 of the container agent and at least version
--   1.26.0-1 of the <tt>ecs-init</tt> package to enable a proxy
--   configuration. If your container instances are launched from the
--   Amazon ECS-optimized AMI version <tt>20190301</tt> or later, then they
--   contain the required versions of the container agent and
--   <tt>ecs-init</tt>. For more information, see <a>Amazon ECS-optimized
--   Linux AMI</a>
--   
--   <i>See:</i> <a>newProxyConfiguration</a> smart constructor.
data ProxyConfiguration
ProxyConfiguration' :: Maybe ProxyConfigurationType -> Maybe [KeyValuePair] -> Text -> ProxyConfiguration

-- | Create a value of <a>ProxyConfiguration</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:type':ProxyConfiguration'</a>, <a>proxyConfiguration_type</a>
--   - The proxy type. The only supported value is <tt>APPMESH</tt>.
--   
--   <a>$sel:properties:ProxyConfiguration'</a>,
--   <a>proxyConfiguration_properties</a> - The set of network
--   configuration parameters to provide the Container Network Interface
--   (CNI) plugin, specified as key-value pairs.
--   
--   <ul>
--   <li><tt>IgnoredUID</tt> - (Required) The user ID (UID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredGID</tt> is specified, this field can be empty.</li>
--   <li><tt>IgnoredGID</tt> - (Required) The group ID (GID) of the proxy
--   container as defined by the <tt>user</tt> parameter in a container
--   definition. This is used to ensure the proxy ignores its own traffic.
--   If <tt>IgnoredUID</tt> is specified, this field can be empty.</li>
--   <li><tt>AppPorts</tt> - (Required) The list of ports that the
--   application uses. Network traffic to these ports is forwarded to the
--   <tt>ProxyIngressPort</tt> and <tt>ProxyEgressPort</tt>.</li>
--   <li><tt>ProxyIngressPort</tt> - (Required) Specifies the port that
--   incoming traffic to the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>ProxyEgressPort</tt> - (Required) Specifies the port that
--   outgoing traffic from the <tt>AppPorts</tt> is directed to.</li>
--   <li><tt>EgressIgnoredPorts</tt> - (Required) The egress traffic going
--   to the specified ports is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   <li><tt>EgressIgnoredIPs</tt> - (Required) The egress traffic going to
--   the specified IP addresses is ignored and not redirected to the
--   <tt>ProxyEgressPort</tt>. It can be an empty list.</li>
--   </ul>
--   
--   <a>$sel:containerName:ProxyConfiguration'</a>,
--   <a>proxyConfiguration_containerName</a> - The name of the container
--   that will serve as the App Mesh proxy.
newProxyConfiguration :: Text -> ProxyConfiguration

-- | The repository credentials for private registry authentication.
--   
--   <i>See:</i> <a>newRepositoryCredentials</a> smart constructor.
data RepositoryCredentials
RepositoryCredentials' :: Text -> RepositoryCredentials

-- | Create a value of <a>RepositoryCredentials</a> with all optional
--   fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:credentialsParameter:RepositoryCredentials'</a>,
--   <a>repositoryCredentials_credentialsParameter</a> - The Amazon
--   Resource Name (ARN) of the secret containing the private repository
--   credentials.
--   
--   When you are using the Amazon ECS API, CLI, or Amazon Web Services
--   SDK, if the secret exists in the same Region as the task that you are
--   launching then you can use either the full ARN or the name of the
--   secret. When you are using the Amazon Web Services Management Console,
--   you must specify the full ARN of the secret.
newRepositoryCredentials :: Text -> RepositoryCredentials

-- | Describes the resources available for a container instance.
--   
--   <i>See:</i> <a>newResource</a> smart constructor.
data Resource
Resource' :: Maybe [Text] -> Maybe Int -> Maybe Double -> Maybe Integer -> Maybe Text -> Maybe Text -> Resource

-- | Create a value of <a>Resource</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:stringSetValue:Resource'</a>, <a>resource_stringSetValue</a> -
--   When the <tt>stringSetValue</tt> type is set, the value of the
--   resource must be a string type.
--   
--   <a>$sel:integerValue:Resource'</a>, <a>resource_integerValue</a> -
--   When the <tt>integerValue</tt> type is set, the value of the resource
--   must be an integer.
--   
--   <a>$sel:doubleValue:Resource'</a>, <a>resource_doubleValue</a> - When
--   the <tt>doubleValue</tt> type is set, the value of the resource must
--   be a double precision floating-point type.
--   
--   <a>$sel:longValue:Resource'</a>, <a>resource_longValue</a> - When the
--   <tt>longValue</tt> type is set, the value of the resource must be an
--   extended precision floating-point type.
--   
--   <a>$sel:name:Resource'</a>, <a>resource_name</a> - The name of the
--   resource, such as <tt>CPU</tt>, <tt>MEMORY</tt>, <tt>PORTS</tt>,
--   <tt>PORTS_UDP</tt>, or a user-defined resource.
--   
--   <a>$sel:type':Resource'</a>, <a>resource_type</a> - The type of the
--   resource, such as <tt>INTEGER</tt>, <tt>DOUBLE</tt>, <tt>LONG</tt>, or
--   <tt>STRINGSET</tt>.
newResource :: Resource

-- | The type and amount of a resource to assign to a container. The
--   supported resource types are GPUs and Elastic Inference accelerators.
--   For more information, see <a>Working with GPUs on Amazon ECS</a> or
--   <a>Working with Amazon Elastic Inference on Amazon ECS</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>
--   
--   <i>See:</i> <a>newResourceRequirement</a> smart constructor.
data ResourceRequirement
ResourceRequirement' :: Text -> ResourceType -> ResourceRequirement

-- | Create a value of <a>ResourceRequirement</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:ResourceRequirement'</a>,
--   <a>resourceRequirement_value</a> - The value for the specified
--   resource type.
--   
--   If the <tt>GPU</tt> type is used, the value is the number of physical
--   <tt>GPUs</tt> the Amazon ECS container agent will reserve for the
--   container. The number of GPUs reserved for all containers in a task
--   should not exceed the number of available GPUs on the container
--   instance the task is launched on.
--   
--   If the <tt>InferenceAccelerator</tt> type is used, the <tt>value</tt>
--   should match the <tt>deviceName</tt> for an InferenceAccelerator
--   specified in a task definition.
--   
--   <a>$sel:type':ResourceRequirement'</a>,
--   <a>resourceRequirement_type</a> - The type of resource to assign to a
--   container. The supported values are <tt>GPU</tt> or
--   <tt>InferenceAccelerator</tt>.
newResourceRequirement :: Text -> ResourceType -> ResourceRequirement

-- | A floating-point percentage of the desired number of tasks to place
--   and keep running in the task set.
--   
--   <i>See:</i> <a>newScale</a> smart constructor.
data Scale
Scale' :: Maybe Double -> Maybe ScaleUnit -> Scale

-- | Create a value of <a>Scale</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Scale'</a>, <a>scale_value</a> - The value, specified as
--   a percent total of a service's <tt>desiredCount</tt>, to scale the
--   task set. Accepted values are numbers between 0 and 100.
--   
--   <a>$sel:unit:Scale'</a>, <a>scale_unit</a> - The unit of measure for
--   the scale value.
newScale :: Scale

-- | An object representing the secret to expose to your container. Secrets
--   can be exposed to a container in the following ways:
--   
--   <ul>
--   <li>To inject sensitive data into your containers as environment
--   variables, use the <tt>secrets</tt> container definition
--   parameter.</li>
--   <li>To reference sensitive information in the log configuration of a
--   container, use the <tt>secretOptions</tt> container definition
--   parameter.</li>
--   </ul>
--   
--   For more information, see <a>Specifying Sensitive Data</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <i>See:</i> <a>newSecret</a> smart constructor.
data Secret
Secret' :: Text -> Text -> Secret

-- | Create a value of <a>Secret</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:Secret'</a>, <a>secret_name</a> - The name of the secret.
--   
--   <a>$sel:valueFrom:Secret'</a>, <a>secret_valueFrom</a> - The secret to
--   expose to the container. The supported values are either the full ARN
--   of the Secrets Manager secret or the full ARN of the parameter in the
--   SSM Parameter Store.
--   
--   If the SSM Parameter Store parameter exists in the same Region as the
--   task you are launching, then you can use either the full ARN or name
--   of the parameter. If the parameter exists in a different Region, then
--   the full ARN must be specified.
newSecret :: Text -> Text -> Secret

-- | Details on an event associated with a service.
--   
--   <i>See:</i> <a>newServiceEvent</a> smart constructor.
data ServiceEvent
ServiceEvent' :: Maybe POSIX -> Maybe Text -> Maybe Text -> ServiceEvent

-- | Create a value of <a>ServiceEvent</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:createdAt:ServiceEvent'</a>, <a>serviceEvent_createdAt</a> -
--   The Unix timestamp for when the event was triggered.
--   
--   <a>$sel:id:ServiceEvent'</a>, <a>serviceEvent_id</a> - The ID string
--   of the event.
--   
--   <a>$sel:message:ServiceEvent'</a>, <a>serviceEvent_message</a> - The
--   event message.
newServiceEvent :: ServiceEvent

-- | Details of the service registry.
--   
--   <i>See:</i> <a>newServiceRegistry</a> smart constructor.
data ServiceRegistry
ServiceRegistry' :: Maybe Text -> Maybe Text -> Maybe Int -> Maybe Int -> ServiceRegistry

-- | Create a value of <a>ServiceRegistry</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:registryArn:ServiceRegistry'</a>,
--   <a>serviceRegistry_registryArn</a> - The Amazon Resource Name (ARN) of
--   the service registry. The currently supported service registry is
--   Cloud Map. For more information, see <a>CreateService</a>.
--   
--   <a>$sel:containerName:ServiceRegistry'</a>,
--   <a>serviceRegistry_containerName</a> - The container name value,
--   already specified in the task definition, to be used for your service
--   discovery service. If the task definition that your service task
--   specifies uses the <tt>bridge</tt> or <tt>host</tt> network mode, you
--   must specify a <tt>containerName</tt> and <tt>containerPort</tt>
--   combination from the task definition. If the task definition that your
--   service task specifies uses the <tt>awsvpc</tt> network mode and a
--   type SRV DNS record is used, you must specify either a
--   <tt>containerName</tt> and <tt>containerPort</tt> combination or a
--   <tt>port</tt> value, but not both.
--   
--   <a>$sel:containerPort:ServiceRegistry'</a>,
--   <a>serviceRegistry_containerPort</a> - The port value, already
--   specified in the task definition, to be used for your service
--   discovery service. If the task definition your service task specifies
--   uses the <tt>bridge</tt> or <tt>host</tt> network mode, you must
--   specify a <tt>containerName</tt> and <tt>containerPort</tt>
--   combination from the task definition. If the task definition your
--   service task specifies uses the <tt>awsvpc</tt> network mode and a
--   type SRV DNS record is used, you must specify either a
--   <tt>containerName</tt> and <tt>containerPort</tt> combination or a
--   <tt>port</tt> value, but not both.
--   
--   <a>$sel:port:ServiceRegistry'</a>, <a>serviceRegistry_port</a> - The
--   port value used if your service discovery service specified an SRV
--   record. This field may be used if both the <tt>awsvpc</tt> network
--   mode and SRV records are used.
newServiceRegistry :: ServiceRegistry

-- | The details of the execute command session.
--   
--   <i>See:</i> <a>newSession</a> smart constructor.
data Session
Session' :: Maybe Text -> Maybe (Sensitive Text) -> Maybe Text -> Session

-- | Create a value of <a>Session</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:streamUrl:Session'</a>, <a>session_streamUrl</a> - A URL back
--   to managed agent on the container that the SSM Session Manager client
--   uses to send commands and receive output from the container.
--   
--   <a>$sel:tokenValue:Session'</a>, <a>session_tokenValue</a> - An
--   encrypted token value containing session and caller information. Used
--   to authenticate the connection to the container.
--   
--   <a>$sel:sessionId:Session'</a>, <a>session_sessionId</a> - The ID of
--   the execute command session.
newSession :: Session

-- | The current account setting for a resource.
--   
--   <i>See:</i> <a>newSetting</a> smart constructor.
data Setting
Setting' :: Maybe Text -> Maybe SettingName -> Maybe Text -> Setting

-- | Create a value of <a>Setting</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Setting'</a>, <a>setting_value</a> - Whether the account
--   setting is enabled or disabled for the specified resource.
--   
--   <a>$sel:name:Setting'</a>, <a>setting_name</a> - The Amazon ECS
--   resource name.
--   
--   <a>$sel:principalArn:Setting'</a>, <a>setting_principalArn</a> - The
--   ARN of the principal, which can be an IAM user, IAM role, or the root
--   user. If this field is omitted, the authenticated user is assumed.
newSetting :: Setting

-- | A list of namespaced kernel parameters to set in the container. This
--   parameter maps to <tt>Sysctls</tt> in the <a>Create a container</a>
--   section of the <a>Docker Remote API</a> and the <tt>--sysctl</tt>
--   option to <a>docker run</a>.
--   
--   It is not recommended that you specify network-related
--   <tt>systemControls</tt> parameters for multiple containers in a single
--   task that also uses either the <tt>awsvpc</tt> or <tt>host</tt>
--   network mode for the following reasons:
--   
--   <ul>
--   <li>For tasks that use the <tt>awsvpc</tt> network mode, if you set
--   <tt>systemControls</tt> for any container, it applies to all
--   containers in the task. If you set different <tt>systemControls</tt>
--   for multiple containers in a single task, the container that is
--   started last determines which <tt>systemControls</tt> take
--   effect.</li>
--   <li>For tasks that use the <tt>host</tt> network mode, the
--   <tt>systemControls</tt> parameter applies to the container instance's
--   kernel parameter as well as that of all containers of any tasks
--   running on that container instance.</li>
--   </ul>
--   
--   <i>See:</i> <a>newSystemControl</a> smart constructor.
data SystemControl
SystemControl' :: Maybe Text -> Maybe Text -> SystemControl

-- | Create a value of <a>SystemControl</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:SystemControl'</a>, <a>systemControl_value</a> - The
--   value for the namespaced kernel parameter specified in
--   <tt>namespace</tt>.
--   
--   <a>$sel:namespace:SystemControl'</a>, <a>systemControl_namespace</a> -
--   The namespaced kernel parameter for which to set a <tt>value</tt>.
newSystemControl :: SystemControl

-- | The metadata that you apply to a resource to help you categorize and
--   organize them. Each tag consists of a key and an optional value, both
--   of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
--   
--   <i>See:</i> <a>newTag</a> smart constructor.
data Tag
Tag' :: Maybe Text -> Maybe Text -> Tag

-- | Create a value of <a>Tag</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:value:Tag'</a>, <a>tag_value</a> - The optional part of a
--   key-value pair that make up a tag. A <tt>value</tt> acts as a
--   descriptor within a tag category (key).
--   
--   <a>$sel:key:Tag'</a>, <a>tag_key</a> - One part of a key-value pair
--   that make up a tag. A <tt>key</tt> is a general label that acts like a
--   category for more specific tag values.
newTag :: Tag

-- | Details on a task in a cluster.
--   
--   <i>See:</i> <a>newTask</a> smart constructor.
data Task
Task' :: Maybe POSIX -> Maybe Text -> Maybe TaskOverride -> Maybe [InferenceAccelerator] -> Maybe Text -> Maybe Text -> Maybe [Attachment] -> Maybe POSIX -> Maybe TaskStopCode -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe EphemeralStorage -> Maybe Text -> Maybe Text -> Maybe POSIX -> Maybe [Container] -> Maybe POSIX -> Maybe Text -> Maybe [Attribute] -> Maybe Integer -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Connectivity -> Maybe POSIX -> Maybe LaunchType -> Maybe Text -> Maybe HealthStatus -> Maybe POSIX -> Maybe Text -> Maybe Bool -> Maybe POSIX -> Maybe [Tag] -> Task

-- | Create a value of <a>Task</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:stoppedAt:Task'</a>, <a>task_stoppedAt</a> - The Unix
--   timestamp for when the task was stopped (the task transitioned from
--   the <tt>RUNNING</tt> state to the <tt>STOPPED</tt> state).
--   
--   <a>$sel:desiredStatus:Task'</a>, <a>task_desiredStatus</a> - The
--   desired status of the task. For more information, see <a>Task
--   Lifecycle</a>.
--   
--   <a>$sel:overrides:Task'</a>, <a>task_overrides</a> - One or more
--   container overrides.
--   
--   <a>$sel:inferenceAccelerators:Task'</a>,
--   <a>task_inferenceAccelerators</a> - The Elastic Inference accelerator
--   associated with the task.
--   
--   <a>$sel:clusterArn:Task'</a>, <a>task_clusterArn</a> - The ARN of the
--   cluster that hosts the task.
--   
--   <a>$sel:group':Task'</a>, <a>task_group</a> - The name of the task
--   group associated with the task.
--   
--   <a>$sel:attachments:Task'</a>, <a>task_attachments</a> - The Elastic
--   Network Adapter associated with the task if the task uses the
--   <tt>awsvpc</tt> network mode.
--   
--   <a>$sel:createdAt:Task'</a>, <a>task_createdAt</a> - The Unix
--   timestamp for when the task was created (the task entered the
--   <tt>PENDING</tt> state).
--   
--   <a>$sel:stopCode:Task'</a>, <a>task_stopCode</a> - The stop code
--   indicating why a task was stopped. The <tt>stoppedReason</tt> may
--   contain additional details.
--   
--   <a>$sel:platformVersion:Task'</a>, <a>task_platformVersion</a> - The
--   platform version on which your task is running. A platform version is
--   only specified for tasks using the Fargate launch type. If one is not
--   specified, the <tt>LATEST</tt> platform version is used by default.
--   For more information, see <a>Fargate Platform Versions</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:taskArn:Task'</a>, <a>task_taskArn</a> - The Amazon Resource
--   Name (ARN) of the task.
--   
--   <a>$sel:containerInstanceArn:Task'</a>,
--   <a>task_containerInstanceArn</a> - The ARN of the container instances
--   that host the task.
--   
--   <a>$sel:executionStoppedAt:Task'</a>, <a>task_executionStoppedAt</a> -
--   The Unix timestamp for when the task execution stopped.
--   
--   <a>$sel:ephemeralStorage:Task'</a>, <a>task_ephemeralStorage</a> - The
--   ephemeral storage settings for the task.
--   
--   <a>$sel:lastStatus:Task'</a>, <a>task_lastStatus</a> - The last known
--   status of the task. For more information, see <a>Task Lifecycle</a>.
--   
--   <a>$sel:memory:Task'</a>, <a>task_memory</a> - The amount of memory
--   (in MiB) used by the task as expressed in a task definition. It can be
--   expressed as an integer using MiB, for example <tt>1024</tt>. It can
--   also be expressed as a string using GB, for example <tt>1GB</tt> or
--   <tt>1 GB</tt>. String values are converted to an integer indicating
--   the MiB when the task definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
--   
--   <a>$sel:pullStoppedAt:Task'</a>, <a>task_pullStoppedAt</a> - The Unix
--   timestamp for when the container image pull completed.
--   
--   <a>$sel:containers:Task'</a>, <a>task_containers</a> - The containers
--   associated with the task.
--   
--   <a>$sel:startedAt:Task'</a>, <a>task_startedAt</a> - The Unix
--   timestamp for when the task started (the task transitioned from the
--   <tt>PENDING</tt> state to the <tt>RUNNING</tt> state).
--   
--   <a>$sel:availabilityZone:Task'</a>, <a>task_availabilityZone</a> - The
--   availability zone of the task.
--   
--   <a>$sel:attributes:Task'</a>, <a>task_attributes</a> - The attributes
--   of the task
--   
--   <a>$sel:version:Task'</a>, <a>task_version</a> - The version counter
--   for the task. Every time a task experiences a change that triggers a
--   CloudWatch event, the version counter is incremented. If you are
--   replicating your Amazon ECS task state with CloudWatch Events, you can
--   compare the version of a task reported by the Amazon ECS API actions
--   with the version reported in CloudWatch Events for the task (inside
--   the <tt>detail</tt> object) to verify that the version in your event
--   stream is current.
--   
--   <a>$sel:capacityProviderName:Task'</a>,
--   <a>task_capacityProviderName</a> - The capacity provider associated
--   with the task.
--   
--   <a>$sel:startedBy:Task'</a>, <a>task_startedBy</a> - The tag specified
--   when a task is started. If the task is started by an Amazon ECS
--   service, then the <tt>startedBy</tt> parameter contains the deployment
--   ID of the service that starts it.
--   
--   <a>$sel:stoppedReason:Task'</a>, <a>task_stoppedReason</a> - The
--   reason that the task was stopped.
--   
--   <a>$sel:connectivity:Task'</a>, <a>task_connectivity</a> - The
--   connectivity status of a task.
--   
--   <a>$sel:stoppingAt:Task'</a>, <a>task_stoppingAt</a> - The Unix
--   timestamp for when the task stops (transitions from the
--   <tt>RUNNING</tt> state to <tt>STOPPED</tt>).
--   
--   <a>$sel:launchType:Task'</a>, <a>task_launchType</a> - The
--   infrastructure on which your task is running. For more information,
--   see <a>Amazon ECS launch types</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:taskDefinitionArn:Task'</a>, <a>task_taskDefinitionArn</a> -
--   The ARN of the task definition that creates the task.
--   
--   <a>$sel:healthStatus:Task'</a>, <a>task_healthStatus</a> - The health
--   status for the task, which is determined by the health of the
--   essential containers in the task. If all essential containers in the
--   task are reporting as <tt>HEALTHY</tt>, then the task status also
--   reports as <tt>HEALTHY</tt>. If any essential containers in the task
--   are reporting as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>, then the task
--   status also reports as <tt>UNHEALTHY</tt> or <tt>UNKNOWN</tt>,
--   accordingly.
--   
--   The Amazon ECS container agent does not monitor or report on Docker
--   health checks that are embedded in a container image (such as those
--   specified in a parent image or from the image's Dockerfile) and not
--   specified in the container definition. Health check parameters that
--   are specified in a container definition override any Docker health
--   checks that exist in the container image.
--   
--   <a>$sel:connectivityAt:Task'</a>, <a>task_connectivityAt</a> - The
--   Unix timestamp for when the task last went into <tt>CONNECTED</tt>
--   status.
--   
--   <a>$sel:cpu:Task'</a>, <a>task_cpu</a> - The number of CPU units used
--   by the task as expressed in a task definition. It can be expressed as
--   an integer using CPU units, for example <tt>1024</tt>. It can also be
--   expressed as a string using vCPUs, for example <tt>1 vCPU</tt> or
--   <tt>1 vcpu</tt>. String values are converted to an integer indicating
--   the CPU units when the task definition is registered.
--   
--   If you are using the EC2 launch type, this field is optional.
--   Supported values are between <tt>128</tt> CPU units (<tt>0.125</tt>
--   vCPUs) and <tt>10240</tt> CPU units (<tt>10</tt> vCPUs).
--   
--   If you are using the Fargate launch type, this field is required and
--   you must use one of the following values, which determines your range
--   of supported values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
--   
--   <a>$sel:enableExecuteCommand:Task'</a>,
--   <a>task_enableExecuteCommand</a> - Whether or not execute command
--   functionality is enabled for this task. If <tt>true</tt>, this enables
--   execute command functionality on all containers in the task.
--   
--   <a>$sel:pullStartedAt:Task'</a>, <a>task_pullStartedAt</a> - The Unix
--   timestamp for when the container image pull began.
--   
--   <a>$sel:tags:Task'</a>, <a>task_tags</a> - The metadata that you apply
--   to the task to help you categorize and organize them. Each tag
--   consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newTask :: Task

-- | The details of a task definition which describes the container and
--   volume definitions of an Amazon Elastic Container Service task. You
--   can specify which Docker images to use, the required resources, and
--   other configurations related to launching the task definition through
--   an Amazon ECS service or task.
--   
--   <i>See:</i> <a>newTaskDefinition</a> smart constructor.
data TaskDefinition
TaskDefinition' :: Maybe TaskDefinitionStatus -> Maybe [InferenceAccelerator] -> Maybe Text -> Maybe [Compatibility] -> Maybe EphemeralStorage -> Maybe PidMode -> Maybe Text -> Maybe IpcMode -> Maybe [ContainerDefinition] -> Maybe Text -> Maybe ProxyConfiguration -> Maybe Text -> Maybe POSIX -> Maybe [TaskDefinitionPlacementConstraint] -> Maybe POSIX -> Maybe NetworkMode -> Maybe Text -> Maybe [Compatibility] -> Maybe Text -> Maybe Int -> Maybe [Volume] -> Maybe Text -> Maybe [Attribute] -> TaskDefinition

-- | Create a value of <a>TaskDefinition</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:status:TaskDefinition'</a>, <a>taskDefinition_status</a> - The
--   status of the task definition.
--   
--   <a>$sel:inferenceAccelerators:TaskDefinition'</a>,
--   <a>taskDefinition_inferenceAccelerators</a> - The Elastic Inference
--   accelerator associated with the task.
--   
--   <a>$sel:executionRoleArn:TaskDefinition'</a>,
--   <a>taskDefinition_executionRoleArn</a> - The Amazon Resource Name
--   (ARN) of the task execution role that grants the Amazon ECS container
--   agent permission to make Amazon Web Services API calls on your behalf.
--   The task execution IAM role is required depending on the requirements
--   of your task. For more information, see <a>Amazon ECS task execution
--   IAM role</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   <a>$sel:requiresCompatibilities:TaskDefinition'</a>,
--   <a>taskDefinition_requiresCompatibilities</a> - The task launch types
--   the task definition was validated against. To determine which task
--   launch types the task definition is validated for, see the
--   TaskDefinition$compatibilities parameter.
--   
--   <a>$sel:ephemeralStorage:TaskDefinition'</a>,
--   <a>taskDefinition_ephemeralStorage</a> - The ephemeral storage
--   settings to use for tasks run with the task definition.
--   
--   <a>$sel:pidMode:TaskDefinition'</a>, <a>taskDefinition_pidMode</a> -
--   The process namespace to use for the containers in the task. The valid
--   values are <tt>host</tt> or <tt>task</tt>. If <tt>host</tt> is
--   specified, then all containers within the tasks that specified the
--   <tt>host</tt> PID mode on the same container instance share the same
--   process namespace with the host Amazon EC2 instance. If <tt>task</tt>
--   is specified, all containers within the specified task share the same
--   process namespace. If no value is specified, the default is a private
--   namespace. For more information, see <a>PID settings</a> in the
--   <i>Docker run reference</i>.
--   
--   If the <tt>host</tt> PID mode is used, be aware that there is a
--   heightened risk of undesired process namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:family:TaskDefinition'</a>, <a>taskDefinition_family</a> - The
--   name of a family that this task definition is registered to. Up to 255
--   letters (uppercase and lowercase), numbers, hyphens, and underscores
--   are allowed.
--   
--   A family groups multiple versions of a task definition. Amazon ECS
--   gives the first task definition that you registered to a family a
--   revision number of 1. Amazon ECS gives sequential revision numbers to
--   each task definition that you add.
--   
--   <a>$sel:ipcMode:TaskDefinition'</a>, <a>taskDefinition_ipcMode</a> -
--   The IPC resource namespace to use for the containers in the task. The
--   valid values are <tt>host</tt>, <tt>task</tt>, or <tt>none</tt>. If
--   <tt>host</tt> is specified, then all containers within the tasks that
--   specified the <tt>host</tt> IPC mode on the same container instance
--   share the same IPC resources with the host Amazon EC2 instance. If
--   <tt>task</tt> is specified, all containers within the specified task
--   share the same IPC resources. If <tt>none</tt> is specified, then IPC
--   resources within the containers of a task are private and not shared
--   with other containers in a task or on the container instance. If no
--   value is specified, then the IPC resource namespace sharing depends on
--   the Docker daemon setting on the container instance. For more
--   information, see <a>IPC settings</a> in the <i>Docker run
--   reference</i>.
--   
--   If the <tt>host</tt> IPC mode is used, be aware that there is a
--   heightened risk of undesired IPC namespace expose. For more
--   information, see <a>Docker security</a>.
--   
--   If you are setting namespaced kernel parameters using
--   <tt>systemControls</tt> for the containers in the task, the following
--   will apply to your IPC resource namespace. For more information, see
--   <a>System Controls</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <ul>
--   <li>For tasks that use the <tt>host</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> are not supported.</li>
--   <li>For tasks that use the <tt>task</tt> IPC mode, IPC namespace
--   related <tt>systemControls</tt> will apply to all containers within a
--   task.</li>
--   </ul>
--   
--   This parameter is not supported for Windows containers or tasks run on
--   Fargate.
--   
--   <a>$sel:containerDefinitions:TaskDefinition'</a>,
--   <a>taskDefinition_containerDefinitions</a> - A list of container
--   definitions in JSON format that describe the different containers that
--   make up your task. For more information about container definition
--   parameters and defaults, see <a>Amazon ECS Task Definitions</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:memory:TaskDefinition'</a>, <a>taskDefinition_memory</a> - The
--   amount (in MiB) of memory used by the task.
--   
--   If your tasks will be run on Amazon EC2 instances, you must specify
--   either a task-level memory value or a container-level memory value.
--   This field is optional and any value can be used. If a task-level
--   memory value is specified then the container-level memory value is
--   optional. For more information regarding container-level memory and
--   memory reservation, see <a>ContainerDefinition</a>.
--   
--   If your tasks will be run on Fargate, this field is required and you
--   must use one of the following values, which determines your range of
--   valid values for the <tt>cpu</tt> parameter:
--   
--   <ul>
--   <li>512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available <tt>cpu</tt>
--   values: 256 (.25 vCPU)</li>
--   <li>1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available
--   <tt>cpu</tt> values: 512 (.5 vCPU)</li>
--   <li>2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB),
--   7168 (7 GB), 8192 (8 GB) - Available <tt>cpu</tt> values: 1024 (1
--   vCPU)</li>
--   <li>Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 2048 (2 vCPU)</li>
--   <li>Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)
--   - Available <tt>cpu</tt> values: 4096 (4 vCPU)</li>
--   </ul>
--   
--   <a>$sel:proxyConfiguration:TaskDefinition'</a>,
--   <a>taskDefinition_proxyConfiguration</a> - The configuration details
--   for the App Mesh proxy.
--   
--   Your Amazon ECS container instances require at least version 1.26.0 of
--   the container agent and at least version 1.26.0-1 of the
--   <tt>ecs-init</tt> package to enable a proxy configuration. If your
--   container instances are launched from the Amazon ECS-optimized AMI
--   version <tt>20190301</tt> or later, then they contain the required
--   versions of the container agent and <tt>ecs-init</tt>. For more
--   information, see <a>Amazon ECS-optimized Linux AMI</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:taskRoleArn:TaskDefinition'</a>,
--   <a>taskDefinition_taskRoleArn</a> - The short name or full Amazon
--   Resource Name (ARN) of the Identity and Access Management role that
--   grants containers in the task permission to call Amazon Web Services
--   APIs on your behalf. For more information, see <a>Amazon ECS Task
--   Role</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   IAM roles for tasks on Windows require that the
--   <tt>-EnableTaskIAMRole</tt> option is set when you launch the Amazon
--   ECS-optimized Windows AMI. Your containers must also run some
--   configuration code in order to take advantage of the feature. For more
--   information, see <a>Windows IAM roles for tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:deregisteredAt:TaskDefinition'</a>,
--   <a>taskDefinition_deregisteredAt</a> - The Unix timestamp for when the
--   task definition was deregistered.
--   
--   <a>$sel:placementConstraints:TaskDefinition'</a>,
--   <a>taskDefinition_placementConstraints</a> - An array of placement
--   constraint objects to use for tasks.
--   
--   This parameter is not supported for tasks run on Fargate.
--   
--   <a>$sel:registeredAt:TaskDefinition'</a>,
--   <a>taskDefinition_registeredAt</a> - The Unix timestamp for when the
--   task definition was registered.
--   
--   <a>$sel:networkMode:TaskDefinition'</a>,
--   <a>taskDefinition_networkMode</a> - The Docker networking mode to use
--   for the containers in the task. The valid values are <tt>none</tt>,
--   <tt>bridge</tt>, <tt>awsvpc</tt>, and <tt>host</tt>. If no network
--   mode is specified, the default is <tt>bridge</tt>.
--   
--   For Amazon ECS tasks on Fargate, the <tt>awsvpc</tt> network mode is
--   required. For Amazon ECS tasks on Amazon EC2 Linux instances, any
--   network mode can be used. For Amazon ECS tasks on Amazon EC2 Windows
--   instances, <tt>&lt;default&gt;</tt> or <tt>awsvpc</tt> can be used. If
--   the network mode is set to <tt>none</tt>, you cannot specify port
--   mappings in your container definitions, and the tasks containers do
--   not have external connectivity. The <tt>host</tt> and <tt>awsvpc</tt>
--   network modes offer the highest networking performance for containers
--   because they use the EC2 network stack instead of the virtualized
--   network stack provided by the <tt>bridge</tt> mode.
--   
--   With the <tt>host</tt> and <tt>awsvpc</tt> network modes, exposed
--   container ports are mapped directly to the corresponding host port
--   (for the <tt>host</tt> network mode) or the attached elastic network
--   interface port (for the <tt>awsvpc</tt> network mode), so you cannot
--   take advantage of dynamic host port mappings.
--   
--   When using the <tt>host</tt> network mode, you should not run
--   containers using the root user (UID 0). It is considered best practice
--   to use a non-root user.
--   
--   If the network mode is <tt>awsvpc</tt>, the task is allocated an
--   elastic network interface, and you must specify a NetworkConfiguration
--   value when you create a service or run a task with the task
--   definition. For more information, see <a>Task Networking</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   If the network mode is <tt>host</tt>, you cannot run multiple
--   instantiations of the same task on a single container instance when
--   port mappings are used.
--   
--   For more information, see <a>Network settings</a> in the <i>Docker run
--   reference</i>.
--   
--   <a>$sel:taskDefinitionArn:TaskDefinition'</a>,
--   <a>taskDefinition_taskDefinitionArn</a> - The full Amazon Resource
--   Name (ARN) of the task definition.
--   
--   <a>$sel:compatibilities:TaskDefinition'</a>,
--   <a>taskDefinition_compatibilities</a> - The task launch types the task
--   definition validated against during task definition registration. For
--   more information, see <a>Amazon ECS launch types</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:registeredBy:TaskDefinition'</a>,
--   <a>taskDefinition_registeredBy</a> - The principal that registered the
--   task definition.
--   
--   <a>$sel:revision:TaskDefinition'</a>, <a>taskDefinition_revision</a> -
--   The revision of the task in a particular family. The revision is a
--   version number of a task definition in a family. When you register a
--   task definition for the first time, the revision is <tt>1</tt>. Each
--   time that you register a new revision of a task definition in the same
--   family, the revision value always increases by one, even if you have
--   deregistered previous revisions in this family.
--   
--   <a>$sel:volumes:TaskDefinition'</a>, <a>taskDefinition_volumes</a> -
--   The list of data volume definitions for the task. For more
--   information, see <a>Using data volumes in tasks</a> in the <i>Amazon
--   Elastic Container Service Developer Guide</i>.
--   
--   The <tt>host</tt> and <tt>sourcePath</tt> parameters are not supported
--   for tasks run on Fargate.
--   
--   <a>$sel:cpu:TaskDefinition'</a>, <a>taskDefinition_cpu</a> - The
--   number of <tt>cpu</tt> units used by the task. If you are using the
--   EC2 launch type, this field is optional and any value can be used. If
--   you are using the Fargate launch type, this field is required and you
--   must use one of the following values, which determines your range of
--   valid values for the <tt>memory</tt> parameter:
--   
--   <ul>
--   <li>256 (.25 vCPU) - Available <tt>memory</tt> values: 512 (0.5 GB),
--   1024 (1 GB), 2048 (2 GB)</li>
--   <li>512 (.5 vCPU) - Available <tt>memory</tt> values: 1024 (1 GB),
--   2048 (2 GB), 3072 (3 GB), 4096 (4 GB)</li>
--   <li>1024 (1 vCPU) - Available <tt>memory</tt> values: 2048 (2 GB),
--   3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192
--   (8 GB)</li>
--   <li>2048 (2 vCPU) - Available <tt>memory</tt> values: Between 4096 (4
--   GB) and 16384 (16 GB) in increments of 1024 (1 GB)</li>
--   <li>4096 (4 vCPU) - Available <tt>memory</tt> values: Between 8192 (8
--   GB) and 30720 (30 GB) in increments of 1024 (1 GB)</li>
--   </ul>
--   
--   <a>$sel:requiresAttributes:TaskDefinition'</a>,
--   <a>taskDefinition_requiresAttributes</a> - The container instance
--   attributes required by your task. When an Amazon EC2 instance is
--   registered to your cluster, the Amazon ECS container agent assigns
--   some standard attributes to the instance. You can apply custom
--   attributes, specified as key-value pairs using the Amazon ECS console
--   or the PutAttributes API. These attributes are used when considering
--   task placement for tasks hosted on Amazon EC2 instances. For more
--   information, see <a>Attributes</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   This parameter is not supported for tasks run on Fargate.
newTaskDefinition :: TaskDefinition

-- | An object representing a constraint on task placement in the task
--   definition. For more information, see <a>Task placement
--   constraints</a> in the <i>Amazon Elastic Container Service Developer
--   Guide</i>.
--   
--   Task placement constraints are not supported for tasks run on Fargate.
--   
--   <i>See:</i> <a>newTaskDefinitionPlacementConstraint</a> smart
--   constructor.
data TaskDefinitionPlacementConstraint
TaskDefinitionPlacementConstraint' :: Maybe Text -> Maybe TaskDefinitionPlacementConstraintType -> TaskDefinitionPlacementConstraint

-- | Create a value of <a>TaskDefinitionPlacementConstraint</a> with all
--   optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:expression:TaskDefinitionPlacementConstraint'</a>,
--   <a>taskDefinitionPlacementConstraint_expression</a> - A cluster query
--   language expression to apply to the constraint. For more information,
--   see <a>Cluster query language</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:type':TaskDefinitionPlacementConstraint'</a>,
--   <a>taskDefinitionPlacementConstraint_type</a> - The type of
--   constraint. The <tt>MemberOf</tt> constraint restricts selection to be
--   from a group of valid candidates.
newTaskDefinitionPlacementConstraint :: TaskDefinitionPlacementConstraint

-- | The overrides associated with a task.
--   
--   <i>See:</i> <a>newTaskOverride</a> smart constructor.
data TaskOverride
TaskOverride' :: Maybe [ContainerOverride] -> Maybe Text -> Maybe EphemeralStorage -> Maybe Text -> Maybe Text -> Maybe [InferenceAcceleratorOverride] -> Maybe Text -> TaskOverride

-- | Create a value of <a>TaskOverride</a> with all optional fields
--   omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:containerOverrides:TaskOverride'</a>,
--   <a>taskOverride_containerOverrides</a> - One or more container
--   overrides sent to a task.
--   
--   <a>$sel:executionRoleArn:TaskOverride'</a>,
--   <a>taskOverride_executionRoleArn</a> - The Amazon Resource Name (ARN)
--   of the task execution IAM role override for the task. For more
--   information, see <a>Amazon ECS task execution IAM role</a> in the
--   <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:ephemeralStorage:TaskOverride'</a>,
--   <a>taskOverride_ephemeralStorage</a> - The ephemeral storage setting
--   override for the task.
--   
--   This parameter is only supported for tasks hosted on Fargate using
--   platform version <tt>1.4.0</tt> or later.
--   
--   <a>$sel:memory:TaskOverride'</a>, <a>taskOverride_memory</a> - The
--   memory override for the task.
--   
--   <a>$sel:taskRoleArn:TaskOverride'</a>, <a>taskOverride_taskRoleArn</a>
--   - The Amazon Resource Name (ARN) of the IAM role that containers in
--   this task can assume. All containers in this task are granted the
--   permissions that are specified in this role. For more information, see
--   <a>IAM Role for Tasks</a> in the <i>Amazon Elastic Container Service
--   Developer Guide</i>.
--   
--   <a>$sel:inferenceAcceleratorOverrides:TaskOverride'</a>,
--   <a>taskOverride_inferenceAcceleratorOverrides</a> - The Elastic
--   Inference accelerator override for the task.
--   
--   <a>$sel:cpu:TaskOverride'</a>, <a>taskOverride_cpu</a> - The cpu
--   override for the task.
newTaskOverride :: TaskOverride

-- | Information about a set of Amazon ECS tasks in either an CodeDeploy or
--   an <tt>EXTERNAL</tt> deployment. An Amazon ECS task set includes
--   details such as the desired number of tasks, how many tasks are
--   running, and whether the task set serves production traffic.
--   
--   <i>See:</i> <a>newTaskSet</a> smart constructor.
data TaskSet
TaskSet' :: Maybe Int -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe POSIX -> Maybe Text -> Maybe Scale -> Maybe [LoadBalancer] -> Maybe POSIX -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe LaunchType -> Maybe POSIX -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe NetworkConfiguration -> Maybe [ServiceRegistry] -> Maybe [CapacityProviderStrategyItem] -> Maybe StabilityStatus -> Maybe [Tag] -> TaskSet

-- | Create a value of <a>TaskSet</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:runningCount:TaskSet'</a>, <a>taskSet_runningCount</a> - The
--   number of tasks in the task set that are in the <tt>RUNNING</tt>
--   status during a deployment. A task in the <tt>RUNNING</tt> state is
--   running and ready for use.
--   
--   <a>$sel:status:TaskSet'</a>, <a>taskSet_status</a> - The status of the
--   task set. The following describes each state:
--   
--   <ul>
--   <li><i>PRIMARY</i> The task set is serving production traffic.</li>
--   <li><i>ACTIVE</i> The task set is not serving production traffic.</li>
--   <li><i>DRAINING</i> The tasks in the task set are being stopped and
--   their corresponding targets are being deregistered from their target
--   group.</li>
--   </ul>
--   
--   <a>$sel:clusterArn:TaskSet'</a>, <a>taskSet_clusterArn</a> - The
--   Amazon Resource Name (ARN) of the cluster that the service that hosts
--   the task set exists in.
--   
--   <a>$sel:computedDesiredCount:TaskSet'</a>,
--   <a>taskSet_computedDesiredCount</a> - The computed desired count for
--   the task set. This is calculated by multiplying the service's
--   <tt>desiredCount</tt> by the task set's <tt>scale</tt> percentage. The
--   result is always rounded up. For example, if the computed desired
--   count is 1.2, it rounds up to 2 tasks.
--   
--   <a>$sel:createdAt:TaskSet'</a>, <a>taskSet_createdAt</a> - The Unix
--   timestamp for when the task set was created.
--   
--   <a>$sel:platformVersion:TaskSet'</a>, <a>taskSet_platformVersion</a> -
--   The Fargate platform version on which the tasks in the task set are
--   running. A platform version is only specified for tasks run on
--   Fargate. For more information, see <a>Fargate platform versions</a> in
--   the <i>Amazon Elastic Container Service Developer Guide</i>.
--   
--   <a>$sel:scale:TaskSet'</a>, <a>taskSet_scale</a> - A floating-point
--   percentage of the desired number of tasks to place and keep running in
--   the task set.
--   
--   <a>$sel:loadBalancers:TaskSet'</a>, <a>taskSet_loadBalancers</a> -
--   Details on a load balancer that is used with a task set.
--   
--   <a>$sel:stabilityStatusAt:TaskSet'</a>,
--   <a>taskSet_stabilityStatusAt</a> - The Unix timestamp for when the
--   task set stability status was retrieved.
--   
--   <a>$sel:pendingCount:TaskSet'</a>, <a>taskSet_pendingCount</a> - The
--   number of tasks in the task set that are in the <tt>PENDING</tt>
--   status during a deployment. A task in the <tt>PENDING</tt> state is
--   preparing to enter the <tt>RUNNING</tt> state. A task set enters the
--   <tt>PENDING</tt> status when it launches for the first time or when it
--   is restarted after being in the <tt>STOPPED</tt> state.
--   
--   <a>$sel:taskSetArn:TaskSet'</a>, <a>taskSet_taskSetArn</a> - The
--   Amazon Resource Name (ARN) of the task set.
--   
--   <a>$sel:startedBy:TaskSet'</a>, <a>taskSet_startedBy</a> - The tag
--   specified when a task set is started. If the task set is created by an
--   CodeDeploy deployment, the <tt>startedBy</tt> parameter is
--   <tt>CODE_DEPLOY</tt>. For a task set created for an external
--   deployment, the startedBy field isn't used.
--   
--   <a>$sel:id:TaskSet'</a>, <a>taskSet_id</a> - The ID of the task set.
--   
--   <a>$sel:launchType:TaskSet'</a>, <a>taskSet_launchType</a> - The
--   launch type the tasks in the task set are using. For more information,
--   see <a>Amazon ECS launch types</a> in the <i>Amazon Elastic Container
--   Service Developer Guide</i>.
--   
--   <a>$sel:updatedAt:TaskSet'</a>, <a>taskSet_updatedAt</a> - The Unix
--   timestamp for when the task set was last updated.
--   
--   <a>$sel:serviceArn:TaskSet'</a>, <a>taskSet_serviceArn</a> - The
--   Amazon Resource Name (ARN) of the service the task set exists in.
--   
--   <a>$sel:taskDefinition:TaskSet'</a>, <a>taskSet_taskDefinition</a> -
--   The task definition the task set is using.
--   
--   <a>$sel:externalId:TaskSet'</a>, <a>taskSet_externalId</a> - The
--   external ID associated with the task set.
--   
--   If a task set is created by an CodeDeploy deployment, the
--   <tt>externalId</tt> parameter contains the CodeDeploy deployment ID.
--   
--   If a task set is created for an external deployment and is associated
--   with a service discovery registry, the <tt>externalId</tt> parameter
--   contains the <tt>ECS_TASK_SET_EXTERNAL_ID</tt> Cloud Map attribute.
--   
--   <a>$sel:networkConfiguration:TaskSet'</a>,
--   <a>taskSet_networkConfiguration</a> - The network configuration for
--   the task set.
--   
--   <a>$sel:serviceRegistries:TaskSet'</a>,
--   <a>taskSet_serviceRegistries</a> - The details of the service
--   discovery registries to assign to this task set. For more information,
--   see <a>Service discovery</a>.
--   
--   <a>$sel:capacityProviderStrategy:TaskSet'</a>,
--   <a>taskSet_capacityProviderStrategy</a> - The capacity provider
--   strategy associated with the task set.
--   
--   <a>$sel:stabilityStatus:TaskSet'</a>, <a>taskSet_stabilityStatus</a> -
--   The stability status, which indicates whether the task set has reached
--   a steady state. If the following conditions are met, the task set will
--   be in <tt>STEADY_STATE</tt>:
--   
--   <ul>
--   <li>The task <tt>runningCount</tt> is equal to the
--   <tt>computedDesiredCount</tt>.</li>
--   <li>The <tt>pendingCount</tt> is <tt>0</tt>.</li>
--   <li>There are no tasks running on container instances in the
--   <tt>DRAINING</tt> status.</li>
--   <li>All tasks are reporting a healthy status from the load balancers,
--   service discovery, and container health checks.</li>
--   </ul>
--   
--   If any of those conditions are not met, the stability status returns
--   <tt>STABILIZING</tt>.
--   
--   <a>$sel:tags:TaskSet'</a>, <a>taskSet_tags</a> - The metadata that you
--   apply to the task set to help you categorize and organize them. Each
--   tag consists of a key and an optional value, both of which you define.
--   
--   The following basic restrictions apply to tags:
--   
--   <ul>
--   <li>Maximum number of tags per resource - 50</li>
--   <li>For each resource, each tag key must be unique, and each tag key
--   can have only one value.</li>
--   <li>Maximum key length - 128 Unicode characters in UTF-8</li>
--   <li>Maximum value length - 256 Unicode characters in UTF-8</li>
--   <li>If your tagging schema is used across multiple services and
--   resources, remember that other services may have restrictions on
--   allowed characters. Generally allowed characters are: letters,
--   numbers, and spaces representable in UTF-8, and the following
--   characters: + - = . _ : / @.</li>
--   <li>Tag keys and values are case-sensitive.</li>
--   <li>Do not use <tt>aws:</tt>, <tt>AWS:</tt>, or any upper or lowercase
--   combination of such as a prefix for either keys or values as it is
--   reserved for Amazon Web Services use. You cannot edit or delete tag
--   keys or values with this prefix. Tags with this prefix do not count
--   against your tags per resource limit.</li>
--   </ul>
newTaskSet :: TaskSet

-- | The container path, mount options, and size of the tmpfs mount.
--   
--   <i>See:</i> <a>newTmpfs</a> smart constructor.
data Tmpfs
Tmpfs' :: Maybe [Text] -> Text -> Int -> Tmpfs

-- | Create a value of <a>Tmpfs</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:mountOptions:Tmpfs'</a>, <a>tmpfs_mountOptions</a> - The list
--   of tmpfs volume mount options.
--   
--   Valid values: <tt>"defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev"
--   | "nodev" | "exec" | "noexec" | "sync" | "async" | "dirsync" |
--   "remount" | "mand" | "nomand" | "atime" | "noatime" | "diratime" |
--   "nodiratime" | "bind" | "rbind" | "unbindable" | "runbindable" |
--   "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" |
--   "relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" |
--   "uid" | "gid" | "nr_inodes" | "nr_blocks" | "mpol"</tt>
--   
--   <a>$sel:containerPath:Tmpfs'</a>, <a>tmpfs_containerPath</a> - The
--   absolute file path where the tmpfs volume is to be mounted.
--   
--   <a>$sel:size:Tmpfs'</a>, <a>tmpfs_size</a> - The maximum size (in MiB)
--   of the tmpfs volume.
newTmpfs :: Text -> Int -> Tmpfs

-- | The <tt>ulimit</tt> settings to pass to the container.
--   
--   Amazon ECS tasks hosted on Fargate use the default resource limit
--   values set by the operating system with the exception of the
--   <tt>nofile</tt> resource limit parameter which Fargate overrides. The
--   <tt>nofile</tt> resource limit sets a restriction on the number of
--   open files that a container can use. The default <tt>nofile</tt> soft
--   limit is <tt>1024</tt> and hard limit is <tt>4096</tt>.
--   
--   <i>See:</i> <a>newUlimit</a> smart constructor.
data Ulimit
Ulimit' :: UlimitName -> Int -> Int -> Ulimit

-- | Create a value of <a>Ulimit</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:name:Ulimit'</a>, <a>ulimit_name</a> - The <tt>type</tt> of
--   the <tt>ulimit</tt>.
--   
--   <a>$sel:softLimit:Ulimit'</a>, <a>ulimit_softLimit</a> - The soft
--   limit for the ulimit type.
--   
--   <a>$sel:hardLimit:Ulimit'</a>, <a>ulimit_hardLimit</a> - The hard
--   limit for the ulimit type.
newUlimit :: UlimitName -> Int -> Int -> Ulimit

-- | The Docker and Amazon ECS container agent version information about a
--   container instance.
--   
--   <i>See:</i> <a>newVersionInfo</a> smart constructor.
data VersionInfo
VersionInfo' :: Maybe Text -> Maybe Text -> Maybe Text -> VersionInfo

-- | Create a value of <a>VersionInfo</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:agentHash:VersionInfo'</a>, <a>versionInfo_agentHash</a> - The
--   Git commit hash for the Amazon ECS container agent build on the
--   <a>amazon-ecs-agent</a> GitHub repository.
--   
--   <a>$sel:agentVersion:VersionInfo'</a>, <a>versionInfo_agentVersion</a>
--   - The version number of the Amazon ECS container agent.
--   
--   <a>$sel:dockerVersion:VersionInfo'</a>,
--   <a>versionInfo_dockerVersion</a> - The Docker version running on the
--   container instance.
newVersionInfo :: VersionInfo

-- | A data volume used in a task definition. For tasks that use the Amazon
--   Elastic File System (Amazon EFS), specify an
--   <tt>efsVolumeConfiguration</tt>. For Windows tasks that use Amazon FSx
--   for Windows File Server file system, specify a
--   <tt>fsxWindowsFileServerVolumeConfiguration</tt>. For tasks that use a
--   Docker volume, specify a <tt>DockerVolumeConfiguration</tt>. For tasks
--   that use a bind mount host volume, specify a <tt>host</tt> and
--   optional <tt>sourcePath</tt>. For more information, see <a>Using Data
--   Volumes in Tasks</a>.
--   
--   <i>See:</i> <a>newVolume</a> smart constructor.
data Volume
Volume' :: Maybe DockerVolumeConfiguration -> Maybe FSxWindowsFileServerVolumeConfiguration -> Maybe Text -> Maybe EFSVolumeConfiguration -> Maybe HostVolumeProperties -> Volume

-- | Create a value of <a>Volume</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:dockerVolumeConfiguration:Volume'</a>,
--   <a>volume_dockerVolumeConfiguration</a> - This parameter is specified
--   when you are using Docker volumes.
--   
--   Windows containers only support the use of the <tt>local</tt> driver.
--   To use bind mounts, specify the <tt>host</tt> parameter instead.
--   
--   Docker volumes are not supported by tasks run on Fargate.
--   
--   <a>$sel:fsxWindowsFileServerVolumeConfiguration:Volume'</a>,
--   <a>volume_fsxWindowsFileServerVolumeConfiguration</a> - This parameter
--   is specified when you are using Amazon FSx for Windows File Server
--   file system for task storage.
--   
--   <a>$sel:name:Volume'</a>, <a>volume_name</a> - The name of the volume.
--   Up to 255 letters (uppercase and lowercase), numbers, underscores, and
--   hyphens are allowed. This name is referenced in the
--   <tt>sourceVolume</tt> parameter of container definition
--   <tt>mountPoints</tt>.
--   
--   <a>$sel:efsVolumeConfiguration:Volume'</a>,
--   <a>volume_efsVolumeConfiguration</a> - This parameter is specified
--   when you are using an Amazon Elastic File System file system for task
--   storage.
--   
--   <a>$sel:host:Volume'</a>, <a>volume_host</a> - This parameter is
--   specified when you are using bind mount host volumes. The contents of
--   the <tt>host</tt> parameter determine whether your bind mount host
--   volume persists on the host container instance and where it is stored.
--   If the <tt>host</tt> parameter is empty, then the Docker daemon
--   assigns a host path for your data volume. However, the data is not
--   guaranteed to persist after the containers associated with it stop
--   running.
--   
--   Windows containers can mount whole directories on the same drive as
--   <tt>$env:ProgramData</tt>. Windows containers cannot mount directories
--   on a different drive, and mount point cannot be across drives. For
--   example, you can mount <tt>C:\my\path:C:\my\path</tt> and
--   <tt>D:\:D:\</tt>, but not <tt>D:\my\path:C:\my\path</tt> or
--   <tt>D:\:C:\my\path</tt>.
newVolume :: Volume

-- | Details on a data volume from another container in the same task
--   definition.
--   
--   <i>See:</i> <a>newVolumeFrom</a> smart constructor.
data VolumeFrom
VolumeFrom' :: Maybe Text -> Maybe Bool -> VolumeFrom

-- | Create a value of <a>VolumeFrom</a> with all optional fields omitted.
--   
--   Use <a>generic-lens</a> or <a>optics</a> to modify other optional
--   fields.
--   
--   The following record fields are available, with the corresponding
--   lenses provided for backwards compatibility:
--   
--   <a>$sel:sourceContainer:VolumeFrom'</a>,
--   <a>volumeFrom_sourceContainer</a> - The name of another container
--   within the same task definition from which to mount volumes.
--   
--   <a>$sel:readOnly:VolumeFrom'</a>, <a>volumeFrom_readOnly</a> - If this
--   value is <tt>true</tt>, the container has read-only access to the
--   volume. If this value is <tt>false</tt>, then the container can write
--   to the volume. The default value is <tt>false</tt>.
newVolumeFrom :: VolumeFrom
